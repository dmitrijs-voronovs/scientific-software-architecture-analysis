quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability,"nd classes the user has defined. Other; values are ""regression"", ""classification"" and ""multiclass"" for; the forthcoming multiclass classification.; Missing regression evaluation plots for training sample were; added. On Cut method:. Removed obsolete option ""FVerySmart"" from Cuts method. On MLP method:; ; Display of convergence information in the progress bar for MLP during training. Creation of animated gifs for MLP convergence monitoring (please; contact authors if you want to do this). On Datasets: . Checks are performed if events are unvoluntarily cut by using a; non-filled array entry (e.g. ""arr[4]"" is used, when the array; has not always at least 5 entries). A warning is given in that; case.; Bug fixes. Spectators and Targets could not be used with by-hand assignment of events.; Corrected types (training/testing) for assigning single events.; Changed message from FATAL to WARNING when the user requests more events for ; training or testing than available.; Fixed bug which caused TMVA to crash if the number of input variables exceeded ; the allowed maximum for generating scatter plots.; Prevent TMVA from crashing when running with an empty TTree or TChain.; A variable expression like ""Alt$(arr[3],0)"" can now be used; to give a default value for a variable if for some events the; array don't contain enough elements (e.g. in two jet events,; sometimes only one jet is found and thus, the array jetPt[] has; only one entry in that cases).; Plot ranges for scatter-plots showing the transformed events are now correct.; User defined training/testing-trees are now handled correctly.; Fix bug in correlation computation for regression.; Consistent use of variable labels (for the log output) and variable titles (in histograms).; Drawing of variable labels in network architecture display for regression mode has been added.; Bug fixes to Cuts which improves performance on datasets with many variables.; Bug fix in GaussTransformation which improves handling of gaussian tails. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html:3706,test,testing-trees,3706,tmva/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html,2,"['log', 'test']","['log', 'testing-trees']"
Testability,"nd compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2934,benchmark,benchmark,2934,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark']
Testability,"nd easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well as a GitHub Actions CI workflow tests PRs automatically; only a; [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.; The results are posted to the pull request.; Compared to ROOT's nightly builds, PRs are tested with less tests, on less platforms.; - *Formatting check*: `clang-format` automatically checks that a PR; [follows](https://github.com/root-project/root/blob/master/.clang-format) ROOT's; [coding conventions](https://root.cern/contribute/coding_conventions/).; If coding violations are found, it provides you with a `patch` output that you likely want to apply to your PR.; - *Simple Static Analysis*: PRs are analyzed using [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/). Typically, PRs must pass all these tests; we will ask you to fix any issues that may arise.; Some tests are run only outside the PR testing system:; we might come back to you with additional reports after your contribution was merged. Thank you for reading this; and even more: thank you :bouquet: for considering to contribute!; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:7163,test,tested,7163,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,5,['test'],"['tested', 'testing', 'tests']"
Testability,"nd exception; behavior as described above. Semantics:; """""""""""""""""""". This function returns the same values as the libm ``exp`` functions; would, and handles error conditions in the same way. '``llvm.experimental.constrained.exp2``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare <type>; @llvm.experimental.constrained.exp2(<type> <op1>,; metadata <rounding mode>,; metadata <exception behavior>). Overview:; """""""""""""""""". The '``llvm.experimental.constrained.exp2``' intrinsic computes the base-2; exponential of the specified value. Arguments:; """""""""""""""""""". The first argument and the return value are floating-point numbers of the same; type. The second and third arguments specify the rounding mode and exception; behavior as described above. Semantics:; """""""""""""""""""". This function returns the same values as the libm ``exp2`` functions; would, and handles error conditions in the same way. '``llvm.experimental.constrained.log``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare <type>; @llvm.experimental.constrained.log(<type> <op1>,; metadata <rounding mode>,; metadata <exception behavior>). Overview:; """""""""""""""""". The '``llvm.experimental.constrained.log``' intrinsic computes the base-e; logarithm of the specified value. Arguments:; """""""""""""""""""". The first argument and the return value are floating-point numbers of the same; type. The second and third arguments specify the rounding mode and exception; behavior as described above. Semantics:; """""""""""""""""""". This function returns the same values as the libm ``log`` functions; would, and handles error conditions in the same way. '``llvm.experimental.constrained.log10``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare <type>; @llvm.experimental.constrained.log10(<type> <op1>,; metadata <rounding mode>,; metadata <exception behavior>). Overview:; """""""""""""""""". The '``llvm.experimental.constrained.log10``' intrins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:896998,log,log,896998,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"nd flushed. To use FDR mode; on your application, you may set the ``xray_mode`` variable to ``xray-fdr`` in; the ``XRAY_OPTIONS`` environment variable. Additional options to the FDR mode; implementation can be provided in the ``XRAY_FDR_OPTIONS`` environment; variable. Programmatic configuration can be done by calling; ``__xray_log_init_mode(""xray-fdr"", <configuration string>)`` once it has been; selected/installed. When the buffers are flushed to disk, the result is a binary trace format; described by `XRay FDR format <XRayFDRFormat.html>`_. When FDR mode is on, it will keep writing and recycling memory buffers until; the logging implementation is finalized -- at which point it can be flushed and; re-initialised later. To do this programmatically, we follow the workflow; provided below:. .. code-block:: c++. // Patch the sleds, if we haven't yet.; auto patch_status = __xray_patch();. // Maybe handle the patch_status errors. // When we want to flush the log, we need to finalize it first, to give; // threads a chance to return buffers to the queue.; auto finalize_status = __xray_log_finalize();; if (finalize_status != XRAY_LOG_FINALIZED) {; // maybe retry, or bail out.; }. // At this point, we are sure that the log is finalized, so we may try; // flushing the log.; auto flush_status = __xray_log_flushLog();; if (flush_status != XRAY_LOG_FLUSHED) {; // maybe retry, or bail out.; }. The default settings for the FDR mode implementation will create logs named; similarly to the basic log implementation, but will have a different log; format. All the trace analysis tools (and the trace reading library) will; support all versions of the FDR mode format as we add more functionality and; record types in the future. **NOTE:** We do not promise perpetual support for when we update the log; versions we support going forward. Deprecation of the formats will be; announced and discussed on the developers mailing list. Trace Analysis Tools; --------------------. We currently have the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:10136,log,log,10136,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['log']
Testability,"nd it much easier than the C syntax.; > In either case, I would have to look up an example to write pointers to; > member functions. I would argue that because the lexical structure of the language is self; consistent, any person who spent a significant amount of time programming; in LLVM directly would understand how to do it without looking it up in a; manual. The reason this does not work for C is because you rarely have to; declare these pointers, and the syntax is inconsistent with the method; declaration and calling syntax. > But pointers to member functions are nowhere near as common as arrays. Very true. If you're implementing an object oriented language, however,; remember that you have to do all the pointer to member function stuff; yourself.... so every time you invoke a virtual method one is involved; (instead of having C++ hide it for you behind ""syntactic sugar""). > And the old array syntax:; > type [ int, int, ...]; > is just much more familiar and clear to people than anything new you; > introduce, no matter how logical it is. . Erm... excuse me but how is this the ""old array syntax""? If you are; arguing for consistency with C, you should be asking for 'type int []',; which is significantly different than the above (beside the above; introduces a new operator and duplicates information; needlessly). Basically what I am suggesting is exactly the above without; the fluff. So instead of:. type [ int, int, ...]. you use:. type [ int ]. > Introducing a new syntax that may; > make function pointers easier but makes arrays much more difficult seems; > very risky to me. This is not about function pointers. This is about consistency in the; type system, and consistency with the rest of the language. The point; above does not make arrays any more difficult to use, and makes the; structure of types much more obvious than the ""c way"". > > In my opinion, it is critically important to have clear and concise type; > > specifications, because types are going to be a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt:2640,log,logical,2640,interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp4.txt,1,['log'],['logical']
Testability,"nd line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside intermediate; function calls that have returned by the time the bug was found and contain; no interesting pieces. Usually it is up to the checkers to produce more; interesting pieces by adding custom BugReporterVisitor objects.; However, you can disable path pruning while debugging with the; -analyzer-config prune-paths=false option. Visualizing the Analysis; To dump the AST, which often helps understanding how the program should; behave:. $ clang -cc1 -ast-dump test.c. To view/dum",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:20141,test,test,20141,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"nd optimized as; such. When OFF it is instead replaced with a guaranteed ""trap"". **LLVM_APPEND_VC_REV**:BOOL; Embed version control revision info (Git revision id).; The version info is provided by the ``LLVM_REVISION`` macro in; ``llvm/include/llvm/Support/VCSRevision.h``. Developers using git who don't; need revision info can disable this option to avoid re-linking most binaries; after a branch switch. Defaults to ON. **LLVM_FORCE_VC_REVISION**:STRING; Force a specific Git revision id rather than calling to git to determine it.; This is useful in environments where git is not available or non-functional; but the VC revision is available through other means. **LLVM_FORCE_VC_REPOSITORY**:STRING; Set the git repository to include in version info rather than calling git to; determine it. **LLVM_BUILD_32_BITS**:BOOL; Build 32-bit executables and libraries on 64-bit systems. This option is; available only on some 64-bit Unix systems. Defaults to OFF. **LLVM_BUILD_BENCHMARKS**:BOOL; Adds benchmarks to the list of default targets. Defaults to OFF. **LLVM_BUILD_DOCS**:BOOL; Adds all *enabled* documentation targets (i.e. Doxgyen and Sphinx targets) as; dependencies of the default build targets. This results in all of the (enabled); documentation targets being as part of a normal build. If the ``install``; target is run then this also enables all built documentation targets to be; installed. Defaults to OFF. To enable a particular documentation target, see; see LLVM_ENABLE_SPHINX and LLVM_ENABLE_DOXYGEN. **LLVM_BUILD_EXAMPLES**:BOOL; Build LLVM examples. Defaults to OFF. Targets for building each example are; generated in any case. See documentation for *LLVM_BUILD_TOOLS* above for more; details. **LLVM_BUILD_INSTRUMENTED_COVERAGE**:BOOL; If enabled, `source-based code coverage; <https://clang.llvm.org/docs/SourceBasedCodeCoverage.html>`_ instrumentation; is enabled while building llvm. If CMake can locate the code coverage; scripts and the llvm-cov and llvm-profdata tools t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:13958,benchmark,benchmarks,13958,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['benchmark'],['benchmarks']
Testability,"nd, unless requested not to, executed on the; host subtarget. The time taken (resp. resource usage) is measured using; hardware performance counters. The result is printed out as YAML; to the standard output. The main goal of this tool is to automatically (in)validate the LLVM's TableDef; scheduling models. To that end, we also provide analysis of the results. :program:`llvm-exegesis` can also benchmark arbitrary user-provided code; snippets. SUPPORTED PLATFORMS; -------------------. :program:`llvm-exegesis` currently only supports X86 (64-bit only), ARM (AArch64; only), MIPS, and PowerPC (PowerPC64LE only) on Linux for benchmarking. Not all; benchmarking functionality is guaranteed to work on every platform.; :program:`llvm-exegesis` also has a separate analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern used to fill the register. If it is a; value smaller than the register, it is sign extended to match the size of the; register.; * `LLVM-EXEGESIS-LIVEIN <register name>` - This annotation allows specifying; registers that should keep their value upon starting the benchmark. Values; can be passed through registers from the benchmarking setup in some cases.; The registers and the values assigned to them that can be utilized in the; benc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:1664,benchmark,benchmarking,1664,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"nd-user; bindings package from a CMake-based project build.; The bindings generated by rootcling, are 'raw' in the sense that:. * The .cpp file be compiled. The required compilation steps are; platform-dependent.; * The bindings are not packaged for distribution. Typically, users expect; to have a pip-compatible package.; * The binding are in the 'cppyy.gbl' namespace. This is an inconvenience at; best for users who might expect C++ code from KF5::Config to appear in; Python via ""import KF5.Config"".; * The bindings are loaded lazily, which limits the discoverability of the; content of the bindings.; * ``cppyy`` supports customization of the bindings via 'Pythonization' but; there is no automated way to load them. These issues are addressed by the CMake support. This is a blend of Python; packaging and CMake where CMake provides:. * Platform-independent scripting of the creation of a Python 'wheel' package; for the bindings.; * An facility for CMake-based projects to automate the entire bindings; generation process, including basic automated tests. .. note::. The JIT needs to resolve linker symbols in order to call them through; generated wrappers.; Thus, any classes, functions, and data that will be used in Python need; to be exported.; This is the default behavior on Mac and Linux, but not on Windows.; On that platform, use ``__declspec(dllexport)`` to explicitly export the; classes and function you expect to call.; CMake has simple `support for exporting all`_ C++ symbols. Python packaging; ----------------. Modern Python packaging usage is based on the 'wheel'. This is places the onus; on the creation of binary artifacts in the package on the distributor. In this; case, this includes the platform-dependent steps necessary to compile the .cpp; file. The generated package also takes advantage of the __init__.py load-time; mechanism to enhance the bindings:. * The bindings are rehosted in a ""native"" namespace so that C++ code from; KF5::Config appears in Python via ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst:1177,test,tests,1177,bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,1,['test'],['tests']
Testability,"nd48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: call to 'pthread_once' uses the local variable; }. void test() {; void *p = malloc(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = calloc(0, 42); // warn: allocation size of 0 bytes; }. void test() {; void *p = malloc(1);; p = realloc(p, 0); // warn: allocation size of 0 bytes; }. void test() {; void *p = alloca(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = valloc(0); // warn: allocation size of 0 bytes; }. unix.Malloc; (C); Check for memory leaks, double free, and use-after-free and offset problems; involving malloc. void test() {; int *p = malloc(1);; free(p);; free(p); // warn: attempt to free released memory; }. void test() {; int *p = malloc(sizeof(int));; free(p);; *p = 1; // warn: use after free; }. void test() {; int *p = malloc(1);; if (p); return; // warn: ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:23465,test,test,23465,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ndeclared identifier 'F'}}. The verifier will recognize ``foo-error`` and ``bar-error`` as special comments; but will not recognize ``expected-error`` as one because the ``-verify`` line; does not contain that as a prefix. Thus, this test would fail verification; because an unexpected diagnostic would appear on the declaration of ``E``. Multiple occurrences accumulate prefixes. For example,; ``-verify -verify=foo,bar -verify=baz`` is equivalent to; ``-verify=expected,foo,bar,baz``. Specifying Diagnostics; ^^^^^^^^^^^^^^^^^^^^^^; Indicating that a line expects an error or a warning is easy. Put a comment; on the line that has the diagnostic, use; ``expected-{error,warning,remark,note}`` to tag if it's an expected error,; warning, remark, or note (respectively), and place the expected text between; ``{{`` and ``}}`` markers. The full text doesn't have to be included, only; enough to ensure that the correct diagnostic was emitted. (Note: full text; should be included in test cases unless there is a compelling reason to use; truncated text instead.). For a full description of the matching behavior, including more complex; matching scenarios, see :ref:`matching <DiagnosticMatching>` below. Here's an example of the most commonly used way to specify expected; diagnostics:. .. code-block:: c++. int A = B; // expected-error {{use of undeclared identifier 'B'}}. You can place as many diagnostics on one line as you wish. To make the code; more readable, you can use slash-newline to separate out the diagnostics. Alternatively, it is possible to specify the line on which the diagnostic; should appear by appending ``@<line>`` to ``expected-<type>``, for example:. .. code-block:: c++. #warning some text; // expected-warning@10 {{some text}}. The line number may be absolute (as above), or relative to the current line by; prefixing the number with either ``+`` or ``-``. If the diagnostic is generated in a separate file, for example in a shared; header file, it may be beneficial to be",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:157329,test,test,157329,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"ndeterminism-PointerSorting:. alpha.nondeterminism.PointerSorting (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for non-determinism caused by sorting of pointers. .. code-block:: c. void test() {; int a = 1, b = 2;; std::vector<int *> V = {&a, &b};; std::sort(V.begin(), V.end()); // warn; }. alpha.WebKit; ^^^^^^^^^^^^. .. _alpha-webkit-UncountedCallArgsChecker:. alpha.webkit.UncountedCallArgsChecker; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; The goal of this rule is to make sure that lifetime of any dynamically allocated ref-countable object passed as a call argument spans past the end of the call. This applies to call to any function, method, lambda, function pointer or functor. Ref-countable types aren't supposed to be allocated on stack so we check arguments for parameters of raw pointers and references to uncounted types. Here are some examples of situations that we warn about as they *might* be potentially unsafe. The logic is that either we're able to guarantee that an argument is safe or it's considered if not a bug then bug-prone. .. code-block:: cpp. RefCountable* provide_uncounted();; void consume(RefCountable*);. // In these cases we can't make sure callee won't directly or indirectly call `deref()` on the argument which could make it unsafe from such point until the end of the call. void foo1() {; consume(provide_uncounted()); // warn; }. void foo2() {; RefCountable* uncounted = provide_uncounted();; consume(uncounted); // warn; }. Although we are enforcing member variables to be ref-counted by `webkit.NoUncountedMemberChecker` any method of the same class still has unrestricted access to these. Since from a caller's perspective we can't guarantee a particular member won't get modified by callee (directly or indirectly) we don't consider values obtained from members safe. Note: It's likely this heuristic could be made more precise with fewer false positives - for example calls to free functions that don't have any parameter other than the pointer ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:81443,log,logic,81443,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['log'],['logic']
Testability,"ndition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` datatype. A DAG node consists of an operator and zero or more; arguments (or operands). Each argument can be of any desired type. By using; another DAG node as an argument, an arbitrary graph of DAG nodes can be; built. The syntax of a ``dag`` instance is:. ``(`` *operator* *argument1*\ ``,`` *argument2*\ ``,`` ... ``)``. The operator must be present and must be a record. There can be zero or more; arguments, separated by commas. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:50096,assert,assert,50096,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,ndomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1988,test,testPyAdaBoostMulticlass,1988,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,2,['test'],['testPyAdaBoostMulticlass']
Testability,"ne profiler, ittnotify must be available.; target_include_directories(VectorisedPDFTests PUBLIC ""${VTUNE_DIR}/include/""); target_link_libraries(VectorisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testD",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1280,test,testLandau,1280,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,2,['test'],['testLandau']
Testability,"ne.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:5695,test,tests,5695,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['tests']
Testability,ne:`0%`; * - clang/tools/clang-import-test; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-linker-wrapper; - `3`; - `2`; - `1`; - :part:`66%`; * - clang/tools/clang-nvlink-wrapper; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-offload-bundler; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/tools/clang-offload-wrapper; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-pseudo; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-refactor; - `4`; - `4`; - `0`; - :good:`100%`; * - clang/tools/clang-rename; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-repl; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-scan-deps; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/clang-shlib; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/tools/diagtool; - `9`; - `0`; - `9`; - :none:`0%`; * - clang/tools/driver; - `4`; - `1`; - `3`; - :part:`25%`; * - clang/tools/libclang; - `35`; - `5`; - `30`; - :part:`14%`; * - clang/tools/scan-build-py/tests/functional/src/include; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/unittests/Analysis; - `6`; - `2`; - `4`; - :part:`33%`; * - clang/unittests/Analysis/FlowSensitive; - `14`; - `13`; - `1`; - :part:`92%`; * - clang/unittests/AST; - `30`; - `8`; - `22`; - :part:`26%`; * - clang/unittests/ASTMatchers; - `6`; - `3`; - `3`; - :part:`50%`; * - clang/unittests/ASTMatchers/Dynamic; - `3`; - `0`; - `3`; - :none:`0%`; * - clang/unittests/Basic; - `8`; - `4`; - `4`; - :part:`50%`; * - clang/unittests/CodeGen; - `6`; - `1`; - `5`; - :part:`16%`; * - clang/unittests/CrossTU; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/unittests/DirectoryWatcher; - `1`; - `0`; - `1`; - :none:`0%`; * - clang/unittests/Driver; - `5`; - `1`; - `4`; - :part:`20%`; * - clang/unittests/Format; - `24`; - `24`; - `0`; - :good:`100%`; * - clang/unittests/Frontend; - `11`; - `7`; - `4`; - :part:`63%`; * - clang/unittests/Index; - `1`; - `1`; - `0`; - :good:`100%`; * - clang/unittests/Interpreter; - `2`; - `2`; - `0,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:12767,test,tests,12767,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,ne:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26498,test,tests,26498,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"necessarily meant to pass on all architectures all the time. This is; due to the nature of the result checking, which relies on direct comparison,; and most of the time, the failures are related to bad output checking, rather; than bad code generation. If the errors are in LLVM itself, please report every single regression found; as blocker, and all the other bugs as important, but not necessarily blocking; the release to proceed. They can be set as ""known failures"" and to be; fix on a future date. .. _pre-release-process:. Pre-Release Process; ===================. .. contents::; :local:. When the release process is announced on the mailing list, you should prepare; for the testing, by applying the same testing you'll do on the release; candidates, on the previous release. You should:. * Download the previous release sources from; https://llvm.org/releases/download.html. * Run the test-release.sh script on ``final`` mode (change ``-rc 1`` to; ``-final``). * Once all three stages are done, it'll test the final stage. * Using the ``Phase3/Release+Asserts/llvmCore-MAJ.MIN-final.install`` base,; run the test-suite. If the final phase's ``make check-all`` failed, it's a good idea to also test; the intermediate stages by going on the obj directory and running; ``make check-all`` to find if there's at least one stage that passes (helps; when reducing the error for bug report purposes). .. _release-process:. Release Process; ===============. .. contents::; :local:. When the Release Manager sends you the release candidate, download all sources,; unzip on the same directory (there will be sym-links from the appropriate places; to them), and run the release test as above. You should:. * Download the current candidate sources from where the release manager points; you (ex. https://llvm.org/pre-releases/3.3/rc1/). * Repeat the steps above with ``-rc 1``, ``-rc 2`` etc modes and run the; test-suite the same way. * Compare the results, report all errors on Bugzilla and publish the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:5251,test,test,5251,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test']
Testability,"ned binary operators. This builds a lot on; the previous framework we built for other operators. Adding unary; operators is a bit more challenging, because we don't have any framework; for it yet - let's see what it takes. User-defined Unary Operators; ============================. Since we don't currently support unary operators in the Kaleidoscope; language, we'll need to add everything to support them. Above, we added; simple support for the 'unary' keyword to the lexer. In addition to; that, we need an AST node:. .. code-block:: c++. /// UnaryExprAST - Expression class for a unary operator.; class UnaryExprAST : public ExprAST {; char Opcode;; std::unique_ptr<ExprAST> Operand;. public:; UnaryExprAST(char Opcode, std::unique_ptr<ExprAST> Operand); : Opcode(Opcode), Operand(std::move(Operand)) {}. Value *codegen() override;; };. This AST node is very simple and obvious by now. It directly mirrors the; binary operator AST node, except that it only has one child. With this,; we need to add the parsing logic. Parsing a unary operator is pretty; simple: we'll add a new function to do it:. .. code-block:: c++. /// unary; /// ::= primary; /// ::= '!' unary; static std::unique_ptr<ExprAST> ParseUnary() {; // If the current token is not an operator, it must be a primary expr.; if (!isascii(CurTok) || CurTok == '(' || CurTok == ','); return ParsePrimary();. // If this is a unary operator, read it.; int Opc = CurTok;; getNextToken();; if (auto Operand = ParseUnary()); return std::make_unique<UnaryExprAST>(Opc, std::move(Operand));; return nullptr;; }. The grammar we add is pretty straightforward here. If we see a unary; operator when parsing a primary operator, we eat the operator as a; prefix and parse the remaining piece as another unary operator. This; allows us to handle multiple unary operators (e.g. ""!!x""). Note that; unary operators can't have ambiguous parses like binary operators can,; so there is no need for precedence information. The problem with this function, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:11116,log,logic,11116,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['log'],['logic']
Testability,"need Clang and supporting libraries, you'll want; to build the ``all`` target (e.g. ``ninja all`` or ``make -j4 all``). 2. Configure a Clang build as above, but add the following CMake args:. - ``-DLLVM_BUILD_INSTRUMENTED=IR`` -- This causes us to build everything; with instrumentation.; - ``-DLLVM_BUILD_RUNTIME=No`` -- A few projects have bad interactions when; built with profiling, and aren't necessary to build. This flag turns them; off.; - ``-DCMAKE_C_COMPILER=/path/to/stage1/clang`` - Use the Clang we built in; step 1.; - ``-DCMAKE_CXX_COMPILER=/path/to/stage1/clang++`` - Same as above. In this build directory, you simply need to build the ``clang`` target (and; whatever supporting tooling your benchmark requires). 3. As mentioned above, this has two steps: gathering profile data, and then; massaging it into a useful form:. a. Build your benchmark using the Clang generated in step 2. The 'standard'; benchmark recommended is to run ``check-clang`` and ``check-llvm`` in your; instrumented Clang's build directory, and to do a full build of Clang/LLVM; using your instrumented Clang. So, create yet another build directory,; with the following CMake arguments:. - ``-DCMAKE_C_COMPILER=/path/to/stage2/clang`` - Use the Clang we built in; step 2.; - ``-DCMAKE_CXX_COMPILER=/path/to/stage2/clang++`` - Same as above. If your users are fans of debug info, you may want to consider using; ``-DCMAKE_BUILD_TYPE=RelWithDebInfo`` instead of; ``-DCMAKE_BUILD_TYPE=Release``. This will grant better coverage of; debug info pieces of clang, but will take longer to complete and will; result in a much larger build directory. It's recommended to build the ``all`` target with your instrumented Clang,; since more coverage is often better. b. You should now have a few ``*.profraw`` files in; ``path/to/stage2/profiles/``. You need to merge these using; ``llvm-profdata`` (even if you only have one! The profile merge transforms; profraw into actual profile data, as well). This can be done with;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:4779,benchmark,benchmark,4779,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['benchmark'],['benchmark']
Testability,"nel using the program objects is executed.; In OpenCL versions earlier than v2.2 there is no support for invoking global; constructors. However, an easy workaround is to manually enqueue the; constructor initialization kernel that has the following name scheme; ``_GLOBAL__sub_I_<compiled file name>``.; This kernel is only present if there are global objects with non-trivial; constructors present in the compiled binary. One way to check this is by; passing ``CL_PROGRAM_KERNEL_NAMES`` to ``clGetProgramInfo`` (OpenCL v2.0; s5.8.7) and then checking whether any kernel name matches the naming scheme of; global constructor initialization kernel above. Note that if multiple files are compiled and linked into libraries, multiple; kernels that initialize global objects for multiple modules would have to be; invoked. Applications are currently required to run initialization of global objects; manually before running any kernels in which the objects are used. .. code-block:: console. clang -cl-std=clc++ test.cl. If there are any global objects to be initialized, the final binary will; contain the ``_GLOBAL__sub_I_test.cl`` kernel to be enqueued. Note that the manual workaround only applies to objects declared at the; program scope. There is no manual workaround for the construction of static; objects with non-trivial constructors inside functions. Global destructors can not be invoked manually in the OpenCL v2.0 drivers.; However, all memory used for program scope objects should be released on; ``clReleaseProgram``. Libraries; ^^^^^^^^^; Limited experimental support of C++ standard libraries for OpenCL is; described in :doc:`OpenCLSupport` page. .. _target_features:. Target-Specific Features and Limitations; ========================================. CPU Architectures Features and Limitations; ------------------------------------------. X86; ^^^. The support for X86 (both 32-bit and 64-bit) is considered stable on; Darwin (macOS), Linux, FreeBSD, and Dragonfly BSD: it has been ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:155726,test,test,155726,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"nes in a ``.ll`` file:. .. code-block:: llvm. ; RUN: llvm-as < %s | llvm-dis > %t1; ; RUN: llvm-dis < %s.bc-13 > %t2; ; RUN: diff %t1 %t2. As with a Unix shell, the RUN lines permit pipelines and I/O; redirection to be used. There are some quoting rules that you must pay attention to when writing; your RUN lines. In general nothing needs to be quoted. :program:`lit` won't; strip off any quote characters so they will get passed to the invoked program.; To avoid this use curly braces to tell :program:`lit` that it should treat; everything enclosed as one value. In general, you should strive to keep your RUN lines as simple as possible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:10953,test,tests,10953,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,"newly introduced tuple-initialization; ```python; myHisto = myTdf.Histo1D(('histName', 'histTitle', 64, 0, 128), 'myColumn'); ```; - Add support for friend trees and chains. Just add the friends before passing the tree/chain to TDataFrame's constructor and refer to friend branches as usual. #### Fixes; - Fixed race condition: concurrent deletion of TTreeReader/TTreeReaderValue; - Fixed reading of c-style arrays from jitted transformations and actions; - Fixed writing of c-style arrays with `Snapshot`; - Improved checks for column name validity (throw if column does not exist and if `Define`d column overrides an already existing column). #### Other changes; - Improved documentation; - TDF now avoids performing virtual calls for parts of the analysis that are not jitted; - Removed ""custom column"" nodes from the internal functional graph therewith optimising its traversal; - Improvements in Cling drastically enhanced scaling and performance of TDF jitted code; - Test coverage has been increased with the introduction of google tests; - Interface change: users must now use TDF::TArrayBranch rather than std::array\_view to specify that the column being read is a c-style array TTree branch; - Interface change: `Min` and `Max` now return results as the same type specified as template parameter, or double if no template parameter was specified. ## Histogram Libraries; - Histogram-based fits are implicitly parallelized.; - Added new options to the histogram fitting interfaces to support explicit parallelization of the fit as well.; - `TF1` gradient evaluation supports vectorization.; - Refactor of `TF1` constructors, default initialization of its data members and fixed ambiguous TF1::operator().; - Extend `TFormula` parsing capabilities.; - The parsing of arguments for defining parametric function is improved. For example a Gaussian function in y can be defined as `gaus( y , [A], [Mean], [Sigma])`.; - One can define the function variables or parameters using another function o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:15455,test,tests,15455,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['test'],['tests']
Testability,"ng LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and cause race conditions between tests. Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary. Example: ``/home/user/llvm.build/test/MC/ELF/Output``. ``%{pathsep}``. Expands to the path separator, i.e. ``:`` (or ``;`` on Windows). ``${fs-src-root}``; Expands to the root component of file system paths for the source directory,; i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on Windows. ``${fs-tmp-root}``; Expands to the root component of file system paths for the test's temporary; directory, i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on; Windows. ``${fs-sep}``; Expands to the file system separator, i.e. ``/`` or ``\`` on Windows. ``%/s, %/S, %/t, %/T``. Act like the corresponding substitution above but replace any ``\``; character with a ``/``. This is useful to normalize path separators. Example: ``%s: C:\Desktop Files/foo_test.s.tmp``. Example: ``%/s: C:/Desktop Files/foo_test.s.tmp``. ``%{s:real}, %{S:real}, %{t:real}, %{T:real}``; ``%{/s:real}, %{/S:real}, %{/t:real}, %{/T:real}``. Act like the corresponding substitution, including with ``/``, but use; the real path by expanding all symbolic ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:24730,test,test,24730,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ng Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will nee",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:5588,test,tests,5588,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],"['test', 'tests']"
Testability,"ng a revision for the current commit in your local; repository is to run:. ::. arc diff HEAD~. Sometime you may want to create a draft revision to show the proof of concept; or for experimental purposes, In that case you can use the `--draft` option. It; will create a new draft revision. The good part is: it will not send mail to; llvm-commit mailing list, patch reviewers, and all other subscribers, buildbot; will also run on every patch update:. ::. arc diff --draft HEAD~. If you later update your commit message, you need to add the `--verbatim`; option to have `arc` update the description on Phabricator:. ::. arc diff --edit --verbatim. .. _phabricator-request-review-web:. Requesting a review via the web interface; -----------------------------------------. The tool to create and review patches in Phabricator is called; *Differential*. Note that you can upload patches created through git, but using `arc` on the; command line (see previous section) is preferred: it adds more metadata to; Phabricator which are useful for the pre-merge testing system and for; propagating attribution on commits when someone else has to push it for you. To make reviews easier, please always include **as much context as; possible** with your diff! Don't worry, Phabricator; will automatically send a diff with a smaller context in the review; email, but having the full file in the web interface will help the; reviewer understand your code. To get a full diff, use one of the following commands (or just use Arcanist; to upload your patch):. * ``git show HEAD -U999999 > mypatch.patch``; * ``git diff -U999999 @{u} > mypatch.patch``; * ``git diff HEAD~1 -U999999 > mypatch.patch``. Before uploading your patch, please make sure it is formatted properly, as; described in :ref:`How to Submit a Patch <format patches>`. To upload a new patch:. * Click *Differential*.; * Click *+ Create Diff*.; * Paste the text diff or browse to the patch file. Leave this first Repository; field blank. (We'll fill in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:2829,test,testing,2829,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['testing']
Testability,"ng byte code for every kind of; expression and type that can be used in a constant expression for C++ and C. Improve clang-doc: Clang's library-based design allows it to be used; by a variety of tools that reason about source code.; clang-doc is one; great application of this functionality, which generates code documentation; from source code. The tool is in early stages of development and could use more; dedicated effort to complete the implementation.; Self-testing using clang: There are several neat ways to; improve the quality of clang by self-testing. Some examples:. Improve the reliability of AST printing and serialization by; ensuring that the AST produced by clang on an input doesn't change; when it is reparsed or unserialized. Improve parser reliability and error generation by automatically; or randomly changing the input checking that clang doesn't crash and; that it doesn't generate excessive errors for small input; changes. Manipulating the input at both the text and token levels is; likely to produce interesting test cases. Continue work on C++20, C++23, C++2c, and C23 support:; There are still several C++20 features to complete, and work has begun on; supporting the latest language standards. Please see the; C++ status report page to find out what is; missing.; StringRef'ize APIs: A thankless but incredibly useful project is; StringRef'izing (converting to use llvm::StringRef instead of const; char * or std::string) various clang interfaces. This generally; simplifies the code and makes it more efficient.; Configuration Manager: Clang/LLVM works on a large number of; architectures and operating systems and can cross-compile to a similarly large; number of configurations, but the pitfalls of choosing the command-line; options, making sure the right sub-architecture is chosen and that the correct; optional elements of your particular system can be a pain. A tool that would investigate hosts and targets, and store the configuration; in files that can later",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:4833,test,test,4833,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,1,['test'],['test']
Testability,"ng class MnMigrad, M ""commands""; became classes or methods of classes according to their purpose. Users; familiar with the version of M , who have not yet used releases from the; version, should however read this manual, in order to adapt to the; changes as well as to discover the new features and easier ways of using; old features. ## Install M using autoconf/make ##. For each release of M a tar.gz file is provided for downloading from the; M homepage @bib-C++MINUIT. For non-UNIX platforms please refer to the M; homepage. The necessary steps to follow are:. 1. download the tar.gz by clicking on it from the release page. 2. unzip it:. $ unzip Minuit-x.x.x.tar.gz. 3. untar it:. $ tar xvf Minuit-x.x.x.tar. 4. step down to the created Minuit-x.x.x directory:. $ cd Minuit-x.x.x/. 5. run the ""configure"" script:. $ ./configure. 6. run ""make"" to compile the source code:. $ make. 7. run ""make check"" to create the executable example:. $ make check. 8. run the executable example:. $ tests/MnTutorial/Quad4FMain.C. The output should look like that:. Minuit did successfully converge. # of function calls: 74; minimum function value: 1.12392e-09; minimum edm: 1.12392e-09; minimum internal state vector: LAVector parameters:. -1.82079e-05; -1.20794e-05; 6.22382e-06; -3.0465e-05. minimum internal covariance matrix: LASymMatrix parameters:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. # ext. || name || type || value || error +/-. 0 || x || free ||-1.821e-05 || 2; 1 || y || free ||-1.208e-05 || 2.236; 2 || z || free || 6.224e-06 || 2.449; 3 || w || free ||-3.047e-05 || 1. MnUserCovariance:. 4 1 2 2.70022e-18; 1 5 3 1.87754e-17; 2 3 6 2.29467e-17; 2.70022e-18 1.87754e-17 2.29467e-17 1. MnUserCovariance parameter correlations:. 1 0.223607 0.408248 1.35011e-18; 0.223607 1 0.547723 8.39663e-18; 0.408248 0.547723 1 9.36796e-18; 1.35011e-18 8.39663e-18 9.36796e-18 1. MnGlobalCorrelationCoeff:. 0.408248; 0.547723; 0.621261; 0. ## CVS code repo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md:22752,test,tests,22752,documentation/minuit2/Minuit2.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/minuit2/Minuit2.md,1,['test'],['tests']
Testability,"ng dir. RFNrules No 2000 − RFF: Mximum number of rules. RFNendnodes No 4 − RFF: Average number of end nodes. Configuration options for MVA method :. Configuration options reference for MVA method: Likelihood. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). TransformOutput No False − Transform likelihood output by inverse sigmoid function. Configuration options for MVA method :. Configuration options reference for MVA method: MLP. Option Array Default value Predefined values Description. NCycles No 500 − Number of training cycles. HiddenLayers No N,N-1 − Specification of hidden layer architecture. NeuronType No sigmoid − Neuron activation function type. RandomSeed No 1 − Random seed for initial synapse weights (0 means unique seed for each run; default value '1'). EstimatorType No MSE MSE, CE, linear, sigmoid, tanh, radial MSE (Mean Square Estimator) for Gaussian Likelihood or CE(Cross-Entropy) for Bernoulli Likelihood. NeuronInputType No sum sum, sqsum, abssum Neuron input function type. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verb",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:20662,test,testing,20662,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"ng in parallel at the same time. This is; especially important for linking since linking can use lots of memory. If; you run into memory issues building LLVM, try setting this to limit the; maximum number of compile/link jobs running at the same time. * ``cmake --build build [--target <target>]`` or the build system specified; above directly. * The default target (i.e. ``cmake --build build`` or ``make -C build``); will build all of LLVM. * The ``check-all`` target (i.e. ``ninja check-all``) will run the; regression tests to ensure everything is in working order. * CMake will generate build targets for each tool and library, and most; LLVM sub-projects generate their own ``check-<project>`` target. * Running a serial build will be **slow**. To improve speed, try running a; parallel build. That's done by default in Ninja; for ``make``, use the; option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the; number of available CPUs. * A basic CMake and build/test invocation which only builds LLVM and no other; subprojects:. ``cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug``. ``ninja -C build check-llvm``. This will setup an LLVM build with debugging info, then compile LLVM and; run LLVM tests. * For more detailed information on CMake options, see `CMake <CMake.html>`__. * If you get build or test failures, see `below`_. Consult the `Getting Started with LLVM`_ section for detailed information on; configuring and compiling LLVM. Go to `Directory Layout`_ to learn about the; layout of the source code tree. Stand-alone Builds; ------------------. Stand-alone builds allow you to build a sub-project against a pre-built; version of the clang or llvm libraries that is already present on your; system. You can use the source code from a standard checkout of the llvm-project; (as described above) to do stand-alone builds, but you may also build; from a :ref:`sparse checkout<workflow-multicheckout-nocommit>` or from the; tarballs available on the `releases <ht",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:4559,test,test,4559,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"ng of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in messag",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:9381,sandbox,sandbox,9381,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['sandbox'],['sandbox']
Testability,"ng on the size and complexity; of this test, it exists either in the `test/` subdirectory of each part of ROOT (see for instance; [`tree/dataframe/test`](https://github.com/root-project/root/tree/master/tree/dataframe/test)), or in; [roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on; [Google Test](https://github.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well as a GitHub Actions CI workflow tests PRs automatically; only a; [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.; The results are posted to the pull request.; Compared to ROOT's nightly builds, PRs are tested with less tests, on less platforms.; - *Formatting check*: `clang-format` automatically checks that a PR; [follows](https://github.com/root-project/root/blob/master/.clang-format) ROOT's; [coding conventions](https://root.cern/contribute/coding_conventions/).; If coding violations are found, it provides you with a `patch` output that you likely want to apply to your PR.; - *Simple Static Analysis*: PR",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:6620,test,tests,6620,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,1,['test'],['tests']
Testability,"ng one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repository. Please make sure that either:. * You set a git hash as ``sourceControlBaseRevision`` in Phabricator which is; available on the GitHub repository,; * **or** you define the dependencies of your patch in Phabricator,; * **or** your patch can be applied to the main branch. Only then can the build server apply the patch locally and run the builds and; tests. Accessing build results; ^^^^^^^^^^^^^^^^^^^^^^^; Phabricator will automatically trigger a build for every new patch you upload or; modify. Phabricator shows the build results at the top of the entry. Clicking on; the links (in the red box) will show more details:. .. image:: Phabricator_premerge_results.png. The CI will compile and run tests, run clang-format and clang-tidy on lines; changed. If a unit test failed, this is shown below the build status. You can also expand; the unit test to see the details:. .. image:: Phabricator_premerge_unit_tests.png. Opting Out; ^^^^^^^^^^. In case you want to opt-out entirely of pre-merge testing, add yourself to the; `OPT OUT project <https://reviews.llvm.org/project/view/83/>`_. If you decide; to opt-out, please let us know why, so we might be able to improve in the future. Operational Details; ^^^^^^^^^^^^^^^^^^^. The code responsible for running the pre-merge flow can be found in the `external; repository <https://github.com/google/llvm-premerge-checks>`_. For enhancement; ideas and most bugs, please file an issue on said repository. For immediate; operational problems, the point of contact is; `Mikhail Goncharov <mailto:goncharo@google.com>`_. Background on the pre-merge infrastructure can be found in `this 2020 DevMeeting; talk <https://llvm.org/devmtg/2020-09/slides/Goncharov-Pre-merge_checks.pdf>`_. Committing a change; -------------------. Once a patch has been reviewed and approved on Phabricator it can then be;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:12278,test,test,12278,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['test']
Testability,"ng program |; +-------------------+--------------------------------------------------------+; | `stress*.cxx` | Stress testing of different ROOT classes |; +-------------------+--------------------------------------------------------+; | `bench.cxx` | STL and ROOT container test and benchmarking program |; +-------------------+--------------------------------------------------------+; | QpRandomDriver.cx | Verification program for Quadratic programming classes |; | x | in Quadp library |; +-------------------+--------------------------------------------------------+; | DrawTest.sh | Entry script to extensive **`TTree`** query test suite |; +-------------------+--------------------------------------------------------+; | dt\_\* | Scripts used by DrawTest.sh |; +-------------------+--------------------------------------------------------+. The `$ROOTSYS/test` directory is a gold mine of root-wisdom nuggets, and; we encourage you to explore and exploit it. These instructions will; compile all programs in `$ROOTSYS/test`:. If you do not have write permission in the `$ROOTSYS/test` directory,; copy the entire `$ROOTSYS/test` directory to your area. The `Makefile`; is a useful example of how ROOT applications are linked and built. Edit; the `Makefile` to specify your architecture by changing the `ARCH`; variable, for example, on an SGI machine type:` ARCH` = `sgikcc`. Now compile all programs:. % **`gmake`**. This will build several applications and shared libraries. We are; especially interested in Event, stress, and `guitest`. ### Event - An Example of a ROOT Application. Event is created by compiling `MainEvent.cxx`, and `Event.cxx`. It; creates a ROOT file with a tree and two histograms. When running `Event`; we have four optional arguments with defaults:. +-----+---------------------------------------------------------+--------------+; | | Argument | Default |; +-----+---------------------------------------------------------+--------------+; | 1 | Number of Events (1 ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:5839,test,test,5839,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"ng qemu-arm; ===========================================; To test the builtins library we need to add a few more cmake flags to enable; testing and set up the compiler and flags for test case. We must also tell; cmake that we wish to run the tests on ``qemu-arm``. * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armhf/sysroot``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The ``/path/to/armhf/sysroot`` should be the same as the one passed to; ``--sysroot`` in the ""build-c-flags"". The ""test-c-flags"" need to include the target, architecture, gcc-toolchain,; sysroot and arm/thumb state. The additional cmake defines such as; ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` do not apply when building the tests. If; you have put all of these in ""build-c-flags"" then these can be repeated. If you; wish to use lld to link the tests then add ``""-fuse-ld=lld``. Once cmake has completed the tests can be built and run using; ``ninja check-builtins``. Troubleshooting; ===============. The cmake try compile stage fails; ---------------------------------; At an early stage cmake will attempt to compile and link a simple C program to; test if the toolchain is working. This stage can often fail at link time if the ``--sysroot=`` and; ``--gcc-toolchain=`` options are not passed to the compiler. Check the; ``CMAKE_C_FLAGS`` and ``CMAKE_C_COMPILER_TARGET`` flags. It can be useful to build a simple example outside of cmake with your toolchain; to make sure it is working. For example: ``clang --target=arm-linux-gnueabi -march=armv7a --gcc-toolchain=/path/to/gcc-toolchain --sysroot=/path/to/gcc-toolchain/arm-linux-gnueabihf/libc helloworld.c``. Clang uses the host header files; --------------------------------; On debian based systems it is possible to install multiarch support for; arm-linux-gnueabi and arm-linux-gnueabihf. In many cases clang can successfully; use this multiarch support when ``--",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:5676,test,tests,5676,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,1,['test'],['tests']
Testability,"ng reduction. Thus, if new crash or miscompilation happens, ``bugpoint``; will continue with the new crash instead. If you would like to stick to; particular crash, you should write check scripts to validate the error; message, see ``-compile-command`` in :doc:`CommandGuide/bugpoint`. * In the code generator and miscompilation debuggers, debugging will go faster; if you manually modify the program or its inputs to reduce the runtime, but; still exhibit the problem. * ``bugpoint`` is extremely useful when working on a new optimization: it helps; track down regressions quickly. To avoid having to relink ``bugpoint`` every; time you change your optimization however, have ``bugpoint`` dynamically load; your optimization with the ``-load`` option. * ``bugpoint`` can generate a lot of output and run for a long period of time.; It is often useful to capture the output of the program to file. For example,; in the C shell, you can run:. .. code-block:: console. $ bugpoint ... |& tee bugpoint.log. to get a copy of ``bugpoint``'s output in the file ``bugpoint.log``, as well; as on your terminal. * ``bugpoint`` cannot debug problems with the LLVM linker. If ``bugpoint``; crashes before you see its ""All input ok"" message, you might try ``llvm-link; -v`` on the same set of input files. If that also crashes, you may be; experiencing a linker bug. * ``bugpoint`` is useful for proactively finding bugs in LLVM. Invoking; ``bugpoint`` with the ``-find-bugs`` option will cause the list of specified; optimizations to be randomized and applied to the program. This process will; repeat until a bug is found or the user kills ``bugpoint``. * ``bugpoint`` can produce IR which contains long names. Run ``opt; -passes=metarenamer`` over the IR to rename everything using easy-to-read,; metasyntactic names. Alternatively, run ``opt -passes=strip,instnamer`` to; rename everything with very short (often purely numeric) names. What to do when bugpoint isn't enough; ==================================",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:7249,log,log,7249,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['log'],['log']
Testability,"ng systems, a single user process; address space plus the kernel address space can be treated as a single address; space for symbolization purposes if desired. Dependence on Build IDs; =======================. The symbolizer markup scheme relies on contextual information about runtime; memory address layout to make it possible to convert markup elements into useful; symbolic form. This relies on having an unmistakable identification of which; binary was loaded at each address. An ELF Build ID is the payload of an ELF note with name ``""GNU""`` and type; ``NT_GNU_BUILD_ID``, a unique byte sequence that identifies a particular binary; (executable, shared library, loadable module, or driver module). The linker; generates this automatically based on a hash that includes the complete symbol; table and debugging information, even if this is later stripped from the binary. This specification uses the ELF Build ID as the sole means of identifying; binaries. Each binary relevant to the log must have been linked with a unique; Build ID. The symbolizing filter must have some means of mapping a Build ID back; to the original ELF binary (either the whole unstripped binary, or a stripped; binary paired with a separate debug file). Colorization; ============. The markup format supports a restricted subset of ANSI X3.64 SGR (Select Graphic; Rendition) control sequences. These are unlike other markup elements:. * They specify presentation details (bold or colors) rather than semantic; information. The association of semantic meaning with color (e.g. red for; errors) is chosen by the code doing the logging, rather than by the UI; presentation of the symbolizing filter. This is a concession to existing code; (e.g. LLVM sanitizer runtimes) that use specific colors and would require; substantial changes to generate semantic markup instead. * A single control sequence changes ""the state"", rather than being an; hierarchical structure that surrounds affected text. The filter processes ANSI SG",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:4308,log,log,4308,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['log']
Testability,"ng tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:3111,test,test-suite,3111,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test-suite']
Testability,"ng the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:7582,test,test,7582,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ng the following flags:. * ``-fexperimental-new-constant-interpreter`` enables the interpreter,; emitting an error if an unsupported feature is encountered. Bytecode Compilation; ====================. Bytecode compilation is handled in ``ByteCodeStmtGen.h`` for statements; and ``ByteCodeExprGen.h`` for expressions. The compiler has two different; backends: one to generate bytecode for functions (``ByteCodeEmitter``) and; one to directly evaluate expressions as they are compiled, without; generating bytecode (``EvalEmitter``). All functions are compiled to; bytecode, while toplevel expressions used in constant contexts are directly; evaluated since the bytecode would never be reused. This mechanism aims to; pave the way towards replacing the evaluator, improving its performance on; functions and loops, while being just as fast on single-use toplevel; expressions. The interpreter relies on stack-based, strongly-typed opcodes. The glue; logic between the code generator, along with the enumeration and; description of opcodes, can be found in ``Opcodes.td``. The opcodes are; implemented as generic template methods in ``Interp.h`` and instantiated; with the relevant primitive types by the interpreter loop or by the; evaluating emitter. Primitive Types; ---------------. * ``PT_{U|S}int{8|16|32|64}``. Signed or unsigned integers of a specific bit width, implemented using; the ```Integral``` type. * ``PT_{U|S}intFP``. Signed or unsigned integers of an arbitrary, but fixed width used to; implement integral types which are required by the target, but are not; supported by the host. Under the hood, they rely on APValue. The; ``Integral`` specialisation for these types is required by opcodes to; share an implementation with fixed integrals. * ``PT_Bool``. Representation for boolean types, essentially a 1-bit unsigned; ``Integral``. * ``PT_RealFP``. Arbitrary, but fixed precision floating point numbers. Could be; specialised in the future similarly to integers in order to improve;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ConstantInterpreter.rst:1267,log,logic,1267,interpreter/llvm-project/clang/docs/ConstantInterpreter.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ConstantInterpreter.rst,1,['log'],['logic']
Testability,"ng the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memory leak checks. When this option is; enabled, :program:`lit` will also automatically provide a ""``vg_leak``""; feature that can be used to conditionally disable (or expect failure in); certain tests. .. option:: --time-tests. Track the wall time individual tests take to execute and includes the results; in the summary output. This is useful for determining which tests in a test; suite take the most time to execute. .. option:: --ignore-fail. Exit with status zero even if some tests fail. .. _selection-options:. SELECTION OPTIONS; -----------------. By default, `lit` will run failing tests first, then run tests in descending; execution time order to optimize concurrency. The execution order can be; changed using the :option:`--order` option. The timing data is stored in the `test_exec_root` in a file named; `.lit_test_times.txt`. If this file does not exist, then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-failures N. Stop execution after the given number ``N`` of failures.; An integer argument should be ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:5296,test,tests,5296,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"ng the slower, fully IEEE-compliant versions. For; example, this flag allows clang to emit the ptx ``sin.approx.f32``; instruction. This is implied by ``-ffast-math``. Standard library support; ========================. In clang and nvcc, most of the C++ standard library is not supported on the; device side. ``<math.h>`` and ``<cmath>``; ----------------------------. In clang, ``math.h`` and ``cmath`` are available and `pass; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/math_h.cu>`_; `tests; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/cmath.cu>`_; adapted from libc++'s test suite. In nvcc ``math.h`` and ``cmath`` are mostly available. Versions of ``::foof``; in namespace std (e.g. ``std::sinf``) are not available, and where the standard; calls for overloads that take integral arguments, these are usually not; available. .. code-block:: c++. #include <math.h>; #include <cmath.h>. // clang is OK with everything in this function.; __device__ void test() {; std::sin(0.); // nvcc - ok; std::sin(0); // nvcc - error, because no std::sin(int) override is available.; sin(0); // nvcc - same as above. sinf(0.); // nvcc - ok; std::sinf(0.); // nvcc - no such function; }. ``<std::complex>``; ------------------. nvcc does not officially support ``std::complex``. It's an error to use; ``std::complex`` in ``__device__`` code, but it often works in ``__host__; __device__`` code due to nvcc's interpretation of the ""wrong-side rule"" (see; below). However, we have heard from implementers that it's possible to get; into situations where nvcc will omit a call to an ``std::complex`` function,; especially when compiling without optimizations. As of 2016-11-16, clang supports ``std::complex`` without these caveats. It is; tested with libstdc++ 4.8.5 and newer, but is known to work only with libc++; newer than 2016-11-16. ``<algorithm>``; ---------------. In C++14, many useful functions from ``<algorithm>`` (notably, ``std::min`` and; ``std::max``) bec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:6405,test,test,6405,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['test']
Testability,"ng;; available weight files (corresponding to target used) can; be chosen from pop-up GUI.; ; BDT: Changes in handling negative weights in BDT; algorithm. Events with negative weights now get their; weight reduced (*= 1/boostweight) rather than increased; (*= boostweight) as the other events do. Otherwise these; events tend to receive increasingly stronger boosts,; because their effects on the separation gain are as if; background events were selected as signal and vice versa; (hence the events tend to be ""wanted"" in signal nodes, but; are boosted as if they were misclassified). In addition,; the separation indices are protected against negative S or; S+B returning 0.5 (no separation at all) in case that; occurs.; ; BDT: In addition there is a new BDT option to; ignore events with negative event weights for the; training. This option could be used as a cross check of a; ""worst case"" solution for Monte Carlo samples with; negative weights. Note that the results of the testing; phase still include these events and are hence objective.; ; BDT: Added randomised trees: similar to the; ""Random Forests"" technique of Leo Breiman and Adele; Cutler, it uses the ""bagging"" algorithm and bases the; determination of the best node-split during the training; on a random subset of variables only, which is; individually chosen for each split.; ; BDT: Move to TRandom2 for the ""bagging"" algorithm; and throw random weights according to Poisson; statistics. (This way the random weights are closer to a; resampling with replacement algorithm.); ; TMlpANN: Extended options to; TMultilayerPerceptron learning methods. Added example for; reader application: TMVApplication.py; . GUI:. Parallel Coordinates: New GUI button for Parallel; Coordinate plotting.; . Application:. Added Python example for reader application: TMVApplication.py; . Bug fixes:. TMlpANN: fixed crash with ROOT>=5.17 when using; large number of test events; also corrected bias in cross; validation: before the test events were ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html:3533,test,testing,3533,tmva/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html,1,['test'],['testing']
Testability,"nge. This means that:; 1. **Each commit should be able to successfully build ROOT.**; Doing so makes traveling through the git history, for example during a `git bisect` much easier.; Ideally, the commit also should not depend on other commits to _run_ ROOT.; 2. **Each commit does not contain more than one independent change.**; This allows us to revert changes when needed, without affecting anything else. > [!TIP]; > During a code review, it may be useful to make smaller commits to track intermediate changes, and rebase after the PR; > is approved to ensure the above points are met and to reduce clutter. ### Your Commit Message. The commit summary (i.e. the first line of the commit message) should be preceded by the a tag indicating the scope of; ROOT that is affected by your commit, in square brackets. Most tags are self-describing (e.g., `[tree]` indicates a; change to TTree, `[RF]` indicates a change to RooFit). If you are unsure about which scope tags to use, we are happy to; point you in the right direction! See also the [commit log](https://github.com/root-project/root/commits/master/) for; examples. The summary itself should not exceed 50 characters (excluding the scope tag), be meaningful (i.e., it; describes the change) and should be written in the; [present imperative mood](https://git.kernel.org/pub/scm/git/git.git/tree/Documentation/SubmittingPatches?id=HEAD#n239); (e.g. `Add this awesome feature` instead of `Adds this awesome feature` or `Added this awesome feature`). The commit message that follow the summary can be used to provide more context to the change.; It should describe the **why**, rather than the **what** and **how** (we can gather this from the commit summary and the; change diff, respectively).; The commit message should be wrapped at 72 characters. > [!TIP]; > We provide a commit message template to help with following the above guidelines. It can be found in the root of this; > repository as [`.git-commit-template`](https://github.com/r",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:2738,log,log,2738,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,1,['log'],['log']
Testability,"ngth structures. If the version is ``Ver60``,; it is an array of ``SectionContribEntry`` structures (this is the nested structure; from the ``ModInfo`` type. If the version is ``V2``, it is an array of; ``SectionContribEntry2`` structures, defined as follows:. .. code-block:: c++. struct SectionContribEntry2 {; SectionContribEntry SC;; uint32_t ISectCoff;; };. The purpose of the second field is not well understood. The name implies that; is the index of the COFF section, but this also describes the existing field; ``SectionContribEntry::Section``. .. _dbi_section_map_substream:. Section Map Substream; ^^^^^^^^^^^^^^^^^^^^^; Begins at offset ``0`` immediately after the :ref:`dbi_sec_contr_substream` ends,; and consumes ``Header->SectionMapSize`` bytes. This substream begins with an ``4``; byte header followed by an array of fixed-length records. The header and records; have the following layout:. .. code-block:: c++. struct SectionMapHeader {; uint16_t Count; // Number of segment descriptors; uint16_t LogCount; // Number of logical segment descriptors; };. struct SectionMapEntry {; uint16_t Flags; // See the SectionMapEntryFlags enum below.; uint16_t Ovl; // Logical overlay number; uint16_t Group; // Group index into descriptor array.; uint16_t Frame;; uint16_t SectionName; // Byte index of segment / group name in string table, or 0xFFFF.; uint16_t ClassName; // Byte index of class in string table, or 0xFFFF.; uint32_t Offset; // Byte offset of the logical segment within physical segment. If group is set in flags, this is the offset of the group.; uint32_t SectionLength; // Byte count of the segment or group.; };. enum class SectionMapEntryFlags : uint16_t {; Read = 1 << 0, // Segment is readable.; Write = 1 << 1, // Segment is writable.; Execute = 1 << 2, // Segment is executable.; AddressIs32Bit = 1 << 3, // Descriptor describes a 32-bit linear address.; IsSelector = 1 << 8, // Frame represents a selector.; IsAbsoluteAddress = 1 << 9, // Frame represents an absolut",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst:10869,log,logical,10869,interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/PDB/DbiStream.rst,1,['log'],['logical']
Testability,"nguished between unsigned and signed; integer types and ran into similar issues of no-op casts. The transition from; manifesting signedness in types to instructions happened early on in LLVM's; timeline to make LLVM easier to work with. Opaque Pointers Mode; ====================. During the transition phase, LLVM can be used in two modes: In typed pointer; mode all pointer types have a pointee type and opaque pointers cannot be used.; In opaque pointers mode (the default), all pointers are opaque. The opaque; pointer mode can be disabled using ``-opaque-pointers=0`` in; LLVM tools like ``opt``, or ``-Xclang -no-opaque-pointers`` in clang.; Additionally, opaque pointer mode is automatically disabled for IR and bitcode; files that explicitly mention ``i8*`` style typed pointers. In opaque pointer mode, all typed pointers used in IR, bitcode, or created; using ``PointerType::get()`` and similar APIs are automatically converted into; opaque pointers. This simplifies migration and allows testing existing IR with; opaque pointers. .. code-block:: llvm. define i8* @test(i8* %p) {; %p2 = getelementptr i8, i8* %p, i64 1; ret i8* %p2; }. ; Is automatically converted into the following if -opaque-pointers; ; is enabled:. define ptr @test(ptr %p) {; %p2 = getelementptr i8, ptr %p, i64 1; ret ptr %p2; }. Migration Instructions; ======================. In order to support opaque pointers, two types of changes tend to be necessary.; The first is the removal of all calls to ``PointerType::getElementType()`` and; ``Type::getPointerElementType()``. In the LLVM middle-end and backend, this is usually accomplished by inspecting; the type of relevant operations instead. For example, memory access related; analyses and optimizations should use the types encoded in the load and store; instructions instead of querying the pointer type. Here are some common ways to avoid pointer element type accesses:. * For loads, use ``getType()``.; * For stores, use ``getValueOperand()->getType()``.; * U",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst:5907,test,testing,5907,interpreter/llvm-project/llvm/docs/OpaquePointers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst,1,['test'],['testing']
Testability,nimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LI,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5452,test,testForwardPassCpu,5452,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testForwardPassCpu']
Testability,nitializer of a static data member.; (`#65985 <https://github.com/llvm/llvm-project/issues/65985>`_).; - Clang now properly converts static lambda call operator to function; pointers on win32.; (`#62594 <https://github.com/llvm/llvm-project/issues/62594>`_). - Fixed some cases where the source location for an instantiated specialization; of a function template or a member function of a class template was assigned; the location of a non-defining declaration rather than the location of the; definition the specialization was instantiated from.; (`#26057 <https://github.com/llvm/llvm-project/issues/26057>`_). - Fix a crash when a default member initializer of a base aggregate; makes an invalid call to an immediate function.; (`#66324 <https://github.com/llvm/llvm-project/issues/66324>`_). - Fix crash for a lambda attribute with a statement expression; that contains a `return`.; (`#48527 <https://github.com/llvm/llvm-project/issues/48527>`_). - Clang now no longer asserts when an UnresolvedLookupExpr is used as an; expression requirement. (`#66612 <https://github.com/llvm/llvm-project/issues/66612>`_). - Clang now disambiguates NTTP types when printing diagnostics where the; NTTP types are compared with the 'diff' method.; (`#66744 <https://github.com/llvm/llvm-project/issues/66744>`_). - Fix crash caused by a spaceship operator returning a comparision category by; reference. Fixes:; (`#64162 <https://github.com/llvm/llvm-project/issues/64162>`_); - Fix a crash when calling a consteval function in an expression used as; the size of an array.; (`#65520 <https://github.com/llvm/llvm-project/issues/65520>`_). - Clang no longer tries to capture non-odr-used variables that appear; in the enclosing expression of a lambda expression with a noexcept specifier.; (`#67492 <https://github.com/llvm/llvm-project/issues/67492>`_). - Fix crash when fold expression was used in the initialization of default; argument. Fixes:; (`#67395 <https://github.com/llvm/llvm-project/issues/67395>`_,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:49979,assert,asserts,49979,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['asserts']
Testability,"nition Rule"" is supported by source; language). Keeps first type definition and removes other definitions,; potentially significantly reducing the size of output debug info. That option is enabled by default. .. option:: --help, -h. Print a summary of command line options. .. option:: --no-garbage-collection. Disable :option:`--garbage-collection`. .. option:: --no-odr-deduplication. Disable :option:`--odr-deduplication`. .. option:: --no-separate-debug-file. Disable :option:`--separate-debug-file`. .. option:: --num-threads=<n>, -j. Specifies the maximum number (`n`) of simultaneous threads to use; for processing. .. option:: --separate-debug-file. Generate separate file containing output debug info. Using; :program:`llvm-dwarfutil` with that option equals to the; following set of commands:. .. code-block:: console. :program:`llvm-objcopy` --only-keep-debug in-file out-file.debug; :program:`llvm-objcopy` --strip-debug in-file out-file; :program:`llvm-objcopy` --add-gnu-debuglink=out-file.debug out-file. .. option:: --tombstone=<value>. <value> can be one of the following values:. - `bfd`: zero for all addresses and [1,1] for DWARF v4 (or less) address ranges and exec. - `maxpc`: -1 for all addresses and -2 for DWARF v4 (or less) address ranges. - `universal`: both `bfd` and `maxpc`. - `exec`: match with address ranges of executable sections. The value `universal` is used by default. .. option:: --verbose. Enable verbose logging. This option disables multi-thread mode. .. option:: --verify. Run the DWARF verifier on the output DWARF debug info. .. option:: --version. Print the version of this program. SUPPORTED FORMATS; -----------------. The following formats are currently supported by :program:`llvm-dwarfutil`:. ELF. EXIT STATUS; -----------. :program:`llvm-dwarfutil` exits with a non-zero exit code if there is an error.; Otherwise, it exits with code 0. BUGS; ----. To report bugs, please visit <https://github.com/llvm/llvm-project/labels/tools:llvm-dwarfutil/>.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-dwarfutil.rst:2722,log,logging,2722,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-dwarfutil.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-dwarfutil.rst,1,['log'],['logging']
Testability,nitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; com,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99457,test,tests,99457,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,nitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/sc,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99799,test,tests,99799,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,nittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/m,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129415,benchmark,benchmarks,129415,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"nk the store. We need partially dead store sinking. //===---------------------------------------------------------------------===//. [LOAD PRE CRIT EDGE SPLITTING]. GCC PR37166: Sinking of loads prevents SROA'ing the ""g"" struct on the stack; leading to excess stack traffic. This could be handled by GVN with some crazy; symbolic phi translation. The code we get looks like (g is on the stack):. bb2:		; preds = %bb1; ..; 	%9 = getelementptr %struct.f* %g, i32 0, i32 0		; 	store i32 %8, i32* %9, align bel %bb3. bb3:		; preds = %bb1, %bb2, %bb; 	%c_addr.0 = phi %struct.f* [ %g, %bb2 ], [ %c, %bb ], [ %c, %bb1 ]; 	%b_addr.0 = phi %struct.f* [ %b, %bb2 ], [ %g, %bb ], [ %b, %bb1 ]; 	%10 = getelementptr %struct.f* %c_addr.0, i32 0, i32 0; 	%11 = load i32* %10, align 4. %11 is partially redundant, an in BB2 it should have the value %8. GCC PR33344 and PR35287 are similar cases. //===---------------------------------------------------------------------===//. [LOAD PRE]. There are many load PRE testcases in testsuite/gcc.dg/tree-ssa/loadpre* in the; GCC testsuite, ones we don't get yet are (checked through loadpre25):. [CRIT EDGE BREAKING]; predcom-4.c. [PRE OF READONLY CALL]; loadpre5.c. [TURN SELECT INTO BRANCH]; loadpre14.c loadpre15.c . actually a conditional increment: loadpre18.c loadpre19.c. //===---------------------------------------------------------------------===//. [LOAD PRE / STORE SINKING / SPEC HACK]. This is a chunk of code from 456.hmmer:. int f(int M, int *mc, int *mpp, int *tpmm, int *ip, int *tpim, int *dpp,; int *tpdm, int xmb, int *bp, int *ms) {; int k, sc;; for (k = 1; k <= M; k++) {; mc[k] = mpp[k-1] + tpmm[k-1];; if ((sc = ip[k-1] + tpim[k-1]) > mc[k]) mc[k] = sc;; if ((sc = dpp[k-1] + tpdm[k-1]) > mc[k]) mc[k] = sc;; if ((sc = xmb + bp[k]) > mc[k]) mc[k] = sc;; mc[k] += ms[k];; }; }. It is very profitable for this benchmark to turn the conditional stores to mc[k]; into a conditional move (select instr in IR) and allow the final store to do the; stor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:33440,test,testcases,33440,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,2,['test'],"['testcases', 'testsuite']"
Testability,"nlocalized string?; When the analyzer sees that an unlocalized string is passed to a method that will present that string to the user, it is going to produce a message similar to this one:; User-facing text should use localized string macro. If your project deliberately uses unlocalized user-facing strings (for example, in a debugging UI that is never shown to users), you can suppress the analyzer warnings (and document your intent) with a function that just returns its input but is annotated to return a localized string:. __attribute__((annotate(""returns_localized_nsstring""))); static inline NSString *LocalizationNotNeeded(NSString *s) {; return s;; }. You can then call this function when creating your debugging UI:. [field setStringValue:LocalizationNotNeeded(@""Debug"")];. Some projects may also find it useful to use NSLocalizedString but add ""DNL"" or ""Do Not Localize"" to the string contents as a convention:. UILabel *testLabel = [[UILabel alloc] init];; NSString *s = NSLocalizedString(@""Hello <Do Not Localize>"", @""For debug purposes"");; [testLabel setText:s];. Q: How do I tell the analyzer that my instance variable does not need to be released in -dealloc under Manual Retain/Release?; If your class only uses an instance variable for part of its lifetime, it may; maintain an invariant guaranteeing that the instance variable is always released; before -dealloc. In this case, you can silence a warning about a missing release; by either adding assert(_ivar == nil) or an explicit release; [_ivar release] (which will be a no-op when the variable is nil) in; -dealloc. ; Q: How do I decide whether a method's return type should be _Nullable or _Nonnull?; Depending on the implementation of the method, this puts you in one of five situations:. You actually never return nil.; You do return nil sometimes, and callers are supposed to handle that. This; includes cases where your method is documented to return nil given certain; inputs.; You return nil based on some external condi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:4075,test,testLabel,4075,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,2,['test'],['testLabel']
Testability,"nning any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:7003,test,test,7003,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],['test']
Testability,"nny pointer arithmetic is involved, the alloca will not be; promoted.; #. mem2reg only works on allocas of `first; class <../../LangRef.html#first-class-types>`_ values (such as pointers,; scalars and vectors), and only if the array size of the allocation is; 1 (or missing in the .ll file). mem2reg is not capable of promoting; structs or arrays to registers. Note that the ""sroa"" pass is; more powerful and can promote structs, ""unions"", and arrays in many; cases. All of these properties are easy to satisfy for most imperative; languages, and we'll illustrate it below with Kaleidoscope. The final; question you may be asking is: should I bother with this nonsense for my; front-end? Wouldn't it be better if I just did SSA construction; directly, avoiding use of the mem2reg optimization pass? In short, we; strongly recommend that you use this technique for building SSA form,; unless there is an extremely good reason not to. Using this technique; is:. - Proven and well tested: clang uses this technique; for local mutable variables. As such, the most common clients of LLVM; are using this to handle a bulk of their variables. You can be sure; that bugs are found fast and fixed early.; - Extremely Fast: mem2reg has a number of special cases that make it; fast in common cases as well as fully general. For example, it has; fast-paths for variables that are only used in a single block,; variables that only have one assignment point, good heuristics to; avoid insertion of unneeded phi nodes, etc.; - Needed for debug info generation: `Debug information in; LLVM <../../SourceLevelDebugging.html>`_ relies on having the address of; the variable exposed so that debug info can be attached to it. This; technique dovetails very naturally with this style of debug info. If nothing else, this makes it much easier to get your front-end up and; running, and is very simple to implement. Let's extend Kaleidoscope with; mutable variables now!. Mutable Variables in Kaleidoscope; ================",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:9226,test,tested,9226,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['tested']
Testability,"nodes; corresponding to the elements from the string path, as well as the; global transformation matrix for each of them. The top node corresponds; to the level 0 in the stored array, while the last node will correspond; to level `n`. For each level, the node, volume and global matrix can be; retrieved using corresponding getters:. ``` {.cpp}; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; ```. By default the object at level n is retrieved (the align-able object). Once created, a physical node can be misaligned, meaning that its; positioning matrix or even the shape.:. ``` {.cpp}; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); ```. The convention used is that newmat represents the new local matrix of; the last node in the branch with respect to its mother volume. The; `Align()` method will actually duplicate the corresponding branch within; the logical hierarchy, creating new volumes and nodes. This is mandatory; in order to avoid problems due to replicated volumes and can create; exhaustive memory consumption if used abusively. Once aligned, a physical node is ready to be tracked. The operation can; be done only after the geometry was closed. Important NOTE: Calling the `Align()` method for a physical node changes; the node pointers for the stored node branch in the active geometry, Due; to this the other defined physical nodes containing elements of this; path will be invalid. Example:. ``` {.cpp}; TGeoPhysicalNode *pn1 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_2"");; TGeoPhysicalNode *pn2 =; gGeoManager->MakePhysicalNode(""/A_1/B_1/C_3"");; ...; pn1->Align(...);; ```. The call to `pn1->Align()` will invalidate the pointer to the node `B_1`; in `pn2` object.. The way out is to either call `pn1->Align()` before; the creation of `pn2`, either to use a global method that will correct; all existing physical nod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:148909,log,logical,148909,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"non-container types.; - The [`RCsvDS`](https://root.cern.ch/doc/master/classROOT_1_1RDF_1_1RCsvDS.html) class now allows users to specify column types, and can properly read empty entries of csv files.; - Fixed a bug where the `Display` operation would not show the correct amount of entries requested by the user if called; together with other operations ([PR](https://github.com/root-project/root/pull/11398)).; - Requesting variations for `Stats` results with `VariationsFor` is now supported.; - Factory functions for RDataFrames reading CSV files, RNTuples, Arrow tables, etc. have been renamed in order to; increase consistency, e.g. `MakeCsvDataFrame` is now `FromCSV`. The old wording is still available but deprecated.; - The precision of `Sum`s and `Mean`s of single-precision floating point values has been greatly improved by employing; Kahan summations.; - The content of [execution logs](https://root.cern/doc/master/classROOT_1_1RDataFrame.html#rdf-logging) from RDataFrame; has been streamlined in order to make them more useful. ### Distributed RDataFrame. - Add support for systematic variations (e.g. `Vary` and `VariationsFor` operations) in distributed mode.; - If an instant action (e.g. `Snapshot`) is purposely made lazy by the user, distributed RDataFrame now respects this; and avoids triggering the computations right away.; - The algorithm for automatic splitting of the input dataset has been reworked, bringing the startup time cost of; distributed RDataFrame close to zero.; - A histogram model (name, title, binning) for the `Histo*D` actions is now required in distributed mode. See the; [relative PR](https://github.com/root-project/root/pull/10368) for more discussion.; - The performance of distributed RDataFrame for large computation graphs (>1000 operations) has been greatly improved.; - If the `npartitions` argument is not set by the user, the default number of tasks created by a distributed RDataFrame; is equal to the number of cores specified by the user",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:12915,log,logging,12915,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['log'],['logging']
Testability,"not sufficient to build the builtins you will need to; use a separate arm-linux-gnueabihf toolchain. No target passed to clang; -------------------------; If clang is not given a target it will typically use the host target, this will; not understand the Arm assembly language files resulting in error messages such; as ``error: unknown directive .syntax unified``. You can check the clang invocation in the error message to see if there is no; ``--target`` or if it is set incorrectly. The cause is usually; ``CMAKE_ASM_FLAGS`` not containing ``--target`` or ``CMAKE_ASM_COMPILER_TARGET`` not being present. Arm architecture not given; --------------------------; The ``--target=arm-linux-gnueabihf`` will default to arm architecture v4t which; cannot assemble the barrier instructions used in the synch_and_fetch source; files. The cause is usually a missing ``-march=armv7a`` from the ``CMAKE_ASM_FLAGS``. Compiler-rt builds but the tests fail to build; ----------------------------------------------; The flags used to build the tests are not the same as those used to build the; builtins. The c flags are provided by ``COMPILER_RT_TEST_COMPILE_CFLAGS`` and; the ``CMAKE_C_COMPILER_TARGET``, ``CMAKE_ASM_COMPILER_TARGET``,; ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` and ``CMAKE_SYSROOT`` flags are not; applied. Make sure that ``COMPILER_RT_TEST_COMPILE_CFLAGS`` contains all the necessary; information. Modifications for other Targets; ===============================. Arm Soft-Float Target; ---------------------; The instructions for the Arm hard-float target can be used for the soft-float; target by substituting soft-float equivalents for the sysroot and target. The; target to use is:. * ``-DCMAKE_C_COMPILER_TARGET=arm-linux-gnueabi``. Depending on whether you want to use floating point instructions or not you; may need extra c-flags such as ``-mfloat-abi=softfp`` for use of floating-point; instructions, and ``-mfloat-abi=soft -mfpu=none`` for software floating-point; emulation. You wil",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:7858,test,tests,7858,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,2,['test'],['tests']
Testability,"nother program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2925,test,test,2925,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"ns regardless of whether an object is written into or; not. Custom Assertion Handlers. The analyzer exploits code assertions by pruning off paths where the; assertion condition is false. The idea is capture any program invariants; specified in the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointer is not null) prior to performing; some action that depends on that condition (e.g., dereferencing a pointer).; The analyzer knows about several well-known asse",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:20530,assert,assert,20530,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assert']
Testability,"ns that if the file does not exist, the constructor will throw an exception. Previously, an exception would be thrown only at a JIT-ting time, before the start of the computations.; * Distributed `RDataFrame` now supports processing an `RNTuple` dataset.; * In distributed `RDataFrame`, the `initialize` function useful to run initialization code at the beginning of every task; on a worker will now run only in the worker processes. Previously, it was also run eagerly at the point of calling, that; is in the main user process. This is done to better separate the user driver environment and the worker environments. If; necessary, the function passed to `initialize` can be called directly by the user in the main application to reproduce; the same effect as before.; * Some internal details of the `RDataFrame` implementation were reworked to decrease memory usage and runtime of programs; with very deep computation graphs (more than O(10K) nodes in the same branch). Preliminary tests indicate between 30%; and a factor 2.5 in memory decrease. This improvement is transparent for `RDataFrame` users. ## Graphics backends; The ROOT release 6.32 brings a lot of impressive enhancements to the Web Graphics package, greatly surpassing the features and capabilities of version 6.30. ; This update provides users with a more robust Web Graphics. * The JSROOT version has been updated to v7.7. ## 2D Graphics Libraries. - TMultiGraph: Add the objects from the list of functions in legend produce by TLegend.; - Implement the IsInside method for TEllipse, TCrown and TDiamond. Also, a new graphics example `inside.C` has been added.; - Two new methods in TColor: `ListColors()` and `GetColorByname()`.; - Make sure the option `L` draws closed polygon for `TH2Poly`.; - Use Tex Gyre fonts for sans serif (similar to Helvetica) .; - The new method `TPad::ModifiedUpdate` is short cut to call `Modified()` and `Update()` in a single call. On Mac with Cocoa, it performs an additional ProcessEvents().; - ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:16161,test,tests,16161,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['test'],['tests']
Testability,"ns to LLVM should start as an intrinsic; function and then be turned into an instruction if warranted. #. ``llvm/docs/LangRef.html``:. Document the intrinsic. Decide whether it is code generator specific and; what the restrictions are. Talk to other people about it so that you are; sure it's a good idea. #. ``llvm/include/llvm/IR/Intrinsics*.td``:. Add an entry for your intrinsic. Describe its memory access; characteristics for optimization (this controls whether it will be; DCE'd, CSE'd, etc). If any arguments need to be immediates, these; must be indicated with the ImmArg property. Note that any intrinsic; using one of the ``llvm_any*_ty`` types for an argument or return; type will be deemed by ``tblgen`` as overloaded and the; corresponding suffix will be required on the intrinsic's name. #. ``llvm/lib/Analysis/ConstantFolding.cpp``:. If it is possible to constant fold your intrinsic, add support to it in the; ``canConstantFoldCallTo`` and ``ConstantFoldCall`` functions. #. ``llvm/test/*``:. Add test cases for your test cases to the test suite. Once the intrinsic has been added to the system, you must add code generator; support for it. Generally you must do the following steps:. Add support to the .td file for the target(s) of your choice in; ``lib/Target/*/*.td``. This is usually a matter of adding a pattern to the .td file that matches the; intrinsic, though it may obviously require adding the instructions you want to; generate as well. There are lots of examples in the PowerPC and X86 backend; to follow. Adding a new SelectionDAG node; ==============================. As with intrinsics, adding a new SelectionDAG node to LLVM is much easier than; adding a new instruction. New nodes are often added to help represent; instructions common to many targets. These nodes often map to an LLVM; instruction (add, sub) or intrinsic (byteswap, population count). In other; cases, new nodes have been added to allow many targets to perform a common task; (converting between ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:2817,test,test,2817,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,1,['test'],['test']
Testability,"ns. //===---------------------------------------------------------------------===//. DAG Combiner should try to combine small loads into larger loads when ; profitable. For example, we compile this C++ example:. struct THotKey { short Key; bool Control; bool Shift; bool Alt; };; extern THotKey m_HotKey;; THotKey GetHotKey () { return m_HotKey; }. into (-m64 -O3 -fno-exceptions -static -fomit-frame-pointer):. __Z9GetHotKeyv: ## @_Z9GetHotKeyv; 	movq	_m_HotKey@GOTPCREL(%rip), %rax; 	movzwl	(%rax), %ecx; 	movzbl	2(%rax), %edx; 	shlq	$16, %rdx; 	orq	%rcx, %rdx; 	movzbl	3(%rax), %ecx; 	shlq	$24, %rcx; 	orq	%rdx, %rcx; 	movzbl	4(%rax), %eax; 	shlq	$32, %rax; 	orq	%rcx, %rax; 	ret. //===---------------------------------------------------------------------===//. We should add an FRINT node to the DAG to model targets that have legal; implementations of ceil/floor/rint. //===---------------------------------------------------------------------===//. Consider:. int test() {; long long input[8] = {1,0,1,0,1,0,1,0};; foo(input);; }. Clang compiles this into:. call void @llvm.memset.p0i8.i64(i8* %tmp, i8 0, i64 64, i32 16, i1 false); %0 = getelementptr [8 x i64]* %input, i64 0, i64 0; store i64 1, i64* %0, align 16; %1 = getelementptr [8 x i64]* %input, i64 0, i64 2; store i64 1, i64* %1, align 16; %2 = getelementptr [8 x i64]* %input, i64 0, i64 4; store i64 1, i64* %2, align 16; %3 = getelementptr [8 x i64]* %input, i64 0, i64 6; store i64 1, i64* %3, align 16. Which gets codegen'd into:. 	pxor	%xmm0, %xmm0; 	movaps	%xmm0, -16(%rbp); 	movaps	%xmm0, -32(%rbp); 	movaps	%xmm0, -48(%rbp); 	movaps	%xmm0, -64(%rbp); 	movq	$1, -64(%rbp); 	movq	$1, -48(%rbp); 	movq	$1, -32(%rbp); 	movq	$1, -16(%rbp). It would be better to have 4 movq's of 0 instead of the movaps's. //===---------------------------------------------------------------------===//. http://llvm.org/PR717:. The following code should compile into ""ret int undef"". Instead, LLVM; produces ""ret int 0"":. int f() {; int x = 4;; in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:14732,test,test,14732,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"ns.mjs, provide jsroot geometry build without three.js; 17. Fix - correctly draw only grids with AXIG draw option; 18. Fix - log scales on TH3 drawings #306; 19. Fix - draw geometry top node volume if all childs not visible #308; 20. Fix - properly process 206 server response without Accept-Ranges header https://root-forum.cern.ch/t/59426/. ## Changes in 7.6.1; 1. Remove source_dir output in node.js #296; 2. Fully integrate svg2pdf.js into jsroot repo; 3. Fix - support plain TRI option for TGraph2D; 4. Fix - let read object from ROOT file with empty name; 5. Fix - graph drawing fix custom labels on X axis #297; 6. Fix - draw at least line for TGraphErrors ROOT-8131; 7. Fix - preserve attributes and draw options when call drawingJSON() #307; 8. Fix - menu for text align selection typo. ## Changes in 7.6.0; 1. Implement ""tickz"" draw option, used for color palette ticks; 2. Implement skewness and kurtosis calculations for histogram stats box; 3. Introduce ""logv"" draw option for `TH3`, configures logarithmic scale for box volume; 4. Implement color palette drawing for `TH3`; 5. Implement cutg draw option for `TH2`/`TF2` surface plots; 6. Implement `TMath::Sq()` function and several others like SinH, ASinH, ...; 7. Implement histogram drawing build from `TGraph2D` using Delaunay interpolation; 8. Provide preliminary `TF3` support; 9. Support `TLinearGradient` and `TRadialGradient` colors; 10. Support LZMA decompression of ROOT files #272; 11. Include ZSTD decompression to repository #274; 12. Support opacity transfer function for `TH3`, see tutorials/gl/glvox2.C; 13. Upgrade three.js r155 -> r158; 14. Handle TCanvas IsEdiatable flag to disable some interactive features; 15. Support PDF creation using jsPDF and svg2pdf.js - in browser and node.js; 16. Implement custom fonts support in TWebCanvas; 17. List of ROOT/JSON files on server with `&dir=<path>` URL parameter #283; 18. Load TGaxis function from the file #282; 19. Let display progress messages in modal element #285;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:6007,log,logv,6007,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,2,['log'],"['logarithmic', 'logv']"
Testability,"ns``. This; metadata annotates our ``@kernel`` function with the ``kernel`` attribute. Running the Kernel; ------------------. Generating PTX from LLVM IR is all well and good, but how do we execute it on; a real GPU device? The CUDA Driver API provides a convenient mechanism for; loading and JIT compiling PTX to a native GPU device, and launching a kernel.; The API is similar to OpenCL. A simple example showing how to load and; execute our vector addition code is shown below. Note that for brevity this; code does not perform much error checking!. .. note::. You can also use the ``ptxas`` tool provided by the CUDA Toolkit to offline; compile PTX to machine code (SASS) for a specific GPU architecture. Such; binaries can be loaded by the CUDA Driver API in the same way as PTX. This; can be useful for reducing startup time by precompiling the PTX kernels. .. code-block:: c++. #include <iostream>; #include <fstream>; #include <cassert>; #include ""cuda.h"". void checkCudaErrors(CUresult err) {; assert(err == CUDA_SUCCESS);; }. /// main - Program entry point; int main(int argc, char **argv) {; CUdevice device;; CUmodule cudaModule;; CUcontext context;; CUfunction function;; CUlinkState linker;; int devCount;. // CUDA initialization; checkCudaErrors(cuInit(0));; checkCudaErrors(cuDeviceGetCount(&devCount));; checkCudaErrors(cuDeviceGet(&device, 0));. char name[128];; checkCudaErrors(cuDeviceGetName(name, 128, device));; std::cout << ""Using CUDA Device [0]: "" << name << ""\n"";. int devMajor, devMinor;; checkCudaErrors(cuDeviceComputeCapability(&devMajor, &devMinor, device));; std::cout << ""Device Compute Capability: ""; << devMajor << ""."" << devMinor << ""\n"";; if (devMajor < 2) {; std::cerr << ""ERROR: Device 0 is not SM 2.0 or greater\n"";; return 1;; }. std::ifstream t(""kernel.ptx"");; if (!t.is_open()) {; std::cerr << ""kernel.ptx not found\n"";; return 1;; }; std::string str((std::istreambuf_iterator<char>(t)),; std::istreambuf_iterator<char>());. // Create driver context; check",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/NVPTXUsage.rst:19692,assert,assert,19692,interpreter/llvm-project/llvm/docs/NVPTXUsage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/NVPTXUsage.rst,1,['assert'],['assert']
Testability,"nsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <4 x double> @llvm.experimental.vector.interleave2.v4f64(<2 x double> %vec1, <2 x double> %vec2); declare <vscale x 8 x i32> @llvm.experimental.vector.interleave2.nxv8i32(<vscale x 4 x i32> %vec1, <vscale x 4 x i32> %vec2). Overview:; """""""""""""""""". The '``llvm.experimental.vector.interleave2``' intrinsic constructs a vector; by interleaving two input vectors. This intrinsic works for both fixed and scalable vectors. While this intrinsic; supports all vector types the recommended way to express this operation for; fixed-width vectors is still to use a shufflevector, as that may allow for more; optimization opportunities. For example:. .. code-block:: text. <4 x i64> llvm.experimental.vector.interleave2.v4i64(<2 x i64> <i64 0, i64 2>, <2 x i64> <i64 1, i64 3>); ==> <4 x i64> <i64 0, i64 1, i64 2, i64 3>. Arguments:; """"""""""""""""""""; Both arguments must be vectors of the same type whereby their logical; concatenation matches the result type. '``llvm.experimental.cttz.elts``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ```llvm.experimental.cttz.elts```; on any vector of integer elements, both fixed width and scalable. ::. declare i8 @llvm.experimental.cttz.elts.i8.v8i1(<8 x i1> <src>, i1 <is_zero_poison>). Overview:; """""""""""""""""". The '``llvm.experimental.cttz.elts``' intrinsic counts the number of trailing; zero elements of a vector. Arguments:; """""""""""""""""""". The first argument is the vector to be counted. This argument must be a vector; with integer element type. The return type must also be an integer type which is; wide enough to hold the maximum number of elements of the source vector. The; behaviour of this intrinsic is undefined if the return type is not wide enough; for the number of elements in the input vector. The second argument is a constant flag that indicates whether the in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:669036,log,logical,669036,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,nsing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/RNN tests.; # @author Saurav Shekhar; ############################################################################. set(Libraries TMVA). if (tmva-gpu); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCud,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1130,test,testFullRNN,1130,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,1,['test'],['testFullRNN']
Testability,"nsional input pdfs. One of the appealing features; is that no expensive calculations are required to calculate in the interpolated pdfs shapes after the pdf; initialization. An extension that allows morphing in two parameters is foreseen for the next root release.; Progress indication in plot projections; The RooAbsReal::plotOn() now accepts a new argument ShowProgress() that will print a dot for every; function evaluation performed in the process of creating the plot. This can be useful when plotting very expensive; functions such as profile likelihoods; Automatic handling of constraint terms; It is no longer necessary to add a Constrain() argument to fitTo() calls to have internal constraints; applied. Any pdf term appearing in a product that does not contain an observable and shares one or more parameters; with another pdf term in the same product that does contain an observable is automatically picked up as a constraint term.; For example given a dataset D(x) which defines variable x as observable, the default logic works out as follows. F(x,a,b)*G(a,a0,a1) --> G is constraint term (a also appears in F(x)); F(x,a,b)*G(y,c,d) --> G is dropped (factorizing term). A Constrain(y) term in the above example will still force term G(y,c,d) to be interpreted as constraint term; Automatic caching of numeric integral calculations; Integrals that require numeric integrations in two of more dimensions are now automatically cached in the expensive object store.; The expensive object store allows to cache such values between difference instance of integral objects that represent the; same configuration. If integrals are created from an object (function or pdf) that live in a RooWorkspace the ; expensive object cache of the workspace will be used instead of the global store instance, and values stored in the workspace; store will also be persisted if the workspace is persisted. The global caching behavior of integral objects can be ; controlled through RooRealIntegral::setCache",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v526/index.html:7411,log,logic,7411,roofit/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v526/index.html,1,['log'],['logic']
Testability,"nsition from; manifesting signedness in types to instructions happened early on in LLVM's; timeline to make LLVM easier to work with. Opaque Pointers Mode; ====================. During the transition phase, LLVM can be used in two modes: In typed pointer; mode all pointer types have a pointee type and opaque pointers cannot be used.; In opaque pointers mode (the default), all pointers are opaque. The opaque; pointer mode can be disabled using ``-opaque-pointers=0`` in; LLVM tools like ``opt``, or ``-Xclang -no-opaque-pointers`` in clang.; Additionally, opaque pointer mode is automatically disabled for IR and bitcode; files that explicitly mention ``i8*`` style typed pointers. In opaque pointer mode, all typed pointers used in IR, bitcode, or created; using ``PointerType::get()`` and similar APIs are automatically converted into; opaque pointers. This simplifies migration and allows testing existing IR with; opaque pointers. .. code-block:: llvm. define i8* @test(i8* %p) {; %p2 = getelementptr i8, i8* %p, i64 1; ret i8* %p2; }. ; Is automatically converted into the following if -opaque-pointers; ; is enabled:. define ptr @test(ptr %p) {; %p2 = getelementptr i8, ptr %p, i64 1; ret ptr %p2; }. Migration Instructions; ======================. In order to support opaque pointers, two types of changes tend to be necessary.; The first is the removal of all calls to ``PointerType::getElementType()`` and; ``Type::getPointerElementType()``. In the LLVM middle-end and backend, this is usually accomplished by inspecting; the type of relevant operations instead. For example, memory access related; analyses and optimizations should use the types encoded in the load and store; instructions instead of querying the pointer type. Here are some common ways to avoid pointer element type accesses:. * For loads, use ``getType()``.; * For stores, use ``getValueOperand()->getType()``.; * Use ``getLoadStoreType()`` to handle both of the above in one call.; * For getelementptr instructions, us",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst:5984,test,test,5984,interpreter/llvm-project/llvm/docs/OpaquePointers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst,1,['test'],['test']
Testability,"nstance. tree->Branch(""px"", &Category, ""px/F"");. becomes. auto px = model->MakeField<float>(""px"");; // px is std::shared_ptr<float>. The physical layout changes slightly from big endian to little endian so that it matches the in-memory layout on; most modern architectures. Combined with a clear separation of offset/index data and payload data for collections,; uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; -----. RNTuple shall investigate improvements of the TTree I/O in the following ways. 1. More speed; * Improve mapping to vectorized and parallel hardware; * For types known at compile / JIT time: generate optimized code; * Optimized for simple types (float, int, and vectors of them); * Better memory control: work with a fixed budget of pre-defined I/O buffers; * Naturally thread-safe and asynchronous interfaces. 2. More robust interfaces; * Compile-time type safety by default; * Decomposition into layers: logical layer, primitives layer, storage layer; * Separation of data model and live data; * Self-contained I/O code to support creation of a standalone I/O library. Concepts; --------. At the **logical layer**, the user defines a data model using the RNTupleModel class.; The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree.; The data model can contain (nested) collections, e.g., a type can be `std::vector<std::vector<float>>`. Each serializable type is represented by a **field**, concretely by a templated version of RField,; e.g. `RField<double>`. A field can generate or adopt an associated **value**, which represents a memory location; storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the; deserialization and serialization. The (de-)serialization is a mapping from the C++ type to the more simple **column** type system. A column contains; an arbitrary number of fixed-sized elements of a well-defined se",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md:1326,log,logical,1326,tree/ntuple/v7/doc/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md,1,['log'],['logical']
Testability,"nt main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3417,test,test,3417,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"nt of how the diagnostic is formatted and in what; language it is rendered. Fix-It Hints; ^^^^^^^^^^^^. In some cases, the front end emits diagnostics when it is clear that some small; change to the source code would fix the problem. For example, a missing; semicolon at the end of a statement or a use of deprecated syntax that is; easily rewritten into a more modern form. Clang tries very hard to emit the; diagnostic and recover gracefully in these and other cases. However, for these cases where the fix is obvious, the diagnostic can be; annotated with a hint (referred to as a ""fix-it hint"") that describes how to; change the code referenced by the diagnostic to fix the problem. For example,; it might add the missing semicolon at the end of the statement or rewrite the; use of a deprecated construct into something more palatable. Here is one such; example from the C++ front end, where we warn about the right-shift operator; changing meaning from C++98 to C++11:. .. code-block:: text. test.cpp:3:7: warning: use of right-shift operator ('>>') in template argument; will require parentheses in C++11; A<100 >> 2> *a;; ^; ( ). Here, the fix-it hint is suggesting that parentheses be added, and showing; exactly where those parentheses would be inserted into the source code. The; fix-it hints themselves describe what changes to make to the source code in an; abstract manner, which the text diagnostic printer renders as a line of; ""insertions"" below the caret line. :ref:`Other diagnostic clients; <DiagnosticConsumer>` might choose to render the code differently (e.g., as; markup inline) or even give the user the ability to automatically fix the; problem. Fix-it hints on errors and warnings need to obey these rules:. * Since they are automatically applied if ``-Xclang -fixit`` is passed to the; driver, they should only be used when it's very likely they match the user's; intent.; * Clang must recover from errors as if the fix-it had been applied.; * Fix-it hints on a warning mu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:18755,test,test,18755,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"nt x; // note: uninitialized field 'this->b.x'; int y; // note: uninitialized field 'this->b.y'; };; int *iptr; // note: uninitialized pointer 'this->iptr'; B b;; B *bptr;; char *cptr;. A (B *bptr, char *cptr) : bptr(bptr), cptr(cptr) {}; };. void f() {; A::B b;; char c;; A a(&b, &c); // warning: 3 uninitialized fields; // after the constructor call; }. optin.cplusplus.VirtualCall; (C++); Check virtual member function calls during construction or; destruction. class A {; public:; A() {; f(); // warn; }; virtual void f();; };. class A {; public:; ~A() {; this->f(); // warn; }; virtual void f();; };. optin.mpi.MPI-Checker; (C); Checks MPI code. void test() {; double buf = 0;; MPI_Request sendReq1;; MPI_Ireduce(MPI_IN_PLACE, &buf, 1, MPI_DOUBLE, MPI_SUM,; 0, MPI_COMM_WORLD, &sendReq1);; } // warn: request 'sendReq1' has no matching wait. void test() {; double buf = 0;; MPI_Request sendReq;; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq);; MPI_Irecv(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Wait(&sendReq, MPI_STATUS_IGNORE);; }. void missingNonBlocking() {; int rank = 0;; MPI_Comm_rank(MPI_COMM_WORLD, &rank);; MPI_Request sendReq1[10][10][10];; MPI_Wait(&sendReq1[1][7][9], MPI_STATUS_IGNORE); // warn; }. optin.osx.cocoa.localizability.EmptyLocalizationContextChecker; (ObjC); Check that NSLocalizedString macros include a comment for context. - (void)test {; NSString *string = NSLocalizedString(@""LocalizedString"", nil); // warn; NSString *string2 = NSLocalizedString(@""LocalizedString"", @"" ""); // warn; NSString *string3 = NSLocalizedStringWithDefaultValue(; @""LocalizedString"", nil, [[NSBundle alloc] init], nil,@""""); // warn; }. optin.osx.cocoa.localizability.NonLocalizedStringChecker; (ObjC); Warns about uses of non-localized NSStrings passed to UI methods; expecting localized NSStrings. NSString *alarmText =; NSLocalizedString(@""Enabled"", @""Indicates alarm is ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:11049,test,test,11049,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"nt'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. -----------------------------; Element Total Found; -----------------------------; Scopes 3 0; Symbols 4 1; Types 2 1; Lines 17 6; -----------------------------; Total 26 8. COMPARISON MODE; ^^^^^^^^^^^^^^^; In this mode :program:`llvm-debuginfo-analyzer` compares logical views; to produce a report with the logical elements that are missing or added.; This a very powerful aid in finding semantic differences in the debug; information produced by different toolchain versions or even completely; different toolchains altogether (For example a compiler producing DWARF; can be directly compared against a completely different compiler that; produces CodeView). Given the previous example we found the above debug information issue; (related to the previous invalid scope location for the **'typedef int; INTEGER'**) by comparing against another compiler. Using GCC to generate test-dwarf-gcc.o, we can apply a selection pattern; with the printing mode to obtain the following logical view output. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --select-regex --select-nocase --select=INTe; --report=list; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. Logical View:; [000] {File} 'test-dwarf-gcc.o'. [001] {CompileUnit} 'test.cpp'; [004] 4 {TypeAlias} 'INTEGER' -> 'int'; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'. The output shows that both objects contain the same elements. But the; **'typedef INTEGER'** is located at different scope level. The GCC; generated object, shows **'4'**, which is the correct value. Note that there is no requirement that GCC must produce identical or; similar DWARF to Clang to allow the comparison. We're only comparing; the semantics. The same case when comparing CodeView debug information; generat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:28733,log,logical,28733,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"nt->SetMeasure(m, Int_t(gRandom->Gaus(m,m+1)));; }; // continued...; // fill the matrix; for(UChar_t i0 = 0; i0 < 4; i0++) {; for(UChar_t i1 = 0; i1 < 4; i1++) {; event->SetMatrix(i0,i1,gRandom->Gaus(i0*i1,1));; }; }; // create and fill the Track objects; for (Int_t t = 0; t < ntrack; t++) event->AddTrack(random);; t4.Fill(); // Fill the tree; event->Clear(); // Clear before reloading event; }; f.Write(); // Write the file header; t4.Print(); // Print the tree contents; }; ```. ### Reading the Tree. First, we check if the shared library with the class definitions is; loaded. If not we load it. Then we read two branches, one for the number; of tracks and one for the entire event. We check the number of tracks; first, and if it meets our condition, we read the entire event. We show; the fist entry that meets the condition. ``` {.cpp}; void tree4r() {; // check if the event class is in the dictionary; // if it is not load the definition in libEvent.so; if (!TClassTable::GetDict(""Event"")) {; gSystem->Load(""$ROOTSYS/test/libEvent.so"");; }; // read the tree generated with tree4w. // note that we use ""new"" to create the TFile and TTree objects, because we; // want to keep these objects alive when we leave this function.; TFile *f = new TFile(""tree4.root"");; TTree *t4 = (TTree*)f->Get(""t4"");. // create a pointer to an event object for reading the branch values.; Event *event = new Event();; // get two branches and set the branch address; TBranch *bntrack = t4->GetBranch(""fNtrack"");; TBranch *branch = t4->GetBranch(""event_split"");; branch->SetAddress(&event);. Int_t nevent = t4->GetEntries();; Int_t nselected = 0;; Int_t nb = 0;; for (Int_t i=0; i<nevent; i++) {; //read branch ""fNtrack""only; bntrack->GetEntry(i);. // reject events with more than 587 tracks; if (event->GetNtrack() > 587)continue;. // read complete accepted event in memory; nb += t4->GetEntry(i);; nselected++;. // print the first accepted event; if (nselected == 1) t4->Show();; // clear tracks array; event->Cle",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:64389,test,test,64389,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"ntStruct.h LINKDEF ElementStructLinkDef.h OPTIONS -inlineInputHeader); ROOT_ADD_GTEST(testTOffsetGeneration TOffsetGeneration.cxx ElementStruct.cxx ElementStructDict.cxx; LIBRARIES RIO Tree MathCore; ); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET testTOffsetGeneration POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libElementStructDict_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libElementStructDict_rdict.pcm); endif(); target_include_directories(testTOffsetGeneration PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_STANDARD_LIBRARY_PACKAGE(SillyStruct NO_INSTALL_HEADERS HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/SillyStruct.h SOURCES SillyStruct.cxx LINKDEF SillyStructLinkDef.h DEPENDENCIES RIO); ROOT_ADD_GTEST(testBulkApi BulkApi.cxx LIBRARIES RIO Tree TreePlayer); #FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),; # to be reverted after investigation.; if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4); ROOT_ADD_GTEST(testBulkApiMultiple BulkApiMultiple.cxx LIBRARIES RIO Tree TreePlayer TIMEOUT 3000); ROOT_ADD_GTEST(testBulkApiVarLength BulkApiVarLength.cxx LIBRARIES RIO Tree TreePlayer); ROOT_ADD_GTEST(testBulkApiSillyStruct BulkApiSillyStruct.cxx LIBRARIES RIO Tree TreePlayer SillyStruct); endif(); ROOT_ADD_GTEST(testTBasket TBasket.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTBranch TBranch.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTIOFeatures TIOFeatures.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeCluster TTreeClusterTest.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTChainParsing TChainParsing.cxx LIBRARIES RIO Tree); if(imt); ROOT_ADD_GTEST(testTTreeImplicitMT ImplicitMT.cxx LIBRARIES RIO Tree); endif(); ROOT_ADD_GTEST(testTChainSaveAsCxx TChainSaveAsCxx.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTChainRegressions TChainRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeTruncatedDatatypes TTreeTruncatedDatatypes.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt:1252,test,testBulkApiMultiple,1252,tree/tree/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt,1,['test'],['testBulkApiMultiple']
Testability,"ntTest: Prints out the word ""tainted"" for every expression that; carries taint. At the time of this writing, taint was only introduced by the; checks under experimental.security.taint.TaintPropagation; this checker may; eventually move to the security.taint package. - debug.ExprInspection: Responds to certain function calls, which are modeled; after builtins. These function calls should affect the program state other; than the evaluation of their arguments; to use them, you will need to declare; them within your test file. The available functions are described below. (FIXME: debug.ExprInspection should probably be renamed, since it no longer only; inspects expressions.). ExprInspection checks; ---------------------. - ``void clang_analyzer_eval(bool);``. Prints TRUE if the argument is known to have a non-zero value, FALSE if the; argument is known to have a zero or null value, and UNKNOWN if the argument; isn't sufficiently constrained on this path. You can use this to test other; values by using expressions like ""x == 5"". Note that this functionality is; currently DISABLED in inlined functions, since different calls to the same; inlined function could provide different information, making it difficult to; write proper -verify directives. In C, the argument can be typed as 'int' or as '_Bool'. Example usage::. clang_analyzer_eval(x); // expected-warning{{UNKNOWN}}; if (!x) return;; clang_analyzer_eval(x); // expected-warning{{TRUE}}. - ``void clang_analyzer_checkInlined(bool);``. If a call occurs within an inlined function, prints TRUE or FALSE according to; the value of its argument. If a call occurs outside an inlined function,; nothing is printed. The intended use of this checker is to assert that a function is inlined at; least once (by passing 'true' and expecting a warning), or to assert that a; function is never inlined (by passing 'false' and expecting no warning). The; argument is technically unnecessary but is intended to clarify intent. You might wonder wh",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:3166,test,test,3166,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['test']
Testability,nt_new.h; compiler-rt/lib/sanitizer_common/sanitizer_platform.h; compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_openbsd.cpp; compiler-rt/lib/sanitizer_common/sanitizer_platform_limits_openbsd.h; compiler-rt/lib/sanitizer_common/sanitizer_stacktrace_printer.h; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.cpp; compiler-rt/lib/sanitizer_common/sanitizer_stack_store.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compile,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99105,test,tests,99105,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"nt_size* defaults 6 for all targets before GFX10. For GFX10 onwards; defaults to 6 if target feature ``wavefrontsize64`` is enabled, otherwise 5.; Note that wavefront size is specified as a power of two, so a value of **n**; means a size of 2^ **n**.; - *call_convention* defaults to -1.; - *kernarg_segment_alignment*, *group_segment_alignment*, and; *private_segment_alignment* default to 4. Note that alignments are specified; as a power of 2, so a value of **n** means an alignment of 2^ **n**.; - *enable_tg_split* defaults to 1 if target feature ``tgsplit`` is enabled for; GFX90A onwards.; - *enable_wgp_mode* defaults to 1 if target feature ``cumode`` is disabled for; GFX10 onwards.; - *enable_mem_ordered* defaults to 1 for GFX10 onwards. The *.amd_kernel_code_t* directive must be placed immediately after the; function label and before any instructions. For a full list of amd_kernel_code_t keys, refer to AMDGPU ABI document,; comments in lib/Target/AMDGPU/AmdKernelCodeT.h and test/CodeGen/AMDGPU/hsa.s. .. _amdgpu-amdhsa-assembler-example-v2:. Code Object V2 Example Source Code; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. .. warning::; Code object V2 generation is no longer supported by this version of LLVM. Here is an example of a minimal assembly source file, defining one HSA kernel:. .. code::; :number-lines:. .hsa_code_object_version 1,0; .hsa_code_object_isa. .hsatext; .globl hello_world; .p2align 8; .amdgpu_hsa_kernel hello_world. hello_world:. .amd_kernel_code_t; enable_sgpr_kernarg_segment_ptr = 1; is_ptr64 = 1; compute_pgm_rsrc1_vgprs = 0; compute_pgm_rsrc1_sgprs = 0; compute_pgm_rsrc2_user_sgpr = 2; compute_pgm_rsrc1_wgp_mode = 0; compute_pgm_rsrc1_mem_ordered = 0; compute_pgm_rsrc1_fwd_progress = 1; .end_amd_kernel_code_t. s_load_dwordx2 s[0:1], s[0:1] 0x0; v_mov_b32 v0, 3.14159; s_waitcnt lgkmcnt(0); v_mov_b32 v1, s0; v_mov_b32 v2, s1; flat_store_dword v[1:2], v0; s_endpgm; .Lfunc_end0:; .size hello_world, .Lfunc_end0-hello_world. .. _amdgpu-amdhsa-assembler-pred",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst:435303,test,test,435303,interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,1,['test'],['test']
Testability,"nt`)* `LineEnd`; PreIfdef: `LineBegin` (`WhiteSpaceOrCComment`)*; : (""#ifdef"" | ""#ifndef"") (`WhiteSpace`)+ `MacroName`; : (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreElse: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#else"" (`WhiteSpaceOrAnyComment`)* `LineEnd`; PreEndif: `LineBegin` (`WhiteSpaceOrCComment`)*; : ""#endif"" (`WhiteSpaceOrAnyComment`)* `LineEnd`. ..; PreRegContentException: `PreIfdef` | `PreElse` | `PreEndif` | EOF; PreRegion: .* - `PreRegContentException`; :| `PreIfdef`; : (`PreRegion`)*; : [`PreElse`]; : (`PreRegion`)*; : `PreEndif`. A :token:`MacroName` can be defined anywhere in a TableGen file. The name has; no value; it can only be tested to see whether it is defined. A macro test region begins with an ``#ifdef`` or ``#ifndef`` directive. If; the macro name is defined (``#ifdef``) or undefined (``#ifndef``), then the; source code between the directive and the corresponding ``#else`` or; ``#endif`` is processed. If the test fails but there is an ``#else``; clause, the source code between the ``#else`` and the ``#endif`` is; processed. If the test fails and there is no ``#else`` clause, then no; source code in the test region is processed. Test regions may be nested, but they must be properly nested. A region; started in a file must end in that file; that is, must have its; ``#endif`` in the same file. A :token:`MacroName` may be defined externally using the ``-D`` option on the; ``*-tblgen`` command line::. llvm-tblgen self-reference.td -Dmacro1 -Dmacro3. Appendix A: Bang Operators; ==========================. Bang operators act as functions in value expressions. A bang operator takes; one or more arguments, operates on them, and produces a result. If the; operator produces a boolean result, the result value will be 1 for true or 0; for false. When an operator tests a boolean argument, it interprets 0 as false; and non-0 as true. .. warning::; The ``!getop`` and ``!setop`` bang operators are deprecated in favor of; ``!getdagop`` and ``!setdagop``. ``!add",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:58207,test,test,58207,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['test'],['test']
Testability,"ntation. These projects are independent of each other.; Complete the investigation into Clang's C conformance: Clang's; C status page contain a number of entries marked as; Unknown. Completing the investigation involves adding; test; coverage for the various standards papers and updating the documentation; accordingly. Improve Clang's C and C++ standard conformance test coverage:; Clang's test suite is structured such that most tests are written to provide; coverage for what part of the compiler the feature's implementation exists in;; we have parsing tests in clang/test/Parser, and semantic analysis; tests in clang/test/Sema*, etc. We also have tests written to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for; C; and; C++; defect reports and updating the documentation accordingly.; Bug triage: Clang's ; issue trackercurrently has over 20,000 open issues, many of which are not; appropriately tagged, are no longer reproducible, could use a reduced test case,; or otherwise needs some manual interaction. We can always use help with; bug triage and; issue tracker maintenance. Improve build times with Clang: the time it takes Clang to process a; translation unit is very important to our users; the lower the build time, the; b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:1967,test,test,1967,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,2,['test'],"['test', 'tests']"
Testability,"ntegration is clear.; (Numba does not currently provide support for C++.). Usage; -------. ``cppyy`` does not use Numba extension hooks to minimize accidental; dependencies.; Instead, it requires that the extensions are loaded explicitly by any code; that uses it::. import cppyy.numba_ext. After that, Numba is able to trace ``cppyy`` bound code when applying the; usual ``numba.njit`` decorator. Numba type declarations are done lazily, with the ``numba_ext`` module only; initially registering hooks on proxy base classes, to keep overheads in; Numba's type-resolution to a minimum.; On use in a JITed trace, each C++ type or function call is refined to the; actual, concrete types and type-specific overloads, with templates; instantiated as-needed.; Where possible, lowering is kept generic to reduce the number of callbacks; in Numba's compilation chain. Examples; --------. The following, non-exhaustive, set of examples gives an idea of the; current level of support.; More examples can be found in the `test suite`_. C++ free (global) functions can be called and overloads will be selected, or; a template will be instantiated, based on the provided types.; Exact type matches are fully supported, there is some support for typedefs; add implicit conversions for builtin types, there is no support for; conversions of custom types or default arguments. - **Basic usage**: To use ``cppyy`` in Numba JITed code, simply import; ``cppyy.numba_ext``, after which further use is transparent and the same; as when otherwise using ``cppyy`` in Python.; Example:. .. code-block:: python. >>> import numba; >>> import cppyy; >>> import cppyy.numba_ext # enables numba to work with cppyy; >>> import math; >>> @numba.jit(nopython=True); ... def cpp_sqrt(x):; ... return cppyy.gbl.sqrt(x) # direct use, no extra setup required; >>> print(""Sqrt of 4: "", cpp_sqrt(4.0)); Sqrt of 4: 2.0; >>> print(""Sqrt of Pi: "", cpp_sqrt(math.pi)); Sqrt of Pi: 1.7724538509055159. - **Overload selection**: C++ overloads ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/numba.rst:3171,test,test,3171,bindings/pyroot/cppyy/cppyy/doc/source/numba.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/numba.rst,1,['test'],['test']
Testability,"nteractivity; - enable more details when changing camera position/zoom; - Improvements in histograms 3D drawing; - all lego options: lego1..lego4, combined with 'fb', 'bb', '0' or 'z'; - support axis labels on lego plots; - support lego plots for TH1; - Significant (up to factor 10) performance improvement in 3D-graphics; - Implement ROOT6-like color palettes; - Support non-equidistant bins for TH1/TH2 objects.; - Improve TF1 drawing - support exp function in TFormula, fix errors with logx scale, enable zoom-in, (re)calculate function points when zooming; - Introduce many context menus for improving interactivity; - Implement col0 and col0z draw option for TH2 histograms, similar to ROOT6; - Implement box and hbox draw options for TH1 class; - Significant (factor 4) I/O performance improvement; - New 'flex' layout:; - create frames like in Multi Document Interface; - one could move/resize/minimize/maximize such frames. For more details, like the complete change log, the documentation, and very detailed examples, see the [JSROOT home page](https://root.cern.ch/js) and the [JSROOT project github page](https://github.com/linev/jsroot) . ## Tutorials; * New tutorial `treegetval.C` illustrating how to retrieve `TTree` variables in arrays.; * Add script to automatically translate tutorials into notebooks; * Embed it into the documentation generation; * Make the notebooks available in the [tutorials section of the class documentation](https://root.cern/doc/master/group__Tutorials.html). ## Build, Configuration and Testing Infrastructure; - `root-config` does not suppress deprecation warnings (-Wno-deprecated-declarations) anymore. This means compilers will now diagnose the use of deprecated interfaces in user code.; - Added new 'builtin_vc' option to bundle a version of Vc within ROOT.; The default is OFF, however if the Vc package is not found in the system the option is switched to; ON if the option 'vc' option is ON.; - Many improvements (provided by Mattias Ellert):; -",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v608/index.md:27638,log,log,27638,README/ReleaseNotes/v608/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v608/index.md,1,['log'],['log']
Testability,ntime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; fl,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126775,test,testing,126775,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testing']
Testability,"ntly do the wrong thing.; If this is a new method or you control the callers, you can use; NSParameterAssert() (or the equivalent) to check the precondition and; remove the nil return. But if you don't control the callers and they rely on; this behavior, you should return mark the method _Nonnull and return; nil cast to _Nonnull anyway.; (Note that (4) doesn't apply in cases where the caller can't know they passed; bad parameters. For example,; +[NSData dataWithContentsOfFile:options:error:] will fail if the file; doesn't exist, but there's no way to check for that in advance. This means; you're really in (2).); If you're in (5), document it, then figure out if you're now in (2), (3), or; (4). :-); Q: How do I tell the analyzer that I am intentionally violating nullability?; In some cases, it may make sense for methods to intentionally violate; nullability. For example, your method may — for reasons of backward; compatibility — chose to return nil and log an error message in a method; with a non-null return type when the client violated a documented precondition; rather than check the precondition with NSAssert(). In these cases, you; can suppress the analyzer warning with a cast:. return (id _Nonnull)nil;. Note that this cast does not affect code generation. Q: The analyzer assumes that a loop body is never entered. How can I tell it that the loop body will be entered at least once?. In the contrived example above, the analyzer has detected that the body of; the loop is never entered for the case where length <= 0. In this; particular example, you may know that the loop will always be entered because; the input parameter length will be greater than zero in all calls to this; function. You can teach the analyzer facts about your code as well as document; it by using assertions. By adding assert(length > 0) in the beginning; of the function, you tell the analyzer that your code is never expecting a zero; or a negative value, so it won't need to test the correctness o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:6871,log,log,6871,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,1,['log'],['log']
Testability,nto several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler and linker invocations. See; [https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html](https://cmake.org/cmake/help/latest/variable/CMAKE_LANG_FLAGS.html). - `CMAKE_C_COMPILER`. Select the C compiler executable to be used. Note that the C++ compiler is; inferred automatically i.e. when specifying `path/to/clang` CMake will; automatically use `path/to/clang++` as the C++ compiler. See; [https:/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3566,test,test,3566,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test']
Testability,"nto the first corpus; directory. Defaults to 0. This flag can be used to minimize a corpus.; ``-merge_control_file``; Specify a control file used for the merge process.; If a merge process gets killed it tries to leave this file in a state; suitable for resuming the merge. By default a temporary file will be used.; ``-minimize_crash``; If 1, minimizes the provided crash input.; Use with -runs=N or -max_total_time=N to limit the number of attempts.; ``-reload``; If set to 1 (the default), the corpus directory is re-read periodically to; check for new inputs; this allows detection of new inputs that were discovered; by other fuzzing processes.; ``-jobs``; Number of fuzzing jobs to run to completion. Default value is 0, which runs a; single fuzzing process until completion. If the value is >= 1, then this; number of jobs performing fuzzing are run, in a collection of parallel; separate worker processes; each such worker process has its; ``stdout``/``stderr`` redirected to ``fuzz-<JOB>.log``.; ``-workers``; Number of simultaneous worker processes to run the fuzzing jobs to completion; in. If 0 (the default), ``min(jobs, NumberOfCpuCores()/2)`` is used.; ``-dict``; Provide a dictionary of input keywords; see Dictionaries_.; ``-use_counters``; Use `coverage counters`_ to generate approximate counts of how often code; blocks are hit; defaults to 1.; ``-reduce_inputs``; Try to reduce the size of inputs while preserving their full feature sets;; defaults to 1.; ``-use_value_profile``; Use `value profile`_ to guide corpus expansion; defaults to 0.; ``-only_ascii``; If 1, generate only ASCII (``isprint``+``isspace``) inputs. Defaults to 0.; ``-artifact_prefix``; Provide a prefix to use when saving fuzzing artifacts (crash, timeout, or; slow inputs) as ``$(artifact_prefix)file``. Defaults to empty.; ``-exact_artifact_path``; Ignored if empty (the default). If non-empty, write the single artifact on; failure (crash, timeout) as ``$(exact_artifact_path)``. This overrides; ``-arti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:12808,log,log,12808,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['log'],['log']
Testability,"ntrolled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8136,test,test,8136,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['test'],['test']
Testability,"ntry single exit regions in a function,; where a region is defined as any subgraph that is connected to the remaining; graph at only two spots. Furthermore, a hierarchical region tree is built. .. _passes-scalar-evolution:. ``scalar-evolution``: Scalar Evolution Analysis; -----------------------------------------------. The ``ScalarEvolution`` analysis can be used to analyze and categorize scalar; expressions in loops. It specializes in recognizing general induction; variables, representing them with the abstract and opaque ``SCEV`` class.; Given this analysis, trip counts of loops and other important properties can be; obtained. This analysis is primarily useful for induction variable substitution and; strength reduction. ``scev-aa``: ScalarEvolution-based Alias Analysis; -------------------------------------------------. Simple alias analysis implemented in terms of ``ScalarEvolution`` queries. This differs from traditional loop dependence analysis in that it tests for; dependencies within a single iteration of a loop, rather than dependencies; between different iterations. ``ScalarEvolution`` has a more complete understanding of pointer arithmetic; than ``BasicAliasAnalysis``' collection of ad-hoc analyses. ``stack-safety``: Stack Safety Analysis; ---------------------------------------. The ``StackSafety`` analysis can be used to determine if stack allocated; variables can be considered safe from memory access bugs. This analysis' primary purpose is to be used by sanitizers to avoid unnecessary; instrumentation of safe variables. Transform Passes; ================. This section describes the LLVM Transform Passes. ``adce``: Aggressive Dead Code Elimination; ------------------------------------------. ADCE aggressively tries to eliminate code. This pass is similar to :ref:`DCE; <passes-dce>` but it assumes that values are dead until proven otherwise. This; is similar to :ref:`SCCP <passes-sccp>`, except applied to the liveness of; values. ``always-inline``: Inline",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst:11123,test,tests,11123,interpreter/llvm-project/llvm/docs/Passes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst,1,['test'],['tests']
Testability,"nts to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. One can therefore talk about ""the node or volume hierarchy"", but in; fact, an element is made by a pair volume-node. In the line above is; represented just a single branch, but of course from any volume other; branches can also emerge. The index of a node in such a branch (counting; only nodes) is called `depth`. The top node have always `depth=0`. Volumes need to have their daughter nodes defined when the geometry is; closed. They will build additional structures (called `voxels` ) in; order to fasten-up the search algorithms. Finally, nodes can be regarded; as bi-directional links between containers and contained volumes. The structure defined in this way is a graph structure since volumes are; replicable (same volume can become daughter node of several other; volumes), every volume becoming a branch in this graph. Any volume in; the logical graph can become the actual top volume at run time (see; **`TGeoManager::SetTopVolume()`). All functionalities of the modeller; will behave in this case as if only the corresponding branch starting; from this volume is the active geometry.**. ![A geometry hierarchy in memory](pictures/030001CE.png). Nodes are never instantiated directly by users, but created as a result; of volume operations. Adding a volume named A with a given `user id`; inside a volume B will create a node named `A_id.` This will be added to; the list of nodes stored by B. In addition, when applying a division; operation in N slices to a volume A, a list of nodes `B_1`, `B_2`, ... ,; `B_N` is also created. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformatio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:60093,log,logical,60093,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"nts with negative weights are ignored in the training (but are included for testing and performance evaluation). Configuration options for MVA method :. Configuration options reference for MVA method: Fisher. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). Method No Fisher Fisher, Mahalanobis Discrimination method. Configuration options for MVA method :. Configuration options reference for MVA method: PDERS. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with ne",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:3306,test,testing,3306,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"nuit2 source distribution which contains all the needed files to build with [CMake]. See [DEVELOP.md] for more information about extracting the source files from [ROOT]. ## Building. To build, use the standard [CMake] procedure; on most systems, this looks like:. ```bash; mkdir PATH_TO_MINIUT2_BUILD; cd PATH_TO_MINUIT2_BUILD; cmake PATH_TO_MINUIT2_SOURCE; cmake --build .; ```. Of course, GUIs, IDEs, etc. that work with [CMake] will work with this package. The standard method of CMake building, with a build directory inside the Minuit2 source directory and using the makefile generator, would look like:. ```bash; cd PATH_TO_MINUIT2_SOURCE; mkdir build; cd build; cmake ..; make; ```. The standard [CMake] variables, such as `CMAKE_BUILD_TYPE` and `CMAKE_INSTALL_PREFIX`, work with Minuit2. There are two other options:. * `minuit2_mpi` activates the (outdated C++) MPI bindings.; * `minuit2_omp` activates OpenMP (make sure all FCNs are threadsafe). ## Testing. You can run `ctest` or `make test` to run the Minuit2 test suite. ## Installing or using in another package. You can install the package using `cmake --build --target install .` (or `make install` if directly using the make system), or you can use it from the build directory. You can also include it in another CMake project using `add_subdirectory()` and linking to the `Minuit2` target. Since this package also exports targets, `find_package(Minuit2)` will also work once this package is built or installed. (For the curious, CMake adds a config script to `~/.cmake/packages` when building or; `$CMAKE_INSTALL_PREFIX/share/cmake/Modules` when installing a package that has export commands.). To repeat; using this in your own CMake project usually amounts to:. ```cmake; find_package(Minuit2); # OR; add_subdirectory(Minuit2). target_link_libraries(MyExeOrLib PUBLIC Minuit2::Minuit2); ```. You do not need to add include directories or anything else for Minuit2; the CMake target system handles all of this for you. ## Packaging",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/README.md:1372,test,test,1372,math/minuit2/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/README.md,2,['test'],['test']
Testability,"nvalidationMethodDecl : NSObject {; NeedInvalidation *Var; // warn; }; @end. @implementation MissingInvalidationMethodDecl; @end. alpha.osx.cocoa.localizability.PluralMisuseChecker; (ObjC); Warns against using one vs. many plural pattern in code; when generating localized strings. NSString *reminderText =; NSLocalizedString(@""None"", @""Indicates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:9926,test,test,9926,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"nvptx64-nvidia-cuda`` version of; ``offloading/memory_manager.cpp`` as XFAIL:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp"". .. option:: --xfail-not=LIST. Do not treat the specified tests as ``XFAIL``. The environment variable; ``LIT_XFAIL_NOT`` can also be used in place of this option. The syntax is the; same as for :option:`--xfail` and ``LIT_XFAIL``. :option:`--xfail-not` and; ``LIT_XFAIL_NOT`` always override all other ``XFAIL`` specifications,; including an :option:`--xfail` appearing later on the command line. The; primary purpose is to suppress an ``XPASS`` result without modifying a test; case that uses the ``XFAIL`` directive. ADDITIONAL OPTIONS; ------------------. .. option:: --debug. Run :program:`lit` in debug mode, for debugging configuration issues and; :program:`lit` itself. .. option:: --show-suites. List the discovered test suites and exit. .. option:: --show-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to und",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:10650,test,tests,10650,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"o a directory without any version (which would be; ``lib/aarch64-none-linux-android`` in our example). Clang will now look for; directories for lower versions and use the newest version it finds instead,; e.g. if you have ``lib/aarch64-none-linux-android21`` and; ``lib/aarch64-none-linux-android29``, ``-target aarch64-none-linux-android23``; will use the former and ``-target aarch64-none-linux-android30`` will use the; latter. Falling back to a versionless directory will now emit a warning, and; the fallback will be removed in Clang 19. Windows Support; ^^^^^^^^^^^^^^^; - Fixed an assertion failure that occurred due to a failure to propagate; ``MSInheritanceAttr`` attributes to class template instantiations created; for explicit template instantiation declarations. - The ``-fno-auto-import`` option was added for MinGW targets. The option both; affects code generation (inhibiting generating indirection via ``.refptr``; stubs for potentially auto imported symbols, generating smaller and more; efficient code) and linking (making the linker error out on such cases).; If the option only is used during code generation but not when linking,; linking may succeed but the resulting executables may expose issues at; runtime. - Clang now passes relevant LTO options to the linker (LLD) in MinGW mode. LoongArch Support; ^^^^^^^^^^^^^^^^^; - Added builtins support for all LSX (128-bits SIMD) and LASX (256-bits SIMD); instructions.; - Added builtins support for approximate calculation instructions that were; introduced in LoongArch Reference Manual V1.10.; - Made ``-mcmodel=`` compatible with LoongArch gcc that accepted ``normal``,; ``medium`` and ``extreme``.; - The ``model`` attribute was now supported for overriding the default code; model used to access global variables. The following values were supported:; ``normal``, ``medium`` and ``extreme``. *Example Code*:. .. code-block:: c. int var __attribute((model(""extreme"")));. - Default to ``-fno-direct-access-external-data`` for ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:62964,stub,stubs,62964,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['stub'],['stubs']
Testability,"o completion. Please see the script's ``--help`` for; more information on how to run it, and the different options available to you.; If you want to get the most out of PGO for a particular use-case (e.g. compiling; a specific large piece of software), please do read the section below on; 'benchmark' selection. Please note that this script is only tested on a few Linux distros. Patches to; add support for other platforms, as always, are highly appreciated. :). This script also supports a ``--dry-run`` option, which causes it to print; important commands instead of running them. Selecting 'benchmarks'; ======================. PGO does best when the profiles gathered represent how the user plans to use the; compiler. Notably, highly accurate profiles of llc building x86_64 code aren't; incredibly helpful if you're going to be targeting ARM. By default, the script above does two things to get solid coverage. It:. - runs all of Clang and LLVM's lit tests, and; - uses the instrumented Clang to build Clang, LLVM, and all of the other; LLVM subprojects available to it. Together, these should give you:. - solid coverage of building C++,; - good coverage of building C,; - great coverage of running optimizations,; - great coverage of the backend for your host's architecture, and; - some coverage of other architectures (if other arches are supported backends). Altogether, this should cover a diverse set of uses for Clang and LLVM. If you; have very specific needs (e.g. your compiler is meant to compile a large browser; for four different platforms, or similar), you may want to do something else.; This is configurable in the script itself. Building Clang with PGO; =======================. If you prefer to not use the script or the cmake cache, this briefly goes over; how to build Clang/LLVM with PGO. First, you should have at least LLVM, Clang, and compiler-rt checked out; locally. Next, at a high level, you're going to need to do the following:. 1. Build a standard Release Clan",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:2080,test,tests,2080,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['test'],['tests']
Testability,"o control the exact; output format of the diagnostics that it generates. .. _opt_fshow-column:. .. option:: -f[no-]show-column. Print column number in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the column number of a diagnostic. For example, when this is; enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will print ""test.c:28: warning..."" with; no column number. The printed column numbers count bytes from the beginning of the; line; take care if your source contains multibyte characters. .. _opt_fshow-source-location:. .. option:: -f[no-]show-source-location. Print source file/line/column information in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the filename, line number and column number of a diagnostic.; For example, when this is enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will not print the ""test.c:28:8: ""; part. .. _opt_fcaret-diagnostics:. .. option:: -f[no-]caret-diagnostics. Print source line and ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is enabled, Clang will print; something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. .. option:: -f[no-]color-diagnostics. This option, which defaults to on when a color-capable terminal is; detected, controls whether or not Clang prints diagnostics in color. When this option is enabled, Clang will use colors to highlight; specific parts of the diagnostic, e.g.,. .. nasty hack to not lose our dignity. .. raw:: html. <pre>; <b><span style=""color:black"">test.c:28:8: <s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:6528,test,test,6528,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"o cover an entire; line. Leading and trailing whitespace is ignored, unless; :option:`--strict-whitespace` is also specified. (Note: negative; matches from ``CHECK-NOT`` are not affected by this option!). Passing this option is equivalent to inserting ``{{^ *}}`` or; ``{{^}}`` before, and ``{{ *$}}`` or ``{{$}}`` after every positive; check pattern. .. option:: --strict-whitespace. By default, FileCheck canonicalizes input horizontal whitespace (spaces and; tabs) which causes it to ignore these differences (a space will match a tab).; The :option:`--strict-whitespace` argument disables this behavior. End-of-line; sequences are canonicalized to UNIX-style ``\n`` in all modes. .. option:: --ignore-case. By default, FileCheck uses case-sensitive matching. This option causes; FileCheck to use case-insensitive matching. .. option:: --implicit-check-not check-pattern. Adds implicit negative checks for the specified patterns between positive; checks. The option allows writing stricter tests without stuffing them with; ``CHECK-NOT``\ s. For example, ""``--implicit-check-not warning:``"" can be useful when testing; diagnostic messages from tools that don't have an option similar to ``clang; -verify``. With this option FileCheck will verify that input does not contain; warnings not covered by any ``CHECK:`` patterns. .. option:: --dump-input <value>. Dump input to stderr, adding annotations representing currently enabled; diagnostics. When there are multiple occurrences of this option, the; ``<value>`` that appears earliest in the list below has precedence. The; default is ``fail``. * ``help`` - Explain input dump and quit; * ``always`` - Always dump input; * ``fail`` - Dump input on failure; * ``never`` - Never dump input. .. option:: --dump-input-context <N>. In the dump requested by ``--dump-input``, print ``<N>`` input lines before; and ``<N>`` input lines after any lines specified by ``--dump-input-filter``.; When there are multiple occurrences of this option, the largest s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:4171,test,tests,4171,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['tests']
Testability,"o fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_level>; The default is still 'no compression' but this will allow to study the; impact of compression. Add sort of 'progress' counter for merging is now shown; on the client:;  ;     root [n] p->Process(...);       ... ;       Mst-0: merging output objects ... / (4; workers still sending). This asserts socket activity and fixes the timeout; problems during long merging phases reported in a few cases.; In TFileMerger, create directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynam",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:7490,assert,asserts,7490,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['assert'],['asserts']
Testability,"o histograms with the same; // name; ```. ## Normalizing Histograms. You can scale a histogram ( **`TH1`** `*h` ) such that the bins; integral is equal to the normalization parameter norm:. ``` {.cpp}; Double_t scale = norm/h->Integral();; h->Scale(scale);; ```. ## Saving/Reading Histograms to/from a File. The following statements create a ROOT file and store a histogram on; the file. Because **`TH1`** derives from **`TNamed`** , the key; identifier on the file is the histogram name:. ``` {.cpp}; TFile f(""histos.root"",""new"");; TH1F h1(""hgaus"",""histo from a gaussian"",100,-3,3);; h1.FillRandom(""gaus"",10000);; h1->Write();; ```. To read this histogram in another ROOT session, do:. ``` {.cpp}; TFile f(""histos.root"");; TH1F *h = (TH1F*)f.Get(""hgaus"");; ```. One can save all histograms in memory to the file by:. ``` {.cpp}; file->Write();; ```. For a more detailed explanation, see ""Input/Output"". ## Miscellaneous Operations. - **`TH1`**`::KolmogorovTest(` **`TH1`**`* h2,Option_t *option)` is; statistical test of compatibility in shape between two histograms.; The parameter `option` is a character string that specifies:. - ""`U`"" include Underflows in test (also for 2-dim). - ""`O`"" include Overflows (also valid for 2-dim). - ""`N`"" include comparison of normalizations. - ""`D`"" put out a line of ""Debug"" printout. - ""`M`"" return the maximum Kolmogorov distance instead of `prob`. - ""`X`"" run the pseudo experiments post-processor with the following; procedure: it makes pseudo experiments based on random values from; the parent distribution and compare the KS distance of the pseudo; experiment to the parent distribution. Bin the KS distances in a; histogram, and then take the integral of all the KS values above; the value obtained from the original data to Monte Carlo; distribution. The number of pseudo-experiments NEXPT is currently; fixed at 1000. The function returns the integral. Note that this; option ""`X`"" is much slower. - **`TH1`**`::Smooth` - smoothes the bin contents of",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md:50370,test,test,50370,documentation/users-guide/Histograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md,1,['test'],['test']
Testability,"o line 2 inside ``main``. No; samples were collected there. .. _prof_instr:. Profiling with Instrumentation; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Clang also supports profiling via instrumentation. This requires building a; special instrumented version of the code and has some runtime; overhead during the profiling, but it provides more detailed results than a; sampling profiler. It also provides reproducible results, at least to the; extent that the code behaves consistently across runs. Clang supports two types of instrumentation: frontend-based and IR-based.; Frontend-based instrumentation can be enabled with the option ``-fprofile-instr-generate``,; and IR-based instrumentation can be enabled with the option ``-fprofile-generate``.; For best performance with PGO, IR-based instrumentation should be used. It has; the benefits of lower instrumentation overhead, smaller raw profile size, and; better runtime performance. Frontend-based instrumentation, on the other hand,; has better source correlation, so it should be used with source line-based; coverage testing. The flag ``-fcs-profile-generate`` also instruments programs using the same; instrumentation method as ``-fprofile-generate``. However, it performs a; post-inline late instrumentation and can produce context-sensitive profiles. Here are the steps for using profile guided optimization with; instrumentation:. 1. Build an instrumented version of the code by compiling and linking with the; ``-fprofile-generate`` or ``-fprofile-instr-generate`` option. .. code-block:: console. $ clang++ -O2 -fprofile-instr-generate code.cc -o code. 2. Run the instrumented executable with inputs that reflect the typical usage.; By default, the profile data will be written to a ``default.profraw`` file; in the current directory. You can override that default by using option; ``-fprofile-instr-generate=`` or by setting the ``LLVM_PROFILE_FILE``; environment variable to specify an alternate file. If non-default file name; is specified by ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:103088,test,testing,103088,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['testing']
Testability,"o longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection's index leaf also no longer include the dot. For example for ""t."" the names where ""t._"" and ""t..fValue"" and are now ""t_"" and ""t.fValue"". . ## RDataFrame. ### New features. - Introduce `ROOT::RDF::RunGraphs`, which allows to compute the results of multiple `RDataFrame`s (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the `RDataFrame`s sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. [this tutorial](https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html) for an example usage.; - `RDataFrame` now supports reading friend `TTree`s with a `TTreeIndex`, aka ""indexed friends"". More details at [ROOT-9559](https://sft.its.cern.ch/jira/browse/ROOT-9559).; - Experimental logging capabilities have been added to `RDataFrame`. To activate logging, define the following variable before creating the `RDataFrame` object: `auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);`.; - With [ROOT-10023](https://sft.its.cern.ch/jira/browse/ROOT-10023) fixed, `RDataFrame` can now read and write certain branches containing unsplit objects, i.e. `TBranchObjects`. More information is available at [ROOT-10022](https://sft.its.cern.ch/jira/browse/ROOT-10022).; - CSV files can now be opened and processed from remote HTTP(S) locations; - `RDataFrame` results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by `ROOT::Detail::RDF::RMergeableValue`, introduced in [#5552](https://github.com/root-project/root/pull/5552). A feature originally requested with [ROOT-9869](https://sft.its.cern.ch/jira/browse/ROOT-9869), it helps streamline `RDataFrame` workflow",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md:6421,log,logging,6421,README/ReleaseNotes/v624/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md,1,['log'],['logging']
Testability,"o movlps on lower half; of a v4sf value. //===---------------------------------------------------------------------===//. Better codegen for vector_shuffles like this { x, 0, 0, 0 } or { x, 0, x, 0}.; Perhaps use pxor / xorp* to clear a XMM register first?. //===---------------------------------------------------------------------===//. External test Nurbs exposed some problems. Look for; __ZN15Nurbs_SSE_Cubic17TessellateSurfaceE, bb cond_next140. This is what icc; emits:. movaps (%edx), %xmm2 #59.21; movaps (%edx), %xmm5 #60.21; movaps (%edx), %xmm4 #61.21; movaps (%edx), %xmm3 #62.21; movl 40(%ecx), %ebp #69.49; shufps $0, %xmm2, %xmm5 #60.21; movl 100(%esp), %ebx #69.20; movl (%ebx), %edi #69.20; imull %ebp, %edi #69.49; addl (%eax), %edi #70.33; shufps $85, %xmm2, %xmm4 #61.21; shufps $170, %xmm2, %xmm3 #62.21; shufps $255, %xmm2, %xmm2 #63.21; lea (%ebp,%ebp,2), %ebx #69.49; negl %ebx #69.49; lea -3(%edi,%ebx), %ebx #70.33; shll $4, %ebx #68.37; addl 32(%ecx), %ebx #68.37; testb $15, %bl #91.13; jne L_B1.24 # Prob 5% #91.13. This is the llvm code after instruction scheduling:. cond_next140 (0xa910740, LLVM BB @0xa90beb0):; 	%reg1078 = MOV32ri -3; 	%reg1079 = ADD32rm %reg1078, %reg1068, 1, %noreg, 0; 	%reg1037 = MOV32rm %reg1024, 1, %noreg, 40; 	%reg1080 = IMUL32rr %reg1079, %reg1037; 	%reg1081 = MOV32rm %reg1058, 1, %noreg, 0; 	%reg1038 = LEA32r %reg1081, 1, %reg1080, -3; 	%reg1036 = MOV32rm %reg1024, 1, %noreg, 32; 	%reg1082 = SHL32ri %reg1038, 4; 	%reg1039 = ADD32rr %reg1036, %reg1082; 	%reg1083 = MOVAPSrm %reg1059, 1, %noreg, 0; 	%reg1034 = SHUFPSrr %reg1083, %reg1083, 170; 	%reg1032 = SHUFPSrr %reg1083, %reg1083, 0; 	%reg1035 = SHUFPSrr %reg1083, %reg1083, 255; 	%reg1033 = SHUFPSrr %reg1083, %reg1083, 85; 	%reg1040 = MOV32rr %reg1039; 	%reg1084 = AND32ri8 %reg1039, 15; 	CMP32ri8 %reg1084, 0; 	JE mbb<cond_next204,0xa914d30>. Still ok. After register allocation:. cond_next140 (0xa910740, LLVM BB @0xa90beb0):; 	%eax = MOV32ri -3; 	%edx = MOV32rm %stack.3, 1, %n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:4352,test,testb,4352,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['testb']
Testability,"o one and only one region), an independent training is; performed using the most appropriate MVA method, training; options and set of training variables in that zone. The division; into categories in presence of distinct sub-populations reduces; the correlations between the training variables, improves the; modelling, and hence increases the classification and regression; performance. Presently, the Category method works for; classification only, but regression will follow soon. Please; contact us if urgently needed. An example scripts and data files illustrating how the new; Category method is configured and used. Please check the macros; test/TMVAClassificationCategory.C and; test/TMVAClassificationCategoryApplication.C or the; corresponding executables.; Regression functionality for gradient boosted trees using a Huber loss function. Comments. On Input Data: . New TMVA event vector building. The code for splitting the input; data into training and test samples for all classes and the; mixing of those samples to one training and one test sample has; been rewritten completely. The new code is more performant and; has a clearer structure. This fixes several bugs which have been; reported by the TMVA users. On Minimization: . Variables, targets and spectators are now checked if they are; constant. (The execution of TMVA is stopped for variables and; targets, a warning is given for spectators.). On Regression:; ; The analysis type is no longer defined by calling a dedicated; TestAllMethods-member-function of the Factory, but with the; option ""AnalysisType"" in the Factory. The default value is; ""Auto"" where TMVA tries to determine the most suitable analysis; type from the targets and classes the user has defined. Other; values are ""regression"", ""classification"" and ""multiclass"" for; the forthcoming multiclass classification.; Missing regression evaluation plots for training sample were; added. On Cut method:. Removed obsolete option ""FVerySmart"" from Cuts method. On MLP",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html:1400,test,test,1400,tmva/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html,2,['test'],['test']
Testability,"o reduce the plethora of bugpoint’s options to just two: an; interesting-ness test and the arguments for said test, similar to other delta; reduction tools such as CReduce, Delta, and Lithium; the tool should feel less; cluttered, and there should also be no uncertainty about how to operate it. The interesting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input file; would be passed as a parameter to the test, similar how `-compile-custom`; currently operates. ### Implementation; The tool would behave similar to CReduce’s functionality in that it would have a; list of passes that try to minimize the given test-case. We should be able to; modularize the tool’s behavior, as well as making it easier to maintain and; expand. The first version of this redesign would try to:. * Discard functions, instructions and metadata that don’t influence the; interesting-ness test; * Remove unused parameters from functions; * Eliminate unvisited conditional paths; * Rename variables to more regular ones (such as “a”, “b”, “c”, etc.). Once these passes are implemented, more meaningful reductions (such as type; reduction) would be added to the tool, to even further reduce IR. ## Background on historical bugpoint issues. ### Root Cause Anal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:1965,test,test,1965,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,2,['test'],['test']
Testability,"o relate instructions with each other. It is; particularly useful when you have multiple instruction formats and need to; switch between them after instruction selection. This entire feature is driven; by relation models which can be defined in ``XXXInstrInfo.td`` files; according to the target-specific instruction set. Relation models are defined; using ``InstrMapping`` class as a base. TableGen parses all the models; and generates instruction relation maps using the specified information.; Relation maps are emitted as tables in the ``XXXGenInstrInfo.inc`` file; along with the functions to query them. For the detailed information on how to; use this feature, please refer to :doc:`HowToUseInstrMappings`. Implement a subclass of ``TargetInstrInfo``; -------------------------------------------. The final step is to hand code portions of ``XXXInstrInfo``, which implements; the interface described in ``TargetInstrInfo.h`` (see :ref:`TargetInstrInfo`).; These functions return ``0`` or a Boolean or they assert, unless overridden.; Here's a list of functions that are overridden for the SPARC implementation in; ``SparcInstrInfo.cpp``:. * ``isLoadFromStackSlot`` --- If the specified machine instruction is a direct; load from a stack slot, return the register number of the destination and the; ``FrameIndex`` of the stack slot. * ``isStoreToStackSlot`` --- If the specified machine instruction is a direct; store to a stack slot, return the register number of the destination and the; ``FrameIndex`` of the stack slot. * ``copyPhysReg`` --- Copy values between a pair of physical registers. * ``storeRegToStackSlot`` --- Store a register value to a stack slot. * ``loadRegFromStackSlot`` --- Load a register value from a stack slot. * ``storeRegToAddr`` --- Store a register value to memory. * ``loadRegFromAddr`` --- Load a register value from memory. * ``foldMemoryOperand`` --- Attempt to combine instructions of any load or; store instruction for the specified operand(s). Branch Foldi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst:45890,assert,assert,45890,interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,1,['assert'],['assert']
Testability,"o run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for di",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12880,test,tests,12880,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"o the ROOT installation, you need to; enable the use of the binding at the configure point of the ROOT; installation. This can be done like so:. ~~~ {.cpp}; ./configure --enable-gdml; ~~~. On doing this the libraries will be built by issuing the standard ROOT; make command. The GDML to TGeo converter uses the TXMLEngine to parse; the GDML files. This XML parser is a DOM parser and returns the DOM; tree to the class TGDMLParse. This class then interprets the GDML file; and adds the bindings in their TGeo equivalent. The GDML schema is fully supported with a few exceptions:. - Replica Volumes are not supported; - Loops are not supported; - Matrices are not supported. These will hopefully be added in the near future. Once you have enabled GDML in the configure process for ROOT, to import; a GDML file, this can be done using TGeoManager::Import. This automatically; calls the right method to parse the GDML by detecting the .gdml file; extension. Here is how to do it:. ~~~ {.cpp}; TGeoManager::Import(""test.gdml"");; ~~~. Replace test.gdml with the gdml filename you want to import. Once the; GDML file has been successfully imported, you can view the geometry by; calling:. ~~~ {.cpp}; gGeoManager->GetTopVolume()->Draw(""ogl"");; ~~~. For any questions or comments about the GDML->ROOT binding please contact ben.lloyd@cern.ch. ### ROOT->GDML. The TGeo to GDML converter allows to export ROOT geometries (TGeo; geometry trees) as GDML files. The writer module writes a GDML file; out of the 'in-memory' representation of the geometry. The actual; application-specific (ROOT) binding is implemented in ROOTwriter; module. It contains 'binding methods' for TGeo geometry classes which; can be exported in GDML format. Please refere to the comment part of; the ROOTwriter.py file for the list of presently supported TGeo; classes. The ROOTwriter class contains also three methods,; dumpMaterials, dumpSolids and examineVol which need to be called in; order to export materials, solids and geomet",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/doc/index.md:1474,test,test,1474,geom/gdml/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/gdml/doc/index.md,1,['test'],['test']
Testability,"o the framework. While this is; not necessary for classification, it is necessary for; regression. The inverse transformation of the normalization; transformation has been implemented. Started to extend the variable transformations to the; regression targets as well. MethodCuts now produces the 'optimal-cut' histograms needed; by macro mvaeffs.C. (macro 5a of TMVAGui.C); ; MsgLogger can be silenced in order to prevent excess output; during boosting. Third dataset type added centrally (Training, Validation; and Testing). The validation data is split off the original; training data set. Update of GUI and other Macros according to the new; features of PDF and the addition of MethodBoost.; ; Updates in TMVA 4.0.1. ""Spectator"" variables can be defined now which are computed; just as the input variables and which are written out into the; TestTree, but which don't participate in any MVA calculation; (useful for correlation studies).; ; New booking option ""IgnoreNegWeightsInTraining"" to test the; effect of events with negative weights on the training. This is; especially useful for methods, which do not properly deal with; such events. Note that this new option is not available for all; methods (a training interrupt is issued if not available). ; Bug fixes:. Fixed regression bug in VariableNormalizeTransform (Use; number of targets from Event instead of DataSet); ; Fixed Multitarget-Regression in PDEFoam, foam dimensions; were miscalculated. Added writing of targets to the weight files in regression; mode to fix problems in RegressionApplication. Added missing standard C++ header files missing to some; classes, which lead to compilation failures on some; architectures (thanks to Lucian Ancu, Nijmegen, for reporting; these). Added checks for unused options to Factory and; DataSetFactory configuration options interpretation. Will now; complain if wrong option labels are used. Fixed standard creation of correlation matrix plots. Fixed internal mapping problem giving a fatal e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v524/index.html:6404,test,test,6404,tmva/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v524/index.html,1,['test'],['test']
Testability,"o the loop. The; second i1 output controls entry to a while-loop. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is a pair of the input and a conditional value of whether the; given count is not zero. '``llvm.loop.decrement.reg.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare i32 @llvm.loop.decrement.reg.i32(i32, i32); declare i64 @llvm.loop.decrement.reg.i64(i64, i64). Overview:; """""""""""""""""". The '``llvm.loop.decrement.reg.*``' intrinsics are used to lower the loop; iteration counter and return an updated value that will be used in the next; loop test check. Arguments:; """""""""""""""""""". Both arguments must have identical integer types. The first operand is the; loop iteration counter. The second operand is the maximum number of elements; processed in an iteration. Semantics:; """""""""""""""""""". The '``llvm.loop.decrement.reg.*``' intrinsics do an integer ``SUB`` of its; two operands, which is not allowed to wrap. They return the remaining number of; iterations still to be executed, and can be used together with a ``PHI``,; ``ICMP`` and ``BR`` to control the number of loop iterations executed. Any; optimisations are allowed to treat it is a ``SUB``, and it is supported by; SCEV, so it's the backends responsibility to handle cases where it may be; optimised. These intrinsics are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. '``llvm.loop.decrement.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:648059,test,test,648059,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"o the next layer down in our; stack -- the OptimizeLayer. Next we need to supply a 'partitioning function':; when a not-yet-compiled function is called, the CompileOnDemandLayer will call; this function to ask us what we would like to compile. At a minimum we need to; compile the function being called (given by the argument to the partitioning; function), but we could also request that the CompileOnDemandLayer compile other; functions that are unconditionally called (or highly likely to be called) from; the function being called. For KaleidoscopeJIT we'll keep it simple and just; request compilation of the function that was called. Next we pass a reference to; our CompileCallbackManager. Finally, we need to supply an ""indirect stubs; manager builder"": a utility function that constructs IndirectStubManagers, which; are in turn used to build the stubs for the functions in each module. The; CompileOnDemandLayer will call the indirect stub manager builder once for each; call to addModule, and use the resulting indirect stubs manager to create; stubs for all functions in all modules in the set. If/when the module set is; removed from the JIT the indirect stubs manager will be deleted, freeing any; memory allocated to the stubs. We supply this function by using the; createLocalIndirectStubsManagerBuilder utility. .. code-block:: c++. // ...; if (auto Sym = CODLayer.findSymbol(Name, false)); // ...; return cantFail(CODLayer.addModule(std::move(Ms),; std::move(Resolver)));; // ... // ...; return CODLayer.findSymbol(MangledNameStream.str(), true);; // ... // ...; CODLayer.removeModule(H);; // ... Finally, we need to replace the references to OptimizeLayer in our addModule,; findSymbol, and removeModule methods. With that, we're up and running. **To be done:**. ** Chapter conclusion.**. Full Code Listing; =================. Here is the complete code listing for our running example with a CompileOnDemand; layer added to enable lazy function-at-a-time compilation. To build this ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst:7152,stub,stub,7152,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,3,['stub'],"['stub', 'stubs']"
Testability,"o the; evaluated CXXConstructExpr. Then in VisitDeclStmt(), we compute the; corresponding lazy compound value if the variable is not a reference, and; bind the variable region to the lazy compound value. If the variable; is a reference, just use the object region as the initializer value. Before entering a C++ method (or ctor/dtor), the 'this' region is bound; to the object region. In ctors, we synthesize 'this' region with; CXXRecordDecl*, which means we do not use type qualifiers. In methods, we; synthesize 'this' region with CXXMethodDecl*, which has getThisType(); taking type qualifiers into account. It does not matter we use qualified; 'this' region in one method and unqualified 'this' region in another; method, because we only need to ensure the 'this' region is consistent; when we synthesize it and create it directly from CXXThisExpr in a single; method call. = Working on the Analyzer =. If you are interested in bringing up support for C++ expressions, the; best place to look is the visitation logic in ExprEngine, which; handles the simulation of individual expressions. There are plenty of; examples there of how other expressions are handled. If you are interested in writing checkers, look at the Checker and; CheckerVisitor interfaces (Checker.h and CheckerVisitor.h). Also look; at the files named *Checker.cpp for examples on how you can implement; these interfaces. = Debugging the Analyzer =. There are some useful command-line options for debugging. For example:. $ clang -cc1 -help | grep analyze; -analyze-function <value>; -analyzer-display-progress; -analyzer-viz-egraph-graphviz; ... The first allows you to specify only analyzing a specific function.; The second prints to the console what function is being analyzed. The; third generates a graphviz dot file of the ExplodedGraph. This is; extremely useful when debugging the analyzer and viewing the; simulation results. Of course, viewing the CFG (Control-Flow Graph) is also useful:. $ clang -cc1 -analyzer-ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt:5073,log,logic,5073,interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/lib/StaticAnalyzer/README.txt,1,['log'],['logic']
Testability,"o this unique object may be found using; `fObjects->At(fUniqueID)`. In the same way, when a **`TRef::GetObject`**; is called, `GetObject` uses its own `fUniqueID` to find the pointer to; the referenced object. See `TProcessID::GetObjectWithID` and; `PutObjectWithID`. #### Object Number. When an object is referenced, a unique identifier is computed and stored; in both the `fUniqueID` of the referenced and referencing object. This; `uniqueID` is computed by incrementing by one the static global in; `TProcessID::fgNumber`. The `fUniqueID` is the serial object number in; the current session. One can retrieve the current `fgNumber` value by; calling the static function `TProcessID::GetObjectCount` at any time or; can set this number by **`TProcessID::SetObjectCount`**. To avoid a; growing table of `fObjects` in `TProcessID`, in case, for example, one; processes many events in a loop, it might be necessary to reset the; object number at the end of processing of one event. See an example in; `$ROOTSYS/test/Event.cxx` (look at function `Build`). The value of; `ObjectNumber `may be saved at the beginning of one event and reset to; this original value at the end of the event. These actions may be; nested. ``` {.cpp}; saveNumber = TProcessID::GetObjectCount();; ...; TProcessID::SetObjectCount(savedNumber);; ```. ### Action on Demand. The normal behavior of a **`TRef`** has been described above. In; addition, **`TRef`** supports ""Actions on Demand"". It may happen that; the referenced object is not yet in the memory, on a separate file or; not yet computed. In this case, **`TRef`** is able to execute; automatically an action:. - Call to a compiled function (static function of member function). - Call to an interpreted function. - Execution of a Cling script. #### How to Select This Option?. In the definition of the **`TRef`** data member in the original class,; do:. ``` {.cpp}; TRef fRef; //EXEC:execName points to something; ```. When the special keyword `""EXEC:""` is found in the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:62992,test,test,62992,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['test'],['test']
Testability,"o this, the CompileOnDemandLayer creates two small; utilities for each function that it scans: a *stub* and a *compile; callback*. The stub is a pair of a function pointer (which will be pointed at; the function's implementation once the function has been compiled) and an; indirect jump through the pointer. By fixing the address of the indirect jump; for the lifetime of the program we can give the function a permanent ""effective; address"", one that can be safely used for indirection and function pointer; comparison even if the function's implementation is never compiled, or if it is; compiled more than once (due to, for example, recompiling the function at a; higher optimization level) and changes address. The second utility, the compile; callback, represents a re-entry point from the program into the compiler that; will trigger compilation and then execution of a function. By initializing the; function's stub to point at the function's compile callback, we enable lazy; compilation: The first attempted call to the function will follow the function; pointer and trigger the compile callback instead. The compile callback will; compile the function, update the function pointer for the stub, then execute; the function. On all subsequent calls to the function, the function pointer; will point at the already-compiled function, so there is no further overhead; from the compiler. We will look at this process in more detail in the next; chapter of this tutorial, but for now we'll trust the CompileOnDemandLayer to; set all the stubs and callbacks up for us. All we need to do is to add the; CompileOnDemandLayer to the top of our stack and we'll get the benefits of; lazy compilation. We just need a few changes to the source:. .. code-block:: c++. ...; #include ""llvm/ExecutionEngine/SectionMemoryManager.h""; #include ""llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h""; #include ""llvm/ExecutionEngine/Orc/CompileUtils.h""; ... ...; class KaleidoscopeJIT {; private:; std::unique_ptr<Tar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst:2987,stub,stub,2987,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,1,['stub'],['stub']
Testability,"o to get signed zeros etc; right). //===---------------------------------------------------------------------===//. On targets with expensive 64-bit multiply, we could LSR this:. for (i = ...; ++i) {; x = 1ULL << i;. into:; long long tmp = 1;; for (i = ...; ++i, tmp+=tmp); x = tmp;. This would be a win on ppc32, but not x86 or ppc64. //===---------------------------------------------------------------------===//. Shrink: (setlt (loadi32 P), 0) -> (setlt (loadi8 Phi), 0). //===---------------------------------------------------------------------===//. Reassociate should turn things like:. int factorial(int X) {; return X*X*X*X*X*X*X*X;; }. into llvm.powi calls, allowing the code generator to produce balanced; multiplication trees. First, the intrinsic needs to be extended to support integers, and second the; code generator needs to be enhanced to lower these to multiplication trees. //===---------------------------------------------------------------------===//. Interesting? testcase for add/shift/mul reassoc:. int bar(int x, int y) {; return x*x*x+y+x*x*x*x*x*y*y*y*y;; }; int foo(int z, int n) {; return bar(z, n) + bar(2*z, 2*n);; }. This is blocked on not handling X*X*X -> powi(X, 3) (see note above). The issue; is that we end up getting t = 2*X s = t*t and don't turn this into 4*X*X,; which is the same number of multiplies and is canonical, because the 2*X has; multiple uses. Here's a simple example:. define i32 @test15(i32 %X1) {; %B = mul i32 %X1, 47 ; X1*47; %C = mul i32 %B, %B; ret i32 %C; }. //===---------------------------------------------------------------------===//. Reassociate should handle the example in GCC PR16157:. extern int a0, a1, a2, a3, a4; extern int b0, b1, b2, b3, b4; ; void f () { /* this can be optimized to four additions... */ ; b4 = a4 + a3 + a2 + a1 + a0; ; b3 = a3 + a2 + a1 + a0; ; b2 = a2 + a1 + a0; ; b1 = a1 + a0; ; } . This requires reassociating to forms of expressions that are already available,; something that reassoc doesn't thi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:1860,test,testcase,1860,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testcase']
Testability,"o"" where TMVA tries to determine the most suitable analysis; type from the targets and classes the user has defined. Other; values are ""regression"", ""classification"" and ""multiclass"" for; the forthcoming multiclass classification.; Missing regression evaluation plots for training sample were; added. On Cut method:. Removed obsolete option ""FVerySmart"" from Cuts method. On MLP method:; ; Display of convergence information in the progress bar for MLP during training. Creation of animated gifs for MLP convergence monitoring (please; contact authors if you want to do this). On Datasets: . Checks are performed if events are unvoluntarily cut by using a; non-filled array entry (e.g. ""arr[4]"" is used, when the array; has not always at least 5 entries). A warning is given in that; case.; Bug fixes. Spectators and Targets could not be used with by-hand assignment of events.; Corrected types (training/testing) for assigning single events.; Changed message from FATAL to WARNING when the user requests more events for ; training or testing than available.; Fixed bug which caused TMVA to crash if the number of input variables exceeded ; the allowed maximum for generating scatter plots.; Prevent TMVA from crashing when running with an empty TTree or TChain.; A variable expression like ""Alt$(arr[3],0)"" can now be used; to give a default value for a variable if for some events the; array don't contain enough elements (e.g. in two jet events,; sometimes only one jet is found and thus, the array jetPt[] has; only one entry in that cases).; Plot ranges for scatter-plots showing the transformed events are now correct.; User defined training/testing-trees are now handled correctly.; Fix bug in correlation computation for regression.; Consistent use of variable labels (for the log output) and variable titles (in histograms).; Drawing of variable labels in network architecture display for regression mode has been added.; Bug fixes to Cuts which improves performance on datasets with many va",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html:3093,test,testing,3093,tmva/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html,1,['test'],['testing']
Testability,"o"", ""Bar"", nil];; // warn: argument should be an ObjC pointer type, not 'char *'; }. osx.coreFoundation.CFError; (C); Check usage of CFErrorRef* parameters. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. osx.coreFoundation.CFNumber; (C); Check for improper uses of CFNumberCreate. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. osx.coreFoundation.CFRetainRelease; (C); Check for null arguments to CFRetain, CFRelease,; CFMakeCollectable. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. osx.coreFoundation.containers.OutOfBounds; (C); Checks for index out-of-bounds when using CFArray API. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. osx.coreFoundation.containers.PointerSizedValues; (C); Warns if CFArray, CFDictionary, CFSet are; created with non-pointer-size values. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void **)x, 1,; &kCFTypeArrayCallBacks); // warn; }. Security Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. security.insecureAPI.UncheckedReturn; (C); Warn on uses of functions whose return values must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:20618,test,test,20618,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"o' -> elf64-x86-64. [0x000000000b][001] {CompileUnit} 'test.cpp'; [0x000000000b][002] {Producer} 'clang version 12.0.0'; {Directory} ''; {File} 'test.cpp'; {Public} 'foo' [0x0000000000:0x000000003a]; [0x000000000b][002] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x00000000bc][002] {BaseType} 'bool'; [0x0000000099][002] {BaseType} 'int'; [0x00000000b5][002] {BaseType} 'unsigned int'. [0x00000000a0][002] {Source} '/test.cpp'; [0x00000000a0][002] 1 {TypeAlias} 'INTPTR' -> [0x00000000ab]'* const int'; [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; [0x000000002a][003] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x000000002a][003] {Linkage} 0x2 '_Z3fooPKijb'; [0x0000000071][003] {Block}; [0x0000000071][004] {Range} Lines 5:8 [0x000000001c:0x000000002f]; [0x000000007e][004] 5 {Variable} 'CONSTANT' -> [0x00000000c3]'const INTEGER'; [0x000000007e][005] {Coverage} 100.00%; [0x000000007f][005] {Location}; [0x000000007f][006] {Entry} Stack Offset: -28 (0xffffffffffffffe4) [DW_OP_fbreg]; [0x000000001c][004] 5 {Line} {NewStatement} '/test.cpp'; [0x000000001c][004] {Code} 'movl	$0x7, -0x1c(%rbp)'; [0x0000000023][004] 6 {Line} {NewStatement} '/test.cpp'; [0x0000000023][004] {Code} 'movl	$0x7, -0x4(%rbp)'; [0x000000002a][004] {Code} 'jmp	0x6'; [0x000000002f][004] 8 {Line} {NewStatement} '/test.cpp'; [0x000000002f][004] {Code} 'movl	-0x14(%rbp), %eax'; [0x0000000063][003] 2 {Parameter} 'ParamBool' -> [0x00000000bc]'bool'; [0x0000000063][004] {Coverage} 100.00%; [0x0000000064][004] {Location}; [0x0000000064][005] {Entry} Stack Offset: -21 (0xffffffffffffffeb) [DW_OP_fbreg]; [0x0000000047][003] 2 {Parameter} 'ParamPtr' -> [0x00000000a0]'INTPTR'; [0x0000000047][004] {Coverage} 100.00%; [0x0000000048][004] {Location}; [0x0000000048][005] {Entry} Stack Offset: -16 (0xfffffffffffffff0) [DW_OP_fbreg]; [0x0000000055][003] 2 {Parameter} 'ParamUnsigned' -> [0x00000000b5]'unsigned int'; [0x0000000055][004] {Coverage} 100.00%; [0x0000000056][004] {Loca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:56293,test,test,56293,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"o'. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. The output shows the merging view path (reference and target) with the; missing and added elements. LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""; It compares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. (1) Missing Types:; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; Total 6 1 1. Changing the *Reference* and *Target* order:. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbols,types,summary; test-dwarf-gcc.o test-dwarf-clang.o. Reference: 'test-dwarf-gcc.o'; Target: 'test-dwarf-clang.o'. (1) Missing Types:; -[004] 4 {TypeAlias} 'INTEGER' -> 'int'. (1) Added Types:; +[003] 4 {TypeAlias} 'INTEGER' -> 'int'. ----------------------------------------; Element Expected Missing Added; ----------------------------------------; Scopes 4 0 0; Symbols 0 0 0; Types 2 1 1; Lines 0 0 0; ----------------------------------------; To",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:31461,test,test-dwarf-clang,31461,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-clang']
Testability,"o, suppose; you have an existing canvas with several pads. You create a new pad; (transparent) covering for example the entire canvas. Then you draw your; primitives in this pad. The same can be achieved with the graphics; editor. For example:. ``` {.cpp}; root[] .x tutorials/hist/h1draw.C; root[] TPad *newpad=new TPad(""newpad"",""Transparent pad"",0,0,1,1);; root[] newpad->SetFillStyle(4000);; root[] newpad->Draw();; root[] newpad->cd();; root[] // create some primitives, etc; ```. ### Setting the Log Scale. Setting the scale to logarithmic or linear is an attribute of the pad,; not the axis or the histogram. The scale is an attribute of the pad; because you may want to draw the same histogram in linear scale in one; pad and in log scale in another pad. Frequently, we see several; histograms on top of each other in the same pad. It would be very; inconvenient to set the scale attribute for each histogram in a pad. Furthermore, if the logic was set in the histogram class (or each; object) the scale setting in each `Paint` method of all objects should; be tested. If you have a pad with a histogram, a right-click on the pad, outside of; the histograms frame will convince you. The `SetLogx()`, `SetLogy()` and; `SetLogz()` methods are there. As you see, **`TPad`** defines log scale; for the two directions `x` and `y` plus `z` if you want to draw a 3D; representation of some function or histogram. The way to set log scale in the x direction for the active pad is:. ``` {.cpp}; root[] gPad->SetLogx(1); ```. To reset log in the z direction:. ``` {.cpp}; root[] gPad->SetLogz(0); ```. If you have a divided pad, you need to set the scale on each of the; sub-pads. Setting it on the containing pad does not automatically; propagate to the sub-pads. Here is an example of how to set the log; scale for the x-axis on a canvas with four sub-pads:. ``` {.cpp}; root[] TCanvas MyCanvas(""MyCanvas"",""My Canvas""); root[] MyCanvas->Divide(2,2); root[] MyCanvas->cd(1); root[] gPad->SetLogx(); roo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:29555,log,logic,29555,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,2,"['log', 'test']","['logic', 'tested']"
Testability,o/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/li,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102898,test,tests,102898,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,oFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRo,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4682,test,testRooMinimizer,4682,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooMinimizer']
Testability,"oPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m ROOT::TestSupport); target_include_directories(testLikelihoodGradientJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); ROOT_ADD_GTEST(testLikelihoodJob TestStatistics/testLikelihoodJob.cxx LIBRARIES RooFitMultiProcess RooFitCore m); target_include_directories(testLikelihoodJob PRIVATE ${RooFitCore_MultiProcess_TestStatistics_INCLUDE_DIR}); endif(). if(mathmore); list(APPEND ROOFITMORE_LIBRARIES RooFitMore); endif(). #--stressRooFit----------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressRooFit stressRooFit.cxx LIBRARIES RooFit Gpad ${ROOFITMORE_LIBRARIES}); if(mathmore); target_compile_definitions(stressRooFit PRIVATE ROOFITMORE); endif(). configure_file(stressRooFit_ref.root stressRooFit_ref.root COPYONLY); if(roofit_legacy_eval_backend); ROOT_ADD_TEST(test-stressroofit-legacy COMMAND stressRooFit -b legacy FAILREGEX ""FAILED|Error",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4991,test,testLikelihoodGradientJob,4991,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testLikelihoodGradientJob']
Testability,"object. First we execute `Event` and set the split level to; 1 and start the browser to examine the split tree:. ``` {.cpp}; > Event 400 1 1 1; ```. ``` {.cpp}; > root; root[] TFile f(""Event.root""); root[] TBrowser browser; ```. ![](pictures/080001FB.png). ### stress - Test and Benchmark. The executable stress is created by compiling `stress.cxx`. It completes; sixteen tests covering the following capabilities of the ROOT framework. - Functions, Random Numbers, Histogram Fits. - Size & compression factor of a ROOT file. - Purge, Reuse of gaps in **`TFile`**. - 2D Histograms, Functions, 2D Fits. - Graphics & PostScript. - Subdirectories in a ROOT file. - **`TNtuple`**, Selections, **`TCutG`**, **`TEventList`**. - Split and Compression modes for Trees. - Analyze `Event.root` file of stress 8. - Create 10 files starting from `Event.root`. - Test chains of Trees using the 10 files. - Compare histograms of test 9 and 11. - Merging files of a chain. - Check correct rebuilt of `Event.root` in test 13. - Divert Tree branches to separate files. - Cling test (3 nested loops) with `LHCb` trigger. The program stress takes one argument, the number of events to process.; The default is 1000 events. Be aware that executing stress with 1000; events*will create several files consuming about 100 MB of disk space;*; running stress with 30 events will consume about 20 MB. The disk space; is released once stress is done. There are two ways to run `stress`:. From the system prompt or from the ROOT prompt using the interpreter. ``` {.cpp}; > cd $ROOTSYS/test; > stress // default 1000 events; > stress 30 // test with 30 events; ```. Start ROOT with the batch mode option (-b) to suppress the graphic; output. ``` {.cpp}; > root -b; root[] .L stress.cxx; root[] stress(1000)// test with 1000 events; root[] stress(30)// test with 30 events; ```. The output of stress includes a pass/fail conclusion for each test, the; total number of bytes read and written, and the elapsed real and CPU; time. It ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:13323,test,test,13323,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['test']
Testability,"oc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. unix.cstring.BadSizeArg; (C); Check the size argument passed to strncat for common erroneous; patterns. Use -Wno-strncat-size compiler option to mute other; strncat-related compiler warnings. void test() {; char dest[3];; strncat(dest, ""***"", sizeof(dest));; // warn: potential buffer overflow; }. u",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:25816,test,test,25816,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,ocal`` instead of ``_Thread_local``.; Fixes (`#70068 <https://github.com/llvm/llvm-project/issues/70068>`_) and; (`#69167 <https://github.com/llvm/llvm-project/issues/69167>`_); - Fix crash in evaluating invalid lambda expression which forget capture this.; Fixes (`#67687 <https://github.com/llvm/llvm-project/issues/67687>`_); - Fix crash from constexpr evaluator evaluating uninitialized arrays as rvalue.; Fixes (`#67317 <https://github.com/llvm/llvm-project/issues/67317>`_); - Clang now properly diagnoses use of stand-alone OpenMP directives after a; label (including ``case`` or ``default`` labels).; - Fix compiler memory leak for enums with underlying type larger than 64 bits.; Fixes (`#78311 <https://github.com/llvm/llvm-project/pull/78311>`_). Before:. .. code-block:: c++. label:; #pragma omp barrier // ok. After:. .. code-block:: c++. label:; #pragma omp barrier // error: '#pragma omp barrier' cannot be an immediate substatement. - Fixed an issue that a benign assertion might hit when instantiating a pack expansion; inside a lambda. (`#61460 <https://github.com/llvm/llvm-project/issues/61460>`_); - Fix crash during instantiation of some class template specializations within class; templates. Fixes (`#70375 <https://github.com/llvm/llvm-project/issues/70375>`_); - Fix crash during code generation of C++ coroutine initial suspend when the return; type of await_resume is not trivially destructible.; Fixes (`#63803 <https://github.com/llvm/llvm-project/issues/63803>`_); - ``__is_trivially_relocatable`` no longer returns true for non-object types; such as references and functions.; Fixes (`#67498 <https://github.com/llvm/llvm-project/issues/67498>`_); - Fix crash when the object used as a ``static_assert`` message has ``size`` or ``data`` members; which are not member functions.; - Support UDLs in ``static_assert`` message.; - Fixed false positive error emitted by clang when performing qualified name; lookup and the current class instantiation has dependent bases.; F,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:40384,assert,assertion,40384,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['assert'],['assertion']
Testability,"ocated; and owned by us:. TFile* f1 = new TFile(""myfile_original.root"");; TTree* t1 = (TTree*) f->Get(""MyTree"");; TFile* f2 = new TFile(""myfile_copy.root"", ""recreate"");; TTree* t2 = t1->Clone(0);; for (Int_t i = 0; i < 10; ++i) {; t1->GetEntry(i);; t2->Fill();; }; t2->Write(); delete f2;; f2 = 0;; delete f1;; f1 = 0;. An example of a branch with an object allocated by us,; but owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = 0;; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. Notice that the only difference between this example; and the following example is that the event pointer; is zero when the branch is created. An example of a branch with an object allocated and; owned by the caller:. TFile* f = new TFile(""myfile.root"", ""recreate"");; TTree* t = new TTree(""t"", ""A test tree.""); Event* event = new Event();; TBranchElement* br = t->Branch(""event."", &event);; for (Int_t i = 0; i < 10; ++i) {; ... Fill event with meaningful data in some way.; t->Fill();; }; t->Write();; delete event;; event = 0;; delete f;; f = 0;. TTreeFormula (TTree::Draw, TTree::Scan). Fix CollectionTree->Scan(""reco_ee_et[][2]:reco_ee_et[0][2]""); where reco_ee_et is a vector<vector<double> > See http://root.cern/phpBB2/viewtopic.php?t=6536; Insure that the formula that are used as indices or as argument to special functions have their branch(es) loaded once. This fixes http://root.cern/phpBB2/viewtopic.php?p=27080#27080; Correct the drawing of ""X[1]:X[5]"" when X is a vector< vector<float> >; and X[1].size()!=X[5].size(). (reported at http://root.cern/phpBB2/viewtopic.php?p=27070); Correct the passing of NaN to function being called by TTree::Draw. Splitting STL collections of pointers; STL collection of pointers can now be split by calling. TBranch *branch = t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v520/index.html:2957,test,test,2957,tree/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/doc/v520/index.html,1,['test'],['test']
Testability,"ociated errors for the ""to"" context.; Note, there may be several different ASTImporter objects which import into the same ""to"" context but from different ""from"" contexts; they should share the same ``ASTImporterSharedState``.; (Also note, we have to include the corresponding ``ASTImporterSharedState.h`` header file.). .. code-block:: cpp. auto ImporterState = std::make_shared<ASTImporterSharedState>();; ASTImporter Importer(ToUnit->getASTContext(), ToUnit->getFileManager(),; FromUnit->getASTContext(), FromUnit->getFileManager(),; /*MinimalImport=*/false, ImporterState);; llvm::Expected<Decl *> ImportedOrErr = Importer.Import(From);; if (!ImportedOrErr) {; llvm::Error Err = ImportedOrErr.takeError();; consumeError(std::move(Err));. // ... but the node had been created.; auto *ToYDef = getFirstDecl<CXXRecordDecl>(; cxxRecordDecl(hasName(""Y""), isDefinition()), ToUnit);; ToYDef->dump();; // An error is set for ""ToYDef"" in the shared state.; Optional<ASTImportError> OptErr =; ImporterState->getImportDeclErrorIfAny(ToYDef);; assert(OptErr);. return 1;; }. If we take a look at the AST, then we can see that the Decl with the definition is created, but the field is missing. .. code-block:: bash. |-CXXRecordDecl 0xf66678 <line:9:7, col:13> col:13 class Y; `-CXXRecordDecl 0xf66730 prev 0xf66678 <:10:7, col:13> col:13 class Y definition; |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init; | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr; | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveConstructor exists simple trivial needs_implicit; | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveAssignment exists simple trivial needs_implicit; | `-Destructor simple irrelevant trivial needs_implicit; `-CXXRecordDecl 0xf66828 <col:7, col:13> col:13 implic",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst:18780,assert,assert,18780,interpreter/llvm-project/clang/docs/LibASTImporter.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst,1,['assert'],['assert']
Testability,"ock:: text. expected-error-re {{format specifies type 'wchar_t **' (aka '{{.+}}')}}. Examples matching error: ""variable has incomplete type 'struct s'"". .. code-block:: c++. // expected-error {{variable has incomplete type 'struct s'}}; // expected-error {{variable has incomplete type}}; // expected-error {{{variable has incomplete type}}}; // expected-error {{{{variable has incomplete type}}}}. // expected-error-re {{variable has type 'struct {{.}}'}}; // expected-error-re {{variable has type 'struct {{.*}}'}}; // expected-error-re {{variable has type 'struct {{(.*)}}'}}; // expected-error-re {{variable has type 'struct{{[[:space:]](.*)}}'}}. Feature Test Macros; ===================; Clang implements several ways to test whether a feature is supported or not.; Some of these feature tests are standardized, like ``__has_cpp_attribute`` or; ``__cpp_lambdas``, while others are Clang extensions, like ``__has_builtin``.; The common theme among all the various feature tests is that they are a utility; to tell users that we think a particular feature is complete. However,; completeness is a difficult property to define because features may still have; lingering bugs, may only work on some targets, etc. We use the following; criteria when deciding whether to expose a feature test macro (or particular; result value for the feature test):. * Are there known issues where we reject valid code that should be accepted?; * Are there known issues where we accept invalid code that should be rejected?; * Are there known crashes, failed assertions, or miscompilations?; * Are there known issues on a particular relevant target?. If the answer to any of these is ""yes"", the feature test macro should either; not be defined or there should be very strong rationale for why the issues; should not prevent defining it. Note, it is acceptable to define the feature; test macro on a per-target basis if needed. When in doubt, being conservative is better than being aggressive. If we don't; claim su",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:162965,test,tests,162965,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['tests']
Testability,"ocoa.localizability.PluralMisuseChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warns against using one vs. many plural pattern in code when generating localized strings. .. code-block:: objc. NSString *reminderText =; NSLocalizedString(@""None"", @""Indicates no reminders"");; if (reminderCount == 1) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; NSLocalizedString(@""1 Reminder"", @""Indicates single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. alpha.security; ^^^^^^^^^^^^^^. .. _alpha-security-ArrayBound:. alpha.security.ArrayBound (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (older checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a;; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. .. _alpha-security-ArrayBoundV2:. alpha.security.ArrayBoundV2 (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (newer checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:60484,test,test,60484,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ocs/lnt/tests.html#cross-compiling](https://llvm.org/docs/lnt/tests.html#cross-compiling). - [https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html](https://cmake.org/cmake/help/latest/manual/cmake-toolchains.7.html). Cross compilation from macOS to iOS is possible with the; `test-suite/cmake/caches/target-target-*-iphoneos-internal.cmake` CMake cache; files; this requires an internal iOS SDK. ### Running. There are two ways to run the tests in a cross compilation setting:. - Via SSH connection to an external device: The `TEST_SUITE_REMOTE_HOST` option; should be set to the SSH hostname. The executables and data files need to be; transferred to the device after compilation. This is typically done via the; `rsync` make target. After this, the lit runner can be used on the host; machine. It will prefix the benchmark and verification command lines with an; `ssh` command. Example:. ```bash; % cmake -G Ninja -D CMAKE_C_COMPILER=path/to/clang \; -C ../test-suite/cmake/caches/target-arm64-iphoneos-internal.cmake \; -D CMAKE_BUILD_TYPE=Release \; -D TEST_SUITE_REMOTE_HOST=mydevice \; ../test-suite; % ninja; % ninja rsync; % llvm-lit -j1 -o result.json .; ```. - You can specify a simulator for the target machine with the; `TEST_SUITE_RUN_UNDER` setting. The lit runner will prefix all benchmark; invocations with it. Running the test-suite via LNT; ------------------------------. The LNT tool can run the test-suite. Use this when submitting test results to; an LNT instance. See; [https://llvm.org/docs/lnt/tests.html#llvm-cmake-test-suite](https://llvm.org/docs/lnt/tests.html#llvm-cmake-test-suite); for details. Running the test-suite via Makefiles (deprecated); -------------------------------------------------. **Note**: The test-suite comes with a set of Makefiles that are considered; deprecated. They do not support newer testing modes like `Bitcode` or; `Microbenchmarks` and are harder to use. Old documentation is available in the; [test-suite Makefile Guide](Te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:12074,test,test-suite,12074,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"ode must have been fixed **before**; becoming official. * The test coverage needs to be broad and well written (small tests,; well documented). The build target ``check-all`` must pass with the; new target built, and where applicable, the ``test-suite`` must also; pass without errors, in at least one configuration (publicly; demonstrated, for example, via buildbots). * Public buildbots need to be created and actively maintained, unless; the target requires no additional buildbots (ex. ``check-all`` covers; all tests). The more relevant and public the new target's CI infrastructure; is, the more the LLVM community will embrace it. To **continue** as a supported and official target:. * The maintainer(s) must continue following these rules throughout the lifetime; of the target. Continuous violations of aforementioned rules and policies; could lead to complete removal of the target from the code base. * Degradation in support, documentation or test coverage will make the target as; nuisance to other targets and be considered a candidate for deprecation and; ultimately removed. In essence, these rules are necessary for targets to gain and retain their; status, but also markers to define bit-rot, and will be used to clean up the; tree from unmaintained targets. Those wishing to add a new target to LLVM must follow the procedure below:. 1. Read this section and make sure your target follows all requirements. For; minor issues, your community will be responsible for making all necessary; adjustments soon after the initial merge.; 2. Send a request for comment (RFC) to the `LLVM Discourse forums`_ describing; your target and how it follows all the requirements and what work has been; done and will need to be done to accommodate the official target requirements.; Make sure to expose any and all controversial issues, changes needed in the; base code, table gen, etc.; 3. Once the response is positive, the LLVM community can start reviewing the; actual patches (but they can be p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:42652,test,test,42652,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"ode there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline check-lines first. That is, the test will show a miscompile or; missing optimization. Add a ""TODO"" or ""FIXME"" comment to indicate that; something is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:12158,test,test,12158,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ode to be compiled is large, and; may also do a lot of unnecessary compilation if only a few compiled functions; are ever called at runtime. A truly ""just-in-time"" compiler should allow us to; defer the compilation of any given function until the moment that function is; first called, improving launch times and eliminating redundant work. In fact,; the ORC APIs provide us with a layer to lazily compile LLVM IR:; *CompileOnDemandLayer*. The CompileOnDemandLayer class conforms to the layer interface described in; Chapter 2, but its addModule method behaves quite differently from the layers; we have seen so far: rather than doing any work up front, it just scans the; Modules being added and arranges for each function in them to be compiled the; first time it is called. To do this, the CompileOnDemandLayer creates two small; utilities for each function that it scans: a *stub* and a *compile; callback*. The stub is a pair of a function pointer (which will be pointed at; the function's implementation once the function has been compiled) and an; indirect jump through the pointer. By fixing the address of the indirect jump; for the lifetime of the program we can give the function a permanent ""effective; address"", one that can be safely used for indirection and function pointer; comparison even if the function's implementation is never compiled, or if it is; compiled more than once (due to, for example, recompiling the function at a; higher optimization level) and changes address. The second utility, the compile; callback, represents a re-entry point from the program into the compiler that; will trigger compilation and then execution of a function. By initializing the; function's stub to point at the function's compile callback, we enable lazy; compilation: The first attempted call to the function will follow the function; pointer and trigger the compile callback instead. The compile callback will; compile the function, update the function pointer for the stub, then execute;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst:2203,stub,stub,2203,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,1,['stub'],['stub']
Testability,"ode-block:: bash. # Test each pass.; $ clang -Xclang -fverify-debuginfo-preserve -g -O2 sample.c. # Test each pass and export the issues report into the JSON file.; $ clang -Xclang -fverify-debuginfo-preserve -Xclang -fverify-debuginfo-preserve-export=sample.json -g -O2 sample.c. Please do note that there are some known false positives, for source locations; and debug intrinsic checking, so that will be addressed as a future work. Mutation testing for MIR-level transformations; ----------------------------------------------. A variant of the ``debugify`` utility described in; :ref:`Mutation testing for IR-level transformations<IRDebugify>` can be used; for MIR-level transformations as well: much like the IR-level pass,; ``mir-debugify`` inserts sequentially increasing line locations to each; ``MachineInstr`` in a ``Module``. And the MIR-level ``mir-check-debugify`` is; similar to IR-level ``check-debugify`` pass. For example, here is a snippet before:. .. code-block:: llvm. name: test; body: |; bb.1 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF; %1:_(s32) = IMPLICIT_DEF; %2:_(s32) = G_CONSTANT i32 2; %3:_(s32) = G_ADD %0, %2; %4:_(s32) = G_SUB %3, %1. and after running ``llc -run-pass=mir-debugify``:. .. code-block:: llvm. name: test; body: |; bb.0 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF debug-location !12; DBG_VALUE %0(s32), $noreg, !9, !DIExpression(), debug-location !12; %1:_(s32) = IMPLICIT_DEF debug-location !13; DBG_VALUE %1(s32), $noreg, !11, !DIExpression(), debug-location !13; %2:_(s32) = G_CONSTANT i32 2, debug-location !14; DBG_VALUE %2(s32), $noreg, !9, !DIExpression(), debug-location !14; %3:_(s32) = G_ADD %0, %2, debug-location !DILocation(line: 4, column: 1, scope: !6); DBG_VALUE %3(s32), $noreg, !9, !DIExpression(), debug-location !DILocation(line: 4, column: 1, scope: !6); %4:_(s32) = G_SUB %3, %1, debug-location !DILocation(line: 5, column: 1, scope: !6); DBG_VALUE %4(s32), $noreg, !9, !DIExpression(), debug-location !DILocation(line: 5, column: 1, scop",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:16218,test,test,16218,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['test']
Testability,"ode-block:: c++. someLongFunction(; argument1, argument2);. * ``BAS_BlockIndent`` (in configuration: ``BlockIndent``); Always break after an open bracket, if the parameters don't fit; on a single line. Closing brackets will be placed on a new line.; E.g.:. .. code-block:: c++. someLongFunction(; argument1, argument2; ). .. note::. This currently only applies to braced initializer lists (when; ``Cpp11BracedListStyle`` is ``true``) and parentheses. .. _AlignArrayOfStructures:. **AlignArrayOfStructures** (``ArrayInitializerAlignmentStyle``) :versionbadge:`clang-format 13` :ref:`¶ <AlignArrayOfStructures>`; if not ``None``, when using initialization for an array of structs; aligns the fields into columns. .. note::. As of clang-format 15 this option only applied to arrays with equal; number of columns per row. Possible values:. * ``AIAS_Left`` (in configuration: ``Left``); Align array column and left justify the columns e.g.:. .. code-block:: c++. struct test demo[] =; {; {56, 23, ""hello""},; {-1, 93463, ""world""},; {7, 5, ""!!"" }; };. * ``AIAS_Right`` (in configuration: ``Right``); Align array column and right justify the columns e.g.:. .. code-block:: c++. struct test demo[] =; {; {56, 23, ""hello""},; {-1, 93463, ""world""},; { 7, 5, ""!!""}; };. * ``AIAS_None`` (in configuration: ``None``); Don't align array initializer columns. .. _AlignConsecutiveAssignments:. **AlignConsecutiveAssignments** (``AlignConsecutiveStyle``) :versionbadge:`clang-format 3.8` :ref:`¶ <AlignConsecutiveAssignments>`; Style of aligning consecutive assignments. ``Consecutive`` will result in formattings like:. .. code-block:: c++. int a = 1;; int somelongname = 2;; double c = 3;. Nested configuration flags:. Alignment options. They can also be read as a whole for compatibility. The choices are:; - None; - Consecutive; - AcrossEmptyLines; - AcrossComments; - AcrossEmptyLinesAndComments. For example, to align across empty lines and not across comments, either; of these work. .. code-block:: c++. AlignCon",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:8760,test,test,8760,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['test'],['test']
Testability,"odeGen/X86/psubus.ll`` tests three sub-architecture; variants:. .. code-block:: llvm. ; RUN: llc -mcpu=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you're testing for a behaviour that you know is platform-specific or; depends on special features of sub-architectures, you must add the specific; triple, test with the specific FileCheck and put it into the specific; directory that will filter out all other architectures. Constraining test execution; ---------------------------. Some tests can be run only in specific configurations, such as; with debug builds or on particular platforms. Use ``REQUIRES``; and ``UNSUPPORTED`` to control when the test is enabled. Some tests are expected to fail. For example, there may be a known bug; that the test detect. Use ``XFAIL`` to mark a test as an expected failure.; An ``XFAIL`` test will be successful if its execution fails, and; will be a failure if its execution succeeds. .. code-block:: llvm. ; This test will be only enabled in the build with asserts.; ; REQUIRES: asserts; ; This test is disabled when running on Linux.; ; UNSUPPORTED: system-linux; ; This test is expected to fail when targeting PowerPC.; ; XFAIL: target=powerpc{{.*}}. ``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated; list of boolean expressions. The values in each expression may be:. - Features added to ``config.available_features`` by configuration files such as ``lit.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is sati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:19718,test,test,19718,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"odern; processor, but it's a lot shorter. Downside is that it puts more; pressure on register allocation because it has fixed operands. Example:; int abs(int x) {return x < 0 ? -x : x;}. gcc compiles this to the following when using march/mtune=pentium2/3/4/m/etc.:; abs:; movl 4(%esp), %eax; cltd; xorl %edx, %eax; subl %edx, %eax; ret. //===---------------------------------------------------------------------===//. Take the following code (from ; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=16541):. extern unsigned char first_one[65536];; int FirstOnet(unsigned long long arg1); {; if (arg1 >> 48); return (first_one[arg1 >> 48]);; return 0;; }. The following code is currently generated:; FirstOnet:; movl 8(%esp), %eax; cmpl $65536, %eax; movl 4(%esp), %ecx; jb .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; shrl $16, %eax; movzbl first_one(%eax), %eax; ret; .LBB1_2: # UnifiedReturnBlock; xorl %eax, %eax; ret. We could change the ""movl 8(%esp), %eax"" into ""movzwl 10(%esp), %eax""; this; lets us change the cmpl into a testl, which is shorter, and eliminate the shift. //===---------------------------------------------------------------------===//. We compile this function:. define i32 @foo(i32 %a, i32 %b, i32 %c, i8 zeroext %d) nounwind {; entry:; 	%tmp2 = icmp eq i8 %d, 0		; <i1> [#uses=1]; 	br i1 %tmp2, label %bb7, label %bb. bb:		; preds = %entry; 	%tmp6 = add i32 %b, %a		; <i32> [#uses=1]; 	ret i32 %tmp6. bb7:		; preds = %entry; 	%tmp10 = sub i32 %a, %c		; <i32> [#uses=1]; 	ret i32 %tmp10; }. to:. foo: # @foo; # %bb.0: # %entry; 	movl	4(%esp), %ecx; 	cmpb	$0, 16(%esp); 	je	.LBB0_2; # %bb.1: # %bb; 	movl	8(%esp), %eax; 	addl	%ecx, %eax; 	ret; .LBB0_2: # %bb7; 	movl	12(%esp), %edx; 	movl	%ecx, %eax; 	subl	%edx, %eax; 	ret. There's an obviously unnecessary movl in .LBB0_2, and we could eliminate a; couple more movls by putting 4(%esp) into %eax instead of %ecx. //===---------------------------------------------------------------------===//. Take the following:. target d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:24576,test,testl,24576,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['testl']
Testability,"oes not support multiple memory segments and, therefore, the fake; address space map can be added using the :ref:`-ffake-address-space-map; <opencl_fake_address_space_map>` flag. All known OpenCL extensions and features are set to supported in the generic targets,; however :option:`-cl-ext` flag can be used to toggle individual extensions and; features. .. _opencl_header:. OpenCL Header; -------------. By default Clang will include standard headers and therefore most of OpenCL; builtin functions and types are available during compilation. The; default declarations of non-native compiler types and functions can be disabled; by using flag :option:`-cl-no-stdinc`. The following example demonstrates that OpenCL kernel sources with various; standard builtin functions can be compiled without the need for an explicit; includes or compiler flags. .. code-block:: console. $ echo ""bool is_wg_uniform(int i){return get_enqueued_local_size(i)==get_local_size(i);}"" > test.cl; $ clang -cl-std=CL2.0 test.cl. More information about the default headers is provided in :doc:`OpenCLSupport`. OpenCL Extensions; -----------------. Most of the ``cl_khr_*`` extensions to OpenCL C from `the official OpenCL; registry <https://www.khronos.org/registry/OpenCL/>`_ are available and; configured per target depending on the support available in the specific; architecture. It is possible to alter the default extensions setting per target using; ``-cl-ext`` flag. (See :ref:`flags description <opencl_cl_ext>` for more details). Vendor extensions can be added flexibly by declaring the list of types and; functions associated with each extensions enclosed within the following; compiler pragma directives:. .. code-block:: c. #pragma OPENCL EXTENSION the_new_extension_name : begin; // declare types and functions associated with the extension here; #pragma OPENCL EXTENSION the_new_extension_name : end. For example, parsing the following code adds ``my_t`` type and ``my_func``; function to the custom ``my_ext",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:147523,test,test,147523,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"oesn't need to handle any; predefined operators. Kicking the Tires; =================. It is somewhat hard to believe, but with a few simple extensions we've; covered in the last chapters, we have grown a real-ish language. With; this, we can do a lot of interesting things, including I/O, math, and a; bunch of other things. For example, we can now add a nice sequencing; operator (printd is defined to print out the specified value and a; newline):. ::. ready> extern printd(x);; Read extern:; declare double @printd(double). ready> def binary : 1 (x y) 0; # Low-precedence operator that ignores operands.; ...; ready> printd(123) : printd(456) : printd(789);; 123.000000; 456.000000; 789.000000; Evaluated to 0.000000. We can also define a bunch of other ""primitive"" operations, such as:. ::. # Logical unary not.; def unary!(v); if v then; 0; else; 1;. # Unary negate.; def unary-(v); 0-v;. # Define > with the same precedence as <.; def binary> 10 (LHS RHS); RHS < LHS;. # Binary logical or, which does not short circuit.; def binary| 5 (LHS RHS); if LHS then; 1; else if RHS then; 1; else; 0;. # Binary logical and, which does not short circuit.; def binary& 6 (LHS RHS); if !LHS then; 0; else; !!RHS;. # Define = with slightly lower precedence than relationals.; def binary = 9 (LHS RHS); !(LHS < RHS | LHS > RHS);. # Define ':' for sequencing: as a low-precedence operator that ignores operands; # and just returns the RHS.; def binary : 1 (x y) y;. Given the previous if/then/else support, we can also define interesting; functions for I/O. For example, the following prints out a character; whose ""density"" reflects the value passed in: the lower the value, the; denser the character:. ::. ready> extern putchard(char);; ...; ready> def printdensity(d); if d > 8 then; putchard(32) # ' '; else if d > 4 then; putchard(46) # '.'; else if d > 2 then; putchard(43) # '+'; else; putchard(42); # '*'; ...; ready> printdensity(1): printdensity(2): printdensity(3):; printdensity(4): printdensity(5",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:15267,log,logical,15267,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['log'],['logical']
Testability,"of complicated decoder reset and realignment; to grab the bytes from the next cacheline. 532 532 0x3cfc movb (1809(%esp, %esi), %bl <<<--- spans 2 64 byte lines; 942 942 0x3d03 movl %dh, (1809(%esp, %esi); 937 937 0x3d0a incl %esi; 3 3 0x3d0b cmpb %bl, %dl; 27 27 0x3d0d jnz 0x000062db <main+11707>. //===---------------------------------------------------------------------===//. In c99 mode, the preprocessor doesn't like assembly comments like #TRUNCATE. //===---------------------------------------------------------------------===//. This could be a single 16-bit load. int f(char *p) {; if ((p[0] == 1) & (p[1] == 2)) return 1;; return 0;; }. //===---------------------------------------------------------------------===//. We should inline lrintf and probably other libc functions. //===---------------------------------------------------------------------===//. This code:. void test(int X) {; if (X) abort();; }. is currently compiled to:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne LBB1_1; addl $12, %esp; ret; LBB1_1:; call L_abort$stub. It would be better to produce:. _test:; subl $12, %esp; cmpl $0, 16(%esp); jne L_abort$stub; addl $12, %esp; ret. This can be applied to any no-return function call that takes no arguments etc.; Alternatively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:11913,stub,stub,11913,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['stub'],['stub']
Testability,of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building PyMVA tests; # @author Stefan Wunsch; ############################################################################. project(pymva-tests). set(Libraries Core MathCore TMVA PyMVA ROOTTMVASofie). # Look for needed python modules; find_python_module(torch QUIET); find_python_module(keras QUIET); find_python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyM,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1175,test,testPyRandomForestMulticlass,1175,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,1,['test'],['testPyRandomForestMulticlass']
Testability,"of pointers (when; pointers cannot be null). //===----------------------------------------------------------------------===//; // Use StringMap where possible.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294211. LLVM has a StringMap class that is advertised as more efficient than; std::map<std::string, ValueType>. Mainly it does fewer allocations; because the key is not a std::string. Replace the use of std::map<std::string, ValueType> with String Map.; One specific case is the LVSymbolNames definitions. //===----------------------------------------------------------------------===//; // Calculate unique offset for CodeView elements.; //===----------------------------------------------------------------------===//; In order to have the same logical functionality as the ELF Reader, such; as:. - find scopes contribution to debug info; - sort by its physical location. The logical elements must have an unique offset (similar like the DWARF; DIE offset). //===----------------------------------------------------------------------===//; // Move 'initializeFileAndStringTables' to the COFF Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'tools/llvm-readobj/COFFDumper.cpp' that can be moved to the COFF; library. We had a similar case with code shared with llvm-pdbutil that was moved; to the PDB library: https://reviews.llvm.org/D122226. //===----------------------------------------------------------------------===//; // Move 'getSymbolKindName'/'formatRegisterId' to the CodeView Library.; //===----------------------------------------------------------------------===//; There is some code in the CodeView reader that was extracted/adapted; from 'lib/DebugInfo/CodeView/SymbolDumper.cpp' that can be used. //===----------------------------------------------------------------------===//",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:5229,log,logical,5229,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,1,['log'],['logical']
Testability,"of the approach is that it is common for; the same (and often large) header files to be included by multiple; source files. Consequently, compile times can often be greatly improved; by caching some of the (redundant) work done by a compiler to process; headers. Precompiled header files, which represent one of many ways to; implement this optimization, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Fi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:46845,test,test,46845,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"of the current mapping region. * *columnEnd*: The ending column of the mapping region. If the high bit is set,; the current mapping region is a gap area. A count for a gap area is only used; as the line execution count if there are no other regions on a line. Testing Format; ==============. .. warning::; This section is for the LLVM developers who are working on ``llvm-cov`` only. ``llvm-cov`` uses a special file format (called ``.covmapping`` below) for; testing purposes. This format is private and should have no use for general; users. As a developer, you can get such files by the ``convert-for-testing``; subcommand of ``llvm-cov``. The structure of the ``.covmapping`` files follows:. ``[magicNumber : u64, version : u64, profileNames, coverageMapping, coverageRecords]``. Magic Number and Version; ------------------------. The magic is ``0x6d766f636d766c6c``, which is the ASCII string; ``llvmcovm`` in little-endian. There are two versions for now:. - Version1, encoded as ``0x6174616474736574`` (ASCII string ``testdata``).; - Version2, encoded as 1. The only difference between Version1 and Version2 is in the encoding of the; ``coverageMapping`` fields, which is explained later. Profile Names; -------------. ``profileNames``, ``coverageMapping`` and ``coverageRecords`` are 3 sections; extracted from the original binary file. ``profileNames`` encodes the size, address and the raw data of the section:. ``[profileNamesSize : LEB128, profileNamesAddr : LEB128, profileNamesData : bytes]``. Coverage Mapping; ----------------. This field is padded with zero bytes to make it 8-byte aligned. ``coverageMapping`` contains the records of the source files. In version 1,; only one record is stored:. ``[padding : bytes, coverageMappingData : bytes]``. Version 2 relaxes this restriction by encoding the size of; ``coverageMappingData`` as a LEB128 number before the data:. ``[coverageMappingSize : LEB128, padding : bytes, coverageMappingData : bytes]``. The current version is 2. Covera",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst:28699,test,testdata,28699,interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CoverageMappingFormat.rst,1,['test'],['testdata']
Testability,"of the tier, all code must follow the existing policies on quality,; reviews, style, etc. Core Tier; =========. The core tier encompasses all of the code in the main repository that is; in production, is actively tested and released in a regular schedule, including; core LLVM APIs and infrastructure, front/middle/back-ends, run-time libraries,; tools, etc. It is the responsibility of **every** LLVM developer to care for the core tier; regardless of where their work is applied to. What is covered; ---------------. The core tier is composed of:; * Core code (``llvm-project``) present in official releases and buildbots:; compiler, debugger, linker, libraries, etc, including infrastructure code; (table-gen, lit, file-check, unit-tests, etc).; * Build infrastructure that creates releases and buildbots (CMake, scripts).; * `Phabricator <https://github.com/llvm/phabricator>`_ and; `buildbot <https://github.com/llvm/llvm-zorg>`_ infrastructure.; * The `test-suite <https://github.com/llvm/llvm-test-suite>`_. Requirements; ------------. Code in this tier must:; * Keep official buildbots green, with warnings on breakages being emailed to; all affected developers. Those must be fixed as soon as possible or patches; must be reverted, as per review policy.; * Bit-rot of a component in the core tier will result in that component being; downgraded to the peripheral tier or being removed. Sub-communities can; avoid this by fixing all raised issues in a timely manner. Peripheral Tier; ===============. The peripheral tier encompass the parts of LLVM that cater to a specific; sub-community and which don't usually affect the core components directly. This includes experimental back-ends, disabled-by-default options and; alternative paths (work-in-progress replacements) in the same repository, as; well as separate efforts to integrate LLVM development with local practices. It is the responsibility of each sub-community to care about their own parts; and the intersection of that with the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:2661,test,test-suite,2661,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['test-suite']
Testability,"of the tools you'll need are :doc:`here <GettingStarted>`. Release Qualification Criteria; ------------------------------. There are no official release qualification criteria. It is up to the; the release manager to determine when a release is ready. The release manager; should pay attention to the results of community testing, the number of outstanding; bugs, and then number of regressions when determining whether or not to make a; release. The community values time based releases, so releases should not be delayed for; too long unless there are critical issues remaining. In most cases, the only; kind of bugs that are critical enough to block a release would be a major regression; from a previous release. Official Testing; ----------------. A few developers in the community have dedicated time to validate the release; candidates and volunteered to be the official release testers for each; architecture. These will be the ones testing, generating and uploading the official binaries; to the server, and will be the minimum tests *necessary* for the release to; proceed. This will obviously not cover all OSs and distributions, so additional community; validation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarba",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:7002,test,testing,7002,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,2,['test'],"['testing', 'tests']"
Testability,"of; // different containers; // used where the same; // container is; // expected; }. .. _alpha-cplusplus-MisusedMovedObject:. alpha.cplusplus.MisusedMovedObject (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Method calls on a moved-from object and copying a moved-from object will be reported. .. code-block:: cpp. struct A {; void foo() {}; };. void f() {; A a;; A b = std::move(a); // note: 'a' became 'moved-from' here; a.foo(); // warn: method call on a 'moved-from' object 'a'; }. .. _alpha-cplusplus-SmartPtr:. alpha.cplusplus.SmartPtr (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereference of null smart pointers. .. code-block:: cpp. void deref_smart_ptr() {; std::unique_ptr<int> P;; *P; // warn: dereference of a default constructed smart unique_ptr; }. alpha.deadcode; ^^^^^^^^^^^^^^; .. _alpha-deadcode-UnreachableCode:. alpha.deadcode.UnreachableCode (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check unreachable code. .. code-block:: cpp. // C; int test() {; int x = 1;; while(x);; return x; // warn; }. // C++; void test() {; int a = 2;. while (a > 1); a--;. if (a > 1); a++; // warn; }. // Objective-C; void test(id x) {; return;; [x retain]; // warn; }. alpha.fuchsia; ^^^^^^^^^^^^^. .. _alpha-fuchsia-lock:. alpha.fuchsia.Lock; """"""""""""""""""""""""""""""""""""; Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks for; the locking/unlocking of fuchsia mutexes. .. code-block:: cpp. spin_lock_t mtx1;. void bad1(void); {; spin_lock(&mtx1);; spin_lock(&mtx1);	// warn: This lock has already been acquired; }. alpha.llvm; ^^^^^^^^^^. .. _alpha-llvm-Conventions:. alpha.llvm.Conventions; """""""""""""""""""""""""""""""""""""""""""". Check code for LLVM codebase conventions:. * A StringRef should not be bound to a temporary std::string whose lifetime is shorter than the StringRef's.; * Clang AST nodes should not have fields that can allocate memory. alpha.osx; ^^^^^^^^^. .. _alpha-osx-cocoa-DirectIvarAssignment:. alpha.osx.cocoa.DirectIvarAssignment (ObjC); """"""""""""""""""""""""""""""""""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:56146,test,test,56146,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ofConfig.h; RooStats/ProposalFunction.h; RooStats/ProposalHelper.h; RooStats/RatioOfProfiledLikelihoodsTestStat.h; RooStats/RooStatsUtils.h; RooStats/SamplingDistPlot.h; RooStats/SamplingDistribution.h; RooStats/SequentialProposal.h; RooStats/SimpleInterval.h; RooStats/SimpleLikelihoodRatioTestStat.h; RooStats/SPlot.h; RooStats/TestStatistic.h; RooStats/TestStatSampler.h; RooStats/ToyMCImportanceSampler.h; RooStats/ToyMCSampler.h; RooStats/ToyMCStudy.h; RooStats/UniformProposal.h; RooStats/UpperLimitMCSModule.h; SOURCES; src/AsymptoticCalculator.cxx; src/BayesianCalculator.cxx; src/BernsteinCorrection.cxx; src/ConfidenceBelt.cxx; src/DetailedOutputAggregator.cxx; src/FeldmanCousins.cxx; src/FrequentistCalculator.cxx; src/Heaviside.cxx; src/HLFactory.cxx; src/HybridCalculator.cxx; src/HybridPlot.cxx; src/HybridResult.cxx; src/HypoTestCalculatorGeneric.cxx; src/HypoTestInverter.cxx; src/HypoTestInverterPlot.cxx; src/HypoTestInverterResult.cxx; src/HypoTestPlot.cxx; src/HypoTestResult.cxx; src/LikelihoodInterval.cxx; src/LikelihoodIntervalPlot.cxx; src/MarkovChain.cxx; src/MCMCCalculator.cxx; src/MCMCInterval.cxx; src/MCMCIntervalPlot.cxx; src/MetropolisHastings.cxx; src/NeymanConstruction.cxx; src/NumberCountingPdfFactory.cxx; src/NumberCountingUtils.cxx; src/PdfProposal.cxx; src/PointSetInterval.cxx; src/ProfileInspector.cxx; src/ProfileLikelihoodCalculator.cxx; src/ProfileLikelihoodTestStat.cxx; src/ProposalHelper.cxx; src/RatioOfProfiledLikelihoodsTestStat.cxx; src/RooStatsUtils.cxx; src/SamplingDistPlot.cxx; src/SamplingDistribution.cxx; src/SequentialProposal.cxx; src/SimpleInterval.cxx; src/SimpleLikelihoodRatioTestStat.cxx; src/SPlot.cxx; src/ToyMCImportanceSampler.cxx; src/ToyMCSampler.cxx; src/ToyMCStudy.cxx; src/UniformProposal.cxx; src/UpperLimitMCSModule.cxx; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; DEPENDENCIES; Core; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Minuit; Foam; Graf; Gpad; ${EXTRA_DICT_OPTS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt:3884,test,test,3884,roofit/roostats/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roostats/CMakeLists.txt,1,['test'],['test']
Testability,"off. .. option:: -fdiagnostics-format=clang/msvc/vi. Changes diagnostic output format to better match IDEs and command line tools. This option controls the output format of the filename, line number,; and column printed in diagnostic messages. The options, and their; affect on formatting a simple conversion diagnostic, follow:. **clang** (default); ::. t.c:3:11: warning: conversion specifies type 'char *' but the argument has type 'int'. **msvc**; ::. t.c(3,11) : warning: conversion specifies type 'char *' but the argument has type 'int'. **vi**; ::. t.c +3:11: warning: conversion specifies type 'char *' but the argument has type 'int'. .. _opt_fdiagnostics-show-option:. .. option:: -f[no-]diagnostics-show-option. Enable ``[-Woption]`` information in diagnostic line. This option, which defaults to on, controls whether or not Clang; prints the associated :ref:`warning group <cl_diag_warning_groups>`; option name when outputting a warning diagnostic. For example, in; this output:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. Passing **-fno-diagnostics-show-option** will prevent Clang from; printing the [:option:`-Wextra-tokens`] information in; the diagnostic. This information tells you the flag needed to enable; or disable the diagnostic, either from the command line or through; :ref:`#pragma GCC diagnostic <pragma_GCC_diagnostic>`. .. option:: -fdiagnostics-show-category=none/id/name. Enable printing category information in diagnostic line. This option, which defaults to ""none"", controls whether or not Clang; prints the category associated with a diagnostic when emitting it.; Each diagnostic may or many not have an associated category, if it; has one, it is listed in the diagnostic categorization field of the; diagnostic line (in the []'s). For example, a format string warning will produce these three; renditions based on the setting of this option:. ::. t.c:3:11: warning: conversion specifies type 'char *' b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:9332,test,test,9332,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"oft Visual C++ compiler, Cygwin/GCC) `. - `MacOS X PPC, x86-32, x86-64 (GCC, Intel/ICC, IBM/xl)`. - `PowerPC with GNU/Linux and GCC, Debian v2`. - `PowerPC64 with GNU/Linux and GCC`. - `ARM with GNU/Linux and GCC`. - `LynxOS`. ## The Organization of the ROOT Framework. Now after we know in abstract terms what the ROOT framework is, let us; look at the physical directories and files that come with the ROOT; installation. You may work on a platform where your system; administrator has already installed ROOT. You will need to follow the; specific development environment for your setup and you may not have; write access to the directories. In any case, you will need an; environment variable called `ROOTSYS`, which holds the path of the top; ROOT directory. ``` {.cpp}; > echo $ROOTSYS; /opt/root; ```. In the `ROOTSYS` directory are examples, executables, tutorials,; header tutorials files, and, if you opted to download it, the source; is here. The directories of special interest to us are `bin`,; `tutorials`, `lib`, `test`, and` include`. The next figure shows the; contents of these directories. ![ROOT framework directories](pictures/02000004.jpg). ### \$ROOTSYS/bin. The `bin` directory contains several executables. +---------------+------------------------------------------------------------+; | `root` | shows the ROOT splash screen and calls `root.exe` |; +---------------+------------------------------------------------------------+; | `root.exe` | the executable that `root` calls, if you use a debugger |; | | such as `gdb`, you will need to run `root.exe` directly |; +---------------+------------------------------------------------------------+; | `rootcling` | is the utility ROOT uses to create a class dictionary for |; | | Cling |; +---------------+------------------------------------------------------------+; | `rmkdepend` | a modified version of `makedepend` that is used by the |; | | ROOT build system |; +---------------+-------------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:11204,test,test,11204,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['test']
Testability,"ogical representation of low-level debug information.; ========================================================================================. .. program:: llvm-debuginfo-analyzer. .. contents::; :local:. SYNOPSIS; --------; :program:`llvm-debuginfo-analyzer` [*options*] [*filename ...*]. DESCRIPTION; -----------; :program:`llvm-debuginfo-analyzer` parses debug and text sections in; binary object files and prints their contents in a logical view, which; is a human readable representation that closely matches the structure; of the original user source code. Supported object file formats include; ELF, Mach-O, PDB and COFF. The **logical view** abstracts the complexity associated with the; different low-level representations of the debugging information that; is embedded in the object file. :program:`llvm-debuginfo-analyzer`; produces a canonical view of the debug information regardless of how it; is formatted. The same logical view will be seen regardless of object; file format, assuming the debug information correctly represents the; same original source code. The logical view includes the following **logical elements**: *type*,; *scope*, *symbol* and *line*, which are the basic software elements used; in the C/C++ programming language. Each logical element has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option:`--select-offsets`). Also, the ou",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:968,log,logical,968,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ogram:: bugpoint. SYNOPSIS; --------. **bugpoint** [*options*] [*input LLVM ll/bc files*] [*LLVM passes*] **--args**; *program arguments*. DESCRIPTION; -----------. **bugpoint** narrows down the source of problems in LLVM tools and passes. It; can be used to debug three types of failures: optimizer crashes, miscompilations; by optimizers, or bad native code generation (including problems in the static; and JIT compilers). It aims to reduce large test cases to small, useful ones.; For more information on the design and inner workings of **bugpoint**, as well as; advice for using bugpoint, see :doc:`/Bugpoint` in the LLVM; distribution. OPTIONS; -------. **--additional-so** *library*. Load the dynamic shared object *library* into the test program whenever it is; run. This is useful if you are debugging programs which depend on non-LLVM; libraries (such as the X or curses libraries) to run. **--append-exit-code**\ =\ *{true,false}*. Append the test programs exit code to the output file so that a change in exit; code is considered a test failure. Defaults to false. **--args** *program args*. Pass all arguments specified after **--args** to the test program whenever it runs.; Note that if any of the *program args* start with a ""``-``"", you should use:. .. code-block:: bash. bugpoint [bugpoint args] --args -- [program args]. The ""``--``"" right after the **--args** option tells **bugpoint** to consider; any options starting with ""``-``"" to be part of the **--args** option, not as; options to **bugpoint** itself. **--tool-args** *tool args*. Pass all arguments specified after **--tool-args** to the LLVM tool under test; (**llc**, **lli**, etc.) whenever it runs. You should use this option in the; following way:. .. code-block:: bash. bugpoint [bugpoint args] --tool-args -- [tool args]. The ""``--``"" right after the **--tool-args** option tells **bugpoint** to; consider any options starting with ""``-``"" to be part of the **--tool-args**; option, not as options to **bugpoint** ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:1054,test,test,1054,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,2,['test'],['test']
Testability,"oid ref() {}; void deref() {}; };. void foo(RefCntbl* a, RefCntbl& b) {; [&, a](){ // warn about 'a'; do_something(b); // warn about 'b'; };; };. .. _alpha-checkers:. Experimental Checkers; ---------------------. *These are checkers with known issues or limitations that keep them from being on by default. They are likely to have false positives. Bug reports and especially patches are welcome.*. alpha.clone; ^^^^^^^^^^^. .. _alpha-clone-CloneChecker:. alpha.clone.CloneChecker (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Reports similar pieces of code. .. code-block:: c. void log();. int max(int a, int b) { // warn; log();; if (a > b); return a;; return b;; }. int maxClone(int x, int y) { // similar code here; log();; if (x > y); return x;; return y;; }. alpha.core; ^^^^^^^^^^. .. _alpha-core-BoolAssignment:. alpha.core.BoolAssignment (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about assigning non-{0,1} values to boolean variables. .. code-block:: objc. void test() {; BOOL b = -1; // warn; }. .. _alpha-core-C11Lock:. alpha.core.C11Lock; """"""""""""""""""""""""""""""""""""; Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks for; the locking/unlocking of ``mtx_t`` mutexes. .. code-block:: cpp. mtx_t mtx1;. void bad1(void); {; mtx_lock(&mtx1);; mtx_lock(&mtx1); // warn: This lock has already been acquired; }. .. _alpha-core-CallAndMessageUnInitRefArg:. alpha.core.CallAndMessageUnInitRefArg (C,C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for logical errors for function calls and Objective-C; message expressions (e.g., uninitialized arguments, null function pointers, and pointer to undefined variables). .. code-block:: c. void test(void) {; int t;; int &p = t;; int &s = p;; int &q = s;; foo(q); // warn; }. void test(void) {; int x;; foo(&x); // warn; }. .. _alpha-core-CastSize:. alpha.core.CastSize (C); """"""""""""""""""""""""""""""""""""""""""""""; Check when casting a malloc'ed type ``T``, whether the size is a multiple of the size of ``T``. ..",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:47350,test,test,47350,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"oid test() {; char src[10];; char dst[5];; memcpy(dst,src,sizeof(dst)); // warn: Bytes string function accesses uninitialized/garbage values; }. Limitations:. - Due to limitations of the memory modeling in the analyzer, one can likely; observe a lot of false-positive reports like this:. .. code-block:: c. void false_positive() {; int src[] = {1, 2, 3, 4};; int dst[5] = {0};; memcpy(dst, src, 4 * sizeof(int)); // false-positive:; // The 'src' buffer was correctly initialized, yet we cannot conclude; // that since the analyzer could not see a direct initialization of the; // very last byte of the source buffer.; }. More details at the corresponding `GitHub issue <https://github.com/llvm/llvm-project/issues/43459>`_. .. _alpha-nondeterminism-PointerIteration:. alpha.nondeterminism.PointerIteration (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for non-determinism caused by iterating unordered containers of pointers. .. code-block:: c. void test() {; int a = 1, b = 2;; std::unordered_set<int *> UnorderedPtrSet = {&a, &b};. for (auto i : UnorderedPtrSet) // warn; f(i);; }. .. _alpha-nondeterminism-PointerSorting:. alpha.nondeterminism.PointerSorting (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for non-determinism caused by sorting of pointers. .. code-block:: c. void test() {; int a = 1, b = 2;; std::vector<int *> V = {&a, &b};; std::sort(V.begin(), V.end()); // warn; }. alpha.WebKit; ^^^^^^^^^^^^. .. _alpha-webkit-UncountedCallArgsChecker:. alpha.webkit.UncountedCallArgsChecker; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; The goal of this rule is to make sure that lifetime of any dynamically allocated ref-countable object passed as a call argument spans past the end of the call. This applies to call to any function, method, lambda, function pointer or functor. Ref-countable types aren't supposed to be allocated on stack so we check arguments for parameters of raw pointers and references to uncounted types. Here are some examples of situations that we war",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:80353,test,test,80353,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"oing on the obj directory and running; ``make check-all`` to find if there's at least one stage that passes (helps; when reducing the error for bug report purposes). .. _release-process:. Release Process; ===============. .. contents::; :local:. When the Release Manager sends you the release candidate, download all sources,; unzip on the same directory (there will be sym-links from the appropriate places; to them), and run the release test as above. You should:. * Download the current candidate sources from where the release manager points; you (ex. https://llvm.org/pre-releases/3.3/rc1/). * Repeat the steps above with ``-rc 1``, ``-rc 2`` etc modes and run the; test-suite the same way. * Compare the results, report all errors on Bugzilla and publish the binary blob; where the release manager can grab it. Once the release manages announces that the latest candidate is the good one,; you have to pack the ``Release`` (no Asserts) install directory on ``Phase3``; and that will be the official binary. * Rename (or link) ``clang+llvm-REL-ARCH-ENV`` to the .install directory. * Tar that into the same name with ``.tar.gz`` extension from outside the; directory. * Make it available for the release manager to download. .. _bug-reporting:. Bug Reporting Process; =====================. .. contents::; :local:. If you found regressions or failures when comparing a release candidate with the; previous release, follow the rules below:. * Critical bugs on compilation should be fixed as soon as possible, possibly; before releasing the binary blobs. * Check-all tests should be fixed before the next release candidate, but can; wait until the test-suite run is finished. * Bugs in the test suite or unimportant check-all tests can be fixed in between; release candidates. * New features or recent big changes, when close to the release, should have; done in a way that it's easy to disable. If they misbehave, prefer disabling; them than releasing an unstable (but untested) binary package.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:7047,test,tests,7047,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,4,['test'],"['test', 'test-suite', 'tests']"
Testability,"oing so, Clang can emit ``unused import`` or ``unused #include`` diagnostics, including Fix-Its to remove the useless imports/includes. **Fix-Its for missing imports**; It's fairly common for one to make use of some API while writing code, only to get a compiler error about ""unknown type"" or ""no function named"" because the corresponding header has not been included. Clang can detect such cases and auto-import the required module, but should provide a Fix-It to add the import. **Improve modularize**; The modularize tool is both extremely important (for deployment) and extremely crude. It needs better UI, better detection of problems (especially for C++), and perhaps an assistant mode to help write module maps for you. Where To Learn More About Modules; =================================; The Clang source code provides additional information about modules:. ``clang/lib/Headers/module.modulemap``; Module map for Clang's compiler-specific header files. ``clang/test/Modules/``; Tests specifically related to modules functionality. ``clang/include/clang/Basic/Module.h``; The ``Module`` class in this header describes a module, and is used throughout the compiler to implement modules. ``clang/include/clang/Lex/ModuleMap.h``; The ``ModuleMap`` class in this header describes the full module map, consisting of all of the module map files that have been parsed, and providing facilities for looking up module maps and mapping between modules and headers (in both directions). PCHInternals_; Information about the serialized AST format used for precompiled headers and modules. The actual implementation is in the ``clangSerialization`` library. .. [#] Automatic linking against the libraries of modules requires specific linker support, which is not widely available. .. [#] There are certain anti-patterns that occur in headers, particularly system headers, that cause problems for modules. The section `Modularizing a Platform`_ describes some of them. .. [#] The second instance is actuall",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:57311,test,test,57311,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['test'],['test']
Testability,"oint operations may flush `denormal; <https://en.wikipedia.org/wiki/Denormal_number>`_ inputs and/or outputs to 0.; Operations on denormal numbers are often much slower than the same operations; on normal numbers. * ``-fcuda-approx-transcendentals`` (default: off) When this is enabled, the; compiler may emit calls to faster, approximate versions of transcendental; functions, instead of using the slower, fully IEEE-compliant versions. For; example, this flag allows clang to emit the ptx ``sin.approx.f32``; instruction. This is implied by ``-ffast-math``. Standard library support; ========================. In clang and nvcc, most of the C++ standard library is not supported on the; device side. ``<math.h>`` and ``<cmath>``; ----------------------------. In clang, ``math.h`` and ``cmath`` are available and `pass; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/math_h.cu>`_; `tests; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/cmath.cu>`_; adapted from libc++'s test suite. In nvcc ``math.h`` and ``cmath`` are mostly available. Versions of ``::foof``; in namespace std (e.g. ``std::sinf``) are not available, and where the standard; calls for overloads that take integral arguments, these are usually not; available. .. code-block:: c++. #include <math.h>; #include <cmath.h>. // clang is OK with everything in this function.; __device__ void test() {; std::sin(0.); // nvcc - ok; std::sin(0); // nvcc - error, because no std::sin(int) override is available.; sin(0); // nvcc - same as above. sinf(0.); // nvcc - ok; std::sinf(0.); // nvcc - no such function; }. ``<std::complex>``; ------------------. nvcc does not officially support ``std::complex``. It's an error to use; ``std::complex`` in ``__device__`` code, but it often works in ``__host__; __device__`` code due to nvcc's interpretation of the ""wrong-side rule"" (see; below). However, we have heard from implementers that it's possible to get; into situations where nvcc will omit a call to ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:6023,test,test,6023,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['test']
Testability,"ointer to undefined variables). .. code-block:: c. void test(void) {; int t;; int &p = t;; int &s = p;; int &q = s;; foo(q); // warn; }. void test(void) {; int x;; foo(&x); // warn; }. .. _alpha-core-CastSize:. alpha.core.CastSize (C); """"""""""""""""""""""""""""""""""""""""""""""; Check when casting a malloc'ed type ``T``, whether the size is a multiple of the size of ``T``. .. code-block:: c. void test() {; int *x = (int *) malloc(11); // warn; }. .. _alpha-core-CastToStruct:. alpha.core.CastToStruct (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cast from non-struct pointer to struct pointer. .. code-block:: cpp. // C; struct s {};. void test(int *p) {; struct s *ps = (struct s *) p; // warn; }. // C++; class c {};. void test(int *p) {; c *pc = (c *) p; // warn; }. .. _alpha-core-Conversion:. alpha.core.Conversion (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Loss of sign/precision in implicit conversions. .. code-block:: c. void test(unsigned U, signed S) {; if (S > 10) {; if (U < S) {; }; }; if (S < -10) {; if (U < S) { // warn (loss of sign); }; }; }. void test() {; long long A = 1LL << 60;; short X = A; // warn (loss of precision); }. .. _alpha-core-DynamicTypeChecker:. alpha.core.DynamicTypeChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cases where the dynamic and the static type of an object are unrelated. .. code-block:: objc. id date = [NSDate date];. // Warning: Object has a dynamic type 'NSDate *' which is; // incompatible with static type 'NSNumber *'""; NSNumber *number = date;; [number doubleValue];. .. _alpha-core-FixedAddr:. alpha.core.FixedAddr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for assignment of a fixed address to a pointer. .. code-block:: c. void test() {; int *p;; p = (int *) 0x10000; // warn; }. .. _alpha-core-IdenticalExpr:. alpha.core.IdenticalExpr (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of identical expressions in operators. .. code-block:: cpp. // C; void test() {; int a = 5;; int b = a | 4 | a; /",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:48945,test,test,48945,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ointers to member; > functions, and have to look up an example when they have to write them. Again, I don't disagree with this at all. But to some extent this; particular problem is inherently difficult. Your syntax for the above; example may be easier for you to read because this is the way you have been; thinking about it. Honestly, I don't find it much easier than the C syntax.; In either case, I would have to look up an example to write pointers to; member functions. But pointers to member functions are nowhere near as common as arrays. And; the old array syntax:; type [ int, int, ...]; is just much more familiar and clear to people than anything new you; introduce, no matter how logical it is. Introducing a new syntax that may; make function pointers easier but makes arrays much more difficult seems; very risky to me. > In my opinion, it is critically important to have clear and concise type; > specifications, because types are going to be all over the programs. I absolutely agree. But the question is, what is more clear and concise?; The syntax programmers are used to out of years of experience or a new; syntax that they have never seen that has a more logical structure. I think; the answer is the former. Sometimes, you have to give up a better idea; because you can't overcome sociological barriers to it. Qwerty keyboards; and Windows are two classic examples of bad technology that are difficult to; root out. P.S. Also, while I agree that most your syntax is more logical, there is; one part that isn't:. Arrays (without and with size):; type ::= '[' type ']' | '[' INT ',' type ']'. The arrays with size lists the dimensions and the type in a single list.; That is just too confusing:; [10, 40, int]; This seems to be a 3-D array where the third dimension is something strange.; It is too confusing to have a list of 3 things, some of which are dimensions; and one is a type. Either of the following would be better:. array [10, 40] of int; or; int [10, 40]. --Vikram. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt:2349,log,logical,2349,interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2001-02-06-TypeNotationDebateResp1.txt,2,['log'],['logical']
Testability,"oints to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. One can therefore talk about ""the node or volume hierarchy"", but in; fact, an element is made by a pair volume-node. In the line above is; represented just a single branch, but of course from any volume other; branches can also emerge. The index of a node in such a branch (counting; only nodes) is called `depth`. The top node have always `depth=0`. Volumes need to have their daughter nodes defined when the geometry is; closed. They will build additional structures (called `voxels` ) in; order to fasten-up the search algorithms. Finally, nodes can be regarded; as bi-directional links between containers and contained volumes. The structure defined in this way is a graph structure since volumes are; replicable (same volume can become daughter node of several other; volumes), every volume becoming a branch in this graph. Any volume in; the logical graph can become the actual top volume at run time (see; TGeoManager::SetTopVolume()). **All functionalities of the modeller; will behave in this case as if only the corresponding branch starting; from this volume is the active geometry**. \image html geometry005.png ""A geometry hierarchy in memory"" width=600. Nodes are never instantiated directly by users, but created as a result; of volume operations. Adding a volume named A with a given `user id`; inside a volume B will create a node named `A_id.` This will be added to; the list of nodes stored by B. In addition, when applying a division; operation in N slices to a volume A, a list of nodes `B_1`, `B_2`, ... ,; `B_N` is also created. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:20444,log,logical,20444,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"oisonvalues>`.; If the arguments are vectors, each vector element of ``op1`` is shifted; by the corresponding shift amount in ``op2``. If the ``nuw`` keyword is present, then the shift produces a poison; value if it shifts out any non-zero bits.; If the ``nsw`` keyword is present, then the shift produces a poison; value if it shifts out any bits that disagree with the resultant sign bit. Example:; """""""""""""""". .. code-block:: text. <result> = shl i32 4, %var ; yields i32: 4 << %var; <result> = shl i32 4, 2 ; yields i32: 16; <result> = shl i32 1, 10 ; yields i32: 1024; <result> = shl i32 1, 32 ; undefined; <result> = shl <2 x i32> < i32 1, i32 1>, < i32 1, i32 2> ; yields: result=<2 x i32> < i32 2, i32 4>. .. _i_lshr:. '``lshr``' Instruction; ^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = lshr <ty> <op1>, <op2> ; yields ty:result; <result> = lshr exact <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``lshr``' instruction (logical shift right) returns the first; operand shifted to the right a specified number of bits with zero fill. Arguments:; """""""""""""""""""". Both arguments to the '``lshr``' instruction must be the same; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer type.; '``op2``' is treated as an unsigned value. Semantics:; """""""""""""""""""". This instruction always performs a logical shift right operation. The; most significant bits of the result will be filled with zero bits after; the shift. If ``op2`` is (statically or dynamically) equal to or larger; than the number of bits in ``op1``, this instruction returns a :ref:`poison; value <poisonvalues>`. If the arguments are vectors, each vector element; of ``op1`` is shifted by the corresponding shift amount in ``op2``. If the ``exact`` keyword is present, the result value of the ``lshr`` is; a poison value if any of the bits shifted out are non-zero. Example:; """""""""""""""". .. code-block:: text. <result> = lshr i32 4, 1 ; yields i32:result = 2; <result> = lshr i32 4, 2 ; yields i32:re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:394217,log,logical,394217,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,oject/root/issues/13359)] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; * [[#13288](https://github.com/root-project/root/issues/13288)] - [cling] long double type incorrectly parsed by interpreter; * [[#13155](https://github.com/root-project/root/issues/13155)] - TMVA doesn't compile with pytorch 2.0.1; * [[#13130](https://github.com/root-project/root/issues/13130)] - Valgrind reports leak when constructing TChain; * [[#13110](https://github.com/root-project/root/issues/13110)] - Bug in TDecompBase::DiagProd; * [[#13079](https://github.com/root-project/root/issues/13079)] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); * [[#13041](https://github.com/root-project/root/issues/13041)] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; * [[#13019](https://github.com/root-project/root/issues/13019)] - LLVM assertion failure in HandleUnionActiveMemberChange; * [[#12993](https://github.com/root-project/root/issues/12993)] - std::source_location not working in the interpreter; * [[#12959](https://github.com/root-project/root/issues/12959)] - [ntuple] Distinguish between connecting a page sink and a page source in `RColumn`; * [[#12783](https://github.com/root-project/root/issues/12783)] - [IO] Writing HistFactory model file twice gives strange results since ROOT 6.26.02; * [[#12770](https://github.com/root-project/root/issues/12770)] - tmva/sofie_parsers does not build with latest Protobuf (22.x); * [[#12744](https://github.com/root-project/root/issues/12744)] - wrong Python version found during build; * [[#12718](https://github.com/root-project/root/issues/12718)] - A crash when trying to initialise a vector from a >1D numpy array in PyROOT; * [[#12685](https://github.com/root-project/root/issues/12685)] - `TEnum::GetEnum` does NOT process typedefs; * [[#12644](https://github.com/root-project/root/issues/12,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:39806,assert,assertion,39806,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['assert'],['assertion']
Testability,"oking at a couple; of recent (Nov 2021) working days, we routinely see ~10 commits per; hour during peek times, with occasional spikes as high as ~15 commits; per hour. Thus, as a rule of thumb, we should plan for our builder to; complete ~10-15 builds an hour. Resource Appropriately; At 10-15 builds per hour, we need to complete a new build on average every; 4 to 6 minutes. For anything except the fastest of hardware/build configs,; this is going to be well beyond the ability of a single machine. In buildbot; terms, we likely going to need multiple workers to build requests in parallel; under a single builder configuration. For some rough back of the envelope; numbers, if your build config takes e.g. 30 minutes, you will need something; on the order of 5-8 workers. If your build config takes ~2 hours, you'll; need something on the order of 20-30 workers. The rest of this section; focuses on how to reduce cycle times. Restrict what you build and test; Think hard about why you're setting up a bot, and restrict your build; configuration as much as you can. Basic functionality is probably; already covered by other bots, and you don't need to duplicate that; testing. You only need to be building and testing the *unique* parts; of the configuration. (e.g. For a multi-stage clang builder, you probably; don't need to be enabling every target or building all the various utilities.). It can sometimes be worthwhile splitting a single builder into two or more,; if you have multiple distinct purposes for the same builder. As an example,; if you want to both a) confirm that all of LLVM builds with your host; compiler, and b) want to do a multi-stage clang build on your target, you; may be better off with two separate bots. Splitting increases resource; consumption, but makes it easy for each bot to keep up with commit flow.; Additionally, splitting bots may assist in triage by narrowing attention to; relevant parts of the failing configuration. In general, we recommend Release bu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst:9383,test,test,9383,interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToAddABuilder.rst,1,['test'],['test']
Testability,"oking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning text), let's replace it with; `// expected-warning{{to understand recursion}}`. Now we could run **all** the tests again, but this is a slow way to; iterate on a change! Instead, let's find a way to re-run just the; specific test. There are two main types of tests in LLVM:. - **lit tests** (e.g. SemaCXX/warn-infinite-recursion.cpp). These are fancy shell scripts that run command-line tools and verify the; output. They live in files like; clang/**test**/FixIt/dereference-addressof.c. Re-run like this:. .. code:: console. $ bin/llvm-lit -v ../clang/test/SemaCXX/warn-infinite-recursion.cpp. - **unit tests** (e.g. ToolingTests/ReplacementTest.CanDeleteAllText). These are C++ programs that call LLVM functions and verify the results.; They live in suites like ToolingTests. Re-run like this:. .. code:: console. $ ninja ToolingTests && tools/clang/unittests/Tooling/ToolingTests; --gtest_filter=ReplacementTest.CanDeleteAllText. Commit locally; --------------. We'll save the change to a local git branch. This lets us work on other; things while the change is being reviewed. Changes should have a; description, to explain to reviewers and future readers of the code why; the change was made. .. code:: console. $ git checkout -b myfirstpatch; $ git commit -am ""[Diagnostic] Clarify -Winfinite-recursion message"". Now we're ready to send this change out into the world! By the way,; There is an unwritten convention of using tag for your commit. Tags; usually represent modules that you intend to modify. If you don't know; the tags for your modules, you can look at the commit history :; https://git",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:7842,test,tests,7842,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tests']
Testability,"ol file provided: 'SomeLocalPath'; MERGE-OUTER: control file ok, 32 files total, first not processed file 20; ... Options; =======. To run the fuzzer, pass zero or more corpus directories as command line; arguments. The fuzzer will read test inputs from each of these corpus; directories, and any new test inputs that are generated will be written; back to the first corpus directory:. .. code-block:: console. ./fuzzer [-flag1=val1 [-flag2=val2 ...] ] [dir1 [dir2 ...] ]. If a list of files (rather than directories) are passed to the fuzzer program,; then it will re-run those files as test inputs but will not perform any fuzzing.; In this mode the fuzzer binary can be used as a regression test (e.g. on a; continuous integration system) to check the target function and saved inputs; still work. The most important command line options are:. ``-help``; Print help message (``-help=1``).; ``-seed``; Random seed. If 0 (the default), the seed is generated.; ``-runs``; Number of individual test runs, -1 (the default) to run indefinitely.; ``-max_len``; Maximum length of a test input. If 0 (the default), libFuzzer tries to guess; a good value based on the corpus (and reports it).; ``-len_control``; Try generating small inputs first, then try larger inputs over time.; Specifies the rate at which the length limit is increased (smaller == faster).; Default is 100. If 0, immediately try inputs with size up to max_len.; ``-timeout``; Timeout in seconds, default 1200. If an input takes longer than this timeout,; the process is treated as a failure case.; ``-rss_limit_mb``; Memory usage limit in Mb, default 2048. Use 0 to disable the limit.; If an input requires more than this amount of RSS memory to execute,; the process is treated as a failure case.; The limit is checked in a separate thread every second.; If running w/o ASAN/MSAN, you may use 'ulimit -v' instead.; ``-malloc_limit_mb``; If non-zero, the fuzzer will exit if the target tries to allocate this; number of Mb with one mall",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:10262,test,test,10262,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,ols-extra/clangd/InlayHints.h; clang-tools-extra/clangd/LSPBinder.h; clang-tools-extra/clangd/ParsedAST.cpp; clang-tools-extra/clangd/ParsedAST.h; clang-tools-extra/clangd/PathMapping.h; clang-tools-extra/clangd/Preamble.cpp; clang-tools-extra/clangd/Preamble.h; clang-tools-extra/clangd/Protocol.cpp; clang-tools-extra/clangd/Protocol.h; clang-tools-extra/clangd/Quality.cpp; clang-tools-extra/clangd/RIFF.cpp; clang-tools-extra/clangd/RIFF.h; clang-tools-extra/clangd/Selection.h; clang-tools-extra/clangd/SemanticHighlighting.h; clang-tools-extra/clangd/SemanticSelection.cpp; clang-tools-extra/clangd/SemanticSelection.h; clang-tools-extra/clangd/SourceCode.cpp; clang-tools-extra/clangd/SourceCode.h; clang-tools-extra/clangd/TidyProvider.cpp; clang-tools-extra/clangd/TidyProvider.h; clang-tools-extra/clangd/Transport.h; clang-tools-extra/clangd/TUScheduler.cpp; clang-tools-extra/clangd/TUScheduler.h; clang-tools-extra/clangd/URI.h; clang-tools-extra/clangd/XRefs.h; clang-tools-extra/clangd/benchmarks/IndexBenchmark.cpp; clang-tools-extra/clangd/fuzzer/clangd-fuzzer.cpp; clang-tools-extra/clangd/fuzzer/FuzzerClangdMain.cpp; clang-tools-extra/clangd/index/Background.cpp; clang-tools-extra/clangd/index/Background.h; clang-tools-extra/clangd/index/BackgroundIndexLoader.cpp; clang-tools-extra/clangd/index/BackgroundIndexLoader.h; clang-tools-extra/clangd/index/BackgroundIndexStorage.cpp; clang-tools-extra/clangd/index/BackgroundQueue.cpp; clang-tools-extra/clangd/index/BackgroundRebuild.cpp; clang-tools-extra/clangd/index/BackgroundRebuild.h; clang-tools-extra/clangd/index/CanonicalIncludes.cpp; clang-tools-extra/clangd/index/CanonicalIncludes.h; clang-tools-extra/clangd/index/FileIndex.cpp; clang-tools-extra/clangd/index/FileIndex.h; clang-tools-extra/clangd/index/Index.cpp; clang-tools-extra/clangd/index/Index.h; clang-tools-extra/clangd/index/IndexAction.cpp; clang-tools-extra/clangd/index/IndexAction.h; clang-tools-extra/clangd/index/MemIndex.h; clang-tools-extra/clangd/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:77294,benchmark,benchmarks,77294,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"oltipBackgroundColor: LightYellow; Gui.TooltipForegroundColor: black; ```. Path where all GUI icons in use can be found:. ``` {.cpp}; Gui.IconPath: $(HOME)/icons:$(ROOTSYS)/icons:.; ```. Mime type file setting:. ``` {.cpp}; Gui.MimeTypeFile: $(HOME)/.root.mimes; ```. If `$(HOME)/.root.mimes` does not exists, defaults to this:. ``` {.cpp}; #Gui.MimeTypeFile: $(ROOTSYS)/etc/root.mimes; ```. ### TBrowser Settings. Current icon style selection - can be either `small`, `big`, `list`,; `details`:. ``` {.cpp}; Browser.IconStyle: small; ```. Current sorting rule applied on the browser objects - can be `name`,; `type`, `size`, `date`:. ``` {.cpp}; Browser.SortBy: name; ```. Number of items in a group view:. ``` {.cpp}; Browser.GroupView: 10000; ```. Show or not hidden items:. ``` {.cpp}; Browser.ShowHidden: no; ```. Create a thumbnail view after executing the macro (default is `yes`). ``` {.cpp}; Browser.AutoThumbnail: yes; ```. ### TRint Specific Settings. Rint (interactive ROOT executable) specific alias, logon and logoff; macros. ``` {.cpp}; Rint.Load: rootalias.C; Rint.Logon: rootlogon.C; Rint.Logoff: rootlogoff.C; ```. Record ROOT session commands in a given history file (default is; `$(HOME)/.root_hist`). If set to ""`-`"", it turn off the command; recording. ``` {.cpp}; Rint.History: $(HOME)/.root_hist; ```. Next two lines set the history file size handling. Once `HistSize` is; reached, the last `HistSave` entries are removed. If `HistSize` is set; to 0, it turns off command recording. Both values can be overridden by; environment variable `ROOT_HIST=size[:save]`, where the ""`:save`"" part; is optional. ``` {.cpp}; Rint.HistSize: 500; Rint.HistSave: 400; ```. ### ACLiC Specific Settings. `ACLiC.Linkdef` specifies the suffix that will be added to the script; name to try to locate a custom linkdef file when generating the; dictionary. ``` {.cpp}; ACLiC.Linkdef: _linkdef; ```. The top directory for storing the libraries produced by ACLiC is set by:. ``` {.cpp}; ACLiC.BuildDi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InstallandBuild.md:12121,log,logon,12121,documentation/users-guide/InstallandBuild.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InstallandBuild.md,2,['log'],"['logoff', 'logon']"
Testability,"olume(); // (*); // then:; TGeoMaterial *cmat = cvol->GetMedium()->GetMaterial();; ~~~. (*) Note: If the current point is in fact outside the geometry, the; current node pointer will not be NULL, but pointing to the top node. In order to take decisions in such case one needs always to test:. ~~~{.cpp}; if (gGeoManager->IsOutside()) {; // current point is actually outside; ... // corresponding action; }; ~~~. Specific information related to the current volume/node like ID's or; shape can be then retrieved from the corresponding objects. - Current state `index`. The number of possible different states of; the modeller corresponds to the number of different objects/paths in; the geometry. This has nothing to do with the number of nodes, since; the same node can be found on different branches. In other words,; the number of states corresponds to the number of nodes in the; `expanded geometry tree`. Since unfortunately this expansion from; logical to physical hierarchy cannot be stored on regular basis due; to the large size of the latter, one cannot directly assign state; numbers. If the size of the expansion proves however to be small; enough (less than about 50 million objects), a parallel structure; storing these state indices is built and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:69952,log,logical,69952,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"olumn of a source code location. * Does not add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9606,test,test,9606,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"om OpenCL; address spaces the behavior is not governed by OpenCL specification. An OpenCL implementation provides a list of standard address spaces using; keywords: ``private``, ``local``, ``global``, and ``generic``. In the AST and; in the IR each of the address spaces will be represented by unique number; provided in the Clang source code. The specific IDs for an address space do not; have to match between the AST and the IR. Typically in the AST address space; numbers represent logical segments while in the IR they represent physical; segments.; Therefore, machines with flat memory segments can map all AST address space; numbers to the same physical segment ID or skip address space attribute; completely while generating the IR. However, if the address space information; is needed by the IR passes e.g. to improve alias analysis, it is recommended; to keep it and only lower to reflect physical memory segments in the late; machine passes. The mapping between logical and target address spaces is; specified in the Clang's source code. .. _cxx_for_opencl_impl:. C++ for OpenCL Implementation Status; ====================================. Clang implements language versions 1.0 and 2021 published in `the official; release of C++ for OpenCL Documentation; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. Limited support of experimental C++ libraries is described in the :ref:`experimental features <opencl_experimenal>`. GitHub issues for this functionality are typically prefixed; with '[C++4OpenCL]' - click `here; <https://github.com/llvm/llvm-project/issues?q=is%3Aissue+is%3Aopen+%5BC%2B%2B4OpenCL%5D>`__; to view the full bug list. Missing features or with limited support; ----------------------------------------. - Support of C++ for OpenCL 2021 is currently in experimental phase. Refer to; :ref:`OpenCL 3.0 status <opencl_300>` for details of common missing; functionality from OpenCL 3.0. - IR generation for non-trivial global destruc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:12858,log,logical,12858,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['log'],['logical']
Testability,"om the public interface. The `RooAbsMinimizerFcn` class and its implementation `RooMinimizerFcn` were removed from the public interface.; These classes are implementation details of the RooMinimizer and should not be used in your code.; In the unlikely case that this causes any problem for you, please open a GitHub issue requesting to extend the RooMinimizer by the needed functionality. ### Vectorize `RooAbsBinning` interface for bin index lookups. The `RooAbsBinning` interface for bin index lookups was changed to enable vectorized implementations.; Instead of having the override `RooAbsBinning::binNumber()`, the binning implementations now have to override the `RooAbsBinning::binNumbers()` function to evaluate the bin indices of multiple values in one function call. ### Disable relative and absolute epsilon in `RooAbsRealLValue::inRange()`. So far, the `RooAbsRealLValue::inRange()` function used the following; undocumented convention to check whether a value `x` is in the range with; limits `a` and `b`: test if `[x - eps * x, x + eps * x]` overlaps with `[a, b]`, where the; parameter `eps` is defined as `max(epsRel * x, epsAbs)`. The values of the relative and absolute epsilons were inconsistent among the overloads:. * [RooAbsRealLValue::inRange(const char* rangeName)](https://root.cern.ch/doc/v626/classRooAbsRealLValue.html#ab6050a0c3e5583b9d755a38fd7fb82f7): `epsRel = 1e-8, epsAbs = 0`; * [RooAbsRealLValue::inRange(double value, const char* rangeName, double* clippedValPtr)](https://root.cern.ch/doc/v626/classRooAbsRealLValue.html#afc2a8818f433a9a4ec0c437cbdad4e8a): `epsRel = 0, epsAbs = 1e-6`; * [RooAbsRealLValue::inRange(std::span<const double> values, std::string const& rangeName, std::vector<bool>& out)](https://root.cern.ch/doc/v626/classRooAbsRealLValue.html#af9217abd0afe34364562ad0c194f5d2c): `epsRel = 0, epsAbs = 1e-6`. With this release, the default absolute and relative epsilon is zero to avoid confusion.; You can change them with `RooNumber::setRangeEps",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:25209,test,test,25209,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['test'],['test']
Testability,"om/root-project/root/issues/15091.; fit/exampleFit3D.C; ); endif(). if(MSVC AND NOT win_broken_tests); # RBatchGenerator tutorials don't work on Windows at the moment.; list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/RBatchGenerator_filters_vectors.py); # df036* and df037* seem to trigger OS errors when trying to delete the; # test files created in the tutorials. It is unclear why.; list(APPEND dataframe_veto dataframe/df036_missingBranches.C); list(APPEND dataframe_veto dataframe/df036_missingBranches.py); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.C); list(APPEND dataframe_veto dataframe/df037_TTreeEventMatching.py); # The RooFit SBI tutorials fail on Windows for unknown reasons; list(APPEND roofit_veto roofit/rf617_simulation_based_inference_multidimensional.py); endif(). # TODO: fix the problem and re-enable the tutorial test. The rf615 tutorial; # occasionally fails on cleanup on different platforms, hinting to a PyROOT; # issue. We disable the rf617 tutorial for now. as the covered RooFit; # functionality is also covered by rf617 (the multidimensional case).; list(APPEND roofit_veto roofit/rf615_simulation_based_inference.py). if (NOT dataframe); # RDataFrame; list(APPEND dataframe_veto dataframe/*.C dataframe/*.py); # RDataFrame tutorial in graphs; list(APPEND dataframe_veto graphs/timeSeriesFromCSV_TDF.C); # TMVA tutorials dependent on RDataFrame; list(APPEND dataframe_veto tmva/tmva*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.C); list(APPEND dataframe_veto tmva/TMVA_SOFIE_RDataFrame*.py); list(APPEND dataframe_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND dataframe_veto tmva/RBatchGenerator_NumPy.py); list(APPEND dataframe_veto tmva/RBatchGenerator_TensorFlow.py); list(APPEND dataframe_veto tmva/RBatchGenerator_PyTorch.py); list(APPEND dataframe_veto tmva/R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:3980,test,test,3980,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['test']
Testability,"ometry manager holds a list; of active navigators accessible via:. ~~~{.cpp}; TObjArray *navigators = gGeoManager->GetListOfNavigators();; ~~~. Upon closing the geometry a default navigator is provided as first one; in this list, but one may add its own via:. ~~~{.cpp}; TGeoNavigator *navig = new TGeoNavigator(gGeoManager);; // Store the index of the user navigator; Int_t inav = gGeoManager->AddNavigator(navig);; // Make its own navigator the active one; gGeoManager->SetCurrentNavigator(inav);; // Switch between navigators; gGeoManager->SetCurrentNavigator(0);; ~~~. A navigator holds several variables describing the current navigation; state: current point position, current direction distance to next; boundary, isotropic safety, pointer to current and next nods as well as; several tracking flags related to volume boundary conditions or other; properties required for track propagation in geometry. Each geometry; query affects these variables, so the only way in testing several; navigation alternatives and remembering the active navigation state is; to use parallel navigation. The following paragraphs will describe the; usage of a single navigator. All setters/getters for navigation state; parameters as well as navigation queries provided by TGeoNavigator; are interfaced by TGeoManager and will act on the current; navigator. \anchor GP02b; ### Initializing the Starting Point. The current point (`x,y,z`) known by the modeller is stored as; `Double_t fCurrentPoint[3]` by the navigator class. This array of the; three coordinates is defined in the current global reference system and; can be retrieved any time:. ~~~{.cpp}; Const Double_t *cpoint = gGeoManager->GetCurrentPoint();; ~~~. Initializing this point can be done like:. ~~~{.cpp}; gGeoManager->SetCurrentPoint(x,y,z);; // or:; gGeoManager->SetCurrentPoint(Double_t *point[3]);; ~~~. \anchor GP02c; ### Initializing the Direction. In order to move inside geometry starting with the current point, the; modeller needs to k",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:63992,test,testing,63992,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['test'],['testing']
Testability,ommands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`;,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27239,test,tests,27239,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,ommon/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/lin,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99727,test,tests,99727,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"ompare floating points:. Bool_t AreEqualAbs(Double_t af, Double_t bf, Double_t epsilon) {; //return kTRUE if absolute difference between af and bf is less than epsilon; Bool_t AreEqualRel(Double_t af, Double_t bf, Double_t relPrec) {; //return kTRUE if relative difference between af and bf is less than relPrec. TMatrix. Various changes to the Sparse Matrix classes:; ; Fixed Savannah bugs 45807,45502 and 45415; added a Streamer function to TMatrixTSparse to remove a memory; leak.; Added vector functionality as proposed by Peter D Barnes from LNL; (http://root.cern.ch/phpBB2/viewtopic.php?t=8351).; ; double s = v1 * M * v2; // Mult Function : e.g., physics matrix element; TMatrixD M = v1' * v2 // outer product of v1 and v2; . SMatrix. Use specialized structures for building automatically static; tables for mapping the indices conversion from standard row-wise one to the; compact one used internally for storing the memory of a symmetrix matrix. This change gives an; improvements of around 10-20% in the Kalman filter test (testKalman.cxx) and in the matrix operations test. Minuit. Implement in the TMinuitMinimizer class the method SetPrecision() using the ""SET EPS"" Minuit command; Fix a problem when using the user provided gradient in TMinuitMinimizer. The gradient calculation is always forced, i.e. Minuit will always use the derivatives calculations provided by the user. This is now the same behavior as in Minuit2Minimizer.; Implement in TMinuitMinimizer a method to retrieve the variable name given the index.; Fix a printout in TMinuit::mnscan and a problem observed with valgrind. Minuit2. Fix a bug in MnFunctionCross. ; Add a protection against very small step sizes which can cause; nan values in InitialGradientCalculator.; Implement a new function in the MnUserTransformation class, FindIndex(name), which returns -1 when the parameter name does not exist.; Implement new methods in Minuit2Minimizer as requested by the Minimizer interface:; SetPrecision(double eps) to ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html:1078,test,test,1078,math/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v526/index.html,2,['test'],"['test', 'testKalman']"
Testability,ompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testVoigtian testVoigtian.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGaussBinned testGaussBinned.cxx; LIBRARIES ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1738,test,testBifurGauss,1738,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,20,['test'],"['testBifurGauss', 'testBreitWigner', 'testCBShape', 'testChiSquarePdf', 'testGamma', 'testGaussBinned', 'testLegendre', 'testLognormal', 'testNovosibirsk', 'testVoigtian']"
Testability,"ompiled tests within a simulator tool. - `TEST_SUITE_BENCHMARKING_ONLY`. Disable tests that are unsuitable for performance measurements. The disabled; tests either run for a very short time or are dominated by I/O performance; making them unsuitable as compiler performance tests. - `TEST_SUITE_SUBDIRS`. Semicolon-separated list of directories to include. This can be used to only; build parts of the test-suite or to include external suites. This option; does not work reliably with deeper subdirectories as it skips intermediate; `CMakeLists.txt` files which may be required. - `TEST_SUITE_COLLECT_STATS`. Collect internal LLVM statistics. Appends `-save-stats=obj` when invoking the; compiler and makes the lit runner collect and merge the statistic files. - `TEST_SUITE_RUN_BENCHMARKS`. If this is set to `OFF` then lit will not actually run the tests but just; collect build statistics like compile time and code size. - `TEST_SUITE_USE_PERF`. Use the `perf` tool for time measurement instead of the `timeit` tool that; comes with the test-suite. The `perf` is usually available on linux systems. - `TEST_SUITE_SPEC2000_ROOT`, `TEST_SUITE_SPEC2006_ROOT`, `TEST_SUITE_SPEC2017_ROOT`, ... Specify installation directories of external benchmark suites. You can find; more information about expected versions or usage in the README files in the; `External` directory (such as `External/SPEC/README`). ### Common CMake Flags. - `-GNinja`. Generate build files for the ninja build tool. - `-Ctest-suite/cmake/caches/<cachefile.cmake>`. Use a CMake cache. The test-suite comes with several CMake caches which; predefine common or tricky build configurations. Displaying and Analyzing Results; --------------------------------. The `compare.py` script displays and compares result files. A result file is; produced when invoking lit with the `-o filename.json` flag. Example usage:. - Basic Usage:. ```text; % test-suite/utils/compare.py baseline.json; Warning: 'test-suite :: External/SPEC/CINT2006/403",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:6573,test,test-suite,6573,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"ompiler can guarantee that it always sees just the already-parsed definition from the module. While building a module, ``#include_next`` is also supported, with one caveat.; The usual behavior of ``#include_next`` is to search for the specified filename; in the list of include paths, starting from the path *after* the one; in which the current file was found.; Because files listed in module maps are not found through include paths, a; different strategy is used for ``#include_next`` directives in such files: the; list of include paths is searched for the specified header name, to find the; first include path that would refer to the current file. ``#include_next`` is; interpreted as if the current file had been found in that path.; If this search finds a file named by a module map, the ``#include_next``; directive is translated into an import, just like for a ``#include``; directive.``. Module maps; -----------; The crucial link between modules and headers is described by a *module map*, which describes how a collection of existing headers maps on to the (logical) structure of a module. For example, one could imagine a module ``std`` covering the C standard library. Each of the C standard library headers (``<stdio.h>``, ``<stdlib.h>``, ``<math.h>``, etc.) would contribute to the ``std`` module, by placing their respective APIs into the corresponding submodule (``std.io``, ``std.lib``, ``std.math``, etc.). Having a list of the headers that are part of the ``std`` module allows the compiler to build the ``std`` module as a standalone entity, and having the mapping from header names to (sub)modules allows the automatic translation of ``#include`` directives to module imports. Module maps are specified as separate files (each named ``module.modulemap``) alongside the headers they describe, which allows them to be added to existing software libraries without having to change the library headers themselves (in most cases [#]_). The actual `Module map language`_ is describe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:11598,log,logical,11598,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['log'],['logical']
Testability,"ompiler target. In addition ancillary files; are also generated to allow a complete set of bindings to be compiled,; packaged and installed::. cppyy_add_bindings(; pkg; pkg_version; author; author_email; [URL url]; [LICENSE license]; [LANGUAGE_STANDARD std]; [LINKDEFS linkdef...]; [IMPORTS pcm...]; [GENERATE_OPTIONS option...]; [COMPILE_OPTIONS option...]; [INCLUDE_DIRS dir...]; [LINK_LIBRARIES library...]; [H_DIRS H_DIRSectory]; H_FILES h_file...). The bindings are based on https://cppyy.readthedocs.io/en/latest/, and can be; used as per the documentation provided via the cppyy.gbl namespace. First add; the directory of the <pkg>.rootmap file to the LD_LIBRARY_PATH environment; variable, then ""import cppyy; from cppyy.gbl import <some-C++-entity>"". Alternatively, use ""import <pkg>"". This convenience wrapper supports; ""discovery"" of the available C++ entities using, for example Python 3's command; line completion support. The bindings are complete with a setup.py, supporting Wheel-based; packaging, and a test.py supporting pytest/nosetest sanity test of the bindings. The bindings are generated/built/packaged using 3 environments:. - One compatible with the header files being bound. This is used to; generate the generic C++ binding code (and some ancillary files) using; a modified C++ compiler. The needed options must be compatible with the; normal build environment of the header files.; - One to compile the generated, generic C++ binding code using a standard; C++ compiler. The resulting library code is ""universal"" in that it is; compatible with both Python2 and Python3.; - One to package the library and ancillary files into standard Python2/3; wheel format. The packaging is done using native Python tooling. +----------------------+---------------------------------------------------------------------------------------------+; |Arguments and options | Description |; +======================+==============================================================================",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst:4725,test,test,4725,bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/cmake_interface.rst,1,['test'],['test']
Testability,"ompiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a constant foldable integral. This checker was designed for code audits, so expect false-positive reports.; One is supposed to silence this checker by ensuring proper bounds checking on; the variable in question using e.g. an ``assert()`` or a branch. .. code-block:: c. void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. void test2(int n) {; if (n > 100) // gives an upper-bound; return;; void *p = malloc(n * sizeof(int)); // no warning; }. void test3(int n) {; assert(n <= 100 && ""Contract violated."");; void *p = malloc(n * sizeof(int)); // no warning; }. Limitations:. - The checker won't warn for variables involved in explicit casts,; since that might limit the variable's domain.; E.g.: ``(unsigned char)int x`` would limit the domain to ``[0,255]``.; The checker will miss the true-positive cases when the explicit cast would; not tighten the domain to prevent the overflow in the subsequent; multiplication operation. - It is an AST-based checker, thus it does not make use of the; path-sensitive taint-analysis. .. _alpha-security-MmapWriteExec:. alpha.security.MmapWriteExec (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on mmap() calls that are both writable and executable. .. code-block:: c. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // cod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:62261,assert,assert,62261,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['assert'],['assert']
Testability,ompiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsa,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103127,test,tests,103127,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,on CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization.cxx LIBRARIES ${Libraries}); # # this test takes more than 20 minutes on arm in n,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7850,test,testDerivatives,7850,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testDerivatives']
Testability,"on and unroll factors are large, it's possible for loops with smaller; trip counts to end up spending most of their time in the scalar (rather than; the vector) code. In order to address this issue, the inner loop vectorizer is; enhanced with a feature that allows it to vectorize epilogue loops with a; vectorization and unroll factor combination that makes it more likely for small; trip count loops to still execute in vectorized code. The diagram below shows; the CFG for a typical epilogue vectorized loop with runtime checks. As; illustrated the control flow is structured in a way that avoids duplicating the; runtime pointer checks and optimizes the path length for loops that have very; small trip counts. .. image:: epilogue-vectorization-cfg.png. Performance; -----------. This section shows the execution time of Clang on a simple benchmark:; `gcc-loops <https://github.com/llvm/llvm-test-suite/tree/main/SingleSource/UnitTests/Vectorizer>`_.; This benchmarks is a collection of loops from the GCC autovectorization; `page <http://gcc.gnu.org/projects/tree-ssa/vectorization.html>`_ by Dorit Nuzman. The chart below compares GCC-4.7, ICC-13, and Clang-SVN with and without loop vectorization at -O3, tuned for ""corei7-avx"", running on a Sandybridge iMac.; The Y-axis shows the time in msec. Lower is better. The last column shows the geomean of all the kernels. .. image:: gcc-loops.png. And Linpack-pc with the same configuration. Result is Mflops, higher is better. .. image:: linpack-pc.png. Ongoing Development Directions; ------------------------------. .. toctree::; :hidden:. VectorizationPlan. :doc:`VectorizationPlan`; Modeling the process and upgrading the infrastructure of LLVM's Loop Vectorizer. .. _slp-vectorizer:. The SLP Vectorizer; ==================. Details; -------. The goal of SLP vectorization (a.k.a. superword-level parallelism) is; to combine similar independent instructions; into vector instructions. Memory accesses, arithmetic operations, comparison; operati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst:12461,benchmark,benchmarks,12461,interpreter/llvm-project/llvm/docs/Vectorizers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst,1,['benchmark'],['benchmarks']
Testability,"on failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelih",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4007,test,testRooPolyFunc,4007,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooPolyFunc']
Testability,"on is done twice. The; reference and target views are swapped, in order to produce those; **missing** elements from the target view and those **added** elements; to the reference view. See :option:`--report` options on how to describe the comparison; reports. .. _warning_:. WARNING; ~~~~~~~; When reading the input object files, :program:`llvm-debuginfo-analyzer`; can detect issues in the raw debug information. These may not be; considered fatal to the purpose of printing a logical view but they can; give an indication about the quality and potentially expose issues with; the generated debug information. The following options describe the warnings to be recorded for later; printing, if they are requested by :option:`--print`. .. option:: --warning=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below warnings. The following options collect additional information during the creation; of the logical view, to include invalid coverage values and locations; for symbols; invalid code ranges; lines that are zero. .. code-block:: text. =coverages: Invalid symbol coverages values.; =lines: Debug lines that are zero.; =locations: Invalid symbol locations.; =ranges: Invalid code ranges. .. _internal_:. INTERNAL; ~~~~~~~~; For a better understanding of the logical view, access to more detailed; internal information could be needed. Such data would help to identify; debug information processed or incorrect logical element management.; Typically these kind of options are available only in *debug* builds. :program:`llvm-debuginfo-analyzer` supports these advanced options in; both *release* and *debug* builds, with the exception of the unique ID; that is generated only in *debug* builds. .. option:: --internal=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below options. The following options allow to check the integrity of ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:21978,log,logical,21978,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"on's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file to define; ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial values, which; serve as the parameters of another newly defined ``%{check}`` substitution:. .. code-block:: llvm. ; DEFINE: %{cflags} =; ; DEFINE: %{fcflags} =. ; DEFINE: %{check} = \; ; DEFINE: %clang_cc1 -verify -fopenmp -fopenmp-version=51 %{cflags} \; ; DEFINE: -emit-llvm -o - %s | \; ; DEFINE: FileCheck %{fcflags} %s. Alternatively, the above substitutions can be defined in a lit configuration; file to be shared with other test files. Either way, the test file can then; specify directives like the following to redefine the parameter substitutions as; desired before each use of ``%{check}`` in a ``RUN:`` line:. .. code-block:: llvm. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0 -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-unknown-linux-gnu -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0; ; REDEFINE: %{fcflags} = -check-prefix=NO-SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-unknown-linux-gnu; ; REDEFINE: %{fcflags} = -check-prefix=NO-SIMD; ; RUN: %{check}. Besides providing initial values, the initial ``DEFINE:`` directives for the; parameter substitutions in the above example serve a second purpose: they; establish the substitution order so that both ``%{check}`` and its parameters; expand as desired. There's a simple way to remember the required definition; order in a test file: define a substitution before any substitu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:29871,test,test,29871,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"on); }. .. _alpha-core-DynamicTypeChecker:. alpha.core.DynamicTypeChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cases where the dynamic and the static type of an object are unrelated. .. code-block:: objc. id date = [NSDate date];. // Warning: Object has a dynamic type 'NSDate *' which is; // incompatible with static type 'NSNumber *'""; NSNumber *number = date;; [number doubleValue];. .. _alpha-core-FixedAddr:. alpha.core.FixedAddr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for assignment of a fixed address to a pointer. .. code-block:: c. void test() {; int *p;; p = (int *) 0x10000; // warn; }. .. _alpha-core-IdenticalExpr:. alpha.core.IdenticalExpr (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of identical expressions in operators. .. code-block:: cpp. // C; void test() {; int a = 5;; int b = a | 4 | a; // warn: identical expr on both sides; }. // C++; bool f(void);. void test(bool b) {; int i = 10;; if (f()) { // warn: true and false branches are identical; do {; i--;; } while (f());; } else {; do {; i--;; } while (f());; }; }. .. _alpha-core-PointerArithm:. alpha.core.PointerArithm (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer arithmetic on locations other than array elements. .. code-block:: c. void test() {; int x;; int *p;; p = &x + 1; // warn; }. .. _alpha-core-PointerSub:. alpha.core.PointerSub (C); """"""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer subtractions on two pointers pointing to different memory chunks. .. code-block:: c. void test() {; int x, y;; int d = &y - &x; // warn; }. .. _alpha-core-SizeofPtr:. alpha.core.SizeofPtr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of ``sizeof()`` on pointer expressions. .. code-block:: c. struct s {};. int test(struct s *p) {; return sizeof(p);; // warn: sizeof(ptr) can produce an unexpected result; }. .. _alpha-core-StackAddressAsyncEscape:. alpha.core.StackAddressAsyncEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do n",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:50074,test,test,50074,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,on-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES $,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3091,test,testBatchNormalizationCudnn,3091,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBatchNormalizationCudnn']
Testability,"on. .. option:: --timeout=N. Spend at most ``N`` seconds (approximately) running each individual test.; ``0`` means no time limit, and ``0`` is the default. Note that this is not an; alias for :option:`--max-time`; the two are different kinds of maximums. .. option:: --filter=REGEXP. Run only those tests whose name matches the regular expression specified in; ``REGEXP``. The environment variable ``LIT_FILTER`` can be also used in place; of this option, which is especially useful in environments where the call; to ``lit`` is issued indirectly. .. option:: --filter-out=REGEXP. Filter out those tests whose name matches the regular expression specified in; ``REGEXP``. The environment variable ``LIT_FILTER_OUT`` can be also used in; place of this option, which is especially useful in environments where the; call to ``lit`` is issued indirectly. .. option:: --xfail=LIST. Treat those tests whose name is in the semicolon separated list ``LIST`` as; ``XFAIL``. This can be helpful when one does not want to modify the test; suite. The environment variable ``LIT_XFAIL`` can be also used in place of; this option, which is especially useful in environments where the call to; ``lit`` is issued indirectly. A test name can specified as a file name relative to the test suite directory.; For example:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;offloading/memory_manager.cpp"". In this case, all of the following tests are treated as ``XFAIL``:. .. code-block:: none. libomp :: affinity/kmp-hw-subset.c; libomptarget :: nvptx64-nvidia-cuda :: offloading/memory_manager.cpp; libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp. Alternatively, a test name can be specified as the full test name; reported in LIT output. For example, we can adjust the previous; example not to treat the ``nvptx64-nvidia-cuda`` version of; ``offloading/memory_manager.cpp`` as XFAIL:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;libomptarget :: x86_64-pc-linux-gnu :: offlo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:8847,test,test,8847,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"on. Even more includes will be ""hidden"" when ROOT configured with `-Ddev=ON` build option.; In that case ROOT uses `#ifdef R__LESS_INCLUDES` to replace unused includes by class forward declarations.; Such `dev` builds can be used to verify that ROOT-based code really includes all necessary ROOT headers. ## RDataFrame. - Starting from this version, when `RSnapshotOptions.fMode` is `""UPDATE""` (i.e. the output file is opened in ""UPDATE""; mode), Snapshot will refuse to write out a TTree if one with the same name is already present in the output file.; Users can set the new flag `RSnapshotOption::fOverwriteIfExists` to `true` to force the deletion of the TTree that is; already present and the writing of a new TTree with the same name. See; [ROOT-10573](https://sft.its.cern.ch/jira/browse/ROOT-10573) for more details.; - RDataFrame changed its error handling strategy in case of unreadable input files. Instead of simply logging an error; and skipping the file, it now throws an exception if any of the input files is unreadable (this could also happen in; the middle of an event loop). See [ROOT-10549](https://sft.its.cern.ch/jira/browse/ROOT-10549) for more details.; - New analysis examples based on the recent ATLAS Open Data release ([`Higgs to two photons`](https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html), [`W boson analysis`](https://root.cern/doc/master/df105__WBosonAnalysis_8py.html), [`Higgs to four leptons`](https://root.cern/doc/master/df106__HiggsToFourLeptons_8py.html)); - An exception is now thrown in case the size of ROOT's thread-pool changes between RDataFrame construction time and the time the event loop begins.; - Just-in-time compilation of large portions of the computation graph has been optimized, and it is now much faster. Please report any regressions you might encounter on [our issue tracker](https://sft.its.cern.ch/jira/projects/ROOT).; - `MakeRootDataFrame` is now a safe way to construct RDFs. It used to return RDFs with more limited fu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v622/index.md:9803,log,logging,9803,README/ReleaseNotes/v622/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v622/index.md,1,['log'],['logging']
Testability,on.cpp; openmp/runtime/src/kmp_version.h; openmp/runtime/src/kmp_wait_release.cpp; openmp/runtime/src/kmp_wait_release.h; openmp/runtime/src/kmp_wrapper_getpid.h; openmp/runtime/src/kmp_wrapper_malloc.h; openmp/runtime/src/ompd-specific.cpp; openmp/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; poll,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411318,test,tests,411318,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"on:. .. code-block:: c++. std::pair<iterator, bool>; LeftRes = sn_mapL.insert(std::make_pair(Left, sn_mapL.size())), RightRes; = sn_mapR.insert(std::make_pair(Right, sn_mapR.size()));; return cmpNumbers(LeftRes.first->second, RightRes.first->second);. Let's look, how whole method could be implemented. 1. We have to start with the bad news. Consider function self and; cross-referencing cases:. .. code-block:: c++. // self-reference unsigned fact0(unsigned n) { return n > 1 ? n; * fact0(n-1) : 1; } unsigned fact1(unsigned n) { return n > 1 ? n *; fact1(n-1) : 1; }. // cross-reference unsigned ping(unsigned n) { return n!= 0 ? pong(n-1) : 0;; } unsigned pong(unsigned n) { return n!= 0 ? ping(n-1) : 0; }. .. This comparison has been implemented in initial *MergeFunctions* pass; version. But, unfortunately, it is not transitive. And this is the only case; we can't convert to less-equal-greater comparison. It is a seldom case, 4-5; functions of 10000 (checked in test-suite), and, we hope, the reader would; forgive us for such a sacrifice in order to get the O(log(N)) pass time. 2. If left/right *Value* is a constant, we have to compare them. Return 0 if it; is the same constant, or use ``cmpConstants`` method otherwise. 3. If left/right is *InlineAsm* instance. Return result of *Value* pointers; comparison. 4. Explicit association of *L* (left value) and *R* (right value). We need to; find out whether values met at the same time, and thus are *associated*. Or we; need to put the rule: when we treat *L* < *R*. Now it is easy: we just return; the result of numbers comparison:. .. code-block:: c++. std::pair<iterator, bool>; LeftRes = sn_mapL.insert(std::make_pair(Left, sn_mapL.size())),; RightRes = sn_mapR.insert(std::make_pair(Right, sn_mapR.size()));; if (LeftRes.first->second == RightRes.first->second) return 0;; if (LeftRes.first->second < RightRes.first->second) return -1;; return 1;. Now when *cmpValues* returns 0, we can proceed the comparison procedure.; Otherwise, i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:20375,test,test-suite,20375,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,2,"['log', 'test']","['log', 'test-suite']"
Testability,"on; (C); Generate taint information used by other checkers. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-security to suppress compiler warning.; void test() {; char s[10], buf[10];; fscanf(stdin, ""%s"", s); // 's' marked as tainted. sprintf(buf, s); // warn: untrusted data as a format string; }. void test() {; size_t ts;; scanf(""%zd"", &ts); // 'ts' marked as tainted; int *p = (int *)malloc(ts * sizeof(int));; // warn: untrusted data as buffer size; }. Unix Alpha Checkers. Name, DescriptionExample. alpha.unix.BlockInCriticalSection; (C); Check for calls to blocking functions inside a critical section. Applies to:. lock; unlock; sleep; getc; fgets; read; revc; pthread_mutex_lock; pthread_mutex_unlock; mtx_lock; mtx_timedlock; mtx_trylock; mtx_unlock; lock_guard; unique_lock. void test() {; std::mutex m;; m.lock();; sleep(3); // warn: a blocking function sleep is called inside a critical; // section; m.unlock();; }. alpha.unix.Chroot; (C); Check improper use of chroot. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. alpha.unix.PthreadLock; (C); Simple lock -> unlock checker; applies to:; pthread_mutex_lock; pthread_rwlock_rdlock; pthread_rwlock_wrlock; lck_mtx_lock; lck_rw_lock_exclusive; lck_rw_lock_shared; pthread_mutex_trylock; pthread_rwlock_tryrdlock; pthread_rwlock_tryrwlock; lck_mtx_try_lock; lck_rw_try_lock_exclusive; lck_rw_try_lock_shared; pthread_mutex_unlock; pthread_rwlock_unlock; lck_mtx_unlock; lck_rw_done. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acqui",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:12658,test,test,12658,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"on; defaults to 0.; ``-only_ascii``; If 1, generate only ASCII (``isprint``+``isspace``) inputs. Defaults to 0.; ``-artifact_prefix``; Provide a prefix to use when saving fuzzing artifacts (crash, timeout, or; slow inputs) as ``$(artifact_prefix)file``. Defaults to empty.; ``-exact_artifact_path``; Ignored if empty (the default). If non-empty, write the single artifact on; failure (crash, timeout) as ``$(exact_artifact_path)``. This overrides; ``-artifact_prefix`` and will not use checksum in the file name. Do not use; the same path for several parallel processes.; ``-print_pcs``; If 1, print out newly covered PCs. Defaults to 0.; ``-print_final_stats``; If 1, print statistics at exit. Defaults to 0.; ``-detect_leaks``; If 1 (default) and if LeakSanitizer is enabled; try to detect memory leaks during fuzzing (i.e. not only at shut down).; ``-close_fd_mask``; Indicate output streams to close at startup. Be careful, this will; remove diagnostic output from target code (e.g. messages on assert failure). - 0 (default): close neither ``stdout`` nor ``stderr``; - 1 : close ``stdout``; - 2 : close ``stderr``; - 3 : close both ``stdout`` and ``stderr``. For the full list of flags run the fuzzer binary with ``-help=1``. Output; ======. During operation the fuzzer prints information to ``stderr``, for example::. INFO: Seed: 1523017872; INFO: Loaded 1 modules (16 guards): [0x744e60, 0x744ea0),; INFO: -max_len is not provided, using 64; INFO: A corpus is not provided, starting from an empty corpus; #0	READ units: 1; #1	INITED cov: 3 ft: 2 corp: 1/1b exec/s: 0 rss: 24Mb; #3811	NEW cov: 4 ft: 3 corp: 2/2b exec/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-; #3827	NEW cov: 5 ft: 4 corp: 3/4b exec/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-; #3963	NEW cov: 6 ft: 5 corp: 4/6b exec/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-; #4167	NEW cov: 7 ft: 6 corp: 5/9b exec/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-; ... The early parts of the output include informat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:14355,assert,assert,14355,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['assert'],['assert']
Testability,onCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpr,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:3836,test,tests,3836,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['tests']
Testability,onFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1929,test,testBatchNormalizationCuda,1929,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBatchNormalizationCuda']
Testability,"on`** present the; option buttons in ROOT. Like the text buttons, they have text or hot; string as a label. Radio buttons are grouped in logical sets of two or; more and appear with a text label to the right. The choices are mutually; exclusive and only one setting is permitted at one time. They represent; visually all alternatives and it is easy to access and compare choices.; They facilitate the situations where all alternatives cannot be easily; remembered or where displaying the alternatives together helps to; understand and select the proper choice. It is very useful to provide a; default setting whenever it is possible. When it is not possible to; establish a default setting because of the nature of the information, it; is better to leave all radio buttons blank. ![](pictures/03000210.png). A columnar orientation is the preferred manner of radio buttons; presentation. If the vertical space on the window is limited, they can; be oriented horizontally. Selection choices should be organized; logically in groups. Here is the example that produces the image above:. ``` {.cpp}; br = new TGButtonGroup(p,""Coordinate system"",kVerticalFrame);; fR[0] = new TGRadioButton(bg,new TGHotString(""&Pixel""));; fR[1] = new TGRadioButton(bg,new TGHotString(""&NDC ""));; fR[2] = new TGRadioButton(bg,new TGHotString(""&User ""));; fR[1]->SetState(kButtonDown);; br->Show();; ```. It is enough to change `kVerticalFrame` to `kHorizontalFrame` in; **`TGButtonGroup`** constructor and you will have radio buttons aligned; horizontally:. ![](pictures/03000211.png). The class **`TGButtonGroup`** will help you to organize button widgets; in a group. There is no need to call `AddFrame()` since the buttons are; added automatically with a default layout hint to their parent by; **`TGButtonGroup`**`::Show()` as shown in the previous example. The; buttons in the group have assigned identifiers. Any button in a group; emits a `Clicked()` signal with this identifier when it is clicked. This; giving an id",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WritingGUI.md:60039,log,logically,60039,documentation/users-guide/WritingGUI.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/WritingGUI.md,1,['log'],['logically']
Testability,"on`. An empty/undef/poison; address means the address component has been killed (the memory address is no; longer a valid location). LLVM currently encodes variable fragment information; in `DIExpression`s, so as an implementation quirk the `FragmentInfo` for; `Variable` is contained within `ValueExpression` only. The formal LLVM-IR signature is:; ```; void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata); ```. ### Instruction link: `DIAssignID`. `DIAssignID` metadata is the mechanism that is currently used to encode the; store<->marker link. The metadata node has no operands and all instances are; `distinct`; equality is checked for by comparing addresses. `llvm.dbg.assign` intrinsics use a `DIAssignID` metadata node instance as an; operand. This way it refers to any store-like instruction that has the same; `DIAssignID` attachment. E.g. For this test.cpp,. ```; int fun(int a) {; return a;; }; ```; compiled without optimisations:; ```; $ clang++ test.cpp -o test.ll -emit-llvm -S -g -O0 -Xclang -fexperimental-assignment-tracking; ```; we get:; ```; define dso_local noundef i32 @_Z3funi(i32 noundef %a) #0 !dbg !8 {; entry:; %a.addr = alloca i32, align 4, !DIAssignID !13; call void @llvm.dbg.assign(metadata i1 undef, metadata !14, metadata !DIExpression(), metadata !13, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; store i32 %a, i32* %a.addr, align 4, !DIAssignID !16; call void @llvm.dbg.assign(metadata i32 %a, metadata !14, metadata !DIExpression(), metadata !16, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; %0 = load i32, i32* %a.addr, align 4, !dbg !17; ret i32 %0, !dbg !18; }. ...; !13 = distinct !DIAssignID(); !14 = !DILocalVariable(name: ""a"", ...); ...; !16 = distinct !DIAssignID(); ```. The first `llvm.dbg.assign` refers to the `alloca` through `!DIAssignID !13`,; and the second refers to the `store` through `!DIAssignID !16`. ### Store-like instructions. In the absence of a linked `llvm.dbg.assign`, a sto",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:4276,test,test,4276,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['test']
Testability,"one-eabi target""``; * ``-DCMAKE_AR=/path/to/llvm-ar``; * ``-DCMAKE_NM=/path/to/llvm-nm``; * ``-DCMAKE_RANLIB=/path/to/llvm-ranlib``; * ``-DCOMPILER_RT_BAREMETAL_BUILD=ON``; * ``-DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON``; * ``-DLLVM_CONFIG_PATH=/path/to/llvm-config``; * ``-DCMAKE_C_FLAGS=""build-c-flags""``; * ``-DCMAKE_ASM_FLAGS=""build-c-flags""``; * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armv7-A/sysroot""``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The Armv6-M builtins will use the soft-float ABI. When compiling the tests for; Armv7-A we must include ``""-mthumb -mfloat-abi=soft -mfpu=none""`` in the; test-c-flags. We must use an Armv7-A soft-float abi sysroot for ``qemu-arm``. Depending on the linker used for the test cases you may encounter BuildAttribute; mismatches between the M-profile objects from compiler-rt and the A-profile; objects from the test. The lld linker does not check the profile; BuildAttribute so it can be used to link the tests by adding -fuse-ld=lld to the; ``COMPILER_RT_TEST_COMPILER_CFLAGS``. Alternative using a cmake cache; -------------------------------; If you wish to build, but not test compiler-rt for Armv6-M, Armv7-M or Armv7E-M; the easiest way is to use the BaremetalARM.cmake recipe in clang/cmake/caches. You will need a bare metal sysroot such as that provided by the GNU ARM; Embedded toolchain. The libraries can be built with the cmake options:. * ``-DBAREMETAL_ARMV6M_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-DBAREMETAL_ARMV7M_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-DBAREMETAL_ARMV7EM_SYSROOT=/path/to/bare/metal/toolchain/arm-none-eabi``; * ``-C /path/to/llvm/source/tools/clang/cmake/caches/BaremetalARM.cmake``; * ``/path/to/llvm``. **Note** that for the recipe to work the compiler-rt source must be checked out; into the directory llvm/runtimes. You will also need clang and lld checked out. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:12330,test,tests,12330,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,2,['test'],"['test', 'tests']"
Testability,"one_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test config for the directory (see; :ref:`local-configuration-files`). Tests are identified by the test suite they are contained within, and the; relative path inside that suite. Note that the relative path may not refer to; an actual file on disk; some test formats (such as *GoogleTest*) define; ""virtual tests"" which have a path that contains both the path to the actual; test file and a subpath to identify the virtual test. .. _local-configuration-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:17220,test,test,17220,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"onfig file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by the config and; others are optional or predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:15837,test,test,15837,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"onfiguration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12570,test,tests,12570,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"onfigure* ``llvm`` from the top level of each build tree (LLVM; object directory tree) in which you want to run the test suite, just; as you do before building LLVM. During the *re-configuration*, you must either: (1) have ``llvm-gcc``; you just built in your path, or (2) specify the directory where your; just-built ``llvm-gcc`` is installed using; ``--with-llvmgccdir=$LLVM_GCC_DIR``. You must also tell the configure machinery that the test suite is; available so it can be configured for your build tree:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT ; $LLVM_SRC_ROOT/configure [--with-llvmgccdir=$LLVM_GCC_DIR]. [Remember that ``$LLVM_GCC_DIR`` is the directory where you; *installed* llvm-gcc, not its src or obj directory.]. #. You can now run the test suite from your build tree as follows:. .. code-block:: bash. % cd $LLVM_OBJ_ROOT/projects/test-suite; % make. Note that the second and third steps only need to be done once. After; you have the suite checked out and configured, you don't need to do it; again (unless the test code or configure script changes). Configuring External Tests; ==========================. In order to run the External tests in the ``test-suite`` module, you; must specify *--with-externals*. This must be done during the; *re-configuration* step (see above), and the ``llvm`` re-configuration; must recognize the previously-built ``llvm-gcc``. If any of these is; missing or neglected, the External tests won't work. * *--with-externals*. * *--with-externals=<directory>*. This tells LLVM where to find any external tests. They are expected to; be in specifically named subdirectories of <``directory``>. If; ``directory`` is left unspecified, ``configure`` uses the default value; ``/home/vadve/shared/benchmarks/speccpu2000/benchspec``. Subdirectory; names known to LLVM include:. * spec95. * speccpu2000. * speccpu2006. * povray31. Others are added from time to time, and can be determined from; ``configure``. Running Different Tests; =======================. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:1829,test,test,1829,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test']
Testability,"onically the same types. This is sometimes necessary, for example,; to make the ``__counted_by`` and friends not participate in function; overloading. However, this design requires a separate logic to walk through the; entire type hierarchy to check type compatibility of bounds annotations. Late parsing for C; ==================. A bounds annotation such as ``__counted_by(count)`` can be added to type of a; struct field declaration where count is another field of the same struct; declared later. Similarly, the annotation may apply to type of a function; parameter declaration which precedes the parameter count in the same function.; This means parsing the argument of bounds annotations must be done after the; parser has the whole context of a struct or a function declaration. Clang has; late parsing logic for C++ declaration attributes that require late parsing,; while the C declaration attributes and C/C++ type attributes do not have the; same logic. This requires introducing late parsing logic for C/C++ type; attributes. Internal bounds annotations; ===========================. ``__indexable`` and ``__bidi_indexable`` alter pointer representations to be; equivalent to a struct with the pointer and the corresponding bounds fields.; Despite this difference in their representations, they are still pointers in; terms of types of operations that are allowed and their semantics. For instance,; a pointer dereference on a ``__bidi_indexable`` pointer will return the; dereferenced value same as plain C pointers, modulo the extra bounds checks; being performed before dereferencing the wide pointer. This means mapping the; wide pointers to struct types with equivalent layout won’t be sufficient. To; represent the wide pointers in Clang AST, we add an extra field in the; PointerType class to indicate the internal bounds of the pointer. This ensures; pointers of different representations are mapped to different canonical types; while they are still treated as pointers. In LLVM I",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst:2098,log,logic,2098,interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,1,['log'],['logic']
Testability,"onlist::; TokString: '""' (non-'""' characters and escapes) '""'; TokCode: ""[{"" (shortest text not containing ""}]"") ""}]"". A :token:`TokCode` is nothing more than a multi-line string literal; delimited by ``[{`` and ``}]``. It can break across lines and the; line breaks are retained in the string. The current implementation accepts the following escape sequences::. \\ \' \"" \t \n. Identifiers; -----------. TableGen has name- and identifier-like tokens, which are case-sensitive. .. productionlist::; ualpha: ""a""...""z"" | ""A""...""Z"" | ""_""; TokIdentifier: (""0""...""9"")* `ualpha` (`ualpha` | ""0""...""9"")*; TokVarName: ""$"" `ualpha` (`ualpha` | ""0""...""9"")*. Note that, unlike most languages, TableGen allows :token:`TokIdentifier` to; begin with an integer. In case of ambiguity, a token is interpreted as a; numeric literal rather than an identifier. TableGen has the following reserved keywords, which cannot be used as; identifiers::. assert bit bits class code; dag def dump else false; foreach defm defset defvar field; if in include int let; list multiclass string then true. .. warning::; The ``field`` reserved word is deprecated, except when used with the; CodeEmitterGen backend where it's used to distinguish normal record; fields from encoding fields. Bang operators; --------------. TableGen provides ""bang operators"" that have a wide variety of uses:. .. productionlist::; BangOperator: one of; : !add !and !cast !con !dag; : !div !empty !eq !exists !filter; : !find !foldl !foreach !ge !getdagarg; : !getdagname !getdagop !gt !head !if; : !interleave !isa !le !listconcat !listremove; : !listsplat !logtwo !lt !mul !ne; : !not !or !range !repr !setdagarg; : !setdagname !setdagop !shl !size !sra; : !srl !strconcat !sub !subst !substr; : !tail !tolower !toupper !xor. The ``!cond`` operator has a slightly different; syntax compared to other bang operators, so it is defined separately:. .. productionlist::; CondOperator: !cond. See `Appendix A: Bang Operators`_ for a description of each bang",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:8635,assert,assert,8635,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"onsidered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected to populate. The following variables are also; available on the *config* object, some of which must be set by ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:14437,test,test,14437,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"onsole. $ gdb opt; GNU gdb 5.0; Copyright 2000 Free Software Foundation, Inc.; GDB is free software, covered by the GNU General Public License, and you are; welcome to change it and/or distribute copies of it under certain conditions.; Type ""show copying"" to see the conditions.; There is absolutely no warranty for GDB. Type ""show warranty"" for details.; This GDB was configured as ""sparc-sun-solaris2.6""...; (gdb). Note that :program:`opt` has a lot of debugging information in it, so it takes; time to load. Be patient. Since we cannot set a breakpoint in our pass yet; (the shared object isn't loaded until runtime), we must execute the process,; and have it stop before it invokes our pass, but after it has loaded the shared; object. The most foolproof way of doing this is to set a breakpoint in; ``PassManager::run`` and then run the process with the arguments you want:. .. code-block:: console. $ (gdb) break llvm::PassManager::run; Breakpoint 1 at 0x2413bc: file Pass.cpp, line 70.; (gdb) run test.bc -load $(LLVMTOP)/llvm/Debug+Asserts/lib/[libname].so -[passoption]; Starting program: opt test.bc -load $(LLVMTOP)/llvm/Debug+Asserts/lib/[libname].so -[passoption]; Breakpoint 1, PassManager::run (this=0xffbef174, M=@0x70b298) at Pass.cpp:70; 70 bool PassManager::run(Module &M) { return PM->run(M); }; (gdb). Once the :program:`opt` stops in the ``PassManager::run`` method you are now; free to set breakpoints in your pass so that you can trace through execution or; do other standard debugging stuff. Miscellaneous Problems; ^^^^^^^^^^^^^^^^^^^^^^. Once you have the basics down, there are a couple of problems that GDB has,; some with solutions, some without. * Inline functions have bogus stack information. In general, GDB does a pretty; good job getting stack traces and stepping through inline functions. When a; pass is dynamically loaded however, it somehow completely loses this; capability. The only solution I know of is to de-inline a function (move it; from the body of a c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst:53698,test,test,53698,interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,1,['test'],['test']
Testability,"onstant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-------+----------------------+; | 1 | Quiet NaN |; +-------+----------------------+; | 2 | Negative infinity |; +-------+----------------------+; | 3 | Negative normal |; +-------+----------------------+; | 4 | Negative subnormal |; +-------+----------------------+; | 5 | Negative zero |; +-------+----------------------+; | 6 | Positive zero |; +-------+----------------------+; | 7 | Positive subnormal |; +-------+----------------------+; | 8 | Positive normal |; +-------+----------------------+; | 9 | Positive infinity |; +-------+----------------------+. Semantics:; """""""""""""""""""". The function checks if ``op`` belongs to any of the floating-point classes; specified by ``test``. If ``op`` is a vector, then the check is made element by; element. Each check yields an :ref:`i1 <t_integer>` result, which is ``true``,; if the element value satisfies the specified test. The argument ``test`` is a; bit mask where each bit specifies floating-point class to test. For example, the; value 0x108 makes test for normal value, - bits 3 and 8 in it are set, which; means that the function returns ``true`` if ``op`` is a positive or negative; normal value. The function never raises floating-point exceptions. The; function does not canonicalize its input value and does not depend; on the floating-point environment. If the floating-point environment; has a zeroing treatment of subnormal input values (such as indicated; by the ``""denormal-fp-math""`` attribute), a subnormal value will be; observed (will not be implicitly treated as zero). General Intrinsics; ------------------. This class of intrinsics is designed to be generic and has no specific; purpose. '``llvm.var.annotation``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.var.annotation(ptr <val>, ptr <str>,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:923309,test,test,923309,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ontainers.PointerSizedValues; (C); Warns if CFArray, CFDictionary, CFSet are; created with non-pointer-size values. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void **)x, 1,; &kCFTypeArrayCallBacks); // warn; }. Security Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. security.insecureAPI.UncheckedReturn; (C); Warn on uses of functions whose return values must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:21739,test,test,21739,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ontains helper types and functions. `RVec` is a vector type that tries to be as `std::vector`-like as possible while adding a; few important features, namely:; - the ability to act as a view over an existing memory buffer (see ""Memory adoption"" below); - a small-buffer optimization; - vectorized operator overloads; - a vectorized `operator[](mask)` to allow quick element selection together with vectorized operators; (e.g. `etas[etas > k]` returns a new `RVec` with all elements greater than `k`); - helper functions such as `InvariantMass`, `DeltaR`, `Argsort` are also provided. The current implementation of `RVec` is based on LLVM's SmallVector, extracted; from the head of LLVM's repo around December 2020.; We are not tracking the upstream implementation. Compared to LLVM's SmallVectors:. - memory adoption capabilities have been added; - patches have been applied to make RVec work with (ROOT's version of) cppyy (notably `using` declarations had to be; lowered in the inheritance hierarchy for cppyy to pick them up); - `operator[](mask)` has been added, as well as several other ""numpy-like"" helper; functions (these latter ones are free functions); - logical operators `==`, `<`, `>` etc. return vectors rather than booleans; - the type of fSize and fCapacity is signed rather than unsigned, and fixed to 32 bits; - a number of minor patches have been applied for backward compatibility with the previous; implementation of RVec (which did not have a small buffer optimization and was implemented; in terms of `std::vector` with a custom allocator) and to make the code more consistent; with ROOT's coding conventions. ## RVec design. `SmallVectorBase`; - `fBeginX`; - `fSize`; - `fCapacity`. Basically the same as the corresponding LLVM class, with the template parameter removed: LLVM's SmallVectorBase; is templated over the type of fSize and fCapacity. It contains the parts of `RVec` that do not depend on the value; type.; No other classes in the hierarchy can contain data member",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/vecops/ARCHITECTURE.md:1380,log,logical,1380,math/vecops/ARCHITECTURE.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/vecops/ARCHITECTURE.md,1,['log'],['logical']
Testability,"ontext here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/TestStatistics/TestStatistics_ref.root); ROOT_ADD_GTEST(testLikelihoodGradientJob TestStatistics/testLikelihoodGradientJob.cxx LIBRARIES RooFitMulti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:4086,test,testRooRealL,4086,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooRealL']
Testability,"ontext sensitive profile counts. The default is to filter all; context sensitive profile counts. .. option:: --show-prof-sym-list=[true|false]. Show profile symbol list if it exists in the profile. This option is only; meaningful for sample-based profile in extbinary format. .. option:: --show-sec-info-only=[true|false]. Show basic information about each section in the profile. This option is; only meaningful for sample-based profile in extbinary format. .. option:: --debug-info=<path>. Specify the executable or ``.dSYM`` that contains debug info for the raw profile.; When ``--debug-info-correlate`` or ``--profile-correlate=debug-info`` was used; for instrumentation, use this option to show the correlated functions from the; raw profile. .. option:: --covered. Show only the functions that have been executed, i.e., functions with non-zero; counts. .. program:: llvm-profdata overlap. .. _profdata-overlap:. OVERLAP; -------. SYNOPSIS; ^^^^^^^^. :program:`llvm-profdata overlap` [*options*] [*base profile file*] [*test profile file*]. DESCRIPTION; ^^^^^^^^^^^. :program:`llvm-profdata overlap` takes two profile data files and displays the; *overlap* of counter distribution between the whole files and between any of the; specified functions. In this command, *overlap* is defined as follows:; Suppose *base profile file* has the following counts:; {c1_1, c1_2, ..., c1_n, c1_u_1, c2_u_2, ..., c2_u_s},; and *test profile file* has; {c2_1, c2_2, ..., c2_n, c2_v_1, c2_v_2, ..., c2_v_t}.; Here c{1|2}_i (i = 1 .. n) are matched counters and c1_u_i (i = 1 .. s) and; c2_v_i (i = 1 .. v) are unmatched counters (or counters only existing in); *base profile file* and *test profile file*, respectively.; Let sum_1 = c1_1 + c1_2 + ... + c1_n + c1_u_1 + c2_u_2 + ... + c2_u_s, and; sum_2 = c2_1 + c2_2 + ... + c2_n + c2_v_1 + c2_v_2 + ... + c2_v_t.; *overlap* = min(c1_1/sum_1, c2_1/sum_2) + min(c1_2/sum_1, c2_2/sum_2) + ...; + min(c1_n/sum_1, c2_n/sum_2). The result overlap distribution is a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst:11662,test,test,11662,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,1,['test'],['test']
Testability,"ontributions/3525646/attachments/1895398/3127159/GSoC_Presentation__GMI.pdf>`_; - *Arpitha Raghunandan* 2012 Google Summer of Code GSoC; - GlobalModuleIndex can be used for improving ROOT’s and Cling’s performance ; * - `Example project using cling as library <https://github.com/root-project/cling/tree/master/tools/demo>`_; - *Axel Naumann* 2016 GitHub; - This video showcases how to use Cling as a library, and shows how to set up a simple CMake configuration that uses Cling.; * - `Cling C++ interpreter testdrive <https://www.youtube.com/watch?v=1IGTHusaJ18>`_; - *Mika* 2015 Youtube; - In this tutorial, a developer tries Cling for the first time by uploading a few simple C++ user-cases onto Cling, involving also the loading of external files; * - `Building an Order Book in C++ <https://www.youtube.com/watch?v=fxN4xEZvrxI>`_; - *Dimitri Nesteruk* 2015 Youtube; - This demo shows how to build a simple order book using C++, CLion, Google Test and, of course, Cling. ; * - `Cling C++ interpreter testdrive <https://www.youtube.com/watch?v=1IGTHusaJ18>`_; - Dimitri Nesteruk 2015 Youtube; - This tutorial describes Cling’s general features. You will learn how to start Cling on Ubuntu, how to write a simple expression (N=5, N++) and how to define a Class for calculating body mass index. ; * - `Cling Interactive OpenGL Demo <https://www.youtube.com/watch?v=eoIuqLNvzFs>`_; - *Alexander Penev* 2012 Youtube; - This demo shows how to use Cling for interactive OpenGL. A rotating triangle with changing color, a static figure, and a figure with light effects are created.; ; . .. list-table:: Language Interoperability with Cling:; :widths: 25 25 50; :header-rows: 1. * - Link; - Info ; - Description; * - `Compiler Research - Calling C++ libraries from a D-written DSL: A cling/cppyy-based approach <https://www.youtube.com/watch?v=7teqrCNzrD8>`_; - *Alexandru Militaru* 2021 Compiler-Research Meeting; - This video presents D and C++ interoperability through SIL-Cling architecture. .. list-ta",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/chapters/references.rst:5149,test,testdrive,5149,interpreter/cling/docs/chapters/references.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/chapters/references.rst,1,['test'],['testdrive']
Testability,onvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeights TestRotateWeights.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights COMMAND testRotWeights). #-- features not implemeted in ref architectures; #ROOT_EXECUTABLE(testForwardPass TestForwardPass.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Forward COMMAND testForwardPass). #ROOT_EXECUTABLE(testConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. -------,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:3795,test,testReshape,3795,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testReshape']
Testability,"oo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object were relocated by the; offset. .. option:: --basenames, -s. Print just the file's name without any directories, instead of the; absolute path. .. option:: --build-id. Look up the object using the given build ID, specified as a hexadecimal; string. Mutually exclusive with :option:`--obj`. .. option:: --color [=<always|auto|never>]. Specify whether to us",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:4314,test,test,4314,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"oof::GetListOfSlaveInfos()); Add new submerger functionality to speed up the merging; phase. At the end of the query, a set of workers are promoted; submergers and assigned a sub-set of workers to merge. Once each; sub-merger has merged its sub-set of workers, it sends its result to; the master, which merges the partial results into the final; set of results.; The determination of the sub-mergers is always done dynamically, based; on the recent performance of workers. An optimal (i.e. giving the; highest speed-up) number can be calculated analytically under simple; assumptions.; Merging via submergers is by default disabled. To enable it, with the; optimal number of sub-mergers, one should set the integer parameter; 'PROOF_UseMergers' to 0, i.e.                     ; proof->SetParameter(""PROOF_UseMergers"", 0). To force S sub-mergers (regardless of the optimal number) do.                     ; proof->SetParameter(""PROOF_UseMergers"", S). The new functionality can be tested in tutorials by adding the argument; 'submergers' to runProof, e.g. .        ;        ;      root [0] .L; tutorials/proof/runProof.C+ ;        ;        ;      root [1]; runProof(""simple(nhist=10000,submergers)"") . (see the top of tutorials/proof/runProof.C for additional options). A test for the submerger functionality has also been added to; test/stressProof.cxx .; In PROOF-Lite, add the possibility for the administrator; to control the number of workers. This is done using; the rootrc variable ProofLite.MaxWorkers, which is read out of; /etc/system.rootrc and cannot be overwritten by users. Setting the; value to 0 disables PROOF-Lite. Improvements. TFileMerger. A few improvements on the way to make TFileMerger and; hadd totally equivalent:. import from hadd an optimization of key hashing; import from hadd a better way to invoke Merge for; generic objects; add option to merge histograms in one go, instead of; one-by-one as for generic objects (this option is not yet supported by; hadd). TProofOutpu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html:2879,test,tested,2879,proof/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v526/index.html,1,['test'],['tested']
Testability,"oogle/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:2550,benchmark,benchmark,2550,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['benchmark'],['benchmark']
Testability,"ooks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a non-zero exit code if there is an error.; Ot",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1651,test,test,1651,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"ool PadOperators`` Only for ``AlignConsecutiveAssignments``. Whether short assignment; operators are left-padded to the same length as long ones in order to; put all assignment operators to the right of the left hand side. .. code-block:: c++. true:; a >>= 2;; bbb = 2;. a = 2;; bbb >>= 2;. false:; a >>= 2;; bbb = 2;. a = 2;; bbb >>= 2;. .. _AlignConsecutiveShortCaseStatements:. **AlignConsecutiveShortCaseStatements** (``ShortCaseStatementsAlignmentStyle``) :versionbadge:`clang-format 17` :ref:`¶ <AlignConsecutiveShortCaseStatements>`; Style of aligning consecutive short case labels.; Only applies if ``AllowShortCaseLabelsOnASingleLine`` is ``true``. .. code-block:: yaml. # Example of usage:; AlignConsecutiveShortCaseStatements:; Enabled: true; AcrossEmptyLines: true; AcrossComments: true; AlignCaseColons: false. Nested configuration flags:. Alignment options. * ``bool Enabled`` Whether aligning is enabled. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; default: return """";; }. * ``bool AcrossEmptyLines`` Whether to align across empty lines. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";. default: return """";; }. * ``bool AcrossComments`` Whether to align across comments. .. code-block:: c++. true:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. false:; switch (level) {; case log::info: return ""info:"";; case log::warning: return ""warning:"";; /* A comment. */; default: return """";; }. * ``bool AlignCaseColons`` Whether aligned case labels are aligned on the colon, or on the; , or on the tokens after the colon. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:19271,log,log,19271,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,2,['log'],['log']
Testability,ool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compile,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93412,test,tests,93412,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"oolingForLLVM`. Introduction; ------------. Tools built with LibTooling, like Clang Plugins, run ``FrontendActions`` over; code. .. See FIXME for a tutorial on how to write FrontendActions. In this tutorial, we'll demonstrate the different ways of running Clang's; ``SyntaxOnlyAction``, which runs a quick syntax check, over a bunch of code. Parsing a code snippet in memory; --------------------------------. If you ever wanted to run a ``FrontendAction`` over some sample code, for; example to unit test parts of the Clang AST, ``runToolOnCode`` is what you; looked for. Let me give you an example:. .. code-block:: c++. #include ""clang/Tooling/Tooling.h"". TEST(runToolOnCode, CanSyntaxCheckCode) {; // runToolOnCode returns whether the action was correctly run over the; // given code.; EXPECT_TRUE(runToolOnCode(std::make_unique<clang::SyntaxOnlyAction>(), ""class X {};""));; }. Writing a standalone tool; -------------------------. Once you unit tested your ``FrontendAction`` to the point where it cannot; possibly break, it's time to create a standalone tool. For a standalone tool; to run clang, it first needs to figure out what command line arguments to use; for a specified file. To that end we create a ``CompilationDatabase``. There; are different ways to create a compilation database, and we need to support all; of them depending on command-line options. There's the ``CommonOptionsParser``; class that takes the responsibility to parse command-line parameters related to; compilation databases and inputs, so that all tools share the implementation. Parsing common tools options; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. ``CompilationDatabase`` can be read from a build directory or the command line.; Using ``CommonOptionsParser`` allows for explicit specification of a compile; command line, specification of build path using the ``-p`` command-line option,; and automatic location of the compilation database using source files paths. .. code-block:: c++. #include ""clang/Tooling/CommonOption",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibTooling.rst:1233,test,tested,1233,interpreter/llvm-project/clang/docs/LibTooling.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibTooling.rst,1,['test'],['tested']
Testability,"ools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#exter",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2281,test,test-suite,2281,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,3,"['benchmark', 'test']","['benchmark', 'test', 'test-suite']"
Testability,"ooming on Y axis; - cpXY - create palette XY for the canvas like cp50; - nopalette - ignore palette stored with TCanvas; - nocolors - ignore colors list stored with TCanvas; - lcolors - use only locally colors list stored with TCanvas; - nomargins - clear frame margins. ## Superimposing draw objects. In the URL string one could use ""+"" sign to specify objects superposition:. - [item=hpx+hprof](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof). With similar syntax one could specify individual draw options for superimposed objects. - [item=hpx+hprof&opt=logy+hist](https://root.cern/js/latest/?file=../files/hsimple.root&item=hpx+hprof&opt=logy+hist). Here ""logy"" option will be used for ""hpx1"" item and ""hist"" option for ""hprof;1"" item. While draw option can include ""+"" sign itself, for superposition one could specify arrays of items and draw options like:. - [item=[hpx;1,hprof;1]&opt=[logy,hist]](https://root.cern/js/latest/?file=../files/hsimple.root&item=[hpx;1,hprof;1]&opt=[logy,hist]). ## TTree draw. JSROOT provides possibility to display TTree data, using [TTree::Draw](https://root.cern/doc/master/classTTree.html) syntax:. - [opt=px](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px); - [opt=px:py](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py); - [opt=px:py:pz](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple;1&opt=px:py:pz). It is also possible to use branch by id number specifying name like ""br_0"", ""br_1"" and so on:. - [opt=br_0:br_1](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple&opt=br_0:br_1). Histogram ranges and binning defined after reading first 1000 entries from the tree.; Like in ROOT, one could configure histogram binning and range directly:. - [opt=px:py>>h(50,-5,5,50,-5,5)](https://root.cern/js/latest/?file=../files/hsimple.root&item=ntuple&opt=px:py>>h%2850,-5,5,50,-5,5%29). One and two dimensional draw expressions can be resulte",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:14571,log,logy,14571,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['logy']
Testability,"oop over all tutorials and define the corresponding test---------; foreach(t ${tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(labels tutorial); if(${t} IN_LIST long_running); list(APPEND labels longtest); endif(); if(${t} IN_LIST multithreaded); list(APPEND labels multithreaded); # If this is not a TMVA tutorial, we want to limit the size of the thread; # pool in case the tutorial invokes ROOT::EnableImplicitMT(), which by; # default creates a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over al",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24028,test,tests,24028,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['tests']
Testability,"oops instead; - `RooAbsArg::valueClientIterator()`: use `valueClients()`; - `RooAbsArg::shapeClientIterator()`: use `shapeClients()`; - `RooAbsArg::serverIterator()`: use `servers()`; - `RooAbsArg::valueClientMIterator()`: use `valueClients()`; - `RooAbsArg::shapeClientMIterator()`: use `shapeClients()`; - `RooAbsArg::serverMIterator()`: use `servers()`. - `RooAbsCollection::createIterator()`: use `begin()`, `end()` and range-based for loops; - `RooAbsCollection::iterator()`: same; - `RooAbsCollection::fwdIterator()`: same. - `RooWorkspace::componentIterator()`: use `RooWorkspace::components()` with range-based loop. ### Deprecation of legacy test statistics classes in public interface. Instantiating the following classes and even including their header files is deprecated, and the headers will be removed in ROOT 6.34:. * RooAbsTestStatistic; * RooAbsOptTestStatistic; * RooNLLVar; * RooChi2Var; * RooXYChi2Var. Please use the higher-level functions `RooAbsPdf::createNLL()` and `RooAbsPdf::createChi2()` if you want to create objects that represent test statistics. ### Change of RooParamHistFunc. The `RooParamHistFunc` didn't take any observable `RooRealVar` as constructor; argument. It assumes as observable the internal variables in the passed; RooDataHist. This means it was in most contexts unusable, because the input; can't be changed, other than loading a different bin in the dataset. Furthermore, there was actually a constructor that took a `RooAbsArg x`, but it; was simply ignored. To fix all these problems, the existing constructors were replaced by a new one; that takes the observable explicitly. Since the old constructors resulted in wrong computation graphs that caused; trouble with the new CPU evaluation backend, they had to be removed without; deprecation. Please adapt your code if necessary. ### Renaming of some RooFit classes. The `RooPower` was renamed to `RooPowerSum`, and `RooExpPoly` was renamed to `RooLegacyExpPoly`. This was a necessary change, becau",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:13128,test,test,13128,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['test'],['test']
Testability,"op1``. If ``op2`` is (statically or dynamically) equal to or larger; than the number of bits in ``op1``, this instruction returns a :ref:`poison; value <poisonvalues>`. If the arguments are vectors, each vector element; of ``op1`` is shifted by the corresponding shift amount in ``op2``. If the ``exact`` keyword is present, the result value of the ``ashr`` is; a poison value if any of the bits shifted out are non-zero. Example:; """""""""""""""". .. code-block:: text. <result> = ashr i32 4, 1 ; yields i32:result = 2; <result> = ashr i32 4, 2 ; yields i32:result = 1; <result> = ashr i8 4, 3 ; yields i8:result = 0; <result> = ashr i8 -2, 1 ; yields i8:result = -1; <result> = ashr i32 1, 32 ; undefined; <result> = ashr <2 x i32> < i32 -2, i32 4>, < i32 1, i32 3> ; yields: result=<2 x i32> < i32 -1, i32 0>. .. _i_and:. '``and``' Instruction; ^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = and <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``and``' instruction returns the bitwise logical and of its two; operands. Arguments:; """""""""""""""""""". The two arguments to the '``and``' instruction must be; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer values. Both; arguments must have identical types. Semantics:; """""""""""""""""""". The truth table used for the '``and``' instruction is:. +-----+-----+-----+; | In0 | In1 | Out |; +-----+-----+-----+; | 0 | 0 | 0 |; +-----+-----+-----+; | 0 | 1 | 0 |; +-----+-----+-----+; | 1 | 0 | 0 |; +-----+-----+-----+; | 1 | 1 | 1 |; +-----+-----+-----+. Example:; """""""""""""""". .. code-block:: text. <result> = and i32 4, %var ; yields i32:result = 4 & %var; <result> = and i32 15, 40 ; yields i32:result = 8; <result> = and i32 4, 8 ; yields i32:result = 0. .. _i_or:. '``or``' Instruction; ^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = or <ty> <op1>, <op2> ; yields ty:result; <result> = or disjoint <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``or``' instruction returns the bitwise logical inclusive",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:397272,log,logical,397272,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,opagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCudnn COMMAND testRecurrentBackpropagationCudnn). # Full Test GPU; add_executable(testFullRNNCudnn TestFullRNNCudnn.cxx); target_link_libraries(testFullRNNCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Full-Cudnn COMMAND testFullRNNCudnn). endif(). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). # DNN - Forward CPU; ROOT_EXECUTABLE(testRecurrentForwardPassCpu TestRecurrentForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward-Cpu COMMAND testRecurrentF,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1723,test,testRecurrentForwardPassCudnn,1723,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,1,['test'],['testRecurrentForwardPassCudnn']
Testability,"opagation by checking that; the correct labels are propagated. .. code-block:: c++. #include <sanitizer/dfsan_interface.h>; #include <assert.h>. int main(void) {; int i = 100;; int j = 200;; int k = 300;; dfsan_label i_label = 1;; dfsan_label j_label = 2;; dfsan_label k_label = 4;; dfsan_set_label(i_label, &i, sizeof(i));; dfsan_set_label(j_label, &j, sizeof(j));; dfsan_set_label(k_label, &k, sizeof(k));. dfsan_label ij_label = dfsan_get_label(i + j);. assert(ij_label & i_label); // ij_label has i_label; assert(ij_label & j_label); // ij_label has j_label; assert(!(ij_label & k_label)); // ij_label doesn't have k_label; assert(ij_label == 3); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ij_label, i_label));; assert(dfsan_has_label(ij_label, j_label));; assert(!dfsan_has_label(ij_label, k_label));. dfsan_label ijk_label = dfsan_get_label(i + j + k);. assert(ijk_label & i_label); // ijk_label has i_label; assert(ijk_label & j_label); // ijk_label has j_label; assert(ijk_label & k_label); // ijk_label has k_label; assert(ijk_label == 7); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ijk_label, i_label));; assert(dfsan_has_label(ijk_label, j_label));; assert(dfsan_has_label(ijk_label, k_label));. return 0;; }. Origin Tracking; ===============. DataFlowSanitizer can track origins of labeled values. This feature is enabled by; ``-mllvm -dfsan-track-origins=1``. For example,. .. code-block:: console. % cat test.cc; #include <sanitizer/dfsan_interface.h>; #include <stdio.h>. int main(int argc, char** argv) {; int i = 0;; dfsan_set_label(i_label, &i, sizeof(i));; int j = i + 1;; dfsan_print_origin_trace(&j, ""A flow from i to j"");; return 0;; }. % clang++ -fsanitize=dataflow -mllvm -dfsan-track-origins=1 -fno-omit-frame-pointer -g -O2 test.cc; % ./a.out; Taint value 0x1 (at 0x7ffd42bf415c) origin tracking (A flow from i to j); Origin value: 0x13900001, Taint value was stored to memory at; #0 0x55676db85a62 in main test",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst:11836,assert,assert,11836,interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,4,['assert'],['assert']
Testability,"ope, which will let the; user round out the set of operators that are supported. The point of going into user-defined operators in a tutorial like this; is to show the power and flexibility of using a hand-written parser.; Thus far, the parser we have been implementing uses recursive descent; for most parts of the grammar and operator precedence parsing for the; expressions. See `Chapter 2 <LangImpl02.html>`_ for details. By; using operator precedence parsing, it is very easy to allow; the programmer to introduce new operators into the grammar: the grammar; is dynamically extensible as the JIT runs. The two specific features we'll add are programmable unary operators; (right now, Kaleidoscope has no unary operators at all) as well as; binary operators. An example of this is:. ::. # Logical unary not.; def unary!(v); if v then; 0; else; 1;. # Define > with the same precedence as <.; def binary> 10 (LHS RHS); RHS < LHS;. # Binary ""logical or"", (note that it does not ""short circuit""); def binary| 5 (LHS RHS); if LHS then; 1; else if RHS then; 1; else; 0;. # Define = with slightly lower precedence than relationals.; def binary= 9 (LHS RHS); !(LHS < RHS | LHS > RHS);. Many languages aspire to being able to implement their standard runtime; library in the language itself. In Kaleidoscope, we can implement; significant parts of the language in the library!. We will break down implementation of these features into two parts:; implementing support for user-defined binary operators and adding unary; operators. User-defined Binary Operators; =============================. Adding support for user-defined binary operators is pretty simple with; our current framework. We'll first add support for the unary/binary; keywords:. .. code-block:: c++. enum Token {; ...; // operators; tok_binary = -11,; tok_unary = -12; };; ...; static int gettok() {; ...; if (IdentifierStr == ""for""); return tok_for;; if (IdentifierStr == ""in""); return tok_in;; if (IdentifierStr == ""binary""); return tok_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:2678,log,logical,2678,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['log'],['logical']
Testability,"optimized mode, which is; (surprisingly) the fastest option. If you want to run under a debugger, you should use the default Debug; (which is totally unoptimized, and will lead to >10x slower test; runs) or RelWithDebInfo which is a halfway point.; **CMAKE_BUILD_TYPE** affects code generation only, assertions are; on by default regardless! **LLVM_ENABLE_ASSERTIONS=Off** disables; them. - **LLVM_ENABLE_PROJECTS=clang**: this lists the LLVM subprojects; you are interested in building, in addition to LLVM itself. Multiple; projects can be listed, separated by semicolons, such as ""clang;; lldb"".In this example, we'll be making a change to Clang, so we; should build it. Finally, create a symlink (or a copy) of; llvm-project/build/compile-commands.json into llvm-project/:. .. code:: console. $ ln -s build/compile_commands.json ../. (This isn't strictly necessary for building and testing, but allows; tools like clang-tidy, clang-query, and clangd to work in your source; tree). Build and test; --------------. Finally, we can build the code! It's important to do this first, to; ensure we're in a good state before making changes. But what to build?; In ninja, you specify a **target**. If we just want to build the clang; binary, our target name is ""clang"" and we run:. .. code:: console. $ ninja clang. The first time we build will be very slow - Clang + LLVM is a lot of; code. But incremental builds are fast: ninja will only rebuild the parts; that have changed. When it finally finishes you should have a working; clang binary. Try running:. .. code:: console. $ bin/clang --version. There's also a target for building and running all the clang tests:. .. code:: console. $ ninja check-clang. This is a common pattern in LLVM: check-llvm is all the checks for core,; other projects have targets like check-lldb. Making changes; ==============. Edit; ----. We need to find the file containing the error message. .. code:: console. $ git grep ""all paths through this function"" ..; ../clang",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:4464,test,test,4464,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['test']
Testability,"option for histogram to draw only axes for hbar; 6. Implement ""axisg"" and ""haxisg"" to draw axes with grids; 7. Support TH1 marker, text and line drawing superimposed with ""haxis""; 8. Support `TBox`, `TLatex`, `TLine`, `TMarker` drawing on ""frame"", support drawing on swapped axes; 9. `TProfile` and `TProfile2D` projections https://github.com/root-project/root/issues/15851; 10. Draw total histogram from TEfficiency when draw option starts with 'b'; 11. Let redraw TEfficiency, THStack and TMultiGraph with different draw options via hist context menu; 12. Support 'pads' draw options for TMultiGraph, support context menu for it; 13. Let drop object on sub-pads; 14. Properly loads ES6 modules for web canvas; 15. Improve performance of TH3/RH3 drawing by using THREE.InstancedMesh; 16. Implement batch mode with '&batch' URL parameter to create SVG/PNG images with default GUI; 17. Adjust node.js implementation to produce identical output with normal browser; 18. Create necessary infrastructure for testing with 'puppeteer'; 19. Support inject of ES6 modules via '&inject=path.mjs'; 20. Using importmap for 'jsroot' in all major HTML files and in demos; 21. Implement `settings.CutAxisLabels` flag to remove labels which may exceed graphical range; 22. Let disable usage of TAxis custom labels via context menu; 23. Let configure default draw options via context menu, they can be preserved in the local storage; 24. Let save canvas as JSON file from context menu, object as JSON from inspector; 25. Upgrade three.js r162 -> r168, use r162 only in node.js because of ""gl"" module; 26. Create unified svg2pdf/jspdf ES6 modules, integrate in jsroot builds; 27. Let create multipage PDF document - in TWebCanvas batch mode; 28. Let add external links via `#url[link]{label}` syntax - including jsPDF support; 29. Support TAttMarker style with line width bigger than 1; 30. Internals - upgrade to eslint 9; 31. Internals - do not select pad (aka gPad) for objects drawing, always use assigned pad pai",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:1295,test,testing,1295,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['test'],['testing']
Testability,"option to see all the options and chose it according to; your needs. findRegressions-nightly.py; --------------------------. TODO. .. _test-suite:. Test Suite; ==========. .. contents::; :local:. Follow the `LNT Quick Start Guide; <https://llvm.org/docs/lnt/quickstart.html>`__ link on how to set-up the; test-suite. The binary location you'll have to use for testing is inside the; ``rcN/Phase3/Release+Asserts/llvmCore-REL-RC.install``.; Link that directory to an easier location and run the test-suite. An example on the run command line, assuming you created a link from the correct; install directory to ``~/devel/llvm/install``::. ./sandbox/bin/python sandbox/bin/lnt runtest \; nt \; -j4 \; --sandbox sandbox \; --test-suite ~/devel/llvm/test/test-suite \; --cc ~/devel/llvm/install/bin/clang \; --cxx ~/devel/llvm/install/bin/clang++. It should have no new regressions, compared to the previous release or release; candidate. You don't need to fix all the bugs in the test-suite, since they're; not necessarily meant to pass on all architectures all the time. This is; due to the nature of the result checking, which relies on direct comparison,; and most of the time, the failures are related to bad output checking, rather; than bad code generation. If the errors are in LLVM itself, please report every single regression found; as blocker, and all the other bugs as important, but not necessarily blocking; the release to proceed. They can be set as ""known failures"" and to be; fix on a future date. .. _pre-release-process:. Pre-Release Process; ===================. .. contents::; :local:. When the release process is announced on the mailing list, you should prepare; for the testing, by applying the same testing you'll do on the release; candidates, on the previous release. You should:. * Download the previous release sources from; https://llvm.org/releases/download.html. * Run the test-release.sh script on ``final`` mode (change ``-rc 1`` to; ``-final``). * Once all three stages",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:4210,test,test-suite,4210,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test-suite']
Testability,"option(LLVM_INCLUDE_DXIL_TESTS ""Include DXIL tests"" Off); mark_as_advanced(LLVM_INCLUDE_DXIL_TESTS). if (NOT LLVM_INCLUDE_DXIL_TESTS); return(); endif (). if (NOT ""DirectX"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building dxil-dis tests is unsupported without the DirectX target""); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). if (DXIL_DIS); add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${DXIL_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""); return(); endif (). include(ExternalProject). set(SOURCE_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-src); set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/DXC-bins); set(GIT_SETTINGS GIT_REPOSITORY https://github.com/microsoft/DirectXShaderCompiler.git). if (DXC_SOURCE_DIR); set(SOURCE_DIR ${DXC_SOURCE_DIR}); unset(GIT_SETTINGS); endif (). ExternalProject_Add(DXC; ${GIT_SETTINGS}; SOURCE_DIR ${SOURCE_DIR}; BINARY_DIR ${BINARY_DIR}; CMAKE_ARGS -C ${SOURCE_DIR}/cmake/caches/PredefinedParams.cmake -DLLVM_INCLUDE_TESTS=On; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target llvm-dis; BUILD_BYPRODUCTS ${BINARY_DIR}/bin/llvm-dis; INSTALL_COMMAND """"; ). add_custom_target(dxil-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/bin/llvm-dis${CMAKE_EXECUTABLE_SUFFIX}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/dxil-dis${CMAKE_EXECUTABLE_SUFFIX}""; DEPENDS DXC; ); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt:45,test,tests,45,interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/dxil-dis/CMakeLists.txt,2,['test'],['tests']
Testability,"option(LLVM_INCLUDE_SPIRV_TOOLS_TESTS ""Include tests that use SPIRV-Tools"" Off); mark_as_advanced(LLVM_INCLUDE_SPIRV_TOOLS_TESTS). if (NOT LLVM_INCLUDE_SPIRV_TOOLS_TESTS); return(); endif (). if (NOT ""SPIRV"" IN_LIST LLVM_TARGETS_TO_BUILD); message(FATAL_ERROR ""Building SPIRV-Tools tests is unsupported without the SPIR-V target""); endif (). # SPIRV_DIS and SPIRV_VAL variables can be used to provide paths to existing; # spirv-dis and spirv-val binaries, respectively. Otherwise, build them from; # SPIRV-Tools source.; if (NOT SPIRV_DIS OR NOT SPIRV_VAL); include(ExternalProject). set(BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/SPIRVTools-bin). ExternalProject_Add(SPIRVTools; GIT_REPOSITORY https://github.com/KhronosGroup/SPIRV-Tools.git; GIT_TAG main; BINARY_DIR ${BINARY_DIR}; BUILD_COMMAND ${CMAKE_COMMAND} --build ${BINARY_DIR} --target spirv-dis spirv-val; BUILD_BYPRODUCTS ${BINARY_DIR}/tools/spirv-dis ${BINARY_DIR}/tools/spirv-val; DOWNLOAD_COMMAND git clone https://github.com/KhronosGroup/SPIRV-Tools.git SPIRVTools &&; cd SPIRVTools &&; ${Python3_EXECUTABLE} utils/git-sync-deps; UPDATE_COMMAND git pull origin main &&; ${Python3_EXECUTABLE} utils/git-sync-deps; # Don't auto-update on every build.; UPDATE_DISCONNECTED 1; # Allow manual updating with an explicit SPIRVTools-update target.; STEP_TARGETS update; # Install handled below.; INSTALL_COMMAND """"; ); endif (). if (CMAKE_HOST_UNIX); set(LLVM_LINK_OR_COPY create_symlink); else (); set(LLVM_LINK_OR_COPY copy); endif (). # Link the provided or just built spirv-dis and spirv-val binaries.; if (SPIRV_DIS); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${SPIRV_DIS}"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""); else (); add_custom_target(spirv-dis; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY} ""${BINARY_DIR}/tools/spirv-dis"" ""${LLVM_RUNTIME_OUTPUT_INTDIR}/spirv-dis""; DEPENDS SPIRVTools; ); endif (). if (SPIRV_VAL); add_custom_target(spirv-val; COMMAND ${CMAKE_COMMAND} -E ${LLVM_LINK_OR_COPY",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt:47,test,tests,47,interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/spirv-tools/CMakeLists.txt,2,['test'],['tests']
Testability,"option:`--select-lines`,; :option:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`). :program:`llvm-debuginfo-analyzer` can also compare a set of logical; views (:option:`--compare`), to find differences and identify possible; debug information syntax issues (:option:`--warning`) in any object file. OPTIONS; -------; :program:`llvm-debuginfo-analyzer` options are separated into several; categories, each tailored to a different purpose:. * :ref:`general_` - Standard LLVM options to display help, version, etc.; * :ref:`attributes_` - Describe how to include different details when; printing an element.; * :ref:`print_` - Specify which elements will be included when printing; the view.; * :ref:`output_` - Describe the supported formats when printing the view.; * :ref:`report_` - Describe the format layouts for view printing.; * :ref:`select_` - Allows to use specific criteria or conditions to; select which elements to print.; * :ref:`compare_` - Compare logical views and print missing and/or; added elements.; * :ref:`warning_` - Print the warnings detected during the creation; of the view.; * :ref:`internal_` - Internal analysis of the logical view. .. _general_:. GENERAL; ~~~~~~~; This section describes the standard help options, used to display the; usage, version, response files, etc. .. option:: -h, --help. Show help and usage for this command. (--help-hidden for more). .. option:: --help-list. Show help and usage for this command without grouping the options; into categories (--help-list-hidden for more). .. option:: --help-hidden. Display all available options. .. option:: --print-all-options. Print all option values after command line parsing. .. option:: --print-options. Print non-default options after command line parsing. .. option:: --version. Display the version of the tool. .. option:: @<FILE>. Read command-line options from `<FILE>`. If no input file is specified, :program:`llvm-debuginfo-analyzer`; defaults to read `a.out` and retur",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:3082,log,logical,3082,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"or ""false"". These; conditions may comprise larger boolean expressions linked by boolean logical; operators. For example, ""x = (y == 2) || (z < 10)"" is a boolean expression; that is comprised of two individual conditions, each of which evaluates to; either true or false, producing four total branch outcomes. * Modified Condition/Decision Coverage (MC/DC) is the percentage of individual; branch conditions that have been shown to independently affect the decision; outcome of the boolean expression they comprise. This is accomplished using; the analysis of executed control flow through the expression (i.e. test; vectors) to show that as a condition's outcome is varied between ""true"" and; false"", the decision's outcome also varies between ""true"" and false"", while; the outcome of all other conditions is held fixed (or they are masked out as; unevaluatable, as happens in languages whose logical operators have; short-circuit semantics). MC/DC builds on top of branch coverage and; requires that all code blocks and all execution paths have been tested. This; statistic is hidden by default in reports, but it can be enabled via the; ``-show-mcdc-summary`` option as long as code was also compiled using the; clang option ``-fcoverage-mcdc``. * Boolean expressions that are only comprised of one condition (and therefore; have no logical operators) are not included in MC/DC analysis and are; trivially deducible using branch coverage. Of these six statistics, function coverage is usually the least granular while; branch coverage (with MC/DC) is the most granular. 100% branch coverage for a; function implies 100% region coverage for a function. The project-wide totals; for each statistic are listed in the summary. Format compatibility guarantees; ===============================. * There are no backwards or forwards compatibility guarantees for the raw; profile format. Raw profiles may be dependent on the specific compiler; revision used to generate them. It's inadvisable to store raw ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst:12980,test,tested,12980,interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,1,['test'],['tested']
Testability,"or an X86; ELF target with Clang (-O0 -g):. .. code-block:: c++. 1 using INTPTR = const int *;; 2 int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {; 3 if (ParamBool) {; 4 typedef int INTEGER;; 5 const INTEGER CONSTANT = 7;; 6 return CONSTANT;; 7 }; 8 return ParamUnsigned;; 9 }. PRINTING MODE; ^^^^^^^^^^^^^; In this mode :program:`llvm-debuginfo-analyzer` prints the *logical view*; or portions of it, based on criteria patterns (including regular; expressions) to select the kind of *logical elements* to be included in; the output. BASIC DETAILS; """"""""""""""""""""""""""; The following command prints basic details for all the logical elements; sorted by the debug information internal offset; it includes its lexical; level and debug info format. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=scopes,symbols,types,lines,instructions; test-dwarf-clang.o. or. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=elements; test-dwarf-clang.o. Each row represents an element that is present within the debug; information. The first column represents the scope level, followed by; the associated line number (if any), and finally the description of; the element. .. code-block:: none. Logical View:; [000] {File} 'test-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'test.cpp'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; [004] 5 {Line}; [004] {Code} 'movl	$0x7, -0x1c(%rbp)'; [004] 6 {Line}; [004] {Code} 'movl	$0x7, -0x4(%rbp)'; [004] {Code} 'jmp	0x6'; [004] 8 {Line}; [004] {Code} 'movl	-0x14(%rbp), %eax'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Line}; [003] {Code} 'pushq	%rbp'; [003] {Code} 'movq	%rsp, %rbp'; [003] {Code} 'movb	%dl, %al'; [003] {Code",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:25052,test,test-dwarf-clang,25052,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-clang']
Testability,"or assigning uninitialized values. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. core.uninitialized.Branch; (C); Check for uninitialized values used as branch conditions. void test() {; int x;; if (x) // warn; return;; }. core.uninitialized.CapturedBlockVariable; (C); Check for blocks that capture uninitialized values. void test() {; int x;; ^{ int y = x; }(); // warn; }. core.uninitialized.UndefReturn; (C); Check for uninitialized values being returned to the caller. int test() {; int x;; return x; // warn; }. C++ Checkers. Name, DescriptionExample. cplusplus.NewDelete; (C++); Check for double-free, use-after-free and offset problems involving C++ ; delete. void f(int *p);. void testUseMiddleArgAfterDelete(int *p) {; delete p;; f(p); // warn: use after free; }. class SomeClass {; public:; void f();; };. void test() {; SomeClass *c = new SomeClass;; delete c;; c->f(); // warn: use after free; }. void test() {; int *p = (int *)__builtin_alloca(sizeof(int));; delete p; // warn: deleting memory allocated by alloca; }. void test() {; int *p = new int;; delete p;; delete p; // warn: attempt to free released; }. void test() {; int i;; delete &i; // warn: delete address of local; }. void test() {; int *p = new int[1];; delete[] (++p);; // warn: argument to 'delete[]' is offset by 4 bytes; // from the start of memory allocated by 'new[]'; }. cplusplus.NewDeleteLeaks; (C++); Check for memory leaks. Traces memory managed by new/; delete. void test() {; int *p = new int;; } // warn. Dead Code Checkers. Name, DescriptionExample. deadcode.DeadStores; (C); Check for values stored to variables that are never read afterwards. void test() {; int x;; x = 1; // warn; }. Nullability Checkers. Name, DescriptionExample. nullability.NullPassedToNonnull; (ObjC); Warns when a null pointer is passed to a pointer which has a; _Nonnull type. if (name != nil); return;; // Warning: nil passed to a callee that requires a non-null 1st parameter; NSString *greeting = ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:5437,test,test,5437,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"or example an x86_64 machine. To find; out more about cross-compiling, please check :doc:`HowToCrossCompileLLVM`. Notes On Building LLVM/Clang on ARM; =====================================; Here are some notes on building/testing LLVM/Clang on ARM. Note that; ARM encompasses a wide variety of CPUs; this advice is primarily based; on the ARMv6 and ARMv7 architectures and may be inapplicable to older chips. #. The most popular Linaro/Ubuntu OS's for ARM boards, e.g., the; Pandaboard, have become hard-float platforms. There are a number of; choices when using CMake. Autoconf usage is deprecated as of 3.8. Building LLVM/Clang in ``Release`` mode is preferred since it consumes; a lot less memory. Otherwise, the building process will very likely; fail due to insufficient memory. It's also a lot quicker to only build; the relevant back-ends (ARM and AArch64), since it's very unlikely that; you'll use an ARM board to cross-compile to other arches. If you're; running Compiler-RT tests, also include the x86 back-end, or some tests; will fail. .. code-block:: bash. cmake $LLVM_SRC_DIR -DCMAKE_BUILD_TYPE=Release \; -DLLVM_TARGETS_TO_BUILD=""ARM;X86;AArch64"". Other options you can use are:. .. code-block:: bash. Use Ninja instead of Make: ""-G Ninja""; Build with assertions on: ""-DLLVM_ENABLE_ASSERTIONS=True""; Local (non-sudo) install path: ""-DCMAKE_INSTALL_PREFIX=$HOME/llvm/install""; CPU flags: ""DCMAKE_C_FLAGS=-mcpu=cortex-a15"" (same for CXX_FLAGS). After that, just typing ``make -jN`` or ``ninja`` will build everything.; ``make -jN check-all`` or ``ninja check-all`` will run all compiler tests. For; running the test suite, please refer to :doc:`TestingGuide`. #. If you are building LLVM/Clang on an ARM board with 1G of memory or less,; please use ``gold`` rather then GNU ``ld``. In any case it is probably a good; idea to set up a swap partition, too. .. code-block:: bash. $ sudo ln -sf /usr/bin/ld /usr/bin/ld.gold. #. ARM development boards can be unstable and you may experience t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst:1368,test,tests,1368,interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,2,['test'],['tests']
Testability,"or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\util",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:6045,test,tests,6045,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['tests']
Testability,"or other; target-specific information,; adding documentation for currently; ; undocumented attributes,; documenting ; diagnostic group flags (adding code examples of what is diagnosed, or; other relevant information), or; documenting ; command line options, or; help with completing other missing documentation. These projects are independent of each other.; Complete the investigation into Clang's C conformance: Clang's; C status page contain a number of entries marked as; Unknown. Completing the investigation involves adding; test; coverage for the various standards papers and updating the documentation; accordingly. Improve Clang's C and C++ standard conformance test coverage:; Clang's test suite is structured such that most tests are written to provide; coverage for what part of the compiler the feature's implementation exists in;; we have parsing tests in clang/test/Parser, and semantic analysis; tests in clang/test/Sema*, etc. We also have tests written to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for; C; and; C++; defect reports and updating the documentation accordingly.; Bug triage: Clang's ; issue trackercurrently has over 20,000 open issues, many of which are not; appropriately tagged, are no longer reproducib",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:1722,test,tests,1722,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,3,['test'],"['test', 'tests']"
Testability,"or register allocator enhancement though. 2) Can we recognize the relative position of constantpool entries? i.e. Treat. 	ldr r0, LCPI17_3; 	ldr r1, LCPI17_4; 	ldr r2, LCPI17_5. as; 	ldr r0, LCPI17; 	ldr r1, LCPI17+4; 	ldr r2, LCPI17+8. Then the ldr's can be combined into a single ldm. See Olden/power. Note for ARM v4 gcc uses ldmia to load a pair of 32-bit values to represent a; double 64-bit FP constant:. 	adr	r0, L6; 	ldmia	r0, {r0-r1}. 	.align 2; L6:; 	.long	-858993459; 	.long	1074318540. 3) struct copies appear to be done field by field; instead of by words, at least sometimes:. struct foo { int x; short s; char c1; char c2; };; void cpy(struct foo*a, struct foo*b) { *a = *b; }. llvm code (-O2); ldrb r3, [r1, #+6]; ldr r2, [r1]; ldrb r12, [r1, #+7]; ldrh r1, [r1, #+4]; str r2, [r0]; strh r1, [r0, #+4]; strb r3, [r0, #+6]; strb r12, [r0, #+7]; gcc code (-O2); ldmia r1, {r1-r2}; stmia r0, {r1-r2}. In this benchmark poor handling of aggregate copies has shown up as; having a large effect on size, and possibly speed as well (we don't have; a good way to measure on ARM). //===---------------------------------------------------------------------===//. * Consider this silly example:. double bar(double x) {; double r = foo(3.1);; return x+r;; }. _bar:; stmfd sp!, {r4, r5, r7, lr}; add r7, sp, #8; mov r4, r0; mov r5, r1; fldd d0, LCPI1_0; fmrrd r0, r1, d0; bl _foo; fmdrr d0, r4, r5; fmsr s2, r0; fsitod d1, s2; faddd d0, d1, d0; fmrrd r0, r1, d0; ldmfd sp!, {r4, r5, r7, pc}. Ignore the prologue and epilogue stuff for a second. Note; 	mov r4, r0; 	mov r5, r1; the copys to callee-save registers and the fact they are only being used by the; fmdrr instruction. It would have been better had the fmdrr been scheduled; before the call and place the result in a callee-save DPR register. The two; mov ops would not have been necessary. //===---------------------------------------------------------------------===//. Calling convention related stuff:. * gcc's parameter passing implem",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt:4101,benchmark,benchmark,4101,interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,1,['benchmark'],['benchmark']
Testability,"or the class that will represent your instruction. #. ``llvm/include/llvm/IR/InstVisitor.h``:. add a prototype for a visitor to your new instruction type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add a new token to parse your instruction from assembly text file. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add the grammar on how your instruction can be read and what it will; construct as a result. #. ``llvm/lib/Bitcode/Reader/BitcodeReader.cpp``:. add a case for your instruction and how it will be parsed from bitcode. #. ``llvm/lib/Bitcode/Writer/BitcodeWriter.cpp``:. add a case for your instruction and how it will be parsed from bitcode. #. ``llvm/lib/IR/Instruction.cpp``:. add a case for how your instruction will be printed out to assembly. #. ``llvm/lib/IR/Instructions.cpp``:. implement the class you defined in ``llvm/include/llvm/Instructions.h``. #. Test your instruction. #. ``llvm/lib/Target/*``:. add support for your instruction to code generators, or add a lowering pass. #. ``llvm/test/*``:. add your test cases to the test suite. Also, you need to implement (or modify) any analyses or passes that you want to; understand this new instruction. Adding a new type; =================. .. warning::. Adding new types changes the bitcode format, and will break compatibility with; currently-existing LLVM installations. Only add new types if it is absolutely; necessary. Adding a fundamental type; -------------------------. #. ``llvm/include/llvm/IR/Type.h``:. add enum for the new type; add static ``Type*`` for this type. #. ``llvm/lib/IR/Type.cpp`` and ``llvm/lib/CodeGen/ValueTypes.cpp``:. add mapping from ``TypeID`` => ``Type*``; initialize the static ``Type*``. #. ``llvm/include/llvm-c/Core.h`` and ``llvm/lib/IR/Core.cpp``:. add enum ``LLVMTypeKind`` and modify; ``LLVMTypeKind LLVMGetTypeKind(LLVMTypeRef Ty)`` for the new type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add ability to parse in the type from text assembly. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add a token ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:9499,test,test,9499,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,1,['test'],['test']
Testability,or/LorentzVector.h; Math/GenVector/Plane3D.h; Math/GenVector/Polar2Dfwd.h; Math/GenVector/Polar2D.h; Math/GenVector/Polar3Dfwd.h; Math/GenVector/Polar3D.h; Math/GenVector/PositionVector2Dfwd.h; Math/GenVector/PositionVector2D.h; Math/GenVector/PositionVector3Dfwd.h; Math/GenVector/PositionVector3D.h; Math/GenVector/PtEtaPhiE4Dfwd.h; Math/GenVector/PtEtaPhiE4D.h; Math/GenVector/PtEtaPhiM4Dfwd.h; Math/GenVector/PtEtaPhiM4D.h; Math/GenVector/PxPyPzE4Dfwd.h; Math/GenVector/PxPyPzE4D.h; Math/GenVector/PxPyPzM4Dfwd.h; Math/GenVector/PxPyPzM4D.h; Math/GenVector/Quaternionfwd.h; Math/GenVector/Quaternion.h; Math/GenVector/Rotation3Dfwd.h; Math/GenVector/Rotation3D.h; Math/GenVector/RotationXfwd.h; Math/GenVector/RotationX.h; Math/GenVector/RotationYfwd.h; Math/GenVector/RotationY.h; Math/GenVector/RotationZfwd.h; Math/GenVector/RotationZ.h; Math/GenVector/RotationZYXfwd.h; Math/GenVector/RotationZYX.h; Math/GenVector/Transform3D.h; Math/GenVector/Translation3D.h; Math/GenVector/VectorUtil.h; Math/LorentzRotation.h; Math/LorentzVector.h; Math/Plane3D.h; Math/Point2Dfwd.h; Math/Point2D.h; Math/Point3Dfwd.h; Math/Point3D.h; Math/Polar2D.h; Math/Polar3D.h; Math/PositionVector2D.h; Math/PositionVector3D.h; Math/PtEtaPhiE4D.h; Math/PtEtaPhiM4D.h; Math/PxPyPzE4D.h; Math/PxPyPzM4D.h; Math/Quaternion.h; Math/Rotation3D.h; Math/RotationX.h; Math/RotationY.h; Math/RotationZ.h; Math/RotationZYX.h; Math/Transform3D.h; Math/Translation3D.h; Math/Vector2Dfwd.h; Math/Vector2D.h; Math/Vector3Dfwd.h; Math/Vector3D.h; Math/Vector4Dfwd.h; Math/Vector4D.h; Math/VectorUtil.h; MODULE; GenVector; LINKDEF; Math/LinkDef_GenVector.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_GENERATE_DICTIONARY(G__GenVector32; Math/Point2D.h; Math/Point3D.h; Math/Vector2D.h; Math/Vector3D.h; Math/Vector4D.h; MODULE; GenVector; MULTIDICT; LINKDEF; Math/LinkDef_GenVector32.h; OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; Core; MathCore; ). ROOT_ADD_TEST_SUBDIRECTORY(test). ROOT_INSTALL_HEADERS(); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt:4212,test,test,4212,math/genvector/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/genvector/CMakeLists.txt,1,['test'],['test']
Testability,"or: Instruction Selector, Instruction; Scheduling, and Register Allocation. ``llvm/lib/MC/``. The libraries represent and process code at machine code level. Handles; assembly and object-file emission. ``llvm/lib/ExecutionEngine/``. Libraries for directly executing bitcode at runtime in interpreted and; JIT-compiled scenarios. ``llvm/lib/Support/``. Source code that corresponding to the header files in ``llvm/include/ADT/``; and ``llvm/include/Support/``. ``llvm/bindings``; ----------------------. Contains bindings for the LLVM compiler infrastructure to allow; programs written in languages other than C or C++ to take advantage of the LLVM; infrastructure.; LLVM project provides language bindings for OCaml and Python. ``llvm/projects``; -----------------. Projects not strictly part of LLVM but shipped with LLVM. This is also the; directory for creating your own LLVM-based projects which leverage the LLVM; build system. ``llvm/test``; -------------. Feature and regression tests and other sanity checks on LLVM infrastructure. These; are intended to run quickly and cover a lot of territory without being exhaustive. ``test-suite``; --------------. A comprehensive correctness, performance, and benchmarking test suite; for LLVM. This comes in a ``separate git repository; <https://github.com/llvm/llvm-test-suite>``, because it contains a; large amount of third-party code under a variety of licenses. For; details see the :doc:`Testing Guide <TestingGuide>` document. .. _tools:. ``llvm/tools``; --------------. Executables built out of the libraries; above, which form the main part of the user interface. You can always get help; for a tool by typing ``tool_name -help``. The following is a brief introduction; to the most important tools. More detailed information is in; the `Command Guide <CommandGuide/index.html>`_. ``bugpoint``. ``bugpoint`` is used to debug optimization passes or code generation backends; by narrowing down the given test case to the minimum number of passes ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:38010,test,tests,38010,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['tests']
Testability,orDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMAND testMethodDLCNN). endif (); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5751,test,testConvNetPredCpu,5751,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,12,['test'],"['testConvBackpropagationCpu', 'testConvNetPredCpu', 'testDLMinimizationCpu', 'testMethodDLCNN', 'testReshapeCpu', 'testTensorDataLoaderCpu']"
Testability,"or_OpenCL.html>`_; or in `the official release; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. To enable the C++ for OpenCL mode, pass one of following command line options when; compiling ``.clcpp`` file:. - C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc++1.0``,; ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc++1.0`` or; ``-std=CLC++1.0``. - C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``,; ``-std=clc++2021``, ``-std=CLC++2021``. Example of use:; .. code-block:: c++. template<class T> T add( T x, T y ); {; return x + y;; }. __kernel void test( __global float* a, __global float* b); {; auto index = get_global_id(0);; a[index] = add(b[index], b[index+1]);; }. .. code-block:: console. clang -cl-std=clc++1.0 test.clcpp; clang -cl-std=clc++ -c --target=spirv64 test.cl. By default, files with ``.clcpp`` extension are compiled with the C++ for; OpenCL 1.0 mode. .. code-block:: console. clang test.clcpp. For backward compatibility files with ``.cl`` extensions can also be compiled; in C++ for OpenCL mode but the desirable language mode must be activated with; a flag. .. code-block:: console. clang -cl-std=clc++ test.cl. Support of C++ for OpenCL 2021 is currently in experimental phase, refer to; :doc:`OpenCLSupport` for more details. C++ for OpenCL kernel sources can also be compiled online in drivers supporting; `cl_ext_cxx_for_opencl; <https://www.khronos.org/registry/OpenCL/extensions/ext/cl_ext_cxx_for_opencl.html>`_; extension. Constructing and destroying global objects; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Global objects with non-trivial constructors require the constructors to be run; before the first kernel using the global objects is executed. Similarly global; objects with non-trivial destructors require destructor invocation just after; the last kernel using the program objects is executed.; In OpenCL versions earlier than v2.2 there is no support for inv",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:153827,test,test,153827,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,or_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/memprof/memprof_descriptions.cpp; compiler-rt/lib/memprof/memprof_descriptions.h; compiler-rt/lib/memprof/memprof_flags.cpp; compiler-rt/lib/mem,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93726,test,tests,93726,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"oracle,; etc) `thread`: Using Threads `tmva`: Examples of the MultiVariate; Analysis classes `tree`: Creating Trees, Playing with Trees `unuran`:; Interface with the unuram random generator library `xml`:; Writing/Reading xml files. You can execute the scripts in `$ROOTSYS/tutorials`; (or sub-directories) by setting your current directory in the script; directory or from any user directory with write access. Several; tutorials create new files. If you have write access to the tutorials; directory, the new files will be created in the tutorials directory,; otherwise they will be created in the user directory. ### \$ROOTSYS/test. The test directory contains a set of examples example that represent; all areas of the framework. When a new release is cut, the examples in; this directory are compiled and run to test the new release's backward; compatibility. The list of source files is described in chapter ""The; Tutorials and Tests"". The `$ROOTSYS/test` directory is a gold mine of ROOT-wisdom nuggets,; and we encourage you to explore and exploit it. We recommend the new; users to read the chapter ""Getting Started"". The chapter ""The; Tutorials and Tests"" has instructions on how to build all the programs; and it goes over the examples `Event` and `stress`. ### \$ROOTSYS/include. The `include` directory contains all header files. It is especially; important because the header files contain the class definitions. ### \$ROOTSYS/\<library\>. The directories we explored above are available when downloading the; binaries. When downloading the source you also get a directory for; each library with the corresponding header and source files, located; in the `inc` and `src` subdirectories. To see what classes are in a; library, you can check the `<library>/inc` directory for the list of; class definitions. For example, the physics library `libPhysics.so`; contains these class definitions:. ``` {.cpp}; > ls -m $ROOTSYS/math/physics/inc/; LinkDef.h, TFeldmanCousins.h, TGenPhaseSpace.h,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:22955,test,test,22955,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['test']
Testability,orchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXE,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3300,test,testPyTorchMulticlass,3300,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,2,['test'],['testPyTorchMulticlass']
Testability,"ord server`_ or the IRC #llvm channel on `irc.oftc.net`_. If you want to contribute code, please familiarize yourself with the :doc:`DeveloperPolicy`. .. contents::; :local:. Ways to Contribute; ==================. Bug Reports; -----------; If you are working with LLVM and run into a bug, we definitely want to know; about it. Please let us know and follow the instructions in; :doc:`HowToSubmitABug` to create a bug report. Bug Fixes; ---------; If you are interested in contributing code to LLVM, bugs labeled with the; `good first issue`_ keyword in the `bug tracker`_ are a good way to get familiar with; the code base. If you are interested in fixing a bug please comment on it to; let people know you are working on it. Then try to reproduce and fix the bug with upstream LLVM. Start by building; LLVM from source as described in :doc:`GettingStarted` and; use the built binaries to reproduce the failure described in the bug. Use; a debug build (`-DCMAKE_BUILD_TYPE=Debug`) or a build with assertions; (`-DLLVM_ENABLE_ASSERTIONS=On`, enabled for Debug builds). Reporting a Security Issue; --------------------------. There is a separate process to submit security-related bugs, see :ref:`report-security-issue`. Bigger Pieces of Work; ---------------------; In case you are interested in taking on a bigger piece of work, a list of; interesting projects is maintained at the `LLVM's Open Projects page`_. In case; you are interested in working on any of these projects, please post on the; `Forum`_, so that we know the project is being worked on. .. _submit_patch:. How to Submit a Patch; =====================; Once you have a patch ready, it is time to submit it. The patch should:. * include a small unit test; * conform to the :doc:`CodingStandards`. You can use the `clang-format-diff.py`_ or `git-clang-format`_ tools to automatically format your patch properly.; * not contain any unrelated changes; * be an isolated change. Independent changes should be submitted as separate patches ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst:1332,assert,assertions,1332,interpreter/llvm-project/llvm/docs/Contributing.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Contributing.rst,1,['assert'],['assertions']
Testability,"ork we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_checks.py; llvm-mca. update_mir_test_checks.py; llc (MIR checks). update_test_checks.py; opt. Precommit workflow for tests; ----------------------------. If the test does not crash, assert, or infinite loop, commit the test with; baseline check-lines first. That is, the test will show a miscompile or; missing optimization. Add a ""TODO"" or ""FIXME"" comment to indicate that; something is expected to change in a test. A follow-up patch with code changes to the compiler will then show check-line; differences to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:12383,assert,assertions,12383,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['assert'],['assertions']
Testability,"orkflow only. Due to design and implementation decisions, LLVM relies on; global data which can end up being duplicated across shared libraries; resulting in bugs. As such this is not a safe way to distribute LLVM or; LLVM-based tools. The simplest example of building a distribution with reasonable performance is; captured in the DistributionExample CMake cache file located at; clang/cmake/caches/DistributionExample.cmake. The following command will perform; and install the distribution build:. .. code-block:: console. $ cmake -G Ninja -C <path to clang>/cmake/caches/DistributionExample.cmake <path to LLVM source>; $ ninja stage2-distribution; $ ninja stage2-install-distribution. Difference between ``install`` and ``install-distribution``; -----------------------------------------------------------. One subtle but important thing to note is the difference between the ``install``; and ``install-distribution`` targets. The ``install`` target is expected to; install every part of LLVM that your build is configured to generate except the; LLVM testing tools. Alternatively the ``install-distribution`` target, which is; recommended for building distributions, only installs specific parts of LLVM as; specified at configuration time by *LLVM_DISTRIBUTION_COMPONENTS*. Additionally by default the ``install`` target will install the LLVM testing; tools as the public tools. This can be changed well by setting; *LLVM_INSTALL_TOOLCHAIN_ONLY* to ``On``. The LLVM tools are intended for; development and testing of LLVM, and should only be included in distributions; that support LLVM development. When building with *LLVM_DISTRIBUTION_COMPONENTS* the build system also; generates a ``distribution`` target which builds all the components specified in; the list. This is a convenience build target to allow building just the; distributed pieces without needing to build all configured targets. .. _Multi-distribution configurations:. Multi-distribution configurations; -----------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BuildingADistribution.rst:3310,test,testing,3310,interpreter/llvm-project/llvm/docs/BuildingADistribution.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BuildingADistribution.rst,1,['test'],['testing']
Testability,"orkspace - Add private expensive object cache to workspace; RooBinningCategory - New real-to-category function that maps values of input RooRealVar to categories with labels that correspond to bins of input RooRealVar. See rf405_realtocatfuncs.C for details . RooStats; This is a new package introduced in this version for statistical tools built on top of RooFit. It is a joint effort between the LHC experiments and the ROOT team (see the RooStats Wiki page).; ; This version contains the interfaces for performing the statistical calculations and dealing with the obtained results and concrete classes implementing the statistical methods.; ; All the classes and functions in RooStats are provided in the namespace RooStats.; ; RooStats interfaces. ConfInterval: interface for describing a confidence interval. ; IntervalCalculator: interface for a statistical tool producing confidence intervals (class ConfInterval).; HypoTestResult: interface for representing results of a hypothesis test; HypoTestCalculator: interface for a statistical tool performing an hypothesis test. ; CombinedCalculator: interface for a statistical tool which can produce both hypothesis test results and confidence intervals. ; RooStats concrete classes. The concrete classes describing statistical tools implementing the above interfaces are:; ; ProfileLikelihoodCalculator: it is an implementation of a CombinedCalculator using the profile likelihood ratio as a test statistics. After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer).; LikelihoodInterval: concrete implementation of a ConfInterval interface. It implements connected N-dimensional intervals based on the contour of a likelihood ratio. The boundary of the interval is equivalent to a MINUIT/MINOS contour about the maximum likelihood estimator. . HybridCalculator: hypothesis test calculator using a Bayesian-frequentist hybrid me",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html:10065,test,test,10065,roofit/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html,2,['test'],['test']
Testability,"orm C++-specific checks; Dead Code Checkers check for unused code; Nullability Checkers ; Optin Checkers ; OS X Checkers perform Objective-C-specific checks and check the use of Apple's SDKs (OS X and iOS); Security Checkers check for insecure API usage and perform checks based on the CERT Secure Coding Standards; Unix Checkers check the use of Unix and POSIX APIs. Core Checkers. Name, DescriptionExample. core.CallAndMessage; (C, C++, ObjC); Check for logical errors for function calls and Objective-C message expressions; (e.g., uninitialized arguments, null function pointers). // C; struct S {; int x;; };. void f(struct S s);. void test() {; struct S s;; f(s); // warn: passed-by-value arg contain uninitialized data; }. // C; void test() {; void (*foo)(void);; foo(); // warn: function pointer is uninitialized; }. // C; void test() {; void (*foo)(void);; foo = 0;; foo(); // warn: function pointer is null; }. // C++; class C {; public:; void f();; };. void test() {; C *pc;; pc->f(); // warn: object pointer is uninitialized; }. // C++; class C {; public:; void f();; };. void test() {; C *pc = 0;; pc->f(); // warn: object pointer is null; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:1836,test,test,1836,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"orm, then its; use at such a ``U`` is also uniform. In other words, temporal divergence applies; only to a use of ``V`` that is outside the convergence region of ``D``. Rationales for Static rules about cycles; ========================================. (This section is informative.). .. note::. For convenience, we use the operator ``==`` to represent the relation; ``converged-with`` and the operator ``!=`` to represent its negation. Consider a loop with (incorrect!) convergence control as in the following; pseudocode:. .. code-block:: llvm. ; WARNING: Example of incorrect convergence control!. %anchor = call token @llvm.experimental.convergence.anchor(); for (;;) {; ...; call void @convergent.op() [ ""convergencectrl""(token %anchor) ]; ...; }. This code is forbidden by the first static rule about cycles. A first formal argument why we have to do this is that the dynamic rule for; deciding whether two threads execute converged dynamic instances of; ``@convergent.op`` leads to a logical contradiction in this code.; Assume two threads execute converged dynamic instances of the anchor; followed by two iterations of the loop. Thread 1 executes dynamic instances; I1 and I2 of ``@convergent.op``, thread 2 executes dynamic instances J1 and J2.; Using all the rules, we can deduce:. 1. ``I1 != I2`` and ``J1 != J2`` by the basic rules of dynamic instances. 2. ``I1 == J1`` by the first dynamic rule about controlled convergent; operations: both threads execute the same static instruction while using; a convergence token value produced by converged dynamic instances of an; instruction (the anchor). 3. ``I1 == J2`` by the same argument. Also, ``I2 == J1`` and ``I2 == J2``. The fact that one may be *intuitively* tempted to think of ``I1`` and ``J2``; as being executed in different loop iterations is completely irrelevant for; the *formal* argument. There is no mechanism in LLVM IR semantics for; forming associations between loop iterations in different threads, *except*; for the rule",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst:39754,log,logical,39754,interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,1,['log'],['logical']
Testability,"ormal import**, all dependent declarations are imported normally.; However, with minimal import, the dependent Decls are imported without definition, and we have to import their definition for each if we later need that. Putting this all together here is how the source of the tool looks like:. .. code-block:: cpp. #include ""clang/AST/ASTImporter.h""; #include ""clang/ASTMatchers/ASTMatchFinder.h""; #include ""clang/ASTMatchers/ASTMatchers.h""; #include ""clang/Tooling/Tooling.h"". using namespace clang;; using namespace tooling;; using namespace ast_matchers;. template <typename Node, typename Matcher>; Node *getFirstDecl(Matcher M, const std::unique_ptr<ASTUnit> &Unit) {; auto MB = M.bind(""bindStr""); // Bind the to-be-matched node to a string key.; auto MatchRes = match(MB, Unit->getASTContext());; // We should have at least one match.; assert(MatchRes.size() >= 1);; // Get the first matched and bound node.; Node *Result =; const_cast<Node *>(MatchRes[0].template getNodeAs<Node>(""bindStr""));; assert(Result);; return Result;; }. int main() {; std::unique_ptr<ASTUnit> ToUnit = buildASTFromCode(; """", ""to.cc"");; std::unique_ptr<ASTUnit> FromUnit = buildASTFromCode(; R""(; class MyClass {; int m1;; int m2;; };; )"",; ""from.cc"");; auto Matcher = cxxRecordDecl(hasName(""MyClass""));; auto *From = getFirstDecl<CXXRecordDecl>(Matcher, FromUnit);. ASTImporter Importer(ToUnit->getASTContext(), ToUnit->getFileManager(),; FromUnit->getASTContext(), FromUnit->getFileManager(),; /*MinimalImport=*/true);; llvm::Expected<Decl *> ImportedOrErr = Importer.Import(From);; if (!ImportedOrErr) {; llvm::Error Err = ImportedOrErr.takeError();; llvm::errs() << ""ERROR: "" << Err << ""\n"";; consumeError(std::move(Err));; return 1;; }; Decl *Imported = *ImportedOrErr;; Imported->getTranslationUnitDecl()->dump();. if (llvm::Error Err = Importer.ImportDefinition(From)) {; llvm::errs() << ""ERROR: "" << Err << ""\n"";; consumeError(std::move(Err));; return 1;; }; llvm::errs() << ""Imported definition.\n"";; Importe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst:9536,assert,assert,9536,interpreter/llvm-project/clang/docs/LibASTImporter.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTImporter.rst,1,['assert'],['assert']
Testability,ormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6269,test,testMethodDLAdagradOptimizationCpu,6269,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMethodDLAdagradOptimizationCpu']
Testability,"ormance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Kripke; * Quicksilver; * PENNANT; * Big Data Analytic Suite; * Deep Learning Suite; * Stream; * Stride; * ML/DL micro-benchmark; * Pynamic; * ACME; * VPIC; * Laghos; * Parallel Integer Sort; * Havoq. NWChem; ------; http://www.nwchem-sw.org/index.php/Benchmarks. TVM; ----; https://github.com/dmlc/tvm/tree/main/apps/benchmark. HydroBench; ----------; https://github.com/HydroBench/Hydro. ParRes; ------; https://github.com/ParRes/Kernels/tree/default/Cxx11. Applications/Libraries; ======================. GnuPG; -----; https://gnupg.org/. Blitz++; -------; https://sourceforge.net/projects/blitz/. FFmpeg; ------; https://ffmpeg.org/. FreePOOMA; ---------; http://www.nongnu.org/freepooma/. FTensors; --------; http://www.wlandry.net/Projects/FTensor. rawspeed; --------; https://github.com/darktable-org/rawspeed. Its test dataset is 756 MB in size, which is too large to be included; into the test-suite repository. C++ Performance Benchmarks; --------------------------; https://gitlab.com/chriscox/CppPerformanceBenchmarks. Generic Algorithms; ==================. Image processing; ----------------. Resampling; ``````````. * Bilinear; * Bicubic; * Lanczos. Dither; ``````. * Threshold; * Random; * Halftone; * Bayer; * Floyd-Steinberg; * Jarvis; * Stucki; * Burkes; * Sierra; * Atkinson; * Gradient-based. Feature detection; `````````````````. * Harris; * Histogram of Oriented Gradients. Color conversion; ````````````````. * RGB to grayscale; * HSL to RGB. Graph; -----. Search Algorithms; `````````````````. * Breadth-First-Search; * Depth-First-Search; * Dijkstra's algorithm; * A-Star. Spanning Tree; `````````````. * Kruskal's algorithm; * Prim's algorithm; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:5557,test,test,5557,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,2,['test'],"['test', 'test-suite']"
Testability,ormationalTest.cpp; flang/unittests/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyz,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129218,benchmark,benchmarks,129218,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"orrectly the; `ROOTSYS`, `LD_LIBRARY_PATH` or other paths depending on the platform; and the `MANPATH`. To run the program just type: `root`. ## Start and Quit a ROOT Session. ```; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0]; ```. To start ROOT you can type `root` at the system prompt. This starts up; Cling, the ROOT command line C/C++ interpreter, and it gives you the; ROOT prompt (`root[0]`). It is possible to launch ROOT with some command line options, as shown; below:. ```; % root -?; Usage: root [-l] [-b] [-n] [-q] [dir] [[file:]data.root]; [file1.C ... fileN.C]; Options:; -b : run in batch mode without graphics; -n : do not execute logon and logoff macros as specified in .rootrc; -q : exit after processing command line macro files; -l : do not show splash screen; -x : exit on exception; dir : if dir is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options; ```. - -b ROOT session runs in batch mode, without graphics display. This; mode is useful in case one does not want to set the DISPLAY or; cannot do it for some reason. - -n usually, launching a ROOT session will execute a logon script; and quitting will execute a logoff script. This option prevents; the execution of these two scripts. - it is also possible to execute a script without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a scr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:3048,log,logon,3048,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,2,['log'],"['logoff', 'logon']"
Testability,"orrespondence between the code source and the json file. Those files do not; have any doc in them. With a direct link to the GitHub source file the dependency between source; code and json is now more obvious.; - Document how to remove shadow of `TPave`, as it was not evident (only explanations were hidden here and there in the forum).; - Improve the `SetFillColorAlpha` documentation.; - Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; - Fix a typo in the documentation of `TGraph::SetHighlight` in `TGraph.cxx`.; - Change the marker style in the tutorial `df014_CSVDataSource`.; - Remove useless settings in the tutorial `scatter.C`.; - Fix the tutorial `h1analysisTreeReader.C`.; - Fix doxygen formatting in `TGNumberEntry.cxx`.; - Avoid the CDT documentation to appear in the reference guide.; - Remove last references to the old ROOT `drupal` website. ## Build, Configuration and Testing Infrastructure. Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system. ## Bugs and Issues fixed in this release. More than 200 items were addressed for this release. The full list is:. * [[#15621](https://github.com/root-project/root/issues/15621)] - Buffer overflow in TBranch::Init; * [[#15610](https://github.com/root-project/root/issues/15610)] - Memory leak in TTree __getattr__ pythonization; * [[#15590](https://github.com/root-project/root/issues/15590)] - Infinite recursion in TFile::Open; * [[#15460](https://github.com/root-project/root/issues/15460)] - TEnum::GetEnum(""B"")->GetUnderlyingType() does not following typedefs; * [[#15413](https://github.com/root-project/root/issues/15413)] - Fails to build with cuDNN version 9; * [[#15406](https://github.com/root-project/root/issues/15406)] - `TEnum::GetEnum` does not seem to see 'through' using statements.; * [[#15399](https://github.com/root-project/root/issues/15399)] - Memory leak with jitted nodes if the execution is never triggered; * [[#15396](https:/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:24685,test,tested,24685,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['test'],['tested']
Testability,"ors, phase; space `pyroot`: Python tutorials `pythia`: Example with `pythia8`; `quadp`: Quadratic Programming `smatrix`:; Matrices with a templated package `spectrum`: Peak finder, background,; deconvolutions `splot`: Example of the **`TSplot`** class; (signal/background estimator) `sql`: Interfaces to SQL (mysql, oracle,; etc) `thread`: Using Threads `tmva`: Examples of the MultiVariate; Analysis classes `tree`: Creating Trees, Playing with Trees `unuran`:; Interface with the unuram random generator library `xml`:; Writing/Reading xml files. You can execute the scripts in `$ROOTSYS/tutorials`; (or sub-directories) by setting your current directory in the script; directory or from any user directory with write access. Several; tutorials create new files. If you have write access to the tutorials; directory, the new files will be created in the tutorials directory,; otherwise they will be created in the user directory. ### \$ROOTSYS/test. The test directory contains a set of examples example that represent; all areas of the framework. When a new release is cut, the examples in; this directory are compiled and run to test the new release's backward; compatibility. The list of source files is described in chapter ""The; Tutorials and Tests"". The `$ROOTSYS/test` directory is a gold mine of ROOT-wisdom nuggets,; and we encourage you to explore and exploit it. We recommend the new; users to read the chapter ""Getting Started"". The chapter ""The; Tutorials and Tests"" has instructions on how to build all the programs; and it goes over the examples `Event` and `stress`. ### \$ROOTSYS/include. The `include` directory contains all header files. It is especially; important because the header files contain the class definitions. ### \$ROOTSYS/\<library\>. The directories we explored above are available when downloading the; binaries. When downloading the source you also get a directory for; each library with the corresponding header and source files, located; in the `inc` and `src`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:22639,test,test,22639,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['test']
Testability,"ort for authentication using client side X.509 certificates.; - Resumed download, URL rewrite, file blacklist, IP-based ACL.; - May run as Windows service.; - Download speed limit based on client subnet or URI pattern.; - Simple and clean embedding API.; - The source is in single file to make things easy.; - Embedding examples included.; - HTTP client capable of sending arbitrary HTTP/HTTPS requests.; - Websocket client functionality available (WS/WSS). ### Optionally included software. [![Lua](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg ""Lua Logo"")](http://lua.org). [![Sqlite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg ""Sqlite3 Logo"")](http://sqlite.org). [![LuaFileSystem](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg ""LuaFileSystem Logo"")](http://keplerproject.github.io/luafilesystem/). [![LuaSQLite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg ""LuaSQLite3 Logo"")](http://lua.sqlite.org/index.cgi/index). [![LuaXML](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg ""LuaXML Logo"")](https://github.com/n1tehawk/LuaXML). [![Duktape](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png ""Duktape Logo"")](http://duktape.org). ### Optional depencencies. [![zlib](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/zlib3d-b1.png ""zlib Logo"")](https://zlib.net). [![OpenSSL](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/OpenSSL_logo.png ""OpenSSL Logo"")](https://www.openssl.org/). [![Mbed TLS](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/mbedTLS_logo.png ""mbedTLS Logo"")](https://github.com/ARMmbed/mbedtls). Support; -------. This project is very easy to install and use.; Please read the [documentation](https://github.com/civetweb/civetweb/blob/master/docs/); and have a look at the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md:7283,log,logo,7283,net/http/civetweb/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md,1,['log'],['logo']
Testability,"ort; lifetime. This implementation also records all function entry and exit events; which may result in a lot of records in the resulting trace. Also by default the filename of the XRay trace is ``xray-log.XXXXXX`` where the; ``XXXXXX`` part is randomly generated. These options can be controlled through the ``XRAY_OPTIONS`` environment; variable, where we list down the options and their defaults below. +-------------------+-----------------+---------------+------------------------+; | Option | Type | Default | Description |; +===================+=================+===============+========================+; | patch_premain | ``bool`` | ``false`` | Whether to patch |; | | | | instrumentation points |; | | | | before main. |; +-------------------+-----------------+---------------+------------------------+; | xray_mode | ``const char*`` | ``""""`` | Default mode to |; | | | | install and initialize |; | | | | before ``main``. |; +-------------------+-----------------+---------------+------------------------+; | xray_logfile_base | ``const char*`` | ``xray-log.`` | Filename base for the |; | | | | XRay logfile. |; +-------------------+-----------------+---------------+------------------------+; | verbosity | ``int`` | ``0`` | Runtime verbosity |; | | | | level. |; +-------------------+-----------------+---------------+------------------------+. If you choose to not use the default logging implementation that comes with the; XRay runtime and/or control when/how the XRay instrumentation runs, you may use; the XRay APIs directly for doing so. To do this, you'll need to include the; ``xray_log_interface.h`` from the compiler-rt ``xray`` directory. The important API; functions we list below:. - ``__xray_log_register_mode(...)``: Register a logging implementation against; a string Mode identifier. The implementation is an instance of; ``XRayLogImpl`` defined in ``xray/xray_log_interface.h``.; - ``__xray_log_select_mode(...)``: Select the mode to install, associated with; a string ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:6108,log,log,6108,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['log']
Testability,"ortGroups** (``List of Strings``) :versionbadge:`clang-format 8` :ref:`¶ <JavaImportGroups>`; A vector of prefixes ordered by the desired groups for Java imports. One group's prefix can be a subset of another - the longest prefix is; always matched. Within a group, the imports are ordered lexicographically.; Static imports are grouped separately and follow the same group rules.; By default, static imports are placed before non-static imports,; but this behavior is changed by another option,; ``SortJavaStaticImport``. In the .clang-format configuration file, this can be configured like; in the following yaml example. This will result in imports being; formatted as in the Java example below. .. code-block:: yaml. JavaImportGroups: ['com.example', 'com', 'org']. .. code-block:: java. import static com.example.function1;. import static com.test.function2;. import static org.example.function3;. import com.example.ClassA;; import com.example.Test;; import com.example.a.ClassB;. import com.test.ClassC;. import org.example.ClassD;. .. _JavaScriptQuotes:. **JavaScriptQuotes** (``JavaScriptQuoteStyle``) :versionbadge:`clang-format 3.9` :ref:`¶ <JavaScriptQuotes>`; The JavaScriptQuoteStyle to use for JavaScript strings. Possible values:. * ``JSQS_Leave`` (in configuration: ``Leave``); Leave string quotes as they are. .. code-block:: js. string1 = ""foo"";; string2 = 'bar';. * ``JSQS_Single`` (in configuration: ``Single``); Always use single quotes. .. code-block:: js. string1 = 'foo';; string2 = 'bar';. * ``JSQS_Double`` (in configuration: ``Double``); Always use double quotes. .. code-block:: js. string1 = ""foo"";; string2 = ""bar"";. .. _JavaScriptWrapImports:. **JavaScriptWrapImports** (``Boolean``) :versionbadge:`clang-format 3.9` :ref:`¶ <JavaScriptWrapImports>`; Whether to wrap JavaScript import/export statements. .. code-block:: js. true:; import {; VeryLongImportsAreAnnoying,; VeryLongImportsAreAnnoying,; VeryLongImportsAreAnnoying,; } from 'some/module.js'. false:; import {",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:80379,test,test,80379,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['test'],['test']
Testability,"ory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pipelines including I/O redirection and variable; substitution. However, even though these lines may *look* like a shell; script, they are not. RUN lines are interpreted by :program:`lit`.; Consequently, the syntax differs from shell in a few ways. You can specify; as many RUN lines as needed. :program:`lit` perfo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:8096,test,tests,8096,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"ory>*. This tells LLVM where to find any external tests. They are expected to; be in specifically named subdirectories of <``directory``>. If; ``directory`` is left unspecified, ``configure`` uses the default value; ``/home/vadve/shared/benchmarks/speccpu2000/benchspec``. Subdirectory; names known to LLVM include:. * spec95. * speccpu2000. * speccpu2006. * povray31. Others are added from time to time, and can be determined from; ``configure``. Running Different Tests; =======================. In addition to the regular ""whole program"" tests, the ``test-suite``; module also provides a mechanism for compiling the programs in different; ways. If the variable TEST is defined on the ``gmake`` command line, the; test system will include a Makefile named; ``TEST.<value of TEST variable>.Makefile``. This Makefile can modify; build rules to yield different results. For example, the LLVM nightly tester uses ``TEST.nightly.Makefile`` to; create the nightly test reports. To run the nightly tests, run; ``gmake TEST=nightly``. There are several TEST Makefiles available in the tree. Some of them are; designed for internal LLVM research and will not work outside of the; LLVM research group. They may still be valuable, however, as a guide to; writing your own TEST Makefile for any optimization or analysis passes; that you develop with LLVM. Generating Test Output; ======================. There are a number of ways to run the tests and generate output. The; most simple one is simply running ``gmake`` with no arguments. This will; compile and run all programs in the tree using a number of different; methods and compare results. Any failures are reported in the output,; but are likely drowned in the other output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-P",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:3295,test,tests,3295,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['tests']
Testability,"oryManager`` can use to identify executor memory for deallocation); and pass it to the ``OnFinalized`` callback. Finalized allocations (represented by ``FinalizedAlloc`` objects) can be; deallocated by calling the ``JITLinkMemoryManager::dealloc`` method. This method; takes a vector of ``FinalizedAlloc`` objects, since it is common to deallocate; multiple objects at the same time and this allows us to batch these requests for; transmission to the executing process. JITLink provides a simple in-process implementation of this interface:; ``InProcessMemoryManager``. It allocates pages once and re-uses them as both; working and target memory. ORC provides a cross-process-capable ``MapperJITLinkMemoryManager`` that can use; shared memory or ORC-RPC-based communication to transfer content to the executing; process. JITLinkMemoryManager and Security; ---------------------------------. JITLink's ability to link JIT'd code for a separate executor process can be; used to improve the security of a JIT system: The executor process can be; sandboxed, run within a VM, or even run on a fully separate machine. JITLink's memory manager interface is flexible enough to allow for a range of; trade-offs between performance and security. For example, on a system where code; pages must be signed (preventing code from being updated), the memory manager; can deallocate working memory pages after linking to free memory in the process; running JITLink. Alternatively, on a system that allows RWX pages, the memory; manager may use the same pages for both working and target memory by marking; them as RWX, allowing code to be modified in place without further overhead.; Finally, if RWX pages are not permitted but dual-virtual-mappings of; physical memory pages are, then the memory manager can dual map physical pages; as RW- in the JITLink process and R-X in the executor process, allowing; modification from the JITLink process but not from the executor (at the cost of; extra administrative overhead",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:30884,sandbox,sandboxed,30884,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['sandbox'],['sandboxed']
Testability,"os undefined and guarded code unexercised. Affected code should be checked to see if it's still intended for the specific; target and fixed accordingly. The extension can be turned off by the option ``-fno-define-target-os-macros``; as a workaround. What's New in Clang |release|?; ==============================; Some of the major new features and improvements to Clang are listed; here. Generic improvements to Clang as a whole or to its underlying; infrastructure are described first, followed by language-specific; sections with improvements to Clang's support for those languages. C++ Language Changes; --------------------. C++20 Feature Support; ^^^^^^^^^^^^^^^^^^^^^; - Implemented `P1907R1 <https://wg21.link/P1907R1>`_ which extends allowed non-type template argument; kinds with e.g. floating point values and pointers and references to subobjects.; This feature is still experimental. Accordingly, ``__cpp_nontype_template_args`` was not updated.; However, its support can be tested with ``__has_extension(cxx_generalized_nttp)``. - Clang won't perform ODR checks for decls in the global module fragment any; more to ease the implementation and improve the user's using experience.; This follows the MSVC's behavior. Users interested in testing the more strict; behavior can use the flag '-Xclang -fno-skip-odr-check-in-gmf'.; (`#79240 <https://github.com/llvm/llvm-project/issues/79240>`_). C++23 Feature Support; ^^^^^^^^^^^^^^^^^^^^^; - Implemented `P0847R7: Deducing this <https://wg21.link/P0847R7>`_. Some related core issues were also; implemented (`CWG2553 <https://wg21.link/CWG2553>`_, `CWG2554 <https://wg21.link/CWG2554>`_,; `CWG2653 <https://wg21.link/CWG2653>`_, `CWG2687 <https://wg21.link/CWG2687>`_). Because the; support for this feature is still experimental, the feature test macro ``__cpp_explicit_this_parameter``; was not set in this version.; However, its support can be tested with ``__has_extension(cxx_explicit_this_parameter)``. - Added a separate warning to w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:9106,test,tested,9106,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['test'],['tested']
Testability,"osed type hierarchies with manual tagged dispatch and/or RTTI rather than the; open inheritance model and virtual dispatch that is more common in C++ code.; This is because LLVM rarely encourages library consumers to extend its core; types, and leverages the closed and tag-dispatched nature of its hierarchies to; generate significantly more efficient code. We have also found that a large; amount of our usage of type hierarchies fits better with tag-based pattern; matching rather than dynamic dispatch across a common interface. Within LLVM we; have built custom helpers to facilitate this design. See this document's; section on :ref:`isa and dyn_cast <isa>` and our :doc:`detailed document; <HowToSetUpLLVMStyleRTTI>` which describes how you can implement this; pattern for use with the LLVM helpers. .. _abi_breaking_checks:. ABI Breaking Checks; -------------------. Checks and asserts that alter the LLVM C++ ABI are predicated on the; preprocessor symbol `LLVM_ENABLE_ABI_BREAKING_CHECKS` -- LLVM; libraries built with `LLVM_ENABLE_ABI_BREAKING_CHECKS` are not ABI; compatible LLVM libraries built without it defined. By default,; turning on assertions also turns on `LLVM_ENABLE_ABI_BREAKING_CHECKS`; so a default +Asserts build is not ABI compatible with a; default -Asserts build. Clients that want ABI compatibility; between +Asserts and -Asserts builds should use the CMake build system; to set `LLVM_ENABLE_ABI_BREAKING_CHECKS` independently; of `LLVM_ENABLE_ASSERTIONS`. .. _coreclasses:. The Core LLVM Class Hierarchy Reference; =======================================. ``#include ""llvm/IR/Type.h""``. header source: `Type.h <https://llvm.org/doxygen/Type_8h_source.html>`_. doxygen info: `Type Classes <https://llvm.org/doxygen/classllvm_1_1Type.html>`_. The Core LLVM classes are the primary means of representing the program being; inspected or transformed. The core LLVM classes are defined in header files in; the ``include/llvm/IR`` directory, and implemented in the ``lib/IR``;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:133246,assert,asserts,133246,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['asserts']
Testability,"ossible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will understand what is going on. These are the most common scripts and their purposes/applications in generating; assertions:. .. code-block:: none. update_analyze_test_checks.py; opt -passes='print<cost-model>'. update_cc_test_checks.py; C/C++, or clang/clang++ (IR checks). update_llc_test_checks.py; llc (assembly checks). update_mca_test_chec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:11627,test,test,11627,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"osts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERROR ""The Debug target isn't supported along with LLVM_INTEGRATED_CRT_ALLOC!""); endif(); endif(). # Define options to control the inclusion and default build behavior for; # components which may not strictly be necessary (tools, examples, and tests).; #; # This is primarily to support building smaller or faster project files.; option(LLVM_INCLUDE_TOOLS ""Generate build targets for the LLVM tools."" ON); option(LLVM_BUILD_TOOLS; ""Build the LLVM tools. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:30667,test,tests,30667,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"osx.cocoa.Dealloc (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C classes that lack a correct implementation of -dealloc. .. literalinclude:: checkers/dealloc_example.m; :language: objc. .. _osx-cocoa-IncompatibleMethodTypes:. osx.cocoa.IncompatibleMethodTypes (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C method signatures with type incompatibilities. .. code-block:: objc. @interface MyClass1 : NSObject; - (int)foo;; @end. @implementation MyClass1; - (int)foo { return 1; }; @end. @interface MyClass2 : MyClass1; - (float)foo;; @end. @implementation MyClass2; - (float)foo { return 1.0; } // warn; @end. .. _osx-cocoa-Loops:. osx.cocoa.Loops; """"""""""""""""""""""""""""""; Improved modeling of loops using Cocoa collection types. .. _osx-cocoa-MissingSuperCall:. osx.cocoa.MissingSuperCall (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C methods that lack a necessary call to super. .. code-block:: objc. @interface Test : UIViewController; @end; @implementation test; - (void)viewDidLoad {} // warn; @end. .. _osx-cocoa-NSAutoreleasePool:. osx.cocoa.NSAutoreleasePool (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn for suboptimal uses of NSAutoreleasePool in Objective-C GC mode. .. code-block:: objc. void test() {; NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];; [pool release]; // warn; }. .. _osx-cocoa-NSError:. osx.cocoa.NSError (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""; Check usage of NSError parameters. .. code-block:: objc. @interface A : NSObject; - (void)foo:(NSError """""""""""""""""""""""""""""""""""""""""""""""")error;; @end. @implementation A; - (void)foo:(NSError """""""""""""""""""""""""""""""""""""""""""""""")error {; // warn: method accepting NSError"""""""""""""""""""""""""""""""""""""""""""""""" should have a non-void; // return value; }; @end. @interface A : NSObject; - (BOOL)foo:(NSError """""""""""""""""""""""""""""""""""""""""""""""")error;; @end. @implementation A; - (BOOL)foo:(NSError """""""""""""""""""""""""""""""""""""""""""""""")error {; *error = 0; // warn: potential null dereference; return 0;; }; @end. .. _osx-cocoa-NilA",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:37863,test,test,37863,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ot provided, using 64; INFO: A corpus is not provided, starting from an empty corpus; #0	READ units: 1; #1	INITED cov: 3 ft: 2 corp: 1/1b exec/s: 0 rss: 24Mb; #3811	NEW cov: 4 ft: 3 corp: 2/2b exec/s: 0 rss: 25Mb L: 1 MS: 5 ChangeBit-ChangeByte-ChangeBit-ShuffleBytes-ChangeByte-; #3827	NEW cov: 5 ft: 4 corp: 3/4b exec/s: 0 rss: 25Mb L: 2 MS: 1 CopyPart-; #3963	NEW cov: 6 ft: 5 corp: 4/6b exec/s: 0 rss: 25Mb L: 2 MS: 2 ShuffleBytes-ChangeBit-; #4167	NEW cov: 7 ft: 6 corp: 5/9b exec/s: 0 rss: 25Mb L: 3 MS: 1 InsertByte-; ... The early parts of the output include information about the fuzzer options and; configuration, including the current random seed (in the ``Seed:`` line; this; can be overridden with the ``-seed=N`` flag). Further output lines have the form of an event code and statistics. The; possible event codes are:. ``READ``; The fuzzer has read in all of the provided input samples from the corpus; directories.; ``INITED``; The fuzzer has completed initialization, which includes running each of; the initial input samples through the code under test.; ``NEW``; The fuzzer has created a test input that covers new areas of the code; under test. This input will be saved to the primary corpus directory.; ``REDUCE``; The fuzzer has found a better (smaller) input that triggers previously; discovered features (set ``-reduce_inputs=0`` to disable).; ``pulse``; The fuzzer has generated 2\ :sup:`n` inputs (generated periodically to reassure; the user that the fuzzer is still working).; ``DONE``; The fuzzer has completed operation because it has reached the specified; iteration limit (``-runs``) or time limit (``-max_total_time``).; ``RELOAD``; The fuzzer is performing a periodic reload of inputs from the corpus; directory; this allows it to discover any inputs discovered by other; fuzzer processes (see `Parallel Fuzzing`_). Each output line also reports the following statistics (when non-zero):. ``cov:``; Total number of code blocks or edges covered by executing the curren",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:15848,test,test,15848,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"ot zero, allowing; it to control entry to a while-loop. They are placed in the loop preheader's; predecessor basic block, and are marked as ``IntrNoDuplicate`` to avoid; optimizers duplicating these instructions. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.set.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is the conditional value of whether the given count is not zero. '``llvm.test.start.loop.iterations.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. ::. declare {i32, i1} @llvm.test.start.loop.iterations.i32(i32); declare {i64, i1} @llvm.test.start.loop.iterations.i64(i64). Overview:; """""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics are similar to the; '``llvm.test.set.loop.iterations.*``' and '``llvm.start.loop.iterations.*``'; intrinsics, used to specify the hardware-loop trip count, but also produce a; value identical to the input that can be used as the input to the loop. The; second i1 output controls entry to a while-loop. Arguments:; """""""""""""""""""". The integer operand is the loop trip count of the hardware-loop, and thus; not e.g. the loop back-edge taken count. Semantics:; """""""""""""""""""". The '``llvm.test.start.loop.iterations.*``' intrinsics do not perform any; arithmetic on their operand. It's a hint to the backend that can use this to; set up the hardware-loop count with a target specific instruction, usually a; move of this value to a special register or a hardware-loop instruction.; The result is a pair of the input and a conditional value of whether the; given count is not zero. '``llvm.loop.decrem",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:646651,test,test,646651,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ot, and many; other platforms.; - Scripting and database support (CGI, SQLite database, Lua Server Pages,; Server side Lua scripts, Server side JavaScript).; This provides a ready to go, powerful web development platform in a one; single-click executable with **no dependencies**.0; - Support for CGI, SSI, HTTP digest (MD5) authorization, WebSocket,; WebDAV.; - HTTPS (SSL/TLS) support using [OpenSSL](https://www.openssl.org/).; - Optional support for authentication using client side X.509 certificates.; - Resumed download, URL rewrite, file blacklist, IP-based ACL.; - May run as Windows service.; - Download speed limit based on client subnet or URI pattern.; - Simple and clean embedding API.; - The source is in single file to make things easy.; - Embedding examples included.; - HTTP client capable of sending arbitrary HTTP/HTTPS requests.; - Websocket client functionality available (WS/WSS). ### Optionally included software. [![Lua](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/lua-logo.jpg ""Lua Logo"")](http://lua.org). [![Sqlite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/sqlite3-logo.jpg ""Sqlite3 Logo"")](http://sqlite.org). [![LuaFileSystem](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luafilesystem-logo.jpg ""LuaFileSystem Logo"")](http://keplerproject.github.io/luafilesystem/). [![LuaSQLite3](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luasqlite-logo.jpg ""LuaSQLite3 Logo"")](http://lua.sqlite.org/index.cgi/index). [![LuaXML](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/luaxml-logo.jpg ""LuaXML Logo"")](https://github.com/n1tehawk/LuaXML). [![Duktape](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/duktape-logo.png ""Duktape Logo"")](http://duktape.org). ### Optional depencencies. [![zlib](https://raw.githubusercontent.com/civetweb/civetweb/master/resources/zlib3d-b1.png ""zlib Logo"")](https://zlib.net). [![OpenSSL](https://raw.gi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md:6834,log,logo,6834,net/http/civetweb/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/net/http/civetweb/README.md,1,['log'],['logo']
Testability,"ote that if an externally defined function is; associated with a type identifier, there is no guarantee that its identity; within the module will be the same as its identity outside of the module,; as the former will be the jump table entry if a jump table is necessary. The `GlobalLayoutBuilder`_ class is responsible for laying out the globals; efficiently to minimize the sizes of the underlying bitsets. .. _control flow integrity design document: https://clang.llvm.org/docs/ControlFlowIntegrityDesign.html. :Example:. ::. target datalayout = ""e-p:32:32"". @a = internal global i32 0, !type !0; @b = internal global i32 0, !type !0, !type !1; @c = internal global i32 0, !type !1; @d = internal global [2 x i32] [i32 0, i32 0], !type !2. define void @e() !type !3 {; ret void; }. define void @f() {; ret void; }. declare void @g() !type !3. !0 = !{i32 0, !""typeid1""}; !1 = !{i32 0, !""typeid2""}; !2 = !{i32 4, !""typeid2""}; !3 = !{i32 0, !""typeid3""}. declare i1 @llvm.type.test(i8* %ptr, metadata %typeid) nounwind readnone. define i1 @foo(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid1""); ret i1 %x; }. define i1 @bar(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid2""); ret i1 %x; }. define i1 @baz(void ()* %p) {; %pi8 = bitcast void ()* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid3""); ret i1 %x; }. define void @main() {; %a1 = call i1 @foo(i32* @a) ; returns 1; %b1 = call i1 @foo(i32* @b) ; returns 1; %c1 = call i1 @foo(i32* @c) ; returns 0; %a2 = call i1 @bar(i32* @a) ; returns 0; %b2 = call i1 @bar(i32* @b) ; returns 1; %c2 = call i1 @bar(i32* @c) ; returns 1; %d02 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 0)) ; returns 0; %d12 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 1)) ; returns 1; %e = call i1 @baz(void ()* @e) ; returns 1; %f = call i1 @baz(void ()* @f) ; returns 0; %g = call i1 @baz(void ()* @g) ; returns 1; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:7251,test,test,7251,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,1,['test'],['test']
Testability,"ote: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14630,test,test,14630,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"other type (like a structure) or to; return one.; #. Only phi nodes can be self referential: ``%x = add i32 %x``, ``%x`` is; invalid.; #. PHI nodes must have an entry for each predecessor, with no extras.; #. PHI nodes must be the first thing in a basic block, all grouped together.; #. PHI nodes must have at least one entry.; #. All basic blocks should only end with terminator insts, not contain them.; #. The entry node to a function must not have predecessors.; #. All Instructions must be embedded into a basic block.; #. Functions cannot take a void-typed parameter.; #. Verify that a function's argument list agrees with its declared type.; #. It is illegal to specify a name for a void value.; #. It is illegal to have an internal global value with no initializer.; #. It is illegal to have a ``ret`` instruction that returns a value that does; not agree with the function return value type.; #. Function call argument types match the function prototype.; #. All other things that are tested by asserts spread about the code. Note that this does not provide full security verification (like Java), but; instead just tries to ensure that code is well-formed. .. _passes-view-cfg:. ``view-cfg``: View CFG of function; ----------------------------------. Displays the control flow graph using the GraphViz tool.; Additionally the ``-cfg-func-name=<substring>`` option can be used to filter the; functions that are displayed. All functions that contain the specified substring; will be displayed. ``view-cfg-only``: View CFG of function (with no function bodies); -----------------------------------------------------------------. Displays the control flow graph using the GraphViz tool, but omitting function; bodies.; Additionally the ``-cfg-func-name=<substring>`` option can be used to filter the; functions that are displayed. All functions that contain the specified substring; will be displayed. ``view-dom``: View dominance tree of function; ---------------------------------------------.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst:42745,test,tested,42745,interpreter/llvm-project/llvm/docs/Passes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Passes.rst,2,"['assert', 'test']","['asserts', 'tested']"
Testability,"others, success is non-zero (e.g. non-nullptr for pointers); 3. Retained out parameters on zero return; The annotation LIBKERN_RETURNS_RETAINED_ON_ZERO states; that a retained object is written into if and only if the function returns a zero value:. bool OSUnserializeXML(void *data, LIBKERN_RETURNS_RETAINED_ON_ZERO OSString **errString);. Then the caller has to release an object if the function has returned zero.; 4. Retained out parameters on non-zero return; Similarly, LIBKERN_RETURNS_RETAINED_ON_NONZERO specifies that a; retained object is written into the parameter if and only if the function has; returned a non-zero value.; Note that for non-retained out parameters conditionals do not matter, as the; caller has no obligations regardless of whether an object is written into or; not. Custom Assertion Handlers. The analyzer exploits code assertions by pruning off paths where the; assertion condition is false. The idea is capture any program invariants; specified in the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __ass",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:19778,assert,assertion,19778,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertion']
Testability,"ould be included in the ``SparcSubtarget.cpp``. The target-specific; implementation of the ``XXXSubtarget`` method should follow this pseudocode:. .. code-block:: c++. XXXSubtarget::XXXSubtarget(const Module &M, const std::string &FS) {; // Set the default features; // Determine default and user specified characteristics of the CPU; // Call ParseSubtargetFeatures(FS, CPU) to parse the features string; // Perform any additional operations; }. JIT Support; ===========. The implementation of a target machine optionally includes a Just-In-Time (JIT); code generator that emits machine code and auxiliary structures as binary; output that can be written directly to memory. To do this, implement JIT code; generation by performing the following steps:. * Write an ``XXXCodeEmitter.cpp`` file that contains a machine function pass; that transforms target-machine instructions into relocatable machine; code. * Write an ``XXXJITInfo.cpp`` file that implements the JIT interfaces for; target-specific code-generation activities, such as emitting machine code and; stubs. * Modify ``XXXTargetMachine`` so that it provides a ``TargetJITInfo`` object; through its ``getJITInfo`` method. There are several different approaches to writing the JIT support code. For; instance, TableGen and target descriptor files may be used for creating a JIT; code generator, but are not mandatory. For the Alpha and PowerPC target; machines, TableGen is used to generate ``XXXGenCodeEmitter.inc``, which; contains the binary coding of machine instructions and the; ``getBinaryCodeForInstr`` method to access those codes. Other JIT; implementations do not. Both ``XXXJITInfo.cpp`` and ``XXXCodeEmitter.cpp`` must include the; ``llvm/CodeGen/MachineCodeEmitter.h`` header file that defines the; ``MachineCodeEmitter`` class containing code for several callback functions; that write data (in bytes, words, strings, etc.) to the output stream. Machine Code Emitter; --------------------. In ``XXXCodeEmitter.cpp``, a target-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst:76051,stub,stubs,76051,interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMBackend.rst,1,['stub'],['stubs']
Testability,"ould correctly represent commits; ``Lllvm1`` and ``Llld1``, respectively. Commit ``UM3`` changed files not related to submodules and we need; somewhere to put them. It is not safe in general to put them in the; monorepo root directory because they may conflict with files in the; monorepo. Let's assume we want them in a directory ``local`` in the; monorepo. **Example 1: Umbrella looks like the monorepo**. For this example, we'll assume that each subproject appears in its own; top-level directory in the umbrella, just as they do in the monorepo .; Let's also assume that we want the files in directory ``myproj`` to; appear in ``local/myproj``. Given the above run of ``migrate-downstream-fork.py``, a recipe to; create the zipped history is below::. # Import any non-LLVM repositories the umbrella references.; git -C my-monorepo remote add localrepo \; https://my.local.mirror.org/localrepo.git; git fetch localrepo. subprojects=( clang clang-tools-extra compiler-rt debuginfo-tests libclc; libcxx libcxxabi libunwind lld lldb llgo llvm openmp; parallel-libs polly pstl ). # Import histories for upstream split projects (this was probably; # already done for the ``migrate-downstream-fork.py`` run).; for project in ${subprojects[@]}; do; git remote add upstream/split/${project} \; https://github.com/llvm-mirror/${subproject}.git; git fetch umbrella/split/${project}; done. # Import histories for downstream split projects (this was probably; # already done for the ``migrate-downstream-fork.py`` run).; for project in ${subprojects[@]}; do; git remote add local/split/${project} \; https://my.local.mirror.org/${subproject}.git; git fetch local/split/${project}; done. # Import umbrella history.; git -C my-monorepo remote add umbrella \; https://my.local.mirror.org/umbrella.git; git fetch umbrella. # Put myproj in local/myproj; echo ""myproj local/myproj"" > my-monorepo/submodule-map.txt. # Rewrite history; (; cd my-monorepo; zip-downstream-fork.py \; refs/remotes/umbrella \; --new-repo-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst:28055,test,tests,28055,interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/GitHubMove.rst,1,['test'],['tests']
Testability,"ould not be used to document basic mathematical invariants; that the optimizer can otherwise deduce or facts that are of little use to the; optimizer. .. _int_ssa_copy:. '``llvm.ssa.copy``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare type @llvm.ssa.copy(type returned %operand) memory(none). Arguments:; """""""""""""""""""". The first argument is an operand which is used as the returned value. Overview:; """""""""""""""""""". The ``llvm.ssa.copy`` intrinsic can be used to attach information to; operations by copying them and giving them new names. For example,; the PredicateInfo utility uses it to build Extended SSA form, and; attach various forms of information to operands that dominate specific; uses. It is not meant for general use, only for building temporary; renaming forms that require value splits at certain points. .. _type.test:. '``llvm.type.test``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.type.test(ptr %ptr, metadata %type) nounwind memory(none). Arguments:; """""""""""""""""""". The first argument is a pointer to be tested. The second argument is a; metadata object representing a :doc:`type identifier <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.test`` intrinsic tests whether the given pointer is associated; with the given type identifier. .. _type.checked.load:. '``llvm.type.checked.load``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare {ptr, i1} @llvm.type.checked.load(ptr %ptr, i32 %offset, metadata %type) nounwind memory(argmem: read). Arguments:; """""""""""""""""""". The first argument is a pointer from which to load a function pointer. The; second argument is the byte offset from which to load the function pointer. The; third argument is a metadata object representing a :doc:`type identifier; <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.checked.load`` intrinsic safely loads a function pointer from a; virtual table pointer using type metadata. This intrinsic is",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:937308,test,test,937308,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ould still; be present in the tool, but with the caveat of still being documented and; designed towards delta reduction. ### Command-Line Options; We are proposing to reduce the plethora of bugpoint’s options to just two: an; interesting-ness test and the arguments for said test, similar to other delta; reduction tools such as CReduce, Delta, and Lithium; the tool should feel less; cluttered, and there should also be no uncertainty about how to operate it. The interesting-ness test that’s going to be run to reduce the code is given; by name:; `--test=<test_name>`; If a `--test` option is not given, the program exits; this option is similar; to bugpoint’s current `-compile-custom` option, which lets the user run a; custom script. The interesting-ness test would be defined as a script that returns 0 when the; IR achieves a user-defined behaviour (e.g. failure to compile on clang) and a; nonzero value when otherwise. Leaving the user the freedom to determine what is; and isn’t interesting to the tool, and thus, streamlining the process of; reducing a test-case. If the test accepts any arguments (excluding the input ll/bc file), they are; given via the following flag:; `--test_args=<test_arguments>`; If unspecified, the test is run as given. It’s worth noting that the input file; would be passed as a parameter to the test, similar how `-compile-custom`; currently operates. ### Implementation; The tool would behave similar to CReduce’s functionality in that it would have a; list of passes that try to minimize the given test-case. We should be able to; modularize the tool’s behavior, as well as making it easier to maintain and; expand. The first version of this redesign would try to:. * Discard functions, instructions and metadata that don’t influence the; interesting-ness test; * Remove unused parameters from functions; * Eliminate unvisited conditional paths; * Rename variables to more regular ones (such as “a”, “b”, “c”, etc.). Once these passes are implemented, more me",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md:1947,test,test-case,1947,interpreter/llvm-project/llvm/docs/BugpointRedesign.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/BugpointRedesign.md,1,['test'],['test-case']
Testability,"ound developers should; also be told about upcoming changes. * Turn the soft-error into a hard-error after said LLVM release has branched. * Update the :doc:`coding standards<CodingStandards>` to allow the new; features we've explicitly approved in the RFC. * Start using the new features in LLVM's codebase. Here's a `sample RFC; <https://discourse.llvm.org/t/rfc-migrating-past-c-11/50943>`_ and the; `corresponding change <https://reviews.llvm.org/D57264>`_. .. _ci-usage:. Working with the CI system; --------------------------. The main continuous integration (CI) tool for the LLVM project is the; `LLVM Buildbot <https://lab.llvm.org/buildbot/>`_. It uses different *builders*; to cover a wide variety of sub-projects and configurations. The builds are; executed on different *workers*. Builders and workers are configured and; provided by community members. The Buildbot tracks the commits on the main branch and the release branches.; This means that patches are built and tested after they are merged to the these; branches (aka post-merge testing). This also means it's okay to break the build; occasionally, as it's unreasonable to expect contributors to build and test; their patch with every possible configuration. *If your commit broke the build:*. * Fix the build as soon as possible as this might block other contributors or; downstream users.; * If you need more time to analyze and fix the bug, please revert your change to; unblock others. *If someone else broke the build and this blocks your work*. * Comment on the code review in `GitHub <https://github.com/llvm/llvm-project/pulls>`_; (if available) or email the author, explain the problem and how this impacts; you. Add a link to the broken build and the error message so folks can; understand the problem.; * Revert the commit if this blocks your work, see revert_policy_ . *If a build/worker is permanently broken*. * 1st step: contact the owner of the worker. You can find the name and contact; information for the *Admin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:36326,test,tested,36326,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,2,['test'],"['tested', 'testing']"
Testability,"our changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Re-run tests and make sure nothing broke.; ninja check. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Before merging the PR, it is recommended that you rebase locally and re-run test; checks:. ::. # Add upstream as a remote (if you don't have it already); git remote add upstream https://github.com/llvm/llvm-project.git. # Make sure you have all the latest changes; git fetch upstream && git rebase -i upstream/main. # Make sure tests pass with latest changes and your change; ninja check. # Push the rebased changes to your fork.; git push origin my_change -f. Once your PR is approved, rebased, and tests are passing, click `Squash and; Merge` on your PR in the GitHub web interface. See more in-depth information about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirstTypoFix`. Releases; ========. Backporting Fixes to the Release Branches; -----------------------------------------; You can use special comments on issues to make backport requests for the; release branches. This is done by making a comment containing one of the; following commands on any issue that has been added to one of the ""X.Y.Z Release""; milestones. ::. /cherry-pick <commit> <commit> <...>. This command takes one or more git commit hashes as arguments and will attempt; to cherry-pick the commit(s) to the release branch. If the commit(s) fail to; apply cleanly, then a comment with a link to the failing job will be added to; the issue. If the commit(s) do apply cleanly, then a pull request will; be created with the specified commits. ::. /branch <owner>/<repo>/<branch>. This command will create a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:11859,test,tests,11859,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"our own fork when prompted.; # If you don't have a fork, gh will create one for you.; gh pr create. # If you get any review comments, come back to the branch and; # adjust them.; git switch my_change; $EDITOR file.cpp. # Commit your changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Before merging the PR, it is recommended that you rebase locally and re-run test; checks:. ::. # Add upstream as a remote (if you don't have it already); git remote add upstream https://github.com/llvm/llvm-project.git. # Make sure you have all the latest changes; git fetch upstream && git rebase -i upstream/main. # Make sure tests pass with latest changes and your change; ninja check. # Push the rebased changes to your fork.; git push origin my_change -f. # Now merge it; gh pr merge --squash --delete-branch. See more in-depth information about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirstTypoFix`. Example Pull Request with git; ====================================. Instead of using the GitHub CLI to create a PR, you can push your code to a; remote branch on your fork and create the PR to upstream using the GitHub web; interface. Here is an example of making a PR using git and the GitHub web interface:. First follow the instructions to [fork the repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo?tool=webui#forking-a-repository). Next follow the instructions to [clone your forked repository](https://docs.github.com/en/get-started/quickstart/fork-a-repo?tool=webui#cloning-your-forked-repository). Once you've cloned your forked repository,. ::. # Switch to the forked ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:9054,test,tests,9054,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"ours. - you'd like to keep contributing to LLVM. Getting commit access; ---------------------. LLVM uses Git for committing changes. The details are in the `developer; policy; document <https://llvm.org/docs/DeveloperPolicy.html#obtaining-commit-access>`__. With great power; ----------------. Actually, this would be a great time to read the rest of the `developer; policy <https://llvm.org/docs/DeveloperPolicy.html>`__, too. At minimum,; you need to be subscribed to the relevant commits list before landing; changes (e.g. llvm-commits@lists.llvm.org), as discussion often happens; there if a new patch causes problems. Post-commit errors; ------------------. Once your change is submitted it will be picked up by automated build; bots that will build and test your patch in a variety of configurations. You can see all configurations and their current state in a waterfall; view at http://lab.llvm.org/buildbot/#/waterfall. The waterfall view is good; to get a general overview over the tested configurations and to see; which configuration have been broken for a while. The console view at http://lab.llvm.org/buildbot/#/console helps to get a; better understanding of the build results of a specific patch. If you; want to follow along how your change is affecting the build bots, **this; should be the first place to look at** - the colored bubbles correspond; to projects in the waterfall. If you see a broken build, do not despair - some build bots are; continuously broken; if your change broke the build, you will see a red; bubble in the console view, while an already broken build will show an; orange bubble. Of course, even when the build was already broken, a new; change might introduce a hidden new failure. | When you want to see more details how a specific build is broken,; click the red bubble.; | If post-commit error logs confuse you, do not worry too much -; everybody on the project is aware that this is a bit unwieldy, so; expect people to jump in and help you understand w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:13936,test,tested,13936,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['tested']
Testability,"out the; distinction between contract (which should be validated with asserts and; llvm_unreachable) and environmental errors (which should generate; ``llvm::Error`` instances). #. Don't assume you're linking in-process. Use libSupport's sized,; endian-specific types when reading/writing content in the ``LinkGraph``. As a ""minimum viable"" JITLink wrapper, the ``llvm-jitlink`` tool is an; invaluable resource for developers bringing in a new JITLink backend. A standard; workflow is to start by throwing an unsupported object at the tool and seeing; what error is returned, then fixing that (you can often make a reasonable guess; at what should be done based on existing code for other formats or; architectures). In debug builds of LLVM, the ``-debug-only=jitlink`` option dumps logs from the; JITLink library during the link process. These can be useful for spotting some bugs at; a glance. The ``-debug-only=llvm_jitlink`` option dumps logs from the ``llvm-jitlink``; tool, which can be useful for debugging both testcases (it is often less verbose than; ``-debug-only=jitlink``) and the tool itself. The ``-oop-executor`` and ``-oop-executor-connect`` options are helpful for testing; handling of cross-process and cross-architecture use cases. Roadmap; =======. JITLink is under active development. Work so far has focused on the MachO; implementation. In LLVM 12 there is limited support for ELF on x86-64. Major outstanding projects include:. * Refactor architecture support to maximize sharing across formats. All formats should be able to share the bulk of the architecture specific; code (especially relocations) for each supported architecture. * Refactor ELF link graph construction. ELF's link graph construction is currently implemented in the `ELF_x86_64.cpp`; file, and tied to the x86-64 relocation parsing code. The bulk of the code is; generic and should be split into an ELFLinkGraphBuilder base class along the; same lines as the existing generic MachOLinkGraphBuilder. * Imple",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:44094,log,logs,44094,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,2,"['log', 'test']","['logs', 'testcases']"
Testability,"outfitted with the new matcher, only prints out loops; that declare a single variable initialized to zero and have an increment; step consisting of a unary increment of some variable. Now, we just need to add a matcher to check if the condition part of the; ``for`` loop compares a variable against the size of the array. There is; only one problem - we don't know which array we're iterating over; without looking at the body of the loop! We are again restricted to; approximating the result we want with matchers, filling in the details; in the callback. So we start with:. .. code-block:: c++. hasCondition(binaryOperator(hasOperatorName(""<""))). It makes sense to ensure that the left-hand side is a reference to a; variable, and that the right-hand side has integer type. .. code-block:: c++. hasCondition(binaryOperator(; hasOperatorName(""<""),; hasLHS(declRefExpr(to(varDecl(hasType(isInteger()))))),; hasRHS(expr(hasType(isInteger()))))). Why? Because it doesn't work. Of the three loops provided in; ``test-files/simple.cpp``, zero of them have a matching condition. A; quick look at the AST dump of the first for loop, produced by the; previous iteration of loop-convert, shows us the answer:. ::. (ForStmt 0x173b240; (DeclStmt 0x173afc8; 0x173af50 ""int i =; (IntegerLiteral 0x173afa8 'int' 0)""); <<>>; (BinaryOperator 0x173b060 '_Bool' '<'; (ImplicitCastExpr 0x173b030 'int'; (DeclRefExpr 0x173afe0 'int' lvalue Var 0x173af50 'i' 'int')); (ImplicitCastExpr 0x173b048 'int'; (DeclRefExpr 0x173b008 'const int' lvalue Var 0x170fa80 'N' 'const int'))); (UnaryOperator 0x173b0b0 'int' lvalue prefix '++'; (DeclRefExpr 0x173b088 'int' lvalue Var 0x173af50 'i' 'int')); (CompoundStatement ... We already know that the declaration and increments both match, or this; loop wouldn't have been dumped. The culprit lies in the implicit cast; applied to the first operand (i.e. the LHS) of the less-than operator,; an L-value to R-value conversion applied to the expression referencing; ``i``. Thankfully",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:14001,test,test-files,14001,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['test-files']
Testability,"over the snippet directly, first duplicate it so that the; loop body contains at least this many instructions. This potentially results; in loop body being cached in the CPU Op Cache / Loop Cache, which allows to; which may have higher throughput than the CPU decoders. .. option:: --max-configs-per-opcode=<value>. Specify the maximum configurations that can be generated for each opcode.; By default this is `1`, meaning that we assume that a single measurement is; enough to characterize an opcode. This might not be true of all instructions:; for example, the performance characteristics of the LEA instruction on X86; depends on the value of assigned registers and immediates. Setting a value of; `-max-configs-per-opcode` larger than `1` allows `llvm-exegesis` to explore; more configurations to discover if some register or immediate assignments; lead to different performance characteristics. .. option:: --benchmarks-file=</path/to/file>. File to read (`analysis` mode) or write (`latency`/`uops`/`inverse_throughput`; modes) benchmark results. ""-"" uses stdin/stdout. .. option:: --analysis-clusters-output-file=</path/to/file>. If provided, write the analysis clusters as CSV to this file. ""-"" prints to; stdout. By default, this analysis is not run. .. option:: --analysis-inconsistencies-output-file=</path/to/file>. If non-empty, write inconsistencies found during analysis to this file. `-`; prints to stdout. By default, this analysis is not run. .. option:: --analysis-filter=[all|reg-only|mem-only]. By default, all benchmark results are analysed, but sometimes it may be useful; to only look at those that to not involve memory, or vice versa. This option; allows to either keep all benchmarks, or filter out (ignore) either all the; ones that do involve memory (involve instructions that may read or write to; memory), or the opposite, to only keep such benchmarks. .. option:: --analysis-clustering=[dbscan,naive]. Specify the clustering algorithm to use. By default DBSCAN will b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:14604,benchmark,benchmark,14604,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark']
Testability,"overview-customized.png. .. _maintainability-verifier:. MachineVerifier; ---------------. The pass approach lets us use the ``MachineVerifier`` to enforce invariants; that are required beyond certain points of the pipeline. For example, a; function with the ``legalized`` property can have the ``MachineVerifier``; enforce that no illegal instructions occur. Similarly, a; ``regBankSelected`` function may not have virtual registers without a register; bank assigned. .. note::. For layering reasons, ``MachineVerifier`` isn't able to be the sole verifier; in GlobalISel. Currently some of the passes also perform verification while; we find a way to solve this problem. The main issue is that GlobalISel is a separate library, so we can't; directly reference it from CodeGen. Testing; -------. The ability to test GlobalISel is significantly improved over SelectionDAG.; SelectionDAG is something of a black box and there's a lot going on inside it.; This makes it difficult to write a test that reliably tests a particular aspect; of its behaviour. For comparison, see the following diagram:. .. image:: testing-pass-level.png. Each of the grey boxes indicates an opportunity to serialize the current state; and test the behaviour between two points in the pipeline. The current state; can be serialized using ``-stop-before`` or ``-stop-after`` and loaded using; ``-start-before``, ``-start-after``, and ``-run-pass``. We can also go further still, as many of GlobalISel's passes are readily unit; testable:. .. image:: testing-unit-level.png. It's possible to create an imaginary target such as in `LegalizerHelperTest.cpp <https://github.com/llvm/llvm-project/blob/93b29d3882baf7df42e4e9bc26b977b00373ef56/llvm/unittests/CodeGen/GlobalISel/LegalizerHelperTest.cpp#L28-L57>`_; and perform a single step of the algorithm and check the result. The MIR and; FileCheck directives can be embedded using strings so you still have access to; the convenience available in llvm-lit. Debugging; ---------. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst:4094,test,test,4094,interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,2,['test'],"['test', 'tests']"
Testability,"ovided by the ``llvm.assume`` intrinsic does not cause; sufficient overall improvement in code quality. For this reason,; ``llvm.assume`` should not be used to document basic mathematical invariants; that the optimizer can otherwise deduce or facts that are of little use to the; optimizer. .. _int_ssa_copy:. '``llvm.ssa.copy``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare type @llvm.ssa.copy(type returned %operand) memory(none). Arguments:; """""""""""""""""""". The first argument is an operand which is used as the returned value. Overview:; """""""""""""""""""". The ``llvm.ssa.copy`` intrinsic can be used to attach information to; operations by copying them and giving them new names. For example,; the PredicateInfo utility uses it to build Extended SSA form, and; attach various forms of information to operands that dominate specific; uses. It is not meant for general use, only for building temporary; renaming forms that require value splits at certain points. .. _type.test:. '``llvm.type.test``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.type.test(ptr %ptr, metadata %type) nounwind memory(none). Arguments:; """""""""""""""""""". The first argument is a pointer to be tested. The second argument is a; metadata object representing a :doc:`type identifier <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.test`` intrinsic tests whether the given pointer is associated; with the given type identifier. .. _type.checked.load:. '``llvm.type.checked.load``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare {ptr, i1} @llvm.type.checked.load(ptr %ptr, i32 %offset, metadata %type) nounwind memory(argmem: read). Arguments:; """""""""""""""""""". The first argument is a pointer from which to load a function pointer. The; second argument is the byte offset from which to load the function pointer. The; third argument is a metadata object representing a :doc:`type identifier; <TypeMetadata>`. Overview:; """""""""""""""""". ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:937191,test,test,937191,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ovq	%rsp, %rbp'; [0x0000000004][003] {Code} 'movb	%dl, %al'; [0x0000000006][003] {Code} 'movq	%rdi, -0x10(%rbp)'; [0x000000000a][003] {Code} 'movl	%esi, -0x14(%rbp)'; [0x000000000d][003] {Code} 'andb	$0x1, %al'; [0x000000000f][003] {Code} 'movb	%al, -0x15(%rbp)'; [0x0000000012][003] 3 {Line} {NewStatement} {PrologueEnd} '/test.cpp'; [0x0000000012][003] {Code} 'testb	$0x1, -0x15(%rbp)'; [0x0000000016][003] {Code} 'je	0x13'; [0x0000000032][003] 8 {Line} '/test.cpp'; [0x0000000032][003] {Code} 'movl	%eax, -0x4(%rbp)'; [0x0000000035][003] 9 {Line} {NewStatement} '/test.cpp'; [0x0000000035][003] {Code} 'movl	-0x4(%rbp), %eax'; [0x0000000038][003] {Code} 'popq	%rbp'; [0x0000000039][003] {Code} 'retq'; [0x000000003a][003] 9 {Line} {NewStatement} {EndSequence} '/test.cpp'. -----------------------------; Element Total Printed; -----------------------------; Scopes 3 3; Symbols 4 4; Types 5 5; Lines 25 25; -----------------------------; Total 37 37. Scope Sizes:; 189 (100.00%) : [0x000000000b][001] {CompileUnit} 'test.cpp'; 110 ( 58.20%) : [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; 27 ( 14.29%) : [0x0000000071][003] {Block}. Totals by lexical level:; [001]: 189 (100.00%); [002]: 110 ( 58.20%); [003]: 27 ( 14.29%). The **Scope Sizes** table shows the contribution in bytes to the debug; information by each scope, which can be used to determine unexpected; size changes in the DWARF sections between different versions of the; same toolchain. .. code-block:: none. [0x000000002a][002] 2 {Function} extern not_inlined 'foo' -> [0x0000000099]'int'; [0x000000002a][003] {Range} Lines 2:9 [0x0000000000:0x000000003a]; [0x000000002a][003] {Linkage} 0x2 '_Z3fooPKijb'; [0x0000000071][003] {Block}; [0x0000000071][004] {Range} Lines 5:8 [0x000000001c:0x000000002f]; [0x000000007e][004] 5 {Variable} 'CONSTANT' -> [0x00000000c3]'const INTEGER'; [0x000000007e][005] {Coverage} 100.00%; [0x000000007f][005] {Location}; [0x000000007f][006] {Entry} Stack Offset: -2",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:58516,test,test,58516,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"ow it works; =================================. .. contents::; :local:. Introduction; ============; Sometimes code contains equal functions, or functions that does exactly the same; thing even though they are non-equal on the IR level (e.g.: multiplication on 2; and 'shl 1'). It could happen due to several reasons: mainly, the usage of; templates and automatic code generators. Though, sometimes the user itself could; write the same thing twice :-). The main purpose of this pass is to recognize such functions and merge them. This document is the extension to pass comments and describes the pass logic. It; describes the algorithm that is used in order to compare functions and; explains how we could combine equal functions correctly to keep the module; valid. Material is brought in a top-down form, so the reader could start to learn pass; from high level ideas and end with low-level algorithm details, thus preparing; him or her for reading the sources. The main goal is to describe the algorithm and logic here and the concept. If; you *don't want* to read the source code, but want to understand pass; algorithms, this document is good for you. The author tries not to repeat the; source-code and covers only common cases to avoid the cases of needing to; update this document after any minor code changes. What should I know to be able to follow along with this document?; -----------------------------------------------------------------. The reader should be familiar with common compile-engineering principles and; LLVM code fundamentals. In this article, we assume the reader is familiar with; `Single Static Assignment; <http://en.wikipedia.org/wiki/Static_single_assignment_form>`_; concept and has an understanding of; `IR structure <https://llvm.org/docs/LangRef.html#high-level-structure>`_. We will use terms such as; ""`module <https://llvm.org/docs/LangRef.html#high-level-structure>`_"",; ""`function <https://llvm.org/docs/ProgrammersManual.html#the-function-class>`_"",; ""`basi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:1068,log,logic,1068,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logic']
Testability,"ow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session logs independently of the progress; dialog. The improved log window allows to chose a differen",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3514,log,log,3514,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['log'],['log']
Testability,"ow to deal with message; sends:. **Honoring** them would work out very poorly if a programmer naively or; accidentally tried to incorporate code written for manual retain/release code; into an ARC program. At best, such code would do twice as much work as; necessary; quite frequently, however, ARC and the explicit code would both; try to balance the same retain, leading to crashes. The cost is losing the; ability to perform ""unrooted"" retains, i.e. retains not logically; corresponding to a strong reference in the object graph. **Ignoring** them would badly violate user expectations about their code.; While it *would* make it easier to develop code simultaneously for ARC and; non-ARC, there is very little reason to do so except for certain library; developers. ARC and non-ARC translation units share an execution model and; can seamlessly interoperate. Within a translation unit, a developer who; faithfully maintains their code in non-ARC mode is suffering all the; restrictions of ARC for zero benefit, while a developer who isn't testing the; non-ARC mode is likely to be unpleasantly surprised if they try to go back to; it. **Banning** them has the disadvantage of making it very awkward to migrate; existing code to ARC. The best answer to that, given a number of other; changes and restrictions in ARC, is to provide a specialized tool to assist; users in that migration. Implementing these methods was banned because they are too integral to the; semantics of ARC; many tricks which worked tolerably under manual reference; counting will misbehave if ARC performs an ephemeral extra retain or two. If; absolutely required, it is still possible to implement them in non-ARC code,; for example in a category; the implementations must obey the :ref:`semantics; <arc.objects.retains>` laid out elsewhere in this document. .. _arc.misc.special_methods.dealloc:. ``dealloc``; ^^^^^^^^^^^. A program is ill-formed if it contains a message send or ``@selector``; expression for the selector",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst:86521,test,testing,86521,interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AutomaticReferenceCounting.rst,1,['test'],['testing']
Testability,"ow) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using namespace std``; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In LLVM, we prefer to explicitly prefix all identifiers from the standard; namespace with an ""``std::``"" prefix, rather than rely on ""``using namespace; std;``"". In header files, adding a ``'using namespace XXX'`` directive pollutes the; namespace of any source file that ``#include``\s the header, creating; maintenance issues. In implementation files (e.g. ``.cpp`` files), the rule is more of a stylistic; rule, but is still important. Basically, using explicit namespace prefixes; makes the code **clearer**, because it is immediately ob",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:48396,assert,assert,48396,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assert']
Testability,"own code to generate hierarchical structure in HTML, replace dtree.js which is; extremely slow for complex hierarchies. Dramatically improve performance for; structures with large (~1000) number of items.; 19. Deliver to the server title of the objects, display it as hint in the browser.; 20. Better handling of special characters in the hierarchies - allows to display; symbols like ' or "" in the file structure. ### July 2014; 1. Migration to d3.v3.js and jQuery v2.1.1; 2. Fix errors in filling of histogram statbox; 3. Possibility of move and resize of statbox, title, color palete; 4. Remove many (not all) global variables; 5. Example with direct usage of JSRootIO graphics; 6. Example of inserting ROOT graphics from THttpServer into `<iframe></iframe>`. ### May 2014; 1. This JSRootIO code together with THttpServer class included; in ROOT repository. ### March 2014; 1. Introduce TBuffer class, which plays similar role; as TBuffer in native ROOT I/O. Simplifies I/O logic,; reduce duplication of code in many places, fix errors.; Main advantage - one could try to keep code synchronous with C++.; 2. Avoid objects cloning when object referenced several times.; 3. Treat special cases (collection, arrays) in one place.; This is major advantage, while any new classes need to be implemented only once.; 4. Object representation, produced by JSRootIO is similar to; objects, produced by TBufferJSON class. By this one can exchange; I/O engine and use same JavaSctript graphic for display.; 5. More clear functions to display different elements of the file.; In the future functions should be fully separated from I/O part; and organized in similar way as online part.; 6. Eliminate usage of gFile pointer in the I/O part.; 7. Provide TBufferJSON::JsonWriteMember method. It allows to stream any; selected data member of the class. Supported are:; basic data types, arrays of basic data types, TString, TArray classes.; Also any object as data member can be streamed.; 8. TRootSniffer do not ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:76964,log,logic,76964,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['logic']
Testability,"own how to retrieve the data arrays from the branches of the tree; in the previous section, and you could just write that program from; scratch. Since this is a very common task, ROOT provides a utility that; generates a skeleton class designed to loop over the entries of the; tree. This is the `TTree::MakeClass` method. We will now go through the steps; of using `MakeClass` with a simplified example. The methods used here; obviously work for complex event loop calculations. These are our assumptions: we would like to do selective plotting and; loop through each entry of the tree and tracks. We chose a simple; example: we want to plot `fPx` of the first 100 tracks of each entry. We; have a ROOT tree with a branch for each data member in the ""`Event`""; object. To build this file and tree follow the instructions on how to; build the examples in `$ROOTSYS/test`. Execute `Event` and instruct it; to split the object with this command (from the UNIX command line). ``` {.cpp}; > $ROOTSYS/test/Event 400 1 2 1; ```. This creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:122363,test,test,122363,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"ows paths will fail on Linux and vice-versa.; * Tests that check for ``x86_64`` somewhere in the text will fail anywhere else.; * Tests where the debug information calculates the size of types and structures. Also, if the test rely on any behaviour that is coded in any back-end, it must; go in its own directory. So, for instance, code generator tests for ARM go; into ``test/CodeGen/ARM`` and so on. Those directories contain a special; ``lit`` configuration file that ensure all tests in that directory will; only run if a specific back-end is compiled and available. For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:. .. code-block:: python. config.suffixes = ['.ll', '.c', '.cpp', '.test']; if not 'ARM' in config.root.targets:; config.unsupported = True. Other platform-specific tests are those that depend on a specific feature; of a specific sub-architecture, for example only to Intel chips that support ``AVX2``. For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture; variants:. .. code-block:: llvm. ; RUN: llc -mcpu=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you're testing for a behaviour that you know is platform-specific or; depends on special features of sub-architectures, you must add the specific; triple, test with the specific FileCheck and put it into the specific; directory that will filter out all other architectures. Constraining test execution; ---------------------------. Some tests can be run only in specific configurations, such as; with debug builds or on particular platforms. Use ``REQUIRES``; and ``UNSUPPORTED`` to control when the test is enabled. So",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:18719,test,tests,18719,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,owsable.h; TBranchCacheInfo.h; TBranchClones.h; TBranchElement.h; TBranch.h; TBranchObject.h; TBranchRef.h; TBranchSTL.h; TBufferSQL.h; TChainElement.h; TChain.h; TCut.h; TEntryListArray.h; TEntryListBlock.h; TEntryListFromFile.h; TEntryList.h; TEventList.h; TFriendElement.h; TIndArray.h; TLeafB.h; TLeafC.h; TLeafD.h; TLeafD32.h; TLeafElement.h; TLeafF.h; TLeafF16.h; TLeaf.h; TLeafI.h; TLeafL.h; TLeafG.h; TLeafObject.h; TLeafO.h; TLeafS.h; TNtupleD.h; TNtuple.h; TQueryResult.h; TreeUtils.h; TSelector.h; TSelectorList.h; TSelectorScalar.h; TTreeCache.h; TTreeCacheUnzip.h; TTreeCloner.h; TTree.h; TTreeResult.h; TTreeRow.h; TTreeSQL.h; TVirtualIndex.h; TVirtualTreePlayer.h; ROOT/InternalTreeUtils.hxx; ROOT/RFriendInfo.hxx; ROOT/TIOFeatures.hxx; SOURCES; src/InternalTreeUtils.cxx; src/RFriendInfo.cxx; src/TBasket.cxx; src/TBasketSQL.cxx; src/TBranchBrowsable.cxx; src/TBranchClones.cxx; src/TBranch.cxx; src/TBranchElement.cxx; src/TBranchIMTHelper.h; src/TBranchObject.cxx; src/TBranchRef.cxx; src/TBranchSTL.cxx; src/TBufferSQL.cxx; src/TChain.cxx; src/TChainElement.cxx; src/TCut.cxx; src/TEntryListArray.cxx; src/TEntryListBlock.cxx; src/TEntryList.cxx; src/TEntryListFromFile.cxx; src/TEventList.cxx; src/TFriendElement.cxx; src/TIOFeatures.cxx; src/TLeafB.cxx; src/TLeafC.cxx; src/TLeaf.cxx; src/TLeafD.cxx; src/TLeafD32.cxx; src/TLeafElement.cxx; src/TLeafF.cxx; src/TLeafF16.cxx; src/TLeafI.cxx; src/TLeafL.cxx; src/TLeafG.cxx; src/TLeafObject.cxx; src/TLeafO.cxx; src/TLeafS.cxx; src/TNtuple.cxx; src/TNtupleD.cxx; src/TQueryResult.cxx; src/TreeUtils.cxx; src/TSelector.cxx; src/TSelectorList.cxx; src/TSelectorScalar.cxx; src/TTreeCache.cxx; src/TTreeCacheUnzip.cxx; src/TTreeCloner.cxx; src/TTree.cxx; src/TTreeResult.cxx; src/TTreeRow.cxx; src/TTreeSQL.cxx; src/TVirtualIndex.cxx; src/TVirtualTreePlayer.cxx; DICTIONARY_OPTIONS; -writeEmptyRootPCM; DEPENDENCIES; ${TREE_EXTRA_DEPENDENCIES}; Net; RIO; MathCore; LIBRARIES; ${ROOT_ATOMIC_LIBS}; ). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/CMakeLists.txt:2573,test,test,2573,tree/tree/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/CMakeLists.txt,1,['test'],['test']
Testability,"p CommonHelp(CommonOptionsParser::HelpMessage);. // A help message for this specific tool can be added afterwards.; static cl::extrahelp MoreHelp(""\nMore help text...\n"");. int main(int argc, const char **argv) {; auto ExpectedParser = CommonOptionsParser::create(argc, argv, MyToolCategory);; if (!ExpectedParser) {; // Fail gracefully for unsupported options.; llvm::errs() << ExpectedParser.takeError();; return 1;; }; CommonOptionsParser& OptionsParser = ExpectedParser.get();; ClangTool Tool(OptionsParser.getCompilations(),; OptionsParser.getSourcePathList());; return Tool.run(newFrontendActionFactory<clang::SyntaxOnlyAction>().get());; }. And that's it! You can compile our new tool by running ninja from the; ``build`` directory. .. code-block:: console. cd ~/clang-llvm/build; ninja. You should now be able to run the syntax checker, which is located in; ``~/clang-llvm/build/bin``, on any source file. Try it!. .. code-block:: console. echo ""int main() { return 0; }"" > test.cpp; bin/loop-convert test.cpp --. Note the two dashes after we specify the source file. The additional; options for the compiler are passed after the dashes rather than loading; them from a compilation database - there just aren't any options needed; right now. Intermezzo: Learn AST matcher basics; ====================================. Clang recently introduced the :doc:`ASTMatcher; library <LibASTMatchers>` to provide a simple, powerful, and; concise way to describe specific patterns in the AST. Implemented as a; DSL powered by macros and templates (see; `ASTMatchers.h <../doxygen/ASTMatchers_8h_source.html>`_ if you're; curious), matchers offer the feel of algebraic data types common to; functional programming languages. For example, suppose you wanted to examine only binary operators. There; is a matcher to do exactly that, conveniently named ``binaryOperator``.; I'll give you one guess what this matcher does:. .. code-block:: c++. binaryOperator(hasOperatorName(""+""), hasLHS(integerLiteral(equal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:5388,test,test,5388,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['test']
Testability,p Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpro,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7357,test,testMinimizationCpu,7357,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMinimizationCpu']
Testability,"p in the Prototype AST. At this point we have a function prototype with no body. This is how LLVM IR; represents function declarations. For extern statements in Kaleidoscope, this; is as far as we need to go. For function definitions however, we need to; codegen and attach a function body. .. code-block:: c++. Function *FunctionAST::codegen() {; // First, check for an existing function from a previous 'extern' declaration.; Function *TheFunction = TheModule->getFunction(Proto->getName());. if (!TheFunction); TheFunction = Proto->codegen();. if (!TheFunction); return nullptr;. if (!TheFunction->empty()); return (Function*)LogErrorV(""Function cannot be redefined."");. For function definitions, we start by searching TheModule's symbol table for an; existing version of this function, in case one has already been created using an; 'extern' statement. If Module::getFunction returns null then no previous version; exists, so we'll codegen one from the Prototype. In either case, we want to; assert that the function is empty (i.e. has no body yet) before we start. .. code-block:: c++. // Create a new basic block to start insertion into.; BasicBlock *BB = BasicBlock::Create(*TheContext, ""entry"", TheFunction);; Builder->SetInsertPoint(BB);. // Record the function arguments in the NamedValues map.; NamedValues.clear();; for (auto &Arg : TheFunction->args()); NamedValues[std::string(Arg.getName())] = &Arg;. Now we get to the point where the ``Builder`` is set up. The first line; creates a new `basic block <http://en.wikipedia.org/wiki/Basic_block>`_; (named ""entry""), which is inserted into ``TheFunction``. The second line; then tells the builder that new instructions should be inserted into the; end of the new basic block. Basic blocks in LLVM are an important part; of functions that define the `Control Flow; Graph <http://en.wikipedia.org/wiki/Control_flow_graph>`_. Since we; don't have any control flow, our functions will only contain one block; at this point. We'll fix this in ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.rst:14219,assert,assert,14219,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl03.rst,1,['assert'],['assert']
Testability,"p the corresponding debug binary. For consistency, prefixing a name with; ``FILE:`` explicitly states that it is an object file path (the default). A positional argument or standard input value can be preceded by ""DATA"" or; ""CODE"" to indicate that the address should be symbolized as data or executable; code respectively. If neither is specified, ""CODE"" is assumed. DATA is; symbolized as address and symbol size rather than line number. :program:`llvm-symbolizer` parses options from the environment variable; ``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line.; ``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-line; options when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FIL",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2200,test,test,2200,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"p(). Example usage::. void clang_analyzer_dump(int);; void foo(int x) {; clang_analyzer_dump(x); // expected-warning{{reg_$0<x>}}; }. - ``size_t clang_analyzer_getExtent(void *);``. This function returns the value that represents the extent of a memory region; pointed to by the argument. This value is often difficult to obtain otherwise,; because no valid code that produces this value. However, it may be useful; for testing purposes, to see how well does the analyzer model region extents. Example usage::. void foo() {; int x, *y;; size_t xs = clang_analyzer_getExtent(&x);; clang_analyzer_explain(xs); // expected-warning{{'4'}}; size_t ys = clang_analyzer_getExtent(&y);; clang_analyzer_explain(ys); // expected-warning{{'8'}}; }. - ``void clang_analyzer_printState();``. Dumps the current ProgramState to the stderr. Quickly lookup the program state; at any execution point without ViewExplodedGraph or re-compiling the program.; This is not very useful for writing tests (apart from testing how ProgramState; gets printed), but useful for debugging tests. Also, this method doesn't; produce a warning, so it gets printed on the console before all other; ExprInspection warnings. Example usage::. void foo() {; int x = 1;; clang_analyzer_printState(); // Read the stderr!; }. - ``void clang_analyzer_hashDump(int);``. The analyzer can generate a hash to identify reports. To debug what information; is used to calculate this hash it is possible to dump the hashed string as a; warning of an arbitrary expression using the function above. Example usage::. void foo() {; int x = 1;; clang_analyzer_hashDump(x); // expected-warning{{hashed string for x}}; }. - ``void clang_analyzer_denote(int, const char *);``. Denotes symbols with strings. A subsequent call to clang_analyzer_express(); will expresses another symbol in terms of these string. Useful for testing; relationships between different symbols. Example usage::. void foo(int x) {; clang_analyzer_denote(x, ""$x"");; clang_analyzer_expr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:8433,test,tests,8433,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,3,['test'],"['testing', 'tests']"
Testability,"p); 	movswl	-52(%ebp), %eax; 	movl	%ecx, -84(%ebp); 	subl	%eax, -84(%ebp); 	movswl	-70(%ebp), %eax; 	movl	%ecx, -88(%ebp); 	subl	%eax, -88(%ebp); 	movswl	-50(%ebp), %eax; 	subl	%eax, %ecx; 	movl	%ecx, -76(%ebp); 	movswl	-42(%ebp), %eax; 	movl	%eax, -92(%ebp); 	movswl	-66(%ebp), %eax; 	movl	%eax, -96(%ebp); 	movw	$0, -98(%ebp). This appears to be bad because the RA is not folding the store to the stack ; slot into the movl. The above instructions could be:; 	movl $32, -80(%ebp); ...; 	movl $32, -84(%ebp); ...; This seems like a cross between remat and spill folding. This has redundant subtractions of %eax from a stack slot. However, %ecx doesn't; change, so we could simply subtract %eax from %ecx first and then use %ecx (or; vice-versa). //===---------------------------------------------------------------------===//. This code:. 	%tmp659 = icmp slt i16 %tmp654, 0		; <i1> [#uses=1]; 	br i1 %tmp659, label %cond_true662, label %cond_next715. produces this:. 	testw	%cx, %cx; 	movswl	%cx, %esi; 	jns	LBB4_109	# cond_next715. Shark tells us that using %cx in the testw instruction is sub-optimal. It; suggests using the 32-bit register (which is what ICC uses). //===---------------------------------------------------------------------===//. We compile this:. void compare (long long foo) {; if (foo < 4294967297LL); abort();; }. to:. compare:; subl $4, %esp; cmpl $0, 8(%esp); setne %al; movzbw %al, %ax; cmpl $1, 12(%esp); setg %cl; movzbw %cl, %cx; cmove %ax, %cx; testb $1, %cl; jne .LBB1_2 # UnifiedReturnBlock; .LBB1_1: # ifthen; call abort; .LBB1_2: # UnifiedReturnBlock; addl $4, %esp; ret. (also really horrible code on ppc). This is due to the expand code for 64-bit; compares. GCC produces multiple branches, which is much nicer:. compare:; subl $12, %esp; movl 20(%esp), %edx; movl 16(%esp), %eax; decl %edx; jle .L7; .L5:; addl $12, %esp; ret; .p2align 4,,7; .L7:; jl .L4; cmpl $0, %eax; .p2align 4,,8; ja .L5; .L4:; .p2align 4,,9; call abort. //===-----------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:16910,test,testw,16910,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['testw']
Testability,"p, int *tpmm, int *ip, int *tpim, int *dpp,; int *tpdm, int xmb, int *bp, int *ms) {; int k, sc;; for (k = 1; k <= M; k++) {; mc[k] = mpp[k-1] + tpmm[k-1];; if ((sc = ip[k-1] + tpim[k-1]) > mc[k]) mc[k] = sc;; if ((sc = dpp[k-1] + tpdm[k-1]) > mc[k]) mc[k] = sc;; if ((sc = xmb + bp[k]) > mc[k]) mc[k] = sc;; mc[k] += ms[k];; }; }. It is very profitable for this benchmark to turn the conditional stores to mc[k]; into a conditional move (select instr in IR) and allow the final store to do the; store. See GCC PR27313 for more details. Note that this is valid to xform even; with the new C++ memory model, since mc[k] is previously loaded and later; stored. //===---------------------------------------------------------------------===//. [SCALAR PRE]; There are many PRE testcases in testsuite/gcc.dg/tree-ssa/ssa-pre-*.c in the; GCC testsuite. //===---------------------------------------------------------------------===//. There are some interesting cases in testsuite/gcc.dg/tree-ssa/pred-comm* in the; GCC testsuite. For example, we get the first example in predcom-1.c, but ; miss the second one:. unsigned fib[1000];; unsigned avg[1000];. __attribute__ ((noinline)); void count_averages(int n) {; int i;; for (i = 1; i < n; i++); avg[i] = (((unsigned long) fib[i - 1] + fib[i] + fib[i + 1]) / 3) & 0xffff;; }. which compiles into two loads instead of one in the loop. predcom-2.c is the same as predcom-1.c. predcom-3.c is very similar but needs loads feeding each other instead of; store->load. //===---------------------------------------------------------------------===//. [ALIAS ANALYSIS]. Type based alias analysis:; http://gcc.gnu.org/bugzilla/show_bug.cgi?id=14705. We should do better analysis of posix_memalign. At the least it should; no-capture its pointer argument, at best, we should know that the out-value; result doesn't point to anything (like malloc). One example of this is in; SingleSource/Benchmarks/Misc/dt.c. //===------------------------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:34954,test,testsuite,34954,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testsuite']
Testability,p/runtime/src/ompd-specific.h; openmp/runtime/src/ompt-event-specific.h; openmp/runtime/src/ompt-general.cpp; openmp/runtime/src/ompt-internal.h; openmp/runtime/src/ompt-specific.cpp; openmp/runtime/src/ompt-specific.h; openmp/runtime/src/z_Linux_util.cpp; openmp/runtime/src/z_Windows_NT-586_util.cpp; openmp/runtime/src/z_Windows_NT_util.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_config.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.cpp; openmp/runtime/src/thirdparty/ittnotify/ittnotify_static.h; openmp/runtime/src/thirdparty/ittnotify/ittnotify_types.h; openmp/runtime/src/thirdparty/ittnotify/legacy/ittnotify.h; openmp/tools/archer/ompt-tsan.cpp; openmp/tools/archer/tests/ompt/ompt-signal.h; openmp/tools/multiplex/ompt-multiplex.h; openmp/tools/multiplex/tests/ompt-signal.h; openmp/tools/multiplex/tests/custom_data_storage/second-tool.h; openmp/tools/multiplex/tests/print/first-tool.h; openmp/tools/multiplex/tests/print/second-tool.h; polly/include/polly/Canonicalization.h; polly/include/polly/CodePreparation.h; polly/include/polly/DeadCodeElimination.h; polly/include/polly/DeLICM.h; polly/include/polly/DependenceInfo.h; polly/include/polly/FlattenAlgo.h; polly/include/polly/FlattenSchedule.h; polly/include/polly/ForwardOpTree.h; polly/include/polly/JSONExporter.h; polly/include/polly/LinkAllPasses.h; polly/include/polly/ManualOptimizer.h; polly/include/polly/MatmulOptimizer.h; polly/include/polly/Options.h; polly/include/polly/PolyhedralInfo.h; polly/include/polly/PruneUnprofitable.h; polly/include/polly/RegisterPasses.h; polly/include/polly/ScheduleOptimizer.h; polly/include/polly/ScheduleTreeTransform.h; polly/include/polly/ScopBuilder.h; polly/include/polly/ScopDetection.h; polly/include/polly/ScopDetectionDiagnostic.h; polly/include/polly/ScopInfo.h; polly/include/polly/ScopPass.h; polly/include/polly/Simplify.h; polly/include/polly/ZoneAlgo.h; polly/include/polly/CodeGen/BlockGenera,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:411565,test,tests,411565,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"p/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 5; }; ]; }; ]. .. option:: --pretty-print, -p. Print human readable output. If :option:`--inlining` is specified, the; enclosing scope is prefixed by (inlined by).; For JSON output, the option will cause JSON to be indented and split over; new lines. Otherwise, the JSON output will be printed in a compact form. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be --inlining --pretty-print; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-address, --addresses, -a. Print address before the source code location. Defaults to false. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --print-address 0x4004be; 0x4004be; baz(); /tmp/test.cpp:11:18; main; /tmp/test.cpp:15:0. $ llvm-symbolizer --obj=inlined.elf 0x4004be --pretty-print --print-address; 0x4004be: baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-source-context-lines <N>. Print ``N`` lines of source context for each symbolized address. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x400490 --print-source-context-lines=3; baz(); /tmp/test.cpp:11:0; 10 : volatile int k = 42;; 11 >: return foz() + k;; 12 : }. .. option:: --relativenames. Print the file's path relative to the compilation directory, instead; of the absolute path. If the command-line to the compiler included; the full path, this will be the same as the default. .. option:: --verbose. Print verbose address, line and column information. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --verbose 0x4004be; baz(); Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 9; Function start address: 0x4004b6; Line: 11; Column: 18; main; Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 14; Function start address: 0x4004b0; Line: 15; Colu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:11517,test,test,11517,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,p; flang/runtime/ISO_Fortran_binding.cpp; flang/runtime/lock.h; flang/runtime/main.cpp; flang/runtime/matmul.cpp; flang/runtime/memory.cpp; flang/runtime/misc-intrinsic.cpp; flang/runtime/namelist.cpp; flang/runtime/namelist.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendAction,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126290,stub,stub-evaluate,126290,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['stub'],['stub-evaluate']
Testability,"pRotate will actually; transform this loop, here's how we could convert; it (by hand) to a do-while style loop. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %body. body:; %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]; ; Loop body; br label %latch. latch:; %i.next = add nsw i32 %i, 1; %cond = icmp slt i32 %i.next, %n; br i1 %cond, label %body, label %exit. exit:; ret void; }. .. image:: ./loop-terminology-rotated-loop.png; :width: 400 px. Note two things:. * The condition check was moved to the ""bottom"" of the loop, i.e.; the latch. This is something that LoopRotate does by copying the header; of the loop to the latch.; * The compiler in this case can't deduce that the loop will; definitely execute at least once so the above transformation; is not valid. As mentioned above, a guard has to be inserted,; which is something that LoopRotate will do. This is how LoopRotate transforms this loop:. .. code-block:: none. define void @test(i32 %n) {; entry:; %guard_cond = icmp slt i32 0, %n; br i1 %guard_cond, label %loop.preheader, label %exit. loop.preheader:; br label %body. body:; %i2 = phi i32 [ 0, %loop.preheader ], [ %i.next, %latch ]; br label %latch. latch:; %i.next = add nsw i32 %i2, 1; %cond = icmp slt i32 %i.next, %n; br i1 %cond, label %body, label %loop.exit. loop.exit:; br label %exit. exit:; ret void; }. .. image:: ./loop-terminology-guarded-loop.png; :width: 500 px. The result is a little bit more complicated than we may expect; because LoopRotate ensures that the loop is in; :ref:`Loop Simplify Form <loop-terminology-loop-simplify>`; after rotation.; In this case, it inserted the %loop.preheader basic block so; that the loop has a preheader and it introduced the %loop.exit; basic block so that the loop has dedicated exits; (otherwise, %exit would be jumped from both %latch and %entry,; but %entry is not contained in the loop).; Note that a loop has to be in Loop Simplify Form beforehand; too for LoopRotate to be applied successfully. T",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:21125,test,test,21125,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['test'],['test']
Testability,p_asan/platform_specific/common_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/intercep,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93318,test,tests,93318,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"p`` above to decompose your new node into other; legal nodes for this target. #. ``include/llvm/Target/TargetSelectionDAG.td``:. Most current targets supported by LLVM generate code using the DAGToDAG; method, where SelectionDAG nodes are pattern matched to target-specific; nodes, which represent individual instructions. In order for the targets to; match an instruction to your new node, you must add a def for that node to; the list in this file, with the appropriate type constraints. Look at; ``add``, ``bswap``, and ``fadd`` for examples. #. ``lib/Target/PowerPC/PPCInstrInfo.td``:. Each target has a tablegen file that describes the target's instruction set.; For targets that use the DAGToDAG instruction selection framework, add a; pattern for your new node that uses one or more target nodes. Documentation; for this is a bit sparse right now, but there are several decent examples.; See the patterns for ``rotl`` in ``PPCInstrInfo.td``. #. TODO: document complex patterns. #. ``llvm/test/CodeGen/*``:. Add test cases for your new node to the test suite.; ``llvm/test/CodeGen/X86/bswap.ll`` is a good example. Adding a new instruction; ========================. .. warning::. Adding instructions changes the bitcode format, and it will take some effort; to maintain compatibility with the previous version. Only add an instruction; if it is absolutely necessary. #. ``llvm/include/llvm/IR/Instruction.def``:. add a number for your instruction and an enum name. #. ``llvm/include/llvm/IR/Instructions.h``:. add a definition for the class that will represent your instruction. #. ``llvm/include/llvm/IR/InstVisitor.h``:. add a prototype for a visitor to your new instruction type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add a new token to parse your instruction from assembly text file. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add the grammar on how your instruction can be read and what it will; construct as a result. #. ``llvm/lib/Bitcode/Reader/BitcodeReader.cpp``:. add a case for you",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:7960,test,test,7960,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,1,['test'],['test']
Testability,"parameters of compare instructions; and treat some new values as new coverage. The current implementation does roughly the following:. * The compiler instruments all CMP instructions with a callback that receives both CMP arguments.; * The callback computes `(caller_pc&4095) | (popcnt(Arg1 ^ Arg2) << 12)` and uses this value to set a bit in a bitset.; * Every new observed bit in the bitset is treated as new coverage. This feature has a potential to discover many interesting inputs,; but there are two downsides.; First, the extra instrumentation may bring up to 2x additional slowdown.; Second, the corpus may grow by several times. Fuzzer-friendly build mode; ---------------------------; Sometimes the code under test is not fuzzing-friendly. Examples:. - The target code uses a PRNG seeded e.g. by system time and; thus two consequent invocations may potentially execute different code paths; even if the end result will be the same. This will cause a fuzzer to treat; two similar inputs as significantly different and it will blow up the test corpus.; E.g. libxml uses ``rand()`` inside its hash table.; - The target code uses checksums to protect from invalid inputs.; E.g. png checks CRC for every chunk. In many cases it makes sense to build a special fuzzing-friendly build; with certain fuzzing-unfriendly features disabled. We propose to use a common build macro; for all such cases for consistency: ``FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION``. .. code-block:: c++. void MyInitPRNG() {; #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION; // In fuzzing mode the behavior of the code should be deterministic.; srand(0);; #else; srand(time(0));; #endif; }. AFL compatibility; -----------------; LibFuzzer can be used together with AFL_ on the same test corpus.; Both fuzzers expect the test corpus to reside in a directory, one file per input.; You can run both fuzzers on the same corpus, one after another:. .. code-block:: console. ./afl-fuzz -i testcase_dir -o findings_dir /path/to/pr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:21614,test,test,21614,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"parameters on non-zero return; Similarly, LIBKERN_RETURNS_RETAINED_ON_NONZERO specifies that a; retained object is written into the parameter if and only if the function has; returned a non-zero value.; Note that for non-retained out parameters conditionals do not matter, as the; caller has no obligations regardless of whether an object is written into or; not. Custom Assertion Handlers. The analyzer exploits code assertions by pruning off paths where the; assertion condition is false. The idea is capture any program invariants; specified in the assertion that the developer may know but is not immediately; apparent in the code itself. In this way assertions make implicit assumptions; explicit in the code, which not only makes the analyzer more accurate when; finding bugs, but can help others better able to understand your code as well.; It can also help remove certain kinds of analyzer false positives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:20191,assert,assertions,20191,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,2,['assert'],"['assertion', 'assertions']"
Testability,"parate directory under the; config.test_exec_root path. This feature allows code coverage analysis of each; individual test case. Defaults to OFF. **LLVM_BUILD_LLVM_DYLIB**:BOOL; If enabled, the target for building the libLLVM shared library is added.; This library contains all of LLVM's components in a single shared library.; Defaults to OFF. This cannot be used in conjunction with BUILD_SHARED_LIBS.; Tools will only be linked to the libLLVM shared library if LLVM_LINK_LLVM_DYLIB; is also ON.; The components in the library can be customised by setting LLVM_DYLIB_COMPONENTS; to a list of the desired components.; This option is not available on Windows. **LLVM_BUILD_TESTS**:BOOL; Include LLVM unit tests in the 'all' build target. Defaults to OFF. Targets; for building each unit test are generated in any case. You can build a; specific unit test using the targets defined under *unittests*, such as; ADTTests, IRTests, SupportTests, etc. (Search for ``add_llvm_unittest`` in; the subdirectories of *unittests* for a complete list of unit tests.) It is; possible to build all unit tests with the target *UnitTests*. **LLVM_BUILD_TOOLS**:BOOL; Build LLVM tools. Defaults to ON. Targets for building each tool are generated; in any case. You can build a tool separately by invoking its target. For; example, you can build *llvm-as* with a Makefile-based system by executing *make; llvm-as* at the root of your build directory. **LLVM_CCACHE_BUILD**:BOOL; If enabled and the ``ccache`` program is available, then LLVM will be; built using ``ccache`` to speed up rebuilds of LLVM and its components.; Defaults to OFF. The size and location of the cache maintained; by ``ccache`` can be adjusted via the LLVM_CCACHE_MAXSIZE and LLVM_CCACHE_DIR; options, which are passed to the CCACHE_MAXSIZE and CCACHE_DIR environment; variables, respectively. **LLVM_CREATE_XCODE_TOOLCHAIN**:BOOL; macOS Only: If enabled CMake will generate a target named; 'install-xcode-toolchain'. This target will create a d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:17043,test,tests,17043,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['tests']
Testability,"pare a set of logical; views (:option:`--compare`), to find differences and identify possible; debug information syntax issues (:option:`--warning`) in any object file. OPTIONS; -------; :program:`llvm-debuginfo-analyzer` options are separated into several; categories, each tailored to a different purpose:. * :ref:`general_` - Standard LLVM options to display help, version, etc.; * :ref:`attributes_` - Describe how to include different details when; printing an element.; * :ref:`print_` - Specify which elements will be included when printing; the view.; * :ref:`output_` - Describe the supported formats when printing the view.; * :ref:`report_` - Describe the format layouts for view printing.; * :ref:`select_` - Allows to use specific criteria or conditions to; select which elements to print.; * :ref:`compare_` - Compare logical views and print missing and/or; added elements.; * :ref:`warning_` - Print the warnings detected during the creation; of the view.; * :ref:`internal_` - Internal analysis of the logical view. .. _general_:. GENERAL; ~~~~~~~; This section describes the standard help options, used to display the; usage, version, response files, etc. .. option:: -h, --help. Show help and usage for this command. (--help-hidden for more). .. option:: --help-list. Show help and usage for this command without grouping the options; into categories (--help-list-hidden for more). .. option:: --help-hidden. Display all available options. .. option:: --print-all-options. Print all option values after command line parsing. .. option:: --print-options. Print non-default options after command line parsing. .. option:: --version. Display the version of the tool. .. option:: @<FILE>. Read command-line options from `<FILE>`. If no input file is specified, :program:`llvm-debuginfo-analyzer`; defaults to read `a.out` and return an error when no input file is found. If `-` is used as the input file, :program:`llvm-debuginfo-analyzer`; reads the input from its standard input stream",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:3268,log,logical,3268,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"passed as arguments to a function whose arguments are references or marked with the 'nonnull' attribute. .. code-block:: cpp. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. .. _core-NullDereference:. core.NullDereference (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereferences of null pointers. This checker specifically does; not report null pointer dereferences for x86 and x86-64 targets when the; address space is 256 (x86 GS Segment), 257 (x86 FS Segment), or 258 (x86 SS; segment). See `X86/X86-64 Language Extensions; <https://clang.llvm.org/docs/LanguageExtensions.html#memory-references-to-specified-segments>`__; for reference. The ``SuppressAddressSpaces`` option suppresses; warnings for null dereferences of all pointers with address spaces. You can; disable this behavior with the option; ``-analyzer-config core.NullDereference:SuppressAddressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:4315,test,test,4315,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"pdate fix handling of the case when; the global list file does not exist yet (new dataset directory). Fixes; error messages during editing dataset operations.; Fix issue with machine names consistency when working on a local; machine ('localhost' or 'localhost.localdomain' are mapped to; gSystem->HostName()); solves possible matching problems in the; packetizer.; In TProofServ, fill the ""grand total"" message with more blanks, so; that no remnants of the previous message are visible on the screen.; In the autoconf/bonjour interface, fix issue preventing the correct; port (the protocol one, which may be different from the application; default) being used when registering the service. . In TProofPlayer::AddQueryResult, fix a bug affecting the order in; whihc query results are registered when the start time is within 1; second.; Fix worker name in TSlaveLite.; Fix problem with enabling packages with option 'notOnClient' in; PROOF-Lite .; Make sure the log file is flushed at the end of startup to avoid; spurious log messages on next commands .; In CreateSession(), fix an issue with the validity check for existing; sessions .; In TProofLite: fix problem with passing the 'varexp' and 'selection'; strings for processing, preventing correct usage of the operators '|'; and '||' in TTreeFormula.; In the TProofOutputFile constructor, remove the 'localroot' prefix; only if present in the path. Fixes possible truncation problems; occuring when the paths are not under the localroot scope.; In TXSocket and TXSlave: fix problem with the way collection over a; socket just marked as 'bad' was interrupted; the interrupt was de facto; ineffective, so that collection stayed always until the timeout expired; (default: 5 minutes). Should solve some of the cases were slow response; was experienced.; Fix a problem with log path transmission when the node dies early or; not even starts. The log path was empty and wrong was filled in when; retrieving the log buffers, disorienting debugging.; F",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html:6246,log,log,6246,proof/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html,2,['log'],['log']
Testability,"pecs.; (`#69094 <https://github.com/llvm/llvm-project/issues/69094>`_); - Clang now diagnoses use of variable-length arrays in C++ by default (and; under ``-Wall`` in GNU++ mode). This is an extension supported by Clang and; GCC, but is very easy to accidentally use without realizing it's a; nonportable construct that has different semantics from a constant-sized; array. (`#62836 <https://github.com/llvm/llvm-project/issues/62836>`_). - Clang changed the order in which it displays candidate functions on overloading failures.; Previously, Clang used definition of ordering from the C++ Standard. The order defined in; the Standard is partial and is not suited for sorting. Instead, Clang now uses a strict; order that still attempts to push more relevant functions to the top by comparing their; corresponding conversions. In some cases, this results in better order. E.g., for the; following code. .. code-block:: cpp. struct Foo {; operator int();; operator const char*();; };. void test() { Foo() - Foo(); }. Clang now produces a list with two most relevant builtin operators at the top,; i.e. ``operator-(int, int)`` and ``operator-(const char*, const char*)``.; Previously ``operator-(const char*, const char*)`` was the first element,; but ``operator-(int, int)`` was only the 13th element in the output.; However, new implementation does not take into account some aspects of; C++ semantics, e.g. which function template is more specialized. This; can sometimes lead to worse ordering. - When describing a warning/error in a function-style type conversion Clang underlines only until; the end of the expression we convert from. Now Clang underlines until the closing parenthesis. Before:. .. code-block:: text. warning: cast from 'long (*)(const int &)' to 'decltype(fun_ptr)' (aka 'long (*)(int &)') converts to incompatible function type [-Wcast-function-type-strict]; 24 | return decltype(fun_ptr)( f_ptr /*comment*/);; | ^~~~~~~~~~~~~~~~~~~~~~~~. After:. .. code-block:: text. warning",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:28073,test,test,28073,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['test'],['test']
Testability,"pected text contains `{{{`; (three braces) it may be delimited with `{{{{` (four braces), and so on. Regex matching mode may be selected by appending ``-re`` to the diagnostic type; and including regexes wrapped in double curly braces (`{{` and `}}`) in the; directive, such as:. .. code-block:: text. expected-error-re {{format specifies type 'wchar_t **' (aka '{{.+}}')}}. Examples matching error: ""variable has incomplete type 'struct s'"". .. code-block:: c++. // expected-error {{variable has incomplete type 'struct s'}}; // expected-error {{variable has incomplete type}}; // expected-error {{{variable has incomplete type}}}; // expected-error {{{{variable has incomplete type}}}}. // expected-error-re {{variable has type 'struct {{.}}'}}; // expected-error-re {{variable has type 'struct {{.*}}'}}; // expected-error-re {{variable has type 'struct {{(.*)}}'}}; // expected-error-re {{variable has type 'struct{{[[:space:]](.*)}}'}}. Feature Test Macros; ===================; Clang implements several ways to test whether a feature is supported or not.; Some of these feature tests are standardized, like ``__has_cpp_attribute`` or; ``__cpp_lambdas``, while others are Clang extensions, like ``__has_builtin``.; The common theme among all the various feature tests is that they are a utility; to tell users that we think a particular feature is complete. However,; completeness is a difficult property to define because features may still have; lingering bugs, may only work on some targets, etc. We use the following; criteria when deciding whether to expose a feature test macro (or particular; result value for the feature test):. * Are there known issues where we reject valid code that should be accepted?; * Are there known issues where we accept invalid code that should be rejected?; * Are there known crashes, failed assertions, or miscompilations?; * Are there known issues on a particular relevant target?. If the answer to any of these is ""yes"", the feature test macro should eithe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:162715,test,test,162715,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"ped into a; new object file containing the code necessary to register it with the offloading; runtime. Usage; =====. This tool can be used with the following options. Any arguments not intended; only for the linker wrapper will be forwarded to the wrapped linker job. .. code-block:: console. USAGE: clang-linker-wrapper [options] -- <options to passed to the linker>. OPTIONS:; --bitcode-library=<kind>-<triple>-<arch>=<path>; Extra bitcode library to link; --cuda-path=<dir> Set the system CUDA path; --device-debug Use debugging; --device-linker=<value> or <triple>=<value>; Arguments to pass to the device linker invocation; --dry-run Print program arguments without running; --embed-bitcode Embed linked bitcode in the module; --help-hidden Display all available options; --help Display available options (--help-hidden for more); --host-triple=<triple> Triple to use for the host compilation; --linker-path=<path> The linker executable to invoke; -L <dir> Add <dir> to the library search path; -l <libname> Search for library <libname>; --opt-level=<O0, O1, O2, or O3>; Optimization level for LTO; -o <path> Path to file to write output; --pass-remarks-analysis=<value>; Pass remarks for LTO; --pass-remarks-missed=<value>; Pass remarks for LTO; --pass-remarks=<value> Pass remarks for LTO; --print-wrapped-module Print the wrapped module's IR for testing; --ptxas-arg=<value> Argument to pass to the 'ptxas' invocation; --save-temps Save intermediate results; --sysroot<value> Set the system root; --verbose Verbose output from tools; --v Display the version number and exit; -- The separator for the wrapped linker arguments. Example; =======. This tool links object files with offloading images embedded within it using the; ``-fembed-offload-object`` flag in Clang. Given an input file containing the; magic section we can pass it to this tool to extract the data contained at that; section and run a device linking job on it. .. code-block:: console. clang-linker-wrapper --host-triple=x86_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangLinkerWrapper.rst:1967,test,testing,1967,interpreter/llvm-project/clang/docs/ClangLinkerWrapper.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangLinkerWrapper.rst,1,['test'],['testing']
Testability,"peline JFPU0. The resource pressure view helps with identifying bottlenecks caused by high; usage of specific hardware resources. Situations with resource pressure mainly; concentrated on a few resources should, in general, be avoided. Ideally,; pressure should be uniformly distributed between multiple resources. Timeline View; ^^^^^^^^^^^^^; The timeline view produces a detailed report of each instruction's state; transitions through an instruction pipeline. This view is enabled by the; command line option ``-timeline``. As instructions transition through the; various stages of the pipeline, their states are depicted in the view report.; These states are represented by the following characters:. * D : Instruction dispatched.; * e : Instruction executing.; * E : Instruction executed.; * R : Instruction retired.; * = : Instruction already dispatched, waiting to be executed.; * \- : Instruction executed, waiting to be retired. Below is the timeline view for a subset of the dot-product example located in; ``test/tools/llvm-mca/X86/BtVer2/dot-product.s`` and processed by; :program:`llvm-mca` using the following command:. .. code-block:: bash. $ llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 -iterations=3 -timeline dot-product.s. .. code-block:: none. Timeline view:; 012345; Index 0123456789. [0,0] DeeER. . . vmulps	%xmm0, %xmm1, %xmm2; [0,1] D==eeeER . . vhaddps	%xmm2, %xmm2, %xmm3; [0,2] .D====eeeER . vhaddps	%xmm3, %xmm3, %xmm4; [1,0] .DeeE-----R . vmulps	%xmm0, %xmm1, %xmm2; [1,1] . D=eeeE---R . vhaddps	%xmm2, %xmm2, %xmm3; [1,2] . D====eeeER . vhaddps	%xmm3, %xmm3, %xmm4; [2,0] . DeeE-----R . vmulps	%xmm0, %xmm1, %xmm2; [2,1] . D====eeeER . vhaddps	%xmm2, %xmm2, %xmm3; [2,2] . D======eeeER vhaddps	%xmm3, %xmm3, %xmm4. Average Wait times (based on the timeline view):; [0]: Executions; [1]: Average time spent waiting in a scheduler's queue; [2]: Average time spent waiting in a scheduler's queue while ready; [3]: Average time elapsed from WB until retire stage. [",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst:21729,test,test,21729,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,1,['test'],['test']
Testability,"pencl-builtins``. This does not declare the builtin types and; therefore it has to be used in combination with ``-finclude-default-header``; if full functionality is required. **Example of Use**:. .. code-block:: console. $ clang -Xclang -fdeclare-opencl-builtins test.cl. .. _opencl_fake_address_space_map:. .. option:: -ffake-address-space-map. Overrides the target address space map with a fake map.; This allows adding explicit address space IDs to the bitcode for non-segmented; memory architectures that do not have separate IDs for each of the OpenCL; logical address spaces by default. Passing ``-ffake-address-space-map`` will; add/override address spaces of the target compiled for with the following values:; ``1-global``, ``2-constant``, ``3-local``, ``4-generic``. The private address; space is represented by the absence of an address space attribute in the IR (see; also :ref:`the section on the address space attribute <opencl_addrsp>`). .. code-block:: console. $ clang -cc1 -ffake-address-space-map test.cl. .. _opencl_builtins:. OpenCL builtins; ---------------. **Clang builtins**. There are some standard OpenCL functions that are implemented as Clang builtins:. - All pipe functions from `section 6.13.16.2/6.13.16.3; <https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#160>`_ of; the OpenCL v2.0 kernel language specification. - Address space qualifier conversion functions ``to_global``/``to_local``/``to_private``; from `section 6.13.9; <https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#101>`_. - All the ``enqueue_kernel`` functions from `section 6.13.17.1; <https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#164>`_ and; enqueue query functions from `section 6.13.17.5; <https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#171>`_. **Fast builtin function declarations**. The implementation of the fast builtin function declarations (available via the; :ref:`-fdeclare-opencl-builtins option <opencl_fdeclare_opencl_b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:5747,test,test,5747,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"pendence, see the discussion above on; positive-definiteness. Possible other mathematical problems are the; following:. - Excessive numerical round off - be especially careful of; exponential and factorial functions which get big very quickly and; lose accuracy. - Starting too far from the solution - the function may have; unphysical local minima, especially at infinity in some variables. ## Minuit2 Package. `Minuit2` is a new object-oriented implementation, written in C++, of; the popular `MINUIT` minimization package. Compared with the; **`TMinuit`** class, which is a direct conversion from FORTRAN to C++,; `Minuit2` is a complete redesign and re-implementation of the package.; This new version provides all the functionality present in the old; FORTRAN version, with almost equivalent numerical accuracy and; computational performances.; Furthermore, it contains some fixes and small improvements and this new functionality:; * The possibility to set single side parameter limits; * the FUMILI algorithm (see the next paragraph ""FUMILI Minimization Package""),; which is an optimized method for least square and log; likelihood minimizations. Minuit2 has been originally developed by M.; Winkler and F. James in the SEAL project. More information can be found; on the [MINUIT Web Site](MINUIT Web Site) and in particular at the; following documentation page at; <http://www.cern.ch/minuit/doc/doc.html>. A detailed User Guide for Minuit2 exists, describing the API of the internal classes.; ROOT uses `Minuit2` for fitting via the `Minuit2Minimizer` class which implements; the `ROOT::Math::Minimizer` interface. `Minuit2` is also distributed as an independent package of ROOT and can be built; without any other dependency on the ROOT libraries. Examples on how to use the `Minuit2` and `Fumili2` plug-ins are provided; in the tutorials' directory `$ROOTSYS/tutorials/fit`:; `minuit2FitBench.C`, `minuit2FitBench2D.C` and `minuit2GausFit.C`.; More information on the classes and functions ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:65320,log,log,65320,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['log'],['log']
Testability,"perand on each; enabled lane. The result on disabled lanes is a; :ref:`poison value <poisonvalues>`. Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <4 x i32> @llvm.vp.ashr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i1> %mask, i32 %evl); ;; For all lanes below %evl, %r is lane-wise equivalent to %also.r. %t = ashr <4 x i32> %a, %b; %also.r = select <4 x i1> %mask, <4 x i32> %t, <4 x i32> poison. .. _int_vp_lshr:. '``llvm.vp.lshr.*``' Intrinsics; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <16 x i32> @llvm.vp.lshr.v16i32 (<16 x i32> <left_op>, <16 x i32> <right_op>, <16 x i1> <mask>, i32 <vector_length>); declare <vscale x 4 x i32> @llvm.vp.lshr.nxv4i32 (<vscale x 4 x i32> <left_op>, <vscale x 4 x i32> <right_op>, <vscale x 4 x i1> <mask>, i32 <vector_length>); declare <256 x i64> @llvm.vp.lshr.v256i64 (<256 x i64> <left_op>, <256 x i64> <right_op>, <256 x i1> <mask>, i32 <vector_length>). Overview:; """""""""""""""""". Vector-predicated logical right-shift. Arguments:; """""""""""""""""""". The first two operands and the result have the same vector of integer type. The; third operand is the vector mask and has the same number of elements as the; result vector type. The fourth operand is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.lshr``' intrinsic computes the logical right shift; (:ref:`lshr <i_lshr>`) of the first operand by the second operand on each; enabled lane. The result on disabled lanes is a; :ref:`poison value <poisonvalues>`. Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <4 x i32> @llvm.vp.lshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i1> %mask, i32 %evl); ;; For all lanes below %evl, %r is lane-wise equivalent to %also.r. %t = lshr <4 x i32> %a, %b; %also.r = select <4 x i1> %mask, <4 x i32> %t, <4 x i32> poison. .. _int_vp_shl:. '``llvm.vp.shl.*``' Intrinsics; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <16 x i32>",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:709518,log,logical,709518,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,"perature adaptive. UseDefaultScale No False − Use default temperature scale for temperature minimisation algorithm. UseDefaultTemp No False − Use default initial temperature. KernelTemp No IncAdaptive IncAdaptive, DecAdaptive, Sqrt, Log, Sin, Homo, Geo Temperature minimisation algorithm. Configuration options for setup and tuning of specific fitter :. Configuration options reference for fitting method: Monte Carlo sampling (MC). Option Array Default value Predefined values Description. SampleSize No 100000 − Number of Monte Carlo events in toy sample. Sigma No -1 − If > 0: new points are generated according to Gauss around best value and with Sigma in units of interval length. Seed No 100 − Seed for the random generator (0 takes random seeds). Configuration options for setup and tuning of specific fitter :. Configuration options reference for fitting method: TMinuit (MT). Option Array Default value Predefined values Description. ErrorLevel No 1 − TMinuit: error level: 0.5=logL fit, 1=chi-squared fit. PrintLevel No -1 − TMinuit: output level: -1=least, 0, +1=all garbage. FitStrategy No 2 − TMinuit: fit strategy: 2=best. PrintWarnings No False − TMinuit: suppress warnings. UseImprove No True − TMinuit: use IMPROVE. UseMinos No True − TMinuit: use MINOS. SetBatch No False − TMinuit: use batch mode. MaxCalls No 1000 − TMinuit: approximate maximum number of function calls. Tolerance No 0.1 − TMinuit: tolerance to the function value at the minimum. Configuration options for setup and tuning of specific fitter :. Configuration options reference for fitting method: Genetic Algorithm (GA). Option Array Default value Predefined values Description. PopSize No 300 − Population size for GA. Steps No 40 − Number of steps for convergence. Cycles No 3 − Independent cycles of GA fitting. SC_steps No 10 − Spread control, steps. SC_rate No 5 − Spread control, rate: factor is changed depending on the rate. SC_factor No 0.95 − Spread control, factor. ConvCrit No 0.001 − Convergence crit",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:30597,log,logL,30597,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['log'],['logL']
Testability,piler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :par,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26514,test,tests,26514,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"pingFormat; CycleTerminology; DebuggingJITedCode; DirectXUsage; Docker; FatLTO; ExtendingLLVM; GitHub; GoldPlugin; GlobalISel/MIRPatterns; HowToBuildOnARM; HowToBuildWithPGO; HowToBuildWindowsItaniumPrograms; HowToCrossCompileBuiltinsOnArm; HowToCrossCompileLLVM; HowToUpdateDebugInfo; InstrProfileFormat; InstrRefDebugInfo; LinkTimeOptimization; LoopTerminology; MarkdownQuickstartTemplate; MemorySSA; MergeFunctions; MCJITDesignAndImplementation; MisExpect; ORCv2; OpaquePointers; JITLink; NewPassManager; NVPTXUsage; Phabricator; Passes; ReportingGuide; ResponseGuide; Remarks; RemoveDIsDebugInfo; RISCVUsage; SourceLevelDebugging; SPIRVUsage; StackSafetyAnalysis; SupportLibrary; TableGen/index; TableGenFundamentals; Vectorizers; WritingAnLLVMPass; WritingAnLLVMNewPMPass; WritingAnLLVMBackend; yaml2obj. Clang; -----. :doc:`HowToBuildOnARM`; Notes on building and testing LLVM/Clang on ARM. :doc:`HowToBuildWithPGO`; Notes on building LLVM/Clang with PGO. :doc:`HowToCrossCompileLLVM`; Notes on cross-building and testing LLVM/Clang. `How to build the C, C++, ObjC, and ObjC++ front end`__; Instructions for building the clang front-end from source. .. __: https://clang.llvm.org/get_started.html. :doc:`CoverageMappingFormat`; This describes the format and encoding used for LLVM’s code coverage mapping. :doc:`CFIVerify`; A description of the verification tool for Control Flow Integrity. LLVM Builds and Distributions; -----------------------------. :doc:`BuildingADistribution`; A best-practices guide for using LLVM's CMake build system to package and; distribute LLVM-based tools. :doc:`CMake`; An addendum to the main Getting Started guide for those using the `CMake; build system <http://www.cmake.org>`_. :doc:`Docker`; A reference for using Dockerfiles provided with LLVM. :doc:`Support Library <SupportLibrary>`; This document describes the LLVM Support Library (``lib/Support``) and; how to keep LLVM source code portable. :doc:`AdvancedBuilds`; This document describes more advance",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/UserGuides.rst:1596,test,testing,1596,interpreter/llvm-project/llvm/docs/UserGuides.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/UserGuides.rst,1,['test'],['testing']
Testability,"plications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can wor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2525,test,test-suite,2525,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"plore; more configurations to discover if some register or immediate assignments; lead to different performance characteristics. .. option:: --benchmarks-file=</path/to/file>. File to read (`analysis` mode) or write (`latency`/`uops`/`inverse_throughput`; modes) benchmark results. ""-"" uses stdin/stdout. .. option:: --analysis-clusters-output-file=</path/to/file>. If provided, write the analysis clusters as CSV to this file. ""-"" prints to; stdout. By default, this analysis is not run. .. option:: --analysis-inconsistencies-output-file=</path/to/file>. If non-empty, write inconsistencies found during analysis to this file. `-`; prints to stdout. By default, this analysis is not run. .. option:: --analysis-filter=[all|reg-only|mem-only]. By default, all benchmark results are analysed, but sometimes it may be useful; to only look at those that to not involve memory, or vice versa. This option; allows to either keep all benchmarks, or filter out (ignore) either all the; ones that do involve memory (involve instructions that may read or write to; memory), or the opposite, to only keep such benchmarks. .. option:: --analysis-clustering=[dbscan,naive]. Specify the clustering algorithm to use. By default DBSCAN will be used.; Naive clustering algorithm is better for doing further work on the; `-analysis-inconsistencies-output-file=` output, it will create one cluster; per opcode, and check that the cluster is stable (all points are neighbours). .. option:: --analysis-numpoints=<dbscan numPoints parameter>. Specify the numPoints parameters to be used for DBSCAN clustering; (`analysis` mode, DBSCAN only). .. option:: --analysis-clustering-epsilon=<dbscan epsilon parameter>. Specify the epsilon parameter used for clustering of benchmark points; (`analysis` mode). .. option:: --analysis-inconsistency-epsilon=<epsilon>. Specify the epsilon parameter used for detection of when the cluster; is different from the LLVM schedule profile values (`analysis` mode). .. option:: --analysis-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:15270,benchmark,benchmarks,15270,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,2,['benchmark'],['benchmarks']
Testability,"poTestInverter; class can now be constructed by any generic HypoTestCalculator, and both the HybridCalculator and the new; FrequentistCalculator are supported. The HypoTestInverter class can be constructed in two ways: either passing an; HypoTestCalculator and a data set or by passing the model for the signal, for the background and a data set.; In the first case the user configure the HypoTestCalculator before passing to the HypoTestInverter.; It must be configured using as null model the signal plus background model as alternate model the background; model. Optionally the user can pass the parameter to scan, if it is not passed, the first parameter of interest of the; null model will be used. In the second case (when passing directly the model and the data) the HypoTestInverter; can be configured to use either the frequentist or the hybrid calculator. The user can then configure the class; afterwards. For example set the test statistic to use via the method SetTestStatistic, number of toys to run; for each hypothesis, by retrieving the contained HypoTestCalculator:. HypoTestInverter inverter(obsData, model_B, model_SB, parameterToScan, HypoTestInverter::kFrequentist);; ProfileLikelihoodRatioTestStat profLR( *model_SB->GetPdf() );; inverter.SetTestStatistic(&profLR);; FrequentistCalculator * htcalc = (FrequentistCalculator*) inverter.GetHypoTestCalculator();; htcalc->SetToys( ntoySB, ntoyB);. The Inverter can then run using a fixed grid of npoint between xmin and xmax or by using an automatic scan, where a; bisection algorithm is used.; For running a fixed grid one needs to call SetFixedScan(npoints, xmin, xmax), while for running an autoscan use; the function SetAutoScan. The result is returned in the GetInterval function as an; HypoTestInverterResult class. If a fixed grid is used the upper limit is obtained by using a interpolation on; the scanned points. The interpolation can be linear or a spline (if; result.SetInterpolationOption(HypoTestInverterResult::kSpli",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html:4371,test,test,4371,roofit/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html,1,['test'],['test']
Testability,"pointer. .. code-block:: c. void test() {; int *p;; p = (int *) 0x10000; // warn; }. .. _alpha-core-IdenticalExpr:. alpha.core.IdenticalExpr (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of identical expressions in operators. .. code-block:: cpp. // C; void test() {; int a = 5;; int b = a | 4 | a; // warn: identical expr on both sides; }. // C++; bool f(void);. void test(bool b) {; int i = 10;; if (f()) { // warn: true and false branches are identical; do {; i--;; } while (f());; } else {; do {; i--;; } while (f());; }; }. .. _alpha-core-PointerArithm:. alpha.core.PointerArithm (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer arithmetic on locations other than array elements. .. code-block:: c. void test() {; int x;; int *p;; p = &x + 1; // warn; }. .. _alpha-core-PointerSub:. alpha.core.PointerSub (C); """"""""""""""""""""""""""""""""""""""""""""""""""; Check for pointer subtractions on two pointers pointing to different memory chunks. .. code-block:: c. void test() {; int x, y;; int d = &y - &x; // warn; }. .. _alpha-core-SizeofPtr:. alpha.core.SizeofPtr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of ``sizeof()`` on pointer expressions. .. code-block:: c. struct s {};. int test(struct s *p) {; return sizeof(p);; // warn: sizeof(ptr) can produce an unexpected result; }. .. _alpha-core-StackAddressAsyncEscape:. alpha.core.StackAddressAsyncEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function that involves dispatch_after or dispatch_async.; This checker is a part of ``core.StackAddressEscape``, but is temporarily disabled until some false positives are fixed. .. code-block:: c. dispatch_block_t test_block_inside_block_async_leak() {; int x = 123;; void (^inner)(void) = ^void(void) {; int y = x;; ++y;; };; void (^outer)(void) = ^void(void) {; int z = x;; ++z;; inner();; };; return outer; // warn: address of stack-allocated block is captured by a; // returned block; }. .. _alpha-core-StdVaria",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:50659,test,test,50659,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ponent. For a non-zero argument, returns the argument multiplied by some power; of two such that the absolute value of the returned value is in the; range [0.5, 1.0), with the same sign as the argument. The second; result is an integer such that the first result raised to the power of; the second result is the input argument. If the argument is a zero, returns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_fp80 %Val); declare fp128 @llvm.log10.f128(fp128 %Val); declare ppc_fp128 @llvm.log10.ppcf",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:567913,log,log,567913,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"porting this for the driver build. It will require changing; # the perf-helper.py file to understand to call `llvm` as `llvm clang`.; if(APPLE AND DTRACE AND NOT LLVM_TOOL_LLVM_DRIVER_BUILD); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/order-files.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/order-files/lit.site.cfg; ). add_lit_testsuite(generate-dtrace-logs ""Generating clang dtrace data""; ${CMAKE_CURRENT_BINARY_DIR}/order-files/; EXCLUDE_FROM_CHECK_ALL; ARGS -j 1; DEPENDS clang clear-dtrace-logs; ). add_custom_target(clear-dtrace-logs; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} dtrace; COMMENT ""Clearing old dtrace data""). if(NOT CLANG_ORDER_FILE); message(FATAL_ERROR ""Output clang order file is not set""); endif(). add_custom_target(generate-order-file; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py gen-order-file --binary $<TARGET_FILE:clang> --output ${CLANG_ORDER_FILE} ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Generating order file""; DEPENDS generate-dtrace-logs); endif(). if(CLANG_BOLT_INSTRUMENT AND NOT LLVM_BUILD_INSTRUMENTED); configure_lit_site_cfg(; ${CMAKE_CURRENT_SOURCE_DIR}/bolt.lit.site.cfg.in; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/lit.site.cfg; ). add_lit_testsuite(generate-bolt-fdata ""Generating BOLT profile for Clang""; ${CMAKE_CURRENT_BINARY_DIR}/bolt-fdata/; EXCLUDE_FROM_CHECK_ALL; DEPENDS clang-instrumented clear-bolt-fdata; ). add_custom_target(clear-bolt-fdata; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py clean ${CMAKE_CURRENT_BINARY_DIR} fdata; COMMENT ""Clearing old BOLT fdata""). # Merge profiles into one using merge-fdata; add_custom_target(clang-bolt-profile; COMMAND ""${Python3_EXECUTABLE}"" ${CMAKE_CURRENT_SOURCE_DIR}/perf-helper.py merge-fdata $<TARGET_FILE:merge-fdata> ${CMAKE_CURRENT_BINARY_DIR}/prof.fdata ${CMAKE_CURRENT_BINARY_DIR}; COMMENT ""Merging BOLT fdata""; DEPENDS merge-fdata generate-bolt-fdata); endif()",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt:2916,log,logs,2916,interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/utils/perf-training/CMakeLists.txt,1,['log'],['logs']
Testability,"portions of the program that as they are excluded from the testcase.; These options allow you to choose the; static native code compiler, or a custom command, (see **--exec-command**); respectively. The interpreter and the JIT backends cannot currently; be used as the ""safe"" backends. **--exec-command** *command*. This option defines the command to use with the **--run-custom** and; **--safe-custom** options to execute the bitcode testcase. This can; be useful for cross-compilation. **--compile-command** *command*. This option defines the command to use with the **--compile-custom**; option to compile the bitcode testcase. The command should exit with a; failure exit code if the file is ""interesting"" and should exit with a; success exit code (i.e. 0) otherwise (this is the same as if it crashed on; ""interesting"" inputs). This can be useful for; testing compiler output without running any link or execute stages. To; generate a reduced unit test, you may add CHECK directives to the; testcase and pass the name of an executable compile-command script in this form:. .. code-block:: sh. #!/bin/sh; llc ""$@""; not FileCheck [bugpoint input file].ll < bugpoint-test-program.s. This script will ""fail"" as long as FileCheck passes. So the result; will be the minimum bitcode that passes FileCheck. **--safe-path** *path*. This option defines the path to the command to execute with the; **--safe-{int,jit,llc,custom}**; option. **--verbose-errors**\ =\ *{true,false}*. The default behavior of bugpoint is to print ""<crash>"" when it finds a reduced; test that crashes compilation. This flag prints the output of the crashing; program to stderr. This is useful to make sure it is the same error being; tracked down and not a different error that happens to crash the compiler as; well. Defaults to false. EXIT STATUS; -----------. If **bugpoint** succeeds in finding a problem, it will exit with 0. Otherwise,; if an error occurs, it will exit with a non-zero value. SEE ALSO; --------. :manpage:`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst:5676,test,test,5676,interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/bugpoint.rst,2,['test'],"['test', 'testcase']"
Testability,"ports Windows. Initial support was added in r341082.; Any build of Clang 9 supports it. You can download a build of Clang for Windows; that has libFuzzer from; `LLVM Snapshot Builds <https://llvm.org/builds/>`_. Using libFuzzer on Windows without ASAN is unsupported. Building fuzzers with the; ``/MD`` (dynamic runtime library) compile option is unsupported. Support for these; may be added in the future. Linking fuzzers with the ``/INCREMENTAL`` link option; (or the ``/DEBUG`` option which implies it) is also unsupported. Send any questions or comments to the mailing list: libfuzzer(#)googlegroups.com. Q. When libFuzzer is not a good solution for a problem?; ---------------------------------------------------------. * If the test inputs are validated by the target library and the validator; asserts/crashes on invalid inputs, in-process fuzzing is not applicable.; * Bugs in the target library may accumulate without being detected. E.g. a memory; corruption that goes undetected at first and then leads to a crash while; testing another input. This is why it is highly recommended to run this; in-process fuzzer with all sanitizers to detect most bugs on the spot.; * It is harder to protect the in-process fuzzer from excessive memory; consumption and infinite loops in the target library (still possible).; * The target library should not have significant global state that is not; reset between the runs.; * Many interesting target libraries are not designed in a way that supports; the in-process fuzzer interface (e.g. require a file path instead of a; byte array).; * If a single test run takes a considerable fraction of a second (or; more) the speed benefit from the in-process fuzzer is negligible.; * If the target library runs persistent threads (that outlive; execution of one test) the fuzzing results will be unreliable. Q. So, what exactly this Fuzzer is good for?; --------------------------------------------. This Fuzzer might be a good choice for testing libraries that h",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:29678,test,testing,29678,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['testing']
Testability,"ports versions 6.0+ (at time of writing the latest announced version is 6.7). .. table:: DirectX Environments. ================== ========================================================; Environment Description; ================== ========================================================; ``pixel`` Pixel shader; ``vertex`` Vertex shader; ``geometry`` Geometry shader; ``hull`` Hull shader (tesselation); ``domain`` Domain shader (tesselation); ``compute`` Compute kernel; ``library`` Linkable ``dxil`` library; ``raygeneration`` Ray generation (ray tracing); ``intersection`` Ray intersection (ray tracing); ``anyhit`` Ray any collision (ray tracing); ``closesthit`` Ray closest collision (ray tracing); ``miss`` Ray miss (ray tracing); ``callable`` Callable shader (ray tracing); ``mesh`` Mesh shader; ``amplification`` Amplification shader; ================== ========================================================. Output Binaries; ===============. The DirectX runtime APIs read a file format based on the; `DirectX Specification. <https://github.com/Microsoft/DirectX-Specs>`_. In; different codebases the file format is referred to by different names; (specifically ``DXBC`` and ``DXILContainer``). Since the format is used to store; both ``DXBC`` and ``DXIL`` outputs, and the ultimate goal is to support both as; code generation targets in LLVM, the LLVM codebase uses a more neutral name,; ``DXContainer``. The ``DXContainer`` format is sparsely documented in the functional; specification, but a reference implementation exists in the; `DirectXShaderCompiler. <https://github.com/microsoft/DirectXShaderCompiler>`_. Support for generating ``DXContainer`` files in LLVM, is being added to the LLVM; MC layer for object streamers and writers, and to the Object and ObjectYAML; libraries for testing and object file tooling. For ``dxil`` targeting, bitcode emission into ``DXContainer`` files follows a; similar model to the ``-fembed-bitcode`` flag supported by clang for other; targets.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DirectXUsage.rst:3321,test,testing,3321,interpreter/llvm-project/llvm/docs/DirectXUsage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DirectXUsage.rst,1,['test'],['testing']
Testability,"possible even; for broken code. Recovery AST; ^^^^^^^^^^^^. The idea of Recovery AST is to use recovery nodes which act as a placeholder to; maintain the rough structure of the parsing tree, preserve locations and; children but have no language semantics attached to them. For example, consider the following mismatched function call:. .. code-block:: c++. int NoArg();; void test(int abc) {; NoArg(abc); // oops, mismatched function arguments.; }. Without Recovery AST, the invalid function call expression (and its child; expressions) would be dropped in the AST:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> col:15 used abc 'int'; `-CompoundStmt <col:20, line:4:1>. With Recovery AST, the AST looks like:. ::. |-FunctionDecl <line:1:1, col:11> NoArg 'int ()'; `-FunctionDecl <line:2:1, line:4:1> test 'void (int)'; |-ParmVarDecl <col:11, col:15> used abc 'int'; `-CompoundStmt <col:20, line:4:1>; `-RecoveryExpr <line:3:3, col:12> 'int' contains-errors; |-UnresolvedLookupExpr <col:3> '<overloaded function type>' lvalue (ADL) = 'NoArg'; `-DeclRefExpr <col:9> 'int' lvalue ParmVar 'abc' 'int'. An alternative is to use existing Exprs, e.g. CallExpr for the above example.; This would capture more call details (e.g. locations of parentheses) and allow; it to be treated uniformly with valid CallExprs. However, jamming the data we; have into CallExpr forces us to weaken its invariants, e.g. arg count may be; wrong. This would introduce a huge burden on consumers of the AST to handle such; ""impossible"" cases. So when we're representing (rather than correcting) errors,; we use a distinct recovery node type with extremely weak invariants instead. ``RecoveryExpr`` is the only recovery node so far. In practice, broken decls; need more detailed semantics preserved (the current ``Invalid`` flag works; fairly well), and completely broken statements with interesting internal; structure are rare (so ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:86523,test,test,86523,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,pp; clang-tools-extra/unittests/clang-tidy/ClangTidyDiagnosticConsumerTest.cpp; clang-tools-extra/unittests/clang-tidy/ClangTidyTest.h; clang-tools-extra/unittests/clang-tidy/DeclRefExprUtilsTest.cpp; clang-tools-extra/unittests/clang-tidy/GlobListTest.cpp; clang-tools-extra/unittests/clang-tidy/OptionsProviderTest.cpp; clang-tools-extra/unittests/clang-tidy/OverlappingReplacementsTest.cpp; clang-tools-extra/unittests/clang-tidy/ReadabilityModuleTest.cpp; clang-tools-extra/unittests/clang-tidy/TransformerClangTidyCheckTest.cpp; compiler-rt/include/sanitizer/linux_syscall_hooks.h; compiler-rt/include/sanitizer/memprof_interface.h; compiler-rt/include/sanitizer/netbsd_syscall_hooks.h; compiler-rt/include/xray/xray_interface.h; compiler-rt/include/xray/xray_log_interface.h; compiler-rt/lib/asan/asan_activation.h; compiler-rt/lib/asan/asan_lock.h; compiler-rt/lib/asan/asan_mapping.h; compiler-rt/lib/asan/asan_mapping_sparc64.h; compiler-rt/lib/asan/asan_rtl_static.cpp; compiler-rt/lib/asan/tests/asan_globals_test.cpp; compiler-rt/lib/builtins/fp_extend.h; compiler-rt/lib/builtins/fp_lib.h; compiler-rt/lib/builtins/fp_mode.h; compiler-rt/lib/builtins/fp_trunc.h; compiler-rt/lib/builtins/int_endianness.h; compiler-rt/lib/builtins/int_math.h; compiler-rt/lib/builtins/int_types.h; compiler-rt/lib/builtins/int_util.h; compiler-rt/lib/builtins/unwind-ehabi-helpers.h; compiler-rt/lib/builtins/ppc/DD.h; compiler-rt/lib/dfsan/dfsan_allocator.cpp; compiler-rt/lib/dfsan/dfsan_allocator.h; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.cpp; compiler-rt/lib/dfsan/dfsan_chained_origin_depot.h; compiler-rt/lib/dfsan/dfsan_flags.h; compiler-rt/lib/dfsan/dfsan_interceptors.cpp; compiler-rt/lib/dfsan/dfsan_origin.h; compiler-rt/lib/dfsan/dfsan_platform.h; compiler-rt/lib/dfsan/dfsan_thread.h; compiler-rt/lib/fuzzer/FuzzerCommand.h; compiler-rt/lib/fuzzer/FuzzerExtFunctions.h; compiler-rt/lib/fuzzer/FuzzerExtFunctionsDlsym.cpp; compiler-rt/lib/fuzzer/FuzzerExtFunctionsWeak.cpp; compiler,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:89880,test,tests,89880,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,pp; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_posix.h; compiler-rt/lib/gwp_asan/platform_specific/guarded_pool_allocator_tls.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_fuchsia.h; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.cpp; compiler-rt/lib/gwp_asan/platform_specific/mutex_posix.h; compiler-rt/lib/gwp_asan/platform_specific/utilities_fuchsia.cpp; compiler-rt/lib/gwp_asan/platform_specific/utilities_posix.cpp; compiler-rt/lib/gwp_asan/tests/backtrace.cpp; compiler-rt/lib/gwp_asan/tests/basic.cpp; compiler-rt/lib/gwp_asan/tests/compression.cpp; compiler-rt/lib/gwp_asan/tests/crash_handler_api.cpp; compiler-rt/lib/gwp_asan/tests/driver.cpp; compiler-rt/lib/gwp_asan/tests/enable_disable.cpp; compiler-rt/lib/gwp_asan/tests/harness.cpp; compiler-rt/lib/gwp_asan/tests/harness.h; compiler-rt/lib/gwp_asan/tests/iterate.cpp; compiler-rt/lib/gwp_asan/tests/late_init.cpp; compiler-rt/lib/gwp_asan/tests/mutex_test.cpp; compiler-rt/lib/gwp_asan/tests/options.cpp; compiler-rt/lib/gwp_asan/tests/slot_reuse.cpp; compiler-rt/lib/gwp_asan/tests/thread_contention.cpp; compiler-rt/lib/gwp_asan/tests/platform_specific/printf_sanitizer_common.cpp; compiler-rt/lib/hwasan/hwasan_checks.h; compiler-rt/lib/hwasan/hwasan_dynamic_shadow.h; compiler-rt/lib/hwasan/hwasan_flags.h; compiler-rt/lib/hwasan/hwasan_globals.cpp; compiler-rt/lib/hwasan/hwasan_globals.h; compiler-rt/lib/hwasan/hwasan_linux.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.cpp; compiler-rt/lib/hwasan/hwasan_poisoning.h; compiler-rt/lib/hwasan/hwasan_preinit.cpp; compiler-rt/lib/interception/interception_mac.cpp; compiler-rt/lib/interception/tests/interception_test_main.cpp; compiler-rt/lib/lsan/lsan.h; compiler-rt/lib/lsan/lsan_common.cpp; compiler-rt/lib/lsan/lsan_thread.cpp; compiler-rt/lib/lsan/lsan_thread.h; compiler-rt/lib/memprof/memprof_allocator.cpp; compiler-rt/lib/memprof/memprof_allocator.h; compiler-rt/lib/mem,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:93588,test,tests,93588,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,pp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103365,test,tests,103365,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,pp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103484,test,tests,103484,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"ppears"". Setting the calling convention on the caller and; callee is required for indirect calls to work, so people often ask why not; make the verifier reject this sort of thing. The answer is that this code has undefined behavior, but it is not illegal.; If we made it illegal, then every transformation that could potentially create; this would have to ensure that it doesn't, and there is valid code that can; create this sort of construct (in dead code). The sorts of things that can; cause this to happen are fairly contrived, but we still need to accept them.; Here's an example:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define internal void @bar(void()* %FP, i1 %cond) {; br i1 %cond, label %T, label %F; T:; call void %FP(); ret void; F:; call fastcc void %FP(); ret void; }; define void @test() {; %X = or i1 false, false; call void @bar(void()* @foo, i1 %X); ret void; }. In this example, ""test"" always passes ``@foo``/``false`` into ``bar``, which; ensures that it is dynamically called with the right calling conv (thus, the; code is perfectly well defined). If you run this through the inliner, you; get this (the explicit ""or"" is there so that the inliner doesn't dead code; eliminate a bunch of stuff):. .. code-block:: llvm. define fastcc void @foo() {; ret void; }; define void @test() {; %X = or i1 false, false; br i1 %X, label %T.i, label %F.i; T.i:; call void @foo(); br label %bar.exit; F.i:; call fastcc void @foo(); br label %bar.exit; bar.exit:; ret void; }. Here you can see that the inlining pass made an undefined call to ``@foo``; with the wrong calling convention. We really don't want to make the inliner; have to know about this sort of thing, so it needs to be valid code. In this; case, dead code elimination can trivially remove the undefined code. However,; if ``%X`` was an input argument to ``@test``, the inliner would produce this:. .. code-block:: llvm. define fastcc void @foo() {; ret void; }. define void @test(i1 %X) {; br i1 %X, l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst:10839,test,test,10839,interpreter/llvm-project/llvm/docs/FAQ.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/FAQ.rst,1,['test'],['test']
Testability,"pperPdf testRooWrapperPdf.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testGenericPdf testGenericPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsPdf testRooAbsPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooAbsCollection testRooAbsCollection.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooDataSet testRooDataSet.cxx LIBRARIES Tree RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/dataSet_with_errors_6_26_10.root); ROOT_ADD_GTEST(testRooFormula testRooFormula.cxx LIBRARIES RooFitCore ROOT::TestSupport); ROOT_ADD_GTEST(testRooProdPdf testRooProdPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testProxiesAndCategories testProxiesAndCategories.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testProxiesAndCategories_1.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v620.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v621.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v622.root; ${CMAKE_CURRENT_SOURCE_DIR}/categories_v624.root); ROOT_ADD_GTEST(testRooCollectionProxy testRooCollectionProxy.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooCollectionProxy_v626.root); ROOT_ADD_GTEST(testRooRealVar testRooRealVar.cxx LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooRealVar_data1.root). ROOT_ADD_GTEST(testRooAbsReal testRooAbsReal.cxx; LIBRARIES RooFitCore; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_1.root ${CMAKE_CURRENT_SOURCE_DIR}/testRooAbsReal_2.root); if(NOT MSVC OR win_broken_tests); # Disabled on Windows because it causes the following error:; # unknown file: error: SEH exception with code 0xc0000005 thrown in the test body.; # According to the internet, this has to do with gtest, so it's not a RooFit problem; ROOT_ADD_GTEST(testRooRealIntegral testRooRealIntegral.cxx LIBRARIES RooFitCore); endif(); if(clad); if(NOT MSVC OR MSVC_VERSION GREATER_EQUAL 1938); # Disabled on Windows with Visual Studio before v17.8 because it causes the following error:; # Assertion fa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:1995,test,testRooCollectionProxy,1995,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooCollectionProxy']
Testability,"pport in their AST representation. With LLVM, you don't need this support in the AST. Since all calls to; build LLVM IR go through the LLVM IR builder, the builder itself checked; to see if there was a constant folding opportunity when you call it. If; so, it just does the constant fold and return the constant instead of; creating an instruction. Well, that was easy :). In practice, we recommend always using; ``IRBuilder`` when generating code like this. It has no ""syntactic; overhead"" for its use (you don't have to uglify your compiler with; constant checks everywhere) and it can dramatically reduce the amount of; LLVM IR that is generated in some cases (particular for languages with a; macro preprocessor or that use a lot of constants). On the other hand, the ``IRBuilder`` is limited by the fact that it does; all of its analysis inline with the code as it is built. If you take a; slightly more complex example:. ::. ready> def test(x) (1+2+x)*(x+(1+2));; ready> Read function definition:; define double @test(double %x) {; entry:; %addtmp = fadd double 3.000000e+00, %x; %addtmp1 = fadd double %x, 3.000000e+00; %multmp = fmul double %addtmp, %addtmp1; ret double %multmp; }. In this case, the LHS and RHS of the multiplication are the same value.; We'd really like to see this generate ""``tmp = x+3; result = tmp*tmp;``""; instead of computing ""``x+3``"" twice. Unfortunately, no amount of local analysis will be able to detect and; correct this. This requires two transformations: reassociation of; expressions (to make the add's lexically identical) and Common; Subexpression Elimination (CSE) to delete the redundant add instruction.; Fortunately, LLVM provides a broad range of optimizations that you can; use, in the form of ""passes"". LLVM Optimization Passes; ========================. LLVM provides many optimization passes, which do many different sorts of; things and have different tradeoffs. Unlike other systems, LLVM doesn't; hold to the mistaken notion that one set of opt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:2472,test,test,2472,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,2,['test'],['test']
Testability,"pport is experimental::. clang -g -O1 -fsanitize=fuzzer mytarget.c # Builds the fuzz target w/o sanitizers; clang -g -O1 -fsanitize=fuzzer,address mytarget.c # Builds the fuzz target with ASAN; clang -g -O1 -fsanitize=fuzzer,signed-integer-overflow mytarget.c # Builds the fuzz target with a part of UBSAN; clang -g -O1 -fsanitize=fuzzer,memory mytarget.c # Builds the fuzz target with MSAN. This will perform the necessary instrumentation, as well as linking with the libFuzzer library.; Note that ``-fsanitize=fuzzer`` links in the libFuzzer's ``main()`` symbol. If modifying ``CFLAGS`` of a large project, which also compiles executables; requiring their own ``main`` symbol, it may be desirable to request just the; instrumentation without linking::. clang -fsanitize=fuzzer-no-link mytarget.c. Then libFuzzer can be linked to the desired driver by passing in; ``-fsanitize=fuzzer`` during the linking stage. .. _libfuzzer-corpus:. Corpus; ------. Coverage-guided fuzzers like libFuzzer rely on a corpus of sample inputs for the; code under test. This corpus should ideally be seeded with a varied collection; of valid and invalid inputs for the code under test; for example, for a graphics; library the initial corpus might hold a variety of different small PNG/JPG/GIF; files. The fuzzer generates random mutations based around the sample inputs in; the current corpus. If a mutation triggers execution of a previously-uncovered; path in the code under test, then that mutation is saved to the corpus for; future variations. LibFuzzer will work without any initial seeds, but will be less; efficient if the library under test accepts complex,; structured inputs. The corpus can also act as a sanity/regression check, to confirm that the; fuzzing entrypoint still works and that all of the sample inputs run through; the code under test without problems. If you have a large corpus (either generated by fuzzing or acquired by other means); you may want to minimize it while still preserving the f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:4150,test,test,4150,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"ppropriately reviewed, either by themself or by someone else. The list; of current code owners can be found in the file `CODE_OWNERS.TXT; <https://github.com/llvm/llvm-project/blob/main/llvm/CODE_OWNERS.TXT>`_ in the; root of the LLVM source tree. Note that code ownership is completely different than reviewers: anyone can; review a piece of code, and we welcome code review from anyone who is; interested. Code owners are the ""last line of defense"" to guarantee that all; patches that are committed are actually reviewed. Being a code owner is a somewhat unglamorous position, but it is incredibly; important for the ongoing success of the project. Because people get busy,; interests change, and unexpected things happen, code ownership is purely opt-in,; and anyone can choose to resign their ""title"" at any time. For now, we do not; have an official policy on how one gets elected to be a code owner. .. _include a testcase:. Test Cases; ----------. Developers are required to create test cases for any bugs fixed and any new; features added. Some tips for getting your testcase approved:. * All feature and regression test cases are added to the ``llvm/test``; directory. The appropriate sub-directory should be selected (see the; :doc:`Testing Guide <TestingGuide>` for details). * Test cases should be written in :doc:`LLVM assembly language <LangRef>`. * Test cases, especially for regressions, should be reduced as much as possible,; by :doc:`bugpoint <Bugpoint>` or manually. It is unacceptable to place an; entire failing program into ``llvm/test`` as this creates a *time-to-test*; burden on all developers. Please keep them short. * Avoid adding links to resources that are not available to the entire; community, such as links to private bug trackers, internal corporate; documentation, etc. Instead, add sufficient comments to the test to provide; the context behind such links. Note that llvm/test and clang/test are designed for regression and small feature; tests only. More extensi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:9546,test,test,9546,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"pprox Z_{ik}=; \sum^n_{j=1}{\frac{1}{\sigma^2_j}}{\frac{\partial f_j}{\theta_i}}; {\frac{\partial f_j}{\theta_k}}; $$. Then the equations for parameter increments are:. $$; \left(\frac{\partial\chi^2}{\partial\theta_i}\right)_; {\vec\theta={\vec\theta}^0} +\sum_k Z_{ik}\cdot(\theta_k-\theta^0_k) =; 0, \qquad i=1\ldots m; $$. Remarkable feature of algorithm is the technique for step restriction.; For an initial value of parameter ${\vec\theta}^0$ a parallelepiped; $P_0$ is built with the center at ${\vec\theta}^0$ and axes parallel; to coordinate axes $\theta_i$. The lengths of parallelepiped sides; along i-th axis is $2b_i$, where $b_i$ is such a value that the; functions $f_j(\vec\theta)$ are quasi-linear all over the; parallelepiped. FUMILI takes into account simple linear inequalities in the form:. $$ \theta_i^{min}\le\theta_i\le\theta^{max}_i$$. They form parallelepiped $P$ ($P_0$ may be deformed by $P$). Very; similar step formulae are used in FUMILI for negative logarithm of; the likelihood function with the same idea - linearization of function; argument. ## Neural Networks. ### Introduction. Neural Networks are used in various fields for data analysis and; classification, both for research and commercial institutions. Some; randomly chosen examples are image analysis, financial movements'; predictions and analysis, or sales forecast and product shipping; optimization. In particles physics neural networks are mainly used for; classification tasks (signal over background discrimination). A vast; majority of commonly used neural networks are multilayer perceptrons.; This implementation of multilayer perceptrons is inspired from the; `MLPfit` package, which remains one of the fastest tools for neural; networks studies. ### The MLP. The multilayer perceptron is a simple feed-forward network with the; following structure showed on the left. ![](pictures/0300008D.png). It is made of neurons characterized by a bias and weighted links in; between - let's call those l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:69712,log,logarithm,69712,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['log'],['logarithm']
Testability,precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Lower; - `25`; - `24`; - `1`; - :part:`96%`; * - flang/include/flang/Lower/Support; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Optimizer/Builder; - `7`; - `7`; - `0`; - :good:`100%`; * ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27572,test,tests,27572,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"predefined:. **name** *[required]* The name of the test suite, for use in reports and; diagnostics. **test_format** *[required]* The test format object which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:16445,test,test,16445,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,3,['test'],"['test', 'tests']"
Testability,"previous example, you need to; define a `Filter` function in a `YAML` configuration file; and add the `csa_mark_sanitized` function. .. code-block:: YAML. Filters:; - Name: csa_mark_sanitized; Args: [0]. Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe to; be used after this point, because its contents are verified. It is the; responsibility of the programmer to ensure that this verification was indeed; correct. Please note that `csa_mark_sanitized` function is only declared and; used during Clang Static Analysis and skipped in (production) builds. Further examples of injection vulnerabilities this checker can find. .. code-block:: c. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-security to suppress compiler warning.; void test() {; char s[10], buf[10];; fscanf(stdin, ""%s"", s); // 's' marked as tainted. sprintf(buf, s); // warn: untrusted data used as a format string; }. void test() {; size_t ts;; scanf(""%zd"", &ts); // 'ts' marked as tainted; int *p = (int *)malloc(ts * sizeof(int));; // warn: untrusted data used as buffer size; }. There are built-in sources, propagations and sinks even if no external taint; configuration is provided. Default sources:; ``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``,; ``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``,; ``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, ``getnameinfo``,; ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, ``readlinkat``,; ``scanf``, ``scanf_s``, ``socket``, ``wgetch``. Default propagations rules:; ``atoi``, ``atol``, ``atoll``, ``basename``, ``dirname``, ``fgetc``,; ``fgetln``, ``fgets``, ``fnmatch``, ``fread``, ``fscanf``, ``fscanf_s``,; ``index``, ``inflate``, ``isalnum``, ``isalpha``, ``isascii``, ``isblank``,; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:70585,test,test,70585,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"primary aims of ``llvm-jitlink`` was to enable readable regression; tests for JITLink. To do this it supports two options:. The ``-noexec`` option tells llvm-jitlink to stop after looking up the entry; point, and before attempting to execute it. Since the linked code is not; executed, this can be used to link for other targets even if you do not have; access to the target being linked (the ``-define-abs`` or ``-phony-externals``; options can be used to supply any missing definitions in this case). The ``-check <check-file>`` option can be used to run a set of ``jitlink-check``; expressions against working memory. It is typically used in conjunction with; ``-noexec``, since the aim is to validate JIT'd memory rather than to run the; code and ``-noexec`` allows us to link for any supported target architecture; from the current process. In ``-check`` mode, ``llvm-jitlink`` will scan the; given check-file for lines of the form ``# jitlink-check: <expr>``. See; examples of this usage in ``llvm/test/ExecutionEngine/JITLink``. Remote execution via llvm-jitlink-executor; ------------------------------------------. By default ``llvm-jitlink`` will link the given objects into its own process,; but this can be overridden by two options:. The ``-oop-executor[=/path/to/executor]`` option tells ``llvm-jitlink`` to; execute the given executor (which defaults to ``llvm-jitlink-executor``) and; communicate with it via file descriptors which it passes to the executor; as the first argument with the format ``filedescs=<in-fd>,<out-fd>``. The ``-oop-executor-connect=<host>:<port>`` option tells ``llvm-jitlink`` to; connect to an already running executor via TCP on the given host and port. To; use this option you will need to start ``llvm-jitlink-executor`` manually with; ``listen=<host>:<port>`` as the first argument. Harness mode; ------------. The ``-harness`` option allows a set of input objects to be designated as a test; harness, with the regular object files implicitly treated as",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:39641,test,test,39641,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['test'],['test']
Testability,"prints TRUE or FALSE according to; the value of its argument. If a call occurs outside an inlined function,; nothing is printed. The intended use of this checker is to assert that a function is inlined at; least once (by passing 'true' and expecting a warning), or to assert that a; function is never inlined (by passing 'false' and expecting no warning). The; argument is technically unnecessary but is intended to clarify intent. You might wonder why we can't print TRUE if a function is ever inlined and; FALSE if it is not. The problem is that any inlined function could conceivably; also be analyzed as a top-level function (in which case both TRUE and FALSE; would be printed), depending on the value of the -analyzer-inlining option. In C, the argument can be typed as 'int' or as '_Bool'. Example usage::. int inlined() {; clang_analyzer_checkInlined(true); // expected-warning{{TRUE}}; return 42;; }. void topLevel() {; clang_analyzer_checkInlined(false); // no-warning (not inlined); int value = inlined();; // This assertion will not be valid if the previous call was not inlined.; clang_analyzer_eval(value == 42); // expected-warning{{TRUE}}; }. - ``void clang_analyzer_warnIfReached();``. Generate a warning if this line of code gets reached by the analyzer. Example usage::. if (true) {; clang_analyzer_warnIfReached(); // expected-warning{{REACHABLE}}; }; else {; clang_analyzer_warnIfReached(); // no-warning; }. - ``void clang_analyzer_numTimesReached();``. Same as above, but include the number of times this call expression; gets reached by the analyzer during the current analysis. Example usage::. for (int x = 0; x < 3; ++x) {; clang_analyzer_numTimesReached(); // expected-warning{{3}}; }. - ``void clang_analyzer_warnOnDeadSymbol(int);``. Subscribe for a delayed warning when the symbol that represents the value of; the argument is garbage-collected by the analyzer. When calling 'clang_analyzer_warnOnDeadSymbol(x)', if value of 'x' is a; symbol, then this symbol is marked",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:4758,assert,assertion,4758,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['assert'],['assertion']
Testability,"program:: llvm-exegesis. SYNOPSIS; --------. :program:`llvm-exegesis` [*options*]. DESCRIPTION; -----------. :program:`llvm-exegesis` is a benchmarking tool that uses information available; in LLVM to measure host machine instruction characteristics like latency,; throughput, or port decomposition. Given an LLVM opcode name and a benchmarking mode, :program:`llvm-exegesis`; generates a code snippet that makes execution as serial (resp. as parallel) as; possible so that we can measure the latency (resp. inverse throughput/uop decomposition); of the instruction.; The code snippet is jitted and, unless requested not to, executed on the; host subtarget. The time taken (resp. resource usage) is measured using; hardware performance counters. The result is printed out as YAML; to the standard output. The main goal of this tool is to automatically (in)validate the LLVM's TableDef; scheduling models. To that end, we also provide analysis of the results. :program:`llvm-exegesis` can also benchmark arbitrary user-provided code; snippets. SUPPORTED PLATFORMS; -------------------. :program:`llvm-exegesis` currently only supports X86 (64-bit only), ARM (AArch64; only), MIPS, and PowerPC (PowerPC64LE only) on Linux for benchmarking. Not all; benchmarking functionality is guaranteed to work on every platform.; :program:`llvm-exegesis` also has a separate analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:1100,benchmark,benchmark,1100,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark']
Testability,"program:`llvm-debuginfo-analyzer` parses debug and text sections in; binary object files and prints their contents in a logical view, which; is a human readable representation that closely matches the structure; of the original user source code. Supported object file formats include; ELF, Mach-O, PDB and COFF. The **logical view** abstracts the complexity associated with the; different low-level representations of the debugging information that; is embedded in the object file. :program:`llvm-debuginfo-analyzer`; produces a canonical view of the debug information regardless of how it; is formatted. The same logical view will be seen regardless of object; file format, assuming the debug information correctly represents the; same original source code. The logical view includes the following **logical elements**: *type*,; *scope*, *symbol* and *line*, which are the basic software elements used; in the C/C++ programming language. Each logical element has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option:`--select-offsets`). Also, the output can; be limited to specified logical elements using (:option:`--select-lines`,; :option:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`). :program:`llvm-debuginfo-analyzer` can also compare a set of logical; views (:option:`--compare`), to find differences and identify possible; debug info",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:1298,log,logical,1298,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a non-zero exit code if ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1631,test,test,1631,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"project> cmake ... -DLLVM_INTEGRATED_CRT_ALLOC=D:\git\rpmalloc. This flag needs to be used along with the static CRT, ie. if building the; Release target, add -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded. **LLVM_INSTALL_DOXYGEN_HTML_DIR**:STRING; The path to install Doxygen-generated HTML documentation to. This path can; either be absolute or relative to the *CMAKE_INSTALL_PREFIX*. Defaults to; ``${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html``. **LLVM_LINK_LLVM_DYLIB**:BOOL; If enabled, tools will be linked with the libLLVM shared library. Defaults; to OFF. Setting LLVM_LINK_LLVM_DYLIB to ON also sets LLVM_BUILD_LLVM_DYLIB; to ON.; This option is not available on Windows. **LLVM_LIT_ARGS**:STRING; Arguments given to lit. ``make check`` and ``make clang-test`` are affected.; By default, ``'-sv --no-progress-bar'`` on Visual C++ and Xcode, ``'-sv'`` on; others. **LLVM_LIT_TOOLS_DIR**:PATH; The path to GnuWin32 tools for tests. Valid on Windows host. Defaults to; the empty string, in which case lit will look for tools needed for tests; (e.g. ``grep``, ``sort``, etc.) in your %PATH%. If GnuWin32 is not in your; %PATH%, then you can set this variable to the GnuWin32 directory so that; lit can find tools needed for tests in that directory. **LLVM_NATIVE_TOOL_DIR**:STRING; Full path to a directory containing executables for the build host; (containing binaries such as ``llvm-tblgen`` and ``clang-tblgen``). This is; intended for cross-compiling: if the user sets this variable and the; directory contains executables with the expected names, no separate; native versions of those executables will be built. **LLVM_NO_INSTALL_NAME_DIR_FOR_BUILD_TREE**:BOOL; Defaults to ``OFF``. If set to ``ON``, CMake's default logic for library IDs; on Darwin in the build tree will be used. Otherwise the install-time library; IDs will be used in the build tree as well. Mainly useful when other CMake; library ID control variables (e.g., ``CMAKE_INSTALL_NAME_DIR``) are being; set to non-standard values.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:31108,test,tests,31108,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['test'],['tests']
Testability,"proof; quick query - or; proof-dq2); and allow to {browse, register, remove, verify} datasets on a given; PROOF master. See $ROOTSYS/etc/proof/utils/pq2/README for more; information. Improvements. Enable by default schema evolution in TMessage; can be; disabled setting 'Proof.SchemaEvolution:; 0' .; Extend the functionality of the dataset API to obtaine; information on per-server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:5804,test,tested,5804,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['test'],['tested']
Testability,pstl/internal/glue_algorithm_impl.h; pstl/include/pstl/internal/glue_execution_defs.h; pstl/include/pstl/internal/glue_memory_defs.h; pstl/include/pstl/internal/glue_memory_impl.h; pstl/include/pstl/internal/glue_numeric_defs.h; pstl/include/pstl/internal/glue_numeric_impl.h; pstl/include/pstl/internal/numeric_fwd.h; pstl/include/pstl/internal/parallel_backend.h; pstl/include/pstl/internal/parallel_backend_omp.h; pstl/include/pstl/internal/parallel_backend_serial.h; pstl/include/pstl/internal/parallel_backend_utils.h; pstl/include/pstl/internal/parallel_impl.h; pstl/include/pstl/internal/omp/parallel_for.h; pstl/include/pstl/internal/omp/parallel_for_each.h; pstl/include/pstl/internal/omp/parallel_invoke.h; pstl/include/pstl/internal/omp/parallel_reduce.h; pstl/include/pstl/internal/omp/parallel_scan.h; pstl/include/pstl/internal/omp/parallel_stable_partial_sort.h; pstl/include/pstl/internal/omp/parallel_transform_scan.h; pstl/include/pstl/internal/omp/util.h; third-party/benchmark/cmake/thread_safety_attributes.cpp; third-party/benchmark/src/arraysize.h; third-party/benchmark/src/benchmark_api_internal.h; third-party/benchmark/src/benchmark_register.h; third-party/benchmark/src/benchmark_runner.h; third-party/benchmark/src/check.h; third-party/benchmark/src/colorprint.h; third-party/benchmark/src/commandlineflags.h; third-party/benchmark/src/complexity.h; third-party/benchmark/src/counter.h; third-party/benchmark/src/cycleclock.h; third-party/benchmark/src/internal_macros.h; third-party/benchmark/src/log.h; third-party/benchmark/src/mutex.h; third-party/benchmark/src/perf_counters.h; third-party/benchmark/src/re.h; third-party/benchmark/src/sleep.h; third-party/benchmark/src/statistics.h; third-party/benchmark/src/string_util.h; third-party/benchmark/src/thread_manager.h; third-party/benchmark/src/thread_timer.h; third-party/benchmark/src/timers.h; utils/bazel/llvm-project-overlay/clang/include/clang/Config/config.h; utils/bazel/llvm-project-overlay/llvm/include/ll,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:417743,benchmark,benchmark,417743,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmark']
Testability,"pt which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:6978,test,tests,6978,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,"pt without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a script `myMacro.C` in the; background, redirect the output into a file `myMacro.log`, and exit; after the script execution, use the following syntax:. ```; root -b -q myMacro.C > myMacro.log; ```. If you need to pass a parameter to the script use:. ```; root -b -q 'myMacro.C(3)' > myMacro.log; ```. Be mindful of the quotes, i.e. if you need to pass a string as a; parameter, the syntax is:. ```; root -b -q 'myMacro.C(""text"")' > myMacro.log; ```. You can build a shared library with ACLiC and then use this shared; library on the command line for a quicker execution (i.e. the compiled; speed rather than the interpreted speed). See also ""Cling the C++; Interpreter"". ```; root -b -q myMacro.so > myMacro.log; ```. ROOT has a powerful C/C++ interpreter giving you access to all available; ROOT classes, global variables, and functions via the command line. By; typing C++ statements at the prompt, you can create objects, call; functions, execute scripts, etc. For example:. ``` {.cpp}; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; ```. To exit the ROOT session, type `.q`. ``` {.cpp}; root[] .q; ```. ## Using the GUI. The basic whiteboard on which an object is drawn in ROOT is called a; canvas (defined by the class **`TCanvas`**). Every object in the; canvas is a graphical object in the sense that you can grab it, resize; it, and change some characteristics using the mouse. The canvas area; can be divided in several sub areas, so-called pads; (the class **`TPad`**). A pad is a canvas sub area that can contain; other pads or graphical objects. At any one time, just one pad is th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:4735,log,log,4735,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['log']
Testability,"ptimization levels used by; :program:`clang`. .. option:: -mtriple=<target triple>. Override the target triple specified in the input file with the specified; string. .. option:: -march=<arch>. Specify the architecture for which to generate assembly, overriding the target; encoded in the input file. See the output of ``llc -help`` for a list of; valid architectures. By default this is inferred from the target triple or; autodetected to the current architecture. .. option:: -mcpu=<cpuname>. Specify a specific chip in the current architecture to generate code for.; By default this is inferred from the target triple and autodetected to; the current architecture. For a list of available CPUs, use:. .. code-block:: none. llvm-as < /dev/null | llc -march=xyz -mcpu=help. .. option:: -filetype=<output file type>. Specify what kind of output ``llc`` should generated. Options are: ``asm``; for textual assembly ( ``'.s'``), ``obj`` for native object files (``'.o'``); and ``null`` for not emitting anything (for performance testing). Note that not all targets support all options. .. option:: -mattr=a1,+a2,-a3,... Override or control specific attributes of the target, such as whether SIMD; operations are enabled or not. The default set of attributes is set by the; current CPU. For a list of available attributes, use:. .. code-block:: none. llvm-as < /dev/null | llc -march=xyz -mattr=help. .. option:: --frame-pointer. Specify effect of frame pointer elimination optimization (all,non-leaf,none). .. option:: --disable-excess-fp-precision. Disable optimizations that may produce excess precision for floating point.; Note that this option can dramatically slow down code on some systems; (e.g. X86). .. option:: --enable-no-infs-fp-math. Enable optimizations that assume no Inf values. .. option:: --enable-no-nans-fp-math. Enable optimizations that assume no NAN values. .. option:: --enable-no-signed-zeros-fp-math. Enable FP math optimizations that assume the sign of 0 is insignificant. .",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llc.rst:2710,test,testing,2710,interpreter/llvm-project/llvm/docs/CommandGuide/llc.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llc.rst,1,['test'],['testing']
Testability,"ption:: --analysis-clustering=[dbscan,naive]. Specify the clustering algorithm to use. By default DBSCAN will be used.; Naive clustering algorithm is better for doing further work on the; `-analysis-inconsistencies-output-file=` output, it will create one cluster; per opcode, and check that the cluster is stable (all points are neighbours). .. option:: --analysis-numpoints=<dbscan numPoints parameter>. Specify the numPoints parameters to be used for DBSCAN clustering; (`analysis` mode, DBSCAN only). .. option:: --analysis-clustering-epsilon=<dbscan epsilon parameter>. Specify the epsilon parameter used for clustering of benchmark points; (`analysis` mode). .. option:: --analysis-inconsistency-epsilon=<epsilon>. Specify the epsilon parameter used for detection of when the cluster; is different from the LLVM schedule profile values (`analysis` mode). .. option:: --analysis-display-unstable-clusters. If there is more than one benchmark for an opcode, said benchmarks may end up; not being clustered into the same cluster if the measured performance; characteristics are different. by default all such opcodes are filtered out.; This flag will instead show only such unstable opcodes. .. option:: --ignore-invalid-sched-class=false. If set, ignore instructions that do not have a sched class (class idx = 0). .. option:: --mtriple=<triple name>. Target triple. See `-version` for available targets. .. option:: --mcpu=<cpu name>. If set, measure the cpu characteristics using the counters for this CPU. This; is useful when creating new sched models (the host CPU is unknown to LLVM).; (`-mcpu=help` for details). .. option:: --analysis-override-benchmark-triple-and-cpu. By default, llvm-exegesis will analyze the benchmarks for the triple/CPU they; were measured for, but if you want to analyze them for some other combination; (specified via `-mtriple`/`-mcpu`), you can pass this flag. .. option:: --dump-object-to-disk=true. If set, llvm-exegesis will dump the generated code to a tempo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:16395,benchmark,benchmark,16395,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"ptions in this section are frontend-only and therefore if used; with regular clang driver they require frontend forwarding, e.g. ``-cc1``; or ``-Xclang``. .. _opencl_finclude_default_header:. .. option:: -finclude-default-header. Adds most of builtin types and function declarations during compilations. By; default the OpenCL headers are not loaded by the frontend and therefore certain; builtin types and most of builtin functions are not declared. To load them; automatically this flag can be passed to the frontend (see also :ref:`the; section on the OpenCL Header <opencl_header>`):. .. code-block:: console. $ clang -Xclang -finclude-default-header test.cl. Alternatively the internal header `opencl-c.h` containing the declarations; can be included manually using ``-include`` or ``-I`` followed by the path; to the header location. The header can be found in the clang source tree or; installation directory. .. code-block:: console. $ clang -I<path to clang sources>/lib/Headers/opencl-c.h test.cl; $ clang -I<path to clang installation>/lib/clang/<llvm version>/include/opencl-c.h/opencl-c.h test.cl. In this example it is assumed that the kernel code contains; ``#include <opencl-c.h>`` just as a regular C include. Because the header is very large and long to parse, PCH (:doc:`PCHInternals`); and modules (:doc:`Modules`) can be used internally to improve the compilation; speed. To enable modules for OpenCL:. .. code-block:: console. $ clang --target=spir-unknown-unknown -c -emit-llvm -Xclang -finclude-default-header -fmodules -fimplicit-module-maps -fmodules-cache-path=<path to the generated module> test.cl. Another way to circumvent long parsing latency for the OpenCL builtin; declarations is to use mechanism enabled by :ref:`-fdeclare-opencl-builtins; <opencl_fdeclare_opencl_builtins>` flag that is available as an alternative; feature. .. _opencl_fdeclare_opencl_builtins:. .. option:: -fdeclare-opencl-builtins. In addition to regular header includes with builtin types and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:3564,test,test,3564,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"ptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-ObjCProperty:. osx.ObjCProperty (ObjC); """"""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Objective-C properties. .. code-block:: objc. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-SecKeychainAPI:. osx.SecKeychainAPI (C); """"""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Secure Keychain APIs. .. literalinclude:: checkers/seckeychainapi_example.m; :language: objc. .. _osx-cocoa-AtSync:. osx.cocoa.AtSync (ObjC); """"""""""""""""""""""""""""""""""""""""""""""; Check for nil pointers used as mutexes for @synchronized. .. code-block:: objc. void test(id x) {; if (!x); @synchronized(x) {} // warn: nil value used as mutex; }. void test() {; id y;; @synchronized(y) {} // warn: uninitialized value used as mutex; }. .. _osx-cocoa-AutoreleaseWrite:. osx.cocoa.AutoreleaseWrite; """"""""""""""""""""""""""""""""""""""""""""""""""""; Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C. .. _osx-cocoa-ClassRelease:. osx.cocoa.ClassRelease (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for sending 'retain', 'release', or 'autorelease' directly to a Class. .. code-block:: objc. @interface MyClass : NSObject; @end. void test(void) {; [MyClass release]; // warn; }. .. _osx-cocoa-Dealloc:. osx.cocoa.Dealloc (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C classes that lack a correct implementation of -dealloc. .. literalinclude:: checkers/dealloc_example.m; :language: objc. .. _osx-cocoa-IncompatibleMethodTypes:. osx.cocoa.IncompatibleMethodTypes (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C method signatures with type incompatibilities. .. code-block:: objc. @interface MyClass1 : NSObject; - (int",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:36266,test,test,36266,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,pu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdagradOptimizationCpu TestMethodDLAdagradOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adagrad-Optimization-Cpu COMMAND testMethodDLAdagradOptimizationCpu). # DNN - MethodDL RMSProp Optimization CPU; ROOT_EXECUTABLE(testMethodDLRMSPropOptimizationCpu TestMethodDLRMSPropOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-RMSProp-Optimization-Cpu COMMAND testMethodDLRMSPropOptimizationCpu). # DNN - MethodDL Adadelta Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdadeltaOptimizationCpu TestMethodDLAdadeltaOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adadelta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFu,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:6626,test,testMethodDLAdadeltaOptimizationCpu,6626,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testMethodDLAdadeltaOptimizationCpu']
Testability,"pu_x86_64 = 5,; cpu_x86 = 7,; cpu_PowerPC = 8; };. struct Info {; CPUs cpu;; uint32_t flags;; };. To support reading and writing of this enumeration, you can define a; ScalarEnumerationTraits specialization on CPUs, which can then be used; as a field type:. .. code-block:: c++. using llvm::yaml::ScalarEnumerationTraits;; using llvm::yaml::MappingTraits;; using llvm::yaml::IO;. template <>; struct ScalarEnumerationTraits<CPUs> {; static void enumeration(IO &io, CPUs &value) {; io.enumCase(value, ""x86_64"", cpu_x86_64);; io.enumCase(value, ""x86"", cpu_x86);; io.enumCase(value, ""PowerPC"", cpu_PowerPC);; }; };. template <>; struct MappingTraits<Info> {; static void mapping(IO &io, Info &info) {; io.mapRequired(""cpu"", info.cpu);; io.mapOptional(""flags"", info.flags, 0);; }; };. When reading YAML, if the string found does not match any of the strings; specified by enumCase() methods, an error is automatically generated.; When writing YAML, if the value being written does not match any of the values; specified by the enumCase() methods, a runtime assertion is triggered. BitValue; --------; Another common data structure in C++ is a field where each bit has a unique; meaning. This is often used in a ""flags"" field. YAML I/O has support for; converting such fields to a flow sequence. For instance suppose you; had the following bit flags defined:. .. code-block:: c++. enum {; flagsPointy = 1; flagsHollow = 2; flagsFlat = 4; flagsRound = 8; };. LLVM_YAML_STRONG_TYPEDEF(uint32_t, MyFlags). To support reading and writing of MyFlags, you specialize ScalarBitSetTraits<>; on MyFlags and provide the bit values and their names. .. code-block:: c++. using llvm::yaml::ScalarBitSetTraits;; using llvm::yaml::MappingTraits;; using llvm::yaml::IO;. template <>; struct ScalarBitSetTraits<MyFlags> {; static void bitset(IO &io, MyFlags &value) {; io.bitSetCase(value, ""hollow"", flagHollow);; io.bitSetCase(value, ""flat"", flagFlat);; io.bitSetCase(value, ""round"", flagRound);; io.bitSetCase(value, ""po",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/YamlIO.rst:9434,assert,assertion,9434,interpreter/llvm-project/llvm/docs/YamlIO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/YamlIO.rst,1,['assert'],['assertion']
Testability,"put file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` exits with a non-zero exit code if there is an error.; Otherwise, it exits wit",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1672,test,test,1672,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"put-style <LLVM|GNU|JSON>. Specify the preferred output style. Defaults to ``LLVM``. When the output; style is set to ``GNU``, the tool follows the style of GNU's **addr2line**.; The differences from the ``LLVM`` style are:. * Does not print the column of a source code location. * Does not add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9340,test,test,9340,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"put:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. optio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3814,test,test,3814,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"put; sequences from the instruction scheduler. For example,. .. code-block:: llvm. ; CHECK-DAG: add [[REG1:r[0-9]+]], r1, r2; ; CHECK-DAG: add [[REG2:r[0-9]+]], r3, r4; ; CHECK: mul r5, [[REG1]], [[REG2]]. In this case, any order of that two ``add`` instructions will be allowed. If you are defining `and` using variables in the same ``CHECK-DAG:`` block,; be aware that the definition rule can match `after` its use. So, for instance, the code below will pass:. .. code-block:: text. ; CHECK-DAG: vmov.32 [[REG2:d[0-9]+]][0]; ; CHECK-DAG: vmov.32 [[REG2]][1]; vmov.32 d0[1]; vmov.32 d0[0]. While this other code, will not:. .. code-block:: text. ; CHECK-DAG: vmov.32 [[REG2:d[0-9]+]][0]; ; CHECK-DAG: vmov.32 [[REG2]][1]; vmov.32 d1[1]; vmov.32 d0[0]. While this can be very useful, it's also dangerous, because in the case of; register sequence, you must have a strong order (read before write, copy before; use, etc). If the definition your test is looking for doesn't match (because; of a bug in the compiler), it may match further away from the use, and mask; real bugs away. In those cases, to enforce the order, use a non-DAG directive between DAG-blocks. A ``CHECK-DAG:`` directive skips matches that overlap the matches of any; preceding ``CHECK-DAG:`` directives in the same ``CHECK-DAG:`` block. Not only; is this non-overlapping behavior consistent with other directives, but it's; also necessary to handle sets of non-unique strings or patterns. For example,; the following directives look for unordered log entries for two tasks in a; parallel program, such as the OpenMP runtime:. .. code-block:: text. // CHECK-DAG: [[THREAD_ID:[0-9]+]]: task_begin; // CHECK-DAG: [[THREAD_ID]]: task_end; //; // CHECK-DAG: [[THREAD_ID:[0-9]+]]: task_begin; // CHECK-DAG: [[THREAD_ID]]: task_end. The second pair of directives is guaranteed not to match the same log entries; as the first pair even though the patterns are identical and even if the text; of the log entries is identical because the th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:20200,test,test,20200,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"py RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} tmva/pytorch/*.py); list(APPEND pyveto ${tmva_veto_py}); endif(); # disable PyTorch model file used by TMVA_CNN_Classification.C; list(APPEND pyveto tmva/PyTorch_Generate_CNN_Model.py). if(NOT ROOT_geom_FOUND); list(APPEND pyveto pyroot/geometry.py); endif(). # Now glob all vetos for pyroot; file(GLOB pyveto RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${pyveto}). list(LENGTH pytutorials nTotal); # Apply global .C/.py veto from above:; list(REMOVE_ITEM pytutorials ${tutorials_veto}); list(REMOVE_ITEM pytutorials ${pyveto}); list(LENGTH pytutorials nAfterVeto). message(STATUS ""${nAfterVeto}/${nTotal} python tutorials have been activated.""). #---Python tutorials dependencies--------------------------------------; set(pyroot-ntuple1-depends tutorial-pyroot-hsimple-py); set(pyroot-h1ReadAndDraw-depends tutorial-pyroot-hsimple-py); set(pyroot-benchmarks-depends tutorial-pyroot-hsimple-py; tutorial-pyroot-fit1-py; tutorial-pyroot-na49view-py; tutorial-pyroot-h1ReadAndDraw-py; tutorial-pyroot-ntuple1-py); set(pyroot-fit1-depends tutorial-hist-fillrandom-py); set(pyroot-na49view-depends tutorial-pyroot-geometry-py); set(roofit-rf503_wspaceread-depends tutorial-roofit-rf502_wspacewrite-py); set(roofit-rf618_mixture_models-depends tutorial-dataframe-df106_HiggsToFourLeptons-py). # Avoid a race condition: make sure Python tutorial is run after C++ tutorial; set(roofit-rf104_classfactory-depends tutorial-roofit-rf104_classfactory); set(roofit-rf512_wsfactory_oper-depends tutorial-roofit-rf512_wsfactory_oper); set (tmva-TMVA_Higgs_Classification-depends tutorial-tmva-TMVA_Higgs_Classification); set (tmva-TMVA_CNN_Classification-depends tutorial-tmva-TMVA_CNN_Classification); set (tmva-TMVA_RNN_Classification-depends tutorial-tmva-TMVA_RNN_Classification). #----------------------------------------------------------------------; # List requirements for python tutorials.; # To add a new requirement, add a glob expression that's named requires_<packag",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:30985,benchmark,benchmarks-depends,30985,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['benchmark'],['benchmarks-depends']
Testability,py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-Classification); set(PyMVA-Keras-Regression-depends PyMVA-Torch-Regression); set(PyMVA-Keras-Multiclass-depends PyMVA-Torch-Multiclass); endif(). # Test PyKeras: Binary classification; ROOT_EXECUTABLE(testPyKerasClassification testPyKerasClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Keras-Classif,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3417,test,testPyTorchMulticlass,3417,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,1,['test'],['testPyTorchMulticlass']
Testability,"pyContent(2, ptr, ptr, length, &outData);; // warn: release data before another call to the allocator. if (st == noErr); SecKeychainItemFreeContent(ptr, outData);; }. void test() {; SecKeychainItemRef itemRef = 0;; SecKeychainAttributeInfo *info = 0;; SecItemClass *itemClass = 0;; SecKeychainAttributeList *attrList = 0;; UInt32 *length = 0;; void *outData = 0;. OSStatus st =; SecKeychainItemCopyAttributesAndData(itemRef, info,; itemClass, &attrList,; length, &outData);. SecKeychainItemFreeContent(attrList, outData);; // warn: deallocator doesn't match the allocator; }. osx.cocoa.AtSync; (ObjC); Check for nil pointers used as mutexes for @synchronized. void test(id x) {; if (!x); @synchronized(x) {} // warn: nil value used as mutex; }. void test() {; id y;; @synchronized(y) {} // warn: uninitialized value used as mutex; }. osx.cocoa.ClassRelease; (ObjC); Check for sending retain, release, or ; autorelease directly to a class. @interface MyClass : NSObject; @end. void test(void) {; [MyClass release]; // warn; }. osx.cocoa.Dealloc; (ObjC); Warn about Objective-C classes that lack a correct implementation; of -dealloc. @interface MyObject : NSObject {; id _myproperty;; }; @end. @implementation MyObject // warn: lacks 'dealloc'; @end. @interface MyObject : NSObject {}; @property(assign) id myproperty;; @end. @implementation MyObject // warn: does not send 'dealloc' to super; - (void)dealloc {; self.myproperty = 0;; }; @end. @interface MyObject : NSObject {; id _myproperty;; }; @property(retain) id myproperty;; @end. @implementation MyObject; @synthesize myproperty = _myproperty;; // warn: var was retained but wasn't released; - (void)dealloc {; [super dealloc];; }; @end. @interface MyObject : NSObject {; id _myproperty;; }; @property(assign) id myproperty;; @end. @implementation MyObject; @synthesize myproperty = _myproperty;; // warn: var wasn't retained but was released; - (void)dealloc {; [_myproperty release];; [super dealloc];; }; @end. osx.cocoa.IncompatibleMethodT",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:15014,test,test,15014,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"pyright (C) 1995-2019, Rene Brun and Fons Rademakers.; # All rights reserved.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ROOT_GENERATE_DICTIONARY(ElementStructDict ElementStruct.h LINKDEF ElementStructLinkDef.h OPTIONS -inlineInputHeader); ROOT_ADD_GTEST(testTOffsetGeneration TOffsetGeneration.cxx ElementStruct.cxx ElementStructDict.cxx; LIBRARIES RIO Tree MathCore; ); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET testTOffsetGeneration POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libElementStructDict_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libElementStructDict_rdict.pcm); endif(); target_include_directories(testTOffsetGeneration PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_STANDARD_LIBRARY_PACKAGE(SillyStruct NO_INSTALL_HEADERS HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/SillyStruct.h SOURCES SillyStruct.cxx LINKDEF SillyStructLinkDef.h DEPENDENCIES RIO); ROOT_ADD_GTEST(testBulkApi BulkApi.cxx LIBRARIES RIO Tree TreePlayer); #FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),; # to be reverted after investigation.; if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4); ROOT_ADD_GTEST(testBulkApiMultiple BulkApiMultiple.cxx LIBRARIES RIO Tree TreePlayer TIMEOUT 3000); ROOT_ADD_GTEST(testBulkApiVarLength BulkApiVarLength.cxx LIBRARIES RIO Tree TreePlayer); ROOT_ADD_GTEST(testBulkApiSillyStruct BulkApiSillyStruct.cxx LIBRARIES RIO Tree TreePlayer SillyStruct); endif(); ROOT_ADD_GTEST(testTBasket TBasket.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTBranch TBranch.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTIOFeatures TIOFeatures.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeCluster TTreeClusterTest.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTChainParsing TChainParsing.cxx LIBRARIES RIO Tree); if(imt); ROOT_ADD_GTEST(testTTreeImplicitMT ImplicitMT.cxx LIBRARIES RIO Tree); endif(); ROOT_ADD_GTEST(testTCha",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt:1012,test,testBulkApi,1012,tree/tree/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt,1,['test'],['testBulkApi']
Testability,python_module(theano QUIET); find_python_module(tensorflow QUIET); find_python_module(sklearn QUIET). if(PY_SKLEARN_FOUND); # Test PyRandomForest: Classification; ROOT_EXECUTABLE(testPyRandomForestClassification testPyRandomForestClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Classification COMMAND testPyRandomForestClassification). # Test PyRandomForest: Multi-class classification; ROOT_EXECUTABLE(testPyRandomForestMulticlass testPyRandomForestMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-RandomForest-Multiclass COMMAND testPyRandomForestMulticlass). # Test PyGTB: Classification; ROOT_EXECUTABLE(testPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyT,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:1612,test,testPyGTBMulticlass,1612,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,1,['test'],['testPyGTBMulticlass']
Testability,"q = s;; foo(q); // warn; }. void test(void) {; int x;; foo(&x); // warn; }. .. _alpha-core-CastSize:. alpha.core.CastSize (C); """"""""""""""""""""""""""""""""""""""""""""""; Check when casting a malloc'ed type ``T``, whether the size is a multiple of the size of ``T``. .. code-block:: c. void test() {; int *x = (int *) malloc(11); // warn; }. .. _alpha-core-CastToStruct:. alpha.core.CastToStruct (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cast from non-struct pointer to struct pointer. .. code-block:: cpp. // C; struct s {};. void test(int *p) {; struct s *ps = (struct s *) p; // warn; }. // C++; class c {};. void test(int *p) {; c *pc = (c *) p; // warn; }. .. _alpha-core-Conversion:. alpha.core.Conversion (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Loss of sign/precision in implicit conversions. .. code-block:: c. void test(unsigned U, signed S) {; if (S > 10) {; if (U < S) {; }; }; if (S < -10) {; if (U < S) { // warn (loss of sign); }; }; }. void test() {; long long A = 1LL << 60;; short X = A; // warn (loss of precision); }. .. _alpha-core-DynamicTypeChecker:. alpha.core.DynamicTypeChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for cases where the dynamic and the static type of an object are unrelated. .. code-block:: objc. id date = [NSDate date];. // Warning: Object has a dynamic type 'NSDate *' which is; // incompatible with static type 'NSNumber *'""; NSNumber *number = date;; [number doubleValue];. .. _alpha-core-FixedAddr:. alpha.core.FixedAddr (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for assignment of a fixed address to a pointer. .. code-block:: c. void test() {; int *p;; p = (int *) 0x10000; // warn; }. .. _alpha-core-IdenticalExpr:. alpha.core.IdenticalExpr (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about unintended use of identical expressions in operators. .. code-block:: cpp. // C; void test() {; int a = 5;; int b = a | 4 | a; // warn: identical expr on both sides; }. // C++; bool f(void);. void test(bool b) {; int i = 10;; if (f()) { ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:49077,test,test,49077,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"quest from your branch to llvm::main. ::. # If you get any review comments, come back to the branch and; # adjust them.; git switch my_change; $EDITOR file.cpp. # Commit your changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Re-run tests and make sure nothing broke.; ninja check. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Before merging the PR, it is recommended that you rebase locally and re-run test; checks:. ::. # Add upstream as a remote (if you don't have it already); git remote add upstream https://github.com/llvm/llvm-project.git. # Make sure you have all the latest changes; git fetch upstream && git rebase -i upstream/main. # Make sure tests pass with latest changes and your change; ninja check. # Push the rebased changes to your fork.; git push origin my_change -f. Once your PR is approved, rebased, and tests are passing, click `Squash and; Merge` on your PR in the GitHub web interface. See more in-depth information about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirstTypoFix`. Releases; ========. Backporting Fixes to the Release Branches; -----------------------------------------; You can use special comments on issues to make backport requests for the; release branches. This is done by making a comment containing one of the; following commands on any issue that has been added to one of the ""X.Y.Z Release""; milestones. ::. /cherry-pick <commit> <commit> <...>. This command takes one or more git commit hashes as arguments and will attempt; to cherry-pick the commit(s) to the release branch. If the commit(s) fail to; apply cleanly, then a comment with a link to the failing job will be added to; the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:11687,test,tests,11687,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --show-unsupported. Show the names of unsupported tests. .. option:: --show-xfail. Show the names of tests that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Specify an additional ``PATH`` to use when searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memory leak checks. When this option is; enabled, :program:`lit` will also automatically provide a ""``vg_leak``""; feature that can be used to conditionally disable (or expect failure in); certain tests. .. option:: --tim",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:4025,test,tests,4025,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"quire.; (5): thread_local support; requires a C++ runtime library providing __cxa_thread_atexit, such; as libc++abi 3.6 or later,; or libsupc++ 4.8 or later.; (6): No compiler changes are required for an implementation; such as Clang that does not provide any extended integer types.; __int128 is not treated as an extended integer type,; because changing intmax_t would be an ABI-incompatible; change. C++98 implementation status; Clang implements all of the ISO C++ 1998 standard; (including the defects addressed in the ISO C++ 2003 standard); except for export (which was removed in C++11). Defect reports; Clang generally aims to implement resolutions to Defect Reports (bug fixes; against prior standards) retroactively, in all prior standard versions where; the fix is meaningful. Significant Defect Report changes to language features; after the publication of the relevant standard are marked (DR) in the above; table.; Clang also has a test suite for conformance to resolutions for issues on the; C++ core issues list,; most of which are considered Defect Reports.; Implementation status for C++ core issues based on; that test suite is tracked on a separate page.; Technical specifications and standing documents; ISO C++ also publishes a number of documents describing additional language; and library features that are not part of standard C++. List of features and minimum Clang version with support. Document; Latest draft; Compiler flag; Available in Clang?. SD-6: SG10 feature test recommendations; SD-6; N/A. Clang 3.4 (N3745); . Clang 3.6 (N4200). Clang 4 (P0096R3). Clang 5 (P0096R4). Clang 7 (P0096R5). Clang 9 (P1353R0); . Clang 10 (P1902R1). [TS] Concepts; P0121R0. Superseded by P0734R0. [TS] Coroutines; N4663; -fcoroutines-ts-stdlib=libc++; Clang 5. -std=c++20-stdlib=libc++; Superseded by P0912R5. [TS] Library Fundamentals, Version 1 (invocation type traits); N4480; N/A; No. [TS] Library Fundamentals, Version 2 (source_location); N4617; N/A; Clang 9 (documentation). [TS]",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html:19445,test,test,19445,interpreter/llvm-project/clang/www/cxx_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html,1,['test'],['test']
Testability,"quivalent to :option:`--radix` with a value of ``10``. .. option:: -l. Display verbose address and offset information for segments and sections in; Mach-O files in ``darwin`` format. .. option:: --format=<format>. Set the output format to the ``<format>`` specified. Available ``<format>``; options are ``berkeley`` (the default), ``sysv`` and ``darwin``. Berkeley output summarises text, data and bss sizes in each file, as shown; below for a typical pair of ELF files:. .. code-block:: console. $ llvm-size --format=berkeley test.o test2.o; text data bss dec hex filename; 182 16 5 203 cb test.elf; 82 8 1 91 5b test2.o. For Mach-O files, the output format is slightly different:. .. code-block:: console. $ llvm-size --format=berkeley macho.obj macho2.obj; __TEXT __DATA __OBJC others dec hex; 4 8 0 0 12 c macho.obj; 16 32 0 0 48 30 macho2.obj. Sysv output displays size and address information for most sections, with each; file being listed separately:. .. code-block:: console. $ llvm-size --format=sysv test.elf test2.o; test.elf :; section size addr; .eh_frame 92 2097496; .text 90 2101248; .data 16 2105344; .bss 5 2105360; .comment 209 0; Total 412. test2.o :; section size addr; .text 26 0; .data 8 0; .bss 1 0; .comment 106 0; .note.GNU-stack 0 0; .eh_frame 56 0; .llvm_addrsig 2 0; Total 199. ``darwin`` format only affects Mach-O input files. If an input of a different; file format is specified, :program:`llvm-size` falls back to ``berkeley``; format. When producing ``darwin`` format, the tool displays information about; segments and sections:. .. code-block:: console. $ llvm-size --format=darwin macho.obj macho2.obj; macho.obj:; Segment : 12; Section (__TEXT, __text): 4; Section (__DATA, __data): 8; total 12; total 12; macho2.obj:; Segment : 48; Section (__TEXT, __text): 16; Section (__DATA, __data): 32; total 48; total 48. .. option:: --help, -h. Display a summary of command line options. .. option:: -m. Equivalent to :option:`--format` with a value of ``darwin``. .. opt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst:2172,test,test,2172,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-size.rst,1,['test'],['test']
Testability,"r STL containers in IO part. Allows to read ROOT6 TF1.; 13. Full support of TGraphBentErrors; 14. Support objects drawing from JSON files in default user interface, including; monitoring. One could open file from link like: https://root.cern.ch/js/dev/?json=demo/canvas_tf1.json; 15. Introduce JSROOT.FFormat function to convert numeric values into string according; format like 6.4g or 5.7e. Used for statistic display. ## Changes in 3.5; 1. Fix error in vertical text alignment; 2. Many improvements in TPaletteAxis drawing - draw label, avoid too large ticks.; 3. Fix error with col drawing - bin with maximum value got wrong color; 4. Test for existing jquery.js, jquery-ui.js and d3.js libraries, reuse when provided; 5. Fix several I/O problems; now one could read files, produced in Geant4; 6. Implement 'e2' drawing option for TH1 class,; use by default 'e' option when TH1 has non-empty fSumw2; 7. Reuse statistic from histogram itself, when no axis selection done; 8. Support log/lin z scale for color drawing; 9. Implement interactive z-scale selection on TPaletteAxis; 10. Allow to redraw item with other draw options (before one should clear drawings); 11. Several improvements in THttpServer user interface - repair hierarchy reload,; hide unsupported context menu entries, status line update. ## Changes in 3.4; 1. Support usage of minimized versions of .js and .css files.; Minimized scripts used by default on web servers.; 2. Implement JSROOT.extend instead of jQuery.extend, reduce; usage of jquery.js in core JSROOT classes; 3. Implement main graphics without jquery at all,; such mode used in `nobrowser` mode.; 4. Provide optional latex drawing with MathJax SVG.; TMathText always drawn with MathJax,; other classes require `mathjax` option in URL; 5. Improve drawing of different text classes, correctly handle; their alignment and scaling, special handling for IE; 6. Fix error with time axes - time offset was not correctly interpreted. ## Changes in 3.3; 1. Use d3.time.scal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:65945,log,log,65945,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"r `RooAbsReal`. With all these inconsistencies, it was deemed safer to disable copy assignment; of RooAbsArgs from now on. ### RooBrowser: a graphical user interface for workspace exploration, visualization, and analysis. This experimental new feature utilises the technology from ROOT's familiar `TBrowser` in order to create an interface for graphically exploring and visualizing the content of a workspace, as well as perform basic fitting operations with the models and datasets. ![Demonstration of RooBrowser using json workspace from the roofit tutorials directory](RooBrowser.png). ### Removal of deprecated HistFactory functionality. #### Removal of HistoToWorkspaceFactory (non-Fast version). The original `HistoToWorkspaceFactory` produced models that consisted of a; Poisson term for each bin. In this ""number counting form"" the dataset has one; row and the collumns corresponded to the number of events for each bin. This; led to severe performance problems in statistical tools that generated; pseudo-experiments and evaluated likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast` implementation that; produces a model in the ""standard form"" where the dataset has one row for each; event, and the column corresponds to the value of the observable in the; histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to avoid; confusion and maintainance burden. #### Removing constant parameter flag from RooStats:HistFactory::NormFactor. As printed out by the HistFactory in a warning message for a long time already,; setting the `Const` attribute to the `<NormFactor>` tag is deprecated and it; will be ignored. Instead, add `<ParamSetting Const=""True""> myparam </ParamSetting>` to your top-level XML's `<Measurement>` entry. This deprecation implied that the constant parameter flag in the; `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid; ambiguity in the future, the possibility to set and retrieve",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:22914,test,test,22914,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['test'],['test']
Testability,"r class: PDF. Option Array Default value Predefined values Description. NSmooth No 0 − Number of smoothing iterations for the input histograms. MinNSmooth No -1 − Min number of smoothing iterations, for bins with most data. MaxNSmooth No -1 − Max number of smoothing iterations, for bins with least data. NAvEvtPerBin No 50 − Average number of events per PDF bin. Nbins No 0 − Defined number of bins for the histogram from which the PDF is created. CheckHist No False − Whether or not to check the source histogram of the PDF. PDFInterpol No Spline2 Spline0, Spline1, Spline2, Spline3, Spline5, KDE Interpolation method for reference histograms (e.g. Spline2 or KDE). KDEtype No Gauss Gauss KDE kernel type (1=Gauss). KDEiter No Nonadaptive Nonadaptive, Adaptive Number of iterations (1=non-adaptive, 2=adaptive). KDEFineFactor No 1 − Fine tuning factor for Adaptive KDE: Factor to multyply the width of the kernel. KDEborder No None None, Renorm, Mirror Border effects treatment (1=no treatment , 2=kernel renormalization, 3=sample mirroring). Configuration options for Factory running :. Configuration options reference for class: Factory. Option Array Default value Predefined values Description. V No False − Verbose flag. Color No True − Flag for coloured screen output (default: True, if in batch mode: False). Transformations No − List of transformations to test; formatting example: Transformations=I;D;P;U;G,D, for identity, decorrelation, PCA, Uniform and Gaussianisation followed by decorrelation transformations. Silent No False − Batch mode: boolean silent flag inhibiting any output from TMVA after the creation of the factory class object (default: False). DrawProgressBar No True − Draw progress bar to display training, testing and evaluation schedule (default: True). AnalysisType No Auto Classification, Regression, Multiclass, Auto Set the analysis type (Classification, Regression, Multiclass, Auto) (default: Auto). Page created on Mon Jul 29 00:06:19 2013 (© TMVA, 2006−2009). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:34874,test,test,34874,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,2,['test'],"['test', 'testing']"
Testability,"r community; members to use, maintain and modify. If the PR contains performance-critical; code consider writing a benchmark against the [rootbench repository](https://github.com/root-project/rootbench). ## Quality Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For example,. ```cpp. void MyROOTFunc(unsigned x); {; if (x == 0) {; Error(""MyROOTFunc"", ""x should be greater than 0!"");; return;; }; /* some work */; }. ```. In order to check if the error is printed on the right spot we can write the; following test:. ```cpp. #include ""ROOT/TestSupport.hxx"". #include ""gtest/gtest.h"". TEST(MyROOTFun",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1445,test,testing,1445,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,1,['test'],['testing']
Testability,"r compression ratio.; if(ZLIB_CF); configure_file(stressGraphics_builtinzlib.ref stressGraphics_builtinzlib.ref COPYONLY); else(); configure_file(stressGraphics.ref stressGraphics.ref COPYONLY); endif(); configure_file(stressGraphics_web.ref stressGraphics_web.ref COPYONLY); configure_file(${CMAKE_CURRENT_SOURCE_DIR}/../tutorials/graphics/earth.dat earth.dat COPYONLY); ROOT_ADD_TEST(test-stressgraphics; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sge; FAILREGEX ""FAILED|Error in""; LABELS longtest); ROOT_ADD_TEST(test-stressgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif().",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:8816,test,test-stressgraphics,8816,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,3,['test'],"['test-stressgraphics', 'test-stressgraphics-chrome', 'test-stressgraphics-firefox-']"
Testability,"r filePath[100];; SearchPath(NULL, ""file.dll"", NULL, 100, filePath, NULL);; return LoadLibrary(filePath); // warn; }. WinAPI.WideCharToMultiByte; (C); Buffer overrun while calling WideCharToMultiByte(). The size of; the input buffer equals the number of characters in the Unicode string, while; the size of the output buffer equals the number of bytes.; Source: ; MSDN: WideCharToMultiByte function. #include <windows.h>. void test() {; wchar_t ws[] = L""abc"";; char s[3];; WideCharToMultiByte(CP_UTF8, 0, ws, -1, s,; 3, NULL, NULL); // warn; }. optimization. Name, DescriptionExampleProgress. optimization.PassConstObjByValue; (C, C++); Optimization: It is more effective to pass constant parameter by reference to; avoid unnecessary object copying. struct A {};. void f(const struct A a); // warn. optimization.PostfixIncIter; (C++); Optimization: It is more effective to use prefix increment operator with; iterator.; Source: Scott Meyers ""More Effective C++"", item 6:; Distinguish between prefix and postfix forms of increment and decrement; operators. #include <vector>. void test() {; std::vector<int> v;; std::vector<int>::const_iterator it;; for(it = v.begin();; it != v.end(); it++) {}; // warn; }. optimization.MultipleCallsStrlen; (C); Optimization: multiple calls to strlen() for a string in an; expression. It is more effective to hold a value returned; from strlen() in a temporary variable. #include <string.h>. void test(const char* s) {; if (strlen(s) > 0 &&; strlen(s) < 7) {}; // warn; }. optimization.StrLengthCalculation; (C++); Optimization: it is more efficient to use string::length() to; calculate the length of an std::string. #include <string>; #include <string.h>. void test() {; std::string s;; if (strlen(s.c_str()) != 0) {}; // warn; }. optimization.EmptyContainerDetect; (C++); Optimization: It is more efficient to use containers empty(); method to identify an empty container. #include <list>. void test() {; std::list<int> l;; if (l.size() != 0) {}; // warn; }. ; . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:27751,test,test,27751,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,4,['test'],['test']
Testability,"r heap-use-after-free on address 0x7f7ddab8c084 at pc 0x403c8c bp 0x7fff87fb82d0 sp 0x7fff87fb82c8; READ of size 4 at 0x7f7ddab8c084 thread T0; #0 0x403c8c in main example_UseAfterFree.cc:4; #1 0x7f7ddabcac4d in __libc_start_main ??:0; 0x7f7ddab8c084 is located 4 bytes inside of 400-byte region [0x7f7ddab8c080,0x7f7ddab8c210); freed by thread T0 here:; #0 0x404704 in operator delete[](void*) ??:0; #1 0x403c53 in main example_UseAfterFree.cc:4; #2 0x7f7ddabcac4d in __libc_start_main ??:0; previously allocated by thread T0 here:; #0 0x404544 in operator new[](unsigned long) ??:0; #1 0x403c43 in main example_UseAfterFree.cc:2; #2 0x7f7ddabcac4d in __libc_start_main ??:0; ==9442== ABORTING. If that does not work for you (e.g. your process is sandboxed), you can use a; separate script to symbolize the result offline (online symbolization can be; force disabled by setting ``ASAN_OPTIONS=symbolize=0``):. .. code-block:: console. % ASAN_OPTIONS=symbolize=0 ./a.out 2> log; % projects/compiler-rt/lib/asan/scripts/asan_symbolize.py / < log | c++filt; ==9442== ERROR: AddressSanitizer heap-use-after-free on address 0x7f7ddab8c084 at pc 0x403c8c bp 0x7fff87fb82d0 sp 0x7fff87fb82c8; READ of size 4 at 0x7f7ddab8c084 thread T0; #0 0x403c8c in main example_UseAfterFree.cc:4; #1 0x7f7ddabcac4d in __libc_start_main ??:0; ... Note that on macOS you may need to run ``dsymutil`` on your binary to have the; file\:line info in the AddressSanitizer reports. Additional Checks; =================. Initialization order checking; -----------------------------. AddressSanitizer can optionally detect dynamic initialization order problems,; when initialization of globals defined in one translation unit uses; globals defined in another translation unit. To enable this check at runtime,; you should set environment variable; ``ASAN_OPTIONS=check_initialization_order=1``. Note that this option is not supported on macOS. Stack Use After Return (UAR); ----------------------------. AddressSanitizer can opti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AddressSanitizer.rst:4752,log,log,4752,interpreter/llvm-project/clang/docs/AddressSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/AddressSanitizer.rst,1,['log'],['log']
Testability,"r is implicitly converted to a pointer to a base class; type; the pointer is used as the operand of a static_cast (except; when the conversion is to void*, or to void* and; subsequently to char*, or unsigned char*); the pointer is used as the operand of a dynamic_cast; Source: C++03 3.8p5, p7; C++11 3.8p5, p7. #include <new>. class A {; public:; ~A();; };. class B : public A {};. void test() {; A *a = new A;; new(a) B;; delete a; // warn; }. #include <new>. class A {; public:; ~A();; };. class B {};. void test() {; A *a = new A;; new(a) B;; a->~A();; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. void f(A*);. void test() {; B *b = new B;; new(b) C;; f(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return static_cast<A*>(b); // warn; }. #include <new>. class A {; public:; ~A();; };. class B : public A {};. class C {};. A* test() {; B *b = new B;; new(b) C;; return dynamic_cast<A*>(b); // warn; }. undefbehavior.ObjLocChanges; (C++); Undefined behavior: the program must ensure that an object occupies the same; storage location when the implicit or explicit destructor call takes place.; Source: C++11 3.8p8. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B b;; new (&b) A;; } // warn. #include <new>. class A {};. class B {; public:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:7957,test,test,7957,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"r is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at the end of the run and; the results are always stored in the ``report.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. Lets say that you have an LLVM optimization pass, and you want to see; how many times it triggers. First thing you should do is add an LLVM; `statistic <ProgrammersManual.html#Statistic>`_ to your pass, which will; tally counts of things you care about. Following this, you can set up a test and a report that collects these; and formats them for easy viewing. This consists of two files, a; ""``test-suite/TEST.XXX.Makefile``"" fragment (where XXX is the name of; your test) and a ""``test-suite/TEST.XXX.report``"" file that indicates; how to format the output into a table. There are many example reports of; various levels of sophistication included with the test su",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:5082,test,test,5082,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test']
Testability,"r level? Could we introduce logarithmical search, or random; access lookup? The answer is: ""yes"". Random-access; """"""""""""""""""""""""""; How it could this be done? Just convert each function to a number, and gather; all of them in a special hash-table. Functions with equal hashes are equal.; Good hashing means, that every function part must be taken into account. That; means we have to convert every function part into some number, and then add it; into the hash. The lookup-up time would be small, but such an approach adds some; delay due to the hashing routine. Logarithmical search; """"""""""""""""""""""""""""""""""""""""; We could introduce total ordering among the functions set, once ordered we; could then implement a logarithmical search. Lookup time still depends on N,; but adds a little of delay (*log(N)*). Present state; """"""""""""""""""""""""""; Both of the approaches (random-access and logarithmical) have been implemented; and tested and both give a very good improvement. What was most; surprising is that logarithmical search was faster; sometimes by up to 15%. The; hashing method needs some extra CPU time, which is the main reason why it works; slower; in most cases, total ""hashing"" time is greater than total; ""logarithmical-search"" time. So, preference has been granted to the ""logarithmical search"". Though in the case of need, *logarithmical-search* (read ""total-ordering"") could; be used as a milestone on our way to the *random-access* implementation. Every comparison is based either on the numbers or on the flags comparison. In; the *random-access* approach, we could use the same comparison algorithm.; During comparison, we exit once we find the difference, but here we might have; to scan the whole function body every time (note, it could be slower). Like in; ""total-ordering"", we will track every number and flag, but instead of; comparison, we should get the numbers sequence and then create the hash number.; So, once again, *total-ordering* could be considered as a milestone for even; faster (i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:6527,log,logarithmical,6527,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logarithmical']
Testability,"r model; rf803_mcstudy_addons2.C - RooMCStudy: Using the randomizer and profile likelihood add-on models; rf804_mcstudy_constr.C - Using RooMCStudy on models with constrains; ; Miscellaneous small improvements. A very large number of small fixes and interface improvements have been made in the context of the systematic review of all methods for the new tutorial macros and updated Users Manual.; Listed below are the most significant functionality upgrades that were introduced in the process. ; Runtime binding of C++ functions - You can now trivially bind at run time any C++ functions as a RooFit function or p.d.f. objects, e.g. RooAbsReal* erfx = bindFunction(""erfx"",TMath::erf,x). See rf105_funcbinding.C for details; Runtime binding of TFx functions - You can now trivially bind at run time any ROOT TFx function as a RooFit function or p.d.f. objects, e.g. RooAbsReal* myFunc = bindFunction(myTF1,x). See rf105_funcbinding.C for details; RooAbsReal - The handling of -log(L) evaluation errors in plotting is now explicitly controllable, just like in fitting. See rf606_nllerrorhandling.C for details; RooDataHist - Add new named argument constructor that can collate multiple ROOT THn histgrams into a n+1 dimensional RooDataHist; RooDataSet - Add new named argument constructor that can collate multiple input RooDataSets into a n+1 dimensional RooDataSet.Add createHistogram() method for simplified plotting; RooFitResult - Add new method correlationHist() that returns a labeled TH2 with the contents of the fit correlation matrix; RooFFTConvPdf - Automatically put sampling windows of 'resolution model' p.d.f. centered around zero, even if fit range of convolution observable does not bracket zero. Improve internal efficiency; RooAbsData - Add ability to plot efficiency distribution with correct binomial errors given a RooRealVar and a RooCategory category observable encoding distribution and accept/reject state respectively. See rf701_efficiencyfit.C for details ; RooAbsPdf - Inc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html:7204,log,log,7204,roofit/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v522/index.html,1,['log'],['log']
Testability,"r much; more detailed information about how this infrastructure works. The; common refactoring and rewriting toolkit-style library is also part of; LibTooling organizationally. A few Clang Tools are developed along side the core Clang libraries as; examples and test cases of fundamental functionality. However, most of; the tools are developed in a side repository to provide easy separation; from the core libraries. We intentionally do not support public; libraries in the side repository, as we want to carefully review and; find good APIs for libraries as they are lifted out of a few tools and; into the core Clang library set. Regardless of which repository Clang Tools' code resides in, the; development process and practices for all Clang Tools are exactly those; of Clang itself. They are entirely within the Clang *project*,; regardless of the version control scheme. Core Clang Tools; ================. The core set of Clang tools that are within the main repository are; tools that very specifically complement, and allow use and testing of; *Clang* specific functionality. ``clang-check``; ---------------. :doc:`ClangCheck` combines the LibTooling framework for running a; Clang tool with the basic Clang diagnostics by syntax checking specific files; in a fast, command line interface. It can also accept flags to re-display the; diagnostics in different formats with different flags, suitable for use driving; an IDE or editor. Furthermore, it can be used in fixit-mode to directly apply; fixit-hints offered by clang. See :doc:`HowToSetupToolingForLLVM` for; instructions on how to setup and used `clang-check`. ``clang-format``; ----------------. Clang-format is both a :doc:`library <LibFormat>` and a :doc:`stand-alone tool; <ClangFormat>` with the goal of automatically reformatting C++ sources files; according to configurable style guides. To do so, clang-format uses Clang's; ``Lexer`` to transform an input file into a token stream and then changes all; the whitespace aroun",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangTools.rst:2627,test,testing,2627,interpreter/llvm-project/clang/docs/ClangTools.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangTools.rst,1,['test'],['testing']
Testability,"r output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at the end of the run and; the results are always stored in the ``report.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. Lets say that you have an LLVM optimization pass, and you want to see; how many times it triggers. First thing you should do is add an LLVM; `statistic <ProgrammersManual.html#Statistic>`_ to your pass, which will; tally counts of things you care about. Following this, you can set up a test and a report that collects these; and formats them for easy viewing. This consists of two files, a; ""``test-suite/TEST.XXX.Makefile``"" fragment (where XXX is the name of; your test) and a ""``test-suite/TEST.XXX.report``"" file that indicates; how to format the output into a table. There are many example reports ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:5004,test,test-suite,5004,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test-suite']
Testability,"r point to a valid object;; // it must be initialized; T.SetBranchAddress(""event"",&event);; ```. When reading the Tree, one can choose one of these 3 options:. Option 1:. ``` {.cpp}; for (Int_t i = 0; i<nentries; i++) {; T.GetEntry(i);; //the object event has been filled at this point; }; ```. This is the default and recommended way to create an object of the class; `Event. `It will be pointed by `event`. At the following entries, `event` will be overwritten by the new data.; All internal members that are **`TObject`**\* are automatically deleted.; It is important that these members be in a valid state when `GetEntry`; is called. Pointers must be correctly initialized. However these; internal members will not be deleted if the characters ""`->`"" are; specified as the first characters in the comment field of the data; member declaration. The pointer member is read via the `pointer->Streamer(buf)` if ""`->`"" is; specified. In this case, it is assumed that the pointer is never null; (see pointer `TClonesArray *fTracks` in the `$ROOTSYS/test/Event`; example). If ""`->`"" is not specified, the pointer member is read via; `buf >> pointer`. In this case the pointer may be null. Note that the; option with ""`->`"" is faster to read or write and it also consumes less; space in the file. Option 2 - the option `AutoDelete` is set:. ``` {.cpp}; TBranch *branch = T.GetBranch(""event"");; branch->SetAddress(&event);; branch->SetAutoDelete(kTRUE);; for (Int_t i=0; i<nentries; i++) {; T.GetEntry(i); // the object event has been filled at this point; }; ```. At any iteration, the `GetEntry` deletes the object `event` and a new; instance of `Event` is created and filled. Option 3 - same as option 1, but you delete the event yourself:. ``` {.cpp}; for (Int_t i=0; i<nentries; i++) {; delete event;; event = 0; //EXTREMELY IMPORTANT; T.GetEntry(i);; // the objrect event has been filled at this point; }; ```. It is strongly recommended to use the default option 1. It has the; additional advantage ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:40274,test,test,40274,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"r tests; live in clang/test/Analysis folder. To run all of the analyzer tests,; execute the following from the clang build directory:; ; $ bin/llvm-lit -sv ../llvm/tools/clang/test/Analysis; ; Useful Commands/Debugging Hints; Attaching the Debugger; When your command contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ clang -cc1 -analyze -analyzer-checker=osx.KeychainAPI test.c. If you are experiencing a crash, to see which function is failing while; processing a large file use the -analyzer-display-progress; option.; To selectively analyze only the given function, use the; -analyze-function option:. $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress; ANALYZE (Syntax): test.c foo; ANALYZE (Syntax): test.c bar; ANALYZE (Path, Inline_Regular): test.c bar; ANALYZE (Path, Inline_Regular): test.c foo; $ clang -cc1 -analyze -analyzer-checker=core test.c -analyzer-display-progress -analyze-function=foo; ANALYZE (Syntax): test.c foo; ANALYZE (Path, Inline_Regular): test.c foo. Note: a fully qualified function name has to be used when selecting; C++ functions and methods, Objective-C methods and blocks, e.g.:. $ clang -cc1 -analyze -analyzer-checker=core test.cc -analyze-function='foo(int)'. The fully qualified name can be found from the; -analyzer-display-progress output. The bug reporter mechanism removes path diagnostics inside",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:19634,test,test,19634,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['test']
Testability,"r the given number ``N`` of failures.; An integer argument should be passed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel execution on separate machines (say in a large; testing farm). .. option:: --order={lexical,random,smart}. Define the order in which tests are run. The supported values are:. - lexical - tests will be run in lexical order according to the test file; path. This option is useful when predictable test order is desired. - random - tests will be run in random order. - smart - tests that failed previously will be run first, then the remaining; tests, all in descending execution time order. This is the default as it; optimizes concurrency. .. option:: --run-shard=N. Select which shard to run, assuming the ``--num-shards=M`` option was; provided. The two options must be used together, and the value of ``N``; must be in the range ``1..M``. The environment variable; ``LIT_RUN_SHARD`` can also be used in place of this option. .. option:: --timeout=N. Spend at most ``N`` seconds (approximately) running each individual test.; ``0`` means no time limit, and ``0`` is the default. Note that this is not an; alias for :option:`--max-time`; the two are different kinds of maximums. .. option:: --filter=REGEXP. Run only those tests whose name matches the regular expression specified in; ``REGEXP``. The environment va",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:7188,test,tests,7188,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"r to do fld1 than load from a constant pool for example, so; ""load, add 1.0, store"" is better done in the fp stack, etc. //===---------------------------------------------------------------------===//. These should compile into the same code (PR6214): Perhaps instcombine should; canonicalize the former into the later?. define float @foo(float %x) nounwind {; %t = bitcast float %x to i32; %s = and i32 %t, 2147483647; %d = bitcast i32 %s to float; ret float %d; }. declare float @fabsf(float %n); define float @bar(float %x) nounwind {; %d = call float @fabsf(float %x); ret float %d; }. //===---------------------------------------------------------------------===//. This IR (from PR6194):. target datalayout = ""e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128""; target triple = ""x86_64-apple-darwin10.0.0"". %0 = type { double, double }; %struct.float3 = type { float, float, float }. define void @test(%0, %struct.float3* nocapture %res) nounwind noinline ssp {; entry:; %tmp18 = extractvalue %0 %0, 0 ; <double> [#uses=1]; %tmp19 = bitcast double %tmp18 to i64 ; <i64> [#uses=1]; %tmp20 = zext i64 %tmp19 to i128 ; <i128> [#uses=1]; %tmp10 = lshr i128 %tmp20, 32 ; <i128> [#uses=1]; %tmp11 = trunc i128 %tmp10 to i32 ; <i32> [#uses=1]; %tmp12 = bitcast i32 %tmp11 to float ; <float> [#uses=1]; %tmp5 = getelementptr inbounds %struct.float3* %res, i64 0, i32 1 ; <float*> [#uses=1]; store float %tmp12, float* %tmp5; ret void; }. Compiles to:. _test: ## @test; 	movd	%xmm0, %rax; 	shrq	$32, %rax; 	movl	%eax, 4(%rdi); 	ret. This would be better kept in the SSE unit by treating XMM0 as a 4xfloat and; doing a shuffle from v[1] to v[0] then a float store. //===---------------------------------------------------------------------===//. [UNSAFE FP]. void foo(double, double, double);; void norm(double x, double y, double z) {; double scale = __builtin_sqrt(x*x + y*y + z*z);; foo(x/scale, y/scale, z",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:21153,test,test,21153,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['test']
Testability,"r to optimize concurrency. The execution order can be; changed using the :option:`--order` option. The timing data is stored in the `test_exec_root` in a file named; `.lit_test_times.txt`. If this file does not exist, then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-failures N. Stop execution after the given number ``N`` of failures.; An integer argument should be passed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel execution on separate machines (say in a large; testing farm). .. option:: --order={lexical,random,smart}. Define the order in which tests are run. The supported values are:. - lexical - tests will be run in lexical order according to the test file; path. This option is useful when predictable test order is desired. - random - tests will be run in random order. - smart - tests that failed previously will be run first, then the remaining; tests, all in descending",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:6481,test,tests,6481,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"r was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configuring with '--prefix'; Fix backward-incompatibility issue giving the error; message  ""unknown action code: 5112""; Fix a few problems with file retrieval from the cache; Fix a problem with iteration of a std::list occasionally; causing seg-violations in TXSocket; Fix a few problems preventing correct usage of entry; lists in PROOF; Fix a problem with the permissions of the credentials; files created under <sandbox>/.creds; Fix a potential problem while determining the log paths; in log retrieval. Do not use vnsprintf in the XrdProofd plug-in, potential; source of deadlocks.; Fix a problem overwriting the local environment settings; for the xrootd sec modules; In XrdProofdProofServMgr::Destroy, fix segv in message; creation when all sessions are destroyed at once; Fix a problem determining the relative time order of old; sessions for log retrieval; In TProof::HandleInputMessage, fix possible double delete; after kPROOF_STOPPROCESS; Fix a couple of issues on reconnection to a running; session (some dialog buttons not in the correct state; logs not; correctly redirected); Fix a problem creating spurious warnings during 'draw'; queries. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:10087,log,log,10087,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,4,['log'],"['log', 'logs']"
Testability,"r whatever is interesting). This is similar to; using :program:`grep`, but it is optimized for matching multiple different; inputs in one file in a specific order. The ``match-filename`` file specifies the file that contains the patterns to; match. The file to verify is read from standard input unless the; :option:`--input-file` option is used. OPTIONS; -------. Options are parsed from the environment variable ``FILECHECK_OPTS``; and from the command line. .. option:: -help. Print a summary of command line options. .. option:: --check-prefix prefix. FileCheck searches the contents of ``match-filename`` for patterns to; match. By default, these patterns are prefixed with ""``CHECK:``"".; If you'd like to use a different prefix (e.g. because the same input; file is checking multiple different tool or options), the; :option:`--check-prefix` argument allows you to specify (without the trailing; ""``:``"") one or more prefixes to match. Multiple prefixes are useful for tests; which might change for different run options, but most lines remain the same. FileCheck does not permit duplicate prefixes, even if one is a check prefix; and one is a comment prefix (see :option:`--comment-prefixes` below). .. option:: --check-prefixes prefix1,prefix2,... An alias of :option:`--check-prefix` that allows multiple prefixes to be; specified as a comma separated list. .. option:: --comment-prefixes prefix1,prefix2,... By default, FileCheck ignores any occurrence in ``match-filename`` of any check; prefix if it is preceded on the same line by ""``COM:``"" or ""``RUN:``"". See the; section `The ""COM:"" directive`_ for usage details. These default comment prefixes can be overridden by; :option:`--comment-prefixes` if they are not appropriate for your testing; environment. However, doing so is not recommended in LLVM's LIT-based test; suites, which should be easier to maintain if they all follow a consistent; comment style. In that case, consider proposing a change to the default; comment prefixes ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:1572,test,tests,1572,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['tests']
Testability,"r which is read before the; source file is preprocessed. .. option:: -include <filename>. Adds an implicit #include into the predefines buffer which is read before the; source file is preprocessed. .. option:: -I<directory>. Add the specified directory to the search path for include files. .. option:: -F<directory>. Add the specified directory to the search path for framework include files. .. option:: -nostdinc. Do not search the standard system directories or compiler builtin directories; for include files. .. option:: -nostdlibinc. Do not search the standard system directories for include files, but do; search compiler builtin include directories. .. option:: -nobuiltininc. Do not search clang's builtin directory for include files. .. option:: -fkeep-system-includes. Usable only with :option:`-E`. Do not copy the preprocessed content of; ""system"" headers to the output; instead, preserve the #include directive.; This can greatly reduce the volume of text produced by :option:`-E` which; can be helpful when trying to produce a ""small"" reproduceable test case. This option does not guarantee reproduceability, however. If the including; source defines preprocessor symbols that influence the behavior of system; headers (for example, ``_XOPEN_SOURCE``) the operation of :option:`-E` will; remove that definition and thus can change the semantics of the included; header. Also, using a different version of the system headers (especially a; different version of the STL) may result in different behavior. Always verify; the preprocessed file by compiling it separately. ENVIRONMENT; -----------. .. envvar:: TMPDIR, TEMP, TMP. These environment variables are checked, in order, for the location to write; temporary files used during the compilation process. .. envvar:: CPATH. If this environment variable is present, it is treated as a delimited list of; paths to be added to the default system include path list. The delimiter is; the platform dependent delimiter, as used in the PATH ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CommandGuide/clang.rst:20206,test,test,20206,interpreter/llvm-project/clang/docs/CommandGuide/clang.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/CommandGuide/clang.rst,1,['test'],['test']
Testability,"r,; or libsupc++ 4.8 or later.; (6): No compiler changes are required for an implementation; such as Clang that does not provide any extended integer types.; __int128 is not treated as an extended integer type,; because changing intmax_t would be an ABI-incompatible; change. C++98 implementation status; Clang implements all of the ISO C++ 1998 standard; (including the defects addressed in the ISO C++ 2003 standard); except for export (which was removed in C++11). Defect reports; Clang generally aims to implement resolutions to Defect Reports (bug fixes; against prior standards) retroactively, in all prior standard versions where; the fix is meaningful. Significant Defect Report changes to language features; after the publication of the relevant standard are marked (DR) in the above; table.; Clang also has a test suite for conformance to resolutions for issues on the; C++ core issues list,; most of which are considered Defect Reports.; Implementation status for C++ core issues based on; that test suite is tracked on a separate page.; Technical specifications and standing documents; ISO C++ also publishes a number of documents describing additional language; and library features that are not part of standard C++. List of features and minimum Clang version with support. Document; Latest draft; Compiler flag; Available in Clang?. SD-6: SG10 feature test recommendations; SD-6; N/A. Clang 3.4 (N3745); . Clang 3.6 (N4200). Clang 4 (P0096R3). Clang 5 (P0096R4). Clang 7 (P0096R5). Clang 9 (P1353R0); . Clang 10 (P1902R1). [TS] Concepts; P0121R0. Superseded by P0734R0. [TS] Coroutines; N4663; -fcoroutines-ts-stdlib=libc++; Clang 5. -std=c++20-stdlib=libc++; Superseded by P0912R5. [TS] Library Fundamentals, Version 1 (invocation type traits); N4480; N/A; No. [TS] Library Fundamentals, Version 2 (source_location); N4617; N/A; Clang 9 (documentation). [TS] Modules; N4720; -fmodules-ts; Superseded by P1103R3. [DRAFT TS] Reflection; N4818. No. [TS] Transactional Memory; N4514. No. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html:19993,test,test,19993,interpreter/llvm-project/clang/www/cxx_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html,1,['test'],['test']
Testability,"r-config c++-template-inlining=[true | false]``. Currently, template functions are considered for inlining by default. The motivation behind this option is that very generic code can be a source; of false positives, either by considering paths that the caller considers; impossible (by some unstated precondition), or by inlining some but not all; of a deep implementation of a function. c++-stdlib-inlining; ^^^^^^^^^^^^^^^^^^^. This option controls whether functions from the C++ standard library, including; methods of the container classes in the Standard Template Library, should be; considered for inlining. ``-analyzer-config c++-stdlib-inlining=[true | false]``. Currently, C++ standard library functions are considered for inlining by; default. The standard library functions and the STL in particular are used ubiquitously; enough that our tolerance for false positives is even lower here. A false; positive due to poor modeling of the STL leads to a poor user experience, since; most users would not be comfortable adding assertions to system headers in order; to silence analyzer warnings. c++-container-inlining; ^^^^^^^^^^^^^^^^^^^^^^. This option controls whether constructors and destructors of ""container"" types; should be considered for inlining. ``-analyzer-config c++-container-inlining=[true | false]``. Currently, these constructors and destructors are NOT considered for inlining; by default. The current implementation of this setting checks whether a type has a member; named 'iterator' or a member named 'begin'; these names are idiomatic in C++,; with the latter specified in the C++11 standard. The analyzer currently does a; fairly poor job of modeling certain data structure invariants of container-like; objects. For example, these three expressions should be equivalent:. .. code-block:: cpp. std::distance(c.begin(), c.end()) == 0; c.begin() == c.end(); c.empty(). Many of these issues are avoided if containers always have unknown, symbolic; state, which is what hap",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/IPA.rst:3827,assert,assertions,3827,interpreter/llvm-project/clang/docs/analyzer/developer-docs/IPA.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/IPA.rst,1,['assert'],['assertions']
Testability,"r-of-two within a; specified range. `min` must be a power-of-two that is greater than 0. When; specified, `max` must be a power-of-two greater-than-or-equal to `min` or 0; to signify an unbounded maximum. The syntax `vscale_range(<val>)` can be; used to set both `min` and `max` to the same value. Functions that don't; include this attribute make no assumptions about the value of `vscale`.; ``""nooutline""``; This attribute indicates that outlining passes should not modify the; function. Call Site Attributes; ----------------------. In addition to function attributes the following call site only; attributes are supported:. ``vector-function-abi-variant``; This attribute can be attached to a :ref:`call <i_call>` to list; the vector functions associated to the function. Notice that the; attribute cannot be attached to a :ref:`invoke <i_invoke>` or a; :ref:`callbr <i_callbr>` instruction. The attribute consists of a; comma separated list of mangled names. The order of the list does; not imply preference (it is logically a set). The compiler is free; to pick any listed vector function of its choosing. The syntax for the mangled names is as follows:::. _ZGV<isa><mask><vlen><parameters>_<scalar_name>[(<vector_redirection>)]. When present, the attribute informs the compiler that the function; ``<scalar_name>`` has a corresponding vector variant that can be; used to perform the concurrent invocation of ``<scalar_name>`` on; vectors. The shape of the vector function is described by the; tokens between the prefix ``_ZGV`` and the ``<scalar_name>``; token. The standard name of the vector function is; ``_ZGV<isa><mask><vlen><parameters>_<scalar_name>``. When present,; the optional token ``(<vector_redirection>)`` informs the compiler; that a custom name is provided in addition to the standard one; (custom names can be provided for example via the use of ``declare; variant`` in OpenMP 5.0). The declaration of the variant must be; present in the IR Module. The signature of the vecto",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:112114,log,logically,112114,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logically']
Testability,r-rt/lib/asan/tests; - `17`; - `1`; - `16`; - :part:`5%`; * - compiler-rt/lib/BlocksRuntime; - `2`; - `0`; - `2`; - :none:`0%`; * - compiler-rt/lib/builtins; - `11`; - `9`; - `2`; - :part:`81%`; * - compiler-rt/lib/builtins/arm; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/builtins/ppc; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/cfi; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/dfsan; - `14`; - `9`; - `5`; - :part:`64%`; * - compiler-rt/lib/fuzzer; - `47`; - `9`; - `38`; - :part:`19%`; * - compiler-rt/lib/fuzzer/afl; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/fuzzer/dataflow; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/fuzzer/tests; - `2`; - `1`; - `1`; - :part:`50%`; * - compiler-rt/lib/gwp_asan; - `12`; - `12`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/optional; - `10`; - `10`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/platform_specific; - `13`; - `13`; - `0`; - :good:`100%`; * - compiler-rt/lib/gwp_asan/tests; - `15`; - `14`; - `1`; - :part:`93%`; * - compiler-rt/lib/gwp_asan/tests/platform_specific; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/hwasan; - `30`; - `9`; - `21`; - :part:`30%`; * - compiler-rt/lib/interception; - `8`; - `1`; - `7`; - :part:`12%`; * - compiler-rt/lib/interception/tests; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/lsan; - `20`; - `4`; - `16`; - :part:`20%`; * - compiler-rt/lib/memprof; - `31`; - `29`; - `2`; - :part:`93%`; * - compiler-rt/lib/memprof/tests; - `2`; - `2`; - `0`; - :good:`100%`; * - compiler-rt/lib/msan; - `18`; - `4`; - `14`; - :part:`22%`; * - compiler-rt/lib/msan/tests; - `4`; - `0`; - `4`; - :none:`0%`; * - compiler-rt/lib/orc; - `21`; - `16`; - `5`; - :part:`76%`; * - compiler-rt/lib/orc/unittests; - `10`; - `9`; - `1`; - :part:`90%`; * - compiler-rt/lib/profile; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/safestack; - `3`; - `1`; - `2`; - :part:`33%`; * - compiler-rt/lib/sanitizer_common; - `167`; - `29`; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:23070,test,tests,23070,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,r-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/r,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102789,test,tests,102789,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,r-rt/lib/tsan/dd; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/go; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/tsan/rtl; - `59`; - `14`; - `45`; - :part:`23%`; * - compiler-rt/lib/tsan/rtl-old; - `61`; - `13`; - `48`; - :part:`21%`; * - compiler-rt/lib/tsan/tests/rtl; - `10`; - `0`; - `10`; - :none:`0%`; * - compiler-rt/lib/tsan/tests/unit; - `11`; - `3`; - `8`; - :part:`27%`; * - compiler-rt/lib/ubsan; - `27`; - `7`; - `20`; - :part:`25%`; * - compiler-rt/lib/ubsan_minimal; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-test,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:25966,test,tests,25966,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"r.GetFile();; TNtuple ntrand(""ntrand"", ""Random Numbers"", ""r"");; fill(ntrand, nEventsPerWorker);; ntrand.Write();; f->Write();; };; ```. ## Language Bindings. - Add in PyROOT the converter for std::string_view; - Fix ROOT-8811: pickling of ROOT.Long now works; - Fix ROOT-8809: push_back on a vector of pointers; - Fix ROOT-8805: itemsize was not set on buffers returned by PyROOT functions. ## JavaScript ROOT. ## Tutorials. ## Class Reference Guide. ## Build, Configuration and Testing Infrastructure. - rlibmap has been removed; it was deprecated for three years.; - Added the CMake exported ROOT libraries into the ROOT:: namespace. In this way, projects based on CMake using ROOT can avoid; conflicts in library target names. As an example, this is the way to build a project consisting of one library and one; executable using ROOT.; ```; find_package(ROOT REQUIRED); include(${ROOT_USE_FILE}). include_directories(${CMAKE_SOURCE_DIR} ${ROOT_INCLUDE_DIRS}); add_definitions(${ROOT_CXX_FLAGS}). ROOT_GENERATE_DICTIONARY(G__Event Event.h LINKDEF EventLinkDef.h). add_library(Event SHARED Event.cxx G__Event.cxx); target_link_libraries(Event ROOT::Hist ROOT::Tree). add_executable(Main MainEvent.cxx); target_link_libraries(Main Event); ```; - Added option `builtin_all` to enable all the built in options.; - For rootcling_stage1 (formerly known as rootcling_tmp), the package structure was changed to enable homogenous visibility; settings across object files. See core/README for an overview.; - Several non-public headers are not copied into include/ anymore; they reside in the PACKAGE/res/ subdirectory in the source tree.; - The IMT switch is set to on by default.; - A new library is now created, libImt. It contains all classes which depend on TBB. Those classes were previously part of libThread. As a consequence rootcling/genreflex do not depend anymore from TBB even in presence of imt builds.; - Refactoring of several math tests to avoid exact comparisons of floating point numbers; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v610/index.md:18939,test,tests,18939,README/ReleaseNotes/v610/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v610/index.md,1,['test'],['tests']
Testability,r/ClangFuzzer.cpp; clang/tools/clang-fuzzer/DummyClangFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLLVMProtoFuzzer.cpp; clang/tools/clang-fuzzer/ExampleClangLoopProtoFuzzer.cpp; clang/tools/clang-fuzzer/handle-llvm/handle_llvm.h; clang/tools/clang-linker-wrapper/ClangLinkerWrapper.cpp; clang/tools/clang-linker-wrapper/OffloadWrapper.cpp; clang/tools/clang-pseudo/ClangPseudo.cpp; clang/tools/clang-refactor/ClangRefactor.cpp; clang/tools/clang-refactor/TestSupport.cpp; clang/tools/clang-refactor/TestSupport.h; clang/tools/clang-refactor/ToolRefactoringResultConsumer.h; clang/tools/clang-rename/ClangRename.cpp; clang/tools/clang-repl/ClangRepl.cpp; clang/tools/clang-scan-deps/ClangScanDeps.cpp; clang/tools/clang-shlib/clang-shlib.cpp; clang/tools/driver/cc1gen_reproducer_main.cpp; clang/tools/libclang/CIndex.cpp; clang/tools/libclang/CIndexUSRs.cpp; clang/tools/libclang/CursorVisitor.h; clang/tools/libclang/CXCursor.cpp; clang/tools/libclang/CXCursor.h; clang/tools/scan-build-py/tests/functional/src/include/clean-one.h; clang/unittests/Analysis/CFGBuildResult.h; clang/unittests/Analysis/MacroExpansionContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowAnalysisContextTest.cpp; clang/unittests/Analysis/FlowSensitive/DataflowEnvironmentTest.cpp; clang/unittests/Analysis/FlowSensitive/MapLatticeTest.cpp; clang/unittests/Analysis/FlowSensitive/MatchSwitchTest.cpp; clang/unittests/Analysis/FlowSensitive/MultiVarConstantPropagationTest.cpp; clang/unittests/Analysis/FlowSensitive/SingleVarConstantPropagationTest.cpp; clang/unittests/Analysis/FlowSensitive/SolverTest.cpp; clang/unittests/Analysis/FlowSensitive/TestingSupport.cpp; clang/unittests/Analysis/FlowSensitive/TestingSupport.h; clang/unittests/Analysis/FlowSensitive/TestingSupportTest.cpp; clang/unittests/Analysis/FlowSensitive/TypeErasedDataflowAnalysisTest.cpp; clang/unittests/AST/ASTImporterFixtures.cpp; clang/unittests/AST/ASTImporterFixtures.h; clang/unittests/AST/ASTImporterObjCTest.cpp; clang/unit,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:28574,test,tests,28574,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"r6, [r5, r4]. The ``--enable-var-scope`` option has the same effect on numeric variables as; on string variables. Important note: In its current implementation, an expression cannot use a; numeric variable defined earlier in the same CHECK directive. FileCheck Pseudo Numeric Variables; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~. Sometimes there's a need to verify output that contains line numbers of the; match file, e.g. when testing compiler diagnostics. This introduces a certain; fragility of the match file structure, as ""``CHECK:``"" lines contain absolute; line numbers in the same file, which have to be updated whenever line numbers; change due to text addition or deletion. To support this case, FileCheck expressions understand the ``@LINE`` pseudo; numeric variable which evaluates to the line number of the CHECK pattern where; it is found. This way match patterns can be put near the relevant test lines and include; relative line number references, for example:. .. code-block:: c++. // CHECK: test.cpp:[[# @LINE + 4]]:6: error: expected ';' after top level declarator; // CHECK-NEXT: {{^int a}}; // CHECK-NEXT: {{^ \^}}; // CHECK-NEXT: {{^ ;}}; int a. To support legacy uses of ``@LINE`` as a special string variable,; :program:`FileCheck` also accepts the following uses of ``@LINE`` with string; substitution block syntax: ``[[@LINE]]``, ``[[@LINE+<offset>]]`` and; ``[[@LINE-<offset>]]`` without any spaces inside the brackets and where; ``offset`` is an integer. Matching Newline Characters; ~~~~~~~~~~~~~~~~~~~~~~~~~~~. To match newline characters in regular expressions the character class; ``[[:space:]]`` can be used. For example, the following pattern:. .. code-block:: c++. // CHECK: DW_AT_location [DW_FORM_sec_offset] ([[DLOC:0x[0-9a-f]+]]){{[[:space:]].*}}""intd"". matches output of the form (from llvm-dwarfdump):. .. code-block:: text. DW_AT_location [DW_FORM_sec_offset] (0x00000233); DW_AT_name [DW_FORM_strp] ( .debug_str[0x000000c9] = ""intd""). letting us set the :program:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:34313,test,test,34313,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['test']
Testability,"r;. A (B *bptr, char *cptr) : bptr(bptr), cptr(cptr) {}; };. void f() {; A::B b;; char c;; A a(&b, &c); // no warning; }. // With Pedantic and CheckPointeeInitialization set to false; // (pointees are regarded as initialized). struct A {; struct B {; int x; // note: uninitialized field 'this->b.x'; int y; // note: uninitialized field 'this->b.y'; };; int *iptr; // note: uninitialized pointer 'this->iptr'; B b;; B *bptr;; char *cptr;. A (B *bptr, char *cptr) : bptr(bptr), cptr(cptr) {}; };. void f() {; A::B b;; char c;; A a(&b, &c); // warning: 3 uninitialized fields; // after the constructor call; }. optin.cplusplus.VirtualCall; (C++); Check virtual member function calls during construction or; destruction. class A {; public:; A() {; f(); // warn; }; virtual void f();; };. class A {; public:; ~A() {; this->f(); // warn; }; virtual void f();; };. optin.mpi.MPI-Checker; (C); Checks MPI code. void test() {; double buf = 0;; MPI_Request sendReq1;; MPI_Ireduce(MPI_IN_PLACE, &buf, 1, MPI_DOUBLE, MPI_SUM,; 0, MPI_COMM_WORLD, &sendReq1);; } // warn: request 'sendReq1' has no matching wait. void test() {; double buf = 0;; MPI_Request sendReq;; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq);; MPI_Irecv(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Wait(&sendReq, MPI_STATUS_IGNORE);; }. void missingNonBlocking() {; int rank = 0;; MPI_Comm_rank(MPI_COMM_WORLD, &rank);; MPI_Request sendReq1[10][10][10];; MPI_Wait(&sendReq1[1][7][9], MPI_STATUS_IGNORE); // warn; }. optin.osx.cocoa.localizability.EmptyLocalizationContextChecker; (ObjC); Check that NSLocalizedString macros include a comment for context. - (void)test {; NSString *string = NSLocalizedString(@""LocalizedString"", nil); // warn; NSString *string2 = NSLocalizedString(@""LocalizedString"", @"" ""); // warn; NSString *string3 = NSLocalizedStringWithDefaultValue(; @""LocalizedString"", nil, [[NSBundle alloc] init], nil,@""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:10853,test,test,10853,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"rCalculator when checking for delgam. Negative values are allowed. This fixes a test problem given privately by A. Suter.; ; Uses also a tighter condition on edm when exiting the iterations (factor of 5 smaller). This is more consistent with conditions used by F77Minuit.; ; Fix a bug in MnCross in the standalone version of Minuit (when WARNINGMSG was not defined).; ; Fix a bug in the sign of the derivative for sine transformation which are used with double bound parameters. The bug could affect the minimization of function with user provided gradient and bound parameters and bound parameters. It could also affected Fumili2. Furthermore, a wrong sign for the correlation matrix could also have been obtained in some cases with bound parameters.; ; Use a tolerance of 0.01 instead of 0.05 in MnContours. The value of 0.01 is the same used in Minos. This is sufficient to get good quality contours.; Improve also the debug in MnContour. Add printing of points as info messages; Remove some un-necessary assert() when defining the minimization parameters.; Fix a bug in MnHesse to return the information if the matrix was made pos def. In addition change in MinimumError the condition that when the matrix was made pos def the status of the error is still considered valid and not invalid as before. This makes also the function minimum valid when a matrix was decleared pos def.; Improvements in the Minuit2Minimizer class:; . implement the new methods defined in the base class: Hess() using MnHess and CovMatrixStatus();; ; improve the switch-off of the info message according to the print level;; ; define the variables passed with zero step-size as constant (as is done in F77 Minuit); . Fix a problem in building the parallel version of Minuit2. The parallel version is built if the environment variables USE_PARALLEL_MINUIT2 and USE_OPENMP are set before compiling Minuit2 on a compiler which supports openMP (for example gcc version >= 4.2); ; Add, thanks to Alfio Lazzaro, support for ru",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html:6520,assert,assert,6520,math/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v524/index.html,1,['assert'],['assert']
Testability,"rDecl(; hasInitializer(integerLiteral(equals(0)))))))).bind(""forLoop"");. class LoopPrinter : public MatchFinder::MatchCallback {; public :; virtual void run(const MatchFinder::MatchResult &Result) {; if (const ForStmt *FS = Result.Nodes.getNodeAs<clang::ForStmt>(""forLoop"")); FS->dump();; }; };. And change ``main()`` to:. .. code-block:: c++. int main(int argc, const char **argv) {; auto ExpectedParser = CommonOptionsParser::create(argc, argv, MyToolCategory);; if (!ExpectedParser) {; // Fail gracefully for unsupported options.; llvm::errs() << ExpectedParser.takeError();; return 1;; }; CommonOptionsParser& OptionsParser = ExpectedParser.get();; ClangTool Tool(OptionsParser.getCompilations(),; OptionsParser.getSourcePathList());. LoopPrinter Printer;; MatchFinder Finder;; Finder.addMatcher(LoopMatcher, &Printer);. return Tool.run(newFrontendActionFactory(&Finder).get());; }. Now, you should be able to recompile and run the code to discover for; loops. Create a new file with a few examples, and test out our new; handiwork:. .. code-block:: console. cd ~/clang-llvm/build/; ninja loop-convert; vim ~/test-files/simple-loops.cc; bin/loop-convert ~/test-files/simple-loops.cc. Step 3.5: More Complicated Matchers; ===================================. Our simple matcher is capable of discovering for loops, but we would; still need to filter out many more ourselves. We can do a good portion; of the remaining work with some cleverly chosen matchers, but first we; need to decide exactly which properties we want to allow. How can we characterize for loops over arrays which would be eligible; for translation to range-based syntax? Range based loops over arrays of; size ``N`` that:. - start at index ``0``; - iterate consecutively; - end at index ``N-1``. We already check for (1), so all we need to add is a check to the loop's; condition to ensure that the loop's index variable is compared against; ``N`` and another check to ensure that the increment step just; increments this same v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:10309,test,test,10309,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['test']
Testability,r_common/sanitizer_stoptheworld_fuchsia.h; compiler-rt/lib/sanitizer_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/s,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99523,test,tests,99523,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,r_common/sanitizer_stoptheworld_win.cpp; compiler-rt/lib/sanitizer_common/sanitizer_symbolizer_markup_constants.h; compiler-rt/lib/sanitizer_common/sanitizer_thread_safety.h; compiler-rt/lib/sanitizer_common/sanitizer_tls_get_addr.h; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/f,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99586,test,tests,99586,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"r``' instruction is:. +-----+-----+-----+; | In0 | In1 | Out |; +-----+-----+-----+; | 0 | 0 | 0 |; +-----+-----+-----+; | 0 | 1 | 1 |; +-----+-----+-----+; | 1 | 0 | 1 |; +-----+-----+-----+; | 1 | 1 | 1 |; +-----+-----+-----+. ``disjoint`` means that for each bit, that bit is zero in at least one of the; inputs. This allows the Or to be treated as an Add since no carry can occur from; any bit. If the disjoint keyword is present, the result value of the ``or`` is a; :ref:`poison value <poisonvalues>` if both inputs have a one in the same bit; position. For vectors, only the element containing the bit is poison. Example:; """""""""""""""". ::. <result> = or i32 4, %var ; yields i32:result = 4 | %var; <result> = or i32 15, 40 ; yields i32:result = 47; <result> = or i32 4, 8 ; yields i32:result = 12. .. _i_xor:. '``xor``' Instruction; ^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. <result> = xor <ty> <op1>, <op2> ; yields ty:result. Overview:; """""""""""""""""". The '``xor``' instruction returns the bitwise logical exclusive or of; its two operands. The ``xor`` is used to implement the ""one's; complement"" operation, which is the ""~"" operator in C. Arguments:; """""""""""""""""""". The two arguments to the '``xor``' instruction must be; :ref:`integer <t_integer>` or :ref:`vector <t_vector>` of integer values. Both; arguments must have identical types. Semantics:; """""""""""""""""""". The truth table used for the '``xor``' instruction is:. +-----+-----+-----+; | In0 | In1 | Out |; +-----+-----+-----+; | 0 | 0 | 0 |; +-----+-----+-----+; | 0 | 1 | 1 |; +-----+-----+-----+; | 1 | 0 | 1 |; +-----+-----+-----+; | 1 | 1 | 0 |; +-----+-----+-----+. Example:; """""""""""""""". .. code-block:: text. <result> = xor i32 4, %var ; yields i32:result = 4 ^ %var; <result> = xor i32 15, 40 ; yields i32:result = 39; <result> = xor i32 4, 8 ; yields i32:result = 12; <result> = xor i32 %V, -1 ; yields i32:result = ~%V. Vector Operations; -----------------. LLVM supports several instructions to represent vector operations in a; targe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:399547,log,logical,399547,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,"ractive features; 22. Upgrade three.js r151 -> r155; 23. Use https://github.com/georgealways/lil-gui/ instead of dat.GUI in geom painter; 24. Put `gl` in ""devDependencies"" of package.json; one can skip it installation with `npm i --production`; 25. Fix - correct scaling of axis labels when tilt them by 25 degree, make this angle configurable; 26. Fix - legend multi-columns drawing and labels scaling; 27. Fix - graph ""B"" bar widths as in native ROOT; 28. Fix - use pad and not frame size for `TText` / `TLatex` scaling; 29. Fix - properly handle ""NB"" (no border) draw option for `TPave` classes; 30. Fix - do not draw histogram title with AXIS draw option; 31. Fix - correct scaling of custom axis labels; 32. Fix - shrink axis labels like 0.20 -> 0.2 or 10^0 -> 1; 33. Fix - copy axis attributes from histogram z scale to palette; 34. Fix - let handle derived from TH1/TH2 classes as histograms #269. ## Changes in 7.4.3; 1. Fix - correctly use GMT specifier in time format; 2. Fix - logical error in `decodeUrl`; 3. Fix - member-wise streaming of std::map #262. ## Changes in 7.4.2; 1. Fix - unzoom z on lego2 plots; 2. Fix - browsing TLists with nullptr inside; 3. Fix - check NaN values when performing TTree::Draw(); 4. Fix - support standard log function in TF1/TF2. ## Changes in 7.4.1; 1. Fix - context menu position on lego plots; 2. Fix - add missing math functions Chebyshev0 and normalized Gaus; 3. Fix - correctly render TPolyLine3D; 4. Fix - properly add interactive resize elements for paves and frame; 5. Fix - drag and drop handling on tabs layout. ## Changes in 7.4.0; 1. Upgrade d3.js v7.6.1 -> v7.8.4; 2. Upgrade three.js r146 -> r151; 3. Support `[cutg]` draw option for TH2; 4. Correctly handle `same0` draw option for TH2; 5. Fix several issues with axis reverse order, support on lego plots; 6. Support more kinds of log scales - ln and logN where N is any positive integer; 7. Adjust TAxis title positioning to native ROOT behavior; 8. Add interactivity (moving, context me",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:11453,log,logical,11453,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['logical']
Testability,"rage (MC/DC) is the percentage of individual; branch conditions that have been shown to independently affect the decision; outcome of the boolean expression they comprise. This is accomplished using; the analysis of executed control flow through the expression (i.e. test; vectors) to show that as a condition's outcome is varied between ""true"" and; false"", the decision's outcome also varies between ""true"" and false"", while; the outcome of all other conditions is held fixed (or they are masked out as; unevaluatable, as happens in languages whose logical operators have; short-circuit semantics). MC/DC builds on top of branch coverage and; requires that all code blocks and all execution paths have been tested. This; statistic is hidden by default in reports, but it can be enabled via the; ``-show-mcdc-summary`` option as long as code was also compiled using the; clang option ``-fcoverage-mcdc``. * Boolean expressions that are only comprised of one condition (and therefore; have no logical operators) are not included in MC/DC analysis and are; trivially deducible using branch coverage. Of these six statistics, function coverage is usually the least granular while; branch coverage (with MC/DC) is the most granular. 100% branch coverage for a; function implies 100% region coverage for a function. The project-wide totals; for each statistic are listed in the summary. Format compatibility guarantees; ===============================. * There are no backwards or forwards compatibility guarantees for the raw; profile format. Raw profiles may be dependent on the specific compiler; revision used to generate them. It's inadvisable to store raw profiles for; long periods of time. * Tools must retain **backwards** compatibility with indexed profile formats.; These formats are not forwards-compatible: i.e, a tool which uses format; version X will not be able to understand format version (X+k). * Tools must also retain **backwards** compatibility with the format of the; coverage mappin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst:13264,log,logical,13264,interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/SourceBasedCodeCoverage.rst,1,['log'],['logical']
Testability,"rage for the various standards papers and updating the documentation; accordingly. Improve Clang's C and C++ standard conformance test coverage:; Clang's test suite is structured such that most tests are written to provide; coverage for what part of the compiler the feature's implementation exists in;; we have parsing tests in clang/test/Parser, and semantic analysis; tests in clang/test/Sema*, etc. We also have tests written to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for; C; and; C++; defect reports and updating the documentation accordingly.; Bug triage: Clang's ; issue trackercurrently has over 20,000 open issues, many of which are not; appropriately tagged, are no longer reproducible, could use a reduced test case,; or otherwise needs some manual interaction. We can always use help with; bug triage and; issue tracker maintenance. Improve build times with Clang: the time it takes Clang to process a; translation unit is very important to our users; the lower the build time, the; better the overall user experience. It would be good to improve Clang's; performance as well as to find ways to proactively alert us when we've; introduced a change that has significant negative impact on build times.; Complete support for ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:2328,test,testing,2328,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,1,['test'],['testing']
Testability,"ral notes on semantic analysis before we get into construction; of the AST:. * Your expression probably involves some types and some subexpressions.; Make sure to fully check that those types, and the types of those; subexpressions, meet your expectations. Add implicit conversions where; necessary to make sure that all of the types line up exactly the way you; want them. Write extensive tests to check that you're getting good; diagnostics for mistakes and that you can use various forms of; subexpressions with your expression.; * When type-checking a type or subexpression, make sure to first check; whether the type is ""dependent"" (``Type::isDependentType()``) or whether a; subexpression is type-dependent (``Expr::isTypeDependent()``). If any of; these return ``true``, then you're inside a template and you can't do much; type-checking now. That's normal, and your AST node (when you get there); will have to deal with this case. At this point, you can write tests that; use your expression within templates, but don't try to instantiate the; templates.; * For each subexpression, be sure to call ``Sema::CheckPlaceholderExpr()``; to deal with ""weird"" expressions that don't behave well as subexpressions.; Then, determine whether you need to perform lvalue-to-rvalue conversions; (``Sema::DefaultLvalueConversions``) or the usual unary conversions; (``Sema::UsualUnaryConversions``), for places where the subexpression is; producing a value you intend to use.; * Your ``BuildXXX`` function will probably just return ``ExprError()`` at; this point, since you don't have an AST. That's perfectly fine, and; shouldn't impact your testing. #. Introduce an AST node for your new expression. This starts with declaring; the node in ``include/Basic/StmtNodes.td`` and creating a new class for your; expression in the appropriate ``include/AST/Expr*.h`` header. It's best to; look at the class for a similar expression to get ideas, and there are some; specific things to watch for:. * If you need ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:147240,test,tests,147240,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['tests']
Testability,"ral options when creating http server. They could be add as additional URL parameters to the constructor arguments like:. ```cpp; auto serv = new THttpServer(""http:8080?loopback&thrds=2"");; ```. Following URL parameters are supported:. | Name | Description |; | :-------------------- | :---------------- |; | thrds=N | number of threads used by the civetweb (default is 10) |; | top=name | configure top name, visible in the web browser |; | auth_file=filename | authentication file name, created with htdigets utility |; | auth_domain=domain | authentication domain |; | loopback | bind specified port to loopback 127.0.0.1 address |; | debug | enable debug mode, server returns html page with request info |; | websocket_timeout=tm | set web sockets timeout in seconds (default 300) |; | websocket_disable | disable web sockets handling (default enabled) |; | cors=domain | define value for CORS header ""Access-Control-Allow-Origin"" in server response |; | log=filename | configure civetweb log file |; | max_age=value | configures ""Cache-Control: max_age=value"" http header for all file-related requests, default 3600 |; | nocache | try to fully disable cache control for file requests |; | winsymlinks=no | do not resolve symbolic links on file system (Windows only), default true |; | dirlisting=no | enable/disable directory listing for browsing filesystem (default no) |. If necessary, one could bind http server to specific IP address like:. ```cpp; new THttpServer(""http:192.168.1.17:8080""); ```. One also can provide extra arguments for THttpServer itself:. | Name | Description |; | :------------- | :---------------- |; | readonly, ro | use server in read-only mode (default) |; | readwrite, rw | use server in read-write mode |; | global | let scan global directories for canvases and files (default) |; | noglobal | disable scan of global directories |; | basic_sniffer | use basic `TRootSniffer` without support of hist, gpad, graph, tree classes |. Example:. ```cpp; new THttpServer(""h",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/HttpServer/HttpServer.md:2282,log,log,2282,documentation/HttpServer/HttpServer.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/HttpServer/HttpServer.md,2,['log'],['log']
Testability,ral.C; roostats/TestNonCentral.py; math/Legendre.py; math/Bessel.py; math/tStudent.py); endif(). if(NOT ROOT_fftw3_FOUND); set(fftw3_veto roofit/rf208_convolution.C; roofit/rf210_angularconv.C; roofit/rf211_paramconv.C; roofit/rf512_wsfactory_oper.C; roofit/rf208_convolution.py; roofit/rf210_angularconv.py; roofit/rf211_paramconv.py; roofit/rf512_wsfactory_oper.py; fft/FFT.C; fit/fitConvolution.C; fit/fitConvolution.py); endif(). if(NOT ROOT_opengl_FOUND); set(opengl_veto tree/staff.C; gl/*.C); endif(). if(NOT GRAPHVIZ_FOUND); set(gviz_veto graphs/graphstruct.C); endif(). if(NOT TBB_FOUND AND NOT builtin_tbb); set(tbb_veto multicore/mtbb*.C); endif(). if(NOT ROOT_imt_FOUND); set(imt_veto multicore/imt*.C multicore/mt*.C); endif(); if(MSVC); #---Multiproc is not supported on Windows; set(imt_veto ${imt_veto} multicore/mp*.C multicore/mtbb201_parallelHistoFill.C); endif(). if(ROOT_CLASSIC_BUILD); set(classic_veto multicore/mp104_*.C multicore/mp105_*.C); endif(). if(NOT gdml); set(gdml_veto geom/gdml/testoptical.C); endif(). #---These ones requires a display to run-----------------------------; set(gui_veto fit/fitpanel_playback.C; cocoa/*.C; geom/building.C geom/cheongwadae.C geom/geom*.C geom/lego.C geom/robot.C geom/south_gate.C geom/station*.C geom/tank.C geom/webdemo.C geom/web_cms.cxx; gl/glViewerExercise.C gl/glViewerLOD.C gl/gviz3d.C gl/nucleus.C gl/viewer3DLocal.C gl/viewer3DMaster.C; gui/*.C; hist/exec1.C; hist/exec2.C; hist/tprofile2polyRealistic.C; hist/tprofile2polyRealisticModuleError.C; image/*.C; graphics/psview.C graphics/gtime.C; graphics/graph_edit_playback.C; roostats/ModelInspector.C; tree/tvdemo.C; eve/*.C; webgui/geom/geom_threejs.cxx; webgui/panel/webpanel.cxx; webgui/webwindow/webwindow.cxx); if (NOT webgui); list(APPEND gui_veto graphics/save_batch.C rcanvas/df104.py rcanvas/df105.py); endif(). if (NOT ROOT_tmva_FOUND); list(APPEND tmva_veto tmva/*.C tmva/*.py tmva/envelope/*.C tmva/keras/*.C tmva/keras/*.py tmva/pytorch/*.py ); else(); #---Th,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:9138,test,testoptical,9138,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['testoptical']
Testability,"ram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVect",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:10790,test,test-stressvector,10790,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stressvector', 'test-stressvector-interpreted']"
Testability,"ram:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern used to fill the register. If it is a; value smaller than the register, it is sign extended to match the size of the; register.; * `LLVM-EXEGESIS-LIVEIN <register name>` - This annotation allows specifying; registers that should keep their value upon starting the benchmark. Values; can be passed through registers from the benchmarking setup in some cases.; The registers and the values assigned to them that can be utilized in the; benchmarking script with a `LLVM-EXEGESIS-LIVEIN` are as follows:. * Scratch memory register - The specific register that this value is put in; is platform dependent (e.g., it is the RDI register on X86 Linux). Setting; this register as a live in ensures that a pointer to a block of memory (1MB); is placed within this register that can be used by the snippet.; * `LLVM-EXEGESIS-MEM-DEF <value name> <size> <value>` - This annotation allows; specifying memory definitions that can later be mapped into the execution; process of a snippet with the `LLVM-EXEGESIS-MEM-MAP` annotation. Each; value is named using the `<value name>` argument so that it can be referenced; later within a map annotation. The size is specified in a decimal number of; bytes and the value is given in hexadecimal. If the size of the value is less; than the specified size, the value will be repeated until",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:2589,benchmark,benchmarking,2589,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"rameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --show-unsupported. Show the names of unsupported tests. .. option:: --show-xfail. Show the names of tests that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Specify an additional ``PATH`` to use when searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:3814,test,tests,3814,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['tests']
Testability,"ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is enabled, Clang will print; something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. .. option:: -f[no-]color-diagnostics. This option, which defaults to on when a color-capable terminal is; detected, controls whether or not Clang prints diagnostics in color. When this option is enabled, Clang will use colors to highlight; specific parts of the diagnostic, e.g.,. .. nasty hack to not lose our dignity. .. raw:: html. <pre>; <b><span style=""color:black"">test.c:28:8: <span style=""color:magenta"">warning</span>: extra tokens at end of #endif directive [-Wextra-tokens]</span></b>; #endif bad; <span style=""color:green"">^</span>; <span style=""color:green"">//</span>; </pre>. When this is disabled, Clang will just print:. ::. test.c:2:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. If the ``NO_COLOR`` environment variable is defined and not empty; (regardless of value), color diagnostics are disabled. If ``NO_COLOR`` is; defined and ``-fcolor-diagnostics`` is passed on the command line, Clang; will honor the command line argument. .. option:: -fansi-escape-codes. Controls whether ANSI escape codes are used instead of the Windows Console; API to output colored diagnostics. This option is only used on Windows and; defaults to off. .. option:: -fdiagnostics-format=clang/msvc/vi. Changes diagnostic output format to better match IDEs and command line tools. This option controls the output format of the filename, line number,; and column printed in diagnostic messages. The options, and their; affect on formatting a simple conversion diagnostic, follow:. **clang** (default); ::. t.c:3:11: warning: conversion specifies type 'char *' but the argument has type 'int'. **msvc**; :",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:7785,test,test,7785,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"ransformLayer, from; ``llvm/include/llvm/ExecutionEngine/Orc/IRTransformLayer.h`` and; ``llvm/lib/ExecutionEngine/Orc/IRTransformLayer.cpp``. This class is concerned; with two very simple jobs: (1) Running every IR Module that is emitted via this; layer through the transform function object, and (2) implementing the ORC; ``IRLayer`` interface (which itself conforms to the general ORC Layer concept,; more on that below). Most of the class is straightforward: a typedef for the; transform function, a constructor to initialize the members, a setter for the; transform function value, and a default no-op transform. The most important; method is ``emit`` as this is half of our IRLayer interface. The emit method; applies our transform to each module that it is called on and, if the transform; succeeds, passes the transformed module to the base layer. If the transform; fails, our emit function calls; ``MaterializationResponsibility::failMaterialization`` (this JIT clients who; may be waiting on other threads know that the code they were waiting for has; failed to compile) and logs the error with the execution session before bailing; out. The other half of the IRLayer interface we inherit unmodified from the IRLayer; class:. .. code-block:: c++. Error IRLayer::add(JITDylib &JD, ThreadSafeModule TSM, VModuleKey K) {; return JD.define(std::make_unique<BasicIRLayerMaterializationUnit>(; *this, std::move(K), std::move(TSM)));; }. This code, from ``llvm/lib/ExecutionEngine/Orc/Layer.cpp``, adds a; ThreadSafeModule to a given JITDylib by wrapping it up in a; ``MaterializationUnit`` (in this case a ``BasicIRLayerMaterializationUnit``).; Most layers that derived from IRLayer can rely on this default implementation; of the ``add`` method. These two operations, ``add`` and ``emit``, together constitute the layer; concept: A layer is a way to wrap a part of a compiler pipeline (in this case; the ""opt"" phase of an LLVM compiler) whose API is opaque to ORC with an; interface that ORC can ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst:8851,log,logs,8851,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst,1,['log'],['logs']
Testability,"raphics |; +-------------------+--------------------------------------------------------+; | `guitest.cxx` | Example usage of the ROOT GUI classes |; +-------------------+--------------------------------------------------------+; | `gui` `viewer` | Another ROOT GUI example program |; | `.cxx` | |; +-------------------+--------------------------------------------------------+; | `Hello.cxx` | Dancing text example |; +-------------------+--------------------------------------------------------+; | `Aclock.cxx` | Analog clock (a la X11 `xclock`) |; +-------------------+--------------------------------------------------------+; | `Tetris.cxx` | The known Tetris game based on the ROOT graphics |; +-------------------+--------------------------------------------------------+; | `stress.cxx` | Important ROOT stress testing program |; +-------------------+--------------------------------------------------------+; | `stress*.cxx` | Stress testing of different ROOT classes |; +-------------------+--------------------------------------------------------+; | `bench.cxx` | STL and ROOT container test and benchmarking program |; +-------------------+--------------------------------------------------------+; | QpRandomDriver.cx | Verification program for Quadratic programming classes |; | x | in Quadp library |; +-------------------+--------------------------------------------------------+; | DrawTest.sh | Entry script to extensive **`TTree`** query test suite |; +-------------------+--------------------------------------------------------+; | dt\_\* | Scripts used by DrawTest.sh |; +-------------------+--------------------------------------------------------+. The `$ROOTSYS/test` directory is a gold mine of root-wisdom nuggets, and; we encourage you to explore and exploit it. These instructions will; compile all programs in `$ROOTSYS/test`:. If you do not have write permission in the `$ROOTSYS/test` directory,; copy the entire `$ROOTSYS/test` directory to your area. The `Makefile",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:4931,test,testing,4931,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,1,['test'],['testing']
Testability,rary(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNovosibirsk testNovosibirsk.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_G,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1503,test,testPolynomial,1503,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,2,['test'],['testPolynomial']
Testability,"rasters are drawn as long lines; int raster_color; // color of the rasters; char *raster_description_x; // x axis description; char *raster_description_y; // y axis description. int pen_color; // color of spectrum; int pen_dash; // style of pen; int pen_width; // width of line. int chanmark_style; // style of channel marks; int chanmark_width; // width of channel marks; int chanmark_height; // height of channel marks; int chanmark_en_dis; // decides whether the channel marks are shown; int chanmark_color; // color of channel marks. // auxiliary variables, transform coefficients, for internal use only; double mx;; double my;; double px;; double py;. // auxiliary internal variables, working place; double gbezx,gbezy;; TPoint bz[4];; };; ```. The examples using different display parameters are shown in the next; few Figures. ![Display mode -polyline, width of pen=3](figures/image214.png). ![Display mode- bars, shown channel marks](figures/image216.png). ![Display mode- steps, log scale, shown channel marks](figures/image218.png). ![Display mode -Bezier curve interpolation, shown channel marks](figures/image220.png). ![Display mode- rainbow bars, color algorithm (model) RGB, number of color levels=1024, pen width=3](figures/image222.png). ![Display mode-empty bars, color algorithm YIQ, number of color levels 2048](figures/image224.png). ## 2-DIMENSIONAL SPECTRA. The 2-dimensional visualization function displays spectrum; (or its part) on the Canvas of a form. Before calling the function, one; has to fill in the `two_dim_pic` structure containing all parameters of the; display. The function has a form of. ```{.cpp}; char *display2(struct two_dim_pic* p);; ```. This function displays the source two-dimensional spectrum on Canvas.; All parameters are grouped in the `two_dim_pic` structure. Before calling the; `display2` function, the structure should be filled in and the address of; `two_dim_pic` should be passed as a parameter to `display2` function. The meaning of corresp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:74351,log,log,74351,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['log']
Testability,"ratio for the parameters of interest. Bernstein Correction. BernsteinCorrection is a utility in RooStats to augment a nominal PDF; with a polynomial�; correction term. �This is useful for incorporating systematic variations; to the nominal PDF. �; The Bernstein basis polynomails are particularly appropriate because they; are positive definite.�. This tool was inspired by the work of Glen Cowan together with Stephan; Horner, Sascha Caron,�; Eilam Gross, and others. �; The initial implementation is independent work. �The major step forward; in the approach was�; to provide a well defined algorithm that specifies the order of; polynomial to be included�; in the correction. �This is an empirical algorithm, so in addition to the; nominal model it�; needs either a real data set or a simulated one. �In the early work, the; nominal model was taken; to be a histogram from Monte Carlo simulations, but in this; implementation it is generalized to an; arbitrary PDF (which includes a RooHistPdf). �The algorithm basically; consists of a�; hypothesis test of an nth-order correction (null) against a n+1-th order; correction (alternate).�; The quantity q = -2 log LR is used to determine whether the n+1-th order; correction is a major�; improvement to the n-th order correction. �The distribution of q is; expected to be roughly�; \chi^2 with one degree of freedom if the n-th order correction is a good; model for the data.�; �Thus, one only moves to the n+1-th order correction of q is relatively; large. �The chance that�; one moves from the n-th to the n+1-th order correction when the n-th; order correction�; (eg. a type 1 error) is sufficient is given by the Prob(\chi^2_1 >; threshold). �The constructor�; of this class allows you to directly set this tolerance (in terms of; probability that the n+1-th; �term is added unnecessarily). HybridCalculator; Add as a new test statistics the profile likelihood ratio. Will be redesigned to use TestStatSampler and TestStatistic in next release. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:32226,test,test,32226,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,3,"['log', 'test']","['log', 'test']"
Testability,"ration in such a way that it is likely to work well with future Clang; versions. For example, if a future version of Clang is likely to add support; for newer versions of an architecture and the architecture is known to be; designed for backwards compatibility then it should be possible to express; compatibility for such architecture versions in the multilib configuration. Not GNU spec files; ------------------. The GNU spec files standard is large and complex and there's little desire to; import that complexity to LLVM. It's also heavily oriented towards processing; command line argument strings which is hard to do correctly, hence the large; amount of logic dedicated to that task in the Clang driver. While compatibility; with GNU would bring benefits, the cost in this case is deemed too high. Avoid re-inventing feature detection in the configuration; ---------------------------------------------------------. A large amount of logic in the Clang driver is dedicated to inferring which; architectural features are available based on the given command line options.; It is neither desirable nor practical to repeat such logic in each multilib; configuration. Instead the configuration should be able to benefit from the; heavy lifting Clang already does to detect features. Low maintenance; ---------------. Multilib is a relatively small feature in the scheme of things so supporting it; should accordingly take little time. Where possible this should be achieved by; implementing it in terms of existing features in the LLVM codebase. Minimal additional API surface; ------------------------------. The greater the API surface, the greater the difficulty of keeping it stable.; Where possible the additional API surface should be kept small by defining it; in relation to existing APIs. An example of this is keeping a simple; relationship between flag names and command line options where possible.; Since the command line options are part of a stable API they are unlikely; to change,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst:12163,log,logic,12163,interpreter/llvm-project/clang/docs/Multilib.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst,1,['log'],['logic']
Testability,"rators of different containers where iterators of the same; container are expected. void bad_insert3(std::vector &v1, std::vector &v2) {; v2.insert(v1.cbegin(), v2.cbegin(), v2.cend()); // warn: container accessed; // using foreign; // iterator argument; v1.insert(v1.cbegin(), v1.cbegin(), v2.cend()); // warn: iterators of; // different containers; // used where the same; // container is; // expected; v1.insert(v1.cbegin(), v2.cbegin(), v1.cend()); // warn: iterators of; // different containers; // used where the same; // container is; // expected; }. alpha.cplusplus.Move; (C++); Method calls on a moved-from object and copying a moved-from object will be; reported. struct A {; void foo() {}; };. void f() {; A a;; A b = std::move(a); // note: 'a' became 'moved-from' here; a.foo(); // warn: method call on a 'moved-from' object 'a'; }. Dead Code Alpha Checkers. Name, DescriptionExample. alpha.deadcode.UnreachableCode; (C, C++, ObjC); Check unreachable code. // C; int test() {; int x = 1;; while(x);; return x; // warn; }. // C++; void test() {; int a = 2;. while (a > 1); a--;. if (a > 1); a++; // warn; }. // Objective-C; void test(id x) {; return;; [x retain]; // warn; }. LLVM Checkers. Name, DescriptionExample. alpha.llvm.Conventions; (C); Check code for LLVM codebase conventions:. A StringRef should not be bound to a temporary std::string; whose lifetime is shorter than the StringRef's.; Clang AST nodes should not have fields that can allocate memory. OS X Alpha Checkers. Name, DescriptionExample. alpha.osx.cocoa.DirectIvarAssignment; (ObjC); Check that Objective C properties follow the following rule: the property; should be set with the setter, not though a direct assignment. @interface MyClass : NSObject {}; @property (readonly) id A;; - (void) foo;; @end. @implementation MyClass; - (void) foo {; _A = 0; // warn; }; @end. alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions; (ObjC); Check for direct assignments to instance variables in the methods annotated; wi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:6580,test,test,6580,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ray(`**`TObjHit`**`)`; not split `TClonesArray(`**`TObjHit`**`)` split. The next graphs show the two columns on the right which represent the split and; non-split **`TClonesArray`**, are significantly lower than the vectors. The most; significant difference is in reading a file without compression. The file size with compression, write times with and without compression; and the read times with and without compression all favor the; **`TClonesArray`**. ## Impact of Compression on I/O. This benchmark illustrates the pros and cons of the compression option.; We recommend using compression when the time spent in I/O is small; compared to the total processing time. In this case, if the I/O; operation is increased by a factor of 5 it is still a small percentage; of the total time and it may very well save a factor of 10 on disk; space. On the other hand if the time spend on I/O is large, compression; may slow down the program's performance. The standard test program; `$ROOTSYS/test/Event` was used in various configurations with 400; events. The data file contains a **`TTree`**. The program was invoked; with:. ``` {.cpp}; Event 400 comp split; ```. - comp = 0 means: no compression at all.; - comp = 1 means: compress everything if split = 0.; - comp = 1 means: compress only the tree branches with integers if; split = 1.; - comp = 2 means: compress everything if split=1.; - split = 0 : the full event is serialized into one single buffer.; - split = 1 : the event is split into branches. One branch for each; data member of the Event class. The list of tracks (a; **`TClonesArray`**) has the data members of the Track class also; split into individual buffers. These tests were run on Pentium III CPU with 650 MHz. +------------+--------+---------------+---------------+----------------+----------------+; | Event | File | Total Time to | Effective | Total Time to | Total Time to |; | Parameters | Size | Write | Time to Write | Read All | Read Sample |; | | | (MB/sec) | (MB/sec) | (",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:136368,test,test,136368,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,2,['test'],['test']
Testability,ray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-te,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107015,test,tests,107015,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"rayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25077,test,test,25077,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,ray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_bi,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107409,test,tests,107409,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,3,['test'],"['test', 'tests']"
Testability,"rder to forward that flag to the linker. Using the specified flags will generate four intermediate bytecode files:. #. a.out.0.0.preopt.bc (Before any link-time optimizations (LTO) are applied); #. a.out.0.2.internalize.bc (After initial optimizations are applied); #. a.out.0.4.opt.bc (After an extensive set of optimizations); #. a.out.0.5.precodegen.bc (After LTO but before translating into machine code). Execute one of the following commands to identify the source of the problem:. #. ``opt ""-passes=lto<O3>"" a.out.0.2.internalize.bc``; #. ``llc a.out.0.5.precodegen.bc``. If one of these do crash, you should be able to reduce; this with :program:`llvm-reduce`; command line (use the bc file corresponding to the command above that failed):. .. code-block:: bash. llvm-reduce --test reduce.sh a.out.0.2.internalize.bc. Example of reduce.sh script. .. code-block:: bash. $ cat reduce.sh; #!/bin/bash -e. path/to/not --crash path/to/opt ""-passes=lto<O3>"" $1 -o temp.bc 2> err.log; grep -q ""It->second == &Insn"" err.log. Here we have grepped the failed assert message. Please run this, then file a bug with the instructions and reduced .bc file; that llvm-reduce emits. .. _miscompiling:. Miscompilations; ===============. If clang successfully produces an executable, but that executable doesn't run; right, this is either a bug in the code or a bug in the compiler. The first; thing to check is to make sure it is not using undefined behavior (e.g.; reading a variable before it is defined). In particular, check to see if the; program is clean under various `sanitizers; <https://github.com/google/sanitizers>`_ (e.g. ``clang; -fsanitize=undefined,address``) and `valgrind <http://valgrind.org/>`_. Many; ""LLVM bugs"" that we have chased down ended up being bugs in the program being; compiled, not LLVM. Once you determine that the program itself is not buggy, you should choose; which code generator you wish to compile the program with (e.g. LLC or the JIT); and optionally a series of LLVM p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst:7731,log,log,7731,interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSubmitABug.rst,1,['log'],['log']
Testability,"rdware performance counters. The result is printed out as YAML; to the standard output. The main goal of this tool is to automatically (in)validate the LLVM's TableDef; scheduling models. To that end, we also provide analysis of the results. :program:`llvm-exegesis` can also benchmark arbitrary user-provided code; snippets. SUPPORTED PLATFORMS; -------------------. :program:`llvm-exegesis` currently only supports X86 (64-bit only), ARM (AArch64; only), MIPS, and PowerPC (PowerPC64LE only) on Linux for benchmarking. Not all; benchmarking functionality is guaranteed to work on every platform.; :program:`llvm-exegesis` also has a separate analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern used to fill the register. If it is a; value smaller than the register, it is sign extended to match the size of the; register.; * `LLVM-EXEGESIS-LIVEIN <register name>` - This annotation allows specifying; registers that should keep their value upon starting the benchmark. Values; can be passed through registers from the benchmarking setup in some cases.; The registers and the values assigned to them that can be utilized in the; benchmarking script with a `LLVM-EXEGESIS-LIVEIN` are as follows:. * Scratch memory register - The specific register that this",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:1874,benchmark,benchmarked,1874,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarked']
Testability,"re or from; the `Python web site <http://www.python.org/>`_. We recommend the latter since it; allows you to adjust installation options. You will need `Git for Windows <https://git-scm.com/>`_ with bash tools, too.; Git for Windows is also bundled with Visual Studio 2019. Getting Started; ===============; Here's the short story for getting up and running quickly with LLVM.; These instruction were tested with Visual Studio 2019 and Python 3.9.6:. 1. Download and install `Visual Studio <https://visualstudio.microsoft.com/>`_.; 2. In the Visual Studio installer, Workloads tab, select the; **Desktop development with C++** workload. Under Individual components tab,; select **Git for Windows**.; 3. Complete the Visual Studio installation.; 4. Download and install the latest `Python 3 release <http://www.python.org/>`_.; 5. In the first install screen, select both **Install launcher for all users**; and **Add Python to the PATH**. This will allow installing psutil for all; users for the regression tests and make Python available from the command; line.; 6. In the second install screen, select (again) **Install for all users** and; if you want to develop `lldb <https://lldb.llvm.org/>`_, selecting; **Download debug binaries** is useful.; 7. Complete the Python installation.; 8. Run a ""Developer Command Prompt for VS 2019"" **as administrator**. This command; prompt provides correct path and environment variables to Visual Studio and; the installed tools.; 9. In the terminal window, type the commands:. .. code-block:: bat. c:; cd \. You may install the llvm sources in other location than ``c:\llvm`` but do not; install into a path containing spaces (e.g. ``c:\Documents and Settings\...``); as it will fail. 10. Register the Microsoft Debug Interface Access (DIA) DLLs. .. code-block:: bat. regsvr32 ""%VSINSTALLDIR%\DIA SDK\bin\msdia140.dll""; regsvr32 ""%VSINSTALLDIR%\DIA SDK\bin\amd64\msdia140.dll"". The DIA library is required for LLVM PDB tests and; `LLDB development <https://l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:3447,test,tests,3447,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['tests']
Testability,"re, the size has to; be known at compile time. Since the release 5.10, SMatrix supports symmetric matrices using; a storage class (ROOT::Math::MatRepSym) which contains only the N*(N+1)/2 independent element; of a NxN symmetric matrix.; It is not in the mandate of this package to provide a complete linear algebra functionality; for these classes. What is provided are basic \ref MatrixFunctions and \ref VectFunction,; such as the matrix-matrix, matrix-vector, vector-vector operations, plus some extra; functionality for square matrices, like inversion, which is based on the optimized Cramer; method for squared matrices of size up to 6x6, and determinant calculation.; For a more detailed descriptions and usage examples see:. * \ref SVectorDoc; * \ref SMatrixDoc; * \ref MatVecFunctions. The SMatrix package contains only header files. Normally one does not need to build any library.; In the %ROOT distribution a library, _libSmatrix_ is produced with the C++ dictionary information; for vectors, symmetric and squared matrices for double, float types up to dimension 7.; The current version of SMatrix can be downloaded from [here](../SMatrix.tar.gz). If you want; to install the header files or run the test _configure_ script and then _make install_ or; _make check_ to build the tests. No dictionary library is built in this case. ## References. 1. T. Veldhuizen, [_Expression Templates_](http://osl.iu.edu/~tveldhui/papers/Expression-Templates/exprtmpl.html),; C++ Report, 1995.; 2. T. Glebe, _SMatrix - A high performance library for Vector/Matrix calculation and Vertexing_,; HERA-B Software Note 01-134, December 2, 2003 ([pdf](http://seal.web.cern.ch/seal/documents/mathlib/smatrix_herab.pdf)); 3. L. Moneta, %ROOT Math proposal for Linear Algebra, [presentation](http://seal.cern.ch/documents/mathlib/aa_matrix_nov05.pdf); at the LCG Application Area meeting, November 23, 2005. * * *. @authors the %ROOT Math Library Team, T. Glebe (original SMatrix author) and J. Palacios (LHCb); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/doc/index.md:2564,test,test,2564,math/smatrix/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/smatrix/doc/index.md,2,['test'],"['test', 'tests']"
Testability,"re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13483,test,test,13483,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"re.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurements. Setting the `TEST_SUITE_BENCHMARKING_ONLY` CMake; option to `ON` will disable them. Configuration; -------------. The test-suite has configuration options to customize building and running the; benchmarks. CMake can print a list of them:. ```bash; % cd test-suite-build; # Print basic options:; % cmake -LH; # Print all options:; % cmake -LAH; ```. ### Common Configuration Options. - `CMAKE_C_FLAGS`. Specify extra flags to be passed to C compiler invocations. The flags are; also passed to the C++ compiler ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:3116,test,test,3116,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,2,['test'],"['test', 'test-suite']"
Testability,"re; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointer is not null) prior to performing; some action that depends on that condition (e.g., dereferencing a pointer).; The analyzer knows about several well-known assertion handlers, but can; automatically infer if a function should be treated as an assertion handler if; it is annotated with the 'noreturn' attribute or the (Clang-specific); 'analyzer_noreturn' attribute. Note that, currently, clang does not support; these attributes on Objective-C methods and C++ methods.; Attribute 'noreturn'; The 'noreturn' attribute is a GCC-attribute that can be placed on the; declarations of functions. It means exactly what its name implies: a function; with a 'noreturn' attribute should never return.; Specific details of the syntax of using the 'noreturn' attribute can be found; in GCC's; documentation.; Not only does the analyzer exploit this information when pruning false paths,; but the compiler also takes it seriously and will generate d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:21299,assert,assertion,21299,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['assert'],['assertion']
Testability,re_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26981,test,tests,26981,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"read before the referenced; object, it is null and may cause a run time system error. To address; these limitations, ROOT offers the **`TRef`** class. **`TRef`** allows referencing an object in a different branch and/or in; a different file. **`TRef`** also supports the complex situation where a; **`TFile`** is updated multiple times on the same machine or a different; machine. When a **`TRef`** is read before its referenced object, it is; null. As soon as the referenced object is read, the **`TRef`** points to; it. In addition, one can specify an action to be taken by **`TRef`** in; the case it is read before its reference object (see""Action on Demand""; below). ### Using TRef. A **`TRef`** is a lightweight object pointing to any **`TObject`**. This; object can be used instead of normal C++ pointers in case:. - The referenced object R and the pointer P are not written to the; same file. - P is read before R. - R and P are written to different Tree branches. Below is a line from the example in `$ROOTSYS/test/Event.cxx.`. ``` {.cpp}; TRef fLastTrack; //pointer to last track; ...; Track *track = (Track*)fTracks->ConstructedAt(fNtrack++);; track->Set(random);; // Save reference to last Track in the collection of Tracks; fLastTrack = track;; ```. The `track` and its reference `fLastTrack` can be written with two; separate I/O calls in the same or in different files, in the same or in; different branches of a **`TTree`**. If the **`TRef`** is read and the; referenced object has not yet been read, **`TRef`** will return a null; pointer. As soon as the referenced object will be read, **`TRef`** will; point to it. ### How Does It Work?. A **`TRef`** is itself a **`TObject`** with an additional transient; pointer `fPID`. When a **`TRef`** is used to point to a; **`TObject`**` *R`, for example in a class with. ``` {.cpp}; TRef P;; ```. one can do:. ``` {.cpp}; P = R; //to set the pointer; ```. When the statement `P = R `is executed, the following happens:. - The pointer `fPID`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:58254,test,test,58254,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['test'],['test']
Testability,"reate directly the output file at the; final destination do not make a local copy in the temp directory first; (if needed, one can always set the temporary destination to temp; followed by a TFile::Cp to the final destination); this allows to avoid; reported problems with small temp partitions (see Forum).; In XrdProofConn, enable cycling through the; authentication protocol presented by the server. This only holds for; the choice of the protocol, because the server currently supports only; one full handshake.; In test/stressProof.cxx, avoid interferences between the; settings used for the PROOF tutorial and possible local settings; (daemon, dataset manager).; Add possibility to control the automatic re-loading of; the <proof.conf> file via the keyword; 'reload:1'/'reload:0'; in the xpd.resource directive.; Move the validation of <proof.conf> at the; moment of use; this allows to specify a file path and to dynamically; create/modify/destroy the file; used by PoD.; Improve displaying speed of large log files. Fixes. Fix two severe; bugs in the way TTreeCache; was used in PROOF: one bug was de facto disactivating the cache; the; other was causing a std::bad_alloc exception to be thrown on workers; when opening a remote file after a local one.    ; Fix several problems in TChain::Draw including. drawing into an existing histogram, i.e.; chain->Draw(""var>>myhist"");. treatment of histogram merging in case of small; statistics, i.e. when; the autobinning is not or only partially active;. usage of existing canvases when different histogram; names are specified;. Fix a problem causing a duplication of the final feedback; object. Fix problem with determining the subdir name in; TFileMerger::MergeRecursive on Windows; Make sure that the default sandbox is under $HOME/.proof; Fix a problem with dataset validation in multi-level; master setups; Fix a problem with ordinal numbers in multi-master setups; Fix a problem with defining the internal paths for; executables when configu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:8629,log,log,8629,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['log'],['log']
Testability,"reated. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call `logical graph`; the hierarchy defined by nodes and volumes. The expansion of the logical; graph by all possible paths defines a tree structure where all nodes are; unique ""touchable"" objects. We will call this the ""physical tree"".; Unlike the logical graph, the physical tree can become a huge structure; with several millions of nodes in case of complex geometries; therefore,; it is not always a good idea to keep it transient in memory. Since the; logical and physical structures are correlated, the modeller rather; keeps track only of the current branch, updating the current global; matrix at each change of the level in geometry. The current physical; node is not an object that can be asked for at a given moment, but; rather represented by the combination: current node/current global; matrix. However, physical nodes have unique ID's that can be retrieved; for a given modeller state. These can be fed back to the modeller in; order to force a physical node to become current. The advantage of this; comes from the fact that all navigation queries check first the current; node; therefore the location of a point in the geometry can be saved as; a starting state for later use. Nodes can be declared as `overlapping` in case they do overlap with; other nodes inside the same container or extrude this container (see; also ‘Checking the Geometry'). Non-overlapping nodes can be created; with:. ``` {.cpp}; TGeoVolume::AddNode(TGeoVolume *daughter,Int_t copy_No,; TGeoMatrix *matr);; ```. The creation of overlapping nodes can be ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:61692,log,logical,61692,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"reated. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call `logical graph`; the hierarchy defined by nodes and volumes. The expansion of the logical; graph by all possible paths defines a tree structure where all nodes are; unique ""touchable"" objects. We will call this the ""physical tree"".; Unlike the logical graph, the physical tree can become a huge structure; with several millions of nodes in case of complex geometries; therefore,; it is not always a good idea to keep it transient in memory. Since the; logical and physical structures are correlated, the modeller rather; keeps track only of the current branch, updating the current global; matrix at each change of the level in geometry. The current physical; node is not an object that can be asked for at a given moment, but; rather represented by the combination: current node/current global; matrix. However, physical nodes have unique ID's that can be retrieved; for a given modeller state. These can be fed back to the modeller in; order to force a physical node to become current. The advantage of this; comes from the fact that all navigation queries check first the current; node; therefore the location of a point in the geometry can be saved as; a starting state for later use. Nodes can be declared as `overlapping` in case they do overlap with; other nodes inside the same container or extrude this container (see; also ‘Checking the Geometry'). Non-overlapping nodes can be created; with:. ~~~{.cpp}; TGeoVolume::AddNode(TGeoVolume *daughter,Int_t copy_No,; TGeoMatrix *matr);; ~~~. The creation of overlapping nodes can be d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:22054,log,logical,22054,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"recated as well. ## Core Libraries. ### Interpreter. - As of v6.26, cling diagnostic messages can be redirected to the ROOT error handler. Users may enable/disable this via `TCling::ReportDiagnosticsToErrorHandler()`, e.g.; ```cpp; root [1] gInterpreter->ReportDiagnosticsToErrorHandler();; root [2] int f() { return; }; Error in <cling>: ROOT_prompt_2:1:11: non-void function 'f' should return a value [-Wreturn-type]; int f() { return; }; ^; ```; More details at [PR #8737](https://github.com/root-project/root/pull/8737).; - Continuation of input lines using backslash `\` is supported in ROOT's prompt, e.g.; ```cpp; root [0] std::cout \; root (cont'ed, cancel with .@) [1]<< ""ROOT\n"";; ```. ## I/O Libraries. - `TDirectory::WriteObject` now always saves the object's title to the file if it is derived from `TObject` (PR [#8394](https://github.com/root-project/root/pull/8934)). ### Command line utilities. - `rootls` now follows the same logic of `TFile::ls()` to print the key cycle number and its tag when listing contents of a file with the `-l` option (PR [#7878](https://github.com/root-project/root/pull/7878)):; ```; $: rootls -l https://root.cern/files/ttree_read_imt.root; TTree Mar 13 17:17 2019 TreeIMT;2 ""TTree for IMT test"" [current cycle]; TTree Mar 13 17:17 2019 TreeIMT;1 ""TTree for IMT test"" [backup cycle]; ```; - `root` will now error on receiving unrecognized options, similarly to other command line tools (PR [#8868](https://github.com/root-project/root/pull/8868)):; ```; $: root --random -z --nonexistingoption; root: unrecognized option '--random'; root: unrecognized option '-z'; root: unrecognized option '--nonexistingoption'; Try 'root --help' for more information.; ```. ## TTree Libraries. - `TTreeReader::GetEntryStatus` now always reports `kEntryBeyondEnd` after an event loop correctly completes. In previous versions, it could sometime return `kEntryNotFound` even for well-behaved event loops.; - Add `TEntryList::AddSubList` to specifically add a sub-list t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md:4460,log,logic,4460,README/ReleaseNotes/v626/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md,1,['log'],['logic']
Testability,"recise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception(",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22611,test,test,22611,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"recognized character!; return O.error(""'"" + Arg + ""' value invalid for file size argument!"");; }; }; }. This function implements a very simple parser for the kinds of strings we are; interested in. Although it has some holes (it allows ""``123KKK``"" for example),; it is good enough for this example. Note that we use the option itself to print; out the error message (the ``error`` method always returns true) in order to get; a nice error message (shown below). Now that we have our parser class, we can; use it like this:. .. code-block:: c++. static cl::opt<unsigned, false, FileSizeParser>; MFS(""max-file-size"", cl::desc(""Maximum file size to accept""),; cl::value_desc(""size""));. Which adds this to the output of our program:. ::. OPTIONS:; -help - display available options (-help-hidden for more); ...; -max-file-size=<size> - Maximum file size to accept. And we can test that our parse works correctly now (the test program just prints; out the max-file-size argument value):. ::. $ ./test; MFS: 0; $ ./test -max-file-size=123MB; MFS: 128974848; $ ./test -max-file-size=3G; MFS: 3221225472; $ ./test -max-file-size=dog; -max-file-size option: 'dog' value invalid for file size argument!. It looks like it works. The error message that we get is nice and helpful, and; we seem to accept reasonable file sizes. This wraps up the ""custom parser""; tutorial. Exploiting external storage; ---------------------------. Several of the LLVM libraries define static ``cl::opt`` instances that will; automatically be included in any program that links with that library. This is; a feature. However, sometimes it is necessary to know the value of the command; line option outside of the library. In these cases the library does or should; provide an external storage location that is accessible to users of the; library. Examples of this include the ``llvm::DebugFlag`` exported by the; ``lib/Support/Debug.cpp`` file and the ``llvm::TimePassesIsEnabled`` flag; exported by the ``lib/IR/PassManager.cpp``",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:66065,test,test,66065,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,"recommend using ASan over GWP-ASan in testing, as well as anywhere; else that guaranteed error detection is more valuable than the 2x execution; slowdown/binary size bloat. For the majority of production environments, this; impact is too high, and GWP-ASan proves extremely useful. Design; ======. **Please note:** The implementation of GWP-ASan is largely in-flux, and these; details are subject to change. There are currently other implementations of; GWP-ASan, such as the implementation featured in; `Chromium <https://cs.chromium.org/chromium/src/components/gwp_asan/>`_. The; long-term support goal is to ensure feature-parity where reasonable, and to; support compiler-rt as the reference implementation. Allocator Support; -----------------. GWP-ASan is not a replacement for a traditional allocator. Instead, it works by; inserting stubs into a supporting allocator to redirect allocations to GWP-ASan; when they're chosen to be sampled. These stubs are generally implemented in the; implementation of ``malloc()``, ``free()`` and ``realloc()``. The stubs are; extremely small, which makes using GWP-ASan in most allocators fairly trivial.; The stubs follow the same general pattern (example ``malloc()`` pseudocode; below):. .. code:: cpp. #ifdef INSTALL_GWP_ASAN_STUBS; gwp_asan::GuardedPoolAllocator GWPASanAllocator;; #endif. void* YourAllocator::malloc(..) {; #ifdef INSTALL_GWP_ASAN_STUBS; if (GWPASanAllocator.shouldSample(..)); return GWPASanAllocator.allocate(..);; #endif. // ... the rest of your allocator code here.; }. Then, all the supporting allocator needs to do is compile with; ``-DINSTALL_GWP_ASAN_STUBS`` and link against the GWP-ASan library! For; performance reasons, we strongly recommend static linkage of the GWP-ASan; library. Guarded Allocation Pool; -----------------------. The core of GWP-ASan is the guarded allocation pool. Each sampled allocation is; backed using its own *guarded* slot, which may consist of one or more accessible; pages. Each guarded slot ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst:2328,stub,stubs,2328,interpreter/llvm-project/llvm/docs/GwpAsan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GwpAsan.rst,1,['stub'],['stubs']
Testability,"references of null pointers. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. core.StackAddressEscape; (C); Check that addresses of stack memory do not escape the function. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. core.UndefinedBinaryOperatorResult; (C); Check for undefined results of binary operators. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. core.VLASize; (C); Check for declarations of VLA of undefined or zero size. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. core.uninitialized.ArraySubscript; (C); Check for uninitialized values used as array subscripts. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. core.uninitialized.Assign; (C); Check for assigning uninitialized values. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. core.uninitialized.Branch; (C); Check for uninitialized values used as branch conditions. void test() {; int x;; if (x) // warn; return;; }. core.uninitialized.CapturedBlockVariable; (C); Check for blocks that capture uninitialized values. void test() {; int x;; ^{ int y = x; }(); // warn; }. core.uninitialized.UndefReturn; (C); Check for uninitialized values being returned to the caller. int test() {; int x;; return x; // warn; }. C++ Checkers. Name, DescriptionExample. cplusplus.NewDelete; (C++); Check for double-free, use-after-free and offset problems involving C++ ; delete. void f(int *p);. void testUseMiddleArgAfterDelet",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:4212,test,test,4212,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"referencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCon",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21183,test,test,21183,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"regular object files implicitly treated as objects to be; tested. Definitions of symbols in the harness set override definitions in the; test set, and external references from the harness cause automatic scope; promotion of local symbols in the test set (these modifications to the usual; linker rules are accomplished via an ``ObjectLinkingLayer::Plugin`` installed by; ``llvm-jitlink`` when it sees the ``-harness`` option). With these modifications in place we can selectively test functions in an object; file by mocking those function's callees. For example, suppose we have an object; file, ``test_code.o``, compiled from the following C source (which we need not; have access to):. .. code-block:: c. void irrelevant_function() { irrelevant_external(); }. int function_to_mock(int X) {; return /* some function of X */;; }. static void function_to_test() {; ...; int Y = function_to_mock();; printf(""Y is %i\n"", Y);; }. If we want to know how ``function_to_test`` behaves when we change the behavior; of ``function_to_mock`` we can test it by writing a test harness:. .. code-block:: c. void function_to_test();. int function_to_mock(int X) {; printf(""used mock utility function\n"");; return 42;; }. int main(int argc, char *argv[]) {; function_to_test():; return 0;; }. Under normal circumstances these objects could not be linked together:; ``function_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in a; duplicate definition error, and ``irrelevant_external`` is undefined.; However, using ``-harness`` and ``-phony-externals`` we can run this code; with:. .. code-block:: sh. % clang -c -o test_code_harness.o test_code_harness.c; % llvm-jitlink -phony-externals test_code.o -harness test_code_harness.o; used mock utility function; Y is 42. The ``-harness`` option may be of interest to people who want to perform some; very late testing on build products to verify that compiled code behaves as; expected. On b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:41634,test,test,41634,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,2,['test'],['test']
Testability,"rementioned free function. **Sample Steps**: To add Code Generation support to an existing RooFit class,; following is a sample set of steps (using the aforementioned approach of; extracting free functions in a separate file.). **1. Extract logic into a separate file** Implement what your class is; supposed to do as a free function in [MathFuncs].; This implementation must be compatible with the syntax supported by Clad. **2. Refactor evaluate():** Refactor the existing `RooAbsReal::evaluate()`; function to use the `MathFuncs.h` implementation. This is optional, but; can reduce code duplication and potential for bugs. This may require some; effort if an extensive caching infrastructure is used in your model. **3. Add translate():** RooFit classes are extended using a (typically) simple; `translate()` function that extracts the mathematically differentiable; properties out of the RooFit classes that make up the statistical model. The `translate()` function helps implement the Code Squashing logic that is; used to optimize numerical evaluations. It accomplishes this by using a small; subset of helper functions that are available in the; `RooFit::Detail::CodeSquashContext` and `RooFuncWrapper` classes; (see Appendix B). It converts a RooFit expression into a form that can be; efficiently evaluated by Clad. The `translate()` function returns an `std::string` representing the; underlying mathematical notation of the class as code, that can later be; concatenated into a single string representing the entire model. This string; of code is then just-in-time compiled by Cling (a C++ interpreter for Root). **4. analyticalIntegral() Use Case:** If your class includes (or should; include) the `analyticalIntegral()` function, then a simple; `buildCallToAnalyticIntegral()` function needs to be created to help call the; `analyticalIntegral()` function. # Example for adding Code Generation support to RooFit classes. Let us take the `RooPoisson.cxx` class as an example. > [roofit/roo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:8397,log,logic,8397,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['logic']
Testability,"rence other response files. Users interested in the :program:`lit` architecture or designing a; :program:`lit` testing implementation should see :ref:`lit-infrastructure`. GENERAL OPTIONS; ---------------. .. option:: -h, --help. Show the :program:`lit` help message. .. option:: -j N, --workers=N. Run ``N`` tests in parallel. By default, this is automatically chosen to; match the number of detected available CPUs. .. option:: --config-prefix=NAME. Search for :file:`{NAME}.cfg` and :file:`{NAME}.site.cfg` when searching for; test suites, instead of :file:`lit.cfg` and :file:`lit.site.cfg`. .. option:: -D NAME[=VALUE], --param NAME[=VALUE]. Add a user defined parameter ``NAME`` with the given ``VALUE`` (or the empty; string if not given). The meaning and use of these parameters is test suite; dependent. .. _output-options:. OUTPUT OPTIONS; --------------. .. option:: -q, --quiet. Suppress any output except for test failures. .. option:: -s, --succinct. Show less output, for example don't show information on tests that pass.; Also show a progress bar, unless ``--no-progress-bar`` is specified. .. option:: -v, --verbose. Show more information on test failures, for example the entire test output; instead of just the test result. Each command is printed before it is executed. This can be valuable for; debugging test failures, as the last printed command is the one that failed.; Moreover, :program:`lit` inserts ``'RUN: at line N'`` before each; command pipeline in the output to help you locate the source line of; the failed command. .. option:: -vv, --echo-all-commands. Deprecated alias for -v. .. option:: -a, --show-all. Enable -v, but for all tests not just failed tests. .. option:: --no-progress-bar. Do not use curses based progress bar. .. option:: --show-unsupported. Show the names of unsupported tests. .. option:: --show-xfail. Show the names of tests that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Spe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:3169,test,tests,3169,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"rence; frame - e.g. a sphere, radius `r`, at `x`, `y`, `z`. - Repeated placement (copying) in world frame of this locally unique; piece of geometry (described in local reference frame) e.g. define a; sphere `S` (radius `r`), place copy at `x1`, `y1`, `z1`, another; copy at `x2`, `y2`, `z2` etc. The second case is very typical in geometry packages, e.g. ROOT's; **`TGeo`** package, GEANT4 etc, where we have very large number repeated; placements of relatively few unique ""shapes"". Some viewers (GL Viewer only at present) are able to take advantage of; this by identifying unique logical shapes from the `fID` logical ID; member of **`TBuffer3D`**. If repeated addition of the same `fID` is; found, the shape is cached already - and the costly tessellation does; not need to be sent again. The viewer can also perform internal GL; specific caching (display lists) with considerable performance gains in; these cases. For this to work correctly the logical object in must be; described in **`TBuffer3D`** in the local reference frame, complete with; the local`/`master translation. In some cases you will not have a real; object you can reasonably set **`TBuffer3D::fID` to, or the object is; recycled or temporary. To suppress internal caching in the GL Viewer in; these cases, set `TBuffer3D::fID` to 0 (null).**. The viewer indicates it can support local frame objects through the; **`TVirtualViewer3D`** interface method: `PreferLocalFrame()`. If this; returns `kTRUE` you can make repeated calls to `AddObject()`, with; **`TBuffer3D`** containing the same `fID`, and different `fLocalMaster`; placements. For viewers supporting logical/physical objects, the TBuffer3D content; refers to the properties of the logical object, with the exception of:. - `fLocalMaster` transform. - `fColor `. - `fTransparency`. attributes, which can be varied for **each** physical object. As **a minimum requirement** all clients must be capable of filling the; raw tessellation of the object buffer, in the mast",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:135290,log,logical,135290,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logical']
Testability,"rent block; but we can still insert a PHI (as we do with LCSSA PHI nodes) *and*; use the original value afterwards (in which case the two live ranges overlap,; although in LCSSA (the whole point is that) we never do that). .. [#def-use-chain] A property of SSA is that there exists a def-use chain; for each definition, which is a list of all the uses of this definition.; LLVM implements this property by keeping a list of all the uses of a Value; in an internal data structure. ""More Canonical"" Loops; ======================. .. _loop-terminology-loop-rotate:. Rotated Loops; -------------. Loops are rotated by the LoopRotate (:ref:`loop-rotate <passes-loop-rotate>`); pass, which converts loops into do/while style loops and is; implemented in; `LoopRotation.h <https://llvm.org/doxygen/LoopRotation_8h_source.html>`_. Example:. .. code-block:: C. void test(int n) {; for (int i = 0; i < n; i += 1); // Loop body; }. is transformed to:. .. code-block:: C. void test(int n) {; int i = 0;; do {; // Loop body; i += 1;; } while (i < n);; }. **Warning**: This transformation is valid only if the compiler; can prove that the loop body will be executed at least once. Otherwise,; it has to insert a guard which will test it at runtime. In the example; above, that would be:. .. code-block:: C. void test(int n) {; int i = 0;; if (n > 0) {; do {; // Loop body; i += 1;; } while (i < n);; }; }. It's important to understand the effect of loop rotation; at the LLVM IR level. We follow with the previous examples; in LLVM IR while also providing a graphical representation; of the control-flow graphs (CFG). You can get the same graphical; results by utilizing the :ref:`view-cfg <passes-view-cfg>` pass. The initial **for** loop could be translated to:. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %for.header. for.header:; %i = phi i32 [ 0, %entry ], [ %i.next, %latch ]; %cond = icmp slt i32 %i, %n; br i1 %cond, label %body, label %exit. body:; ; Loop body; br label %latch. l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:18960,test,test,18960,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['test'],['test']
Testability,"rent scope level. The GCC; generated object, shows **'4'**, which is the correct value. Note that there is no requirement that GCC must produce identical or; similar DWARF to Clang to allow the comparison. We're only comparing; the semantics. The same case when comparing CodeView debug information; generated by MSVC and Clang. There are 2 comparison methods: logical view and logical elements. LOGICAL VIEW; """"""""""""""""""""""""; It compares the logical view as a whole unit; for a match, each compared; logical element must have the same parents and children. Using the :program:`llvm-debuginfo-analyzer` comparison functionality,; that issue can be seen in a more global context, that can include the; logical view. The output shows in view form the **missing (-), added (+)** elements,; giving more context by swapping the reference and target object files. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=view; --print=symbols,types; test-dwarf-clang.o test-dwarf-gcc.o. Reference: 'test-dwarf-clang.o'; Target: 'test-dwarf-gcc.o'. Logical View:; [000] {File} 'test-dwarf-clang.o'. [001] {CompileUnit} 'test.cpp'; [002] 1 {TypeAlias} 'INTPTR' -> '* const int'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; +[004] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; -[003] 4 {TypeAlias} 'INTEGER' -> 'int'. The output shows the merging view path (reference and target) with the; missing and added elements. LOGICAL ELEMENTS; """"""""""""""""""""""""""""""""; It compares individual logical elements without considering if their; parents are the same. For both comparison methods, the equal criteria; includes the name, source code location, type, lexical scope level. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level; --compare=types; --report=list; --print=symbol",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:30388,test,test-dwarf-gcc,30388,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test-dwarf-gcc']
Testability,"repo and create a new branch; cd llvm-project; git switch -c my_change. # Create your changes; $EDITOR file.cpp. # Don't forget clang-format; git clang-format. # and don't forget running your tests; ninja check-llvm. # Commit, use a good commit message; git commit file.cpp. # Create the PR, select to use your own fork when prompted.; # If you don't have a fork, gh will create one for you.; gh pr create. # If you get any review comments, come back to the branch and; # adjust them.; git switch my_change; $EDITOR file.cpp. # Commit your changes; git commit file.cpp -m ""Code Review adjustments"". # Format changes; git clang-format HEAD~. # Recommit if any formatting changes; git commit -a --amend. # Push your changes to your fork branch, be mindful of; # your remotes here, if you don't remember what points to your; # fork, use git remote -v to see. Usually origin points to your; # fork and upstream to llvm/llvm-project; git push origin my_change. Before merging the PR, it is recommended that you rebase locally and re-run test; checks:. ::. # Add upstream as a remote (if you don't have it already); git remote add upstream https://github.com/llvm/llvm-project.git. # Make sure you have all the latest changes; git fetch upstream && git rebase -i upstream/main. # Make sure tests pass with latest changes and your change; ninja check. # Push the rebased changes to your fork.; git push origin my_change -f. # Now merge it; gh pr merge --squash --delete-branch. See more in-depth information about how to contribute in the following documentation:. * :doc:`Contributing`; * :doc:`MyFirstTypoFix`. Example Pull Request with git; ====================================. Instead of using the GitHub CLI to create a PR, you can push your code to a; remote branch on your fork and create the PR to upstream using the GitHub web; interface. Here is an example of making a PR using git and the GitHub web interface:. First follow the instructions to [fork the repository](https://docs.github.com/en/ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:8802,test,test,8802,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['test']
Testability,"res are reported in the output,; but are likely drowned in the other output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at the end of the run and; the results are always stored in the ``report.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. Lets say that you have an LLVM optimization pass, and you want to see; how many times it triggers. First thing you should do is add an LLVM; `statistic <ProgrammersManual.html#Statistic>`_ to your pass, which will; tally counts of things you care about. Following this, you can set up a test and a report that collects these; and formats them for easy viewing. This consists of two files, a; ""``test-suite/TEST.XXX.Makefile``"" fragment (where XXX is the name of; your test) and a ""``test-suite/TEST.XXX.report``"" file that indicates; how",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:4965,test,test,4965,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test']
Testability,"responsible for making all necessary; adjustments soon after the initial merge.; 2. Send a request for comment (RFC) to the `LLVM Discourse forums`_ describing; your target and how it follows all the requirements and what work has been; done and will need to be done to accommodate the official target requirements.; Make sure to expose any and all controversial issues, changes needed in the; base code, table gen, etc.; 3. Once the response is positive, the LLVM community can start reviewing the; actual patches (but they can be prepared before, to support the RFC). Create; a sequence of N patches, numbered '1/N' to 'N/N' (make sure N is an actual; number, not the letter 'N'), that completes the basic structure of the target.; 4. The initial patch should add documentation, code owners and triple support in; clang and LLVM. The following patches add TableGen infrastructure to describe; the target and lower instructions to assembly. The final patch must show that; the target can lower correctly with extensive LIT tests (IR to MIR, MIR to; ASM, etc).; 5. Some patches may be approved before others, but only after *all* patches are; approved that the whole set can be merged in one go. This is to guarantee; that all changes are good as a single block.; 6. After the initial merge, the target community can stop numbering patches and; start working asynchronously on the target to complete support. They should; still seek review from those who helped them in the initial phase, to make; sure the progress is still consistent.; 7. Once all official requirements have been fulfilled (as above), the code owner; should request the target to be enabled by default by sending another RFC to; the `LLVM Discourse forums`_. Adding an Established Project To the LLVM Monorepo; --------------------------------------------------. The `LLVM monorepo <https://github.com/llvm/llvm-project>`_ is the centerpoint; of development in the LLVM world, and has all of the primary LLVM components,; including ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:44189,test,tests,44189,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['tests']
Testability,"ressSpaces=false``.; *Defaults to true*. .. code-block:: objc. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. .. _core-StackAddressEscape:. core.StackAddressEscape (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check that addresses to stack memory do not escape the function. .. code-block:: c. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. .. _core-UndefinedBinaryOperatorResult:. core.UndefinedBinaryOperatorResult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or zero size. Check for declarations of VLA of undefined or zero size. .. code-block:: c. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. .. _core-uninitialized-ArraySubscript:. core.uninitialized.ArraySubscript (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as array subscripts. .. code-block:: c. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. .. _core-uninitialized-Assign:. core.uninitialized.Assign (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for assigning uninitialized values. .. code-block:: c. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. .. _core-uninitialized-Branch:. core.uninitialized.Branch (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitializ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:5210,test,test,5210,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ression tests; ----------------------------. The regression test structure is very simple, but does require some; information to be set. This information is gathered via ``cmake``; and is written to a file, ``test/lit.site.cfg.py`` in the build directory.; The ``llvm/test`` Makefile does this work for you. In order for the regression tests to work, each directory of tests must; have a ``lit.local.cfg`` file. :program:`lit` looks for this file to determine; how to run the tests. This file is just Python code and thus is very; flexible, but we've standardized it for the LLVM regression tests. If; you're adding a directory of tests, just copy ``lit.local.cfg`` from; another directory to get running. The standard ``lit.local.cfg`` simply; specifies which files to look in for tests. Any directory that contains; only directories does not need the ``lit.local.cfg`` file. Read the :doc:`Lit; documentation <CommandGuide/lit>` for more information. Each test file must contain lines starting with ""RUN:"" that tell :program:`lit`; how to run it. If there are no RUN lines, :program:`lit` will issue an error; while running a test. RUN lines are specified in the comments of the test program using the; keyword ``RUN`` followed by a colon, and lastly the command (pipeline); to execute. Together, these lines form the ""script"" that :program:`lit`; executes to run the test case. The syntax of the RUN lines is similar to a; shell's syntax for pipelines including I/O redirection and variable; substitution. However, even though these lines may *look* like a shell; script, they are not. RUN lines are interpreted by :program:`lit`.; Consequently, the syntax differs from shell in a few ways. You can specify; as many RUN lines as needed. :program:`lit` performs substitution on each RUN line to replace LLVM tool names; with the full paths to the executable built for each tool (in; ``$(LLVM_OBJ_ROOT)/bin``). This ensures that :program:`lit` does; not invoke any stray LLVM tools in the user's pat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:8272,test,test,8272,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ression; or a known bug. Known bugs are ""unsupported features"" and some bugs can be; disabled if they have been implemented recently. * The stage in the release. Less critical bugs should be considered to be; fixed between RC1 and RC2, but not so much at the end of it. * If it's a correctness or a performance regression. Performance regression; tends to be taken more lightly than correctness. .. _scripts:. Scripts; =======. The scripts are in the ``utils/release`` directory. test-release.sh; ---------------. This script will check-out, configure and compile LLVM+Clang (+ most add-ons,; like ``compiler-rt``, ``libcxx``, ``libomp`` and ``clang-extra-tools``) in; three stages, and will test the final stage.; It'll have installed the final binaries on the Phase3/Releasei(+Asserts); directory, and that's the one you should use for the test-suite and other; external tests. To run the script on a specific release candidate run::. ./test-release.sh \; -release 3.3 \; -rc 1 \; -no-64bit \; -test-asserts \; -no-compare-files. Each system will require different options. For instance, x86_64 will; obviously not need ``-no-64bit`` while 32-bit systems will, or the script will; fail. The important flags to get right are:. * On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2,; change it to ``-rc 2`` and so on. * On non-release testing, you can use ``-final`` in conjunction with; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a; ""Release+Asserts"" directory, which is needed for release testing and; benchmarking. This will take twice as long. * On the final candidate you just need Release builds, and that's the binary; directory you'll have to pack. * On macOS, you must export ``MACOSX_DEPLOYMENT_TARGET=10.9`` before running; the script. This script builds three phases of Clang+LLVM twice each (Release and; Re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:2122,test,test-asserts,2122,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test-asserts']
Testability,"ressions; * Support UTF-8 encoded ``unicode`` through ``std::string``; * Support for ``std::byte``; * Enable assignment to function pointer variable; * Allow passing cppyy.nullptr where a function pointer is expected; * Disable copy construction into constructed object (use ``__assign__`` instead); * Cover more cases when to set a lifeline; * Lower priority of implicit conversion to temporary with initializer_list ctor; * Add type reduction pythonization for trimming expression template type trees; * Allow mixing ``std::string`` and ``str`` as dictionary keys; * Support C-style pointer-to-struct as array; * Support C-style enum variable declarations; * Fixed const_iterator by-ref return type regression; * Resolve enums into the actual underlying type instead of int; * Remove '-isystem' from makepch flags; * Extended documentation. 2020-01-04: 1.6.1; -----------------. * Mapped C++ exception reporting detailing; * Mapped C++ exception cleanup bug fix; * STL vector constructor passes the CPython sequence construction; * STL vector slicing passes the CPython sequence slicing tests; * Extended documentation. 2019-12-23: 1.6.0; -----------------. * Classes derived from ``std::exception`` can be used as Python exceptions; * Template handling detailing (for Eigen); * Support keyword arguments; * Added add_library_path at module level; * Extended documentation; * Fix regression bugs: #176, #179, #180, #182. 2019-11-07: 1.5.7; -----------------. * Allow implicit converions for move arguments; * Choose vector over initializer_list if part of the template argument list. 2019-11-03: 1.5.6; -----------------. * Added public C++ API for some CPyCppyy core functions (CPython only); * Support for char16_t/char16_t* and char32_t/char32_t*; * Respect ``std::hash`` in ``__hash__``; * Fix iteration over vector of shared_ptr; * Length checking on global variables of type 'signed char[N]'; * Properly support overloaded templated with non-templated ``__setitem__``; * Support for array of c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/changelog.rst:15021,test,tests,15021,bindings/pyroot/cppyy/cppyy/doc/source/changelog.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/bindings/pyroot/cppyy/cppyy/doc/source/changelog.rst,1,['test'],['tests']
Testability,"result in a lot of records in the resulting trace. Also by default the filename of the XRay trace is ``xray-log.XXXXXX`` where the; ``XXXXXX`` part is randomly generated. These options can be controlled through the ``XRAY_OPTIONS`` environment; variable, where we list down the options and their defaults below. +-------------------+-----------------+---------------+------------------------+; | Option | Type | Default | Description |; +===================+=================+===============+========================+; | patch_premain | ``bool`` | ``false`` | Whether to patch |; | | | | instrumentation points |; | | | | before main. |; +-------------------+-----------------+---------------+------------------------+; | xray_mode | ``const char*`` | ``""""`` | Default mode to |; | | | | install and initialize |; | | | | before ``main``. |; +-------------------+-----------------+---------------+------------------------+; | xray_logfile_base | ``const char*`` | ``xray-log.`` | Filename base for the |; | | | | XRay logfile. |; +-------------------+-----------------+---------------+------------------------+; | verbosity | ``int`` | ``0`` | Runtime verbosity |; | | | | level. |; +-------------------+-----------------+---------------+------------------------+. If you choose to not use the default logging implementation that comes with the; XRay runtime and/or control when/how the XRay instrumentation runs, you may use; the XRay APIs directly for doing so. To do this, you'll need to include the; ``xray_log_interface.h`` from the compiler-rt ``xray`` directory. The important API; functions we list below:. - ``__xray_log_register_mode(...)``: Register a logging implementation against; a string Mode identifier. The implementation is an instance of; ``XRayLogImpl`` defined in ``xray/xray_log_interface.h``.; - ``__xray_log_select_mode(...)``: Select the mode to install, associated with; a string Mode identifier. Only implementations registered with; ``__xray_log_register_mode(...)`` can b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:6155,log,logfile,6155,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['logfile']
Testability,"result without modifying a test; case that uses the ``XFAIL`` directive. ADDITIONAL OPTIONS; ------------------. .. option:: --debug. Run :program:`lit` in debug mode, for debugging configuration issues and; :program:`lit` itself. .. option:: --show-suites. List the discovered test suites and exit. .. option:: --show-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:11295,test,test,11295,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"ret void }`. - It is possible to drop the whole IR section of the MIR file if it only; contains dummy functions (see above). The .mir loader will create the; IR functions automatically in this case. .. _limitations:. Limitations; -----------. Currently the MIR format has several limitations in terms of which state it; can serialize:. - The target-specific state in the target-specific ``MachineFunctionInfo``; subclasses isn't serialized at the moment. - The target-specific ``MachineConstantPoolValue`` subclasses (in the ARM and; SystemZ backends) aren't serialized at the moment. - The ``MCSymbol`` machine operands don't support temporary or local symbols. - A lot of the state in ``MachineModuleInfo`` isn't serialized - only the CFI; instructions and the variable debug information from MMI is serialized right; now. These limitations impose restrictions on what you can test with the MIR format.; For now, tests that would like to test some behaviour that depends on the state; of temporary or local ``MCSymbol`` operands or the exception handling state in; MMI, can't use the MIR format. As well as that, tests that test some behaviour; that depends on the state of the target specific ``MachineFunctionInfo`` or; ``MachineConstantPoolValue`` subclasses can't use the MIR format at the moment. High Level Structure; ====================. .. _embedded-module:. Embedded Module; ---------------. When the first YAML document contains a `YAML block literal string`_, the MIR; parser will treat this string as an LLVM assembly language string that; represents an embedded LLVM IR module.; Here is an example of a YAML document that contains an LLVM module:. .. code-block:: llvm. define i32 @inc(i32* %x) {; entry:; %0 = load i32, i32* %x; %1 = add i32 %0, 1; store i32 %1, i32* %x; ret i32 %1; }. .. _YAML block literal string: http://www.yaml.org/spec/1.2/spec.html#id2795688. Machine Functions; -----------------. The remaining YAML documents contain the machine functions. This is an example",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:5972,test,tests,5972,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,2,['test'],"['test', 'tests']"
Testability,"return value is destroyed. So, the matrix constructor is; called 3 times and the destructor 2 times. For big matrices,; the cost of multiple constructing/copying/destroying of objects; may be very large. *Some* optimized compilers can cut down on 1; copying/destroying, but still it leaves at least two calls to; the constructor. Note, TMatrixDLazy (see below) can construct; TMatrixD m ""inplace"", with only a _single_ call to the; constructor. #### 2. Use ""two-address instructions"". ~~~ {.cpp}; void TMatrixD::operator += (const TMatrixD &B);; ~~~. as much as possible.; That is, to add two matrices, it's much more efficient to write. ~~~ {.cpp}; A += B;; ~~~. than. ~~~ {.cpp}; TMatrixD C = A + B;; ~~~. (if both operand should be preserved, `TMatrixD C = A; C += B;`; is still better). #### 3. Use glorified constructors when returning of an object seems inevitable:. ~~~ {.cpp}; TMatrixD A(TMatrixD::kTransposed,B);; TMatrixD C(A,TMatrixD::kTransposeMult,B);; ~~~. like in the following snippet (from `$ROOTSYS/test/vmatrix.cxx`); that verifies that for an orthogonal matrix T, T'T = TT' = E. ~~~ {.cpp}; TMatrixD haar = THaarMatrixD(5);; TMatrixD unit(TMatrixD::kUnit,haar);; TMatrixD haar_t(TMatrixD::kTransposed,haar);; TMatrixD hth(haar,TMatrixD::kTransposeMult,haar);; TMatrixD hht(haar,TMatrixD::kMult,haar_t);; TMatrixD hht1 = haar; hht1 *= haar_t;; VerifyMatrixIdentity(unit,hth);; VerifyMatrixIdentity(unit,hht);; VerifyMatrixIdentity(unit,hht1);; ~~~. #### 4. Accessing row/col/diagonal of a matrix without much fuss. (and without moving a lot of stuff around):. ~~~ {.cpp}; TMatrixD m(n,n); TVectorD v(n); TMatrixDDiag(m) += 4;; v = TMatrixDRow(m,0);; TMatrixDColumn m1(m,1); m1(2) = 3; // the same as m(2,1)=3;; ~~~. Note, constructing of, say, TMatrixDDiag does *not* involve any; copying of any elements of the source matrix. #### 5. It's possible (and encouraged) to use ""nested"" functions; For example, creating of a Hilbert matrix can be done as follows:. ~~~ {.cpp}; void foo(",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/matrix/doc/index.md:16249,test,test,16249,math/matrix/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/matrix/doc/index.md,1,['test'],['test']
Testability,"return y;; }. //===---------------------------------------------------------------------===//. The loop unroller should partially unroll loops (instead of peeling them); when code growth isn't too bad and when an unroll count allows simplification; of some code within the loop. One trivial example is:. #include <stdio.h>; int main() {; int nRet = 17;; int nLoop;; for ( nLoop = 0; nLoop < 1000; nLoop++ ) {; if ( nLoop & 1 ); nRet += 2;; else; nRet -= 1;; }; return nRet;; }. Unrolling by 2 would eliminate the '&1' in both copies, leading to a net; reduction in code size. The resultant code would then also be suitable for; exit value computation. //===---------------------------------------------------------------------===//. We miss a bunch of rotate opportunities on various targets, including ppc, x86,; etc. On X86, we miss a bunch of 'rotate by variable' cases because the rotate; matching code in dag combine doesn't look through truncates aggressively ; enough. Here are some testcases reduces from GCC PR17886:. unsigned long long f5(unsigned long long x, unsigned long long y) {; return (x << 8) | ((y >> 48) & 0xffull);; }; unsigned long long f6(unsigned long long x, unsigned long long y, int z) {; switch(z) {; case 1:; return (x << 8) | ((y >> 48) & 0xffull);; case 2:; return (x << 16) | ((y >> 40) & 0xffffull);; case 3:; return (x << 24) | ((y >> 32) & 0xffffffull);; case 4:; return (x << 32) | ((y >> 24) & 0xffffffffull);; default:; return (x << 40) | ((y >> 16) & 0xffffffffffull);; }; }. //===---------------------------------------------------------------------===//. This (and similar related idioms):. unsigned int foo(unsigned char i) {; return i | (i<<8) | (i<<16) | (i<<24);; } . compiles into:. define i32 @foo(i8 zeroext %i) nounwind readnone ssp noredzone {; entry:; %conv = zext i8 %i to i32; %shl = shl i32 %conv, 8; %shl5 = shl i32 %conv, 16; %shl9 = shl i32 %conv, 24; %or = or i32 %shl9, %conv; %or6 = or i32 %or, %shl5; %or10 = or i32 %or6, %shl; ret i32 %or",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:16779,test,testcases,16779,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['testcases']
Testability,"returns kNone, as it does; for successful addition, indicating it does not require further; information about this object. Hence you should not try to make any; assumptions about what the viewer did with the object. The viewer may; decide to force the client to rebuild (republish) the scene, obtaining a; different collection of objects, if the internal viewer state changes; .e.g. significant camera move. It does this presently by forcing a; repaint on the attached **`TPad`** object - hence you should attach you; master geometry object to the pad (via `TObject::Draw()`), and perform; the publishing to the viewer in response to **`TObject::Paint()`**. #### Physical IDs. TVirtualViewer3D provides for two methods of object addition:. ``` {.cpp}; virtual Int_t AddObject(const TBuffer3D &buffer,; Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID,; const TBuffer3D & buffer,; Bool_t *addChildren = 0); ```. If you use the first (simple) case a viewer using logical/physical pairs; will generate sequential IDs for each physical object internally. Scene; rebuilds will require destruction and recreation of all physical; objects. For the second you can specify an identifier from the client; side, which must be unique and stable - i.e. the IDs of a published; object is consistent, regardless of changes in termination of contained; child geometry branches. In this case the viewer can safely cache the; physical objects across scene rebuilds, discarding those no longer of; interest. #### Child Objects. In many geometries there is a rigid containment hierarchy, and so if the; viewer is not interested in a certain object due to limits/size then it; will also not be interest in any of the contained branch of siblings.; Both `TBuffer3D::AddObject()` methods have an `addChildren` return; parameter. The viewer will complete this (if passed) indicating if; children of the object just sent are worth sending. #### Recycling TBuffer3D. Once add `TBuffer3D::AddObject()` has b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:137859,log,logical,137859,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logical']
Testability,"rgets."" ON). option(LLVM_INCLUDE_UTILS ""Generate build targets for the LLVM utils."" ON); option(LLVM_BUILD_UTILS; ""Build LLVM utility binaries. If OFF, just generate build targets."" ON). option(LLVM_INCLUDE_RUNTIMES ""Generate build targets for the LLVM runtimes."" ON); option(LLVM_BUILD_RUNTIMES; ""Build the LLVM runtimes. If OFF, just generate build targets."" ON). option(LLVM_BUILD_RUNTIME; ""Build the LLVM runtime libraries."" ON); option(LLVM_BUILD_EXAMPLES; ""Build the LLVM example programs. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_EXAMPLES ""Generate build targets for the LLVM examples"" ON). if(LLVM_BUILD_EXAMPLES); add_compile_definitions(BUILD_EXAMPLES); endif(LLVM_BUILD_EXAMPLES). option(LLVM_BUILD_TESTS; ""Build LLVM unit tests. If OFF, just generate build targets."" OFF); option(LLVM_INCLUDE_TESTS ""Generate build targets for the LLVM unit tests."" ON). option(LLVM_INSTALL_GTEST; ""Install the llvm gtest library. This should be on if you want to do; stand-alone builds of the other projects and run their unit tests."" OFF). option(LLVM_BUILD_BENCHMARKS ""Add LLVM benchmark targets to the list of default; targets. If OFF, benchmarks still could be built using Benchmarks target."" OFF); option(LLVM_INCLUDE_BENCHMARKS ""Generate benchmark targets. If OFF, benchmarks can't be built."" ON). option (LLVM_BUILD_DOCS ""Build the llvm documentation."" OFF); option (LLVM_INCLUDE_DOCS ""Generate build targets for llvm documentation."" ON); option (LLVM_ENABLE_DOXYGEN ""Use doxygen to generate llvm API documentation."" OFF); option (LLVM_ENABLE_SPHINX ""Use Sphinx to generate llvm documentation."" OFF); option (LLVM_ENABLE_OCAMLDOC ""Build OCaml bindings documentation."" ON); option (LLVM_ENABLE_BINDINGS ""Build bindings."" ON). set(LLVM_INSTALL_DOXYGEN_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/doxygen-html""; CACHE STRING ""Doxygen-generated HTML documentation install directory""); set(LLVM_INSTALL_OCAMLDOC_HTML_DIR ""${CMAKE_INSTALL_DOCDIR}/llvm/ocaml-html""; CACHE STRING ""OCamld",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:31953,test,tests,31953,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"rgument multiplied by some power; of two such that the absolute value of the returned value is in the; range [0.5, 1.0), with the same sign as the argument. The second; result is an integer such that the first result raised to the power of; the second result is the input argument. If the argument is a zero, returns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_fp80 %Val); declare fp128 @llvm.log10.f128(fp128 %Val); declare ppc_fp128 @llvm.log10.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:567959,log,log,567959,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"riate coroutine; handle value. The second argument should be `true` if this coro.end is in the block that is; part of the unwind sequence leaving the coroutine body due to an exception and; `false` otherwise. Non-trivial (non-none) token argument can only be specified for unique-suspend; returned-continuation coroutines where it must be a token value produced by; '``llvm.coro.end.results``' intrinsic. Only none token is allowed for coro.end calls in unwind sections. Semantics:; """"""""""""""""""""; The purpose of this intrinsic is to allow frontends to mark the cleanup and; other code that is only relevant during the initial invocation of the coroutine; and should not be present in resume and destroy parts. In returned-continuation lowering, ``llvm.coro.end`` fully destroys the; coroutine frame. If the second argument is `false`, it also returns from; the coroutine with a null continuation pointer, and the next instruction; will be unreachable. If the second argument is `true`, it falls through; so that the following logic can resume unwinding. In a yield-once; coroutine, reaching a non-unwind ``llvm.coro.end`` without having first; reached a ``llvm.coro.suspend.retcon`` has undefined behavior. The remainder of this section describes the behavior under switched-resume; lowering. This intrinsic is lowered when a coroutine is split into; the start, resume and destroy parts. In the start part, it is a no-op,; in resume and destroy parts, it is replaced with `ret void` instruction and; the rest of the block containing `coro.end` instruction is discarded.; In landing pads it is replaced with an appropriate instruction to unwind to; caller. The handling of coro.end differs depending on whether the target is; using landingpad or WinEH exception model. For landingpad based exception model, it is expected that frontend uses the; `coro.end`_ intrinsic as follows:. .. code-block:: llvm. ehcleanup:; %InResumePart = call i1 @llvm.coro.end(ptr null, i1 true, token none); br i1 %InResumePa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst:43897,log,logic,43897,interpreter/llvm-project/llvm/docs/Coroutines.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Coroutines.rst,1,['log'],['logic']
Testability,"ridis](palette_112.png). ### TMultiGraph. Ignore empty graphs when computing the multi-graph range at painting time. ### TASImage. A left click on a image produced a one pixel zoom. ### TCreatePrimitives. The ending of a polyline creation is based on the closeness of the two last; entered points. The previous algorithm was based on user coordinates. It is now; based on pixel to avoid the problem reported; [here](https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=20343). ### TCanvas. When the first canvas created by ROOT was in batch mode, it was note possible to; come back in interactive mode for the next canvases. this problem was reported; [here](https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=20354). ### Cocoa Backend. Sometimes the mouse cursor did not change back to the window manager arrow when; exiting a `TCanvas`. ### `freetype` library. Updates `builtin_freetype` to 2.6.1 (current upstream version), which can detect; `PPC64LE` machine. This was compiled and tested on `SLC6 + ICC + x86_64`,; `F21 + GCC + ppc64le`, `MacOSX 10.11.1 + Xcode 7.1` and `Windows (ROOT 5.34)`.; `$ROOTSYS/graf2d/freetype/src/README` was removed, because no issues were noticed; with `ICC` compiler and `-Wall -pedantic -ansi` flags.; Additionally `--with-png=no --with-bzip2=no` flags are passed to freetype; configuration script. Default values for these options are auto.; `freetype` finds `libpng` and `libbzip2` on the system and builds extra; modules. Then attempting to link against `freetype` one would need to link; `-lpng -lbzip2` explicitly otherwise linking will returns in undefined; references. Otherwise we would need to check for `libpng` and `libbzip2` on the system; and adjust `FREETYPE_LIBRARIES` to include `-lpng` and `-lbzip2`.; The current solution goes for the minimal configuration. The original request for; this update was posted [here](https://sft.its.cern.ch/jira/browse/ROOT-7631). ## 3D Graphics Libraries. ## Geometry Libraries. ## Database Libraries. ## Networking Librar",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v606/index.md:17663,test,tested,17663,README/ReleaseNotes/v606/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v606/index.md,1,['test'],['tested']
Testability,"ries during session startup, as they may significantly slowdown; the startup process is the medium is busy. In such a case, admins; are responsible to create the directories in advance; the session; releated part fo the path is created by the session once up.; In XrdProofd, move the check for the username after authentication.; This is because authentication may run some credentials-to-user mapping; which can modify the requested username. This way we really check the; final username and not the one requested by the client, which may even; not exist on the machines. Side modification: when the mapping function; returns more usernames, the username specified by the client is used to; help choosing the effective username among the available choices; if not; match is found the handshake does any longer fail, the first mapped; username is chosen instead.; In XrdProofd, allow 'xpd.allowedgroups' to control also PROOF; groups, not only UNIX ones.In XrdProofd, simplify error; messages in case of login failure because of non-authorization.; Remove hardcoded additions of dirname(COMPILER) and of; '/bin:/usr/bin:/usr/local/bin' in front of PATH. These uncontrolled; additions could hide specific settings in PATH and be the source of; weird problems appearing in PROOF only.; Add more flexibility to the definition of the library path seen by; proofserv. So far to avoid ambiguites in some cases, $ROOTSYS/lib was; removed and the one of the ROOT version chosen was added later on in; front, which proved to be to aggressive in some cases.; All changes (and fixes) needed to build against the version of Xrootd,; now always installed as external.; Fixes. Fix GetSessionLogs in PROOF-Lite; Restore correct parsing of ""workers=N"" in PROOF-Lite; In Proof-Bench, make sure that it can be run from any directory; and no matter how ROOT was installed; Fix issue in TProofPlayer::HandleHistogram preventing proper; histogram cleaning right after merging when using TH1::Add; histogram; were still des",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v532/index.html:2959,log,login,2959,proof/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v532/index.html,1,['log'],['login']
Testability,"ries to this section should be; announced in the `Announcements <https://discourse.llvm.org/c/announce/>`_; channel on Discourse. See :ref:`breaking` for more details. Code reviewers are encouraged to request a release note if they think one is; warranted when performing a code review. Quality; -------. The minimum quality standards that any change must satisfy before being; committed to the main development branch are:. #. Code must adhere to the `LLVM Coding Standards <CodingStandards.html>`_. #. Code must compile cleanly (no errors, no warnings) on at least one platform. #. Bug fixes and new features should `include a testcase`_ so we know if the; fix/feature ever regresses in the future. #. Code must pass the ``llvm/test`` test suite. #. The code must not cause regressions on a reasonable subset of llvm-test,; where ""reasonable"" depends on the contributor's judgement and the scope of; the change (more invasive changes require more testing). A reasonable subset; might be something like ""``llvm-test/MultiSource/Benchmarks``"". #. Ensure that links in source code and test files point to publicly available; resources and are used primarily to add additional information rather than; to supply critical context. The surrounding comments should be sufficient; to provide the context behind such links. Additionally, the committer is responsible for addressing any problems found in; the future that the change is responsible for. For example:. * The code should compile cleanly on all supported platforms. * The changes should not cause any correctness regressions in the ``llvm-test``; suite and must not cause any major performance regressions. * The change set should not cause performance or correctness regressions for the; LLVM tools. * The changes should not cause performance or correctness regressions in code; compiled by LLVM on all applicable targets. * You are expected to address any `GitHub Issues <https://github.com/llvm/llvm-project/issues>`_ that; result from your ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:13022,test,test,13022,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,ring). #--tcollex-------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollex tcollex.cxx LIBRARIES Core); ROOT_ADD_TEST(test-tcollex COMMAND tcollex). #--tcollbm------------------------------------------------------------------------------------; ROOT_EXECUTABLE(tcollbm tcollbm.cxx LIBRARIES Core MathCore); ROOT_ADD_TEST(test-tcollbm COMMAND tcollbm 1000 1000000 LABELS longtest). #--vvector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vvector vvector.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vvector COMMAND vvector). #--vmatrix------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vmatrix vmatrix.cxx LIBRARIES Core Matrix RIO); ROOT_ADD_TEST(test-vmatrix COMMAND vmatrix). #--vlazy------------------------------------------------------------------------------------; ROOT_EXECUTABLE(vlazy vlazy.cxx LIBRARIES Core Matrix); ROOT_ADD_TEST(test-vlazy COMMAND vlazy). #--helloso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Hello ${CMAKE_CURRENT_SOURCE_DIR}/Hello.h MODULE Hello DEPENDENCIES Gpad Graf Hist MathCore Matrix); ROOT_LINKER_LIBRARY(Hello Hello.cxx G__Hello.cxx LIBRARIES Graf Gpad). #--Aclockso------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__Aclock ${CMAKE_CURRENT_SOURCE_DIR}/Aclock.h MODULE Aclock DEPENDENCIES Graf Gpad MathCore); ROOT_LINKER_LIBRARY(Aclock Aclock.cxx G__Aclock.cxx LIBRARIES Graf Gpad). #--bench------------------------------------------------------------------------------------; ROOT_GENERATE_DICTIONARY(G__TBench ${CMAKE_CURRENT_SOURCE_DIR}/TBench.h MODULE TBench LINKDEF benchLinkDef.h DEPENDENCIES MathCore Tree); ROOT_LINKER_LIBRARY(TBench TBench.cxx G__TBench.cxx LIBRARIES Core MathCore RIO Tree); ROOT_EXECUTABLE(bench bench.cxx LIBRARIES Core TBench); ROO,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:4974,test,test-vlazy,4974,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-vlazy']
Testability,"rings in each ``input`` file specified.; Unlike GNU :program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :progra",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1581,test,test,1581,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,rinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/s,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129681,benchmark,benchmarks,129681,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"rintf(""File does not exist\n"");; return -1;; }; #ifdef __clang_analyzer__; csa_mark_sanitized(filename); // Indicating to CSA that filename variable is safe to be used after this point; #endif; strcat(cmd, filename);; system(cmd); // No warning; }. Similarly to the previous example, you need to; define a `Filter` function in a `YAML` configuration file; and add the `csa_mark_sanitized` function. .. code-block:: YAML. Filters:; - Name: csa_mark_sanitized; Args: [0]. Then calling `csa_mark_sanitized(X)` will tell the analyzer that `X` is safe to; be used after this point, because its contents are verified. It is the; responsibility of the programmer to ensure that this verification was indeed; correct. Please note that `csa_mark_sanitized` function is only declared and; used during Clang Static Analysis and skipped in (production) builds. Further examples of injection vulnerabilities this checker can find. .. code-block:: c. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-security to suppress compiler warning.; void test() {; char s[10], buf[10];; fscanf(stdin, ""%s"", s); // 's' marked as tainted. sprintf(buf, s); // warn: untrusted data used as a format string; }. void test() {; size_t ts;; scanf(""%zd"", &ts); // 'ts' marked as tainted; int *p = (int *)malloc(ts * sizeof(int));; // warn: untrusted data used as buffer size; }. There are built-in sources, propagations and sinks even if no external taint; configuration is provided. Default sources:; ``_IO_getc``, ``fdopen``, ``fopen``, ``freopen``, ``get_current_dir_name``,; ``getch``, ``getchar``, ``getchar_unlocked``, ``getwd``, ``getcwd``,; ``getgroups``, ``gethostname``, ``getlogin``, ``getlogin_r``, ``getnameinfo``,; ``gets``, ``gets_s``, ``getseuserbyname``, ``readlink``, ``readlinkat``,; ``scanf``, ``scanf_s``, ``socket",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:70298,test,test,70298,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"rints the *logical view*; or portions of it, based on criteria patterns (including regular; expressions) to select the kind of *logical elements* to be included in; the output. BASIC DETAILS; """"""""""""""""""""""""""; The following command prints basic details for all the logical elements; sorted by the debug information internal offset; it includes its lexical; level and debug info format. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=scopes,symbols,types,lines,instructions; test-dwarf-clang.o. or. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=offset; --print=elements; test-dwarf-clang.o. Each row represents an element that is present within the debug; information. The first column represents the scope level, followed by; the associated line number (if any), and finally the description of; the element. .. code-block:: none. Logical View:; [000] {File} 'test-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'test.cpp'; [002] 2 {Function} extern not_inlined 'foo' -> 'int'; [003] 2 {Parameter} 'ParamPtr' -> 'INTPTR'; [003] 2 {Parameter} 'ParamUnsigned' -> 'unsigned int'; [003] 2 {Parameter} 'ParamBool' -> 'bool'; [003] {Block}; [004] 5 {Variable} 'CONSTANT' -> 'const INTEGER'; [004] 5 {Line}; [004] {Code} 'movl	$0x7, -0x1c(%rbp)'; [004] 6 {Line}; [004] {Code} 'movl	$0x7, -0x4(%rbp)'; [004] {Code} 'jmp	0x6'; [004] 8 {Line}; [004] {Code} 'movl	-0x14(%rbp), %eax'; [003] 4 {TypeAlias} 'INTEGER' -> 'int'; [003] 2 {Line}; [003] {Code} 'pushq	%rbp'; [003] {Code} 'movq	%rsp, %rbp'; [003] {Code} 'movb	%dl, %al'; [003] {Code} 'movq	%rdi, -0x10(%rbp)'; [003] {Code} 'movl	%esi, -0x14(%rbp)'; [003] {Code} 'andb	$0x1, %al'; [003] {Code} 'movb	%al, -0x15(%rbp)'; [003] 3 {Line}; [003] {Code} 'testb	$0x1, -0x15(%rbp)'; [003] {Code} 'je	0x13'; [003] 8 {Line}; [003] {Code} 'movl	%eax, -0x4(%rbp)'; [003] 9 {Line}; [003] {Code} 'movl	-0x4(%rbp), %eax'; [003] {Code} 'popq	%rbp'; [003] {Code} 'retq'; [003]",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:25399,test,test,25399,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['test'],['test']
Testability,"ription. Others always require a; tessellation description based on **`TBuffer3D`**'s `kRaw` /; `kRawSizes` points/lines/segments sections. - Some need the 3D object positions in the master (world) frame,; others can cope with local frames and a translation matrix to place; the object. - Some require bounding boxes for objects - others do not. Similarly some viewer clients are only capable of providing positions in; master frame, cannot provide bounding boxes etc. Additionally we do not; want to incur the cost of expensive tessellation operations if the; viewer does not require them. To cope with these variations the; **`TBuffer3D`** objects are filled by negotiation with the viewer. ![TBuffer3D class hierarchy](pictures/030000E0.png). **`TBuffer3D`** classes are conceptually divided into enumerated; sections: `kCore`, `kBoundingBox`, `kRaw` - see the class diagram and; the file `TBuffer3D.h` for more details. The **`TBuffer3D`** methods; `SectionsValid()`, `SetSectionsValid()`, `ClearSectionsValid()` are used; to test, set, clear these section validity flags e.g. ``` {.cpp}; buffer.SetSectionsValid(TBuffer3D::kShapeSpecific);; ...; if (buffer.SectionsValid(TBuffer3D:: kShapeSpecific)) {; ...; }; ```. The sections found in the base **`TBuffer3D`**; (`kCore/kBoundingBox/kRawSizes/kRaw`) are sufficient to describe any; tessellated shape in a generic fashion. An additional `kShapeSpecific`; section is added in **`TBuffer3D`** derived classes, allowing a more; abstract shape description (""a sphere of inner radius x, outer radius; y""). This enables a viewer, which knows how to draw (tessellate) the; shape itself to do so, while providing a generic fallback suitable for; all viewers. The rules for client negotiation with the viewer are:. - If suitable specialized **`TBuffer3D`** class exists, use it,; otherwise use **`TBuffer3D`**. - Complete the mandatory `kCore` section. - Complete the `kShapeSpecific` section if applicable. - Complete the `kBoundingBox` if you can. - Pa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:127482,test,test,127482,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['test'],['test']
Testability,"ritical; // section; m.unlock();; }. .. _alpha-unix-Chroot:. alpha.unix.Chroot (C); """"""""""""""""""""""""""""""""""""""""""; Check improper use of chroot. .. code-block:: c. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. .. _alpha-unix-PthreadLock:. alpha.unix.PthreadLock (C); """"""""""""""""""""""""""""""""""""""""""""""""""""; Simple lock -> unlock checker.; Applies to: ``pthread_mutex_lock, pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, lck_rw_lock_exclusive``; ``lck_rw_lock_shared, pthread_mutex_trylock, pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock,; lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``. .. code-block:: c. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. .. _alpha-unix-SimpleStream:. alpha.unix.SimpleStream (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, fclose``; (demo checker, the subject of the demo (`Slides <https://llvm.org/devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ ,; `Video <https://youtu.be/kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the; `2012 LLVM Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_). .. code-block:: c. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. .. _alpha-unix-Stream:. alpha.unix.Stream (C); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:75900,test,test,75900,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"riting; your RUN lines. In general nothing needs to be quoted. :program:`lit` won't; strip off any quote characters so they will get passed to the invoked program.; To avoid this use curly braces to tell :program:`lit` that it should treat; everything enclosed as one value. In general, you should strive to keep your RUN lines as simple as possible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically generated. If you want to update assertions in an existing test case, pass the `-u` option; which first checks the ``NOTE:`` line exists and matches the script name. Sometimes a test absolutely depends on hand-written assertions and should not; have assertions automatically generated. In that case, add the text ``NOTE: Do; not autogenerate`` to the first line, and the scripts will skip that test. It; is a good idea to explain why generated assertions will not work for the test; so future developers will ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:11250,test,test,11250,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"rk; classes (client/server examples) `physics`: LorentzVectors, phase; space `pyroot`: Python tutorials `pythia`: Example with `pythia8`; `quadp`: Quadratic Programming `smatrix`:; Matrices with a templated package `spectrum`: Peak finder, background,; deconvolutions `splot`: Example of the **`TSplot`** class; (signal/background estimator) `sql`: Interfaces to SQL (mysql, oracle,; etc) `thread`: Using Threads `tmva`: Examples of the MultiVariate; Analysis classes `tree`: Creating Trees, Playing with Trees `unuran`:; Interface with the unuram random generator library `xml`:; Writing/Reading xml files. You can execute the scripts in `$ROOTSYS/tutorials`; (or sub-directories) by setting your current directory in the script; directory or from any user directory with write access. Several; tutorials create new files. If you have write access to the tutorials; directory, the new files will be created in the tutorials directory,; otherwise they will be created in the user directory. ### \$ROOTSYS/test. The test directory contains a set of examples example that represent; all areas of the framework. When a new release is cut, the examples in; this directory are compiled and run to test the new release's backward; compatibility. The list of source files is described in chapter ""The; Tutorials and Tests"". The `$ROOTSYS/test` directory is a gold mine of ROOT-wisdom nuggets,; and we encourage you to explore and exploit it. We recommend the new; users to read the chapter ""Getting Started"". The chapter ""The; Tutorials and Tests"" has instructions on how to build all the programs; and it goes over the examples `Event` and `stress`. ### \$ROOTSYS/include. The `include` directory contains all header files. It is especially; important because the header files contain the class definitions. ### \$ROOTSYS/\<library\>. The directories we explored above are available when downloading the; binaries. When downloading the source you also get a directory for; each library with the correspondi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:22629,test,test,22629,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['test']
Testability,"rks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polymage-benchmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Kripke; * Quicksilver; * PENNANT; * Big Data Analytic Suite; * Deep Learning Suite; * Stream; * Stride; * ML/DL micro-benchmark; * Pynamic; * ACME; * VPIC; * Laghos; * Parallel Integer Sort; * Havoq. NWChem; ------; http://www.nwchem-sw.org/index.php/Benchmarks. TVM; ----; https://github.com/dmlc/tvm/tree/main/apps/benchmark. HydroBench; ----------; https://github.com/HydroBench/Hydro. ParRes; ------; https://github.com/ParRes/Kernels/tree/default/Cxx11. Applications/Libraries; ======================. GnuPG; -----; https://gnupg.org/. Blitz++; -------; https://sourceforge.net/projects/blitz/. FFmpeg; ------; https://ffmpeg.org/. FreePOOMA; ---------; http://www.nongnu.org/freepooma/. FTensors; --------; http://www.wlandry.net/Projects/FTensor. rawspeed; --------; https://github.com/darktable-org/rawspeed. Its test dataset is 756 MB in size, which is too large to be included; into the test-suite repository. C++ Performance Benchmarks; --------------------------; https://gitlab.com/chriscox/CppPerformanceBenchmarks. Generic Algorithms; ==================. Image proces",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:4854,benchmark,benchmark,4854,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmark']
Testability,"rl>"", ""masteronly""); Add full support for placeholders; <uid>,; <gid>, <group> and <homedir>; for the directives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3307,log,logs,3307,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,3,"['log', 'test']","['logs', 'test', 'tests']"
Testability,"rmance. .. _uf_enumerate:. ``enumerate``; ^^^^^^^^^^^^^. The ``enumerate`` functions allows to iterate over one or more ranges while; keeping track of the index of the current loop iteration. For example:. .. code-block:: c++. for (auto [Idx, BB, Value] : enumerate(Phi->blocks(),; Phi->incoming_values())); errs() << ""#"" << Idx << "" "" << BB->getName() << "": "" << *Value << ""\n"";. The current element index is provided as the first structured bindings element.; Alternatively, the index and the element value can be obtained with the; ``index()`` and ``value()`` member functions:. .. code-block:: c++. char Letters[26] = ...;; for (auto En : enumerate(Letters)); errs() << ""#"" << En.index() << "" "" << En.value() << ""\n"";. Note that ``enumerate`` has ``zip_equal`` semantics and provides elements; through a 'reference wrapper' proxy, which makes them modifiable when accessed; through structured bindings or the ``value()`` member function. When two or more; ranges are passed, ``enumerate`` requires them to have equal lengths (checked; with an ``assert``). .. _debugging:. Debugging; =========. A handful of `GDB pretty printers; <https://sourceware.org/gdb/onlinedocs/gdb/Pretty-Printing.html>`__ are; provided for some of the core LLVM libraries. To use them, execute the; following (or add it to your ``~/.gdbinit``)::. source /path/to/llvm/src/utils/gdb-scripts/prettyprinters.py. It also might be handy to enable the `print pretty; <http://ftp.gnu.org/old-gnu/Manuals/gdb/html_node/gdb_57.html>`__ option to; avoid data structures being printed as a big block of text. .. _common:. Helpful Hints for Common Operations; ===================================. This section describes how to perform some very simple transformations of LLVM; code. This is meant to give examples of common idioms used, showing the; practical side of LLVM transformations. Because this is a ""how-to"" section, you should also read about the main classes; that you will be working with. The :ref:`Core LLVM Class Hiera",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:102975,assert,assert,102975,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assert']
Testability,"rmat(llvm::raw_ostream &Stream, StringRef Style) override {; // Do whatever is necessary to format ``this->Item`` into ``Stream``; }; };; }; namespace llvm {; void foo() {; std::string S = formatv(""{0}"", anything::format_int_custom(42));; }; }. If the type is detected to be derived from ``FormatAdapter<T>``, ``formatv``; will call the; ``format`` method on the argument passing in the specified style. This allows; one to provide custom formatting of any type, including one which already has; a builtin format provider. ``formatv`` Examples; ^^^^^^^^^^^^^^^^^^^^; Below is intended to provide an incomplete set of examples demonstrating; the usage of ``formatv``. More information can be found by reading the; doxygen documentation or by looking at the unit test suite. .. code-block:: c++. std::string S;; // Simple formatting of basic types and implicit string conversion.; S = formatv(""{0} ({1:P})"", 7, 0.35); // S == ""7 (35.00%)"". // Out-of-order referencing and multi-referencing; outs() << formatv(""{0} {2} {1} {0}"", 1, ""test"", 3); // prints ""1 3 test 1"". // Left, right, and center alignment; S = formatv(""{0,7}"", 'a'); // S == "" a"";; S = formatv(""{0,-7}"", 'a'); // S == ""a "";; S = formatv(""{0,=7}"", 'a'); // S == "" a "";; S = formatv(""{0,+7}"", 'a'); // S == "" a"";. // Custom styles; S = formatv(""{0:N} - {0:x} - {1:E}"", 12345, 123908342); // S == ""12,345 - 0x3039 - 1.24E8"". // Adapters; S = formatv(""{0}"", fmt_align(42, AlignStyle::Center, 7)); // S == "" 42 ""; S = formatv(""{0}"", fmt_repeat(""hi"", 3)); // S == ""hihihi""; S = formatv(""{0}"", fmt_pad(""hi"", 2, 6)); // S == "" hi "". // Ranges; std::vector<int> V = {8, 9, 10};; S = formatv(""{0}"", make_range(V.begin(), V.end())); // S == ""8, 9, 10""; S = formatv(""{0:$[+]}"", make_range(V.begin(), V.end())); // S == ""8+9+10""; S = formatv(""{0:$[ + ]@[x]}"", make_range(V.begin(), V.end())); // S == ""0x8 + 0x9 + 0xA"". .. _error_apis:. Error handling; --------------. Proper error handling helps us identify bugs in our code, and helps end-users; und",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:15458,test,test,15458,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,2,['test'],['test']
Testability,"rmation about the number of bytes read from your files,; how long this takes, and the different throughputs in MB/s, both in total and per thread. ## Compressed vs Uncompressed Throughput:. Throughput speeds are provided as compressed and uncompressed - ROOT files are usually; saved in compressed format, so these will often differ. Compressed bytes is the total; number of bytes read from TFiles during the readspeed test (possibly including meta-data).; Uncompressed bytes is the number of bytes processed by reading the branch values in the TTree.; Throughput is calculated as the total number of bytes over the total runtime (including; decompression time) in the uncompressed and compressed cases. ## Interpreting results:. ### There are three possible scenarios when using rootreadspeed, namely:. - The 'Real Time' is significantly lower than your own analysis runtime.; This would imply your actual application code is dominating the runtime of your analysis,; ie. your analysis logic or framework is taking up the time.; The best way to decrease the runtime would be to optimize your code (or the framework's),; parallelize it onto multiple threads if possible (for example with; [RDataFrame](https://root.cern/doc/master/classROOT_1_1RDataFrame.html); and [EnableImplicitMT](https://root.cern/doc/master/namespaceROOT.html#a06f2b8b216b615e5abbc872c9feff40f)); or switch to a machine with a more performant CPU.; - The 'Real Time' is significantly higher than 'CPU Time / number of threads'*.; If the real time is higher than the CPU time per core it implies the reading of data is the; bottleneck, as the CPU cores are wasting time waiting for data to arrive from your disk/drive; or network connection in order to decompress it.; The best way to decrease your runtime would be transferring the data you need onto a faster; storage medium (ie. a faster disk/drive such as an SSD, or connecting to a faster network; for remote file access), or to use a compression algorithm with a higher co",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/README.md:1228,log,logic,1228,tree/readspeed/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/README.md,1,['log'],['logic']
Testability,"rmation rather than; to supply critical context. The surrounding comments should be sufficient; to provide the context behind such links. Additionally, the committer is responsible for addressing any problems found in; the future that the change is responsible for. For example:. * The code should compile cleanly on all supported platforms. * The changes should not cause any correctness regressions in the ``llvm-test``; suite and must not cause any major performance regressions. * The change set should not cause performance or correctness regressions for the; LLVM tools. * The changes should not cause performance or correctness regressions in code; compiled by LLVM on all applicable targets. * You are expected to address any `GitHub Issues <https://github.com/llvm/llvm-project/issues>`_ that; result from your change. We prefer for this to be handled before submission but understand that it isn't; possible to test all of this for every submission. Our build bots and nightly; testing infrastructure normally finds these problems. A good rule of thumb is; to check the nightly testers for regressions the day after your change. Build; bots will directly email you if a group of commits that included yours caused a; failure. You are expected to check the build bot messages to see if they are; your fault and, if so, fix the breakage. Commits that violate these quality standards (e.g. are very broken) may be; reverted. This is necessary when the change blocks other developers from making; progress. The developer is welcome to re-commit the change after the problem has; been fixed. .. _commit messages:. Commit messages; ---------------. Although we don't enforce the format of commit messages, we prefer that; you follow these guidelines to help review, search in logs, email formatting; and so on. These guidelines are very similar to rules used by other open source; projects. Most importantly, the contents of the message should be carefully written to; convey the rationale of the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:14177,test,testing,14177,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['testing']
Testability,"rmatv(""{0}"", fmt_pad(""hi"", 2, 6)); // S == "" hi "". // Ranges; std::vector<int> V = {8, 9, 10};; S = formatv(""{0}"", make_range(V.begin(), V.end())); // S == ""8, 9, 10""; S = formatv(""{0:$[+]}"", make_range(V.begin(), V.end())); // S == ""8+9+10""; S = formatv(""{0:$[ + ]@[x]}"", make_range(V.begin(), V.end())); // S == ""0x8 + 0x9 + 0xA"". .. _error_apis:. Error handling; --------------. Proper error handling helps us identify bugs in our code, and helps end-users; understand errors in their tool usage. Errors fall into two broad categories:; *programmatic* and *recoverable*, with different strategies for handling and; reporting. Programmatic Errors; ^^^^^^^^^^^^^^^^^^^. Programmatic errors are violations of program invariants or API contracts, and; represent bugs within the program itself. Our aim is to document invariants, and; to abort quickly at the point of failure (providing some basic diagnostic) when; invariants are broken at runtime. The fundamental tools for handling programmatic errors are assertions and the; llvm_unreachable function. Assertions are used to express invariant conditions,; and should include a message describing the invariant:. .. code-block:: c++. assert(isPhysReg(R) && ""All virt regs should have been allocated already."");. The llvm_unreachable function can be used to document areas of control flow; that should never be entered if the program invariants hold:. .. code-block:: c++. enum { Foo, Bar, Baz } X = foo();. switch (X) {; case Foo: /* Handle Foo */; break;; case Bar: /* Handle Bar */; break;; default:; llvm_unreachable(""X should be Foo or Bar here"");; }. Recoverable Errors; ^^^^^^^^^^^^^^^^^^. Recoverable errors represent an error in the program's environment, for example; a resource failure (a missing file, a dropped network connection, etc.), or; malformed input. These errors should be detected and communicated to a level of; the program where they can be handled appropriately. Handling the error may be; as simple as reporting the issue t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:16972,assert,assertions,16972,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['assert'],['assertions']
Testability,"rn 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. .. _unix-cstring-BadSizeArg:. unix.cstring.BadSizeArg (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check the size argument passed into C string functions for common erroneous patterns. Use ``-Wno-strncat-size`` compiler option to mute other ``strncat``-related compiler warnings. .. code-block:: c. void test() {; char dest[3];; strncat(dest, """"""""""""""""""""""""""""""""""""""""""""""""""*"", sizeof(dest));; // warn: potential buffer overflow; }. .. _unix-cstring-NullArg:. unix.cstring.NullArg (C); """"""""""""""""""""""""""""""""""""""""""""""""; Check for null pointers being passed as arguments to C string functions:; ``strlen, strnlen, strcpy, strncpy, strcat, strncat, strcmp, strncmp, strcasecmp, strncasecmp, wcslen, wcsnlen``. .. code-block:: c. int test() {; return strlen(0); // warn; }. .. _unix-StdCLibraryFunctions:. unix.StdCLibraryFunctions (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for calls of standard library functions that violate predefined argument; constraints. For example, according to the C standard the behavior of function; ``int isalnum(int ch)`` is undefined if the value of ``ch`` is not representable; as ``unsigned char`` and is not equal to ``EOF``. You can think of this checker as defining restrictions (pre- and postconditions); on standard library functions. Preconditions are checked, and when they are; violated, a warning is emitted. Postconditions are added to the analysis, e.g.; that the return value of a function is not greater than 255. Preconditions are; added to the analysis too, in the case when the affected values are not known; before the call. For example, if an argument to a function must be in between 0 and 255, but the; value of the argument is unknown, the analyzer will assume that it is in this; interval. Simila",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:30572,test,test,30572,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"rn Operands[I];; }. Here are more examples:. .. code-block:: c++. assert(Ty->isPointerType() && ""Can't allocate a non-pointer type!"");. assert((Opcode == Shl || Opcode == Shr) && ""ShiftInst Opcode invalid!"");. assert(idx < getNumSuccessors() && ""Successor # out of range!"");. assert(V1.getType() == V2.getType() && ""Constant types must be identical!"");. assert(isa<PHINode>(Succ->front()) && ""Only works on PHId BBs!"");. You get the idea. In the past, asserts were used to indicate a piece of code that should not be; reached. These were typically of the form:. .. code-block:: c++. assert(0 && ""Invalid radix for integer literal"");. This has a few issues, the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:46733,assert,assertions,46733,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['assert'],['assertions']
Testability,"rn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: call to 'pthread_once' uses the local variable; }. void test() {; void *p = malloc(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = calloc(0, 42); // warn: allocation size of 0 bytes; }. void test() {; void *p = malloc(1);; p = realloc(p, 0); // warn: allocation size of 0 bytes; }. void test() {; void *p = alloca(0); // warn: allocation size of 0 bytes; }. void test() {; void *p = valloc(0); // warn: allocation size of 0 bytes; }. unix.Malloc; (C); Check for memory leaks, double free, and use-after-free and offset problems; involving malloc. void test() {; int *p = malloc(1);; free(p);; free(p); // warn: attempt to free released memory; }. void test() {; int *p = malloc(sizeof(int));; free(p);; *p = 1; // warn: use after free; }. void test() {; int *p = malloc(1);; if (p); return; // warn: memory is never released; }. void test() {; int a[] = { 1 };; free(a); // warn: argument is not allocated by malloc; }. void test() {; int *p = malloc(sizeof(char));; p = p - 1;; free(p); // warn: argument to free() is offset by -4 bytes; }. unix.MallocSizeof; (C); C",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:23769,test,test,23769,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"rn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP). .. code-block:: c. void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. .. _security-insecureAPI-UncheckedReturn:. security.insecureAPI.UncheckedReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of functions whose return values must be always checked. .. code-block:: c. void test() {; setuid(1); // warn; }. .. _security-insecureAPI-bcmp:. security.insecureAPI.bcmp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcmp' function. .. code-block:: c. void test() {; bcmp(ptr0, ptr1, n); // warn; }. .. _security-insecureAPI-bcopy:. security.insecureAPI.bcopy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcopy' function. .. code-block:: c. void test() {; bcopy(src, dst, n); // warn; }. .. _security-insecureAPI-bzero:. security.insecureAPI.bzero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bzero' function. .. code-block:: c. void test() {; bzero(ptr, n); // warn; }. .. _security-insecureAPI-getpw:. security.insecureAPI.getpw (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'getpw' function. .. code-block:: c. void test() {; char buff[1024];; getpw(2, buff); // warn; }. .. _security-insecureAPI-gets:. security.insecureAPI.gets (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'gets' function. .. code-block:: c. void test() {; char buff[1024];; gets(buff); // warn; }. .. _security-insecureAPI-mkstemp:. security.insecureAPI.mkstemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn when 'mkstemp' is passed fewer than 6 X's in the format string. .. code-block:: c. void test() {; mkstemp(""XX""); // warn; }. .. _security-insecureAPI-mktemp:. security.insecureAPI.mktemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``mktemp`` function. .. code-block:: c. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. .. _security-insecureAPI-rand:. security.insecureAPI.rand (C); """"""""""""""""""""""""""""""""""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:23343,test,test,23343,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"rnal/SPEC/CINT2006/403.gcc/403.gcc.test' has No metrics!; Tests: 508; Metric: exec_time. Program baseline. INT2006/456.hmmer/456.hmmer 1222.90; INT2006/464.h264ref/464.h264ref 928.70; ...; baseline; count 506.000000; mean 20.563098; std 111.423325; min 0.003400; 25% 0.011200; 50% 0.339450; 75% 4.067200; max 1222.896800; ```. - Show compile_time or text segment size metrics:. ```bash; % test-suite/utils/compare.py -m compile_time baseline.json; % test-suite/utils/compare.py -m size.__text baseline.json; ```. - Compare two result files and filter short running tests:. ```bash; % test-suite/utils/compare.py --filter-short baseline.json experiment.json; ...; Program baseline experiment diff. SingleSour.../Benchmarks/Linpack/linpack-pc 5.16 4.30 -16.5%; MultiSourc...erolling-dbl/LoopRerolling-dbl 7.01 7.86 12.2%; SingleSour...UnitTests/Vectorizer/gcc-loops 3.89 3.54 -9.0%; ...; ```. - Merge multiple baseline and experiment result files by taking the minimum; runtime each:. ```bash; % test-suite/utils/compare.py base0.json base1.json base2.json vs exp0.json exp1.json exp2.json; ```. ### Continuous Tracking with LNT. LNT is a set of client and server tools for continuously monitoring; performance. You can find more information at; [https://llvm.org/docs/lnt](https://llvm.org/docs/lnt). The official LNT instance; of the LLVM project is hosted at [http://lnt.llvm.org](http://lnt.llvm.org). External Suites; ---------------. External suites such as SPEC can be enabled by either. - placing (or linking) them into the `test-suite/test-suite-externals/xxx` directory (example: `test-suite/test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:8505,test,test-suite,8505,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"rns a double) so we can call it as a native function.; double (*FP)() = ExprSymbol.getAddress().toPtr<double (*)()>();; fprintf(stderr, ""Evaluated to %f\n"", FP());. // Delete the anonymous expression module from the JIT.; ExitOnErr(RT->remove());; }. If parsing and codegen succeed, the next step is to add the module containing; the top-level expression to the JIT. We do this by calling addModule, which; triggers code generation for all the functions in the module, and accepts a; ``ResourceTracker`` which can be used to remove the module from the JIT later. Once the module; has been added to the JIT it can no longer be modified, so we also open a new; module to hold subsequent code by calling ``InitializeModuleAndPassManager()``. Once we've added the module to the JIT we need to get a pointer to the final; generated code. We do this by calling the JIT's ``lookup`` method, and passing; the name of the top-level expression function: ``__anon_expr``. Since we just; added this function, we assert that ``lookup`` returned a result. Next, we get the in-memory address of the ``__anon_expr`` function by calling; ``getAddress()`` on the symbol. Recall that we compile top-level expressions; into a self-contained LLVM function that takes no arguments and returns the; computed double. Because the LLVM JIT compiler matches the native platform ABI,; this means that you can just cast the result pointer to a function pointer of; that type and call it directly. This means, there is no difference between JIT; compiled code and native machine code that is statically linked into your; application. Finally, since we don't support re-evaluation of top-level expressions, we; remove the module from the JIT when we're done to free the associated memory.; Recall, however, that the module we created a few lines earlier (via; ``InitializeModuleAndPassManager``) is still open and waiting for new code to be; added. With just these two changes, let's see how Kaleidoscope works now!. ::. ready> 4+5;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:14391,assert,assert,14391,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,1,['assert'],['assert']
Testability,"rns which happen to resemble very closely the initial; proofs of concept. As such, while its performance is acceptable, it does not; appear to be an adequate systematic mitigation. ## Performance Overhead. The performance overhead of this style of comprehensive mitigation is very; high. However, it compares very favorably with previously recommended; approaches such as the `lfence` instruction. Just as users can restrict the; scope of `lfence` to control its performance impact, this mitigation technique; could be restricted in scope as well. However, it is important to understand what it would cost to get a fully; mitigated baseline. Here we assume targeting a Haswell (or newer) processor and; using all of the tricks to improve performance (so leaves the low 2gb; unprotected and +/- 2gb surrounding any PC in the program). We ran both; Google's microbenchmark suite and a large highly-tuned server built using; ThinLTO and PGO. All were built with `-march=haswell` to give access to BMI2; instructions, and benchmarks were run on large Haswell servers. We collected; data both with an `lfence`-based mitigation and load hardening as presented; here. The summary is that mitigating with load hardening is 1.77x faster than; mitigating with `lfence`, and the overhead of load hardening compared to a; normal program is likely between a 10% overhead and a 50% overhead with most; large applications seeing a 30% overhead or less. | Benchmark | `lfence` | Load Hardening | Mitigated Speedup |; | -------------------------------------- | -------: | -------------: | ----------------: |; | Google microbenchmark suite | -74.8% | -36.4% | **2.5x** |; | Large server QPS (using ThinLTO & PGO) | -62% | -29% | **1.8x** |. Below is a visualization of the microbenchmark suite results which helps show; the distribution of results that is somewhat lost in the summary. The y-axis is; a log-scale speedup ratio of load hardening relative to `lfence` (up -> faster; -> better). Each box-and-whiskers rep",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:47289,benchmark,benchmarks,47289,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['benchmark'],['benchmarks']
Testability,"rnsteinCorrection.C Demonstrates use of; BernsteinCorrection class, which corrects a nominal PDF with a polynomial; to agree with observed or simulated data. TestStatistic interface and implementations; We added a new interface class called TestStatistic. It defines the; method Evaluate(data, parameterPoint), which returns a double. �This; class can be used in�conjunction�with the ToyMCSampler class to generate; sampling distributions for a user-defined test statistic. �; The following concrete implementations of the TestStatistic interface; are currently available. ProfileLikelihoodTestStatReturns the log of profile; likelihood ratio. �Generally a powerful test statistic. ; NumEventsTestStatReturns the number of events in the; dataset. �Useful for number counting experiments.; DebuggingTestStat Simply returns a uniform random number; between 0,1. �Useful for debugging. SamplingDistribution and the�TestStatSampler interface and; implementations; We introduced a ``result'' or data model class called; SamplingDistribution, which holds the sampling distribution of an; arbitrary real valued test statistic. �The class also can return the; inverse of the cumulative distribution function (with or without; interpolation). �; We introduced an interface for any tool that can produce a; SamplingDistribution, called TestStatSampler. �The interface is; essentially GetSamplingDistribution(parameterPoint) which returns a; SamplingDistribution based on a given probability density function. �We; foresee a few versions of this tool based on toy Monte Carlo, importance; sampling, Fourier transforms, etc. �The following concrete implementation; of the TestStatSampler interface are currently available. ToyMCSamplerUses a Toy Monte Carlo approach to build the; sampling distribution. �The pdf's generate method to generate is used to; generate toy data, and then the test statistic is evaluated at the; requested parameter point. ; DebuggingSampler Simply returns a uniform distribution; betwe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:26743,test,test,26743,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['test'],['test']
Testability,"robenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains d",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2118,test,test-suite,2118,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test-suite']
Testability,"rocessor macros. This flag is discarded when; **-g0** is enabled. .. option:: -fno-debug-macro. Do not generate debug info for preprocessor macros (default). Controlling Debugger ""Tuning""; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. While Clang generally emits standard DWARF debug info (http://dwarfstd.org),; different debuggers may know how to take advantage of different specific DWARF; features. You can ""tune"" the debug info for one of several different debuggers. .. option:: -ggdb, -glldb, -gsce, -gdbx. Tune the debug info for the ``gdb``, ``lldb``, Sony PlayStation\ |reg|; debugger, or ``dbx``, respectively. Each of these options implies **-g**.; (Therefore, if you want both **-gline-tables-only** and debugger tuning, the; tuning option must come first.). Controlling LLVM IR Output; --------------------------. Controlling Value Names in LLVM IR; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Emitting value names in LLVM IR increases the size and verbosity of the IR.; By default, value names are only emitted in assertion-enabled builds of Clang.; However, when reading IR it can be useful to re-enable the emission of value; names to improve readability. .. option:: -fdiscard-value-names. Discard value names when generating LLVM IR. .. option:: -fno-discard-value-names. Do not discard value names when generating LLVM IR. This option can be used; to re-enable names for release builds of Clang. Comment Parsing Options; -----------------------. Clang parses Doxygen and non-Doxygen style documentation comments and attaches; them to the appropriate declaration nodes. By default, it only parses; Doxygen-style comments and ignores ordinary comments starting with ``//`` and; ``/*``. .. option:: -Wdocumentation. Emit warnings about use of documentation comments. This warning group is off; by default. This includes checking that ``\param`` commands name parameters that actually; present in the function signature, checking that ``\returns`` is used only on; functions that actually return a value etc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:127867,assert,assertion-enabled,127867,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['assert'],['assertion-enabled']
Testability,"rofile in extbinary format. .. option:: --debug-info=<path>. Specify the executable or ``.dSYM`` that contains debug info for the raw profile.; When ``--debug-info-correlate`` or ``--profile-correlate=debug-info`` was used; for instrumentation, use this option to show the correlated functions from the; raw profile. .. option:: --covered. Show only the functions that have been executed, i.e., functions with non-zero; counts. .. program:: llvm-profdata overlap. .. _profdata-overlap:. OVERLAP; -------. SYNOPSIS; ^^^^^^^^. :program:`llvm-profdata overlap` [*options*] [*base profile file*] [*test profile file*]. DESCRIPTION; ^^^^^^^^^^^. :program:`llvm-profdata overlap` takes two profile data files and displays the; *overlap* of counter distribution between the whole files and between any of the; specified functions. In this command, *overlap* is defined as follows:; Suppose *base profile file* has the following counts:; {c1_1, c1_2, ..., c1_n, c1_u_1, c2_u_2, ..., c2_u_s},; and *test profile file* has; {c2_1, c2_2, ..., c2_n, c2_v_1, c2_v_2, ..., c2_v_t}.; Here c{1|2}_i (i = 1 .. n) are matched counters and c1_u_i (i = 1 .. s) and; c2_v_i (i = 1 .. v) are unmatched counters (or counters only existing in); *base profile file* and *test profile file*, respectively.; Let sum_1 = c1_1 + c1_2 + ... + c1_n + c1_u_1 + c2_u_2 + ... + c2_u_s, and; sum_2 = c2_1 + c2_2 + ... + c2_n + c2_v_1 + c2_v_2 + ... + c2_v_t.; *overlap* = min(c1_1/sum_1, c2_1/sum_2) + min(c1_2/sum_1, c2_2/sum_2) + ...; + min(c1_n/sum_1, c2_n/sum_2). The result overlap distribution is a percentage number, ranging from 0.0% to; 100.0%, where 0.0% means there is no overlap and 100.0% means a perfect; overlap. Here is an example, if *base profile file* has counts of {400, 600}, and; *test profile file* has matched counts of {60000, 40000}. The *overlap* is 80%. OPTIONS; ^^^^^^^. .. option:: --function=<string>. Print details for a function if the function's name contains the given string. .. option:: --help. Prin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst:12058,test,test,12058,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,1,['test'],['test']
Testability,"rogram tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4632,test,tests,4632,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,3,['test'],"['test', 'tests']"
Testability,"rogram. This document specifies how to correctly update debug info in various kinds of; code transformations, and offers suggestions for how to create targeted debug; info tests for arbitrary transformations. For more on the philosophy behind LLVM debugging information, see; :doc:`SourceLevelDebugging`. Rules for updating debug locations; ==================================. .. _WhenToPreserveLocation:. When to preserve an instruction location; ----------------------------------------. A transformation should preserve the debug location of an instruction if the; instruction either remains in its basic block, or if its basic block is folded; into a predecessor that branches unconditionally. The APIs to use are; ``IRBuilder``, or ``Instruction::setDebugLoc``. The purpose of this rule is to ensure that common block-local optimizations; preserve the ability to set breakpoints on source locations corresponding to; the instructions they touch. Debugging, crash logs, and SamplePGO accuracy; would be severely impacted if that ability were lost. Examples of transformations that should follow this rule include:. * Instruction scheduling. Block-local instruction reordering should not drop; source locations, even though this may lead to jumpy single-stepping; behavior. * Simple jump threading. For example, if block ``B1`` unconditionally jumps to; ``B2``, *and* is its unique predecessor, instructions from ``B2`` can be; hoisted into ``B1``. Source locations from ``B2`` should be preserved. * Peephole optimizations that replace or expand an instruction, like ``(add X; X) => (shl X 1)``. The location of the ``shl`` instruction should be the same; as the location of the ``add`` instruction. * Tail duplication. For example, if blocks ``B1`` and ``B2`` both; unconditionally branch to ``B3`` and ``B3`` can be folded into its; predecessors, source locations from ``B3`` should be preserved. Examples of transformations for which this rule *does not* apply include:. * LICM. E.g., if an ins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:1335,log,logs,1335,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['log'],['logs']
Testability,rojected.hxx; ROOT/REveTrackPropagator.hxx; ROOT/REveTrans.hxx; ROOT/REveTreeTools.hxx; ROOT/REveTypes.hxx; ROOT/REveUtil.hxx; ROOT/REveVector.hxx; ROOT/REveViewer.hxx; ROOT/REveViewContext.hxx; ROOT/REveVSD.hxx; ROOT/REveVSDStructs.hxx; SOURCES; glu/memalloc.c; glu/dict.c; glu/geom.c; glu/mesh.c; glu/priorityq.c; glu/normal.c; glu/render.c; glu/sweep.c; glu/tess.c; glu/tessmono.c; src/REveChunkManager.cxx; src/REveBox.cxx; src/REveBoxSet.cxx; src/REveCalo.cxx; src/REveCaloData.cxx; src/REveCompound.cxx; src/REveDataCollection.cxx; src/REveDataProxyBuilderBase.cxx; src/REveDataSimpleProxyBuilder.cxx; src/REveDataTable.cxx; src/REveDigitSet.cxx; src/REveFrameBox.cxx; src/REveElement.cxx; src/REveGeoPolyShape.cxx; src/REveGeoShape.cxx; src/REveGeoShapeExtract.cxx; src/REveGluTess.cxx; src/REveJetCone.cxx; src/REveEllipsoid.cxx; src/REveLine.cxx; src/REveManager.cxx; src/REvePathMark.cxx; src/REvePointSet.cxx; src/REvePolygonSetProjected.cxx; src/REveProjectionBases.cxx; src/REveProjectionManager.cxx; src/REveProjections.cxx; src/REveRenderData.cxx; src/REveRGBAPalette.cxx; src/REveScalableStraightLineSet.cxx; src/REveScene.cxx; src/REveSceneInfo.cxx; src/REveSecondarySelectable.cxx; src/REveSelection.cxx; src/REveShape.cxx; src/REveStraightLineSet.cxx; src/REveTableInfo.cxx; src/REveTableProxyBuilder.cxx; src/REveText.cxx; src/REveTrack.cxx; src/REveTrackProjected.cxx; src/REveTrackPropagator.cxx; src/REveTrans.cxx; src/REveTreeTools.cxx; src/REveTypes.cxx; src/REveUtil.cxx; src/REveVector.cxx; src/REveViewer.cxx; src/REveVSD.cxx; src/REveVSDStructs.cxx; DEPENDENCIES; Core; Geom; Physics; EG; TreePlayer; RCsg; ROOTWebDisplay; ${EXTRA_DICT_OPTS}; ). if(builtin_nlohmannjson); target_include_directories(ROOTEve PRIVATE ${CMAKE_SOURCE_DIR}/builtins); else(); target_link_libraries(ROOTEve PUBLIC nlohmann_json::nlohmann_json); endif(). # this is required for glew; target_include_directories(ROOTEve PRIVATE ${CMAKE_SOURCE_DIR}/graf3d/eve7). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/CMakeLists.txt:3458,test,test,3458,graf3d/eve7/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf3d/eve7/CMakeLists.txt,1,['test'],['test']
Testability,"rom mainline into the release branch. Also, all; features need to be completed during this time. Any features not completed at; the end of the first round of testing will be removed or disabled for the; release. * Generate and send out the second release candidate sources. Only *critical*; bugs found during this testing phase will be fixed. Any bugs introduced by; merged patches will be fixed. If so a third round of testing is needed. * The release notes are updated. * Finally, release!. * Announce bug fix release schedule to the LLVM community and update the website. * Do bug-fix releases every two weeks until X.1.5 or X.1.6 (if necessary). Release Process; ===============. .. contents::; :local:. Release Administrative Tasks; ----------------------------. This section describes a few administrative tasks that need to be done for the; release process to begin. Specifically, it involves:. * Updating version numbers,. * Creating the release branch, and. * Tagging release candidates for the release team to begin testing. Create Release Branch; ^^^^^^^^^^^^^^^^^^^^^. Branch the Git trunk using the following procedure:. #. Remind developers that the release branching is imminent and to refrain from; committing patches that might break the build. E.g., new features, large; patches for works in progress, an overhaul of the type system, an exciting; new TableGen feature, etc. #. Verify that the current git trunk is in decent shape by; examining nightly tester and buildbot results. #. Bump the version in trunk to N.0.0git and tag the commit with llvmorg-N-init.; If ``X`` is the version to be released, then ``N`` is ``X + 1``. ::. $ git tag -sa llvmorg-N-init. #. Clear the release notes in trunk. #. Create the release branch from the last known good revision from before the; version bump. The branch's name is release/X.x where ``X`` is the major version; number and ``x`` is just the letter ``x``. #. On the newly-created release branch, immediately bump the version; to X.1.0g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:3457,test,testing,3457,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testing']
Testability,"ronment COMMAND ${CMAKE_COMMAND} -E environment). #---hworld------------------------------------------------------------------------------------; ROOT_EXECUTABLE(hworld hworld.cxx LIBRARIES Gpad). #---event-------------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(Event; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/Event.h; SOURCES Event.cxx LINKDEF EventLinkDef.h; DEPENDENCIES Hist MathCore); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); if(NOT runtime_cxxmodules); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libEvent_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libEvent_rdict.pcm); else(); add_custom_command(TARGET Event POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/Event.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/Event.pcm); endif(); endif(); ROOT_EXECUTABLE(eventexe MainEvent.cxx LIBRARIES Event RIO Tree TreePlayer Hist Net); ROOT_ADD_TEST(test-event COMMAND eventexe). #---guitest------------------------------------------------------------------------------------; ROOT_EXECUTABLE(guitest guitest.cxx LIBRARIES RIO Gui Gpad Hist). #---hsimple------------------------------------------------------------------------------------; #ROOT_EXECUTABLE(hsimple hsimple.cxx LIBRARIES RIO Tree Hist); #ROOT_ADD_TEST(test-hsimple COMMAND hsimple). #---invalid pointer checks---------------------------------------------------------------------; if(NOT (APPLE AND CMAKE_SYSTEM_PROCESSOR MATCHES arm64) OR M1_BROKEN_TESTS); ROOT_ADD_TEST(test-check-nullptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)0"" -e ""*ptr""; PASSREGEX ""dereference null pointer""). if(NOT MSVC OR win_broken_tests); ROOT_ADD_TEST(test-check-invalidptr; COMMAND ${ROOT_root_CMD} -b -q -l --ptrcheck -e ""int*ptr=(int*)1"" -e ""*ptr""; PASSREGEX ""invalid memory address""); endif(); endif(). #--minexam----------------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:2605,test,test-event,2605,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-event']
Testability,"root ${CMAKE_OSX_SYSROOT}""); endif(). #---configure unuran (required for creating the config.h used by unuran source files)----------------; add_custom_command(OUTPUT ${UNR_UNTARDIR}/config.h; COMMAND GNUMAKE=make ./configure CC=${UNR_CC} CFLAGS=${UNR_CFLAGS} > /dev/null 2>& 1; WORKING_DIRECTORY ${UNR_UNTARDIR}); endif(). #---We need to disable some warnings-------------------------------------------------------------------; string(REPLACE -Wall """" CMAKE_C_FLAGS ""${CMAKE_C_FLAGS}""); if(${CMAKE_CXX_COMPILER_ID} MATCHES Clang); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-parentheses-equality); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-deprecated-non-prototype); endif(); if(${CMAKE_CXX_COMPILER_ID} MATCHES GNU); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-maybe-uninitialized); ROOT_ADD_C_FLAG(CMAKE_C_FLAGS -Wno-alloc-size-larger-than). endif(). set(unrsources ${UNR_UNTARDIR}/src/utils/*.c; ${UNR_UNTARDIR}/src/methods/*.c; ${UNR_UNTARDIR}/src/specfunct/*.c; ${UNR_UNTARDIR}/src/distr/*.c; ${UNR_UNTARDIR}/src/distributions/*.c; ${UNR_UNTARDIR}/src/parser/*.c; ${UNR_UNTARDIR}/src/tests/*.c; ${UNR_UNTARDIR}/src/uniform/*.c; ${UNR_UNTARDIR}/src/urng/*.c ); set(unrconfig ${UNR_UNTARDIR}/config.h). else(). set(unrsources); set(unrconfig). endif(builtin_unuran). ROOT_STANDARD_LIBRARY_PACKAGE(Unuran; HEADERS; TUnuran.h; TUnuranBaseDist.h; TUnuranContDist.h; TUnuranDiscrDist.h; TUnuranEmpDist.h; TUnuranMultiContDist.h; TUnuranSampler.h; SOURCES; src/TUnuran.cxx; src/TUnuranContDist.cxx; src/TUnuranDiscrDist.cxx; src/TUnuranEmpDist.cxx; src/TUnuranMultiContDist.cxx; src/TUnuranSampler.cxx; ${unrconfig}; ${unrsources}; LIBRARIES; ${UNURAN_LIBRARIES}; DEPENDENCIES; Core; Hist; MathCore; ). if(builtin_unuran); target_include_directories(Unuran SYSTEM BEFORE PRIVATE ${UNR_UNTARDIR} ${UNR_UNTARDIR}/src ${UNR_UNTARDIR}/src/utils); target_compile_definitions(Unuran PRIVATE HAVE_CONFIG_H); else(); target_include_directories(Unuran SYSTEM PRIVATE ${UNURAN_INCLUDE_DIRS}); endif(). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt:3239,test,tests,3239,math/unuran/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/unuran/CMakeLists.txt,2,['test'],"['test', 'tests']"
Testability,ropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMAND testBatchNormalizationCuda). # DNN - Minimization Cuda; add_executable(testMinimizationCuda TestMinimizationCuda.cxx); TARGET_LINK_LIBRARIES(testMinimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-MinimizationCuda COMMAND testMinimizationCuda). # DNN - Arithmetic Cuda; add_executable(testArithmeticCuda TestMatrixArithmeticCuda.cxx); TARGET_LINK_LIBRARIES(testArithmeticCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ArithmeticCuda COMMAND testArithmeticCuda). # DNN - DataLoader Cuda; add_executable(testDataLoaderCuda TestDataLoaderCuda.cxx); TARGET_LINK_LIBRARIES(testDataLoaderCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-DataLoaderCuda COMMAND testDataLoaderCuda). # DNN - Optimization GPU. add_executable(testOptimizationCuda TestOptimizationCuda.cxx); TARGET_LINK_LIBRARIES(testOptimizationCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cuda COMMAND testOptimizationCuda). #Cuda tests using CUDNN; if (tmva-cudnn). # DNN - Batch normalization Cudnn; add_executable(testBatchNormalizationCudnn TestBatchNormalizationCudnn.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCudnn ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cudnn COMMAND testBatchNormalizationCudnn). # DNN Optimization GPU Cudnn. add_executable(testOptimizationCudnn TestOptimizationCudnn.cxx); TARGET_LINK_LIBRARIES(testOptimizationCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn Tes,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:2612,test,testDataLoaderCuda,2612,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testDataLoaderCuda']
Testability,"ror in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libTrackMathCoreDict.dll; ${CMAKE_CURRENT_BINARY_DIR}/libTrackMathCoreDict.dll); endif(); ROOT_EXECUTABLE(stressMathCore stressMathCore.cxx LIBRARIES MathCore Hist RIO Tree GenVector); ROOT_ADD_TEST(test-stressmathcore COMMAND stressMathCore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathcore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathCore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathcore). #--stressFit---------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressFit stressFit.cxx LIBRARIES MathCore Matrix); ROOT_ADD_TEST(test-stressfit COMMAND stressFit FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressfit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:12247,test,test-stressmathcore,12247,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stressmathcore', 'test-stressmathcore-interpreted']"
Testability,"rorNode are nullable because you can transition to a node that you have already visited.; Methods of CallExpr/FunctionDecl/CallEvent that; return arguments crash when the argument is out-of-bounds. If you checked the function name,; it doesn't mean that the function has the expected number of arguments!; Which is why you should use CallDescription.; Nullability of different entities within different kinds of symbols and regions is usually; documented via assertions in their constructors.; NamedDecl::getName will fail if the name of the declaration is not a single token,; e.g. for destructors. You could use NamedDecl::getNameAsString for those cases.; Note that this method is much slower and should be used sparringly, e.g. only when generating reports; but not during analysis.; Is -analyzer-checker=core included in all test RUN: lines? It was never supported; to run the analyzer with the core checks disabled. It might cause unexpected behavior and; crashes. You should do all your testing with the core checks enabled. Patterns that you should most likely avoid even if they're not technically wrong:. BugReporterVisitor should most likely not match the AST of the current program point; to decide when to emit a note. It is much easier to determine that by observing changes in; the program state.; In State->getSVal(Region), if Region is not known to be a TypedValueRegion; and the optional type argument is not specified, the checker may accidentally try to dereference a; void pointer.; Checker logic should not depend on whether a certain value is a Loc or NonLoc.; It should be immediately obvious whether the SVal is a Loc or a; NonLoc depending on the AST that is being checked. Checking whether a value; is Loc or Unknown/Undefined or whether the value is; NonLoc or Unknown/Undefined is totally fine.; New symbols should not be constructed in the checker via direct calls to SymbolManager,; unless they are of SymbolMetadata class tagged by the checker,; or they represent newly",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:25939,test,testing,25939,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['testing']
Testability,"roup'; keyword in SQL); add new field 'querytag' VARCHAR(64) with the unique; query tag; in WriteQueryLog fill also the field 'totevents'; in; PacketEvent, add switch to control whether to send te information to; the monitoring system on per packet level (may be too much for SQL).; The switch is called fMonitorPerPacket and it is globally controlled by; the rootrc variable 'Proof.MonitorPerPacket' and at session level with; the parameter PROOF_MonitorPerPacket .; Improve treatment of the case when temporary files are asked to be; created on a shared file system not containing the sandboxes. This; case, which seems to be a rather common one, should be now fully; supported.; Correctly honour selector abort status settings; TSelector::kAbortProcess and TSelector::kAbortFile.; Improve reporting of the non-processed {files, events} in the final; 'MissingFiles' list.  ; Improved algorithm for TPacketizerUnit to fix issue with non; homogeneous machines.; Improve the way the information about log files is saved in case of; failures. The log paths for these failing now should be now correctly; saved and accessible via TProofLog.; Improve merging of histograms. Just use TH1::Add whne the axis are; equal; much faster than TH1::Merge. Fixes; ; In TDataSetManagerFile::NotifyUpdate fix handling of the case when; the global list file does not exist yet (new dataset directory). Fixes; error messages during editing dataset operations.; Fix issue with machine names consistency when working on a local; machine ('localhost' or 'localhost.localdomain' are mapped to; gSystem->HostName()); solves possible matching problems in the; packetizer.; In TProofServ, fill the ""grand total"" message with more blanks, so; that no remnants of the previous message are visible on the screen.; In the autoconf/bonjour interface, fix issue preventing the correct; port (the protocol one, which may be different from the application; default) being used when registering the service. . In TProofPlayer::AddQuer",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html:5001,log,log,5001,proof/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v530/index.html,1,['log'],['log']
Testability,"rovide full support to compile ROOT with C++17. ## Removed interfaces. The following interfaces have been removed, after deprecation in v6.10. - Remove the deprecated `TSelectorCint.h` and `TSelectorCint.cxx`.; - Remove the deprecated `Riosfwd.h` and `Rtypeinfo.h`.; - `TTreeReader::SetLastEntry()` was replaced by `TTreeReader::SetEntriesRange()`. ## Core Libraries. - Added support for XCode 9 and MacOS High Sierra.; - When invoking root with the ""-t"" argument, ROOT enables thread-safety and,; if configured, implicit multithreading within ROOT.; - `NULL` is not defined by `Rtypes.h` anymore. Instead, its definition is expected to be; provided by `Rtype.h`'s `#include` of `stddef.h`.; - ROOT now supports dictionaries, autoload and autoparse for classes with template parameter packs.; - std::make_unique has been backported; - If a class overloads TObject::Hash, this derived class should also add; ```; ROOT::CallRecursiveRemoveIfNeeded(*this); ```; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this; type of object, the transversal of THashList and THashTable containers will; will have to be done without call Hash (and hence be linear rather than; logarithmic complexity). You will also see warnings like; ```; Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; ```; - When a container relies on TObject::Hash and RecursiveRemove, for example THashTable, the container uses ```TObject::CheckedHash()``` instead of ```TObject::Hash``` during insertion operation to record in the object whether the Hash/RecursiveRemove setup is done properly (as explain above). It this is not the case ```TObject::HasInconsistentHash()``` will return true. This can then be used to select, in RecursiveRemove, whether the call to Hash can be trusted or if one needs to do a linear search (as was done in v6.10 and earlier).; - In TClass::Ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:2472,log,logarithmic,2472,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['log'],['logarithmic']
Testability,"rrently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member or base class of non-POD class type; is referred before constructor begins execution.; C++11 Undefined behavior: non-static member or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod;. int *p = &non_pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {; POD pod;; };. extern non_POD non_pod;. int *p = &non_pod.pod.i; // warn. struct POD {; int i;; };. struct non_POD : public POD {};. extern non_POD non_pod;. POD *p = &non_pod; // warn. s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9661,test,test,9661,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"rresponding branch starting; from this volume is the active geometry**. \image html geometry005.png ""A geometry hierarchy in memory"" width=600. Nodes are never instantiated directly by users, but created as a result; of volume operations. Adding a volume named A with a given `user id`; inside a volume B will create a node named `A_id.` This will be added to; the list of nodes stored by B. In addition, when applying a division; operation in N slices to a volume A, a list of nodes `B_1`, `B_2`, ... ,; `B_N` is also created. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call `logical graph`; the hierarchy defined by nodes and volumes. The expansion of the logical; graph by all possible paths defines a tree structure where all nodes are; unique ""touchable"" objects. We will call this the ""physical tree"".; Unlike the logical graph, the physical tree can become a huge structure; with several millions of nodes in case of complex geometries; therefore,; it is not always a good idea to keep it transient in memory. Since the; logical and physical structures are correlated, the modeller rather; keeps track only of the current branch, updating the current global; matrix at each change of the level in geometry. The current physical; node is not an object that can be asked for at a given moment, but; rather represented by the combination: current node/current global; matrix. However, physical nodes have unique ID's that can be retrieved; for a given modeller state. These can be fed back to the modeller in; order to force a physical node to become current. The advantage of this; comes f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:21603,log,logical,21603,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"rs are in LLVM itself, please report every single regression found; as blocker, and all the other bugs as important, but not necessarily blocking; the release to proceed. They can be set as ""known failures"" and to be; fix on a future date. .. _pre-release-process:. Pre-Release Process; ===================. .. contents::; :local:. When the release process is announced on the mailing list, you should prepare; for the testing, by applying the same testing you'll do on the release; candidates, on the previous release. You should:. * Download the previous release sources from; https://llvm.org/releases/download.html. * Run the test-release.sh script on ``final`` mode (change ``-rc 1`` to; ``-final``). * Once all three stages are done, it'll test the final stage. * Using the ``Phase3/Release+Asserts/llvmCore-MAJ.MIN-final.install`` base,; run the test-suite. If the final phase's ``make check-all`` failed, it's a good idea to also test; the intermediate stages by going on the obj directory and running; ``make check-all`` to find if there's at least one stage that passes (helps; when reducing the error for bug report purposes). .. _release-process:. Release Process; ===============. .. contents::; :local:. When the Release Manager sends you the release candidate, download all sources,; unzip on the same directory (there will be sym-links from the appropriate places; to them), and run the release test as above. You should:. * Download the current candidate sources from where the release manager points; you (ex. https://llvm.org/pre-releases/3.3/rc1/). * Repeat the steps above with ``-rc 1``, ``-rc 2`` etc modes and run the; test-suite the same way. * Compare the results, report all errors on Bugzilla and publish the binary blob; where the release manager can grab it. Once the release manages announces that the latest candidate is the good one,; you have to pack the ``Release`` (no Asserts) install directory on ``Phase3``; and that will be the official binary. * Rename (or lin",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:5443,test,test,5443,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test']
Testability,"rs perform Objective-C-specific checks and check the use of Apple's SDKs (OS X and iOS); Security Checkers check for insecure API usage and perform checks based on the CERT Secure Coding Standards; Unix Checkers check the use of Unix and POSIX APIs. Core Checkers. Name, DescriptionExample. core.CallAndMessage; (C, C++, ObjC); Check for logical errors for function calls and Objective-C message expressions; (e.g., uninitialized arguments, null function pointers). // C; struct S {; int x;; };. void f(struct S s);. void test() {; struct S s;; f(s); // warn: passed-by-value arg contain uninitialized data; }. // C; void test() {; void (*foo)(void);; foo(); // warn: function pointer is uninitialized; }. // C; void test() {; void (*foo)(void);; foo = 0;; foo(); // warn: function pointer is null; }. // C++; class C {; public:; void f();; };. void test() {; C *pc;; pc->f(); // warn: object pointer is uninitialized; }. // C++; class C {; public:; void f();; };. void test() {; C *pc = 0;; pc->f(); // warn: object pointer is null; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:1956,test,test,1956,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"rs, the created Boolean nodes will assume that; the shapes are positioned with an identity transformation with respect; to the frame of the created composite. In order to provide some; positioning of the combination components, we have to attach after each; shape identifier the name of an existing transformation, separated by a; colon. Obviously all transformations created for this purpose have to be; objects with unique names in order to be properly substituted during; parsing. #### Composite Shape Example. One should have in mind that the same shape or matrix identifiers can be; used many times in the same expression, as in the following example:. ``` {.cpp}; const Double_t sq2 = TMath::Sqrt(2.);; gSystem->Load(""libGeom"");; TGeoManager *mgr =; new TGeoManager(""Geom"",""composite shape example"");; TGeoMedium *medium = 0;; TGeoVolume *top = mgr->MakeBox(""TOP"",medium,100,250,250);; mgr->SetTopVolume(top);. // make shape components; TGeoBBox *sbox = new TGeoBBox(""B"",100,125*sq2,125*sq2);; TGeoTube *stub = new TGeoTube(""T"",0,100,250);; TGeoPgon *spgon = new TGeoPgon(""P"",0.,360.,6,2);; spgon->DefineSection(0,-250,0,80);; spgon->DefineSection(1,250,0,80);. // define some rotations; TGeoRotation *r1 = new TGeoRotation(""r1"",90,0,0,180,90,90);; r1->RegisterYourself();; TGeoRotation *r2 = new TGeoRotation(""r2"",90,0,45,90,45,270);; r2->RegisterYourself();; // create a composite; TGeoCompositeShape *cs = new TGeoCompositeShape(""cs"",; ""((T+T:r1)-(P+P:r1))*B:r2"");; TGeoVolume *comp = new TGeoVolume(""COMP"",cs);; comp->SetLineColor(5);. // put it in the top volume; top->AddNode(comp,1);; mgr->CloseGeometry();; // visualize it with ray tracing; top->Raytrace();; ```. ![A composite shape example](pictures/080001CD.png). Composite shapes can be subsequently used for defining volumes.; Moreover, these volumes contain other volumes, following the general; criteria. Volumes created based on composite shapes cannot be divided. ### Navigation Methods Performed By Shapes. Shapes are named ob",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:48488,stub,stub,48488,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['stub'],['stub']
Testability,"rses a line, then invokes a method on MCStreamer. In; the code generator, the `Code Emission`_ phase of the code generator lowers; higher level LLVM IR and Machine* constructs down to the MC layer, emitting; directives through MCStreamer. On the implementation side of MCStreamer, there are two major implementations:; one for writing out a .s file (MCAsmStreamer), and one for writing out a .o; file (MCObjectStreamer). MCAsmStreamer is a straightforward implementation; that prints out a directive for each method (e.g. ``EmitValue -> .byte``), but; MCObjectStreamer implements a full assembler. For target specific directives, the MCStreamer has a MCTargetStreamer instance.; Each target that needs it defines a class that inherits from it and is a lot; like MCStreamer itself: It has one method per directive and two classes that; inherit from it, a target object streamer and a target asm streamer. The target; asm streamer just prints it (``emitFnStart -> .fnstart``), and the object; streamer implement the assembler logic for it. To make llvm use these classes, the target initialization must call; TargetRegistry::RegisterAsmStreamer and TargetRegistry::RegisterMCObjectStreamer; passing callbacks that allocate the corresponding target streamer and pass it; to createAsmStreamer or to the appropriate object streamer constructor. The ``MCContext`` class; -----------------------. The MCContext class is the owner of a variety of uniqued data structures at the; MC layer, including symbols, sections, etc. As such, this is the class that you; interact with to create symbols and sections. This class can not be subclassed. The ``MCSymbol`` class; ----------------------. The MCSymbol class represents a symbol (aka label) in the assembly file. There; are two interesting kinds of symbols: assembler temporary symbols, and normal; symbols. Assembler temporary symbols are used and processed by the assembler; but are discarded when the object file is produced. The distinction is usually; rep",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst:28478,log,logic,28478,interpreter/llvm-project/llvm/docs/CodeGenerator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst,1,['log'],['logic']
Testability,"rt.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. Lets say that you have an LLVM optimization pass, and you want to see; how many times it triggers. First thing you should do is add an LLVM; `statistic <ProgrammersManual.html#Statistic>`_ to your pass, which will; tally counts of things you care about. Following this, you can set up a test and a report that collects these; and formats them for easy viewing. This consists of two files, a; ""``test-suite/TEST.XXX.Makefile``"" fragment (where XXX is the name of; your test) and a ""``test-suite/TEST.XXX.report``"" file that indicates; how to format the output into a table. There are many example reports of; various levels of sophistication included with the test suite, and the; framework is very general. If you are interested in testing an optimization pass, check out the; ""libcalls"" test as an example. It can be run like this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=libcalls report. This will do a bunch of stuff, then eventually print a table like this:. ::. Name | total | #exit |; ...; FreeBench/analyzer/analyzer | 51 | 6 |; FreeBench/fourinarow/fourinarow | 1 | 1 |; FreeBench/neural/neural | 19 | 9 |; FreeBench/pifft/pifft | 5 | 3 |; MallocBench/cfrac/cfrac | 1 | * |; MallocBench/espresso/espresso | 52 | 12 |; MallocBench/gs/gs | 4 | * |; Prolangs-C/TimberWolfMC/timberwolfmc | 302 | * |; Prolangs-C",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:5806,test,test-suite,5806,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,1,['test'],['test-suite']
Testability,rt/lib/stats; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/benchmarks; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/tsan/dd; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/go; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/tsan/rtl; - `59`; - `14`; - `45`; - :part:`23%`; * - compiler-rt/lib/tsan/rtl-old; - `61`; - `13`; - `48`; - :part:`21%`; * - compiler-rt/lib/tsan/tests/rtl; - `10`; - `0`; - `10`; - :none:`0%`; * - compiler-rt/lib/tsan/tests/unit; - `11`; - `3`; - `8`; - :part:`27%`; * - compiler-rt/lib/ubsan; - `27`; - `7`; - `20`; - :part:`25%`; * - compiler-rt/lib/ubsan_minimal; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-te,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:25834,test,tests,25834,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_flags.h; compiler-rt/lib/xray/xray_interface_internal.h; compiler-rt/lib/xray/xray_log_interface.cpp; compiler-rt/lib/xray/xray_mips.cpp; compiler-rt/lib/xray/xray_mips64.cpp; compiler-rt/lib/xray/xray_powerpc64.cpp; compiler-rt/lib/xray/xray_profile_collector.cpp; compiler-rt/lib/xray/xray_profile_collector.h; compiler-rt/lib/xray/xray_profiling.cpp; compiler-rt/lib/xray/xray_profiling_flags.cpp; compiler-rt/lib/xray/xray_profiling_flags.h; compiler-rt/lib/xray/xray_recursion_guard.h; compiler-rt/lib/xray/xray_trampoline_powerpc64.cpp; compiler-rt/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/de,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:106676,test,tests,106676,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,rt:`26%`; * - compiler-rt/lib/scudo; - `20`; - `0`; - `20`; - :none:`0%`; * - compiler-rt/lib/scudo/standalone; - `49`; - `48`; - `1`; - :part:`97%`; * - compiler-rt/lib/scudo/standalone/benchmarks; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/fuzz; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/include/scudo; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/scudo/standalone/tests; - `25`; - `24`; - `1`; - :part:`96%`; * - compiler-rt/lib/scudo/standalone/tools; - `1`; - `1`; - `0`; - :good:`100%`; * - compiler-rt/lib/stats; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/benchmarks; - `6`; - `0`; - `6`; - :none:`0%`; * - compiler-rt/lib/tsan/dd; - `3`; - `0`; - `3`; - :none:`0%`; * - compiler-rt/lib/tsan/go; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/tsan/rtl; - `59`; - `14`; - `45`; - :part:`23%`; * - compiler-rt/lib/tsan/rtl-old; - `61`; - `13`; - `48`; - :part:`21%`; * - compiler-rt/lib/tsan/tests/rtl; - `10`; - `0`; - `10`; - :none:`0%`; * - compiler-rt/lib/tsan/tests/unit; - `11`; - `3`; - `8`; - :part:`27%`; * - compiler-rt/lib/ubsan; - `27`; - `7`; - `20`; - :part:`25%`; * - compiler-rt/lib/ubsan_minimal; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfec,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:25253,test,tests,25253,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,rt:`27%`; * - compiler-rt/lib/ubsan; - `27`; - `7`; - `20`; - :part:`25%`; * - compiler-rt/lib/ubsan_minimal; - `1`; - `0`; - `1`; - :none:`0%`; * - compiler-rt/lib/xray; - `40`; - `27`; - `13`; - :part:`67%`; * - compiler-rt/lib/xray/tests/unit; - `10`; - `8`; - `2`; - :part:`80%`; * - compiler-rt/tools/gwp_asan; - `2`; - `2`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/clang_llvm_roundtrip; - `2`; - `1`; - `1`; - :part:`50%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26362,test,tests,26362,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"rt=sample.json -g -O2 sample.c. Please do note that there are some known false positives, for source locations; and debug intrinsic checking, so that will be addressed as a future work. Mutation testing for MIR-level transformations; ----------------------------------------------. A variant of the ``debugify`` utility described in; :ref:`Mutation testing for IR-level transformations<IRDebugify>` can be used; for MIR-level transformations as well: much like the IR-level pass,; ``mir-debugify`` inserts sequentially increasing line locations to each; ``MachineInstr`` in a ``Module``. And the MIR-level ``mir-check-debugify`` is; similar to IR-level ``check-debugify`` pass. For example, here is a snippet before:. .. code-block:: llvm. name: test; body: |; bb.1 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF; %1:_(s32) = IMPLICIT_DEF; %2:_(s32) = G_CONSTANT i32 2; %3:_(s32) = G_ADD %0, %2; %4:_(s32) = G_SUB %3, %1. and after running ``llc -run-pass=mir-debugify``:. .. code-block:: llvm. name: test; body: |; bb.0 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF debug-location !12; DBG_VALUE %0(s32), $noreg, !9, !DIExpression(), debug-location !12; %1:_(s32) = IMPLICIT_DEF debug-location !13; DBG_VALUE %1(s32), $noreg, !11, !DIExpression(), debug-location !13; %2:_(s32) = G_CONSTANT i32 2, debug-location !14; DBG_VALUE %2(s32), $noreg, !9, !DIExpression(), debug-location !14; %3:_(s32) = G_ADD %0, %2, debug-location !DILocation(line: 4, column: 1, scope: !6); DBG_VALUE %3(s32), $noreg, !9, !DIExpression(), debug-location !DILocation(line: 4, column: 1, scope: !6); %4:_(s32) = G_SUB %3, %1, debug-location !DILocation(line: 5, column: 1, scope: !6); DBG_VALUE %4(s32), $noreg, !9, !DIExpression(), debug-location !DILocation(line: 5, column: 1, scope: !6). By default, ``mir-debugify`` inserts ``DBG_VALUE`` instructions **everywhere**; it is legal to do so. In particular, every (non-PHI) machine instruction that; defines a register must be followed by a ``DBG_VALUE`` use of that def. If; an ins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:16467,test,test,16467,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['test']
Testability,"rt`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks for correctness. At; base, this is how the nightly tester works, it's just one example of a; general framework. Lets say that you have an LLVM optimization pass, and you want to see; how many times it triggers. First thing you should do is add an LLVM; `statistic <ProgrammersManual.html#Statistic>`_ to your pass, which will; tally counts of things you care about. Following this, you can set up a test and a report that collects these; and formats them for easy viewing. This consists of two files, a; ""``test-suite/TEST.XXX.Makefile``"" fragment (where XXX is the name of; your test) and a ""``test-suite/TEST.XXX.report``"" file that indicates; how to format the output into a table. There are many example reports of; various levels of sophistication included with the test suite, and the; framework is very general. If you are interested in testing an optimization pass, check out the; ""libcalls"" test as an example. It can be run like this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=libcalls report. This will do a bunch of stuff, then eventually print a table like this:. ::. Name | total | #exit |; ...; FreeBench/analyzer/analyzer | 51 | 6 |; FreeBench/fourinarow/fourinarow | 1 | 1 |; FreeBench/neural/neural | 19 | 9 |; FreeBench/pifft/pifft | 5 | 3 |; MallocBench/cfrac/cfrac | 1 | * |; MallocBench/espresso/espresso | 52 | 12 |; MallocBench/gs/gs | 4 | * |; Prolangs-C/TimberWolfMC/timberwolfmc | 302 | * |; Prolangs-C/agrep/agrep | 33 | 12 |; Prolangs-C/allroots/allroots | * | * |; Prola",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:5879,test,test,5879,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,2,['test'],"['test', 'test-suite']"
Testability,"rted will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every release, and report any *new* errors in GitHub.; If the bug can be reproduced with an unpatched upstream ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:8334,test,test,8334,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test']
Testability,"rted, but in this specific; instance, it falls back to Numeric Differentiation and works fine, since `; gamma_cdf()` doesn't have a lot of parameters. > In such cases, Numeric Differentiation fallback is only used for that; specific function. In above example, `gamma_cdf()` falls back to Numeric; Differentiation but other functions in `MathFuncs.h` will still be; able to use AD. This is because Clad is going to assume that you have a; derivative for this `gamma_cdf()` function, and the remaining functions will; use AD as expected. In the end, the remaining functions (including; `gamma_cdf()`) will try to fall back to Numeric Differentiation. However, if you want to add pure AD support, you need to make sure that all; your external functions are supported by Clad (meaning there is a custom; derivative defined for each of them). ### How do I test my new class while adding AD support?. Please look at the test classes that test the derivatives, evaluates,; fixtures, etc. (defined in 'roofit/roofitcore/test'). You can clone and adapt; these tests to your class as needed. For example:. > [roofit/roofitcore/test/testRooFuncWrapper.cxx](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx). > Tip: Tests like above can be referenced to see which parts of RooFit already; support AD. ### How do I control my compile time?. This is an area of research that still needs some work. In most cases, the; compile times are reasonable, but with an increase in the level of complexity,; higher compile times may be encountered. ## Appendix B - Where does AD Logic Implementation reside?. Following classes provide several Helper Functions to translate existing logic; into AD-supported logic. a - RooFit::Detail::CodeSquashContext. b - RooFuncWrapper. ### a. RooFit::Detail::CodeSquashContext. > [roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.h](https://github.com/root-project/root/blob/master/roofit/roofitcore/inc/RooFit/Detail/CodeSquashContext.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:29058,test,test,29058,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['test'],['test']
Testability,"ruct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. alpha.security.ReturnPtrRange; (C); Check for an out-of-bound pointer being returned to callers. static int A[10];. int *test() {; int *p = A + 10;; return p; // warn; }. int test(void) {; int x;; return x; // warn: undefined or garbage returned; }. alpha.security.taint.TaintPropagation; (C); Generate taint information used by other checkers. void test() {; char x = getchar(); // 'x' marked as tainted; system(&x); // warn: untrusted data is passed to a system call; }. // note: compiler internally checks if the second param to; // sprintf is a string literal or not.; // Use -Wno-format-securi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10953,test,test,10953,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"ruction, run:. .. code-block:: bash. $ llvm-exegesis --mode=latency --opcode-name=ADD64rr. Measuring the uop decomposition or inverse throughput of an instruction works similarly:. .. code-block:: bash. $ llvm-exegesis --mode=uops --opcode-name=ADD64rr; $ llvm-exegesis --mode=inverse_throughput --opcode-name=ADD64rr. The output is a YAML document (the default is to write to stdout, but you can; redirect the output to a file using `--benchmarks-file`):. .. code-block:: none. ---; key:; opcode_name: ADD64rr; mode: latency; config: ''; cpu_name: haswell; llvm_triple: x86_64-unknown-linux-gnu; num_repetitions: 10000; measurements:; - { key: latency, value: 1.0058, debug_string: '' }; error: ''; info: 'explicit self cycles, selecting one aliasing configuration.; Snippet:; ADD64rr R8, R8, R10; '; ... To measure the latency of all instructions for the host architecture, run:. .. code-block:: bash. $ llvm-exegesis --mode=latency --opcode-index=-1. EXAMPLE 2: benchmarking a custom code snippet; ---------------------------------------------. To measure the latency/uops of a custom piece of code, you can specify the; `snippets-file` option (`-` reads from standard input). .. code-block:: bash. $ echo ""vzeroupper"" | llvm-exegesis --mode=uops --snippets-file=-. Real-life code snippets typically depend on registers or memory.; :program:`llvm-exegesis` checks the liveliness of registers (i.e. any register; use has a corresponding def or is a ""live in""). If your code depends on the; value of some registers, you need to use snippet annotations to ensure setup; is performed properly. For example, the following code snippet depends on the values of XMM1 (which; will be set by the tool) and the memory buffer passed in RDI (live in). .. code-block:: none. # LLVM-EXEGESIS-LIVEIN RDI; # LLVM-EXEGESIS-DEFREG XMM1 42; vmulps	(%rdi), %xmm1, %xmm2; vhaddps	%xmm2, %xmm2, %xmm3; addq $0x10, %rdi. Example 3: benchmarking with memory annotations; -----------------------------------------------. S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:5831,benchmark,benchmarking,5831,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"ruction.; BuildMI(MBB, DL, TII.get(X86::JNE)).addMBB(&MBB);. If you need to add a definition operand (other than the optional destination; register), you must explicitly mark it as such:. .. code-block:: c++. MI.addReg(Reg, RegState::Define);. Fixed (preassigned) registers; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. One important issue that the code generator needs to be aware of is the presence; of fixed registers. In particular, there are often places in the instruction; stream where the register allocator *must* arrange for a particular value to be; in a particular register. This can occur due to limitations of the instruction; set (e.g., the X86 can only do a 32-bit divide with the ``EAX``/``EDX``; registers), or external factors like calling conventions. In any case, the; instruction selector should emit code that copies a virtual register into or out; of a physical register when needed. For example, consider this simple LLVM example:. .. code-block:: llvm. define i32 @test(i32 %X, i32 %Y) {; %Z = sdiv i32 %X, %Y; ret i32 %Z; }. The X86 instruction selector might produce this machine code for the ``div`` and; ``ret``:. .. code-block:: text. ;; Start of div; %EAX = mov %reg1024 ;; Copy X (in reg1024) into EAX; %reg1027 = sar %reg1024, 31; %EDX = mov %reg1027 ;; Sign extend X into EDX; idiv %reg1025 ;; Divide by Y (in reg1025); %reg1026 = mov %EAX ;; Read the result (Z) out of EAX. ;; Start of ret; %EAX = mov %reg1026 ;; 32-bit return value goes in EAX; ret. By the end of code generation, the register allocator would coalesce the; registers and delete the resultant identity moves producing the following; code:. .. code-block:: text. ;; X is in EAX, Y is in ECX; mov %EAX, %EDX; sar %EDX, 31; idiv %ECX; ret. This approach is extremely general (if it can handle the X86 architecture, it; can handle anything!) and allows all of the target specific knowledge about the; instruction stream to be isolated in the instruction selector. Note that; physical registers should have a short l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst:19925,test,test,19925,interpreter/llvm-project/llvm/docs/CodeGenerator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodeGenerator.rst,1,['test'],['test']
Testability,"runs the test; but expects a failure output, taking extra execution time but alerting you; if/when the test begins to behave correctly (an XPASS test result). You; need to decide which is more appropriate in each case. **Using ``target=...``**. Checking the target triple can be tricky; it's easy to mis-specify. For; example, ``target=mips{{.*}}`` will match not only mips, but also mipsel,; mips64, and mips64el. ``target={{.*}}-linux-gnu`` will match; x86_64-unknown-linux-gnu, but not armv8l-unknown-linux-gnueabihf.; Prefer to use hyphens to delimit triple components (``target=mips-{{.*}}``); and it's generally a good idea to use a trailing wildcard to allow for; unexpected suffixes. Also, it's generally better to write regular expressions that use entire; triple components, than to do something clever to shorten them. For; example, to match both freebsd and netbsd in an expression, you could write; ``target={{.*(free|net)bsd.*}}`` and that would work. However, it would; prevent a ``grep freebsd`` from finding this test. Better to use:; ``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``. Substitutions; -------------. Besides replacing LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and ca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:23615,test,test,23615,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"rview of an external tool to verify the protection; mechanisms implemented by Clang's *Control Flow Integrity* (CFI) schemes; (``-fsanitize=cfi``). This tool, provided a binary or DSO, should infer whether; indirect control flow operations are protected by CFI, and should output these; results in a human-readable form. This tool should also be added as part of Clang's continuous integration testing; framework, where modifications to the compiler ensure that CFI protection; schemes are still present in the final binary. Location; ========. This tool will be present as a part of the LLVM toolchain, and will reside in; the ""/llvm/tools/llvm-cfi-verify"" directory, relative to the LLVM trunk. It will; be tested in two methods:. - Unit tests to validate code sections, present in; ""/llvm/unittests/tools/llvm-cfi-verify"".; - Integration tests, present in ""/llvm/tools/clang/test/LLVMCFIVerify"". These; integration tests are part of clang as part of a continuous integration; framework, ensuring updates to the compiler that reduce CFI coverage on; indirect control flow instructions are identified. Background; ==========. This tool will continuously validate that CFI directives are properly; implemented around all indirect control flows by analysing the output machine; code. The analysis of machine code is important as it ensures that any bugs; present in linker or compiler do not subvert CFI protections in the final; shipped binary. Unprotected indirect control flow instructions will be flagged for manual; review. These unexpected control flows may simply have not been accounted for in; the compiler implementation of CFI (e.g. indirect jumps to facilitate switch; statements may not be fully protected). It may be possible in the future to extend this tool to flag unnecessary CFI; directives (e.g. CFI directives around a static call to a non-polymorphic base; type). This type of directive has no security implications, but may present; performance impacts. Design Ideas; ==========",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CFIVerify.rst:1137,test,tests,1137,interpreter/llvm-project/llvm/docs/CFIVerify.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CFIVerify.rst,1,['test'],['tests']
Testability,"rview; ========. This document is the reference manual for the LLVM testing; infrastructure. It documents the structure of the LLVM testing; infrastructure, the tools needed to use it, and how to add and run; tests. Requirements; ============. In order to use the LLVM testing infrastructure, you will need all of the; software required to build LLVM, as well as `Python <http://python.org>`_ 3.6 or; later. LLVM Testing Infrastructure Organization; ========================================. The LLVM testing infrastructure contains three major categories of tests:; unit tests, regression tests and whole programs. The unit tests and regression; tests are contained inside the LLVM repository itself under ``llvm/unittests``; and ``llvm/test`` respectively and are expected to always pass -- they should be; run before every commit. The whole programs tests are referred to as the ""LLVM test suite"" (or; ""test-suite"") and are in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_.; For historical reasons, these tests are also referred to as the ""nightly; tests"" in places, which is less ambiguous than ""test-suite"" and remains; in use although we run them much more often than nightly. Unit tests; ----------. Unit tests are written using `Google Test <https://github.com/google/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:1198,test,test-suite,1198,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test-suite']
Testability,"rwise we fail.; if(DEFINED CMAKE_CXX_STANDARD AND CMAKE_CXX_STANDARD LESS ${LLVM_REQUIRED_CXX_STANDARD}); message(FATAL_ERROR ""Requested CMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD} which is less than the required ${LLVM_REQUIRED_CXX_STANDARD}.""); endif(). set(CMAKE_CXX_STANDARD ${LLVM_REQUIRED_CXX_STANDARD} CACHE STRING ""C++ standard to conform to""); set(CMAKE_CXX_STANDARD_REQUIRED YES). if (CYGWIN); # Cygwin is a bit stricter and lack things like 'strdup', 'stricmp', etc in; # c++xx mode.; set(CMAKE_CXX_EXTENSIONS YES); else(); set(CMAKE_CXX_EXTENSIONS NO); endif(). if (NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES); message(FATAL_ERROR ""; No build type selected. You need to pass -DCMAKE_BUILD_TYPE=<type> in order to configure LLVM.; Available options are:; * -DCMAKE_BUILD_TYPE=Release - For an optimized build with no assertions or debug info.; * -DCMAKE_BUILD_TYPE=Debug - For an unoptimized build with assertions and debug info.; * -DCMAKE_BUILD_TYPE=RelWithDebInfo - For an optimized build with no assertions but with debug info.; * -DCMAKE_BUILD_TYPE=MinSizeRel - For a build optimized for size instead of speed.; Learn more about these options in our documentation at https://llvm.org/docs/CMake.html#cmake-build-type; ""); endif(). # Set default build type for cmake's try_compile module.; # CMake 3.17 or newer sets CMAKE_DEFAULT_BUILD_TYPE to one of the; # items from CMAKE_CONFIGURATION_TYPES. Logic below can be further; # simplified once LLVM's minimum CMake version is updated to 3.17.; if(CMAKE_DEFAULT_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_DEFAULT_BUILD_TYPE}); else(); if(CMAKE_CONFIGURATION_TYPES); list(GET CMAKE_CONFIGURATION_TYPES 0 CMAKE_TRY_COMPILE_CONFIGURATION); elseif(CMAKE_BUILD_TYPE); set(CMAKE_TRY_COMPILE_CONFIGURATION ${CMAKE_BUILD_TYPE}); endif(); endif(). # Side-by-side subprojects layout: automatically set the; # LLVM_EXTERNAL_${project}_SOURCE_DIR using LLVM_ALL_PROJECTS; # This allows an easy way of setting up a build direct",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:4228,assert,assertions,4228,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['assert'],['assertions']
Testability,"ry boosted method linear, log, step. Boost_RandomSeed No 0 − Seed for random number generator used for bagging. Configuration options for MVA method :. Configuration options reference for MVA method: RuleFit. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). GDTau No -1 − Gradient-directed (GD) path: default fit cut-off. GDTauPrec No 0.01 − GD path: precision of tau. GDStep No 0.01 − GD path: step size. GDNSteps No 10000 − GD path: number of steps. GDErrScale No 1.1 − Stop scan when error > scale*errmin. LinQuantile No 0.025 − Quantile of linear terms (removes outliers). GDPathEveFrac No 0.5 − Fraction of events used for the path search. GDValidEveFrac No 0.5 − Fraction of events used for the validation. fEventsMin No 0.1 − Minimum fraction of events in a splittable node. fEventsMax No 0.9 − Maximum fraction of events in a splittable node. nTrees No 20 − Number of trees in forest. ForestType No AdaBoost AdaBoost, Random Method to use for forest generation (AdaBoost or RandomForest). RuleMinDist No 0.001 − Minimum distance between rules. MinImp No 0.01 − Minimum rule importance accepted. Model No ModRuleLinear ModRule, ModRuleLinear, ModLinear Model to be used. Ru",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:18529,test,testing,18529,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"ry regression found during tests and benchmarks. * Make sure the critical bugs get fixed and merged to the next release candidate. Not all bugs or regressions are show-stoppers and it's a bit of a grey area what; should be fixed before the next candidate and what can wait until the next; release. It'll depend on:. * The severity of the bug, how many people it affects and if it's a regression; or a known bug. Known bugs are ""unsupported features"" and some bugs can be; disabled if they have been implemented recently. * The stage in the release. Less critical bugs should be considered to be; fixed between RC1 and RC2, but not so much at the end of it. * If it's a correctness or a performance regression. Performance regression; tends to be taken more lightly than correctness. .. _scripts:. Scripts; =======. The scripts are in the ``utils/release`` directory. test-release.sh; ---------------. This script will check-out, configure and compile LLVM+Clang (+ most add-ons,; like ``compiler-rt``, ``libcxx``, ``libomp`` and ``clang-extra-tools``) in; three stages, and will test the final stage.; It'll have installed the final binaries on the Phase3/Releasei(+Asserts); directory, and that's the one you should use for the test-suite and other; external tests. To run the script on a specific release candidate run::. ./test-release.sh \; -release 3.3 \; -rc 1 \; -no-64bit \; -test-asserts \; -no-compare-files. Each system will require different options. For instance, x86_64 will; obviously not need ``-no-64bit`` while 32-bit systems will, or the script will; fail. The important flags to get right are:. * On the pre-release, you should change ``-rc 1`` to ``-final``. On RC2,; change it to ``-rc 2`` and so on. * On non-release testing, you can use ``-final`` in conjunction with; ``-no-checkout``, but you'll have to create the ``final`` directory by hand; and link the correct source dir to ``final/llvm.src``. * For release candidates, you need ``-test-asserts``, or it won't create a;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst:1817,test,test,1817,interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ReleaseProcess.rst,1,['test'],['test']
Testability,"ry); if ientry < 0:; break. # copy next entry into memory and verify; nb = mychain.GetEntry(jentry); if nb<=0:; continue. # use the values directly from the tree; nEvent = int(mychain.ev); if nEvent<0:; continue. print(mychain.pz, '=', mychain.px*mychain.px, '+', mychain.py*mychain.py); ```. Access to arrays works the same way as access to single value tree; elements, where the size of the array is determined by the number of; values actually read from the file. For example:. ``` {.cpp}; # loop over array tree element; for d in mychain.mydoubles:; print(d). # direct access into an array tree element; i5 = mychain.myints[5]; ```. #### Writing a Tree. Writing a ROOT **`TTree`** in a Python session is a little convoluted,; if only because you will need a C++ class to make sure that data members; can be mapped, unless you are working with built-in types. Here is an; example for working with the latter only:. ``` {.cpp}; from ROOT import TFile, TTree; from array import array. h = TH1F('h1','test',100,-10.,10.); f = TFile('test.root','recreate'); t = TTree('t1','tree with histos'); maxn = 10; n = array('i',[0]); d = array('f',maxn*[0.]); t.Branch('mynum',n,'mynum/I'); t.Branch('myval',d,'myval[mynum]/F'). for i in range(25):; n[0] = min(i,maxn); for j in range(n[0]):; d[j] = i*0.1+j; t.Fill(). f.Write(); f.Close(); ```. The use of arrays is needed, because the pointer to the address of the; object that is used for filling must be given to the **`TTree::Branch()`**; call, even though the formal argument is declared a '`void*'`. In the; case of ROOT objects, similar pointer manipulation is unnecessary,; because the full type information is available, and `TTree::Branch()`; has been Pythonized to take care of the call details. However, data; members of such objects that are of built-in types, still require; something extra since they are normally translated to Python primitive; types on access and hence their address cannot be taken. For that; purpose, there is the `AddressO",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/PythonRuby.md:30406,test,test,30406,documentation/users-guide/PythonRuby.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/PythonRuby.md,1,['test'],['test']
Testability,"ry, we can use ``objdump`` to; look for the ``xray_instr_map`` section. ::. $ objdump -h -j xray_instr_map ./bin/llc; ./bin/llc: file format elf64-x86-64. Sections:; Idx Name Size VMA LMA File off Algn; 14 xray_instr_map 00002fc0 00000000041516c6 00000000041516c6 03d516c6 2**0; CONTENTS, ALLOC, LOAD, READONLY, DATA. Getting Traces; --------------. By default, XRay does not write out the trace files or patch the application; before main starts. If we run ``llc`` it should work like a normally built; binary. If we want to get a full trace of the application's operations (of the; functions we do end up instrumenting with XRay) then we need to enable XRay; at application start. To do this, XRay checks the ``XRAY_OPTIONS`` environment; variable. ::. # The following doesn't create an XRay trace by default.; $ ./bin/llc input.ll. # We need to set the XRAY_OPTIONS to enable some features.; $ XRAY_OPTIONS=""patch_premain=true xray_mode=xray-basic verbosity=1"" ./bin/llc input.ll; ==69819==XRay: Log file in 'xray-log.llc.m35qPB'. At this point we now have an XRay trace we can start analysing. The ``llvm-xray`` Tool; ----------------------. Having a trace then allows us to do basic accounting of the functions that were; instrumented, and how much time we're spending in parts of the code. To make; sense of this data, we use the ``llvm-xray`` tool which has a few subcommands; to help us understand our trace. One of the things we can do is to get an accounting of the functions that have; been instrumented. We can see an example accounting with ``llvm-xray account``:. ::. $ llvm-xray account xray-log.llc.m35qPB --top=10 --sort=sum --sortorder=dsc --instr_map=./bin/llc; Functions with latencies: 29; funcid count [ min, med, 90p, 99p, max] sum function; 187 360 [ 0.000000, 0.000001, 0.000014, 0.000032, 0.000075] 0.001596 LLLexer.cpp:446:0: llvm::LLLexer::LexIdentifier(); 85 130 [ 0.000000, 0.000000, 0.000018, 0.000023, 0.000156] 0.000799 X86ISelDAGToDAG.cpp:1984:0: (anonymous namespace",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst:2206,log,log,2206,interpreter/llvm-project/llvm/docs/XRayExample.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst,1,['log'],['log']
Testability,"ry. The `GlobalLayoutBuilder`_ class is responsible for laying out the globals; efficiently to minimize the sizes of the underlying bitsets. .. _control flow integrity design document: https://clang.llvm.org/docs/ControlFlowIntegrityDesign.html. :Example:. ::. target datalayout = ""e-p:32:32"". @a = internal global i32 0, !type !0; @b = internal global i32 0, !type !0, !type !1; @c = internal global i32 0, !type !1; @d = internal global [2 x i32] [i32 0, i32 0], !type !2. define void @e() !type !3 {; ret void; }. define void @f() {; ret void; }. declare void @g() !type !3. !0 = !{i32 0, !""typeid1""}; !1 = !{i32 0, !""typeid2""}; !2 = !{i32 4, !""typeid2""}; !3 = !{i32 0, !""typeid3""}. declare i1 @llvm.type.test(i8* %ptr, metadata %typeid) nounwind readnone. define i1 @foo(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid1""); ret i1 %x; }. define i1 @bar(i32* %p) {; %pi8 = bitcast i32* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid2""); ret i1 %x; }. define i1 @baz(void ()* %p) {; %pi8 = bitcast void ()* %p to i8*; %x = call i1 @llvm.type.test(i8* %pi8, metadata !""typeid3""); ret i1 %x; }. define void @main() {; %a1 = call i1 @foo(i32* @a) ; returns 1; %b1 = call i1 @foo(i32* @b) ; returns 1; %c1 = call i1 @foo(i32* @c) ; returns 0; %a2 = call i1 @bar(i32* @a) ; returns 0; %b2 = call i1 @bar(i32* @b) ; returns 1; %c2 = call i1 @bar(i32* @c) ; returns 1; %d02 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 0)) ; returns 0; %d12 = call i1 @bar(i32* getelementptr ([2 x i32]* @d, i32 0, i32 1)) ; returns 1; %e = call i1 @baz(void ()* @e) ; returns 1; %f = call i1 @baz(void ()* @f) ; returns 0; %g = call i1 @baz(void ()* @g) ; returns 1; ret void; }. .. _GlobalLayoutBuilder: https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/Transforms/IPO/LowerTypeTests.h. ``!vcall_visibility`` Metadata; ==============================. In order to allow removing unused function pointers from vtables, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:7518,test,test,7518,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,1,['test'],['test']
Testability,"ry/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecede",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22058,test,test,22058,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"s (data vs data ) and; one sample (data vs distribution); For the data vs distribution test, the user can compare using a; predefined distributions (Gaussian, LogNormal or Exponential) or; by passing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the da",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:1818,test,test,1818,math/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html,1,['test'],['test']
Testability,"s *obj1;; long double ld1 = [obj1 longDoubleM];; // warn: receiver is uninitialized; }. // Objective-C; @interface MyClass : NSObject; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1.x; // warn: uninitialized object pointer; }. // Objective-C; @interface Subscriptable : NSObject; - (id)objectAtIndexedSubscript:(unsigned int)index;; @end. @interface MyClass : Subscriptable; @property (readwrite,assign) id x;; - (long double)longDoubleM;; @end. void test() {; MyClass *obj1;; id i = obj1[0]; // warn: uninitialized object pointer; }. core.DivideZero; (C, C++, ObjC); Check for division by zero.co. void test(int z) {; if (z == 0); int x = 1 / z; // warn; }. void test() {; int x = 1;; int y = x % 0; // warn; }. core.NonNullParamChecker; (C, C++, ObjC); Check for null pointers passed as arguments to a function whose arguments are; marked with the nonnull attribute. int f(int *p) __attribute__((nonnull));. void test(int *p) {; if (!p); f(p); // warn; }. core.NullDereference; (C, C++, ObjC); Check for dereferences of null pointers. // C; void test(int *p) {; if (p); return;. int x = p[0]; // warn; }. // C; void test(int *p) {; if (!p); *p = 0; // warn; }. // C++; class C {; public:; int x;; };. void test() {; C *pc = 0;; int k = pc->x; // warn; }. // Objective-C; @interface MyClass {; @public; int x;; }; @end. void test() {; MyClass *obj = 0;; obj->x = 1; // warn; }. core.StackAddressEscape; (C); Check that addresses of stack memory do not escape the function. char const *p;. void test() {; char const str[] = ""string"";; p = str; // warn; }. void* test() {; return __builtin_alloca(12); // warn; }. void test() {; static int *x;; int y;; x = &y; // warn; }. core.UndefinedBinaryOperatorResult; (C); Check for undefined results of binary operators. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. core.VLASize; (C); Check for declarations of VLA of undefined or zero size. void test() {; int x",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:3144,test,test,3144,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"s PEP 8 compliant.; Use its default rules. For example, avoid specifying ``--line-length`` even; though it does not default to 80. The default rules can change between major; versions of black. In order to avoid unnecessary churn in the formatting rules,; we currently use black version 23.x in LLVM. When contributing a patch unrelated to formatting, you should format only the; Python code that the patch modifies. For this purpose, use the `darker; <https://pypi.org/project/darker/>`_ utility, which runs default black rules; over only the modified Python code. Doing so should ensure the patch will pass; the Python format checks in LLVM's pre-commit CI, which also uses darker. When; contributing a patch specifically for reformatting Python files, use black,; which currently only supports formatting entire files. Here are some quick examples, but see the black and darker documentation for; details:. .. code-block:: bash. $ pip install black=='23.*' darker # install black 23.x and darker; $ darker test.py # format uncommitted changes; $ darker -r HEAD^ test.py # also format changes from last commit; $ black test.py # format entire file. Instead of individual file names, you can specify directories to; darker, and it will find the changed files. However, if a directory is; large, like a clone of the LLVM repository, darker can be painfully; slow. In that case, you might wish to use git to list changed files.; For example:. .. code-block:: bash. $ darker -r HEAD^ $(git diff --name-only --diff-filter=d HEAD^). Mechanical Source Issues; ========================. Source Code Formatting; ----------------------. Commenting; ^^^^^^^^^^. Comments are important for readability and maintainability. When writing comments,; write them as English prose, using proper capitalization, punctuation, etc.; Aim to describe what the code is trying to do and why, not *how* it does it at; a micro level. Here are a few important things to document:. .. _header file comment:. File Headers; """"""""""",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:6149,test,test,6149,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,1,['test'],['test']
Testability,"s a global pointer; ***`gGeoManager`*** in order to be fully accessible from external code.; The manager class is the owner of all geometry objects defined in a; session; therefore, users must not try to control their deletion. It; contains lists of media, materials, transformations, shapes and volumes.; A special case is the one of geometrical transformations. When creating; a matrix or a translation, this is by default owned by external objects.; The manager class becomes owner of all transformations used for; positioning volumes. In order to force the ownership for other; transformations, one can use `TGeoMatrix::RegisterYourself()` method. Do; not be therefore surprised that some transformations cannot be found by; name when creating a composite shape for instance if you did not; register them after creation. Logical nodes (positioned volumes) are created and destroyed by the; **`TGeoVolume`** class. Physical nodes and their global transformations; are subjected to a caching mechanism due to the sometimes very large; memory requirements of logical graph expansion. The total number of; physical instances of volumes triggers the caching mechanism and the; cache manager is a client of **`TGeoManager`**. The manager class also; controls the drawing/checking package (**`TGeoPainter`** client). This; is linked with ROOT graphical libraries loaded on demand in order to; control visualization actions. ## Navigation and Tracking. Tracking is the feature allowing the transport of a given particle; knowing its kinematics. A state is determined by any combination of the; position $\vec{r}$ and direction $\vec{n}$ with respect to the world; reference frame. The direction $\vec{n}$ must be a unit vector having as; components the director cosines. The full classification of a given; state will provide the following information: the deepest physical node; containing the position vector, the distance to the closest boundary; along the direction vector, the next physical node afte",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:100504,log,logical,100504,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"s a particular binary; (executable, shared library, loadable module, or driver module). The linker; generates this automatically based on a hash that includes the complete symbol; table and debugging information, even if this is later stripped from the binary. This specification uses the ELF Build ID as the sole means of identifying; binaries. Each binary relevant to the log must have been linked with a unique; Build ID. The symbolizing filter must have some means of mapping a Build ID back; to the original ELF binary (either the whole unstripped binary, or a stripped; binary paired with a separate debug file). Colorization; ============. The markup format supports a restricted subset of ANSI X3.64 SGR (Select Graphic; Rendition) control sequences. These are unlike other markup elements:. * They specify presentation details (bold or colors) rather than semantic; information. The association of semantic meaning with color (e.g. red for; errors) is chosen by the code doing the logging, rather than by the UI; presentation of the symbolizing filter. This is a concession to existing code; (e.g. LLVM sanitizer runtimes) that use specific colors and would require; substantial changes to generate semantic markup instead. * A single control sequence changes ""the state"", rather than being an; hierarchical structure that surrounds affected text. The filter processes ANSI SGR control sequences only within a single line. If a; control sequence to enter a bold or color state is encountered, it's expected; that the control sequence to reset to default state will be encountered before; the end of that line. If a ""dangling"" state is left at the end of a line, the; filter may reset to default state for the next line. An SGR control sequence is not interpreted inside any other markup element.; However, other markup elements may appear between SGR control sequences and the; color/bold state is expected to apply to the symbolic output that replaces the; markup element in the filter's out",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:4924,log,logging,4924,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logging']
Testability,"s a thread pool of the size of the total number of cores.; if(${t} IN_LIST multithreaded_all_cores); set(createThreadPool ""-e \""ROOT::EnableImplicitMT(${NProcessors})\""""); endif(); else(); unset(createThreadPool); endif(). if(${t} IN_LIST need_network); list(APPEND labels needs_network); endif(). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:24801,test,tests,24801,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['tests']
Testability,"s a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` datatype. A DAG node consists of an operator and zero or more; arguments (or operands). Each argument can be of any desired type. By using; another DAG node as an argument, an arbitrary graph of DAG nodes can be; built. The syntax of a ``dag`` instance is:. ``(`` *operator* *argument1*\ ``,`` *argument2*\ ``,`` ... ``)``. The operator must be present and must be a record. There can be zero or more; arguments, separated by commas. The operator and arguments can have three; formats. ====================== =============================================; Format Meaning; ====================== =============================================; *value* argument value; *value*\ ``:``\ *nam",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:50333,assert,assert,50333,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"s about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, the value should be cast to void to; disable the warning. To be specific, it is preferred to write the code like; this:. .. code-block:: c++. assert(V.size() > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value); (void)NewToSet;; assert(NewToSet && ""The value shouldn't be in the set yet"");. Do Not Use ``using namespace std``; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. In LLVM, we prefer to explicitly prefix all identifiers from the standard; namespace with an ""``std::``"" prefix, rather than rely on ""``using namespace; std;``"". In header files, adding a ``'using namespace XXX'`` directive pollutes the; namespace of any source file that ``#include``\s the header, creating; maintenance issues. In implementation files (e.g. ``.cpp`` files), the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:48192,assert,assert,48192,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,2,['assert'],"['assert', 'assertions']"
Testability,"s added to the position of a declaration attribute, e.g., ``int; *ptr __counted_by(size)``, the attribute appertains to the outermost pointer; type of the declaration (``int *``). New sugar types; ===============. An external bounds annotation creates a type sugar of the underlying pointer; types. We will introduce a new sugar type, ``DynamicBoundsPointerType`` to; represent ``__counted_by`` or ``__sized_by``. Using ``AttributedType`` would not; be sufficient because the type needs to hold the count or size expression as; well as some metadata necessary for analysis, while this type may be implemented; through inheritance from ``AttributedType``. Treating the annotations as type; sugars means two types with incompatible external bounds annotations may be; considered canonically the same types. This is sometimes necessary, for example,; to make the ``__counted_by`` and friends not participate in function; overloading. However, this design requires a separate logic to walk through the; entire type hierarchy to check type compatibility of bounds annotations. Late parsing for C; ==================. A bounds annotation such as ``__counted_by(count)`` can be added to type of a; struct field declaration where count is another field of the same struct; declared later. Similarly, the annotation may apply to type of a function; parameter declaration which precedes the parameter count in the same function.; This means parsing the argument of bounds annotations must be done after the; parser has the whole context of a struct or a function declaration. Clang has; late parsing logic for C++ declaration attributes that require late parsing,; while the C declaration attributes and C/C++ type attributes do not have the; same logic. This requires introducing late parsing logic for C/C++ type; attributes. Internal bounds annotations; ===========================. ``__indexable`` and ``__bidi_indexable`` alter pointer representations to be; equivalent to a struct with the pointer and the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst:1286,log,logic,1286,interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,1,['log'],['logic']
Testability,"s already been partially included in; MultiSource/Benchmarks/Rodinia. Benchmarks still missing are:. * streamcluster; * particlefilter; * nw; * nn; * myocyte; * mummergpu; * lud; * leukocyte; * lavaMD; * kmeans; * hotspot3D; * heartwall; * cfd; * bfs; * b+tree. vecmathlib tests harness; ------------------------; https://bitbucket.org/eschnett/vecmathlib/wiki/Home. PARSEC; ------; http://parsec.cs.princeton.edu/. Graph500 reference implementations; ----------------------------------; https://github.com/graph500/graph500/tree/v2-spec. NAS Parallel Benchmarks; -----------------------; https://www.nas.nasa.gov/publications/npb.html. The official benchmark is written in Fortran, but an unofficial; C-translation is available as well:; https://github.com/benchmark-subsetting/NPB3.0-omp-C. DARPA HPCS SSCA#2 C/OpenMP reference implementation; ---------------------------------------------------; http://www.highproductivity.org/SSCABmks.htm. This web site does not exist any more, but there seems to be a copy of; some of the benchmarks; https://github.com/gtcasl/hpc-benchmarks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polymage-benchmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Krip",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:3769,benchmark,benchmarks,3769,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmarks']
Testability,"s an optimization, if a lambda expression is immediately; converted to a block pointer (as in the first example, above), then the block; is not copied and autoreleased: rather, it is given the same lifetime as a; block literal written at that point in the program, which avoids the overhead; of copying a block to the heap in the common case. The conversion from a lambda to a block pointer is only available in; Objective-C++, and not in C++ with blocks, due to its use of Objective-C memory; management (autorelease). Object Literals and Subscripting; --------------------------------. Clang provides support for :doc:`Object Literals and Subscripting; <ObjectiveCLiterals>` in Objective-C, which simplifies common Objective-C; programming patterns, makes programs more concise, and improves the safety of; container creation. There are several feature macros associated with object; literals and subscripting: ``__has_feature(objc_array_literals)`` tests the; availability of array literals; ``__has_feature(objc_dictionary_literals)``; tests the availability of dictionary literals;; ``__has_feature(objc_subscripting)`` tests the availability of object; subscripting. Objective-C Autosynthesis of Properties; ---------------------------------------. Clang provides support for autosynthesis of declared properties. Using this; feature, clang provides default synthesis of those properties not declared; @dynamic and not having user provided backing getter and setter methods.; ``__has_feature(objc_default_synthesize_properties)`` checks for availability; of this feature in version of clang being used. .. _langext-objc-retain-release:. Objective-C retaining behavior attributes; -----------------------------------------. In Objective-C, functions and methods are generally assumed to follow the; `Cocoa Memory Management; <https://developer.apple.com/library/mac/#documentation/Cocoa/Conceptual/MemoryMgmt/Articles/mmRules.html>`_; conventions for ownership of object arguments and; return va",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:77319,test,tests,77319,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,3,['test'],['tests']
Testability,"s and vendors of potential disruptions when upgrading to; a newer version of a tool. For example, deprecating a feature that is expected; to be removed in the future, removing an already-deprecated feature, upgrading a; diagnostic from a warning to an error, switching important default behavior, or; any other potentially disruptive situation thought to be worth raising; awareness of. For such changes, the following should be done:. .. warning::. Phabricator is deprecated and will be switched to read-only mode in October; 2023, for new code contributions use :ref:`GitHub Pull Requests <github-reviews>`.; This section contains old information that needs to be updated. * When performing the code review for the change, please add any applicable; ""vendors"" group to the review for their awareness. The purpose of these; groups is to give vendors early notice that potentially disruptive changes; are being considered but have not yet been accepted. Vendors can give early; testing feedback on the changes to alert us to unacceptable breakages. The; current list of vendor groups is:. * `Clang vendors <https://reviews.llvm.org/project/members/113/>`_; * `libc++ vendors <https://reviews.llvm.org/project/members/109/>`_. People interested in joining the vendors group can do so by clicking the; ""Join Project"" link on the vendor's ""Members"" page in Phabricator. * When committing the change to the repository, add appropriate information; about the potentially breaking changes to the ``Potentially Breaking Changes``; section of the project's release notes. The release note should have; information about what the change is, what is potentially disruptive about; it, as well as any code examples, links, and motivation that is appropriate; to share with users. This helps users to learn about potential issues with; upgrading to that release. * After the change has been committed to the repository, the potentially; disruptive changes described in the release notes should be posted to the; `A",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:6027,test,testing,6027,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['testing']
Testability,"s annotated to return a localized string:. __attribute__((annotate(""returns_localized_nsstring""))); static inline NSString *LocalizationNotNeeded(NSString *s) {; return s;; }. You can then call this function when creating your debugging UI:. [field setStringValue:LocalizationNotNeeded(@""Debug"")];. Some projects may also find it useful to use NSLocalizedString but add ""DNL"" or ""Do Not Localize"" to the string contents as a convention:. UILabel *testLabel = [[UILabel alloc] init];; NSString *s = NSLocalizedString(@""Hello <Do Not Localize>"", @""For debug purposes"");; [testLabel setText:s];. Q: How do I tell the analyzer that my instance variable does not need to be released in -dealloc under Manual Retain/Release?; If your class only uses an instance variable for part of its lifetime, it may; maintain an invariant guaranteeing that the instance variable is always released; before -dealloc. In this case, you can silence a warning about a missing release; by either adding assert(_ivar == nil) or an explicit release; [_ivar release] (which will be a no-op when the variable is nil) in; -dealloc. ; Q: How do I decide whether a method's return type should be _Nullable or _Nonnull?; Depending on the implementation of the method, this puts you in one of five situations:. You actually never return nil.; You do return nil sometimes, and callers are supposed to handle that. This; includes cases where your method is documented to return nil given certain; inputs.; You return nil based on some external condition (such as an out-of-memory; error), but the client can't do anything about it either.; You return nil only when the caller passes input documented to be invalid.; That means it's the client's fault.; You return nil in some totally undocumented case. In (1) you should annotate the method as returning a _Nonnull; object.; In (2) the method should be marked _Nullable.; In (3) you should probably annotate the method _Nonnull. Why?; Because no callers will actually check for nil, g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:4608,assert,assert,4608,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,1,['assert'],['assert']
Testability,"s are always records. The result of ``!getdagop`` can be used directly in a context where; any record class at all is acceptable (typically placing it into; another dag value). But in other contexts, it must be explicitly; cast to a particular class. The ``<``\ *type*\ ``>`` syntax is; provided to make this easy. For example, to assign the result to a value of type ``BaseClass``, you; could write either of these::. BaseClass b = !getdagop<BaseClass>(someDag);; BaseClass b = !cast<BaseClass>(!getdagop(someDag));. But to create a new DAG node that reuses the operator from another, no; cast is necessary::. dag d = !dag(!getdagop(someDag), args, names);. ``!gt(``\ *a*\ `,` *b*\ ``)``; This operator produces 1 if *a* is greater than *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, or ``string`` values. ``!head(``\ *a*\ ``)``; This operator produces the zeroth element of the list *a*.; (See also ``!tail``.). ``!if(``\ *test*\ ``,`` *then*\ ``,`` *else*\ ``)``; This operator evaluates the *test*, which must produce a ``bit`` or; ``int``. If the result is not 0, the *then* expression is produced; otherwise; the *else* expression is produced. ``!interleave(``\ *list*\ ``,`` *delim*\ ``)``; This operator concatenates the items in the *list*, interleaving the; *delim* string between each pair, and produces the resulting string.; The list can be a list of string, int, bits, or bit. An empty list; results in an empty string. The delimiter can be the empty string. ``!isa<``\ *type*\ ``>(``\ *a*\ ``)``; This operator produces 1 if the type of *a* is a subtype of the given *type*; 0; otherwise. ``!le(``\ *a*\ ``,`` *b*\ ``)``; This operator produces 1 if *a* is less than or equal to *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, or ``string`` values. ``!listconcat(``\ *list1*\ ``,`` *list2*\ ``, ...)``; This operator concatenates the list arguments *list1*, *list2*, etc., and; produces the resulting list. The lists must have the same element",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:67078,test,test,67078,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,2,['test'],['test']
Testability,"s are declared in the global namespace `TMVA_SOFIE_$ModelName`.; - `kNoWeightFile = 0x2` the weight values are not written in a separate `.dat` file, but they are included in the generated header file. In addition, the `RModel::Generate` function takes as an additional optional argument the batch size (default is = 1) and the inference code can then be generated for the desired batch size. #### SOFIE ONNX Parser. The ONNX parser supports now several new ONNX operators. The list of the current supported ONNX operator is the following:; - Gemm; - Conv (in 1D,2D and 3D); - RNN, GRU, LSTM; - Relu, Selu, Sigmoid, Softmax, Tanh, LeakyRelu; - BatchNormalization; - MaxPool, AveragePool, GlobalAverage; - ConvTranspose; - Gather; - Expand, Reduce; - Neg, Exp, Sqrt, Reciprocal; - Add, Sum, Mul, Div; - Reshape, Flatten, Transpose; - Squeeze, Unsqueeze, Slice; - Concat, Reduce; - Identity; - Shape. In addition a Custom (user defined) operator is supported. An example of using a Custom operator is the program `tmva/pymva/test/EmitCustomModel.cxx`. The ONNX parser supports also the fusing of the operators MatMul + Add in a Gemm operator and fusing Conv + Add and ConvTranspose + Add. #### SOFIE Keras Parser. The Keras parser supports now model with input batch size not defined (e.g `bathsize=-1`), and by default the model is generated with `batchsize=1`.; The Keras parser supports now in addition to the Dense layer the Conv2D layer, several activation functions (Relu, Selu, Sigmoid, Softmax, Tanh, LeakyRelu) and these other layers: BatchNormalization, Reshape, Convatenate, Add, Subtract, Multiply.; Models with Dropout layers are supported in case the Dropout is used only during training and not inference. For model having operators not yet supported in the Keras parser it is then reccomended to convert the Keras model to `ONNX` using the python `tf2onnx` tool. #### SOFIE PyTorch Parser. If using PyTorch it is recommended to save the model directly in `ONNX` format instad of the nati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md:27959,test,test,27959,README/ReleaseNotes/v628/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v628/index.md,1,['test'],['test']
Testability,"s as one would expect, as well as static; local variables. [testme]. Local automatic (stack) variables referenced within the compound; statement of a Block are imported and captured by the Block as const; copies. The capture (binding) is performed at the time of the Block; literal expression evaluation. The compiler is not required to capture a variable if it can prove; that no references to the variable will actually be evaluated.; Programmers can force a variable to be captured by referencing it in a; statement at the beginning of the Block, like so:. .. code-block:: c. (void) foo;. This matters when capturing the variable has side-effects, as it can; in Objective-C or C++. The lifetime of variables declared in a Block is that of a function;; each activation frame contains a new copy of variables declared within; the local scope of the Block. Such variable declarations should be; allowed anywhere [testme] rather than only when C99 parsing is; requested, including for statements. [testme]. Block literal expressions may occur within Block literal expressions; (nest) and all variables captured by any nested blocks are implicitly; also captured in the scopes of their enclosing Blocks. A Block literal expression may be used as the initialization value for; Block variables at global or local static scope. The Invoke Operator; ===================. Blocks are :block-term:`invoked` using function call syntax with a; list of expression parameters of types corresponding to the; declaration and returning a result type also according to the; declaration. Given:. .. code-block:: c. int (^x)(char);; void (^z)(void);; int (^(*y))(char) = &x;. the following are all legal Block invocations:. .. code-block:: c. x('a');; (*y)('a');; (true ? x : *y)('a'). The Copy and Release Operations; ===============================. The compiler and runtime provide :block-term:`copy` and; :block-term:`release` operations for Block references that create and,; in matched use, release allocated stor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst:5454,test,testme,5454,interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,1,['test'],['testme']
Testability,"s available through the `RBatchGenerator` class and can be seamlessly integrated in user code, for example:; ```python; # Returns two generators that return training and validation batches as PyTorch tensors.; gen_train, gen_validation = ROOT.TMVA.Experimental.CreatePyTorchGenerators(; tree_name, file_name, batch_size, chunk_size, target=target, validation_split=0.3); ```; The functionality is also available for TensorFlow datasets and Python generators of numpy arrays. See more in the `RBatchGenerator*` tutorials under the TMVA folder. ## 3D Graphics Libraries. ## Geometry Libraries. ## Database Libraries. ## Networking Libraries. ## GUI Libraries. ## Montecarlo Libraries. ## PROOF Libraries. ## Language Bindings. ## JavaScript ROOT. - The default `TCanvas` and `TBrowser` is switched back to the traditional look. (`--web=off` is no longer needed). ## Tutorials. ## Class Reference Guide. ## Build, Configuration and Testing Infrastructure. - The traditional versioning convention of ROOT (e.g. 6.28/10) has been changed to standard semantic versioning (6.28.10), i.e. the slash is changed by a point. Please update any user script that relied on parsing the slash. - `mathmore` (and thus other features depending on it) is no longer enabled by default as it's not LGPL-compliant.; ; - System-wide `afterimage` and `nlohmann_json` packages are preferred over the `builtin` options in the binary releases. - If `-Droottest=ON` is specified, the ROOT build system used to clone a matching branch of the `roottest` repository.; This logic has been improved and is now as follows:; _(i)_ If the current head is a well-known branch, e.g. `master` or `v6-28-00-patches`, use the matching branch upstream;; _(ii)_ otherwise, try a branch that matches the name of the current head in the forked repository, if it exists; else try using the closest upstream head/tag below `HEAD`'s parent commit;; _(iii)_ as a last resort, if there is no preferred candidate, checkout the remote's default head.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v630/index.md:22425,log,logic,22425,README/ReleaseNotes/v630/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v630/index.md,1,['log'],['logic']
Testability,"s byref, sret, inalloca and preallocated.; * Some intrinsics require an ``elementtype`` attribute, which can be retrieved; using ``getParamElementType()``. This attribute is required in cases where; the intrinsic does not naturally encode a needed element type. This is also; used for inline assembly. Note that some of the methods mentioned above only exist to support both typed; and opaque pointers at the same time, and will be dropped once the migration; has completed. For example, ``isOpaqueOrPointeeTypeEquals()`` becomes; meaningless once all pointers are opaque. While direct usage of pointer element types is immediately apparent in code,; there is a more subtle issue that opaque pointers need to contend with: A lot; of code assumes that pointer equality also implies that the used load/store; type or GEP source element type is the same. Consider the following examples; with typed and opaque pointers:. .. code-block:: llvm. define i32 @test(i32* %p) {; store i32 0, i32* %p; %bc = bitcast i32* %p to i64*; %v = load i64, i64* %bc; ret i64 %v; }. define i32 @test(ptr %p) {; store i32 0, ptr %p; %v = load i64, ptr %p; ret i64 %v; }. Without opaque pointers, a check that the pointer operand of the load and; store are the same also ensures that the accessed type is the same. Using a; different type requires a bitcast, which will result in distinct pointer; operands. With opaque pointers, the bitcast is not present, and this check is no longer; sufficient. In the above example, it could result in store to load forwarding; of an incorrect type. Code making such assumptions needs to be adjusted to; check the accessed type explicitly:; ``LI->getType() == SI->getValueOperand()->getType()``. Frontends; ---------. Frontends need to be adjusted to track pointee types independently of LLVM,; insofar as they are necessary for lowering. For example, clang now tracks the; pointee type in the ``Address`` structure. Frontends using the C API through an FFI interface should be aware t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst:8933,test,test,8933,interpreter/llvm-project/llvm/docs/OpaquePointers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OpaquePointers.rst,1,['test'],['test']
Testability,"s called **`TBranch`**.; If two variables are independent, and the designer knows the variables; will not be used together, they should be placed on separate branches.; If, however, the variables are related, such as the coordinates of a; point, it is most efficient to create one branch with both coordinates; on it. A variable on a **`TBranch`** is called a leaf (yes -; **`TLeaf`**). Another point to keep in mind when designing trees is that; branches of the same **`TTree`** can be written to separate files. To; add a **`TBranch`** to a **`TTree`** we call the; method **`TTree::Branch()`**. Note that we DO NOT use the `TBranch`; constructor. The `TTree::Branch` method has several signatures. The branch type; differs by what is stored in it. A branch can hold an entire object, a; list of simple variables, contents of a folder, contents of a; **`TList`**, or an array of objects. Let's see some examples. To follow; along you will need the shared library `libEvent.so`. First, check if it; is in `$ROOTSYS/test`. If it is, copy it to your own area. If it is not; there, you have to build it by typing make in `$ROOTSYS/test`. ## Adding a Branch to Hold a List of Variables. As in the very first example (`cernstaff.root.root`); the data we want to save is a list of simple variables, such as integers; or floats. In this case, we use the following `TTree::Branch` signature:. ``` {.cpp}; tree->Branch(""Ev_Branch"",&event,; ""temp/F:ntrack/I:nseg:nvtex:flag/i"");; ```. The first parameter is the branch name. The second parameter is the address from which the first variable is to; be read. In the code above, ""event"" is a structure with one float and; three integers and one unsigned integer. You should not assume that the; compiler aligns the elements of a structure without gaps. To avoid; alignment problems, you need to use structures with same length members.; If your structure does not qualify, you need to create one branch for; each element of the structure. The leaf name is NOT use",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:19144,test,test,19144,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"s can be object files, archives, or dynamic libraries. The **lib**; directory is just a convenient place for libraries as it places them all in; a directory from which they can be linked later. **include**. This subdirectory should contain any header files that are global to your; project. By global, we mean that they are used by more than one library or; executable of your project. By placing your header files in **include**, they will be found; automatically by the LLVM build system. For example, if you have a file; **include/jazz/note.h**, then your source files can include it simply with; **#include ""jazz/note.h""**. **tools**. This subdirectory should contain all of your source code for executables.; For each program that you build, you will have one directory in **tools**; that will contain that program's source code. **test**. This subdirectory should contain tests that verify that your code works; correctly. Automated tests are especially useful. Currently, the LLVM build system provides basic support for tests. The LLVM; system provides the following:. * LLVM contains regression tests in ``llvm/test``. These tests are run by the; :doc:`Lit <CommandGuide/lit>` testing tool. This test procedure uses ``RUN``; lines in the actual test case to determine how to run the test. See the; :doc:`TestingGuide` for more details. * LLVM contains an optional package called ``llvm-test``, which provides; benchmarks and programs that are known to compile with the Clang front; end. You can use these programs to test your code, gather statistical; information, and compare it to the current LLVM performance statistics. Currently, there is no way to hook your tests directly into the ``llvm/test``; testing harness. You will simply need to find a way to use the source; provided within that directory on your own. Typically, you will want to build your **lib** directory first followed by your; **tools** directory. Writing LLVM Style Makefiles; ============================. The LLVM bu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst:3191,test,tests,3191,interpreter/llvm-project/llvm/docs/Projects.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst,1,['test'],['tests']
Testability,"s distributed as a number of different; subprojects. Each one has its own download which is a TAR archive that is; compressed with the gzip program. The files are as follows, with *x.y* marking the version number:. ``llvm-x.y.tar.gz``. Source release for the LLVM libraries and tools. ``cfe-x.y.tar.gz``. Source release for the Clang frontend. .. _checkout:. Checkout LLVM from Git; ----------------------. You can also checkout the source code for LLVM from Git. .. note::. Passing ``--config core.autocrlf=false`` should not be required in; the future after we adjust the .gitattribute settings correctly, but; is required for Windows users at the time of this writing. Simply run:. .. code-block:: console. % git clone https://github.com/llvm/llvm-project.git. or on Windows,. .. code-block:: console. % git clone --config core.autocrlf=false https://github.com/llvm/llvm-project.git. This will create an '``llvm-project``' directory in the current directory and; fully populate it with all of the source code, test directories, and local; copies of documentation files for LLVM and all the related subprojects. Note; that unlike the tarballs, which contain each subproject in a separate file, the; git repository contains all of the projects together. If you want to get a specific release (as opposed to the most recent revision),; you can check out a tag after cloning the repository. E.g., `git checkout; llvmorg-6.0.1` inside the ``llvm-project`` directory created by the above; command. Use `git tag -l` to list all of them. Sending patches; ^^^^^^^^^^^^^^^. See :ref:`Contributing <submit_patch>`. Bisecting commits; ^^^^^^^^^^^^^^^^^. See `Bisecting LLVM code <GitBisecting.html>`_ for how to use ``git bisect``; on LLVM. Reverting a change; ^^^^^^^^^^^^^^^^^^. When reverting changes using git, the default message will say ""This reverts; commit XYZ"". Leave this at the end of the commit message, but add some details; before it as to why the commit is being reverted. A brief explanation ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:22415,test,test,22415,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"s expected to fail when targeting PowerPC.; ; XFAIL: target=powerpc{{.*}}. ``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated; list of boolean expressions. The values in each expression may be:. - Features added to ``config.available_features`` by configuration files such as ``lit.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identifier, so for example ``he{{l+}}o`` would match; ``helo``, ``hello``, ``helllo``, and so on.; - The default target triple, preceded by the string ``target=`` (for example,; ``target=x86_64-pc-windows-msvc``). Typically regular expressions are used; to match parts of the triple (for example, ``target={{.*}}-windows{{.*}}``; to match any Windows target triple). | ``REQUIRES`` enables the test if all expressions are true.; | ``UNSUPPORTED`` disables the test if any expression is true.; | ``XFAIL`` expects the test to fail if any expression is true. As a special case, ``XFAIL: *`` is expected to fail everywhere. .. code-block:: llvm. ; This test is disabled when running on Windows,; ; and is disabled when targeting Linux, except for Android Linux.; ; UNSUPPORTED: system-windows, target={{.*linux.*}} && !target={{.*android.*}}; ; This test is expected to fail when targeting PowerPC or running on Darwin.; ; XFAIL: target=powerpc{{.*}}, system-darwin. Tips for writing constraints; ----------------------------. **``REQUIRES`` and ``UNSUPPORTED``**. These are logical inverses. In principle, ``UNSUPPORTED`` isn't absolutely; necessary (the logical negation could be used with ``REQUIRES`` to get; exactly the same effect), but it can make these clauses easier to read and; understand. Generally, people use ``REQUIRES`` to state things that the test; depends on to operate correctly, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:21186,test,test,21186,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"s explicitly stated. Regardless of the tier, all code must follow the existing policies on quality,; reviews, style, etc. Core Tier; =========. The core tier encompasses all of the code in the main repository that is; in production, is actively tested and released in a regular schedule, including; core LLVM APIs and infrastructure, front/middle/back-ends, run-time libraries,; tools, etc. It is the responsibility of **every** LLVM developer to care for the core tier; regardless of where their work is applied to. What is covered; ---------------. The core tier is composed of:; * Core code (``llvm-project``) present in official releases and buildbots:; compiler, debugger, linker, libraries, etc, including infrastructure code; (table-gen, lit, file-check, unit-tests, etc).; * Build infrastructure that creates releases and buildbots (CMake, scripts).; * `Phabricator <https://github.com/llvm/phabricator>`_ and; `buildbot <https://github.com/llvm/llvm-zorg>`_ infrastructure.; * The `test-suite <https://github.com/llvm/llvm-test-suite>`_. Requirements; ------------. Code in this tier must:; * Keep official buildbots green, with warnings on breakages being emailed to; all affected developers. Those must be fixed as soon as possible or patches; must be reverted, as per review policy.; * Bit-rot of a component in the core tier will result in that component being; downgraded to the peripheral tier or being removed. Sub-communities can; avoid this by fixing all raised issues in a timely manner. Peripheral Tier; ===============. The peripheral tier encompass the parts of LLVM that cater to a specific; sub-community and which don't usually affect the core components directly. This includes experimental back-ends, disabled-by-default options and; alternative paths (work-in-progress replacements) in the same repository, as; well as separate efforts to integrate LLVM development with local practices. It is the responsibility of each sub-community to care about their own parts; and th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:2620,test,test-suite,2620,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['test-suite']
Testability,"s for OpenCL; ------------------------. There is ongoing work to support C++ standard libraries from `LLVM's libcxx; <https://libcxx.llvm.org/>`_ in OpenCL kernel code using C++ for OpenCL mode. It is currently possible to include `type_traits` from C++17 in the kernel; sources when the following clang extensions are enabled; ``__cl_clang_function_pointers`` and ``__cl_clang_variadic_functions``,; see :doc:`LanguageExtensions` for more details. The use of non-conformant; features enabled by the extensions does not expose non-conformant behavior; beyond the compilation i.e. does not get generated in IR or binary.; The extension only appear in metaprogramming; mechanism to identify or verify the properties of types. This allows to provide; the full C++ functionality without a loss of portability. To avoid unsafe use; of the extensions it is recommended that the extensions are disabled directly; after the header include. **Example of Use**:. The example of kernel code with `type_traits` is illustrated here. .. code-block:: c++. #pragma OPENCL EXTENSION __cl_clang_function_pointers : enable; #pragma OPENCL EXTENSION __cl_clang_variadic_functions : enable; #include <type_traits>; #pragma OPENCL EXTENSION __cl_clang_function_pointers : disable; #pragma OPENCL EXTENSION __cl_clang_variadic_functions : disable. using sint_type = std::make_signed<unsigned int>::type;. __kernel void foo() {; static_assert(!std::is_same<sint_type, unsigned int>::value);; }. The possible clang invocation to compile the example is as follows:. .. code-block:: console. $ clang -I<path to libcxx checkout or installation>/include test.clcpp. Note that `type_traits` is a header only library and therefore no extra; linking step against the standard libraries is required. See full example; in `Compiler Explorer <https://godbolt.org/z/5WbnTfb65>`_. More OpenCL specific C++ library implementations built on top of libcxx; are available in `libclcxx <https://github.com/KhronosGroup/libclcxx>`_; project.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:24427,test,test,24427,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['test'],['test']
Testability,"s for core,; other projects have targets like check-lldb. Making changes; ==============. Edit; ----. We need to find the file containing the error message. .. code:: console. $ git grep ""all paths through this function"" ..; ../clang/include/clang/Basic/DiagnosticSemaKinds.td: ""all paths through this function will call itself"">,. The string that appears in DiagnosticSemaKinds.td is the one that is; printed by Clang. \*.td files define tables - in this case it's a list; of warnings and errors clang can emit and their messages. Let's update; the message in your favorite editor:. .. code:: console. $ vi ../clang/include/clang/Basic/DiagnosticSemaKinds.td. Find the message (it should be under; ``warn_infinite_recursive_function``). Change the message to ""in order to; understand recursion, you must first understand recursion"". Test again; ----------. To verify our change, we can build clang and manually check that it; works. .. code:: console. $ ninja clang; $ bin/clang -Wall ~/test.cc; /path/test.cc:1:124: warning: in order to understand recursion, you must; first understand recursion [-Winfinite-recursion]. We should also run the tests to make sure we didn't break something. .. code:: console. $ ninja check-clang. Notice that it is much faster to build this time, but the tests take; just as long to run. Ninja doesn't know which tests might be affected,; so it runs them all. .. code:: console. ********************; Testing Time: 408.84s; ********************; Failing Tests (1):; Clang :: SemaCXX/warn-infinite-recursion.cpp. Well, that makes sense… and the test output suggests it's looking for; the old string ""call itself"" and finding our new message instead.; Note that more tests may fail in a similar way as new tests are; added time to time. Let's fix it by updating the expectation in the test. .. code:: console. $ vi ../clang/test/SemaCXX/warn-infinite-recursion.cpp. Everywhere we see `// expected-warning{{call itself}}` (or something similar; from the original warning",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst:6239,test,test,6239,interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MyFirstTypoFix.rst,1,['test'],['test']
Testability,"s free software, covered by the GNU General Public License, and you are; welcome to change it and/or distribute copies of it under certain conditions.; Type ""show copying"" to see the conditions.; There is absolutely no warranty for GDB. Type ""show warranty"" for details.; This GDB was configured as ""sparc-sun-solaris2.6""...; (gdb). Note that :program:`opt` has a lot of debugging information in it, so it takes; time to load. Be patient. Since we cannot set a breakpoint in our pass yet; (the shared object isn't loaded until runtime), we must execute the process,; and have it stop before it invokes our pass, but after it has loaded the shared; object. The most foolproof way of doing this is to set a breakpoint in; ``PassManager::run`` and then run the process with the arguments you want:. .. code-block:: console. $ (gdb) break llvm::PassManager::run; Breakpoint 1 at 0x2413bc: file Pass.cpp, line 70.; (gdb) run test.bc -load $(LLVMTOP)/llvm/Debug+Asserts/lib/[libname].so -[passoption]; Starting program: opt test.bc -load $(LLVMTOP)/llvm/Debug+Asserts/lib/[libname].so -[passoption]; Breakpoint 1, PassManager::run (this=0xffbef174, M=@0x70b298) at Pass.cpp:70; 70 bool PassManager::run(Module &M) { return PM->run(M); }; (gdb). Once the :program:`opt` stops in the ``PassManager::run`` method you are now; free to set breakpoints in your pass so that you can trace through execution or; do other standard debugging stuff. Miscellaneous Problems; ^^^^^^^^^^^^^^^^^^^^^^. Once you have the basics down, there are a couple of problems that GDB has,; some with solutions, some without. * Inline functions have bogus stack information. In general, GDB does a pretty; good job getting stack traces and stepping through inline functions. When a; pass is dynamically loaded however, it somehow completely loses this; capability. The only solution I know of is to de-inline a function (move it; from the body of a class to a ``.cpp`` file). * Restarting the program breaks breakpoints. After followi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst:53796,test,test,53796,interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,1,['test'],['test']
Testability,"s higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {; int x, y;; S(int xx, int yy) : x(xx), y(yy) {}; S(int xx) {; S(xx, 0); // warn; }; };. #include <exception>. void test() {; std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:23818,test,test,23818,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"s language refer to the C++ for OpenCL; Programming Language Documentation available; in `the latest build; <https://www.khronos.org/opencl/assets/CXX_for_OpenCL.html>`_; or in `the official release; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. To enable the C++ for OpenCL mode, pass one of following command line options when; compiling ``.clcpp`` file:. - C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc++1.0``,; ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc++1.0`` or; ``-std=CLC++1.0``. - C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``,; ``-std=clc++2021``, ``-std=CLC++2021``. Example of use:; .. code-block:: c++. template<class T> T add( T x, T y ); {; return x + y;; }. __kernel void test( __global float* a, __global float* b); {; auto index = get_global_id(0);; a[index] = add(b[index], b[index+1]);; }. .. code-block:: console. clang -cl-std=clc++1.0 test.clcpp; clang -cl-std=clc++ -c --target=spirv64 test.cl. By default, files with ``.clcpp`` extension are compiled with the C++ for; OpenCL 1.0 mode. .. code-block:: console. clang test.clcpp. For backward compatibility files with ``.cl`` extensions can also be compiled; in C++ for OpenCL mode but the desirable language mode must be activated with; a flag. .. code-block:: console. clang -cl-std=clc++ test.cl. Support of C++ for OpenCL 2021 is currently in experimental phase, refer to; :doc:`OpenCLSupport` for more details. C++ for OpenCL kernel sources can also be compiled online in drivers supporting; `cl_ext_cxx_for_opencl; <https://www.khronos.org/registry/OpenCL/extensions/ext/cl_ext_cxx_for_opencl.html>`_; extension. Constructing and destroying global objects; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Global objects with non-trivial constructors require the constructors to be run; before the first kernel using the global objects is executed. Similarly global; objects with non-trivial destructors require de",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:153695,test,test,153695,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"s likely to add support; for newer versions of an architecture and the architecture is known to be; designed for backwards compatibility then it should be possible to express; compatibility for such architecture versions in the multilib configuration. Not GNU spec files; ------------------. The GNU spec files standard is large and complex and there's little desire to; import that complexity to LLVM. It's also heavily oriented towards processing; command line argument strings which is hard to do correctly, hence the large; amount of logic dedicated to that task in the Clang driver. While compatibility; with GNU would bring benefits, the cost in this case is deemed too high. Avoid re-inventing feature detection in the configuration; ---------------------------------------------------------. A large amount of logic in the Clang driver is dedicated to inferring which; architectural features are available based on the given command line options.; It is neither desirable nor practical to repeat such logic in each multilib; configuration. Instead the configuration should be able to benefit from the; heavy lifting Clang already does to detect features. Low maintenance; ---------------. Multilib is a relatively small feature in the scheme of things so supporting it; should accordingly take little time. Where possible this should be achieved by; implementing it in terms of existing features in the LLVM codebase. Minimal additional API surface; ------------------------------. The greater the API surface, the greater the difficulty of keeping it stable.; Where possible the additional API surface should be kept small by defining it; in relation to existing APIs. An example of this is keeping a simple; relationship between flag names and command line options where possible.; Since the command line options are part of a stable API they are unlikely; to change, and therefore the flag names get the same stability. Low compile-time overhead; -------------------------. If the process o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst:12354,log,logic,12354,interpreter/llvm-project/clang/docs/Multilib.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Multilib.rst,1,['log'],['logic']
Testability,"s management is handled by volumes. These build; additional optimization structures upon geometry closure. In order to; have navigation features properly working one has to follow some rules; for building a valid geometry. - The daughter volume(s) must not extrude the mother shape. They are; allowed however to have a common boundaries.; - The volumes positioned in the same container must not overlap with; each other. They may touch on one boundaries or shape vertex. The daughter nodes of a volume can be also removed or replaced with; other nodes:. ~~~{.cpp}; void RemoveNode(TGeoNode* node); TGeoNode*ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0,; TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); ~~~. The last method allows replacing an existing daughter of a volume with; another one. Providing only the node to be replaced will just create a; new volume for the node but having exactly the same parameters as the; old one. This helps in case of divisions for decoupling a node from the; logical hierarchy so getting new content/properties. For non-divided; volumes, one can change the shape and/or the position of the daughter. \anchor GP01bd; #### Virtual Containers and Assemblies of Volumes. Virtual containers are volumes that do not represent real objects, but; they are needed for grouping and positioning together other volumes.; Such grouping helps not only geometry creation, but also optimizes; tracking performance; therefore, it is highly recommended. Virtual; volumes need to inherit material/medium properties from the volume they; are placed into in order to be ""invisible"" at tracking time. Let us suppose that we need to group together two volumes `A` and `B`; into a structure and position this into several other volumes `D,E,` and; `F`. What we need to do is to create a virtual container volume `C`; holding `A` and `B`, then position `C` in the other volumes. Note that `C` is a volume having a determined medium. Since it is not a; real volume, we need to ma",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:29879,log,logical,29879,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"s methods. The subsequent divisions are the; methods other parent classes in case of multiple inheritance. For; example, see the `TPaveText::title context; menu.` A **`TPaveText`** inherits from **`TAttLine`**, which has the; method `SetLineAttributes()`. #### Adding Context Menus for a Class. For a method to appear in the context menu of the object it has to be; marked by `// *MENU*` in the header file. Below is the line from; `TAttLine.h` that adds the `SetLineAttribute` method to the context; menu. ``` {.cpp}; virtual void SetLineAttributes(); // *MENU*; ```. Nothing else is needed, since Cling knows the classes and their methods.; It takes advantage of that to create the context menu on the fly when; the object is clicking on. If you click on an axis, ROOT will ask the; interpreter what are the methods of the **`TAxis`** and which ones are; set for being displayed in a context menu. Now, how does the interpreter know this? Remember, when you build a; class that you want to use in the ROOT environment, you use `rootcling`; that builds the so-called stub functions and the dictionary. These; functions and the dictionary contain the knowledge of the used classes.; To do this, `rootcling` parses all the header files. ROOT has defined; some special syntax to inform Cling of certain things, this is done in; the comments so that the code still compiles with a C++ compiler. For example, you have a class with a `Draw()` method, which will display; itself. You would like a context menu to appear when on clicks on the; image of an object of this class. The recipe is the following:. - The class has to contain the `ClassDef/ClassImp` macros. - For each method you want to appear in the context menu, put a; comment after the declaration containing `*MENU*` or `*TOGGLE*`; depending on the behavior you expect. One usually uses Set methods; (setters). The `*TOGGLE*` comment is used to toggle a `boolean` data; field. In that case, it is safe to call the data field `fMyBool`; where `",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:6736,stub,stub,6736,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['stub'],['stub']
Testability,"s must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:22281,test,test,22281,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"s not break anything. The PR description describes (and in case of multiple commits, summarizes) the change in more detail.; Again, try to describe the **why** (and in this case, to a lesser extent the **what**), rather than the **how**. If your PR is related to an open [issue](https://github.com/root-project/root/issues), make sure to link it.; This will be done automatically if you add; [closing keywords](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue); to the PR description. Once a PR is created, a member of the ROOT team will review it as quickly as possible. If you are familiar with the; ROOT community, it may be beneficial to add a suggested reviewer to the PR in order to get quicker attention.; Please ping people :wave: should you not get timely feedback, for instance with `@root-project/core ping!`. ## Tests. As you contribute code, this code will likely fix an issue or add a feature.; Whatever it is: this requires you to add a new test, or to extend an existing test. Depending on the size and complexity; of this test, it exists either in the `test/` subdirectory of each part of ROOT (see for instance; [`tree/dataframe/test`](https://github.com/root-project/root/tree/master/tree/dataframe/test)), or in; [roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on; [Google Test](https://github.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:5530,test,test,5530,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,2,['test'],['test']
Testability,"s not cause; sufficient overall improvement in code quality. For this reason,; ``llvm.assume`` should not be used to document basic mathematical invariants; that the optimizer can otherwise deduce or facts that are of little use to the; optimizer. .. _int_ssa_copy:. '``llvm.ssa.copy``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare type @llvm.ssa.copy(type returned %operand) memory(none). Arguments:; """""""""""""""""""". The first argument is an operand which is used as the returned value. Overview:; """""""""""""""""""". The ``llvm.ssa.copy`` intrinsic can be used to attach information to; operations by copying them and giving them new names. For example,; the PredicateInfo utility uses it to build Extended SSA form, and; attach various forms of information to operands that dominate specific; uses. It is not meant for general use, only for building temporary; renaming forms that require value splits at certain points. .. _type.test:. '``llvm.type.test``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.type.test(ptr %ptr, metadata %type) nounwind memory(none). Arguments:; """""""""""""""""""". The first argument is a pointer to be tested. The second argument is a; metadata object representing a :doc:`type identifier <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.test`` intrinsic tests whether the given pointer is associated; with the given type identifier. .. _type.checked.load:. '``llvm.type.checked.load``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare {ptr, i1} @llvm.type.checked.load(ptr %ptr, i32 %offset, metadata %type) nounwind memory(argmem: read). Arguments:; """""""""""""""""""". The first argument is a pointer from which to load a function pointer. The; second argument is the byte offset from which to load the function pointer. The; third argument is a metadata object representing a :doc:`type identifier; <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.checked.load`` intrinsic sa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:937211,test,test,937211,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"s now consistent with other similar TMath functions. Now in the CINT dictionary contains also the instantiations for both cases of Long64_t and Int_t for the size (and index array) types.; . Fixed a bug in the ROOT::Math::landau_pdf function. Now it evaluates to the correct normalized distribution when the scale factor is different than 1.; TVirtualFitter: move TVirtualFitter from base to mathcore. Setting the minimizer parameters is done via the new class ROOT::Math::MinimizerOptions. Fixed also a bug in the TVirtualFitter destructor, which was preventing the deletion of the static instance and causing in same cases memory leaks.; ROOT::Math::MinimizerOptions: new class keeping the minimizer control parameters, minimizer name and algorithms. Static values of the parameter exist and can be set and retrieved via corresponding static methods.; Fitting Classes: improve in general all classes in view of using them in the histogram and graph fitting routines. Few bugs have been as well fixed (see the cvs log for details). The fitter class, ROOT::Fit::Fitter is used now to implement the fit functionality of the Hist library (i.e. TH1::Fit, TGraph::Fit/; ; The Fitter class has been changed to retain a pointer to the Minimizer and Objective function of the last fit. The objective function depends on a reference to the data and the model function, therefore the objective function pointer is valid as far the data and the model function are maintained alive.; ; The library provides the implementation of standard objective function like the Chi2 function, the Poisson likelihood function (for binned likelihood fits) and the loh likelihood function (for unbinned fits). These standard objective functions can be created with or without gradient functionality. In the first case the minimization will be performed using the gradient provided by the function. These functions can also be used in specialized fitting methods like Fumili or the GSL non-linear least square.; . MathCore. Fix",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html:1645,log,log,1645,math/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v522/index.html,1,['log'],['log']
Testability,"s of backward; compatibility — chose to return nil and log an error message in a method; with a non-null return type when the client violated a documented precondition; rather than check the precondition with NSAssert(). In these cases, you; can suppress the analyzer warning with a cast:. return (id _Nonnull)nil;. Note that this cast does not affect code generation. Q: The analyzer assumes that a loop body is never entered. How can I tell it that the loop body will be entered at least once?. In the contrived example above, the analyzer has detected that the body of; the loop is never entered for the case where length <= 0. In this; particular example, you may know that the loop will always be entered because; the input parameter length will be greater than zero in all calls to this; function. You can teach the analyzer facts about your code as well as document; it by using assertions. By adding assert(length > 0) in the beginning; of the function, you tell the analyzer that your code is never expecting a zero; or a negative value, so it won't need to test the correctness of those paths. int foo(int length) {; int x = 0;; assert(length > 0);; for (int i = 0; i < length; i++); x += 1;; return length/x;; }. Q: How can I suppress a specific analyzer warning?; When you encounter an analyzer bug/false positive, check if it's one of the; issues discussed above or if the analyzer; annotations can; resolve the issue by helping the static analyzer understand the code better.; Second, please report it to help us improve; user experience.; Sometimes there's really no ""good"" way to eliminate the issue. In such cases; you can ""silence"" it directly by annotating the problematic line of code with; the help of Clang attribute 'suppress':. int foo() {; int *x = nullptr;; ...; [[clang::suppress]] {; // all warnings in this scope are suppressed; int y = *x;; }. // null pointer dereference warning suppressed on the next line; [[clang::suppress]]; return *x; }. int bar(bool coin_flip) {;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:7724,assert,assert,7724,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,2,"['assert', 'test']","['assert', 'test']"
Testability,"s of the multiclass, then a record by; that name must have been instantiated earlier; in the source file. If *name* does reference; a template argument, then the lookup is delayed until ``defm`` statements; instantiating the multiclass (or later, if the defm occurs in another; multiclass and template arguments of the inner multiclass that are; referenced by *name* are substituted by values that themselves contain; references to template arguments of the outer multiclass). If the type of *a* does not match *type*, TableGen raises an error. ``!con(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator concatenates the DAG nodes *a*, *b*, etc. Their operations; must equal. ``!con((op a1:$name1, a2:$name2), (op b1:$name3))``. results in the DAG node ``(op a1:$name1, a2:$name2, b1:$name3)``. ``!cond(``\ *cond1* ``:`` *val1*\ ``,`` *cond2* ``:`` *val2*\ ``, ...,`` *condn* ``:`` *valn*\ ``)``; This operator tests *cond1* and returns *val1* if the result is true.; If false, the operator tests *cond2* and returns *val2* if the result is; true. And so forth. An error is reported if no conditions are true. This example produces the sign word for an integer::. !cond(!lt(x, 0) : ""negative"", !eq(x, 0) : ""zero"", true : ""positive""). ``!dag(``\ *op*\ ``,`` *arguments*\ ``,`` *names*\ ``)``; This operator creates a DAG node with the given operator and; arguments. The *arguments* and *names* arguments must be lists; of equal length or uninitialized (``?``). The *names* argument; must be of type ``list<string>``. Due to limitations of the type system, *arguments* must be a list of items; of a common type. In practice, this means that they should either have the; same type or be records with a common parent class. Mixing ``dag`` and; non-``dag`` items is not possible. However, ``?`` can be used. Example: ``!dag(op, [a1, a2, ?], [""name1"", ""name2"", ""name3""])`` results in; ``(op a1-value:$name1, a2-value:$name2, ?:$name3)``. ``!div(``\ *a*\ ``,`` *b*\ ``)``; This operator performs signed division of",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:61251,test,tests,61251,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['test'],['tests']
Testability,"s only needed by Ninja; if(CMAKE_GENERATOR MATCHES Ninja); set(CLAD_BYPRODUCTS; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladPlugin${CMAKE_STATIC_LIBRARY_SUFFIX}; ${_CLAD_LIBRARY_PATH}/${CMAKE_STATIC_LIBRARY_PREFIX}cladDifferentiator${CMAKE_STATIC_LIBRARY_SUFFIX}; ); endif(). if(APPLE); set(_clad_extra_cmake_args -DCMAKE_OSX_SYSROOT=${CMAKE_OSX_SYSROOT}); endif(). if (CMAKE_CXX_STANDARD); list(APPEND _clad_extra_cmake_args -DCMAKE_CXX_STANDARD=${CMAKE_CXX_STANDARD}); endif(CMAKE_CXX_STANDARD). if (Clang_DIR); list(APPEND _clad_extra_cmake_args -DClang_DIR=${Clang_DIR} -DClang_CONFIG_EXTRA_PATH_HINTS=${Clang_Config_ExtraPathHints}); endif(Clang_DIR). if (LLVM_FORCE_USE_OLD_TOOLCHAIN); list(APPEND _clad_extra_cmake_args -DLLVM_FORCE_USE_OLD_TOOLCHAIN=${LLVM_FORCE_USE_OLD_TOOLCHAIN}); endif(LLVM_FORCE_USE_OLD_TOOLCHAIN). list(APPEND _clad_extra_cmake_args -DCLAD_BUILD_STATIC_ONLY=ON). # Wrap download, configure and build steps in a script to log output; set(_clad_extra_settings; LOG_DOWNLOAD ON; LOG_CONFIGURE ON; LOG_BUILD ON; LOG_INSTALL ON; LOG_OUTPUT_ON_FAILURE ON; ). # If the CLAD_SOURCE_DIR variable is defined in the CMake configuration, we're; # skipping the download of the repository and use the passed directory.; if (DEFINED CLAD_SOURCE_DIR); list(APPEND _clad_extra_settings DOWNLOAD_COMMAND """"); list(APPEND _clad_extra_settings SOURCE_DIR ${CLAD_SOURCE_DIR}); endif(). #list(APPEND _clad_patches_list ""patch1.patch"" ""patch2.patch""); #set(_clad_patch_command; # ${CMAKE_COMMAND} -E copy_directory; # ${CMAKE_SOURCE_DIR}/interpreter/cling/tools/plugins/clad/patches <SOURCE_DIR>; # && git checkout <SOURCE_DIR>; # && git apply --ignore-space-change --ignore-whitespace ${_clad_patches_list}; # ). ExternalProject_Add(; clad; GIT_REPOSITORY https://github.com/vgvassilev/clad.git; GIT_TAG v1.7; UPDATE_COMMAND """"; PATCH_COMMAND ${_clad_patch_command}; CMAKE_ARGS -G ${CMAKE_GENERATOR}; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt:2192,log,log,2192,interpreter/cling/tools/plugins/clad/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/tools/plugins/clad/CMakeLists.txt,1,['log'],['log']
Testability,"s only used as an example and does not pose any strict; requirements. For example, the value might dominate the current block; but we can still insert a PHI (as we do with LCSSA PHI nodes) *and*; use the original value afterwards (in which case the two live ranges overlap,; although in LCSSA (the whole point is that) we never do that). .. [#def-use-chain] A property of SSA is that there exists a def-use chain; for each definition, which is a list of all the uses of this definition.; LLVM implements this property by keeping a list of all the uses of a Value; in an internal data structure. ""More Canonical"" Loops; ======================. .. _loop-terminology-loop-rotate:. Rotated Loops; -------------. Loops are rotated by the LoopRotate (:ref:`loop-rotate <passes-loop-rotate>`); pass, which converts loops into do/while style loops and is; implemented in; `LoopRotation.h <https://llvm.org/doxygen/LoopRotation_8h_source.html>`_. Example:. .. code-block:: C. void test(int n) {; for (int i = 0; i < n; i += 1); // Loop body; }. is transformed to:. .. code-block:: C. void test(int n) {; int i = 0;; do {; // Loop body; i += 1;; } while (i < n);; }. **Warning**: This transformation is valid only if the compiler; can prove that the loop body will be executed at least once. Otherwise,; it has to insert a guard which will test it at runtime. In the example; above, that would be:. .. code-block:: C. void test(int n) {; int i = 0;; if (n > 0) {; do {; // Loop body; i += 1;; } while (i < n);; }; }. It's important to understand the effect of loop rotation; at the LLVM IR level. We follow with the previous examples; in LLVM IR while also providing a graphical representation; of the control-flow graphs (CFG). You can get the same graphical; results by utilizing the :ref:`view-cfg <passes-view-cfg>` pass. The initial **for** loop could be translated to:. .. code-block:: none. define void @test(i32 %n) {; entry:; br label %for.header. for.header:; %i = phi i32 [ 0, %entry ], [ %i.next, %l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst:18852,test,test,18852,interpreter/llvm-project/llvm/docs/LoopTerminology.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LoopTerminology.rst,1,['test'],['test']
Testability,"s still missing are:. * streamcluster; * particlefilter; * nw; * nn; * myocyte; * mummergpu; * lud; * leukocyte; * lavaMD; * kmeans; * hotspot3D; * heartwall; * cfd; * bfs; * b+tree. vecmathlib tests harness; ------------------------; https://bitbucket.org/eschnett/vecmathlib/wiki/Home. PARSEC; ------; http://parsec.cs.princeton.edu/. Graph500 reference implementations; ----------------------------------; https://github.com/graph500/graph500/tree/v2-spec. NAS Parallel Benchmarks; -----------------------; https://www.nas.nasa.gov/publications/npb.html. The official benchmark is written in Fortran, but an unofficial; C-translation is available as well:; https://github.com/benchmark-subsetting/NPB3.0-omp-C. DARPA HPCS SSCA#2 C/OpenMP reference implementation; ---------------------------------------------------; http://www.highproductivity.org/SSCABmks.htm. This web site does not exist any more, but there seems to be a copy of; some of the benchmarks; https://github.com/gtcasl/hpc-benchmarks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polymage-benchmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Kripke; * Quicksilver; * PENNANT; * Big Data Analytic Suite; * Deep Learning Suite;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:3811,benchmark,benchmarks,3811,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmarks']
Testability,"s they are needed. Types have a couple of non-obvious; features: 1) they do not capture type qualifiers like ``const`` or ``volatile``; (see :ref:`QualType <QualType>`), and 2) they implicitly capture typedef; information. Once created, types are immutable (unlike decls). Typedefs in C make semantic analysis a bit more complex than it would be without; them. The issue is that we want to capture typedef information and represent it; in the AST perfectly, but the semantics of operations need to ""see through""; typedefs. For example, consider this code:. .. code-block:: c++. void func() {; typedef int foo;; foo X, *Y;; typedef foo *bar;; bar Z;; *X; // error; **Y; // error; **Z; // error; }. The code above is illegal, and thus we expect there to be diagnostics emitted; on the annotated lines. In this example, we expect to get:. .. code-block:: text. test.c:6:1: error: indirection requires pointer operand ('foo' invalid); *X; // error; ^~; test.c:7:1: error: indirection requires pointer operand ('foo' invalid); **Y; // error; ^~~; test.c:8:1: error: indirection requires pointer operand ('foo' invalid); **Z; // error; ^~~. While this example is somewhat silly, it illustrates the point: we want to; retain typedef information where possible, so that we can emit errors about; ""``std::string``"" instead of ""``std::basic_string<char, std:...``"". Doing this; requires properly keeping typedef information (for example, the type of ``X``; is ""``foo``"", not ""``int``""), and requires properly propagating it through the; various operators (for example, the type of ``*Y`` is ""``foo``"", not; ""``int``""). In order to retain this information, the type of these expressions; is an instance of the ``TypedefType`` class, which indicates that the type of; these expressions is a typedef for ""``foo``"". Representing types like this is great for diagnostics, because the; user-specified type is always immediately available. There are two problems; with this: first, various semantic checks need to make",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:62346,test,test,62346,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"s to preserve line numbers. If the extra files are large, the idiomatic place to put them is in a subdirectory ``Inputs``.; You can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, consider ``test/Linker/ident.ll``. The directory structure is; as follows::. test/; Linker/; ident.ll; Inputs/; ident.a.ll; ident.b.ll. For convenience, these are the contents:. .. code-block:: llvm. ;;;;; ident.ll:. ; RUN: llvm-link %S/Inputs/ident.a.ll %S/Inputs/ident.b.ll -S | FileCheck %s. ; Verify that multiple input llvm.ident metadata are linked together. ; CHECK-DAG: !llvm.ident = !{!0, !1, !2}; ; CHECK-DAG: ""Compiler V1""; ; CHECK-DAG: ""Compiler V2""; ; CHECK-DAG: ""Compiler V3"". ;;;;; Inputs/ident.a.ll:. !llvm.ident = !{!0, !1}; !0 = metadata !{metadata !""Compiler V1""}; !1 = metadata !{metadata !""Compiler V2""}. ;;;;; Inputs/ident.b.ll:. !llvm.ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't; actually participate in the test besides holding the ``RUN:`` lines. .. note::. Some existing tests use ``RUN: true`` in extra files instead of just; putting the extra files in an ``Inputs/`` directory. This pattern is; deprecated. Fragile tests; -------------. It is easy to write a fragile test that would fail spuriously if the tool being; tested outputs a full path to the input file. For example, :program:`opt` by; default outputs a ``ModuleID``:. .. code-block:: console. $ cat example.ll; define i32 @main() nounwind {; ret i32 0; }. $ opt -S /path/to/example.ll; ; ModuleID = '/path/to/example.ll'. define i32 @main() nounwind {; ret i32 0; }. ``ModuleID`` can unexpectedly match against ``CHECK`` lines. For example:. .. code-block:: llvm. ; RUN: opt -S %s | FileCheck. define i32 @main() nounwind {; ; CHECK-NOT: load; ret i32 0; }. This test will fail if placed into a ``download`` directory. To make your tests robust, always use ``opt ... < %s`` in the RUN line.; :program:`opt` does not output a ``M",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:16203,test,test,16203,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"s to store current canvas state; 2. Support ""item=img:file.png"" parameter to insert images in existing layout (#151); 3. Support TTree drawing into TGraph (#153), thanks @cozzyd; 4. Let configure ""&toolbar=right"" in URL to change position of tool buttons; 5. Let configure ""&divsize=500x400"" in URL of size of main div element (default - full browser); 6. Implement ""optstat1001"" and ""optfit101"" draw options for histograms; 7. Remove ""autocol"" options - standard ""plc"" should be used instead; 8. Provide drawing of artificial ""$legend"" item - it creates TLegend for all primitives in pad; Can be used when several histograms or several graphs superimposed; 9. Let configure ""&toolbar=vert"" in URL to change orientation of tool buttons; 10. Improve markers and error bars drawing for TH1/TProfile. ## Changes in 5.4.3; 1. Fix - draw functions also when histogram ""same"" option used (#159); 2. Fix - when draw histogram as markers improve optimization algorithm; 3. Fix - correct histogram Y-axis range selection in logarithmic scale; 4. Fix - for TH2 draw options allow combination ""colztext"" (#162); 5. Fix - PNG file generation with 3D drawings inside. ## Changes in 5.4.2; 1. Fix - take into account extra quotes in multipart http reply (#157); 2. Fix - display of labels on X axis with TProfile; 3. Fix - support time display in TMultiGraph; 4. Fix - correctly parse ""optstat"" and ""optfit"" in URL; 5. Fix - correctly update TGraph drawing when X range is changing; 6. Fix - return only TF1/TF2 object when searching function (#158). ## Changes in 5.4.1; 1. Fix - monitoring mode in draw.htm page; 2. Fix - zooming in colz palette; 3. Fix - support both 9.x and 10.x jsdom version in Node.js (#149); 4. Fix - draw axis main line with appropriate attributes (#150); 5. Fix - use axis color when drawing grids lines (#150); 6. Fix - when set pad logx/logy, reset existing user ranges in pad; 7. Fix - avoid too deep calling stack when drawing many graphs or histos (#154); 8. Fix - correctly (re)dra",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:34594,log,logarithmic,34594,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['logarithmic']
Testability,"s to the end of Chapter 1 of Building a JIT. You now have a basic; but fully functioning JIT stack that you can use to take LLVM IR and make it; executable within the context of your JIT process. In the next chapter we'll; look at how to extend this JIT to produce better quality code, and in the; process take a deeper look at the ORC layer concept. `Next: Extending the KaleidoscopeJIT <BuildingAJIT2.html>`_. Full Code Listing; =================. Here is the complete code listing for our running example. To build this; example, use:. .. code-block:: bash. # Compile; clang++ -g toy.cpp `llvm-config --cxxflags --ldflags --system-libs --libs core orcjit native` -O3 -o toy; # Run; ./toy. Here is the code:. .. literalinclude:: ../../examples/Kaleidoscope/BuildingAJIT/Chapter1/KaleidoscopeJIT.h; :language: c++. .. [1] Actually we use a cut-down version of KaleidoscopeJIT that makes a; simplifying assumption: symbols cannot be re-defined. This will make it; impossible to re-define symbols in the REPL, but will make our symbol; lookup logic simpler. Re-introducing support for symbol redefinition is; left as an exercise for the reader. (The KaleidoscopeJIT.h used in the; original tutorials will be a helpful reference). .. [2] +-----------------------------+-----------------------------------------------+; | File | Reason for inclusion |; +=============================+===============================================+; | CompileUtils.h | Provides the SimpleCompiler class. |; +-----------------------------+-----------------------------------------------+; | Core.h | Core utilities such as ExecutionSession and |; | | JITDylib. |; +-----------------------------+-----------------------------------------------+; | ExecutionUtils.h | Provides the DynamicLibrarySearchGenerator |; | | class. |; +-----------------------------+-----------------------------------------------+; | IRCompileLayer.h | Provides the IRCompileLayer class. |; +-----------------------------+-----------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT1.rst:13484,log,logic,13484,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT1.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT1.rst,1,['log'],['logic']
Testability,"s to the tests, so it is easier to see the effect of the patch.; Remove TODO/FIXME comments added in the previous step if a problem is solved. Baseline tests (no-functional-change or NFC patch) may be pushed to main; without pre-commit review if you have commit access. Best practices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unless necessary. For; example, do not use patterns like ``br i1 undef``, which are likely to break; as a result of future optimizations.; - Minimize tests by removing unnecessary instructions, metadata, attributes,; etc. Tools like ``llvm-reduce`` can help automate this.; - Outside PhaseOrdering tests, only run a minimal set of passes. For example,; prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``.; - Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they may; require renumbering on future test modifications. These can be removed by; running the test through ``opt -S -passes=instnamer``.; - Try to give values (including variables, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ...; ;--- b.ll; ... The parts are separated by the regex ``^(.|//)--- <part>``. If you want to test relative line numbers like `",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:14111,test,tests,14111,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"s tutorial-tmva-keras-RegressionKeras-py); set (tmva-keras-ApplicationClassificationKeras-depends tutorial-tmva-keras-ClassificationKeras-py); endif(). #--List long-running tutorials to label them as ""longtest""; set (long_running; dataframe/df10[2-7]*; multicore/mp103*); file(GLOB long_running RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${long_running}); #--List multithreaded tutorials to run them serially; set(NProcessors 4); set (multithreaded_all_cores; dataframe/df10[2-7]*; rcanvas/df10*; ); set (multithreaded; ${multithreaded_all_cores}; multicore/mp103*; tmva/TMVAMulticlass.C; tmva/TMVA_CNN_Classification.C; tmva/TMVA_Higgs_Classification.C; tmva/TMVA_RNN_Classification.C; tmva/TMVA_CNN_Classification.py; tmva/TMVA_Higgs_Classification.py; tmva/TMVA_RNN_Classification.py; ); file(GLOB multithreaded_all_cores RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded_all_cores}); file(GLOB multithreaded RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${multithreaded}). #---Loop over all tutorials and define the corresponding test---------. #---Define the primordial tutorials-----------------------------------; ROOT_ADD_TEST(tutorial-hsimple COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/hsimple.C; PASSRC 255 FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); if(ROOT_geom_FOUND); ROOT_ADD_TEST(tutorial-geom-geometry COMMAND ${ROOT_root_CMD} -b -l -n -q ${CMAKE_CURRENT_SOURCE_DIR}/geom/geometry.C; FAILREGEX ""Error in"" ""error:"" ""warning: Failed to call"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); endif(); # define Python GNN parsing tutorial needed to run before; if (PY_SONNET_FOUND AND PY_GRAPH_NETS_FOUND); ROOT_ADD_TEST(tutorial-tmva-TMVA_SOFIE_GNN_Parser COMMAND ${Python3_EXECUTABLE}; ${CMAKE_CURRENT_SOURCE_DIR}/tmva/TMVA_SOFIE_GNN_Parser.py; PASSRC 0 FAILREGEX ""Error in"" "": error:"" LABELS tutorial ENVIRONMENT ${TUTORIAL_ENV}); set (tmva-TMVA_SOFIE_GNN_Application-depends tutorial-tmva-TMVA_SOFIE_GNN_Parser); endif",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:22148,test,test,22148,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['test']
Testability,"s us use the ``MachineVerifier`` to enforce invariants; that are required beyond certain points of the pipeline. For example, a; function with the ``legalized`` property can have the ``MachineVerifier``; enforce that no illegal instructions occur. Similarly, a; ``regBankSelected`` function may not have virtual registers without a register; bank assigned. .. note::. For layering reasons, ``MachineVerifier`` isn't able to be the sole verifier; in GlobalISel. Currently some of the passes also perform verification while; we find a way to solve this problem. The main issue is that GlobalISel is a separate library, so we can't; directly reference it from CodeGen. Testing; -------. The ability to test GlobalISel is significantly improved over SelectionDAG.; SelectionDAG is something of a black box and there's a lot going on inside it.; This makes it difficult to write a test that reliably tests a particular aspect; of its behaviour. For comparison, see the following diagram:. .. image:: testing-pass-level.png. Each of the grey boxes indicates an opportunity to serialize the current state; and test the behaviour between two points in the pipeline. The current state; can be serialized using ``-stop-before`` or ``-stop-after`` and loaded using; ``-start-before``, ``-start-after``, and ``-run-pass``. We can also go further still, as many of GlobalISel's passes are readily unit; testable:. .. image:: testing-unit-level.png. It's possible to create an imaginary target such as in `LegalizerHelperTest.cpp <https://github.com/llvm/llvm-project/blob/93b29d3882baf7df42e4e9bc26b977b00373ef56/llvm/unittests/CodeGen/GlobalISel/LegalizerHelperTest.cpp#L28-L57>`_; and perform a single step of the algorithm and check the result. The MIR and; FileCheck directives can be embedded using strings so you still have access to; the convenience available in llvm-lit. Debugging; ---------. One debugging technique that's proven particularly valuable is to use the; BlockExtractor to extract basic bloc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst:4213,test,testing-pass-level,4213,interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GlobalISel/Pipeline.rst,1,['test'],['testing-pass-level']
Testability,"s used in; your code), it should work for AD support efforts. Please view Clad; documentation for more details. ---. ## Appendix A - What could go wrong (FAQs). ### Will my analyticalIntegral() function support AD?. Both scenarios are possible:. 1 - where `analyticalIntegral()` will be able to support AD. 2 - where `analyticalIntegral()` will *not* be able to support AD. This requires further research. ### What if my evaluate() function cannot support AD?. In some cases. the `evaluate()` function is written in a piece-wise format; (multiple evaluations based on multiple chunks of code). You can review the; `MathFuncs.h` file to find AD support for several piece-wise (`if code==1; {...} else if code==2 {...}` ) code snippets. However, there may still be some cases where AD support may not be possible; due to the way that `evaluate()` function works in that instance. ### What if my evaluate() function depends heavily on caching?. For simple caching, the caching logic can be separated from the; mathematical code that is being moved to `MathFuncs.h`, so that it can; retained in the original file. For more complicated scenarios, the `code` variable can be used to identify; use cases (parts of the mathematical code in `evaluate()`) that should be; supported, while other parts that are explicitly not be supported (e.g., using; `if code==1 {...} else if code==2 {...}`). ### Can classes using Numerical Integration support AD?. So far, no. This needs further exploration. Hint: classes using Numerical; Integration can be identified with the absence of the `analyticalIntegral()`; function. ### Why is my code falling back to Numeric Differentiation?. If you call in to an external Math library, and you use a function that has a; customized variant with an already defined custom derivative, then you may see; a warning like ""falling back to Numeric Differentiation"". In most such cases,; your derivative should still work, since Numeric Differentiation is already; well-tested in Clad",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:26790,log,logic,26790,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['logic']
Testability,"s visible and no visible directive overrides it.; * A set of macro directives is *consistent* if it consists of only ``#undef`` directives, or if all ``#define`` directives in the set define the macro name to the same sequence of tokens (following the usual rules for macro redefinitions).; * If a macro name is used and the set of active directives is not consistent, the program is ill-formed. Otherwise, the (unique) meaning of the macro name is used. For example, suppose:. * ``<stdio.h>`` defines a macro ``getc`` (and exports its ``#define``); * ``<cstdio>`` imports the ``<stdio.h>`` module and undefines the macro (and exports its ``#undef``). The ``#undef`` overrides the ``#define``, and a source file that imports both modules *in any order* will not see ``getc`` defined as a macro. Module Map Language; ===================. .. warning::. The module map language is not currently guaranteed to be stable between major revisions of Clang. The module map language describes the mapping from header files to the; logical structure of modules. To enable support for using a library as; a module, one must write a ``module.modulemap`` file for that library. The; ``module.modulemap`` file is placed alongside the header files themselves,; and is written in the module map language described below. .. note::; For compatibility with previous releases, if a module map file named; ``module.modulemap`` is not found, Clang will also search for a file named; ``module.map``. This behavior is deprecated and we plan to eventually; remove it. As an example, the module map file for the C standard library might look a bit like this:. .. parsed-literal::. module std [system] [extern_c] {; module assert {; textual header ""assert.h""; header ""bits/assert-decls.h""; export *; }. module complex {; header ""complex.h""; export *; }. module ctype {; header ""ctype.h""; export *; }. module errno {; header ""errno.h""; header ""sys/errno.h""; export *; }. module fenv {; header ""fenv.h""; export *; }. // ...more ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:27400,log,logical,27400,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['log'],['logical']
Testability,"s where; possible, as they represent a source-level assignment, whose position in the; program should not be affected by optimization passes. **Deleting** a debug intrinsic: Nothing new to do. Just like for conventional; debug intrinsics, unless it is unreachable, it’s almost always incorrect to; delete a `llvm.dbg.assign` intrinsic. ### Lowering `llvm.dbg.assign` to MIR. To begin with only SelectionDAG ISel will be supported. `llvm.dbg.assign`; intrinsics are lowered to MIR `DBG_INSTR_REF` instructions. Before this happens; we need to decide where it is appropriate to use memory locations and where we; must use a non-memory location (or no location) for each variable. In order to; make those decisions we run a standard fixed-point dataflow analysis that makes; the choice at each instruction, iteratively joining the results for each block. ### TODO list. As this is an experimental work in progress so there are some items we still need; to tackle:. * As mentioned in test llvm/test/DebugInfo/assignment-tracking/X86/diamond-3.ll,; the analysis should treat escaping calls like untagged stores. * The system expects locals to be backed by a local alloca. This isn't always; the case - sometimes a pointer to storage is passed into a function; (e.g. sret, byval). We need to be able to handle those cases. See; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for examples. * `trackAssignments` doesn't yet work for variables that have their; `llvm.dbg.declare` location modified by a `DIExpression`, e.g. when the; address of the variable is itself stored in an `alloca` with the; `llvm.dbg.declare` using `DIExpression(DW_OP_deref)`. See `indirectReturn` in; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and in; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for an; example. * In order to solve the first bullet-point we need to be able to specify that a; me",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:9499,test,test,9499,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,2,['test'],['test']
Testability,"s"" ON); set(LLVM_UBSAN_FLAGS; ""-fsanitize=undefined -fno-sanitize=vptr,function -fno-sanitize-recover=all""; CACHE STRING; ""Compile flags set to enable UBSan. Only used if LLVM_USE_SANITIZER contains 'Undefined'.""); set(LLVM_LIB_FUZZING_ENGINE """" CACHE PATH; ""Path to fuzzing library for linking with fuzz targets""). option(LLVM_USE_SPLIT_DWARF; ""Use -gsplit-dwarf when compiling llvm and --gdb-index when linking."" OFF). # Define an option controlling whether we should build for 32-bit on 64-bit; # platforms, where supported.; if( CMAKE_SIZEOF_VOID_P EQUAL 8 AND NOT (WIN32 OR ${CMAKE_SYSTEM_NAME} MATCHES ""AIX"")); # TODO: support other platforms and toolchains.; option(LLVM_BUILD_32_BITS ""Build 32 bits executables and libraries."" OFF); endif(). # Define the default arguments to use with 'lit', and an option for the user to; # override.; set(LIT_ARGS_DEFAULT ""-sv""); if (MSVC_IDE OR XCODE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --no-progress-bar""); endif(); if(LLVM_INDIVIDUAL_TEST_COVERAGE); set(LIT_ARGS_DEFAULT ""${LIT_ARGS_DEFAULT} --per-test-coverage""); endif(); set(LLVM_LIT_ARGS ""${LIT_ARGS_DEFAULT}"" CACHE STRING ""Default options for lit""). # On Win32 hosts, provide an option to specify the path to the GnuWin32 tools.; if( WIN32 AND NOT CYGWIN ); set(LLVM_LIT_TOOLS_DIR """" CACHE PATH ""Path to GnuWin32 tools""); endif(); set(LLVM_NATIVE_TOOL_DIR """" CACHE PATH ""Path to a directory containing prebuilt matching native tools (such as llvm-tblgen)""). set(LLVM_INTEGRATED_CRT_ALLOC """" CACHE PATH ""Replace the Windows CRT allocator with any of {rpmalloc|mimalloc|snmalloc}. Only works with CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded.""); if(LLVM_INTEGRATED_CRT_ALLOC); if(NOT WIN32); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC is only supported on Windows.""); endif(); if(LLVM_USE_SANITIZER); message(FATAL_ERROR ""LLVM_INTEGRATED_CRT_ALLOC cannot be used along with LLVM_USE_SANITIZER!""); endif(); if(CMAKE_BUILD_TYPE AND uppercase_CMAKE_BUILD_TYPE STREQUAL ""DEBUG""); message(FATAL_ERR",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:29478,test,test-coverage,29478,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['test-coverage']
Testability,s(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CN,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2443,test,testConvBackpropagationCudnn,2443,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,2,['test'],['testConvBackpropagationCudnn']
Testability,"s); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILR",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9843,test,test-stresshistogram,9843,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-stresshistogram']
Testability,"s, double free, and use-after-free and offset problems; involving malloc. void test() {; int *p = malloc(1);; free(p);; free(p); // warn: attempt to free released memory; }. void test() {; int *p = malloc(sizeof(int));; free(p);; *p = 1; // warn: use after free; }. void test() {; int *p = malloc(1);; if (p); return; // warn: memory is never released; }. void test() {; int a[] = { 1 };; free(a); // warn: argument is not allocated by malloc; }. void test() {; int *p = malloc(sizeof(char));; p = p - 1;; free(p); // warn: argument to free() is offset by -4 bytes; }. unix.MallocSizeof; (C); Check for dubious malloc, calloc or; realloc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:25181,test,test,25181,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"s. 	 .globl	test1; 	 .align	16, 0x90; 	 pushq	%rax; 	 callq	foo; .Ltmp1:; 	 movq	(%rsp), %rax # This load is redundant (oops!); 	 popq	%rdx; 	 retq. Each of the potentially relocated values has been spilled to the; stack, and a record of that location has been recorded to the; :ref:`Stack Map section <stackmap-section>`. If the garbage collector; needs to update any of these pointers during the call, it knows; exactly what to change. The relevant parts of the StackMap section for our example are:. .. code-block:: gas. # This describes the call site; # Stack Maps: callsite 2882400000; 	 .quad	2882400000; 	 .long	.Ltmp1-test1; 	 .short	0; # .. 8 entries skipped ..; # This entry describes the spill slot which is directly addressable; # off RSP with offset 0. Given the value was spilled with a pushq,; # that makes sense.; # Stack Maps: Loc 8: Direct RSP [encoding: .byte 2, .byte 8, .short 7, .int 0]; 	 .byte	2; 	 .byte	8; 	 .short	7; 	 .long	0. This example was taken from the tests for the :ref:`RewriteStatepointsForGC`; utility pass. As such, its full StackMap can be easily examined with the; following command. .. code-block:: bash. opt -rewrite-statepoints-for-gc test/Transforms/RewriteStatepointsForGC/basics.ll -S | llc -debug-only=stackmaps. Simplifications for Non-Relocating GCs; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Some of the complexity in the previous example is unnecessary for a; non-relocating collector. While a non-relocating collector still needs the; information about which location contain live references, it doesn't need to; represent explicit relocations. As such, the previously described explicit; lowering can be simplified to remove all of the ``gc.relocate`` intrinsic; calls and leave uses in terms of the original reference value. Here's the explicit lowering for the previous example for a non-relocating; collector:. .. code-block:: llvm. define i8 addrspace(1)* @test1(i8 addrspace(1)* %obj); gc ""statepoint-example"" {; call token (i64, i32, void ()",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Statepoints.rst:11160,test,tests,11160,interpreter/llvm-project/llvm/docs/Statepoints.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Statepoints.rst,1,['test'],['tests']
Testability,"s. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgress. deadcode.UnmodifiedVariable; (C, C++); A variable is never modified but was not declared const and is not a; reference.(opt-in checker). extern int computeDelta();. int test(bool cond) {; int i = 0;; if (cond) {; const int delta = computeDelta();; // warn: forgot to modify 'i'; }; return i;; }. PR16890. deadcode.IdempotentOperations; (C); Warn about idempotent operations. void test() {; int x = 7;; x = x; // warn: value is always the same; }. void test() {; int x = 7;; x /= x; // warn: value is always 1; }. void test() {; int x = 7, one = 1;; x *= one; // warn: right op is always 1; }. void test() {; int x = 7, zero = 0;; x = x - zero;; // warn: the right operand to '-' is always 0; }. removed from alpha.deadcode.* at; r198476. POSIX. Name, DescriptionExampleProgress. posix.Errno; (C); Record that errno is non-zero when certain functions; fail. #include <stdlib.h>. int readWrapper(int fd, int *count) {; int lcount = read(fd, globalBuf, sizeof(globalBuf));; if (lcount < 0); return errno;; *count = lcount;; return 0;; }. void use(int fd) {; int count;; if (!readWrapper(fd, &count)); print(""%d"", count); // should not warn; }. PR18701. undefined behavior. Name, DescriptionExampleProgress. undefbehavior.ExitInDtor; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:4352,test,test,4352,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"s.cxx LIBRARIES Core); ROOT_ADD_TEST(test-testbits COMMAND testbits). #--ctorture----------------------------------------------------------------------------------; ROOT_EXECUTABLE(ctorture ctorture.cxx LIBRARIES MathCore); ROOT_ADD_TEST(test-ctorture COMMAND ctorture). #--qprandom----------------------------------------------------------------------------------; ROOT_EXECUTABLE(QpRandomDriver QpRandomDriver.cxx LIBRARIES Quadp); ROOT_ADD_TEST(test-qprandom COMMAND QpRandomDriver 10 2 2). #--threads----------------------------------------------------------------------------------; ROOT_EXECUTABLE(threads threads.cxx LIBRARIES Thread Hist Gpad); #ROOT_ADD_TEST(test-threads COMMAND threads). #--stressIOPlugins--------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIOPlugins stressIOPlugins.cxx LIBRARIES Event Core Hist RIO Tree Gpad Postscript); if(ROOT_xrootd_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-xroot COMMAND stressIOPlugins root FAILREGEX ""FAILED|Error in""); endif(); if(ROOT_davix_FOUND); ROOT_ADD_TEST(test-stressIOPlugins-http COMMAND stressIOPlugins http FAILREGEX ""FAILED|Error in""); endif(). #--delaunay----------------------------------------------------------------------------------; ROOT_EXECUTABLE(delaunayTriangulation delaunayTriangulation.cxx LIBRARIES Hist); ROOT_ADD_TEST(test-delaunay COMMAND delaunayTriangulation). #--TestTformula------------------------------------------------------------------------------------; ROOT_EXECUTABLE(TFormulaTests TFormulaTests.cxx LIBRARIES Hist RIO); if(MSVC); set_property(TARGET TFormulaTests APPEND_STRING PROPERTY LINK_FLAGS ""/STACK:4000000""); endif(); ROOT_ADD_TEST(test-TFormulaTests COMMAND TFormulaTests FAILREGEX ""FAILED|Error in""). #--Vc basic test-----------------------------------------------------------------------------------; if(ROOT_vc_FOUND); ROOT_EXECUTABLE(testVc testVc.cxx LIBRARIES ${Vc_LIBRARIES} BUILTINS Vc); target_include_directories(testVc SYSTEM BEFORE P",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:16923,test,test-stressIOPlugins-xroot,16923,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stressIOPlugins-http', 'test-stressIOPlugins-xroot']"
Testability,"s/76631>`_); - The MS ``__noop`` builtin without an argument list is now accepted; in the placement-args of new-expressions, matching MSVC's behaviour.; - Fix an issue that caused MS ``__decspec(property)`` accesses as well as; Objective-C++ property accesses to not be converted to a function call; to the getter in the placement-args of new-expressions.; Fixes (`#65053 <https://github.com/llvm/llvm-project/issues/65053>`_); - Fix an issue with missing symbol definitions when the first coroutine; statement appears in a discarded ``if constexpr`` branch.; Fixes (`#78290 <https://github.com/llvm/llvm-project/issues/78290>`_); - Fixed assertion failure with deleted overloaded unary operators.; Fixes (`#78314 <https://github.com/llvm/llvm-project/issues/78314>`_); - The XCOFF object file format does not support aliases to symbols having common; linkage. Clang now diagnoses the use of an alias for a common symbol when; compiling for AIX. - Clang now doesn't produce false-positive warning `-Wconstant-logical-operand`; for logical operators in C23.; Fixes (`#64356 <https://github.com/llvm/llvm-project/issues/64356>`_).; - Clang's ``-Wshadow`` no longer warns when an init-capture is named the same as; a class field unless the lambda can capture this.; Fixes (`#71976 <https://github.com/llvm/llvm-project/issues/71976>`_). Bug Fixes to Compiler Builtins; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Bug Fixes to Attribute Support; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Bug Fixes to C++ Support; ^^^^^^^^^^^^^^^^^^^^^^^^. - Clang limits the size of arrays it will try to evaluate at compile time; to avoid memory exhaustion.; This limit can be modified by `-fconstexpr-steps`.; (`#63562 <https://github.com/llvm/llvm-project/issues/63562>`_). - Fix a crash caused by some named unicode escape sequences designating; a Unicode character whose name contains a ``-``.; (Fixes `#64161 <https://github.com/llvm/llvm-project/issues/64161>`_). - Fix cases where we ignore ambiguous name lookup when looking up member",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:45907,log,logical-operand,45907,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,2,['log'],"['logical', 'logical-operand']"
Testability,s/Process/Utility/MemoryTagManagerAArch64MTETest.cpp; lldb/unittests/Process/Utility/RegisterContextFreeBSDTest.cpp; lldb/unittests/Process/Utility/RegisterContextTest.cpp; lldb/unittests/ScriptInterpreter/Lua/LuaTests.cpp; lldb/unittests/ScriptInterpreter/Lua/ScriptInterpreterTests.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; l,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231604,test,test-dwarf,231604,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test-dwarf']
Testability,s/Runtime/BufferTest.cpp; flang/unittests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/autome,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129253,benchmark,benchmarks,129253,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,s/debuginfo-tests/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`1,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26835,test,tests,26835,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,s/dexter/feature_tests/commands/penalty; - `10`; - `0`; - `10`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26851,test,tests,26851,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"s1, rs2; # LLVM-MCA-RISCV-LMUL M1; vadd.vv v12, v12, v12; vsetvl rd, rs1, rs2; # LLVM-MCA-RISCV-LMUL M4; vadd.vv v12, v12, v12. HOW LLVM-MCA WORKS; ------------------. :program:`llvm-mca` takes assembly code as input. The assembly code is parsed; into a sequence of MCInst with the help of the existing LLVM target assembly; parsers. The parsed sequence of MCInst is then analyzed by a ``Pipeline`` module; to generate a performance report. The Pipeline module simulates the execution of the machine code sequence in a; loop of iterations (default is 100). During this process, the pipeline collects; a number of execution related statistics. At the end of this process, the; pipeline generates and prints a report from the collected statistics. Here is an example of a performance report generated by the tool for a; dot-product of two packed float vectors of four elements. The analysis is; conducted for target x86, cpu btver2. The following result can be produced via; the following command using the example located at; ``test/tools/llvm-mca/X86/BtVer2/dot-product.s``:. .. code-block:: bash. $ llvm-mca -mtriple=x86_64-unknown-unknown -mcpu=btver2 -iterations=300 dot-product.s. .. code-block:: none. Iterations: 300; Instructions: 900; Total Cycles: 610; Total uOps: 900. Dispatch Width: 2; uOps Per Cycle: 1.48; IPC: 1.48; Block RThroughput: 2.0. Instruction Info:; [1]: #uOps; [2]: Latency; [3]: RThroughput; [4]: MayLoad; [5]: MayStore; [6]: HasSideEffects (U). [1] [2] [3] [4] [5] [6] Instructions:; 1 2 1.00 vmulps	%xmm0, %xmm1, %xmm2; 1 3 1.00 vhaddps	%xmm2, %xmm2, %xmm3; 1 3 1.00 vhaddps	%xmm3, %xmm3, %xmm4. Resources:; [0] - JALU0; [1] - JALU1; [2] - JDiv; [3] - JFPA; [4] - JFPM; [5] - JFPU0; [6] - JFPU1; [7] - JLAGU; [8] - JMul; [9] - JSAGU; [10] - JSTC; [11] - JVALU0; [12] - JVALU1; [13] - JVIMUL. Resource pressure per iteration:; [0] [1] [2] [3] [4] [5] [6] [7] [8] [9] [10] [11] [12] [13]; - - - 2.00 1.00 2.00 1.00 - - - - - - -. Resource pressure by instruction:; [0] [1] [",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst:14168,test,test,14168,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mca.rst,1,['test'],['test']
Testability,"s2; faddd d0, d1, d0; fmrrd r0, r1, d0; ldmfd sp!, {r4, r5, r7, pc}. Ignore the prologue and epilogue stuff for a second. Note; 	mov r4, r0; 	mov r5, r1; the copys to callee-save registers and the fact they are only being used by the; fmdrr instruction. It would have been better had the fmdrr been scheduled; before the call and place the result in a callee-save DPR register. The two; mov ops would not have been necessary. //===---------------------------------------------------------------------===//. Calling convention related stuff:. * gcc's parameter passing implementation is terrible and we suffer as a result:. e.g.; struct s {; double d1;; int s1;; };. void foo(struct s S) {; printf(""%g, %d\n"", S.d1, S.s1);; }. 'S' is passed via registers r0, r1, r2. But gcc stores them to the stack, and; then reload them to r1, r2, and r3 before issuing the call (r0 contains the; address of the format string):. 	stmfd	sp!, {r7, lr}; 	add	r7, sp, #0; 	sub	sp, sp, #12; 	stmia	sp, {r0, r1, r2}; 	ldmia	sp, {r1-r2}; 	ldr	r0, L5; 	ldr	r3, [sp, #8]; L2:; 	add	r0, pc, r0; 	bl	L_printf$stub. Instead of a stmia, ldmia, and a ldr, wouldn't it be better to do three moves?. * Return an aggregate type is even worse:. e.g.; struct s foo(void) {; struct s S = {1.1, 2};; return S;; }. 	mov	ip, r0; 	ldr	r0, L5; 	sub	sp, sp, #12; L2:; 	add	r0, pc, r0; 	@ lr needed for prologue; 	ldmia	r0, {r0, r1, r2}; 	stmia	sp, {r0, r1, r2}; 	stmia	ip, {r0, r1, r2}; 	mov	r0, ip; 	add	sp, sp, #12; 	bx	lr. r0 (and later ip) is the hidden parameter from caller to store the value in. The; first ldmia loads the constants into r0, r1, r2. The last stmia stores r0, r1,; r2 into the address passed in. However, there is one additional stmia that; stores r0, r1, and r2 to some stack location. The store is dead. The llvm-gcc generated code looks like this:. csretcc void %foo(%struct.s* %agg.result) {; entry:; 	%S = alloca %struct.s, align 4		; <%struct.s*> [#uses=1]; 	%memtmp = alloca %struct.s		; <%struct.s*> [#uses=1]; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt:5688,stub,stub,5688,interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,1,['stub'],['stub']
Testability,"s://reviews.llvm.org/D125783#inline-1324376. As the DebugInfoLogicalView library is sufficiently exposed via the; llvm-debuginfo-analyzer tool, follow the LLVM general approach and; use LIT tests to validate the logical readers. Convert the unitests:; llvm-project/llvm/unittests/DebugInfo/LogicalView/CodeViewReaderTest.cpp; llvm-project/llvm/unittests/DebugInfo/LogicalView/ELFReaderTest.cpp. into LIT tests:; llvm-project/llvm/test/DebugInfo/LogicalView/CodeViewReader.test; llvm-project/llvm/test/DebugInfo/LogicalView/ELFReader.test. //===----------------------------------------------------------------------===//; // Eliminate calls to 'getInputFileDirectory()' in the unit tests.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1324359. Rewrite the unittests 'LFReaderTest' and 'CodeViewReaderTest'to eliminate; the call:. getInputFileDirectory(). as use of that call is discouraged. See: Use a lit test instead of a unit test for the logical readers. //===----------------------------------------------------------------------===//; // Fix mismatch between %d/%x format strings and uint64_t type.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137400; https://github.com/llvm/llvm-project/issues/58758. Incorrect printing of uint64_t on 32-bit platforms.; Add the PRIx64 specifier to the printing code (format()). //===----------------------------------------------------------------------===//; // Remove 'LVScope::Children' container.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D137933#inline-1373902. Use a chaining iterator over the other containers rather than keep a; separate container 'Children' that mirrors their contents. //===----------------------------------------------------------------------===//; // Use TableGen for command line options.; //===--------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:2295,test,test,2295,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,3,"['log', 'test']","['logical', 'test']"
Testability,"s; ------------------------------. These functions get properties of floating-point values. .. _llvm.is.fpclass:. '``llvm.is.fpclass``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.is.fpclass(<fptype> <op>, i32 <test>); declare <N x i1> @llvm.is.fpclass(<vector-fptype> <op>, i32 <test>). Overview:; """""""""""""""""". The '``llvm.is.fpclass``' intrinsic returns a boolean value or vector of boolean; values depending on whether the first argument satisfies the test specified by; the second argument. If the first argument is a floating-point scalar, then the result type is a; boolean (:ref:`i1 <t_integer>`). If the first argument is a floating-point vector, then the result type is a; vector of boolean with the same number of elements as the first argument. Arguments:; """""""""""""""""""". The first argument to the '``llvm.is.fpclass``' intrinsic must be; :ref:`floating-point <t_floating>` or :ref:`vector <t_vector>`; of floating-point values. The second argument specifies, which tests to perform. It must be a compile-time; integer constant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-------+----------------------+; | 1 | Quiet NaN |; +-------+----------------------+; | 2 | Negative infinity |; +-------+----------------------+; | 3 | Negative normal |; +-------+----------------------+; | 4 | Negative subnormal |; +-------+----------------------+; | 5 | Negative zero |; +-------+----------------------+; | 6 | Positive zero |; +-------+----------------------+; | 7 | Positive subnormal |; +-------+----------------------+; | 8 | Positive normal |; +-------+----------------------+; | 9 | Positive infinity |; +-------+----------------------+. Semantics:; """""""""""""""""""". The function checks if ``op`` belongs to any of the floating-point classes; specified by ``test``. If ``op`` is a vector, then the check is made element by; eleme",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:922199,test,tests,922199,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['tests']
Testability,"s; ================================. See https://llvm.org/docs/AdvancedBuilds.html#multi-stage-pgo. Using the script; ================. We have a script at ``utils/collect_and_build_with_pgo.py``. This script is; tested on a few Linux flavors, and requires a checkout of LLVM, Clang, and; compiler-rt. Despite the name, it performs four clean builds of Clang, so it; can take a while to run to completion. Please see the script's ``--help`` for; more information on how to run it, and the different options available to you.; If you want to get the most out of PGO for a particular use-case (e.g. compiling; a specific large piece of software), please do read the section below on; 'benchmark' selection. Please note that this script is only tested on a few Linux distros. Patches to; add support for other platforms, as always, are highly appreciated. :). This script also supports a ``--dry-run`` option, which causes it to print; important commands instead of running them. Selecting 'benchmarks'; ======================. PGO does best when the profiles gathered represent how the user plans to use the; compiler. Notably, highly accurate profiles of llc building x86_64 code aren't; incredibly helpful if you're going to be targeting ARM. By default, the script above does two things to get solid coverage. It:. - runs all of Clang and LLVM's lit tests, and; - uses the instrumented Clang to build Clang, LLVM, and all of the other; LLVM subprojects available to it. Together, these should give you:. - solid coverage of building C++,; - good coverage of building C,; - great coverage of running optimizations,; - great coverage of the backend for your host's architecture, and; - some coverage of other architectures (if other arches are supported backends). Altogether, this should cover a diverse set of uses for Clang and LLVM. If you; have very specific needs (e.g. your compiler is meant to compile a large browser; for four different platforms, or similar), you may want to do something el",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst:1717,benchmark,benchmarks,1717,interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildWithPGO.rst,1,['benchmark'],['benchmarks']
Testability,"s; essential since there is no other way of identifying them. One can; however create ""symbolic links"" to any complex path to make it more; representable for the object it designates:. ``` {.cpp}; TGeoPNEntry(const char* unique_name, const char* path); void TGeoPNEntry::SetPhysicalNode(TGeoPhysicalNode *node); ```. Such a symbolic link hides the complexity of the path to the align; object and replaces it with a more meaningful name. In addition,; **`TGeoPNEntry`** objects are faster to search by name and they may; optionally store an additional user matrix. ``` {.cpp}; // Creating a symlink object.; TGeoPNEntry *TGeoManager::SetAlignableEntry(const char *unique_n,; const char*path); // Retrieving an existing alignable object.; TGeoPNEntry *TGeoManager::GetAlignableEntry(const char *name); // Retrieving an existing alignable object at a given index.; TGeoPNEntry *GetAlignableEntry(Int_t index); ```. Physical nodes store internally the full list of logical nodes; corresponding to the elements from the string path, as well as the; global transformation matrix for each of them. The top node corresponds; to the level 0 in the stored array, while the last node will correspond; to level `n`. For each level, the node, volume and global matrix can be; retrieved using corresponding getters:. ``` {.cpp}; TGeoHMatrix *GetMatrix(Int_t level=-1) const; TGeoNode *GetNode(Int_t level=-1) const; TGeoShape *GetShape(Int_t level=-1) const; TGeoVolume *GetVolume(Int_t level=-1) const; ```. By default the object at level n is retrieved (the align-able object). Once created, a physical node can be misaligned, meaning that its; positioning matrix or even the shape.:. ``` {.cpp}; void Align(TGeoMatrix* newmat=0, TGeoShape* newshape=0,; Bool_t check=kFALSE); ```. The convention used is that newmat represents the new local matrix of; the last node in the branch with respect to its mother volume. The; `Align()` method will actually duplicate the corresponding branch within; the logical hierarc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:147884,log,logical,147884,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"s; headers. Precompiled header files, which represent one of many ways to; implement this optimization, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometimes necessary to build a precompiled header from headers; that are not yet in their final, installed locations. For example, one; might build a precompiled header within the build tree that is then; meant to be i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:47096,test,test,47096,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"s; of the store and it is modified by `AddressExpression`. An empty/undef/poison; address means the address component has been killed (the memory address is no; longer a valid location). LLVM currently encodes variable fragment information; in `DIExpression`s, so as an implementation quirk the `FragmentInfo` for; `Variable` is contained within `ValueExpression` only. The formal LLVM-IR signature is:; ```; void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata); ```. ### Instruction link: `DIAssignID`. `DIAssignID` metadata is the mechanism that is currently used to encode the; store<->marker link. The metadata node has no operands and all instances are; `distinct`; equality is checked for by comparing addresses. `llvm.dbg.assign` intrinsics use a `DIAssignID` metadata node instance as an; operand. This way it refers to any store-like instruction that has the same; `DIAssignID` attachment. E.g. For this test.cpp,. ```; int fun(int a) {; return a;; }; ```; compiled without optimisations:; ```; $ clang++ test.cpp -o test.ll -emit-llvm -S -g -O0 -Xclang -fexperimental-assignment-tracking; ```; we get:; ```; define dso_local noundef i32 @_Z3funi(i32 noundef %a) #0 !dbg !8 {; entry:; %a.addr = alloca i32, align 4, !DIAssignID !13; call void @llvm.dbg.assign(metadata i1 undef, metadata !14, metadata !DIExpression(), metadata !13, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; store i32 %a, i32* %a.addr, align 4, !DIAssignID !16; call void @llvm.dbg.assign(metadata i32 %a, metadata !14, metadata !DIExpression(), metadata !16, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; %0 = load i32, i32* %a.addr, align 4, !dbg !17; ret i32 %0, !dbg !18; }. ...; !13 = distinct !DIAssignID(); !14 = !DILocalVariable(name: ""a"", ...); ...; !16 = distinct !DIAssignID(); ```. The first `llvm.dbg.assign` refers to the `alloca` through `!DIAssignID !13`,; and the second refers to the `store` through `!DIAssignID !16`. ### Store-like instruction",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:4264,test,test,4264,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['test']
Testability,"s; }. unix.MallocSizeof; (C); Check for dubious malloc, calloc or; realloc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is prohibited; }. while(1);; }. unix.cstring.BadSizeArg; (C); Check the size argument passed to strncat for common erroneous; patterns. Use -Wno-strncat-size compiler option to mute other; strncat-related compiler warnings. void test() {; char dest[3];; strn",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:25744,test,test,25744,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"s> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; delete p1; // warn; delete p2; // ok; }. undefbehavior.IosBaseUsedBeforeInit; (C++11); Undefined behavior: ios_base object is used before initialization; have taken place. basic_ios::init should be call to; initialize ios_base members.; Source: C++11 27.5.3.7p1, 27.5.5.2p2. #include <ios>. using namespace std;; template <class T, class Traits = std::char_traits<T> >; class my_stream1 : public std::basic_ios<T, Traits> {; };. template <class T, class Traits = std::char_traits<T> >; class my_stream2 : public std::basic_ios<T, Traits> {; class my_streambuf; : public std::basic_streambuf<T, Traits> {; };; public:; my_stream2() {; this->init(new my_streambuf);; }; };. void test() {; my_stream1<char> *p1 = new my_stream1<char>;; my_stream2<char> *p2 = new my_stream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:18987,test,test,18987,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"sabled by providing '&optimize=0' in URL; 5. TF1 drawing optimization:; - function 'compiled' only once; 6. Reorganize scripts structure:; - move all math functions to JSRootMath.js; - TH2, TF1, THStack and TMultiGraph painters moved into JSRootPainter.more.js script; - reduce size of scripts required for default functionality; 7. Update all basic libraries:; - d3.js - v3.5.9,; - jquery.js - v2.1.4,; - jquery-ui.js - v1.11.4,; - three.js - r73; 8. Implement ROOT6-like color palettes:; - all palettes in range 51...112 are implemented; - by default palette 57 is used; - one could change default palette with '&palette=111' in URL; - or palette can be specified in draw option like '&opt=colz,pal77'. ## Changes in 3.9; 1. Support non-equidistant bins for TH1/TH2 objects.; 2. Display entries count from histo.fEntries member, only when not set use computed value; 3. Support italic and bold text when used with MathJax; 4. Improve TF1 drawing - support exp function in TFormula, fix errors with logx scale, enable zoom-in, (re)calculate function points when zooming; 5. Support several columns in TLegend; 6. Introduce context menus for x/y axis, add some items similar to native ROOT menus; 7. Introduce context menu for TPaveStats, let switch single elements in the box; 8. Enable usage of all context menus on touch devices; 9. Implement JSROOT.Math.Prob function, provides probability value in stat box; 10. Introduce context menu for color palette (z axis); 11. Implement col0 and col0z draw option for TH2 histograms, similar to ROOT6. ## Changes in 3.8; 1. Let use HTML element pointer in JSROOT.draw function like:; JSROOT.draw(document.getElementsByTagName(""div"")[0], obj, ""hist"");; Normally unique identifier was used before, which is not required any longer.; Of course, old functionality with element identifier will work as well.; 2. TreePlayer can also be used for trees, which not yet read from the file.; Requires appropriate changes in TRootSniffer class.; 3. Fix error in I/O wi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:61163,log,logx,61163,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['logx']
Testability,"saligned or null pointers; * Signed integer overflow; * Conversion to, from, or between floating-point types which would; overflow the destination. See the full list of available :ref:`checks <ubsan-checks>` below. UBSan has an optional run-time library which provides better error reporting.; The checks have small runtime cost and no impact on address space layout or ABI. How to build; ============. Build LLVM/Clang with `CMake <https://llvm.org/docs/CMake.html>`_. Usage; =====. Use ``clang++`` to compile and link your program with the ``-fsanitize=undefined``; option. Make sure to use ``clang++`` (not ``ld``) as a linker, so that your; executable is linked with proper UBSan runtime libraries, unless all enabled; checks use trap mode. You can use ``clang`` instead of ``clang++`` if you're; compiling/linking C code. .. code-block:: console. % cat test.cc; int main(int argc, char **argv) {; int k = 0x7fffffff;; k += argc;; return 0;; }; % clang++ -fsanitize=undefined test.cc; % ./a.out; test.cc:3:5: runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'int'. You can use ``-fsanitize=...`` and ``-fno-sanitize=`` to enable and disable one; check or one check group. For an individual check, the last option that enabling; or disabling it wins. .. code-block:: console. # Enable all checks in the ""undefined"" group, but disable ""alignment"".; % clang -fsanitize=undefined -fno-sanitize=alignment a.c. # Enable just ""alignment"".; % clang -fsanitize=alignment a.c. # The same. -fno-sanitize=undefined nullifies the previous -fsanitize=undefined.; % clang -fsanitize=undefined -fno-sanitize=undefined -fsanitize=alignment a.c. For most checks (:ref:`checks <ubsan-checks>`), the instrumented program prints; a verbose error report and continues execution upon a failed check.; You can use the following options to change the error reporting behavior:. * ``-fno-sanitize-recover=...``: print a verbose error report and exit the program;; * ``-fsanitize-trap=..",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:1499,test,test,1499,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['test'],['test']
Testability,san lsan msan profile tsan ubsan ubsan-minimal); foreach(runtime ${COMPILER_RT_RUNTIMES}); get_ext_project_build_command(build_runtime_cmd ${runtime}); add_custom_target(${runtime}; COMMAND ${build_runtime_cmd}; DEPENDS compiler-rt-configure; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); endforeach(). if(LLVM_INCLUDE_TESTS); # Add binaries that compiler-rt tests depend on.; set(COMPILER_RT_TEST_DEPENDENCIES; FileCheck count not llvm-nm llvm-objdump llvm-symbolizer llvm-jitlink lli split-file). # Add top-level targets for various compiler-rt test suites.; set(COMPILER_RT_TEST_SUITES; check-asan; check-asan-dynamic; check-cfi; check-cfi-and-supported; check-dfsan; check-fuzzer; check-gwp_asan; check-hwasan; check-lsan; check-msan; check-profile; check-safestack; check-sanitizer; check-tsan; check-ubsan; check-ubsan-minimal; ); foreach(test_suite ${COMPILER_RT_TEST_SUITES}); get_ext_project_build_command(run_test_suite ${test_suite}); add_custom_target(${test_suite}; COMMAND ${run_test_suite}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM; USES_TERMINAL; ); endforeach(). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt check-all); add_custom_target(check-compiler-rt; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL). # Add special target to run all compiler-rt test suites.; get_ext_project_build_command(run_check_compiler_rt compiler-rt-test-depends); add_custom_target(compiler-rt-test-depends; COMMAND ${run_check_compiler_rt}; DEPENDS compiler-rt-build ${COMPILER_RT_TEST_DEPENDENCIES}; WORKING_DIRECTORY ${BINARY_DIR}; VERBATIM USES_TERMINAL); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_DEPENDS compiler-rt-test-depends); set_property(GLOBAL APPEND PROPERTY LLVM_ALL_ADDITIONAL_TEST_TARGETS check-compiler-rt); endif(); endif(); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt:5651,test,test,5651,interpreter/llvm-project/clang/runtime/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/runtime/CMakeLists.txt,5,['test'],"['test', 'test-depends']"
Testability,san_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/lib/xray/xray_flags.cpp; compiler-rt/lib/xray/xray_f,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:105027,test,tests,105027,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"sanitize=fuzzer-no-link mytarget.c. Then libFuzzer can be linked to the desired driver by passing in; ``-fsanitize=fuzzer`` during the linking stage. .. _libfuzzer-corpus:. Corpus; ------. Coverage-guided fuzzers like libFuzzer rely on a corpus of sample inputs for the; code under test. This corpus should ideally be seeded with a varied collection; of valid and invalid inputs for the code under test; for example, for a graphics; library the initial corpus might hold a variety of different small PNG/JPG/GIF; files. The fuzzer generates random mutations based around the sample inputs in; the current corpus. If a mutation triggers execution of a previously-uncovered; path in the code under test, then that mutation is saved to the corpus for; future variations. LibFuzzer will work without any initial seeds, but will be less; efficient if the library under test accepts complex,; structured inputs. The corpus can also act as a sanity/regression check, to confirm that the; fuzzing entrypoint still works and that all of the sample inputs run through; the code under test without problems. If you have a large corpus (either generated by fuzzing or acquired by other means); you may want to minimize it while still preserving the full coverage. One way to do that; is to use the `-merge=1` flag:. .. code-block:: console. mkdir NEW_CORPUS_DIR # Store minimized corpus here.; ./my_fuzzer -merge=1 NEW_CORPUS_DIR FULL_CORPUS_DIR. You may use the same flag to add more interesting items to an existing corpus.; Only the inputs that trigger new coverage will be added to the first corpus. .. code-block:: console. ./my_fuzzer -merge=1 CURRENT_CORPUS_DIR NEW_POTENTIALLY_INTERESTING_INPUTS_DIR. Running; -------. To run the fuzzer, first create a Corpus_ directory that holds the; initial ""seed"" sample inputs:. .. code-block:: console. mkdir CORPUS_DIR; cp /some/input/samples/* CORPUS_DIR. Then run the fuzzer on the corpus directory:. .. code-block:: console. ./my_fuzzer CORPUS_DIR # -max_len=10",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:4942,test,test,4942,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"sary; to execute tail iterations of the loop if the loop trip count is unknown or it; does not evenly divide the vectorization and unroll factors. When the; vectorization and unroll factors are large, it's possible for loops with smaller; trip counts to end up spending most of their time in the scalar (rather than; the vector) code. In order to address this issue, the inner loop vectorizer is; enhanced with a feature that allows it to vectorize epilogue loops with a; vectorization and unroll factor combination that makes it more likely for small; trip count loops to still execute in vectorized code. The diagram below shows; the CFG for a typical epilogue vectorized loop with runtime checks. As; illustrated the control flow is structured in a way that avoids duplicating the; runtime pointer checks and optimizes the path length for loops that have very; small trip counts. .. image:: epilogue-vectorization-cfg.png. Performance; -----------. This section shows the execution time of Clang on a simple benchmark:; `gcc-loops <https://github.com/llvm/llvm-test-suite/tree/main/SingleSource/UnitTests/Vectorizer>`_.; This benchmarks is a collection of loops from the GCC autovectorization; `page <http://gcc.gnu.org/projects/tree-ssa/vectorization.html>`_ by Dorit Nuzman. The chart below compares GCC-4.7, ICC-13, and Clang-SVN with and without loop vectorization at -O3, tuned for ""corei7-avx"", running on a Sandybridge iMac.; The Y-axis shows the time in msec. Lower is better. The last column shows the geomean of all the kernels. .. image:: gcc-loops.png. And Linpack-pc with the same configuration. Result is Mflops, higher is better. .. image:: linpack-pc.png. Ongoing Development Directions; ------------------------------. .. toctree::; :hidden:. VectorizationPlan. :doc:`VectorizationPlan`; Modeling the process and upgrading the infrastructure of LLVM's Loop Vectorizer. .. _slp-vectorizer:. The SLP Vectorizer; ==================. Details; -------. The goal of SLP vectorization (a.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst:12343,benchmark,benchmark,12343,interpreter/llvm-project/llvm/docs/Vectorizers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Vectorizers.rst,1,['benchmark'],['benchmark']
Testability,scall.h; libc/src/__support/OSUtil/linux/aarch64/syscall.h; libc/src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149031,test,testutils,149031,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testutils']
Testability,"scan-build; ==========. A package designed to wrap a build so that all calls to gcc/clang are; intercepted and logged into a [compilation database][1] and/or piped to; the clang static analyzer. Includes intercept-build tool, which logs; the build, as well as scan-build tool, which logs the build and runs; the clang static analyzer on it. Portability; -----------. Should be working on UNIX operating systems. - It has been tested on FreeBSD, GNU/Linux and OS X.; - Prepared to work on windows, but need help to make it. Prerequisites; -------------. 1. **python** interpreter (version 3.6 or later). How to use; ----------. To run the Clang static analyzer against a project goes like this:. $ scan-build <your build command>. To generate a compilation database file goes like this:. $ intercept-build <your build command>. To run the Clang static analyzer against a project with compilation database; goes like this:. $ analyze-build. Use `--help` to know more about the commands. How to use the experimental Cross Translation Unit analysis; -----------------------------------------------------------. To run the CTU analysis, a compilation database file has to be created:. $ intercept-build <your build command>. To run the Clang Static Analyzer against a compilation database; with CTU analysis enabled, execute:; ; $ analyze-build --ctu. For CTU analysis an additional (external definition) collection-phase is required. ; For debugging purposes, it is possible to separately execute the collection ; and the analysis phase. By doing this, the intermediate files used for ; the analysis are kept on the disk in `./ctu-dir`.; ; # Collect and store the data required by the CTU analysis; $ analyze-build --ctu-collect-only; ; # Analyze using the previously collected data; $ analyze-build --ctu-analyze-only. Use `--help` to get more information about the commands. Limitations; -----------. Generally speaking, the `intercept-build` and `analyze-build` tools together; does the same job as `sc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/README.md:111,log,logged,111,interpreter/llvm-project/clang/tools/scan-build-py/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/scan-build-py/README.md,4,"['log', 'test']","['logged', 'logs', 'tested']"
Testability,scourse.llvm.org</td></tr>; <tr><td>Runtimes - OpenMP</td><td>runtimes-openmp@discourse.llvm.org</td></tr>; <tr><td>Runtimes - OpenCL</td><td>runtimes-opencl@discourse.llvm.org</td></tr>; <tr><td>MLIR</td><td>mlir@discourse.llvm.org</td></tr>; <tr><td>MLIR - Announce</td><td>mlir-announce@discourse.llvm.org</td></tr>; <tr><td>MLIR - Newsletter</td><td>mlir-news@discourse.llvm.org</td></tr>; <tr><td>MLIR - TCP-WG</td><td>mlir-tcpwg@discourse.llvm.org</td></tr>; <tr><td>Subprojects</td><td>subprojects@discourse.llvm.org</td></tr>; <tr><td>Subprojects - Polly</td><td>polly@discourse.llvm.org</td></tr>; <tr><td>Subprojects - LLDB</td><td>lldb@discourse.llvm.org</td></tr>; <tr><td>Subprojects - LLD</td><td>lld@discourse.llvm.org</td></tr>; <tr><td>Subprojects - Flang</td><td> flang@discourse.llvm.org</td></tr>; <tr><td>Subprojects - Bolt</td><td>bolt@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure</td><td>infra@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Release Testers</td><td>infra-release-testers@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Website</td><td>infra-website@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Documentation</td><td> infra-docs@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - GitHub</td><td>infra-github@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Code Review</td><td>infra-codereview@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Discord</td><td>infra-discord@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Mailing Lists and Forums</td><td>infra-mailinglists@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - IRC</td><td> infra-irc@discourse.llvm.org</td></tr>; <tr><td>Project Infrastructure - Infrastructure Working Group</td><td>infra-iwg@discourse.llvm.org</td></tr>; <tr><td>Community</td><td>community@discourse.llvm.org</td></tr>; <tr><td>Community - Women in Compilers and Tools</td><td>wict@discourse.llvm.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md:5309,test,testers,5309,interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DiscourseMigrationGuide.md,1,['test'],['testers']
Testability,"script>; // getting json string from somewhere; let obj = JSROOT.parse(root_json);; JSROOT.draw('plain', obj, 'colz');; </script>; ```. ### Use of JSON. It is strongly recommended to use JSON when communicating with ROOT application.; THttpServer provides a JSON representation for every registered object with an url address like:. http://your_root_server:8080/Canvases/c1/root.json. Such JSON representation generated using the [TBufferJSON](https://root.cern/doc/master/classTBufferJSON.html) class. One could create JSON file for any ROOT object directly, just writing in the code:. ```cpp; obj->SaveAs(""file.json"");; ```. To access data from a remote web server, it is recommended to use the `httpRequest` method.; For instance to receive object from a THttpServer server one could do:. ```javascript; import { httpRequest } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = await httpRequest(""http://your_root_server:8080/Canvases/c1/root.json"", ""object""); console.log('Read object of type', obj._typename);; ```. Function returns Promise, which provides parsed object (or Error in case of failure). If JSON string was obtained by different method, it could be parsed with `parse` function:. ```javascript; import { parse } from 'https://root.cern/js/latest/modules/main.mjs';; let obj = parse(json_string);; ```. ### Objects drawing. After an object has been created, one can directly draw it. If HTML page has `<div>` element:. ```html; <div id=""drawing""></div>; ```. One could use the `draw` function:. ```javascript; import { draw } from 'https://root.cern/js/latest/modules/main.mjs';; draw(""drawing"", obj, ""colz"");; ```. The first argument is the id of the HTML div element, where drawing will be performed. The second argument is the object to draw and the third one is the drawing option. Here is complete [running example](https://root.cern/js/latest/api.htm#custom_html_read_json) ans [source code](https://github.com/root-project/jsroot/blob/master/demo/read_json.htm):.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:37425,log,log,37425,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['log']
Testability,"sd in an expression, you could write; ``target={{.*(free|net)bsd.*}}`` and that would work. However, it would; prevent a ``grep freebsd`` from finding this test. Better to use:; ``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``. Substitutions; -------------. Besides replacing LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and cause race conditions between tests. Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary. Example: ``/home/user/llvm.build/test/MC/ELF/Output``. ``%{pathsep}``. Expands to the path separator, i.e. ``:`` (or ``;`` on Windows). ``${fs-src-root}``; Expands to the root component of file system paths for the source directory,; i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on Windows. ``${fs-tmp-root}``; Expands to the root component of file system paths for the test's temporary; directory, i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on; Windows. ``${fs-sep}``; Expands to the file system separator, i.e. ``/`` or ``\`` on Windows. ``%/s, %/S, %/t, %/T``. Act like the corresponding substitution above but replace any ``\``; character with a ``/``. This is useful to normalize path separators. Example: ``%s: C:\Desktop Files/fo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:24448,test,test,24448,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"se AFL on your target function ``LLVMFuzzerTestOneInput``:; see an example `here <https://github.com/llvm/llvm-project/tree/main/compiler-rt/lib/fuzzer/afl>`__. How good is my fuzzer?; ----------------------. Once you implement your target function ``LLVMFuzzerTestOneInput`` and fuzz it to death,; you will want to know whether the function or the corpus can be improved further.; One easy to use metric is, of course, code coverage. We recommend to use; `Clang Coverage <https://clang.llvm.org/docs/SourceBasedCodeCoverage.html>`_,; to visualize and study your code coverage; (`example <https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md#visualizing-coverage>`_). User-supplied mutators; ----------------------. LibFuzzer allows to use custom (user-supplied) mutators, see; `Structure-Aware Fuzzing <https://github.com/google/fuzzing/blob/master/docs/structure-aware-fuzzing.md>`_; for more details. Startup initialization; ----------------------; If the library being tested needs to be initialized, there are several options. The simplest way is to have a statically initialized global object inside; `LLVMFuzzerTestOneInput` (or in global scope if that works for you):. .. code-block:: c++. extern ""C"" int LLVMFuzzerTestOneInput(const uint8_t *Data, size_t Size) {; static bool Initialized = DoInitialization();; ... Alternatively, you may define an optional init function and it will receive; the program arguments that you can read and modify. Do this **only** if you; really need to access ``argv``/``argc``. .. code-block:: c++. extern ""C"" int LLVMFuzzerInitialize(int *argc, char ***argv) {; ReadAndMaybeModify(argc, argv);; return 0;; }. Using libFuzzer as a library; ----------------------------; If the code being fuzzed must provide its own `main`, it's possible to; invoke libFuzzer as a library. Be sure to pass ``-fsanitize=fuzzer-no-link``; during compilation, and link your binary against the no-main version of; libFuzzer. On Linux installations",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:23863,test,tested,23863,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['tested']
Testability,"se in the replacement of a ``s@@@`` command in sed; %{/t:regex_replacement} %/t but escaped for use in the replacement of a ``s@@@`` command in sed; %{/T:regex_replacement} %/T but escaped for use in the replacement of a ``s@@@`` command in sed; %:s On Windows, %/s but a ``:`` is removed if its the second character.; Otherwise, %s but with a single leading ``/`` removed.; %:S On Windows, %/S but a ``:`` is removed if its the second character.; Otherwise, %S but with a single leading ``/`` removed.; %:p On Windows, %/p but a ``:`` is removed if its the second character.; Otherwise, %p but with a single leading ``/`` removed.; %:t On Windows, %/t but a ``:`` is removed if its the second character.; Otherwise, %t but with a single leading ``/`` removed.; %:T On Windows, %/T but a ``:`` is removed if its the second character.; Otherwise, %T but with a single leading ``/`` removed.; ======================= ==============. Other substitutions are provided that are variations on this base set and; further substitution patterns can be defined by each test module. See the; modules :ref:`local-configuration-files`. More detailed information on substitutions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress inf",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:22005,test,test,22005,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"se it runs over 38 passes. Next, ``bugpoint`` tries removing functions from the test program, to reduce its; size. Usually it is able to reduce a test program to a single function, when; debugging intraprocedural optimizations. Once the number of functions has been; reduced, it attempts to delete various edges in the control flow graph, to; reduce the size of the function as much as possible. Finally, ``bugpoint``; deletes any individual LLVM instructions whose absence does not eliminate the; failure. At the end, ``bugpoint`` should tell you what passes crash, give you a; bitcode file, and give you instructions on how to reproduce the failure with; ``opt`` or ``llc``. .. _code generator debugger:. Code generator debugger; -----------------------. The code generator debugger attempts to narrow down the amount of code that is; being miscompiled by the selected code generator. To do this, it takes the test; program and partitions it into two pieces: one piece which it compiles with the; ""safe"" backend (into a shared object), and one piece which it runs with either; the JIT or the static LLC compiler. It uses several techniques to reduce the; amount of code pushed through the LLVM code generator, to reduce the potential; scope of the problem. After it is finished, it emits two bitcode files (called; ""test"" [to be compiled with the code generator] and ""safe"" [to be compiled with; the ""safe"" backend], respectively), and instructions for reproducing the; problem. The code generator debugger assumes that the ""safe"" backend produces; good code. .. _miscompilation debugger:. Miscompilation debugger; -----------------------. The miscompilation debugger works similarly to the code generator debugger. It; works by splitting the test program into two pieces, running the optimizations; specified on one piece, linking the two pieces back together, and then executing; the result. It attempts to narrow down the list of passes to the one (or few); which are causing the miscompilation,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:4317,test,test,4317,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"se of chroot. .. code-block:: c. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. .. _alpha-unix-PthreadLock:. alpha.unix.PthreadLock (C); """"""""""""""""""""""""""""""""""""""""""""""""""""; Simple lock -> unlock checker.; Applies to: ``pthread_mutex_lock, pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, lck_rw_lock_exclusive``; ``lck_rw_lock_shared, pthread_mutex_trylock, pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock,; lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``. .. code-block:: c. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. .. _alpha-unix-SimpleStream:. alpha.unix.SimpleStream (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""; Check for misuses of stream APIs. Check for misuses of stream APIs: ``fopen, fclose``; (demo checker, the subject of the demo (`Slides <https://llvm.org/devmtg/2012-11/Zaks-Rose-Checker24Hours.pdf>`_ ,; `Video <https://youtu.be/kdxlsP5QVPw>`_) by Anna Zaks and Jordan Rose presented at the; `2012 LLVM Developers' Meeting <https://llvm.org/devmtg/2012-11/>`_). .. code-block:: c. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. .. _alpha-unix-Stream:. alpha.unix.Stream (C); """"""""""""""""""""""""""""""""""""""""""; Check stream handling functions: ``fopen, tmpfile, fclose, fread, fwrite, fseek, ftell, rewind, fget",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:76064,test,test,76064,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"se of the; use of the ``%free`` anchor intrinsic. In practice, they almost certainly have to be non-converged dynamic; instances. Consider that if an implementation strictly follows the order of; instructions given in the program, the executions of the threads can be; ""aligned"" as follows:. .. code-block:: text. Thread 1: A B C D F B D E F G; Thread 2: A B D E F B C D F G. So then ``@op.2(1)`` physically executes later than ``@op.2(2)`` and there; can be no communication between the threads, which means they execute; non-converged dynamic instances. That said, it is conceivable that there aren't actually any data or other; dependencies that would enforce this execution order. In that case, a highly; out-of-order implementation could potentially allow communication. That's; why the rules defined in this document are silent about whether; ``@op.2(1) == @op.2(2)`` or not. This type of convergence control seems relatively unlikely to appear in real; programs. Its possibility is simply a logical consequence of the model. An equivalent issue arises if the convergent operations are replaced by nested; loops with loop heart intrinsics that directly refer to ``%anchor``, hence; the variants of the static rules about cycles that apply to them:. .. code-block:: llvm. ; WARNING: Example of incorrect convergence control!. %anchor = call token @llvm.experimental.convergence.anchor(); for (;;) {; if (condition1) {; for (;;) {; %loop1 = call token @llvm.experimental.convergence.loop() [ ""convergencectrl""(token %anchor) ]; }; }; if (condition2) {; for (;;) {; %loop2 = call token @llvm.experimental.convergence.loop() [ ""convergencectrl""(token %anchor) ]; }; }; }. There is a cycle (closed walk in the CFG) that goes through both loop heart; intrinsics using ``%anchor`` but not through the definition of ``%anchor``,; so this code is invalid. Examples for the Correctness of Program Transforms; ==================================================. (This section is informative.). As implied ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst:46758,log,logical,46758,interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,1,['log'],['logical']
Testability,"se options define the creation of the data sets used for training and expert validation by TMVA :. Configuration options reference for class: DataSetFactory. Option Array Default value Predefined values Description. SplitMode No Random Random, Alternate, Block Method of picking training and testing events (default: random). MixMode No SameAsSplitMode SameAsSplitMode, Random, Alternate, Block Method of mixing events of differnt classes into one dataset (default: SameAsSplitMode). SplitSeed No 100 − Seed for random event shuffling. NormMode No EqualNumEvents None, NumEvents, EqualNumEvents Overall renormalisation of event-by-event weights used in the training (NumEvents: average weight of 1 per event, independently for signal and background; EqualNumEvents: average weight of 1 per event for signal, and sum of weights for background equal to sum of weights for signal). nTrain_Signal No 0 − Number of training events of class Signal (default: 0 = all). nTest_Signal No 0 − Number of test events of class Signal (default: 0 = all). nTrain_Background No 0 − Number of training events of class Background (default: 0 = all). nTest_Background No 0 − Number of test events of class Background (default: 0 = all). V No False − Verbosity (default: true). VerboseLevel No Info Debug, Verbose, Info VerboseLevel (Debug/Verbose/Info). Configuration options for the PDF class :. Configuration options reference for class: PDF. Option Array Default value Predefined values Description. NSmooth No 0 − Number of smoothing iterations for the input histograms. MinNSmooth No -1 − Min number of smoothing iterations, for bins with most data. MaxNSmooth No -1 − Max number of smoothing iterations, for bins with least data. NAvEvtPerBin No 50 − Average number of events per PDF bin. Nbins No 0 − Defined number of bins for the histogram from which the PDF is created. CheckHist No False − Whether or not to check the source histogram of the PDF. PDFInterpol No Spline2 Spline0, Spline1, Spline2, Spline3, Spl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:33090,test,test,33090,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['test']
Testability,"se required packages. The Package column is the usual name; for the software package that LLVM depends on. The Version column provides; ""known to work"" versions of the package. The Notes column describes how LLVM; uses the package and provides other details. =========================================================== ============ ==========================================; Package Version Notes; =========================================================== ============ ==========================================; `CMake <http://cmake.org/>`__ >=3.20.0 Makefile/workspace generator; `python <http://www.python.org/>`_ >=3.6 Automated test suite\ :sup:`1`; `zlib <http://zlib.net>`_ >=1.2.3.4 Compression library\ :sup:`2`; `GNU Make <http://savannah.gnu.org/projects/make>`_ 3.79, 3.79.1 Makefile/build processor\ :sup:`3`; =========================================================== ============ ==========================================. .. note::. #. Only needed if you want to run the automated test suite in the; ``llvm/test`` directory.; #. Optional, adds compression / uncompression capabilities to selected LLVM; tools.; #. Optional, you can use any other build tool supported by CMake. Additionally, your compilation host is expected to have the usual plethora of; Unix utilities. Specifically:. * **ar** --- archive library builder; * **bzip2** --- bzip2 command for distribution generation; * **bunzip2** --- bunzip2 command for distribution checking; * **chmod** --- change permissions on a file; * **cat** --- output concatenation utility; * **cp** --- copy files; * **date** --- print the current date/time; * **echo** --- print to standard output; * **egrep** --- extended regular expression search utility; * **find** --- find files/dirs in a file system; * **grep** --- regular expression search utility; * **gzip** --- gzip command for distribution generation; * **gunzip** --- gunzip command for distribution checking; * **install** --- install directories/files; * **mkdir** ---",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:11171,test,test,11171,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,2,['test'],['test']
Testability,"se the Hello pass does not modify; the program in any interesting way, we just throw away the result of; :program:`opt` (sending it to ``/dev/null``). To see what happened to the other string you registered, try running; :program:`opt` with the :option:`-help` option:. .. code-block:: console. $ opt -load lib/LLVMHello.so -help; OVERVIEW: llvm .bc -> .bc modular optimizer and analysis printer. USAGE: opt [subcommand] [options] <input bitcode file>. OPTIONS:; Optimizations available:; ...; -guard-widening - Widen guards; -gvn - Global Value Numbering; -gvn-hoist - Early GVN Hoisting of Expressions; -hello - Hello World Pass; -indvars - Induction Variable Simplification; -inferattrs - Infer set function attributes; ... The pass name gets added as the information string for your pass, giving some; documentation to users of :program:`opt`. Now that you have a working pass,; you would go ahead and make it do the cool transformations you want. Once you; get it all working and tested, it may become useful to find out how fast your; pass is. The :ref:`PassManager <writing-an-llvm-pass-passmanager>` provides a; nice command line option (:option:`-time-passes`) that allows you to get; information about the execution time of your pass along with the other passes; you queue up. For example:. .. code-block:: console. $ opt -load lib/LLVMHello.so -hello -time-passes < hello.bc > /dev/null; Hello: __main; Hello: puts; Hello: main; ===-------------------------------------------------------------------------===; ... Pass execution timing report ...; ===-------------------------------------------------------------------------===; Total Execution Time: 0.0007 seconds (0.0005 wall clock). ---User Time--- --User+System-- ---Wall Time--- --- Name ---; 0.0004 ( 55.3%) 0.0004 ( 55.3%) 0.0004 ( 75.7%) Bitcode Writer; 0.0003 ( 44.7%) 0.0003 ( 44.7%) 0.0001 ( 13.6%) Hello World Pass; 0.0000 ( 0.0%) 0.0000 ( 0.0%) 0.0001 ( 10.7%) Module Verifier; 0.0007 (100.0%) 0.0007 (100.0%) 0.0005 (100.0%)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst:9587,test,tested,9587,interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMPass.rst,1,['test'],['tested']
Testability,"se, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` datatype. A DAG node consists of an operator and zero or more; arguments (or operands). Each argument can be of any desired type. By using; another DAG node as an argument, an arbitrary graph of DAG nodes can be; built. The syntax of a ``dag`` instance is:. ``(`` *operator* *argument1*\ ``,`` *argument2*\ ``,`` ... ``)``. The operator must be present and must be a record. There can be zero or more; arguments, separated by commas. The operator and arguments can have three; formats. ====================== ========================================",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:50186,assert,assert,50186,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"se; --------; http://firehose.sandia.gov/. A Benchmark for the C/C++ Standard Library; ------------------------------------------; https://github.com/hiraditya/std-benchmark. OpenBenchmarking.org CPU / Processor Suite; ------------------------------------------; https://openbenchmarking.org/suite/pts/cpu. This is a subset of the; `Phoronix Test Suite <https://github.com/phoronix-test-suite/phoronix-test-suite/>`_; and is itself a collection of benchmark suites. Parboil Benchmarks; ------------------; http://impact.crhc.illinois.edu/parboil/parboil.aspx. MachSuite; ---------; https://breagen.github.io/MachSuite/. Rodinia; -------; http://lava.cs.virginia.edu/Rodinia/download_links.htm. Rodinia has already been partially included in; MultiSource/Benchmarks/Rodinia. Benchmarks still missing are:. * streamcluster; * particlefilter; * nw; * nn; * myocyte; * mummergpu; * lud; * leukocyte; * lavaMD; * kmeans; * hotspot3D; * heartwall; * cfd; * bfs; * b+tree. vecmathlib tests harness; ------------------------; https://bitbucket.org/eschnett/vecmathlib/wiki/Home. PARSEC; ------; http://parsec.cs.princeton.edu/. Graph500 reference implementations; ----------------------------------; https://github.com/graph500/graph500/tree/v2-spec. NAS Parallel Benchmarks; -----------------------; https://www.nas.nasa.gov/publications/npb.html. The official benchmark is written in Fortran, but an unofficial; C-translation is available as well:; https://github.com/benchmark-subsetting/NPB3.0-omp-C. DARPA HPCS SSCA#2 C/OpenMP reference implementation; ---------------------------------------------------; http://www.highproductivity.org/SSCABmks.htm. This web site does not exist any more, but there seems to be a copy of; some of the benchmarks; https://github.com/gtcasl/hpc-benchmarks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polym",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:3013,test,tests,3013,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['test'],['tests']
Testability,"se`` mode is preferred since it consumes; a lot less memory. Otherwise, the building process will very likely; fail due to insufficient memory. It's also a lot quicker to only build; the relevant back-ends (ARM and AArch64), since it's very unlikely that; you'll use an ARM board to cross-compile to other arches. If you're; running Compiler-RT tests, also include the x86 back-end, or some tests; will fail. .. code-block:: bash. cmake $LLVM_SRC_DIR -DCMAKE_BUILD_TYPE=Release \; -DLLVM_TARGETS_TO_BUILD=""ARM;X86;AArch64"". Other options you can use are:. .. code-block:: bash. Use Ninja instead of Make: ""-G Ninja""; Build with assertions on: ""-DLLVM_ENABLE_ASSERTIONS=True""; Local (non-sudo) install path: ""-DCMAKE_INSTALL_PREFIX=$HOME/llvm/install""; CPU flags: ""DCMAKE_C_FLAGS=-mcpu=cortex-a15"" (same for CXX_FLAGS). After that, just typing ``make -jN`` or ``ninja`` will build everything.; ``make -jN check-all`` or ``ninja check-all`` will run all compiler tests. For; running the test suite, please refer to :doc:`TestingGuide`. #. If you are building LLVM/Clang on an ARM board with 1G of memory or less,; please use ``gold`` rather then GNU ``ld``. In any case it is probably a good; idea to set up a swap partition, too. .. code-block:: bash. $ sudo ln -sf /usr/bin/ld /usr/bin/ld.gold. #. ARM development boards can be unstable and you may experience that cores; are disappearing, caches being flushed on every big.LITTLE switch, and; other similar issues. To help ease the effect of this, set the Linux; scheduler to ""performance"" on **all** cores using this little script:. .. code-block:: bash. # The code below requires the package 'cpufrequtils' to be installed.; for ((cpu=0; cpu<`grep -c proc /proc/cpuinfo`; cpu++)); do; sudo cpufreq-set -c $cpu -g performance; done. Remember to turn that off after the build, or you may risk burning your; CPU. Most modern kernels don't need that, so only use it if you have; problems. #. Running the build on SD cards is ok, but they are more pron",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst:2008,test,test,2008,interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToBuildOnARM.rst,1,['test'],['test']
Testability,"sed in place; of this option, which is especially useful in environments where the call; to ``lit`` is issued indirectly. .. option:: --filter-out=REGEXP. Filter out those tests whose name matches the regular expression specified in; ``REGEXP``. The environment variable ``LIT_FILTER_OUT`` can be also used in; place of this option, which is especially useful in environments where the; call to ``lit`` is issued indirectly. .. option:: --xfail=LIST. Treat those tests whose name is in the semicolon separated list ``LIST`` as; ``XFAIL``. This can be helpful when one does not want to modify the test; suite. The environment variable ``LIT_XFAIL`` can be also used in place of; this option, which is especially useful in environments where the call to; ``lit`` is issued indirectly. A test name can specified as a file name relative to the test suite directory.; For example:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;offloading/memory_manager.cpp"". In this case, all of the following tests are treated as ``XFAIL``:. .. code-block:: none. libomp :: affinity/kmp-hw-subset.c; libomptarget :: nvptx64-nvidia-cuda :: offloading/memory_manager.cpp; libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp. Alternatively, a test name can be specified as the full test name; reported in LIT output. For example, we can adjust the previous; example not to treat the ``nvptx64-nvidia-cuda`` version of; ``offloading/memory_manager.cpp`` as XFAIL:. .. code-block:: none. LIT_XFAIL=""affinity/kmp-hw-subset.c;libomptarget :: x86_64-pc-linux-gnu :: offloading/memory_manager.cpp"". .. option:: --xfail-not=LIST. Do not treat the specified tests as ``XFAIL``. The environment variable; ``LIT_XFAIL_NOT`` can also be used in place of this option. The syntax is the; same as for :option:`--xfail` and ``LIT_XFAIL``. :option:`--xfail-not` and; ``LIT_XFAIL_NOT`` always override all other ``XFAIL`` specifications,; including an :option:`--xfail` appearing later on the command line. The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:9253,test,tests,9253,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"sed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel execution on separate machines (say in a large; testing farm). .. option:: --order={lexical,random,smart}. Define the order in which tests are run. The supported values are:. - lexical - tests will be run in lexical order according to the test file; path. This option is useful when predictable test order is desired. - random - tests will be run in random order. - smart - tests that failed previously will be run first, then the remaining; tests, all in descending execution time order. This is the default as it; optimizes concurrency. .. option:: --run-shard=N. Select which shard to run, assuming the ``--num-shards=M`` option was; provided. The two options must be used together, and the value of ``N``; must be in the range ``1..M``. The environment variable; ``LIT_RUN_SHARD`` can also be used in place of this option. .. option:: --timeout=N. Spend at most ``N`` seconds (approximately) running each individual test.; ``0`` means no time limit, and ``0`` is the default. Note that this is not an; alias for :option:`--max-time`; the two are different kinds of maximums. .. option:: --filter=REGEXP. Run only those tests whose name matches the regular expression specified in; ``REGEXP``. The environment variable ``LIT_FILTER`` can be also used in place; of this option, which ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:7296,test,test,7296,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"sense. Doing so makes it; basically impossible to support C like languages. Besides that,; certifying a register based language as safe at run time would be a; pretty expensive operation to have to do. Additionally, we would like; to be able to statically eliminate many bounds checks in Java; programs... for example. 2. Instead, we can do the following (eventually): ; * Java bytecode is used as our ""safe"" representation (to avoid; reinventing something that we don't add much value to). When the; user chooses to execute Java bytecodes directly (ie, not; precompiled) the runtime compiler can do some very simple; transformations (JIT style) to convert it into valid input for our; VM. Performance is not wonderful, but it works right.; * The file is scheduled to be compiled (rigorously) at a later; time. This could be done by some background process or by a second; processor in the system during idle time or something...; * To keep things ""safe"" ie to enforce a sandbox on Java/foreign code,; we could sign the generated VM code with a host specific private; key. Then before the code is executed/loaded, we can check to see if; the trusted compiler generated the code. This would be much quicker; than having to validate consistency (especially if bounds checks have; been removed, for example). > This is important because the audiences for these two goals are very; > different. Architects and many compiler people care much more about; > the second question. The Java compiler and OS community care much more; > about the first one. 3. By focusing on a more low level virtual machine, we have much more room; for value add. The nice safe ""sandbox"" VM can be provided as a layer; on top of it. It also lets us focus on the more interesting compilers; related projects. > 2. Design issues to consider (an initial list that we should continue; > to modify). Note that I'm not trying to suggest actual solutions here,; > but just various directions we can pursue:. Understood. :). > a. A sing",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2000-11-18-EarlyDesignIdeasResp.txt:1685,sandbox,sandbox,1685,interpreter/llvm-project/llvm/docs/HistoricalNotes/2000-11-18-EarlyDesignIdeasResp.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HistoricalNotes/2000-11-18-EarlyDesignIdeasResp.txt,1,['sandbox'],['sandbox']
Testability,"sent your instruction. #. ``llvm/include/llvm/IR/InstVisitor.h``:. add a prototype for a visitor to your new instruction type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add a new token to parse your instruction from assembly text file. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add the grammar on how your instruction can be read and what it will; construct as a result. #. ``llvm/lib/Bitcode/Reader/BitcodeReader.cpp``:. add a case for your instruction and how it will be parsed from bitcode. #. ``llvm/lib/Bitcode/Writer/BitcodeWriter.cpp``:. add a case for your instruction and how it will be parsed from bitcode. #. ``llvm/lib/IR/Instruction.cpp``:. add a case for how your instruction will be printed out to assembly. #. ``llvm/lib/IR/Instructions.cpp``:. implement the class you defined in ``llvm/include/llvm/Instructions.h``. #. Test your instruction. #. ``llvm/lib/Target/*``:. add support for your instruction to code generators, or add a lowering pass. #. ``llvm/test/*``:. add your test cases to the test suite. Also, you need to implement (or modify) any analyses or passes that you want to; understand this new instruction. Adding a new type; =================. .. warning::. Adding new types changes the bitcode format, and will break compatibility with; currently-existing LLVM installations. Only add new types if it is absolutely; necessary. Adding a fundamental type; -------------------------. #. ``llvm/include/llvm/IR/Type.h``:. add enum for the new type; add static ``Type*`` for this type. #. ``llvm/lib/IR/Type.cpp`` and ``llvm/lib/CodeGen/ValueTypes.cpp``:. add mapping from ``TypeID`` => ``Type*``; initialize the static ``Type*``. #. ``llvm/include/llvm-c/Core.h`` and ``llvm/lib/IR/Core.cpp``:. add enum ``LLVMTypeKind`` and modify; ``LLVMTypeKind LLVMGetTypeKind(LLVMTypeRef Ty)`` for the new type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add ability to parse in the type from text assembly. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add a token for that type. #. ``llvm/lib/",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:9519,test,test,9519,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,2,['test'],['test']
Testability,"senting numbers into numbers. .. code-block:: objc. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-ObjCProperty:. osx.ObjCProperty (ObjC); """"""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Objective-C properties. .. code-block:: objc. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-SecKeychainAPI:. osx.SecKeychainAPI (C); """"""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Secure Keychain APIs. .. literalinclude:: checkers/seckeychainapi_example.m; :language: objc. .. _osx-cocoa-AtSync:. osx.cocoa.AtSync (ObjC); """"""""""""""""""""""""""""""""""""""""""""""; Check for nil pointers used as mutexes for @synchronized. .. code-block:: objc. void test(id x) {; if (!x); @synchronized(x) {} // warn: nil value used as mutex; }. void test() {; id y;; @synchronized(y) {} // warn: uninitialized value used as mutex; }. .. _osx-cocoa-AutoreleaseWrite:. osx.cocoa.AutoreleaseWrite; """"""""""""""""""""""""""""""""""""""""""""""""""""; Warn about potentially crashing writes to autoreleasing objects from different autoreleasing pools in Objective-C. .. _osx-cocoa-ClassRelease:. osx.cocoa.ClassRelease (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for sending 'retain', 'release', or 'autorelease' directly to a Class. .. code-block:: objc. @interface MyClass : NSObject; @end. void test(void) {; [MyClass release]; // warn; }. .. _osx-cocoa-Dealloc:. osx.cocoa.Dealloc (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C classes that lack a correct implementation of -dealloc. .. literalinclude:: checkers/dealloc_example.m; :language: objc. .. _osx-cocoa-IncompatibleMethodTypes:. osx.cocoa.IncompatibleMethodTypes (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about Objective-C method signatures wi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:36181,test,test,36181,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"sequence. :program:`llvm-strings` looks for strings in each ``input`` file specified.; Unlike GNU :program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1545,test,test,1545,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"served.; #; # For the licensing terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building ROOT TMVA tests.; # @author Kim Albertsson; ############################################################################. # Tests using google test; ROOT_ADD_GTEST(TestRandomGenerator; TestRandomGenerator.cxx; LIBRARIES TMVA); ROOT_ADD_GTEST(TestOptimizeConfigParameters; TestOptimizeConfigParameters.cxx; LIBRARIES TMVA). if(dataframe); # RTensor; ROOT_ADD_GTEST(rtensor rtensor.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-iterator rtensor_iterator.cxx LIBRARIES ROOTVecOps TMVA); ROOT_ADD_GTEST(rtensor-utils rtensor_utils.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RStandardScaler; ROOT_ADD_GTEST(rstandardscaler rstandardscaler.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # RReader; ROOT_ADD_GTEST(rreader rreader.cxx LIBRARIES ROOTVecOps TMVA ROOTDataFrame); # Tree inference system and user interface; # Commented out right now because RBDT doesn't provide low-level interfaces; # since the sync with FastForest. Only the construction from XGBoost models; # is supported. If this feature becomes necessary to implement, one can; # resurrect these tests.; # ROOT_ADD_GTEST(branchlessForest branchlessForest.cxx LIBRARIES TMVA); # ROOT_ADD_GTEST(rbdt rbdt.cxx LIBRARIES ROOTVecOps TMVAUtils); endif(). if(dataframe); find_python_module(xgboost QUIET); if (PY_XGBOOST_FOUND); ROOT_ADD_PYUNITTEST(rbdt_xgboost rbdt_xgboost.py); endif(); endif(). #--stressTMVA--------------------------------------------------------------------------------------. ROOT_EXECUTABLE(stressTMVA stressTMVA.cxx LIBRARIES TMVA). if(tmva-gpu); target_compile_definitions(stressTMVA PRIVATE DNNCUDA); endif(). if(tmva-cpu); target_compile_definitions(stressTMVA PRIVATE DNNCPU); endif(). ROOT_ADD_TEST(test-stresstmva COMMAND stressTMVA -b LABELS longtest TIMEOUT 1800); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt:1379,test,tests,1379,tmva/tmva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/CMakeLists.txt,2,['test'],"['test-stresstmva', 'tests']"
Testability,"server base; add also two new methods:. TProof::SetDataSetTreeName(<dataset>,<treename>):; set/change the default tree name in the TFileCollection;; TProof::ExistsDataSet(<dataset>):; check; by-name the availability of a given dataset;. In ProofBench, . Load the macro before executing it. This allows to; circumvent a problem recently fixed giving less dependency on the; server version.; In make_dset.C, simplification of the body and of the; signature, eliminating one redundant argument. In TProofOutputFile, improve flexibility in defining the; URL for the local files server. The ""LOCALDATASERVER"" env is tested,; which can defined with placeholders via the xpd.putenv directive in the; xrootd/xproofd config files.; Improving parsing of lines with memory info.; This solves occasional crashes while generating the memory; plots.; In TProofMgr::GetSessionLogs:. add the possibility to postpone the retrieval of the; logs files when the TProofLog object is created. This improved; functionality is exploited in the log window.; add decoding of the session starting time and full; information about the master URL. Enable new xrootd configuration options, including the; possibility to set the compiler and linker; Cleanup of the TProofMgr functions DetachSession and; ShutdownSession, and better handling of the internal list registration,; to fix potential segvs when reopening a PROOF session inside the same; ROOT session.; Optimize the way results are transferred and merged:. Output objects are added to the same TMessage until a; HWM is reached (default 1MB; controlled by 'ProofServ.MsgSizeHWM');; this limits the number of transfers in the case of large numbers of; small objects.; Reasonably small histograms (GetSize() <; MsgSizeHWM) are merged in one-go at the end instead of one-by-one to; exploit, for example, the better performance of TH1::Merge on the full; list of histos.; Add possibility to compress the messages; this is; controlled by ProofServ.CompressMessage; <compression_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:6213,log,log,6213,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['log'],['log']
Testability,"ses are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. alpha.security; ^^^^^^^^^^^^^^. .. _alpha-security-ArrayBound:. alpha.security.ArrayBound (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (older checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a;; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. .. _alpha-security-ArrayBoundV2:. alpha.security.ArrayBoundV2 (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about buffer overflows (newer checker). .. code-block:: c. void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. .. _alpha-security-MallocOverflow:. alpha.security.MallocOverflow (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for overflows in the arguments to ``malloc()``.; It tries to catch ``malloc(n * c)`` patterns, where:. - ``n``: a variable or member access of an object; - ``c``: a constant foldable integral. This checker was designed for code audits, so expect false-positive reports.; One is supposed to silence this checker by ensuring proper bounds checking on; the variable in question using e.g. an ``assert()`` or a branch. .. code-block:: c. void test(int n) {; vo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:61051,test,test,61051,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREA",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:22579,test,test,22579,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ses options from the environment variable; ``LLVM_SYMBOLIZER_OPTS`` after parsing options from the command line.; ``LLVM_SYMBOLIZER_OPTS`` is primarily useful for supplementing the command-line; options when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 629559",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2679,test,test,2679,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"ses the question:; if the returned value is smaller than the register, what do the high bits hold?. There are three (interesting) possible answers: undefined, zero extended, or; sign extended. The number of bits in question depends on the data-type that; the front-end is referencing (typically i1/i8/i16/i32). Knowing the answer to this is important for two reasons: 1) we want to be able; to implement the ABI correctly. If we need to sign extend the result according; to the ABI, we really really do need to do this to preserve correctness. 2); this information is often useful for optimization purposes, and we want the; mid-level optimizers to be able to process this (e.g. eliminate redundant; extensions). For example, lets pretend that X86 requires the caller to properly extend the; result of a return (I'm not sure this is the case, but the argument doesn't; depend on this). Given this, we should compile this:. int a();; short b() { return a(); }. into:. _b:; 	subl	$12, %esp; 	call	L_a$stub; 	addl	$12, %esp; 	cwtl; 	ret. An optimization example is that we should be able to eliminate the explicit; sign extension in this example:. short y();; int z() {; return ((int)y() << 16) >> 16;; }. _z:; 	subl	$12, %esp; 	call	_y; 	;; movswl %ax, %eax -> not needed because eax is already sext'd; 	addl	$12, %esp; 	ret. //===----------------------------------------------------------------------===//; // What we have right now.; //===----------------------------------------------------------------------===//. Currently, these sorts of things are modelled by compiling a function to return; the small type and a signext/zeroext marker is used. For example, we compile; Z into:. define i32 @z() nounwind {; entry:; 	%0 = tail call signext i16 (...)* @y() nounwind; 	%1 = sext i16 %0 to i32; 	ret i32 %1; }. and b into:. define signext i16 @b() nounwind {; entry:; 	%0 = tail call i32 (...)* @a() nounwind		; <i32> [#uses=1]; 	%retval12 = trunc i32 %0 to i16		; <i16> [#uses=1]; 	ret i16 %retval1",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt:1387,stub,stub,1387,interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendedIntegerResults.txt,1,['stub'],['stub']
Testability,"set(LLVM_LINK_COMPONENTS; AllTargetsAsmParsers; AllTargetsCodeGens; AllTargetsDescs; AllTargetsDisassemblers; AllTargetsInfos; BitReader; Core; MCDisassembler; Object; Support; Target; ). # We should only have llvm-c-test use libLLVM if libLLVM is built with the; # default list of components. Using libLLVM with custom components can result in; # build failures. set (USE_LLVM_DYLIB FALSE). if (TARGET LLVM); set (USE_LLVM_DYLIB TRUE); if (DEFINED LLVM_DYLIB_COMPONENTS); foreach(c in ${LLVM_LINK_COMPONENTS}); list(FIND LLVM_DYLIB_COMPONENTS ${c} C_IDX); if (C_IDX EQUAL -1); set(USE_LLVM_DYLIB FALSE); break(); endif(); endforeach(); endif(); endif(). if(USE_LLVM_DYLIB); set(LLVM_LINK_COMPONENTS); endif(). if (LLVM_COMPILER_IS_GCC_COMPATIBLE); set(CMAKE_C_FLAGS ""${CMAKE_C_FLAGS} -std=gnu99 -Wstrict-prototypes""); endif (). add_llvm_tool(llvm-c-test; attributes.c; calc.c; debuginfo.c; diagnostic.c; disassemble.c; echo.cpp; helpers.c; include-all.c; main.c; module.c; metadata.c; object.c; targets.c; ). if(USE_LLVM_DYLIB); target_link_libraries(llvm-c-test LLVM); endif(); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt:217,test,test,217,interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-c-test/CMakeLists.txt,3,['test'],['test']
Testability,set(LLVM_LINK_COMPONENTS; Core; Support; TargetParser; ). add_clang_executable(clang-import-test; clang-import-test.cpp; DEPENDS; intrinsics_gen; ). set(CLANG_IMPORT_TEST_LIB_DEPS; clangAST; clangBasic; clangCodeGen; clangDriver; clangFrontend; clangLex; clangParse; clangSerialization; ). clang_target_link_libraries(clang-import-test; PRIVATE; ${CLANG_IMPORT_TEST_LIB_DEPS}; ); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt:92,test,test,92,interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/clang-import-test/CMakeLists.txt,3,['test'],['test']
Testability,set(LLVM_LINK_COMPONENTS; Support); add_clang_executable(apinotes-test; APINotesTest.cpp; ); clang_target_link_libraries(apinotes-test PRIVATE; clangAPINotes); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt:66,test,test,66,interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/apinotes-test/CMakeLists.txt,2,['test'],['test']
Testability,set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(arcmt-test; arcmt-test.cpp; ). clang_target_link_libraries(arcmt-test; PRIVATE; clangARCMigrate; clangBasic; clangFrontend; clangLex; clangSerialization; ); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt:65,test,test,65,interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/arcmt-test/CMakeLists.txt,3,['test'],['test']
Testability,"set(LLVM_LINK_COMPONENTS; support; ). add_clang_executable(c-index-test; c-index-test.c; core_main.cpp; ). if(NOT MSVC); set_property(; SOURCE c-index-test.c; PROPERTY COMPILE_FLAGS ""-std=gnu89""; ); endif(). if (LLVM_BUILD_STATIC); target_link_libraries(c-index-test; PRIVATE; libclang_static; clangCodeGen; clangIndex; ); else(); target_link_libraries(c-index-test; PRIVATE; libclang; clangAST; clangBasic; clangCodeGen; clangFrontend; clangIndex; clangSerialization; ); endif(). set_target_properties(c-index-test; PROPERTIES; LINKER_LANGUAGE CXX). # If libxml2 is available, make it available for c-index-test.; if (CLANG_HAVE_LIBXML); target_link_libraries(c-index-test PRIVATE LibXml2::LibXml2); endif(). if (NOT LLVM_INSTALL_TOOLCHAIN_ONLY); if(INTERNAL_INSTALL_PREFIX); set(INSTALL_DESTINATION ""${INTERNAL_INSTALL_PREFIX}/bin""); set_property(TARGET c-index-test APPEND PROPERTY INSTALL_RPATH; ""@executable_path/../../lib""); else(); set(INSTALL_DESTINATION ""${CMAKE_INSTALL_BINDIR}""); endif(). install(TARGETS c-index-test; RUNTIME DESTINATION ""${INSTALL_DESTINATION}""; COMPONENT c-index-test). if (NOT LLVM_ENABLE_IDE); add_llvm_install_targets(install-c-index-test; DEPENDS c-index-test; COMPONENT c-index-test); endif(); endif(); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt:67,test,test,67,interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/tools/c-index-test/CMakeLists.txt,14,['test'],['test']
Testability,"sets corresponding to addresses within a given set of globals. LLVM's; `control flow integrity`_ implementation uses this metadata to efficiently; check (at each call site) that a given address corresponds to either a; valid vtable or function pointer for a given class or function type, and its; whole-program devirtualization pass uses the metadata to identify potential; callees for a given virtual call. To use the mechanism, a client creates metadata nodes with two elements:. 1. a byte offset into the global (generally zero for functions); 2. a metadata object representing an identifier for the type. These metadata nodes are associated with globals by using global object; metadata attachments with the ``!type`` metadata kind. Each type identifier must exclusively identify either global variables; or functions. .. admonition:: Limitation. The current implementation only supports attaching metadata to functions on; the x86-32 and x86-64 architectures. An intrinsic, :ref:`llvm.type.test <type.test>`, is used to test whether a; given pointer is associated with a type identifier. .. _control flow integrity: https://clang.llvm.org/docs/ControlFlowIntegrity.html. Representing Type Information using Type Metadata; =================================================. This section describes how Clang represents C++ type information associated with; virtual tables using type metadata. Consider the following inheritance hierarchy:. .. code-block:: c++. struct A {; virtual void f();; };. struct B : A {; virtual void f();; virtual void g();; };. struct C {; virtual void h();; };. struct D : A, C {; virtual void f();; virtual void h();; };. The virtual table objects for A, B, C and D look like this (under the Itanium ABI):. .. csv-table:: Virtual Table Layout for A, B, C, D; :header: Class, 0, 1, 2, 3, 4, 5, 6. A, A::offset-to-top, &A::rtti, &A::f; B, B::offset-to-top, &B::rtti, &B::f, &B::g; C, C::offset-to-top, &C::rtti, &C::h; D, D::offset-to-top, &D::rtti, &D::f, &D::h, D::offse",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:1125,test,test,1125,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,1,['test'],['test']
Testability,"sgraphics-interpreted; COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressGraphics.cxx; FAILREGEX ""FAILED|Error in""; DEPENDS test-stressgraphics); if(CHROME_EXECUTABLE); ROOT_ADD_TEST(test-stressgraphics-chrome; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgc --web=chrome; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); if(FIREFOX_EXECUTABLE AND NOT APPLE); ROOT_ADD_TEST(test-stressgraphics-firefox-skip3d; RUN_SERIAL; ENVIRONMENT LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/lib:$ENV{LD_LIBRARY_PATH}; COMMAND stressGraphics -b -k -p=sgf --web=firefox -skip3d; FAILREGEX ""FAILED|Error in""; LABELS longtest); endif(); endif(). #--stressHistogram------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressHistogram stressHistogram.cxx LIBRARIES Hist RIO); ROOT_ADD_TEST(test-stresshistogram COMMAND stressHistogram FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stresshistogram-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistogram.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistogram ). #--stressGUI---------------------------------------------------------------------------------------; if(ROOT_asimage_FOUND); ROOT_EXECUTABLE(stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector-------------------------------------------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:9586,test,test-stresshistogram,9586,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,2,['test'],"['test-stresshistogram', 'test-stresshistogram-interpreted']"
Testability,should be built or installed. Please refer to `the following instructions; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator#build-instructions>`_; for more details. Clang will expect the ``llvm-spirv`` executable to; be present in the ``PATH`` environment variable. Clang uses ``llvm-spirv``; with `the widely adopted assembly syntax package; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator/#build-with-spirv-tools>`_. `The versioning; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator/releases>`_ of; ``llvm-spirv`` is aligned with Clang major releases. The same applies to the; main development branch. It is therefore important to ensure the ``llvm-spirv``; version is in alignment with the Clang version. For troubleshooting purposes; ``llvm-spirv`` can be `tested in isolation; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator#test-instructions>`_. Example usage for OpenCL kernel compilation:. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. Both invocations of Clang will result in the generation of a SPIR-V binary file; `test.o` for 32 bit and 64 bit respectively. This file can be imported; by an OpenCL driver that support SPIR-V consumption or it can be compiled; further by offline SPIR-V consumer tools. Converting to SPIR-V produced with the optimization levels other than `-O0` is; currently available as an experimental feature and it is not guaranteed to work; in all cases. Clang also supports integrated generation of SPIR-V without use of ``llvm-spirv``; tool as an experimental feature when ``-fintegrated-objemitter`` flag is passed in; the command line. .. code-block:: console. $ clang --target=spirv32 -fintegrated-objemitter -c test.cl. Note that only very basic functionality is supported at this point and therefore; it is not suitable for arbitrary use cases. This feature is only enabled when clang; build is configured with ``-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=SPIRV`` option. Linking is done,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:166747,test,test,166747,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"sic splits a floating point value into a normalized; fractional component and integral exponent. For a non-zero argument, returns the argument multiplied by some power; of two such that the absolute value of the returned value is in the; range [0.5, 1.0), with the same sign as the argument. The second; result is an integer such that the first result raised to the power of; the second result is the input argument. If the argument is a zero, returns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:567824,log,log,567824,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"sic; function and then be turned into an instruction if warranted. #. ``llvm/docs/LangRef.html``:. Document the intrinsic. Decide whether it is code generator specific and; what the restrictions are. Talk to other people about it so that you are; sure it's a good idea. #. ``llvm/include/llvm/IR/Intrinsics*.td``:. Add an entry for your intrinsic. Describe its memory access; characteristics for optimization (this controls whether it will be; DCE'd, CSE'd, etc). If any arguments need to be immediates, these; must be indicated with the ImmArg property. Note that any intrinsic; using one of the ``llvm_any*_ty`` types for an argument or return; type will be deemed by ``tblgen`` as overloaded and the; corresponding suffix will be required on the intrinsic's name. #. ``llvm/lib/Analysis/ConstantFolding.cpp``:. If it is possible to constant fold your intrinsic, add support to it in the; ``canConstantFoldCallTo`` and ``ConstantFoldCall`` functions. #. ``llvm/test/*``:. Add test cases for your test cases to the test suite. Once the intrinsic has been added to the system, you must add code generator; support for it. Generally you must do the following steps:. Add support to the .td file for the target(s) of your choice in; ``lib/Target/*/*.td``. This is usually a matter of adding a pattern to the .td file that matches the; intrinsic, though it may obviously require adding the instructions you want to; generate as well. There are lots of examples in the PowerPC and X86 backend; to follow. Adding a new SelectionDAG node; ==============================. As with intrinsics, adding a new SelectionDAG node to LLVM is much easier than; adding a new instruction. New nodes are often added to help represent; instructions common to many targets. These nodes often map to an LLVM; instruction (add, sub) or intrinsic (byteswap, population count). In other; cases, new nodes have been added to allow many targets to perform a common task; (converting between floating point and integer represent",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:2832,test,test,2832,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,3,['test'],['test']
Testability,"sing latency for the OpenCL builtin; declarations is to use mechanism enabled by :ref:`-fdeclare-opencl-builtins; <opencl_fdeclare_opencl_builtins>` flag that is available as an alternative; feature. .. _opencl_fdeclare_opencl_builtins:. .. option:: -fdeclare-opencl-builtins. In addition to regular header includes with builtin types and functions using; :ref:`-finclude-default-header <opencl_finclude_default_header>`, clang; supports a fast mechanism to declare builtin functions with; ``-fdeclare-opencl-builtins``. This does not declare the builtin types and; therefore it has to be used in combination with ``-finclude-default-header``; if full functionality is required. **Example of Use**:. .. code-block:: console. $ clang -Xclang -fdeclare-opencl-builtins test.cl. .. _opencl_fake_address_space_map:. .. option:: -ffake-address-space-map. Overrides the target address space map with a fake map.; This allows adding explicit address space IDs to the bitcode for non-segmented; memory architectures that do not have separate IDs for each of the OpenCL; logical address spaces by default. Passing ``-ffake-address-space-map`` will; add/override address spaces of the target compiled for with the following values:; ``1-global``, ``2-constant``, ``3-local``, ``4-generic``. The private address; space is represented by the absence of an address space attribute in the IR (see; also :ref:`the section on the address space attribute <opencl_addrsp>`). .. code-block:: console. $ clang -cc1 -ffake-address-space-map test.cl. .. _opencl_builtins:. OpenCL builtins; ---------------. **Clang builtins**. There are some standard OpenCL functions that are implemented as Clang builtins:. - All pipe functions from `section 6.13.16.2/6.13.16.3; <https://www.khronos.org/registry/cl/specs/opencl-2.0-openclc.pdf#160>`_ of; the OpenCL v2.0 kernel language specification. - Address space qualifier conversion functions ``to_global``/``to_local``/``to_private``; from `section 6.13.9; <https://www.khronos.o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:5289,log,logical,5289,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['log'],['logical']
Testability,"sins.C Demonstrates use of; FeldmanCousins interval calculator with a Poisson problem, reproduces; results from table IV and V of the original; paper�Phys.Rev.D57:3873-3889,1998.; rs401d_FeldmanCousins.C Demonstrates use of; FeldmanCousins interval calculator with the neutrino oscillation toy; example described in the original paper�Phys.Rev.D57:3873-3889,1998.; Reproduces figure 12.; rs_bernsteinCorrection.C Demonstrates use of; BernsteinCorrection class, which corrects a nominal PDF with a polynomial; to agree with observed or simulated data. TestStatistic interface and implementations; We added a new interface class called TestStatistic. It defines the; method Evaluate(data, parameterPoint), which returns a double. �This; class can be used in�conjunction�with the ToyMCSampler class to generate; sampling distributions for a user-defined test statistic. �; The following concrete implementations of the TestStatistic interface; are currently available. ProfileLikelihoodTestStatReturns the log of profile; likelihood ratio. �Generally a powerful test statistic. ; NumEventsTestStatReturns the number of events in the; dataset. �Useful for number counting experiments.; DebuggingTestStat Simply returns a uniform random number; between 0,1. �Useful for debugging. SamplingDistribution and the�TestStatSampler interface and; implementations; We introduced a ``result'' or data model class called; SamplingDistribution, which holds the sampling distribution of an; arbitrary real valued test statistic. �The class also can return the; inverse of the cumulative distribution function (with or without; interpolation). �; We introduced an interface for any tool that can produce a; SamplingDistribution, called TestStatSampler. �The interface is; essentially GetSamplingDistribution(parameterPoint) which returns a; SamplingDistribution based on a given probability density function. �We; foresee a few versions of this tool based on toy Monte Carlo, importance; sampling, Fourier transforms, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:26249,log,log,26249,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['log'],['log']
Testability,"sion is uninitialized; }. .. _core-uninitialized-Branch:. core.uninitialized.Branch (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as branch conditions. .. code-block:: c. void test() {; int x;; if (x) // warn; return;; }. .. _core-uninitialized-CapturedBlockVariable:. core.uninitialized.CapturedBlockVariable (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for blocks that capture uninitialized values. .. code-block:: c. void test() {; int x;; ^{ int y = x; }(); // warn; }. .. _core-uninitialized-UndefReturn:. core.uninitialized.UndefReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values being returned to the caller. .. code-block:: c. int test() {; int x;; return x; // warn; }. .. _core-uninitialized-NewArraySize:. core.uninitialized.NewArraySize (C++); """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". Check if the element count in new[] is garbage or undefined. .. code-block:: cpp. void test() {; int n;; int *arr = new int[n]; // warn: Element count in new[] is a garbage value; delete[] arr;; }. .. _cplusplus-checkers:. cplusplus; ^^^^^^^^^. C++ Checkers. .. _cplusplus-InnerPointer:. cplusplus.InnerPointer (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for inner pointers of C++ containers used after re/deallocation. Many container methods in the C++ standard library are known to invalidate; ""references"" (including actual references, iterators and raw pointers) to; elements of the container. Using such references after they are invalidated; causes undefined behavior, which is a common source of memory errors in C++ that; this checker is capable of finding. The checker is currently limited to ``std::string`` objects and doesn't; recognize some of the more sophisticated approaches to passing unowned pointers; around, such as ``std::string_view``. .. code-block:: cpp. void deref_after_assignment() {; std::string s = ""llvm"";; const char *c = s.data(); // note: pointer to inner buffer of 'std::string' obtained here; s = ""clang"";",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:7049,test,test,7049,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"sions as the JIT'd code no longer changes, only the; absolute symbol definition does. For process and library symbols the DynamicLibrarySearchGenerator utility (See; :ref:`How to Add Process and Library Symbols to JITDylibs; <ProcessAndLibrarySymbols>`) can be used to automatically build absolute; symbol mappings for you. However the absoluteSymbols function is still useful; for making non-global objects in your JIT visible to JIT'd code. For example,; imagine that your JIT standard library needs access to your JIT object to make; some calls. We could bake the address of your object into the library, but then; it would need to be recompiled for each session:. .. code-block:: c++. // From standard library for JIT'd code:. class MyJIT {; public:; void log(const char *Msg);; };. void log(const char *Msg) { ((MyJIT*)0x1234)->log(Msg); }. We can turn this into a symbolic reference in the JIT standard library:. .. code-block:: c++. extern MyJIT *__MyJITInstance;. void log(const char *Msg) { __MyJITInstance->log(Msg); }. And then make our JIT object visible to the JIT standard library with an; absolute symbol definition when the JIT is started:. .. code-block:: c++. MyJIT J = ...;. auto &JITStdLibJD = ... ;. JITStdLibJD.define(absoluteSymbols(SymbolMap({; { Mangle(""__MyJITInstance""),; { ExecutorAddr::fromPtr(&J), JITSymbolFlags() } }; });. Aliases and Reexports; ---------------------. Aliases and reexports allow you to define new symbols that map to existing; symbols. This can be useful for changing linkage relationships between symbols; across sessions without having to recompile code. For example, imagine that; JIT'd code has access to a log function, ``void log(const char*)`` for which; there are two implementations in the JIT standard library: ``log_fast`` and; ``log_detailed``. Your JIT can choose which one of these definitions will be; used when the ``log`` symbol is referenced by setting up an alias at JIT startup; time:. .. code-block:: c++. auto &JITStdLibJD = ...",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst:14724,log,log,14724,interpreter/llvm-project/llvm/docs/ORCv2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ORCv2.rst,2,['log'],['log']
Testability,"sis passes used in these transform passes.; PassBuilder PB;; PB.registerModuleAnalyses(*TheMAM);; PB.registerFunctionAnalyses(*TheFAM);; PB.crossRegisterProxies(*TheLAM, *TheFAM, *TheCGAM, *TheMAM);; }. Once the PassManager is set up, we need to make use of it. We do this by; running it after our newly created function is constructed (in; ``FunctionAST::codegen()``), but before it is returned to the client:. .. code-block:: c++. if (Value *RetVal = Body->codegen()) {; // Finish off the function.; Builder.CreateRet(RetVal);. // Validate the generated code, checking for consistency.; verifyFunction(*TheFunction);. // Optimize the function.; TheFPM->run(*TheFunction, *TheFAM);. return TheFunction;; }. As you can see, this is pretty straightforward. The; ``FunctionPassManager`` optimizes and updates the LLVM Function\* in; place, improving (hopefully) its body. With this in place, we can try; our test above again:. ::. ready> def test(x) (1+2+x)*(x+(1+2));; ready> Read function definition:; define double @test(double %x) {; entry:; %addtmp = fadd double %x, 3.000000e+00; %multmp = fmul double %addtmp, %addtmp; ret double %multmp; }. As expected, we now get our nicely optimized code, saving a floating; point add instruction from every execution of this function. LLVM provides a wide variety of optimizations that can be used in; certain circumstances. Some `documentation about the various; passes <../../Passes.html>`_ is available, but it isn't very complete.; Another good source of ideas can come from looking at the passes that; ``Clang`` runs to get started. The ""``opt``"" tool allows you to; experiment with passes from the command line, so you can see if they do; anything. Now that we have reasonable code coming out of our front-end, let's talk; about executing it!. Adding a JIT Compiler; =====================. Code that is available in LLVM IR can have a wide variety of tools; applied to it. For example, you can run optimizations on it (as we did; above), you can dump ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst:8704,test,test,8704,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl04.rst,2,['test'],['test']
Testability,"sisType=multiclass"". Training data is; specified with an additional classname, e.g. via; factory->AddTree(tree,""classname"");. After the; training a genetic algorithm is invoked to determine the best; cuts for selecting a specific class, based on the figure of; merit: purity*efficiency. TMVA comes with two examples in; $ROOTSYS/tmva/test: TMVAMulticlass.C; and TMVAMulticlassApplication.C. New TMVA event vector building. The code; for splitting the input data into training and test samples for; all classes and the mixing of those samples to one training and; one test sample has been rewritten completely. The new code is; more performant and has a clearer structure. This fixes several; bugs which have been reported by some users of TMVA.; Code and performance test framework: A unit; test framework for daily software and method performance; validation has been implemented.; . Methods. BDT Automatic parameter optimisation for building the; tree architecture: The optimisation procedure uses the; performance of the trained classifier on the ""test sample"" for; finding the set of optimal parameters. Two different methods to; traverse the parameter space are available (scanning, genetic; algorithm). Currently parameter optimization is implemented only; for these three parameters that influence the tree architectur:; the maximum depth of a tree, MaxDepth, the minimum; number of events in each node, NodeMinEvents, and; the number of tress, NTrees. Optimization can; is invoked by calling; factory->OptimizeAllMethods(); prior to the call; factory->TrainAllMethods();. Automated and configurable parameter optimization is soon to; be enabled for all methods (for those parameters where; optimization is applicable).; . BDT node splitting: While Decision Trees; typically have only univariate splits, in TMVA one can now; also opt for multivariate splits that use a ""Fisher; Discriminant"" (option: UseFisherCuts), built from all; observables that show correlations larger than some threshol",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html:1714,test,test,1714,tmva/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v528/index.html,1,['test'],['test']
Testability,"sis` mode). .. option:: --analysis-inconsistency-epsilon=<epsilon>. Specify the epsilon parameter used for detection of when the cluster; is different from the LLVM schedule profile values (`analysis` mode). .. option:: --analysis-display-unstable-clusters. If there is more than one benchmark for an opcode, said benchmarks may end up; not being clustered into the same cluster if the measured performance; characteristics are different. by default all such opcodes are filtered out.; This flag will instead show only such unstable opcodes. .. option:: --ignore-invalid-sched-class=false. If set, ignore instructions that do not have a sched class (class idx = 0). .. option:: --mtriple=<triple name>. Target triple. See `-version` for available targets. .. option:: --mcpu=<cpu name>. If set, measure the cpu characteristics using the counters for this CPU. This; is useful when creating new sched models (the host CPU is unknown to LLVM).; (`-mcpu=help` for details). .. option:: --analysis-override-benchmark-triple-and-cpu. By default, llvm-exegesis will analyze the benchmarks for the triple/CPU they; were measured for, but if you want to analyze them for some other combination; (specified via `-mtriple`/`-mcpu`), you can pass this flag. .. option:: --dump-object-to-disk=true. If set, llvm-exegesis will dump the generated code to a temporary file to; enable code inspection. Disabled by default. .. option:: --use-dummy-perf-counters. If set, llvm-exegesis will not read any real performance counters and; return a dummy value instead. This can be used to ensure a snippet doesn't; crash when hardware performance counters are unavailable and for; debugging :program:`llvm-exegesis` itself. .. option:: --execution-mode=[inprocess,subprocess]. This option specifies what execution mode to use. The `inprocess` execution; mode is the default. The `subprocess` execution mode allows for additional; features such as memory annotations but is currently restricted to X86-64; on Linux. .. optio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:17114,benchmark,benchmark-triple-and-cpu,17114,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark-triple-and-cpu']
Testability,"sitives by pruning off; false paths.; In order to exploit assertions, however, the analyzer must understand when it; encounters an ""assertion handler."" Typically assertions are; implemented with a macro, with the macro performing a check for the assertion; condition and, when the check fails, calling an assertion handler. For example, consider the following code; fragment:. void foo(int *p) {; assert(p != NULL);; }. When this code is preprocessed on Mac OS X it expands to the following:. void foo(int *p) {; (__builtin_expect(!(p != NULL), 0) ? __assert_rtn(__func__, ""t.c"", 4, ""p != NULL"") : (void)0);; }. In this example, the assertion handler is __assert_rtn. When called,; most assertion handlers typically print an error and terminate the program. The; analyzer can exploit such semantics by ending the analysis of a path once it; hits a call to an assertion handler.; The trick, however, is that the analyzer needs to know that a called function; is an assertion handler; otherwise the analyzer might assume the function call; returns and it will continue analyzing the path where the assertion condition; failed. This can lead to false positives, as the assertion condition usually; implies a safety condition (e.g., a pointer is not null) prior to performing; some action that depends on that condition (e.g., dereferencing a pointer).; The analyzer knows about several well-known assertion handlers, but can; automatically infer if a function should be treated as an assertion handler if; it is annotated with the 'noreturn' attribute or the (Clang-specific); 'analyzer_noreturn' attribute. Note that, currently, clang does not support; these attributes on Objective-C methods and C++ methods.; Attribute 'noreturn'; The 'noreturn' attribute is a GCC-attribute that can be placed on the; declarations of functions. It means exactly what its name implies: a function; with a 'noreturn' attribute should never return.; Specific details of the syntax of using the 'noreturn' attribute can b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:21097,assert,assertion,21097,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,2,['assert'],['assertion']
Testability,"size'. More information about the standard types and functions is provided in :ref:`the; section on the OpenCL Header <opencl_header>`. .. _opencl_cl_ext:. .. option:: -cl-ext. Enables/Disables support of OpenCL extensions and optional features. All OpenCL; targets set a list of extensions that they support. Clang allows to amend this using; the ``-cl-ext`` flag with a comma-separated list of extensions prefixed with; ``'+'`` or ``'-'``. The syntax: ``-cl-ext=<(['-'|'+']<extension>[,])+>``, where; extensions can be either one of `the OpenCL published extensions; <https://www.khronos.org/registry/OpenCL>`_; or any vendor extension. Alternatively, ``'all'`` can be used to enable; or disable all known extensions. Example disabling double support for the 64-bit SPIR-V target:. .. code-block:: console. $ clang -c --target=spirv64 -cl-ext=-cl_khr_fp64 test.cl. Enabling all extensions except double support in R600 AMD GPU can be done using:. .. code-block:: console. $ clang --target=r600 -cl-ext=-all,+cl_khr_fp16 test.cl. Note that some generic targets e.g. SPIR/SPIR-V enable all extensions/features in; clang by default. OpenCL Targets; --------------. OpenCL targets are derived from the regular Clang target classes. The OpenCL; specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:144565,test,test,144565,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"size`` -- The limit of origin chain length. Non-positive values; mean unlimited. Its default value is 16.; * ``origin_history_per_stack_limit`` -- The limit of origin node's references count.; Non-positive values mean unlimited. Its default value is 20000.; * ``store_context_size`` -- The depth limit of origin tracking stack traces. Its; default value is 20.; * ``zero_in_malloc`` -- Whether to zero shadow space of new allocated memory. Its; default value is true.; * ``zero_in_free`` --- Whether to zero shadow space of deallocated memory. Its; default value is true. Example; =======. DataFlowSanitizer supports up to 8 labels, to achieve low CPU and code; size overhead. Base labels are simply 8-bit unsigned integers that are; powers of 2 (i.e. 1, 2, 4, 8, ..., 128), and union labels are created; by ORing base labels. The following program demonstrates label propagation by checking that; the correct labels are propagated. .. code-block:: c++. #include <sanitizer/dfsan_interface.h>; #include <assert.h>. int main(void) {; int i = 100;; int j = 200;; int k = 300;; dfsan_label i_label = 1;; dfsan_label j_label = 2;; dfsan_label k_label = 4;; dfsan_set_label(i_label, &i, sizeof(i));; dfsan_set_label(j_label, &j, sizeof(j));; dfsan_set_label(k_label, &k, sizeof(k));. dfsan_label ij_label = dfsan_get_label(i + j);. assert(ij_label & i_label); // ij_label has i_label; assert(ij_label & j_label); // ij_label has j_label; assert(!(ij_label & k_label)); // ij_label doesn't have k_label; assert(ij_label == 3); // Verifies all of the above. // Or, equivalently:; assert(dfsan_has_label(ij_label, i_label));; assert(dfsan_has_label(ij_label, j_label));; assert(!dfsan_has_label(ij_label, k_label));. dfsan_label ijk_label = dfsan_get_label(i + j + k);. assert(ijk_label & i_label); // ijk_label has i_label; assert(ijk_label & j_label); // ijk_label has j_label; assert(ijk_label & k_label); // ijk_label has k_label; assert(ijk_label == 7); // Verifies all of the above. // Or, equivalently:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst:11078,assert,assert,11078,interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/DataFlowSanitizer.rst,1,['assert'],['assert']
Testability,"sleep is called inside a critical; // section; m.unlock();; }. alpha.unix.Chroot; (C); Check improper use of chroot. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. alpha.unix.PthreadLock; (C); Simple lock -> unlock checker; applies to:; pthread_mutex_lock; pthread_rwlock_rdlock; pthread_rwlock_wrlock; lck_mtx_lock; lck_rw_lock_exclusive; lck_rw_lock_shared; pthread_mutex_trylock; pthread_rwlock_tryrdlock; pthread_rwlock_tryrwlock; lck_mtx_try_lock; lck_rw_try_lock_exclusive; lck_rw_try_lock_shared; pthread_mutex_unlock; pthread_rwlock_unlock; lck_mtx_unlock; lck_rw_done. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. alpha.unix.SimpleStream; (C); Check for misuses of stream APIs:; fopen; fclose(demo checker, the subject of the demo; (Slides; ,Video); by Anna Zaks and Jordan Rose presented at the ; 2012 LLVM Developers' Meeting). void test() {; FILE *F = fopen(""myfile.txt"", ""w"");; } // warn: opened file is never closed. void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:13710,test,test,13710,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"sly not cover all OSs and distributions, so additional community; validation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release managers are:. * Even releases: Tom Stellard (tstellar@redhat.com); * Odd releases: Tobias Hieta (tobias@hieta.se). The official release testers are volunteered from the community and have; consistently validated and released binaries for their targets/OSs. To contact; them, you should post on the `Discourse forums (Project; Infrastructure - Release Testers). <https://discourse.llvm.org/c/infrastructure/release-testers/66>`_. The official testers list is in the file ``RELEASE_TESTERS.TXT``, in the ``LLVM``; repository. Community Testing; -----------------. Once all testing has been completed and appropriate bugs filed, the release; candidate tarballs are put on the website and the LLVM community is notified. We ask that all LLVM developers test the release in any the following ways:. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build LLVM. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the ``clang`` sources. Compile; everything. Run ``make check`` and the full LLVM test suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:8156,test,test,8156,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test']
Testability,"sn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the last four instructions with:. 	jp LBB1_1; 	je LBB1_5; LBB1_1:. We also codegen the inner ?: into a diamond:. cvtss2sd LCPI1_0(%rip), %xmm2; cvtss2sd LCPI1_1(%rip), %xmm3; ucomisd %xmm1, %xmm0; ja LBB1_3 # cond_true; LBB1_2: # cond_true; movapd %xmm3, %xmm2; LBB1_3: # cond_true; movapd %xmm2, %xmm0; ret. We should sink the load into xmm3 into the LBB1_2 block. This should; be pretty easy, and will nuke all the copies. //===---------------------------------------------------------------------===//. This:; #include <algorithm>; inline std::pair<unsigned, bool> full_add(unsigned a, unsigned b); { return std::make_pair(a + b, a + b < a); }; bool no_overflow(unsigned a, unsigned b); { return !full_add(a, b).second; }. Should compile to:; 	addl	%esi, %edi; 	setae	%al; 	movzbl	%al, %eax; 	ret. on x86-64, instead of the rather stupid-looking:; 	addl	%esi, %edi; 	setb	%al;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:14016,test,testb,14016,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['testb']
Testability,sor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDLCNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-MethodDL COMMA,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5714,test,testConvNetLossCpu,5714,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvNetLossCpu']
Testability,"specific parts of the target representation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backwards compatibility (with older implementations prior to; SPIR target support). For ""non-SPMD"" targets which cannot spawn multiple; work-items on the fly using hardware, which covers practically all non-GPU; devices such as CPUs and DSPs, additional processing is needed for the kernels; to support multiple work-item execution. For this, a 3rd party toolchain,; such as for example `POCL <http://portablecl.org/>`_, can be used. This target does not support multiple memory segments and, therefore, the fake; address space map can be added using the :ref:`-ffake-address-space-map; <opencl_fake_address_space_map>` flag. All known OpenCL extensions and features are set to supported in the generic targe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145794,test,test,145794,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"specify that a base type is a vector is; required. See ``DW_AT_LLVM_vector_size`` in :ref:`amdgpu-dwarf-base-type-entries`. .. _amdgpu-dwarf-operation-to-create-vector-composite-location-descriptions:. 2.10 DWARF Operations to Create Vector Composite Location Descriptions; ----------------------------------------------------------------------. AMDGPU optimized code may spill vector registers to non-global address space; memory, and this spilling may be done only for SIMT lanes that are active on; entry to the subprogram. To support this the CFI rule for the partially spilled; register needs to use an expression that uses the EXEC register as a bit mask to; select between the register (for inactive lanes) and the stack spill location; (for active lanes that are spilled). This needs to evaluate to a location; description, and not a value, as a debugger needs to change the value if the; user assigns to the variable. Another usage is to create an expression that evaluates to provide a vector of; logical PCs for active and inactive lanes in a SIMT execution model. Again the; EXEC register is used to select between active and inactive PC values. In order; to represent a vector of PC values, a way to create a composite location; description that is a vector of a single location is used. It may be possible to use existing DWARF to incrementally build the composite; location description, possibly using the DWARF operations for control flow to; create a loop. However, for the AMDGPU that would require loop iteration of 64.; A concern is that the resulting DWARF would have a significant size and would be; reasonably common as it is needed for every vector register that is spilled in a; function. AMDGPU can have up to 512 vector registers. Another concern is the; time taken to evaluate such non-trivial expressions repeatedly. To avoid these issues, a composite location description that can be created as a; masked select is proposed. In addition, an operation that creates a compo",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst:25321,log,logical,25321,interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,1,['log'],['logical']
Testability,"sponding value. Also,; if the string ends with '`!`', output neurons are set up for; classification, i.e. with a sigmoid (1 neuron) or softmax (more; neurons) activation function. Many questions on the good usage of neural network, including rules of; dumb to determine the best network topology are addressed at; <ftp://ftp.sas.com/pub/neural/FAQ.html>. ``` {.cpp}; // a simple network: 2 inputs, 10 hidden and 1 normalized; // output neuron; TMultiLayerPerceptron network(""r,z:10:@Br"",tree);; ```. Expressions are evaluated as for `TTree::Draw()`. Input and outputs; are taken from the **`TTree`** associated with the network. This; **`TTree`** can be given as argument of the constructor or defined; later with `TMultiLayerPerceptron::SetData()`. Events can also be; weighted. The weight expression can be given in the constructor or set; later with the method `SetWeight()` of the class; **`TMultiLayerPerceptron`**. Two datasets must be defined before; learning the network: a training dataset that is used when minimizing; the error, and a test dataset that will avoid bias. Those two datasets; can be built aside and then given to the network, or can be built from; a standard expression. By default, half of the events are put in both; datasets. ``` {.cpp}; // a more complex 4:8:1 network; // the ptsumf branch is used as weigh;; // default event lists are explicit; TMultiLayerPerceptron network(""m,pt,acol,acopl:8:type"",""pt"",tree,; ""Entry$%2"",""Entry$/2"");; ```. The method `TMultiLayerPerceptron::SetLearningMethod()` defines the; learning method. Learning methods are:. ```; TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS // default; ```. The training can start with; `TMultiLayerPerceptron::Train(Int_t nepoch,Option_t* options).` The; first argument is the number of epochs while option is a string that; can cont",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md:75756,test,test,75756,documentation/users-guide/FittingHistograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/FittingHistograms.md,1,['test'],['test']
Testability,"square and log likelihood; minimizations. The package has been originally developed by M. Winkler and F. James.; More information on the new C++ version can be found on the; [MINUIT Web Site](http://www.cern.ch/minuit). Minuit2, originally developed in the SEAL project, is now distributed within %ROOT.; The API has been then changed in this new version to follow the %ROOT coding convention; (function names starting with capital letters) and the classes have been moved inside; the namespace _ROOT::Minuit2_. In addition, the %ROOT distribution contains classes; needed to integrate Minuit2 in the %ROOT framework. A new class has been introduced, ROOT::Minuit2::Minuit2Minimizer, which implements; the interface ROOT::Math::Minimizer. Within %ROOT, it can be instantiates also using; the %ROOT plug-in manager. This class provides a convenient entry point for using Minuit2\.; An example of using this interface is the %ROOT tutorial _tutorials/fit/NumericalMinimization.C_; or the Minuit2 test program; [<tt>testMinimize.cxx</tt>](https://github.com/cxx-hep/root-cern/blob/master/math/minuit2/test/testMinimize.cxx). A standalone version of Minuit2 (independent of %ROOT) can be easily built and installed using `CMake`. See this [`README`](https://github.com/root-project/root/blob/master/math/minuit2/README.md) for the instructions on how to get the sources, building and installing a stand-alone Minuit2. The [Minuit2 User Guide](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html); provides all the information needed for using directly (without add-on packages like %ROOT) Minuit2. ## References. 1. F. James, _Fortran MINUIT Reference Manual_ ([html](https://cern-tex.web.cern.ch/cern-tex/minuit/minmain.html));; 2. F. James and M. Winkler, _C++ MINUIT User's Guide_ ([html](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.html) and [pdf](https://root.cern/root/htmldoc/guides/minuit2/Minuit2.pdf));; 3. F. James, _Minuit Tutorial on Function Minimization_ ([pdf](http://seal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.md:1485,test,test,1485,math/minuit2/doc/Minuit2.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/minuit2/doc/Minuit2.md,2,['test'],"['test', 'testMinimize']"
Testability,"src/HistFactoryImpl.cxx; src/HistFactoryModelUtils.cxx; src/HistFactoryNavigation.cxx; src/HistRef.cxx; src/HistoToWorkspaceFactoryFast.cxx; src/JSONTool.cxx; src/LinInterpVar.cxx; src/MakeModelAndMeasurementsFast.cxx; src/Measurement.cxx; src/ParamHistFunc.cxx; src/PiecewiseInterpolation.cxx; src/PreprocessFunction.cxx; src/RooBarlowBeestonLL.cxx; src/Sample.cxx; src/Systematics.cxx; ${HISTFACTORY_XML_SOURCES}; DICTIONARY_OPTIONS; ""-writeEmptyRootPCM""; LIBRARIES; RooBatchCompute; ${HISTFACTORY_XML_LIBRARIES}; DEPENDENCIES; RooFit; RooFitCore; Tree; RIO; Hist; Matrix; MathCore; Graf; Gpad; RooStats; RooFitJSONInterface; ${EXTRA_DICT_OPTS}; ). # For recent clang, this can facilitate auto-vectorisation.; # In RooFit, the errno side effect is not needed, anyway:; if(""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang""); target_compile_options(HistFactory PUBLIC -fno-math-errno); endif(). # The hist2workspace executable uses the HistFactory::ConfigParser to read the; # XML model specification. The ConfigParser is only built when xml is ON, so we; # can't build hist2workspace without xml.; if(xml); ROOT_EXECUTABLE(hist2workspace hist2workspace.cxx LIBRARIES HistFactory). #---Createhist2workspaceCommandLineOptions------------------------------------------------------------------; generateHeader(hist2workspace; ${CMAKE_CURRENT_SOURCE_DIR}/src/hist2workspace-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/hist2workspaceCommandLineOptionsHelp.h; ). target_compile_definitions(HistFactory PUBLIC HISTFACTORY_XML); endif(). if(MSVC); set(prepareHistFactory_script prepareHistFactory.bat); else(); set(prepareHistFactory_script prepareHistFactory); endif(); file(COPY config/${prepareHistFactory_script} DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}); install(FILES ${CMAKE_RUNTIME_OUTPUT_DIRECTORY}/${prepareHistFactory_script}; PERMISSIONS OWNER_EXECUTE OWNER_WRITE OWNER_READ; GROUP_EXECUTE GROUP_READ; WORLD_EXECUTE WORLD_READ; DESTINATION ${CMAKE_INSTALL_BINDIR}). ROOT_ADD_TEST_SUBDIRECTORY(test); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt:3786,test,test,3786,roofit/histfactory/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/histfactory/CMakeLists.txt,1,['test'],['test']
Testability,src/__support/OSUtil/linux/x86_64/syscall.h; libc/src/__support/threads/mutex.h; libc/src/__support/threads/linux/mutex.h; libc/utils/HdrGen/Command.cpp; libc/utils/HdrGen/Command.h; libc/utils/HdrGen/Generator.cpp; libc/utils/HdrGen/Generator.h; libc/utils/HdrGen/IncludeFileCommand.cpp; libc/utils/HdrGen/IncludeFileCommand.h; libc/utils/HdrGen/Main.cpp; libc/utils/HdrGen/PublicAPICommand.cpp; libc/utils/HdrGen/PublicAPICommand.h; libc/utils/HdrGen/PrototypeTestGen/PrototypeTestGen.cpp; libc/utils/LibcTableGenUtil/APIIndexer.cpp; libc/utils/LibcTableGenUtil/APIIndexer.h; libc/utils/MPFRWrapper/check_mpfr.cpp; libc/utils/MPFRWrapper/MPFRUtils.cpp; libc/utils/MPFRWrapper/MPFRUtils.h; libc/utils/testutils/ExecuteFunction.h; libc/utils/testutils/ExecuteFunctionUnix.cpp; libc/utils/testutils/FDReader.h; libc/utils/testutils/FDReaderUnix.cpp; libc/utils/testutils/RandUtils.cpp; libc/utils/testutils/RandUtils.h; libc/utils/testutils/StreamWrapper.h; libc/utils/testutils/Timer.cpp; libc/utils/testutils/Timer.h; libc/utils/tools/WrapperGen/Main.cpp; libc/utils/UnitTest/FPExceptMatcher.cpp; libc/utils/UnitTest/FPExceptMatcher.h; libc/utils/UnitTest/FPMatcher.cpp; libc/utils/UnitTest/FPMatcher.h; libc/utils/UnitTest/FuchsiaTest.h; libc/utils/UnitTest/LibcTest.cpp; libc/utils/UnitTest/LibcTestMain.cpp; libc/utils/UnitTest/MemoryMatcher.cpp; libc/utils/UnitTest/MemoryMatcher.h; libc/utils/UnitTest/PlatformDefs.h; libc/utils/UnitTest/Test.h; libclc/generic/include/config.h; libclc/generic/include/clc/as_type.h; libclc/generic/include/clc/clcfunc.h; libclc/generic/include/clc/async/async_work_group_copy.h; libclc/generic/include/clc/async/async_work_group_strided_copy.h; libclc/generic/include/clc/async/prefetch.h; libclc/generic/include/clc/async/wait_group_events.h; libclc/generic/include/clc/atomic/atomic_add.h; libclc/generic/include/clc/atomic/atomic_and.h; libclc/generic/include/clc/atomic/atomic_max.h; libclc/generic/include/clc/atomic/atomic_min.h; libclc/generic/include/c,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:149101,test,testutils,149101,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testutils']
Testability,"ss provides reference-counted memory; management. The implementation maps the type as written and the Clang Type to be able to use; the preprocessor to synthesize the relevant cast operations. For example,; ``X(char, Char_S)``, where ``char`` is the type from the language's type system; and ``Char_S`` is the Clang builtin type which represents it. This mapping helps; to import execution results from the interpreter in a compiled program and vice; versa. The ``Value.h`` header file can be included at runtime and this is why it; has a very low token count and was developed with strict constraints in mind. This also enables the user to receive the computed 'type' back in their code; and then transform the type into something else (e.g., re-cast a double into; a float). Normally, the compiler can handle these conversions transparently,; but in interpreter mode, the compiler cannot see all the 'from' and 'to' types,; so it cannot implicitly do the conversions. So this logic enables providing; these conversions on request. On-request conversions can help improve the user experience, by allowing; conversion to a desired 'to' type, when the 'from' type is unknown or unclear. Significance of this Feature; ----------------------------. The 'Value' object enables wrapping a memory region that comes from the; JIT, and bringing it back to the compiled code (and vice versa).; This is a very useful functionality when:. - connecting an interpreter to the compiled code, or; - connecting an interpreter in another language. For example, this feature helps transport values across boundaries. A notable; example is the cppyy project code makes use of this feature to enable running C++; within Python. It enables transporting values/information between C++; and Python. Note: `cppyy <https://github.com/wlav/cppyy/>`_ is an automatic, run-time,; Python-to-C++ bindings generator, for calling C++ from Python and Python from C++.; It uses LLVM along with a C++ interpreter (e.g., Cling) to enable",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst:10081,log,logic,10081,interpreter/llvm-project/clang/docs/ClangRepl.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst,1,['log'],['logic']
Testability,"ss/fail) were replaced by TreeFormulas (sensitive to array; position). Thanks to Arnaud Robert (LPNHE) for his; contributions.; ; ; Tree assignment to signal/background: Signal and; background trees can now be assigned individually to training; and test purposes. This is achieved by setting the third; parameter of the Factory::AddSignalTree/AddBackgroundTree(); methods to ""Train"" or ""Test"" (const string). The only; restriction is that either none or all signal (background); trees need to be specified with that option. It is possible to; mix the two modes, for instance one can assign individual; training and test trees for signal, but not for background.; ; Direct tree building: For increased flexibility,; users can also directly input signal and background,; training and test events to TMVA, instead of letting TMVA; interpret user-given trees. Note that either one of the; two approaches must be chosen (no mix). The syntax of the; new calls is described in the macros/TMVAnalysis.C test; macro. --> The User runs the event loop, copies for each; event the input variables into a std:vector, and ""adds""; them to TMVA, using the dedicated calls:; factory->AddSignalTrainingEvent( vars, signalWeight );; (and replacing ""Signal"" by ""Background"", and ""Training"" by; ""Test""). After the event loop, everything continues as in; the standard method.; . Methods:. Simulated Annealing in Cuts,FDA: Entirely new; Simulated Annealing (SA) algorithm for global minimisation; in presence of local minima (optionally used in cut; optimisation (MethodCuts) and the Function Discriminant; (MethodFDA)). The SA algorithm features two approaches,; one starting at minimal temperature (ie, from within a; local minimum), slowly increasing, and another one; starting at high temperature, slowly decreasing into a; minimum. Code developed and written by Kamil Bartlomiej; Kraszewski, Maciej Kruk and Krzysztof Danielowski from IFJ; and AGH/UJ, Krakow, Poland.; ; Cuts: Added printouts, quoting the explicit cut",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html:1126,test,test,1126,tmva/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v520/index.html,1,['test'],['test']
Testability,ssCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_T,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2615,test,testConvLayerCudnn,2615,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvLayerCudnn']
Testability,"ssa.copy(type returned %operand) memory(none). Arguments:; """""""""""""""""""". The first argument is an operand which is used as the returned value. Overview:; """""""""""""""""""". The ``llvm.ssa.copy`` intrinsic can be used to attach information to; operations by copying them and giving them new names. For example,; the PredicateInfo utility uses it to build Extended SSA form, and; attach various forms of information to operands that dominate specific; uses. It is not meant for general use, only for building temporary; renaming forms that require value splits at certain points. .. _type.test:. '``llvm.type.test``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.type.test(ptr %ptr, metadata %type) nounwind memory(none). Arguments:; """""""""""""""""""". The first argument is a pointer to be tested. The second argument is a; metadata object representing a :doc:`type identifier <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.test`` intrinsic tests whether the given pointer is associated; with the given type identifier. .. _type.checked.load:. '``llvm.type.checked.load``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare {ptr, i1} @llvm.type.checked.load(ptr %ptr, i32 %offset, metadata %type) nounwind memory(argmem: read). Arguments:; """""""""""""""""""". The first argument is a pointer from which to load a function pointer. The; second argument is the byte offset from which to load the function pointer. The; third argument is a metadata object representing a :doc:`type identifier; <TypeMetadata>`. Overview:; """""""""""""""""". The ``llvm.type.checked.load`` intrinsic safely loads a function pointer from a; virtual table pointer using type metadata. This intrinsic is used to implement; control flow integrity in conjunction with virtual call optimization. The; virtual call optimization pass will optimize away ``llvm.type.checked.load``; intrinsics associated with devirtualized calls, thereby removing the type; check in cases where it is not ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:937566,test,test,937566,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,2,['test'],"['test', 'tests']"
Testability,"ssage)`` and; ``__has_extension(attribute_unavailable_with_message)``. Attributes on Enumerators; =========================. Clang allows attributes to be written on individual enumerators. This allows; enumerators to be deprecated, made unavailable, etc. The attribute must appear; after the enumerator name and before any initializer, like so:. .. code-block:: c++. enum OperationMode {; OM_Invalid,; OM_Normal,; OM_Terrified __attribute__((deprecated)),; OM_AbortOnError __attribute__((deprecated)) = 4; };. Attributes on the ``enum`` declaration do not apply to individual enumerators. Query for this feature with ``__has_extension(enumerator_attributes)``. C++11 Attributes on using-declarations; ======================================. Clang allows C++-style ``[[]]`` attributes to be written on using-declarations.; For instance:. .. code-block:: c++. [[clang::using_if_exists]] using foo::bar;; using foo::baz [[clang::using_if_exists]];. You can test for support for this extension with; ``__has_extension(cxx_attributes_on_using_declarations)``. 'User-Specified' System Frameworks; ==================================. Clang provides a mechanism by which frameworks can be built in such a way that; they will always be treated as being ""system frameworks"", even if they are not; present in a system framework directory. This can be useful to system; framework developers who want to be able to test building other applications; with development builds of their framework, including the manner in which the; compiler changes warning behavior for system headers. Framework developers can opt-in to this mechanism by creating a; ""``.system_framework``"" file at the top-level of their framework. That is, the; framework should have contents like:. .. code-block:: none. .../TestFramework.framework; .../TestFramework.framework/.system_framework; .../TestFramework.framework/Headers; .../TestFramework.framework/Headers/TestFramework.h; ... Clang will treat the presence of this file as an indicat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:37313,test,test,37313,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"ssing a user defined PDF or CDF.; Example 1: perform a 2 sample GoF test from two arrays,; sample1[n1] and sample2[n2] containing the data; ; ROOT::Math::GoFTest goftest(n1, sample1, n2, sample2);; double pValueAD = goftest.AndersonDarling2SamplesTest();; double pValueKS = goftest.KolmogorovSmirnov2SamplesTest();; ; The class can return optionally also the test statistics instead of; the p value.; Example 2: perform a 1 sample test with a pre-defined; distribution starting from a data set sample[n]. ROOT::Math::GoFTest goftest(n, sample, ROOT::Math::GoFTest::kGaussian);; double pValueAD = goftest.AndersonDarlingTest();; double pValueKS = goftest.KolmogorovSmirnovTest();; . Example 3: perform a 1 sample test with a user-defined; distribution provided as cdf; ; ROOT::Math::Functor1D cdf_func(&ROOT::Math::landau_cdf);; ROOT::Math::GofTest goftest(n, sample, cdf_func, ROOT::Math::GoFTest::kCDF);; double pValueAD = goftest.AndersonDarlingTest();; . Example 4: perform a 1 sample test with a user-defined; distribution provided as pdf. Note that in this case to avoid; integration problems is sometimes recommended to give some; reasonable xmin and xmax values. xmin (and xmax) should however be; smaller (larger) than the minimum (maximum) data value.; ; ROOT::Math::Functor1D pdf_func(&ROOT::Math::landau_pdf);; double xmin = 5*TMath::Min_Element(n,sample);; double xmax = 5*TMath::Max_Element(n,sample);; ROOT::Math::GofTest goftest(n, sample, pdf_func, ROOT::Math::GoFTest::kPDF,xmin,xmax);; double pValueAD = goftest.AndersonDarlingTest();; . The tutorial math/goftest.C is an example on; how to use the ROOT::Math::GofTest class. New class TKDTreeBinning for binning multidimensional data.; ; The class implements multidimensional binning by constructing a; TKDTree inner structure form the data which is used as the bins.; The bins are retrieved as two double*, one for the minimum bin edges,; the other as the maximum bin edges. For one dimension one of these is enough; to correctly ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:2094,test,test,2094,math/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html,1,['test'],['test']
Testability,"ssion tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLVM, a regression test containing just; enough code to reproduce the problem should be written and placed; somewhere underneath this directory. For example, it can be a small; piece of LLVM IR distilled from an actual application or benchmark. Testing Analysis; ----------------. An analysis is a pass that infer properties on some part of the IR and not; transforming it. They are tested in general using the same infrastructure as the; regression tests, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `r",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:2935,test,test,2935,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"ssion tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The direc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:6223,test,tests,6223,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"ssor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use (create the list of; known system/library/API functions falling into this category). #include <vector>. void test() {; std::vector<int> v;; v.empty(); // warn; }. different.WrongVarForStmt; (C, C++); Wrong variable is possibly used in the loop/cond-expression of; the for statement. Did you mean; 'proper_variable_name'?. void test() {; int i = 0;; int j = 0;; for (i = 0; i < 3; j += 1); // warn; }. void test() {; int i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // w",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:21480,test,test,21480,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"st MatchFinder::MatchResult &Result) {; if (const ForStmt *FS = Result.Nodes.getNodeAs<clang::ForStmt>(""forLoop"")); FS->dump();; }; };. And change ``main()`` to:. .. code-block:: c++. int main(int argc, const char **argv) {; auto ExpectedParser = CommonOptionsParser::create(argc, argv, MyToolCategory);; if (!ExpectedParser) {; // Fail gracefully for unsupported options.; llvm::errs() << ExpectedParser.takeError();; return 1;; }; CommonOptionsParser& OptionsParser = ExpectedParser.get();; ClangTool Tool(OptionsParser.getCompilations(),; OptionsParser.getSourcePathList());. LoopPrinter Printer;; MatchFinder Finder;; Finder.addMatcher(LoopMatcher, &Printer);. return Tool.run(newFrontendActionFactory(&Finder).get());; }. Now, you should be able to recompile and run the code to discover for; loops. Create a new file with a few examples, and test out our new; handiwork:. .. code-block:: console. cd ~/clang-llvm/build/; ninja loop-convert; vim ~/test-files/simple-loops.cc; bin/loop-convert ~/test-files/simple-loops.cc. Step 3.5: More Complicated Matchers; ===================================. Our simple matcher is capable of discovering for loops, but we would; still need to filter out many more ourselves. We can do a good portion; of the remaining work with some cleverly chosen matchers, but first we; need to decide exactly which properties we want to allow. How can we characterize for loops over arrays which would be eligible; for translation to range-based syntax? Range based loops over arrays of; size ``N`` that:. - start at index ``0``; - iterate consecutively; - end at index ``N-1``. We already check for (1), so all we need to add is a check to the loop's; condition to ensure that the loop's index variable is compared against; ``N`` and another check to ensure that the increment step just; increments this same variable. The matcher for (2) is straightforward:; require a pre- or post-increment of the same variable declared in the; init portion. Unfortunately, such a mat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst:10461,test,test-files,10461,interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersTutorial.rst,1,['test'],['test-files']
Testability,"st be a trivial immediate integer or floating-point; constant. Undef or constant expressions are not valid. This is; only valid on intrinsic declarations and cannot be applied to a; call site or arbitrary function. ``noundef``; This attribute applies to parameters and return values. If the value; representation contains any undefined or poison bits, the behavior is; undefined. Note that this does not refer to padding introduced by the; type's storage representation. .. _nofpclass:. ``nofpclass(<test mask>)``; This attribute applies to parameters and return values with; floating-point and vector of floating-point types, as well as; arrays of such types. The test mask has the same format as the; second argument to the :ref:`llvm.is.fpclass <llvm.is.fpclass>`,; and indicates which classes of floating-point values are not; permitted for the value. For example a bitmask of 3 indicates; the parameter may not be a NaN. If the value is a floating-point class indicated by the; ``nofpclass`` test mask, a :ref:`poison value <poisonvalues>` is; passed or returned instead. .. code-block:: text; :caption: The following invariants hold. @llvm.is.fpclass(nofpclass(test_mask) %x, test_mask) => false; @llvm.is.fpclass(nofpclass(test_mask) %x, ~test_mask) => true; nofpclass(all) => poison; .. In textual IR, various string names are supported for readability; and can be combined. For example ``nofpclass(nan pinf nzero)``; evaluates to a mask of 547. This does not depend on the floating-point environment. For; example, a function parameter marked ``nofpclass(zero)`` indicates; no zero inputs. If this is applied to an argument in a function; marked with :ref:`\""denormal-fp-math\"" <denormal_fp_math>`; indicating zero treatment of input denormals, it does not imply the; value cannot be a denormal value which would compare equal to 0. .. table:: Recognized test mask names. +-------+----------------------+---------------+; | Name | floating-point class | Bitmask value |; +=======+============",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:65370,test,test,65370,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"st corpus.; E.g. libxml uses ``rand()`` inside its hash table.; - The target code uses checksums to protect from invalid inputs.; E.g. png checks CRC for every chunk. In many cases it makes sense to build a special fuzzing-friendly build; with certain fuzzing-unfriendly features disabled. We propose to use a common build macro; for all such cases for consistency: ``FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION``. .. code-block:: c++. void MyInitPRNG() {; #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION; // In fuzzing mode the behavior of the code should be deterministic.; srand(0);; #else; srand(time(0));; #endif; }. AFL compatibility; -----------------; LibFuzzer can be used together with AFL_ on the same test corpus.; Both fuzzers expect the test corpus to reside in a directory, one file per input.; You can run both fuzzers on the same corpus, one after another:. .. code-block:: console. ./afl-fuzz -i testcase_dir -o findings_dir /path/to/program @@; ./llvm-fuzz testcase_dir findings_dir # Will write new tests to testcase_dir. Periodically restart both fuzzers so that they can use each other's findings.; Currently, there is no simple way to run both fuzzing engines in parallel while sharing the same corpus dir. You may also use AFL on your target function ``LLVMFuzzerTestOneInput``:; see an example `here <https://github.com/llvm/llvm-project/tree/main/compiler-rt/lib/fuzzer/afl>`__. How good is my fuzzer?; ----------------------. Once you implement your target function ``LLVMFuzzerTestOneInput`` and fuzz it to death,; you will want to know whether the function or the corpus can be improved further.; One easy to use metric is, of course, code coverage. We recommend to use; `Clang Coverage <https://clang.llvm.org/docs/SourceBasedCodeCoverage.html>`_,; to visualize and study your code coverage; (`example <https://github.com/google/fuzzer-test-suite/blob/master/tutorial/libFuzzerTutorial.md#visualizing-coverage>`_). User-supplied mutators; ----------------------. LibFuzzer ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:22632,test,tests,22632,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['tests']
Testability,"st layers that; can be implemented. .. code-block:: c++. // From IRTransformLayer.h:; class IRTransformLayer : public IRLayer {; public:; using TransformFunction = std::function<Expected<ThreadSafeModule>(; ThreadSafeModule, const MaterializationResponsibility &R)>;. IRTransformLayer(ExecutionSession &ES, IRLayer &BaseLayer,; TransformFunction Transform = identityTransform);. void setTransform(TransformFunction Transform) {; this->Transform = std::move(Transform);; }. static ThreadSafeModule; identityTransform(ThreadSafeModule TSM,; const MaterializationResponsibility &R) {; return TSM;; }. void emit(MaterializationResponsibility R, ThreadSafeModule TSM) override;. private:; IRLayer &BaseLayer;; TransformFunction Transform;; };. // From IRTransformLayer.cpp:. IRTransformLayer::IRTransformLayer(ExecutionSession &ES,; IRLayer &BaseLayer,; TransformFunction Transform); : IRLayer(ES), BaseLayer(BaseLayer), Transform(std::move(Transform)) {}. void IRTransformLayer::emit(MaterializationResponsibility R,; ThreadSafeModule TSM) {; assert(TSM.getModule() && ""Module must not be null"");. if (auto TransformedTSM = Transform(std::move(TSM), R)); BaseLayer.emit(std::move(R), std::move(*TransformedTSM));; else {; R.failMaterialization();; getExecutionSession().reportError(TransformedTSM.takeError());; }; }. This is the whole definition of IRTransformLayer, from; ``llvm/include/llvm/ExecutionEngine/Orc/IRTransformLayer.h`` and; ``llvm/lib/ExecutionEngine/Orc/IRTransformLayer.cpp``. This class is concerned; with two very simple jobs: (1) Running every IR Module that is emitted via this; layer through the transform function object, and (2) implementing the ORC; ``IRLayer`` interface (which itself conforms to the general ORC Layer concept,; more on that below). Most of the class is straightforward: a typedef for the; transform function, a constructor to initialize the members, a setter for the; transform function value, and a default no-op transform. The most important; method is ``emi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst:7457,assert,assert,7457,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT2.rst,1,['assert'],['assert']
Testability,"st through ``opt -S -passes=instnamer``.; - Try to give values (including variables, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ...; ;--- b.ll; ... The parts are separated by the regex ``^(.|//)--- <part>``. If you want to test relative line numbers like ``[[#@LINE+1]]``, specify; ``--leading-lines`` to add leading empty lines to preserve line numbers. If the extra files are large, the idiomatic place to put them is in a subdirectory ``Inputs``.; You can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, consider ``test/Linker/ident.ll``. The directory structure is; as follows::. test/; Linker/; ident.ll; Inputs/; ident.a.ll; ident.b.ll. For convenience, these are the contents:. .. code-block:: llvm. ;;;;; ident.ll:. ; RUN: llvm-link %S/Inputs/ident.a.ll %S/Inputs/ident.b.ll -S | FileCheck %s. ; Verify that multiple input llvm.ident metadata are linked together. ; CHECK-DAG: !llvm.ident = !{!0, !1, !2}; ; CHECK-DAG: ""Compiler V1""; ; CHECK-DAG: ""Compiler V2""; ; CHECK-DAG: ""Compiler V3"". ;;;;; Inputs/ident.a.ll:. !llvm.ident = !{!0, !1}; !0 = metadata !{metadata !""Compiler V1""}; !1 = metadata !{metadata !""Compiler V2""}. ;;;;; Inputs/ident.b.ll:. !llvm.ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't; actually participate in the test besides holding the ``RUN:`` lines. .. note::. Some existing tests use ``RUN: true`` in extra files instead of just; putting the extra files in an ``Inputs/`` directory. This pattern is; dep",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:15401,test,test,15401,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"st() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alternative is -[NSCoder decodeValueOfObjCType:at:size:]. void test(NSCoder *decoder) {; // This would be a vulnerability on 64-bit platforms; // but not on 32-bit platforms.; NSUInteger x;; [decoder decodeValueOfObjCType:""I"" at:&x]; // warn; }. Unix Checkers. Name, DescriptionExample. unix.API; (C); Check calls to various UNIX/POSIX functions:; open; pthread_once; calloc; malloc; realloc; alloca. // Currently the check is performed for apple targets only.; void test(const char *path) {; int fd = open(path, O_CREAT);; // warn: call to 'open' requires a third argument when the; // 'O_CREAT' flag is set; }. void f();. void test() {; pthread_once_t pred = {0x30B1BCBA, {0}};; pthread_once(&pred, f);; // warn: call to 'pthread_once' uses the local variable; }. void test() {; void *p = malloc(0); // warn: allocation size of 0 bytes; }. void test() ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:22840,test,test,22840,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"st-stressfit). #--stressHistoFit-----------------------------------------------------------------------------; if(ROOT_unuran_FOUND); ROOT_EXECUTABLE(stressHistoFit stressHistoFit.cxx LIBRARIES MathCore Matrix Unuran Tree Gpad); ROOT_ADD_TEST(test-stresshistofit COMMAND stressHistoFit FAILREGEX ""FAILED|Error in"" LABELS longtest); if(NOT MSVC OR llvm13_broken_tests); ROOT_ADD_TEST(test-stresshistofit-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressHistoFit.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stresshistofit ); endif(); endif(). #--stressEntryList---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressEntryList stressEntryList.cxx LIBRARIES MathCore Tree Hist); ROOT_ADD_TEST(test-stressentrylist COMMAND stressEntryList -b FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressentrylist-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressEntryList.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressentrylist). #--stressIterators---------------------------------------------------------------------------; ROOT_EXECUTABLE(stressIterators stressIterators.cxx LIBRARIES Core); ROOT_ADD_TEST(test-stressiterators COMMAND stressIterators FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressiterators-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressIterators.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressiterators). #--stressInterpreter-------------------------------------------------------------------------; ROOT_EXECUTABLE(stressInterpreter stressInterpreter.cxx LIBRARIES Core); if(WIN32); set(cleantmpfiles POSTCMD cmd /c del AutoDict_*); endif(); ROOT_ADD_TEST(test-stressinterpreter COMMAND stressInterpreter; WORKING_DIR ${CMAKE_BINARY_DIR}; PRECMD ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_SOURCE_DIR}/stressInterpreter.cxx; $<TARGET_FILE_DIR:stressInterpreter>/stressInterpreter.cxx; ${cleantmpfiles}; FAILREGEX Error|FAILED). #--st",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:13944,test,test-stressentrylist,13944,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-stressentrylist']
Testability,"st.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: cons",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3286,test,test,3286,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"st2*. The lists must have the same element type. ``!listsplat(``\ *value*\ ``,`` *count*\ ``)``; This operator produces a list of length *count* whose elements are all; equal to the *value*. For example, ``!listsplat(42, 3)`` results in; ``[42, 42, 42]``. ``!logtwo(``\ *a*\ ``)``; This operator produces the base 2 log of *a* and produces the integer; result. The log of 0 or a negative number produces an error. This; is a flooring operation. ``!lt(``\ *a*\ `,` *b*\ ``)``; This operator produces 1 if *a* is less than *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, or ``string`` values. ``!mul(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator multiplies *a*, *b*, etc., and produces the product. ``!ne(``\ *a*\ `,` *b*\ ``)``; This operator produces 1 if *a* is not equal to *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, ``string``,; or record values. Use ``!cast<string>`` to compare other types of objects. ``!not(``\ *a*\ ``)``; This operator performs a logical NOT on *a*, which must be; an integer. The argument 0 results in 1 (true); any other; argument results in 0 (false). ``!or(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator does a bitwise OR on *a*, *b*, etc., and produces the; result. A logical OR can be performed if all the arguments are either; 0 or 1. ``!range([``\ *start*\ ``,]`` *end*\ ``[, ``\ *step*\ ``])``; This operator produces half-open range sequence ``[start : end : step)`` as; ``list<int>``. *start* is ``0`` and *step* is ``1`` by default. *step* can; be negative and cannot be 0. If *start* ``<`` *end* and *step* is negative,; or *start* ``>`` *end* and *step* is positive, the result is an empty list; ``[]<list<int>>``. For example:. * ``!range(4)`` is equivalent to ``!range(0, 4, 1)`` and the result is; `[0, 1, 2, 3]`.; * ``!range(1, 4)`` is equivalent to ``!range(1, 4, 1)`` and the result is; `[1, 2, 3]`.; * The result of ``!range(0, 4, 2)`` is `[0, 2]`.; * The results of ``!range(0, 4, -1)`` and ``!range(4, 0, 1)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:69275,log,logical,69275,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['log'],['logical']
Testability,stConvNetLoss TestConvNetLoss.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Loss COMMAND testConvNetLoss). #ROOT_EXECUTABLE(testConvNetPred TestConvNetPrediction.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Pred COMMAND testConvNetPred). #ROOT_EXECUTABLE(testDLMinimization TestMinimization.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(T,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5151,test,testConvLayerCpu,5151,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvLayerCpu']
Testability,stPyGTBClassification testPyGTBClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Classification COMMAND testPyGTBClassification DEPENDS PyMVA-RandomForest-Classification). # Test PyGTB: Multi-class classification; ROOT_EXECUTABLE(testPyGTBMulticlass testPyGTBMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-GTB-Multiclass COMMAND testPyGTBMulticlass DEPENDS PyMVA-RandomForest-Multiclass). # Test PyAdaBoost: Classification; ROOT_EXECUTABLE(testPyAdaBoostClassification testPyAdaBoostClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Classification COMMAND testPyAdaBoostClassification DEPENDS PyMVA-GTB-Classification). # Test PyAdaBoost: Multi-class classification; ROOT_EXECUTABLE(testPyAdaBoostMulticlass testPyAdaBoostMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-AdaBoost-Multiclass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch:,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:2204,test,tests,2204,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,1,['test'],['tests']
Testability,"st`` helper program can be used to test these features. Testing; -------; All functional changes to Clang should come with test coverage demonstrating; the change in behavior. .. _verifying-diagnostics:. Verifying Diagnostics; ^^^^^^^^^^^^^^^^^^^^^; Clang ``-cc1`` supports the ``-verify`` command line option as a way to; validate diagnostic behavior. This option will use special comments within the; test file to verify that expected diagnostics appear in the correct source; locations. If all of the expected diagnostics match the actual output of Clang,; then the invocation will return normally. If there are discrepancies between; the expected and actual output, Clang will emit detailed information about; which expected diagnostics were not seen or which unexpected diagnostics were; seen, etc. A complete example is:. .. code-block: c++. // RUN: %clang_cc1 -verify %s; int A = B; // expected-error {{use of undeclared identifier 'B'}}. If the test is run and the expected error is emitted on the expected line, the; diagnostic verifier will pass. However, if the expected error does not appear; or appears in a different location than expected, or if additional diagnostics; appear, the diagnostic verifier will fail and emit information as to why. The ``-verify`` command optionally accepts a comma-delimited list of one or; more verification prefixes that can be used to craft those special comments.; Each prefix must start with a letter and contain only alphanumeric characters,; hyphens, and underscores. ``-verify`` by itself is equivalent to; ``-verify=expected``, meaning that special comments will start with; ``expected``. Using different prefixes makes it easier to have separate; ``RUN:`` lines in the same test file which result in differing diagnostic; behavior. For example:. .. code-block:: c++. // RUN: %clang_cc1 -verify=foo,bar %s. int A = B; // foo-error {{use of undeclared identifier 'B'}}; int C = D; // bar-error {{use of undeclared identifier 'D'}}; int E = F; // ex",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:155276,test,test,155276,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"stack slot of callee function would overwrite; arg2 of the caller. Possible optimizations:. - Analyse the actual parameters of the callee to see which would; overwrite a caller parameter which is used by the callee and only; push them onto the top of the stack. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg1,arg2);; }. Here we don't need to write any variables to the top of the stack; since they don't overwrite each other. int callee (int32 arg1, int32 arg2);; int caller (int32 arg1, int32 arg2) {; return callee(arg2,arg1);; }. Here we need to push the arguments because they overwrite each; other. //===---------------------------------------------------------------------===//. main (); {; int i = 0;; unsigned long int z = 0;. do {; z -= 0x00004000;; i++;; if (i > 0x00040000); abort ();; } while (z > 0);; exit (0);; }. gcc compiles this to:. _main:; 	subl	$28, %esp; 	xorl	%eax, %eax; 	jmp	L2; L3:; 	cmpl	$262144, %eax; 	je	L10; L2:; 	addl	$1, %eax; 	cmpl	$262145, %eax; 	jne	L3; 	call	L_abort$stub; L10:; 	movl	$0, (%esp); 	call	L_exit$stub. llvm:. _main:; 	subl	$12, %esp; 	movl	$1, %eax; 	movl	$16384, %ecx; LBB1_1:	# bb; 	cmpl	$262145, %eax; 	jge	LBB1_4	# cond_true; LBB1_2:	# cond_next; 	incl	%eax; 	addl	$4294950912, %ecx; 	cmpl	$16384, %ecx; 	jne	LBB1_1	# bb; LBB1_3:	# bb11; 	xorl	%eax, %eax; 	addl	$12, %esp; 	ret; LBB1_4:	# cond_true; 	call	L_abort$stub. 1. LSR should rewrite the first cmp with induction variable %ecx.; 2. DAG combiner should fold; leal 1(%eax), %edx; cmpl $262145, %edx; =>; cmpl $262144, %eax. //===---------------------------------------------------------------------===//. define i64 @test(double %X) {; 	%Y = fptosi double %X to i64; 	ret i64 %Y; }. compiles to:. _test:; 	subl	$20, %esp; 	movsd	24(%esp), %xmm0; 	movsd	%xmm0, 8(%esp); 	fldl	8(%esp); 	fisttpll	(%esp); 	movl	4(%esp), %edx; 	movl	(%esp), %eax; 	addl	$20, %esp; 	#FP_REG_KILL; 	ret. This should just fldl directly from the input stack slot. //",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:19705,stub,stub,19705,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,2,['stub'],['stub']
Testability,"stantTermsOptimizer` optimization routines on the pdf and dataset inside a `RooAbsL` likelihood is as simple as:. ``` {.cpp}; likelihood.constOptimizeTestStatistic();; ```; This applies constant term optimization to the cloned pdf and dataset inside the likelihood object.; It will not modify anything outside of the likelihood. Optimization can also be activated through the minimizer, which may be more familiar to most users.; Given the `RooMinimizer` object `m` as defined in the example above, we can do:; ``` {.cpp}; m.optimizeConst(2);; ```. For the adventurous user, it is also possible to apply constant term optimization to a pdf and dataset directly without needing a likelihood object, e.g. given some `RooArgSet` set of observables `normSet`:; ``` {.cpp}; bool applyTrackingOpt = true;; ConstantTermsOptimizer::enableConstantTermsOptimization(&pdf, &normSet, dataset, applyTrackingOpt);; ```; We refer to RooFit documentation for more about ""tracking optimization"" which can be enabled or disabled using the final boolean parameter. ## Caveats; This package is still under development.; Some functionality that users of `RooAbsPdf::fitTo` or `RooAbsPdf::createNLL` were used to has not yet been ported to this namespace.; However, the functionality that is implemented has been tested thoroughly for a set of common usage patterns and should work as expected. The classes implemented here will give the exact same numerical results for most fits.; One notable exception is fitting _simultaneous_ pdfs with a _constrained_ term _when using offsetting_.; Because offsetting is handled differently in the `TestStatistics` classes compared to the way it was done in the object returned from `RooAbsPdf::createNLL` (a `RooAddition` of an offset `RooNLLVar` and a non-offset `RooConstraintSum`, whereas `RooSumL` applies the offset to the; total sum of its binned, unbinned and constraint components), we cannot always expect exactly equal results for fits with likelihood offsetting enabled. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/test_statistics.md:11689,test,tested,11689,roofit/doc/developers/test_statistics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/test_statistics.md,1,['test'],['tested']
Testability,"std::exception();; // warn (did you mean 'throw std::exception()'?); }. different.StaticArrayPtrCompare; (C); Pointer to static array is being compared to NULL. May the subscripting is; missing. void test() {; int a[1][1];; if (a[0] == 0) {}; // warn; }. different.ConversionToBool; (C, C++); Odd implicit conversion to boolean.; Note: possibly merge with ; alpha.core.BoolAssignment. bool test() {; return 1.; // warn; }. bool test() {; return """"; // warn; }. different.ArrayBound; (C++); Out-of-bound dynamic array access.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2. void test() {; int *p = new int[1];; int i = 1;; if(p[i]) {}; // warn; delete[] p;; }. different.StrcpyInputSize; (C); Buffer copy without checking the size of input.; Note: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:24662,test,tests,24662,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['tests']
Testability,"stdin. Platform-Specific Tests; -----------------------. Whenever adding tests that require the knowledge of a specific platform,; either related to code generated, specific output or back-end features,; you must make sure to isolate the features, so that buildbots that; run on different architectures (and don't even compile all back-ends),; don't fail. The first problem is to check for target-specific output, for example sizes; of structures, paths and architecture names, for example:. * Tests containing Windows paths will fail on Linux and vice-versa.; * Tests that check for ``x86_64`` somewhere in the text will fail anywhere else.; * Tests where the debug information calculates the size of types and structures. Also, if the test rely on any behaviour that is coded in any back-end, it must; go in its own directory. So, for instance, code generator tests for ARM go; into ``test/CodeGen/ARM`` and so on. Those directories contain a special; ``lit`` configuration file that ensure all tests in that directory will; only run if a specific back-end is compiled and available. For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:. .. code-block:: python. config.suffixes = ['.ll', '.c', '.cpp', '.test']; if not 'ARM' in config.root.targets:; config.unsupported = True. Other platform-specific tests are those that depend on a specific feature; of a specific sub-architecture, for example only to Intel chips that support ``AVX2``. For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture; variants:. .. code-block:: llvm. ; RUN: llc -mcpu=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you'",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:18218,test,tests,18218,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"still; used as local cache of the experiment information or to store the work-in-progress status of the dataset manager daemon. This model addresses the scalability issues observed at ALICE AFs.; - Improvements in [TProofBench](https://root.cern.ch/doc/master/classTProofBench.html):; - Recording and display of the maximum rate during query, CPU efficiency calculation for PROOF-Lite runs, better measurement of wall time.; - Support for dynamic startup mode. - Test program xpdtest to test the status of xproofd (see also man page under $ROOTSYS/man/man1):. ``` {.sh}; $ xpdtest [options]; --help, -h; Gives a short list of options avaliable, and exit; -t <test>; type of test to be run:; 0 ping the daemon (includes process existence check if pid specified; see below); 1 ping the daemon and check connection for default user; 2 ping the daemon and check connection for the default user and all recent users; ...; ```; - Interface with **igprof** for fast statistic profiling. Like valgrind, it can be specified as option to TProof::Open and the output is available via the log viewer technology:. ``` {.cpp}; root[] p = TProof::Open(""master"", ""igprof-pp""); ```; - Miscellanea:; - Added functions [Getenv](http://root.cern.ch/root/htmldoc/TProof.html#TProof:Getenv) and [GetRC](http://root.cern.ch/root/htmldoc/TProof.html#TProof:GetRC); in TProof to retrieve environment information from the nodes, typically from the master.; - Add support unix secondary groups in group access control. This allows more flexibility in, for example, assigning group-shared credential files to the daemon.; - Several new tests and options in the test program _stressProof_. ### Bug fixes. Several consolidation fixes in several parts of the system (see the [5.34 patch release notes for details](https://root.cern/install/all_releases/root-version-v5-34-00-patch-release-notes/)). In particular, those for 'xproofd' were provided by B. Butler and M. Swiatlowski and greatly contributed to consolidate the daemon. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md:2099,log,log,2099,proof/doc/v600/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v600/index.md,3,"['log', 'test']","['log', 'test', 'tests']"
Testability,"stimator calculations from small deviations from the desired value to large deviations only over the weight range. Configuration options for MVA method :. Configuration options reference for MVA method: Cuts. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). FitMethod No GA GA, SA, MC, MCEvents, MINUIT, EventScan Minimisation Method (GA, SA, and MC are the primary methods to be used; the others have been introduced for testing purposes and are depreciated). EffMethod No EffSel EffSel, EffPDF Selection Method. CutRangeMin Yes -1 − Minimum of allowed cut range (set per variable). CutRangeMax Yes -1 − Maximum of allowed cut range (set per variable). VarProp Yes NotEnforced NotEnforced, FMax, FMin, FSmart Categorisation of cuts. Configuration options for MVA method :. Configuration options reference for MVA method: PDEFoam. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:25117,test,testing,25117,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"sting facilities. For example, duplicate; information is automatically merged by the linker, and unused information; is automatically removed. Basically, the debug information allows you to compile a program with; ""``-O0 -g``"" and get full debug information, allowing you to arbitrarily modify; the program as it executes from a debugger. Compiling a program with; ""``-O3 -g``"" gives you full debug information that is always available and; accurate for reading (e.g., you get accurate stack traces despite tail call; elimination and inlining), but you might lose the ability to modify the program; and call functions which were optimized out of the program, or inlined away; completely. The :doc:`LLVM test-suite <TestSuiteMakefileGuide>` provides a framework to; test the optimizer's handling of debugging information. It can be run like; this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=dbgopt. This will test impact of debugging information on optimization passes. If; debugging information influences optimization passes then it will be reported; as a failure. See :doc:`TestingGuide` for more information on LLVM test; infrastructure and how to run various tests. .. _format:. Debugging information format; ============================. LLVM debugging information has been carefully designed to make it possible for; the optimizer to optimize the program and debugging information without; necessarily having to know anything about debugging information. In; particular, the use of metadata avoids duplicated debugging information from; the beginning, and the global dead code elimination pass automatically deletes; debugging information for a function if it decides to delete the function. To do this, most of the debugging information (descriptors for types,; variables, functions, source files, etc) is inserted by the language front-end; in the form of LLVM metadata. Debug information is designed to be agnostic about the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst:5966,test,test,5966,interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,1,['test'],['test']
Testability,"stitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file to define; ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial values, which; serve as the parameters of another newly defined ``%{check}`` substitution:. .. code-block:: llvm. ; DEFINE: %{cflags} =; ; DEFINE: %{fcflags} =. ; DEFINE: %{check} = \; ; DEFINE: %clang_cc1 -verify -fopenmp -fopenmp-version=51 %{cflags} \; ; DEFINE: -emit-llvm -o - %s | \; ; DEFINE: FileCheck %{fcflags} %s. Alternatively, the above substitutions can be defined in a lit configuration; file to be shared with other test files. Either way, the test file can then; specify directives like the following to redefine the parameter substitutions as; desired before each use of ``%{check}`` in a ``RUN:`` line:. .. code-block:: llvm. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0 -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-unknown-linux-gnu -fopenmp-simd; ; REDEFINE: %{fcflags} = -check-prefix=SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-apple-darwin10.6.0; ; REDEFINE: %{fcflags} = -check-prefix=NO-SIMD; ; RUN: %{check}. ; REDEFINE: %{cflags} = -triple x86_64-unknown-linux-gnu; ; REDEFINE: %{fcflags} = -check-prefix=NO-SIMD; ; RUN: %{check}. Besides providing initial values, the initial ``DEFINE:`` directives for the; parameter substitutions in the above example serve a second purpose: they; establish the substitution order so that both ``%{check}`` and its par",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:29843,test,test,29843,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"stogram, support TWebCanvas, handle log scales; 9. Provide ""Bring to front"" menu command for different objects like pave, box, marker, ...; 10. Provide ""Build legend"" context menu command for the pad; 11. Let toggle vertical/horizontal flag for color palette via context menu; 12. Support canvas grayscale, let toggle via context menu; 13. Basic latex support when drawing axes labels and titles in 3D; 14. Handle ""dark mode"" in geom painter - automatically adjust background; 15. Let configure material and scene properties in geom control gui; 16. Reset pad enlarge state when pressing ""Escape"" key #265; 17. Scale special fill patterns like 3244 to pad size; 18. Add ""Superimpose"" menu command in hierarchy - let select draw option when append item to pad; 19. Support `inspectN` draw option, allows automatically expand object content to specified level; 20. Implement `allfunc` draw option for histograms, force drawing disregard of TF1::kNotDraw bit; 21. Use `eslint` for static code checking, add testing of interactive features; 22. Upgrade three.js r151 -> r155; 23. Use https://github.com/georgealways/lil-gui/ instead of dat.GUI in geom painter; 24. Put `gl` in ""devDependencies"" of package.json; one can skip it installation with `npm i --production`; 25. Fix - correct scaling of axis labels when tilt them by 25 degree, make this angle configurable; 26. Fix - legend multi-columns drawing and labels scaling; 27. Fix - graph ""B"" bar widths as in native ROOT; 28. Fix - use pad and not frame size for `TText` / `TLatex` scaling; 29. Fix - properly handle ""NB"" (no border) draw option for `TPave` classes; 30. Fix - do not draw histogram title with AXIS draw option; 31. Fix - correct scaling of custom axis labels; 32. Fix - shrink axis labels like 0.20 -> 0.2 or 10^0 -> 1; 33. Fix - copy axis attributes from histogram z scale to palette; 34. Fix - let handle derived from TH1/TH2 classes as histograms #269. ## Changes in 7.4.3; 1. Fix - correctly use GMT specifier in time format; 2.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:10450,test,testing,10450,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['test'],['testing']
Testability,"stomary to respond to the original commit email mentioning the; revert. This serves as both a notice to the original author that their; patch was reverted, and helps others following llvm-commits track context.; * Ideally, you should have a publicly reproducible test case ready to share.; Where possible, we encourage sharing of test cases in commit threads, or; in PRs. We encourage the reverter to minimize the test case and to prune; dependencies where practical. This even applies when reverting your own; patch; documenting the reasons for others who might be following along; is critical.; * It is not considered reasonable to revert without at least the promise to; provide a means for the patch author to debug the root issue. If a situation; arises where a public reproducer can not be shared for some reason (e.g.; requires hardware patch author doesn't have access to, sharp regression in; compile time of internal workload, etc.), the reverter is expected to be; proactive about working with the patch author to debug and test candidate; patches.; * Reverts should be reasonably timely. A change submitted two hours ago; can be reverted without prior discussion. A change submitted two years ago; should not be. Where exactly the transition point is is hard to say, but; it's probably in the handful of days in tree territory. If you are unsure,; we encourage you to reply to the commit thread, give the author a bit to; respond, and then proceed with the revert if the author doesn't seem to be; actively responding.; * When re-applying a reverted patch, the commit message should be updated to; indicate the problem that was addressed and how it was addressed. Obtaining Commit Access; -----------------------. We grant commit access to contributors with a track record of submitting high; quality patches. If you would like commit access, please send an email to; `Chris <mailto:clattner@llvm.org>`_ with your GitHub username. This is true; for former contributors with SVN access as ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:22294,test,test,22294,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"store (see next section). `Address` is the destination address; of the store and it is modified by `AddressExpression`. An empty/undef/poison; address means the address component has been killed (the memory address is no; longer a valid location). LLVM currently encodes variable fragment information; in `DIExpression`s, so as an implementation quirk the `FragmentInfo` for; `Variable` is contained within `ValueExpression` only. The formal LLVM-IR signature is:; ```; void @llvm.dbg.assign(metadata, metadata, metadata, metadata, metadata, metadata); ```. ### Instruction link: `DIAssignID`. `DIAssignID` metadata is the mechanism that is currently used to encode the; store<->marker link. The metadata node has no operands and all instances are; `distinct`; equality is checked for by comparing addresses. `llvm.dbg.assign` intrinsics use a `DIAssignID` metadata node instance as an; operand. This way it refers to any store-like instruction that has the same; `DIAssignID` attachment. E.g. For this test.cpp,. ```; int fun(int a) {; return a;; }; ```; compiled without optimisations:; ```; $ clang++ test.cpp -o test.ll -emit-llvm -S -g -O0 -Xclang -fexperimental-assignment-tracking; ```; we get:; ```; define dso_local noundef i32 @_Z3funi(i32 noundef %a) #0 !dbg !8 {; entry:; %a.addr = alloca i32, align 4, !DIAssignID !13; call void @llvm.dbg.assign(metadata i1 undef, metadata !14, metadata !DIExpression(), metadata !13, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; store i32 %a, i32* %a.addr, align 4, !DIAssignID !16; call void @llvm.dbg.assign(metadata i32 %a, metadata !14, metadata !DIExpression(), metadata !16, metadata i32* %a.addr, metadata !DIExpression()), !dbg !15; %0 = load i32, i32* %a.addr, align 4, !dbg !17; ret i32 %0, !dbg !18; }. ...; !13 = distinct !DIAssignID(); !14 = !DILocalVariable(name: ""a"", ...); ...; !16 = distinct !DIAssignID(); ```. The first `llvm.dbg.assign` refers to the `alloca` through `!DIAssignID !13`,; and the second refers to the `",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:4163,test,test,4163,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['test']
Testability,"stores. Fixing this will require some huge RA changes. Testcase:; #include <emmintrin.h>. typedef short vSInt16 __attribute__ ((__vector_size__ (16)));. static const vSInt16 a = {- 22725, - 12873, - 22725, - 12873, - 22725, - 12873,; - 22725, - 12873};;. vSInt16 madd(vSInt16 b); {; return _mm_madd_epi16(a, b);; }. Generated code (x86-32, linux):; madd:; pushl %ebp; movl %esp, %ebp; andl $-16, %esp; movaps .LCPI1_0, %xmm1; pmaddwd %xmm1, %xmm0; movl %ebp, %esp; popl %ebp; ret. //===---------------------------------------------------------------------===//. Consider:; #include <emmintrin.h> ; __m128 foo2 (float x) {; return _mm_set_ps (0, 0, x, 0);; }. In x86-32 mode, we generate this spiffy code:. _foo2:; 	movss	4(%esp), %xmm0; 	pshufd	$81, %xmm0, %xmm0; 	ret. in x86-64 mode, we generate this code, which could be better:. _foo2:; 	xorps	%xmm1, %xmm1; 	movss	%xmm0, %xmm1; 	pshufd	$81, %xmm1, %xmm0; 	ret. In sse4 mode, we could use insertps to make both better. Here's another testcase that could use insertps [mem]:. #include <xmmintrin.h>; extern float x2, x3;; __m128 foo1 (float x1, float x4) {; return _mm_set_ps (x2, x1, x3, x4);; }. gcc mainline compiles it to:. foo1:; insertps $0x10, x2(%rip), %xmm0; insertps $0x10, x3(%rip), %xmm1; movaps %xmm1, %xmm2; movlhps %xmm0, %xmm2; movaps %xmm2, %xmm0; ret. //===---------------------------------------------------------------------===//. We compile vector multiply-by-constant into poor code:. define <4 x i32> @f(<4 x i32> %i) nounwind {; 	%A = mul <4 x i32> %i, < i32 10, i32 10, i32 10, i32 10 >; 	ret <4 x i32> %A; }. On targets without SSE4.1, this compiles into:. LCPI1_0:					## <4 x i32>; 	.long	10; 	.long	10; 	.long	10; 	.long	10; 	.text; 	.align	4,0x90; 	.globl	_f; _f:; 	pshufd	$3, %xmm0, %xmm1; 	movd	%xmm1, %eax; 	imull	LCPI1_0+12, %eax; 	movd	%eax, %xmm1; 	pshufd	$1, %xmm0, %xmm2; 	movd	%xmm2, %eax; 	imull	LCPI1_0+4, %eax; 	movd	%eax, %xmm2; 	punpckldq	%xmm1, %xmm2; 	movd	%xmm0, %eax; 	imull	LCPI1_0, %eax; 	movd	%ea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt:16169,test,testcase,16169,interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-SSE.txt,1,['test'],['testcase']
Testability,"stress*.cxx` | Stress testing of different ROOT classes |; +-------------------+--------------------------------------------------------+; | `bench.cxx` | STL and ROOT container test and benchmarking program |; +-------------------+--------------------------------------------------------+; | QpRandomDriver.cx | Verification program for Quadratic programming classes |; | x | in Quadp library |; +-------------------+--------------------------------------------------------+; | DrawTest.sh | Entry script to extensive **`TTree`** query test suite |; +-------------------+--------------------------------------------------------+; | dt\_\* | Scripts used by DrawTest.sh |; +-------------------+--------------------------------------------------------+. The `$ROOTSYS/test` directory is a gold mine of root-wisdom nuggets, and; we encourage you to explore and exploit it. These instructions will; compile all programs in `$ROOTSYS/test`:. If you do not have write permission in the `$ROOTSYS/test` directory,; copy the entire `$ROOTSYS/test` directory to your area. The `Makefile`; is a useful example of how ROOT applications are linked and built. Edit; the `Makefile` to specify your architecture by changing the `ARCH`; variable, for example, on an SGI machine type:` ARCH` = `sgikcc`. Now compile all programs:. % **`gmake`**. This will build several applications and shared libraries. We are; especially interested in Event, stress, and `guitest`. ### Event - An Example of a ROOT Application. Event is created by compiling `MainEvent.cxx`, and `Event.cxx`. It; creates a ROOT file with a tree and two histograms. When running `Event`; we have four optional arguments with defaults:. +-----+---------------------------------------------------------+--------------+; | | Argument | Default |; +-----+---------------------------------------------------------+--------------+; | 1 | Number of Events (1 ... n) | 400 |; +-----+---------------------------------------------------------+--------------+;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:5900,test,test,5900,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,2,['test'],['test']
Testability,"stressGUI stressGUI.cxx LIBRARIES Gui Recorder GuiHtml ASImageGui); endif(). #--stressSpectrum----------------------------------------------------------------------------------; if (spectrum); ROOT_EXECUTABLE(stressSpectrum stressSpectrum.cxx LIBRARIES Hist Spectrum Gpad); ROOT_ADD_TEST(test-stressspectrum COMMAND stressSpectrum -b FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressspectrum-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressSpectrum.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressspectrum LABELS longtest); endif(). #--stressVector------------------------------------------------------------------------------------; ROOT_EXECUTABLE(stressVector stressVector.cxx LIBRARIES Physics GenVector); ROOT_ADD_TEST(test-stressvector COMMAND stressVector FAILREGEX ""FAILED|Error in""); ROOT_ADD_TEST(test-stressvector-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressVector.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressvector). #--stressMathMore----------------------------------------------------------------------------------; if(ROOT_mathmore_FOUND); ROOT_EXECUTABLE(stressMathMore stressMathMore.cxx LIBRARIES MathMore Smatrix); ROOT_ADD_TEST(test-stressmathmore COMMAND stressMathMore FAILREGEX ""FAILED|Error in"" LABELS longtest); ROOT_ADD_TEST(test-stressmathmore-interpreted COMMAND ${ROOT_root_CMD} -b -q -l ${CMAKE_CURRENT_SOURCE_DIR}/stressMathMore.cxx; FAILREGEX ""FAILED|Error in"" DEPENDS test-stressmathmore TIMEOUT 1800); endif(). #--stressMathCore----------------------------------------------------------------------------------; ROOT_STANDARD_LIBRARY_PACKAGE(TrackMathCoreDict; NO_SOURCES; NO_INSTALL_HEADERS; HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/TrackMathCore.h; LINKDEF TrackMathCoreLinkDef.h; DEPENDENCIES Core MathCore RIO GenVector Smatrix); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET TrackMathCoreDict POST_BUILD; COMMAND ${CMAKE_COMMAND} -E cop",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt:11019,test,test-stressvector,11019,test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/test/CMakeLists.txt,1,['test'],['test-stressvector']
Testability,"struct RefCntbl {; void ref() {}; void deref() {}; };. struct Foo {; RefCntbl * ptr; // warn; RefCntbl & ptr; // warn; // ...; };. .. _webkit-UncountedLambdaCapturesChecker:. webkit.UncountedLambdaCapturesChecker; """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Raw pointers and references to uncounted types can't be captured in lambdas. Only ref-counted types are allowed. .. code-block:: cpp. struct RefCntbl {; void ref() {}; void deref() {}; };. void foo(RefCntbl* a, RefCntbl& b) {; [&, a](){ // warn about 'a'; do_something(b); // warn about 'b'; };; };. .. _alpha-checkers:. Experimental Checkers; ---------------------. *These are checkers with known issues or limitations that keep them from being on by default. They are likely to have false positives. Bug reports and especially patches are welcome.*. alpha.clone; ^^^^^^^^^^^. .. _alpha-clone-CloneChecker:. alpha.clone.CloneChecker (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Reports similar pieces of code. .. code-block:: c. void log();. int max(int a, int b) { // warn; log();; if (a > b); return a;; return b;; }. int maxClone(int x, int y) { // similar code here; log();; if (x > y); return x;; return y;; }. alpha.core; ^^^^^^^^^^. .. _alpha-core-BoolAssignment:. alpha.core.BoolAssignment (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn about assigning non-{0,1} values to boolean variables. .. code-block:: objc. void test() {; BOOL b = -1; // warn; }. .. _alpha-core-C11Lock:. alpha.core.C11Lock; """"""""""""""""""""""""""""""""""""; Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks for; the locking/unlocking of ``mtx_t`` mutexes. .. code-block:: cpp. mtx_t mtx1;. void bad1(void); {; mtx_lock(&mtx1);; mtx_lock(&mtx1); // warn: This lock has already been acquired; }. .. _alpha-core-CallAndMessageUnInitRefArg:. alpha.core.CallAndMessageUnInitRefArg (C,C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for logical errors for function calls and Objective-C; message expressions (e.g., uniniti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:46957,log,log,46957,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['log'],['log']
Testability,"structed in a target-specific way. It is; similar to the C library function 'fesetmode', however this function does not; read the set of control modes from memory but gets it as integer value. '``llvm.reset.fpmode``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare void @llvm.reset.fpmode(). Overview:; """""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the default dynamic floating-point; control modes. Arguments:; """""""""""""""""""". None. Semantics:; """""""""""""""""""". The '``llvm.reset.fpmode``' intrinsic sets the current dynamic floating-point; environment to default state. It is similar to the C library function call; 'fesetmode(FE_DFL_MODE)', however this function does not return any value. Floating-Point Test Intrinsics; ------------------------------. These functions get properties of floating-point values. .. _llvm.is.fpclass:. '``llvm.is.fpclass``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare i1 @llvm.is.fpclass(<fptype> <op>, i32 <test>); declare <N x i1> @llvm.is.fpclass(<vector-fptype> <op>, i32 <test>). Overview:; """""""""""""""""". The '``llvm.is.fpclass``' intrinsic returns a boolean value or vector of boolean; values depending on whether the first argument satisfies the test specified by; the second argument. If the first argument is a floating-point scalar, then the result type is a; boolean (:ref:`i1 <t_integer>`). If the first argument is a floating-point vector, then the result type is a; vector of boolean with the same number of elements as the first argument. Arguments:; """""""""""""""""""". The first argument to the '``llvm.is.fpclass``' intrinsic must be; :ref:`floating-point <t_floating>` or :ref:`vector <t_vector>`; of floating-point values. The second argument specifies, which tests to perform. It must be a compile-time; integer constant, each bit in which specifies floating-point class:. +-------+----------------------+; | Bit # | floating-point class |; +=======+======================+; | 0 | Signaling NaN |; +-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:921438,test,test,921438,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"structions. For example:. * ``--target=arm-linux-gnueabihf``; * ``-march=armv7a``; * ``-mthumb``. When using a GCC arm-linux-gnueabihf toolchain the following flags are; needed to pick up the includes and libraries:. * ``--gcc-toolchain=/path/to/dir/toolchain``; * ``--sysroot=/path/to/toolchain/arm-linux-gnueabihf/libc``. In this example we will be adding all of the command line options to both; ``CMAKE_C_FLAGS`` and ``CMAKE_ASM_FLAGS``. There are cmake flags to pass some of; these options individually which can be used to simplify the ``build-c-flags``:. * ``-DCMAKE_C_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_ASM_COMPILER_TARGET=""arm-linux-gnueabihf""``; * ``-DCMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN=/path/to/dir/toolchain``; * ``-DCMAKE_SYSROOT=/path/to/dir/toolchain/arm-linux-gnueabihf/libc``. Once cmake has completed the builtins can be built with ``ninja builtins``. Testing compiler-rt builtins using qemu-arm; ===========================================; To test the builtins library we need to add a few more cmake flags to enable; testing and set up the compiler and flags for test case. We must also tell; cmake that we wish to run the tests on ``qemu-arm``. * ``-DCOMPILER_RT_EMULATOR=""qemu-arm -L /path/to/armhf/sysroot``; * ``-DCOMPILER_RT_INCLUDE_TESTS=ON``; * ``-DCOMPILER_RT_TEST_COMPILER=""/path/to/clang""``; * ``-DCOMPILER_RT_TEST_COMPILER_CFLAGS=""test-c-flags""``. The ``/path/to/armhf/sysroot`` should be the same as the one passed to; ``--sysroot`` in the ""build-c-flags"". The ""test-c-flags"" need to include the target, architecture, gcc-toolchain,; sysroot and arm/thumb state. The additional cmake defines such as; ``CMAKE_C_COMPILER_EXTERNAL_TOOLCHAIN`` do not apply when building the tests. If; you have put all of these in ""build-c-flags"" then these can be repeated. If you; wish to use lld to link the tests then add ``""-fuse-ld=lld``. Once cmake has completed the tests can be built and run using; ``ninja check-builtins``. Troubleshooting; ===============. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst:4751,test,test,4751,interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToCrossCompileBuiltinsOnArm.rst,3,['test'],"['test', 'testing']"
Testability,"structors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a throw(); specifier. void test() throw() {; throw(1); // warn; }. exceptions.ThrownTypeDiffersSpec; (C++); The type of a thrown exception differs from those specified in; a throw(type) specifier. struct S{};. void test() throw(int) {; S s;; throw (s); // warn; }. smart pointers. Name, DescriptionExampleProgress. smartptr.SmartPtrInit; (C++); C++03: auto_ptr should store a pointer to an object obtained via; new as allocated memory will be cleaned using delete.; C++11: one should use unique_ptr<type[]> to keep a; pointer to memory allocated by new[].; C++11: to keep a pointer to memory allocated by new[] in; a shared_ptr one should use a custom deleter that calls ; delete[]..; Source: C++03 20.4.5p1; C++11 auto_ptr is deprecated (D.10). #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p1(new int); // Ok; std::auto_ptr<int> p2(new int[3]); // warn; }. #include <stdlib.h>; #include <memory>. void test() {; std::auto_ptr<int> p((int *)malloc(sizeof(int))); // warn; }. dead code. Name, DescriptionExampleProgr",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:3161,test,test,3161,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"sts (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages from the compiler and; test runner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started r",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:4939,test,tests,4939,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['tests']
Testability,"sts, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a nested test suite is; defined in that directory. If so, it loads that test suite recursively,; otherwise it instantiates a local test config for the directory (see; :ref:`local-configuration-files`). Tests are identified by the test suite they are contained within, and the; relative path inside that suite. Note that the relative path may not refer to; an actual file on disk; some test formats (such as *GoogleTest*) define; ""virtual tests"" which have a path that contains both the path to the actual; test file and a subpath to identify the virtual test. .. _local-configuration-files:. LOCAL CONFIGURATION FILES; ~~~~~~~~~~~~~~~~~~~~~~~~~. When :program:`lit` loads a subdirectory in a test suite, it instantiates a; local test configuration by cloning the configuration for the parent directory; --- the root of this configuration chain will always be ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:17424,test,test,17424,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,sts. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimiz,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4927,test,testBackpropagationCpu,4927,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBackpropagationCpu']
Testability,sts/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/in,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129849,benchmark,benchmarks,129849,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,sts/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang/Common; - `21`; - `21`; - `0`; - :good:`100%`; * - flang/include/flang/Decimal; - `2`; - `2`; - `0`; - :good:`100%`; * - flang/include/flang/Evaluate; - `23`; - `23`; - `0`; - :good:`100%`; * - flang/include/flang/Frontend; - `11`; - `10`; - `1`; - :part:`90%`; * - flang/include/flang/FrontendTool; - `1`; - `1`; - `0`; - :good:`100%`; ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:27345,test,tests,27345,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,sts/dexter/feature_tests/commands/perfect; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_address; - `7`; - `0`; - `7`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source; - `1`; - `1`; - `0`; - :good:`100%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/windows_noncanonical_path/source; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_finish_test; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/expect_step_kind; - `5`; - `0`; - `5`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps; - `8`; - `2`; - `6`; - :part:`25%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools; - `1`; - `0`; - `1`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter/feature_tests/subtools/clang-opt-bisect; - `2`; - `0`; - `2`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/dexter-tests; - `15`; - `3`; - `12`; - :part:`20%`; * - cross-project-tests/debuginfo-tests/llgdb-tests; - `8`; - `0`; - `8`; - :none:`0%`; * - cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb; - `2`; - `1`; - `1`; - :part:`50%`; * - flang/examples; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/examples/FlangOmpReport; - `3`; - `3`; - `0`; - :good:`100%`; * - flang/examples/PrintFlangFunctionNames; - `1`; - `1`; - `0`; - :good:`100%`; * - flang/include/flang; - `1`; - `1`; - `0,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst:26965,test,tests,26965,interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormattedStatus.rst,1,['test'],['tests']
Testability,"stubs; (.so files) from either ELF shared objects or text-based stubs. The text-based; stubs is useful for monitoring ABI changes of the shared object. The linkable; shared object stubs can be used to avoid unnecessary relinks when the ABI of; shared libraries does not change. IFS FORMATS; -----------. Here is an example of the text representation (IFS) of a shared object produced; by the :program:`llvm-ifs`:. ::. --- !ifs-v1; IFSVersion: 3.0; SoName: libtest.so /* Optional */; Target: x86_64-unknown-linux-gnu /* Optional, format 1, same format as llvm target triple */; Target: { Arch: x86_64, Endianness: little, Bitwidth: 64 } /* Optional, format 2 */; NeededLibs:; - libc.so.6; Symbols:; - { Name: sym0, Type: Notype }; - { Name: sym1, Type: Object, Size: 0 }; - { Name: sym2, Type: Func, Weak: false }; - { Name: sym3, Type: TLS }; - { Name: sym4, Type: Unknown, Warning: foo }; ... * ``IFSVersion``: Version of the IFS file for reader compatibility. * ``SoName`` (optional): Name of the shared object file that is being stubbed. * ``Target`` (optional): The architecture, endianness and bitwise information of; this shared object. It can be either in explicit format or in implicit LLVM; triple format. It can be optional and can be overridden from command line; options. * ``NeededLibs``: The list of the external shared objects that this library depends on. * ``Symbols``: A collection of all data needed to link objects for each symbol, sorted by name in ascending order. + ``Name``: Symbol name. + ``Type``: Whether the symbol is an object, function, no-type, thread local storage, or unknown. Symbol types not explicitly supported are mapped as unknown to improve signal-to-noise ratio. + ``Size``: The size of the symbol in question, doesn't apply to functions, and is optional for NoType symbols. + ``Undefined``: Whether or not the symbol is defined in this shared object file. + ``Weak``: Whether or not the symbol should be treated as weak. + ``Warning`` (optional): Warning text",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst:1367,stub,stubbed,1367,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-ifs.rst,1,['stub'],['stubbed']
Testability,"style of GNU's **addr2line**.; The differences from the ``LLVM`` style are:. * Does not print the column of a source code location. * Does not add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9488,test,test,9488,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"style test; suites, summarizing their results, and providing indication of failures.; :program:`lit` is designed to be a lightweight testing tool with as simple a; user interface as possible. :program:`lit` should be run with one or more *tests* to run specified on the; command line. Tests can be either individual test files or directories to; search for tests (see :ref:`test-discovery`). Each specified test will be executed (potentially concurrently) and once all; tests have been run :program:`lit` will print summary information on the number; of tests which passed or failed (see :ref:`test-status-results`). The; :program:`lit` program will execute with a non-zero exit code if any tests; fail. By default :program:`lit` will use a succinct progress display and will only; print summary information for test failures. See :ref:`output-options` for; options controlling the :program:`lit` progress display and output. :program:`lit` also includes a number of options for controlling how tests are; executed (specific features may depend on the particular test format). See; :ref:`execution-options` for more information. Finally, :program:`lit` also supports additional options for only running a; subset of the options specified on the command line, see; :ref:`selection-options` for more information. :program:`lit` parses options from the environment variable ``LIT_OPTS`` after; parsing options from the command line. ``LIT_OPTS`` is primarily useful for; supplementing or overriding the command-line options supplied to :program:`lit`; by ``check`` targets defined by a project's build system. :program:`lit` can also read options from response files which are specified as; inputs using the ``@path/to/file.rsp`` syntax. Arguments read from a file must; be one per line and are treated as if they were in the same place as the; original file referencing argument on the command line. A response file can; reference other response files. Users interested in the :program:`lit` architectur",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:1220,test,tests,1220,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"subscript expression into a matrix are ill-formed. **Note**: We considered providing an expression of the form; ``postfix-expression [expression]`` to access columns of a matrix. We think; that such an expression would be problematic once both column and row major; matrixes are supported: depending on the memory layout, either accessing columns; or rows can be done efficiently, but not both. Instead, we propose to provide; builtins to extract rows and columns from a matrix. This makes the operations; more explicit. Matrix Type Binary Operators; ----------------------------. Given two matrixes, the ``+`` and ``-`` operators perform element-wise addition; and subtraction, while the ``*`` operator performs matrix multiplication.; ``+``, ``-``, ``*``, and ``/`` can also be used with a matrix and a scalar; value, applying the operation to each element of the matrix. Earlier versions of this extension did not support division by a scalar.; You can test for the availability of this feature with; ``__has_extension(matrix_types_scalar_division)``. For the expression ``M1 BIN_OP M2`` where. * ``BIN_OP`` is one of ``+`` or ``-``, one of ``M1`` and ``M2`` is of matrix; type, and the other is of matrix type or real type; or; * ``BIN_OP`` is ``*``, one of ``M1`` and ``M2`` is of matrix type, and the; other is of a real type; or; * ``BIN_OP`` is ``/``, ``M1`` is of matrix type, and ``M2`` is of a real type:. * The usual arithmetic conversions are applied to ``M1`` and ``M2``. [ Note: if ``M1`` or; ``M2`` are of a real type, they are broadcast to matrices here. — end note ]; * ``M1`` and ``M2`` shall be of the same matrix type.; * The result is equivalent to Res in the following where col is the number of; columns and row is the number of rows in the matrix type:. .. code-block:: c++. decltype(M1) Res;; for (int C = 0; C < col; ++C); for (int R = 0; R < row; ++R); Res[R][C] = M1[R][C] BIN_OP M2[R][C];. Given the expression ``M1 * M2`` where ``M1`` and ``M2`` are of matrix type:. * ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/MatrixTypes.rst:5409,test,test,5409,interpreter/llvm-project/clang/docs/MatrixTypes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/MatrixTypes.rst,1,['test'],['test']
Testability,"suite (``make; TEST=nightly report``). #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build whole programs with it (ex. Chromium, Firefox, Apache) for; your platform. #. Download ``llvm-X.Y``, ``llvm-test-X.Y``, and the appropriate ``clang``; binary. Build *your* programs with it and check for conformance and; performance regressions. #. Run the :doc:`release process <ReleaseProcess>`, if your platform is; *different* than that which is officially supported, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every release, and report any *new* errors in GitHub.; If the bug can be reproduced with an unpatched upstream version of the release; candidate (as opposed to the distribution's own build), the priority should be; release blocker. During the first round of testing, all regressions must be fixed before the; second release candidate is tagged. In the subsequent stages, the testing is only to ensure that bug; fixes previously merged in have not created new major problems. *This is not; the time to solve additional and unrelated bugs!* If no patches are merged in,; the release is determined to be ready and the release manager may move onto the; next stage. Reporting Regressions; ---------------------. Every regression that is found during the tests (as per the criteria above),; should be filled in a bug in GitHub and added to the release milestone. If a bug can't be reproduced, or stops being a blocker, it should be removed; from the Milestone. Debugging can continue, but on trunk. Backport Requests; -----------------. Instructions for requesting a backport to a stable branch can be found :doc:`here <GitHub>`. Triaging Bug Reports for Releases; ---------------------------------. This section describes how to triage bug reports:. #. Search for bugs with a Release Mileston",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:9484,test,testing,9484,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testing']
Testability,"sult (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for undefined results of binary operators. .. code-block:: c. void test() {; int x;; int y = x + 1; // warn: left operand is garbage; }. .. _core-VLASize:. core.VLASize (C); """"""""""""""""""""""""""""""""; Check for declarations of Variable Length Arrays of undefined or zero size. Check for declarations of VLA of undefined or zero size. .. code-block:: c. void test() {; int x;; int vla1[x]; // warn: garbage as size; }. void test() {; int x = 0;; int vla2[x]; // warn: zero size; }. .. _core-uninitialized-ArraySubscript:. core.uninitialized.ArraySubscript (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as array subscripts. .. code-block:: c. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. .. _core-uninitialized-Assign:. core.uninitialized.Assign (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for assigning uninitialized values. .. code-block:: c. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. .. _core-uninitialized-Branch:. core.uninitialized.Branch (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values used as branch conditions. .. code-block:: c. void test() {; int x;; if (x) // warn; return;; }. .. _core-uninitialized-CapturedBlockVariable:. core.uninitialized.CapturedBlockVariable (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for blocks that capture uninitialized values. .. code-block:: c. void test() {; int x;; ^{ int y = x; }(); // warn; }. .. _core-uninitialized-UndefReturn:. core.uninitialized.UndefReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for uninitialized values being returned to the caller. .. code-block:: c. int test() {; int x;; return x; // warn; }. .. _core-uninitialized-NewArraySize:. core.uninitialized.NewArraySize (C++); """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""". Check if the element count in new[] is garbage or undefined. .. code-block:: cpp. void test() {; int n;; int *arr = new int[n]",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:6055,test,test,6055,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"sx,nodesy)`. Example:. ``` {.cpp}; h2->Draw(""SPEC n(40,40)"");; ```. Sometimes the displayed region is rather large. When displaying all; channels the pictures become very dense and complicated. It is very; difficult to understand the overall shape of data. ""`n(nx,ny)`"" allows; to change the density of displayed channels. Only the channels; coinciding with given nodes are displayed. The visualization ""Angles"" can be changed with ""`a(alpha,beta,view)`"":; ""`alpha`"" is the angle between the bottom horizontal screen line and; the displayed space on the right side of the picture and ""`beta`"" on; the left side, respectively. One can rotate the 3-d space around the; vertical axis using the ""`view`"" parameter. Allowed values are 0, 90,; 180 and 270 degrees. ``` {.cpp}; h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; ```. The operator ""`zs(scale)`"" changes the scale of the Z-axis. The; possible values are:. - 0 = Linear (default),; - 1 = Log,; - 2 = Sqrt. If `gPad->SetLogz()` has been set, the log scale on Z-axis is set; automatically, i.e. there is no need for using the `zs()` operator.; Note that the X and Y axis are always linear. The operator ""`ci(r,g,b`)"" defines the colors increments (`r`, `g`; and `b` are floats). For sophisticated shading (Light, Height and; LightHeight Display Modes Groups) the color palette starts from the; basic pen color (see `pa()` function). There is a predefined number of; color levels (256). Color in every level is calculated by adding the; increments of the `r` , `g` , `b` components to the previous level.; Using this function one can change the color increments between two; neighboring color levels. The function does not apply on the Simple; Display Modes Group. The default values are: (1,1,1). The operator ""`ca(color_algorithm)`"" allows to choose the Color; Algorithm. To define the colors one can use one of the following color; algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a; component reaches the limit value one can choose e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md:37784,log,log,37784,documentation/users-guide/Histograms.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Histograms.md,1,['log'],['log']
Testability,"symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g foo/test.cpp -o test.elf; $ llvm-symbolizer --obj=test.elf 0x4004a0; main; /tmp/foo/test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --basenames; main; test.cpp:15:0; $ llvm-symbolizer --obj=test.elf 0x4004a0 --relativenames; main; foo/test.cpp:15:0. Example 7 - Addresses as symbol names:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf main; main; /tmp/test.cpp:14:0; $ llvm-symbolizer --obj=test.elf ""CODE foz""; foz; /tmp/test.h:1:0. OPTIONS; -------. .. option:: --adjust-vma <offset>. Add the specified offset to object file addresses when performing lookups.; This can be used to perform lookups as if the object were relocated by the; offset. .. option:: --basenames, -s. Print just the file's name without any directories, instead of the; absolute path. .. option:: --build-id. Look up the object using the given build ID, specified as a hexadecimal; string. Mutually exclusive with :option:`--obj`. .. option:: --color [=<always|auto|never>]. Specify whether to use color in :option:`--filter-markup` mode. Defaults to; ``auto``, which detects whether standard output supports color. Specifying; ``--color`` alone is equivalent to ``--color=always``. .. option:: --debug-file-directory <path>. Provide a path to a directory with a `.build-id` subdirectory to search for; debug information for stripped binaries. Multiple instances of this argument; are searched in the order given. .. option:: --debuginfod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:4754,test,test,4754,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"system installations of libstdc++ as well as installations; adjacent to Clang itself. If your configuration fits neither of these; scenarios, you can use the -DGCC_INSTALL_PREFIX cmake option; to tell Clang where the gcc containing the desired libstdc++ is installed.; ; Try it out (assuming you add llvm/build/bin to your path):; ; clang --help; clang file.c -fsyntax-only (check for correctness); clang file.c -S -emit-llvm -o - (print out unoptimized llvm code); clang file.c -S -emit-llvm -o - -O3; clang file.c -S -O3 -o - (output native machine code). Run the testsuite:; ; make check-clang. Using Visual Studio; The following details setting up for and building Clang on Windows using; Visual Studio:. Get the required tools:; ; Git. Source code control program. Get it from:; ; https://git-scm.com/download; CMake. This is used for generating Visual Studio solution and; project files. Get it from:; ; https://cmake.org/download/; Visual Studio 2019 16.7 or later; Python. It is used to run the clang test suite. Get it from:; ; https://www.python.org/download/; GnuWin32 tools; The Clang and LLVM test suite use various GNU core utilities, such as; grep, sed, and find. The gnuwin32 packages; are the oldest and most well-tested way to get these tools. However, the; MSys utilities provided by git for Windows have been known to work.; Cygwin has worked in the past, but is not well tested.; If you don't already have the core utilies from some other source, get; gnuwin32 from ; http://getgnuwin32.sourceforge.net/. Check out LLVM and Clang:; ; git clone https://github.com/llvm/llvm-project.git. Note: Some Clang tests are sensitive to the line endings. Ensure; that checking out the files does not convert LF line endings to CR+LF. If; you're using git on Windows, make sure your core.autocrlf setting; is false. Run CMake to generate the Visual Studio solution and project files:; ; cd llvm-project; mkdir build (for building without polluting the source dir); cd build. If you are using",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html:3715,test,test,3715,interpreter/llvm-project/clang/www/get_started.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html,1,['test'],['test']
Testability,s}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - MethodDL Adam Optimization CPU; ROOT_EXECUTABLE(testMethodDLAdamOptimizationCpu TestMethodDLAdamOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-Adam-Optimization-Cpu COMMAND testMethodDLAdamOptimizationCpu TIMEOUT 1800). # DNN - MethodDL Adagrad Optimization CPU; ROOT_EXECUTABLE,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:5132,test,testBackpropagationDLCpu,5132,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBackpropagationDLCpu']
Testability,"t -enable-debugify -debugify-quiet -pass-to-test sample.ll. # Prepend -debugify before and append -check-debugify -strip after; # each pass on the pipeline (similar to -verify-each).; $ opt -debugify-each -O2 sample.ll. In order for ``check-debugify`` to work, the DI must be coming from; ``debugify``. Thus, modules with existing DI will be skipped. ``debugify`` can be used to test a backend, e.g:. .. code-block:: bash. $ opt -debugify < sample.ll | llc -o -. There is also a MIR-level debugify pass that can be run before each backend; pass, see:; :ref:`Mutation testing for MIR-level transformations<MIRDebugify>`. ``debugify`` in regression tests; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The output of the ``debugify`` pass must be stable enough to use in regression; tests. Changes to this pass are not allowed to break existing tests. .. note::. Regression tests must be robust. Avoid hardcoding line/variable numbers in; check lines. In cases where this can't be avoided (say, if a test wouldn't; be precise enough), moving the test to its own file is preferred. .. _MIRDebugify:. Test original debug info preservation in optimizations; ------------------------------------------------------. In addition to automatically generating debug info, the checks provided by; the ``debugify`` utility pass can also be used to test the preservation of; pre-existing debug info metadata. It could be run as follows:. .. code-block:: bash. # Run the pass by checking original Debug Info preservation.; $ opt -verify-debuginfo-preserve -pass-to-test sample.ll. # Check the preservation of original Debug Info after each pass.; $ opt -verify-each-debuginfo-preserve -O2 sample.ll. Limit number of observed functions to speed up the analysis:. .. code-block:: bash. # Test up to 100 functions (per compile unit) per pass.; $ opt -verify-each-debuginfo-preserve -O2 -debugify-func-limit=100 sample.ll. Please do note that running ``-verify-each-debuginfo-preserve`` on big projects; could be heavily time consumi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:13518,test,test,13518,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,2,['test'],['test']
Testability,"t 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${ROOT_root_CMD} -b -l -q ${createThreadPool} ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS ${labels}; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(tutorial-${tname} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(); endforeach(). #---Loop over all MPI tutorials and define the corresponding test---------; foreach(t ${mpi_tutorials}); list(FIND returncode_1 ${t} index); if(index EQUAL -1); set(rc 0); else(); set(rc 255); endif(); string(REPLACE "".C"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). # These tests on ARM64 need much more than 20 minutes - increase the timeout; if(ROOT_ARCHITECTURE MATCHES arm64 OR ROOT_ARCHITECTURE MATCHES ppc64); set(thisTestTimeout 3000) # 50m; else(); set(thisTestTimeout 1200) # 20m; endif(). ROOT_ADD_TEST(tutorial-${tname}; COMMAND ${MPIEXEC_EXECUTABLE} ${MPIEXEC_NUMPROC_FLAG} 4 ${ROOT_root_CMD} -b -l -q ${CMAKE_CURRENT_SOURCE_DIR}/${t}${${tname}-aclic}; PASSRC ${rc} FAILREGEX ""Error in <"" "": error:"" ""segmentation violation"" ""FROM HESSE STATUS=FAILED"" ""warning: Failed to call""; LABELS tutorial; DEPENDS tutorial-hsimple ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; TIMEOUT ${thisTestTimeout}); endforeach(). #---Python tutorials-----------------------------------------------------; if(ROOT_pyroot_FOUND). # Copy .rootlogon.py file into the build directory. It disables graphics ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:25181,test,test,25181,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['test']
Testability,"t No True − Use weight to count kNN events. UseLDA No False − Use local linear discriminant - experimental feature. Configuration options for MVA method :. Configuration options reference for MVA method: BDT. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with negative weights are ignored in the training (but are included for testing and performance evaluation). NTrees No 800 − Number of trees in the forest. MaxDepth No 3 − Max depth of the decision tree allowed. MinNodeSize No 5% − Minimum percentage of training events required in a leaf node (default: Classification: 5%, Regression: 0.2%). nCuts No 20 − Number of grid points in variable range used in finding optimal cut in node splitting. BoostType No AdaBoost AdaBoost, RealAdaBoost, Bagging, AdaBoostR2, Grad Boosting type for the trees in the forest . AdaBoostR2Loss No Quadratic Linear, Quadratic, Exponential Type of Loss function in AdaBoostR2. UseBaggedGrad No False − Use only a random subsample of all events for growing the trees in each iteration. (Only valid for GradBoost). Shrinkage No 1 − Learning rate for GradBoost algorithm. AdaBoostBeta No 0.5 − Learning rate for AdaBoost algorithm. UseRandomisedTrees No False − Determine at each node splitting the cut variable only as the best out of a random subset of ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:11832,test,testing,11832,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,1,['test'],['testing']
Testability,"t add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 3,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""foo()"",; ""Line"": 6,; ""StartAddress"": ""0x400486"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9633,test,test,9633,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"t as quickly as possible. If you are familiar with the; ROOT community, it may be beneficial to add a suggested reviewer to the PR in order to get quicker attention.; Please ping people :wave: should you not get timely feedback, for instance with `@root-project/core ping!`. ## Tests. As you contribute code, this code will likely fix an issue or add a feature.; Whatever it is: this requires you to add a new test, or to extend an existing test. Depending on the size and complexity; of this test, it exists either in the `test/` subdirectory of each part of ROOT (see for instance; [`tree/dataframe/test`](https://github.com/root-project/root/tree/master/tree/dataframe/test)), or in; [roottest](https://github.com/root-project/roottest.git). Tests in `test/` subdirectories are unit tests, mostly based on; [Google Test](https://github.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well as a GitHub Actions CI workflow tests PRs automatically; only a; [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.; The results are posted to the pull request.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:6095,test,tests,6095,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,1,['test'],['tests']
Testability,"t bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, the second --basenames, and the third; shows --relativenames. .. code-block:: console. $ pwd; /tmp; $ clang -g",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3313,test,test,3313,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"t being validated, which; can be uploaded to github for further testing. Build The Binary Distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Creating the binary distribution requires following the instructions; :doc:`here <ReleaseProcess>`. That process will perform both Release+Asserts and Release builds but only; pack the Release build for upload. You should use the Release+Asserts sysroot,; normally under ``final/Phase3/Release+Asserts/llvmCore-3.8.1-RCn.install/``,; for test-suite and run-time benchmarks, to make sure nothing serious has; passed through the net. For compile-time benchmarks, use the Release version. The minimum required version of the tools you'll need are :doc:`here <GettingStarted>`. Release Qualification Criteria; ------------------------------. There are no official release qualification criteria. It is up to the; the release manager to determine when a release is ready. The release manager; should pay attention to the results of community testing, the number of outstanding; bugs, and then number of regressions when determining whether or not to make a; release. The community values time based releases, so releases should not be delayed for; too long unless there are critical issues remaining. In most cases, the only; kind of bugs that are critical enough to block a release would be a major regression; from a previous release. Official Testing; ----------------. A few developers in the community have dedicated time to validate the release; candidates and volunteered to be the official release testers for each; architecture. These will be the ones testing, generating and uploading the official binaries; to the server, and will be the minimum tests *necessary* for the release to; proceed. This will obviously not cover all OSs and distributions, so additional community; validation is important. However, if community input is not reached before the; release is out, all bugs reported will have to go on the next stable release. The official release mana",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:6383,test,testing,6383,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['testing']
Testability,"t care about block livein lists. - The (global) `liveins:` list is typically only interesting for early; instruction selection passes and can be removed when testing later passes.; The per-block `liveins:` on the other hand are necessary if; `tracksRegLiveness` is true. - Branch probability data in block `successors:` lists can be dropped if the; test doesn't depend on it. Example:; `successors: %bb.1(0x40000000), %bb.2(0x40000000)` can be replaced with; `successors: %bb.1, %bb.2`. - MIR code contains a whole IR module. This is necessary because there are; no equivalents in MIR for global variables, references to external functions,; function attributes, metadata, debug info. Instead some MIR data references; the IR constructs. You can often remove them if the test doesn't depend on; them. - Alias Analysis is performed on IR values. These are referenced by memory; operands in MIR. Example: `:: (load 8 from %ir.foobar, !alias.scope !9)`.; If the test doesn't depend on (good) alias analysis the references can be; dropped: `:: (load 8)`. - MIR blocks can reference IR blocks for debug printing, profile information; or debug locations. Example: `bb.42.myblock` in MIR references the IR block; `myblock`. It is usually possible to drop the `.myblock` reference and simply; use `bb.42`. - If there are no memory operands or blocks referencing the IR then the; IR function can be replaced by a parameterless dummy function like; `define @func() { ret void }`. - It is possible to drop the whole IR section of the MIR file if it only; contains dummy functions (see above). The .mir loader will create the; IR functions automatically in this case. .. _limitations:. Limitations; -----------. Currently the MIR format has several limitations in terms of which state it; can serialize:. - The target-specific state in the target-specific ``MachineFunctionInfo``; subclasses isn't serialized at the moment. - The target-specific ``MachineConstantPoolValue`` subclasses (in the ARM and; SystemZ b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:4559,test,test,4559,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"t comes with the; XRay runtime and/or control when/how the XRay instrumentation runs, you may use; the XRay APIs directly for doing so. To do this, you'll need to include the; ``xray_log_interface.h`` from the compiler-rt ``xray`` directory. The important API; functions we list below:. - ``__xray_log_register_mode(...)``: Register a logging implementation against; a string Mode identifier. The implementation is an instance of; ``XRayLogImpl`` defined in ``xray/xray_log_interface.h``.; - ``__xray_log_select_mode(...)``: Select the mode to install, associated with; a string Mode identifier. Only implementations registered with; ``__xray_log_register_mode(...)`` can be chosen with this function.; - ``__xray_log_init_mode(...)``: This function allows for initializing and; re-initializing an installed logging implementation. See; ``xray/xray_log_interface.h`` for details, part of the XRay compiler-rt; installation. Once a logging implementation has been initialized, it can be ""stopped"" by; finalizing the implementation through the ``__xray_log_finalize()`` function.; The finalization routine is the opposite of the initialization. When finalized,; an implementation's data can be cleared out through the; ``__xray_log_flushLog()`` function. For implementations that support in-memory; processing, these should register an iterator function to provide access to the; data via the ``__xray_log_set_buffer_iterator(...)`` which allows code calling; the ``__xray_log_process_buffers(...)`` function to deal with the data in; memory. All of this is better explained in the ``xray/xray_log_interface.h`` header. Basic Mode; ----------. XRay supports a basic logging mode which will trace the application's; execution, and periodically append to a single log. This mode can be; installed/enabled by setting ``xray_mode=xray-basic`` in the ``XRAY_OPTIONS``; environment variable. Combined with ``patch_premain=true`` this can allow for; tracing applications from start to end. Like all the other ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:7396,log,logging,7396,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['logging']
Testability,"t continue, then the current state should be transitioned; into a so-called sink node, a node from which no further analysis will be; performed. This is done by calling the ; CheckerContext::generateSink function; this function is the same as the; addTransition function, but marks the state as a sink node. Like; addTransition, this returns an ExplodedNode with the updated; state, which can then be passed to the BugReport constructor. After a BugReport is created, it should be passed to the analyzer core; by calling CheckerContext::emitReport. AST Visitors; Some checks might not require path-sensitivity to be effective. Simple AST walk; might be sufficient. If that is the case, consider implementing a Clang; compiler warning. On the other hand, a check might not be acceptable as a compiler; warning; for example, because of a relatively high false positive rate. In this; situation, AST callbacks checkASTDecl and; checkASTCodeBody are your best friends. Testing; Every patch should be well tested with Clang regression tests. The checker tests; live in clang/test/Analysis folder. To run all of the analyzer tests,; execute the following from the clang build directory:; ; $ bin/llvm-lit -sv ../llvm/tools/clang/test/Analysis; ; Useful Commands/Debugging Hints; Attaching the Debugger; When your command contains the -cc1 flag, you can attach the; debugger to it directly:. $ gdb --args clang -cc1 -analyze -analyzer-checker=core test.c; $ lldb -- clang -cc1 -analyze -analyzer-checker=core test.c. Otherwise, if your command line contains --analyze,; the actual clang instance would be run in a separate process. In; order to debug it, use the -### flag for obtaining; the command line of the child process:. $ clang --analyze test.c -\#\#\#. Below we describe a few useful command line arguments, all of which assume that; you are running clang -cc1. Narrowing Down the Problem; While investigating a checker-related issue, instruct the analyzer to only; execute a single checker:. $ cla",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:18584,test,tested,18584,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,2,['test'],"['tested', 'tests']"
Testability,"t field declarations. Given; struct X { struct { int a; }; };; indirectFieldDecl(); matches 'a'. Matcher<Decl>labelDeclMatcher<LabelDecl>...; Matches a declaration of label. Given; goto FOO;; FOO: bar();; labelDecl(); matches 'FOO:'. Matcher<Decl>linkageSpecDeclMatcher<LinkageSpecDecl>...; Matches a declaration of a linkage specification. Given; extern ""C"" {}; linkageSpecDecl(); matches ""extern ""C"" {}"". Matcher<Decl>namedDeclMatcher<NamedDecl>...; Matches a declaration of anything that could have a name. Example matches X, S, the anonymous union type, i, and U;; typedef int X;; struct S {; union {; int i;; } U;; };. Matcher<Decl>namespaceAliasDeclMatcher<NamespaceAliasDecl>...; Matches a declaration of a namespace alias. Given; namespace test {}; namespace alias = ::test;; namespaceAliasDecl(); matches ""namespace alias"" but not ""namespace test"". Matcher<Decl>namespaceDeclMatcher<NamespaceDecl>...; Matches a declaration of a namespace. Given; namespace {}; namespace test {}; namespaceDecl(); matches ""namespace {}"" and ""namespace test {}"". Matcher<Decl>nonTypeTemplateParmDeclMatcher<NonTypeTemplateParmDecl>...; Matches non-type template parameter declarations. Given; template <typename T, int N> struct C {};; nonTypeTemplateParmDecl(); matches 'N', but not 'T'. Matcher<Decl>objcCategoryDeclMatcher<ObjCCategoryDecl>...; Matches Objective-C category declarations. Example matches Foo (Additions); @interface Foo (Additions); @end. Matcher<Decl>objcCategoryImplDeclMatcher<ObjCCategoryImplDecl>...; Matches Objective-C category definitions. Example matches Foo (Additions); @implementation Foo (Additions); @end. Matcher<Decl>objcImplementationDeclMatcher<ObjCImplementationDecl>...; Matches Objective-C implementation declarations. Example matches Foo; @implementation Foo; @end. Matcher<Decl>objcInterfaceDeclMatcher<ObjCInterfaceDecl>...; Matches Objective-C interface declarations. Example matches Foo; @interface Foo; @end. Matcher<Decl>objcIvarDeclMatcher<ObjCIvarDecl>...; Matc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html:14656,test,test,14656,interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,2,['test'],['test']
Testability,"t files to edit Clang source code and generate a; second build directory next to it for running the tests with these steps:. Check out clang and LLVM as described above; Open a developer command prompt with the appropriate environment.; ; If you open the start menu and search for ""Command Prompt"", you should; see shortcuts created by Visual Studio to do this. To use native x64; tools, choose the one titled ""x64 Native Tools Command Prompt for VS; 2017"".; Alternatively, launch a regular cmd prompt and run the; appropriate vcvarsall.bat incantation. To get the 2017 x64 tools, this; would be:; ""C:\Program Files (x86)\Microsoft Visual; Studio\2017\Community\VC\Auxiliary\Build\vcvarsall.bat"" x64. mkdir build_ninja (or build, or use your own; organization); cd build_ninja; set CC=cl (necessary to force CMake to choose MSVC over mingw GCC; if you have it installed); set CXX=cl; cmake -GNinja -DLLVM_ENABLE_PROJECTS=clang ..\llvm; ninja clang This will build just clang.; ninja check-clang This will run the clang tests. Clang Compiler Driver (Drop-in Substitute for GCC); The clang tool is the compiler driver and front-end, which is; designed to be a drop-in replacement for the gcc command. Here are; some examples of how to use the high-level driver:. $ cat t.c; #include <stdio.h>; int main(int argc, char **argv) { printf(""hello world\n""); }; $ clang t.c; $ ./a.out; hello world. The 'clang' driver is designed to work as closely to GCC as possible to; maximize portability. The only major difference between the two is that; Clang defaults to gnu99 mode while GCC defaults to gnu89 mode. If you see; weird link-time errors relating to inline functions, try passing -std=gnu89; to clang.; Examples of using Clang. $ cat ~/t.c; typedef float V __attribute__((vector_size(16)));; V foo(V a, V b) { return a+b*a; }. Preprocessing:. $ clang ~/t.c -E; # 1 ""/Users/sabre/t.c"" 1. typedef float V __attribute__((vector_size(16)));. V foo(V a, V b) { return a+b*a; }. Type checking:. $ clang -fsynt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html:6737,test,tests,6737,interpreter/llvm-project/clang/www/get_started.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html,1,['test'],['tests']
Testability,"t fitted channel; int xmax; // last fitted channel; double alpha; // convergence coefficient, input parameter, it should be a positive number and <=1; double chi; // here the function returns the resulting chi-square; int statistic_type; // type of statistics, possible values are:; // FIT1_OPTIM_CHI_COUNTS (chi square statistics with counts as weighting coefficients),; // FIT1_OPTIM_CHI_FUNC_VALUES (chi square statistics with function values as weighting coefficients); // FIT1_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values are:; // FIT1_ALPHA_HALVING,; // FIT1_ALPHA_OPTIMAL; int power; // possible values FIT1_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values; // FIT1_TAYLOR_ORDER_FIRST, FIT1_TAYLOR_ORDER_SECOND. double position_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks positions, input parameters; double position_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted positions, output parameters; double position_err[MAX_NUMBER_OF_PEAKS1]; // position errors; bool fix_position[MAX_NUMBER_OF_PEAKS1]; // logical vector which allows to fix appropriate positions (not fit). However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS1]; // initial values of peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS1]; // calculated values of fitted amplitudes, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS1]; // amplitude errors; bool fix_amp[MAX_NUMBER_OF_PEAKS1]i; // logical vector, which allows to fix appropriate amplitudes (not fit). However they are present in the estimated functional; double area[MAX_NUMBER_OF_PEAKS1]; // calculated areas of peaks; double area_err[MAX_NUMBER_OF_PEAKS1]; // errors of peak areas; double sigma_init; // sigma parameter, see peak shape function; double sigma_calc;; double sigma_err;; bool fix_sigma;; double t_init // t parameter, see peak shape function; double t_calc;; double t_err;; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:42646,log,logical,42646,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['logical']
Testability,"t for the experimental constant expression interpreter; : Clang's production constant expression interpreter computes a constant; expression result by walking over AST nodes, performing calculations as it; goes. This does not have good performance properties, and so we've begun work; on an ; experimental constant expression interpreter that works by converting the; AST into bytecode that is interpreted. This effort has a long tail of work left; to complete because it requires implementing byte code for every kind of; expression and type that can be used in a constant expression for C++ and C. Improve clang-doc: Clang's library-based design allows it to be used; by a variety of tools that reason about source code.; clang-doc is one; great application of this functionality, which generates code documentation; from source code. The tool is in early stages of development and could use more; dedicated effort to complete the implementation.; Self-testing using clang: There are several neat ways to; improve the quality of clang by self-testing. Some examples:. Improve the reliability of AST printing and serialization by; ensuring that the AST produced by clang on an input doesn't change; when it is reparsed or unserialized. Improve parser reliability and error generation by automatically; or randomly changing the input checking that clang doesn't crash and; that it doesn't generate excessive errors for small input; changes. Manipulating the input at both the text and token levels is; likely to produce interesting test cases. Continue work on C++20, C++23, C++2c, and C23 support:; There are still several C++20 features to complete, and work has begun on; supporting the latest language standards. Please see the; C++ status report page to find out what is; missing.; StringRef'ize APIs: A thankless but incredibly useful project is; StringRef'izing (converting to use llvm::StringRef instead of const; char * or std::string) various clang interfaces. This generally; simplifies the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:4256,test,testing,4256,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,2,['test'],['testing']
Testability,"t i = 0;; int j = 0;; for (int j = 0; i < 3; ++j); // warn; }. different.FloatingCompare; (C); Comparing floating point numbers may be not precise. #include <math.h>. double test() {; double b = sin(M_PI / 6.0);; if (b == 0.5) // warn; b = 0;; return b;; }. different.BitwiseOpBoolArg; (C, C++); Boolean value met at the left/right part of the bitwise &; or | operator.; Did you mean && (||) ?. int f();. void test() {; bool b = true;; if (b & f()) {} // warn; }. different.LabelInsideSwitch; (C); Possibly a misprint: label found inside a switch(); statement. void test(int c) {; switch(c){; case 1:; c += 1; break;; defalt: // warn (did you mean 'default'?); c -= 1; break;; }; }. different.IdenticalCondIfIf; (C); The conditions of two subsequent if statements are; identical. int test(int c) {; if (c > 5); c += 1;; if (c > 5) // warn; c -= 1;; return c;; }. different.LogicalOpUselessArg; (C); The second operand of a && operator has no impact on; expression result. void test(unsigned a) {; if (a<7 && a<10) {}; // warn; }. different.SameResLogicalExpr; (C); An expression is always evaluated to true/false. void test() {; int i = 0;; if (i != 0) {}; // warn; }. void test(int i) {; if (i == 0 && i == 1) {}; // warn; }. void test(int i) {; if (i < 0 || i >= 0) {}; // warn; }. different.OpPrecedenceAssignCmp; (C, C++); Comparison operation has higher precedence then assignment. Boolean value is; assigned to a variable of other type. Parenthesis may bee required around an; assignment. int f();. void test(int x, int y) {; bool b;; if((b = x != y)) {} // ok; if((x = f() != y)) {} // warn; }. different.OpPrecedenceIifShift; (C, C++); ?: has lower precedence then <<.; Source: Stephen C. Dewhurst ""C++ Gotchas: Avoiding Common Problems in Coding; and Design"", advise 15. #include <iostream>. void test(int a) {; std::cout << a ? ""a"" : ""b""; // warn; }. void test(int a) {; a << a > 7 ? 1 : 2; // warn; }. different.ObjectUnused; (C++); The object was created but is not being used. struct S {",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:22469,test,test,22469,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"t i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. core.uninitialized.Assign; (C); Check for assigning uninitialized values. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. core.uninitialized.Branch; (C); Check for uninitialized values used as branch conditions. void test() {; int x;; if (x) // warn; return;; }. core.uninitialized.CapturedBlockVariable; (C); Check for blocks that capture uninitialized values. void test() {; int x;; ^{ int y = x; }(); // warn; }. core.uninitialized.UndefReturn; (C); Check for uninitialized values being returned to the caller. int test() {; int x;; return x; // warn; }. C++ Checkers. Name, DescriptionExample. cplusplus.NewDelete; (C++); Check for double-free, use-after-free and offset problems involving C++ ; delete. void f(int *p);. void testUseMiddleArgAfterDelete(int *p) {; delete p;; f(p); // warn: use after free; }. class SomeClass {; public:; void f();; };. void test() {; SomeClass *c = new SomeClass;; delete c;; c->f(); // warn: use after free; }. void test() {; int *p = (int *)__builtin_alloca(sizeof(int));; delete p; // warn: deleting memory allocated by alloca; }. void test() {; int *p = new int;; delete p;; delete p; // warn: attempt to free released; }. void test() {; int i;; delete &i; // warn: delete address of local; }. void test() {; int *p = new int[1];; delete[] (++p);; // warn: argument to 'delete[]' is offset by 4 bytes; // from the start of memory allocated by 'new[]'; }. cplusplus.NewDeleteLeaks; (C++); Check for memory leaks. Traces memory managed by new/; delete. void test() {; int *p = new int;; } // warn. Dead Code Checkers. Name, DescriptionExample. deadcode.DeadStores; (C); Check for values stored to variables that are never read afterwards. void test() {; int x;; x = 1; // warn; }. Nullability Checkers. Name, DescriptionExample. nullability.NullPassedToNonnull; (ObjC); Warns when a null pointer is passed to a pointer which has a; _Nonnull type. if (name != nil)",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:5344,test,test,5344,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"t is known to have a non-zero value, FALSE if the; argument is known to have a zero or null value, and UNKNOWN if the argument; isn't sufficiently constrained on this path. You can use this to test other; values by using expressions like ""x == 5"". Note that this functionality is; currently DISABLED in inlined functions, since different calls to the same; inlined function could provide different information, making it difficult to; write proper -verify directives. In C, the argument can be typed as 'int' or as '_Bool'. Example usage::. clang_analyzer_eval(x); // expected-warning{{UNKNOWN}}; if (!x) return;; clang_analyzer_eval(x); // expected-warning{{TRUE}}. - ``void clang_analyzer_checkInlined(bool);``. If a call occurs within an inlined function, prints TRUE or FALSE according to; the value of its argument. If a call occurs outside an inlined function,; nothing is printed. The intended use of this checker is to assert that a function is inlined at; least once (by passing 'true' and expecting a warning), or to assert that a; function is never inlined (by passing 'false' and expecting no warning). The; argument is technically unnecessary but is intended to clarify intent. You might wonder why we can't print TRUE if a function is ever inlined and; FALSE if it is not. The problem is that any inlined function could conceivably; also be analyzed as a top-level function (in which case both TRUE and FALSE; would be printed), depending on the value of the -analyzer-inlining option. In C, the argument can be typed as 'int' or as '_Bool'. Example usage::. int inlined() {; clang_analyzer_checkInlined(true); // expected-warning{{TRUE}}; return 42;; }. void topLevel() {; clang_analyzer_checkInlined(false); // no-warning (not inlined); int value = inlined();; // This assertion will not be valid if the previous call was not inlined.; clang_analyzer_eval(value == 42); // expected-warning{{TRUE}}; }. - ``void clang_analyzer_warnIfReached();``. Generate a warning if this line of code",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:3900,assert,assert,3900,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,2,['assert'],['assert']
Testability,"t it is common for; the same (and often large) header files to be included by multiple; source files. Consequently, compile times can often be greatly improved; by caching some of the (redundant) work done by a compiler to process; headers. Precompiled header files, which represent one of many ways to; implement this optimization, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:46877,test,test,46877,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"t jg, int jh, int ji);; . New statistical function: non-central chisquare probability; density function; ; double noncentral_chisquared_pdf(double x, double r, double lambda);; ; It is implemented using Bessel functions or hypergeometric function; ; New classes VavilovAccurate and VavilovFast,; derived from the abstract base class Vavilov,; provide pdf, cdf and quantile functions for the Vavilov distribution,; based on the algorithms of CERNLIB (G116 and G115, respectively).; The classes VavilovAccuratePdf,; VavilovAccurateCdf and VavilovAccurateQuantile; implement the IParametricFunctionOneDim interface; for easier use in fit problems. . Unuran. Use new version 1.7.2 ; Add new class TUnuranSampler implementing the; ROOT::Math::DistSampler interface for one dimensional; continuous and discrete distributions and for mult-dimensional ones; . Foam. Add new class TFoamSampler implementing the; ROOT::Math::DistSampler interface for generating random; numbers according to any one or multi-dim distributions using Foam.; ; All the TFoam options can be controlled via the; ROOT::Math::DistSamplerOptions class, which can be passed; as input to the virtual ROOT::Math::DistSampler::Init(..); function.; . GenVector. Add some missing copy constructor and assignment operators to; fix compilation issue observed with LLVM (Clang). Minuit. Fix a bug when using at the same time TMinuit or TFitter with; the new TMinuitMinimizer class. See bug 72909.; . Minuit2. Fix the returned error from the Minimizer class for fixed and; constant parameters. Now is set explicitly to zero.; ; Fix a problem in re-defining fixed parameters as variable; ones. Before it was not possible to release them.; ; Fix a problem in the number of function calls when running MnHesse; after minimizing. Now the number is incremented instead of being; reset.; . Genetic. Add a new Minimizer implementation based on the genetic; algorithm used in TMVA (plugin name ""Genetic""). See example programs in; math/genetic/test.; . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html:10324,test,test,10324,math/doc/v528/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/doc/v528/index.html,1,['test'],['test']
Testability,"t may be too costly to record for each function, but; that is required to contextualize the fine-grained timings. They also are used; as markers for user-defined Event Data payloads. Metadata records have 16; bytes each. - ``Event Data``: Free form data may be associated with events that are traced; by the binary and encode data defined by a handler function. Event data is; always preceded with a marker record which indicates how large it is. - ``Function Arguments``: The arguments to some functions are included in the; trace. These are either pointer addresses or primitives that are read and; logged independently of their types in a high level language. To the tracer,; they are all numbers. Function Records that have attached arguments will; indicate their presence on the function entry record. We only support logging; contiguous function argument sequences starting with argument zero, which will; be the ""this"" pointer for member function invocations. For example, we don't; support logging the first and third argument. A reader of the memory format must maintain a state machine. The format makes no; attempt to pad for alignment, and it is not seekable. Function Records; ----------------. Function Records have an 8 byte layout. This layout encodes information to; reconstruct a call stack of instrumented function and their durations. +---------------+--------------+-----------------------------------------------+; | Field | Size (bits) | Description |; +===============+==============+===============================================+; | discriminant | ``1`` | Indicates whether a reader should read a |; | | | Function or Metadata record. Set to ``0`` for |; | | | Function records. |; +---------------+--------------+-----------------------------------------------+; | action | ``3`` | Specifies whether the function is being |; | | | entered, exited, or is a non-standard entry |; | | | or exit produced by optimizations. |; +---------------+--------------+-------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst:4684,log,logging,4684,interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayFDRFormat.rst,1,['log'],['logging']
Testability,"t of globals. LLVM's; `control flow integrity`_ implementation uses this metadata to efficiently; check (at each call site) that a given address corresponds to either a; valid vtable or function pointer for a given class or function type, and its; whole-program devirtualization pass uses the metadata to identify potential; callees for a given virtual call. To use the mechanism, a client creates metadata nodes with two elements:. 1. a byte offset into the global (generally zero for functions); 2. a metadata object representing an identifier for the type. These metadata nodes are associated with globals by using global object; metadata attachments with the ``!type`` metadata kind. Each type identifier must exclusively identify either global variables; or functions. .. admonition:: Limitation. The current implementation only supports attaching metadata to functions on; the x86-32 and x86-64 architectures. An intrinsic, :ref:`llvm.type.test <type.test>`, is used to test whether a; given pointer is associated with a type identifier. .. _control flow integrity: https://clang.llvm.org/docs/ControlFlowIntegrity.html. Representing Type Information using Type Metadata; =================================================. This section describes how Clang represents C++ type information associated with; virtual tables using type metadata. Consider the following inheritance hierarchy:. .. code-block:: c++. struct A {; virtual void f();; };. struct B : A {; virtual void f();; virtual void g();; };. struct C {; virtual void h();; };. struct D : A, C {; virtual void f();; virtual void h();; };. The virtual table objects for A, B, C and D look like this (under the Itanium ABI):. .. csv-table:: Virtual Table Layout for A, B, C, D; :header: Class, 0, 1, 2, 3, 4, 5, 6. A, A::offset-to-top, &A::rtti, &A::f; B, B::offset-to-top, &B::rtti, &B::f, &B::g; C, C::offset-to-top, &C::rtti, &C::h; D, D::offset-to-top, &D::rtti, &D::f, &D::h, D::offset-to-top, &D::rtti, thunk for &D::h. When an obj",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:1136,test,test,1136,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,2,['test'],['test']
Testability,"t of the compiler the feature's implementation exists in;; we have parsing tests in clang/test/Parser, and semantic analysis; tests in clang/test/Sema*, etc. We also have tests written to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for; C; and; C++; defect reports and updating the documentation accordingly.; Bug triage: Clang's ; issue trackercurrently has over 20,000 open issues, many of which are not; appropriately tagged, are no longer reproducible, could use a reduced test case,; or otherwise needs some manual interaction. We can always use help with; bug triage and; issue tracker maintenance. Improve build times with Clang: the time it takes Clang to process a; translation unit is very important to our users; the lower the build time, the; better the overall user experience. It would be good to improve Clang's; performance as well as to find ways to proactively alert us when we've; introduced a change that has significant negative impact on build times.; Complete support for the experimental constant expression interpreter; : Clang's production constant expression interpreter computes a constant; expression result by walking over AST nodes, performing calculations as it; goes. This does not have good performance pro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:2530,test,test,2530,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,1,['test'],['test']
Testability,"t out of bounds, where the bounds can be statically determined; * Bitwise shifts that are out of bounds for their data type; * Dereferencing misaligned or null pointers; * Signed integer overflow; * Conversion to, from, or between floating-point types which would; overflow the destination. See the full list of available :ref:`checks <ubsan-checks>` below. UBSan has an optional run-time library which provides better error reporting.; The checks have small runtime cost and no impact on address space layout or ABI. How to build; ============. Build LLVM/Clang with `CMake <https://llvm.org/docs/CMake.html>`_. Usage; =====. Use ``clang++`` to compile and link your program with the ``-fsanitize=undefined``; option. Make sure to use ``clang++`` (not ``ld``) as a linker, so that your; executable is linked with proper UBSan runtime libraries, unless all enabled; checks use trap mode. You can use ``clang`` instead of ``clang++`` if you're; compiling/linking C code. .. code-block:: console. % cat test.cc; int main(int argc, char **argv) {; int k = 0x7fffffff;; k += argc;; return 0;; }; % clang++ -fsanitize=undefined test.cc; % ./a.out; test.cc:3:5: runtime error: signed integer overflow: 2147483647 + 1 cannot be represented in type 'int'. You can use ``-fsanitize=...`` and ``-fno-sanitize=`` to enable and disable one; check or one check group. For an individual check, the last option that enabling; or disabling it wins. .. code-block:: console. # Enable all checks in the ""undefined"" group, but disable ""alignment"".; % clang -fsanitize=undefined -fno-sanitize=alignment a.c. # Enable just ""alignment"".; % clang -fsanitize=alignment a.c. # The same. -fno-sanitize=undefined nullifies the previous -fsanitize=undefined.; % clang -fsanitize=undefined -fno-sanitize=undefined -fsanitize=alignment a.c. For most checks (:ref:`checks <ubsan-checks>`), the instrumented program prints; a verbose error report and continues execution upon a failed check.; You can use the following options to ch",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst:1357,test,test,1357,interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UndefinedBehaviorSanitizer.rst,1,['test'],['test']
Testability,"t program from; scratch. Since this is a very common task, ROOT provides a utility that; generates a skeleton class designed to loop over the entries of the; tree. This is the `TTree::MakeClass` method. We will now go through the steps; of using `MakeClass` with a simplified example. The methods used here; obviously work for complex event loop calculations. These are our assumptions: we would like to do selective plotting and; loop through each entry of the tree and tracks. We chose a simple; example: we want to plot `fPx` of the first 100 tracks of each entry. We; have a ROOT tree with a branch for each data member in the ""`Event`""; object. To build this file and tree follow the instructions on how to; build the examples in `$ROOTSYS/test`. Execute `Event` and instruct it; to split the object with this command (from the UNIX command line). ``` {.cpp}; > $ROOTSYS/test/Event 400 1 2 1; ```. This creates an `Event.root` file with 400 events, compressed, split,; and filled. See `$ROOTSYS/test/MainEvent.cxx` for more info. The person who designed the tree makes a shared library available to; you, which defines the classes needed. In this case, the classes are; Event, `EventHeader`, and Track and they are defined in the shared; library `libEvent.so`. The designer also gives you the `Event.h` file to; see the definition of the classes. You can locate `Event.h` in; `$ROOTSYS/test`, and if you have not yet built `libEvent.so`, please see; the instructions of how to build it (typing make in \$ROOTSYS/test is; enough). If you have already built it, you can now use it again. ### Creating a Class with MakeClass. First, we load the shared library and open `Event.root`. ``` {.cpp}; root[] .L libEvent.so; root[] TFile *f = new TFile(""Event.root"");; root[] f->ls();; TFile** Event.root TTree benchmark ROOT file; TFile* Event.root TTree benchmark ROOT file; KEY: TH1F htime;1 Real-Time to write versus time; KEY: TTree T;1 An example of a ROOT tree; ```. We can see there is a tree ""`T`",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:122487,test,test,122487,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"t put the tables in-line in the text. This is more like the llvm; default jump table implementation. This might be useful sometime. Several; revisions of patches are on the mailing list, beginning at:; http://lists.llvm.org/pipermail/llvm-dev/2009-June/022763.html. //===---------------------------------------------------------------------===//. Make use of the ""rbit"" instruction. //===---------------------------------------------------------------------===//. Take a look at test/CodeGen/Thumb2/machine-licm.ll. ARM should be taught how; to licm and cse the unnecessary load from cp#1. //===---------------------------------------------------------------------===//. The CMN instruction sets the flags like an ADD instruction, while CMP sets; them like a subtract. Therefore to be able to use CMN for comparisons other; than the Z bit, we'll need additional logic to reverse the conditionals; associated with the comparison. Perhaps a pseudo-instruction for the comparison,; with a post-codegen pass to clean up and handle the condition codes?; See PR5694 for testcase. //===---------------------------------------------------------------------===//. Given the following on armv5:; int test1(int A, int B) {; return (A&-8388481)|(B&8388480);; }. We currently generate:; 	ldr	r2, .LCPI0_0; 	and	r0, r0, r2; 	ldr	r2, .LCPI0_1; 	and	r1, r1, r2; 	orr	r0, r1, r0; 	bx	lr. We should be able to replace the second ldr+and with a bic (i.e. reuse the; constant which was already loaded). Not sure what's necessary to do that. //===---------------------------------------------------------------------===//. The code generated for bswap on armv4/5 (CPUs without rev) is less than ideal:. int a(int x) { return __builtin_bswap32(x); }. a:; 	mov	r1, #255, 24; 	mov	r2, #255, 16; 	and	r1, r1, r0, lsr #8; 	and	r2, r2, r0, lsl #8; 	orr	r1, r1, r0, lsr #24; 	orr	r0, r2, r0, lsl #24; 	orr	r0, r0, r1; 	bx	lr. Something like the following would be better (fewer instructions/registers):; 	eor r1, r0, r0, ror #16;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt:17788,test,testcase,17788,interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,1,['test'],['testcase']
Testability,"t rounded,; this flag can affect numerical code. * ``-fcuda-flush-denormals-to-zero`` (default: off) When this is enabled,; floating point operations may flush `denormal; <https://en.wikipedia.org/wiki/Denormal_number>`_ inputs and/or outputs to 0.; Operations on denormal numbers are often much slower than the same operations; on normal numbers. * ``-fcuda-approx-transcendentals`` (default: off) When this is enabled, the; compiler may emit calls to faster, approximate versions of transcendental; functions, instead of using the slower, fully IEEE-compliant versions. For; example, this flag allows clang to emit the ptx ``sin.approx.f32``; instruction. This is implied by ``-ffast-math``. Standard library support; ========================. In clang and nvcc, most of the C++ standard library is not supported on the; device side. ``<math.h>`` and ``<cmath>``; ----------------------------. In clang, ``math.h`` and ``cmath`` are available and `pass; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/math_h.cu>`_; `tests; <https://github.com/llvm/llvm-test-suite/blob/main/External/CUDA/cmath.cu>`_; adapted from libc++'s test suite. In nvcc ``math.h`` and ``cmath`` are mostly available. Versions of ``::foof``; in namespace std (e.g. ``std::sinf``) are not available, and where the standard; calls for overloads that take integral arguments, these are usually not; available. .. code-block:: c++. #include <math.h>; #include <cmath.h>. // clang is OK with everything in this function.; __device__ void test() {; std::sin(0.); // nvcc - ok; std::sin(0); // nvcc - error, because no std::sin(int) override is available.; sin(0); // nvcc - same as above. sinf(0.); // nvcc - ok; std::sinf(0.); // nvcc - no such function; }. ``<std::complex>``; ------------------. nvcc does not officially support ``std::complex``. It's an error to use; ``std::complex`` in ``__device__`` code, but it often works in ``__host__; __device__`` code due to nvcc's interpretation of the ""wrong-side r",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:5866,test,test-suite,5866,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['test-suite']
Testability,"t seems to depend on whether or not; the compiler chooses to inline ``host_only``. Member functions, including constructors, may be overloaded using H and D; attributes. However, destructors cannot be overloaded. Using a Different Class on Host/Device; --------------------------------------. Occasionally you may want to have a class with different host/device versions. If all of the class's members are the same on the host and device, you can just; provide overloads for the class's member functions. However, if you want your class to have different members on host/device, you; won't be able to provide working H and D overloads in both classes. In this; case, clang is likely to be unhappy with you. .. code-block:: c++. #ifdef __CUDA_ARCH__; struct S {; __device__ void foo() { /* use device_only */ }; int device_only;; };; #else; struct S {; __host__ void foo() { /* use host_only */ }; double host_only;; };. __device__ void test() {; S s;; // clang generates an error here, because during host compilation, we; // have ifdef'ed away the __device__ overload of S::foo(). The __device__; // overload must be present *even during host compilation*.; S.foo();; }; #endif. We posit that you don't really want to have classes with different members on H; and D. For example, if you were to pass one of these as a parameter to a; kernel, it would have a different layout on H and D, so would not work; properly. To make code like this compatible with clang, we recommend you separate it out; into two classes. If you need to write code that works on both host and; device, consider writing an overloaded wrapper function that returns different; types on host and device. .. code-block:: c++. struct HostS { ... };; struct DeviceS { ... };. __host__ HostS MakeStruct() { return HostS(); }; __device__ DeviceS MakeStruct() { return DeviceS(); }. // Now host and device code can call MakeStruct(). Unfortunately, this idiom isn't compatible with nvcc, because it doesn't allow; you to overload base",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst:16562,test,test,16562,interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CompileCudaWithLLVM.rst,1,['test'],['test']
Testability,"t the top-level of their framework. That is, the; framework should have contents like:. .. code-block:: none. .../TestFramework.framework; .../TestFramework.framework/.system_framework; .../TestFramework.framework/Headers; .../TestFramework.framework/Headers/TestFramework.h; ... Clang will treat the presence of this file as an indicator that the framework; should be treated as a system framework, regardless of how it was found in the; framework search path. For consistency, we recommend that such files never be; included in installed versions of the framework. Checks for Standard Language Features; =====================================. The ``__has_feature`` macro can be used to query if certain standard language; features are enabled. The ``__has_extension`` macro can be used to query if; language features are available as an extension when compiling for a standard; which does not provide them. The features which can be tested are listed here. Since Clang 3.4, the C++ SD-6 feature test macros are also supported.; These are macros with names of the form ``__cpp_<feature_name>``, and are; intended to be a portable way to query the supported features of the compiler.; See `the C++ status page <https://clang.llvm.org/cxx_status.html#ts>`_ for; information on the version of SD-6 supported by each Clang release, and the; macros provided by that revision of the recommendations. C++98; -----. The features listed below are part of the C++98 standard. These features are; enabled by default when compiling C++ code. C++ exceptions; ^^^^^^^^^^^^^^. Use ``__has_feature(cxx_exceptions)`` to determine if C++ exceptions have been; enabled. For example, compiling code with ``-fno-exceptions`` disables C++; exceptions. C++ RTTI; ^^^^^^^^. Use ``__has_feature(cxx_rtti)`` to determine if C++ RTTI has been enabled. For; example, compiling code with ``-fno-rtti`` disables the use of RTTI. C++11; -----. The features listed below are part of the C++11 standard. As a result, all; these featu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:39020,test,test,39020,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['test']
Testability,"t the; output to an area specific to the logged user.; Addition of a new class TProofProgressStatus, which is used to keep; the query progress stauts in all the TProofPlayer objects and in the; TPacketizerAdaptive. It is also send in kPROOF_GETPACKET and; kPROOF_STOPPROCESS messages. ; The class TPacketizerProgressive is removed. . Fixes. Enable; the max number of sessions ('mxsess' parameter in the xpd.schedparam; directive); users are just refused to start a session if this limit is; reached.Make sure to collect consistently input messages when running in asynchronous modeFix; a few problems with TProof::SendFile (used by UploadPackage, Load); appearing when a rapid sequence of these commands was submitted Invalidate the TProofMgr when the physical connection is; closed; avoids; crashing when trying to get the logs after a failure. ; Fix a memory leak in log retrieval (the TProofLog object; was never; deleted); Add protections for the cases the manager cannot be; initialized; Fix a race condition possibly affecting the handling of; workers death; Avoid duplicating worker logs in the master log file; unless; when explicitly needed by the request (Exec(...), Print(...)) or when; an error occuredFix; problem with the determination and transmission of the name of the; object to be processed. The problem appeared when processing files; containing >1 trees in changing order.Fix problem with TProof::Load loading the macro to one worker only per machineFix wrong return code preventing the correct propagation of the full ClearPackage to workersFix a problem causing the whole query to stop even in the case a worker was terminated gently with SIGTERM.; Fix a problem triggering full re-build of a package upon change of a; single file; the version info file was wrongly reset; this should; happen only after a re-build.Make sure that in case multiple TProofOutputFile are present, each get merged correctlyFix problem in TProofServLogHandler::Notify due to bad usage of Form(...). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:6467,log,log,6467,proof/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html,3,['log'],"['log', 'logs']"
Testability,"t to do value printing. Note this is only enabled in C++ mode; // since part of the implementation requires C++ language features.; // Note we shouldn't eat the token since the callback needs it.; if (Tok.is(tok::annot_repl_input_end) && Actions.getLangOpts().CPlusPlus); CurTok = &Tok;; else; // Otherwise, eat the semicolon.; ExpectAndConsumeSemi(diag::err_expected_semi_after_expr);. StmtResult R = handleExprStmt(Expr, StmtCtx);; if (CurTok && !R.isInvalid()); CurTok->setAnnotationValue(R.get());. return R;; }. AST Transformation; -------------------. When Sema encounters the ``annot_repl_input_end`` token, it knows to transform; the AST before the real CodeGen process. It will consume the token and set a; 'semi missing' bit in the respective decl. .. code-block:: console. if (Tok.is(tok::annot_repl_input_end) &&; Tok.getAnnotationValue() != nullptr) {; ConsumeAnnotationToken();; cast<TopLevelStmtDecl>(DeclsInGroup.back())->setSemiMissing();; }. In the AST Consumer, traverse all the Top Level Decls, to look for expressions; to synthesize. If the current Decl is the Top Level Statement; Decl(``TopLevelStmtDecl``) and has a semicolon missing, then ask the interpreter; to synthesize another expression (an internal function call) to replace this; original expression. Detailed RFC and Discussion:; ----------------------------. For more technical details, community discussion and links to patches related; to these features,; Please visit: `RFC on LLVM Discourse <https://discourse.llvm.org/t/rfc-handle-execution-results-in-clang-repl/68493>`_. Some logic presented in the RFC (e.g. ValueGetter()) may be outdated,; compared to the final developed solution. Related Reading; ===============; `Cling Transitions to LLVM's Clang-Repl <https://root.cern/blog/cling-in-llvm/>`_. `Moving (parts of) the Cling REPL in Clang <https://lists.llvm.org/pipermail/llvm-dev/2020-July/143257.html>`_. `GPU Accelerated Automatic Differentiation With Clad <https://arxiv.org/pdf/2203.06139.pdf>`_; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst:20668,log,logic,20668,interpreter/llvm-project/clang/docs/ClangRepl.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangRepl.rst,1,['log'],['logic']
Testability,"t unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they contain, the; logic for finding those tests, and any additional information to run the tests. :program:`lit` identifies test suites as directories containing ``lit.cfg`` or; ``lit.site.cfg`` files (see also :option:`--config-prefix`). Test suites are; initially discovered by recursively searching up the directory hierarchy for; all the input files passed on the command line. You can use; :option:`--show-suites` to display the discovered test suites at startup. Once a test suite is discovered, its config file is loaded. Config files; themselves are Python modules which will be executed. When the config file is; executed, two important global variables are predefined:. **lit_config**. The global **lit** configuration object (a *LitConfig* instance), which defines; the builtin test formats, global configuration parameters, and other helper; routines for implementing test configurations. **config**. This is the config object (a *TestingConfig* instance) for the test suite,; which the config file is expected",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:14306,test,tests,14306,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,4,"['log', 'test']","['logic', 'tests']"
Testability,"t uses information available; in LLVM to measure host machine instruction characteristics like latency,; throughput, or port decomposition. Given an LLVM opcode name and a benchmarking mode, :program:`llvm-exegesis`; generates a code snippet that makes execution as serial (resp. as parallel) as; possible so that we can measure the latency (resp. inverse throughput/uop decomposition); of the instruction.; The code snippet is jitted and, unless requested not to, executed on the; host subtarget. The time taken (resp. resource usage) is measured using; hardware performance counters. The result is printed out as YAML; to the standard output. The main goal of this tool is to automatically (in)validate the LLVM's TableDef; scheduling models. To that end, we also provide analysis of the results. :program:`llvm-exegesis` can also benchmark arbitrary user-provided code; snippets. SUPPORTED PLATFORMS; -------------------. :program:`llvm-exegesis` currently only supports X86 (64-bit only), ARM (AArch64; only), MIPS, and PowerPC (PowerPC64LE only) on Linux for benchmarking. Not all; benchmarking functionality is guaranteed to work on every platform.; :program:`llvm-exegesis` also has a separate analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern use",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:1331,benchmark,benchmarking,1331,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"t want to set the DISPLAY or; cannot do it for some reason. - -n usually, launching a ROOT session will execute a logon script; and quitting will execute a logoff script. This option prevents; the execution of these two scripts. - it is also possible to execute a script without entering a ROOT; session. One simply adds the name of the script(s) after the ROOT; command. Be warned: after finishing the execution of the script,; ROOT will normally enter a new session. - -q process command line script files and exit. For example if you would like to run a script `myMacro.C` in the; background, redirect the output into a file `myMacro.log`, and exit; after the script execution, use the following syntax:. ```; root -b -q myMacro.C > myMacro.log; ```. If you need to pass a parameter to the script use:. ```; root -b -q 'myMacro.C(3)' > myMacro.log; ```. Be mindful of the quotes, i.e. if you need to pass a string as a; parameter, the syntax is:. ```; root -b -q 'myMacro.C(""text"")' > myMacro.log; ```. You can build a shared library with ACLiC and then use this shared; library on the command line for a quicker execution (i.e. the compiled; speed rather than the interpreted speed). See also ""Cling the C++; Interpreter"". ```; root -b -q myMacro.so > myMacro.log; ```. ROOT has a powerful C/C++ interpreter giving you access to all available; ROOT classes, global variables, and functions via the command line. By; typing C++ statements at the prompt, you can create objects, call; functions, execute scripts, etc. For example:. ``` {.cpp}; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; ```. To exit the ROOT session, type `.q`. ``` {.cpp}; root[] .q; ```. ## Using the GUI. The basic whiteboard on which an object is drawn in ROOT is called a; canvas (defined by the class **`TCanvas`**). Every object in the; canvas is a graphical object in the sense that you can grab it, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md:4467,log,log,4467,documentation/users-guide/GettingStarted.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/GettingStarted.md,1,['log'],['log']
Testability,"t which will be used to; discover and run tests in the test suite. Generally this will be a builtin test; format available from the *lit.formats* module. **test_source_root** The filesystem path to the test suite root. For out-of-dir; builds this is the directory that will be scanned for tests. **test_exec_root** For out-of-dir builds, the path to the test suite root inside; the object directory. This is where tests will be run and temporary output files; placed. **environment** A dictionary representing the environment to use when executing; tests in the suite. **standalone_tests** When true, mark a directory with tests expected to be run; standalone. Test discovery is disabled for that directory. *lit.suffixes* and; *lit.excludes* must be empty when this variable is true. **suffixes** For **lit** test formats which scan directories for tests, this; variable is a list of suffixes to identify test files. Used by: *ShTest*. **substitutions** For **lit** test formats which substitute variables into a test; script, the list of substitutions to perform. Used by: *ShTest*. **unsupported** Mark an unsupported directory, all tests within it will be; reported as unsupported. Used by: *ShTest*. **parent** The parent configuration, this is the config object for the directory; containing the test suite, or None. **root** The root configuration. This is the top-most :program:`lit` configuration in; the project. **pipefail** Normally a test using a shell pipe fails if any of the commands; on the pipe fail. If this is not desired, setting this variable to false; makes the test fail only if the last command in the pipe fails. **available_features** A set of features that can be used in `XFAIL`,; `REQUIRES`, and `UNSUPPORTED` directives. TEST DISCOVERY; ~~~~~~~~~~~~~~. Once test suites are located, :program:`lit` recursively traverses the source; directory (following *test_source_root*) looking for tests. When :program:`lit`; enters a sub-directory, it first checks to see if a neste",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:16602,test,test,16602,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"t without ViewExplodedGraph or re-compiling the program.; This is not very useful for writing tests (apart from testing how ProgramState; gets printed), but useful for debugging tests. Also, this method doesn't; produce a warning, so it gets printed on the console before all other; ExprInspection warnings. Example usage::. void foo() {; int x = 1;; clang_analyzer_printState(); // Read the stderr!; }. - ``void clang_analyzer_hashDump(int);``. The analyzer can generate a hash to identify reports. To debug what information; is used to calculate this hash it is possible to dump the hashed string as a; warning of an arbitrary expression using the function above. Example usage::. void foo() {; int x = 1;; clang_analyzer_hashDump(x); // expected-warning{{hashed string for x}}; }. - ``void clang_analyzer_denote(int, const char *);``. Denotes symbols with strings. A subsequent call to clang_analyzer_express(); will expresses another symbol in terms of these string. Useful for testing; relationships between different symbols. Example usage::. void foo(int x) {; clang_analyzer_denote(x, ""$x"");; clang_analyzer_express(x + 1); // expected-warning{{$x + 1}}; }. - ``void clang_analyzer_express(int);``. See clang_analyzer_denote(). - ``void clang_analyzer_isTainted(a single argument of any type);``. Queries the analyzer whether the expression used as argument is tainted or not.; This is useful in tests, where we don't want to issue warning for all tainted; expressions but only check for certain expressions.; This would help to reduce the *noise* that the `TaintTest` debug checker would; introduce and let you focus on the `expected-warning`'s that you really care; about. Example usage::. int read_integer() {; int n;; clang_analyzer_isTainted(n); // expected-warning{{NO}}; scanf(""%d"", &n);; clang_analyzer_isTainted(n); // expected-warning{{YES}}; clang_analyzer_isTainted(n + 2); // expected-warning{{YES}}; clang_analyzer_isTainted(n > 0); // expected-warning{{YES}}; int next_tainted_v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:9321,test,testing,9321,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,1,['test'],['testing']
Testability,"t(a single argument of any type)``. Dumps out the extent and the element count of the argument. Example usage::. void array() {; int a[] = {1, 3};; clang_analyzer_dumpExtent(a); // expected-warning {{8 S64b}}; clang_analyzer_dumpElementCount(a); // expected-warning {{2 S64b}}; }. - ``clang_analyzer_value(a single argument of integer or pointer type)``. Prints an associated value for the given argument.; Supported argument types are integers, enums and pointers.; The value can be represented either as a range set or as a concrete integer.; For the rest of the types function prints ``n/a`` (aka not available). **Note:** This function will print nothing for clang built with Z3 constraint manager.; This may cause crashes of your tests. To manage this use one of the test constraining; techniques:. * llvm-lit commands ``REQUIRES no-z3`` or ``UNSUPPORTED z3`` `See for details. <https://llvm.org/docs/TestingGuide.html#constraining-test-execution>`_. * a preprocessor directive ``#ifndef ANALYZER_CM_Z3``. * a clang command argument ``-analyzer-constraints=range``. Example usage::. void print(char c, unsigned u) {; clang_analyzer_value(c); // expected-warning {{8s:{ [-128, 127] }}}; if(u != 42); clang_analyzer_value(u); // expected-warning {{32u:{ [0, 41], [43, 4294967295] }}}; else; clang_analyzer_value(u); // expected-warning {{32u:42}}; }. Statistics; ==========. The debug.Stats checker collects various information about the analysis of each; function, such as how many blocks were reached and if the analyzer timed out. There is also an additional -analyzer-stats flag, which enables various; statistics within the analyzer engine. Note the Stats checker (which produces at; least one bug report per function) may actually change the values reported by; -analyzer-stats. Output testing checkers; =======================. - debug.ReportStmts reports a warning at **every** statement, making it a very; useful tool for testing thoroughly bug report construction and output; emission.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst:12272,test,testing,12272,interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/developer-docs/DebugChecks.rst,2,['test'],['testing']
Testability,"t); if(""${out}"" EQUAL 0); string(REPLACE ""BUILTINS_${name}_"" """" new_name ${variable_name}); if(new_name STREQUAL CACHE_FILES); foreach(cache IN LISTS ${variable_name}); list(APPEND ${name}_extra_args -C ${cache}); endforeach(); else(); string(REPLACE "";"" ""|"" new_value ""${${variable_name}}""); list(APPEND ${name}_extra_args ""-D${new_name}=${new_value}""); endif(); endif(); endforeach(). llvm_ExternalProject_Add(builtins-${name}; ${compiler_rt_path}/lib/builtins; DEPENDS ${ARG_DEPENDS}; CMAKE_ARGS -DLLVM_LIBRARY_OUTPUT_INTDIR=${LLVM_LIBRARY_DIR}; -DLLVM_RUNTIME_OUTPUT_INTDIR=${LLVM_TOOLS_BINARY_DIR}; -DLLVM_ENABLE_PER_TARGET_RUNTIME_DIR=ON; -DCMAKE_C_COMPILER_WORKS=ON; -DCMAKE_ASM_COMPILER_WORKS=ON; -DCOMPILER_RT_DEFAULT_TARGET_ONLY=ON; ${COMMON_CMAKE_ARGS}; ${${name}_extra_args}; USE_TOOLCHAIN; ${EXTRA_ARGS} ${ARG_EXTRA_ARGS}); endfunction(). # If compiler-rt is present we need to build the builtin libraries first. This; # is required because the other runtimes need the builtin libraries present; # before the just-built compiler can pass the configuration tests.; get_compiler_rt_path(compiler_rt_path); if(compiler_rt_path); if(NOT LLVM_BUILTIN_TARGETS); builtin_default_target(${compiler_rt_path}; DEPENDS clang-resource-headers); else(); if(""default"" IN_LIST LLVM_BUILTIN_TARGETS); builtin_default_target(${compiler_rt_path}; DEPENDS clang-resource-headers); list(REMOVE_ITEM LLVM_BUILTIN_TARGETS ""default""); else(); add_custom_target(builtins); add_custom_target(install-builtins); add_custom_target(install-builtins-stripped); endif(). foreach(target ${LLVM_BUILTIN_TARGETS}); check_apple_target(${target} builtin). builtin_register_target(${compiler_rt_path} ${target}; DEPENDS clang-resource-headers; CMAKE_ARGS -DLLVM_DEFAULT_TARGET_TRIPLE=${target}; EXTRA_ARGS TARGET_TRIPLE ${target}). add_dependencies(builtins builtins-${target}); add_dependencies(install-builtins install-builtins-${target}); add_dependencies(install-builtins-stripped install-builtins-${target}-stripped); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/runtimes/CMakeLists.txt:4841,test,tests,4841,interpreter/llvm-project/llvm/runtimes/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/runtimes/CMakeLists.txt,1,['test'],['tests']
Testability,"t,; # use export_executable_symbols(target).; set(CMAKE_SHARED_LIBRARY_LINK_CXX_FLAGS """"). include(AddLLVM); include(TableGen). include(LLVMDistributionSupport). if( MINGW AND NOT ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" ); # People report that -O3 is unreliable on MinGW. The traditional; # build also uses -O2 for that reason:; llvm_replace_compiler_option(CMAKE_CXX_FLAGS_RELEASE ""-O3"" ""-O2""); endif(). if(LLVM_INCLUDE_TESTS); umbrella_lit_testsuite_begin(check-all); endif(). # Put this before tblgen. Else we have a circular dependence.; add_subdirectory(lib/Demangle); add_subdirectory(lib/Support); add_subdirectory(lib/TableGen). add_subdirectory(utils/TableGen). add_subdirectory(include). add_subdirectory(lib). if( LLVM_INCLUDE_UTILS ); add_subdirectory(utils/FileCheck); add_subdirectory(utils/PerfectShuffle); add_subdirectory(utils/count); add_subdirectory(utils/not); add_subdirectory(utils/UnicodeData); add_subdirectory(utils/yaml-bench); add_subdirectory(utils/split-file); # add_subdirectory(utils/mlgo-utils); if( LLVM_INCLUDE_TESTS ); add_subdirectory(${LLVM_THIRD_PARTY_DIR}/unittest ${CMAKE_CURRENT_BINARY_DIR}/third-party/unittest); endif(); else(); if ( LLVM_INCLUDE_TESTS ); message(FATAL_ERROR ""Including tests when not building utils will not work.; Either set LLVM_INCLUDE_UTILS to On, or set LLVM_INCLUDE_TESTS to Off.""); endif(); endif(). # Use LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION instead of LLVM_INCLUDE_UTILS because it is not really a util; if (LLVM_ADD_NATIVE_VISUALIZERS_TO_SOLUTION); add_subdirectory(utils/LLVMVisualizers); endif(). foreach( binding ${LLVM_BINDINGS_LIST} ); if( EXISTS ""${LLVM_MAIN_SRC_DIR}/bindings/${binding}/CMakeLists.txt"" ); add_subdirectory(bindings/${binding}); endif(); endforeach(). add_subdirectory(projects). if( LLVM_INCLUDE_TOOLS ); add_subdirectory(tools); endif(). if( LLVM_INCLUDE_RUNTIMES ); add_subdirectory(runtimes); endif(). if( LLVM_INCLUDE_EXAMPLES ); add_subdirectory(examples); endif(). if( LLVM_INCLUDE_TESTS ); se",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:49536,test,tests,49536,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['tests']
Testability,"t,; then the debugger can omit any information for the lane. Otherwise, the debugger; may repeatedly unwind the stack and inspect the ``DW_AT_LLVM_lane_pc`` of the; calling subprogram until it finds a non-undefined location. Conceptually the; lane only has the call frames that it has a non-undefined; ``DW_AT_LLVM_lane_pc``. The following example illustrates how the AMDGPU backend can generate a DWARF; location list expression for the nested ``IF/THEN/ELSE`` structures of the; following subprogram pseudo code for a target with 64 lanes per wavefront. .. code::; :number-lines:. SUBPROGRAM X; BEGIN; a;; IF (c1) THEN; b;; IF (c2) THEN; c;; ELSE; d;; ENDIF; e;; ELSE; f;; ENDIF; g;; END. The AMDGPU backend may generate the following pseudo LLVM MIR to manipulate the; execution mask (``EXEC``) to linearize the control flow. The condition is; evaluated to make a mask of the lanes for which the condition evaluates to true.; First the ``THEN`` region is executed by setting the ``EXEC`` mask to the; logical ``AND`` of the current ``EXEC`` mask with the condition mask. Then the; ``ELSE`` region is executed by negating the ``EXEC`` mask and logical ``AND`` of; the saved ``EXEC`` mask at the start of the region. After the ``IF/THEN/ELSE``; region the ``EXEC`` mask is restored to the value it had at the beginning of the; region. This is shown below. Other approaches are possible, but the basic; concept is the same. .. code::; :number-lines:. $lex_start:; a;; %1 = EXEC; %2 = c1; $lex_1_start:; EXEC = %1 & %2; $if_1_then:; b;; %3 = EXEC; %4 = c2; $lex_1_1_start:; EXEC = %3 & %4; $lex_1_1_then:; c;; EXEC = ~EXEC & %3; $lex_1_1_else:; d;; EXEC = %3; $lex_1_1_end:; e;; EXEC = ~EXEC & %1; $lex_1_else:; f;; EXEC = %1; $lex_1_end:; g;; $lex_end:. To create the DWARF location list expression that defines the location; description of a vector of lane program locations, the LLVM MIR ``DBG_VALUE``; pseudo instruction can be used to annotate the linearized control flow. This can; be done by de",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst:101844,log,logical,101844,interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,1,['log'],['logical']
Testability,"t-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests. :program:`lit` itself doesn't know how to run tests, rather this logic is; defined by *test suites*. TEST SUITES; ~~~~~~~~~~~. As described in :ref:`test-discovery`, tests are always located inside a *test; suite*. Test suites serve to define the format of the tests they cont",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13305,test,test,13305,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],"['test', 'tests']"
Testability,"t-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](https://github.com/google/benchmark); library. The programs define functions that are run multiple times until the; measurement results are statistically significant. - `External/`. Contains descriptions and test data for code that cannot be directly; distributed with the test-suite. The most prominent members of this; directory are the SPEC CPU benchmark suites.; See [External Suites](#external-suites). - `Bitcode/`. These tests are mostly written in LLVM bitcode. - `CTMark/`. Contains symbolic links to other benchmarks forming a representative sample; for compilation performance measurements. ### Benchmarks. Every program can work as a correctness test. Some programs are unsuitable for; performance measurem",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:2602,test,test,2602,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test']
Testability,"t. As we will see in the paragraph ""Fill Attributes"", a fill style (type of; hatching) may be set for a pad. ``` {.cpp}; root[] pad1->SetFillStyle(istyle); ```. This is done with the `SetFillStyle` method where `istyle` is a style; number, defined in ""Fill Attributes"". A special set of styles allows; handling of various levels of transparency. These are styles number 4000; to 4100, 4000 being fully transparent and 4100 fully opaque. So, suppose; you have an existing canvas with several pads. You create a new pad; (transparent) covering for example the entire canvas. Then you draw your; primitives in this pad. The same can be achieved with the graphics; editor. For example:. ``` {.cpp}; root[] .x tutorials/hist/h1draw.C; root[] TPad *newpad=new TPad(""newpad"",""Transparent pad"",0,0,1,1);; root[] newpad->SetFillStyle(4000);; root[] newpad->Draw();; root[] newpad->cd();; root[] // create some primitives, etc; ```. ### Setting the Log Scale. Setting the scale to logarithmic or linear is an attribute of the pad,; not the axis or the histogram. The scale is an attribute of the pad; because you may want to draw the same histogram in linear scale in one; pad and in log scale in another pad. Frequently, we see several; histograms on top of each other in the same pad. It would be very; inconvenient to set the scale attribute for each histogram in a pad. Furthermore, if the logic was set in the histogram class (or each; object) the scale setting in each `Paint` method of all objects should; be tested. If you have a pad with a histogram, a right-click on the pad, outside of; the histograms frame will convince you. The `SetLogx()`, `SetLogy()` and; `SetLogz()` methods are there. As you see, **`TPad`** defines log scale; for the two directions `x` and `y` plus `z` if you want to draw a 3D; representation of some function or histogram. The way to set log scale in the x direction for the active pad is:. ``` {.cpp}; root[] gPad->SetLogx(1); ```. To reset log in the z direction:. ``` {.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:29142,log,logarithmic,29142,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['logarithmic']
Testability,t.h; flang/runtime/numeric.cpp; flang/runtime/pointer.cpp; flang/runtime/product.cpp; flang/runtime/ragged.cpp; flang/runtime/random.cpp; flang/runtime/reduction-templates.h; flang/runtime/reduction.cpp; flang/runtime/stat.cpp; flang/runtime/stat.h; flang/runtime/stop.cpp; flang/runtime/sum.cpp; flang/runtime/support.cpp; flang/runtime/terminator.cpp; flang/runtime/terminator.h; flang/runtime/time-intrinsic.cpp; flang/runtime/tools.cpp; flang/runtime/tools.h; flang/runtime/transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimize,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126523,test,test,126523,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test']
Testability,t/lib/xray/xray_tsc.h; compiler-rt/lib/xray/tests/unit/allocator_test.cpp; compiler-rt/lib/xray/tests/unit/buffer_queue_test.cpp; compiler-rt/lib/xray/tests/unit/fdr_log_writer_test.cpp; compiler-rt/lib/xray/tests/unit/function_call_trie_test.cpp; compiler-rt/lib/xray/tests/unit/profile_collector_test.cpp; compiler-rt/lib/xray/tests/unit/segmented_array_test.cpp; compiler-rt/lib/xray/tests/unit/test_helpers.h; compiler-rt/lib/xray/tests/unit/xray_unit_test_main.cpp; compiler-rt/tools/gwp_asan/options_parser_fuzzer.cpp; compiler-rt/tools/gwp_asan/stack_trace_compressor_fuzzer.cpp; cross-project-tests/debuginfo-tests/clang_llvm_roundtrip/simplified_template_names_noncanonical_type_units.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/dex_and_source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/dex_declare_file/precompiled_binary_different_dir/source/test.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/hit_count.cpp; cross-project-tests/debuginfo-tests/dexter/feature_tests/commands/perfect/limit_steps/limit_steps_line_mismatch.cpp; cross-project-tests/debuginfo-tests/dexter-tests/global-constant.cpp; cross-project-tests/debuginfo-tests/dexter-tests/nrvo.cpp; cross-project-tests/debuginfo-tests/dexter-tests/realigned-frame.cpp; cross-project-tests/debuginfo-tests/llvm-prettyprinters/gdb/llvm-support.cpp; flang/examples/external-hello.cpp; flang/examples/FlangOmpReport/FlangOmpReport.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.cpp; flang/examples/FlangOmpReport/FlangOmpReportVisitor.h; flang/examples/PrintFlangFunctionNames/PrintFlangFunctionNames.cpp; flang/include/flang/ISO_Fortran_binding.h; flang/include/flang/Common/bit-population-count.h; flang/include/flang/Common/constexpr-bitset.h; flang/include/flang/Comm,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:107529,test,tests,107529,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,3,['test'],"['test', 'tests']"
Testability,"t1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you're testing for a behaviour that you know is platform-specific or; depends on special features of sub-architectures, you must add the specific; triple, test with the specific FileCheck and put it into the specific; directory that will filter out all other architectures. Constraining test execution; ---------------------------. Some tests can be run only in specific configurations, such as; with debug builds or on particular platforms. Use ``REQUIRES``; and ``UNSUPPORTED`` to control when the test is enabled. Some tests are expected to fail. For example, there may be a known bug; that the test detect. Use ``XFAIL`` to mark a test as an expected failure.; An ``XFAIL`` test will be successful if its execution fails, and; will be a failure if its execution succeeds. .. code-block:: llvm. ; This test will be only enabled in the build with asserts.; ; REQUIRES: asserts; ; This test is disabled when running on Linux.; ; UNSUPPORTED: system-linux; ; This test is expected to fail when targeting PowerPC.; ; XFAIL: target=powerpc{{.*}}. ``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated; list of boolean expressions. The values in each expression may be:. - Features added to ``config.available_features`` by configuration files such as ``lit.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identifier, so for example ``he{{l+}}o`` would match; ``helo``, ``hello``, ``helllo``, and so on.; - The default target triple, preceded by the string ``target=`` (for example,; ``target=x86_64-pc-windows-msvc``). Typically regular expressions are used;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:20023,test,test,20023,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,"['assert', 'test']","['asserts', 'test']"
Testability,"t3D; * heartwall; * cfd; * bfs; * b+tree. vecmathlib tests harness; ------------------------; https://bitbucket.org/eschnett/vecmathlib/wiki/Home. PARSEC; ------; http://parsec.cs.princeton.edu/. Graph500 reference implementations; ----------------------------------; https://github.com/graph500/graph500/tree/v2-spec. NAS Parallel Benchmarks; -----------------------; https://www.nas.nasa.gov/publications/npb.html. The official benchmark is written in Fortran, but an unofficial; C-translation is available as well:; https://github.com/benchmark-subsetting/NPB3.0-omp-C. DARPA HPCS SSCA#2 C/OpenMP reference implementation; ---------------------------------------------------; http://www.highproductivity.org/SSCABmks.htm. This web site does not exist any more, but there seems to be a copy of; some of the benchmarks; https://github.com/gtcasl/hpc-benchmarks/tree/master/SSCA2v2.2. Kokkos; ------; https://github.com/kokkos/kokkos-kernels/tree/master/perf_test; https://github.com/kokkos/kokkos/tree/master/benchmarks. PolyMage; --------; https://github.com/bondhugula/polymage-benchmarks. PolyBench; ---------; https://sourceforge.net/projects/polybench/. A modified version of Polybench 3.2 is already presented in; SingleSource/Benchmarks/Polybench. A newer version 4.2.1 is available. High Performance Geometric Multigrid; ------------------------------------; https://crd.lbl.gov/departments/computer-science/PAR/research/hpgmg/. RAJA Performance Suite; ----------------------; https://github.com/LLNL/RAJAPerf. CORAL-2 Benchmarks; ------------------; https://asc.llnl.gov/coral-2-benchmarks/. Many of its programs have already been integrated in; MultiSource/Benchmarks/DOE-ProxyApps-C and; MultiSource/Benchmarks/DOE-ProxyApps-C++. * Nekbone; * QMCPack; * LAMMPS; * Kripke; * Quicksilver; * PENNANT; * Big Data Analytic Suite; * Deep Learning Suite; * Stream; * Stride; * ML/DL micro-benchmark; * Pynamic; * ACME; * VPIC; * Laghos; * Parallel Integer Sort; * Havoq. NWChem; ------; http://ww",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst:3970,benchmark,benchmarks,3970,interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Proposals/TestSuite.rst,1,['benchmark'],['benchmarks']
Testability,"t; interface as a special condition. Summary information on the value of the parameters and the observables; was printed for the first 10 occurrences of such conditions. . Now, each p.d.f component that generates an error; in its evaluation logs the error into a separate facility during fitting and the RooFit minuit interface; polls this error logging facility for problems. This allows much more detailed and accurate warning messages; during the minimization phase. The level of verbosity of this new error facility can be controlled with; a new . PrintEvalErrors(Int_t code). argument to fitTo(). . With code of -1, no errors are printed at all.; With a; code of zero, one line is printed for each p.d.f component with problems summarizing the number of times; problems occurred during the likelihood evaluation. . [#0] WARNING:Minization -- RooFitGlue: Minimized function has error status. ; Returning maximum FCN so far (-1e+30) to force MIGRAD to back out of this region. Error log follows; Parameter values: m=-7.397; RooGaussian::gx[ x=x mean=m sigma=sx ] has 3 errors. A code greater than zero will generate even more detail and; print the details of each evaluation error as provided by the p.d.f (zero value, not-a-number, normalization zero etc..); and show the observable values at which this error occurred. At most N detailed messages per p.d.f component; are shown where N is the integral value of the 'code' argument. . [#0] WARNING:Minization -- RooFitGlue: Minimized function has error status.; Returning maximum FCN so far (-1e+30) to force MIGRAD to back out of this region. Error log follows; Parameter values: m=-7.397; RooGaussian::gx[ x=x mean=m sigma=sx ]; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=9.09989, mean=m=-7.39713, sigma=sx=0.1; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=6.04652, mean=m=-7.39713, sigma=sx=0.1; getLogVal() top-level p.d.f evaluates to zero or negative number @ x=x=2.48563, mean=m=-7.3971",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html:16319,log,log,16319,roofit/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v520/index.html,1,['log'],['log']
Testability,"t; proposing its addition and explaining how it will meet the support requirements; listed above. Different types of components could require different levels of; detail. when in doubt, ask the community what's the best approach. Inclusion must reach consensus in the RFC by the community and the approval of; the corresponding review (by multiple members of the community) is the official; note of acceptance. After merge, there often is a period of transition, where teething issues on; existing buildbots are discovered and fixed. If those cannot be fixed straight; away, the sub-community is responsible for tracking and reverting all the; pertinent patches and retrying the inclusion review. Once the component is stable in tree, it must follow this policy and the; deprecation rules below apply. Due to the uncertain nature of inclusion, it's advisable that new components; are not added too close to a release branch. The time will depend on the size; and complexity of the component, so adding release and testing managers on the; RFC and review is strongly advisable. Deprecation Policy; ==================. The LLVM code base has a number of files that aren't being actively maintained.; But not all of those files are obstructing the development of the project and; so it remains in the repository with the assumption that it could still be; useful for downstream users. For code to remain in the repository, its presence must not impose an undue; burden on maintaining other components (core or peripheral). Warnings; --------. There are multiple types of issues that might trigger a request for deprecation,; including (but not limited to):. * Changes in a component consistently break other areas of the project.; * Components go broken for long periods of time (weeks or more).; * Clearly superior alternatives are in use and maintenance is painful.; * Builds and tests are harder / take longer, increasing the cost of; maintenance, overtaking the perceived benefits. If the maintenanc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:7791,test,testing,7791,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['testing']
Testability,"t; style is set to ``GNU``, the tool follows the style of GNU's **addr2line**.; The differences from the ``LLVM`` style are:. * Does not print the column of a source code location. * Does not add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""main"",; ""Line"": 15,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 14; }; ]; },; {; ""Address"": ""0x400486"",; ""ModuleName"": ""inlined.elf"",; """,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9458,test,test,9458,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"t; to comment on by clicking and dragging the line numbers in the diff pane.; When you have added all your comments, scroll to the bottom of the page and; click the Submit button. You can add overall comments in the text box at the bottom of the page.; When you're done, click the Submit button. Phabricator has many useful features, for example allowing you to select; diffs between different versions of the patch as it was reviewed in the; *Revision Update History*. Most features are self descriptive - explore, and; if you have a question, drop by on #llvm in IRC to get help. Note that as e-mail is the system of reference for code reviews, and some; people prefer it over a web interface, we do not generate automated mail; when a review changes state, for example by clicking ""Accept Revision"" in; the web interface. Thus, please type LGTM into the comment box to accept; a change from Phabricator. .. _pre-merge-testing:. Pre-merge testing; -----------------. The pre-merge tests are a continuous integration (CI) workflow. The workflow; checks the patches uploaded to Phabricator before a user merges them to the main; branch - thus the term *pre-merge testing*. When a user uploads a patch to Phabricator, Phabricator triggers the checks and; then displays the results. This way bugs in a patch are contained during the; code review stage and do not pollute the main branch. Our goal with pre-merge testing is to report most true problems while strongly; minimizing the number of false positive reports. Our goal is that problems; reported are always actionable. If you notice a false positive, please report; it so that we can identify the cause. If you notice issues or have an idea on how to improve pre-merge checks, please; `create a new issue <https://github.com/google/llvm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repos",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:10410,test,tests,10410,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['tests']
Testability,"t=amdgcn-amd-amdhsa -march=gfx906:sramecc-:xnack+ \; -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx906:sramecc+:xnack+ \; -Xopenmp-target=nvptx64-nvidia-cuda -march=sm_70 \; -Xopenmp-target=nvptx64-nvidia-cuda -march=sm_80 \; -c func_2.c -o func_2.o. 2. Create a heterogeneous device archive by combining all the object file(s). ::. llvm-ar cr libFatArchive.a func_1.o func_2.o. Extracting a Device Specific Archive; ------------------------------------. UnbundleArchive takes a heterogeneous device archive file ("".a"") as input; containing bundled device binary files, and a list of offload targets (not; host), and extracts the device binaries into a new archive file for each; offload target. Each resulting archive file contains all device binaries; compatible with that particular offload target. Compatibility between a; device binary in HDA and a target is based on the compatibility between their; bundle entry IDs as defined in :ref:`compatibility-bundle-entry-id`. Following cases may arise during compatibility testing:. * A binary is compatible with one or more targets: Insert the binary into the; device-specific archive of each compatible target.; * A binary is not compatible with any target: Skip the binary.; * One or more binaries are compatible with a target: Insert all binaries into; the device-specific archive of the target. The insertion need not be ordered.; * No binary is compatible with a target: If ``allow-missing-bundles`` option is; present then create an empty archive for the target. Otherwise, produce an; error without creating an archive. The created archive file does not contain an index of the symbols and device; binary files are named as <<Parent Bundle Name>-<DeviceBinary's TargetID>>,; with ':' replaced with '_'. Usage; -----. ::. clang-offload-bundler --unbundle --inputs=libFatArchive.a -type=a \; -targets=openmp-amdgcn-amdhsa-gfx906:sramecc+:xnack+, \; openmp-amdgcn-amdhsa-gfx908:sramecc-:xnack+ \; -outputs=devicelib-gfx906.a,deviceLib-gfx908.a. .. _",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangOffloadBundler.rst:17133,test,testing,17133,interpreter/llvm-project/clang/docs/ClangOffloadBundler.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangOffloadBundler.rst,1,['test'],['testing']
Testability,"tGeneration TOffsetGeneration.cxx ElementStruct.cxx ElementStructDict.cxx; LIBRARIES RIO Tree MathCore; ); if(MSVC AND NOT CMAKE_GENERATOR MATCHES Ninja); add_custom_command(TARGET testTOffsetGeneration POST_BUILD; COMMAND ${CMAKE_COMMAND} -E copy ${CMAKE_CURRENT_BINARY_DIR}/libElementStructDict_rdict.pcm; ${CMAKE_CURRENT_BINARY_DIR}/$<CONFIG>/libElementStructDict_rdict.pcm); endif(); target_include_directories(testTOffsetGeneration PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}); ROOT_STANDARD_LIBRARY_PACKAGE(SillyStruct NO_INSTALL_HEADERS HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/SillyStruct.h SOURCES SillyStruct.cxx LINKDEF SillyStructLinkDef.h DEPENDENCIES RIO); ROOT_ADD_GTEST(testBulkApi BulkApi.cxx LIBRARIES RIO Tree TreePlayer); #FIXME: tests are having timeout on 32bit CERN VM (in docker container everything is fine),; # to be reverted after investigation.; if(NOT CMAKE_SIZEOF_VOID_P EQUAL 4); ROOT_ADD_GTEST(testBulkApiMultiple BulkApiMultiple.cxx LIBRARIES RIO Tree TreePlayer TIMEOUT 3000); ROOT_ADD_GTEST(testBulkApiVarLength BulkApiVarLength.cxx LIBRARIES RIO Tree TreePlayer); ROOT_ADD_GTEST(testBulkApiSillyStruct BulkApiSillyStruct.cxx LIBRARIES RIO Tree TreePlayer SillyStruct); endif(); ROOT_ADD_GTEST(testTBasket TBasket.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTBranch TBranch.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTIOFeatures TIOFeatures.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeCluster TTreeClusterTest.cxx LIBRARIES RIO Tree MathCore); ROOT_ADD_GTEST(testTChainParsing TChainParsing.cxx LIBRARIES RIO Tree); if(imt); ROOT_ADD_GTEST(testTTreeImplicitMT ImplicitMT.cxx LIBRARIES RIO Tree); endif(); ROOT_ADD_GTEST(testTChainSaveAsCxx TChainSaveAsCxx.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTChainRegressions TChainRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeTruncatedDatatypes TTreeTruncatedDatatypes.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(testTTreeRegressions TTreeRegressions.cxx LIBRARIES RIO Tree); ROOT_ADD_GTEST(entrylist_addsubl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt:1352,test,testBulkApiVarLength,1352,tree/tree/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/tree/test/CMakeLists.txt,1,['test'],['testBulkApiVarLength']
Testability,tRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape COMMAND testReshape). ROOT_EXECUTABLE(testRotWeigh,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2823,test,testPoolingLayerCudnn,2823,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testPoolingLayerCudnn']
Testability,tTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMAND testConvBackpropagationCpu). ROOT_EXECUTABLE(testMethodDLCNN TestMethodDL,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5603,test,testConvNetLossCpu,5603,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testConvNetLossCpu']
Testability,"t_buffer_iterator(...)`` which allows code calling; the ``__xray_log_process_buffers(...)`` function to deal with the data in; memory. All of this is better explained in the ``xray/xray_log_interface.h`` header. Basic Mode; ----------. XRay supports a basic logging mode which will trace the application's; execution, and periodically append to a single log. This mode can be; installed/enabled by setting ``xray_mode=xray-basic`` in the ``XRAY_OPTIONS``; environment variable. Combined with ``patch_premain=true`` this can allow for; tracing applications from start to end. Like all the other modes installed through ``__xray_log_select_mode(...)``, the; implementation can be configured through the ``__xray_log_init_mode(...)``; function, providing the mode string and the flag options. Basic-mode specific; defaults can be provided in the ``XRAY_BASIC_OPTIONS`` environment variable. Flight Data Recorder Mode; -------------------------. XRay supports a logging mode which allows the application to only capture a; fixed amount of memory's worth of events. Flight Data Recorder (FDR) mode works; very much like a plane's ""black box"" which keeps recording data to memory in a; fixed-size circular queue of buffers, and have the data available; programmatically until the buffers are finalized and flushed. To use FDR mode; on your application, you may set the ``xray_mode`` variable to ``xray-fdr`` in; the ``XRAY_OPTIONS`` environment variable. Additional options to the FDR mode; implementation can be provided in the ``XRAY_FDR_OPTIONS`` environment; variable. Programmatic configuration can be done by calling; ``__xray_log_init_mode(""xray-fdr"", <configuration string>)`` once it has been; selected/installed. When the buffers are flushed to disk, the result is a binary trace format; described by `XRay FDR format <XRayFDRFormat.html>`_. When FDR mode is on, it will keep writing and recycling memory buffers until; the logging implementation is finalized -- at which point it can be flushed a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:8829,log,logging,8829,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,1,['log'],['logging']
Testability,ta-Optimization-Cpu COMMAND testMethodDLAdadeltaOptimizationCpu). # DNN - Regression CPU; ROOT_EXECUTABLE(testRegressionCpu TestRegressionMethodDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Regression-Cpu COMMAND testRegressionCpu). #( old-dnn-test ); # DNN - DataLoader CPU; ROOT_EXECUTABLE(testDataLoaderCpu TestDataLoaderCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader-Cpu COMMAND testDataLoaderCpu). # DNN - Minimization CPU; ROOT_EXECUTABLE(testMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Minimization-Cpu COMMAND testMinimizationCpu). # tests using TReference architecture; if ( reference-tests). # DNN - Activation Functions; ROOT_EXECUTABLE(testActivationFunctions TestActivationFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions COMMAND testActivationFunctions). # DNN - Loss Functions; ROOT_EXECUTABLE(testLossFunctions TestLossFunctions.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions COMMAND testLossFunctions). # DNN - Derivatives; ROOT_EXECUTABLE(testDerivatives TestDerivatives.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives COMMAND testDerivatives). # DNN - Backpropagation; ROOT_EXECUTABLE(testBackpropagation TestBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation COMMAND testBackpropagation). # DNN - Backpropagation DL; ROOT_EXECUTABLE(testBackpropagationDL TestBackpropagationDL.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL COMMAND testBackpropagationDL). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalization TestBatchNormalization.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization COMMAND testBatchNormalization). # DNN - DataLoader; ROOT_EXECUTABLE(testDataLoader TestDataLoader.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Data-Loader COMMAND testDataLoader). # DNN - Minimization; # ROOT_EXECUTABLE(testMinimization TestMinimization,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:7793,test,testLossFunctions,7793,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testLossFunctions']
Testability,"table and consistent; from one run to the next up to and including the value specified as the limit.; Above the limit value skipping of optimizations can cause a change in the; numbering, but because all optimizations above the limit are skipped this; is not a problem. When an opt-bisect index value refers to an entire invocation of the run; function for a pass, the pass will query whether or not it should be skipped; each time it is invoked and each invocation will be assigned a unique value.; For example, if a FunctionPass is used with a module containing three functions; a different index value will be assigned to the pass for each of the functions; as the pass is run. The pass may be run on two functions but skipped for the; third. If the pass internally performs operations on a smaller IR unit the pass must be; specifically instrumented to enable bisection at this finer level of granularity; (see below for details). Example Usage; =============. .. code-block:: console. $ opt -O2 -o test-opt.bc -opt-bisect-limit=16 test.ll. BISECT: running pass (1) Simplify the CFG on function (g); BISECT: running pass (2) SROA on function (g); BISECT: running pass (3) Early CSE on function (g); BISECT: running pass (4) Infer set function attributes on module (test.ll); BISECT: running pass (5) Interprocedural Sparse Conditional Constant Propagation on module (test.ll); BISECT: running pass (6) Global Variable Optimizer on module (test.ll); BISECT: running pass (7) Promote Memory to Register on function (g); BISECT: running pass (8) Dead Argument Elimination on module (test.ll); BISECT: running pass (9) Combine redundant instructions on function (g); BISECT: running pass (10) Simplify the CFG on function (g); BISECT: running pass (11) Remove unused exception handling info on SCC (<<null function>>); BISECT: running pass (12) Function Integration/Inlining on SCC (<<null function>>); BISECT: running pass (13) Deduce function attributes on SCC (<<null function>>); BISECT: running p",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OptBisect.rst:5158,test,test-opt,5158,interpreter/llvm-project/llvm/docs/OptBisect.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/OptBisect.rst,1,['test'],['test-opt']
Testability,"table implementation of the RANLUX++ generator, see [RanluxppEngine](https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppEngine.html) and [our blog post](https://root.cern/blog/ranluxpp/). ## TMVA. - Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power. ## RooFit Libraries. - Extension / updates of the doxygen reference guide.; - Allow for removing RooPlot from global directory management, see [RooPlot::AddDirectory](https://root.cern/doc/v624/classRooPlot.html#a47f7ba71dcaca30ad9ee295dee89c9b8); and [RooPlot::SetDirectory](https://root.cern/doc/v624/classRooPlot.html#a5938bc6d5c47d94c2f04fdcc10c1c026); - Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements.; This was improved using a hash map.; - Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests.; This is relevant when a few points in a parameter scan don't converge due to numerical or model instabilities.; These points will be skipped, and HypoTestInverter can continue.; - Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the; axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot. ### Massive speed up of RooFit's `BatchMode` on CPUs with vector extensions. RooFit's [`BatchMode`](https://root.cern/doc/master/classRooAbsPdf.html#a8f802a3a93467d5b7b089e3ccaec0fa8) has been around; [since ROOT 6.20](https://root.cern/doc/v620/release-notes.html#fast-function-evaluation-and-vectorisation), but to; fully use vector extensions of modern CPUs, a manual compilation of ROOT was necessary, setting the required compiler flags. Now, RooFit comes with dedicated computation libraries, each compiled for a specific CPU architecture. When ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md:14452,test,tests,14452,README/ReleaseNotes/v624/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md,1,['test'],['tests']
Testability,"tails setting up for and building Clang on Windows using; Visual Studio:. Get the required tools:; ; Git. Source code control program. Get it from:; ; https://git-scm.com/download; CMake. This is used for generating Visual Studio solution and; project files. Get it from:; ; https://cmake.org/download/; Visual Studio 2019 16.7 or later; Python. It is used to run the clang test suite. Get it from:; ; https://www.python.org/download/; GnuWin32 tools; The Clang and LLVM test suite use various GNU core utilities, such as; grep, sed, and find. The gnuwin32 packages; are the oldest and most well-tested way to get these tools. However, the; MSys utilities provided by git for Windows have been known to work.; Cygwin has worked in the past, but is not well tested.; If you don't already have the core utilies from some other source, get; gnuwin32 from ; http://getgnuwin32.sourceforge.net/. Check out LLVM and Clang:; ; git clone https://github.com/llvm/llvm-project.git. Note: Some Clang tests are sensitive to the line endings. Ensure; that checking out the files does not convert LF line endings to CR+LF. If; you're using git on Windows, make sure your core.autocrlf setting; is false. Run CMake to generate the Visual Studio solution and project files:; ; cd llvm-project; mkdir build (for building without polluting the source dir); cd build. If you are using Visual Studio 2019:; cmake -DLLVM_ENABLE_PROJECTS=clang -G ""Visual Studio 16 2019"" -A x64 -Thost=x64 ..\llvm; -Thost=x64 is required, since the 32-bit linker will run out of memory.; ; To generate x86 binaries instead of x64, pass -A Win32.; See the LLVM CMake guide for; more information on other configuration options for CMake.; The above, if successful, will have created an LLVM.sln file in the; build directory.; . Build Clang:; ; Open LLVM.sln in Visual Studio.; Build the ""clang"" project for just the compiler driver and front end, or; the ""ALL_BUILD"" project to build everything, including tools. Try it out (assuming you add",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html:4330,test,tests,4330,interpreter/llvm-project/clang/www/get_started.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/get_started.html,1,['test'],['tests']
Testability,"tain tests. .. option:: --time-tests. Track the wall time individual tests take to execute and includes the results; in the summary output. This is useful for determining which tests in a test; suite take the most time to execute. .. option:: --ignore-fail. Exit with status zero even if some tests fail. .. _selection-options:. SELECTION OPTIONS; -----------------. By default, `lit` will run failing tests first, then run tests in descending; execution time order to optimize concurrency. The execution order can be; changed using the :option:`--order` option. The timing data is stored in the `test_exec_root` in a file named; `.lit_test_times.txt`. If this file does not exist, then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-failures N. Stop execution after the given number ``N`` of failures.; An integer argument should be passed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel exe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:5958,test,test,5958,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,2,['test'],['test']
Testability,"tal state, see more; details about the experimental features and limitations in :doc:`OpenCLSupport`; page. OpenCL Specific Options; -----------------------. Most of the OpenCL build options from `the specification v2.0 section 5.8.4; <https://www.khronos.org/registry/cl/specs/opencl-2.0.pdf#200>`_ are available. Examples:. .. code-block:: console. $ clang -cl-std=CL2.0 -cl-single-precision-constant test.cl. Many flags used for the compilation for C sources can also be passed while; compiling for OpenCL, examples: ``-c``, ``-O<1-4|s>``, ``-o``, ``-emit-llvm``, etc. Some extra options are available to support special OpenCL features. .. option:: -cl-no-stdinc. Allows to disable all extra types and functions that are not native to the compiler.; This might reduce the compilation speed marginally but many declarations from the; OpenCL standard will not be accessible. For example, the following will fail to; compile. .. code-block:: console. $ echo ""bool is_wg_uniform(int i){return get_enqueued_local_size(i)==get_local_size(i);}"" > test.cl; $ clang -cl-std=CL2.0 -cl-no-stdinc test.cl; error: use of undeclared identifier 'get_enqueued_local_size'; error: use of undeclared identifier 'get_local_size'. More information about the standard types and functions is provided in :ref:`the; section on the OpenCL Header <opencl_header>`. .. _opencl_cl_ext:. .. option:: -cl-ext. Enables/Disables support of OpenCL extensions and optional features. All OpenCL; targets set a list of extensions that they support. Clang allows to amend this using; the ``-cl-ext`` flag with a comma-separated list of extensions prefixed with; ``'+'`` or ``'-'``. The syntax: ``-cl-ext=<(['-'|'+']<extension>[,])+>``, where; extensions can be either one of `the OpenCL published extensions; <https://www.khronos.org/registry/OpenCL>`_; or any vendor extension. Alternatively, ``'all'`` can be used to enable; or disable all known extensions. Example disabling double support for the 64-bit SPIR-V target:. .. code-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:143379,test,test,143379,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"tarted in a file must end in that file; that is, must have its; ``#endif`` in the same file. A :token:`MacroName` may be defined externally using the ``-D`` option on the; ``*-tblgen`` command line::. llvm-tblgen self-reference.td -Dmacro1 -Dmacro3. Appendix A: Bang Operators; ==========================. Bang operators act as functions in value expressions. A bang operator takes; one or more arguments, operates on them, and produces a result. If the; operator produces a boolean result, the result value will be 1 for true or 0; for false. When an operator tests a boolean argument, it interprets 0 as false; and non-0 as true. .. warning::; The ``!getop`` and ``!setop`` bang operators are deprecated in favor of; ``!getdagop`` and ``!setdagop``. ``!add(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator adds *a*, *b*, etc., and produces the sum. ``!and(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator does a bitwise AND on *a*, *b*, etc., and produces the; result. A logical AND can be performed if all the arguments are either; 0 or 1. ``!cast<``\ *type*\ ``>(``\ *a*\ ``)``; This operator performs a cast on *a* and produces the result.; If *a* is not a string, then a straightforward cast is performed, say; between an ``int`` and a ``bit``, or between record types. This allows; casting a record to a class. If a record is cast to ``string``, the; record's name is produced. If *a* is a string, then it is treated as a record name and looked up in; the list of all defined records. The resulting record is expected to be of; the specified *type*. For example, if ``!cast<``\ *type*\ ``>(``\ *name*\ ``)``; appears in a multiclass definition, or in a; class instantiated inside a multiclass definition, and the *name* does not; reference any template arguments of the multiclass, then a record by; that name must have been instantiated earlier; in the source file. If *name* does reference; a template argument, then the lookup is delayed until ``defm`` statements; instantiating the multiclass (o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:59471,log,logical,59471,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['log'],['logical']
Testability,"tation SuperDeallocThenReleaseIvarClass; - (void)dealloc {; [super dealloc];; [_ivar release]; // warn; }; @end. osx.cocoa.UnusedIvars; (ObjC); Warn about private ivars that are never used. @interface MyObj : NSObject {; @private; id x; // warn; }; @end. @implementation MyObj; @end. osx.cocoa.VariadicMethodTypes; (ObjC); Check for passing non-Objective-C types to variadic collection initialization; methods that expect only Objective-C types. void test() {; [NSSet setWithObjects:@""Foo"", ""Bar"", nil];; // warn: argument should be an ObjC pointer type, not 'char *'; }. osx.coreFoundation.CFError; (C); Check usage of CFErrorRef* parameters. void test(CFErrorRef *error) {; // warn: function accepting CFErrorRef* should have a; // non-void return; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. osx.coreFoundation.CFNumber; (C); Check for improper uses of CFNumberCreate. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. osx.coreFoundation.CFRetainRelease; (C); Check for null arguments to CFRetain, CFRelease,; CFMakeCollectable. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. osx.coreFoundation.containers.OutOfBounds; (C); Checks for index out-of-bounds when using CFArray API. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. osx.coreFoundation.containers.PointerSizedValues; (C); Warns if CFArray, CFDictionary, CFSet are; created with non-pointer-size values. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void **)x, 1,; &kCFTypeArrayCallBacks); // warn; }. Security Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:20121,test,test,20121,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"tation allows for; mapping previously defined memory definitions into the execution context of a; process. The value name refers to a previously defined memory definition and; the address is a decimal number that specifies the address the memory; definition should start at. Note that a single memory definition can be; mapped multiple times. Using this annotation requires the subprocess; execution mode.; * `LLVM-EXEGESIS-SNIPPET-ADDRESS <address>` - This annotation allows for; setting the address where the beginning of the snippet to be executed will; be mapped in at. The address is given in hexadecimal. Note that the snippet; also includes setup code, so the instruction exactly at the specified; address will not be the first instruction in the snippet. Using this; annotation requires the subprocess execution mode. This is useful in; cases where the memory accessed by the snippet depends on the location; of the snippet, like RIP-relative addressing. EXAMPLE 1: benchmarking instructions; ------------------------------------. Assume you have an X86-64 machine. To measure the latency of a single; instruction, run:. .. code-block:: bash. $ llvm-exegesis --mode=latency --opcode-name=ADD64rr. Measuring the uop decomposition or inverse throughput of an instruction works similarly:. .. code-block:: bash. $ llvm-exegesis --mode=uops --opcode-name=ADD64rr; $ llvm-exegesis --mode=inverse_throughput --opcode-name=ADD64rr. The output is a YAML document (the default is to write to stdout, but you can; redirect the output to a file using `--benchmarks-file`):. .. code-block:: none. ---; key:; opcode_name: ADD64rr; mode: latency; config: ''; cpu_name: haswell; llvm_triple: x86_64-unknown-linux-gnu; num_repetitions: 10000; measurements:; - { key: latency, value: 1.0058, debug_string: '' }; error: ''; info: 'explicit self cycles, selecting one aliasing configuration.; Snippet:; ADD64rr R8, R8, R10; '; ... To measure the latency of all instructions for the host architecture, run:. .. c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:4726,benchmark,benchmarking,4726,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarking']
Testability,"tation provide address space mapping as; well as a set of supported extensions. Specific Targets; ^^^^^^^^^^^^^^^^. There is a set of concrete HW architectures that OpenCL can be compiled for. - For AMD target:. .. code-block:: console. $ clang --target=amdgcn-amd-amdhsa -mcpu=gfx900 test.cl. - For Nvidia architectures:. .. code-block:: console. $ clang --target=nvptx64-unknown-unknown test.cl. Generic Targets; ^^^^^^^^^^^^^^^. - A SPIR-V binary can be produced for 32 or 64 bit targets. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. More details can be found in :ref:`the SPIR-V support section <spir-v>`. - SPIR is available as a generic target to allow portable bitcode to be produced; that can be used across GPU toolchains. The implementation follows `the SPIR; specification <https://www.khronos.org/spir>`_. There are two flavors; available for 32 and 64 bits. .. code-block:: console. $ clang --target=spir test.cl -emit-llvm -c; $ clang --target=spir64 test.cl -emit-llvm -c. Clang will generate SPIR v1.2 compatible IR for OpenCL versions up to 2.0 and; SPIR v2.0 for OpenCL v2.0 or C++ for OpenCL. - x86 is used by some implementations that are x86 compatible and currently; remains for backwards compatibility (with older implementations prior to; SPIR target support). For ""non-SPMD"" targets which cannot spawn multiple; work-items on the fly using hardware, which covers practically all non-GPU; devices such as CPUs and DSPs, additional processing is needed for the kernels; to support multiple work-item execution. For this, a 3rd party toolchain,; such as for example `POCL <http://portablecl.org/>`_, can be used. This target does not support multiple memory segments and, therefore, the fake; address space map can be added using the :ref:`-ffake-address-space-map; <opencl_fake_address_space_map>` flag. All known OpenCL extensions and features are set to supported in the generic targets,; however :option:`-cl-ext` flag ca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:145841,test,test,145841,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"tation remains however the same.; A new method TF1::operator()(double x, double y=0, double z) which is equivalent to TF1::Eval has been added for using TF1 as a callable object.; New templated methods TF1::SetFunction for generic C++ callable objects or for class member functions. TH1. Fixed a bug in the TH1::KolmogorovTest function in the case of scaled or weighted histograms. The routine has been improved and; now could also be used for comparing an histogram with a function if it is represented as an histogram with zero errors (equivalent to the case of options ""F1"" or ""F2"" in the original HDIFF routine of HBOOK). The bug has been fixed also for the TH2 and TH3 corresponding method. In addition in the case of TH3 use now all 6 axis combinations for estimating the maximum deviation. This is consistent with what is done in the 2D case.; Improved the TH1::Chi2Test for the treatment of empty bins in the histograms. If both histograms have one empty bin, the number of degree of freedom is decreased by one but the test is performed without reporting an error. If only one histogram is having an empty bin it is considered in the comparison. Fixed a bug in preserving the global statistic information after scaling, adding or rebinning the histogram. TH2. Improve TH2::FitFitSliceX and TH2::FitFitSliceY by adding the possibility to return the generated histograms in a TObjArray when the passed pointer is not null. Support also variable bin size histograms. Improve histogram projections. The implementation of TH2::ProjectionX and TH2::ProjectionY has been combined in a single private method. TH3. Fixed a couple of bugs in TH3::Project3DProfile. TProfile and TProfile2D. Add a new option ""W"" in TProfile::ProjectionX and TProfile::ProjectionXY to be able to return the equivalent weighted filled histogram. Its bin content is equal to the profile bin content multiplied by the bin entries. Implement in the TProfile a new option, ""G"" for the bin error. This option can be used, bin b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v520/index.html:1406,test,test,1406,hist/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v520/index.html,1,['test'],['test']
Testability,"tc/ DESTINATION ${CMAKE_INSTALL_SYSCONFDIR} USE_SOURCE_PERMISSIONS; ${DIR_PERMISSIONS}; PATTERN ""system.rootrc"" EXCLUDE; PATTERN ""system.rootauthrc"" EXCLUDE; PATTERN ""system.rootdaemonrc"" EXCLUDE; PATTERN ""root.mimes"" EXCLUDE; PATTERN ""*.in"" EXCLUDE); install(DIRECTORY fonts/ DESTINATION ${CMAKE_INSTALL_FONTDIR} ${DIR_PERMISSIONS}); install(DIRECTORY icons/ DESTINATION ${CMAKE_INSTALL_ICONDIR} ${DIR_PERMISSIONS}); install(DIRECTORY macros/ DESTINATION ${CMAKE_INSTALL_MACRODIR} ${DIR_PERMISSIONS}); if(http); install(DIRECTORY js/ DESTINATION ${CMAKE_INSTALL_JSROOTDIR} ${DIR_PERMISSIONS}); endif(); if(webgui); install(DIRECTORY ui5/ DESTINATION ${CMAKE_INSTALL_OPENUI5DIR} ${DIR_PERMISSIONS}); endif(); set(MAN_PATT_EXCL); if(NOT fortran OR NOT CMAKE_Fortran_COMPILER); list(APPEND MAN_PATT_EXCL PATTERN h2root.1 EXCLUDE); list(APPEND MAN_PATT_EXCL PATTERN g2root.1 EXCLUDE); endif(); install(DIRECTORY man/ DESTINATION ${CMAKE_INSTALL_MANDIR} ${DIR_PERMISSIONS} ${MAN_PATT_EXCL}); install(DIRECTORY tutorials/ DESTINATION ${CMAKE_INSTALL_TUTDIR} ${DIR_PERMISSIONS} COMPONENT tests); install(FILES; cmake/modules/RootMacros.cmake; cmake/modules/RootTestDriver.cmake; DESTINATION ${CMAKE_INSTALL_CMAKEDIR}); install(FILES; ""cmake/modules/FindVdt.cmake""; DESTINATION ""${CMAKE_INSTALL_CMAKEDIR}/modules""); endif(). #---Add configuration files for kernel and jupyter----------------------------------------------; # Make sure the Jupyter ROOT C++ kernel runs with the same Python version as ROOT; set(root_jupyter_dir notebook); set(root_jupyter_config jupyter_notebook_config.py); configure_file(etc/${root_jupyter_dir}/${root_jupyter_config}.in etc/${root_jupyter_dir}/${root_jupyter_config}); install(FILES ${CMAKE_BINARY_DIR}/etc/${root_jupyter_dir}/${root_jupyter_config} DESTINATION ${CMAKE_INSTALL_SYSCONFDIR}/${root_jupyter_dir}). set(root_kernel_dir ${root_jupyter_dir}/kernels/root); set(root_kernel_file kernel.json); configure_file(etc/${root_kernel_dir}/${root_kernel_file}.in etc/${ro",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:26354,test,tests,26354,CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt,1,['test'],['tests']
Testability,"tch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: cop",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14145,test,test,14145,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"te analysis mode that is supported; on every platform that LLVM is. SNIPPET ANNOTATIONS; -------------------. :program:`llvm-exegesis` supports benchmarking arbitrary snippets of assembly.; However, benchmarking these snippets often requires some setup so that they; can execute properly. :program:`llvm-exegesis` has five annotations and some; additional utilities to help with setup so that snippets can be benchmarked; properly. * `LLVM-EXEGESIS-DEFREG <register name>` - Adding this annotation to the text; assembly snippet to be benchmarked marks the register as requiring a definition.; A value will automatically be provided unless a second parameter, a hex value,; is passed in. This is done with the `LLVM-EXEGESIS-DEFREG <register name> <hex value>`; format. `<hex value>` is a bit pattern used to fill the register. If it is a; value smaller than the register, it is sign extended to match the size of the; register.; * `LLVM-EXEGESIS-LIVEIN <register name>` - This annotation allows specifying; registers that should keep their value upon starting the benchmark. Values; can be passed through registers from the benchmarking setup in some cases.; The registers and the values assigned to them that can be utilized in the; benchmarking script with a `LLVM-EXEGESIS-LIVEIN` are as follows:. * Scratch memory register - The specific register that this value is put in; is platform dependent (e.g., it is the RDI register on X86 Linux). Setting; this register as a live in ensures that a pointer to a block of memory (1MB); is placed within this register that can be used by the snippet.; * `LLVM-EXEGESIS-MEM-DEF <value name> <size> <value>` - This annotation allows; specifying memory definitions that can later be mapped into the execution; process of a snippet with the `LLVM-EXEGESIS-MEM-MAP` annotation. Each; value is named using the `<value name>` argument so that it can be referenced; later within a map annotation. The size is specified in a decimal number of; bytes and the value i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:2529,benchmark,benchmark,2529,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark']
Testability,"te is identical in its behavior and usage to 'ns_returns_retained'; except for the distinction of returning a Core Foundation object instead of a; Cocoa object. This distinction is important for the following reason:; as Core Foundation is a C API,; the analyzer cannot always tell that a pointer return value refers to a; Core Foundation object.; In contrast, it is; trivial for the analyzer to recognize if a pointer refers to a Cocoa object; (given the Objective-C type system). Placing on C functions: When placing the attribute; 'cf_returns_retained' on the declarations of C functions, the analyzer; interprets the function as:. Returning a Core Foundation Object; Treating the function as if it its name; contained the keywords ""create"" or ""copy"". This means the; returned object as a +1 retain count that must be released by the caller, either; by sending a release message (via toll-free bridging to an Objective-C; object pointer), or calling CFRelease or a similar function. Example. $ cat test.m; $ cat test.m; #import <Cocoa/Cocoa.h>. #ifndef __has_feature // Optional.; #define __has_feature(x) 0 // Compatibility with non-clang compilers.; #endif. #ifndef CF_RETURNS_RETAINED; #if __has_feature(attribute_cf_returns_retained); #define CF_RETURNS_RETAINED __attribute__((cf_returns_retained)); #else; #define CF_RETURNS_RETAINED; #endif; #endif. @interface MyClass : NSObject {}; - (NSDate*) returnsCFRetained CF_RETURNS_RETAINED;; - (NSDate*) alsoReturnsRetained;; - (NSDate*) returnsNSRetained NS_RETURNS_RETAINED;; @end. CF_RETURNS_RETAINED; CFDateRef returnsRetainedCFDate() {; return CFDateCreate(0, CFAbsoluteTimeGetCurrent());; }. @implementation MyClass; - (NSDate*) returnsCFRetained {; return (NSDate*) returnsRetainedCFDate(); // No leak.; }. - (NSDate*) alsoReturnsRetained {; return (NSDate*) returnsRetainedCFDate(); // Always report a leak.; }. - (NSDate*) returnsNSRetained {; return (NSDate*) returnsRetainedCFDate(); // Report a leak when using GC.; }; @end. Running s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html:7518,test,test,7518,interpreter/llvm-project/clang/www/analyzer/annotations.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/annotations.html,1,['test'],['test']
Testability,"te, you can recover the file and all the contents since; the last `Autosave`. To set the number of bytes between `Autosave` you; can use the `TTree::SetAutosave()` method. You can also call; **`TTree::Autosave` in the acquisition loop every `n `entry.**. ### Trees with Circular Buffers. When a **`TTree`** is memory resident, you set it up so that it retains; retain only the last few entries. For example, this can be very useful; for monitoring purpose. ``` {.cpp}; void TTree::SetCircular(Long64_t maxEntries);; ```. where `maxEntries` is the maximum number of entries to be kept in the; buffers. When the number of entries exceeds this value, the first; entries in the **`Tree`** are deleted and the buffers used again. An; example of a script using a circular buffer is shown below:. ``` {.cpp}; void circular() {; gROOT->cd(); //make sure that the Tree is memory resident; TTree *T = new TTree(""T"",""test circular buffers"");; TRandom r;; Float_t px,py,pz;; Double_t random;; UShort_t i;; T->Branch(""px"",&px,""px/F"");; T->Branch(""py"",&py,""py/F"");; T->Branch(""pz"",&pz,""pz/F"");; T->Branch(""random"",&random,""random/D"");; T->Branch(""i"",&i,""i/s"");; T->SetCircular(20000);; for (i = 0; i < 65000; i++) {; r.Rannor(px,py);; pz = px*px + py*py;; random = r.Rndm();; T->Fill();; }; T->Print();; }; ```. ### Size of TTree in the File. When writing a **`TTree`** to a file, if the file size reaches the value; stored in the `TTree::GetMaxTreeSize()`, the current file is closed and; a new file is created. If the original file is named ""`myfile.root`"",; subsequent files are named ""`myfile_1.root`"", ""`myfile_2.root`"", etc. Currently, the automatic change of file is restricted to the case where; the tree is in the top level directory. The file should not contain; sub-directories. Before switching to a new file, the tree header is; written to the current file, then the current file is closed. To process; the multiple files created by `ChangeFile()`, one must use a; **`TChain`**. The new file name has a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:14445,test,test,14445,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['test'],['test']
Testability,"te: possibly an enhancement to ; alpha.unix.cstring.OutOfBounds. void test(char* string) {; char buf[24];; strcpy(buf, string); // warn; }. different.IntegerOverflow; (C); Integer overflow.; Note: partially handled by Clang core; (search for 'overflow in expression' warning in Clang tests).; Source: ; CWE-190. #include <limits.h>. int f(int x);. void test() {; f(INT_MAX + 1); // warn; }. #include <limits.h>. int test() {; int x = INT_MAX / 2 + 1;; return x * 2; // warn; }. different.SignExtension; (C); Unexpected sign extension might take place.; Source: ; CWE-194. unsigned long long test(long long sll) {; unsigned long long ull = sll; // warn; return ull;; }. void f(unsigned int i);. void test(int si) {; f(si); // warn; }. unsigned int test(int i) {; return i;; }. different.NumericTruncation; (C); Numeric truncation might take place.; Source: ; CWE-197. unsigned long test(unsigned long long ull) {; unsigned long ul = ull; // warn; return ul;; }. void f(int i);. void test(long long sll) {; f(sll); // warn; }. int f();. short test(long long sll) {; short ss = f();; return ss;; }. different.MissingCopyCtorAssignOp; (C++); A class has dynamically allocated data members but do not define a copy; constructor/assignment operator.; Source: Scott Meyers ""Effective C++"", item 11: Prevent exceptions from; leaving destructors. class C {; int *p; // warn; public:; C() { p = new int; }; ~C() { delete p; }; };. WinAPI. Name, DescriptionExampleProgress. WinAPI.CreateProcess; (C); CreateProcess(): if the first parameter ; lpApplicationName is NULL then the executable name must be in the; white space-delimited string pointed to by lpCommandLine.; If the executable or path name has a space in it, there is a risk that a; different executable could be run because of the way the function parses; spaces.; Source: ; MSDN: CreateProcess function, Security Remarks. #include <windows.h>. void test() {; STARTUPINFO si;; PROCESS_INFORMATION pi;; CreateProcess(NULL, TEXT(""C:\\Program Files\\App",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:25360,test,test,25360,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,te; parameters. Fixes:; (`#57410 <https://github.com/llvm/llvm-project/issues/57410>`_) and; (`#76604 <https://github.com/llvm/llvm-project/issues/57410>`_). - Fix a bug where clang would produce inconsistent values when; ``std::source_location::current()`` was used in a function template.; Fixes (`#78128 <https://github.com/llvm/llvm-project/issues/78128>`_). - Clang now allows parenthesized initialization of arrays in `operator new[]`.; Fixes: (`#68198 <https://github.com/llvm/llvm-project/issues/68198>`_). - Fixes CTAD for aggregates on nested template classes. Fixes:; (`#77599 <https://github.com/llvm/llvm-project/issues/77599>`_). - Fix crash when importing the same module with an dynamic initializer twice; in different visibility.; Fixes (`#67893 <https://github.com/llvm/llvm-project/issues/67893>`_). - Remove recorded `#pragma once` state for headers included in named modules.; Fixes (`#77995 <https://github.com/llvm/llvm-project/issues/77995>`_). - Set the ``__cpp_auto_cast`` feature test macro in C++23 mode. - Fix crash for inconsistent deducing state of function return types; in importing modules.; Fixes (`#78830 <https://github.com/llvm/llvm-project/issues/78830>`_); Fixes (`#60085 <https://github.com/llvm/llvm-project/issues/60085>`_). - Fixed a bug where variables referenced by requires-clauses inside; nested generic lambdas were not properly injected into the constraint scope.; (`#73418 <https://github.com/llvm/llvm-project/issues/73418>`_). - Fix incorrect code generation caused by the object argument of ``static operator()`` and ``static operator[]`` calls not being evaluated.; Fixes (`#67976 <https://github.com/llvm/llvm-project/issues/67976>`_). - Fix crash when using an immediate-escalated function at global scope.; (`#82258 <https://github.com/llvm/llvm-project/issues/82258>`_); - Correctly immediate-escalate lambda conversion functions.; (`#82258 <https://github.com/llvm/llvm-project/issues/82258>`_); - Fix a crash when an unresolved overload se,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:54943,test,test,54943,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['test'],['test']
Testability,"teGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LL",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:5034,test,tests,5034,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"teValueParam: Template value parameter.; =Typedef: Type definition.; =Unspecified: Unspecified type.; =Volatile: Volatile specifier. .. _compare_:. COMPARE; ~~~~~~~; When dealing with debug information, there are situations when the; printing of the elements is not the correct approach. That is the case,; when we are interested in the effects caused by different versions of; the same toolchain, or the impact of specific compiler optimizations. For those cases, we are looking to see which elements have been added; or removed. Due to the complicated debug information format, it is very; difficult to use a regular diff tool to find those elements; even; impossible when dealing with different debug formats. :program:`llvm-debuginfo-analyzer` supports a logical element comparison,; allowing to find semantic differences between logical views, produced by; different toolchain versions or even debug information formats. When comparing logical views created from different debug formats, its; accuracy depends on how close the debug information represents the; user code. For instance, a logical view created from a binary file with; DWARF debug information may include more detailed data than a logical; view created from a binary file with CodeView/COFF debug information. The following options describe the elements to compare. .. option:: --compare=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below elements. .. code-block:: text. =lines: Include lines.; =scopes: Include scopes.; =symbols: Include symbols.; =types: Include types. :program:`llvm-debuginfo-analyzer` takes the first binary file on the; command line as the **reference** and the second one as the **target**.; To get a more descriptive report, the comparison is done twice. The; reference and target views are swapped, in order to produce those; **missing** elements from the target view and those **added** elements; to the reference view. S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:20122,log,logical,20122,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,teWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures COMMAND testMixedArchitectures). endif(). include_directories(${CUDA_INCLUDE_DIRS}). endif(). #-- -test of reference architecture; if (Test_Reference). ROOT_EXECUTABLE(testIm2Col TestIm2Col.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col COMMAND testIm2Col). ROOT_EXECUTABLE(testPoolingLayer TestPoolingLayer.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer COMMAND testPoolingLayer). ROOT_EXECUTABLE(testReshape TestReshape.cxx LIB,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2681,test,testConvLayerCudnn,2681,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,2,['test'],['testConvLayerCudnn']
Testability,"ted during; // initialize()'s execution.; __llvm_profile_reset_counters();; ... hot region 1; // Dump the profile for hot region 1.; __llvm_profile_set_filename(""region1.profraw"");; __llvm_profile_dump();. // Reset counters before proceeding to hot region 2.; __llvm_profile_reset_counters();; ... hot region 2; // Dump the profile for hot region 2.; __llvm_profile_set_filename(""region2.profraw"");; __llvm_profile_dump();. // Since the profile has been dumped, no further profile data; // will be collected beyond the above __llvm_profile_dump().; cleanup();; return 0;; }. These APIs' names can be introduced to user programs in two ways.; They can be declared as weak symbols on platforms which support; treating weak symbols as ``null`` during linking. For example, the user can; have. .. code-block:: c. __attribute__((weak)) int __llvm_profile_dump(void);. // Then later in the same source file; if (__llvm_profile_dump); if (__llvm_profile_dump() != 0) { ... }; // The first if condition tests if the symbol is actually defined.; // Profile dumping only happens if the symbol is defined. Hence,; // the user program works correctly during normal (not profile-generate); // executions. Alternatively, the user program can include the header; ``profile/instr_prof_interface.h``, which contains the API names. For example,. .. code-block:: c. #include ""profile/instr_prof_interface.h"". // Then later in the same source file; if (__llvm_profile_dump() != 0) { ... }. The user code does not need to check if the API names are defined, because; these names are automatically replaced by ``(0)`` or the equivalence of noop; if the ``clang`` is not compiling for profile generation. Such replacement can happen because ``clang`` adds one of two macros depending; on the ``-fprofile-generate`` and the ``-fprofile-use`` flags. * ``__LLVM_INSTR_PROFILE_GENERATE``: defined when one of; ``-fprofile[-instr]-generate``/``-fcs-profile-generate`` is in effect.; * ``__LLVM_INSTR_PROFILE_USE``: defined when ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:112881,test,tests,112881,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['tests']
Testability,"ted in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4880,test,test-suite,4880,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test-suite', 'tests']"
Testability,"ted lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT_PARAMS}; DEPENDS ${LLVM_LIT_DEPENDS}; ARGS ${LLVM_LIT_EXTRA_ARGS}; ); endif(); endif(). add_subdirectory(tools). option(CLING_INCLUDE_DOCS ""Generate build targets for the Cling docs.""; ${LLVM_INCLUDE_DOCS}); if( CLING_INCLUDE_DOCS ); add_subdirectory(docs); endif(). if(EXISTS ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); file(REMOVE ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); endif(). if(CLING_ORDER_FILE STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); unset(CLING_ORDER_FILE CACHE); unset(CLING_ORDER_FILE); endif(). set(CLING_ORDER_FILE """" CACHE FILEPATH; ""Order file to use when compiling cling in order to improve startup time.""). add_subdirectory(cmake/modules); ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:17489,test,tests,17489,interpreter/cling/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt,1,['test'],['tests']
Testability,"ted to the surrounding text. Contextual elements should appear alone on; lines with no other non-whitespace text, so that the symbolizing filter might; elide the whole line from its output without hiding any other log text. The contextual elements themselves do not necessarily need to be presented in; human-readable output. However, the information they impart may be essential to; understanding the logging text even after symbolization. So it's recommended; that this information be preserved in some form when the original raw log with; markup may no longer be readily accessible for whatever reason. Contextual elements should appear in the logging stream before they are needed.; That is, if some piece of context may affect how the symbolizing filter would; interpret or present a later presentation element, the necessary contextual; elements should have appeared somewhere earlier in the logging stream. It should; always be possible for the symbolizing filter to be implemented as a single pass; over the raw logging stream, accumulating context and massaging text as it goes. ``{{{reset}}}``. This should be output before any other contextual element. The need for this; contextual element is to support implementations that handle logs coming from; multiple processes. Such implementations might not know when a new process; starts or ends. Because some identifying information (like process IDs) might; be the same between old and new processes, a way is needed to distinguish two; processes with such identical identifying information. This element informs; such implementations to reset the state of a filter so that information from a; previous process's contextual elements is not assumed for new process that; just happens have the same identifying information. ``{{{module:%i:%s:%s:...}}}``. This element represents a so-called ""module"". A ""module"" is a single linked; binary, such as a loaded ELF file. Usually each module occupies a contiguous; range of memory. Here ``%i`` is t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:18168,log,logging,18168,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logging']
Testability,"ted using the bin center and also reset the number of entries to the; total bin content or to the effective entries in case of a weighted histogram.; Check the histogram compatibility, by comparing each bin, in the case of variable bin histogram, when using the histogram operation methods TH1::Add or TH1::Multiply or TH1::Divide. THistPainter. Round correctly the number of entries displayed in the statistics box to the closest integer value.; New plotting option SURF7. It is similar to SURF3 except; that the surface is plotted with colors and the contours on top with lines. TGraph. Fixed problem in <http://root.cern.ch/phpBB2/viewtopic.php?t=9208>. TGraphErrors. Add a new fitting option ""EX0"", to neglect the error in X when fitting; . TGraph2DErrors. New option ""ERR"" to draw TGraphErrors as error bars.; The following picture has been produced with the option ""ERR P0"". THnSparse. Make a function to generate a THnSparse from a corresponding TH1.; Fixed a problem with the division methods, as well as implement unit tests for them.; Remove some unnecessary parts of the methods Multiply and Divide.; Implement the multiplication proposal in; <http://root.cern.ch/phpBB2/viewtopic.php?t=7692>, as weel; as implemeting unit tests for it.; Add a new method Fit() for fitting a THNSparse. By default the likelihood method is used. For using a least square; method (not really reccomended) if the histogram is really sparse, the option ""X"" must be used. . new classes TFitResult, TFitResultPtr. All the Fit methods of the Hist library instead of returning an integer now return a TFitResultPtr object. The TFitResultPtr is an object that converts automatically to an integer, which represents the status code of the fit. If the Fit method is used as before, there is a no visible change for the user.; When using the fit option ""S"", the TFitResultPtr will now contain a pointer to the new TFitResult class. It will behave as a smart pointer to TFitResult,; by using the -> operator the user ca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v526/index.html:3927,test,tests,3927,hist/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v526/index.html,1,['test'],['tests']
Testability,"ted variables; -----------------------. These variables provide fine control over the build of LLVM and; enabled sub-projects. Nearly all of these variable names begin with; ``LLVM_``. **BUILD_SHARED_LIBS**:BOOL; Flag indicating if each LLVM component (e.g. Support) is built as a shared; library (ON) or as a static library (OFF). Its default value is OFF. On; Windows, shared libraries may be used when building with MinGW, including; mingw-w64, but not when building with the Microsoft toolchain. .. note:: BUILD_SHARED_LIBS is only recommended for use by LLVM developers.; If you want to build LLVM as a shared library, you should use the; ``LLVM_BUILD_LLVM_DYLIB`` option. **LLVM_ABI_BREAKING_CHECKS**:STRING; Used to decide if LLVM should be built with ABI breaking checks or; not. Allowed values are `WITH_ASSERTS` (default), `FORCE_ON` and; `FORCE_OFF`. `WITH_ASSERTS` turns on ABI breaking checks in an; assertion enabled build. `FORCE_ON` (`FORCE_OFF`) turns them on; (off) irrespective of whether normal (`NDEBUG`-based) assertions are; enabled or not. A version of LLVM built with ABI breaking checks; is not ABI compatible with a version built without it. **LLVM_ADDITIONAL_BUILD_TYPES**:LIST; Adding a semicolon separated list of additional build types to this flag; allows for them to be specified as values in CMAKE_BUILD_TYPE without; encountering a fatal error during the configuration process. **LLVM_UNREACHABLE_OPTIMIZE**:BOOL; This flag controls the behavior of `llvm_unreachable()` in release build; (when assertions are disabled in general). When ON (default) then; `llvm_unreachable()` is considered ""undefined behavior"" and optimized as; such. When OFF it is instead replaced with a guaranteed ""trap"". **LLVM_APPEND_VC_REV**:BOOL; Embed version control revision info (Git revision id).; The version info is provided by the ``LLVM_REVISION`` macro in; ``llvm/include/llvm/Support/VCSRevision.h``. Developers using git who don't; need revision info can disable this option to ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst:12345,assert,assertions,12345,interpreter/llvm-project/llvm/docs/CMake.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CMake.rst,1,['assert'],['assertions']
Testability,"ted, RooFit will be between 10 and 20% faster if the new iterators are used. Heavily using old iterators might slow it down by 5 to 10%. Iterators in key classes have been updated, such that many workflows in RooFit are 10 - 20% faster. #### Legacy iterators; The (three kinds) of legacy iterators in RooFit are still supported, such that old code will not break, but they are slower than `begin(), end()` and range-based for loops. **Important caveat**:; The old RooFit collections could be modified while iterating. The STL-like iterators do not support this (as for a *e.g.* std::vector)! Using the legacy iterators with the new collections (*i.e.* in existing code), mutating the collection is still possible in the following cases:; - Inserting/deleting elements **after** the current iterator.; - Changing an element at a position **other than** the current iterator; - **But not** inserting/deleting before/at the current iterator position. With a debug build (with assertions), the legacy iterators will check that the collection is not mutated. In a release build, elements might be skipped or be iterated twice. #### Moving away from the slower iterators; The legacy iterators have been flagged with a special deprecation macro that can be used help the user use the recommended ROOT interface. Defining one of the [deprecation macros](#preprocessor-deprecation-macros) (either in a single translation unit or in the build system), and creating a legacy iterator will trigger a compiler warning such as:; ```; <path>/RooChebychev.cxx:66:34: warning: 'createIterator' is deprecated: There is a superior alternative: begin(), end() and range-based for loops. [-Wdeprecated-declarations]; TIterator* coefIter = coefList.createIterator() ;; ^; 1 warning generated.; ```. ## TMVA. This release provides a consolidation and several fixes of the new machine learning tools provided in TMVA such as the Deep Learning module.; The method `TMVA::Types::kDL` should be used now for building Deep Learn",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v618/index.md:16366,assert,assertions,16366,README/ReleaseNotes/v618/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v618/index.md,1,['assert'],['assertions']
Testability,"ted, and report back errors; only if they were not reported by the official release tester for that; architecture. We also ask that the OS distribution release managers test their packages with; the first candidate of every release, and report any *new* errors in GitHub.; If the bug can be reproduced with an unpatched upstream version of the release; candidate (as opposed to the distribution's own build), the priority should be; release blocker. During the first round of testing, all regressions must be fixed before the; second release candidate is tagged. In the subsequent stages, the testing is only to ensure that bug; fixes previously merged in have not created new major problems. *This is not; the time to solve additional and unrelated bugs!* If no patches are merged in,; the release is determined to be ready and the release manager may move onto the; next stage. Reporting Regressions; ---------------------. Every regression that is found during the tests (as per the criteria above),; should be filled in a bug in GitHub and added to the release milestone. If a bug can't be reproduced, or stops being a blocker, it should be removed; from the Milestone. Debugging can continue, but on trunk. Backport Requests; -----------------. Instructions for requesting a backport to a stable branch can be found :doc:`here <GitHub>`. Triaging Bug Reports for Releases; ---------------------------------. This section describes how to triage bug reports:. #. Search for bugs with a Release Milestone that have not been added to the; ""Release Status"" github project:. https://github.com/llvm/llvm-project/issues?q=is%3Aissue+milestone%3A%22LLVM+14.0.5+Release%22+no%3Aproject+. Replace 14.0.5 in this query with the version from the Release Milestone being; targeted. Add these bugs to the ""Release Status"" project. #. Navigate to the `Release Status project <https://github.com/orgs/llvm/projects/3>`_; to see the list of bugs that are being considered for the release. #. Review each bug and",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:9976,test,tests,9976,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['tests']
Testability,"ted. .. Note that the productions involving RangeList and RangePiece have precedence; over the more generic value parsing based on the first token. .. code-block:: text. foreach i = [0, 1, 2, 3] in {; def R#i : Register<...>;; def F#i : Register<...>;; }. This loop defines records named ``R0``, ``R1``, ``R2``, and ``R3``, along; with ``F0``, ``F1``, ``F2``, and ``F3``. ``dump`` --- print messages to stderr; -------------------------------------. A ``dump`` statement prints the input string to standard error; output. It is intended for debugging purpose. * At top level, the message is printed immediately. * Within a record/class/multiclass, `dump` gets evaluated at each; instantiation point of the containing record. .. productionlist::; Dump: ""dump"" `string` "";"". For example, it can be used in combination with `!repr` to investigate; the values passed to a multiclass:. .. code-block:: text. multiclass MC<dag s> {; dump ""s = "" # !repr(s);; }. ``if`` --- select statements based on a test; --------------------------------------------. The ``if`` statement allows one of two statement groups to be selected based; on the value of an expression. .. productionlist::; If: ""if"" `Value` ""then"" `IfBody`; :| ""if"" `Value` ""then"" `IfBody` ""else"" `IfBody`; IfBody: ""{"" `Statement`* ""}"" | `Statement`. The value expression is evaluated. If it evaluates to true (in the same; sense used by the bang operators), then the statements following the; ``then`` reserved word are processed. Otherwise, if there is an ``else``; reserved word, the statements following the ``else`` are processed. If the; value is false and there is no ``else`` arm, no statements are processed. Because the braces around the ``then`` statements are optional, this grammar rule; has the usual ambiguity with ""dangling else"" clauses, and it is resolved in; the usual way: in a case like ``if v1 then if v2 then {...} else {...}``, the; ``else`` associates with the inner ``if`` rather than the outer one. The :token:`IfBody` o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:47562,test,test,47562,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['test'],['test']
Testability,"ted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it was able to complete. This is; considered a failure. Depending on the test format tests may produce additional information about; their status (generally only for failures). See the :ref:`output-options`; section for more information. .. _lit-infrastructure:. LIT INFRASTRUCTURE; ------------------. This section describes the :program:`lit` testing architecture for users interested in; creating a new :program:`lit` testing implementation, or extending an existing one. :program:`lit` proper is primarily an infrastructure for discovering and running; arbitrary tests, and to expose a single convenient interface to these; tests.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:13040,test,test,13040,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"ted. This should generally be the; (mangled) function name for a set of counters. The second argument is a hash value that can be used by the consumer; of the profile data to detect changes to the instrumented source. The third argument is the number of bitmap bytes required by the function to; record the number of test vectors executed for each boolean expression. The fourth argument is the byte index into the global test vector bitmap; corresponding to the function. The fifth argument is the address of the condition bitmap, which contains a; value representing an executed MC/DC test vector. It is loaded and used as the; bit index of the test vector bitmap. Semantics:; """""""""""""""""""". This intrinsic represents the final operation of an MC/DC instrumentation; sequence and will cause the ``-instrprof`` pass to generate the code to; instrument an update of a function's global test vector bitmap to indicate that; a test vector has been executed. The global test vector bitmap can be consumed; by the ``llvm-profdata`` and ``llvm-cov`` tools. '``llvm.thread.pointer``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare ptr @llvm.thread.pointer(). Overview:; """""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns the value of the thread; pointer. Semantics:; """""""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns a pointer to the TLS area; for the current thread. The exact semantics of this value are target; specific: it may point to the start of TLS area, to the end, or somewhere; in the middle. Depending on the target, this intrinsic may read a register,; call a helper function, read from an alternate memory space, or perform; other operations necessary to locate the TLS area. Not all targets support; this intrinsic. '``llvm.call.preallocated.setup``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare token @llvm.call.preallocated.setup(i32 %num_args). Overview:; """""""""""""""""". The '``llvm.call.preallocated.set",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:536607,test,test,536607,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"ten objects. Consequently, a ROOT; file may contain objects with different compression levels. This table; shows four runs of the demo script that creates 15 histograms with; different compression parameters. To make the numbers more significant,; the macro was modified to create 1000 histograms. We have included two; more examples to show the impact of compression on Trees in the next; chapter. ### Using the General Open Function of TFile. To make life simple we provide a general function to open any type of; file (except shared memory files of class **`TMapFile`**). This; functionality is provided by the static `TFile::Open()` function:. ``` {.cpp}; TFile *TFile::Open(const Text_t *name,Option_t *option="""",; const Text_t *title="""",Int_t compress,Int_t netopt); ```. Depending on the `name` argument, the function returns a **`TFile`** or one; of its derivations, for example a; **`TNetXNGFile`** or a **`TDavixFile`** object. In case a URL; specifies a local file, a **`TFile`** object will be returned (and of; course no login information is needed). The arguments of the `Open()`; function are the same as the ones for the **`TFile`** constructor. Using `ReOpen()` method it is possible to reopen a file with a; different access mode, like from READ to UPDATE or from NEW, CREATE,; RECREATE, UPDATE to READ. Thus the mode argument can be either ""READ"" or; ""UPDATE"". The method returns:. - 0 in case the mode was successfully modified;. - 1 in case the mode did not change (it was already as requested or; there were wrong input arguments);. - -1 in case of failure. In the last case the file cannot be used; anymore. ## Remotely Access to ROOT Files. ROOT files can be accessed remotely in many ways, on the base of the protocol; URL. Among the most popular are XRootD (protocols 'root://' and 'xrd://') and; a Web server (protocl 'http://' or 'https://'). The rootd daemon is deprecated and has been removed in version 6.16/00. Please refer to the XRootD documentation for starting and",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md:94901,log,login,94901,documentation/users-guide/InputOutput.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/InputOutput.md,1,['log'],['login']
Testability,"ten to; provide coverage for the standard requirements (clang/test/CXX and; clang/test/C). The standards coverage is not structured in a way; that makes it easy to maintain as the standards change over time. No commercial; conformance test suite has a license model suitable for open source projects,; so we would appreciate help in improving the existing coverage we have both in; terms of layout of the tests as well as in coverage of the various standard; modes.; Complete the investigation into Clang's C and C++ Defect Report; conformance: Separate from (but related to) general conformance testing is; determining which C defect reports and; C++ defect reports Clang implements. These; lists currently have a number of entries marked as Unknown.; Completing the investigation involves adding test coverage for; C; and; C++; defect reports and updating the documentation accordingly.; Bug triage: Clang's ; issue trackercurrently has over 20,000 open issues, many of which are not; appropriately tagged, are no longer reproducible, could use a reduced test case,; or otherwise needs some manual interaction. We can always use help with; bug triage and; issue tracker maintenance. Improve build times with Clang: the time it takes Clang to process a; translation unit is very important to our users; the lower the build time, the; better the overall user experience. It would be good to improve Clang's; performance as well as to find ways to proactively alert us when we've; introduced a change that has significant negative impact on build times.; Complete support for the experimental constant expression interpreter; : Clang's production constant expression interpreter computes a constant; expression result by walking over AST nodes, performing calculations as it; goes. This does not have good performance properties, and so we've begun work; on an ; experimental constant expression interpreter that works by converting the; AST into bytecode that is interpreted. This effort has a long t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html:2789,test,test,2789,interpreter/llvm-project/clang/www/OpenProjects.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/OpenProjects.html,1,['test'],['test']
Testability,"tension to allow creating a `pointer to a member of a virtual; base class`_. Clang does not yet support this. .. _#pragma pointers_to_members:; https://msdn.microsoft.com/en-us/library/83cch5a6.aspx; .. _/vm: https://msdn.microsoft.com/en-us/library/yad46a6z.aspx; .. _pointer to a member of a virtual base class: https://llvm.org/PR15713. * Debug info: :good:`Mostly complete`. Clang emits relatively complete CodeView; debug information if ``/Z7`` or ``/Zi`` is passed. Microsoft's link.exe will; transform the CodeView debug information into a PDB that works in Windows; debuggers and other tools that consume PDB files like ETW. Work to teach lld; about CodeView and PDBs is ongoing. * RTTI: :good:`Complete`. Generation of RTTI data structures has been; finished, along with support for the ``/GR`` flag. * C++ Exceptions: :good:`Mostly complete`. Support for; C++ exceptions (``try`` / ``catch`` / ``throw``) have been implemented for; x86 and x64. Our implementation has been well tested but we still get the; odd bug report now and again.; C++ exception specifications are ignored, but this is `consistent with Visual; C++`_. .. _consistent with Visual C++:; https://msdn.microsoft.com/en-us/library/wfa0edys.aspx. * Asynchronous Exceptions (SEH): :partial:`Partial`.; Structured exceptions (``__try`` / ``__except`` / ``__finally``) mostly; work on x86 and x64.; LLVM does not model asynchronous exceptions, so it is currently impossible to; catch an asynchronous exception generated in the same frame as the catching; ``__try``. * Thread-safe initialization of local statics: :good:`Complete`. MSVC 2015; added support for thread-safe initialization of such variables by taking an; ABI break.; We are ABI compatible with both the MSVC 2013 and 2015 ABI for static local; variables. * Lambdas: :good:`Mostly complete`. Clang is compatible with Microsoft's; implementation of lambdas except for providing overloads for conversion to; function pointer for different calling conventions. Howeve",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/MSVCCompatibility.rst:3784,test,tested,3784,interpreter/llvm-project/clang/docs/MSVCCompatibility.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/MSVCCompatibility.rst,1,['test'],['tested']
Testability,"tent |; |---------------------|-----------------------------------------------------|; | 0x00 | Serialized ROOT streamer info; see notes |. The serialized ROOT streamer info is not bound to a specific type.; It is the combined streamer information from all fields serialized by the ROOT streamer.; Writers set version from/to to zero and use an empty type name.; Readers should ignore the type-specific information.; The format of the content is a ROOT streamed `TList` of `TStreamerInfo` objects. ### Footer Envelope. The footer envelope has the following structure:. - Feature flags; - Header checksum (XxHash-3 64bit); - Schema extension record frame; - List frame of column group record frames; - List frame of cluster group record frames. The header checksum can be used to cross-check that header and footer belong together.; The meaning of the feature flags is the same as for the header.; The header flags do not need to be repeated.; Readers should combine (logical `or` of the bits) the feature flags from header and footer for the full set of flags. #### Schema Extension Record Frame. The schema extension record frame contains an additional schema description that is incremental; with respect to the schema contained in the header (see Section Header Envelope).; Specifically, it is a record frame with the following four fields; (identical to the last four fields in Header Envelope):. - List frame: list of field record frames; - List frame: list of column record frames; - List frame: list of alias column record frames; - List frame: list of extra type information. In general, a schema extension is optional, and thus this record frame might be empty.; The interpretation of the information contained therein should be identical; as if it was found directly at the end of the header.; This is necessary when fields have been added during writing. Note that the field IDs and physical column IDs given by the serialization order; should continue from the largest IDs found in the hea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/BinaryFormatSpecification.md:28703,log,logical,28703,tree/ntuple/v7/doc/BinaryFormatSpecification.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/BinaryFormatSpecification.md,1,['log'],['logical']
Testability,"ter. 13. Start Visual Studio and select configuration:. In the directory you created the project files will have an ``llvm.sln``; file, just double-click on that to open Visual Studio. The default Visual; Studio configuration is **Debug** which is slow and generates a huge amount; of debug information on disk. For now, we recommend selecting **Release**; configuration for the LLVM project which will build the fastest or; **RelWithDebInfo** which is also several time larger than Release.; Another technique is to build all of LLVM in Release mode and change; compiler flags, disabling optimization and enabling debug information, only; for specific libraries or source files you actually need to debug. 14. Test LLVM in Visual Studio:. You can run LLVM tests by merely building the project ""check-all"". The test; results will be shown in the VS output window. Once the build succeeds, you; have verified a working LLVM development environment!. You should not see any unexpected failures, but will see many unsupported; tests and expected failures:. ::. 114>Testing Time: 1124.66s; 114> Skipped : 39; 114> Unsupported : 21649; 114> Passed : 51615; 114> Expectedly Failed: 93; ========== Build: 114 succeeded, 0 failed, 321 up-to-date, 0 skipped ==========``. Alternatives to manual installation; ===================================; Instead of the steps above, to simplify the installation procedure you can use; `Chocolatey <https://chocolatey.org/>`_ as package manager.; After the `installation <https://chocolatey.org/install>`_ of Chocolatey,; run these commands in an admin shell to install the required tools:. .. code-block:: bat. choco install -y git cmake python3; pip3 install psutil. There is also a Windows; `Dockerfile <https://github.com/llvm/llvm-zorg/blob/main/buildbot/google/docker/windows-base-vscode2019/Dockerfile>`_; with the entire build tool chain. This can be used to test the build with a; tool chain different from your host installation or to create build servers. Nex",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:7744,test,tests,7744,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['tests']
Testability,"terPoint) which returns a; SamplingDistribution based on a given probability density function. �We; foresee a few versions of this tool based on toy Monte Carlo, importance; sampling, Fourier transforms, etc. �The following concrete implementation; of the TestStatSampler interface are currently available. ToyMCSamplerUses a Toy Monte Carlo approach to build the; sampling distribution. �The pdf's generate method to generate is used to; generate toy data, and then the test statistic is evaluated at the; requested parameter point. ; DebuggingSampler Simply returns a uniform distribution; between 0,1. �Useful for debugging. NeymanConstruction and FeldmanCousins; A flexible framework for the Neyman Construction was added in this; release. The NeymanConstruction is a concrete implementation of the; IntervalCalculator interface, but it needs several; additional components�to be specified before use. The design; factorizes the choice of the parameter points to be tested,�the choice of; the test statistic, and the generation of sampling distribution into; separate parts (described above). �Finally, the NeymanConstruction class; is simply in charge of using these parts (strategies) and constructing; the confidence belt and confidence intervals. �The ConfidenceBelt class; is still under development, but the current version works fine for; producing ConfidenceIntervals. �We are also working to make this class; work with parallelization approaches, which is not yet complete.; The FeldmanCousins class is a separate concrete implementation of the; IntervalCalculator interface. �It uses the NeymanConstruction internally,; and�enforces�specific choices of the test statistic and ordering; principle to realize the Unified intervals described by Feldman and; Cousins in their paper�Phys.Rev.D57:3873-3889,1998. In an extension to the technique discussed in Feldman and Cousins paper,; the FeldmanCousins class also performs a ""profile construction"" if their are nuisance parameters.; In this",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:28013,test,tested,28013,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,2,['test'],"['test', 'tested']"
Testability,"tercepted CMP instructions. This may slow down; the fuzzing but is very likely to improve the results. Value Profile; -------------. With ``-fsanitize-coverage=trace-cmp`` (default with ``-fsanitize=fuzzer``); and extra run-time flag ``-use_value_profile=1`` the fuzzer will; collect value profiles for the parameters of compare instructions; and treat some new values as new coverage. The current implementation does roughly the following:. * The compiler instruments all CMP instructions with a callback that receives both CMP arguments.; * The callback computes `(caller_pc&4095) | (popcnt(Arg1 ^ Arg2) << 12)` and uses this value to set a bit in a bitset.; * Every new observed bit in the bitset is treated as new coverage. This feature has a potential to discover many interesting inputs,; but there are two downsides.; First, the extra instrumentation may bring up to 2x additional slowdown.; Second, the corpus may grow by several times. Fuzzer-friendly build mode; ---------------------------; Sometimes the code under test is not fuzzing-friendly. Examples:. - The target code uses a PRNG seeded e.g. by system time and; thus two consequent invocations may potentially execute different code paths; even if the end result will be the same. This will cause a fuzzer to treat; two similar inputs as significantly different and it will blow up the test corpus.; E.g. libxml uses ``rand()`` inside its hash table.; - The target code uses checksums to protect from invalid inputs.; E.g. png checks CRC for every chunk. In many cases it makes sense to build a special fuzzing-friendly build; with certain fuzzing-unfriendly features disabled. We propose to use a common build macro; for all such cases for consistency: ``FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION``. .. code-block:: c++. void MyInitPRNG() {; #ifdef FUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION; // In fuzzing mode the behavior of the code should be deterministic.; srand(0);; #else; srand(time(0));; #endif; }. AFL compatibility; ------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:21287,test,test,21287,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,terms see $ROOTSYS/LICENSE.; # For the list of contributors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN tests.; # @author Simon Pfreundschuh; ############################################################################. set(Libraries TMVA). #--- CUDA tests. ---------------------------; if (tmva-gpu). include_directories(${CUDA_INCLUDE_DIRS}). SET(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES} ). list(APPEND Libraries ${DNN_CUDA_LIBRARIES} CUDA::cuda_driver CUDA::cudart). # DNN - Activation Functions Cuda; add_executable(testActivationFunctionsCuda TestActivationFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testActivationFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-ActivationFunctionsCuda COMMAND testActivationFunctionsCuda). # DNN - Loss Functions Cuda; add_executable(testLossFunctionsCuda TestLossFunctionsCuda.cxx); TARGET_LINK_LIBRARIES(testLossFunctionsCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-LossFunctionsCuda COMMAND testLossFunctionsCuda). # DNN - Derivatives Cuda; add_executable(testDerivativesCuda TestDerivativesCuda.cxx); TARGET_LINK_LIBRARIES(testDerivativesCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-DerivativesCuda COMMAND testDerivativesCuda). # DNN - Backpropagation Cuda; add_executable(testBackpropagationCuda TestBackpropagationCuda.cxx); TARGET_LINK_LIBRARIES(testBackpropagationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BackpropagationCuda COMMAND testBackpropagationCuda). # DNN - Backpropagation DL Cuda; add_executable(testBackpropagationDLCuda TestBackpropagationDLCuda.cxx ); TARGET_LINK_LIBRARIES(testBackpropagationDLCuda ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DLCuda COMMAND testBackpropagationDLCuda). # DNN - Batch normalization Cuda; add_executable(testBatchNormalizationCuda TestBatchNormalizationCuda.cxx ); TARGET_LINK_LIBRARIES(testBatchNormalizationCuda ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cuda COMMA,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:1065,test,testLossFunctionsCuda,1065,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,2,['test'],['testLossFunctionsCuda']
Testability,"tervalMap.h; ^^^^^^^^^^^^^^^^^^^^^^. IntervalMap is a compact map for small keys and values. It maps key intervals; instead of single keys, and it will automatically coalesce adjacent intervals.; When the map only contains a few intervals, they are stored in the map object; itself to avoid allocations. The IntervalMap iterators are quite big, so they should not be passed around as; STL iterators. The heavyweight iterators allow a smaller data structure. .. _dss_intervaltree:. llvm/ADT/IntervalTree.h; ^^^^^^^^^^^^^^^^^^^^^^^. ``llvm::IntervalTree`` is a light tree data structure to hold intervals. It; allows finding all intervals that overlap with any given point. At this time,; it does not support any deletion or rebalancing operations. The IntervalTree is designed to be set up once, and then queried without any; further additions. .. _dss_map:. <map>; ^^^^^. std::map has similar characteristics to :ref:`std::set <dss_set>`: it uses a; single allocation per pair inserted into the map, it offers log(n) lookup with; an extremely large constant factor, imposes a space penalty of 3 pointers per; pair in the map, etc. std::map is most useful when your keys or values are very large, if you need to; iterate over the collection in sorted order, or if you need stable iterators; into the map (i.e. they don't get invalidated if an insertion or deletion of; another element takes place). .. _dss_mapvector:. llvm/ADT/MapVector.h; ^^^^^^^^^^^^^^^^^^^^. ``MapVector<KeyT,ValueT>`` provides a subset of the DenseMap interface. The; main difference is that the iteration order is guaranteed to be the insertion; order, making it an easy (but somewhat expensive) solution for non-deterministic; iteration over maps of pointers. It is implemented by mapping from key to an index in a vector of key,value; pairs. This provides fast lookup and iteration, but has two main drawbacks:; the key is stored twice and removing elements takes linear time. If it is; necessary to remove elements, it's best ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:93614,log,log,93614,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,1,['log'],['log']
Testability,"tes as an indented text tree, one argument per; line, with differences marked inline. This is compatible with; -fno-elide-type. Default:. ::. t.cc:4:5: note: candidate function not viable: no known conversion from 'vector<map<[...], map<float, [...]>>>' to 'vector<map<[...], map<double, [...]>>>' for 1st argument;. With :option:`-fdiagnostics-show-template-tree`:. ::. t.cc:4:5: note: candidate function not viable: no known conversion for 1st argument;; vector<; map<; [...],; map<; [float != double],; [...]>>>. .. option:: -fcaret-diagnostics-max-lines:. Controls how many lines of code clang prints for diagnostics. By default,; clang prints a maximum of 16 lines of code. .. option:: -fdiagnostics-show-line-numbers:. Controls whether clang will print a margin containing the line number on; the left of each line of code it prints for diagnostics. Default:. ::. test.cpp:5:1: error: 'main' must return 'int'; 5 | void main() {}; | ^~~~; | int. With -fno-diagnostics-show-line-numbers:. ::. test.cpp:5:1: error: 'main' must return 'int'; void main() {}; ^~~~; int. .. _cl_diag_warning_groups:. Individual Warning Groups; ^^^^^^^^^^^^^^^^^^^^^^^^^. TODO: Generate this from tblgen. Define one anchor per warning group. .. option:: -Wextra-tokens. Warn about excess tokens at the end of a preprocessor directive. This option, which defaults to on, enables warnings about extra; tokens at the end of preprocessor directives. For example:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^. These extra tokens are not strictly conforming, and are usually best; handled by commenting them out. .. option:: -Wambiguous-member-template. Warn about unqualified uses of a member template whose name resolves to; another template at the location of the use. This option, which defaults to on, enables a warning in the; following code:. ::. template<typename T> struct set{};; template<typename T> struct trait { typedef const T& type; };; struct Value {; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:19493,test,test,19493,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"tes single reminder"");; } else if (reminderCount >= 2) {; // Warning: Plural cases are not supported across all languages.; // Use a .stringsdict file instead; reminderText =; [NSString stringWithFormat:; NSLocalizedString(@""%@ Reminders"", @""Indicates multiple reminders""),; reminderCount];; }. Security Alpha Checkers. Name, DescriptionExample. alpha.security.ArrayBound; (C); Warn about buffer overflows (older checker). void test() {; char *s = """";; char c = s[1]; // warn; }. struct seven_words {; int c[7];; };. void test() {; struct seven_words a, *p;; p = &a; p[0] = a;; p[1] = a;; p[2] = a; // warn; }. // note: requires unix.Malloc or; // alpha.unix.MallocWithAnnotations checks enabled.; void test() {; int *p = malloc(12);; p[3] = 4; // warn; }. void test() {; char a[2];; int *b = (int*)a;; b[1] = 3; // warn; }. alpha.security.ArrayBoundV2; (C); Warn about buffer overflows (newer checker). void test() {; char *s = """";; char c = s[1]; // warn; }. void test() {; int buf[100];; int *p = buf;; p = p + 99;; p[1] = 1; // warn; }. // note: compiler has internal check for this.; // Use -Wno-array-bounds to suppress compiler warning.; void test() {; int buf[100][100];; buf[0][-1] = 1; // warn; }. // note: requires alpha.security.taint check turned on.; void test() {; char s[] = ""abc"";; int x = getchar();; char c = s[x]; // warn: index is tainted; }. alpha.security.MallocOverflow; (C); Check for overflows in the arguments to malloc(). void test(int n) {; void *p = malloc(n * sizeof(int)); // warn; }. alpha.security.MmapWriteExec; (C); Warn on mmap() calls that are both writable and executable. void test(int n) {; void *c = mmap(NULL, 32, PROT_READ | PROT_WRITE | PROT_EXEC,; MAP_PRIVATE | MAP_ANON, -1, 0);; // warn: Both PROT_WRITE and PROT_EXEC flags are set. This can lead to; // exploitable memory regions, which could be overwritten with malicious; // code; }. alpha.security.ReturnPtrRange; (C); Check for an out-of-bound pointer being returned to callers. static int A[10];.",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:10464,test,test,10464,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"tes. There is no analogous flag to use when tracing indirect calls, branches, and; returns. The predicate state must be accumulated through some other means.; Fundamentally, this is the reverse of the problem posed in CFI: we need to; check where we came from rather than where we are going. For function-local; jump tables, this is easily arranged by testing the input to the jump table; within each destination (not yet implemented, use retpolines):; ```; pushq %rax; xorl %eax, %eax # Zero out initial predicate state.; movq $-1, %r8 # Put all-ones mask into a register.; jmpq *.LJTI0_0(,%rdi,8) # Indirect jump through table.; .LBB0_2: # %sw.bb; testq $0, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_3: # %sw.bb1; testq $1, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_5: # %sw.bb10; testq $2, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL; ... .section .rodata,""a"",@progbits; .p2align 3; .LJTI0_0:; .quad .LBB0_2; .quad .LBB0_3; .quad .LBB0_5; ...; ```. Returns have a simple mitigation technique on x86-64 (or other ABIs which have; what is called a ""red zone"" region beyond the end of the stack). This region is; guaranteed to be preserved across interrupts and context switches, making the; return address used in returning to the current code remain on the stack and; valid to read. We can emit code in the caller to verify that a return edge was; not mispredicted:; ```; callq other_function; return_addr:; testq -8(%rsp), return_addr # Validate return address.; cmovneq %r8, %rax # Update predicate state.; ```. For an ABI without a ""red zone"" (and thus unable to read the return address; from the stack), we can compute the expected return address prior to the call; into a register preserved across the call and ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:18835,test,testq,18835,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testq']
Testability,"tes; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annotation. **XFAIL**. The test failed, but that is expected. This is used for test formats which allow; specifying that a test does not currently work, but wish to leave it in the test; suite. **XPASS**. The test succeeded, but it was expected to fail. This is used for tests which; were specified as expected to fail, but are now succeeding (generally because; the feature they test was broken and has been fixed). **FAIL**. The test failed. **UNRESOLVED**. The test result could not be determined. For example, this occurs when the test; could not be run, the test itself is invalid, or the test was interrupted. **UNSUPPORTED**. The test is not supported in this environment. This is used by test formats; which can report unsupported tests. **TIMEOUT**. The test was run, but it timed out before it wa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:12387,test,test,12387,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"test-suite Guide; ================. Quickstart; ----------. 1. The lit test runner is required to run the tests. You can either use one; from an LLVM build:. ```bash; % <path to llvm build>/bin/llvm-lit --version; lit 0.8.0dev; ```. An alternative is installing it as a python package in a python virtual; environment:. ```bash; % mkdir venv; % virtualenv venv; % . venv/bin/activate; % pip install svn+https://llvm.org/svn/llvm-project/llvm/trunk/utils/lit; % lit --version; lit 0.8.0dev; ```. 2. Check out the `test-suite` module with:. ```bash; % git clone https://github.com/llvm/llvm-test-suite.git test-suite; ```. 3. Create a build directory and use CMake to configure the suite. Use the; `CMAKE_C_COMPILER` option to specify the compiler to test. Use a cache file; to choose a typical build configuration:. ```bash; % mkdir test-suite-build; % cd test-suite-build; % cmake -DCMAKE_C_COMPILER=<path to llvm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure panda",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:0,test,test-suite,0,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,11,['test'],"['test', 'test-suite', 'test-suite-build', 'tests']"
Testability,"test-suite-externals/speccpu2000`); - using a configuration option such as `-D TEST_SUITE_SPEC2000_ROOT=path/to/speccpu2000`. You can find further information in the respective README files such as; `test-suite/External/SPEC/README`. For the SPEC benchmarks you can switch between the `test`, `train` and; `ref` input datasets via the `TEST_SUITE_RUN_TYPE` configuration option.; The `train` dataset is used by default. Custom Suites; -------------. You can build custom suites using the test-suite infrastructure. A custom suite; has a `CMakeLists.txt` file at the top directory. The `CMakeLists.txt` will be; picked up automatically if placed into a subdirectory of the test-suite or when; setting the `TEST_SUITE_SUBDIRS` variable:. ```bash; % cmake -DTEST_SUITE_SUBDIRS=path/to/my/benchmark-suite ../test-suite; ```. Profile Guided Optimization; ---------------------------. Profile guided optimization requires to compile and run twice. First the; benchmark should be compiled with profile generation instrumentation enabled; and setup for training data. The lit runner will merge the profile files; using `llvm-profdata` so they can be used by the second compilation run. Example:; ```bash; # Profile generation run using LLVM IR PGO:; % cmake -DTEST_SUITE_PROFILE_GENERATE=ON \; -DTEST_SUITE_USE_IR_PGO=ON \; -DTEST_SUITE_RUN_TYPE=train \; ../test-suite; % make; % llvm-lit .; # Use the profile data for compilation and actual benchmark run:; % cmake -DTEST_SUITE_PROFILE_GENERATE=OFF \; -DTEST_SUITE_PROFILE_USE=ON \; -DTEST_SUITE_RUN_TYPE=ref \; .; % make; % llvm-lit -o result.json .; ```. To use Clang frontend's PGO instead of LLVM IR PGO, set `-DTEST_SUITE_USE_IR_PGO=OFF`. The `TEST_SUITE_RUN_TYPE` setting only affects the SPEC benchmark suites. Cross Compilation and External Devices; --------------------------------------. ### Compilation. CMake allows to cross compile to a different target via toolchain files. More; information can be found here:. - [https://llvm.org/docs/lnt/te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:10064,benchmark,benchmark,10064,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['benchmark'],['benchmark']
Testability,"test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE test.elf 0x4004a0; DATA inlined.elf 0x601028. $ llvm-symbolizer < addr4.txt; main; /tmp/test.cpp:15:0. bar; 6295592 4. Example 6 - path-style options:. This example uses the same source file as above, but the source file's; full path is /tmp/foo/test.cpp and is compiled as follows. The first case; shows the default absolute path, th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:3203,test,test,3203,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"testing another input. This is why it is highly recommended to run this; in-process fuzzer with all sanitizers to detect most bugs on the spot.; * It is harder to protect the in-process fuzzer from excessive memory; consumption and infinite loops in the target library (still possible).; * The target library should not have significant global state that is not; reset between the runs.; * Many interesting target libraries are not designed in a way that supports; the in-process fuzzer interface (e.g. require a file path instead of a; byte array).; * If a single test run takes a considerable fraction of a second (or; more) the speed benefit from the in-process fuzzer is negligible.; * If the target library runs persistent threads (that outlive; execution of one test) the fuzzing results will be unreliable. Q. So, what exactly this Fuzzer is good for?; --------------------------------------------. This Fuzzer might be a good choice for testing libraries that have relatively; small inputs, each input takes < 10ms to run, and the library code is not expected; to crash on invalid inputs.; Examples: regular expression matchers, text or binary format parsers, compression,; network, crypto. Q. LibFuzzer crashes on my complicated fuzz target (but works fine for me on smaller targets).; ----------------------------------------------------------------------------------------------. Check if your fuzz target uses ``dlclose``.; Currently, libFuzzer doesn't support targets that call ``dlclose``,; this may be fixed in future. Trophies; ========; * Thousands of bugs found on OSS-Fuzz: https://opensource.googleblog.com/2017/05/oss-fuzz-five-months-later-and.html. * GLIBC: https://sourceware.org/glibc/wiki/FuzzingLibc. * MUSL LIBC: `[1] <http://git.musl-libc.org/cgit/musl/commit/?id=39dfd58417ef642307d90306e1c7e50aaec5a35c>`__ `[2] <http://www.openwall.com/lists/oss-security/2015/03/30/3>`__. * `pugixml <https://github.com/zeux/pugixml/issues/39>`_. * PCRE: Search for ""LLVM fuzzer"" in ht",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:30623,test,testing,30623,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['testing']
Testability,"tests robust, always use ``opt ... < %s`` in the RUN line.; :program:`opt` does not output a ``ModuleID`` when input comes from stdin. Platform-Specific Tests; -----------------------. Whenever adding tests that require the knowledge of a specific platform,; either related to code generated, specific output or back-end features,; you must make sure to isolate the features, so that buildbots that; run on different architectures (and don't even compile all back-ends),; don't fail. The first problem is to check for target-specific output, for example sizes; of structures, paths and architecture names, for example:. * Tests containing Windows paths will fail on Linux and vice-versa.; * Tests that check for ``x86_64`` somewhere in the text will fail anywhere else.; * Tests where the debug information calculates the size of types and structures. Also, if the test rely on any behaviour that is coded in any back-end, it must; go in its own directory. So, for instance, code generator tests for ARM go; into ``test/CodeGen/ARM`` and so on. Those directories contain a special; ``lit`` configuration file that ensure all tests in that directory will; only run if a specific back-end is compiled and available. For instance, on ``test/CodeGen/ARM``, the ``lit.local.cfg`` is:. .. code-block:: python. config.suffixes = ['.ll', '.c', '.cpp', '.test']; if not 'ARM' in config.root.targets:; config.unsupported = True. Other platform-specific tests are those that depend on a specific feature; of a specific sub-architecture, for example only to Intel chips that support ``AVX2``. For instance, ``test/CodeGen/X86/psubus.ll`` tests three sub-architecture; variants:. .. code-block:: llvm. ; RUN: llc -mcpu=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:18083,test,tests,18083,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,tests/Runtime/CharacterTest.cpp; flang/unittests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129286,benchmark,benchmarks,129286,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,tests/Runtime/CommandTest.cpp; flang/unittests/Runtime/CrashHandlerFixture.cpp; flang/unittests/Runtime/CrashHandlerFixture.h; flang/unittests/Runtime/ExternalIOTest.cpp; flang/unittests/Runtime/Format.cpp; flang/unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAna,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129325,benchmark,benchmarks,129325,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,tests/ScriptInterpreter/Python/PythonTestSuite.cpp; lldb/unittests/ScriptInterpreter/Python/PythonTestSuite.h; lldb/unittests/Signals/UnixSignalsTest.cpp; lldb/unittests/Symbol/LocateSymbolFileTest.cpp; lldb/unittests/Symbol/MangledTest.cpp; lldb/unittests/Symbol/SymbolTest.cpp; lldb/unittests/Symbol/SymtabTest.cpp; lldb/unittests/Symbol/TestClangASTImporter.cpp; lldb/unittests/Symbol/TestDWARFCallFrameInfo.cpp; lldb/unittests/Symbol/TestTypeSystem.cpp; lldb/unittests/SymbolFile/DWARF/DWARFASTParserClangTests.cpp; lldb/unittests/SymbolFile/DWARF/DWARFDIETest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFIndexCachingTest.cpp; lldb/unittests/SymbolFile/DWARF/DWARFUnitTest.cpp; lldb/unittests/SymbolFile/DWARF/Inputs/test-dwarf.cpp; lldb/unittests/SymbolFile/NativePDB/PdbFPOProgramToDWARFExpressionTests.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-alt.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-nested.h; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb-types.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.cpp; lldb/unittests/SymbolFile/PDB/Inputs/test-pdb.h; lldb/unittests/Target/DynamicRegisterInfoTest.cpp; lldb/unittests/Target/ExecutionContextTest.cpp; lldb/unittests/Target/FindFileTest.cpp; lldb/unittests/Target/MemoryTagMapTest.cpp; lldb/unittests/Target/RemoteAwarePlatformTest.cpp; lldb/unittests/Target/StackFrameRecognizerTest.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.cpp; lldb/unittests/TestingSupport/MockTildeExpressionResolver.h; lldb/unittests/TestingSupport/SubsystemRAII.h; lldb/unittests/TestingSupport/TestUtilities.cpp; lldb/unittests/TestingSupport/Host/NativeProcessTestUtils.h; lldb/unittests/TestingSupport/Symbol/ClangTestUtils.h; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.cpp; lldb/unittests/TestingSupport/Symbol/YAMLModuleTester.h; lldb/unittests/Thread/ThreadTest.cpp; lldb/unittests/UnwindAssembly/PPC64/TestPPC64InstEmulation.cpp; lldb/unittests/Utility/AnsiTerminalTest.cpp; lldb/unittests/Utility/ArgsTest.cpp;,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:231902,test,test-pdb,231902,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['test-pdb']
Testability,"tex to the **`TCondition`** constructor:. ``` {.cpp}; TMutex MyMutex;; TCondition MyCondition(&MyMutex);; ```. If zero is passed, **`TCondition`** creates and uses its own internal; mutex:. ``` {.cpp}; TCondition MyCondition(0);; ```. You can now use the following methods of synchronization:. - `TCondition::Wait()` waits until any thread sends a signal of the; same condition instance: `MyCondition.Wait()` reacts on; `MyCondition.Signal()` or `MyCondition.Broadcast()`.; `MyOtherCondition.Signal()` has no effect. - If several threads wait for the signal from the same; **`TCondition`** `MyCondition`, at `MyCondition.Signal()` only one; thread will react; to activate a further thread another; `MyCondition.Signal()` is required, etc. - If several threads wait for the signal from the same; **`TCondition`** `MyCondition`, at `MyCondition.Broadcast()` all; threads waiting for `MyCondition` are activated at once. In some tests of `MyCondition` using an internal mutex, `Broadcast()`; activated only one thread (probably depending whether `MyCondition` had; been signaled before). - `MyCondition.TimedWait(secs,nanosecs)` waits for `MyCondition` until; the *absolute* time in seconds and nanoseconds since beginning of; the epoch (January, 1st, 1970) is reached; to use relative timeouts; ‘‘delta'', it is required to calculate the absolute time at the; beginning of waiting ‘‘now''; for example:. ``` {.cpp}; Ulong_t now,then,delta; // seconds; TDatime myTime; // root daytime class; myTime.Set(); // myTime set to ""now""; now=myTime.Convert(); // to seconds since 1970; ```. - Return value wait of `MyCondition.TimedWait` should be 0, if; `MyCondition.Signal()` was received, and should be nonzero, if; timeout was reached. The conditions example shows how three threaded functions are; synchronized using **`TCondition`**: a ROOT script `condstart.C` starts; the threads, which are defined in a shared library; (`conditions.cxx, conditions.h`). #### Xlib Connections. Usually `Xlib` is not threa",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Threads.md:8928,test,tests,8928,documentation/users-guide/Threads.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Threads.md,1,['test'],['tests']
Testability,"text; drawn with X11 fonts. ### TCanvas and TPad. - `TPad::SaveAs` produces named macros in .C files.; - Change the way the string input is done in the Pad toolbar for text; and Pave Label. It doesn't use anymore the `TGX11` function `RequestString`.; Now the text appears directly as it will show and it is possible to; enter several text string. The input is not block in the `RequestString` event loop.; - The toolbar methods now work without XOR mode (useful for OpenGL()).; - A new ""vertex compression"" algorithm added to deal with complex histograms; (thousands/millions of bins - polygons with thousands/millions of vertices) -; optimization/fix for X11 crashes. ### TGaxis and TAxis. - The time axis behavior should now be correct along time zone and; summer saving time. A fix has been done with the of Philippe Gras; (CEA Saclay. IRFU/SEDI) and Julian Sitarek (IFAE). Time axis; transported from a time zone to an other in a ROOT file are correct; too. A new example test have been introduced to test the time axis; (timeonaxis3.C); - In some case the format use to build the axis labels was incorrect.; (cf: Jira report ROOT-5635).; - New static function to change the position of the ""power of 10""; near the axis. A static function is used instead of data members; in `TAxis` in order to keep the `TAxis` class small. Adding two; floating point numbers in that class (in fact in `TAttAxis`) would; have a none negligible effect on the Root files' sizes as there is; at least two axis per histogram and that there is often 1000th; histograms in a single file.; So we choose to follow the same mechanism as for the `SetMaxDigits`; static method. The new function is: `SetExponentOffset`.; Example:. ``` {.cpp}; ...; TGaxis::SetMaxDigits(2);; TGaxis::SetExponentOffset(-0.01, 0.01, ""y""); // X and Y offset for Y axis; TGaxis::SetExponentOffset(-0.05, 0.01, ""x""); // Y and Y offset for X axis; ...; hist->Draw();; ```. - `TGaxis::SetMaxDigits()` was not acitve on standalone `TGaxis`. ### TLeg",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v600/index.md:2853,test,test,2853,graf2d/doc/v600/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v600/index.md,2,['test'],['test']
Testability,"textChecker; (ObjC); Check that NSLocalizedString macros include a comment for context. - (void)test {; NSString *string = NSLocalizedString(@""LocalizedString"", nil); // warn; NSString *string2 = NSLocalizedString(@""LocalizedString"", @"" ""); // warn; NSString *string3 = NSLocalizedStringWithDefaultValue(; @""LocalizedString"", nil, [[NSBundle alloc] init], nil,@""""); // warn; }. optin.osx.cocoa.localizability.NonLocalizedStringChecker; (ObjC); Warns about uses of non-localized NSStrings passed to UI methods; expecting localized NSStrings. NSString *alarmText =; NSLocalizedString(@""Enabled"", @""Indicates alarm is turned on"");; if (!isEnabled) {; alarmText = @""Disabled"";; }; UILabel *alarmStateLabel = [[UILabel alloc] init];. // Warning: User-facing text should use localized string macro; [alarmStateLabel setText:alarmText];. OS X Checkers. Name, DescriptionExample. osx.API; (C); Check for proper uses of various Apple APIs:; dispatch_once. void test() {; dispatch_once_t pred = 0;; dispatch_once(&pred, ^(){}); // warn: dispatch_once uses local; }. osx.NumberObjectConversion; (C, C++, ObjC); Check for erroneous conversions of objects representing numbers; into numbers. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. osx.SecKeychainAPI; (C); Check for improper uses of the Security framework's Keychain APIs:; SecKeychainItemCopyContent; SecKeychainFindGenericPassword; SecKeychainFindInternetPassword; SecKeychainItemFreeContent; SecKeychainItemCopyAttributesAndData; SecKeychainItemFreeAttributesAndData. void test() {; unsigned int *ptr = 0;; UInt32 length;. SecKeychainItemFreeContent(ptr, &length);; // warn: trying to free data which has not been allocated; }. void test() {; unsigned int *ptr = 0;; UInt32 *length = 0;; void *outData;. OSStatus st =; SecKeychainItemCopyContent(2, ptr, ptr, length, outData);; // warn: data",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:12534,test,test,12534,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"textual elements; ===================. These are elements that supply information necessary to convert presentation; elements to symbolic form. Unlike presentation elements, they are not directly; related to the surrounding text. Contextual elements should appear alone on; lines with no other non-whitespace text, so that the symbolizing filter might; elide the whole line from its output without hiding any other log text. The contextual elements themselves do not necessarily need to be presented in; human-readable output. However, the information they impart may be essential to; understanding the logging text even after symbolization. So it's recommended; that this information be preserved in some form when the original raw log with; markup may no longer be readily accessible for whatever reason. Contextual elements should appear in the logging stream before they are needed.; That is, if some piece of context may affect how the symbolizing filter would; interpret or present a later presentation element, the necessary contextual; elements should have appeared somewhere earlier in the logging stream. It should; always be possible for the symbolizing filter to be implemented as a single pass; over the raw logging stream, accumulating context and massaging text as it goes. ``{{{reset}}}``. This should be output before any other contextual element. The need for this; contextual element is to support implementations that handle logs coming from; multiple processes. Such implementations might not know when a new process; starts or ends. Because some identifying information (like process IDs) might; be the same between old and new processes, a way is needed to distinguish two; processes with such identical identifying information. This element informs; such implementations to reset the state of a filter so that information from a; previous process's contextual elements is not assumed for new process that; just happens have the same identifying information. ``{{{module:%i:%s:",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:18046,log,logging,18046,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logging']
Testability,"textual`` specifier will not be compiled when the module is; built, and will be textually included if it is named by a ``#include``; directive. However, it is considered to be part of the module for the purpose; of checking *use-declaration*\s, and must still be a lexically-valid header; file. In the future, we intend to pre-tokenize such headers and include the; token sequence within the prebuilt module representation. A header with the ``exclude`` specifier is excluded from the module. It will not be included when the module is built, nor will it be considered to be part of the module, even if an ``umbrella`` header or directory would otherwise make it part of the module. **Example:** The C header ``assert.h`` is an excellent candidate for a textual header, because it is meant to be included multiple times (possibly with different ``NDEBUG`` settings). However, declarations within it should typically be split into a separate modular header. .. parsed-literal::. module std [system] {; textual header ""assert.h""; }. A given header shall not be referenced by more than one *header-declaration*. Two *header-declaration*\s, or a *header-declaration* and a ``#include``, are; considered to refer to the same file if the paths resolve to the same file; and the specified *header-attr*\s (if any) match the attributes of that file,; even if the file is named differently (for instance, by a relative path or; via symlinks). .. note::; The use of *header-attr*\s avoids the need for Clang to speculatively; ``stat`` every header referenced by a module map. It is recommended that; *header-attr*\s only be used in machine-generated module maps, to avoid; mismatches between attribute values and the corresponding files. Umbrella directory declaration; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; An umbrella directory declaration specifies that all of the headers in the specified directory should be included within the module. .. parsed-literal::. *umbrella-dir-declaration*:; ``umbrella`` *string-liter",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:38126,assert,assert,38126,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['assert'],['assert']
Testability,"th a few simple extensions we've; covered in the last chapters, we have grown a real-ish language. With; this, we can do a lot of interesting things, including I/O, math, and a; bunch of other things. For example, we can now add a nice sequencing; operator (printd is defined to print out the specified value and a; newline):. ::. ready> extern printd(x);; Read extern:; declare double @printd(double). ready> def binary : 1 (x y) 0; # Low-precedence operator that ignores operands.; ...; ready> printd(123) : printd(456) : printd(789);; 123.000000; 456.000000; 789.000000; Evaluated to 0.000000. We can also define a bunch of other ""primitive"" operations, such as:. ::. # Logical unary not.; def unary!(v); if v then; 0; else; 1;. # Unary negate.; def unary-(v); 0-v;. # Define > with the same precedence as <.; def binary> 10 (LHS RHS); RHS < LHS;. # Binary logical or, which does not short circuit.; def binary| 5 (LHS RHS); if LHS then; 1; else if RHS then; 1; else; 0;. # Binary logical and, which does not short circuit.; def binary& 6 (LHS RHS); if !LHS then; 0; else; !!RHS;. # Define = with slightly lower precedence than relationals.; def binary = 9 (LHS RHS); !(LHS < RHS | LHS > RHS);. # Define ':' for sequencing: as a low-precedence operator that ignores operands; # and just returns the RHS.; def binary : 1 (x y) y;. Given the previous if/then/else support, we can also define interesting; functions for I/O. For example, the following prints out a character; whose ""density"" reflects the value passed in: the lower the value, the; denser the character:. ::. ready> extern putchard(char);; ...; ready> def printdensity(d); if d > 8 then; putchard(32) # ' '; else if d > 4 then; putchard(46) # '.'; else if d > 2 then; putchard(43) # '+'; else; putchard(42); # '*'; ...; ready> printdensity(1): printdensity(2): printdensity(3):; printdensity(4): printdensity(5): printdensity(9):; putchard(10);; **++.; Evaluated to 0.000000. Based on these simple primitive operations, we can start t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst:15391,log,logical,15391,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl06.rst,1,['log'],['logical']
Testability,"th a minimum number of; digits. .. code-block:: text. // Hex: 2; // HexMinDigits: 6; h1 = 0xABCDE;; h2 = 0xAB'CD'EF;. .. _JavaImportGroups:. **JavaImportGroups** (``List of Strings``) :versionbadge:`clang-format 8` :ref:`¶ <JavaImportGroups>`; A vector of prefixes ordered by the desired groups for Java imports. One group's prefix can be a subset of another - the longest prefix is; always matched. Within a group, the imports are ordered lexicographically.; Static imports are grouped separately and follow the same group rules.; By default, static imports are placed before non-static imports,; but this behavior is changed by another option,; ``SortJavaStaticImport``. In the .clang-format configuration file, this can be configured like; in the following yaml example. This will result in imports being; formatted as in the Java example below. .. code-block:: yaml. JavaImportGroups: ['com.example', 'com', 'org']. .. code-block:: java. import static com.example.function1;. import static com.test.function2;. import static org.example.function3;. import com.example.ClassA;; import com.example.Test;; import com.example.a.ClassB;. import com.test.ClassC;. import org.example.ClassD;. .. _JavaScriptQuotes:. **JavaScriptQuotes** (``JavaScriptQuoteStyle``) :versionbadge:`clang-format 3.9` :ref:`¶ <JavaScriptQuotes>`; The JavaScriptQuoteStyle to use for JavaScript strings. Possible values:. * ``JSQS_Leave`` (in configuration: ``Leave``); Leave string quotes as they are. .. code-block:: js. string1 = ""foo"";; string2 = 'bar';. * ``JSQS_Single`` (in configuration: ``Single``); Always use single quotes. .. code-block:: js. string1 = 'foo';; string2 = 'bar';. * ``JSQS_Double`` (in configuration: ``Double``); Always use double quotes. .. code-block:: js. string1 = ""foo"";; string2 = ""bar"";. .. _JavaScriptWrapImports:. **JavaScriptWrapImports** (``Boolean``) :versionbadge:`clang-format 3.9` :ref:`¶ <JavaScriptWrapImports>`; Whether to wrap JavaScript import/export statements. .. code-block::",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:80229,test,test,80229,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['test'],['test']
Testability,"th a single leading ``/`` removed.; %:S On Windows, %/S but a ``:`` is removed if its the second character.; Otherwise, %S but with a single leading ``/`` removed.; %:p On Windows, %/p but a ``:`` is removed if its the second character.; Otherwise, %p but with a single leading ``/`` removed.; %:t On Windows, %/t but a ``:`` is removed if its the second character.; Otherwise, %t but with a single leading ``/`` removed.; %:T On Windows, %/T but a ``:`` is removed if its the second character.; Otherwise, %T but with a single leading ``/`` removed.; ======================= ==============. Other substitutions are provided that are variations on this base set and; further substitution patterns can be defined by each test module. See the; modules :ref:`local-configuration-files`. More detailed information on substitutions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress info>`` field can be used to report progress information such; as (1/300) or can be empty, but even when empty the parentheses are required. Each test result may include additional (multiline) log information in the; following format:. .. code-block:: none. <log delineator> TEST '(<test name>)' <trailing delineator>; ... log message ...; <l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:22237,test,test,22237,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,"th bdnz, the loop would be a single dispatch group. ===-------------------------------------------------------------------------===. Lump the constant pool for each function into ONE pic object, and reference; pieces of it as offsets from the start. For functions like this (contrived; to have lots of constants obviously):. double X(double Y) { return (Y*1.23 + 4.512)*2.34 + 14.38; }. We generate:. _X:; lis r2, ha16(.CPI_X_0); lfd f0, lo16(.CPI_X_0)(r2); lis r2, ha16(.CPI_X_1); lfd f2, lo16(.CPI_X_1)(r2); fmadd f0, f1, f0, f2; lis r2, ha16(.CPI_X_2); lfd f1, lo16(.CPI_X_2)(r2); lis r2, ha16(.CPI_X_3); lfd f2, lo16(.CPI_X_3)(r2); fmadd f1, f0, f1, f2; blr. It would be better to materialize .CPI_X into a register, then use immediates; off of the register to avoid the lis's. This is even more important in PIC ; mode. Note that this (and the static variable version) is discussed here for GCC:; http://gcc.gnu.org/ml/gcc-patches/2006-02/msg00133.html. Here's another example (the sgn function):; double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. it produces a BB like this:; LBB1_1: ; cond_true; lis r2, ha16(LCPI1_0); lfs f0, lo16(LCPI1_0)(r2); lis r2, ha16(LCPI1_1); lis r3, ha16(LCPI1_2); lfs f2, lo16(LCPI1_2)(r3); lfs f3, lo16(LCPI1_1)(r2); fsub f0, f0, f1; fsel f1, f0, f2, f3; blr . ===-------------------------------------------------------------------------===. PIC Code Gen IPO optimization:. Squish small scalar globals together into a single global struct, allowing the ; address of the struct to be CSE'd, avoiding PIC accesses (also reduces the size; of the GOT on targets with one). Note that this is discussed here for GCC:; http://gcc.gnu.org/ml/gcc-patches/2006-02/msg00133.html. ===-------------------------------------------------------------------------===. Fold add and sub with constant into non-extern, non-weak addresses so this:. static int a;; void bar(int b) { a = b; }; void foo(unsigned char *c) {; *c = a;; }. So that . _foo:; lis r2, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/README.txt:2087,test,testf,2087,interpreter/llvm-project/llvm/lib/Target/PowerPC/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/PowerPC/README.txt,1,['test'],['testf']
Testability,"th position independent code. The; symptom is an error about cyclic dependencies. We recommend upgrading to a; newer version of Gold. Getting a Modern Host C++ Toolchain; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. This section mostly applies to Linux and older BSDs. On macOS, you should; have a sufficiently modern Xcode, or you will likely need to upgrade until you; do. Windows does not have a ""system compiler"", so you must install either Visual; Studio 2019 (or later), or a recent version of mingw64. FreeBSD 10.0 and newer; have a modern Clang as the system compiler. However, some Linux distributions and some other or older BSDs sometimes have; extremely old versions of GCC. These steps attempt to help you upgrade you; compiler even on such a system. However, if at all possible, we encourage you; to use a recent version of a distribution with a modern system compiler that; meets these requirements. Note that it is tempting to install a prior; version of Clang and libc++ to be the host compiler, however libc++ was not; well tested or set up to build on Linux until relatively recently. As; a consequence, this guide suggests just using libstdc++ and a modern GCC as the; initial host in a bootstrap, and then using Clang (and potentially libc++). The first step is to get a recent GCC toolchain installed. The most common; distribution on which users have struggled with the version requirements is; Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to install; the `toolchain testing PPA`_ and use it to install a modern GCC. There is; a really nice discussions of this on the `ask ubuntu stack exchange`_ and a; `github gist`_ with updated commands. However, not all users can use PPAs and; there are many other distributions, so it may be necessary (or just useful, if; you're here you *are* doing compiler development after all) to build and install; GCC from source. It is also quite easy to do these days. .. _toolchain testing PPA:; https://launchpad.net/~ubuntu-to",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:15751,test,tested,15751,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['tested']
Testability,"th the Python support provided by Spark and Dask.; - Add support for the following operations:; - `DefinePerSample`; - `HistoND`; - `Redefine`; - Make sure a user-provided `npartitions` parameter to a distributed RDataFrame constructor always takes precedence over the value computed by default.; - Improve support for friend trees in distributed executions, now any kind of friendship layout between the main tree and the friend tree(s) is expected to work.; - Add support for TChain data sources with no tree name and multiple different tree subnames.; - Creating a distributed RDataFrame with an in-memory-only tree is prohibited, thus such usage now raises an error at runtime. ## Histogram Libraries. - Implement the `SetStats` method for `TGraph` to turn ON or OFF the statistics box display; for an individual `TGraph`. - Use INT_MAX in TH classes instead of an arbitrary big number. - Implement option `AXIS`, to draw only axis, for TH2Poly. - The logic to Paint fit parameters for TGraph was not following the one implemented for; histograms. The v field described here was not working the same way. They are now implemente; the same way. - Implement the option X+ and Y+ for reverse axis on TGraph. - TGLAxisPainter silently modified the histogram's Z axis parameters. - Call automatically `Deflate` at drawing time of alphanumeric labels. It makes sense as; nobody wants to see extra blank labels. - The Confidence interval colors set by SetConfidenceIntervalColors (TRatioPlot) were inverted. - Add GetZaxis for THStack. - Fix Graph Errorbar Offsets for the new Marker Styles and thick markers. - When the palette width is bigger than the palette height, the palette; is automatically drawn horizontally. - THStack::GetXaxis->SetRange did not auto-zoom Yaxis range. - The Paint method of THStack always redrew the histograms in the sub-pads defined by the; THStack drawing option ""pads"". Like the ""pad dividing"" the ""histograms' drawing"" should be; done only the first time the THStack is",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md:12765,log,logic,12765,README/ReleaseNotes/v626/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v626/index.md,1,['log'],['logic']
Testability,"th this type metadata, we can now use the ``llvm.type.test`` intrinsic to; test whether a given pointer is compatible with a type identifier. Working; backwards, if ``llvm.type.test`` returns true for a particular pointer,; we can also statically determine the identities of the virtual functions; that a particular virtual call may call. For example, if a program assumes; a pointer to be a member of ``!""_ZST1A""``, we know that the address can; be only be one of ``_ZTV1A+16``, ``_ZTV1B+16`` or ``_ZTV1D+16`` (i.e. the; address points of the vtables of A, B and D respectively). If we then load; an address from that pointer, we know that the address can only be one of; ``&A::f``, ``&B::f`` or ``&D::f``. .. _address point: https://itanium-cxx-abi.github.io/cxx-abi/abi.html#vtable-general. Testing Addresses For Type Membership; =====================================. If a program tests an address using ``llvm.type.test``, this will cause; a link-time optimization pass, ``LowerTypeTests``, to replace calls to this; intrinsic with efficient code to perform type member tests. At a high level,; the pass will lay out referenced globals in a consecutive memory region in; the object file, construct bit vectors that map onto that memory region,; and generate code at each of the ``llvm.type.test`` call sites to test; pointers against those bit vectors. Because of the layout manipulation, the; globals' definitions must be available at LTO time. For more information,; see the `control flow integrity design document`_. A type identifier that identifies functions is transformed into a jump table,; which is a block of code consisting of one branch instruction for each; of the functions associated with the type identifier that branches to the; target function. The pass will redirect any taken function addresses to the; corresponding jump table entry. In the object file's symbol table, the jump; table entries take the identities of the original functions, so that addresses; taken outside th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst:5036,test,test,5036,interpreter/llvm-project/llvm/docs/TypeMetadata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TypeMetadata.rst,2,['test'],"['test', 'tests']"
Testability,"th very short (often purely numeric) names. What to do when bugpoint isn't enough; =====================================; 	; Sometimes, ``bugpoint`` is not enough. In particular, InstCombine and; TargetLowering both have visitor structured code with lots of potential; transformations. If the process of using bugpoint has left you with still too; much code to figure out and the problem seems to be in instcombine, the; following steps may help. These same techniques are useful with TargetLowering; as well. Turn on ``-debug-only=instcombine`` and see which transformations within; instcombine are firing by selecting out lines with ""``IC``"" in them. At this point, you have a decision to make. Is the number of transformations; small enough to step through them using a debugger? If so, then try that. If there are too many transformations, then a source modification approach may; be helpful. In this approach, you can modify the source code of instcombine to; disable just those transformations that are being performed on your test input; and perform a binary search over the set of transformations. One set of places; to modify are the ""``visit*``"" methods of ``InstCombiner`` (*e.g.*; ``visitICmpInst``) by adding a ""``return false``"" as the first line of the; method. If that still doesn't remove enough, then change the caller of; ``InstCombiner::DoOneIteration``, ``InstCombiner::runOnFunction`` to limit the; number of iterations. You may also find it useful to use ""``-stats``"" now to see what parts of; instcombine are firing. This can guide where to put additional reporting code. At this point, if the amount of transformations is still too large, then; inserting code to limit whether or not to execute the body of the code in the; visit function can be helpful. Add a static counter which is incremented on; every invocation of the function. Then add code which simply returns false on; desired ranges. For example:. .. code-block:: c++. static int calledCount = 0;; calledCount++;; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:9167,test,test,9167,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"thCore RIO); ROOT_ADD_GTEST(testTH2PolyGetNumberOfBins test_TH2Poly_GetNumberOfBins.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTHn THn.cxx LIBRARIES Hist Matrix MathCore RIO); ROOT_ADD_GTEST(testTH1 test_TH1.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTHStack test_THStack.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testProject3Dname test_Project3D_name.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTFormula test_TFormula.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTKDE test_tkde.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTH1FindFirstBinAbove test_TH1_FindFirstBinAbove.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_TEfficiency test_TEfficiency.cxx LIBRARIES Hist); ROOT_ADD_GTEST(TGraphMultiErrorsTests TGraphMultiErrorsTests.cxx LIBRARIES Hist RIO); ROOT_ADD_GTEST(test_TF123_Moments test_TF123_Moments.cxx LIBRARIES Hist); ROOT_ADD_GTEST(test_THBinIterator test_THBinIterator.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTMultiGraphGetHistogram test_TMultiGraph_GetHistogram.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testMapCppName test_MapCppName.cxx LIBRARIES Hist Gpad); ROOT_ADD_GTEST(testTGraphSorting test_TGraph_sorting.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testSpline test_spline.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF1Simple test_tf1_simple.cxx LIBRARIES Hist RIO). if(fftw3); ROOT_ADD_GTEST(testTF1 test_tf1.cxx LIBRARIES Hist); endif(). ROOT_ADD_GTEST(testTF2 test_tf2.cxx LIBRARIES Hist); ROOT_ADD_GTEST(testTF3 test_tf3.cxx LIBRARIES Hist). ROOT_ADD_GTEST(testTH1sa test_TH1_SaveAs.cxx LIBRARIES Hist). if(clad); ROOT_ADD_GTEST(TFormulaGradientTests TFormulaGradientTests.cxx LIBRARIES Core MathCore Hist); ROOT_ADD_GTEST(TFormulaHessianTests TFormulaHessianTests.cxx LIBRARIES Core MathCore Hist); endif(). # Regression test for https://github.com/root-project/root/issues/13691; # The test needs the following to be actually useful:; # - It must be compiled and run as a standalone executable, as it depends on; # gROOT not being initialized yet.; # - It must link to any library that is not in ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt:1466,test,testMapCppName,1466,hist/hist/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/hist/test/CMakeLists.txt,1,['test'],['testMapCppName']
Testability,"that belongs to it in; notes. *Defaults to false*. * ``CheckPointeeInitialization`` (boolean). If set to false, the checker will; not analyze the pointee of pointer/reference fields, and will only check; whether the object itself is initialized. *Defaults to false*. * ``IgnoreRecordsWithField`` (string). If supplied, the checker will not analyze; structures that have a field with a name or type name that matches the given; pattern. *Defaults to """"*. .. _optin-cplusplus-VirtualCall:. optin.cplusplus.VirtualCall (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check virtual function calls during construction or destruction. .. code-block:: cpp. class A {; public:; A() {; f(); // warn; }; virtual void f();; };. class A {; public:; ~A() {; this->f(); // warn; }; virtual void f();; };. .. _optin-mpi-MPI-Checker:. optin.mpi.MPI-Checker (C); """"""""""""""""""""""""""""""""""""""""""""""""""; Checks MPI code. .. code-block:: c. void test() {; double buf = 0;; MPI_Request sendReq1;; MPI_Ireduce(MPI_IN_PLACE, &buf, 1, MPI_DOUBLE, MPI_SUM,; 0, MPI_COMM_WORLD, &sendReq1);; } // warn: request 'sendReq1' has no matching wait. void test() {; double buf = 0;; MPI_Request sendReq;; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq);; MPI_Irecv(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Isend(&buf, 1, MPI_DOUBLE, 0, 0, MPI_COMM_WORLD, &sendReq); // warn; MPI_Wait(&sendReq, MPI_STATUS_IGNORE);; }. void missingNonBlocking() {; int rank = 0;; MPI_Comm_rank(MPI_COMM_WORLD, &rank);; MPI_Request sendReq1[10][10][10];; MPI_Wait(&sendReq1[1][7][9], MPI_STATUS_IGNORE); // warn; }. .. _optin-osx-cocoa-localizability-EmptyLocalizationContextChecker:. optin.osx.cocoa.localizability.EmptyLocalizationContextChecker (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check that NSLocalizedString macros include a comment for context. .. code-block:: objc. - (void)test {; NSString *string = NSLocalizedString(@""LocalizedString"", nil); // warn; NSString *string2 = NSLoca",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:17427,test,test,17427,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"that have been found into; a JSON file as follows:. .. code-block:: bash. $ opt -verify-debuginfo-preserve -verify-di-preserve-export=sample.json -pass-to-test sample.ll. and then use the ``llvm/utils/llvm-original-di-preservation.py`` script; to generate an HTML page with the issues reported in a more human readable form; as follows:. .. code-block:: bash. $ llvm-original-di-preservation.py sample.json sample.html. Testing of original debug info preservation can be invoked from front-end level; as follows:. .. code-block:: bash. # Test each pass.; $ clang -Xclang -fverify-debuginfo-preserve -g -O2 sample.c. # Test each pass and export the issues report into the JSON file.; $ clang -Xclang -fverify-debuginfo-preserve -Xclang -fverify-debuginfo-preserve-export=sample.json -g -O2 sample.c. Please do note that there are some known false positives, for source locations; and debug intrinsic checking, so that will be addressed as a future work. Mutation testing for MIR-level transformations; ----------------------------------------------. A variant of the ``debugify`` utility described in; :ref:`Mutation testing for IR-level transformations<IRDebugify>` can be used; for MIR-level transformations as well: much like the IR-level pass,; ``mir-debugify`` inserts sequentially increasing line locations to each; ``MachineInstr`` in a ``Module``. And the MIR-level ``mir-check-debugify`` is; similar to IR-level ``check-debugify`` pass. For example, here is a snippet before:. .. code-block:: llvm. name: test; body: |; bb.1 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF; %1:_(s32) = IMPLICIT_DEF; %2:_(s32) = G_CONSTANT i32 2; %3:_(s32) = G_ADD %0, %2; %4:_(s32) = G_SUB %3, %1. and after running ``llc -run-pass=mir-debugify``:. .. code-block:: llvm. name: test; body: |; bb.0 (%ir-block.0):; %0:_(s32) = IMPLICIT_DEF debug-location !12; DBG_VALUE %0(s32), $noreg, !9, !DIExpression(), debug-location !12; %1:_(s32) = IMPLICIT_DEF debug-location !13; DBG_VALUE %1(s32), $noreg, !11, !DIExpressio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:15667,test,testing,15667,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['testing']
Testability,"that need them. But the maintenance costs of such diverse ecosystem is non trivial, so we divide; the level of support in two tiers: core and peripheral, with two; different levels of impact and responsibilities. Those tiers refer only to the; main repository (``llvm-project``) and not the other repositories in our git; project, unless explicitly stated. Regardless of the tier, all code must follow the existing policies on quality,; reviews, style, etc. Core Tier; =========. The core tier encompasses all of the code in the main repository that is; in production, is actively tested and released in a regular schedule, including; core LLVM APIs and infrastructure, front/middle/back-ends, run-time libraries,; tools, etc. It is the responsibility of **every** LLVM developer to care for the core tier; regardless of where their work is applied to. What is covered; ---------------. The core tier is composed of:; * Core code (``llvm-project``) present in official releases and buildbots:; compiler, debugger, linker, libraries, etc, including infrastructure code; (table-gen, lit, file-check, unit-tests, etc).; * Build infrastructure that creates releases and buildbots (CMake, scripts).; * `Phabricator <https://github.com/llvm/phabricator>`_ and; `buildbot <https://github.com/llvm/llvm-zorg>`_ infrastructure.; * The `test-suite <https://github.com/llvm/llvm-test-suite>`_. Requirements; ------------. Code in this tier must:; * Keep official buildbots green, with warnings on breakages being emailed to; all affected developers. Those must be fixed as soon as possible or patches; must be reverted, as per review policy.; * Bit-rot of a component in the core tier will result in that component being; downgraded to the peripheral tier or being removed. Sub-communities can; avoid this by fixing all raised issues in a timely manner. Peripheral Tier; ===============. The peripheral tier encompass the parts of LLVM that cater to a specific; sub-community and which don't usually affect the c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:2396,test,tests,2396,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['tests']
Testability,"that space. Stack variables; work the same way, except that instead of being declared with global; variable definitions, they are declared with the `LLVM alloca; instruction <../../LangRef.html#alloca-instruction>`_:. .. code-block:: llvm. define i32 @example() {; entry:; %X = alloca i32 ; type of %X is i32*.; ...; %tmp = load i32, i32* %X ; load the stack value %X from the stack.; %tmp2 = add i32 %tmp, 1 ; increment it; store i32 %tmp2, i32* %X ; store it back; ... This code shows an example of how you can declare and manipulate a stack; variable in the LLVM IR. Stack memory allocated with the alloca; instruction is fully general: you can pass the address of the stack slot; to functions, you can store it in other variables, etc. In our example; above, we could rewrite the example to use the alloca technique to avoid; using a PHI node:. .. code-block:: llvm. @G = weak global i32 0 ; type of @G is i32*; @H = weak global i32 0 ; type of @H is i32*. define i32 @test(i1 %Condition) {; entry:; %X = alloca i32 ; type of %X is i32*.; br i1 %Condition, label %cond_true, label %cond_false. cond_true:; %X.0 = load i32, i32* @G; store i32 %X.0, i32* %X ; Update X; br label %cond_next. cond_false:; %X.1 = load i32, i32* @H; store i32 %X.1, i32* %X ; Update X; br label %cond_next. cond_next:; %X.2 = load i32, i32* %X ; Read X; ret i32 %X.2; }. With this, we have discovered a way to handle arbitrary mutable; variables without the need to create Phi nodes at all:. #. Each mutable variable becomes a stack allocation.; #. Each read of the variable becomes a load from the stack.; #. Each update of the variable becomes a store to the stack.; #. Taking the address of a variable just uses the stack address; directly. While this solution has solved our immediate problem, it introduced; another one: we have now apparently introduced a lot of stack traffic; for very simple and common operations, a major performance problem.; Fortunately for us, the LLVM optimizer has a highly-tuned optimiza",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:5699,test,test,5699,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['test']
Testability,"that you have a series of commits that; you have not posted for review, but can be adapted to update existing reviews. * git interactive rebase back to the first commit you want to upload for review::. git rebase -i HEAD~<number of commits you have written>. * Mark all commits for editing by changing ""pick"" to ""edit"" in the instructions; git shows.; * Start the rebase (usually by writing and closing the instructions).; * For the first commit:. - Upload the current commit for a review (with ``arc diff`` or the web; interface). - Continue to the next commit with ``git rebase --continue``. * For the rest:. - Add the ""Depends on..."" line using ``git commit --amend``. - Upload for review. - Continue the rebase. * Once the rebase is complete, you've created your patch series. .. _finding-potential-reviewers:. Finding potential reviewers; ---------------------------. Here are a couple of ways to pick the initial reviewer(s):. * Use ``git blame`` and the commit log to find names of people who have; recently modified the same area of code that you are modifying.; * Look in CODE_OWNERS.TXT to see who might be responsible for that area.; * If you've discussed the change on a dev list, the people who participated; might be appropriate reviewers. Even if you think the code owner is the busiest person in the world, it's still; okay to put them as a reviewer. Being the code owner means they have accepted; responsibility for making sure the review happens. Reviewing code with Phabricator; -------------------------------. Phabricator allows you to add inline comments as well as overall comments; to a revision. To add an inline comment, select the lines of code you want; to comment on by clicking and dragging the line numbers in the diff pane.; When you have added all your comments, scroll to the bottom of the page and; click the Submit button. You can add overall comments in the text box at the bottom of the page.; When you're done, click the Submit button. Phabricator has many usefu",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:8716,log,log,8716,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['log'],['log']
Testability,"the CL-compatible Clang driver. ``%clangxx``; Invokes the G++-compatible Clang driver. ``%clang_cc1``; Invokes the Clang frontend. ``%itanium_abi_triple``, ``%ms_abi_triple``; These substitutions can be used to get the current target triple adjusted to; the desired ABI. For example, if the test suite is running with the; ``i686-pc-win32`` target, ``%itanium_abi_triple`` will expand to; ``i686-pc-mingw32``. This allows a test to run with a specific ABI without; constraining it to a specific triple. **FileCheck-specific substitutions:**. ``%ProtectFileCheckOutput``; This should precede a ``FileCheck`` call if and only if the call's textual; output affects test results. It's usually easy to tell: just look for; redirection or piping of the ``FileCheck`` call's stdout or stderr. .. _Test-specific substitutions:. **Test-specific substitutions:**. Additional substitutions can be defined as follows:. - Lit configuration files (e.g., ``lit.cfg`` or ``lit.local.cfg``) can define; substitutions for all tests in a test directory. They do so by extending the; substitution list, ``config.substitutions``. Each item in the list is a tuple; consisting of a pattern and its replacement, which lit applies using python's; ``re.sub`` function.; - To define substitutions within a single test file, lit supports the; ``DEFINE:`` and ``REDEFINE:`` directives, described in detail below. So that; they have no effect on other test files, these directives modify a copy of the; substitution list that is produced by lit configuration files. For example, the following directives can be inserted into a test file to define; ``%{cflags}`` and ``%{fcflags}`` substitutions with empty initial values, which; serve as the parameters of another newly defined ``%{check}`` substitution:. .. code-block:: llvm. ; DEFINE: %{cflags} =; ; DEFINE: %{fcflags} =. ; DEFINE: %{check} = \; ; DEFINE: %clang_cc1 -verify -fopenmp -fopenmp-version=51 %{cflags} \; ; DEFINE: -emit-llvm -o - %s | \; ; DEFINE: FileCheck %{fcfla",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:28735,test,tests,28735,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,"the Factory, but with the; option ""AnalysisType"" in the Factory. The default value is; ""Auto"" where TMVA tries to determine the most suitable analysis; type from the targets and classes the user has defined. Other; values are ""regression"", ""classification"" and ""multiclass"" for; the forthcoming multiclass classification.; Missing regression evaluation plots for training sample were; added. On Cut method:. Removed obsolete option ""FVerySmart"" from Cuts method. On MLP method:; ; Display of convergence information in the progress bar for MLP during training. Creation of animated gifs for MLP convergence monitoring (please; contact authors if you want to do this). On Datasets: . Checks are performed if events are unvoluntarily cut by using a; non-filled array entry (e.g. ""arr[4]"" is used, when the array; has not always at least 5 entries). A warning is given in that; case.; Bug fixes. Spectators and Targets could not be used with by-hand assignment of events.; Corrected types (training/testing) for assigning single events.; Changed message from FATAL to WARNING when the user requests more events for ; training or testing than available.; Fixed bug which caused TMVA to crash if the number of input variables exceeded ; the allowed maximum for generating scatter plots.; Prevent TMVA from crashing when running with an empty TTree or TChain.; A variable expression like ""Alt$(arr[3],0)"" can now be used; to give a default value for a variable if for some events the; array don't contain enough elements (e.g. in two jet events,; sometimes only one jet is found and thus, the array jetPt[] has; only one entry in that cases).; Plot ranges for scatter-plots showing the transformed events are now correct.; User defined training/testing-trees are now handled correctly.; Fix bug in correlation computation for regression.; Consistent use of variable labels (for the log output) and variable titles (in histograms).; Drawing of variable labels in network architecture display for regression m",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html:2963,test,testing,2963,tmva/doc/v526/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/doc/v526/index.html,1,['test'],['testing']
Testability,"the LLVM testing; infrastructure, the tools needed to use it, and how to add and run; tests. Requirements; ============. In order to use the LLVM testing infrastructure, you will need all of the; software required to build LLVM, as well as `Python <http://python.org>`_ 3.6 or; later. LLVM Testing Infrastructure Organization; ========================================. The LLVM testing infrastructure contains three major categories of tests:; unit tests, regression tests and whole programs. The unit tests and regression; tests are contained inside the LLVM repository itself under ``llvm/unittests``; and ``llvm/test`` respectively and are expected to always pass -- they should be; run before every commit. The whole programs tests are referred to as the ""LLVM test suite"" (or; ""test-suite"") and are in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_.; For historical reasons, these tests are also referred to as the ""nightly; tests"" in places, which is less ambiguous than ""test-suite"" and remains; in use although we run them much more often than nightly. Unit tests; ----------. Unit tests are written using `Google Test <https://github.com/google/googletest/blob/master/docs/primer.md>`_; and `Google Mock <https://github.com/google/googletest/blob/master/docs/gmock_for_dummies.md>`_; and are located in the ``llvm/unittests`` directory.; In general unit tests are reserved for targeting the support library and other; generic data structure, we prefer relying on regression tests for testing; transformations and analysis on the IR. Regression tests; ----------------. The regression tests are small pieces of code that test a specific; feature of LLVM or trigger a specific bug in LLVM. The language they are; written in depends on the part of LLVM being tested. These tests are driven by; the :doc:`Lit <CommandGuide/lit>` testing tool (which is part of LLVM), and; are located in the ``llvm/test`` directory. Typically when a bug is found in LLV",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:1248,test,tests,1248,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,3,['test'],"['test-suite', 'tests']"
Testability,"the Neyman Construction was added in this; release. The NeymanConstruction is a concrete implementation of the; IntervalCalculator interface, but it needs several; additional components�to be specified before use. The design; factorizes the choice of the parameter points to be tested,�the choice of; the test statistic, and the generation of sampling distribution into; separate parts (described above). �Finally, the NeymanConstruction class; is simply in charge of using these parts (strategies) and constructing; the confidence belt and confidence intervals. �The ConfidenceBelt class; is still under development, but the current version works fine for; producing ConfidenceIntervals. �We are also working to make this class; work with parallelization approaches, which is not yet complete.; The FeldmanCousins class is a separate concrete implementation of the; IntervalCalculator interface. �It uses the NeymanConstruction internally,; and�enforces�specific choices of the test statistic and ordering; principle to realize the Unified intervals described by Feldman and; Cousins in their paper�Phys.Rev.D57:3873-3889,1998. In an extension to the technique discussed in Feldman and Cousins paper,; the FeldmanCousins class also performs a ""profile construction"" if their are nuisance parameters.; In this case, the parameters of interest are scanned in a regular grid. For each point in the grid; the calculator finds the best fit value of the nuisance parameters (given the data). The construction; is then only performed in this subspace of the parameters. As a result, the number of points in the; construction only scales in the number of parameters of interest, not in the number of nuisance parameters. Markov Chain Monte Carlo Interval; A flexible framework for Markov Chain Monte Carlo was added in this; release. The MCMCCalculator is a concrete implementation of the; IntervalCalculator interface. To use it one needs to specify the ProposalFunction.; There is a base class for Proposal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html:28714,test,test,28714,roofit/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v524/index.html,1,['test'],['test']
Testability,"the TMVA DNN Reference Implementation. Support now only CPU and GPU implementations. . ## 2D Graphics Libraries; - The method TColor::InvertPalette inverts the current palette. The top color becomes; bottom and vice versa. This was [suggested by Karl Smith](https://root-forum.cern.ch/t/inverted-color-palettes/24826/2).; - New method `TColor::SetColorThreshold(Float_t t)` to specify the color; threshold used by GetColor to retrieve a color.; - Improvements in candle plots:; - LogZ for violins; - scaling of candles and violins with respect to each other; - static functions for WhiskerRange and BoxRange; - In some case it was not possible to zoom a 1D histogram using the mouse; on the X axis. This was described; [here](https://root-forum.cern.ch/t/axis-blocked-when-overlaying-two-histograms/25326); - When drawing an histogram with option ""BOX"" with log scale along the Z axis; the bins were not visible in some case. This was described; [here](https://root-forum.cern.ch/t/set-logscale-on-z-axis-in-2d-histo/25385).; - When a TGraph2D was plotted with the option ""PCOLZ"" with a log scale along the; Z axis, there was a mismatch between the markers' colors and the color palette; displayed. It is now fixed. It was reported; [here](https://sft.its.cern.ch/jira/browse/ROOT-8200).; - It is now possible to set the titles and the axis ranges of a TMultiGraph drawn as 3D lines.; - Implement the option ""Z"" (to draw the palette) for 3D histograms drawn with; the option ""BOX2"".; - With the option `HBAR` the histogram grid was painted over the stat box.; - The `TGraph`'s options ""F"" and ""L"" respectively draw a filled polygon and; a line plot. They can be combined when calling `TGraph::Draw`. Doing that; produced a filled polygon only. Now it produces a filled polygon and a line plot.; - `TH1::SetOption()` method didn't work when called from `TH3D` instance.; - With the Cocoa backend on Mac the png image were truncated when ROOT was running; in a small screen attached to the Mac with the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:20235,log,logscale-on-z-axis-in-,20235,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['log'],['logscale-on-z-axis-in-']
Testability,"the `draw` function:. ```javascript; import { draw } from 'https://root.cern/js/latest/modules/main.mjs';; draw(""drawing"", obj, ""colz"");; ```. The first argument is the id of the HTML div element, where drawing will be performed. The second argument is the object to draw and the third one is the drawing option. Here is complete [running example](https://root.cern/js/latest/api.htm#custom_html_read_json) ans [source code](https://github.com/root-project/jsroot/blob/master/demo/read_json.htm):. ```javascript; import { httpRequest, draw, redraw, resize, cleanup } from 'https://root.cern/js/latest/modules/main.mjs';; let filename = ""https://root.cern/js/files/th2ul.json.gz"";; let obj = await httpRequest(filename, 'object');; draw(""drawing"", obj, ""lego"");; ```. In very seldom cases one need to access painter object, created in `draw()` function. This can be done via; handling Promise results like:. ```javascript; let painter = await draw(""drawing"", obj, ""colz"");; console.log('Object type in painter', painter.getClassName());; ```. One is also able to update the drawing with a new version of the object:. ```javascript; // after some interval request object again; redraw(""drawing"", obj2, ""colz"");; ```. The `redraw` function will call `draw` if the drawing was not performed before. In the case when changing of HTML layout leads to resize of element with JSROOT drawing,; one should call `resize()` to let JSROOT adjust drawing size. One should do:. ```javascript; resize(""drawing"");; ```. As second argument one could specify exact size for draw elements like:. ```javascript; resize(""drawing"", { width: 500, height: 200 });; ```. To correctly cleanup JSROOT drawings from HTML element, one should call:. ```javascript; cleanup(""drawing"");; ```. ### File API. JSROOT defines the TFile class, which can be used to access binary ROOT files.; One should always remember that all I/O operations are asynchronous in JSROOT.; Therefore promises are used to retrieve results when the I/O opera",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md:38925,log,log,38925,documentation/JSROOT/JSROOT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/JSROOT/JSROOT.md,1,['log'],['log']
Testability,"the constant; value your expression produces can change from one instantiation to the; next), instantiation dependence (i.e., a template parameter occurs; anywhere in your expression), and whether your expression contains a; parameter pack (for variadic templates). Often, computing these flags; just means combining the results from the various types and; subexpressions.; * Add ``TransformXXX`` and ``RebuildXXX`` functions to the ``TreeTransform``; class template in ``Sema``. ``TransformXXX`` should (recursively); transform all of the subexpressions and types within your expression,; using ``getDerived().TransformYYY``. If all of the subexpressions and; types transform without error, it will then call the ``RebuildXXX``; function, which will in turn call ``getSema().BuildXXX`` to perform; semantic analysis and build your expression.; * To test template instantiation, take those tests you wrote to make sure; that you were type checking with type-dependent expressions and dependent; types (from step #2) and instantiate those templates with various types,; some of which type-check and some that don't, and test the error messages; in each case. #. There are some ""extras"" that make other features work better. It's worth; handling these extras to give your expression complete integration into; Clang:. * Add code completion support for your expression in; ``SemaCodeComplete.cpp``.; * If your expression has types in it, or has any ""interesting"" features; other than subexpressions, extend libclang's ``CursorVisitor`` to provide; proper visitation for your expression, enabling various IDE features such; as syntax highlighting, cross-referencing, and so on. The; ``c-index-test`` helper program can be used to test these features. Testing; -------; All functional changes to Clang should come with test coverage demonstrating; the change in behavior. .. _verifying-diagnostics:. Verifying Diagnostics; ^^^^^^^^^^^^^^^^^^^^^; Clang ``-cc1`` supports the ``-verify`` command line option",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:153482,test,test,153482,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,3,['test'],"['test', 'tests']"
Testability,"the debug use of ``%c`` is preserved:. .. code-block:: llvm. define i16 @foo(i16 %a) {; %simplified = and i16 %a, 15; call void @llvm.dbg.value(metadata i16 %simplified, ...); ret i16 %simplified; }. You may have noticed that ``%simplified`` is narrower than ``%c``: this is not; a problem, because ``llvm::replaceAllDbgUsesWith`` takes care of inserting the; necessary conversion operations into the DIExpressions of updated debug uses. Deleting a MIR-level MachineInstr; ---------------------------------. TODO. Rules for updating ``DIAssignID`` Attachments; =============================================. ``DIAssignID`` metadata attachments are used by Assignment Tracking, which is; currently an experimental debug mode. See :doc:`AssignmentTracking` for how to update them and for more info on; Assignment Tracking. How to automatically convert tests into debug info tests; ========================================================. .. _IRDebugify:. Mutation testing for IR-level transformations; ---------------------------------------------. An IR test case for a transformation can, in many cases, be automatically; mutated to test debug info handling within that transformation. This is a; simple way to test for proper debug info handling. The ``debugify`` utility pass; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. The ``debugify`` testing utility is just a pair of passes: ``debugify`` and; ``check-debugify``. The first applies synthetic debug information to every instruction of the; module, and the second checks that this DI is still available after an; optimization has occurred, reporting any errors/warnings while doing so. The instructions are assigned sequentially increasing line locations, and are; immediately used by debug value intrinsics everywhere possible. For example, here is a module before:. .. code-block:: llvm. define void @f(i32* %x) {; entry:; %x.addr = alloca i32*, align 8; store i32* %x, i32** %x.addr, align 8; %0 = load i32*, i32** %x.addr, align 8; store i32 10, i32* %0,",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst:9295,test,testing,9295,interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToUpdateDebugInfo.rst,1,['test'],['testing']
Testability,"the following procedure:. #. Remind developers that the release branching is imminent and to refrain from; committing patches that might break the build. E.g., new features, large; patches for works in progress, an overhaul of the type system, an exciting; new TableGen feature, etc. #. Verify that the current git trunk is in decent shape by; examining nightly tester and buildbot results. #. Bump the version in trunk to N.0.0git and tag the commit with llvmorg-N-init.; If ``X`` is the version to be released, then ``N`` is ``X + 1``. ::. $ git tag -sa llvmorg-N-init. #. Clear the release notes in trunk. #. Create the release branch from the last known good revision from before the; version bump. The branch's name is release/X.x where ``X`` is the major version; number and ``x`` is just the letter ``x``. #. On the newly-created release branch, immediately bump the version; to X.1.0git (where ``X`` is the major version of the branch.). #. All tags and branches need to be created in both the llvm/llvm-project and; llvm/llvm-test-suite repos. Update LLVM Version; ^^^^^^^^^^^^^^^^^^^. After creating the LLVM release branch, update the release branches'; version with the script in ``llvm/utils/release/bump-version.py``. Tagging the LLVM Release Candidates; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Tag release candidates:. ::. $ git tag -sa llvmorg-X.Y.Z-rcN. The Release Manager must supply pre-packaged source tarballs for users. This can; be done with the export.sh script in utils/release. Tarballs, release binaries, or any other release artifacts must be uploaded to; GitHub. This can be done using the github-upload-release.py script in utils/release. ::. $ github-upload-release.py upload --token <github-token> --release X.Y.Z-rcN --files <release_files>. ::. $ ./export.sh -release X.Y.Z -rc $RC. This will generate source tarballs for each LLVM project being validated, which; can be uploaded to github for further testing. Build The Binary Distribution; ^^^^^^^^^^^^^^^^^^^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst:4574,test,test-suite,4574,interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToReleaseLLVM.rst,1,['test'],['test-suite']
Testability,the handler for a function-try-block of a constructor or destructor; for that object results in undefined behavior.; Source: C++11 15.3p10. void f() { throw 1; }. class C {; int i;; public :; C(); try {; f();; }; catch (...) {; i=2; // warn; }; };. void f() { throw 1; }. class Base {; public:; int i;; };. class C: public Base {; public :; ~C() try {; f();; }; catch (...) {; i=2; // warn; }; };. undefbehavior.ReturnAtCatchEnd; (C++); Undefined behavior: a function returns when control reaches the end of a; handler. This results in undefined behavior in a value-returning function.; Source: C++11 15.3p10. void f() { throw 1; }. int test() try {; f();; return 1;; }; catch(int) {; } // warn. undefbehavior.AutoptrsOwnSameObj; (C++03); Undefined behavior: if more than one auto_ptr owns the same object; at the same time the behavior of the program is undefined.; Source: C++03 20.4.5p3; C++11 auto_ptr is deprecated; (D.10). #include <memory>. void test() {; int *data = new int;; std::auto_ptr<int> p(data);; std::auto_ptr<int> q(data); // warn; }. undefbehavior.BasicStringOutOfBound; (C++03); Undefined behavior: out-of-bound basic_string access/modification.; Note: possibly an enhancement to ; alpha.security.ArrayBoundV2.; Source: C++03 21.3.4p1; C++11 behavior is defined; (21.4.5p2). #include <string>. void test() {; std::basic_string<char> s;; char c = s[10]; // warn; }. #include <string>. void test() {; std::basic_string<char> s;; s[10] = 0; // warn; }. undefbehavior.EosDereference; (C++); Undefined behavior: the result of operator*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:13443,test,test,13443,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"the left most base class. Schema Evolution. Fix schema evolution problem in TTree::Draw by extending support in; TStreamerInfo::ReadValueAux to 'converted' numerical types, (; see issue in ROOT forum). When reading more than one TStreamerInfo for the same versioned; class, we now use the highest possible class version as the current; version of the class. Practically, we update the class version; when reading new (higher versioned) StreamerInfo until the Class; is actually used (i.e. TClass::GetClassVersion is call directly; or indirectly). In particular, if a file has several StreamerInfos for the same; versioned class, we will use the highest version number as the; 'current' class version (as opposed to the lowest until now). For backward compatibility TStreamerInfo::BuildCheck compares the checksum of; the on-file StreamerInfo not only to the current value of the class checksum; but also to the checksum calculated using the older algorithms. This patch extends this test to also be done when comparing 2 on-file StreamerInfos. This removes spurrious warning message when loading 2 older files which; were written with 2 different version of the TClass CheckSum algorithm; (and the in-memory class's version is greater than both TStreamerInfos'; class version). Extend support of TStreamerInfo::ReadValueAux to 'converted' numerical types, hence solving TTree::Draw's schema evolution problem (see http://root.cern/phpBB2/viewtopic.php?t=6225). DirectoryAutoAdd; Use the new DirectoryAutoAdd facility for the classes:; TTree, TH1, TEventList, TEntryList, TGraph2D; (and hence their derived classes). The instances of those classes are now added automatically; to the current directory only when Constructe'd with arguments or Clone'd; and to the directory they are read from when their are stored; directly in a TKey. [Note: the default constructor never adds; the object to the current directory]. The directory auto add can still be disabled for instance; of TH1 and TGraph2D by sett",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html:1931,test,test,1931,io/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/io/doc/v520/index.html,1,['test'],['test']
Testability,"the main one being that some compilers might not; understand the assertion, or warn about a missing return in builds where; assertions are compiled out. Today, we have something much better: ``llvm_unreachable``:. .. code-block:: c++. llvm_unreachable(""Invalid radix for integer literal"");. When assertions are enabled, this will print the message if it's ever reached; and then exit the program. When assertions are disabled (i.e. in release; builds), ``llvm_unreachable`` becomes a hint to compilers to skip generating; code for this branch. If the compiler does not support this, it will fall back; to the ""abort"" implementation. Use ``llvm_unreachable`` to mark a specific point in code that should never be; reached. This is especially desirable for addressing warnings about unreachable; branches, etc., but can be used whenever reaching a particular code path is; unconditionally a bug (not originating from user input; see below) of some kind.; Use of ``assert`` should always include a testable predicate (as opposed to; ``assert(false)``). If the error condition can be triggered by user input then the; recoverable error mechanism described in :doc:`ProgrammersManual` should be; used instead. In cases where this is not practical, ``report_fatal_error`` may; be used. Another issue is that values used only by assertions will produce an ""unused; value"" warning when assertions are disabled. For example, this code will warn:. .. code-block:: c++. unsigned Size = V.size();; assert(Size > 42 && ""Vector smaller than it should be"");. bool NewToSet = Myset.insert(Value);; assert(NewToSet && ""The value shouldn't be in the set yet"");. These are two interesting different cases. In the first case, the call to; ``V.size()`` is only useful for the assert, and we don't want it executed when; assertions are disabled. Code like this should move the call into the assert; itself. In the second case, the side effects of the call must happen whether; the assert is enabled or not. In this case, t",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst:47399,assert,assert,47399,interpreter/llvm-project/llvm/docs/CodingStandards.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CodingStandards.rst,3,"['assert', 'test']","['assert', 'testable']"
Testability,"the main repository don't always have; rigorous testing like the core parts, nor are they validated and shipped with; our public upstream releases. Even not being a core part of the project, we have enough sub-communities; needing those changes with enough overlap that having them in the main; repository is beneficial to minimise the repetition of those changes in all; the external repositories that need them. But the maintenance costs of such diverse ecosystem is non trivial, so we divide; the level of support in two tiers: core and peripheral, with two; different levels of impact and responsibilities. Those tiers refer only to the; main repository (``llvm-project``) and not the other repositories in our git; project, unless explicitly stated. Regardless of the tier, all code must follow the existing policies on quality,; reviews, style, etc. Core Tier; =========. The core tier encompasses all of the code in the main repository that is; in production, is actively tested and released in a regular schedule, including; core LLVM APIs and infrastructure, front/middle/back-ends, run-time libraries,; tools, etc. It is the responsibility of **every** LLVM developer to care for the core tier; regardless of where their work is applied to. What is covered; ---------------. The core tier is composed of:; * Core code (``llvm-project``) present in official releases and buildbots:; compiler, debugger, linker, libraries, etc, including infrastructure code; (table-gen, lit, file-check, unit-tests, etc).; * Build infrastructure that creates releases and buildbots (CMake, scripts).; * `Phabricator <https://github.com/llvm/phabricator>`_ and; `buildbot <https://github.com/llvm/llvm-zorg>`_ infrastructure.; * The `test-suite <https://github.com/llvm/llvm-test-suite>`_. Requirements; ------------. Code in this tier must:; * Keep official buildbots green, with warnings on breakages being emailed to; all affected developers. Those must be fixed as soon as possible or patches; must be reve",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst:1874,test,tested,1874,interpreter/llvm-project/llvm/docs/SupportPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SupportPolicy.rst,1,['test'],['tested']
Testability,"the movb+andb+movzbl sequence. //===---------------------------------------------------------------------===//. For the following:; struct u1 {; float x, y;; };; float foo(struct u1 u) {; return u.x + u.y;; }. We currently generate:; 	movdqa	%xmm0, %xmm1; 	pshufd	$1, %xmm0, %xmm0 # xmm0 = xmm0[1,0,0,0]; 	addss	%xmm1, %xmm0; 	ret. We could save an instruction here by commuting the addss. //===---------------------------------------------------------------------===//. This (from PR9661):. float clamp_float(float a) {; if (a > 1.0f); return 1.0f;; else if (a < 0.0f); return 0.0f;; else; return a;; }. Could compile to:. clamp_float: # @clamp_float; movss .LCPI0_0(%rip), %xmm1; minss %xmm1, %xmm0; pxor %xmm1, %xmm1; maxss %xmm1, %xmm0; ret. with -ffast-math. //===---------------------------------------------------------------------===//. This function (from PR9803):. int clamp2(int a) {; if (a > 5); a = 5;; if (a < 0) ; return 0;; return a;; }. Compiles to:. _clamp2: ## @clamp2; pushq %rbp; movq %rsp, %rbp; cmpl $5, %edi; movl $5, %ecx; cmovlel %edi, %ecx; testl %ecx, %ecx; movl $0, %eax; cmovnsl %ecx, %eax; popq %rbp; ret. The move of 0 could be scheduled above the test to make it is xor reg,reg. //===---------------------------------------------------------------------===//. GCC PR48986. We currently compile this:. void bar(void);; void yyy(int* p) {; if (__sync_fetch_and_add(p, -1) == 1); bar();; }. into:; 	movl	$-1, %eax; 	lock; 	xaddl	%eax, (%rdi); 	cmpl	$1, %eax; 	je	LBB0_2. Instead we could generate:. 	lock; 	dec %rdi; 	je LBB0_2. The trick is to match ""fetch_and_add(X, -C) == C"". //===---------------------------------------------------------------------===//. unsigned t(unsigned a, unsigned b) {; return a <= b ? 5 : -5;; }. We generate:; 	movl	$5, %ecx; 	cmpl	%esi, %edi; 	movl	$-5, %eax; 	cmovbel	%ecx, %eax. GCC:; 	cmpl	%edi, %esi; 	sbbl	%eax, %eax; 	andl	$-10, %eax; 	addl	$5, %eax. //===---------------------------------------------------------------------===//; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:42434,test,testl,42434,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,2,['test'],"['test', 'testl']"
Testability,"the original user source code. Supported object file formats include; ELF, Mach-O, PDB and COFF. The **logical view** abstracts the complexity associated with the; different low-level representations of the debugging information that; is embedded in the object file. :program:`llvm-debuginfo-analyzer`; produces a canonical view of the debug information regardless of how it; is formatted. The same logical view will be seen regardless of object; file format, assuming the debug information correctly represents the; same original source code. The logical view includes the following **logical elements**: *type*,; *scope*, *symbol* and *line*, which are the basic software elements used; in the C/C++ programming language. Each logical element has a set of; **attributes**, such as *types*, *classes*, *functions*, *variables*,; *parameters*, etc. The :option:`--attribute` can be used to specify which; attributes to include when printing a logical element. A logical element; may have a **kind** that describes specific types of elements. For; instance, a *scope* could have a kind value of *function*, *class*,; *namespace*. :program:`llvm-debuginfo-analyzer` defaults to print a pre-defined; layout of logical elements and attributes. The command line options can; be used to control the printed elements (:option:`--print`), using a; specific layout (:option:`--report`), matching a given pattern; (:option:`--select`, :option:`--select-offsets`). Also, the output can; be limited to specified logical elements using (:option:`--select-lines`,; :option:`--select-scopes`, :option:`--select-symbols`,; :option:`--select-types`). :program:`llvm-debuginfo-analyzer` can also compare a set of logical; views (:option:`--compare`), to find differences and identify possible; debug information syntax issues (:option:`--warning`) in any object file. OPTIONS; -------; :program:`llvm-debuginfo-analyzer` options are separated into several; categories, each tailored to a different purpose:. * :ref:`ge",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:1531,log,logical,1531,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"the results one can simply use; operator[] returning a TString. New tutorial regexp_pme.C. Meta. Add a new TClass interface to be able to trigger the ""auto addition of object; to a TDirectory object"". If a class has a member function:; DirectoryAutoAdd(TDirectory*); it will now be accessible (when the dictionary is generated via rootcint; for now) via TClass::GetDirectoryAutoAdd which return a wrapper with the; signature:; void (*)(void *this_obj,TDirectory *where_to_add). Extend #pragma create TClass; to namespaces.; Enable autoloading of the cintdlls.; rlibmap now handles #pragma create TClass; statements. Cont. Support for std algorithms and iterators for ROOT collection classes by Anar.; The background is the following. While working on the PROOF code I found; that enumerating TList is an inconvenient and a long operation, I had to; write the same code all over the place and make duplications. I tried; to use STD algorithms with it, namely std::for_each, and failed.; I therefore decided to enable std::for_each algorithm for ROOT; Containers/Iterators by making as few as possible changes, without rewriting; iterators at all. Now with only two simple lines of code one is able to; iterate through a container:. TIter iter(&list);; for_each(iter.Begin(), TIter::End(), SEnumFunctor());. or. for_each(iter.Begin(), inter_end, SEnumFunctor());. where iter_end could be an iterator to a middle of the container. After I had changed Iterators so that they could be used with std::for_each,; I decided to go further and did some more changes. As a result,. I have updated CINT implementation of some algorithms (they look now; more or less better in terms of the standard),. All collections can be now used with std::for_each, std::find_if,; std::count_if (probably with some more algorithms. I've listed here; only what has been *checked* by me). A test program has been added: $ROOTSYS/test/stressIterators.cxx. A tutorial macro has been added: $ROOTSYS/tutorials/cont/TListAndSTL.C. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/doc/v520/index.html:4793,test,test,4793,core/doc/v520/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/doc/v520/index.html,2,['test'],['test']
Testability,"the same (and often large) header files to be included by multiple; source files. Consequently, compile times can often be greatly improved; by caching some of the (redundant) work done by a compiler to process; headers. Precompiled header files, which represent one of many ways to; implement this optimization, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometime",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:46887,test,test,46887,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"the same; container are expected. void bad_insert3(std::vector &v1, std::vector &v2) {; v2.insert(v1.cbegin(), v2.cbegin(), v2.cend()); // warn: container accessed; // using foreign; // iterator argument; v1.insert(v1.cbegin(), v1.cbegin(), v2.cend()); // warn: iterators of; // different containers; // used where the same; // container is; // expected; v1.insert(v1.cbegin(), v2.cbegin(), v1.cend()); // warn: iterators of; // different containers; // used where the same; // container is; // expected; }. alpha.cplusplus.Move; (C++); Method calls on a moved-from object and copying a moved-from object will be; reported. struct A {; void foo() {}; };. void f() {; A a;; A b = std::move(a); // note: 'a' became 'moved-from' here; a.foo(); // warn: method call on a 'moved-from' object 'a'; }. Dead Code Alpha Checkers. Name, DescriptionExample. alpha.deadcode.UnreachableCode; (C, C++, ObjC); Check unreachable code. // C; int test() {; int x = 1;; while(x);; return x; // warn; }. // C++; void test() {; int a = 2;. while (a > 1); a--;. if (a > 1); a++; // warn; }. // Objective-C; void test(id x) {; return;; [x retain]; // warn; }. LLVM Checkers. Name, DescriptionExample. alpha.llvm.Conventions; (C); Check code for LLVM codebase conventions:. A StringRef should not be bound to a temporary std::string; whose lifetime is shorter than the StringRef's.; Clang AST nodes should not have fields that can allocate memory. OS X Alpha Checkers. Name, DescriptionExample. alpha.osx.cocoa.DirectIvarAssignment; (ObjC); Check that Objective C properties follow the following rule: the property; should be set with the setter, not though a direct assignment. @interface MyClass : NSObject {}; @property (readonly) id A;; - (void) foo;; @end. @implementation MyClass; - (void) foo {; _A = 0; // warn; }; @end. alpha.osx.cocoa.DirectIvarAssignmentForAnnotatedFunctions; (ObjC); Check for direct assignments to instance variables in the methods annotated; with objc_no_direct_instance_variable_assignment. @i",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:6648,test,test,6648,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"the; maximum number of compile/link jobs running at the same time. * ``cmake --build build [--target <target>]`` or the build system specified; above directly. * The default target (i.e. ``cmake --build build`` or ``make -C build``); will build all of LLVM. * The ``check-all`` target (i.e. ``ninja check-all``) will run the; regression tests to ensure everything is in working order. * CMake will generate build targets for each tool and library, and most; LLVM sub-projects generate their own ``check-<project>`` target. * Running a serial build will be **slow**. To improve speed, try running a; parallel build. That's done by default in Ninja; for ``make``, use the; option ``-j NN``, where ``NN`` is the number of parallel jobs, e.g. the; number of available CPUs. * A basic CMake and build/test invocation which only builds LLVM and no other; subprojects:. ``cmake -S llvm -B build -G Ninja -DCMAKE_BUILD_TYPE=Debug``. ``ninja -C build check-llvm``. This will setup an LLVM build with debugging info, then compile LLVM and; run LLVM tests. * For more detailed information on CMake options, see `CMake <CMake.html>`__. * If you get build or test failures, see `below`_. Consult the `Getting Started with LLVM`_ section for detailed information on; configuring and compiling LLVM. Go to `Directory Layout`_ to learn about the; layout of the source code tree. Stand-alone Builds; ------------------. Stand-alone builds allow you to build a sub-project against a pre-built; version of the clang or llvm libraries that is already present on your; system. You can use the source code from a standard checkout of the llvm-project; (as described above) to do stand-alone builds, but you may also build; from a :ref:`sparse checkout<workflow-multicheckout-nocommit>` or from the; tarballs available on the `releases <https://github.com/llvm/llvm-project/releases/>`_; page. For stand-alone builds, you must have an llvm install that is configured; properly to be consumable by stand-alone builds of the ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:4802,test,tests,4802,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['tests']
Testability,"then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique value to LLVM_PROFILE_FILE for each RUN). The coverage; data files will be emitted in the directory specified by `config.test_exec_root`. .. option:: --max-failures N. Stop execution after the given number ``N`` of failures.; An integer argument should be passed on the command line; prior to execution. .. option:: --max-tests=N. Run at most ``N`` tests and then terminate. .. option:: --max-time=N. Spend at most ``N`` seconds (approximately) running tests and then terminate.; Note that this is not an alias for :option:`--timeout`; the two are; different kinds of maximums. .. option:: --num-shards=M. Divide the set of selected tests into ``M`` equal-sized subsets or; ""shards"", and run only one of them. Must be used with the; ``--run-shard=N`` option, which selects the shard to run. The environment; variable ``LIT_NUM_SHARDS`` can also be used in place of this; option. These two options provide a coarse mechanism for partitioning large; testsuites, for parallel execution on separate machines (say in a large; testing farm). .. option:: --order={lexical,random,smart}. Define the order in which tests are run. The supported values are:. - lexical - tests will be run in lexical order according to the test file; path. This option is useful when predictable test order is desired. - random - tests will be run in random order. - smart - tests that failed previously will be run first, then the remaining; tests, all in descending execution time order. This is the default as it; optimizes concurrency. .. option:: --run-shard=N. Select which shard to run, assuming the ``--num-shards=M`` option was; provided. The two options must be used together",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:6661,test,tests,6661,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"then the output will also be sent to; standard output. If no :option:`-o` option is specified and an input file other than ""``-``"" is; specified, then :program:`llvm-mc` creates the output filename by taking the; input filename, removing any existing ``.s`` extension, and adding a ``.o``; suffix. Other :program:`llvm-mc` options are described below. End-user Options; ~~~~~~~~~~~~~~~~. .. option:: --help. Display available options (--help-hidden for more). .. option:: -o <filename>. Use ``<filename>`` as the output filename. See the summary above for more; details. .. option:: --arch=<string>. Target arch to assemble for, see -version for available targets. .. option:: --as-lex. Apply the assemblers ""lexer"" to break the input into tokens and print each of; them out. This is intended to help develop and test an assembler; implementation. .. option:: --assemble. Assemble assembly file (default), and print the result to assembly. This is; useful to design and test instruction parsers, and can be a useful tool when; combined with other llvm-mc flags. For example, this option may be useful to; transcode assembly from different dialects, e.g. on Intel where you can use; -output-asm-variant=1 to translate from AT&T to Intel assembly syntax. It can; also be combined with --show-encoding to understand how instructions are; encoded. .. option:: --disassemble. Parse a series of hex bytes, and print the result out as assembly syntax. .. option:: --mdis. Marked up disassembly of string of hex bytes. .. option:: --cdis. Colored disassembly of string of hex bytes. .. option:: --filetype=[asm,null,obj]. Sets the output filetype. Setting this flag to `asm` will make the tool output; text assembly. Setting this flag to `obj` will make the tool output an object; file. Setting it to `null` causes no output to be created and can be used for; timing purposes. The default value is `asm`. .. option:: -g. Generate DWARF debugging info for assembly source files. .. option:: --large-code-model",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mc.rst:1862,test,test,1862,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mc.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-mc.rst,1,['test'],['test']
Testability,"then2:; ...; call void @subgroupControlBarrier() [ ""convergencectrl""(token %entry) ]; ...; br label %end. end:; }. If S is the set of threads that the entry intrinsic communicated with, then; the ``@subgroupControlBarrier`` call communicates with the subset of S that; actually reaches the call site. This set of threads doesn't change after; jump-threading, so the answer to the question posed above remains the same. .. _opportunistic_convergence:. Opportunistic convergent operations; -----------------------------------. Some programs have local regions of code that contain a sequence of convergent; operations where the code does not care about the exact set of threads with; which it is executed, but only that the set of threads is the same for all the; operations within the sequence. (If a subset of the convergent operations in the; sequence have additional, non-uniform control dependencies, then this is not; possible. However, the code may still require that the sets of threads are; logically consistent with the conditions of those control dependencies.) In this; case, :ref:`llvm.experimental.convergence.anchor; <llvm.experimental.convergence.anchor>` can be used to express the desired; semantics. The following example function could be part of a hypothetical ""append buffer""; implementation, where threads conditionally write fixed-sized records; contiguously into a global buffer. The function ``@reserveSpaceInBuffer``; returns the index into the buffer at which the calling thread should store its; data. This could be achieved by using a simple atomic operation in every thread to; bump an allocation counter. However, the following implementation can be more performant on some hardware,; because it uses only a single atomic operation for an entire group of threads.; To do this, it first determines the total size of the group, which will be the; operand to the atomic operation, and then later broadcasts the result of the; atomic operation to all threads of the group, s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst:11880,log,logically,11880,interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ConvergentOperations.rst,1,['log'],['logically']
Testability,"thisTestPoolSize); endif(). string(REPLACE "".py"" """" tname ${t}); string(REPLACE ""/"" ""-"" tname ${tname}). set(tutorial_name tutorial-${tname}-py). list(FIND pyexp_fail ${tutorial_name} index); if(index EQUAL -1); set(py_will_fail """"); else(); set(py_will_fail ${PYTESTS_WILLFAIL}); endif(). # Test if this tutorial is requiring any fixture; unset(python_deps); foreach(fixtureList ${fixtureLists}); if(${t} IN_LIST ${fixtureList}); string(REPLACE ""requires_"" """" fixture ${fixtureList}); list(APPEND python_deps ${fixture}); list(APPEND labels python_runtime_deps); endif(); endforeach(). ROOT_ADD_TEST(${tutorial_name}; COMMAND ${Python3_EXECUTABLE} ${setThreadPoolSize} ${thisTestPoolSize} ${CMAKE_CURRENT_SOURCE_DIR}/${t}; PASSRC ${rc} FAILREGEX ""Error in"" "": error:"" ""segmentation violation""; LABELS ${labels}; DEPENDS ${${tname}-depends}; ENVIRONMENT ${TUTORIAL_ENV}; PYTHON_DEPS ${python_deps}; ${py_will_fail}). if(${t} IN_LIST multithreaded); # Makes sure that this doesn't run in parallel with other multithreaded tutorials, and that cmake doesn't start too; # many other tests. That we use 4 processors is actually a lie, because IMT takes whatever it finds.; # However, even this poor indication of MT behaviour is a good hint for cmake to reduce congestion.; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK multithreaded PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_spark_tutorials); # Create a resource lock for the creation of a Spark cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOURCE_LOCK spark_resource_lock PROCESSORS ${NProcessors}); endif(). if(${t} IN_LIST distrdf_dask_tutorials); # Create a resource lock for the creation of a Dask cluster. This is also used in roottest.; # Also signal 4 processors to cmake to give the tutorial some room (it uses 2 cores).; set_tests_properties(${tutorial_name} PROPERTIES RESOU",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:34725,test,tests,34725,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['tests']
Testability,"thmic or linear is an attribute of the pad,; not the axis or the histogram. The scale is an attribute of the pad; because you may want to draw the same histogram in linear scale in one; pad and in log scale in another pad. Frequently, we see several; histograms on top of each other in the same pad. It would be very; inconvenient to set the scale attribute for each histogram in a pad. Furthermore, if the logic was set in the histogram class (or each; object) the scale setting in each `Paint` method of all objects should; be tested. If you have a pad with a histogram, a right-click on the pad, outside of; the histograms frame will convince you. The `SetLogx()`, `SetLogy()` and; `SetLogz()` methods are there. As you see, **`TPad`** defines log scale; for the two directions `x` and `y` plus `z` if you want to draw a 3D; representation of some function or histogram. The way to set log scale in the x direction for the active pad is:. ``` {.cpp}; root[] gPad->SetLogx(1); ```. To reset log in the z direction:. ``` {.cpp}; root[] gPad->SetLogz(0); ```. If you have a divided pad, you need to set the scale on each of the; sub-pads. Setting it on the containing pad does not automatically; propagate to the sub-pads. Here is an example of how to set the log; scale for the x-axis on a canvas with four sub-pads:. ``` {.cpp}; root[] TCanvas MyCanvas(""MyCanvas"",""My Canvas""); root[] MyCanvas->Divide(2,2); root[] MyCanvas->cd(1); root[] gPad->SetLogx(); root[] MyCanvas->cd(2); root[] gPad->SetLogx(); root[] MyCanvas->cd(3); root[] gPad->SetLogx(); ```. ### WaitPrimitive method. When the `TPad::WaitPrimitive()` method is called with no arguments, it; will wait until a double click or any key pressed is executed in the; canvas. A call to `gSystem->Sleep(10)` has been added in the loop to; avoid consuming at all the CPU. This new option is convenient when; executing a macro. By adding statements like:. ``` {.cpp}; canvas->WaitPrimitive();; ```. You can monitor the progress of a running ma",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md:30141,log,log,30141,documentation/users-guide/Graphics.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Graphics.md,1,['log'],['log']
Testability,"through+a+pointer+of+the+incorrect+type>`_).; `Documentation <https://clang.llvm.org/docs/analyzer/checkers.html#alpha-cplusplus-arraydelete-c>`__.; (`0e246bb67573 <https://github.com/llvm/llvm-project/commit/0e246bb67573799409d0085b89902a330998ddcc>`_). - Added a new checker configuration option ``InvalidatingGetEnv=[true,false]`` to; ``security.cert.env.InvalidPtr``. It's not set by default.; If set, ``getenv`` calls won't invalidate previously returned pointers.; `Documentation <https://clang.llvm.org/docs/analyzer/checkers.html#security-cert-env-invalidptr>`__.; (`#67663 <https://github.com/llvm/llvm-project/pull/67663>`_). Crash and bug fixes; ^^^^^^^^^^^^^^^^^^^. - Fixed a crash caused by ``builtin_bit_cast``.; (`#69922 <https://github.com/llvm/llvm-project/issues/69922>`_). - Fixed a ``core.StackAddressEscape`` crash on temporary object fields.; (`#66221 <https://github.com/llvm/llvm-project/issues/66221>`_). - A few crashes have been found and fixed using randomized testing related; to the use of ``_BitInt()`` in tidy checks and in clang analysis.; (`#67212 <https://github.com/llvm/llvm-project/pull/67212>`_,; `#66782 <https://github.com/llvm/llvm-project/pull/66782>`_,; `#65889 <https://github.com/llvm/llvm-project/pull/65889>`_,; `#65888 <https://github.com/llvm/llvm-project/pull/65888>`_,; `#65887 <https://github.com/llvm/llvm-project/pull/65887>`_). - Fixed note links of the HTML output.; (`#64054 <https://github.com/llvm/llvm-project/issues/64054>`_). - Allow widening rage-based for loops.; (`#70190 <https://github.com/llvm/llvm-project/pull/70190>`_). - Fixed uninitialized base class with initializer list when ctor is not; declared in the base class.; (`#70464 <https://github.com/llvm/llvm-project/issues/70464>`_,; `#59493 <https://github.com/llvm/llvm-project/issues/59493>`_,; `#54533 <https://github.com/llvm/llvm-project/issues/54533>`_). - Fixed an ``alpha.unix.cstring`` crash on variadic functions.; (`#74269 <https://github.com/llvm/llvm-project/is",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst:71161,test,testing,71161,interpreter/llvm-project/clang/docs/ReleaseNotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ReleaseNotes.rst,1,['test'],['testing']
Testability,"thub.com/google/googletest) and easily extended. Tests in; [roottest](https://github.com/root-project/roottest.git) are more involved (e.g., tests requiring custom dictionaries or; data files). When you create a branch in the main ROOT repository (i.e., this repository) and add a test to `roottest`,; make sure to do this under the same branch name (and open a PR for it). Our CI infrastructure automatically picks up the; changes defined in the `roottest` PR based on this branch name, and uses that for testing your PR here. ## Continuous Integration. To prevent bad surprises and make a better first impression, we; strongly encourage new developers to [run the tests](https://root.cern/for_developers/run_the_tests/); _before_ submitting a pull request. ROOT has automated CI tests :cop: that are used for pull requests:; - *Build and test*: a [Jenkins-based CI workflow](https://github.com/phsft-bot/build-configuration/blob/master/README.md); as well as a GitHub Actions CI workflow tests PRs automatically; only a; [project member](https://github.com/orgs/root-project/people) is allowed to initiate this build.; The results are posted to the pull request.; Compared to ROOT's nightly builds, PRs are tested with less tests, on less platforms.; - *Formatting check*: `clang-format` automatically checks that a PR; [follows](https://github.com/root-project/root/blob/master/.clang-format) ROOT's; [coding conventions](https://root.cern/contribute/coding_conventions/).; If coding violations are found, it provides you with a `patch` output that you likely want to apply to your PR.; - *Simple Static Analysis*: PRs are analyzed using [`clang-tidy`](https://clang.llvm.org/extra/clang-tidy/). Typically, PRs must pass all these tests; we will ask you to fix any issues that may arise.; Some tests are run only outside the PR testing system:; we might come back to you with additional reports after your contribution was merged. Thank you for reading this; and even more: thank you :bouquet: for",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md:6944,test,tests,6944,CONTRIBUTING.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CONTRIBUTING.md,1,['test'],['tests']
Testability,"tic analyzer is a; part of the Clang project, so consult Hacking on Clang; and LLVM Programmer's Manual; for developer guidelines and post your questions and proposals to the; Static Analyzer subcategory at; the official LLVM Discourse server. Getting Started; Static Analyzer Overview. Interaction with Checkers; Representing Values. Idea for a Checker; Checker Registration; Events, Callbacks, and Checker Class Structure; Custom Program States; Bug Reports; AST Visitors; Testing; Useful Commands/Debugging Hints. Attaching the Debugger; Narrowing Down the Problem; Visualizing the Analysis; Debug Prints and Tricks. Additional Sources of Information; Useful Links. Getting Started. To check out the source code and build the project, follow steps 1-4 of; the Clang Getting Started; page.; The analyzer source code is located under the Clang source tree:; ; $ cd llvm/tools/clang. See: include/clang/StaticAnalyzer, lib/StaticAnalyzer,; test/Analysis.; The analyzer regression tests can be executed from the Clang's build; directory:; ; $ cd ../../../; cd build/tools/clang; TESTDIRS=Analysis make test. Analyze a file with the specified checker:; ; $ clang -cc1 -analyze -analyzer-checker=core.DivideZero test.c. List the available checkers:; ; $ clang -cc1 -analyzer-checker-help. See the analyzer help for different output formats, fine tuning, and; debug options:; ; $ clang -cc1 -help | grep ""analyzer"". Static Analyzer Overview; The analyzer core performs symbolic execution of the given program. All the; input values are represented with symbolic values; further, the engine deduces; the values of all the expressions in the program based on the input symbols; and the path. The execution is path sensitive and every possible path through; the program is explored. The explored execution traces are represented with; ExplodedGraph object.; Each node of the graph is; ExplodedNode,; which consists of a ProgramPoint and a ProgramState.; ; ProgramPoint; represents the corresponding location",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html:1470,test,tests,1470,interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/checker_dev_manual.html,1,['test'],['tests']
Testability,"tices for regression tests; -----------------------------------. - Use auto-generated check lines (produced by the scripts mentioned above); whenever feasible.; - Include comments about what is tested/expected in a particular test. If there; are relevant issues in the bug tracker, add references to those bug reports; (for example, ""See PR999 for more details"").; - Avoid undefined behavior and poison/undef values unless necessary. For; example, do not use patterns like ``br i1 undef``, which are likely to break; as a result of future optimizations.; - Minimize tests by removing unnecessary instructions, metadata, attributes,; etc. Tools like ``llvm-reduce`` can help automate this.; - Outside PhaseOrdering tests, only run a minimal set of passes. For example,; prefer ``opt -S -passes=instcombine`` over ``opt -S -O3``.; - Avoid unnamed instructions/blocks (such as ``%0`` or ``1:``), because they may; require renumbering on future test modifications. These can be removed by; running the test through ``opt -S -passes=instnamer``.; - Try to give values (including variables, blocks and functions) meaningful; names, and avoid retaining complex names generated by the optimization; pipeline (such as ``%foo.0.0.0.0.0.0``). Extra files; -----------. If your test requires extra files besides the file containing the ``RUN:`` lines; and the extra files are small, consider specifying them in the same file and; using ``split-file`` to extract them. For example,. .. code-block:: llvm. ; RUN: split-file %s %t; ; RUN: llvm-link -S %t/a.ll %t/b.ll | FileCheck %s. ; CHECK: ... ;--- a.ll; ...; ;--- b.ll; ... The parts are separated by the regex ``^(.|//)--- <part>``. If you want to test relative line numbers like ``[[#@LINE+1]]``, specify; ``--leading-lines`` to add leading empty lines to preserve line numbers. If the extra files are large, the idiomatic place to put them is in a subdirectory ``Inputs``.; You can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, conside",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:14395,test,test,14395,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,ticlass COMMAND testPyAdaBoostMulticlass DEPENDS PyMVA-GTB-Multiclass). endif(PY_SKLEARN_FOUND). # Enable tests based on available python modules; if(PY_TORCH_FOUND); configure_file(generatePyTorchModelClassification.py generatePyTorchModelClassification.py COPYONLY); configure_file(generatePyTorchModelMulticlass.py generatePyTorchModelMulticlass.py COPYONLY); configure_file(generatePyTorchModelRegression.py generatePyTorchModelRegression.py COPYONLY); configure_file(generatePyTorchModels.py generatePyTorchModels.py COPYONLY); # Test PyTorch: Binary classification. if (PY_SKLEARN_FOUND); set(PyMVA-Torch-Classification-depends PyMVA-AdaBoost-Classification); set(PyMVA-Torch-Multiclass-depends PyMVA-AdaBoost-Multiclass); endif(). ROOT_EXECUTABLE(testPyTorchClassification testPyTorchClassification.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Classification COMMAND testPyTorchClassification DEPENDS ${PyMVA-Torch-Classification-depends}). # Test PyTorch: Regression; ROOT_EXECUTABLE(testPyTorchRegression testPyTorchRegression.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Regression COMMAND testPyTorchRegression). # Test PyTorch: Multi-class classification; ROOT_EXECUTABLE(testPyTorchMulticlass testPyTorchMulticlass.C; LIBRARIES ${Libraries}); ROOT_ADD_TEST(PyMVA-Torch-Multiclass COMMAND testPyTorchMulticlass DEPENDS ${PyMVA-Torch-Multiclass-depends}). # Test RModelParser_PyTorch. ROOT_ADD_GTEST(TestRModelParserPyTorch TestRModelParserPyTorch.C; LIBRARIES; ROOTTMVASofie; TMVA; Python3::NumPy; Python3::Python; INCLUDE_DIRS; SYSTEM; ${CMAKE_CURRENT_BINARY_DIR}; ); target_link_libraries(TestRModelParserPyTorch ${BLAS_LINKER_FLAGS} ${BLAS_LIBRARIES}). endif(PY_TORCH_FOUND). if((PY_KERAS_FOUND AND PY_THEANO_FOUND) OR (PY_KERAS_FOUND AND PY_TENSORFLOW_FOUND)); configure_file(generateKerasModels.py generateKerasModels.py COPYONLY); configure_file(scale_by_2_op.hxx scale_by_2_op.hxx COPYONLY). if (PY_TORCH_FOUND); set(PyMVA-Keras-Classification-depends PyMVA-Torch-,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt:3099,test,testPyTorchRegression,3099,tmva/pymva/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/pymva/test/CMakeLists.txt,2,['test'],['testPyTorchRegression']
Testability,"ties of volumes can be provided both at; build time or after geometry is closed, but global visualization; settings (see section: ""The Drawing Package"") should not be provided; at build time, otherwise the drawing package will be loaded. There is also a list of specific rules:. - Positioned volumes should not extrude their container or intersect; with others within this unless it is specified (see section:; Overlapping Volumes).; - The top volume (containing all geometry trees) must be specified; before closing the geometry and must not be positioned - it; represents the global reference frame.; - After building the full geometry tree, the geometry must be closed; (see the method **`TGeoManager`**`::CloseGeometry()`). Voxelization; can be redone per volume after this process. The list is much bigger and we will describe in more detail the geometry; creation procedure in the following sections. Provided that geometry was; successfully built and closed, the **`TGeoManager`** class will register; itself to ROOT and the logical/physical structures will become; immediately browsable. ### The Volume Hierarchy. The basic components used for building the logical hierarchy of the; geometry are the positioned volumes called `nodes`. Volumes are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of; volumes inside a container volume but users do not directly create them.; They are automatically created as a result of adding one volume inside; other or dividing a volume. The geometrical transformation held by nodes; is always defined with respect to their mother (relative positioning).; Reflection matrices are allowed. A hierarchical element is not fully defined by a node since nodes are; not directly linked to each other, but through volumes (a node points to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. One can therefor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:58292,log,logical,58292,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"tifiedNamespaces.end();; });; LVStringRefs::size_type FirstNonNamespace = std::distance(Components.begin(), Iter);. //===----------------------------------------------------------------------===//; // Move all the printing support to a common module.; //===----------------------------------------------------------------------===//; Factor out printing functionality from the logical elements into a; common module. //===----------------------------------------------------------------------===//; // Refactor 'LVBinaryReader::processLines'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1246155; https://reviews.llvm.org/D137156. During the traversal of the debug information sections, we created the; logical lines representing the disassembled instructions from the text; section and the logical lines representing the line records from the; debug line section. Using the ranges associated with the logical scopes,; we will allocate those logical lines to their logical scopes. Consider the case when any of those lines become orphans, causing; incorrect scope parent for disassembly or line records. //===----------------------------------------------------------------------===//; // Add support for '-ffunction-sections'.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1295012. Only linked executables are handled. It does not support relocatable; files compiled with -ffunction-sections. //===----------------------------------------------------------------------===//; // Add support for DWARF v5 .debug_names section.; // Add support for CodeView public symbols stream.; //===----------------------------------------------------------------------===//; https://reviews.llvm.org/D125783#inline-1294142. The ELF and CodeView readers use the public names information to create; the instructions (LVLineAssembler). Instead of relying on DWAR",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt:8103,log,logical,8103,interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/tools/llvm-debuginfo-analyzer/README.txt,3,['log'],['logical']
Testability,"tils/LLVMVisualizers/llvm.natvis and; ; clang/utils/ClangVisualizers/clang.natvis provide debugger visualizers; that make debugging of more complex data types much easier.; Depending on how you configure the project, Visual Studio may automatically; use these visualizers when debugging or you may be required to put the files; into %USERPROFILE%\Documents\Visual Studio <version>\Visualizers; or create a symbolic link so they update automatically. See; ; Microsoft's documentation for more details on use of NATVIS. Testing. Testing on Unix-like Systems. Clang includes a basic regression suite in the tree which can be; run with make test from the top-level clang directory, or; just make in the test sub-directory.; make VERBOSE=1 can be used to show more detail; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:2852,test,tests,2852,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,5,['test'],"['test', 'tests']"
Testability,tin sema checks for Clang. .. option:: -gen-arm-cde-builtin-codegen. Generate ARM CDE builtin code-generator for Clang. .. option:: -gen-arm-cde-builtin-aliases. Generate list of valid ARM CDE builtin aliases for Clang. .. option:: -gen-riscv-vector-header. Generate ``riscv_vector.h`` for Clang. .. option:: -gen-riscv-vector-builtins. Generate ``riscv_vector_builtins.inc`` for Clang. .. option:: -gen-riscv-vector-builtin-codegen. Generate ``riscv_vector_builtin_cg.inc`` for Clang. .. option:: -gen-riscv-sifive-vector-builtins. Generate ``riscv_sifive_vector_builtins.inc`` for Clang. .. option:: -gen-riscv-sifive-vector-builtin-codegen. Generate ``riscv_sifive_vector_builtin_cg.inc`` for Clang. .. option:: -gen-attr-docs. Generate attribute documentation. .. option:: -gen-diag-docs. Generate diagnostic documentation. .. option:: -gen-opt-docs. Generate option documentation. .. option:: -gen-clang-data-collectors. Generate data collectors for AST nodes. .. option:: -gen-clang-test-pragma-attribute-supported-attributes. Generate a list of attributes supported by ``#pragma`` Clang attribute for; testing purposes. lldb-tblgen Options; ~~~~~~~~~~~~~~~~~~~. .. option:: gen-lldb-option-defs. Generate lldb OptionDefinition values. .. option:: gen-lldb-property-defs. Generate lldb PropertyDefinition values. .. option:: gen-lldb-property-enum-defs. Generate lldb PropertyDefinition enum values. llvm-tblgen Options; ~~~~~~~~~~~~~~~~~~~. .. option:: -gen-asm-matcher. Generate assembly instruction matcher. .. option:: -match-prefix=prefix. Make -gen-asm-matcher match only instructions with the given *prefix*. .. option:: -gen-asm-parser. Generate assembly instruction parser. .. option:: -asmparsernum=n. Make -gen-asm-parser emit assembly parser number *n*. .. option:: -gen-asm-writer. Generate assembly writer. .. option:: -asmwriternum=n. Make -gen-asm-writer emit assembly writer number *n*. .. option:: -gen-attrs. Generate attributes. .. option:: -gen-automata. Generate generic a,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/tblgen.rst:8271,test,test-pragma-attribute-supported-attributes,8271,interpreter/llvm-project/llvm/docs/CommandGuide/tblgen.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/tblgen.rst,1,['test'],['test-pragma-attribute-supported-attributes']
Testability,"tin_isnormal``; * ``__builtin_nan``; * ``__builtin_nans``; * ``__builtin_parity``; * ``__builtin_parityl``; * ``__builtin_parityll``; * ``__builtin_popcount``; * ``__builtin_popcountl``; * ``__builtin_popcountll``; * ``__builtin_rotateleft8``; * ``__builtin_rotateleft16``; * ``__builtin_rotateleft32``; * ``__builtin_rotateleft64``; * ``__builtin_rotateright8``; * ``__builtin_rotateright16``; * ``__builtin_rotateright32``; * ``__builtin_rotateright64``. The following x86-specific intrinsics can be used in constant expressions:. * ``_bit_scan_forward``; * ``_bit_scan_reverse``; * ``__bsfd``; * ``__bsfq``; * ``__bsrd``; * ``__bsrq``; * ``__bswap``; * ``__bswapd``; * ``__bswap64``; * ``__bswapq``; * ``_castf32_u32``; * ``_castf64_u64``; * ``_castu32_f32``; * ``_castu64_f64``; * ``__lzcnt16``; * ``__lzcnt``; * ``__lzcnt64``; * ``_mm_popcnt_u32``; * ``_mm_popcnt_u64``; * ``_popcnt32``; * ``_popcnt64``; * ``__popcntd``; * ``__popcntq``; * ``__popcnt16``; * ``__popcnt``; * ``__popcnt64``; * ``__rolb``; * ``__rolw``; * ``__rold``; * ``__rolq``; * ``__rorb``; * ``__rorw``; * ``__rord``; * ``__rorq``; * ``_rotl``; * ``_rotr``; * ``_rotwl``; * ``_rotwr``; * ``_lrotl``; * ``_lrotr``. Debugging the Compiler; ======================. Clang supports a number of pragma directives that help debugging the compiler itself.; Syntax is the following: `#pragma clang __debug <command> <arguments>`.; Note, all of debugging pragmas are subject to change. `dump`; ------; Accepts either a single identifier or an expression. When a single identifier is passed,; the lookup results for the identifier are printed to `stderr`. When an expression is passed,; the AST for the expression is printed to `stderr`. The expression is an unevaluated operand,; so things like overload resolution and template instantiations are performed,; but the expression has no runtime effects.; Type- and value-dependent expressions are not supported yet. This facility is designed to aid with testing name lookup machinery.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst:196620,test,testing,196620,interpreter/llvm-project/clang/docs/LanguageExtensions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LanguageExtensions.rst,1,['test'],['testing']
Testability,"ting a logical view but they can; give an indication about the quality and potentially expose issues with; the generated debug information. The following options describe the warnings to be recorded for later; printing, if they are requested by :option:`--print`. .. option:: --warning=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below warnings. The following options collect additional information during the creation; of the logical view, to include invalid coverage values and locations; for symbols; invalid code ranges; lines that are zero. .. code-block:: text. =coverages: Invalid symbol coverages values.; =lines: Debug lines that are zero.; =locations: Invalid symbol locations.; =ranges: Invalid code ranges. .. _internal_:. INTERNAL; ~~~~~~~~; For a better understanding of the logical view, access to more detailed; internal information could be needed. Such data would help to identify; debug information processed or incorrect logical element management.; Typically these kind of options are available only in *debug* builds. :program:`llvm-debuginfo-analyzer` supports these advanced options in; both *release* and *debug* builds, with the exception of the unique ID; that is generated only in *debug* builds. .. option:: --internal=<value[,value,...]>. With **value** being one of the options in the following list. .. code-block:: text. =all: Include all the below options. The following options allow to check the integrity of the logical view;; collect the debug tags that are processed or not implemented; ignore the; logical element line number, to facilitate the logical view comparison; when using external comparison tools; print the command line options; used to invoke :program:`llvm-debuginfo-analyzer`. .. code-block:: text. =id: Print unique element ID.; =cmdline: Print command line.; =integrity: Check elements integrity.; =none: Ignore element line number.; =tag: Debug information tag",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:22492,log,logical,22492,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ting the limit higher than; 2 is thus harmless. To facilitate debugging, after reaching the limit, lit will make one extra pass; and report an error if the ``RUN:`` line changes again. In the above example,; setting the limit to 1 will thus cause lit to report an error instead of; producing incorrect output. Options; -------. The llvm lit configuration allows to customize some things with user options:. ``llc``, ``opt``, ...; Substitute the respective llvm tool name with a custom command line. This; allows to specify custom paths and default arguments for these tools.; Example:. % llvm-lit ""-Dllc=llc -verify-machineinstrs"". ``run_long_tests``; Enable the execution of long running tests. ``llvm_site_config``; Load the specified lit configuration instead of the default one. Other Features; --------------. To make RUN line writing easier, there are several helper programs. These; helpers are in the PATH when running tests, so you can just call them using; their name. For example:. ``not``; This program runs its arguments and then inverts the result code from it.; Zero result codes become 1. Non-zero result codes become 0. To make the output more useful, :program:`lit` will scan; the lines of the test case for ones that contain a pattern that matches; ``PR[0-9]+``. This is the syntax for specifying a PR (Problem Report) number; that is related to the test case. The number after ""PR"" specifies the; LLVM Bugzilla number. When a PR number is specified, it will be used in; the pass/fail reporting. This is useful to quickly get some context when; a test fails. Finally, any line that contains ""END."" will cause the special; interpretation of lines to terminate. This is generally done right after; the last RUN: line. This has two side effects:. (a) it prevents special interpretation of lines that are part of the test; program, not the instructions to the test case, and. (b) it speeds things up for really big test cases by avoiding; interpretation of the remainder of the file.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:38594,test,test,38594,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,6,['test'],['test']
Testability,ting with RDF+RNTuple; * [[#10866](https://github.com/root-project/root/issues/10866)] - ACLiC flags parsing for compiler command line options broken in certain cases; * [[#10684](https://github.com/root-project/root/issues/10684)] - [PyROOT] Cannot use SofieFunctor in Python; * [[#10664](https://github.com/root-project/root/issues/10664)] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; * [[#10395](https://github.com/root-project/root/issues/10395)] - [core] CleanCompiledMacros behavior; * [[#10222](https://github.com/root-project/root/issues/10222)] - Suspicious behavior of TUnuran::SampleMulti ; * [[#10221](https://github.com/root-project/root/issues/10221)] - ROOT interpreter built with C++17 does not find `std::optional` without including it first; * [[#10146](https://github.com/root-project/root/issues/10146)] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); * [[#10061](https://github.com/root-project/root/issues/10061)] - Distributed RDataFrame test failures on Mac/ARM; * [[#9917](https://github.com/root-project/root/issues/9917)] - SetRange and SetRangeUser fail silently; * [[#9594](https://github.com/root-project/root/issues/9594)] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; * [[#9524](https://github.com/root-project/root/issues/9524)] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; * [[#9514](https://github.com/root-project/root/issues/9514)] - Printed SVG image contains newline cutting through XML tags; * [[#9489](https://github.com/root-project/root/issues/9489)] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; * [[#9292](https://github.com/root-project/root/issues/9292)] - Integer overflow in TTreeCache::FillBuffer; * [[#8959](https://github.com/root-project/root/issues/8959)] - `ninja clean` does not remove `modules.idx`; * [[#8952](https://github.com/root-project/root/issues/8952)] - Make hadd ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md:45521,test,test,45521,README/ReleaseNotes/v632/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v632/index.md,1,['test'],['test']
Testability,"ting; -----------------. The pre-merge tests are a continuous integration (CI) workflow. The workflow; checks the patches uploaded to Phabricator before a user merges them to the main; branch - thus the term *pre-merge testing*. When a user uploads a patch to Phabricator, Phabricator triggers the checks and; then displays the results. This way bugs in a patch are contained during the; code review stage and do not pollute the main branch. Our goal with pre-merge testing is to report most true problems while strongly; minimizing the number of false positive reports. Our goal is that problems; reported are always actionable. If you notice a false positive, please report; it so that we can identify the cause. If you notice issues or have an idea on how to improve pre-merge checks, please; `create a new issue <https://github.com/google/llvm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repository. Please make sure that either:. * You set a git hash as ``sourceControlBaseRevision`` in Phabricator which is; available on the GitHub repository,; * **or** you define the dependencies of your patch in Phabricator,; * **or** your patch can be applied to the main branch. Only then can the build server apply the patch locally and run the builds and; tests. Accessing build results; ^^^^^^^^^^^^^^^^^^^^^^^; Phabricator will automatically trigger a build for every new patch you upload or; modify. Phabricator shows the build results at the top of the entry. Clicking on; the links (in the red box) will show more details:. .. image:: Phabricator_premerge_results.png. The CI will compile and run tests, run clang-format and clang-tidy on lines; changed. If a unit test failed, this is shown below the build status. You can also expand; the unit test to see the details:. .. image:: Phabricator_premerge_unit_tests.png. Opting Out; ^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:11341,test,tested,11341,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['tested']
Testability,tion COMMAND testDLMinimization). #ROOT_EXECUTABLE(testTensorDataLoader TestTensorDataLoader.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader COMMAND testTensorDataLoader). endif(). #--- CPU tests. ----------------------------; if ((BLAS_FOUND OR mathmore) AND imt AND tmva-cpu). ROOT_EXECUTABLE(testIm2ColCpu TestIm2ColCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Im2Col-CPU COMMAND testIm2ColCpu). ROOT_EXECUTABLE(testPoolingLayerCpu TestPoolingLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayer-CPU COMMAND testPoolingLayerCpu). ROOT_EXECUTABLE(testConvLayerCpu TestConvLayerCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayer-CPU COMMAND testConvLayerCpu). ROOT_EXECUTABLE(testRotWeightsCpu TestRotateWeightsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotWeights-CPU COMMAND testRotWeightsCpu). ROOT_EXECUTABLE(testForwardPassCpu TestForwardPassCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Forward-CPU COMMAND testForwardPassCpu). ROOT_EXECUTABLE(testConvNetLossCpu TestConvNetLossCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Loss-CPU COMMAND testConvNetLossCpu). ROOT_EXECUTABLE(testConvNetPredCpu TestConvNetPredictionCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Pred-CPU COMMAND testConvNetPredCpu). ROOT_EXECUTABLE(testReshapeCpu TestReshapeCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Reshape-CPU COMMAND testReshapeCpu). #-- need to be fixed; #ROOT_EXECUTABLE(testTensorDataLoaderCpu TestTensorDataLoaderCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-Tensor-Data-Loader-CPU COMMAND testTensorDataLoaderCpu). #ROOT_EXECUTABLE(testDLMinimizationCpu TestMinimizationCpu.cxx LIBRARIES ${Libraries}); #ROOT_ADD_TEST(TMVA-DNN-CNN-Minimization-CPU COMMAND testDLMinimizationCpu). ROOT_EXECUTABLE(testConvBackpropagationCpu TestConvBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-CNN-Backpropagation-CPU COMMA,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:5566,test,testForwardPassCpu,5566,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,1,['test'],['testForwardPassCpu']
Testability,"tion buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11: Prevent exceptions from; leaving destructors. class A {; A() {}; ~A() { throw 1; } // warn; };. void f() throw(int);. class A {; A() {}; ~A() { f(); } // warn; };. ctordtor.PlacementSelfCopy; (C++11); For a placement copy or move, it is almost certainly an error if the; constructed object is also the object being copied from. class A {};. void test(A *dst, A *src) {; ::new (dst) A(*dst); // warn (should be 'src'); }. exceptions. Name, DescriptionExampleProgress. exceptions.ThrowSpecButNotThrow; (C++); Function declaration has a throw(type) specifier but the; function do not throw exceptions. void test() throw(int) {; } // warn. exceptions.NoThrowSpecButThrows; (C++); An exception is throw from a function having a ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:2111,test,test,2111,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"tion of each line. But it can appear; anywhere, so the filter should not remove any non-whitespace text surrounding; the element. Here ``%u`` is the frame number, which starts at zero for the location of the; fault being identified, increments to one for the caller of frame zero's call; frame, to two for the caller of frame one, etc. ``%p`` is the memory address; of a code location. Code locations in a backtrace come from two distinct sources. Most backtrace; frames describe a return address code location, i.e. the instruction; immediately after a call instruction. This is the location of code that has; yet to run, since the function called there has not yet returned. Hence the; code location of actual interest is usually the call site itself rather than; the return address, i.e. one instruction earlier. When presenting the source; location for a return address frame, the symbolizing filter will subtract one; byte or one instruction length from the actual return address for the call; site, with the intent that the address logged can be translated directly to a; source location for the call site and not for the apparent return site; thereafter (which can be confusing). When inlined functions are involved, the; call site and the return site can appear to be in different functions at; entirely unrelated source locations rather than just a line away, making the; confusion of showing the return site rather the call site quite severe. Often the first frame in a backtrace (""frame zero"") identifies the precise; code location of a fault, trap, or asynchronous interrupt rather than a return; address. At other times, even the first frame is actually a return address; (for example, backtraces collected at the time of an object allocation and; reported later when the allocated object is used or misused). When a system; supports in-thread trap handling, there may also be frames after the first; that represent a precise interrupted code location rather than a return; address, prese",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst:10909,log,logged,10909,interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SymbolizerMarkupFormat.rst,1,['log'],['logged']
Testability,"tion tokens and https protocol,; this makes usage of webgui components in public networks more secure. ### Enabled WLCG Bearer Tokens support in RDavix. Bearer tokens are part of WLCG capability-based infrastructure with capability-based scheme which uses an infrastructure that describes what the bearer is allowed to do as opposed to who that bearer is. Token discovery procedure are developed according WLCG Bearer Token Discovery specification document (https://github.com/WLCG-AuthZ-WG/bearer-token-discovery/blob/master/specification.md). Short overview:. 1. If the `BEARER_TOKEN` environment variable is set, then the value is taken to be the token contents.; 2. If the `BEARER_TOKEN_FILE` environment variable is set, then its value is interpreted as a filename. The contents of the specified file are taken to be the token contents.; 3. If the `XDG_RUNTIME_DIR` environment variable is set, then take the token from the contents of `$XDG_RUNTIME_DIR/bt_u$ID`(this additional location is intended to provide improved security for shared login environments as `$XDG_RUNTIME_DIR` is defined to be user-specific as opposed to a system-wide directory.).; 4. Otherwise, take the token from `/tmp/bt_u$ID`. ## GUI Libraries. ### RBrowser improvements. - central factory methods to handle browsing, editing and drawing of different classes; - simple possibility to extend RBrowser on user-defined classes; - support of web-based geometry viewer; - better support of TTree drawing; - server-side handling of code editor and image viewer widgets; - rbrowser content is fully recovered when web-browser is reloaded; - load of widgets code only when really required (shorter startup time for RBrowser). ## Montecarlo Libraries. ## PROOF Libraries. ## Language Bindings. ## JavaScript ROOT. ### Major JSROOT update to version 6. - update all used libraries `d3.js`, `three.js`, `MathJax.js`, openui5; - change to Promise based interface for all async methods, remove call-back arguments; - change scripts",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md:26611,log,login,26611,README/ReleaseNotes/v624/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v624/index.md,1,['log'],['login']
Testability,"tion type defining the algorithm must be defined in the namespace `ROOT::Math::IntegrationOneDim` (to distinguish from; the multi-dimensional case) and the rule enumeration (or its corresponding integer) can be passed in the constructor of the `ROOT::Math::IntegratorOneDIm`. ### Multi-dimensional Integration. The multi-dimensional integration algorithm should be applied to functions with dimension larger than one.; Adaptive multi-dimensional integration works for low function dimension, while MC integration can be applied to higher dimensions. #### Using `ROOT::Math::IntegratorMultiDim`. Here is a code example on how to use the `ROOT::Math::IntegratorOneDim` class; (note that the class is defined in the header file `Math/Integrator.h`). In this example we create; different instance of the class using some of the available algorithms in ROOT. ```{.cpp}; #include ""Math/IntegratorMultiDim.h""; #include ""Math/Functor.h"". double f2(const double * x) {; return x[0] + x[1];; }. int testIntegrationMultiDim() {. const double RESULT = 1.0;; const double ERRORLIMIT = 1E-3;; int status = 0;. ROOT::Math::Functor wf(&f2,2);; double a[2] = {0,0};; double b[2] = {1,1};. ROOT::Math::IntegratorMultiDim ig(ROOT::Math::IntegrationMultiDim::kADAPTIVE);; ig.SetFunction(wf);; double val = ig.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig2(ROOT::Math::IntegrationMultiDim::kVEGAS);; ig2.SetFunction(wf);; val = ig2.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig3(wf,ROOT::Math::IntegrationMultiDim::kPLAIN);; val = ig3.Integral(a,b);; std::cout << ""integral result is "" << val << std::endl;; status += std::fabs(val-RESULT) > ERRORLIMIT;. ROOT::Math::IntegratorMultiDim ig4(wf,ROOT::Math::IntegrationMultiDim::kMISER);; val = ig4.Integral(a,b);; std::cout << ""integral result is "" << val <<",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md:58833,test,testIntegrationMultiDim,58833,documentation/users-guide/MathLibraries.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md,1,['test'],['testIntegrationMultiDim']
Testability,"tion, are literally files that represent an; on-disk cache that contains the vital information necessary to reduce; some of the work needed to process a corresponding header file. While; details of precompiled headers vary between compilers, precompiled; headers have been shown to be highly effective at speeding up program; compilation on systems with very large system headers (e.g., macOS). Generating a PCH File; ^^^^^^^^^^^^^^^^^^^^^. To generate a PCH file using Clang, one invokes Clang with the; `-x <language>-header` option. This mirrors the interface in GCC; for generating PCH files:. .. code-block:: console. $ gcc -x c-header test.h -o test.h.gch; $ clang -x c-header test.h -o test.h.pch. Using a PCH File; ^^^^^^^^^^^^^^^^. A PCH file can then be used as a prefix header when a ``-include-pch``; option is passed to ``clang``:. .. code-block:: console. $ clang -include-pch test.h.pch test.c -o test. The ``clang`` driver will check if the PCH file ``test.h.pch`` is; available; if so, the contents of ``test.h`` (and the files it includes); will be processed from the PCH file. Otherwise, Clang will report an error. .. note::. Clang does *not* automatically use PCH files for headers that are directly; included within a source file or indirectly via :option:`-include`.; For example:. .. code-block:: console. $ clang -x c-header test.h -o test.h.pch; $ cat test.c; #include ""test.h""; $ clang test.c -o test. In this example, ``clang`` will not automatically use the PCH file for; ``test.h`` since ``test.h`` was included directly in the source file and not; specified on the command line using ``-include-pch``. Relocatable PCH Files; ^^^^^^^^^^^^^^^^^^^^^. It is sometimes necessary to build a precompiled header from headers; that are not yet in their final, installed locations. For example, one; might build a precompiled header within the build tree that is then; meant to be installed alongside the headers. Clang permits the creation; of ""relocatable"" precompiled headers, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:47215,test,test,47215,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"tion.containers.OutOfBounds; (C); Checks for index out-of-bounds when using CFArray API. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. osx.coreFoundation.containers.PointerSizedValues; (C); Warns if CFArray, CFDictionary, CFSet are; created with non-pointer-size values. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void **)x, 1,; &kCFTypeArrayCallBacks); // warn; }. Security Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. security.insecureAPI.UncheckedReturn; (C); Warn on uses of functions whose return values must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lc",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:21506,test,test,21506,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"tion:; define void @lshift_lt(i8 zeroext %a) nounwind {; entry:; %conv = zext i8 %a to i32; %shl = shl i32 %conv, 3; %cmp = icmp ult i32 %shl, 33; br i1 %cmp, label %if.then, label %if.end. if.then:; tail call void @bar() nounwind; ret void. if.end:; ret void; }; declare void @bar() nounwind. The shift should be eliminated. Testcase derived from gcc. //===---------------------------------------------------------------------===//. These compile into different code, one gets recognized as a switch and the; other doesn't due to phase ordering issues (PR6212):. int test1(int mainType, int subType) {; if (mainType == 7); subType = 4;; else if (mainType == 9); subType = 6;; else if (mainType == 11); subType = 9;; return subType;; }. int test2(int mainType, int subType) {; if (mainType == 7); subType = 4;; if (mainType == 9); subType = 6;; if (mainType == 11); subType = 9;; return subType;; }. //===---------------------------------------------------------------------===//. The following test case (from PR6576):. define i32 @mul(i32 %a, i32 %b) nounwind readnone {; entry:; %cond1 = icmp eq i32 %b, 0 ; <i1> [#uses=1]; br i1 %cond1, label %exit, label %bb.nph; bb.nph: ; preds = %entry; %tmp = mul i32 %b, %a ; <i32> [#uses=1]; ret i32 %tmp; exit: ; preds = %entry; ret i32 0; }. could be reduced to:. define i32 @mul(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = mul i32 %b, %a; ret i32 %tmp; }. //===---------------------------------------------------------------------===//. We should use DSE + llvm.lifetime.end to delete dead vtable pointer updates.; See GCC PR34949. Another interesting case is that something related could be used for variables; that go const after their ctor has finished. In these cases, globalopt (which; can statically run the constructor) could mark the global const (so it gets put; in the readonly section). A testcase would be:. #include <complex>; using namespace std;; const complex<char> should_be_in_rodata (42,-42);; complex<char> should_be_in_data ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:50225,test,test,50225,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['test'],['test']
Testability,"tion; rather than check the precondition with NSAssert(). In these cases, you; can suppress the analyzer warning with a cast:. return (id _Nonnull)nil;. Note that this cast does not affect code generation. Q: The analyzer assumes that a loop body is never entered. How can I tell it that the loop body will be entered at least once?. In the contrived example above, the analyzer has detected that the body of; the loop is never entered for the case where length <= 0. In this; particular example, you may know that the loop will always be entered because; the input parameter length will be greater than zero in all calls to this; function. You can teach the analyzer facts about your code as well as document; it by using assertions. By adding assert(length > 0) in the beginning; of the function, you tell the analyzer that your code is never expecting a zero; or a negative value, so it won't need to test the correctness of those paths. int foo(int length) {; int x = 0;; assert(length > 0);; for (int i = 0; i < length; i++); x += 1;; return length/x;; }. Q: How can I suppress a specific analyzer warning?; When you encounter an analyzer bug/false positive, check if it's one of the; issues discussed above or if the analyzer; annotations can; resolve the issue by helping the static analyzer understand the code better.; Second, please report it to help us improve; user experience.; Sometimes there's really no ""good"" way to eliminate the issue. In such cases; you can ""silence"" it directly by annotating the problematic line of code with; the help of Clang attribute 'suppress':. int foo() {; int *x = nullptr;; ...; [[clang::suppress]] {; // all warnings in this scope are suppressed; int y = *x;; }. // null pointer dereference warning suppressed on the next line; [[clang::suppress]]; return *x; }. int bar(bool coin_flip) {; // suppress all memory leak warnings about this allocation; [[clang::suppress]]; int *result = (int *)malloc(sizeof(int));. if (coin_flip); return 0; // including",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html:7955,assert,assert,7955,interpreter/llvm-project/clang/www/analyzer/faq.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/faq.html,1,['assert'],['assert']
Testability,tionCudnn ${Libraries} ); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cudnn COMMAND testOptimizationCudnn). # DNN - TensorDataLoader Cudnn; #add_executable(testTensorDataLoaderCudnn TestTensorDataLoaderCudnn.cxx); #TARGET_LINK_LIBRARIES(testTensorDataLoaderCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); #ROOT_ADD_TEST(TMVA-DNN-TensorDataLoaderCudnn COMMAND testTensorDataLoaderCudnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOp,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4436,test,testLossFunctionsCpu,4436,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testLossFunctionsCpu']
Testability,"tions (a comma separated list of elements, surrounded by; less-than/greater-than's (``<>``)). For example:; ""``< i32 42, i32 11, i32 74, i32 100 >``"". Vector constants; must have :ref:`vector type <t_vector>`, and the number and types of; elements must match those specified by the type. When creating a vector whose elements have the same constant value, the; preferred syntax is ``splat (<Ty> Val)``. For example: ""``splat (i32 11)``"".; These vector constants must have ::ref:`vector type <t_vector>` with an; element type that matches the ``splat`` operand.; **Zero initialization**; The string '``zeroinitializer``' can be used to zero initialize a; value to zero of *any* type, including scalar and; :ref:`aggregate <t_aggregate>` types. This is often used to avoid; having to print large zero initializers (e.g. for large arrays) and; is always exactly equivalent to using explicit zero initializers.; **Metadata node**; A metadata node is a constant tuple without types. For example:; ""``!{!0, !{!2, !0}, !""test""}``"". Metadata can reference constant values,; for example: ""``!{!0, i32 0, ptr @global, ptr @function, !""str""}``"".; Unlike other typed constants that are meant to be interpreted as part of; the instruction stream, metadata is a place to attach additional; information such as debug info. Global Variable and Function Addresses; --------------------------------------. The addresses of :ref:`global variables <globalvars>` and; :ref:`functions <functionstructure>` are always implicitly valid; (link-time) constants. These constants are explicitly referenced when; the :ref:`identifier for the global <identifiers>` is used and always have; :ref:`pointer <t_pointer>` type. For example, the following is a legal LLVM; file:. .. code-block:: llvm. @X = global i32 17; @Y = global i32 42; @Z = global [2 x ptr] [ ptr @X, ptr @Y ]. .. _undefvalues:. Undefined Values; ----------------. The string '``undef``' can be used anywhere a constant is expected, and; indicates that the user of",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:189861,test,test,189861,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"tions available in version 5, such as =Analyze= and =AnalyzeFunction= are not available in the new TFormula class.; On the other hand formula expressions which were valid in version 5 are still valid in TFormula version 6; - TFormula is not anymore a base class for TF1. ### TF1. - Change of its inheritance structure. `TF1` has not anymore `TFormula` as a base class, so this code. ``` {.cpp}; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = (TFormula *) f1;; ```. **it is not valid anymore.**; The equivalent correct code is now. ``` {.cpp}; TF1 * f1 = new TF1(""f1"",""f1"",""sin(x)"",0,10);; TFormula * formula = f1->GetFormula();; ```. ### TGraph2DPainter. - In some case and extra point was drawn in the center od the plot when a; `TGRaph2d`was drawn with `P`, `P0`, or `PCOL` options. ### THistPainter. - It was possible to interactively zoom outside the histograms' limits. Protections; have been added.; - When an histogram was drawn with the option `E0` and log scale along the Y axis,; some additional markers were drawn at the bottom line of the plot. This was; reported <a href=""http://root.cern.ch/phpBB3/viewtopic.php?f=3&t=18778"">here</a>.; - Implement the option `0` combined with the option `COL` as requested; <a href=""https://root.cern.ch/phpBB3/viewtopic.php?f=3&t=19046"">here</a>.; When the minimum of the histogram is set to a greater value than the real minimum,; the bins having a value between the real minimum and the new minimum are not drawn; unless the option <tt>0</tt> is set. Example:. ``` {.cpp}; {; TCanvas *c1 = new TCanvas(""c1"",""c1"",600,600);; c1->Divide(1,2);; TH2F *hcol21 = new TH2F(""hcol21"",""Option COLZ"",40,-4,4,40,-20,20);; TH2F *hcol22 = new TH2F(""hcol22"",""Option COLZ0"",40,-4,4,40,-20,20);; Float_t px, py;; for (Int_t i = 0; i < 25000; i++) {; gRandom->Rannor(px,py);; hcol21->Fill(px,5*py);; hcol22->Fill(px,5*py);; }; hcol21->SetBit(TH1::kNoStats);; hcol22->SetBit(TH1::kNoStats);; gStyle->SetPalette(1);; c1->cd(1); hcol21->Draw(""COLZ"");;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v604/index.md:16654,log,log,16654,README/ReleaseNotes/v604/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v604/index.md,1,['log'],['log']
Testability,"tions for assignments where a local variable (or a field of one) is the; LHS. In rare and complicated circumstances indirect assignments might be; optimized away without being tracked, but otherwise we make our best effort to; track all variable locations. The core idea is to track more information about source assignments in order; and preserve enough information to be able to defer decisions about whether to; use non-memory locations (register, constant) or memory locations until after; middle end optimisations have run. This is in opposition to using; `llvm.dbg.declare` and `llvm.dbg.value`, which is to make the decision for most; variables early on, which can result in suboptimal variable locations that may; be either incorrect or incomplete. A secondary goal of assignment tracking is to cause minimal additional work for; LLVM pass writers, and minimal disruption to LLVM in general. ## Status and usage. **Status**: Experimental work in progress. Enabling is strongly advised against; except for development and testing. **Enable in Clang**: `-Xclang -fexperimental-assignment-tracking`. That causes Clang to get LLVM to run the pass `declare-to-assign`. The pass; converts conventional debug intrinsics to assignment tracking metadata and sets; the module flag `debug-info-assignment-tracking` to the value `i1 true`. To; check whether assignment tracking is enabled for a module call; `isAssignmentTrackingEnabled(const Module &M)` (from `llvm/IR/DebugInfo.h`). ## Design and implementation. ### Assignment markers: `llvm.dbg.assign`. `llvm.dbg.value`, a conventional debug intrinsic, marks out a position in the; IR where a variable takes a particular value. Similarly, Assignment Tracking; marks out the position of assignments with a new intrinsic called; `llvm.dbg.assign`. In order to know where in IR it is appropriate to use a memory location for a; variable, each assignment marker must in some way refer to the store, if any; (or multiple!), that performs the assignment. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:1220,test,testing,1220,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['testing']
Testability,"tions when :program:`llvm-symbolizer` is invoked by another program or; runtime. EXAMPLES; --------. All of the following examples use the following two source files as input. They; use a mixture of C-style and C++-style linkage to illustrate how these names are; printed differently (see :option:`--demangle`). .. code-block:: c. // test.h; extern ""C"" inline int foz() {; return 1234;; }. .. code-block:: c. // test.cpp; #include ""test.h""; int bar=42;. int foo() {; return bar;; }. int baz() {; volatile int k = 42;; return foz() + k;; }. int main() {; return foo() + baz();; }. These files are built as follows:. .. code-block:: console. $ clang -g test.cpp -o test.elf; $ clang -g -O2 test.cpp -o inlined.elf. Example 1 - addresses and object on command-line:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x4004d0 0x400490; foz; /tmp/test.h:1:0. baz(); /tmp/test.cpp:11:0. Example 2 - addresses on standard input:. .. code-block:: console. $ cat addr.txt; 0x4004a0; 0x400490; 0x4004d0; $ llvm-symbolizer --obj=test.elf < addr.txt; main; /tmp/test.cpp:15:0. baz(); /tmp/test.cpp:11:0. foz; /tmp/./test.h:1:0. Example 3 - object specified with address:. .. code-block:: console. $ llvm-symbolizer ""test.elf 0x400490"" ""FILE:inlined.elf 0x400480""; baz(); /tmp/test.cpp:11:0. foo(); /tmp/test.cpp:8:10. $ cat addr2.txt; FILE:test.elf 0x4004a0; inlined.elf 0x400480. $ llvm-symbolizer < addr2.txt; main; /tmp/test.cpp:15:0. foo(); /tmp/test.cpp:8:10. Example 4 - BUILDID and FILE prefixes:. .. code-block:: console. $ llvm-symbolizer ""FILE:test.elf 0x400490"" ""DATA BUILDID:123456789abcdef 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr3.txt; FILE:test.elf 0x400490; DATA BUILDID:123456789abcdef 0x601028. $ llvm-symbolizer < addr3.txt; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. Example 5 - CODE and DATA prefixes:. .. code-block:: console. $ llvm-symbolizer --obj=test.elf ""CODE 0x400490"" ""DATA 0x601028""; baz(); /tmp/test.cpp:11:0. bar; 6295592 4. $ cat addr4.txt; CODE",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:2893,test,test,2893,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"tions with hyphens; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes you may want to specify a value to your positional argument that; starts with a hyphen (for example, searching for '``-foo``' in a file). At; first, you will have trouble doing this, because it will try to find an argument; named '``-foo``', and will fail (and single quotes will not save you). Note; that the system ``grep`` has the same problem:. ::. $ spiffygrep '-foo' test.txt; Unknown command line argument '-foo'. Try: spiffygrep -help'. $ grep '-foo' test.txt; grep: illegal option -- f; grep: illegal option -- o; grep: illegal option -- o; Usage: grep -hblcnsviw pattern file . . . The solution for this problem is the same for both your tool and the system; version: use the '``--``' marker. When the user specifies '``--``' on the; command line, it is telling the program that all options after the '``--``'; should be treated as positional arguments, not options. Thus, we can use it; like this:. ::. $ spiffygrep -- -foo test.txt; ...output... Determining absolute position with getPosition(); ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Sometimes an option can affect or modify the meaning of another option. For; example, consider ``gcc``'s ``-x LANG`` option. This tells ``gcc`` to ignore the; suffix of subsequent positional arguments and force the file to be interpreted; as if it contained source code in language ``LANG``. In order to handle this; properly, you need to know the absolute position of each argument, especially; those in lists, so their interaction(s) can be applied correctly. This is also; useful for options like ``-llibname`` which is actually a positional argument; that starts with a dash. So, generally, the problem is that you have two ``cl::list`` variables that; interact in some way. To ensure the correct interaction, you can use the; ``cl::list::getPosition(optnum)`` method. This method returns the absolute; position (as found on the command line) of the ``optnum`` item",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst:28610,test,test,28610,interpreter/llvm-project/llvm/docs/CommandLine.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandLine.rst,1,['test'],['test']
Testability,"tions within the same address space. ``wavefront-one-as`` Same as ``wavefront`` but only synchronizes with; other operations within the same address space. ``singlethread-one-as`` Same as ``singlethread`` but only synchronizes with; other operations within the same address space.; ======================= ===================================================. LLVM IR Intrinsics; ------------------. The AMDGPU backend implements the following LLVM IR intrinsics. *This section is WIP.*. .. table:: AMDGPU LLVM IR Intrinsics; :name: amdgpu-llvm-ir-intrinsics-table. ============================================== ==========================================================; LLVM Intrinsic Description; ============================================== ==========================================================; llvm.amdgcn.sqrt Provides direct access to v_sqrt_f64, v_sqrt_f32 and v_sqrt_f16; (on targets with half support). Performs sqrt function. llvm.amdgcn.log Provides direct access to v_log_f32 and v_log_f16; (on targets with half support). Performs log2 function. llvm.amdgcn.exp2 Provides direct access to v_exp_f32 and v_exp_f16; (on targets with half support). Performs exp2 function. :ref:`llvm.frexp <int_frexp>` Implemented for half, float and double. :ref:`llvm.log2 <int_log2>` Implemented for float and half (and vectors of float or; half). Not implemented for double. Hardware provides; 1ULP accuracy for float, and 0.51ULP for half. Float; instruction does not natively support denormal; inputs. :ref:`llvm.sqrt <int_sqrt>` Implemented for double, float and half (and vectors). :ref:`llvm.log <int_log>` Implemented for float and half (and vectors). :ref:`llvm.exp <int_exp>` Implemented for float and half (and vectors). :ref:`llvm.log10 <int_log10>` Implemented for float and half (and vectors). :ref:`llvm.exp2 <int_exp2>` Implemented for float and half (and vectors of float or; half). Not implemented for double. Hardware provides; 1ULP accuracy for float, and 0.51ULP for half. F",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst:35954,log,log,35954,interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUUsage.rst,1,['log'],['log']
Testability,"tions). It differs from regular operations comparison with the only thing: possibility; to use ``accumulateConstantOffset`` method. So, if we get constant offset for both left and right *GEPs*, then compare it as; numbers, and return comparison result. Otherwise treat it like a regular operation (see previous paragraph). cmpOperation; ------------; Compares instruction opcodes and some important operation properties. 1. Compare opcodes, if it differs return the result. 2. Compare number of operands. If it differs – return the result. 3. Compare operation types, use *cmpType*. All the same – if types are; different, return result. 4. Compare *subclassOptionalData*, get it with ``getRawSubclassOptionalData``; method, and compare it like a numbers. 5. Compare operand types. 6. For some particular instructions, check equivalence (relation in our case) of; some significant attributes. For example, we have to compare alignment for; ``load`` instructions. O(log(N)); ---------; Methods described above implement order relationship. And latter, could be used; for nodes comparison in a binary tree. So we can organize functions set into; the binary tree and reduce the cost of lookup procedure from; O(N*N) to O(log(N)). Merging process, mergeTwoFunctions; ==================================; Once *MergeFunctions* detected that current function (*G*) is equal to one that; were analyzed before (function *F*) it calls ``mergeTwoFunctions(Function*,; Function*)``. Operation affects ``FnTree`` contents with next way: *F* will stay in; ``FnTree``. *G* being equal to *F* will not be added to ``FnTree``. Calls of; *G* would be replaced with something else. It changes bodies of callers. So,; functions that calls *G* would be put into ``Deferred`` set and removed from; ``FnTree``, and analyzed again. The approach is next:. 1. Most wished case: when we can use alias and both of *F* and *G* are weak. We; make both of them with aliases to the third strong function *H*. Actually *H*; is *F*. S",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:25747,log,log,25747,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['log']
Testability,"tions, 2D Fits. - Graphics & PostScript. - Subdirectories in a ROOT file. - **`TNtuple`**, Selections, **`TCutG`**, **`TEventList`**. - Split and Compression modes for Trees. - Analyze `Event.root` file of stress 8. - Create 10 files starting from `Event.root`. - Test chains of Trees using the 10 files. - Compare histograms of test 9 and 11. - Merging files of a chain. - Check correct rebuilt of `Event.root` in test 13. - Divert Tree branches to separate files. - Cling test (3 nested loops) with `LHCb` trigger. The program stress takes one argument, the number of events to process.; The default is 1000 events. Be aware that executing stress with 1000; events*will create several files consuming about 100 MB of disk space;*; running stress with 30 events will consume about 20 MB. The disk space; is released once stress is done. There are two ways to run `stress`:. From the system prompt or from the ROOT prompt using the interpreter. ``` {.cpp}; > cd $ROOTSYS/test; > stress // default 1000 events; > stress 30 // test with 30 events; ```. Start ROOT with the batch mode option (-b) to suppress the graphic; output. ``` {.cpp}; > root -b; root[] .L stress.cxx; root[] stress(1000)// test with 1000 events; root[] stress(30)// test with 30 events; ```. The output of stress includes a pass/fail conclusion for each test, the; total number of bytes read and written, and the elapsed real and CPU; time. It also calculates a performance index for your machine relative; to a reference machine a DELL Inspiron 7500 (Pentium III 600 MHz) with; 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means; better performance. The reference machine has 200 ROOTMARKS, so the; sample run below with 53.7 ROOTMARKS is about four times slower than the; reference machine. Here is a sample run:. ``` {.cpp}; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 :",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md:13879,test,test,13879,documentation/users-guide/TutorialsandTests.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/TutorialsandTests.md,2,['test'],['test']
Testability,"tions. This functionality is not guaranteed to remain in; future releases. However, any future changes should not affect backward; compatibility. .. _opencl_addrsp:. Address spaces attribute; ------------------------. Clang has arbitrary address space support using the ``address_space(N)``; attribute, where ``N`` is an integer number in the range specified in the; Clang source code. This addresses spaces can be used along with the OpenCL; address spaces however when such addresses spaces converted to/from OpenCL; address spaces the behavior is not governed by OpenCL specification. An OpenCL implementation provides a list of standard address spaces using; keywords: ``private``, ``local``, ``global``, and ``generic``. In the AST and; in the IR each of the address spaces will be represented by unique number; provided in the Clang source code. The specific IDs for an address space do not; have to match between the AST and the IR. Typically in the AST address space; numbers represent logical segments while in the IR they represent physical; segments.; Therefore, machines with flat memory segments can map all AST address space; numbers to the same physical segment ID or skip address space attribute; completely while generating the IR. However, if the address space information; is needed by the IR passes e.g. to improve alias analysis, it is recommended; to keep it and only lower to reflect physical memory segments in the late; machine passes. The mapping between logical and target address spaces is; specified in the Clang's source code. .. _cxx_for_opencl_impl:. C++ for OpenCL Implementation Status; ====================================. Clang implements language versions 1.0 and 2021 published in `the official; release of C++ for OpenCL Documentation; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. Limited support of experimental C++ libraries is described in the :ref:`experimental features <opencl_experimenal>`. GitHub issues for ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst:12371,log,logical,12371,interpreter/llvm-project/clang/docs/OpenCLSupport.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/OpenCLSupport.rst,1,['log'],['logical']
Testability,"tions; P0692R1; Clang 14. Default constructible and assignable stateless lambdas; P0624R2; Clang 8. Lambdas in unevaluated contexts; P0315R4; Clang 17. [[no_unique_address]] attribute; P0840R2; Clang 9. [[likely]] and [[unlikely]] attributes; P0479R5; Clang 12. typename optional in more contexts; P0634R3; Clang 16. Pack expansion in lambda init-capture; P0780R2; Clang 9. Class types as non-type template parameters; P0732R2; Clang 12. ; Generalized non-type template parameters of scalar type; P1907R1. Clang 18 (Partial); Reference type template arguments referring to instantiation-dependent objects and subobjects; (i.e. declared inside a template but neither type- nor value-dependent) aren't fully supported.; . Destroying operator delete; P0722R3; Clang 6. Relaxations of constexpr restrictions; P1064R0; Clang 9. ; P1002R1; Clang 8. P1327R1; Clang 9. P1330R0. ; P1331R2; Clang 10. P1668R1. P0784R7. Prohibit aggregates with user-declared constructors; P1008R1; Clang 8. Feature test macros; P0941R2; (see below). explicit(bool); P0892R2; Clang 9. Signed integers are two's complement; P1236R1; Clang 9. char8_t; P0482R6; Clang 7 (11). Immediate functions (consteval); P1073R3; Clang 17. ; P1937R2; Clang 14. std::is_constant_evaluated; P0595R2; Clang 9. Nested inline namespaces; P1094R2; Clang 8. Structured binding extensions; P1091R3; Clang 16. P1381R1. Stronger Unicode requirements; P1041R4; Yes. P1139R2. Parenthesized initialization of aggregates; P0960R3; Clang 16. ; P1975R0. Modules; P1103R3; Clang 15. ; P1766R1 (DR); Clang 11. P1811R0; No. P1703R1; Subsumed by P1857. ; P1874R1; Clang 15. ; P1979R0; No. ; P1779R3; Clang 15. P1857R3; No. P2115R0; Partial. P1815R2; Partial. ; P2615R1 (DR); No. ; P2788R0 (DR); No. Coroutines; P0912R5. Partial; Fully supported on all targets except Windows, which; still has some stability and ABI issues.; . Deprecate a[b,c]; P1161R3; Clang 9. Deprecate some problematic uses of volatile; P1152R4; Clang 10. [[nodiscard(""with reason"")]]; P1301R4",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html:8080,test,test,8080,interpreter/llvm-project/clang/www/cxx_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/cxx_status.html,1,['test'],['test']
Testability,"tive values. This is the prescription used by the CMS Higgs group, and agreed upon by the LHC Higgs Combination Group. There is not yet XML-based steering for the different interpolation types, but there is a simple script to modify it. . results/example_combined_GaussExample_model.root . Near term goals for HistFactory. Utilities for dealing with Monte Carlo statistical uncertainty in the template histograms; Support for N-D histograms; A new style of histogram variations without a constraint term attached (for shapes determined from control samples); XML steering for interpolation types. RooStats; General Improvements. This release brings several speed improvements to the RooStats tools and improved stability and performance with PROOF. This comes mainly through changes to the ToyMCSampler. In addition the HypoTestInverter tool has been rewritten, leading to some changes in the HypoTestResult. Finally, a new hypothesis test new called FrequentistCalculator was written, which plays the same role as the HybridCalculator but eliminates nuisance parameters in a frequentist way. ToyMCSampler. The primary interface for this class is to return a SamplingDistribution of a given TestStatistic.; The ToyMCSampler had a number of internal changes for improved performance with PROOF. These should be transparent. In addition, a new method was added RooAbsData* GenerateToyData(RooArgSet& paramPoint) that gives public access to the generation of toy data with all the same options for the treatment of nuisance parameters, binned or unbinned data, treatment of the global observables, importance sampling, etc. This is new method particularly useful for producing the expected limit bands where one needs to generate background-only pseudo-experiments in the same way that was used for the primary limit calculation. HypoTestResult. In the process of writing the new HypoTestInverter the conventions for p-values, CLb, CLs+b, and CLs were revisited. The situation is complicated by the fact",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html:1696,test,test,1696,roofit/doc/v530/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/v530/index.html,1,['test'],['test']
Testability,"tively, the stack save/restore logic could be shrink-wrapped, producing; something like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; subl $12, %esp; call L_abort$stub. Both are useful in different situations. Finally, it could be shrink-wrapped; and tail called, like this:. _test:; cmpl $0, 4(%esp); jne LBB1_1; ret; LBB1_1:; pop %eax # realign stack.; call L_abort$stub. Though this probably isn't worth it. //===---------------------------------------------------------------------===//. Sometimes it is better to codegen subtractions from a constant (e.g. 7-x) with; a neg instead of a sub instruction. Consider:. int test(char X) { return 7-X; }. we currently produce:; _test:; movl $7, %eax; movsbl 4(%esp), %ecx; subl %ecx, %eax; ret. We would use one fewer register if codegen'd as:. movsbl 4(%esp), %eax; 	neg %eax; add $7, %eax; ret. Note that this isn't beneficial if the load can be folded into the sub. In; this case, we want a sub:. int test(int X) { return 7-X; }; _test:; movl $7, %eax; subl 4(%esp), %eax; ret. //===---------------------------------------------------------------------===//. Leaf functions that require one 4-byte spill slot have a prolog like this:. _foo:; pushl %esi; subl $4, %esp; ...; and an epilog like this:; addl $4, %esp; popl %esi; ret. It would be smaller, and potentially faster, to push eax on entry and to; pop into a dummy register instead of using addl/subl of esp. Just don't pop ; into any return registers :). //===---------------------------------------------------------------------===//. The X86 backend should fold (branch (or (setcc, setcc))) into multiple ; branches. We generate really poor code for:. double testf(double a) {; return a == 0.0 ? 0.0 : (a > 0.0 ? 1.0 : -1.0);; }. For example, the entry BB is:. _testf:; subl $20, %esp; pxor %xmm0, %xmm0; movsd 24(%esp), %xmm1; ucomisd %xmm0, %xmm1; setnp %al; sete %cl; testb %cl, %al; jne LBB1_5 # UnifiedReturnBlock; LBB1_1: # cond_true. it would be better to replace the la",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:13086,test,test,13086,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"tives specified via 'xpd.putenv'; Add the configuration directive 'proofservparents' to; allow specifying a different list of parent names for the 'proofserv'; tasks. This is needed to avoid untimely killing of 'proofserv'; instances in test setups when multiple instances of the daemons are; running on the same machines under different names.; Add the possibility to switch to asynchronous mode while; running synchronously. A new button ""Run; in background"" has been added; to the dialog box. The behaviour of Ctrl-C has also been modified: the; user is prompted for a choice among continuing asynchronously, stopping; (terminating) or aborting the query.; Add the possibility to define the dataset information; sources via the directive 'xpd.datasetsrc'.; In this way the permissions; should be set correctly and the related problems disappear.; Record the logs from the ROOT version validation tests; (proofserv forked in test mode). In case of failure - or if the debug; flag is on - the log files are kept under; <xproof_adminpath>/rootsysvalidation/root.<tag>.log; (the <tag> has all the '/' replaced by '-'). This should; facilitate understanding the problems when in case of validation; failures.; Add support for automatic; running of PROOF sessions in valgrind. The second; argument of TProof::Open is used to trigger the relevant; settings. To valgrind the master session start PROOF; with TProof::Open(""<master>"",""valgrind=master"");; to valgrind two workers sessions use; TProof::Open(""<master>"",""valgrind=workers""); to valgrind; master and 2 workers, use; TProof::Open(""<master>"",""valgrind=master+workers""). Other; combinations are available. ; The valgrind logs are available with the tag; '<ordinal>-valgrind' in the log dialog or form; TProofMgr::GetSessionLogs() .; To add options to valgrind execute; TProof::AddEnvVar(""PROOF_WRAPPERCMD"",; ""valgrind_opts:<options>"") before starting the; session. ; Add new static TProof::LogViewer(""<master>""); to graphically browse the session l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html:3440,log,log,3440,proof/doc/v524/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v524/index.html,1,['log'],['log']
Testability,"tle endian so that it matches the in-memory layout on; most modern architectures. Combined with a clear separation of offset/index data and payload data for collections,; uncompressed RNTuple data can be directly mapped to memory without further copies. Goals; -----. RNTuple shall investigate improvements of the TTree I/O in the following ways. 1. More speed; * Improve mapping to vectorized and parallel hardware; * For types known at compile / JIT time: generate optimized code; * Optimized for simple types (float, int, and vectors of them); * Better memory control: work with a fixed budget of pre-defined I/O buffers; * Naturally thread-safe and asynchronous interfaces. 2. More robust interfaces; * Compile-time type safety by default; * Decomposition into layers: logical layer, primitives layer, storage layer; * Separation of data model and live data; * Self-contained I/O code to support creation of a standalone I/O library. Concepts; --------. At the **logical layer**, the user defines a data model using the RNTupleModel class.; The data model is a collection of serializable C++ types with associated names, similar to branches in a TTree.; The data model can contain (nested) collections, e.g., a type can be `std::vector<std::vector<float>>`. Each serializable type is represented by a **field**, concretely by a templated version of RField,; e.g. `RField<double>`. A field can generate or adopt an associated **value**, which represents a memory location; storing a value of the given C++ type. These distinguished memory locations are the destinations and sources for the; deserialization and serialization. The (de-)serialization is a mapping from the C++ type to the more simple **column** type system. A column contains; an arbitrary number of fixed-sized elements of a well-defined set of types: integers and floats of different; bit sizes. A C++ type may be mapped to multiple columns. For instance, an `std::vector<float>` maps to two columns,; an offset column indicating ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md:1520,log,logical,1520,tree/ntuple/v7/doc/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/README.md,1,['log'],['logical']
Testability,"tly defined:. 1. ``DW_OP_regval_type``. ``DW_OP_regval_type`` has two operands. The first is an unsigned LEB128; integer that represents a register number R. The second is an unsigned; LEB128 integer DR that represents the byte offset of a debugging information; entry D relative to the beginning of the current compilation unit, that; provides the type T of the register value. The operation is equivalent to performing ``DW_OP_regx R; DW_OP_deref_type; DR``. .. note::. Should DWARF allow the type T to be a larger size than the size of the; register R? Restricting a larger bit size avoids any issue of conversion; as the, possibly truncated, bit contents of the register is simply; interpreted as a value of T. If a conversion is wanted it can be done; explicitly using a ``DW_OP_convert`` operation. GDB has a per register hook that allows a target specific conversion on a; register by register basis. It defaults to truncation of bigger registers.; Removing use of the target hook does not cause any test failures in common; architectures. If the compiler for a target architecture did want some; form of conversion, including a larger result type, it could always; explicitly use the ``DW_OP_convert`` operation. If T is a larger type than the register size, then the default GDB; register hook reads bytes from the next register (or reads out of bounds; for the last register!). Removing use of the target hook does not cause; any test failures in common architectures (except an illegal hand written; assembly test). If a target architecture requires this behavior, these; extensions allow a composite location description to be used to combine; multiple registers. 2. ``DW_OP_deref``. S is the bit size of the generic type divided by 8 (the byte size) and; rounded up to a whole number. DR is the offset of a hypothetical debug; information entry D in the current compilation unit for a base type of the; generic type. The operation is equivalent to performing ``DW_OP_deref_type S, DR``. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst:87998,test,test,87998,interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AMDGPUDwarfExtensionsForHeterogeneousDebugging.rst,1,['test'],['test']
Testability,"tly faster.; - When creating image in SVG format, correctly convert url(""#id"") references. Bugfixes:; - Show TH2 projections also when tooltip is disabled; - use z_handle to format Z-axis labels; - Support labels on TH3 Z axis; - TH1 zooming in 3D mode; - Suppress empty {} in TLatex; - Add several math symbols for TLatex; - Font kind 1 is italic times roman; - Do not let expand parent item in hierarchy; - Use correct painter to check range; - Change proper axis attributes in context menu; - Correctly show axis labels on 3D plot; - Correctly handle circle (marker kind 24) as marker kind; - Correct circle drawing with coordinates rounding; - TLatex #frac and #splitline, adjust vertical position; - Workaround for y range when fMinimum==fMaximum!=-1111; - Correct tooltips for graph with marker drawing; - Support pow(x,n) function in formula; - Use pad.fFillColor for frame when fFrameFillColor==0; - Correctly identify horizontal TGaxis with reverse scale; - Correctly handle negative line width in exclusion; - Tooltips handling for TF1; - Potential mix-up in marker attributes handling; - Unzomming of log scale https://root-forum.cern.ch/t/25889; - Ignore not-supported options in TMultiGraph https://root-forum.cern.ch/t/25888; - Correctly use fGridColor from TStyle; - Prevent error when TPaveText includes TLine or TBox in list of lines; - Bin errors calculations in TProfile; - Correctly handle new TF1 parameter coding convention (jsroot#132); - Check if pad name can be used as element id (jsroot#133); - Adjust title position for vertical axis with fTitleOffset==0. ## Tutorials. - xml/xmlreadfile.C shows how to read and parse any xml file, supported by TXMLEngine class.; - fit/fitNormSum.C shows building of vectorized function and fitting with TF1.; - multicore/mt303_AsyncSimple.C explains uses of `Async()` and `TFuture`.; - multicore/mt304_fillHistos.C shows the new auto-binning mechanism.; - graphs/timeSeriesFromCSV_TDF.C illustrates a time axis on a TGraph with text-data ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md:30105,log,log,30105,README/ReleaseNotes/v612/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v612/index.md,1,['log'],['log']
Testability,"tmva_veto tmva/TMVA_SOFIE_RDataFrame.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RDataFrame_JIT.C); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_Inference.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_RSofieReader.C); list(APPEND tmva_veto tmva/RBatchGenerator_TensorFlow.py); endif(); if (NOT PY_SKLEARN_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_Models.py); endif(); if (NOT PY_TORCH_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_PyTorch.C); list(APPEND tmva_veto tmva/RBatchGenerator_PyTorch.py); endif(); #veto this tutorial since it is added directly; list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN_Parser.py); if (NOT PY_SONNET_FOUND OR NOT PY_GRAPH_NETS_FOUND); list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN.py); list(APPEND tmva_veto tmva/TMVA_SOFIE_GNN_Application.C); endif(); if (NOT tmva-sofie); list(APPEND tmva_veto tmva/TMVA_SOFIE_ONNX.C); else(); #copy ONNX file needed for the tutorial; configure_file(${CMAKE_SOURCE_DIR}/tmva/sofie/test/input_models/Linear_16.onnx ${CMAKE_BINARY_DIR}/tutorials/tmva/Linear_16.onnx COPYONLY); endif(). endif(). if (NOT ROOT_pythia8_FOUND); set(pythia_veto pythia/pythia8.C); else(); if(""$ENV{PYTHIA8}"" STREQUAL """"); get_filename_component(pythia8dir ""${PYTHIA8_INCLUDE_DIR}"" DIRECTORY); list(APPEND TUTORIAL_ENV PYTHIA8=${pythia8dir}); endif(); if(""$ENV{PYTHIA8DATA}"" STREQUAL """" AND PYTHIA8_DATA); list(APPEND TUTORIAL_ENV PYTHIA8DATA=${PYTHIA8_DATA}); endif(); endif(). if (NOT ROOT_vecgeom_FOUND); set(vecgeom_veto geom/tessellatedNav.C); endif(). if(root7); set(root7_veto dataframe/df013_InspectAnalysis.C; v7/browser.cxx; v7/filedialog.cxx; v7/fitpanel.cxx; v7/fitpanel6.cxx; ); if(NOT davix); list(APPEND root7_veto v7/ntuple/ntpl004_dimuon.C); list(APPEND root7_veto v7/ntuple/ntpl011_global_temperatures.C); endif(); if(NOT dataframe); list(APPEND root7_veto v7/ntuple/ntpl011_global_temperatures.C); list(APPEND root7_veto v7/ntuple/ntpl004_dimuon.C); li",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt:11715,test,test,11715,tutorials/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tutorials/CMakeLists.txt,1,['test'],['test']
Testability,"to 'CPU Time / number of threads' AND 'Compressed Throughput' is lower than expected; for your storage medium: this would imply that your CPU threads aren't decompressing data as fast as your storage; medium can provide it, and so decompression is the bottleneck.; The best way to decrease your runtime would be to utilise a system with a faster CPU, or make use; use of more threads when running, or use a compression algorithm with a higher decompression rate such as LZ4,; possibly at the cost of some extra file size. ### A note on caching. If your data is stored on a local disk, the system may cache some/all of the file in memory after it is; first read. If this is realistic of how your analysis will run - then there is no concern. However, if; you expect to only read files once in a while - and as such the files are unlikely to be in the cache -; consider clearing the cache before running rootreadspeed.; On Linux this can be done by running 'echo 3 > /proc/sys/vm/drop_caches' as a superuser,; or a specific file can be dropped from the cache with; `dd of=<FILENAME> oflag=nocache conv=notrunc,fdatasync count=0 > /dev/null 2>&1`. ### Known overhead of TTreeReader, RDataFrame. `rootreadspeed` is designed to read all data present in the specified branches, trees and files at the highest; possible speed. When the application bottleneck is not in the computations performed by analysis logic,; higher-level interfaces built on top of TTree such as TTreeReader and RDataFrame are known to add a significant; runtime overhead with respect to the runtimes reported by `rootreadspeed` (up to a factor 2). In realistic analysis; applications it has been observed that a large part of that overhead is compensated by the ability of TTreeReader and; RDataFrame to read branch values selectively, based on event cuts, and this overhead will be reduced significantly; when using RDataFrame in conjunction with RNTuple.; See also [this talk](https://indico.cern.ch/e/PPP138) (slides 16 to 19).; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/README.md:4271,log,logic,4271,tree/readspeed/README.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/readspeed/README.md,1,['log'],['logic']
Testability,"to be promoted to **official** are:. * The target must have addressed every other minimum requirement and; have been stable in tree for at least 3 months. This cool down; period is to make sure that the back-end and the target community can; endure continuous upstream development for the foreseeable future. * The target's code must have been completely adapted to this policy; as well as the :doc:`coding standards<CodingStandards>`. Any exceptions that; were made to move into experimental mode must have been fixed **before**; becoming official. * The test coverage needs to be broad and well written (small tests,; well documented). The build target ``check-all`` must pass with the; new target built, and where applicable, the ``test-suite`` must also; pass without errors, in at least one configuration (publicly; demonstrated, for example, via buildbots). * Public buildbots need to be created and actively maintained, unless; the target requires no additional buildbots (ex. ``check-all`` covers; all tests). The more relevant and public the new target's CI infrastructure; is, the more the LLVM community will embrace it. To **continue** as a supported and official target:. * The maintainer(s) must continue following these rules throughout the lifetime; of the target. Continuous violations of aforementioned rules and policies; could lead to complete removal of the target from the code base. * Degradation in support, documentation or test coverage will make the target as; nuisance to other targets and be considered a candidate for deprecation and; ultimately removed. In essence, these rules are necessary for targets to gain and retain their; status, but also markers to define bit-rot, and will be used to clean up the; tree from unmaintained targets. Those wishing to add a new target to LLVM must follow the procedure below:. 1. Read this section and make sure your target follows all requirements. For; minor issues, your community will be responsible for making all necessary; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:42213,test,tests,42213,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['tests']
Testability,"to expose it to Clad. An example of this can be seen with `gamma_cdf()` in MathFuncs.h`,; for which the custom derivative is not supported, but in this specific; instance, it falls back to Numeric Differentiation and works fine, since `; gamma_cdf()` doesn't have a lot of parameters. > In such cases, Numeric Differentiation fallback is only used for that; specific function. In above example, `gamma_cdf()` falls back to Numeric; Differentiation but other functions in `MathFuncs.h` will still be; able to use AD. This is because Clad is going to assume that you have a; derivative for this `gamma_cdf()` function, and the remaining functions will; use AD as expected. In the end, the remaining functions (including; `gamma_cdf()`) will try to fall back to Numeric Differentiation. However, if you want to add pure AD support, you need to make sure that all; your external functions are supported by Clad (meaning there is a custom; derivative defined for each of them). ### How do I test my new class while adding AD support?. Please look at the test classes that test the derivatives, evaluates,; fixtures, etc. (defined in 'roofit/roofitcore/test'). You can clone and adapt; these tests to your class as needed. For example:. > [roofit/roofitcore/test/testRooFuncWrapper.cxx](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/testRooFuncWrapper.cxx). > Tip: Tests like above can be referenced to see which parts of RooFit already; support AD. ### How do I control my compile time?. This is an area of research that still needs some work. In most cases, the; compile times are reasonable, but with an increase in the level of complexity,; higher compile times may be encountered. ## Appendix B - Where does AD Logic Implementation reside?. Following classes provide several Helper Functions to translate existing logic; into AD-supported logic. a - RooFit::Detail::CodeSquashContext. b - RooFuncWrapper. ### a. RooFit::Detail::CodeSquashContext. > [roofit/roofitcore/inc/RooF",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:28897,test,test,28897,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['test'],['test']
Testability,"to other; legal nodes for this target. #. ``include/llvm/Target/TargetSelectionDAG.td``:. Most current targets supported by LLVM generate code using the DAGToDAG; method, where SelectionDAG nodes are pattern matched to target-specific; nodes, which represent individual instructions. In order for the targets to; match an instruction to your new node, you must add a def for that node to; the list in this file, with the appropriate type constraints. Look at; ``add``, ``bswap``, and ``fadd`` for examples. #. ``lib/Target/PowerPC/PPCInstrInfo.td``:. Each target has a tablegen file that describes the target's instruction set.; For targets that use the DAGToDAG instruction selection framework, add a; pattern for your new node that uses one or more target nodes. Documentation; for this is a bit sparse right now, but there are several decent examples.; See the patterns for ``rotl`` in ``PPCInstrInfo.td``. #. TODO: document complex patterns. #. ``llvm/test/CodeGen/*``:. Add test cases for your new node to the test suite.; ``llvm/test/CodeGen/X86/bswap.ll`` is a good example. Adding a new instruction; ========================. .. warning::. Adding instructions changes the bitcode format, and it will take some effort; to maintain compatibility with the previous version. Only add an instruction; if it is absolutely necessary. #. ``llvm/include/llvm/IR/Instruction.def``:. add a number for your instruction and an enum name. #. ``llvm/include/llvm/IR/Instructions.h``:. add a definition for the class that will represent your instruction. #. ``llvm/include/llvm/IR/InstVisitor.h``:. add a prototype for a visitor to your new instruction type. #. ``llvm/lib/AsmParser/LLLexer.cpp``:. add a new token to parse your instruction from assembly text file. #. ``llvm/lib/AsmParser/LLParser.cpp``:. add the grammar on how your instruction can be read and what it will; construct as a result. #. ``llvm/lib/Bitcode/Reader/BitcodeReader.cpp``:. add a case for your instruction and how it will be parsed",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst:7983,test,test,7983,interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ExtendingLLVM.rst,2,['test'],['test']
Testability,"to the `two_dim_fit` structure pointer, see manual; - **`sizex`**: length x of the source spectrum; - **`sizey`**: length y of the source spectrum. The `two_dim_fit` structure has the form of. ``` {.cpp}; class TSpectrumTwoDimFit{. public:. int number_of_peaks; // input parameter, should be>0; int number_of_iterations; // input parameter, should be >0; int xmin; // first fitted channel in x direction; int xmax; // last fitted channel in x direction; int ymin; // first fitted channel in y direction; int ymax; // last fitted channel in y direction; double alpha; // convergence coefficient, input parameter, it should be a positive number and <=1; double chi; // here the function returns resulting chi square; int statistic_type; // type of statistics, possible values are:; // FIT2_OPTIM_CHI_COUNTS (chi square statistics with counts as weighting coefficients),; // FIT2_OPTIM_CHI_FUNC_VALUES (chi square statistics with function values as weighting coefficients),; // FIT2_OPTIM_MAX_LIKELIHOOD; int alpha_optim; // optimization of convergence coefficients, possible values are:; // FIT2_ALPHA_HALVING, FIT2_ALPHA_OPTIMAL; int power; // possible values are: FIT21_FIT_POWER2,4,6,8,10,12; int fit_taylor; // order of Taylor expansion, possible values are:; // FIT2_TAYLOR_ORDER_FIRST,; // FIT2_TAYLOR_ORDER_SECOND; double position_init_x[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 2D peaks, input parameters; double position_calc_x[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate x positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md:50360,log,logical,50360,documentation/spectrum/Spectrum.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/spectrum/Spectrum.md,1,['log'],['logical']
Testability,"to; augment the primary module map file with an additional modules. For; example, we would split the module map file above into two module map; files:. .. code-block:: c. /* module.modulemap */; module Foo {; header ""Foo.h""; }. /* module.private.modulemap */; module Foo_Private {; header ""Foo_Private.h""; }. When a ``module.private.modulemap`` file is found alongside a; ``module.modulemap`` file, it is loaded after the ``module.modulemap``; file. In our example library, the ``module.private.modulemap`` file; would be available when ``Foo_Private.h`` is available, making it; easier to split a library's public and private APIs along header; boundaries. When writing a private module as part of a *framework*, it's recommended that:. * Headers for this module are present in the ``PrivateHeaders`` framework; subdirectory.; * The private module is defined as a *top level module* with the name of the; public framework prefixed, like ``Foo_Private`` above. Clang has extra logic; to work with this naming, using ``FooPrivate`` or ``Foo.Private`` (submodule); trigger warnings and might not work as expected. Modularizing a Platform; =======================; To get any benefit out of modules, one needs to introduce module maps for software libraries starting at the bottom of the stack. This typically means introducing a module map covering the operating system's headers and the C standard library headers (in ``/usr/include``, for a Unix system). The module maps will be written using the `module map language`_, which provides the tools necessary to describe the mapping between headers and modules. Because the set of headers differs from one system to the next, the module map will likely have to be somewhat customized for, e.g., a particular distribution and version of the operating system. Moreover, the system headers themselves may require some modification, if they exhibit any anti-patterns that break modules. Such common patterns are described below. **Macro-guarded copy-and-pas",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:51803,log,logic,51803,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['log'],['logic']
Testability,"tom classes, this; approach of extracting free functions in a separate header file is not; suitable, since they can't put the code in a header that is part of the ROOT; installation. Please note the following recommendations:. - while developing your custom class, add these functions to your classes; header file (e.g., as part of the class definition), and. - if/when your class is upstreamed to RooFit, expect to move into the; `RooFit::detail` namespace and their implementations into `MathFuncs.h`. \htmlonly; </div>; \endhtmlonly. *Overriding the Translate Function*: The `RooAbsArg::translate()` function; needs to be overridden to specify how the class is translating to C++ code; that is using the aforementioned free function. **Sample Steps**: To add Code Generation support to an existing RooFit class,; following is a sample set of steps (using the aforementioned approach of; extracting free functions in a separate file.). **1. Extract logic into a separate file** Implement what your class is; supposed to do as a free function in [MathFuncs].; This implementation must be compatible with the syntax supported by Clad. **2. Refactor evaluate():** Refactor the existing `RooAbsReal::evaluate()`; function to use the `MathFuncs.h` implementation. This is optional, but; can reduce code duplication and potential for bugs. This may require some; effort if an extensive caching infrastructure is used in your model. **3. Add translate():** RooFit classes are extended using a (typically) simple; `translate()` function that extracts the mathematically differentiable; properties out of the RooFit classes that make up the statistical model. The `translate()` function helps implement the Code Squashing logic that is; used to optimize numerical evaluations. It accomplishes this by using a small; subset of helper functions that are available in the; `RooFit::Detail::CodeSquashContext` and `RooFuncWrapper` classes; (see Appendix B). It converts a RooFit expression into a form that can b",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md:7633,log,logic,7633,roofit/doc/developers/roofit_ad.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/doc/developers/roofit_ad.md,1,['log'],['logic']
Testability,"tomatic (stack) storage. Thus one may access; functions and global variables as one would expect, as well as static; local variables. [testme]. Local automatic (stack) variables referenced within the compound; statement of a Block are imported and captured by the Block as const; copies. The capture (binding) is performed at the time of the Block; literal expression evaluation. The compiler is not required to capture a variable if it can prove; that no references to the variable will actually be evaluated.; Programmers can force a variable to be captured by referencing it in a; statement at the beginning of the Block, like so:. .. code-block:: c. (void) foo;. This matters when capturing the variable has side-effects, as it can; in Objective-C or C++. The lifetime of variables declared in a Block is that of a function;; each activation frame contains a new copy of variables declared within; the local scope of the Block. Such variable declarations should be; allowed anywhere [testme] rather than only when C99 parsing is; requested, including for statements. [testme]. Block literal expressions may occur within Block literal expressions; (nest) and all variables captured by any nested blocks are implicitly; also captured in the scopes of their enclosing Blocks. A Block literal expression may be used as the initialization value for; Block variables at global or local static scope. The Invoke Operator; ===================. Blocks are :block-term:`invoked` using function call syntax with a; list of expression parameters of types corresponding to the; declaration and returning a result type also according to the; declaration. Given:. .. code-block:: c. int (^x)(char);; void (^z)(void);; int (^(*y))(char) = &x;. the following are all legal Block invocations:. .. code-block:: c. x('a');; (*y)('a');; (true ? x : *y)('a'). The Copy and Release Operations; ===============================. The compiler and runtime provide :block-term:`copy` and; :block-term:`release` operations for",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst:5370,test,testme,5370,interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,1,['test'],['testme']
Testability,"top Files\foo_test.s.tmp``. ``%errc_<ERRCODE>``. Some error messages may be substituted to allow different spellings; based on the host platform. The following error codes are currently supported:; ENOENT, EISDIR, EINVAL, EACCES. Example: ``Linux %errc_ENOENT: No such file or directory``. Example: ``Windows %errc_ENOENT: no such file or directory``. ``%if feature %{<if branch>%} %else %{<else branch>%}``. Conditional substitution: if ``feature`` is available it expands to; ``<if branch>``, otherwise it expands to ``<else branch>``.; ``%else %{<else branch>%}`` is optional and treated like ``%else %{%}``; if not present. ``%(line)``, ``%(line+<number>)``, ``%(line-<number>)``. The number of the line where this substitution is used, with an; optional integer offset. These expand only if they appear; immediately in ``RUN:``, ``DEFINE:``, and ``REDEFINE:`` directives.; Occurrences in substitutions defined elsewhere are never expanded.; For example, this can be used in tests with multiple RUN lines,; which reference the test file's line numbers. **LLVM-specific substitutions:**. ``%shlibext``; The suffix for the host platforms shared library files. This includes the; period as the first character. Example: ``.so`` (Linux), ``.dylib`` (macOS), ``.dll`` (Windows). ``%exeext``; The suffix for the host platforms executable files. This includes the; period as the first character. Example: ``.exe`` (Windows), empty on Linux. **Clang-specific substitutions:**. ``%clang``; Invokes the Clang driver. ``%clang_cpp``; Invokes the Clang driver for C++. ``%clang_cl``; Invokes the CL-compatible Clang driver. ``%clangxx``; Invokes the G++-compatible Clang driver. ``%clang_cc1``; Invokes the Clang frontend. ``%itanium_abi_triple``, ``%ms_abi_triple``; These substitutions can be used to get the current target triple adjusted to; the desired ABI. For example, if the test suite is running with the; ``i686-pc-win32`` target, ``%itanium_abi_triple`` will expand to; ``i686-pc-mingw32``. This a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:27122,test,tests,27122,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,['test'],"['test', 'tests']"
Testability,"tor operates in C++ mode, utilizing C++ reference types, while; ``-fbounds-safety`` does not currently support C++. This means LLDB’s expression; evaluator can only evaluate a subset of the ``-fbounds-safety`` language model.; Specifically, it’s capable of evaluating the wide pointers that already exist in; the source code. All other expressions are evaluated according to C/C++; semantics. C++ support; ===========. C++ has multiple options to write code in a bounds-safe manner, such as; following the bounds-safety core guidelines and/or using hardened libc++ along; with the `C++ Safe Buffer model; <https://discourse.llvm.org/t/rfc-c-buffer-hardening/65734>`_. However, these; techniques may require ABI changes and may not be applicable to code; interoperating with C. When the ABI of an existing program needs to be preserved; and for headers shared between C and C++, ``-fbounds-safety`` offers a potential; solution. ``-fbounds-safety`` is not currently supported in C++, but we believe the; general approach would be applicable for future efforts. Upstreaming plan; ================. Gradual updates with experimental flag; --------------------------------------. The upstreaming will take place as a series of smaller PRs and we will guard our; implementation with an experimental flag ``-fexperimental-bounds-safety`` until; the usable model is fully upstreamed. Once the model is ready for use, we will; expose the flag ``-fbounds-safety``. Possible patch sets; -------------------. * External bounds annotations and the (late) parsing logic.; * Internal bounds annotations (wide pointers) and their parsing logic.; * Clang code generation for wide pointers with debug information.; * Pointer cast semantics involving bounds annotations (this could be divided; into multiple sub-PRs).; * CFG analysis for pairs of related pointer and count assignments and the likes.; * Bounds check expressions in AST and the Clang code generation (this could also; be divided into multiple sub-PRs). ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst:11567,log,logic,11567,interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BoundsSafetyImplPlans.rst,2,['log'],['logic']
Testability,"tor*() on an end of a; stream is undefined.; Source: C++03 24.5.3p2; C++11 24.6.3p2. #include <vector>. int test() {; std::vector<int> v;; return *v.end(); // warn; }. undefbehavior.QsortNonPODNonTrivial; (C++); C++03: Undefined behavior: the objects in the array passed to qsort are of; non-POD type.; C++11: Undefined behavior: the objects in the array passed to qsort are of; non-trivial type.; Source: C++03 25.4p4; C++11 25.5p4. // C++03; #include <cstdlib>. struct non_POD {; non_POD();; };. non_POD values[] = { non_POD(), non_POD() };. int compare(const void *a, const void *b);. void test() {; qsort(values, 2, sizeof(non_POD), compare); // warn; }. // C++11; #include <cstdlib>. struct S {};. struct trivial_non_POD : public S {; int i;; };. struct non_trivial {; int i;; non_trivial();; };. trivial_non_POD tnp[2];; non_trivial nt[2];. int compare1(const void *a, const void *b);. int compare2(const void *a, const void *b);. void test() {; qsort(tnp, 2, sizeof(trivial_non_POD), compare1); // ok; qsort(nt, 2, sizeof(non_trivial), compare2); // warn; }. undefbehavior.ThrowWhileCopy; (C++); Undefined behavior: copy constructor/assignment operator can throw an exception.; The effects are undefined if an exception is thrown. class C {; public:; int i, j;; C (const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. class C {; public:; int i, j;; C &operator=(const C &c) {; i = c.i;; throw 1; // warn; j = c.j;; };; };. undefbehavior.ValarrayArgBound; (C++); Undefined behavior: the value of the n argument passed; to valarray constructor is greater than the number of values; pointed to by the first argument (source).; Source: C++03 26.3.2.1p4; C++11 26.6.2.2p4. #include <valarray>. struct S {; int i;; S(int ii) : i(ii) {};; };. void test(void) {; S s[] = { S(1), S(2) };; std::valarray<S> v(s,3); // warn; }. undefbehavior.ValarrayLengthDiffer; (C++); Undefined behavior: valarray operands are of different length.; Source: C++03 26.3.2.2p1, 26.3.2.6p3, 26.3.3.1p3, 26.3.3.2p3;;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:14979,test,test,14979,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,torMultiDim.cxx; src/BasicMinimizer.cxx; src/BinData.cxx; src/BrentMethods.cxx; src/BrentMinimizer1D.cxx; src/BrentRootFinder.cxx; src/ChebyshevPol.cxx; src/DataRange.cxx; src/Delaunay2D.cxx; src/DistSampler.cxx; src/DistSamplerOptions.cxx; src/Factory.cxx; src/FitConfig.cxx; src/FitData.cxx; src/FitResult.cxx; src/FitUtil.cxx; src/Fitter.cxx; src/GaussIntegrator.cxx; src/GaussLegendreIntegrator.cxx; src/GenAlgoOptions.cxx; src/GoFTest.cxx; src/IOptions.cxx; src/Integrator.cxx; src/IntegratorOptions.cxx; src/MersenneTwisterEngine.cxx; src/MinimTransformFunction.cxx; src/Minimizer.cxx; src/MinimizerOptions.cxx; src/MinimizerVariableTransformation.cxx; src/MixMaxEngineImpl17.cxx; src/MixMaxEngineImpl240.cxx; src/MixMaxEngineImpl256.cxx; src/ParameterSettings.cxx; src/PdfFuncMathCore.cxx; src/ProbFuncMathCore.cxx; src/QuantFuncMathCore.cxx; src/RandomFunctions.cxx; src/RanluxppEngineImpl.cxx; src/RichardsonDerivator.cxx; src/RootFinder.cxx; src/SparseData.cxx; src/SpecFuncCephes.cxx; src/SpecFuncCephes.h; src/SpecFuncCephesInv.cxx; src/SpecFuncMathCore.cxx; src/StdEngine.cxx; src/TComplex.cxx; src/TKDTree.cxx; src/TKDTreeBinning.cxx; src/TMath.cxx; src/TRandom.cxx; src/TRandom1.cxx; src/TRandom2.cxx; src/TRandom3.cxx; src/TRandomGen.cxx; src/TStatistic.cxx; src/UnBinData.cxx; src/VectorizedTMath.cxx; LIBRARIES; ${MATHCORE_LIBRARIES}; DICTIONARY_OPTIONS; -writeEmptyRootPCM; ${dictoptions}; DEPENDENCIES; Core; ${MATHCORE_DEPENDENCIES}; BUILTINS; ${MATHCORE_BUILTINS}; ). target_include_directories(MathCore PRIVATE ${Vc_INCLUDE_DIR}); target_include_directories(MathCore PRIVATE ${VecCore_INCLUDE_DIRS}). list(APPEND math_incl ${Vc_INCLUDE_DIR}); list(APPEND math_incl ${VecCore_INCLUDE_DIRS}). foreach(incl ${math_incl}); target_include_directories(MathCore PUBLIC $<BUILD_INTERFACE:${incl}>); endforeach(). target_compile_definitions(MathCore INTERFACE ${VecCore_DEFINITIONS}); target_link_libraries(MathCore PRIVATE ${CMAKE_THREAD_LIBS_INIT}). ROOT_ADD_TEST_SUBDIRECTORY(test); ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt:5502,test,test,5502,math/mathcore/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/math/mathcore/CMakeLists.txt,1,['test'],['test']
Testability,"torisedPDFTests INTERFACE ""${VTUNE_DIR}/lib64/libittnotify.a""); endif(). add_library(VectorisedPDFTests STATIC VectorisedPDFTests.cxx); target_link_libraries(VectorisedPDFTests PUBLIC gtest ROOT::Gpad ROOT::RooFitCore ROOT::RooFit). ROOT_ADD_GTEST(testCompatMode testCompatMode.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGauss testGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPoisson testPoisson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testAddPdf testAddPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testExponential testExponential.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testNestedPDFs testNestedPDFs.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testProductPdf testProductPdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testJohnson testJohnson.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLandau testLandau.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBukin testBukin.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testChebychev testChebychev.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testPolynomial testPolynomial.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBernstein testBernstein.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testArgusBG testArgusBG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBifurGauss testBifurGauss.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testBreitWigner testBreitWigner.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testCBShape testCBShape.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testGamma testGamma.cxx; LIBRARIES VectorisedPDFTests); if(ROOT_mathmore_FOUND); ROOT_ADD_GTEST(testLegendre testLegendre.cxx; LIBRARIES VectorisedPDFTests ROOT::RooFitMore); endif(); ROOT_ADD_GTEST(testChiSquarePdf testChiSquarePdf.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testDstD0BG testDstD0BG.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTEST(testLognormal testLognormal.cxx; LIBRARIES VectorisedPDFTests); ROOT_ADD_GTES",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt:1424,test,testChebychev,1424,roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofit/test/vectorisedPDFs/CMakeLists.txt,2,['test'],['testChebychev']
Testability,"tory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on W",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:5320,test,test,5320,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"tory_properties(PROPERTIES ADDITIONAL_CLEAN_FILES ""${library_output_dir}/modules.timestamp""); endif(). #---hsimple.root---------(use the executable for clearer dependencies and proper return code)---; add_custom_target(hsimple ALL DEPENDS tutorials/hsimple.root); add_dependencies(hsimple onepcm); if(WIN32); set(hsimple_cmd COMMAND ${CMAKE_COMMAND} -E env PATH=""${CMAKE_RUNTIME_OUTPUT_DIRECTORY}\\\;%PATH%""; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); else(); set(hsimple_cmd COMMAND ${MODULES_ROOT_INCPATH} ${ld_library_path}=${CMAKE_LIBRARY_OUTPUT_DIRECTORY}:$ENV{${ld_library_path}}; ROOTIGNOREPREFIX=1 ROOT_HIST=0 $<TARGET_FILE:root.exe> -l -q -b -n -x hsimple.C -e return); endif(); add_custom_command(OUTPUT tutorials/hsimple.root; ${hsimple_cmd}; WORKING_DIRECTORY tutorials; DEPENDS $<TARGET_FILE:root.exe> Cling Hist Tree Gpad Graf HistPainter move_artifacts); install(FILES ${CMAKE_BINARY_DIR}/tutorials/hsimple.root DESTINATION ${CMAKE_INSTALL_TUTDIR} COMPONENT tests). if(runtime_cxxmodules); add_dependencies(hsimple modules_idx); endif(). #---copy special headers required for building on Windows----------------------------------------; if(WIN32); file(COPY cmake/win/w32pragma.h DESTINATION ${CMAKE_BINARY_DIR}/include/); file(COPY cmake/win/sehmap.h DESTINATION ${CMAKE_BINARY_DIR}/include/); endif(). #---version--------------------------------------------------------------------------------------; if(NOT WIN32); add_custom_target(version COMMAND ${Python3_EXECUTABLE} ${CMAKE_SOURCE_DIR}/cmake/unix/makeversion.py; WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}); endif(). #---distribution commands------------------------------------------------------------------------; add_custom_target(distsrc COMMAND ${CMAKE_SOURCE_DIR}/cmake/unix/makedistsrc.sh ""${ROOT_FULL_VERSION}"" ""${CMAKE_SOURCE_DIR}""); add_custom_target(dist COMMAND cpack --config CPackConfig.cmake). #---Configure and install various files neded later and for clients ------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt:23847,test,tests,23847,CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/CMakeLists.txt,1,['test'],['tests']
Testability,"tput; 4. Fix - do not show tooltips for empty TProfile bins; 5. Fix - statbox toggling was not working on subpads; 6. Fix - positioning of 3D objects in Webkit browsers in complex layouts; 7. Fix - difference in TF1 between ROOT5/6 (#54). ## Changes in 4.5.0; 1. Zooming with mouse wheel; 2. Context menus for many different objects attributes are provided; 3. Context menu for every drawn object can be activated via toolbar button; 4. Support browsing of TTask and derived classes (#40); 5. Apply user range for drawing TH1/TH2 histograms, also when superimposed (#44); 6. Implement scaling factor like x10^3 on the vertical axes; 7. Provide shortcut buttons for each subpad; 8. Implement simple drawing for TBox, TWbox, TSliderBox classes. ## Changes in 4.4.4; 1. Fix - toggling of statbox was not working in all situations; 2. Fix - for mouse rect zooming use only left mouse button; 3. Fix - correctly draw TH2 with lego option, when histogram has negative bin content; 4. Fix - log axis drawing with no visible ticks. ## Changes in 4.4.3; 1. Fix - wrong selection of TH1 Y axis range when errors are displayed (#44); 2. Fix - apply user range for TH1 X-axis zooming (#44); 3. Fix - protect against pathological case of 1-bin histogram; 4. Fix - use error plot by default in TH1 only when positive sumw2 entry exists; 5. Fix - for TH2 box draw option draw at least 1px rect for non-empty bin; 6. Fix - support transparency (alpha) in TColor (#45); 7. Fix - correct tooltip handling for graphs with lines and markers; 8. Fix - interactive zooming in TH2 when doing histogram update. ## Changes in 4.4.2; 1. Fix - statistic collection for TH2; 2. Fix - correct handling of empty TList in browser/inspector; 3. Fix - support TFolder in browser/inspector (#40). ## Changes in 4.4.1; 1. Fix - colz palette resize when drawing histogram second time; 2. Fix - use embedded in TCanvas color for background color of canvas itself; 3. Fix - rotate too long X axis text labels; 4. Fix - draw histogram bins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/js/changes.md:55221,log,log,55221,js/changes.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/js/changes.md,1,['log'],['log']
Testability,"trace format; described by `XRay FDR format <XRayFDRFormat.html>`_. When FDR mode is on, it will keep writing and recycling memory buffers until; the logging implementation is finalized -- at which point it can be flushed and; re-initialised later. To do this programmatically, we follow the workflow; provided below:. .. code-block:: c++. // Patch the sleds, if we haven't yet.; auto patch_status = __xray_patch();. // Maybe handle the patch_status errors. // When we want to flush the log, we need to finalize it first, to give; // threads a chance to return buffers to the queue.; auto finalize_status = __xray_log_finalize();; if (finalize_status != XRAY_LOG_FINALIZED) {; // maybe retry, or bail out.; }. // At this point, we are sure that the log is finalized, so we may try; // flushing the log.; auto flush_status = __xray_log_flushLog();; if (flush_status != XRAY_LOG_FLUSHED) {; // maybe retry, or bail out.; }. The default settings for the FDR mode implementation will create logs named; similarly to the basic log implementation, but will have a different log; format. All the trace analysis tools (and the trace reading library) will; support all versions of the FDR mode format as we add more functionality and; record types in the future. **NOTE:** We do not promise perpetual support for when we update the log; versions we support going forward. Deprecation of the formats will be; announced and discussed on the developers mailing list. Trace Analysis Tools; --------------------. We currently have the beginnings of a trace analysis tool in LLVM, which can be; found in the ``tools/llvm-xray`` directory. The ``llvm-xray`` tool currently; supports the following subcommands:. - ``extract``: Extract the instrumentation map from a binary, and return it as; YAML.; - ``account``: Performs basic function call accounting statistics with various; options for sorting, and output formats (supports CSV, YAML, and; console-friendly TEXT).; - ``convert``: Converts an XRay log file from on",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst:10636,log,logs,10636,interpreter/llvm-project/llvm/docs/XRay.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRay.rst,3,['log'],"['log', 'logs']"
Testability,"trange thing is that it requires the LHS to be a variable. It; is invalid to have ""(x+1) = expr"" - only things like ""x = expr"" are; allowed. .. code-block:: c++. // Codegen the RHS.; Value *Val = RHS->codegen();; if (!Val); return nullptr;. // Look up the name.; Value *Variable = NamedValues[LHSE->getName()];; if (!Variable); return LogErrorV(""Unknown variable name"");. Builder->CreateStore(Val, Variable);; return Val;; }; ... Once we have the variable, codegen'ing the assignment is; straightforward: we emit the RHS of the assignment, create a store, and; return the computed value. Returning a value allows for chained; assignments like ""X = (Y = Z)"". Now that we have an assignment operator, we can mutate loop variables; and arguments. For example, we can now run code like this:. ::. # Function to print a double.; extern printd(x);. # Define ':' for sequencing: as a low-precedence operator that ignores operands; # and just returns the RHS.; def binary : 1 (x y) y;. def test(x); printd(x) :; x = 4 :; printd(x);. test(123);. When run, this example prints ""123"" and then ""4"", showing that we did; actually mutate the value! Okay, we have now officially implemented our; goal: getting this to work requires SSA construction in the general; case. However, to be really useful, we want the ability to define our; own local variables, let's add this next!. User-defined Local Variables; ============================. Adding var/in is just like any other extension we made to; Kaleidoscope: we extend the lexer, the parser, the AST and the code; generator. The first step for adding our new 'var/in' construct is to; extend the lexer. As before, this is pretty trivial, the code looks like; this:. .. code-block:: c++. enum Token {; ...; // var definition; tok_var = -13; ...; }; ...; static int gettok() {; ...; if (IdentifierStr == ""in""); return tok_in;; if (IdentifierStr == ""binary""); return tok_binary;; if (IdentifierStr == ""unary""); return tok_unary;; if (IdentifierStr == ""var""); return ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst:22473,test,test,22473,interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/MyFirstLanguageFrontend/LangImpl07.rst,1,['test'],['test']
Testability,transformational.cpp; flang/runtime/type-code.cpp; flang/runtime/type-info.cpp; flang/runtime/type-info.h; flang/runtime/unit-map.cpp; flang/runtime/unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/Ra,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:126993,log,logical,126993,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['log'],['logical']
Testability,"tream2<char>;; p1->narrow('a', 'b'); // warn; p2->narrow('a', 'b'); // ok; }. undefbehavior.MinusOnePosType; (C++); Undefined behavior: passing -1 to any streambuf/; istream/ostream member that accepts a value of; type traits::pos_type result in undefined behavior.; Source: C++03 27.4.3.2p3; C++11 27.5.4.2p3. #include <fstream>. class my_streambuf : public std::streambuf {; void f() {; seekpos(-1); // warn; }; };. #include <fstream>. void test() {; std::filebuf fb;; std::istream in(&fb);; std::filebuf::off_type pos(-1);; in.seekg(pos); // warn; }. different. Name, DescriptionExampleProgress. different.SuccessiveAssign; (C); Successive assign to a variable. int test() {; int i;; i=1;; i=2; // warn; return i;; }. different.NullDerefStmtOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {; int x;; };. struct S* f();. void test() {; struct S *p1 = f();; int x1 = p1->x; // warn; if (p1) {};. struct S *p2 = f();; int x2 = p2->x; // ok; }. different.NullDerefCondOrder; (C); Dereferencing of the null pointer might take place. Checking the pointer for; null should be performed first.; Note: possibly an enhancement to ; core.NullDereference. struct S {int i;};. struct S* f();. void test() {; struct S *p = f();; if (p->i && p) {}; // warn; }. different.MultipleAccessors; (C++); Identical accessor bodies. Possibly a misprint. class A {; int i;; int j;; public:; int getI() { return i; }; int getJ() { return i; } // warn; };. class A {; int i;; int j;; public:; void setI(int& ii) { i = ii; }; void setJ(int& jj) { i = jj; } // warn; };. different.AccessorsForPublic; (C++); Accessors exist for a public class field. Should this field really be; public?. class A {; public:; int i; // warn; int getI() { return i; }; void setI(int& ii) { i = ii; }; };. different.LibFuncResultUnised; (C, C++); Calling a function ignoring its return value is of no use ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:20043,test,test,20043,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"tributes, and ``DocCatStmt`` for statement attributes. A custom documentation; category should be used for groups of attributes with similar functionality.; Custom categories are good for providing overview information for the attributes; grouped under it. For instance, the consumed annotation attributes define a; custom category, ``DocCatConsumed``, that explains what consumed annotations are; at a high level. Documentation content (whether it is for an attribute or a category) is written; using reStructuredText (RST) syntax. After writing the documentation for the attribute, it should be locally tested; to ensure that there are no issues generating the documentation on the server.; Local testing requires a fresh build of clang-tblgen. To generate the attribute; documentation, execute the following command::. clang-tblgen -gen-attr-docs -I /path/to/clang/include /path/to/clang/include/clang/Basic/Attr.td -o /path/to/clang/docs/AttributeReference.rst. When testing locally, *do not* commit changes to ``AttributeReference.rst``.; This file is generated by the server automatically, and any changes made to this; file will be overwritten. Arguments; ~~~~~~~~~; Attributes may optionally specify a list of arguments that can be passed to the; attribute. Attribute arguments specify both the parsed form and the semantic; form of the attribute. For example, if ``Args`` is; ``[StringArgument<""Arg1"">, IntArgument<""Arg2"">]`` then; ``__attribute__((myattribute(""Hello"", 3)))`` will be a valid use; it requires; two arguments while parsing, and the Attr subclass' constructor for the; semantic attribute will require a string and integer argument. All arguments have a name and a flag that specifies whether the argument is; optional. The associated C++ type of the argument is determined by the argument; definition type. If the existing argument types are insufficient, new types can; be created, but it requires modifying `utils/TableGen/ClangAttrEmitter.cpp; <https://github.com/llvm/llvm-",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:136381,test,testing,136381,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['testing']
Testability,"tric matrices; in contrast to the; iterator access methods which behave differently (it follows the data; order). ``` {.cpp}; SMatrix33 m;; m(0,0) = 1; // set the element in first row and first column; *(m.begin()+1) = 2; // set the second element (0,1); double d[9]={1,2,3,4,5,6,7,8,9};; m.SetElements(d,d+9); // set the d[] values in m; double x = m(2,1); // return the element in 3; x = m.apply(7); // return the 8-th element (row=2,col=1); x = *(m.begin()+7); // return the 8-th element (row=2,col=1); // symmetric matrices; //(note the difference in behavior between apply and the iterators); x = *(m.begin()+4) // return the element (row=2,col=1); x = m.apply(7); // returns again the (row=2,col=1) element; ```. There are methods to place and/or retrieve **`ROOT::Math::SVector`**; objects as rows or columns in (from) a matrix. In addition one can put; (get) a sub-matrix as another **`ROOT::Math::SMatrix`** object in a; matrix. If the size of the sub-vector or sub-matrix is larger than the; matrix size a static assert (a compilation error) is produced. The; non-const methods are:. ``` {.cpp}; SMatrix33 m;; SVector2 v2(1,2);; // place a vector in the first row from; // element (0,1) : m(0,1)=v2[0]; m.Place_in_row(v2,0,1);; // place the vector in the second column from; // (0,1) : m(0,1) = v2[0]; m.Place in_col(v2,0,1);; SMatrix22 m2;; // place m2 in m starting from the; // element (1,1) : m(1,1) = m2(0,0); m.Place_at(m2,1,1);; SVector3 v3(1,2,3);; // set v3 as the diagonal elements; // of m : m(i,i) = v3[i] for i=0,1,2; m.SetDiagonal(v3); ```. The const methods retrieving contents (getting slices of a matrix) are:. ``` {.cpp}; a = {1,2,3,4,5,6,7,8,9};; SMatrix33 m(a,a+9);; SVector3 irow = m.Row(0); // return as vector the first row; SVector3 jcol = m.Col(1); // return as vector the second column. // return a slice of the first row from; // (0,1): r2[0]= m(0,1); r2[1]=m(0,2); SVector2 r2 = m.SubRow<SVector2> (0,1);; // return a slice of the second column from; // (0,1): c2",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md:110413,assert,assert,110413,documentation/users-guide/MathLibraries.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/MathLibraries.md,1,['assert'],['assert']
Testability,"tring. The delimiter can be the empty string. ``!isa<``\ *type*\ ``>(``\ *a*\ ``)``; This operator produces 1 if the type of *a* is a subtype of the given *type*; 0; otherwise. ``!le(``\ *a*\ ``,`` *b*\ ``)``; This operator produces 1 if *a* is less than or equal to *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, or ``string`` values. ``!listconcat(``\ *list1*\ ``,`` *list2*\ ``, ...)``; This operator concatenates the list arguments *list1*, *list2*, etc., and; produces the resulting list. The lists must have the same element type. ``!listremove(``\ *list1*\ ``,`` *list2*\ ``)``; This operator returns a copy of *list1* removing all elements that also occur in; *list2*. The lists must have the same element type. ``!listsplat(``\ *value*\ ``,`` *count*\ ``)``; This operator produces a list of length *count* whose elements are all; equal to the *value*. For example, ``!listsplat(42, 3)`` results in; ``[42, 42, 42]``. ``!logtwo(``\ *a*\ ``)``; This operator produces the base 2 log of *a* and produces the integer; result. The log of 0 or a negative number produces an error. This; is a flooring operation. ``!lt(``\ *a*\ `,` *b*\ ``)``; This operator produces 1 if *a* is less than *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, or ``string`` values. ``!mul(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator multiplies *a*, *b*, etc., and produces the product. ``!ne(``\ *a*\ `,` *b*\ ``)``; This operator produces 1 if *a* is not equal to *b*; 0 otherwise.; The arguments must be ``bit``, ``bits``, ``int``, ``string``,; or record values. Use ``!cast<string>`` to compare other types of objects. ``!not(``\ *a*\ ``)``; This operator performs a logical NOT on *a*, which must be; an integer. The argument 0 results in 1 (true); any other; argument results in 0 (false). ``!or(``\ *a*\ ``,`` *b*\ ``, ...)``; This operator does a bitwise OR on *a*, *b*, etc., and produces the; result. A logical OR can be performed if all the arguments are either; 0 o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:68532,log,logtwo,68532,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,2,['log'],"['log', 'logtwo']"
Testability,"triple components (``target=mips-{{.*}}``); and it's generally a good idea to use a trailing wildcard to allow for; unexpected suffixes. Also, it's generally better to write regular expressions that use entire; triple components, than to do something clever to shorten them. For; example, to match both freebsd and netbsd in an expression, you could write; ``target={{.*(free|net)bsd.*}}`` and that would work. However, it would; prevent a ``grep freebsd`` from finding this test. Better to use:; ``target={{.+-freebsd.*}} || target={{.+-netbsd.*}}``. Substitutions; -------------. Besides replacing LLVM tool names the following substitutions are performed in; RUN lines:. ``%%``; Replaced by a single ``%``. This allows escaping other substitutions. ``%s``; File path to the test case's source. This is suitable for passing on the; command line as the input to an LLVM tool. Example: ``/home/user/llvm/test/MC/ELF/foo_test.s``. ``%S``; Directory path to the test case's source. Example: ``/home/user/llvm/test/MC/ELF``. ``%t``; File path to a temporary file name that could be used for this test case.; The file name won't conflict with other test cases. You can append to it; if you need multiple temporaries. This is useful as the destination of; some redirected output. Example: ``/home/user/llvm.build/test/MC/ELF/Output/foo_test.s.tmp``. ``%T``; Directory of ``%t``. Deprecated. Shouldn't be used, because it can be easily; misused and cause race conditions between tests. Use ``rm -rf %t && mkdir %t`` instead if a temporary directory is necessary. Example: ``/home/user/llvm.build/test/MC/ELF/Output``. ``%{pathsep}``. Expands to the path separator, i.e. ``:`` (or ``;`` on Windows). ``${fs-src-root}``; Expands to the root component of file system paths for the source directory,; i.e. ``/`` on Unix systems or ``C:\`` (or another drive) on Windows. ``${fs-tmp-root}``; Expands to the root component of file system paths for the test's temporary; directory, i.e. ``/`` on Unix systems or ``",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:24147,test,test,24147,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"trix`:; Matrices with a templated package `spectrum`: Peak finder, background,; deconvolutions `splot`: Example of the **`TSplot`** class; (signal/background estimator) `sql`: Interfaces to SQL (mysql, oracle,; etc) `thread`: Using Threads `tmva`: Examples of the MultiVariate; Analysis classes `tree`: Creating Trees, Playing with Trees `unuran`:; Interface with the unuram random generator library `xml`:; Writing/Reading xml files. You can execute the scripts in `$ROOTSYS/tutorials`; (or sub-directories) by setting your current directory in the script; directory or from any user directory with write access. Several; tutorials create new files. If you have write access to the tutorials; directory, the new files will be created in the tutorials directory,; otherwise they will be created in the user directory. ### \$ROOTSYS/test. The test directory contains a set of examples example that represent; all areas of the framework. When a new release is cut, the examples in; this directory are compiled and run to test the new release's backward; compatibility. The list of source files is described in chapter ""The; Tutorials and Tests"". The `$ROOTSYS/test` directory is a gold mine of ROOT-wisdom nuggets,; and we encourage you to explore and exploit it. We recommend the new; users to read the chapter ""Getting Started"". The chapter ""The; Tutorials and Tests"" has instructions on how to build all the programs; and it goes over the examples `Event` and `stress`. ### \$ROOTSYS/include. The `include` directory contains all header files. It is especially; important because the header files contain the class definitions. ### \$ROOTSYS/\<library\>. The directories we explored above are available when downloading the; binaries. When downloading the source you also get a directory for; each library with the corresponding header and source files, located; in the `inc` and `src` subdirectories. To see what classes are in a; library, you can check the `<library>/inc` directory for the list of",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md:22816,test,test,22816,documentation/users-guide/Introduction.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Introduction.md,1,['test'],['test']
Testability,"trol).; PRs should be well-documented and well-tested in order to allow other community; members to use, maintain and modify. If the PR contains performance-critical; code consider writing a benchmark against the [rootbench repository](https://github.com/root-project/rootbench). ## Quality Assurance. Each contribution should contain developer documentation in the form of code; comments and sufficient amount of tests in the form of unit and/or integration; tests. Unit tests are relatively small and quick programs focused to check if; small pieces of code and API work as expected. Integration tests are checks; which ensure the synergy between different (unit tested) components. Put in; practice, unit tests verify (member) function behavior whereas integration tests; check classes and their cooperation. The boundary between both kinds of testing; is blurred. ROOT has support for both kinds of tests in the [roottest repository](https://github.com/root-project/roottest); and supports ""inline"" unit tests in each component's `test` folder. Unit testing; uses the [GTest and GMock](https://github.com/google/googletest) infrastructure; along with small ROOT-specific extensions located in; [TestSupport](../core/test_support/). The documentation of GTest; and GMock is rather extensive and we will describe some of the features of; ROOT::TestSupport. In order to write an inline unit test, add a new file in the; nearest to the tested component's `test` folder and call `ROOT_ADD_GTEST` in the; `CMakeLists.txt` file. In many cases using standard GTest facility is sufficient to write a good test.; However, we disallow error messages in gtests, or sometimes we want to test the; error conditions of an interface and its diagnostics. For example,. ```cpp. void MyROOTFunc(unsigned x); {; if (x == 0) {; Error(""MyROOTFunc"", ""x should be greater than 0!"");; return;; }; /* some work */; }. ```. In order to check if the error is printed on the right spot we can write the; following test:. ```cp",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md:1399,test,tests,1399,README/DEVELOPMENT.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/DEVELOPMENT.md,2,['test'],"['test', 'tests']"
Testability,"truct'; [003] 2 {Union} 'Union'; [004] 3 {Enumeration} 'NestedEnum' -> 'int'; [005] {Enumerator} 'BLUE' = '0x1'; [005] {Enumerator} 'RED' = '0x0'. Logical View:; [000] {File} 'pr-46466-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr-46466.cpp'; [002] 1 {Struct} 'Struct'; [003] 2 {Union} 'Union'; [004] 3 {Enumeration} 'NestedEnum' -> 'int'; [005] {Enumerator} 'BLUE' = '0x1'; [005] {Enumerator} 'RED' = '0x0'. Logical View:; [000] {File} 'pr-46466-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-46466.cpp'. Logical View:; [000] {File} 'pr-46466-dwarf-gcc.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-46466.cpp'; [002] 1 {Struct} 'Struct'; [003] 2 {Union} 'Union'; [004] 3 {Enumeration} 'NestedEnum' -> 'unsigned int'; [005] {Enumerator} 'BLUE' = '0x1'; [005] {Enumerator} 'RED' = '0x0'. Using the :program:`llvm-debuginfo-analyzer` selection facilities, we; can produce a simple tabular output including a summary for the logical; types that are **Enumerator**. The logical view is sorted by the types; name. .. code-block:: none. llvm-debuginfo-analyzer --attribute=format,level; --output-sort=name; --select-types=Enumerator; --print=types,summary; pr-46466-*.o. .. code-block:: none. Logical View:; [000] {File} 'pr-46466-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr-46466.cpp'; [005] {Enumerator} 'BLUE' = '0x1'; [005] {Enumerator} 'RED' = '0x0'. -----------------------------; Element Total Found; -----------------------------; Scopes 5 0; Symbols 2 0; Types 6 2; Lines 0 0; -----------------------------; Total 13 2. Logical View:; [000] {File} 'pr-46466-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr-46466.cpp'; [005] {Enumerator} 'BLUE' = '0x1'; [005] {Enumerator} 'RED' = '0x0'. -----------------------------; Element Total Found; -----------------------------; Scopes 5 0; Symbols 2 0; Types 7 2; Lines 0 0; -----------------------------; Total 14 2. Logical View:; [000] {File} 'pr-46466-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr-46466.c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:46678,log,logical,46678,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"try hierarchy in memory"" width=600. Nodes are never instantiated directly by users, but created as a result; of volume operations. Adding a volume named A with a given `user id`; inside a volume B will create a node named `A_id.` This will be added to; the list of nodes stored by B. In addition, when applying a division; operation in N slices to a volume A, a list of nodes `B_1`, `B_2`, ... ,; `B_N` is also created. A node `B_i` does not represent a unique object; in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of; nodes is fully defined up to the top node in the geometry, a given; path:` /TOP_1/`...`/A_3/B_7` will represent a unique object. Its global; transformation matrix can be computed as the pile-up of all local; transformations in its branch. We will therefore call `logical graph`; the hierarchy defined by nodes and volumes. The expansion of the logical; graph by all possible paths defines a tree structure where all nodes are; unique ""touchable"" objects. We will call this the ""physical tree"".; Unlike the logical graph, the physical tree can become a huge structure; with several millions of nodes in case of complex geometries; therefore,; it is not always a good idea to keep it transient in memory. Since the; logical and physical structures are correlated, the modeller rather; keeps track only of the current branch, updating the current global; matrix at each change of the level in geometry. The current physical; node is not an object that can be asked for at a given moment, but; rather represented by the combination: current node/current global; matrix. However, physical nodes have unique ID's that can be retrieved; for a given modeller state. These can be fed back to the modeller in; order to force a physical node to become current. The advantage of this; comes from the fact that all navigation queries check first the current; node; therefore the location of a point in",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:21684,log,logical,21684,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"try. It defines a global pointer; `gGeoManager` in order to be fully accessible from external code.; The manager class is the owner of all geometry objects defined in a; session; therefore, users must not try to control their deletion. It; contains lists of media, materials, transformations, shapes and volumes.; A special case is the one of geometrical transformations. When creating; a matrix or a translation, this is by default owned by external objects.; The manager class becomes owner of all transformations used for; positioning volumes. In order to force the ownership for other; transformations, one can use TGeoMatrix::RegisterYourself() method. Do; not be therefore surprised that some transformations cannot be found by; name when creating a composite shape for instance if you did not; register them after creation. Logical nodes (positioned volumes) are created and destroyed by the; TGeoVolume class. Physical nodes and their global transformations; are subjected to a caching mechanism due to the sometimes very large; memory requirements of logical graph expansion. The total number of; physical instances of volumes triggers the caching mechanism and the; cache manager is a client of TGeoManager. The manager class also; controls the drawing/checking package (TGeoPainter client). This; is linked with %ROOT graphical libraries loaded on demand in order to; control visualization actions. \anchor GP02; ## Navigation and Tracking. Tracking is the feature allowing the transport of a given particle; knowing its kinematics. A state is determined by any combination of the; position \f$\vec{r}\f$ and direction \f$\vec{n}\f$ with respect to the world; reference frame. The direction \f$\vec{n}\f$ must be a unit vector having as; components the director cosines. The full classification of a given; state will provide the following information: the deepest physical node; containing the position vector, the distance to the closest boundary; along the direction vector, the next phy",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md:60867,log,logical,60867,geom/geom/doc/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/geom/geom/doc/index.md,1,['log'],['logical']
Testability,"ts an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an ``assert`` in two class definitions. .. code-block:: text. class PersonName<string name> {; assert !le(!size(name), 32), ""person name is too long: "" # name;; string Name = name;; }. class Person<string name, int age> : PersonName<name> {; assert !and(!ge(age, 1), !le(age, 120)), ""person age is invalid: "" # age;; int Age = age;; }. def Rec20 : Person<""Donald Knuth"", 60> {; ...; }. Additional Details; ==================. Directed acyclic graphs (DAGs); ------------------------------. A directed acyclic graph can be represented directly in TableGen using the; ``dag`` datatype. A DAG node consists of an operator and zero or more; arguments (or operands). Each argument can be of any desired type. By using; another DAG node as an argument, an arbitrary graph of DAG nodes can be; built. The syntax of a ``dag`` instance is:. ``(`` *operator* *argument1*\ ``,`` *argument2*\ ``,`` ... ``)``. The operator must be present and mus",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49988,assert,assertions,49988,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assertions']
Testability,"ts following the; ``then`` reserved word are processed. Otherwise, if there is an ``else``; reserved word, the statements following the ``else`` are processed. If the; value is false and there is no ``else`` arm, no statements are processed. Because the braces around the ``then`` statements are optional, this grammar rule; has the usual ambiguity with ""dangling else"" clauses, and it is resolved in; the usual way: in a case like ``if v1 then if v2 then {...} else {...}``, the; ``else`` associates with the inner ``if`` rather than the outer one. The :token:`IfBody` of the then and else arms of the ``if`` establish an; inner scope. Any ``defvar`` variables defined in the bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertio",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:48942,assert,assert,48942,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"ts run through; the code under test without problems. If you have a large corpus (either generated by fuzzing or acquired by other means); you may want to minimize it while still preserving the full coverage. One way to do that; is to use the `-merge=1` flag:. .. code-block:: console. mkdir NEW_CORPUS_DIR # Store minimized corpus here.; ./my_fuzzer -merge=1 NEW_CORPUS_DIR FULL_CORPUS_DIR. You may use the same flag to add more interesting items to an existing corpus.; Only the inputs that trigger new coverage will be added to the first corpus. .. code-block:: console. ./my_fuzzer -merge=1 CURRENT_CORPUS_DIR NEW_POTENTIALLY_INTERESTING_INPUTS_DIR. Running; -------. To run the fuzzer, first create a Corpus_ directory that holds the; initial ""seed"" sample inputs:. .. code-block:: console. mkdir CORPUS_DIR; cp /some/input/samples/* CORPUS_DIR. Then run the fuzzer on the corpus directory:. .. code-block:: console. ./my_fuzzer CORPUS_DIR # -max_len=1000 -jobs=20 ... As the fuzzer discovers new interesting test cases (i.e. test cases that; trigger coverage of new paths through the code under test), those test cases; will be added to the corpus directory. By default, the fuzzing process will continue indefinitely – at least until; a bug is found. Any crashes or sanitizer failures will be reported as usual,; stopping the fuzzing process, and the particular input that triggered the bug; will be written to disk (typically as ``crash-<sha1>``, ``leak-<sha1>``,; or ``timeout-<sha1>``). Parallel Fuzzing; ----------------. Each libFuzzer process is single-threaded, unless the library under test starts; its own threads. However, it is possible to run multiple libFuzzer processes in; parallel with a shared corpus directory; this has the advantage that any new; inputs found by one fuzzer process will be available to the other fuzzer; processes (unless you disable this with the ``-reload=0`` option). This is primarily controlled by the ``-jobs=N`` option, which indicates that; that `N` ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst:5925,test,test,5925,interpreter/llvm-project/llvm/docs/LibFuzzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LibFuzzer.rst,1,['test'],['test']
Testability,"ts that were expected to fail. .. _execution-options:. EXECUTION OPTIONS; -----------------. .. option:: --path=PATH. Specify an additional ``PATH`` to use when searching for executables in tests. .. option:: --vg. Run individual tests under valgrind (using the memcheck tool). The; ``--error-exitcode`` argument for valgrind is used so that valgrind failures; will cause the program to exit with a non-zero status. When this option is enabled, :program:`lit` will also automatically provide a; ""``valgrind``"" feature that can be used to conditionally disable (or expect; failure in) certain tests. .. option:: --vg-arg=ARG. When :option:`--vg` is used, specify an additional argument to pass to; :program:`valgrind` itself. .. option:: --vg-leak. When :option:`--vg` is used, enable memory leak checks. When this option is; enabled, :program:`lit` will also automatically provide a ""``vg_leak``""; feature that can be used to conditionally disable (or expect failure in); certain tests. .. option:: --time-tests. Track the wall time individual tests take to execute and includes the results; in the summary output. This is useful for determining which tests in a test; suite take the most time to execute. .. option:: --ignore-fail. Exit with status zero even if some tests fail. .. _selection-options:. SELECTION OPTIONS; -----------------. By default, `lit` will run failing tests first, then run tests in descending; execution time order to optimize concurrency. The execution order can be; changed using the :option:`--order` option. The timing data is stored in the `test_exec_root` in a file named; `.lit_test_times.txt`. If this file does not exist, then `lit` checks the; `test_source_root` for the file to optionally accelerate clean builds. .. option:: --shuffle. Run the tests in a random order, not failing/slowest first. Deprecated,; use :option:`--order` instead. .. option:: --per-test-coverage. Emit the necessary test coverage data, divided per test case (involves; setting a unique v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:5034,test,tests,5034,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['tests']
Testability,"ts the `code generator debugger`_. Finally, if the output of the selected code generator matches the reference; output, ``bugpoint`` runs the test program after all of the LLVM passes have; been applied to it. If its output differs from the reference output, it assumes; the difference resulted from a failure in one of the LLVM passes, and enters the; `miscompilation debugger`_. Otherwise, there is no problem ``bugpoint`` can; debug. .. _crash debugger:. Crash debugger; --------------. If an optimizer or code generator crashes, ``bugpoint`` will try as hard as it; can to reduce the list of passes (for optimizer crashes) and the size of the; test program. First, ``bugpoint`` figures out which combination of optimizer; passes triggers the bug. This is useful when debugging a problem exposed by; ``opt``, for example, because it runs over 38 passes. Next, ``bugpoint`` tries removing functions from the test program, to reduce its; size. Usually it is able to reduce a test program to a single function, when; debugging intraprocedural optimizations. Once the number of functions has been; reduced, it attempts to delete various edges in the control flow graph, to; reduce the size of the function as much as possible. Finally, ``bugpoint``; deletes any individual LLVM instructions whose absence does not eliminate the; failure. At the end, ``bugpoint`` should tell you what passes crash, give you a; bitcode file, and give you instructions on how to reproduce the failure with; ``opt`` or ``llc``. .. _code generator debugger:. Code generator debugger; -----------------------. The code generator debugger attempts to narrow down the amount of code that is; being miscompiled by the selected code generator. To do this, it takes the test; program and partitions it into two pieces: one piece which it compiles with the; ""safe"" backend (into a shared object), and one piece which it runs with either; the JIT or the static LLC compiler. It uses several techniques to reduce the; amount of code",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:3551,test,test,3551,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,"ts the; value of which is always 0 (false) or 1 (true). We are not using this fact:. int bar(_Bool *a) { return *a; }. define i32 @bar(i8* nocapture %a) nounwind readonly optsize {; %1 = load i8* %a, align 1, !tbaa !0; %tmp = and i8 %1, 1; %2 = zext i8 %tmp to i32; ret i32 %2; }. bar:; movb (%rdi), %al; andb $1, %al; movzbl %al, %eax; ret. GCC produces. bar:; movzbl (%rdi), %eax; ret. //===---------------------------------------------------------------------===//. Take the following C code:; int f(int a, int b) { return (unsigned char)a == (unsigned char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %tmp = xor i32 %b, %a ; <i32> [#uses=1]; %tmp6 = and i32 %tmp, 255 ; <i32> [#uses=1]; %cmp = icmp eq i32 %tmp6, 0 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	xorl	%esi, %edi; 	testb	$-1, %dil; 	sete	%al; 	movzbl	%al, %eax; 	ret. A cmpb instead of the xorl+testb would be one instruction shorter. //===---------------------------------------------------------------------===//. Given the following C code:; int f(int a, int b) { return (signed char)a == (signed char)b; }. We generate the following IR with clang:; define i32 @f(i32 %a, i32 %b) nounwind readnone {; entry:; %sext = shl i32 %a, 24 ; <i32> [#uses=1]; %conv1 = ashr i32 %sext, 24 ; <i32> [#uses=1]; %sext6 = shl i32 %b, 24 ; <i32> [#uses=1]; %conv4 = ashr i32 %sext6, 24 ; <i32> [#uses=1]; %cmp = icmp eq i32 %conv1, %conv4 ; <i1> [#uses=1]; %conv5 = zext i1 %cmp to i32 ; <i32> [#uses=1]; ret i32 %conv5; }. And the following x86 code:; 	movsbl	%sil, %eax; 	movsbl	%dil, %ecx; 	cmpl	%eax, %ecx; 	sete	%al; 	movzbl	%al, %eax; 	ret. It should be possible to eliminate the sign extensions. //===---------------------------------------------------------------------===//. LLVM misses a load+store narrowing opportunity in this code:. %struct.bf = type { i64, i16, i16, i32 }. @bfi = external global %st",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:36386,test,testb,36386,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['testb']
Testability,"ts, by creating a separate ""Printer"" pass to consume the analysis; result and print it on the standard output in a textual format suitable for; FileCheck.; See `llvm/test/Analysis/BranchProbabilityInfo/loop.ll <https://github.com/llvm/llvm-project/blob/main/llvm/test/Analysis/BranchProbabilityInfo/loop.ll>`_; for an example of such test. ``test-suite``; --------------. The test suite contains whole programs, which are pieces of code which; can be compiled and linked into a stand-alone program that can be; executed. These programs are generally written in high level languages; such as C or C++. These programs are compiled using a user specified compiler and set of; flags, and then executed to capture the program output and timing; information. The output of these programs is compared to a reference; output to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:3705,test,tests,3705,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,2,"['benchmark', 'test']","['benchmarking', 'tests']"
Testability,"ts, run; ``gmake TEST=nightly``. There are several TEST Makefiles available in the tree. Some of them are; designed for internal LLVM research and will not work outside of the; LLVM research group. They may still be valuable, however, as a guide to; writing your own TEST Makefile for any optimization or analysis passes; that you develop with LLVM. Generating Test Output; ======================. There are a number of ways to run the tests and generate output. The; most simple one is simply running ``gmake`` with no arguments. This will; compile and run all programs in the tree using a number of different; methods and compare results. Any failures are reported in the output,; but are likely drowned in the other output. Passes are not reported; explicitly. Somewhat better is running ``gmake TEST=sometest test``, which runs the; specified test and usually adds per-program summaries to the output; (depending on which sometest you use). For example, the ``nightly`` test; explicitly outputs TEST-PASS or TEST-FAIL for every test after each; program. Though these lines are still drowned in the output, it's easy; to grep the output logs in the Output directories. Even better are the ``report`` and ``report.format`` targets (where; ``format`` is one of ``html``, ``csv``, ``text`` or ``graphs``). The; exact contents of the report are dependent on which ``TEST`` you are; running, but the text results are always shown at the end of the run and; the results are always stored in the ``report.<type>.format`` file (when; running with ``TEST=<type>``). The ``report`` also generate a file; called ``report.<type>.raw.out`` containing the output of the entire; test run. Writing Custom Tests for the test-suite; =======================================. Assuming you can run the test suite, (e.g.; ""``gmake TEST=nightly report``"" should work), it is really easy to run; optimizations or code generator components against every program in the; tree, collecting statistics or running custom checks ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst:4272,test,test,4272,interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteMakefileGuide.rst,2,['test'],['test']
Testability,ts/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros/stdio-macros.h; libc/include/llvm-libc-macros/linux/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129986,benchmark,benchmarks,129986,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"ts`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Infor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:5658,test,tests,5658,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/tsan/rtl/tsan_symbolize.h; compiler-rt/lib/tsan/rtl/tsan_trace.h; compiler-rt/lib/tsan/rtl/tsan_vector_clock.h; compiler-rt/lib/tsan/rtl-old/tsan_fd.h; compiler-rt/lib/tsan/rtl-old/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl-old/tsan_ilist.h; compiler-rt/lib/tsan/rtl-old/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl-old/tsan_mman.h; compiler-rt/lib/tsan/rtl-old/tsan_mutexset.h; compiler-rt/lib/tsan/rtl-old/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl-old/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl-old/tsan_shadow.h; compiler-rt/lib/tsan/rtl-old/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl-old/tsan_suppressions.h; compiler-rt/lib/tsan/rtl-old/tsan_symbolize.h; compiler-rt/lib/tsan/rtl-old/tsan_vector_clock.h; compiler-rt/lib/tsan/tests/unit/tsan_ilist_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_trace_test.cpp; compiler-rt/lib/tsan/tests/unit/tsan_vector_clock_test.cpp; compiler-rt/lib/ubsan/ubsan_init_standalone_preinit.cpp; compiler-rt/lib/ubsan/ubsan_monitor.cpp; compiler-rt/lib/ubsan/ubsan_monitor.h; compiler-rt/lib/ubsan/ubsan_signals_standalone.h; compiler-rt/lib/ubsan/ubsan_win_dll_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_dynamic_runtime_thunk.cpp; compiler-rt/lib/ubsan/ubsan_win_weak_interception.cpp; compiler-rt/lib/xray/xray_AArch64.cpp; compiler-rt/lib/xray/xray_arm.cpp; compiler-rt/lib/xray/xray_basic_flags.cpp; compiler-rt/lib/xray/xray_basic_flags.h; compiler-rt/lib/xray/xray_basic_logging.h; compiler-rt/lib/xray/xray_buffer_queue.cpp; compiler-rt/lib/xray/xray_buffer_queue.h; compiler-rt/lib/xray/xray_fdr_controller.h; compiler-rt/lib/xray/xray_fdr_flags.cpp; compiler-rt/lib/xray/xray_fdr_flags.h; compiler-rt/lib/xray/xray_fdr_logging.h; compiler-rt/lib/xray/xray_fdr_log_records.h; compiler-rt/,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:104974,test,tests,104974,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"tting your testcase approved:. * All feature and regression test cases are added to the ``llvm/test``; directory. The appropriate sub-directory should be selected (see the; :doc:`Testing Guide <TestingGuide>` for details). * Test cases should be written in :doc:`LLVM assembly language <LangRef>`. * Test cases, especially for regressions, should be reduced as much as possible,; by :doc:`bugpoint <Bugpoint>` or manually. It is unacceptable to place an; entire failing program into ``llvm/test`` as this creates a *time-to-test*; burden on all developers. Please keep them short. * Avoid adding links to resources that are not available to the entire; community, such as links to private bug trackers, internal corporate; documentation, etc. Instead, add sufficient comments to the test to provide; the context behind such links. Note that llvm/test and clang/test are designed for regression and small feature; tests only. More extensive test cases (e.g., entire applications, benchmarks,; etc) should be added to the ``llvm-test`` test suite. The llvm-test suite is; for coverage (correctness, performance, etc) testing, not feature or regression; testing. Release Notes; -------------. Many projects in LLVM communicate important changes to users through release; notes, typically found in ``docs/ReleaseNotes.rst`` for the project. Changes to; a project that are user-facing, or that users may wish to know about, should be; added to the project's release notes at the author's or code reviewer's; discretion, preferably as part of the commit landing the changes. Examples of; changes that would typically warrant adding a release note (this list is not; exhaustive):. * Adding, removing, or modifying command-line options.; * Adding, removing, or regrouping a diagnostic.; * Fixing a bug that potentially has significant user-facing impact (please link; to the issue fixed in the bug database).; * Adding or removing optimizations that have widespread impact or enables new; programming paradigm",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:10600,benchmark,benchmarks,10600,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,3,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"ttribute adds additional warnings, define a ``DiagGroup`` in; `include/clang/Basic/DiagnosticGroups.td; <https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/DiagnosticGroups.td>`_; named after the attribute's ``Spelling`` with ""_""s replaced by ""-""s. If there; is only a single diagnostic, it is permissible to use ``InGroup<DiagGroup<""your-attribute"">>``; directly in `DiagnosticSemaKinds.td; <https://github.com/llvm/llvm-project/blob/main/clang/include/clang/Basic/DiagnosticSemaKinds.td>`_. All semantic diagnostics generated for your attribute, including automatically-; generated ones (such as subjects and argument counts), should have a; corresponding test case. Semantic handling; ^^^^^^^^^^^^^^^^^; Most attributes are implemented to have some effect on the compiler. For; instance, to modify the way code is generated, or to add extra semantic checks; for an analysis pass, etc. Having added the attribute definition and conversion; to the semantic representation for the attribute, what remains is to implement; the custom logic requiring use of the attribute. The ``clang::Decl`` object can be queried for the presence or absence of an; attribute using ``hasAttr<T>()``. To obtain a pointer to the semantic; representation of the attribute, ``getAttr<T>`` may be used. The ``clang::AttributedStmt`` object can be queried for the presence or absence; of an attribute by calling ``getAttrs()`` and looping over the list of; attributes. How to add an expression or statement; -------------------------------------. Expressions and statements are one of the most fundamental constructs within a; compiler, because they interact with many different parts of the AST, semantic; analysis, and IR generation. Therefore, adding a new expression or statement; kind into Clang requires some care. The following list details the various; places in Clang where an expression or statement needs to be introduced, along; with patterns to follow to ensure that the new expression or s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:144003,log,logic,144003,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['log'],['logic']
Testability,"ttribute; N2267; Clang 9. maybe_unused attribute; N2270; Clang 9. TS 18661 Integration. ; N2314; Unknown. ; N2341; Unknown. ; N2401; Unknown. ; N2359; No. ; N2546; Unknown. N2580; Unknown. ; N2640; Unknown. ; N2755; Unknown. Preprocessor line numbers unspecified; N2322. Partial; The line number associated with a macro invocation is not the line; number of the first character of the macro name in the invocation.; Additionally, Clang may not associate the line number of a pp-directive; with the first # token. As these are recommended practices; and not normative requirements, Clang's behavior is still conforming.; . deprecated attribute; N2334; Clang 9. Attributes. ; N2335; Clang 9. ; N2554; Clang 9. Defining new types in offsetof; N2350; Yes. fallthrough attribute; N2408; Clang 9. Two's complement sign representation; N2412; Clang 14. Adding the u8 character prefix; N2418; Clang 15. Remove support for function definitions with identifier lists; N2432; Clang 15. *_IS_IEC_60559 feature test macros; N2379; Unknown. Floating-point negation and conversion; N2416; Unknown. Annex F.8 update for implementation extensions and rounding; N2384; Unknown. _Bool definitions for true and false; N2393; Subsumed by N2935. [[nodiscard(""should have a reason"")]]; N2448; Clang 10. Allowing unnamed parameters in function definitions; N2480; Clang 11. Free positioning of labels inside compound statements; N2508; Clang 18. Clarification request for C17 example of undefined behavior; N2517; No. Querying attribute support; N2553; Clang 9. Binary literals; N2549; Clang 9. Allow duplicate attributes; N2557; Clang 13. Character encoding of diagnostic text; N2563; Yes. What we think we reserve; N2572; Partial. Remove mixed wide string literal concatenation; N2594; Clang 9. Update to IEC 60559:2020; N2600; Unknown. Compatibility of Pointers to Arrays with Qualifiers; N2607. Partial; Much of the proposal is implemented, but Clang lacks pedantic diagnostics; in C17 and earlier regarding use of incom",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/c_status.html:8346,test,test,8346,interpreter/llvm-project/clang/www/c_status.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/c_status.html,1,['test'],['test']
Testability,"tually create your AST. A few; things to check at this point:. * If your expression can construct a new C++ class or return a new; Objective-C object, be sure to update and then call; ``Sema::MaybeBindToTemporary`` for your just-created AST node to be sure; that the object gets properly destructed. An easy way to test this is to; return a C++ class with a private destructor: semantic analysis should; flag an error here with the attempt to call the destructor.; * Inspect the generated AST by printing it using ``clang -cc1 -ast-print``,; to make sure you're capturing all of the important information about how; the AST was written.; * Inspect the generated AST under ``clang -cc1 -ast-dump`` to verify that; all of the types in the generated AST line up the way you want them.; Remember that clients of the AST should never have to ""think"" to; understand what's going on. For example, all implicit conversions should; show up explicitly in the AST.; * Write tests that use your expression as a subexpression of other,; well-known expressions. Can you call a function using your expression as; an argument? Can you use the ternary operator?. #. Teach code generation to create IR to your AST node. This step is the first; (and only) that requires knowledge of LLVM IR. There are several things to; keep in mind:. * Code generation is separated into scalar/aggregate/complex and; lvalue/rvalue paths, depending on what kind of result your expression; produces. On occasion, this requires some careful factoring of code to; avoid duplication.; * ``CodeGenFunction`` contains functions ``ConvertType`` and; ``ConvertTypeForMem`` that convert Clang's types (``clang::Type*`` or; ``clang::QualType``) to LLVM types. Use the former for values, and the; latter for memory locations: test with the C++ ""``bool``"" type to check; this. If you find that you are having to use LLVM bitcasts to make the; subexpressions of your expression have the type that your expression; expects, STOP! Go fix semantic ana",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:150396,test,tests,150396,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['tests']
Testability,"turn; // warn: memory is never released; }. void test() {; int a[] = { 1 };; free(a); // warn: argument is not allocated by malloc; }. void test() {; int *p = malloc(sizeof(char));; p = p - 1;; free(p); // warn: argument to free() is offset by -4 bytes; }. unix.MallocSizeof; (C); Check for dubious malloc, calloc or; realloc arguments involving sizeof. void test() {; long *p = malloc(sizeof(short));; // warn: result is converted to 'long *', which is; // incompatible with operand type 'short'; free(p);; }. unix.MismatchedDeallocator; (C, C++, ObjC); Check for mismatched deallocators (e.g. passing a pointer allocating; with new to free()). // C, C++; void test() {; int *p = (int *)malloc(sizeof(int));; delete p; // warn; }. // C, C++; void __attribute((ownership_returns(malloc))) *user_malloc(size_t);. void test() {; int *p = (int *)user_malloc(sizeof(int));; delete p; // warn; }. // C, C++; void test() {; int *p = new int;; free(p); // warn; }. // C, C++; void test() {; int *p = new int[1];; realloc(p, sizeof(long)); // warn; }. // C, C++; template <typename T>; struct SimpleSmartPointer {; T *ptr;. explicit SimpleSmartPointer(T *p = 0) : ptr(p) {}; ~SimpleSmartPointer() {; delete ptr; // warn; }; };. void test() {; SimpleSmartPointer<int> a((int *)malloc(4));; }. // C++; void test() {; int *p = (int *)operator new(0);; delete[] p; // warn; }. // Objective-C, C++; void test(NSUInteger dataLength) {; int *p = new int;; NSData *d = [NSData dataWithBytesNoCopy:p; length:sizeof(int) freeWhenDone:1];; // warn +dataWithBytesNoCopy:length:freeWhenDone: cannot take; // ownership of memory allocated by 'new'; }. unix.Vfork; (C); Check for proper usage of vfork. int test(int x) {; pid_t pid = vfork(); // warn; if (pid != 0); return 0;. switch (x) {; case 0:; pid = 1;; execl("""", """", 0);; _exit(1);; break;; case 1:; x = 0; // warn: this assignment is prohibited; break;; case 2:; foo(); // warn: this function call is prohibited; break;; default:; return 0; // warn: return is proh",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:25493,test,test,25493,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"turns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Val); declare x86_fp80 @llvm.log10.f80(x86_fp80 %Val); declare fp128 @llvm.log10.f128(fp128 %Val); declare ppc_fp128 @llvm.log10.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log10.*``' intrinsics compute the base-10 logarithm of the; specified value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log10``' function but without; trapping or setting ``e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:568268,log,log,568268,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"ty Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. security.insecureAPI.UncheckedReturn; (C); Warn on uses of functions whose return values must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets; (C); Warn on uses of the gets function. void test() {; char buff[1024];; gets(buff); // warn; }. security.insecureAPI.mkstemp; (C); Warn when mktemp, mkstemp, mkstemps or; mkdtemp is passed fewer than 6; X's in the format string. void test() {; mkstemp(""XX""); // warn; }. security.insecureAPI.mktemp; (C); Warn on uses of the mktemp function. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. security.insecureAPI.rand; (C); Warn on uses of inferior random number generating functions (only if arc4random; function is available):; drand48; erand48; jrand48; lcong48; lrand48; mrand48; nrand48; random; rand_r. void test() {; random(); // warn; }. security.insecureAPI.strcpy; (C); Warn on uses of the strcpy and strcat functions. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. security.insecureAPI.vfork; (C); Warn on uses of the vfork function. void test() {; vfork(); // warn; }. security.insecureAPI.decodeValueOfObjCType; (ObjC); Warn on uses of the -[NSCoder decodeValueOfObjCType:at:] method.; The safe alt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:21978,test,test,21978,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"ty is not propagated through function calls which are; unknown (or too complex) to the analyzer, unless there is a specific; propagation rule built-in to the checker or given in the YAML configuration; file. This causes potential true positive findings to be lost. alpha.unix; ^^^^^^^^^^. .. _alpha-unix-BlockInCriticalSection:. alpha.unix.BlockInCriticalSection (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for calls to blocking functions inside a critical section.; Applies to: ``lock, unlock, sleep, getc, fgets, read, recv, pthread_mutex_lock,``; `` pthread_mutex_unlock, mtx_lock, mtx_timedlock, mtx_trylock, mtx_unlock, lock_guard, unique_lock``. .. code-block:: c. void test() {; std::mutex m;; m.lock();; sleep(3); // warn: a blocking function sleep is called inside a critical; // section; m.unlock();; }. .. _alpha-unix-Chroot:. alpha.unix.Chroot (C); """"""""""""""""""""""""""""""""""""""""""; Check improper use of chroot. .. code-block:: c. void f();. void test() {; chroot(""/usr/local"");; f(); // warn: no call of chdir(""/"") immediately after chroot; }. .. _alpha-unix-PthreadLock:. alpha.unix.PthreadLock (C); """"""""""""""""""""""""""""""""""""""""""""""""""""; Simple lock -> unlock checker.; Applies to: ``pthread_mutex_lock, pthread_rwlock_rdlock, pthread_rwlock_wrlock, lck_mtx_lock, lck_rw_lock_exclusive``; ``lck_rw_lock_shared, pthread_mutex_trylock, pthread_rwlock_tryrdlock, pthread_rwlock_tryrwlock, lck_mtx_try_lock,; lck_rw_try_lock_exclusive, lck_rw_try_lock_shared, pthread_mutex_unlock, pthread_rwlock_unlock, lck_mtx_unlock, lck_rw_done``. .. code-block:: c. pthread_mutex_t mtx;. void test() {; pthread_mutex_lock(&mtx);; pthread_mutex_lock(&mtx);; // warn: this lock has already been acquired; }. lck_mtx_t lck1, lck2;. void test() {; lck_mtx_lock(&lck1);; lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was not the most recently acquired lock; }. lck_mtx_t lck1, lck2;. void test() {; if (lck_mtx_try_lock(&lck1) == 0); return;. lck_mtx_lock(&lck2);; lck_mtx_unlock(&lck1);; // warn: this was ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:75136,test,test,75136,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"ty-insecureAPI-mkstemp:. security.insecureAPI.mkstemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn when 'mkstemp' is passed fewer than 6 X's in the format string. .. code-block:: c. void test() {; mkstemp(""XX""); // warn; }. .. _security-insecureAPI-mktemp:. security.insecureAPI.mktemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``mktemp`` function. .. code-block:: c. void test() {; char *x = mktemp(""/tmp/zxcv""); // warn: insecure, use mkstemp; }. .. _security-insecureAPI-rand:. security.insecureAPI.rand (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of inferior random number generating functions (only if arc4random function is available):; ``drand48, erand48, jrand48, lcong48, lrand48, mrand48, nrand48, random, rand_r``. .. code-block:: c. void test() {; random(); // warn; }. .. _security-insecureAPI-strcpy:. security.insecureAPI.strcpy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``strcpy`` and ``strcat`` functions. .. code-block:: c. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. .. _security-insecureAPI-vfork:. security.insecureAPI.vfork (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'vfork' function. .. code-block:: c. void test() {; vfork(); // warn; }. .. _security-insecureAPI-DeprecatedOrUnsafeBufferHandling:. security.insecureAPI.DeprecatedOrUnsafeBufferHandling (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on occurrences of unsafe or deprecated buffer handling functions, which now have a secure variant: ``sprintf, fprintf, vsprintf, scanf, wscanf, fscanf, fwscanf, vscanf, vwscanf, vfscanf, vfwscanf, sscanf, swscanf, vsscanf, vswscanf, swprintf, snprintf, vswprintf, vsnprintf, memcpy, memmove, strncpy, strncat, memset``. .. code-block:: c. void test() {; char buf [5];; strncpy(buf, ""a"", 1); // warn; }. .. _unix-checkers:. unix; ^^^^; POSIX/Unix checkers. .. _unix-API:. unix.API (C); """"""""""""""""""""""""; Check calls to various UNIX/Posix functions: ``open, pthread_once, calloc, mal",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:24795,test,test,24795,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,ty.h; compiler-rt/lib/scudo/standalone/tsd.h; compiler-rt/lib/scudo/standalone/tsd_exclusive.h; compiler-rt/lib/scudo/standalone/tsd_shared.h; compiler-rt/lib/scudo/standalone/vector.h; compiler-rt/lib/scudo/standalone/wrappers_c.cpp; compiler-rt/lib/scudo/standalone/wrappers_c.h; compiler-rt/lib/scudo/standalone/wrappers_c_bionic.cpp; compiler-rt/lib/scudo/standalone/wrappers_c_checks.h; compiler-rt/lib/scudo/standalone/benchmarks/malloc_benchmark.cpp; compiler-rt/lib/scudo/standalone/fuzz/get_error_info_fuzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:102735,test,tests,102735,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,type_traits.cpp; compiler-rt/lib/sanitizer_common/sanitizer_type_traits.h; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_symbolize.cpp; compiler-rt/lib/sanitizer_common/symbolizer/sanitizer_wrappers.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_addrhashmap_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_chained_origin_depot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_dense_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_flat_map_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_hash_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_leb128_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_lzw_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stackdepot_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stack_store_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_stoptheworld_test.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_test_main.cpp; compiler-rt/lib/sanitizer_common/tests/sanitizer_type_traits_test.cpp; compiler-rt/lib/scudo/standalone/allocator_config.h; compiler-rt/lib/scudo/standalone/atomic_helpers.h; compiler-rt/lib/scudo/standalone/bytemap.h; compiler-rt/lib/scudo/standalone/checksum.cpp; compiler-rt/lib/scudo/standalone/checksum.h; compiler-rt/lib/scudo/standalone/chunk.h; compiler-rt/lib/scudo/standalone/combined.h; compiler-rt/lib/scudo/standalone/common.cpp; compiler-rt/lib/scudo/standalone/common.h; compiler-rt/lib/scudo/standalone/crc32_hw.cpp; compiler-rt/lib/scudo/standalone/flags.cpp; compiler-rt/lib/scudo/standalone/flags.h; compiler-rt/lib/scudo/standalone/flags_parser.cpp; compiler-rt/lib/scudo/standalone/flags_parser.h; compiler-rt/lib/scudo/standalone/fuchsia.cpp; compiler-rt/lib/scudo/standalone/fuchsia.h; compiler-rt/lib/scudo/standalone/internal_defs.h; compiler-rt/lib/scudo/standalone/linux.cpp; compiler-rt/lib/scudo/standalone/linux.h; compiler-rt/lib/scudo/standalone/list.h; compiler-rt/lib/scudo/standalone/local_cache.,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:99863,test,tests,99863,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"u can define one file for the functions to always; instrument, and another for functions to never instrument. The format of these; files are exactly the same as the SanitizerLists files that control similar; things for the sanitizer implementations. For example:. ::. # xray-attr-list.txt; # always instrument functions that match the following filters:; [always]; fun:main. # never instrument functions that match the following filters:; [never]; fun:__cxx_*. Given the file above we can re-build by providing it to the; ``-fxray-attr-list=`` flag to clang. You can have multiple files, each defining; different sets of attribute sets, to be combined into a single list by clang. The XRay stack tool; -------------------. Given a trace, and optionally an instrumentation map, the ``llvm-xray stack``; command can be used to analyze a call stack graph constructed from the function; call timeline. The way to use the command is to output the top stacks by call count and time spent. ::. $ llvm-xray stack xray-log.llc.5rqxkU --instr_map=./bin/llc. Unique Stacks: 3069; Top 10 Stacks by leaf sum:. Sum: 9633790; lvl function count sum; #0 main 1 58421550; #1 compileModule(char**, llvm::LLVMContext&) 1 51440360; #2 llvm::legacy::PassManagerImpl::run(llvm::Module&) 1 40535375; #3 llvm::FPPassManager::runOnModule(llvm::Module&) 2 39337525; #4 llvm::FPPassManager::runOnFunction(llvm::Function&) 6 39331465; #5 llvm::PMDataManager::verifyPreservedAnalysis(llvm::Pass*) 399 16628590; #6 llvm::PMTopLevelManager::findAnalysisPass(void const*) 4584 15155600; #7 llvm::PMDataManager::findAnalysisPass(void const*, bool) 32088 9633790. ..etc.. In the default mode, identical stacks on different threads are independently; aggregated. In a multithreaded program, you may end up having identical call; stacks fill your list of top calls. To address this, you may specify the ``--aggregate-threads`` or; ``--per-thread-stacks`` flags. ``--per-thread-stacks`` treats the thread id as an; implicit root in each ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst:11293,log,log,11293,interpreter/llvm-project/llvm/docs/XRayExample.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/XRayExample.rst,1,['log'],['log']
Testability,"u can then refer to the extra files as ``%S/Inputs/foo.bar``. For example, consider ``test/Linker/ident.ll``. The directory structure is; as follows::. test/; Linker/; ident.ll; Inputs/; ident.a.ll; ident.b.ll. For convenience, these are the contents:. .. code-block:: llvm. ;;;;; ident.ll:. ; RUN: llvm-link %S/Inputs/ident.a.ll %S/Inputs/ident.b.ll -S | FileCheck %s. ; Verify that multiple input llvm.ident metadata are linked together. ; CHECK-DAG: !llvm.ident = !{!0, !1, !2}; ; CHECK-DAG: ""Compiler V1""; ; CHECK-DAG: ""Compiler V2""; ; CHECK-DAG: ""Compiler V3"". ;;;;; Inputs/ident.a.ll:. !llvm.ident = !{!0, !1}; !0 = metadata !{metadata !""Compiler V1""}; !1 = metadata !{metadata !""Compiler V2""}. ;;;;; Inputs/ident.b.ll:. !llvm.ident = !{!0}; !0 = metadata !{metadata !""Compiler V3""}. For symmetry reasons, ``ident.ll`` is just a dummy file that doesn't; actually participate in the test besides holding the ``RUN:`` lines. .. note::. Some existing tests use ``RUN: true`` in extra files instead of just; putting the extra files in an ``Inputs/`` directory. This pattern is; deprecated. Fragile tests; -------------. It is easy to write a fragile test that would fail spuriously if the tool being; tested outputs a full path to the input file. For example, :program:`opt` by; default outputs a ``ModuleID``:. .. code-block:: console. $ cat example.ll; define i32 @main() nounwind {; ret i32 0; }. $ opt -S /path/to/example.ll; ; ModuleID = '/path/to/example.ll'. define i32 @main() nounwind {; ret i32 0; }. ``ModuleID`` can unexpectedly match against ``CHECK`` lines. For example:. .. code-block:: llvm. ; RUN: opt -S %s | FileCheck. define i32 @main() nounwind {; ; CHECK-NOT: load; ret i32 0; }. This test will fail if placed into a ``download`` directory. To make your tests robust, always use ``opt ... < %s`` in the RUN line.; :program:`opt` does not output a ``ModuleID`` when input comes from stdin. Platform-Specific Tests; -----------------------. Whenever adding tests that require the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:16269,test,tests,16269,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"u can; find all matchers that can be used to match on Stmt nodes.; The exception to that rule are matchers that can match on any node. Those; are marked with a * and are listed in the beginning of each category.; Note that the categorization of matchers is a great help when you combine; them into matcher expressions. You will usually want to form matcher expressions; that read like english sentences by alternating between node matchers and; narrowing or traversal matchers, like this:. recordDecl(hasDescendant(; ifStmt(hasTrueExpression(; expr(hasDescendant(; ifStmt())))))). Traverse Mode. The default mode of operation of AST Matchers visits all nodes in the AST,; even if they are not spelled in the source. This is; AsIs mode. This mode requires writing AST matchers; that explicitly traverse or ignore implicit nodes, such as parentheses; surrounding an expression or expressions with cleanups. These implicit; nodes are not always obvious from the syntax of the source code, and so this; mode requires careful consideration and testing to get the desired behavior; from an AST matcher. In addition, because template instantiations are matched in the default mode,; transformations can be accidentally made to template declarations. Finally,; because implicit nodes are matched by default, transformations can be made on; entirely incorrect places in the code.; For these reasons, it is possible to ignore AST nodes which are not spelled; in the source using the IgnoreUnlessSpelledInSource; mode. This is likely to be far less error-prone for users who are not already; very familiar with where implicit nodes appear in the AST. It is also likely; to be less error-prone for experienced AST users, as difficult cases do not; need to be encountered and matcher expressions adjusted for these cases.; In clang-query, the mode can be changed with. set traversal IgnoreUnlessSpelledInSource. This affects both matchers and AST dump output in results. When using the C++ API such as in clang-ti",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html:1751,test,testing,1751,interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/LibASTMatchersReference.html,1,['test'],['testing']
Testability,"u to compile a program with; ""``-O0 -g``"" and get full debug information, allowing you to arbitrarily modify; the program as it executes from a debugger. Compiling a program with; ""``-O3 -g``"" gives you full debug information that is always available and; accurate for reading (e.g., you get accurate stack traces despite tail call; elimination and inlining), but you might lose the ability to modify the program; and call functions which were optimized out of the program, or inlined away; completely. The :doc:`LLVM test-suite <TestSuiteMakefileGuide>` provides a framework to; test the optimizer's handling of debugging information. It can be run like; this:. .. code-block:: bash. % cd llvm/projects/test-suite/MultiSource/Benchmarks # or some other level; % make TEST=dbgopt. This will test impact of debugging information on optimization passes. If; debugging information influences optimization passes then it will be reported; as a failure. See :doc:`TestingGuide` for more information on LLVM test; infrastructure and how to run various tests. .. _format:. Debugging information format; ============================. LLVM debugging information has been carefully designed to make it possible for; the optimizer to optimize the program and debugging information without; necessarily having to know anything about debugging information. In; particular, the use of metadata avoids duplicated debugging information from; the beginning, and the global dead code elimination pass automatically deletes; debugging information for a function if it decides to delete the function. To do this, most of the debugging information (descriptors for types,; variables, functions, source files, etc) is inserted by the language front-end; in the form of LLVM metadata. Debug information is designed to be agnostic about the target debugger and; debugging information representation (e.g. DWARF/Stabs/etc). It uses a generic; pass to decode the information that represents variables, types, functions,; names",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst:6177,test,test,6177,interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SourceLevelDebugging.rst,2,['test'],"['test', 'tests']"
Testability,"u'd like to use a different prefix (e.g. because the same input; file is checking multiple different tool or options), the; :option:`--check-prefix` argument allows you to specify (without the trailing; ""``:``"") one or more prefixes to match. Multiple prefixes are useful for tests; which might change for different run options, but most lines remain the same. FileCheck does not permit duplicate prefixes, even if one is a check prefix; and one is a comment prefix (see :option:`--comment-prefixes` below). .. option:: --check-prefixes prefix1,prefix2,... An alias of :option:`--check-prefix` that allows multiple prefixes to be; specified as a comma separated list. .. option:: --comment-prefixes prefix1,prefix2,... By default, FileCheck ignores any occurrence in ``match-filename`` of any check; prefix if it is preceded on the same line by ""``COM:``"" or ""``RUN:``"". See the; section `The ""COM:"" directive`_ for usage details. These default comment prefixes can be overridden by; :option:`--comment-prefixes` if they are not appropriate for your testing; environment. However, doing so is not recommended in LLVM's LIT-based test; suites, which should be easier to maintain if they all follow a consistent; comment style. In that case, consider proposing a change to the default; comment prefixes instead. .. option:: --allow-unused-prefixes. This option controls the behavior when using more than one prefix as specified; by :option:`--check-prefix` or :option:`--check-prefixes`, and some of these; prefixes are missing in the test file. If true, this is allowed, if false,; FileCheck will report an error, listing the missing prefixes. The default value; is false. .. option:: --input-file filename. File to check (defaults to stdin). .. option:: --match-full-lines. By default, FileCheck allows matches of anywhere on a line. This; option will require all positive matches to cover an entire; line. Leading and trailing whitespace is ignored, unless; :option:`--strict-whitespace` is also spec",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst:2346,test,testing,2346,interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/FileCheck.rst,1,['test'],['testing']
Testability,"u=core2 < %s | FileCheck %s -check-prefix=SSE2; ; RUN: llc -mcpu=corei7-avx < %s | FileCheck %s -check-prefix=AVX1; ; RUN: llc -mcpu=core-avx2 < %s | FileCheck %s -check-prefix=AVX2. And the checks are different:. .. code-block:: llvm. ; SSE2: @test1; ; SSE2: psubusw LCPI0_0(%rip), %xmm0; ; AVX1: @test1; ; AVX1: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0; ; AVX2: @test1; ; AVX2: vpsubusw LCPI0_0(%rip), %xmm0, %xmm0. So, if you're testing for a behaviour that you know is platform-specific or; depends on special features of sub-architectures, you must add the specific; triple, test with the specific FileCheck and put it into the specific; directory that will filter out all other architectures. Constraining test execution; ---------------------------. Some tests can be run only in specific configurations, such as; with debug builds or on particular platforms. Use ``REQUIRES``; and ``UNSUPPORTED`` to control when the test is enabled. Some tests are expected to fail. For example, there may be a known bug; that the test detect. Use ``XFAIL`` to mark a test as an expected failure.; An ``XFAIL`` test will be successful if its execution fails, and; will be a failure if its execution succeeds. .. code-block:: llvm. ; This test will be only enabled in the build with asserts.; ; REQUIRES: asserts; ; This test is disabled when running on Linux.; ; UNSUPPORTED: system-linux; ; This test is expected to fail when targeting PowerPC.; ; XFAIL: target=powerpc{{.*}}. ``REQUIRES`` and ``UNSUPPORTED`` and ``XFAIL`` all accept a comma-separated; list of boolean expressions. The values in each expression may be:. - Features added to ``config.available_features`` by configuration files such as ``lit.cfg``.; String comparison of features is case-sensitive. Furthermore, a boolean expression can; contain any Python regular expression enclosed in ``{{ }}``, in which case the boolean; expression is satisfied if any feature matches the regular expression. Regular; expressions can appear inside an identi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:19816,test,test,19816,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,"uage features supported by LLVM; worked under MCJIT, and objects to be loaded under the JIT had to be compiled to; target it (precluding the use of precompiled code from other sources under the; JIT). RuntimeDyld also provided very limited visibility into the linking process; itself: Clients could access conservative estimates of section size; (RuntimeDyld bundled stub size and padding estimates into the section size; value) and the final relocated bytes, but could not access RuntimeDyld's; internal object representations. Eliminating these restrictions and limitations was one of the primary motivations; for the development of JITLink. The llvm-jitlink tool; =====================. The ``llvm-jitlink`` tool is a command line wrapper for the JITLink library.; It loads some set of relocatable object files and then links them using; JITLink. Depending on the options used it will then execute them, or validate; the linked memory. The ``llvm-jitlink`` tool was originally designed to aid JITLink development by; providing a simple environment for testing. Basic usage; -----------. By default, ``llvm-jitlink`` will link the set of objects passed on the command; line, then search for a ""main"" function and execute it:. .. code-block:: sh. % cat hello-world.c; #include <stdio.h>. int main(int argc, char *argv[]) {; printf(""hello, world!\n"");; return 0;; }. % clang -c -o hello-world.o hello-world.c; % llvm-jitlink hello-world.o; Hello, World!. Multiple objects may be specified, and arguments may be provided to the JIT'd; main function using the -args option:. .. code-block:: sh. % cat print-args.c; #include <stdio.h>. void print_args(int argc, char *argv[]) {; for (int i = 0; i != argc; ++i); printf(""arg %i is \""%s\""\n"", i, argv[i]);; }. % cat print-args-main.c; void print_args(int argc, char *argv[]);. int main(int argc, char *argv[]) {; print_args(argc, argv);; return 0;; }. % clang -c -o print-args.o print-args.c; % clang -c -o print-args-main.o print-args-main.c; % llvm-jitli",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:37346,test,testing,37346,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['test'],['testing']
Testability,"ual Studio before v17.8 because it causes the following error:; # Assertion failed: Ctx->isFileContext() && ""We should have been looking; # only at file context here already."", file; # C:\build\workspace\root-pullrequests-build\root\interpreter\llvm-project\clang\lib\Sema\SemaLookup.cpp,; # line 1492; ROOT_ADD_GTEST(testRooFuncWrapper testRooFuncWrapper.cxx LIBRARIES RooFitCore RooFit HistFactory); endif(); endif(); ROOT_ADD_GTEST(testGlobalObservables testGlobalObservables.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testInterface TestStatistics/testInterface.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testLikelihoodSerial TestStatistics/testLikelihoodSerial.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testNaNPacker testNaNPacker.cxx LIBRARIES RooFitCore RooBatchCompute); ROOT_ADD_GTEST(testRooAbsL TestStatistics/testRooAbsL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooCurve testRooCurve.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHist testRooHist.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooHistPdf testRooHistPdf.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooPolyFunc testRooPolyFunc.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testRooRealL TestStatistics/testRooRealL.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooRombergIntegrator testRooRombergIntegrator.cxx LIBRARIES MathCore RooFitCore); ROOT_ADD_GTEST(testRooSTLRefCountList testRooSTLRefCountList.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooSimultaneous testRooSimultaneous.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooTruthModel testRooTruthModel.cxx LIBRARIES RooFitCore RooFit); ROOT_ADD_GTEST(testSumW2Error testSumW2Error.cxx LIBRARIES Gpad RooFitCore); ROOT_ADD_GTEST(testTestStatistics testTestStatistics.cxx LIBRARIES RooFitCore); ROOT_ADD_GTEST(testRooMinimizer testRooMinimizer.cxx LIBRARIES RooFitCore RooFit); if (roofit_multiprocess); ROOT_ADD_GTEST(testTestStatisticsPlot TestStatistics/testPlot.cxx LIBRARIES RooFitMultiProcess RooFitCore RooFit; COPY_TO_BUILDDIR ${CMAKE_CURRENT_SOURCE",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt:3935,test,testRooHistPdf,3935,roofit/roofitcore/test/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/roofit/roofitcore/test/CMakeLists.txt,2,['test'],['testRooHistPdf']
Testability,"ual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current test; file being compiled, and an overall completion percentage.; After the make test run completes, the absence of any; Failing Tests (count): message indicates that no tests; failed unexpectedly. If any tests did fail, the; Failing Tests (count): message will be followed by a list; of the test source file paths that failed. For example:. Failing Tests (3):; /home/john/llvm/tools/clang/test/SemaCXX/member-name-lookup.cpp; /home/john/llvm/tools/clang/test/SemaCXX/namespace-alias.cpp; /home/john/llvm/tools/clang/test/SemaCXX/using-directive.cpp. If you used the make VERBOSE=1 option, the terminal; output will reflect the error messages from the compiler and; test runner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:3952,test,test,3952,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"ualpha` (`ualpha` | ""0""...""9"")*; TokVarName: ""$"" `ualpha` (`ualpha` | ""0""...""9"")*. Note that, unlike most languages, TableGen allows :token:`TokIdentifier` to; begin with an integer. In case of ambiguity, a token is interpreted as a; numeric literal rather than an identifier. TableGen has the following reserved keywords, which cannot be used as; identifiers::. assert bit bits class code; dag def dump else false; foreach defm defset defvar field; if in include int let; list multiclass string then true. .. warning::; The ``field`` reserved word is deprecated, except when used with the; CodeEmitterGen backend where it's used to distinguish normal record; fields from encoding fields. Bang operators; --------------. TableGen provides ""bang operators"" that have a wide variety of uses:. .. productionlist::; BangOperator: one of; : !add !and !cast !con !dag; : !div !empty !eq !exists !filter; : !find !foldl !foreach !ge !getdagarg; : !getdagname !getdagop !gt !head !if; : !interleave !isa !le !listconcat !listremove; : !listsplat !logtwo !lt !mul !ne; : !not !or !range !repr !setdagarg; : !setdagname !setdagop !shl !size !sra; : !srl !strconcat !sub !subst !substr; : !tail !tolower !toupper !xor. The ``!cond`` operator has a slightly different; syntax compared to other bang operators, so it is defined separately:. .. productionlist::; CondOperator: !cond. See `Appendix A: Bang Operators`_ for a description of each bang operator. Include files; -------------. TableGen has an include mechanism. The content of the included file; lexically replaces the ``include`` directive and is then parsed as if it was; originally in the main file. .. productionlist::; IncludeDirective: ""include"" `TokString`. Portions of the main file and included files can be conditionalized using; preprocessor directives. .. productionlist::; PreprocessorDirective: ""#define"" | ""#ifdef"" | ""#ifndef"". Types; =====. The TableGen language is statically typed, using a simple but complete type; system. Types are ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:9311,log,logtwo,9311,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['log'],['logtwo']
Testability,"uble computeArea() = 0;; };. class Square : public Shape {; double SideLength;; public:; Square(double S) : Shape(SK_Square), SideLength(S) {}; double computeArea() override;; +; + static bool classof(const Shape *S) {; + return S->getKind() == SK_Square;; + }; };. class Circle : public Shape {; double Radius;; public:; Circle(double R) : Shape(SK_Circle), Radius(R) {}; double computeArea() override;; +; + static bool classof(const Shape *S) {; + return S->getKind() == SK_Circle;; + }; };. The job of ``classof`` is to dynamically determine whether an object of; a base class is in fact of a particular derived class. In order to; downcast a type ``Base`` to a type ``Derived``, there needs to be a; ``classof`` in ``Derived`` which will accept an object of type ``Base``. To be concrete, consider the following code:. .. code-block:: c++. Shape *S = ...;; if (isa<Circle>(S)) {; /* do something ... */; }. The code of the ``isa<>`` test in this code will eventually boil; down---after template instantiation and some other machinery---to a; check roughly like ``Circle::classof(S)``. For more information, see; :ref:`classof-contract`. The argument to ``classof`` should always be an *ancestor* class because; the implementation has logic to allow and optimize away; upcasts/up-``isa<>``'s automatically. It is as though every class; ``Foo`` automatically has a ``classof`` like:. .. code-block:: c++. class Foo {; [...]; template <class T>; static bool classof(const T *,; ::std::enable_if<; ::std::is_base_of<Foo, T>::value; >::type* = 0) { return true; }; [...]; };. Note that this is the reason that we did not need to introduce a; ``classof`` into ``Shape``: all relevant classes derive from ``Shape``,; and ``Shape`` itself is abstract (has no entry in the ``Kind`` enum),; so this notional inferred ``classof`` is all we need. See `Concrete; Bases and Deeper Hierarchies`_ for more information about how to extend; this example to more general hierarchies. Although for this small exampl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst:5962,test,test,5962,interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst,1,['test'],['test']
Testability,"ublic:; ~B();; };. void test() {; B *b = new B;; new (b) A;; delete b; // warn; }. undefbehavior.ExprEvalOrderUndef; (C, C++03); Undefined behavior: a scalar object shall have its stored value modified at; most once by the evaluation of an expression.; Note: most cases are currently handled by the Clang core (search for 'multiple; unsequenced modifications' warning in Clang tests).; Source: C++03 5p4. int test () {; int i = 0;; i = ++i + 1; // warn; return i;; }. undefbehavior.StaticInitReentered; (C++); Undefined behavior: static declaration is re-entered while the object is being; initialized.; Source: C++11 6.7p4. int test(int i) {; static int s = test(2 * i); // warn; return i + 1;; }. undefbehavior.ConstModified; (C, C++); Undefined behavior: const object is being modified.; Source: C++03 7.1.5.1p4, C++11 7.1.6.1p4. void test() {; const int *cp = new const int (0);; int *p = const_cast<int *>(cp);; *p = 1; // warn; delete p;; }. class C {; public :; int i;; C();; };. void test() {; const C cb;. C* cp = const_cast<C *>(&cb);; cp->i = 1; // warn; }. undefbehavior.DeadDestructed; (C++); Undefined behavior: the destructor is invoked for an object whose lifetime; has ended.; Source: C++11 12.4p14. class A {; public:; void f();; A();; ~A();; };. void test() {; A a;; a.~A();; } // warn. undefbehavior.MethodCallBeforeBaseInit; (C++); Undefined behavior: calls member function but base not yet initialized.; Source: C++03 12.6.2p8; C++11 12.6.2p13. class A {; public :; A(int);; };. class B : public A {; public :; int f();; B() : A(f()) {} // warn; };. undefbehavior.MemberOrBaseRefBeforeCtor; (C++); C++ Undefined behavior: non-static member or base class of non-POD class type; is referred before constructor begins execution.; C++11 Undefined behavior: non-static member or base class of a class with a; non-trivial constructor is referred before constructor begins execution.; Source: C++03 12.7p1; C++11 12.7p1. struct non_POD {; int i;; non_POD();; };. extern non_POD non_pod",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:9383,test,test,9383,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"ubstitutions are provided that are variations on this base set and; further substitution patterns can be defined by each test module. See the; modules :ref:`local-configuration-files`. More detailed information on substitutions can be found in the; :doc:`../TestingGuide`. TEST RUN OUTPUT FORMAT; ~~~~~~~~~~~~~~~~~~~~~~. The :program:`lit` output for a test run conforms to the following schema, in; both short and verbose modes (although in short mode no PASS lines will be; shown). This schema has been chosen to be relatively easy to reliably parse by; a machine (for example in buildbot log scraping), and for other tools to; generate. Each test result is expected to appear on a line that matches:. .. code-block:: none. <result code>: <test name> (<progress info>). where ``<result-code>`` is a standard test result such as PASS, FAIL, XFAIL,; XPASS, UNRESOLVED, or UNSUPPORTED. The performance result codes of IMPROVED and; REGRESSED are also allowed. The ``<test name>`` field can consist of an arbitrary string containing no; newline. The ``<progress info>`` field can be used to report progress information such; as (1/300) or can be empty, but even when empty the parentheses are required. Each test result may include additional (multiline) log information in the; following format:. .. code-block:: none. <log delineator> TEST '(<test name>)' <trailing delineator>; ... log message ...; <log delineator>. where ``<test name>`` should be the name of a preceding reported test, ``<log; delineator>`` is a string of ""*"" characters *at least* four characters long; (the recommended length is 20), and ``<trailing delineator>`` is an arbitrary; (unparsed) string. The following is an example of a test run output which consists of four tests A,; B, C, and D, and a log message for the failing test C:. .. code-block:: none. PASS: A (1 of 4); PASS: B (2 of 4); FAIL: C (3 of 4); ******************** TEST 'C' FAILED ********************; Test 'C' failed as a result of exit code 1.; ***********",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:22850,test,test,22850,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,1,['test'],['test']
Testability,uctions; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator#build-instructions>`_; for more details. Clang will expect the ``llvm-spirv`` executable to; be present in the ``PATH`` environment variable. Clang uses ``llvm-spirv``; with `the widely adopted assembly syntax package; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator/#build-with-spirv-tools>`_. `The versioning; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator/releases>`_ of; ``llvm-spirv`` is aligned with Clang major releases. The same applies to the; main development branch. It is therefore important to ensure the ``llvm-spirv``; version is in alignment with the Clang version. For troubleshooting purposes; ``llvm-spirv`` can be `tested in isolation; <https://github.com/KhronosGroup/SPIRV-LLVM-Translator#test-instructions>`_. Example usage for OpenCL kernel compilation:. .. code-block:: console. $ clang --target=spirv32 -c test.cl; $ clang --target=spirv64 -c test.cl. Both invocations of Clang will result in the generation of a SPIR-V binary file; `test.o` for 32 bit and 64 bit respectively. This file can be imported; by an OpenCL driver that support SPIR-V consumption or it can be compiled; further by offline SPIR-V consumer tools. Converting to SPIR-V produced with the optimization levels other than `-O0` is; currently available as an experimental feature and it is not guaranteed to work; in all cases. Clang also supports integrated generation of SPIR-V without use of ``llvm-spirv``; tool as an experimental feature when ``-fintegrated-objemitter`` flag is passed in; the command line. .. code-block:: console. $ clang --target=spirv32 -fintegrated-objemitter -c test.cl. Note that only very basic functionality is supported at this point and therefore; it is not suitable for arbitrary use cases. This feature is only enabled when clang; build is configured with ``-DLLVM_EXPERIMENTAL_TARGETS_TO_BUILD=SPIRV`` option. Linking is done using ``spirv-link`` from `the SPIRV-Tools project; <https://git,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:166838,test,test,166838,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"ude/RConfigure.h). ROOT_LINKER_LIBRARY(Core BUILTINS LZMA). generateHeader(Core; ${CMAKE_SOURCE_DIR}/core/base/src/root-argparse.py; ${CMAKE_BINARY_DIR}/ginclude/TApplicationCommandLineOptionsHelp.h; ). add_dependencies(Core CLING rconfigure). target_link_libraries(Core; PRIVATE; ${CMAKE_DL_LIBS}; ${CMAKE_THREAD_LIBS_INIT}; ${ROOT_ATOMIC_LIBS}; ). if (CMAKE_SYSTEM_NAME MATCHES FreeBSD); target_link_libraries(Core PUBLIC util procstat); endif(). target_include_directories(Core PUBLIC; $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/ginclude>; ). # Must be first because it defines ROOTStaticSanitizerConfig which needs; # to be linked into rootcling_stage1 (via ROOT_EXECUTABLE).; add_subdirectory(sanitizer). add_subdirectory(rootcling_stage1). add_subdirectory(base); add_subdirectory(clib); add_subdirectory(clingutils); add_subdirectory(cont); add_subdirectory(dictgen); add_subdirectory(foundation); add_subdirectory(gui); add_subdirectory(imt); add_subdirectory(meta); add_subdirectory(metacling); add_subdirectory(multiproc); add_subdirectory(newdelete); add_subdirectory(rint); add_subdirectory(testsupport); add_subdirectory(textinput); add_subdirectory(thread); add_subdirectory(zip); add_subdirectory(lzma); add_subdirectory(lz4); add_subdirectory(zstd). add_subdirectory(macosx); add_subdirectory(unix); add_subdirectory(winnt). #-------------------------------------------------------------------------------. if (libcxx AND NOT APPLE); # In case we use libcxx and glibc together there is a mismatch of the; # signatures of functions in the header wchar.h. This macro tweaks the; # header in rootcling resource directory to be compatible with the one from; # libc++.; target_compile_definitions(Core PRIVATE __CORRECT_ISO_CPP_WCHAR_H_PROTO); endif(). if(MSVC); # Definitions of MATH Macros (required in MathCore) like M_PI are only; # exposed on Windows after defining the _USE_MATH_DEFINES macro. By; # specifying it as a property for Core, we ensure that the macros are; # properly exposed ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt:1957,test,testsupport,1957,core/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/core/CMakeLists.txt,1,['test'],['testsupport']
Testability,"ude; ${CLANG_INCLUDE_DIRS}; ${LLVM_INCLUDE_DIRS}; ). # CLANG_INCLUDE_DIRS and LLVM_INCLUDE_DIRS can be a semicolon separated lists.; string(REPLACE "";"" ""${cling_path_delim}"" cling_include_deflt ""${cling_include_deflt}""); endif(). if(NOT CLING_INCLUDE_PATHS); set(CLING_INCLUDE_PATHS ""${cling_include_deflt}""); else(); set(CLING_INCLUDE_PATHS ""${CLING_INCLUDE_PATHS}${cling_path_delim}${cling_include_deflt}""); endif(). # All targets below may depend on all tablegen'd files.; get_property(CLANG_TABLEGEN_TARGETS GLOBAL PROPERTY CLANG_TABLEGEN_TARGETS); list(APPEND LLVM_COMMON_DEPENDS ${CLANG_TABLEGEN_TARGETS}). # And llvm-intrinsics.; if (TARGET intrinsics_gen); list(APPEND LLVM_COMMON_DEPENDS intrinsics_gen); endif(); if (TARGET clang-headers); list(APPEND LLVM_COMMON_DEPENDS clang-headers); endif(). add_subdirectory(include/cling/Interpreter); add_subdirectory(lib). if( CLING_INCLUDE_TESTS ); add_subdirectory(test). if(CLING_BUILT_STANDALONE); # Add a global check rule now that all subdirectories have been traversed; # and we know the total set of lit testsuites.; get_property(LLVM_LIT_TESTSUITES GLOBAL PROPERTY LLVM_LIT_TESTSUITES); get_property(LLVM_LIT_PARAMS GLOBAL PROPERTY LLVM_LIT_PARAMS); get_property(LLVM_LIT_DEPENDS GLOBAL PROPERTY LLVM_LIT_DEPENDS); get_property(LLVM_LIT_EXTRA_ARGS GLOBAL PROPERTY LLVM_LIT_EXTRA_ARGS); add_lit_target(check-all; ""Running all regression tests""; ${LLVM_LIT_TESTSUITES}; PARAMS ${LLVM_LIT_PARAMS}; DEPENDS ${LLVM_LIT_DEPENDS}; ARGS ${LLVM_LIT_EXTRA_ARGS}; ); endif(); endif(). add_subdirectory(tools). option(CLING_INCLUDE_DOCS ""Generate build targets for the Cling docs.""; ${LLVM_INCLUDE_DOCS}); if( CLING_INCLUDE_DOCS ); add_subdirectory(docs); endif(). if(EXISTS ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); file(REMOVE ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); endif(). if(CLING_ORDER_FILE STREQUAL ""${CMAKE_CURRENT_BINARY_DIR}/cling.order""); unset(CLING_ORDER_FILE CACHE); unset(CLING_ORDER_FILE); endif(). set(CLING_ORDER_FILE """" CACHE",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt:17156,test,testsuites,17156,interpreter/cling/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/CMakeLists.txt,1,['test'],['testsuites']
Testability,udnn). endif(). endif (). #--- CPU tests. ----------------------------; #; # always run the Cpu tests. If tmva-cpu is off (no Blas or no imt); # they will work using TMatrix operations. # DNN - Arithmetic Functions CPU; ROOT_EXECUTABLE(testArithmeticCpu TestMatrixArithmeticCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Arithmetic-Cpu COMMAND testArithmeticCpu). # DNN - Activation Functions CPU; ROOT_EXECUTABLE(testActivationFunctionsCpu TestActivationFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Activation-Functions-Cpu COMMAND testActivationFunctionsCpu). # DNN - Loss Functions CPU; ROOT_EXECUTABLE(testLossFunctionsCpu TestLossFunctionsCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Loss-Functions-Cpu COMMAND testLossFunctionsCpu). # DNN - Derivatives CPU; ROOT_EXECUTABLE(testDerivativesCpu TestDerivativesCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Derivatives-Cpu COMMAND testDerivativesCpu). # DNN - Backpropagation CPU; ROOT_EXECUTABLE(testBackpropagationCpu TestBackpropagationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-Cpu COMMAND testBackpropagationCpu). # DNN - BackpropagationDL CPU; ROOT_EXECUTABLE(testBackpropagationDLCpu TestBackpropagationDLCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Backpropagation-DL-Cpu COMMAND testBackpropagationDLCpu). # DNN - Batch normalization; ROOT_EXECUTABLE(testBatchNormalizationCpu TestBatchNormalizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-BatchNormalization-Cpu COMMAND testBatchNormalizationCpu). # DNN - Optimization CPU; ROOT_EXECUTABLE(testOptimizationCpu TestOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-Optimization-Cpu COMMAND testOptimizationCpu). # DNN - MethodDL SGD Optimization CPU; ROOT_EXECUTABLE(testMethodDLSGDOptimizationCpu TestMethodDLSGDOptimizationCpu.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-MethodDL-SGD-Optimization-Cpu COMMAND testMethodDLSGDOptimizationCpu). # DNN - Metho,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt:4801,test,testBackpropagationCpu,4801,tmva/tmva/test/DNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CMakeLists.txt,1,['test'],['testBackpropagationCpu']
Testability,"ue class for; wrapping types with qualifiers; you can use; the isConstQualified(), for example, to get one of the; qualifiers, and the getTypePtr() method to get the; wrapped Type* which you can then dump.; For LLDB users there are; data formatters for clang data structures in; ; clang/utils/ClangDataFormat.py. Debugging using Visual Studio. The files; ; llvm/utils/LLVMVisualizers/llvm.natvis and; ; clang/utils/ClangVisualizers/clang.natvis provide debugger visualizers; that make debugging of more complex data types much easier.; Depending on how you configure the project, Visual Studio may automatically; use these visualizers when debugging or you may be required to put the files; into %USERPROFILE%\Documents\Visual Studio <version>\Visualizers; or create a symbolic link so they update automatically. See; ; Microsoft's documentation for more details on use of NATVIS. Testing. Testing on Unix-like Systems. Clang includes a basic regression suite in the tree which can be; run with make test from the top-level clang directory, or; just make in the test sub-directory.; make VERBOSE=1 can be used to show more detail; about what is being run.; If you built LLVM and Clang using CMake, the test suite can be run; with make check-clang from the top-level LLVM directory.; The tests primarily consist of a test runner script running the compiler; under test on individual test files grouped in the directories under the; test directory. The individual test files include comments at the; beginning indicating the Clang compile options to use, to be read; by the test runner. Embedded comments also can do things like telling; the test runner that an error is expected at the current line.; Any output files produced by the test will be placed under; a created Output directory.; During the run of make test, the terminal output will; display a line similar to the following:; --- Running clang tests for i686-pc-linux-gnu ---; followed by a line continually overwritten with the current tes",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:2565,test,test,2565,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,2,['test'],['test']
Testability,"uffix"". For example, if configured to ""(_test)?$"", then a header a.h would be seen; as the ""main"" include in both a.cc and a_test.cc. .. _IncludeIsMainSourceRegex:. **IncludeIsMainSourceRegex** (``String``) :versionbadge:`clang-format 10` :ref:`¶ <IncludeIsMainSourceRegex>`; Specify a regular expression for files being formatted; that are allowed to be considered ""main"" in the; file-to-main-include mapping. By default, clang-format considers files as ""main"" only when they end; with: ``.c``, ``.cc``, ``.cpp``, ``.c++``, ``.cxx``, ``.m`` or ``.mm``; extensions.; For these files a guessing of ""main"" include takes place; (to assign category 0, see above). This config option allows for; additional suffixes and extensions for files to be considered as ""main"". For example, if this option is configured to ``(Impl\.hpp)$``,; then a file ``ClassImpl.hpp`` is considered ""main"" (in addition to; ``Class.c``, ``Class.cc``, ``Class.cpp`` and so on) and ""main; include file"" logic will be executed (with *IncludeIsMainRegex* setting; also being respected in later phase). Without this option set,; ``ClassImpl.hpp`` would not have the main include file put on top; before any other include. .. _IndentAccessModifiers:. **IndentAccessModifiers** (``Boolean``) :versionbadge:`clang-format 13` :ref:`¶ <IndentAccessModifiers>`; Specify whether access modifiers should have their own indentation level. When ``false``, access modifiers are indented (or outdented) relative to; the record members, respecting the ``AccessModifierOffset``. Record; members are indented one level below the record.; When ``true``, access modifiers get their own indentation level. As a; consequence, record members are always indented 2 levels below the record,; regardless of the access modifier presence. Value of the; ``AccessModifierOffset`` is ignored. .. code-block:: c++. false: true:; class C { vs. class C {; class D { class D {; void bar(); void bar();; protected: protected:; D(); D();; }; };; public: public:; C();",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst:69465,log,logic,69465,interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ClangFormatStyleOptions.rst,1,['log'],['logic']
Testability,"uffix_idx} EQUAL -1); list(REMOVE_AT CMAKE_FIND_LIBRARY_SUFFIXES ${shared_lib_suffix_idx}); endif(); endforeach(); endif(). # Use libtool instead of ar if you are both on an Apple host, and targeting Apple.; if(CMAKE_HOST_APPLE AND APPLE); include(UseLibtool); endif(). # Override the default target with an environment variable named by LLVM_TARGET_TRIPLE_ENV.; set(LLVM_TARGET_TRIPLE_ENV CACHE STRING ""The name of environment variable to override default target. Disabled by blank.""); mark_as_advanced(LLVM_TARGET_TRIPLE_ENV). if(CMAKE_SYSTEM_NAME MATCHES ""BSD|Linux|OS390""); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default ON); else(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default OFF); endif(); set(LLVM_ENABLE_PER_TARGET_RUNTIME_DIR ${LLVM_ENABLE_PER_TARGET_RUNTIME_DIR_default} CACHE BOOL; ""Enable per-target runtimes directory""). set(LLVM_PROFDATA_FILE """" CACHE FILEPATH; ""Profiling data file to use when compiling in order to improve runtime performance.""). if(LLVM_INCLUDE_TESTS); # Lit test suite requires at least python 3.6; set(LLVM_MINIMUM_PYTHON_VERSION 3.6); else(); # FIXME: it is unknown if this is the actual minimum bound; set(LLVM_MINIMUM_PYTHON_VERSION 3.0); endif(). # Find python before including config-ix, since it needs to be able to search; # for python modules.; find_package(Python3 ${LLVM_MINIMUM_PYTHON_VERSION} REQUIRED; COMPONENTS Interpreter). # All options referred to from HandleLLVMOptions have to be specified; # BEFORE this include, otherwise options will not be correctly set on; # first cmake run; include(config-ix). # By default, we target the host, but this can be overridden at CMake; # invocation time. Except on 64-bit AIX, where the system toolchain; # expect 32-bit objects by default.; if(""${LLVM_HOST_TRIPLE}"" MATCHES ""^powerpc64-ibm-aix""); string(REGEX REPLACE ""^powerpc64"" ""powerpc"" LLVM_DEFAULT_TARGET_TRIPLE_DEFAULT ""${LLVM_HOST_TRIPLE}""); else(); # Only set default triple when native target is enabled.; if (LLVM_NATIVE_TARGET); set(LLVM_DEFA",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt:37356,test,test,37356,interpreter/llvm-project/llvm/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/CMakeLists.txt,1,['test'],['test']
Testability,"uild LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang tests simultaneously using:. .. code-block:: bash. % make check-all. To run the tests with Valgrind (Memcheck by default), use the ``LIT_ARGS`` make; variable to pass the required options to lit. For example, you can use:. .. code-block:: bash. % make check LIT_ARGS=""-v --vg --vg-leak"". to enable testing with valgrind and with leak checking enabled. To run individual tests or subsets of tests, you can use the ``llvm-lit``; script which is built as part of LLVM. For example, to run the; ``Integer/BitPacked.ll`` test by itself you can run:. .. code-block:: bash. % llvm-lit ~/llvm/test/Integer/BitPacked.ll. or to run all of the ARM CodeGen tests:. .. code-block:: bash. % llvm-lit ~/llvm/test/CodeGen/ARM. The regression tests will use the Python psutil module only if installed in a; **non-user** location. Under Linux, install with sudo or within a virtual; environment. Under Windows, install Python for all users and then run; ``pip install psutil`` in an elevated command prompt. For more information on using the :program:`lit` tool, see ``llvm-lit --help``; or the :doc:`lit man page <CommandGuide/lit>`. Debugging Information tests; ---------------------------. To run debugging information tests simply add the ``cross-project-tests``; project to your ``LLVM_ENABLE_PROJECTS`` define on the cmake; command-line. Regression test structure; =========================. The LLVM regression tests are driven by :program:`lit` and are located in the; ``llvm/test`` directory. This directory contains a large array of small tests that exercise; various features of LLVM and to ensure that regressions do not occur.; The directory is broken into several sub-directories, each focused on a; particular area of LLVM. Writing new regression tests; ----------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:6304,test,tests,6304,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,"uild time, otherwise the drawing package will be loaded. There is also a list of specific rules:. - Positioned volumes should not extrude their container or intersect; with others within this unless it is specified (see section:; Overlapping Volumes).; - The top volume (containing all geometry trees) must be specified; before closing the geometry and must not be positioned - it; represents the global reference frame.; - After building the full geometry tree, the geometry must be closed; (see the method **`TGeoManager`**`::CloseGeometry()`). Voxelization; can be redone per volume after this process. The list is much bigger and we will describe in more detail the geometry; creation procedure in the following sections. Provided that geometry was; successfully built and closed, the **`TGeoManager`** class will register; itself to ROOT and the logical/physical structures will become; immediately browsable. ### The Volume Hierarchy. The basic components used for building the logical hierarchy of the; geometry are the positioned volumes called `nodes`. Volumes are fully; defined geometrical objects having a given shape and medium and possibly; containing a list of nodes. Nodes represent just positioned instances of; volumes inside a container volume but users do not directly create them.; They are automatically created as a result of adding one volume inside; other or dividing a volume. The geometrical transformation held by nodes; is always defined with respect to their mother (relative positioning).; Reflection matrices are allowed. A hierarchical element is not fully defined by a node since nodes are; not directly linked to each other, but through volumes (a node points to; a volume, which at its turn points to a list of nodes):. `NodeTop ` ` VolTop ` ` NodeA ` ` VolA ` `...`. One can therefore talk about ""the node or volume hierarchy"", but in; fact, an element is made by a pair volume-node. In the line above is; represented just a single branch, but of course from any v",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:58425,log,logical,58425,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"uld also presumably be implemented; if we have whole-function selectiondags. //===---------------------------------------------------------------------===//. Take the following code; (from http://gcc.gnu.org/bugzilla/show_bug.cgi?id=34653):; extern unsigned long table[];; unsigned long foo(unsigned char *p) {; unsigned long tag = *p;; return table[tag >> 4] + table[tag & 0xf];; }. Current code generated:; 	movzbl	(%rdi), %eax; 	movq	%rax, %rcx; 	andq	$240, %rcx; 	shrq	%rcx; 	andq	$15, %rax; 	movq	table(,%rax,8), %rax; 	addq	table(%rcx), %rax; 	ret. Issues:; 1. First movq should be movl; saves a byte.; 2. Both andq's should be andl; saves another two bytes. I think this was; implemented at one point, but subsequently regressed.; 3. shrq should be shrl; saves another byte.; 4. The first andq can be completely eliminated by using a slightly more; expensive addressing mode. //===---------------------------------------------------------------------===//. Consider the following (contrived testcase, but contains common factors):. #include <stdarg.h>; int test(int x, ...) {; int sum, i;; va_list l;; va_start(l, x);; for (i = 0; i < x; i++); sum += va_arg(l, int);; va_end(l);; return sum;; }. Testcase given in C because fixing it will likely involve changing the IR; generated for it. The primary issue with the result is that it doesn't do any; of the optimizations which are possible if we know the address of a va_list; in the current function is never taken:; 1. We shouldn't spill the XMM registers because we only call va_arg with ""int"".; 2. It would be nice if we could sroa the va_list.; 3. Probably overkill, but it'd be cool if we could peel off the first five; iterations of the loop. Other optimizations involving functions which use va_arg on floats which don't; have the address of a va_list taken:; 1. Conversely to the above, we shouldn't spill general registers if we only; call va_arg on ""double"".; 2. If we know nothing more than 64 bits wide is read from the XMM registe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt:4945,test,testcase,4945,interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README-X86-64.txt,1,['test'],['testcase']
Testability,"uld be used instead of; '``undef``' whenever possible. Poison values are stronger than undef, and; enable more optimizations. Just the existence of '``undef``' blocks certain; optimizations (see the examples below). Undefined values are useful because they indicate to the compiler that; the program is well defined no matter what value is used. This gives the; compiler more freedom to optimize. Here are some examples of; (potentially surprising) transformations that are valid (in pseudo IR):. .. code-block:: llvm. %A = add %X, undef; %B = sub %X, undef; %C = xor %X, undef; Safe:; %A = undef; %B = undef; %C = undef. This is safe because all of the output bits are affected by the undef; bits. Any output bit can have a zero or one depending on the input bits. .. code-block:: llvm. %A = or %X, undef; %B = and %X, undef; Safe:; %A = -1; %B = 0; Safe:; %A = %X ;; By choosing undef as 0; %B = %X ;; By choosing undef as -1; Unsafe:; %A = undef; %B = undef. These logical operations have bits that are not always affected by the; input. For example, if ``%X`` has a zero bit, then the output of the; '``and``' operation will always be a zero for that bit, no matter what; the corresponding bit from the '``undef``' is. As such, it is unsafe to; optimize or assume that the result of the '``and``' is '``undef``'.; However, it is safe to assume that all bits of the '``undef``' could be; 0, and optimize the '``and``' to 0. Likewise, it is safe to assume that; all the bits of the '``undef``' operand to the '``or``' could be set,; allowing the '``or``' to be folded to -1. .. code-block:: llvm. %A = select undef, %X, %Y; %B = select undef, 42, %Y; %C = select %X, %Y, undef; Safe:; %A = %X (or %Y); %B = 42 (or %Y); %C = %Y (if %Y is provably not poison; unsafe otherwise); Unsafe:; %A = undef; %B = undef; %C = undef. This set of examples shows that undefined '``select``' (and conditional; branch) conditions can go *either way*, but they have to come from one; of the two operands. In the ``%A",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:192057,log,logical,192057,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['logical']
Testability,"uld have; explicit ``header`` declarations. Use the; ``-Wincomplete-umbrella`` warning option to ask Clang to complain; about headers not covered by the umbrella header or the module map. A header with the ``private`` specifier may not be included from outside the module itself. A header with the ``textual`` specifier will not be compiled when the module is; built, and will be textually included if it is named by a ``#include``; directive. However, it is considered to be part of the module for the purpose; of checking *use-declaration*\s, and must still be a lexically-valid header; file. In the future, we intend to pre-tokenize such headers and include the; token sequence within the prebuilt module representation. A header with the ``exclude`` specifier is excluded from the module. It will not be included when the module is built, nor will it be considered to be part of the module, even if an ``umbrella`` header or directory would otherwise make it part of the module. **Example:** The C header ``assert.h`` is an excellent candidate for a textual header, because it is meant to be included multiple times (possibly with different ``NDEBUG`` settings). However, declarations within it should typically be split into a separate modular header. .. parsed-literal::. module std [system] {; textual header ""assert.h""; }. A given header shall not be referenced by more than one *header-declaration*. Two *header-declaration*\s, or a *header-declaration* and a ``#include``, are; considered to refer to the same file if the paths resolve to the same file; and the specified *header-attr*\s (if any) match the attributes of that file,; even if the file is named differently (for instance, by a relative path or; via symlinks). .. note::; The use of *header-attr*\s avoids the need for Clang to speculatively; ``stat`` every header referenced by a module map. It is recommended that; *header-attr*\s only be used in machine-generated module maps, to avoid; mismatches between attribute values a",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst:37820,assert,assert,37820,interpreter/llvm-project/clang/docs/Modules.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/Modules.rst,1,['assert'],['assert']
Testability,"uld this be done? Just convert each function to a number, and gather; all of them in a special hash-table. Functions with equal hashes are equal.; Good hashing means, that every function part must be taken into account. That; means we have to convert every function part into some number, and then add it; into the hash. The lookup-up time would be small, but such an approach adds some; delay due to the hashing routine. Logarithmical search; """"""""""""""""""""""""""""""""""""""""; We could introduce total ordering among the functions set, once ordered we; could then implement a logarithmical search. Lookup time still depends on N,; but adds a little of delay (*log(N)*). Present state; """"""""""""""""""""""""""; Both of the approaches (random-access and logarithmical) have been implemented; and tested and both give a very good improvement. What was most; surprising is that logarithmical search was faster; sometimes by up to 15%. The; hashing method needs some extra CPU time, which is the main reason why it works; slower; in most cases, total ""hashing"" time is greater than total; ""logarithmical-search"" time. So, preference has been granted to the ""logarithmical search"". Though in the case of need, *logarithmical-search* (read ""total-ordering"") could; be used as a milestone on our way to the *random-access* implementation. Every comparison is based either on the numbers or on the flags comparison. In; the *random-access* approach, we could use the same comparison algorithm.; During comparison, we exit once we find the difference, but here we might have; to scan the whole function body every time (note, it could be slower). Like in; ""total-ordering"", we will track every number and flag, but instead of; comparison, we should get the numbers sequence and then create the hash number.; So, once again, *total-ordering* could be considered as a milestone for even; faster (in theory) random-access approach. MergeFunctions, main fields and runOnModule; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; There are tw",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:6738,log,logarithmical-search,6738,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['log'],['logarithmical-search']
Testability,"ult all such opcodes are filtered out.; This flag will instead show only such unstable opcodes. .. option:: --ignore-invalid-sched-class=false. If set, ignore instructions that do not have a sched class (class idx = 0). .. option:: --mtriple=<triple name>. Target triple. See `-version` for available targets. .. option:: --mcpu=<cpu name>. If set, measure the cpu characteristics using the counters for this CPU. This; is useful when creating new sched models (the host CPU is unknown to LLVM).; (`-mcpu=help` for details). .. option:: --analysis-override-benchmark-triple-and-cpu. By default, llvm-exegesis will analyze the benchmarks for the triple/CPU they; were measured for, but if you want to analyze them for some other combination; (specified via `-mtriple`/`-mcpu`), you can pass this flag. .. option:: --dump-object-to-disk=true. If set, llvm-exegesis will dump the generated code to a temporary file to; enable code inspection. Disabled by default. .. option:: --use-dummy-perf-counters. If set, llvm-exegesis will not read any real performance counters and; return a dummy value instead. This can be used to ensure a snippet doesn't; crash when hardware performance counters are unavailable and for; debugging :program:`llvm-exegesis` itself. .. option:: --execution-mode=[inprocess,subprocess]. This option specifies what execution mode to use. The `inprocess` execution; mode is the default. The `subprocess` execution mode allows for additional; features such as memory annotations but is currently restricted to X86-64; on Linux. .. option:: --benchmark-repeat-count=<repeat-count>. This option enables specifying the number of times to repeat the measurement; when performing latency measurements. By default, llvm-exegesis will repeat; a latency measurement enough times to balance run-time and noise reduction. EXIT STATUS; -----------. :program:`llvm-exegesis` returns 0 on success. Otherwise, an error message is; printed to standard error, and the tool returns a non 0 value.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:18118,benchmark,benchmark-repeat-count,18118,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmark-repeat-count']
Testability,"ult), it is; assumed that the **`Tree`** descriptor is given in the first line of the; file with a syntax like: `A/D:Table[2]/F:Ntracks/I:astring/C`. Otherwise branchDescriptor must be specified with the above syntax.Lines; in the input file starting with ""\#"" are ignored. A **`TBranch`** object; is created for each variable in the expression. The total number of rows; read from the file is returned. ## Trees in Analysis. The methods `TTree::Draw`, `TTree::MakeClass` and; `TTree::MakeSelector` are available for data analysis using trees. The; **`TTree::Draw`** method is a powerful yet simple way to look and draw the; trees contents. It enables you to plot a variable (a leaf) with just one; line of code. However, the Draw method falls short once you want to look; at each entry and design more sophisticated acceptance criteria for your; analysis. For these cases, you can use `TTree::MakeClass`. It creates a; class that loops over the trees entries one by one. You can then expand; it to do the logic of your analysis. The `TTree::MakeSelector` is the recommended method for ROOT data; analysis. It is especially important for large data set in a parallel; processing configuration where the analysis is distributed over several; processors and you can specify which entries to send to each processor.; With `MakeClass` the user has control over the event loop, with; `MakeSelector `the tree is in control of the event loop. ## Simple Analysis Using TTree::Draw. We will use the tree in `cernstaff.root` that was made by the macro in; `$ROOTSYS/tutorials/tree/staff.C`. First, open the file and lists its contents. ``` {.cpp}; root[] TFile f (""cernstaff.root""); root[] f.ls(); TFile** cernstaff.root; TFile* cernstaff.root; KEY: TTree T;1 staff data from ascii file; ```. We can see the **`TTree `**""`T`"" in the file. We will use it to; experiment with the **`TTree::Draw`** method, so let's create a pointer to it:. ``` {.cpp}; root[] TTree *MyTree = T; ```. Cling allows us to get simply",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:68128,log,logic,68128,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,1,['log'],['logic']
Testability,"ume(); // (*); // then:; TGeoMaterial *cmat = cvol->GetMedium()->GetMaterial();; ```. (\*) Note: If the current point is in fact outside the geometry, the; current node pointer will not be NULL, but pointing to the top node. In order to take decisions in such case one needs always to test:. ``` {.cpp}; if (gGeoManager->IsOutside()) {; // current point is actually outside; ... // corresponding action; }; ```. Specific information related to the current volume/node like ID's or; shape can be then retrieved from the corresponding objects. - Current state `index`. The number of possible different states of; the modeller corresponds to the number of different objects/paths in; the geometry. This has nothing to do with the number of nodes, since; the same node can be found on different branches. In other words,; the number of states corresponds to the number of nodes in the; `expanded geometry tree`. Since unfortunately this expansion from; logical to physical hierarchy cannot be stored on regular basis due; to the large size of the latter, one cannot directly assign state; numbers. If the size of the expansion proves however to be small; enough (less than about 50 million objects), a parallel structure; storing these state indices is built and stored in memory. In such; case each state automatically gets an index that can be retrieved; after any state initialization. These indices can prove to be quite; useful for being able to keep track of the navigation history and; force certain states. Let's illustrate how this works with a simple; example:; - Suppose we have a simple geometry with a volume B positioned twice; inside a container A. Then A is positioned twice in a top container; T. The complete list of logical nodes is: `T_1`, `A_1`, `A_2`,; `B_1`, `B_2`. On the other hand we will have more states than; logical nodes:; - `/T_1`- 1 state at level = 0; - `/T_1/A_1,/T_1/A_2`- 2 states at level = 1; - `/T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2` - 4 states at; l",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md:109549,log,logical,109549,documentation/users-guide/Geometry.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Geometry.md,1,['log'],['logical']
Testability,"ument. Semantics:; """""""""""""""""""". This intrinsic splits a floating point value into a normalized; fractional component and integral exponent. For a non-zero argument, returns the argument multiplied by some power; of two such that the absolute value of the returned value is in the; range [0.5, 1.0), with the same sign as the argument. The second; result is an integer such that the first result raised to the power of; the second result is the input argument. If the argument is a zero, returns a zero with the same sign and a 0; exponent. If the argument is a NaN, a NaN is returned and the returned exponent; is unspecified. If the argument is an infinity, returns an infinity with the same sign; and an unspecified exponent. .. _int_log:. '``llvm.log.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log.f32(float %Val); declare double @llvm.log.f64(double %Val); declare x86_fp80 @llvm.log.f80(x86_fp80 %Val); declare fp128 @llvm.log.f128(fp128 %Val); declare ppc_fp128 @llvm.log.ppcf128(ppc_fp128 %Val). Overview:; """""""""""""""""". The '``llvm.log.*``' intrinsics compute the base-e logarithm of the specified; value. Arguments:; """""""""""""""""""". The argument and return value are floating-point numbers of the same type. Semantics:; """""""""""""""""""". Return the same value as a corresponding libm '``log``' function but without; trapping or setting ``errno``. When specified with the fast-math-flag 'afn', the result may be approximated; using a less accurate calculation. .. _int_log10:. '``llvm.log10.*``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". This is an overloaded intrinsic. You can use ``llvm.log10`` on any; floating-point or vector of floating-point type. Not all targets support; all types however. ::. declare float @llvm.log10.f32(float %Val); declare double @llvm.log10.f64(double %Va",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:567782,log,log,567782,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['log'],['log']
Testability,"ument;; vector<; map<; [...],; map<; [float != double],; [...]>>>. .. option:: -fcaret-diagnostics-max-lines:. Controls how many lines of code clang prints for diagnostics. By default,; clang prints a maximum of 16 lines of code. .. option:: -fdiagnostics-show-line-numbers:. Controls whether clang will print a margin containing the line number on; the left of each line of code it prints for diagnostics. Default:. ::. test.cpp:5:1: error: 'main' must return 'int'; 5 | void main() {}; | ^~~~; | int. With -fno-diagnostics-show-line-numbers:. ::. test.cpp:5:1: error: 'main' must return 'int'; void main() {}; ^~~~; int. .. _cl_diag_warning_groups:. Individual Warning Groups; ^^^^^^^^^^^^^^^^^^^^^^^^^. TODO: Generate this from tblgen. Define one anchor per warning group. .. option:: -Wextra-tokens. Warn about excess tokens at the end of a preprocessor directive. This option, which defaults to on, enables warnings about extra; tokens at the end of preprocessor directives. For example:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^. These extra tokens are not strictly conforming, and are usually best; handled by commenting them out. .. option:: -Wambiguous-member-template. Warn about unqualified uses of a member template whose name resolves to; another template at the location of the use. This option, which defaults to on, enables a warning in the; following code:. ::. template<typename T> struct set{};; template<typename T> struct trait { typedef const T& type; };; struct Value {; template<typename T> void set(typename trait<T>::type value) {}; };; void foo() {; Value v;; v.set<double>(3.2);; }. C++ [basic.lookup.classref] requires this to be an error, but,; because it's hard to work around, Clang downgrades it to a warning; as an extension. .. option:: -Wbind-to-temporary-copy. Warn about an unusable copy constructor when binding a reference to a; temporary. This option enables warnings about binding a; reference to a te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:19942,test,test,19942,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"umn 2 page list frame; | | ...; |; |---- Cluster 2 column list frame; | ... In order to save space, the page descriptions (inner items) are _not_ in a record frame.; If at a later point more information per page is needed,; the page list envelope can be extended by additional list and record frames. #### Suppressed Columns. If the element offset in the inner list frame is negative (sign bit set), the column is suppressed.; Writers should write the lowest int64_t value, readers should check for a negative value.; Suppressed columns always have an empty list of pages.; Suppressed columns omit the compression settings in the inner list frame. Suppressed columns belong to a secondary column representation (see Section ""Column Description""); that is inactive in the current cluster.; The number of columns; and the absolute values of the element offsets of primary and secondary representations are identical.; When reading a field of a certain entry, this assertion allows for searching the corresponding; cluster and column element indexes using any of the column representations.; It also means that readers need to get the element index offset and the number of elements of suppressed columns; from the corresponding columns of the primary column representation. In every cluster, every field has exactly one primary column representation.; All other representations must be suppressed.; Note that the primary column representation can change from cluster to cluster. ## Mapping of C++ Types to Fields and Columns. This section is a comprehensive list of the C++ types with RNTuple I/O support.; Within the supported type system complex types can be freely composed,; e.g. `std::vector<MyEvent>` or `std::vector<std::vector<float>>`. ### Fundamental Types. The following fundamental types are stored as `leaf` fields with a single column each.; Fundamental C++ types can potentially be stored in multiple possible column types.; The possible combinations are marked as `W` in the following ta",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/BinaryFormatSpecification.md:36916,assert,assertion,36916,tree/ntuple/v7/doc/BinaryFormatSpecification.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/BinaryFormatSpecification.md,1,['assert'],['assertion']
Testability,"umn. Print column number in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the column number of a diagnostic. For example, when this is; enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will print ""test.c:28: warning..."" with; no column number. The printed column numbers count bytes from the beginning of the; line; take care if your source contains multibyte characters. .. _opt_fshow-source-location:. .. option:: -f[no-]show-source-location. Print source file/line/column information in diagnostic. This option, which defaults to on, controls whether or not Clang; prints the filename, line number and column number of a diagnostic.; For example, when this is enabled, Clang will print something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. When this is disabled, Clang will not print the ""test.c:28:8: ""; part. .. _opt_fcaret-diagnostics:. .. option:: -f[no-]caret-diagnostics. Print source line and ranges from source code in diagnostic.; This option, which defaults to on, controls whether or not Clang; prints the source line, source ranges, and caret when emitting a; diagnostic. For example, when this is enabled, Clang will print; something like:. ::. test.c:28:8: warning: extra tokens at end of #endif directive [-Wextra-tokens]; #endif bad; ^; //. .. option:: -f[no-]color-diagnostics. This option, which defaults to on when a color-capable terminal is; detected, controls whether or not Clang prints diagnostics in color. When this option is enabled, Clang will use colors to highlight; specific parts of the diagnostic, e.g.,. .. nasty hack to not lose our dignity. .. raw:: html. <pre>; <b><span style=""color:black"">test.c:28:8: <span style=""color:magenta"">warning</span>: extra tokens at end of #endif directive [-Wextra-tokens]</span></b>; #endif bad; <",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:6676,test,test,6676,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"unction_to_test`` is static and could not be resolved outside; ``test_code.o``, the two ``function_to_mock`` functions would result in a; duplicate definition error, and ``irrelevant_external`` is undefined.; However, using ``-harness`` and ``-phony-externals`` we can run this code; with:. .. code-block:: sh. % clang -c -o test_code_harness.o test_code_harness.c; % llvm-jitlink -phony-externals test_code.o -harness test_code_harness.o; used mock utility function; Y is 42. The ``-harness`` option may be of interest to people who want to perform some; very late testing on build products to verify that compiled code behaves as; expected. On basic C test cases this is relatively straightforward. Mocks for; more complicated languages (e.g. C++) are much trickier: Any code involving; classes tends to have a lot of non-trivial surface area (e.g. vtables) that; would require great care to mock. Tips for JITLink backend developers; -----------------------------------. #. Make liberal use of assert and ``llvm::Error``. Do *not* assume that the input; object is well formed: Return any errors produced by libObject (or your own; object parsing code) and validate as you construct. Think carefully about the; distinction between contract (which should be validated with asserts and; llvm_unreachable) and environmental errors (which should generate; ``llvm::Error`` instances). #. Don't assume you're linking in-process. Use libSupport's sized,; endian-specific types when reading/writing content in the ``LinkGraph``. As a ""minimum viable"" JITLink wrapper, the ``llvm-jitlink`` tool is an; invaluable resource for developers bringing in a new JITLink backend. A standard; workflow is to start by throwing an unsupported object at the tool and seeing; what error is returned, then fixing that (you can often make a reasonable guess; at what should be done based on existing code for other formats or; architectures). In debug builds of LLVM, the ``-debug-only=jitlink`` option dumps logs from the",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst:42945,assert,assert,42945,interpreter/llvm-project/llvm/docs/JITLink.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/JITLink.rst,1,['assert'],['assert']
Testability,unit-map.h; flang/runtime/unit.h; flang/tools/bbc/bbc.cpp; flang/tools/f18/dump.cpp; flang/tools/f18-parse-demo/f18-parse-demo.cpp; flang/tools/f18-parse-demo/stub-evaluate.cpp; flang/tools/fir-opt/fir-opt.cpp; flang/tools/flang-driver/driver.cpp; flang/tools/flang-driver/fc1_main.cpp; flang/tools/tco/tco.cpp; flang/unittests/Common/FastIntSetTest.cpp; flang/unittests/Decimal/quick-sanity-test.cpp; flang/unittests/Decimal/thorough-test.cpp; flang/unittests/Evaluate/bit-population-count.cpp; flang/unittests/Evaluate/expression.cpp; flang/unittests/Evaluate/folding.cpp; flang/unittests/Evaluate/fp-testing.cpp; flang/unittests/Evaluate/fp-testing.h; flang/unittests/Evaluate/integer.cpp; flang/unittests/Evaluate/intrinsics.cpp; flang/unittests/Evaluate/ISO-Fortran-binding.cpp; flang/unittests/Evaluate/leading-zero-bit-count.cpp; flang/unittests/Evaluate/logical.cpp; flang/unittests/Evaluate/real.cpp; flang/unittests/Evaluate/reshape.cpp; flang/unittests/Evaluate/testing.cpp; flang/unittests/Evaluate/testing.h; flang/unittests/Evaluate/uint128.cpp; flang/unittests/Frontend/CompilerInstanceTest.cpp; flang/unittests/Frontend/FrontendActionTest.cpp; flang/unittests/Optimizer/InternalNamesTest.cpp; flang/unittests/Optimizer/KindMappingTest.cpp; flang/unittests/Optimizer/RTBuilder.cpp; flang/unittests/Optimizer/Builder/CharacterTest.cpp; flang/unittests/Optimizer/Builder/ComplexTest.cpp; flang/unittests/Optimizer/Builder/DoLoopHelperTest.cpp; flang/unittests/Optimizer/Builder/FIRBuilderTest.cpp; flang/unittests/Optimizer/Builder/Runtime/AssignTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CharacterTest.cpp; flang/unittests/Optimizer/Builder/Runtime/CommandTest.cpp; flang/unittests/Optimizer/Builder/Runtime/DerivedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/NumericTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RaggedTest.cpp; flang/unittests/Optimizer/Builder/Runtime/ReductionTest.cpp; flang/unittests/Optimizer/Builder/Runtime/RuntimeCallTestBase.h; flang/uni,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:127142,test,testing,127142,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['testing']
Testability,unittests/Runtime/Inquiry.cpp; flang/unittests/Runtime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/mat,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129540,benchmark,benchmarks,129540,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/math/TwoInputSingleOutputDiff.h; libc/fuzzing/stdlib/atof_differential_fuzz.cpp; libc/fuzzing/stdlib/qsort_fuzz.cpp; libc/fuzzing/stdlib/StringParserOutputDiff.h; libc/fuzzing/string/strcmp_fuzz.cpp; libc/fuzzing/string/strstr_fuzz.cpp; libc/include/__llvm-libc-common.h; libc/include/llvm-libc-macros/fcntl-macros.h; libc/include/llvm-libc-macros,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129922,benchmark,benchmarks,129922,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"unner.; The regression suite can also be run with Valgrind by running; make test VG=1 in the top-level clang directory.; For more intensive changes, running; the LLVM; Test Suite with clang is recommended. Currently the best way to; override LLVMGCC, as in: make LLVMGCC=""clang -std=gnu89""; TEST=nightly report (make sure clang is in your PATH or use the; full path). Testing using Visual Studio on Windows. The Clang test suite can be run from either Visual Studio or; the command line.; Note that the test runner is based on; Python, which must be installed. Find Python at:; https://www.python.org/downloads/.; Download the latest stable version.; The GnuWin32 tools are also necessary for running the tests.; Get them from ; http://getgnuwin32.sourceforge.net/.; If the environment variable %PATH% does not have GnuWin32,; or if other grep(s) supercedes GnuWin32 on %PATH%,; you should specify LLVM_LIT_TOOLS_DIR; to CMake explicitly.; The cmake build tool is set up to create Visual Studio project files; for running the tests, ""check-clang"" being the root. Therefore, to; run the test from Visual Studio, right-click the check-clang project; and select ""Build"". Please see also; Getting Started; with the LLVM System using Microsoft Visual Studio and; Building LLVM with CMake.; . Testing on the Command Line. If you want more control over how the tests are run, it may; be convenient to run the test harness on the command-line directly. Before; running tests from the command line, you will need to ensure that; lit.site.cfg files have been created for your build. You can do; this by running the tests as described in the previous sections. Once the; tests have started running, you can stop them with control+C, as the; files are generated before running any tests.; Once that is done, to run all the tests from the command line,; execute a command like the following:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:5260,test,tests,5260,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['tests']
Testability,unt.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; libcxx/include/__format/formatter_floating_point.h; libcxx/include/__format/formatter_pointer.h; libcxx/include/__memory/voidify.h; libcxx/include/__numeric/exclusive_scan,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159760,benchmark,benchmarks,159760,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"untime provide :block-term:`copy` and; :block-term:`release` operations for Block references that create and,; in matched use, release allocated storage for referenced Blocks. The copy operation ``Block_copy()`` is styled as a function that takes; an arbitrary Block reference and returns a Block reference of the same; type. The release operation, ``Block_release()``, is styled as a; function that takes an arbitrary Block reference and, if dynamically; matched to a Block copy operation, allows recovery of the referenced; allocated memory. The ``__block`` Storage Qualifier; =================================. In addition to the new Block type we also introduce a new storage; qualifier, :block-term:`__block`, for local variables. [testme: a; __block declaration within a block literal] The ``__block`` storage; qualifier is mutually exclusive to the existing local storage; qualifiers auto, register, and static. [testme] Variables qualified by; ``__block`` act as if they were in allocated storage and this storage; is automatically recovered after last use of said variable. An; implementation may choose an optimization where the storage is; initially automatic and only ""moved"" to allocated (heap) storage upon; a Block_copy of a referencing Block. Such variables may be mutated as; normal variables are. In the case where a ``__block`` variable is a Block one must assume; that the ``__block`` variable resides in allocated storage and as such; is assumed to reference a Block that is also in allocated storage; (that it is the result of a ``Block_copy`` operation). Despite this; there is no provision to do a ``Block_copy`` or a ``Block_release`` if; an implementation provides initial automatic storage for Blocks. This; is due to the inherent race condition of potentially several threads; trying to update the shared variable and the need for synchronization; around disposing of older values and copying new ones. Such; synchronization is beyond the scope of this language specificat",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst:7228,test,testme,7228,interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/BlockLanguageSpec.rst,1,['test'],['testme']
Testability,untime/ListInputTest.cpp; flang/unittests/Runtime/Matmul.cpp; flang/unittests/Runtime/MiscIntrinsic.cpp; flang/unittests/Runtime/Namelist.cpp; flang/unittests/Runtime/Numeric.cpp; flang/unittests/Runtime/NumericalFormatTest.cpp; flang/unittests/Runtime/Ragged.cpp; flang/unittests/Runtime/Random.cpp; flang/unittests/Runtime/Reduction.cpp; flang/unittests/Runtime/RuntimeCrashTest.cpp; flang/unittests/Runtime/Stop.cpp; flang/unittests/Runtime/Time.cpp; flang/unittests/Runtime/tools.h; flang/unittests/Runtime/Transformational.cpp; libc/AOR_v20.02/math/v_exp.h; libc/benchmarks/JSON.cpp; libc/benchmarks/JSON.h; libc/benchmarks/LibcBenchmark.cpp; libc/benchmarks/LibcBenchmark.h; libc/benchmarks/LibcBenchmarkTest.cpp; libc/benchmarks/LibcDefaultImplementations.cpp; libc/benchmarks/LibcFunctionPrototypes.h; libc/benchmarks/LibcMemoryBenchmark.cpp; libc/benchmarks/LibcMemoryBenchmark.h; libc/benchmarks/LibcMemoryBenchmarkMain.cpp; libc/benchmarks/LibcMemoryBenchmarkTest.cpp; libc/benchmarks/LibcMemoryGoogleBenchmarkMain.cpp; libc/benchmarks/MemorySizeDistributions.cpp; libc/benchmarks/MemorySizeDistributions.h; libc/benchmarks/automemcpy/include/automemcpy/CodeGen.h; libc/benchmarks/automemcpy/include/automemcpy/FunctionDescriptor.h; libc/benchmarks/automemcpy/include/automemcpy/RandomFunctionGenerator.h; libc/benchmarks/automemcpy/include/automemcpy/ResultAnalyzer.h; libc/benchmarks/automemcpy/lib/CodeGen.cpp; libc/benchmarks/automemcpy/lib/CodeGenMain.cpp; libc/benchmarks/automemcpy/lib/RandomFunctionGenerator.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzer.cpp; libc/benchmarks/automemcpy/lib/ResultAnalyzerMain.cpp; libc/benchmarks/automemcpy/unittests/CodeGenTest.cpp; libc/benchmarks/automemcpy/unittests/ResultAnalyzerTest.cpp; libc/config/linux/app.h; libc/fuzzing/math/Compare.h; libc/fuzzing/math/math_differential_fuzz.cpp; libc/fuzzing/math/nextafter_differential_fuzz.cpp; libc/fuzzing/math/RemQuoDiff.h; libc/fuzzing/math/SingleInputSingleOutputDiff.h; libc/fuzzing/ma,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:129585,benchmark,benchmarks,129585,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
Testability,"up into a series of `YAML documents`_. The first document; can contain an optional embedded LLVM IR module, and the rest of the documents; contain the serialized machine functions. .. _YAML documents: http://www.yaml.org/spec/1.2/spec.html#id2800132. MIR Testing Guide; =================. You can use the MIR format for testing in two different ways:. - You can write MIR tests that invoke a single code generation pass using the; ``-run-pass`` option in llc. - You can use llc's ``-stop-after`` option with existing or new LLVM assembly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o test.mir``. After generating the input MIR file, you'll have to add a run line that uses; the ``-run-pass`` option to it. In order to test the post register allocation; pseudo instruction expansion pass on X86-64, a run line like the one shown; below can be used:. ``# RUN: llc -o - %s -mtriple=x86_64-- -run-pass=postrapseudos | FileCheck %s``. The MIR files are target dependent, so they have to be placed in the target; specific test directories (``lib/CodeGen/TARG",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:1813,test,test,1813,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['test']
Testability,"updated using the '``llvm.instrprof.mcdc.condbitmap.update``' intrinsic with; the true or false evaluation of each condition, uniquely identifies an executed; MC/DC test vector and is used as a bit index into the global test vector; bitmap. Arguments:; """""""""""""""""""". The first argument is a pointer to a global variable containing the; name of the entity being instrumented. This should generally be the; (mangled) function name for a set of counters. The second argument is a hash value that can be used by the consumer; of the profile data to detect changes to the instrumented source. The third argument is the number of bitmap bytes required by the function to; record the number of test vectors executed for each boolean expression. The fourth argument is the byte index into the global test vector bitmap; corresponding to the function. The fifth argument is the address of the condition bitmap, which contains a; value representing an executed MC/DC test vector. It is loaded and used as the; bit index of the test vector bitmap. Semantics:; """""""""""""""""""". This intrinsic represents the final operation of an MC/DC instrumentation; sequence and will cause the ``-instrprof`` pass to generate the code to; instrument an update of a function's global test vector bitmap to indicate that; a test vector has been executed. The global test vector bitmap can be consumed; by the ``llvm-profdata`` and ``llvm-cov`` tools. '``llvm.thread.pointer``' Intrinsic; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """""""""""""". ::. declare ptr @llvm.thread.pointer(). Overview:; """""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns the value of the thread; pointer. Semantics:; """""""""""""""""""". The '``llvm.thread.pointer``' intrinsic returns a pointer to the TLS area; for the current thread. The exact semantics of this value are target; specific: it may point to the start of TLS area, to the end, or somewhere; in the middle. Depending on the target, this intrinsic may read a register,; call a helper function, rea",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:536290,test,test,536290,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['test']
Testability,"upport it in clang in any new releases in the near future. Clang currently supports C++ for OpenCL 1.0 and 2021.; For detailed information about this language refer to the C++ for OpenCL; Programming Language Documentation available; in `the latest build; <https://www.khronos.org/opencl/assets/CXX_for_OpenCL.html>`_; or in `the official release; <https://github.com/KhronosGroup/OpenCL-Docs/releases/tag/cxxforopencl-docrev2021.12>`_. To enable the C++ for OpenCL mode, pass one of following command line options when; compiling ``.clcpp`` file:. - C++ for OpenCL 1.0: ``-cl-std=clc++``, ``-cl-std=CLC++``, ``-cl-std=clc++1.0``,; ``-cl-std=CLC++1.0``, ``-std=clc++``, ``-std=CLC++``, ``-std=clc++1.0`` or; ``-std=CLC++1.0``. - C++ for OpenCL 2021: ``-cl-std=clc++2021``, ``-cl-std=CLC++2021``,; ``-std=clc++2021``, ``-std=CLC++2021``. Example of use:; .. code-block:: c++. template<class T> T add( T x, T y ); {; return x + y;; }. __kernel void test( __global float* a, __global float* b); {; auto index = get_global_id(0);; a[index] = add(b[index], b[index+1]);; }. .. code-block:: console. clang -cl-std=clc++1.0 test.clcpp; clang -cl-std=clc++ -c --target=spirv64 test.cl. By default, files with ``.clcpp`` extension are compiled with the C++ for; OpenCL 1.0 mode. .. code-block:: console. clang test.clcpp. For backward compatibility files with ``.cl`` extensions can also be compiled; in C++ for OpenCL mode but the desirable language mode must be activated with; a flag. .. code-block:: console. clang -cl-std=clc++ test.cl. Support of C++ for OpenCL 2021 is currently in experimental phase, refer to; :doc:`OpenCLSupport` for more details. C++ for OpenCL kernel sources can also be compiled online in drivers supporting; `cl_ext_cxx_for_opencl; <https://www.khronos.org/registry/OpenCL/extensions/ext/cl_ext_cxx_for_opencl.html>`_; extension. Constructing and destroying global objects; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Global objects with non-trivial constructors require the con",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:153473,test,test,153473,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"upported. `llvm.dbg.assign`; intrinsics are lowered to MIR `DBG_INSTR_REF` instructions. Before this happens; we need to decide where it is appropriate to use memory locations and where we; must use a non-memory location (or no location) for each variable. In order to; make those decisions we run a standard fixed-point dataflow analysis that makes; the choice at each instruction, iteratively joining the results for each block. ### TODO list. As this is an experimental work in progress so there are some items we still need; to tackle:. * As mentioned in test llvm/test/DebugInfo/assignment-tracking/X86/diamond-3.ll,; the analysis should treat escaping calls like untagged stores. * The system expects locals to be backed by a local alloca. This isn't always; the case - sometimes a pointer to storage is passed into a function; (e.g. sret, byval). We need to be able to handle those cases. See; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for examples. * `trackAssignments` doesn't yet work for variables that have their; `llvm.dbg.declare` location modified by a `DIExpression`, e.g. when the; address of the variable is itself stored in an `alloca` with the; `llvm.dbg.declare` using `DIExpression(DW_OP_deref)`. See `indirectReturn` in; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and in; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for an; example. * In order to solve the first bullet-point we need to be able to specify that a; memory location is available without using a `DIAssignID`. This is because; the storage address is not computed by an instruction (it's an argument; value) and therefore we have nowhere to put the metadata attachment. To solve; this we probably need another marker intrinsic to denote ""the variable's; stack home is X address"" - similar to `llvm.dbg.declare` except that it needs; to compose with `llvm.dbg.assign` intrinsic",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:9921,test,test,9921,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['test']
Testability,"ur source code for executables.; For each program that you build, you will have one directory in **tools**; that will contain that program's source code. **test**. This subdirectory should contain tests that verify that your code works; correctly. Automated tests are especially useful. Currently, the LLVM build system provides basic support for tests. The LLVM; system provides the following:. * LLVM contains regression tests in ``llvm/test``. These tests are run by the; :doc:`Lit <CommandGuide/lit>` testing tool. This test procedure uses ``RUN``; lines in the actual test case to determine how to run the test. See the; :doc:`TestingGuide` for more details. * LLVM contains an optional package called ``llvm-test``, which provides; benchmarks and programs that are known to compile with the Clang front; end. You can use these programs to test your code, gather statistical; information, and compare it to the current LLVM performance statistics. Currently, there is no way to hook your tests directly into the ``llvm/test``; testing harness. You will simply need to find a way to use the source; provided within that directory on your own. Typically, you will want to build your **lib** directory first followed by your; **tools** directory. Writing LLVM Style Makefiles; ============================. The LLVM build system provides a convenient way to build libraries and; executables. Most of your project Makefiles will only need to define a few; variables. Below is a list of the variables one can set and what they can; do:. Required Variables; ------------------. ``LEVEL``. This variable is the relative path from this ``Makefile`` to the top; directory of your project's source code. For example, if your source code; is in ``/tmp/src``, then the ``Makefile`` in ``/tmp/src/jump/high``; would set ``LEVEL`` to ``""../..""``. Variables for Building Subdirectories; -------------------------------------. ``DIRS``. This is a space separated list of subdirectories that should be built. The",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst:3837,test,tests,3837,interpreter/llvm-project/llvm/docs/Projects.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Projects.rst,3,['test'],"['test', 'testing', 'tests']"
Testability,"ure tests are standardized, like ``__has_cpp_attribute`` or; ``__cpp_lambdas``, while others are Clang extensions, like ``__has_builtin``.; The common theme among all the various feature tests is that they are a utility; to tell users that we think a particular feature is complete. However,; completeness is a difficult property to define because features may still have; lingering bugs, may only work on some targets, etc. We use the following; criteria when deciding whether to expose a feature test macro (or particular; result value for the feature test):. * Are there known issues where we reject valid code that should be accepted?; * Are there known issues where we accept invalid code that should be rejected?; * Are there known crashes, failed assertions, or miscompilations?; * Are there known issues on a particular relevant target?. If the answer to any of these is ""yes"", the feature test macro should either; not be defined or there should be very strong rationale for why the issues; should not prevent defining it. Note, it is acceptable to define the feature; test macro on a per-target basis if needed. When in doubt, being conservative is better than being aggressive. If we don't; claim support for the feature but it does useful things, users can still use it; and provide us with useful feedback on what is missing. But if we claim support; for a feature that has significant bugs, we've eliminated most of the utility; of having a feature testing macro at all because users are then forced to test; what compiler version is in use to get a more accurate answer. The status reported by the feature test macro should always be reflected in the; language support page for the corresponding feature (`C++; <https://clang.llvm.org/cxx_status.html>`_, `C; <https://clang.llvm.org/c_status.html>`_) if applicable. This page can give; more nuanced information to the user as well, such as claiming partial support; for a feature and specifying details as to what remains to be done.; ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:163856,test,test,163856,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,4,['test'],"['test', 'testing']"
Testability,"ure. The; mapping from a type to an identifier is an ABI detail. In the current,; experimental, implementation the identifier of type T is calculated as; follows:. - Obtain the mangled name for ""typeinfo name for T"".; - Calculate MD5 hash of the name as a string.; - Reinterpret the first 8 bytes of the hash as a little-endian; 64-bit integer. It is possible, but unlikely, that collisions in the; ``CallSiteTypeId`` hashing will result in weaker CFI checks that would; still be conservatively correct. CFI_Check; ---------. In the general case, only the target DSO knows whether the call to; function ``f`` with type ``CallSiteTypeId`` is valid or not. To; export this information, every DSO implements. .. code-block:: none. void __cfi_check(uint64 CallSiteTypeId, void *TargetAddr, void *DiagData). This function provides external modules with access to CFI checks for; the targets inside this DSO. For each known ``CallSiteTypeId``, this; function performs an ``llvm.type.test`` with the corresponding type; identifier. It reports an error if the type is unknown, or if the; check fails. Depending on the values of compiler flags; ``-fsanitize-trap`` and ``-fsanitize-recover``, this function may; print an error, abort and/or return to the caller. ``DiagData`` is an; opaque pointer to the diagnostic information about the error, or; ``null`` if the caller does not provide this information. The basic implementation is a large switch statement over all values; of CallSiteTypeId supported by this DSO, and each case is similar to; the InlinedFastCheck() in the basic CFI mode. CFI Shadow; ----------. To route CFI checks to the target DSO's __cfi_check function, a; mapping from possible virtual / indirect call targets to the; corresponding __cfi_check functions is maintained. This mapping is; implemented as a sparse array of 2 bytes for every possible page (4096; bytes) of memory. The table is kept readonly most of the time. There are 3 types of shadow values:. - Address in a CFI-instrum",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrityDesign.rst:21158,test,test,21158,interpreter/llvm-project/clang/docs/ControlFlowIntegrityDesign.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/ControlFlowIntegrityDesign.rst,1,['test'],['test']
Testability,"urn S->getKind() == SK_Square;; + }; };. class Circle : public Shape {; double Radius;; public:; Circle(double R) : Shape(SK_Circle), Radius(R) {}; double computeArea() override;; +; + static bool classof(const Shape *S) {; + return S->getKind() == SK_Circle;; + }; };. The job of ``classof`` is to dynamically determine whether an object of; a base class is in fact of a particular derived class. In order to; downcast a type ``Base`` to a type ``Derived``, there needs to be a; ``classof`` in ``Derived`` which will accept an object of type ``Base``. To be concrete, consider the following code:. .. code-block:: c++. Shape *S = ...;; if (isa<Circle>(S)) {; /* do something ... */; }. The code of the ``isa<>`` test in this code will eventually boil; down---after template instantiation and some other machinery---to a; check roughly like ``Circle::classof(S)``. For more information, see; :ref:`classof-contract`. The argument to ``classof`` should always be an *ancestor* class because; the implementation has logic to allow and optimize away; upcasts/up-``isa<>``'s automatically. It is as though every class; ``Foo`` automatically has a ``classof`` like:. .. code-block:: c++. class Foo {; [...]; template <class T>; static bool classof(const T *,; ::std::enable_if<; ::std::is_base_of<Foo, T>::value; >::type* = 0) { return true; }; [...]; };. Note that this is the reason that we did not need to introduce a; ``classof`` into ``Shape``: all relevant classes derive from ``Shape``,; and ``Shape`` itself is abstract (has no entry in the ``Kind`` enum),; so this notional inferred ``classof`` is all we need. See `Concrete; Bases and Deeper Hierarchies`_ for more information about how to extend; this example to more general hierarchies. Although for this small example setting up LLVM-style RTTI seems like a lot; of ""boilerplate"", if your classes are doing anything interesting then this; will end up being a tiny fraction of the code. Concrete Bases and Deeper Hierarchies; =================",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst:6263,log,logic,6263,interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/HowToSetUpLLVMStyleRTTI.rst,1,['log'],['logic']
Testability,"urn; }. int foo(CFErrorRef *error) {; *error = 0; // warn: potential null dereference; return 0;; }. osx.coreFoundation.CFNumber; (C); Check for improper uses of CFNumberCreate. CFNumberRef test(unsigned char x) {; return CFNumberCreate(0, kCFNumberSInt16Type, &x);; // warn: 8 bit integer is used to initialize a 16 bit integer; }. osx.coreFoundation.CFRetainRelease; (C); Check for null arguments to CFRetain, CFRelease,; CFMakeCollectable. void test(CFTypeRef p) {; if (!p); CFRetain(p); // warn; }. void test(int x, CFTypeRef p) {; if (p); return;. CFRelease(p); // warn; }. osx.coreFoundation.containers.OutOfBounds; (C); Checks for index out-of-bounds when using CFArray API. void test() {; CFArrayRef A = CFArrayCreate(0, 0, 0, &kCFTypeArrayCallBacks);; CFArrayGetValueAtIndex(A, 0); // warn; }. osx.coreFoundation.containers.PointerSizedValues; (C); Warns if CFArray, CFDictionary, CFSet are; created with non-pointer-size values. void test() {; int x[] = { 1 };; CFArrayRef A = CFArrayCreate(0, (const void **)x, 1,; &kCFTypeArrayCallBacks); // warn; }. Security Checkers. Name, DescriptionExample. security.FloatLoopCounter; (C); Warn on using a floating point value as a loop counter (CERT: FLP30-C,; FLP30-CPP). void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. security.insecureAPI.UncheckedReturn; (C); Warn on uses of functions whose return values must be always checked:; setuid; setgid; seteuid; setegid; setreuid; setregid. void test() {; setuid(1); // warn; }. security.insecureAPI.bcmp; (C); Warn on uses of the bcmp function. void test() {; bcmp(ptr0, ptr1, n); // warn; }. security.insecureAPI.bcopy; (C); Warn on uses of the bcopy function. void test() {; bcopy(src, dst, n); // warn; }. security.insecureAPI.bzero; (C); Warn on uses of the bzero function. void test() {; bzero(ptr, n); // warn; }. security.insecureAPI.getpw; (C); Warn on uses of the getpw function. void test() {; char buff[1024];; getpw(2, buff); // warn; }. security.insecureAPI.gets",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:20875,test,test,20875,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['test']
Testability,"us reasons. Since; it constructs our pass, we need to also add the proper #include in; ``llvm/lib/Passes/PassBuilder.cpp``:. .. code-block:: c++. #include ""llvm/Transforms/Utils/HelloWorld.h"". This should be all the code necessary for our pass, now it's time to compile; and run it. Running a pass with ``opt``; ---------------------------. Now that you have a brand new shiny pass, we can build :program:`opt` and use; it to run some LLVM IR through the pass. .. code-block:: console. $ ninja -C build/ opt; # or whatever build system/build directory you are using. $ cat /tmp/a.ll; define i32 @foo() {; %a = add i32 2, 3; ret i32 %a; }. define void @bar() {; ret void; }. $ build/bin/opt -disable-output /tmp/a.ll -passes=helloworld; foo; bar. Our pass ran and printed the names of functions as expected!. Testing a pass; --------------. Testing our pass is important to prevent future regressions. We'll add a lit; test at ``llvm/test/Transforms/Utils/helloworld.ll``. See; :doc:`TestingGuide` for more information on testing. .. code-block:: llvm. $ cat llvm/test/Transforms/Utils/helloworld.ll; ; RUN: opt -disable-output -passes=helloworld %s 2>&1 | FileCheck %s. ; CHECK: {{^}}foo{{$}}; define i32 @foo() {; %a = add i32 2, 3; ret i32 %a; }. ; CHECK-NEXT: {{^}}bar{{$}}; define void @bar() {; ret void; }. $ ninja -C build check-llvm; # runs our new test alongside all other llvm lit tests. FAQs; ====. Required passes; ---------------. A pass that defines a static ``isRequired()`` method that returns true is a required pass. For example:. .. code-block:: c++. class HelloWorldPass : public PassInfoMixin<HelloWorldPass> {; public:; PreservedAnalyses run(Function &F, FunctionAnalysisManager &AM);. static bool isRequired() { return true; }; };. A required pass is a pass that may not be skipped. An example of a required; pass is ``AlwaysInlinerPass``, which must always be run to preserve; ``alwaysinline`` semantics. Pass managers are required since they may contain; other required passe",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst:6030,test,testing,6030,interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/WritingAnLLVMNewPMPass.rst,1,['test'],['testing']
Testability,"use macOS then within Xcode. When; invoked from the command line, it is intended to be run in tandem with a build; of a codebase.; The analyzer is 100% open source and is part of the Clang project. Like the rest of Clang, the; analyzer is implemented as a C++ library that can be used by other tools and; applications.; Download. Mac OS X. Latest build (10.8+):. Release notes; This build can be used both from the command line and from within Xcode; Installation and usage. Other Platforms; For other platforms, please follow the instructions for building the analyzer from; source code. Viewing static analyzer results in Xcode. Viewing static analyzer results in a web browser. What is Static Analysis?; The term ""static analysis"" is conflated, but here we use it to mean; a collection of algorithms and techniques used to analyze source code in order; to automatically find bugs. The idea is similar in spirit to compiler warnings; (which can be useful for finding coding errors) but to take that idea a step; further and find bugs that are traditionally found using run-time debugging; techniques such as testing.; Static analysis bug-finding tools have evolved over the last several decades; from basic syntactic checkers to those that find deep bugs by reasoning about; the semantics of code. The goal of the Clang Static Analyzer is to provide a; industrial-quality static analysis framework for analyzing C, C++, and; Objective-C programs that is freely available, extensible, and has a high quality of implementation.; Part of Clang and LLVM; As its name implies, the Clang Static Analyzer is built on top of Clang and LLVM.; Strictly speaking, the analyzer is part of Clang, as Clang consists of a set of; reusable C++ libraries for building powerful source-level tools. The static; analysis engine used by the Clang Static Analyzer is a Clang library, and has; the capability to be reused in different contexts and by different clients.; Important Points to Consider; While we believe that",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/index.html:1334,test,testing,1334,interpreter/llvm-project/clang/www/analyzer/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/index.html,1,['test'],['testing']
Testability,"use, but you also want to add; extra information to the API. You don't want to put that information in the; headers themselves --- perhaps because you want to keep them clean for other; clients, or perhaps because they're from some open source project and you don't; want to modify them at all. **Incomplete solution:** Redeclare all the interesting parts of the API in your; own header and add the attributes you want. Unfortunately, this:. * doesn't work with attributes that must be present on a definition; * doesn't allow changing the definition in other ways; * requires your header to be included in any client code to take effect. **Better solution:** Provide a ""sidecar"" file with the information you want to; add, and have that automatically get picked up by the module-building logic in; the compiler. That's API notes. API notes use a YAML-based file format. YAML is a format best explained by; example, so here is a `small example; <https://github.com/llvm/llvm-project/blob/main/clang/test/APINotes/Inputs/Frameworks/SomeKit.framework/Headers/SomeKit.apinotes>`_; from the compiler test suite of API; notes for a hypothetical ""SomeKit"" framework. Usage; =====. API notes files are found relative to the module map that defines a module,; under the name ""SomeKit.apinotes"" for a module named ""SomeKit"". Additionally, a; file named ""SomeKit_private.apinotes"" will also be picked up to go with a; private module map. For bare modules these two files will be in the same; directory as the corresponding module map; for framework modules, they should; be placed in the Headers and PrivateHeaders directories, respectively. The; module map for a private top-level framework module should be placed in the; PrivateHeaders directory as well, though it does not need an additional; ""_private"" suffix on its name. Clang will search for API notes files next to module maps only when passed the; ``-fapi-notes-modules`` option. Limitations; ===========. - Since they're identified by module name, A",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/APINotes.rst:1195,test,test,1195,interpreter/llvm-project/clang/docs/APINotes.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/APINotes.rst,1,['test'],['test']
Testability,"used to represent; LLVM's :ref:`machine specific intermediate representation; <machine code representation>`. The MIR serialization format is designed to be used for testing the code; generation passes in LLVM. Overview; ========. The MIR serialization format uses a YAML container. YAML is a standard; data serialization language, and the full YAML language spec can be read at; `yaml.org; <http://www.yaml.org/spec/1.2/spec.html#Introduction>`_. A MIR file is split up into a series of `YAML documents`_. The first document; can contain an optional embedded LLVM IR module, and the rest of the documents; contain the serialized machine functions. .. _YAML documents: http://www.yaml.org/spec/1.2/spec.html#id2800132. MIR Testing Guide; =================. You can use the MIR format for testing in two different ways:. - You can write MIR tests that invoke a single code generation pass using the; ``-run-pass`` option in llc. - You can use llc's ``-stop-after`` option with existing or new LLVM assembly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:1364,test,tests,1364,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['tests']
Testability,"usses the concept of interactive C++ by presenting Cling’s main features, such as wrapper functions, entity redefinition, error recovery. ; * - `Using the Cling C++ Interpreter on the Bela Platform <https://gist.github.com/jarmitage/6e411ae8746c04d6ecbee1cbc1ebdcd4>`_; - Jack Armitage 2019; - Cling has been installed on a BeagleBoard to bring live coding to the Bela interactive audio platform.; * - `Implementation of GlobalModuleIndex in ROOT and Cling <https://indico.cern.ch/event/840376/contributions/3525646/attachments/1895398/3127159/GSoC_Presentation__GMI.pdf>`_; - *Arpitha Raghunandan* 2012 Google Summer of Code GSoC; - GlobalModuleIndex can be used for improving ROOT’s and Cling’s performance ; * - `Example project using cling as library <https://github.com/root-project/cling/tree/master/tools/demo>`_; - *Axel Naumann* 2016 GitHub; - This video showcases how to use Cling as a library, and shows how to set up a simple CMake configuration that uses Cling.; * - `Cling C++ interpreter testdrive <https://www.youtube.com/watch?v=1IGTHusaJ18>`_; - *Mika* 2015 Youtube; - In this tutorial, a developer tries Cling for the first time by uploading a few simple C++ user-cases onto Cling, involving also the loading of external files; * - `Building an Order Book in C++ <https://www.youtube.com/watch?v=fxN4xEZvrxI>`_; - *Dimitri Nesteruk* 2015 Youtube; - This demo shows how to build a simple order book using C++, CLion, Google Test and, of course, Cling. ; * - `Cling C++ interpreter testdrive <https://www.youtube.com/watch?v=1IGTHusaJ18>`_; - Dimitri Nesteruk 2015 Youtube; - This tutorial describes Cling’s general features. You will learn how to start Cling on Ubuntu, how to write a simple expression (N=5, N++) and how to define a Class for calculating body mass index. ; * - `Cling Interactive OpenGL Demo <https://www.youtube.com/watch?v=eoIuqLNvzFs>`_; - *Alexander Penev* 2012 Youtube; - This demo shows how to use Cling for interactive OpenGL. A rotating triangle with chang",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/chapters/references.rst:4653,test,testdrive,4653,interpreter/cling/docs/chapters/references.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/cling/docs/chapters/references.rst,1,['test'],['testdrive']
Testability,"ut showing just the logical types that; are **Typedef**. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format; --output-sort=name; --select-types=Typedef; --report=list; --print=types; pr-44884-*.o. Logical View:; [000] {File} 'pr-44884-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-codeview-msvc.o' -> COFF-i386. [001] {CompileUnit} 'pr_44884.cpp'; [004] {TypeAlias} 'FLOAT' -> 'float'; [003] {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-clang.o' -> elf64-x86-64. [001] {CompileUnit} 'pr_44884.cpp'; [003] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. Logical View:; [000] {File} 'pr-44884-dwarf-gcc.o' -> elf32-littlearm. [001] {CompileUnit} 'pr_44884.cpp'; [004] 7 {TypeAlias} 'FLOAT' -> 'float'; [003] 4 {TypeAlias} 'INT' -> 'int'. It also shows, that the CodeView debug information does not generate; source code line numbers for the those logical types. The logical view; is sorted by the types name. TEST CASE 4 - MISSING NESTED ENUMERATIONS; ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; The below example is used to show different output generated by; :program:`llvm-debuginfo-analyzer`. We compiled the example for an X86; Codeview and ELF targets with recent versions of Clang, GCC and MSVC; (-O0 -g). .. code-block:: c++. 1 struct Struct {; 2 union Union {; 3 enum NestedEnum { RED, BLUE };; 4 };; 5 Union U;; 6 };; 7; 8 Struct S;; 9 int test() {; 10 return S.U.BLUE;; 11 }. The above test is used to illustrate a scope issue found in the Clang; compiler:; `PR46466 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?id=46466>`_ /; `PR45811 (GitHub LLVM) <https://github.com/llvm/llvm-project/issues/45811>`_. These are the logical views that :program:`llvm-debuginfo-analyzer`; generates for 3 different compilers (MSVC, Clang and GCC), emitting; different debug information formats (CodeVi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:41928,log,logical,41928,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ut`` file specified.; Unlike GNU :program:`strings` it looks in the entire input file, regardless of; file format, rather than restricting the search to certain sections of object; files. If ""``-``"" is specified as an ``input``, or no ``input`` is specified,; the program reads from the standard input stream. EXAMPLE; -------. .. code-block:: console. $ cat input.txt; bars; foo; wibble blob; $ llvm-strings input.txt; bars; wibble blob. OPTIONS; -------. .. option:: --all, -a. Silently ignored. Present for GNU :program:`strings` compatibility. .. option:: --bytes=<length>, -n. Set the minimum number of printable ASCII characters required for a sequence of; bytes to be considered a string. The default value is 4. .. option:: --help, -h. Display a summary of command line options. .. option:: --print-file-name, -f. Display the name of the containing file before each string. Example:. .. code-block:: console. $ llvm-strings --print-file-name test.o test.elf; test.o: _Z5hellov; test.o: some_bss; test.o: test.cpp; test.o: main; test.elf: test.cpp; test.elf: test2.cpp; test.elf: _Z5hellov; test.elf: main; test.elf: some_bss. .. option:: --radix=<radix>, -t. Display the offset within the file of each string, before the string and using; the specified radix. Valid ``<radix>`` values are ``o``, ``d`` and ``x`` for; octal, decimal and hexadecimal respectively. Example:. .. code-block:: console. $ llvm-strings --radix=o test.o; 1054 _Z5hellov; 1066 .rela.text; 1101 .comment; 1112 some_bss; 1123 .bss; 1130 test.cpp; 1141 main; $ llvm-strings --radix=d test.o; 556 _Z5hellov; 566 .rela.text; 577 .comment; 586 some_bss; 595 .bss; 600 test.cpp; 609 main; $ llvm-strings -t x test.o; 22c _Z5hellov; 236 .rela.text; 241 .comment; 24a some_bss; 253 .bss; 258 test.cpp; 261 main. .. option:: --version. Display the version of the :program:`llvm-strings` executable. .. option:: @<FILE>. Read command-line options from response file ``<FILE>``. EXIT STATUS; -----------. :program:`llvm-strings` e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst:1599,test,test,1599,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-strings.rst,1,['test'],['test']
Testability,"ution. :program:`lit` will substitute variables and arrange for the pipeline; to be executed. If any process in the pipeline fails, the entire line (and; test case) fails too. Below is an example of legal RUN lines in a ``.ll`` file:. .. code-block:: llvm. ; RUN: llvm-as < %s | llvm-dis > %t1; ; RUN: llvm-dis < %s.bc-13 > %t2; ; RUN: diff %t1 %t2. As with a Unix shell, the RUN lines permit pipelines and I/O; redirection to be used. There are some quoting rules that you must pay attention to when writing; your RUN lines. In general nothing needs to be quoted. :program:`lit` won't; strip off any quote characters so they will get passed to the invoked program.; To avoid this use curly braces to tell :program:`lit` that it should treat; everything enclosed as one value. In general, you should strive to keep your RUN lines as simple as possible,; using them only to run tools that generate textual output you can then examine.; The recommended way to examine output to figure out if the test passes is using; the :doc:`FileCheck tool <CommandGuide/FileCheck>`. *[The usage of grep in RUN; lines is deprecated - please do not send or commit patches that use it.]*. Put related tests into a single file rather than having a separate file per; test. Check if there are files already covering your feature and consider; adding your code there instead of creating a new file. Generating assertions in regression tests; -----------------------------------------. Some regression test cases are very large and complex to write/update by hand.; In that case to reduce the human work we can use the scripts available in; llvm/utils/ to generate the assertions. For example to generate assertions in an :program:`llc`-based test, after; adding one or more RUN lines use:. .. code-block:: bash. % llvm/utils/update_llc_test_checks.py --llc-binary build/bin/llc test.ll. This will generate FileCheck assertions, and insert a ``NOTE:`` line at the; top to indicate that assertions were automatically genera",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:10764,test,test,10764,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['test']
Testability,utors see $ROOTSYS/README/CREDITS. ############################################################################; # CMakeLists.txt file for building TMVA/DNN/RNN tests.; # @author Saurav Shekhar; ############################################################################. set(Libraries TMVA). if (tmva-gpu); list(APPEND Libraries CUDA::cuda_driver CUDA::cudart); endif(). #---Reference test. if (Test_Reference). # RNN - BackPropagation Reference; ROOT_EXECUTABLE(testRecurrentBackpropagation TestRecurrentBackpropagation.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Backpropagation COMMAND testRecurrentBackpropagation); #; # RNN - Forward Reference; ROOT_EXECUTABLE(testRecurrentForwardPass TestRecurrentForwardPass.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forward COMMAND testRecurrentForwardPass). # RNN - Full Test Reference; ROOT_EXECUTABLE(testFullRNN TestFullRNN.cxx LIBRARIES ${Libraries}); ROOT_ADD_TEST(TMVA-DNN-RNN-FullRNN COMMAND testFullRNN). endif(). #--- CUDA tests. ---------------------------; if (tmva-gpu). set(DNN_CUDA_LIBRARIES ${CUDA_CUBLAS_LIBRARIES}). add_executable(testRecurrentBackpropagationCuda TestRecurrentBackpropagationCuda.cxx); target_link_libraries(testRecurrentBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-BackpropagationCuda COMMAND testRecurrentBackpropagationCuda); #mark the native Cuda test failing since RNN are supported only with Cudnn; set_tests_properties(TMVA-DNN-RNN-BackpropagationCuda PROPERTIES WILL_FAIL true). if (tmva-cudnn). add_executable(testRecurrentForwardPassCudnn TestRecurrentForwardPassCudnn.cxx); target_link_libraries(testRecurrentForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-RNN-Forwaed-Cudnn COMMAND testRecurrentForwardPassCudnn). add_executable(testRecurrentBackpropagationCudnn TestRecurrentBackpropagationCudnn.cxx); target_link_libraries(testRecurrentBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-D,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt:1163,test,tests,1163,tmva/tmva/test/DNN/RNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/RNN/CMakeLists.txt,1,['test'],['tests']
Testability,"utput file; was successfully opened. TText. TText::GetBoundingBox now returns 0 when the string is empty.; Previously it returned undefined numbers. TLegend. Rewrite TLegend::GetEntry() to take the number of columns in the; legend into account. The previous version considered there was always only one; column in a TLegend. TPaveLabel. The following macro entered an infinite loop:. {; int x[10], y[10]; int i;; for(i = 0; i < 10; i++) {x[i] = 10*i;y[i] = i;}; TGraph *gr = new TGraph(10,x,y);; gr->Draw(""AL"");; TPaveLabel *hello = new TPaveLabel(0.2,0.4,0.8,0.6,""Hello World"");; hello->Draw();; }. iOS module. New module 'ios' was added into graf2d to make it possible to use ROOT's; graphics on iOS devices (iPad, iPhone, iPod touch).; Among other things, it has the ROOT::iOS::Pad class, which is a version; of TPad for iOS (pad with TF2 example below). Two applications, based on this module, were developed for iOS (currently,; for iPad only): ""Tutorials"" and ""RootBrowser"".; They can be found in $ROOTSYS/test/ios. ""Tutorials"" app; Small application with several demos, ""iOS version"" of the $ROOTSYS/tutorlas/demos.C. ""Tutorials"" application:. supports portrait and landscape orientation; has several demos (can be selected by tapping on table's cells); supports different gestures (pinch, single and double tap, pan, etc. - active gestures are shown by hint icons); has ""zoom"" mode - pinch or double tap gesture will zoom in/out pad's contents; has ""selection"" mode - with single tap user can select different objects inside pad - axes, histograms, pavestats etc.; 3D objects can be rotated.; has a simple editor to modify pad's parameters : fill color, logarithmic scale, grid, ticks, etc. ""RootBrowser"" app; This application is a simplified version of TBrowser and TCanvas; for iOS. User can open ROOT's file (application uses TWebFile) and; browse file's contents.; RootBrower registers *.root file extension in a system, so for; example, attached root files from a mail client can be opene",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v532/index.html:1678,test,test,1678,graf2d/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/graf2d/doc/v532/index.html,1,['test'],['test']
Testability,"utput to ensure that the program is being compiled correctly. In addition to compiling and executing programs, whole program tests; serve as a way of benchmarking LLVM performance, both in terms of the; efficiency of the programs generated as well as the speed with which; LLVM compiles, optimizes, and generates code. The test-suite is located in the ``test-suite``; `repository on GitHub <https://github.com/llvm/llvm-test-suite.git>`_. See the :doc:`TestSuiteGuide` for details. Debugging Information tests; ---------------------------. The test suite contains tests to check quality of debugging information.; The test are written in C based languages or in LLVM assembly language. These tests are compiled and run under a debugger. The debugger output; is checked to validate of debugging information. See README.txt in the; test suite for more information. This test suite is located in the; ``cross-project-tests/debuginfo-tests`` directory. Quick start; ===========. The tests are located in two separate repositories. The unit and; regression tests are in the main ""llvm""/ directory under the directories; ``llvm/unittests`` and ``llvm/test`` (so you get these tests for free with the; main LLVM tree). Use ``make check-all`` to run the unit and regression tests; after building LLVM. The ``test-suite`` module contains more comprehensive tests including whole C; and C++ programs. See the :doc:`TestSuiteGuide` for details. Unit and Regression tests; -------------------------. To run all of the LLVM unit tests use the check-llvm-unit target:. .. code-block:: bash. % make check-llvm-unit. To run all of the LLVM regression tests use the check-llvm target:. .. code-block:: bash. % make check-llvm. In order to get reasonable testing performance, build LLVM and subprojects; in release mode, i.e. .. code-block:: bash. % cmake -DCMAKE_BUILD_TYPE=""Release"" -DLLVM_ENABLE_ASSERTIONS=On. If you have `Clang <https://clang.llvm.org/>`_ checked out and built, you; can run the LLVM and Clang te",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst:4559,test,tests,4559,interpreter/llvm-project/llvm/docs/TestingGuide.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestingGuide.rst,1,['test'],['tests']
Testability,uzzer.cpp; compiler-rt/lib/scudo/standalone/include/scudo/interface.h; compiler-rt/lib/scudo/standalone/tests/atomic_test.cpp; compiler-rt/lib/scudo/standalone/tests/bytemap_test.cpp; compiler-rt/lib/scudo/standalone/tests/checksum_test.cpp; compiler-rt/lib/scudo/standalone/tests/chunk_test.cpp; compiler-rt/lib/scudo/standalone/tests/combined_test.cpp; compiler-rt/lib/scudo/standalone/tests/common_test.cpp; compiler-rt/lib/scudo/standalone/tests/flags_test.cpp; compiler-rt/lib/scudo/standalone/tests/list_test.cpp; compiler-rt/lib/scudo/standalone/tests/map_test.cpp; compiler-rt/lib/scudo/standalone/tests/memtag_test.cpp; compiler-rt/lib/scudo/standalone/tests/mutex_test.cpp; compiler-rt/lib/scudo/standalone/tests/primary_test.cpp; compiler-rt/lib/scudo/standalone/tests/quarantine_test.cpp; compiler-rt/lib/scudo/standalone/tests/release_test.cpp; compiler-rt/lib/scudo/standalone/tests/report_test.cpp; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test.h; compiler-rt/lib/scudo/standalone/tests/scudo_unit_test_main.cpp; compiler-rt/lib/scudo/standalone/tests/secondary_test.cpp; compiler-rt/lib/scudo/standalone/tests/size_class_map_test.cpp; compiler-rt/lib/scudo/standalone/tests/stats_test.cpp; compiler-rt/lib/scudo/standalone/tests/strings_test.cpp; compiler-rt/lib/scudo/standalone/tests/vector_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_cpp_test.cpp; compiler-rt/lib/scudo/standalone/tests/wrappers_c_test.cpp; compiler-rt/lib/scudo/standalone/tools/compute_size_class_config.cpp; compiler-rt/lib/tsan/rtl/tsan_fd.h; compiler-rt/lib/tsan/rtl/tsan_ignoreset.h; compiler-rt/lib/tsan/rtl/tsan_ilist.h; compiler-rt/lib/tsan/rtl/tsan_interface_ann.h; compiler-rt/lib/tsan/rtl/tsan_mman.h; compiler-rt/lib/tsan/rtl/tsan_mutexset.h; compiler-rt/lib/tsan/rtl/tsan_ppc_regs.h; compiler-rt/lib/tsan/rtl/tsan_rtl_access.cpp; compiler-rt/lib/tsan/rtl/tsan_shadow.h; compiler-rt/lib/tsan/rtl/tsan_stack_trace.h; compiler-rt/lib/tsan/rtl/tsan_suppressions.h; compiler-rt/lib/t,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:103241,test,tests,103241,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['test'],['tests']
Testability,"v(""VAR2""); // assumes this call can invalidate `env`; strlen(p); // warns about accessing invalid ptr. .. _security-FloatLoopCounter:. security.FloatLoopCounter (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on using a floating point value as a loop counter (CERT: FLP30-C, FLP30-CPP). .. code-block:: c. void test() {; for (float x = 0.1f; x <= 1.0f; x += 0.1f) {} // warn; }. .. _security-insecureAPI-UncheckedReturn:. security.insecureAPI.UncheckedReturn (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of functions whose return values must be always checked. .. code-block:: c. void test() {; setuid(1); // warn; }. .. _security-insecureAPI-bcmp:. security.insecureAPI.bcmp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcmp' function. .. code-block:: c. void test() {; bcmp(ptr0, ptr1, n); // warn; }. .. _security-insecureAPI-bcopy:. security.insecureAPI.bcopy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bcopy' function. .. code-block:: c. void test() {; bcopy(src, dst, n); // warn; }. .. _security-insecureAPI-bzero:. security.insecureAPI.bzero (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'bzero' function. .. code-block:: c. void test() {; bzero(ptr, n); // warn; }. .. _security-insecureAPI-getpw:. security.insecureAPI.getpw (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'getpw' function. .. code-block:: c. void test() {; char buff[1024];; getpw(2, buff); // warn; }. .. _security-insecureAPI-gets:. security.insecureAPI.gets (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'gets' function. .. code-block:: c. void test() {; char buff[1024];; gets(buff); // warn; }. .. _security-insecureAPI-mkstemp:. security.insecureAPI.mkstemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn when 'mkstemp' is passed fewer than 6 X's in the format string. .. code-block:: c. void test() {; mkstemp(""XX""); // warn; }. .. _security-insecureAPI-mktemp:. security.insecureAPI.mktemp (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``mkt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:23142,test,test,23142,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,vLayerCuda.cxx); target_link_libraries(testConvLayerCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCuda COMMAND testConvLayerCuda). add_executable(testForwardPassCuda TestForwardPassCuda.cxx); target_link_libraries(testForwardPassCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCuda COMMAND testForwardPassCuda). add_executable(testRotateWeightsCuda TestRotateWeightsCuda.cxx); target_link_libraries(testRotateWeightsCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-RotateWeightsCuda COMMAND testRotateWeightsCuda). add_executable(testConvBackpropagationCuda TestConvBackpropagationCuda.cxx); target_link_libraries(testConvBackpropagationCuda ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCuda COMMAND testConvBackpropagationCuda). if (tmva-cudnn). add_executable(testForwardPassCudnn TestForwardPassCudnn.cxx); target_link_libraries(testForwardPassCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ForwardCudnn COMMAND testForwardPassCudnn). add_executable(testConvBackpropagationCudnn TestConvBackpropagationCudnn.cxx); target_link_libraries(testConvBackpropagationCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvBackpropagationCudnn COMMAND testConvBackpropagationCudnn). add_executable(testConvLayerCudnn TestConvLayerCudnn.cxx); target_link_libraries(testConvLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-ConvLayerCudnn COMMAND testConvLayerCudnn). add_executable(testPoolingLayerCudnn TestPoolingLayerCudnn.cxx); target_link_libraries(testPoolingLayerCudnn ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-PoolingLayerCudnn COMMAND testPoolingLayerCudnn). # test mixed architecture Cudnn Cpu; add_executable(testMixedArchitectures TestMixedArchitectures.cxx); target_link_libraries(testMixedArchitectures ${Libraries} ${DNN_CUDA_LIBRARIES}); ROOT_ADD_TEST(TMVA-DNN-CNN-MixedArchitectures ,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt:2213,test,testForwardPassCudnn,2213,tmva/tmva/test/DNN/CNN/CMakeLists.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tmva/tmva/test/DNN/CNN/CMakeLists.txt,2,['test'],['testForwardPassCudnn']
Testability,"valOrder; (C, C++); Potential memory leaks caused by an undefined argument evaluation order.; Source: ; boost docs: shared_ptr. void f(int, int);; int g(void *);; int h() __attribute__((noreturn));. void test() {; // It is possible that 'malloc(1)' is called first,; // then 'h()', that is (or calls) noreturn and eventually; // 'g()' is never called.; f(g(malloc(1)), h()); // warn: 'g()' may never be called.; }. void f(int, int);; int g(int *);; int h() { throw 1; };. void test() {; // It is possible that 'new int' is called first,; // then 'h()', that throws an exception and eventually; // 'g()' is never called.; f(g(new int), h()); // warn: 'g()' may never be called.; }. memory.DstBufferTooSmall; (C, C++); Destination buffer passed to memory function is too small.; Note: security.insecureAPI.strcpy currently warns; on usage of strcpy and suggests to replace it.; Note: alpha.unix.CStringChecker contains some similar checks.; Source: CWE-120. void test() {; const char* s1 = ""abc"";; char *s2 = new char;; strcpy(s2, s1); // warn; }. void test() {; int* p1 = new int[3];; int* p2 = new int;; memcpy(p2, p1, 3); // warn; }. memory.NegativeArraySize; (C, C++); 'n' is used to specify the buffer size may be negative.; Note: possibly an enhancement to ; alpha.security.MallocOverflow.; Source: CWE-20,; Example 2. void test() {; int *p;; int n1 = -1;; p = new int[n1]; // warn; }. memory.ZeroAlloc; (C, C++); Allocation of zero bytes.; Note: an enhancement to unix.Malloc.; Note: unix.API perform C-checks for zero; allocation. This should be moved to unix.Malloc.; Source: C++03 3.7.3.1p2; C++11 3.7.4.1p2. #include <stdlib.h>. void test() {; int *p = malloc(0); // warn; free(p);; }. void test() {; int *p = new int[0]; // warn; delete[] p;; }. D6178. constructors/destructors. Name, DescriptionExampleProgress. ctordtor.ExptInsideDtor; (C++); It is dangerous to let an exception leave a destructor.; Using try..catch solves the problem.; Source: Scott Meyers ""More Effective C++"", item 11",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html:1372,test,test,1372,interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/potential_checkers.html,1,['test'],['test']
Testability,"valent when matching profile data, the following; remapping file could be used:. .. code-block:: text. # absl::string_view is considered equivalent to std::string_view; type N4absl11string_viewE St17basic_string_viewIcSt11char_traitsIcEE. # std:: might be std::__1:: in libc++ or std::__cxx11:: in libstdc++; name 3std St3__1; name 3std St7__cxx11. Matching profile data using a profile remapping file is supported on a; best-effort basis. For example, information regarding indirect call targets is; currently not remapped. For best results, you are encouraged to generate new; profile data matching the updated program, or to remap the profile data; using the ``llvm-cxxmap`` and ``llvm-profdata merge`` tools. .. note::. Profile data remapping is currently only supported for C++ mangled names; following the Itanium C++ ABI mangling scheme. This covers all C++ targets; supported by Clang other than Windows. GCOV-based Profiling; --------------------. GCOV is a test coverage program, it helps to know how often a line of code; is executed. When instrumenting the code with ``--coverage`` option, some; counters are added for each edge linking basic blocks. At compile time, gcno files are generated containing information about; blocks and edges between them. At runtime the counters are incremented and at; exit the counters are dumped in gcda files. The tool ``llvm-cov gcov`` will parse gcno, gcda and source files to generate; a report ``.c.gcov``. .. option:: -fprofile-filter-files=[regexes]. Define a list of regexes separated by a semi-colon.; If a file name matches any of the regexes then the file is instrumented. .. code-block:: console. $ clang --coverage -fprofile-filter-files="".*\.c$"" foo.c. For example, this will only instrument files finishing with ``.c``, skipping ``.h`` files. .. option:: -fprofile-exclude-files=[regexes]. Define a list of regexes separated by a semi-colon.; If a file name doesn't match all the regexes then the file is instrumented. .. code-block:: cons",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:122568,test,test,122568,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['test']
Testability,"vas *tmp = new TCanvas();; TH2F *h1 = new TH2F(""h1"",""h1"",40,0.,10.,40,1.e-2,1.e2);; h1->Fill(5,10);; h1->Draw(""COLZ"");; tmp->SetLogz();; h1->GetZaxis()->SetNdivisions(110,kFALSE);; }. THistPainter. The option E0 forces the error bars drawing even if the data point are; outside the plot frame. This option did not clip the error bars correctly. Make sure the unique canvas name generated in SetShowProjection; starts with a letter, and not with a number, to avoid to generate wrong macro; when the canvas is saved as a .C file. TGraphPainter. In TGraphPainter::PaintGraphErrors and related functions, the caps; that are drawn when option ""[]"" is specified are drawn as a sequence of three; separate lines. This results in an ugly concave jag at each corner. The caps are; now drawn using TPad::PaintPolyLine, the default miter line joins makes those; jags go away. TPainter3dAlgorithms. Protection against possible NaN added. The following macro produced wrong; plots. {; TCanvas * canvas = new TCanvas(""glC"",""C"",800,800);; TH3D *h = new TH3D(""h3"",""h3"",150,0,20,150,-5,5,150,-5,5);; ntuple->Draw(""px:py+1:pz+4.7>>h3"","""",""Q"");; }. TGraph. TGraph::SavePrimitive() uses a greater precision to output the; X and Y vectors. The following macro generated a wrong output (tmp.C). void testGraphPrec() {; double offset=55.0;; TCanvas* myC = new TCanvas(""myC"",""myC"",600,400);; TGraph* gr=new TGraph();; for (int i=0; i < 1000; i++) {; double point_x = 3.0+((double) i)*1e-7;; double point_y = offset+((double) i)*1e-8;; gr->SetPoint(i,point_x,point_y);; }; gr->Draw(""AP"");; myC->Print(""tmp.C"");; }. The constructor from a file is now able to handle delimiters. Like in the .csv files.; (Implementation done by Mathieu Trocme). TGraphErrors. The constructor from a file is now able to handle delimiters. Like in the .csv files.; (Implementation done by Mathieu Trocme). TGraph2D. The constructor from a file is now able to handle delimiters. Like in the .csv files.; (Implementation done by Mathieu Trocme); . ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v532/index.html:3179,test,testGraphPrec,3179,hist/doc/v532/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/hist/doc/v532/index.html,1,['test'],['testGraphPrec']
Testability,"ve 'xpd.putenv' in the; xrootd config file.Input dataIntroduce the; concept of 'input data': these are objects that are distributed in; optimal way to the workers, which are available via the input list, but; which are not saved in the TQueryResult object. These are meant for big; objects whic can create a big overload when distributed via the; standard input list (which should mostly be used for job control; parameters).  To add an input-data object just use; TProof::AddInputData(TObject *); if the input-data objects are in a; file you can use TProof::SetInputDataFile(const char *file); the final; set of input-data objects is assembled from the objects added via; AddInputData and those found in the file defined bySetInputDataFile.  . Improvements:. More; complete set of tests in test/stressProof . To run with PROOF-Lite pass; the argument 'lite' as master URL, e.g. './stressProof lite'.Possibility; to control on the client via rc variable the location of the sandbox,; package directory, cache and dataset directory (the latters two only; for PROOF-Lite); the variable names are 'Proof.Sandbox', ; 'Proof.PackageDir', 'Proof.CacheDir' and 'Proof.DataSetDir'. The default location of the sandbox has been changed from ""~/proof"" to ""~/.proof"" to avoid interferences with possible users' working areas.XrdProofd plug-in. Overall refactorization for easier; maintainance and improved solidity; Improved format of printout messages: all information; messages contain now the tag 'xpd-I' and all error messages the; tag 'xpd-E', so that they can easily be grepped out from the; log file.; . Log sending. Implement selective sending of logs from workers to master to avoid duplicating; too many text lines on the master log. Logs are now sent only after Exec, Print; requests and in case an error (level >= kError) occured. Of course, the full; logs can always be retrieved via TProofMgr::GetSessionLogs; . Log retrieval:. for 'grep' operations, use the system 'grep' command; via 'popen'; ins",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html:4122,sandbox,sandbox,4122,proof/doc/v522/index.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/proof/doc/v522/index.html,1,['sandbox'],['sandbox']
Testability,"ve memcpy (etc) lowering at; llc time when it gets inlined, because we can use smaller transfers. This also; avoids partial register stalls in some important cases. //===---------------------------------------------------------------------===//. We don't fold (icmp (add) (add)) unless the two adds only have a single use.; There are a lot of cases that we're refusing to fold in (e.g.) 256.bzip2, for; example:. %indvar.next90 = add i64 %indvar89, 1 ;; Has 2 uses; %tmp96 = add i64 %tmp95, 1 ;; Has 1 use; %exitcond97 = icmp eq i64 %indvar.next90, %tmp96. We don't fold this because we don't want to introduce an overlapped live range; of the ivar. However if we can make this more aggressive without causing; performance issues in two ways:. 1. If *either* the LHS or RHS has a single use, we can definitely do the; transformation. In the overlapping liverange case we're trading one register; use for one fewer operation, which is a reasonable trade. Before doing this; we should verify that the llc output actually shrinks for some benchmarks.; 2. If both ops have multiple uses, we can still fold it if the operations are; both sinkable to *after* the icmp (e.g. in a subsequent block) which doesn't; increase register pressure. There are a ton of icmp's we aren't simplifying because of the reg pressure; concern. Care is warranted here though because many of these are induction; variables and other cases that matter a lot to performance, like the above.; Here's a blob of code that you can drop into the bottom of visitICmp to see some; missed cases:. { Value *A, *B, *C, *D;; if (match(Op0, m_Add(m_Value(A), m_Value(B))) && ; match(Op1, m_Add(m_Value(C), m_Value(D))) &&; (A == C || A == D || B == C || B == D)) {; errs() << ""OP0 = "" << *Op0 << "" U="" << Op0->getNumUses() << ""\n"";; errs() << ""OP1 = "" << *Op1 << "" U="" << Op1->getNumUses() << ""\n"";; errs() << ""CMP = "" << I << ""\n\n"";; }; }. //===---------------------------------------------------------------------===//. define i1 @test1(",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt:64340,benchmark,benchmarks,64340,interpreter/llvm-project/llvm/lib/Target/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/README.txt,1,['benchmark'],['benchmarks']
Testability,"ve moving instructions, replacing them; with other instructions, and/or introducing new instructions. For example, a; cast may sink past a later instruction and be widened to handle first-order; recurrence; an interleave group of strided gathers or scatters may effectively; move to one place where they are replaced with shuffles and a common wide vector; load or store; new instructions may be introduced to compute masks, shuffle the; elements of vectors, and pack scalar values into vectors or vice-versa. In order for VPlan to support making instruction-level decisions and analyses,; it needs to model the relevant instructions along with their def/use relations.; This too follows a staged approach: first, the new instructions that compute; masks are modeled as VPInstructions, along with their induced def/use subgraph.; This effectively models masks in VPlan, facilitating VPlan-based predication.; Next, the logic embedded within each Recipe for generating its instructions at; VPlan execution time, will instead take part in the planning process by modeling; them as VPInstructions. Finally, only logic that applies to instructions as a; group will remain in Recipes, such as interleave groups and potentially other; idiom groups having synergistic cost. Related LLVM components; -----------------------; 1. SLP Vectorizer: one can compare the VPlan model with LLVM's existing SLP; tree, where TSLP [3]_ adds Plan Step 2.b. 2. RegionInfo: one can compare VPlan's H-CFG with the Region Analysis as used by; Polly [7]_. 3. Loop Vectorizer: the Vectorization Plan aims to upgrade the infrastructure of; the Loop Vectorizer and extend it to handle outer loops [8]_, [9]_. References; ----------; .. [1] ""Outer-loop vectorization: revisited for short SIMD architectures"", Dorit; Nuzman and Ayal Zaks, PACT 2008. .. [2] ""Proposal for function vectorization and loop vectorization with function; calls"", Xinmin Tian, [`cfe-dev; <http://lists.llvm.org/pipermail/cfe-dev/2016-March/047732.html>`_].",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/VectorizationPlan.rst:9876,log,logic,9876,interpreter/llvm-project/llvm/docs/VectorizationPlan.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/VectorizationPlan.rst,1,['log'],['logic']
Testability,"ve that in a correct execution will be a no-op,; but if misspeculated, will replace the `%rax` with the value of `%r8`.; Misspeculating any one of the three predicates will cause `%rax` to hold the; ""incorrect execution"" value from `%r8` as we preserve incoming values when; execution is correct rather than overwriting it. We now have a value in `%rax` in each basic block that indicates if at some; point previously a predicate was mispredicted. And we have arranged for that; value to be particularly effective when used below to harden loads. ##### Indirect Call, Branch, and Return Predicates. There is no analogous flag to use when tracing indirect calls, branches, and; returns. The predicate state must be accumulated through some other means.; Fundamentally, this is the reverse of the problem posed in CFI: we need to; check where we came from rather than where we are going. For function-local; jump tables, this is easily arranged by testing the input to the jump table; within each destination (not yet implemented, use retpolines):; ```; pushq %rax; xorl %eax, %eax # Zero out initial predicate state.; movq $-1, %r8 # Put all-ones mask into a register.; jmpq *.LJTI0_0(,%rdi,8) # Indirect jump through table.; .LBB0_2: # %sw.bb; testq $0, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_3: # %sw.bb1; testq $1, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_5: # %sw.bb10; testq $2, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL; ... .section .rodata,""a"",@progbits; .p2align 3; .LJTI0_0:; .quad .LBB0_2; .quad .LBB0_3; .quad .LBB0_5; ...; ```. Returns have a simple mitigation technique on x86-64 (or other ABIs which have; what is called a ""red zone"" region beyond the end of the stack). This region is; guaranteed ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:18210,test,testing,18210,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testing']
Testability,"ve this merge conflict in order to merge; your pull request. In order to do that:. ::. git fetch upstream; git rebase upstream/main. Then fix the source files causing merge conflicts and make sure to rebuild and; retest the result. Then:. ::. git add <files with resolved merge conflicts>; git rebase --continue. Finally, you'll need to force push to your branch one more time before you can; merge:. ::. git push -f; gh pr merge --squash --delete-branch. This force push may ask if you intend to push hundreds, or potentially; thousands of patches (depending on how long it's been since your pull request; was initially authored vs. when you intended to merge it). Since you're pushing; to a branch in your fork, this is ok and expected. Github's UI for the pull; request will understand that you're rebasing just your patches, and display; this result correctly with a note that a force push did occur. Checking out another PR locally; -------------------------------; Sometimes you want to review another person's PR on your local machine to run; tests or inspect code in your preferred editor. This is easily done with the; CLI:. ::. gh pr checkout <PR Number>. This is also possible with the web interface and the normal git command line; tools, but the process is a bit more complicated. See GitHub's; `documentation <https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/reviewing-changes-in-pull-requests/checking-out-pull-requests-locally?platform=linux&tool=webui#modifying-an-inactive-pull-request-locally>`_; on the topic. Example Pull Request with GitHub CLI; ====================================; Here is an example for creating a Pull Request with the GitHub CLI:. ::. # Clone the repo; gh repo clone llvm/llvm-project. # Switch to the repo and create a new branch; cd llvm-project; git switch -c my_change. # Create your changes; $EDITOR file.cpp. # Don't forget clang-format; git clang-format. # and don't forget running your tests; ninja check-llvm. # Commit, use",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst:7049,test,tests,7049,interpreter/llvm-project/llvm/docs/GitHub.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GitHub.rst,1,['test'],['tests']
Testability,"ved word, the statements following the ``else`` are processed. If the; value is false and there is no ``else`` arm, no statements are processed. Because the braces around the ``then`` statements are optional, this grammar rule; has the usual ambiguity with ""dangling else"" clauses, and it is resolved in; the usual way: in a case like ``if v1 then if v2 then {...} else {...}``, the; ``else`` associates with the inner ``if`` rather than the outer one. The :token:`IfBody` of the then and else arms of the ``if`` establish an; inner scope. Any ``defvar`` variables defined in the bodies go out of scope; when the bodies are finished (see `Defvar in a Record Body`_ for more details). The ``if`` statement can also be used in a record :token:`Body`. ``assert`` --- check that a condition is true; ---------------------------------------------. The ``assert`` statement checks a boolean condition to be sure that it is true; and prints an error message if it is not. .. productionlist::; Assert: ""assert"" `condition` "","" `message` "";"". If the boolean condition is true, the statement does nothing. If the; condition is false, it prints a nonfatal error message. The **message**, which; can be an arbitrary string expression, is included in the error message as a; note. The exact behavior of the ``assert`` statement depends on its; placement. * At top level, the assertion is checked immediately. * In a record definition, the statement is saved and all assertions are; checked after the record is completely built. * In a class definition, the assertions are saved and inherited by all; the subclasses and records that inherit from the class. The assertions are; then checked when the records are completely built. * In a multiclass definition, the assertions are saved with the other; components of the multiclass and then checked each time the multiclass; is instantiated with ``defm``. Using assertions in TableGen files can simplify record checking in TableGen; backends. Here is an example of an",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst:49088,assert,assert,49088,interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TableGen/ProgRef.rst,1,['assert'],['assert']
Testability,"vedObject (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Method calls on a moved-from object and copying a moved-from object will be reported. .. code-block:: cpp. struct A {; void foo() {}; };. void f() {; A a;; A b = std::move(a); // note: 'a' became 'moved-from' here; a.foo(); // warn: method call on a 'moved-from' object 'a'; }. .. _alpha-cplusplus-SmartPtr:. alpha.cplusplus.SmartPtr (C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for dereference of null smart pointers. .. code-block:: cpp. void deref_smart_ptr() {; std::unique_ptr<int> P;; *P; // warn: dereference of a default constructed smart unique_ptr; }. alpha.deadcode; ^^^^^^^^^^^^^^; .. _alpha-deadcode-UnreachableCode:. alpha.deadcode.UnreachableCode (C, C++); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check unreachable code. .. code-block:: cpp. // C; int test() {; int x = 1;; while(x);; return x; // warn; }. // C++; void test() {; int a = 2;. while (a > 1); a--;. if (a > 1); a++; // warn; }. // Objective-C; void test(id x) {; return;; [x retain]; // warn; }. alpha.fuchsia; ^^^^^^^^^^^^^. .. _alpha-fuchsia-lock:. alpha.fuchsia.Lock; """"""""""""""""""""""""""""""""""""; Similarly to :ref:`alpha.unix.PthreadLock <alpha-unix-PthreadLock>`, checks for; the locking/unlocking of fuchsia mutexes. .. code-block:: cpp. spin_lock_t mtx1;. void bad1(void); {; spin_lock(&mtx1);; spin_lock(&mtx1);	// warn: This lock has already been acquired; }. alpha.llvm; ^^^^^^^^^^. .. _alpha-llvm-Conventions:. alpha.llvm.Conventions; """""""""""""""""""""""""""""""""""""""""""". Check code for LLVM codebase conventions:. * A StringRef should not be bound to a temporary std::string whose lifetime is shorter than the StringRef's.; * Clang AST nodes should not have fields that can allocate memory. alpha.osx; ^^^^^^^^^. .. _alpha-osx-cocoa-DirectIvarAssignment:. alpha.osx.cocoa.DirectIvarAssignment (ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for direct assignments to instance variables. .. code-block:: objc. @interface MyClass : NSObject {}; @property (readon",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:56307,test,test,56307,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"verflow; 	ud2. it would be nice to produce ""into"" someday. //===---------------------------------------------------------------------===//. Test instructions can be eliminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	store <16 x float> %A, <16 x float>* %tmp; 	%s = bitcast <16 x float>* %tmp to i8*; 	%s2 = bitcast <16 x float>* %tmp2 to i8*; 	call void @llvm.memcpy.i64(i8* %s, i8* %s2, i64 64, i32 16); 	%R = load <16 x float>* %tmp2; 	ret <16 x float> %R; }. declare void @llvm.memcpy.i64(i8* nocapture, i8* nocapture, i64, i32) nounwind. which compiles to:. _foo:; 	subl	$140, %esp; 	movaps	%xmm3, 112(%esp); 	movaps	%xmm2, 96(%esp); 	movaps	%xmm1, 80(%e",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:31264,test,test,31264,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"verridable stub. So try to make *G* alias to *F*, or create overridable tail; call wrapper around *F* and replace *G* with that call. 3. Neither *F* nor *G* could be overridden. We can't use *RAUW*. We can just; change the callers: call *F* instead of *G*. That's what; ``replaceDirectCallers`` does. Below is a detailed body description. If “F” may be overridden; ------------------------; As follows from ``mayBeOverridden`` comments: “whether the definition of this; global may be replaced by something non-equivalent at link time”. If so, that's; ok: we can use alias to *F* instead of *G* or change call instructions itself. HasGlobalAliases, removeUsers; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; First consider the case when we have global aliases of one function name to; another. Our purpose is make both of them with aliases to the third strong; function. Though if we keep *F* alive and without major changes we can leave it; in ``FnTree``. Try to combine these two goals. Do stub replacement of *F* itself with an alias to *F*. 1. Create stub function *H*, with the same name and attributes like function; *F*. It takes maximum alignment of *F* and *G*. 2. Replace all uses of function *F* with uses of function *H*. It is the two; steps procedure instead. First of all, we must take into account, all functions; from whom *F* is called would be changed: since we change the call argument; (from *F* to *H*). If so we must to review these caller functions again after; this procedure. We remove callers from ``FnTree``, method with name; ``removeUsers(F)`` does that (don't confuse with ``replaceAllUsesWith``):. 2.1. ``Inside removeUsers(Value*; V)`` we go through the all values that use value *V* (or *F* in our context).; If value is instruction, we go to function that holds this instruction and; mark it as to-be-analyzed-again (put to ``Deferred`` set), we also remove; caller from ``FnTree``. 2.2. Now we can do the replacement: call ``F->replaceAllUsesWith(H)``. 3. *H* (that now ""officiall",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst:28124,stub,stub,28124,interpreter/llvm-project/llvm/docs/MergeFunctions.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MergeFunctions.rst,1,['stub'],['stub']
Testability,"vert?. * Use your best judgment. If you're uncertain, please start an email on; the commit thread asking for assistance. We aren't trying to enumerate; every case, but rather give a set of guidelines.; * You should be sure that reverting the change improves the stability of tip; of tree. Sometimes reverting one change in a series can worsen things; instead of improving them. We expect reasonable judgment to ensure that; the proper patch or set of patches is being reverted.; * The commit message for the reverting commit should explain why patch; is being reverted.; * It is customary to respond to the original commit email mentioning the; revert. This serves as both a notice to the original author that their; patch was reverted, and helps others following llvm-commits track context.; * Ideally, you should have a publicly reproducible test case ready to share.; Where possible, we encourage sharing of test cases in commit threads, or; in PRs. We encourage the reverter to minimize the test case and to prune; dependencies where practical. This even applies when reverting your own; patch; documenting the reasons for others who might be following along; is critical.; * It is not considered reasonable to revert without at least the promise to; provide a means for the patch author to debug the root issue. If a situation; arises where a public reproducer can not be shared for some reason (e.g.; requires hardware patch author doesn't have access to, sharp regression in; compile time of internal workload, etc.), the reverter is expected to be; proactive about working with the patch author to debug and test candidate; patches.; * Reverts should be reasonably timely. A change submitted two hours ago; can be reverted without prior discussion. A change submitted two years ago; should not be. Where exactly the transition point is is hard to say, but; it's probably in the handful of days in tree territory. If you are unsure,; we encourage you to reply to the commit thread, give the au",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst:21673,test,test,21673,interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/DeveloperPolicy.rst,1,['test'],['test']
Testability,"vide notes about the values of the arguments.; Without this information it is hard to confirm if the constraint is indeed; violated. The argument values are shown if they are known constants or the value; is determined by previous (not too complicated) assumptions. The checker can produce false positives in cases such as if the program has; invariants not known to the analyzer engine or the bug report path contains; calls to unknown functions. In these cases the analyzer fails to detect the real; range of the argument. **Parameters**. The checker models functions (and emits diagnostics) from the C standard by; default. The ``ModelPOSIX`` option enables modeling (and emit diagnostics) of; additional functions that are defined in the POSIX standard. This option is; disabled by default. .. _osx-checkers:. osx; ^^^; macOS checkers. .. _osx-API:. osx.API (C); """"""""""""""""""""""; Check for proper uses of various Apple APIs. .. code-block:: objc. void test() {; dispatch_once_t pred = 0;; dispatch_once(&pred, ^(){}); // warn: dispatch_once uses local; }. .. _osx-NumberObjectConversion:. osx.NumberObjectConversion (C, C++, ObjC); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Check for erroneous conversions of objects representing numbers into numbers. .. code-block:: objc. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-ObjCProperty:. osx.ObjCProperty (ObjC); """"""""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Objective-C properties. .. code-block:: objc. NSNumber *photoCount = [albumDescriptor objectForKey:@""PhotoCount""];; // Warning: Comparing a pointer value of type 'NSNumber *'; // to a scalar integer value; if (photoCount > 0) {; [self displayPhotos];; }. .. _osx-SecKeychainAPI:. osx.SecKeychainAPI (C); """"""""""""""""""""""""""""""""""""""""""""; Check for proper uses of Secure Keychain APIs. .. literalinclude:: checkers/seckeychainapi_",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:34946,test,test,34946,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"view; ========. The MIR serialization format uses a YAML container. YAML is a standard; data serialization language, and the full YAML language spec can be read at; `yaml.org; <http://www.yaml.org/spec/1.2/spec.html#Introduction>`_. A MIR file is split up into a series of `YAML documents`_. The first document; can contain an optional embedded LLVM IR module, and the rest of the documents; contain the serialized machine functions. .. _YAML documents: http://www.yaml.org/spec/1.2/spec.html#id2800132. MIR Testing Guide; =================. You can use the MIR format for testing in two different ways:. - You can write MIR tests that invoke a single code generation pass using the; ``-run-pass`` option in llc. - You can use llc's ``-stop-after`` option with existing or new LLVM assembly; tests and check the MIR output of a specific code generation pass. Testing Individual Code Generation Passes; -----------------------------------------. The ``-run-pass`` option in llc allows you to create MIR tests that invoke just; a single code generation pass. When this option is used, llc will parse an; input MIR file, run the specified code generation pass(es), and output the; resulting MIR code. You can generate an input MIR file for the test by using the ``-stop-after`` or; ``-stop-before`` option in llc. For example, if you would like to write a test; for the post register allocation pseudo instruction expansion pass, you can; specify the machine copy propagation pass in the ``-stop-after`` option, as it; runs just before the pass that we are trying to test:. ``llc -stop-after=machine-cp bug-trigger.ll -o test.mir``. If the same pass is run multiple times, a run index can be included; after the name with a comma. ``llc -stop-after=dead-mi-elimination,1 bug-trigger.ll -o test.mir``. After generating the input MIR file, you'll have to add a run line that uses; the ``-run-pass`` option to it. In order to test the post register allocation; pseudo instruction expansion pass on X86-64, ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst:1574,test,tests,1574,interpreter/llvm-project/llvm/docs/MIRLangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/MIRLangRef.rst,1,['test'],['tests']
Testability,"vironment!. You should not see any unexpected failures, but will see many unsupported; tests and expected failures:. ::. 114>Testing Time: 1124.66s; 114> Skipped : 39; 114> Unsupported : 21649; 114> Passed : 51615; 114> Expectedly Failed: 93; ========== Build: 114 succeeded, 0 failed, 321 up-to-date, 0 skipped ==========``. Alternatives to manual installation; ===================================; Instead of the steps above, to simplify the installation procedure you can use; `Chocolatey <https://chocolatey.org/>`_ as package manager.; After the `installation <https://chocolatey.org/install>`_ of Chocolatey,; run these commands in an admin shell to install the required tools:. .. code-block:: bat. choco install -y git cmake python3; pip3 install psutil. There is also a Windows; `Dockerfile <https://github.com/llvm/llvm-zorg/blob/main/buildbot/google/docker/windows-base-vscode2019/Dockerfile>`_; with the entire build tool chain. This can be used to test the build with a; tool chain different from your host installation or to create build servers. Next steps; ==========; 1. Read the documentation.; 2. Seriously, read the documentation.; 3. Remember that you were warned twice about reading the documentation. Test LLVM on the command line:; ------------------------------; The LLVM tests can be run by changing directory to the llvm source; directory and running:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test. This example assumes that Python is in your PATH variable, which would be; after **Add Python to the PATH** was selected during Python installation.; If you had opened a command window prior to Python installation, you would; have to close and reopen it to get the updated PATH. A specific test or test directory can be run with:. .. code-block:: bat. c:\llvm> python ..\build\Release\bin\llvm-lit.py llvm\test\Transforms\Util. Build the LLVM Suite:; ---------------------; * The projects may still be built individually, but to build them",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst:8618,test,test,8618,interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStartedVS.rst,1,['test'],['test']
Testability,"vm build>/bin/clang \; -C../test-suite/cmake/caches/O3.cmake \; ../test-suite; ```. **NOTE!** if you are using your built clang, and you want to build and run the; MicroBenchmarks/XRay microbenchmarks, you need to add `compiler-rt` to your; `LLVM_ENABLE_RUNTIMES` cmake flag. 4. Build the benchmarks:. ```text; % make; Scanning dependencies of target timeit-target; [ 0%] Building C object tools/CMakeFiles/timeit-target.dir/timeit.c.o; [ 0%] Linking C executable timeit-target; ...; ```. 5. Run the tests with lit:. ```text; % llvm-lit -v -j 1 -o results.json .; -- Testing: 474 tests, 1 threads --; PASS: test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test (1 of 474); ********** TEST 'test-suite :: MultiSource/Applications/ALAC/decode/alacconvert-decode.test' RESULTS **********; compile_time: 0.2192; exec_time: 0.0462; hash: ""59620e187c6ac38b36382685ccd2b63b""; size: 83348; **********; PASS: test-suite :: MultiSource/Applications/ALAC/encode/alacconvert-encode.test (2 of 474); ...; ```. 6. Show and compare result files (optional):. ```bash; # Make sure pandas and scipy are installed. Prepend `sudo` if necessary.; % pip install pandas scipy; # Show a single result file:; % test-suite/utils/compare.py results.json; # Compare two result files:; % test-suite/utils/compare.py results_a.json results_b.json; ```. Structure; ---------. The test-suite contains benchmark and test programs. The programs come with; reference outputs so that their correctness can be checked. The suite comes; with tools to collect metrics such as benchmark runtime, compilation time and; code size. The test-suite is divided into several directories:. - `SingleSource/`. Contains test programs that are only a single source file in size. A; subdirectory may contain several programs. - `MultiSource/`. Contains subdirectories which entire programs with multiple source files.; Large benchmarks and whole applications go here. - `MicroBenchmarks/`. Programs using the [google-benchmark](htt",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md:1902,test,test,1902,interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/TestSuiteGuide.md,1,['test'],['test']
Testability,"vm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test. For CMake builds e.g. on Windows with Visual Studio, you will need; to specify your build configuration (Debug, Release, etc.) via; --param=build_config=(build config). You may also need to specify; the build mode (Win32, etc) via --param=build_mode=(build mode).; Additionally, you will need to specify the lit site configuration which; lives in (build dir)\tools\clang\test, via; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg.; ; To run a single test:. python (path to llvm)\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=(build dir)\tools\clang\test\lit.site.cfg; (path to llvm)\llvm\tools\clang\test\(dir)\(test). For example:. python C:\Tools\llvm\utils\lit\lit.py -sv; --param=build_mode=Win32 --param=build_config=Debug; --param=clang_site_config=C:\Tools\build\tools\clang\test\lit.site.cfg; C:\Tools\llvm\tools\clang\test\Sema\wchar.c. The -sv option above tells the runner to show the test output if; any tests failed, to help you determine the cause of failure.; You can also pass in the --no-progress-bar option if you wish to disable; progress indications while the tests are running.; Your output might look something like this:; lit.py: lit.cfg:152: note: using clang: 'C:\Tools\llvm\bin\Release\clang.EXE'; -- Testing: Testing: 2534 tests, 4 threads --; Testing: 0 .. 10.. 20.. 30.. 40.. 50.. 60.. 70.. 80.. 90..; Testing Time: 81.52s; Passed : 2503; Expectedly Failed: 28; Unsupported : 3. The statistic, ""Failed"" (not shown if all tests pass), is the important one. Testing changes affecting libc++. Some changes in Clang affect libc++,; for example:. Changing the output of Clang's diagnostics.; Changing compiler builtins, especially the builtins used for type traits; or replacements of library functions lik",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html:7185,test,test,7185,interpreter/llvm-project/clang/www/hacking.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/hacking.html,1,['test'],['test']
Testability,"vm-premerge-checks/issues/new>`_; or give a ❤️ to an existing one. Requirements; ^^^^^^^^^^^^. To get a patch on Phabricator tested, the build server must be able to apply the; patch to the checked out git repository. Please make sure that either:. * You set a git hash as ``sourceControlBaseRevision`` in Phabricator which is; available on the GitHub repository,; * **or** you define the dependencies of your patch in Phabricator,; * **or** your patch can be applied to the main branch. Only then can the build server apply the patch locally and run the builds and; tests. Accessing build results; ^^^^^^^^^^^^^^^^^^^^^^^; Phabricator will automatically trigger a build for every new patch you upload or; modify. Phabricator shows the build results at the top of the entry. Clicking on; the links (in the red box) will show more details:. .. image:: Phabricator_premerge_results.png. The CI will compile and run tests, run clang-format and clang-tidy on lines; changed. If a unit test failed, this is shown below the build status. You can also expand; the unit test to see the details:. .. image:: Phabricator_premerge_unit_tests.png. Opting Out; ^^^^^^^^^^. In case you want to opt-out entirely of pre-merge testing, add yourself to the; `OPT OUT project <https://reviews.llvm.org/project/view/83/>`_. If you decide; to opt-out, please let us know why, so we might be able to improve in the future. Operational Details; ^^^^^^^^^^^^^^^^^^^. The code responsible for running the pre-merge flow can be found in the `external; repository <https://github.com/google/llvm-premerge-checks>`_. For enhancement; ideas and most bugs, please file an issue on said repository. For immediate; operational problems, the point of contact is; `Mikhail Goncharov <mailto:goncharo@google.com>`_. Background on the pre-merge infrastructure can be found in `this 2020 DevMeeting; talk <https://llvm.org/devmtg/2020-09/slides/Goncharov-Pre-merge_checks.pdf>`_. Committing a change; -------------------. Once a patch has",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst:12197,test,test,12197,interpreter/llvm-project/llvm/docs/Phabricator.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Phabricator.rst,1,['test'],['test']
Testability,"vm-symbolizer --obj=inlined.elf --print-address 0x4004be; 0x4004be; baz(); /tmp/test.cpp:11:18; main; /tmp/test.cpp:15:0. $ llvm-symbolizer --obj=inlined.elf 0x4004be --pretty-print --print-address; 0x4004be: baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. .. option:: --print-source-context-lines <N>. Print ``N`` lines of source context for each symbolized address. .. code-block:: console. $ llvm-symbolizer --obj=test.elf 0x400490 --print-source-context-lines=3; baz(); /tmp/test.cpp:11:0; 10 : volatile int k = 42;; 11 >: return foz() + k;; 12 : }. .. option:: --relativenames. Print the file's path relative to the compilation directory, instead; of the absolute path. If the command-line to the compiler included; the full path, this will be the same as the default. .. option:: --verbose. Print verbose address, line and column information. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf --verbose 0x4004be; baz(); Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 9; Function start address: 0x4004b6; Line: 11; Column: 18; main; Filename: /tmp/test.cpp; Function start filename: /tmp/test.cpp; Function start line: 14; Function start address: 0x4004b0; Line: 15; Column: 18. .. option:: --version, -v. Print version information for the tool. .. option:: @<FILE>. Read command-line options from response file `<FILE>`. WINDOWS/PDB SPECIFIC OPTIONS; -----------------------------. .. option:: --dia. Use the Windows DIA SDK for symbolization. If the DIA SDK is not found,; llvm-symbolizer will fall back to the native implementation. MACH-O SPECIFIC OPTIONS; -----------------------. .. option:: --default-arch <arch>. If a binary contains object files for multiple architectures (e.g. it is a; Mach-O universal binary), symbolize the object file for a given architecture.; You can also specify the architecture by writing ``binary_name:arch_name`` in; the input (see example below). If the architecture is not specified",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:12267,test,test,12267,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"vm. %r = call <4 x i32> @llvm.vp.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c, <4 x i1> %mask, i32 %evl); ;; For all lanes below %evl, %r is lane-wise equivalent to %also.r. %t = call <4 x i32> @llvm.fshr.v4i32(<4 x i32> %a, <4 x i32> %b, <4 x i32> %c); %also.r = select <4 x i1> %mask, <4 x i32> %t, <4 x i32> poison. '``llvm.vp.is.fpclass.*``' Intrinsics; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. Syntax:; """"""""""""""; This is an overloaded intrinsic. ::. declare <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f32(<vscale x 2 x float> <op>, i32 <test>, <vscale x 2 x i1> <mask>, i32 <vector_length>); declare <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> <op>, i32 <test>, <2 x i1> <mask>, i32 <vector_length>). Overview:; """""""""""""""""". Predicated llvm.is.fpclass :ref:`llvm.is.fpclass <llvm.is.fpclass>`. Arguments:; """""""""""""""""""". The first operand is a floating-point vector, the result type is a vector of; boolean with the same number of elements as the first argument. The second; operand specifies, which tests to perform :ref:`llvm.is.fpclass <llvm.is.fpclass>`.; The third operand is the vector mask and has the same number of elements as the; result vector type. The fourth operand is the explicit vector length of the; operation. Semantics:; """""""""""""""""""". The '``llvm.vp.is.fpclass``' intrinsic performs llvm.is.fpclass (:ref:`llvm.is.fpclass <llvm.is.fpclass>`). Examples:; """""""""""""""""". .. code-block:: llvm. %r = call <2 x i1> @llvm.vp.is.fpclass.v2f16(<2 x half> %x, i32 3, <2 x i1> %m, i32 %evl); %t = call <vscale x 2 x i1> @llvm.vp.is.fpclass.nxv2f16(<vscale x 2 x half> %x, i32 3, <vscale x 2 x i1> %m, i32 %evl). .. _int_mload_mstore:. Masked Vector Load and Store Intrinsics; ---------------------------------------. LLVM provides intrinsics for predicated vector load and store operations. The predicate is specified by a mask operand, which holds one bit per vector element, switching the associated vector lane on or off. The memory addresses corresponding to the ""off"" lanes are not acce",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst:841971,test,tests,841971,interpreter/llvm-project/llvm/docs/LangRef.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/LangRef.rst,1,['test'],['tests']
Testability,"vm.dbg.assign` to MIR. To begin with only SelectionDAG ISel will be supported. `llvm.dbg.assign`; intrinsics are lowered to MIR `DBG_INSTR_REF` instructions. Before this happens; we need to decide where it is appropriate to use memory locations and where we; must use a non-memory location (or no location) for each variable. In order to; make those decisions we run a standard fixed-point dataflow analysis that makes; the choice at each instruction, iteratively joining the results for each block. ### TODO list. As this is an experimental work in progress so there are some items we still need; to tackle:. * As mentioned in test llvm/test/DebugInfo/assignment-tracking/X86/diamond-3.ll,; the analysis should treat escaping calls like untagged stores. * The system expects locals to be backed by a local alloca. This isn't always; the case - sometimes a pointer to storage is passed into a function; (e.g. sret, byval). We need to be able to handle those cases. See; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for examples. * `trackAssignments` doesn't yet work for variables that have their; `llvm.dbg.declare` location modified by a `DIExpression`, e.g. when the; address of the variable is itself stored in an `alloca` with the; `llvm.dbg.declare` using `DIExpression(DW_OP_deref)`. See `indirectReturn` in; llvm/test/DebugInfo/Generic/assignment-tracking/track-assignments.ll and in; clang/test/CodeGen/assignment-tracking/assignment-tracking.cpp for an; example. * In order to solve the first bullet-point we need to be able to specify that a; memory location is available without using a `DIAssignID`. This is because; the storage address is not computed by an instruction (it's an argument; value) and therefore we have nowhere to put the metadata attachment. To solve; this we probably need another marker intrinsic to denote ""the variable's; stack home is X address"" - similar to `llvm.dbg.decl",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md:9846,test,test,9846,interpreter/llvm-project/llvm/docs/AssignmentTracking.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/AssignmentTracking.md,1,['test'],['test']
Testability,"vm.sadd.with.overflow.i32(i32 %v1, i32 %v2); %sum = extractvalue {i32, i1} %t, 0; %obit = extractvalue {i32, i1} %t, 1; br i1 %obit, label %overflow, label %normal; normal:; ret i32 %sum; overflow:; call void @llvm.trap(); unreachable; }; declare {i32, i1} @llvm.sadd.with.overflow.i32(i32, i32); declare void @llvm.trap(). to:. _func1:; 	movl	4(%esp), %eax; 	addl	8(%esp), %eax; 	jo	LBB1_2	## overflow; LBB1_1:	## normal; 	ret; LBB1_2:	## overflow; 	ud2. it would be nice to produce ""into"" someday. //===---------------------------------------------------------------------===//. Test instructions can be eliminated by using EFLAGS values from arithmetic; instructions. This is currently not done for mul, and, or, xor, neg, shl,; sra, srl, shld, shrd, atomic ops, and others. It is also currently not done; for read-modify-write instructions. It is also current not done if the; OF or CF flags are needed. The shift operators have the complication that when the shift count is; zero, EFLAGS is not set, so they can only subsume a test instruction if; the shift count is known to be non-zero. Also, using the EFLAGS value; from a shift is apparently very slow on some x86 implementations. In read-modify-write instructions, the root node in the isel match is; the store, and isel has no way for the use of the EFLAGS result of the; arithmetic to be remapped to the new node. Add and subtract instructions set OF on signed overflow and CF on unsiged; overflow, while test instructions always clear OF and CF. In order to; replace a test with an add or subtract in a situation where OF or CF is; needed, codegen must be able to prove that the operation cannot see; signed or unsigned overflow, respectively. //===---------------------------------------------------------------------===//. memcpy/memmove do not lower to SSE copies when possible. A silly example is:; define <16 x float> @foo(<16 x float> %A) nounwind {; 	%tmp = alloca <16 x float>, align 16; 	%tmp2 = alloca <16 x float>, align 16; 	",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt:30829,test,test,30829,interpreter/llvm-project/llvm/lib/Target/X86/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/X86/README.txt,1,['test'],['test']
Testability,"void test() {; FILE *F = fopen(""myfile.txt"", ""w"");. if (F); fclose(F);. fclose(F); // warn: closing a previously closed file stream; }. alpha.unix.Stream; (C); Check stream handling functions:fopen; tmpfile; fclose; fread; fwrite; fseek; ftell; rewind; fgetpos; fsetpos; clearerr; feof; ferror; fileno. void test() {; FILE *p = fopen(""foo"", ""r"");; } // warn: opened file is never closed. void test() {; FILE *p = fopen(""foo"", ""r"");; fseek(p, 1, SEEK_SET); // warn: stream pointer might be NULL; fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");. if (p); fseek(p, 1, 3);; // warn: third arg should be SEEK_SET, SEEK_END, or SEEK_CUR. fclose(p);; }. void test() {; FILE *p = fopen(""foo"", ""r"");; fclose(p);; fclose(p); // warn: already closed; }. void test() {; FILE *p = tmpfile();; ftell(p); // warn: stream pointer might be NULL; fclose(p);; }. alpha.unix.cstring.BufferOverlap; (C); Checks for overlap in two buffer arguments; applies to:; memcpy; mempcpy. void test() {; int a[4] = {0};; memcpy(a + 2, a + 1, 8); // warn; }. alpha.unix.cstring.NotNullTerminated; (C); Check for arguments which are not null-terminated strings; applies; to:; strlen; strnlen; strcpy; strncpy; strcat; strncat. void test() {; int y = strlen((char *)&test); // warn; }. alpha.unix.cstring.OutOfBounds; (C); Check for out-of-bounds access in string functions; applies; to:; strncopy; strncat. void test(char *y) {; char x[4];; if (strlen(y) == 4); strncpy(x, y, 5); // warn; }. Non-determinism Alpha Checkers. Name, DescriptionExample. alpha.nondeterminism.PointerIteration; (C++); Check for non-determinism caused by iterating unordered containers of pointers. // C++; void test() {; int a = 1, b = 2;; std::unordered_set UnorderedPtrSet = {&a, &b};. for (auto i : UnorderedPtrSet) // warn; f(i);; }. alpha.nondeterminism.PointerSorting; (C++); Check for non-determinism caused by sorting of pointers. // C++; void test() {; int a = 1, b = 2;; std::vector V = {&a, &b};; std::sort(V.begin(), V.end()); // warn;",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html:15148,test,test,15148,interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/alpha_checks.html,1,['test'],['test']
Testability,"vt/movw, if there are multiple; constants needed with the same low 16 bits, and those values are not live at; the same time, it would be possible to use a single movw instruction, followed; by multiple movt instructions to rewrite the high bits to different values.; For example:. volatile store i32 -1, i32* inttoptr (i32 1342210076 to i32*), align 4,; !tbaa; !0; volatile store i32 -1, i32* inttoptr (i32 1342341148 to i32*), align 4,; !tbaa; !0. is compiled and optimized to:. movw r0, #32796; mov.w r1, #-1; movt r0, #20480; str r1, [r0]; movw r0, #32796 @ <= this MOVW is not needed, value is there already; movt r0, #20482; str r1, [r0]. //===---------------------------------------------------------------------===//. Improve codegen for select's:; if (x != 0) x = 1; if (x == 1) x = 1. ARM codegen used to look like this:; mov r1, r0; cmp r1, #1; mov r0, #0; moveq r0, #1. The naive lowering select between two different values. It should recognize the; test is equality test so it's more a conditional move rather than a select:; cmp r0, #1; movne r0, #0. Currently this is a ARM specific dag combine. We probably should make it into a; target-neutral one. //===---------------------------------------------------------------------===//. Optimize unnecessary checks for zero with __builtin_clz/ctz. Those builtins; are specified to be undefined at zero, so portable code must check for zero; and handle it as a special case. That is unnecessary on ARM where those; operations are implemented in a way that is well-defined for zero. For; example:. int f(int x) { return x ? __builtin_clz(x) : sizeof(int)*8; }. should just be implemented with a CLZ instruction. Since there are other; targets, e.g., PPC, that share this behavior, it would be best to implement; this in a target-independent way: we should probably fold that (when using; ""undefined at zero"" semantics) to set the ""defined at zero"" bit and have; the code generator expand out the right code. //===-----------------------------",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt:20407,test,test,20407,interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/lib/Target/ARM/README.txt,2,['test'],['test']
Testability,"w(""Cost:Age"", """",""same"");; }; ```. In this example, `h2->Draw` is only adding the object h2 to the pad's; list of primitives. It does not paint the object on the screen. However,; `TTree::Draw` when called with option ""`same`"" gets the current pad; coordinates to build an intermediate histogram with the right limits.; Since nothing has been painted in the pad yet, the pad limits have not; been computed. Calling `pad->Update()` forces the painting of the pad; and allows `TTree::Draw` to compute the right limits for the; intermediate histogram. ### Setting the Range in TTree::Draw. There are two more optional parameters to the `TTree::Draw` method: one; is the number of entries and the second one is the entry to start with.; For example, this command draws 1000 entries starting with entry 100:. ``` {.cpp}; myTree->Draw(""Cost:Age"", """","""",1000,100);; ```. ### TTree::Draw Examples. The examples below use the `Event.root` file generated by the; `$ROOTSYS/test/Event` executable and the `Event`, `Track`, and; `EventHeader` class definitions are in `$ROOTSYS/test/Event.h`. The; commands have been tested on the split-levels 0, 1, and 9. Each command; is numbered and referenced by the explanations immediately following the; examples. ``` {.cpp}; // Data members and methods; 1 tree->Draw(""fNtrack"");; 2 tree->Draw(""event.GetNtrack()"");; 3 tree->Draw(""GetNtrack()"");; 4 tree->Draw(""fH.fXaxis.fXmax"");; 5 tree->Draw(""fH.fXaxis.GetXmax()"");; 6 tree->Draw(""fH.GetXaxis().fXmax"");; 7 tree->Draw(""GetHistogram().GetXaxis().GetXmax()"");; // Expressions in the selection parameter; 8 tree->Draw(""fTracks.fPx"",""fEvtHdr.fEvtNum%10 == 0"");; 9 tree->Draw(""fPx"",""fEvtHdr.fEvtNum%10 == 0"");; // Two dimensional arrays defined as:; // Float_t fMatrix[4][4] in Event class; 10 tree->Draw(""fMatrix"");; 11 tree->Draw(""fMatrix[ ][ ]"");; 12 tree->Draw(""fMatrix[2][2]"");; 13 tree->Draw(""fMatrix[ ][0]"");; 14 tree->Draw(""fMatrix[1][ ]"");; // using two arrays... Float_t fVertex[3]; in Track class; 15 tree->Draw(""f",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md:76885,test,test,76885,documentation/users-guide/Trees.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/Trees.md,2,['test'],['test']
Testability,"w-tests. List all of the discovered tests and exit. EXIT STATUS; -----------. :program:`lit` will exit with an exit code of 1 if there are any FAIL or XPASS; results. Otherwise, it will exit with the status 0. Other exit codes are used; for non-test related failures (for example a user error or an internal program; error). .. _test-discovery:. TEST DISCOVERY; --------------. The inputs passed to :program:`lit` can be either individual tests, or entire; directories or hierarchies of tests to run. When :program:`lit` starts up, the; first thing it does is convert the inputs into a complete list of tests to run; as part of *test discovery*. In the :program:`lit` model, every test must exist inside some *test suite*.; :program:`lit` resolves the inputs specified on the command line to test suites; by searching upwards from the input path until it finds a :file:`lit.cfg` or; :file:`lit.site.cfg` file. These files serve as both a marker of test suites; and as configuration files which :program:`lit` loads in order to understand; how to find and run the tests inside the test suite. Once :program:`lit` has mapped the inputs into test suites it traverses the; list of inputs adding tests for individual files and recursively searching for; tests in directories. This behavior makes it easy to specify a subset of tests to run, while still; allowing the test suite configuration to control exactly how tests are; interpreted. In addition, :program:`lit` always identifies tests by the test; suite they are in, and their relative path inside the test suite. For; appropriately configured projects, this allows :program:`lit` to provide; convenient and flexible support for out-of-tree builds. .. _test-status-results:. TEST STATUS RESULTS; -------------------. Each test ultimately produces one of the following eight results:. **PASS**. The test succeeded. **FLAKYPASS**. The test succeeded after being re-run more than once. This only applies to; tests containing an ``ALLOW_RETRIES:`` annot",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst:11562,test,test,11562,interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/lit.rst,3,['test'],"['test', 'tests']"
Testability,"w64; """""""""""""""""". For 32-bit (i686-w64-mingw32), and 64-bit (x86\_64-w64-mingw32), Clang; assumes as below;. - ``GCC versions 4.5.0 to 4.5.3, 4.6.0 to 4.6.2, or 4.7.0 (for the C++ header search path)``; - ``some_directory/bin/gcc.exe``; - ``some_directory/bin/clang.exe``; - ``some_directory/bin/clang++.exe``; - ``some_directory/bin/../include/c++/GCC_version``; - ``some_directory/bin/../include/c++/GCC_version/x86_64-w64-mingw32``; - ``some_directory/bin/../include/c++/GCC_version/i686-w64-mingw32``; - ``some_directory/bin/../include/c++/GCC_version/backward``; - ``some_directory/bin/../x86_64-w64-mingw32/include``; - ``some_directory/bin/../i686-w64-mingw32/include``; - ``some_directory/bin/../include``. This directory layout is standard for any toolchain you will find on the; official `MinGW-w64 website <http://mingw-w64.sourceforge.net>`_. Clang expects the GCC executable ""gcc.exe"" compiled for; ``i686-w64-mingw32`` (or ``x86_64-w64-mingw32``) to be present on PATH. `Some tests might fail <https://bugs.llvm.org/show_bug.cgi?id=9072>`_ on; ``x86_64-w64-mingw32``. AIX; ^^^. The ``-mdefault-visibility-export-mapping=`` option can be used to control; mapping of default visibility to an explicit shared object export; (i.e. XCOFF exported visibility). Three values are provided for the option:. * ``-mdefault-visibility-export-mapping=none``: no additional export; information is created for entities with default visibility.; * ``-mdefault-visibility-export-mapping=explicit``: mark entities for export; if they have explicit (e.g. via an attribute) default visibility from the; source, including RTTI.; * ``-mdefault-visibility-export-mapping=all``: set XCOFF exported visibility; for all entities with default visibility from any source. This gives a; export behavior similar to ELF platforms where all entities with default; visibility are exported. .. _spir-v:. SPIR-V support; --------------. Clang supports generation of SPIR-V conformant to `the OpenCL Environment; Specificati",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst:164393,test,tests,164393,interpreter/llvm-project/clang/docs/UsersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/UsersManual.rst,1,['test'],['tests']
Testability,"want them.; Remember that clients of the AST should never have to ""think"" to; understand what's going on. For example, all implicit conversions should; show up explicitly in the AST.; * Write tests that use your expression as a subexpression of other,; well-known expressions. Can you call a function using your expression as; an argument? Can you use the ternary operator?. #. Teach code generation to create IR to your AST node. This step is the first; (and only) that requires knowledge of LLVM IR. There are several things to; keep in mind:. * Code generation is separated into scalar/aggregate/complex and; lvalue/rvalue paths, depending on what kind of result your expression; produces. On occasion, this requires some careful factoring of code to; avoid duplication.; * ``CodeGenFunction`` contains functions ``ConvertType`` and; ``ConvertTypeForMem`` that convert Clang's types (``clang::Type*`` or; ``clang::QualType``) to LLVM types. Use the former for values, and the; latter for memory locations: test with the C++ ""``bool``"" type to check; this. If you find that you are having to use LLVM bitcasts to make the; subexpressions of your expression have the type that your expression; expects, STOP! Go fix semantic analysis and the AST so that you don't; need these bitcasts.; * The ``CodeGenFunction`` class has a number of helper functions to make; certain operations easy, such as generating code to produce an lvalue or; an rvalue, or to initialize a memory location with a given value. Prefer; to use these functions rather than directly writing loads and stores,; because these functions take care of some of the tricky details for you; (e.g., for exceptions).; * If your expression requires some special behavior in the event of an; exception, look at the ``push*Cleanup`` functions in ``CodeGenFunction``; to introduce a cleanup. You shouldn't have to deal with; exception-handling directly.; * Testing is extremely important in IR generation. Use ``clang -cc1; -emit-llvm`` and `Fi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:151213,test,test,151213,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"ward: simply call the constructor; for the kind of instruction to instantiate and provide the necessary parameters.; For example, an ``AllocaInst`` only *requires* a (const-ptr-to) ``Type``. Thus:. .. code-block:: c++. auto *ai = new AllocaInst(Type::Int32Ty);. will create an ``AllocaInst`` instance that represents the allocation of one; integer in the current stack frame, at run time. Each ``Instruction`` subclass; is likely to have varying default parameters which change the semantics of the; instruction, so refer to the `doxygen documentation for the subclass of; Instruction <https://llvm.org/doxygen/classllvm_1_1Instruction.html>`_ that; you're interested in instantiating. *Naming values*. It is very useful to name the values of instructions when you're able to, as; this facilitates the debugging of your transformations. If you end up looking; at generated LLVM machine code, you definitely want to have logical names; associated with the results of instructions! By supplying a value for the; ``Name`` (default) parameter of the ``Instruction`` constructor, you associate a; logical name with the result of the instruction's execution at run time. For; example, say that I'm writing a transformation that dynamically allocates space; for an integer on the stack, and that integer is going to be used as some kind; of index by some other code. To accomplish this, I place an ``AllocaInst`` at; the first point in the first ``BasicBlock`` of some ``Function``, and I'm; intending to use it within the same ``Function``. I might do:. .. code-block:: c++. auto *pa = new AllocaInst(Type::Int32Ty, 0, ""indexLoc"");. where ``indexLoc`` is now the logical name of the instruction's execution value,; which is a pointer to an integer on the run time stack. *Inserting instructions*. There are essentially three ways to insert an ``Instruction`` into an existing; sequence of instructions that form a ``BasicBlock``:. * Insertion into the instruction list of the ``BasicBlock``. Given a ``Basi",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst:114649,log,logical,114649,interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/ProgrammersManual.rst,2,['log'],['logical']
Testability,"warn: zero size; }. core.uninitialized.ArraySubscript; (C); Check for uninitialized values used as array subscripts. void test() {; int i, a[10];; int x = a[i]; // warn: array subscript is undefined; }. core.uninitialized.Assign; (C); Check for assigning uninitialized values. void test() {; int x;; x |= 1; // warn: left expression is uninitialized; }. core.uninitialized.Branch; (C); Check for uninitialized values used as branch conditions. void test() {; int x;; if (x) // warn; return;; }. core.uninitialized.CapturedBlockVariable; (C); Check for blocks that capture uninitialized values. void test() {; int x;; ^{ int y = x; }(); // warn; }. core.uninitialized.UndefReturn; (C); Check for uninitialized values being returned to the caller. int test() {; int x;; return x; // warn; }. C++ Checkers. Name, DescriptionExample. cplusplus.NewDelete; (C++); Check for double-free, use-after-free and offset problems involving C++ ; delete. void f(int *p);. void testUseMiddleArgAfterDelete(int *p) {; delete p;; f(p); // warn: use after free; }. class SomeClass {; public:; void f();; };. void test() {; SomeClass *c = new SomeClass;; delete c;; c->f(); // warn: use after free; }. void test() {; int *p = (int *)__builtin_alloca(sizeof(int));; delete p; // warn: deleting memory allocated by alloca; }. void test() {; int *p = new int;; delete p;; delete p; // warn: attempt to free released; }. void test() {; int i;; delete &i; // warn: delete address of local; }. void test() {; int *p = new int[1];; delete[] (++p);; // warn: argument to 'delete[]' is offset by 4 bytes; // from the start of memory allocated by 'new[]'; }. cplusplus.NewDeleteLeaks; (C++); Check for memory leaks. Traces memory managed by new/; delete. void test() {; int *p = new int;; } // warn. Dead Code Checkers. Name, DescriptionExample. deadcode.DeadStores; (C); Check for values stored to variables that are never read afterwards. void test() {; int x;; x = 1; // warn; }. Nullability Checkers. Name, DescriptionExample. ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html:5212,test,testUseMiddleArgAfterDelete,5212,interpreter/llvm-project/clang/www/analyzer/available_checks.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/www/analyzer/available_checks.html,1,['test'],['testUseMiddleArgAfterDelete']
Testability,"warn; }. .. _security-insecureAPI-strcpy:. security.insecureAPI.strcpy (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the ``strcpy`` and ``strcat`` functions. .. code-block:: c. void test() {; char x[4];; char *y = ""abcd"";. strcpy(x, y); // warn; }. .. _security-insecureAPI-vfork:. security.insecureAPI.vfork (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on uses of the 'vfork' function. .. code-block:: c. void test() {; vfork(); // warn; }. .. _security-insecureAPI-DeprecatedOrUnsafeBufferHandling:. security.insecureAPI.DeprecatedOrUnsafeBufferHandling (C); """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""; Warn on occurrences of unsafe or deprecated buffer handling functions, which now have a secure variant: ``sprintf, fprintf, vsprintf, scanf, wscanf, fscanf, fwscanf, vscanf, vwscanf, vfscanf, vfwscanf, sscanf, swscanf, vsscanf, vswscanf, swprintf, snprintf, vswprintf, vsnprintf, memcpy, memmove, strncpy, strncat, memset``. .. code-block:: c. void test() {; char buf [5];; strncpy(buf, ""a"", 1); // warn; }. .. _unix-checkers:. unix; ^^^^; POSIX/Unix checkers. .. _unix-API:. unix.API (C); """"""""""""""""""""""""; Check calls to various UNIX/Posix functions: ``open, pthread_once, calloc, malloc, realloc, alloca``. .. literalinclude:: checkers/unix_api_example.c; :language: c. .. _unix-Errno:. unix.Errno (C); """""""""""""""""""""""""""". Check for improper use of ``errno``.; This checker implements partially CERT rule; `ERR30-C. Set errno to zero before calling a library function known to set errno,; and check errno only after the function returns a value indicating failure; <https://wiki.sei.cmu.edu/confluence/pages/viewpage.action?pageId=87152351>`_.; The checker can find the first read of ``errno`` after successful standard; function calls. The C and POSIX standards often do not define if a standard library function; may change value of ``errno`` if the call does not fail.; Therefore, ``errno`` should only be used if it is known from the return value; of a function that the call ",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst:25579,test,test,25579,interpreter/llvm-project/clang/docs/analyzer/checkers.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/analyzer/checkers.rst,1,['test'],['test']
Testability,"was mispredicted. And we have arranged for that; value to be particularly effective when used below to harden loads. ##### Indirect Call, Branch, and Return Predicates. There is no analogous flag to use when tracing indirect calls, branches, and; returns. The predicate state must be accumulated through some other means.; Fundamentally, this is the reverse of the problem posed in CFI: we need to; check where we came from rather than where we are going. For function-local; jump tables, this is easily arranged by testing the input to the jump table; within each destination (not yet implemented, use retpolines):; ```; pushq %rax; xorl %eax, %eax # Zero out initial predicate state.; movq $-1, %r8 # Put all-ones mask into a register.; jmpq *.LJTI0_0(,%rdi,8) # Indirect jump through table.; .LBB0_2: # %sw.bb; testq $0, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_3: # %sw.bb1; testq $1, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL. .LBB0_5: # %sw.bb10; testq $2, %rdi # Validate index used for jump table.; cmovneq %r8, %rax # Conditionally update predicate state.; ...; jmp _Z4leaki # TAILCALL; ... .section .rodata,""a"",@progbits; .p2align 3; .LJTI0_0:; .quad .LBB0_2; .quad .LBB0_3; .quad .LBB0_5; ...; ```. Returns have a simple mitigation technique on x86-64 (or other ABIs which have; what is called a ""red zone"" region beyond the end of the stack). This region is; guaranteed to be preserved across interrupts and context switches, making the; return address used in returning to the current code remain on the stack and; valid to read. We can emit code in the caller to verify that a return edge was; not mispredicted:; ```; callq other_function; return_addr:; testq -8(%rsp), return_addr # Validate return address.; cmovneq %r8, %rax # Update predicate state.; ```. For an ABI without a ""red zone"" (and th",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md:18671,test,testq,18671,interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/SpeculativeLoadHardening.md,1,['test'],['testq']
Testability,"wasted memory (i.e. a memory; leak) when no longer needed. If a collection is deleted, its objects are; not. The user can force a collection to delete its objects, but that is; the user's choice. ### Determining the Class of Contained Objects. Most containers may hold heterogeneous collections of objects and then; it is left to the user to correctly cast the **`TObject`** pointer to; the right class. Casting to the wrong class will give wrong results and; may well crash the program! Therefore, the user has to be very careful.; Often a container only contains one class of objects, but if it really; contains a mixture, it is possible to ask each object about its class; using the `InheritsFrom` method. For example if `myObject` is a **`TObject`** pointer:. ``` {.cpp}; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; ```. As the name suggests, this test works even if the object is a subclass; of **`TParticle`**. The member function `IsA()` can be used instead of; `InheritsFrom` to make the test exact. The `InheritsFrom` and `IsA`; methods use the extensive Run Time Type Information (RTTI) available via; the ROOT meta-classes. ### Types of Collections. The ROOT system implements the following basic types of collections:; unordered collections, ordered collections and sorted collections. Next; figure shows the inheritance hierarchy for the primary collection; classes. All primary collection classes derive from the abstract base; class **`TCollection`**. ![The inheritance hierarchy of the primary collection classes](pictures/020001A3.jpg). ### Ordered Collections (Sequences). Sequences are collections that are externally ordered because they; maintain internal elements according to the order in which they were; added. The following sequences are available:. - **`TList`**. - **`THashList`**. - **`TOrdCollection`**. - **`TObjArray`**. - **`TClonesArray`**. The **`TOrdCollection`**, **`TObjArray`** as well as the; **`TClonesArray`** can be sor",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/CollectionClasses.md:3430,test,test,3430,documentation/users-guide/CollectionClasses.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/users-guide/CollectionClasses.md,1,['test'],['test']
Testability,"ways_inline__)); #else; #define forceinline inline; #endif; #elif defined(__GNUC__); #define forceinline inline __attribute__((__always_inline__)); #else; #define forceinline inline; #error; #endif. As the test is dependent on inline compiler options, the above header; file defines *forceinline*. .. code-block:: c++. #include ""definitions.h"". .. code-block:: c++. 1 #include ""definitions.h""; 2 forceinline int InlineFunction(int Param) {; 3 int Var_1 = Param;; 4 {; 5 int Var_2 = Param + Var_1;; 6 Var_1 = Var_2;; 7 }; 8 return Var_1;; 9 }; 10; 11 int test(int Param_1, int Param_2) {; 12 int A = Param_1;; 13 A += InlineFunction(Param_2);; 14 return A;; 15 }. The above test is used to illustrate a variable issue found in the Clang; compiler:; `PR43860 (Bugs LLVM) <https://bugs.llvm.org/show_bug.cgi?id=43860>`_ /; `PR43205 (GitHub) <https://github.com/llvm/llvm-project/issues/43205>`_. These are the logical views that :program:`llvm-debuginfo-analyzer`; generates for 3 different compilers (MSVC, Clang and GCC), emitting; different debug information formats (CodeView, DWARF) on different; platforms. .. code-block:: none. llvm-debuginfo-analyzer --attribute=level,format,producer; --output-sort=name; --print=symbols; pr-43860-codeview-clang.o; pr-43860-codeview-msvc.o; pr-43860-dwarf-clang.o; pr-43860-dwarf-gcc.o. CODEVIEW - Clang (Windows); ^^^^^^^^^^^^^^^^^^^^^^^^^^. .. code-block:: none. Logical View:; [000] {File} 'pr-43860-codeview-clang.o' -> COFF-x86-64. [001] {CompileUnit} 'pr-43860.cpp'; [002] {Producer} 'clang version 14.0.0'; [002] 2 {Function} inlined 'InlineFunction' -> 'int'; [003] {Parameter} '' -> 'int'; [002] {Function} extern not_inlined 'test' -> 'int'; [003] {Variable} 'A' -> 'int'; [003] {InlinedFunction} inlined 'InlineFunction' -> 'int'; [004] {Parameter} 'Param' -> 'int'; [004] {Variable} 'Var_1' -> 'int'; [004] {Variable} 'Var_2' -> 'int'; [003] {Parameter} 'Param_1' -> 'int'; [003] {Parameter} 'Param_2' -> 'int'. CODEVIEW - MSVC (Windows); ^^^^^^^^^^",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst:49794,log,logical,49794,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-debuginfo-analyzer.rst,1,['log'],['logical']
Testability,"ween the whole files and between any of the; specified functions. In this command, *overlap* is defined as follows:; Suppose *base profile file* has the following counts:; {c1_1, c1_2, ..., c1_n, c1_u_1, c2_u_2, ..., c2_u_s},; and *test profile file* has; {c2_1, c2_2, ..., c2_n, c2_v_1, c2_v_2, ..., c2_v_t}.; Here c{1|2}_i (i = 1 .. n) are matched counters and c1_u_i (i = 1 .. s) and; c2_v_i (i = 1 .. v) are unmatched counters (or counters only existing in); *base profile file* and *test profile file*, respectively.; Let sum_1 = c1_1 + c1_2 + ... + c1_n + c1_u_1 + c2_u_2 + ... + c2_u_s, and; sum_2 = c2_1 + c2_2 + ... + c2_n + c2_v_1 + c2_v_2 + ... + c2_v_t.; *overlap* = min(c1_1/sum_1, c2_1/sum_2) + min(c1_2/sum_1, c2_2/sum_2) + ...; + min(c1_n/sum_1, c2_n/sum_2). The result overlap distribution is a percentage number, ranging from 0.0% to; 100.0%, where 0.0% means there is no overlap and 100.0% means a perfect; overlap. Here is an example, if *base profile file* has counts of {400, 600}, and; *test profile file* has matched counts of {60000, 40000}. The *overlap* is 80%. OPTIONS; ^^^^^^^. .. option:: --function=<string>. Print details for a function if the function's name contains the given string. .. option:: --help. Print a summary of command line options. .. option:: --output=<output>, -o. Specify the output file name. If *output* is ``-`` or it isn't specified,; then the output is sent to standard output. .. option:: --value-cutoff=<n>. Show only those functions whose max count values are greater or equal to ``n``.; By default, the value-cutoff is set to max of unsigned long long. .. option:: --cs. Only show overlap for the context sensitive profile counts. The default is to show; non-context sensitive profile counts. .. program:: llvm-profdata order. .. _profdata-order:. ORDER; -------. SYNOPSIS; ^^^^^^^^. :program:`llvm-profdata order` [*options*] [*filename*]. DESCRIPTION; ^^^^^^^^^^^. :program:`llvm-profdata order` uses temporal profiling traces from a prof",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst:12836,test,test,12836,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-profdata.rst,1,['test'],['test']
Testability,"weights are ignored in the training (but are included for testing and performance evaluation). Boost_Num No 100 − Number of times the classifier is boosted. Boost_MonitorMethod No True − Write monitoring histograms for each boosted classifier. Boost_DetailedMonitoring No False − Produce histograms for detailed boost-wise monitoring. Boost_Type No AdaBoost AdaBoost, Bagging, HighEdgeGauss, HighEdgeCoPara Boosting type for the classifiers. Boost_BaggedSampleFraction No 0.6 − Relative size of bagged event sample to original size of the data sample (used whenever bagging is used). Boost_MethodWeightType No ByError ByError, Average, ByROC, ByOverlap, LastMethod How to set the final weight of the boosted classifiers. Boost_RecalculateMVACut No True − Recalculate the classifier MVA Signallike cut at every boost iteration. Boost_AdaBoostBeta No 1 − The ADA boost parameter that sets the effect of every boost step on the events' weights. Boost_Transform No step step, linear, log, gauss Type of transform applied to every boosted method linear, log, step. Boost_RandomSeed No 0 − Seed for random number generator used for bagging. Configuration options for MVA method :. Configuration options reference for MVA method: RuleFit. Option Array Default value Predefined values Description. V No False − Verbose output (short form of VerbosityLevel below - overrides the latter one). VerbosityLevel No Default Default, Debug, Verbose, Info, Warning, Error, Fatal Verbosity level. VarTransform No None − List of variable transformations performed before training, e.g., D_Background,P_Signal,G,N_AllClasses for: Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed). H No False − Print method-specific help message. CreateMVAPdfs No False − Create PDFs for classifier outputs (signal and background). IgnoreNegWeightsInTraining No False − Events with neg",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html:17445,log,log,17445,documentation/tmva/UsersGuide/optionRef.html,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/documentation/tmva/UsersGuide/optionRef.html,2,['log'],['log']
Testability,"wever libc++ was not; well tested or set up to build on Linux until relatively recently. As; a consequence, this guide suggests just using libstdc++ and a modern GCC as the; initial host in a bootstrap, and then using Clang (and potentially libc++). The first step is to get a recent GCC toolchain installed. The most common; distribution on which users have struggled with the version requirements is; Ubuntu Precise, 12.04 LTS. For this distribution, one easy option is to install; the `toolchain testing PPA`_ and use it to install a modern GCC. There is; a really nice discussions of this on the `ask ubuntu stack exchange`_ and a; `github gist`_ with updated commands. However, not all users can use PPAs and; there are many other distributions, so it may be necessary (or just useful, if; you're here you *are* doing compiler development after all) to build and install; GCC from source. It is also quite easy to do these days. .. _toolchain testing PPA:; https://launchpad.net/~ubuntu-toolchain-r/+archive/test; .. _ask ubuntu stack exchange:; https://askubuntu.com/questions/466651/how-do-i-use-the-latest-gcc-on-ubuntu/581497#58149; .. _github gist:; https://gist.github.com/application2000/73fd6f4bf1be6600a2cf9f56315a2d91. Easy steps for installing a specific version of GCC:. .. code-block:: console. % gcc_version=7.4.0; % wget https://ftp.gnu.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.tar.bz2; % wget https://ftp.gnu.org/gnu/gcc/gcc-${gcc_version}/gcc-${gcc_version}.tar.bz2.sig; % wget https://ftp.gnu.org/gnu/gnu-keyring.gpg; % signature_invalid=`gpg --verify --no-default-keyring --keyring ./gnu-keyring.gpg gcc-${gcc_version}.tar.bz2.sig`; % if [ $signature_invalid ]; then echo ""Invalid signature"" ; exit 1 ; fi; % tar -xvjf gcc-${gcc_version}.tar.bz2; % cd gcc-${gcc_version}; % ./contrib/download_prerequisites; % cd ..; % mkdir gcc-${gcc_version}-build; % cd gcc-${gcc_version}-build; % $PWD/../gcc-${gcc_version}/configure --prefix=$HOME/toolchains --enable-languages=c",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst:16737,test,test,16737,interpreter/llvm-project/llvm/docs/GettingStarted.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/GettingStarted.rst,1,['test'],['test']
Testability,"where the beginning of the snippet to be executed will; be mapped in at. The address is given in hexadecimal. Note that the snippet; also includes setup code, so the instruction exactly at the specified; address will not be the first instruction in the snippet. Using this; annotation requires the subprocess execution mode. This is useful in; cases where the memory accessed by the snippet depends on the location; of the snippet, like RIP-relative addressing. EXAMPLE 1: benchmarking instructions; ------------------------------------. Assume you have an X86-64 machine. To measure the latency of a single; instruction, run:. .. code-block:: bash. $ llvm-exegesis --mode=latency --opcode-name=ADD64rr. Measuring the uop decomposition or inverse throughput of an instruction works similarly:. .. code-block:: bash. $ llvm-exegesis --mode=uops --opcode-name=ADD64rr; $ llvm-exegesis --mode=inverse_throughput --opcode-name=ADD64rr. The output is a YAML document (the default is to write to stdout, but you can; redirect the output to a file using `--benchmarks-file`):. .. code-block:: none. ---; key:; opcode_name: ADD64rr; mode: latency; config: ''; cpu_name: haswell; llvm_triple: x86_64-unknown-linux-gnu; num_repetitions: 10000; measurements:; - { key: latency, value: 1.0058, debug_string: '' }; error: ''; info: 'explicit self cycles, selecting one aliasing configuration.; Snippet:; ADD64rr R8, R8, R10; '; ... To measure the latency of all instructions for the host architecture, run:. .. code-block:: bash. $ llvm-exegesis --mode=latency --opcode-index=-1. EXAMPLE 2: benchmarking a custom code snippet; ---------------------------------------------. To measure the latency/uops of a custom piece of code, you can specify the; `snippets-file` option (`-` reads from standard input). .. code-block:: bash. $ echo ""vzeroupper"" | llvm-exegesis --mode=uops --snippets-file=-. Real-life code snippets typically depend on registers or memory.; :program:`llvm-exegesis` checks the liveliness of re",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst:5303,benchmark,benchmarks-file,5303,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-exegesis.rst,1,['benchmark'],['benchmarks-file']
Testability,"which expected diagnostics were not seen or which unexpected diagnostics were; seen, etc. A complete example is:. .. code-block: c++. // RUN: %clang_cc1 -verify %s; int A = B; // expected-error {{use of undeclared identifier 'B'}}. If the test is run and the expected error is emitted on the expected line, the; diagnostic verifier will pass. However, if the expected error does not appear; or appears in a different location than expected, or if additional diagnostics; appear, the diagnostic verifier will fail and emit information as to why. The ``-verify`` command optionally accepts a comma-delimited list of one or; more verification prefixes that can be used to craft those special comments.; Each prefix must start with a letter and contain only alphanumeric characters,; hyphens, and underscores. ``-verify`` by itself is equivalent to; ``-verify=expected``, meaning that special comments will start with; ``expected``. Using different prefixes makes it easier to have separate; ``RUN:`` lines in the same test file which result in differing diagnostic; behavior. For example:. .. code-block:: c++. // RUN: %clang_cc1 -verify=foo,bar %s. int A = B; // foo-error {{use of undeclared identifier 'B'}}; int C = D; // bar-error {{use of undeclared identifier 'D'}}; int E = F; // expected-error {{use of undeclared identifier 'F'}}. The verifier will recognize ``foo-error`` and ``bar-error`` as special comments; but will not recognize ``expected-error`` as one because the ``-verify`` line; does not contain that as a prefix. Thus, this test would fail verification; because an unexpected diagnostic would appear on the declaration of ``E``. Multiple occurrences accumulate prefixes. For example,; ``-verify -verify=foo,bar -verify=baz`` is equivalent to; ``-verify=expected,foo,bar,baz``. Specifying Diagnostics; ^^^^^^^^^^^^^^^^^^^^^^; Indicating that a line expects an error or a warning is easy. Put a comment; on the line that has the diagnostic, use; ``expected-{error,warning,remark,not",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst:156052,test,test,156052,interpreter/llvm-project/clang/docs/InternalsManual.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/InternalsManual.rst,1,['test'],['test']
Testability,"which will be pointed at; the function's implementation once the function has been compiled) and an; indirect jump through the pointer. By fixing the address of the indirect jump; for the lifetime of the program we can give the function a permanent ""effective; address"", one that can be safely used for indirection and function pointer; comparison even if the function's implementation is never compiled, or if it is; compiled more than once (due to, for example, recompiling the function at a; higher optimization level) and changes address. The second utility, the compile; callback, represents a re-entry point from the program into the compiler that; will trigger compilation and then execution of a function. By initializing the; function's stub to point at the function's compile callback, we enable lazy; compilation: The first attempted call to the function will follow the function; pointer and trigger the compile callback instead. The compile callback will; compile the function, update the function pointer for the stub, then execute; the function. On all subsequent calls to the function, the function pointer; will point at the already-compiled function, so there is no further overhead; from the compiler. We will look at this process in more detail in the next; chapter of this tutorial, but for now we'll trust the CompileOnDemandLayer to; set all the stubs and callbacks up for us. All we need to do is to add the; CompileOnDemandLayer to the top of our stack and we'll get the benefits of; lazy compilation. We just need a few changes to the source:. .. code-block:: c++. ...; #include ""llvm/ExecutionEngine/SectionMemoryManager.h""; #include ""llvm/ExecutionEngine/Orc/CompileOnDemandLayer.h""; #include ""llvm/ExecutionEngine/Orc/CompileUtils.h""; ... ...; class KaleidoscopeJIT {; private:; std::unique_ptr<TargetMachine> TM;; const DataLayout DL;; RTDyldObjectLinkingLayer ObjectLayer;; IRCompileLayer<decltype(ObjectLayer), SimpleCompiler> CompileLayer;. using OptimizeFunction =; s",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst:3268,stub,stub,3268,interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/tutorial/BuildingAJIT3.rst,1,['stub'],['stub']
Testability,"which will truncate; a single precision float's mantissa to 12 bits). Here is an example on how a user may dynamically decide how to quantize a floating point field to get the most precision out of a fixed bit width:; ```c++; auto model = RNTupleModel::Create();; auto field = std::make_unique<RField<float>>(""f"");; // assuming we have an array of floats stored in `myFloats`:; auto [minV, maxV] = std::minmax_element(myFloats.begin(), myFloats.end());; constexpr auto nBits = 24;; field->SetQuantized(*minV, *maxV, nBits);; model->AddField(std::move(field));; auto f = model->GetDefaultEntry().GetPtr<float>(""f"");. // Now we can write our floats.; auto writer = RNTupleWriter::Recreate(std::move(model), ""myNtuple"", ""myFile.root"");; for (float val : myFloats) {; *f = val;; writer->Fill();; }; ```. Relationship to other ROOT components; -------------------------------------. The RNTuple classes have the following relationship to other parts of ROOT. The RNTuple classes use core ROOT infrastructure classes, such as error handling and logging.; When necessary, RNTuple uses a `TFile` for reading and writing.; The cases of writing to a local file and reading from a local file, a file from XRootD or from HTTP, do _not_ require `TFile`.; For these cases, RNTuple depends on the `RRawFile` class and its XRootD and Davix plugins. For user-defined classes as well as sets and maps, RNTuple uses `TClass`.; Simple types and other stdlib classes are natively supported and do not require dictionaries.; See the format specification for an exhaustive list of types supported in RNTuple.; The streamer field uses the standard ROOT streaming machinery. Integration to RDataFrame is provided through an RNTuple data source.; A universal RDataFrame constructor can create a data frame from either a TTree or an RNTuple with the same syntax. The RBrowser uses RNTuple classes to display RNTuple dataset information. Future Features; ---------------. The following features are planned for after the first R",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/Architecture.md:28574,log,logging,28574,tree/ntuple/v7/doc/Architecture.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/tree/ntuple/v7/doc/Architecture.md,1,['log'],['logging']
Testability,"will be enabled only when `ROOT::EnabledImplicitMT()` is called. But we can take the control of the threads by using `TMVA::gConfig().EnableMT(...)` and `TMVA::gConfig().DisableMT()`. ### PyMVA; - add support when using the Tensorflow backend in Keras to control the number of threads; - add possibility to control options for configuring GPU running. FOr example we can now set the mode to allocate memory only as needed. This is required when using the new RTX gaming cards from NVIDIA. ## 2D Graphics Libraries. - In the statistics painting for 2D histograms, the central cell of; the underflow/overflow grid was not properly rendered for very large contents.; This problem was reported [here](https://root-forum.cern.ch/t/stat-box-for-th2/).; - The automatic placement of legend now ""sees"" TMultiGraph and THStack.; - Improve and simplify the drawing the 2D histogram's option ""ARR"".; - The option ARR can be combined with the option COL or COLZ.; - `TBox::DistancetoPrimitive` and `TBox::ExecuteEvent` now work in log scales (by Jérémie Dudouet).; - Take the line attributes into account when drawing a histogram with option bar or hbar.; They were ignored until now.; - The new draw option MIN0 makes same effect as gStyle->SetHistMinimumZero(1), but can be specified; individually for each histogram.; - Improve the line clipping when a histogram is drawn with option ""L"". The following; example shows the improvement.; ~~~ {.cpp}; auto h = new TH1F(""h"",""h"",5,0.5,5.5);; h->SetBinContent(1,100000);; h->SetBinContent(2,10000);; h->SetBinContent(3,1000);; h->SetBinContent(4,100);; h->SetBinContent(5,10);; h->SetMinimum(50.);; h->SetMaximum(40000);; h->Draw(""L*"");; gPad->SetLogy();; ~~~; - `ChangeLabel` is now available for alphanumeric axis.; - Implement transparency for lines, texts and markers in the TeX output. ## 3D Graphics Libraries. - Make sure a TF3 is painted the same way in GL and non-GL mode.; The mismatch was reported in [this post](https://root-forum.cern.ch/t/how-to-specif",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v618/index.md:18993,log,log,18993,README/ReleaseNotes/v618/index.md,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/README/ReleaseNotes/v618/index.md,1,['log'],['log']
Testability,"with; :option:`--build-id`. .. _llvm-symbolizer-opt-output-style:. .. option:: --output-style <LLVM|GNU|JSON>. Specify the preferred output style. Defaults to ``LLVM``. When the output; style is set to ``GNU``, the tool follows the style of GNU's **addr2line**.; The differences from the ``LLVM`` style are:. * Does not print the column of a source code location. * Does not add an empty line after the report for an address. * Does not replace the name of an inlined function with the name of the; topmost caller when inlined frames are not shown. * Prints an address's debug-data discriminator when it is non-zero. One way to; produce discriminators is to compile with clang's -fdebug-info-for-profiling. ``JSON`` style provides a machine readable output in JSON. If addresses are; supplied via stdin, the output JSON will be a series of individual objects.; Otherwise, all results will be contained in a single array. .. code-block:: console. $ llvm-symbolizer --obj=inlined.elf 0x4004be 0x400486 -p; baz() at /tmp/test.cpp:11:18; (inlined by) main at /tmp/test.cpp:15:0. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=LLVM --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; main at /tmp/test.cpp:11:18. foo() at /tmp/test.cpp:6:3. $ llvm-symbolizer --output-style=GNU --obj=inlined.elf 0x4004be 0x400486 -p --no-inlines; baz() at /tmp/test.cpp:11; foo() at /tmp/test.cpp:6. $ clang -g -fdebug-info-for-profiling test.cpp -o profiling.elf; $ llvm-symbolizer --output-style=GNU --obj=profiling.elf 0x401167 -p --no-inlines; main at /tmp/test.cpp:15 (discriminator 2). $ llvm-symbolizer --output-style=JSON --obj=inlined.elf 0x4004be 0x400486 -p; [; {; ""Address"": ""0x4004be"",; ""ModuleName"": ""inlined.elf"",; ""Symbol"": [; {; ""Column"": 18,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""FunctionName"": ""baz()"",; ""Line"": 11,; ""StartAddress"": ""0x4004be"",; ""StartFileName"": ""/tmp/test.cpp"",; ""StartLine"": 9; },; {; ""Column"": 0,; ""Discriminator"": 0,; ""FileName"": ""/tmp/test.cpp"",; ""Fun",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst:9269,test,test,9269,interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/CommandGuide/llvm-symbolizer.rst,1,['test'],['test']
Testability,"wn the amount of code that is; being miscompiled by the selected code generator. To do this, it takes the test; program and partitions it into two pieces: one piece which it compiles with the; ""safe"" backend (into a shared object), and one piece which it runs with either; the JIT or the static LLC compiler. It uses several techniques to reduce the; amount of code pushed through the LLVM code generator, to reduce the potential; scope of the problem. After it is finished, it emits two bitcode files (called; ""test"" [to be compiled with the code generator] and ""safe"" [to be compiled with; the ""safe"" backend], respectively), and instructions for reproducing the; problem. The code generator debugger assumes that the ""safe"" backend produces; good code. .. _miscompilation debugger:. Miscompilation debugger; -----------------------. The miscompilation debugger works similarly to the code generator debugger. It; works by splitting the test program into two pieces, running the optimizations; specified on one piece, linking the two pieces back together, and then executing; the result. It attempts to narrow down the list of passes to the one (or few); which are causing the miscompilation, then reduce the portion of the test; program which is being miscompiled. The miscompilation debugger assumes that; the selected code generator is working properly. Advice for using bugpoint; =========================. ``bugpoint`` can be a remarkably useful tool, but it sometimes works in; non-obvious ways. Here are some hints and tips:. * In the code generator and miscompilation debuggers, ``bugpoint`` only works; with programs that have deterministic output. Thus, if the program outputs; ``argv[0]``, the date, time, or any other ""random"" data, ``bugpoint`` may; misinterpret differences in these data, when output, as the result of a; miscompilation. Programs should be temporarily modified to disable outputs; that are likely to vary from run to run. * In the `crash debugger`_, ``bugpoint`` does",MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst:5150,test,test,5150,interpreter/llvm-project/llvm/docs/Bugpoint.rst,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/llvm/docs/Bugpoint.rst,1,['test'],['test']
Testability,workitem/get_local_size.h; libclc/generic/include/clc/workitem/get_num_groups.h; libclc/generic/include/clc/workitem/get_work_dim.h; libclc/generic/include/integer/popcount.h; libclc/generic/include/math/clc_exp10.h; libclc/generic/include/math/clc_fma.h; libclc/generic/include/math/clc_fmod.h; libclc/generic/include/math/clc_hypot.h; libclc/generic/include/math/clc_ldexp.h; libclc/generic/include/math/clc_nextafter.h; libclc/generic/include/math/clc_pow.h; libclc/generic/include/math/clc_pown.h; libclc/generic/include/math/clc_powr.h; libclc/generic/include/math/clc_remainder.h; libclc/generic/include/math/clc_remquo.h; libclc/generic/include/math/clc_rootn.h; libclc/generic/include/math/clc_sqrt.h; libclc/generic/include/math/clc_tan.h; libclc/generic/include/math/clc_tanpi.h; libclc/generic/lib/math/ep_log.h; libcxx/benchmarks/format.bench.cpp; libcxx/benchmarks/formatted_size.bench.cpp; libcxx/benchmarks/formatter_float.bench.cpp; libcxx/benchmarks/format_to.bench.cpp; libcxx/benchmarks/format_to_n.bench.cpp; libcxx/benchmarks/to_chars.bench.cpp; libcxx/benchmarks/util_smartptr.bench.cpp; libcxx/benchmarks/variant_visit_1.bench.cpp; libcxx/benchmarks/variant_visit_2.bench.cpp; libcxx/benchmarks/variant_visit_3.bench.cpp; libcxx/include/__algorithm/adjacent_find.h; libcxx/include/__algorithm/all_of.h; libcxx/include/__algorithm/any_of.h; libcxx/include/__algorithm/count.h; libcxx/include/__algorithm/count_if.h; libcxx/include/__algorithm/find.h; libcxx/include/__algorithm/find_first_of.h; libcxx/include/__algorithm/find_if.h; libcxx/include/__algorithm/find_if_not.h; libcxx/include/__algorithm/for_each.h; libcxx/include/__algorithm/for_each_n.h; libcxx/include/__algorithm/iter_swap.h; libcxx/include/__algorithm/mismatch.h; libcxx/include/__algorithm/none_of.h; libcxx/include/__algorithm/swap_ranges.h; libcxx/include/__compare/is_eq.h; libcxx/include/__filesystem/file_time_type.h; libcxx/include/__filesystem/file_type.h; libcxx/include/__filesystem/space_info.h; li,MatchSource.DOCS,root-project,root,v6-32-06,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt:159593,benchmark,benchmarks,159593,interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,https://root.cern,https://github.com/root-project/root/tree/v6-32-06/interpreter/llvm-project/clang/docs/tools/clang-formatted-files.txt,1,['benchmark'],['benchmarks']
