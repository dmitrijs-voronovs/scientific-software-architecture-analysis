quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Testability," a Streamer method; kExternal: the class has a free standing way of streaming itself; kEmulatedStreamer: the class is missing its shared library. void SetStreamerImpl(); Internal routine to set fStreamerImpl based on the value of; fStreamerType. void SetCollectionProxy(const ROOT::TCollectionProxyInfo& ); Create the collection proxy object (and the streamer object) from; using the information in the TCollectionProxyInfo. void SetContextMenuTitle(const char* title); Change (i.e. set) the title of the TNamed. void SetGlobalIsA(IsAGlobalFunc_t ); This function installs a global IsA function for this class.; The global IsA function will be used if there is no local IsA function (fIsA). A global IsA function has the signature:. TClass *func( TClass *cl, const void *obj);. 'cl' is a pointer to the TClass object that corresponds to the; 'pointer type' used to retrieve the value 'obj'. For example with:; TNamed * m = new TNamed(""example"",""test"");; TObject* o = m; and; the global IsA function would be called with TObject::Class() as; the first parameter and the exact numerical value in the pointer; 'o'. In other word, inside the global IsA function. it is safe to C-style; cast the value of 'obj' into a pointer to the class described by 'cl'. void SetUnloaded(); Call this method to indicate that the shared library containing this; class's code has been removed (unloaded) from the process's memory. TVirtualStreamerInfo * SetStreamerInfo(Int_t version, const char* info = """"); Info is a string describing the names and types of attributes; written by the class Streamer function.; If info is an empty string (when called by TObject::StreamerInfo); the default Streamer info string is build. This corresponds to; the case of an automatically generated Streamer.; In case of user defined Streamer function, it is the user responsability; to implement a StreamerInfo function (override TObject::StreamerInfo).; The user must call IsA()->SetStreamerInfo(info) from this function. Bool_t MatchL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TClass.html:55563,test,test,55563,root/html602/TClass.html,https://root.cern,https://root.cern/root/html602/TClass.html,2,['test'],['test']
Testability," a copy of the GNU General Public License *; 20 * along with this library (see file COPYING); if not, write *; 21 * to the Free Software Foundation, Inc., 59 Temple Place, Suite *; 22 * 330, Boston, MA 02111-1307 USA, or contact the author. *; 23 * *; 24 **********************************************************************/; 25 ; 26// Implementation file for class Vavilov; 27//; 28// Created by: blist at Thu Apr 29 11:19:00 2010; 29//; 30// Last update: Thu Apr 29 11:19:00 2010; 31//; 32 ; 33 ; 34#include ""Math/Vavilov.h""; 35#include ""Math/VavilovAccurate.h""; 36#include ""Math/SpecFuncMathCore.h""; 37#include ""Math/SpecFuncMathMore.h""; 38 ; 39#include <cmath>; 40 ; 41namespace ROOT {; 42namespace Math {; 43 ; 44static const double eu = 0.577215664901532860606; // Euler's constant; 45 ; 46Vavilov::Vavilov(); 47{; 48}; 49 ; 50Vavilov::~Vavilov(); 51{; 52 // destructor (clean up resources); 53}; 54 ; 55 ; 56double Vavilov::Mode() const {; 57 double x = -4.22784335098467134e-01-std::log(GetKappa())-GetBeta2();; 58 if (x>-0.223172) x = -0.223172;; 59 double eps = 0.01;; 60 double dx;; 61 ; 62 do {; 63 double p0 = Pdf (x - eps);; 64 double p1 = Pdf (x);; 65 double p2 = Pdf (x + eps);; 66 double y1 = 0.5*(p2-p0)/eps;; 67 double y2 = (p2-2*p1+p0)/(eps*eps);; 68 dx = - y1/y2;; 69 x += dx;; 70 if (fabs(dx) < eps) eps = 0.1*fabs(dx);; 71 } while (fabs(dx) > 1E-5);; 72 return x;; 73}; 74 ; 75double Vavilov::Mode(double kappa, double beta2) {; 76 SetKappaBeta2 (kappa, beta2);; 77 return Mode();; 78}; 79 ; 80double Vavilov::Mean() const {; 81 return Mean (GetKappa(), GetBeta2());; 82}; 83 ; 84double Vavilov::Mean(double kappa, double beta2) {; 85 return eu-1-std::log(kappa)-beta2;; 86}; 87 ; 88double Vavilov::Variance() const {; 89 return Variance (GetKappa(), GetBeta2());; 90}; 91 ; 92double Vavilov::Variance(double kappa, double beta2) {; 93 return (1-0.5*beta2)/kappa;; 94}; 95 ; 96double Vavilov::Skewness() const {; 97 return Skewness (GetKappa(), GetBeta2());; 98}; 99 ; 100dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Vavilov_8cxx_source.html:1969,log,log,1969,doc/master/Vavilov_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Vavilov_8cxx_source.html,1,['log'],['log']
Testability," a log transformation"");; 370 return *this;; 371 }; 372 ; 373 fData[i] = std::log( val );; 374 ; 375 if( kNoError == fErrorType ); 376 {; 377 fDataError[i] = val;; 378 }; 379 else if ( kValueError == fErrorType ); 380 {; 381 fDataError[i]*= val;; 382 }; 383 else if ( kCoordError == fErrorType ); 384 {; 385 fDataError[i]/= val;; 386 }; 387 else if ( kAsymError == fErrorType ); 388 {; 389 fDataErrorHigh[i]/= val;; 390 fDataErrorLow[i]/= val;; 391 }; 392 else; 393 assert(false);; 394 }; 395 ; 396 if ( kNoError == fErrorType ); 397 {; 398 fErrorType = kValueError;; 399 }; 400 ; 401 return *this;; 402 }; 403 ; 404 ; 405 /**; 406 add one dim data with only coordinate and values; 407 */; 408 void BinData::Add( double x, double y ); 409 {; 410 assert( kNoError == fErrorType );; 411 ; 412 assert( !fData.empty() && fDataPtr );; 413 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 414 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 415 assert( fDataError.empty() && !fDataErrorPtr );; 416 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 417 ; 418 fData[ fNPoints ] = y;; 419 ; 420 FitData::Add( x );; 421 fSumContent += y;; 422 }; 423 ; 424 /**; 425 add one dim data with no error in the coordinate (x); 426 in this case store the inverse of the error in the value (y); 427 */; 428 void BinData::Add( double x, double y, double ey ); 429 {; 430 assert( kValueError == fErrorType );; 431 assert( !fData.empty() && fDataPtr );; 432 assert( fDataErrorHigh.empty() && !fDataErrorHighPtr );; 433 assert( fDataErrorLow.empty() && !fDataErrorLowPtr );; 434 assert( !fDataError.empty() && fDataErrorPtr );; 435 assert( fCoordErrors.empty() && fCoordErrorsPtr.empty() );; 436 ; 437 fData[ fNPoints ] = y;; 438 fDataError[ fNPoints ] = (ey != 0.0) ? 1.0/ey : 0.0;; 439 ; 440 FitData::Add( x );; 441 fSumContent += y;; 442 if (y != 0 || ey != 1.0) fSumError2 += ey*ey;; 443 // set the weight flag checking if error^2 != y; 444 if (!fIsWeighted); 445 if (y != 0 && std::abs( ey*ey/y ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:12072,assert,assert,12072,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability," a patch for retrieval later. Also the act of putting changes onto this stack.; Tag: human-readable label for a particular state of the tree. Tags may be simple (in which case they are actually branches) or annotated (analogous to a CVS tag), with an associated SHA1 hash and message. Annotated tags are preferable in general.; Tracking branch: a branch on a remote which is the default source / sink for pull / push operations respectively for the current branch. For instance, origin/master is the tracking branch for the local master in a local repository.; Tree-ish: a ref pointing to either a commit object, a tree object, or a tag object pointing to a tag or commit or tree object.; Un-tracked: not known currently to git. Initializing a repository; git clone <repository-spec> <local-dir>. or; mkdir <local-dir>; cd <local-dir>; git init. or (FNAL Redmine-specific); rclone [-r <repo>] <project> <local-name>. where rclone is defined in cet-chg:export:unix-admin/profile.d/rclone.sh ; Basic log information.>; git log []. Important tip: log messages have an optional structure, since many git commands only look at the first line. Get into the habit of putting only a short synopsis on the first line of a log message and putting more detailed information on subsequent lines. You can omit the -m option entirely and an editor (as specified with VISUAL or EDITOR) will be started.; This command is extremely versatile. You may want to have a couple of aliases defined in your .gitconfig file (see attached gitconfig for ideas). Working in your local repository. Obtain differences with; git status. Move files from one part of your directory tree to another:; git mv <old-path> <new-path>. Delete unwanted tracked files:; git rm <path>. Add un-tracked files:; git add <un-tracked-file>. Stage a modified file for commit:; git add <file>. Commit currently-staged files:; git commit -m <log-message>. Commit only specific files (regardless of what is staged):; git commit -m <log-message>. Commit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:6904,log,log,6904,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['log'],['log']
Testability," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3690; v4@ v4Definition rootcling_impl.cxx:3692; v3@ v3Definition rootcling_impl.cxx:3691; v1@ v1Definition rootcling_impl.cxx:3689; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:3274,log,logical,3274,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,1,['log'],['logical']
Testability," a pseudorapidity smaller or equal to 2 and with a transverse momentum greater than 10 GeV. Such a selection would require, among the other things, the management of an explicit loop, for example: std::vector<float> goodMuons_pt;; const auto size = mu_charge.size();; for (size_t i=0; i < size; ++i) {; if (mu_pt[i] > 10 && abs(mu_eta[i]) <= 2. && mu_charge[i] == -1) {; goodMuons_pt.emplace_back(mu_pt[i]);; }; }; ROOT::Internal::VecOps::SmallVectorTemplateCommon::sizesize_t size() constDefinition RVec.hxx:174; ROOT::VecOps::absRVec< PromoteType< T > > abs(const RVec< T > &v)Definition RVec.hxx:1832; These operations become straightforward with RVec - we just need to write what we mean: auto goodMuons_pt = mu_pt[ (mu_pt > 10.f && abs(mu_eta) <= 2.f && mu_charge == -1) ]; Now the clean collection of transverse momenta can be used within the rest of the data analysis, for example to fill a histogram. Arithmetic operations, logical operations and mathematical functions; Arithmetic operations on RVec instances can be performed: for example, they can be added, subtracted, multiplied. RVec<double> v1 {1.,2.,3.,4.};; RVec<float> v2 {5.f,6.f,7.f,8.f};; auto v3 = v1+v2;; auto v4 = 3 * v1;; ROOT::VecOps::RVecA ""std::vector""-like collection of values implementing handy operation to analyse them.Definition RVec.hxx:1529; v2@ v2Definition rootcling_impl.cxx:3702; v4@ v4Definition rootcling_impl.cxx:3704; v3@ v3Definition rootcling_impl.cxx:3703; v1@ v1Definition rootcling_impl.cxx:3701; The supported operators are; +, -, *, /; +=, -=, *=, /=; <, >, ==, !=, <=, >=, &&, ||; ~, !; &, |, ^; &=, |=, ^=; <<=, >>=. The most common mathematical functions are supported. It is possible to invoke them passing RVecs as arguments.; abs, fdim, fmod, remainder; floor, ceil, trunc, round, lround, llround; exp, exp2, expm1; log, log10, log2, log1p; pow; sqrt, cbrt; sin, cos, tan, asin, acos, atan, atan2, hypot; sinh, cosh, tanh, asinh, acosh; erf, erfc; lgamma, tgamma. If the VDT library is availab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html:3275,log,logical,3275,doc/master/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1VecOps_1_1RVec.html,1,['log'],['logical']
Testability," a, Float_t b, Float_t z, Float_t r); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); voidAddLine(Float_t a, Float_t b, Float_t w, Float_t h); virtual voidTEveElement::AddParent(TEveElement* re); voidAddQuad(Float_t* verts); voidAddQuad(Float_t a, Float_t b); voidAddQuad(Float_t a, Float_t b, Float_t c); voidAddQuad(Float_t a, Float_t b, Float_t w, Float_t h); voidAddQuad(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveRGBAPalette*TEveDigitSet::AssertPalette(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveQuadSet.html:2286,Assert,AssertPalette,2286,root/html528/TEveQuadSet.html,https://root.cern,https://root.cern/root/html528/TEveQuadSet.html,1,['Assert'],['AssertPalette']
Testability," a, Int_t first, Int_t last); static voidTSeqCollection::QSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidTSeqCollection::QSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); Int_tRank(const TObject* obj) const; virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTSeqCollection::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBtree.html:14469,Test,TestBit,14469,root/html530/TBtree.html,https://root.cern,https://root.cern/root/html530/TBtree.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," a,Double_t x);; 42 Double_t GamSer(Double_t a,Double_t x);; 43 Double_t VavilovDenEval(Double_t rlam, Double_t *AC, Double_t *HC, Int_t itype);; 44 void VavilovSet(Double_t rkappa, Double_t beta2, Bool_t mode, Double_t *WCM, Double_t *AC, Double_t *HC, Int_t &itype, Int_t &npt);; 45 ; 46}; 47 ; 48////////////////////////////////////////////////////////////////////////////////; 49/// Returns `sqrt(x*x + y*y)`; 50 ; 51Long_t TMath::Hypot(Long_t x, Long_t y); 52{; 53 return (Long_t) (hypot((Double_t)x, (Double_t)y) + 0.5);; 54}; 55 ; 56////////////////////////////////////////////////////////////////////////////////; 57/// Returns `sqrt(x*x + y*y)`; 58 ; 59Double_t TMath::Hypot(Double_t x, Double_t y); 60{; 61 return hypot(x, y);; 62}; 63 ; 64////////////////////////////////////////////////////////////////////////////////; 65/// Returns the area hyperbolic sine of `x`.; 66 ; 67Double_t TMath::ASinH(Double_t x); 68{; 69#if defined(WIN32); 70 if(x==0.0) return 0.0;; 71 Double_t ax = Abs(x);; 72 return log(x+ax*sqrt(1.+1./(ax*ax)));; 73#else; 74 return asinh(x);; 75#endif; 76}; 77 ; 78////////////////////////////////////////////////////////////////////////////////; 79/// Returns the nonnegative area hyperbolic cosine of `x`.; 80 ; 81Double_t TMath::ACosH(Double_t x); 82{; 83#if defined(WIN32); 84 if(x==0.0) return 0.0;; 85 Double_t ax = Abs(x);; 86 return log(x+ax*sqrt(1.-1./(ax*ax)));; 87#else; 88 return acosh(x);; 89#endif; 90}; 91 ; 92////////////////////////////////////////////////////////////////////////////////; 93/// Returns the area hyperbolic tangent of `x`.; 94 ; 95Double_t TMath::ATanH(Double_t x); 96{; 97#if defined(WIN32); 98 return log((1+x)/(1-x))/2;; 99#else; 100 return atanh(x);; 101#endif; 102}; 103 ; 104////////////////////////////////////////////////////////////////////////////////; 105/// Returns the binary (base-2) logarithm of `x`.; 106 ; 107Double_t TMath::Log2(Double_t x); 108{; 109 return log(x)/log(2.0);; 110}; 111 ; 112/////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:2442,log,log,2442,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['log'],['log']
Testability," a; Hidden Line Mode eRotate about yy b; Hidden Surface Mode rRotate about zz c; Move object down uAuto-rotate about x1 2 3; Move object up iAuto-rotate about y4 5 6; Move object left lAuto-rotate about z7 8 9; Move object right hToggle controls styleo; Move object forward jToggle stereo displays; Move object backward kToggle blue stereo viewd; Adjust focus (stereo mode) [ ] { }Toggle double bufferf; Rotate object Left mouse button down + move.; 9.13.4 Common 3D Viewer Architecture; The 3D Viewer Architecture provides a common mechanism for viewer clients to publish 3D objects to it. It enables:. Decoupling of producers (geometry packages etc) who model collection of 3D objects from consumers (viewers) which display them.; Producer code free of explicit drawing commands & viewer specific branching.; Support differing viewers and clients capabilities, e.g.; Mix of native (in viewer) shapes and generic client side tessellation.; Local/global frame object description; Bounding boxes; Placing copies sharing common geometry (logical/physical shapes). The architecture consists of:. TVirtualViewer3D interface: An abstract handle to the viewer, allowing client to add objects, test preferences etc.; TBuffer3D class hierarchy: Used to describe 3D objects (“shapes”) - filled /added by negotiation with viewer via TVirtualViewer3D. A typical interaction between viewer and client using these, taken from TGeoPainter is:; TVirtualViewer3D * viewer = gPad->GetViewer3D();; // Does viewer prefer local frame positions?; Bool_t localFrame = viewer->PreferLocalFrame();; // Perform first fetch of buffer from the shape and try adding it to the viewer; const TBuffer3D &buffer = shape.GetBuffer3D(TBuffer3D::kCore |; TBuffer3D::kBoundingBox |; TBuffer3D::kShapeSpecific,; localFrame);; Int_t reqSections = viewer->AddObject(buffer, &addDaughters);. // If the viewer requires additional sections fetch from the shape; // (if possible) and add again; if (reqSections != TBuffer3D::kNone); shape.GetB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:402190,log,logical,402190,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability," actions applied; TQConnection*TQCommand::fRedodo/redo action; Long_t*TQCommand::fRedoArgsredo values; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; Int_tTQCommand::fState-1 undoing on, 1 redoing on, 0 nothing in progress; Int_tTQCommand::fStatusfStatus++ after Redo(), fStatus-- after Undo(); TStringTQCommand::fTitlecommand description; TQConnection*TQCommand::fUndoundo action; Long_t*TQCommand::fUndoArgsundo values; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TQUndoManager(); Constructor. ~TQUndoManager(); Destructor. void ls(Option_t* option = """") const; Lists all commands in stack. void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const; Print collection entry. void SetLogging(Bool_t on = kTRUE); Start logging. Delete all previous log records; Note: logging is not implemented yet. void Add(TObject* obj, Option_t* opt); Add command to the stack of commands.; Command's redo action will be executed. option string can contain the following substrings:; ""merge"" - input command will be merged; ""compress"" - input command will be compressed. void CurrentChanged(TQCommand* c); emit signal. void Undo(Option_t* option = """"); Performs undo action. Move cursor position backward in history stack. void Redo(Option_t* option = """"); Performs redo action. Move cursor position forward in history stack. Bool_t CanRedo() const; Returns kTRUE if redo action is possible. Bool_t CanUndo() const; Returns kTRUE if undo action is possible. Bool_t IsLogging() const; Returns kTRUE if logging is ON. TQCommand * GetCurrent() const; Returns the last executed command. TQCommand * GetCursor() const; Returns a command correspondent to the current cursor position in stack. void SetLimit(UInt_t limit); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQUndoManager.html:18753,log,logging,18753,root/html528/TQUndoManager.html,https://root.cern,https://root.cern/root/html528/TQUndoManager.html,4,['log'],['logging']
Testability," adding the object h2 to the pad’s list of primitives. It does not paint the object on the screen. However, TTree::Draw when called with option “same” gets the current pad coordinates to build an intermediate histogram with the right limits. Since nothing has been painted in the pad yet, the pad limits have not been computed. Calling pad->Update() forces the painting of the pad and allows TTree::Draw to compute the right limits for the intermediate histogram.; 12.20.6 Setting the Range in TTree::Draw; There are two more optional parameters to the TTree::Draw method: one is the number of entries and the second one is the entry to start with. For example, this command draws 1000 entries starting with entry 100:; myTree->Draw(""Cost:Age"", """","""",1000,100);; 12.20.7 TTree::Draw Examples; The examples below use the Event.root file generated by the $ROOTSYS/test/Event executable and the Event, Track, and EventHeader class definitions are in $ROOTSYS/test/Event.h. The commands have been tested on the split-levels 0, 1, and 9. Each command is numbered and referenced by the explanations immediately following the examples.; // Data members and methods; 1 tree->Draw(""fNtrack"");; 2 tree->Draw(""event.GetNtrack()"");; 3 tree->Draw(""GetNtrack()"");; 4 tree->Draw(""fH.fXaxis.fXmax"");; 5 tree->Draw(""fH.fXaxis.GetXmax()"");; 6 tree->Draw(""fH.GetXaxis().fXmax"");; 7 tree->Draw(""GetHistogram().GetXaxis().GetXmax()"");; // Expressions in the selection parameter; 8 tree->Draw(""fTracks.fPx"",""fEvtHdr.fEvtNum%10 == 0"");; 9 tree->Draw(""fPx"",""fEvtHdr.fEvtNum%10 == 0"");; // Two dimensional arrays defined as:; // Float_t fMatrix[4][4] in Event class; 10 tree->Draw(""fMatrix"");; 11 tree->Draw(""fMatrix[ ][ ]"");; 12 tree->Draw(""fMatrix[2][2]"");; 13 tree->Draw(""fMatrix[ ][0]"");; 14 tree->Draw(""fMatrix[1][ ]"");; // using two arrays... Float_t fVertex[3]; in Track class; 15 tree->Draw(""fMatrix - fVertex"");; 16 tree->Draw(""fMatrix[2][1] - fVertex[5][1]"");; 17 tree->Draw(""fMatrix[ ][1] - fVertex[5][1]"");; 18 tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:592734,test,tested,592734,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['tested']
Testability," addition provides interactive access to the Cling C++ interpreter via the command line. ; Definition at line 171 of file TRint.cxx. ◆ ~TRint(). TRint::~TRint ; (; ). virtual . Destructor. ; Definition at line 316 of file TRint.cxx. Member Function Documentation. ◆ Class(). static TClass * TRint::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRint::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRint::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 67 of file TRint.h. ◆ DeclFileName(). static const char * TRint::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 67 of file TRint.h. ◆ ExecLogon(). void TRint::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 341 of file TRint.cxx. ◆ GetInputHandler(). TFileHandler * TRint::GetInputHandler ; (; ). inline . Definition at line 65 of file TRint.h. ◆ GetPrompt(). char * TRint::GetPrompt ; (; ). virtual . Get prompt from interpreter. Either ""root [n]"" or ""end with '}'"". ; Definition at line 575 of file TRint.cxx. ◆ HandleException(). void TRint::HandleException ; (; Int_t ; sig). overridevirtual . Handle signals (kSigBus, kSigSegmentationViolation, kSigIllegalInstruction and kSigFloatingException) trapped in TSystem. ; Specific TApplication implementations may want something different here. ; Reimplemented from TApplication.; Definition at line 704 of file TRint.cxx. ◆ HandleTermInput(). Bool_t TRint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint.html:23570,log,logon,23570,doc/master/classTRint.html,https://root.cern,https://root.cern/doc/master/classTRint.html,1,['log'],['logon']
Testability," additional; row/column information is stored, see TMatrixTSparse source for; additional details . Another way to assign and store matrix data is through Use; see for instance stressLinear.cxx file . Unless otherwise specified, matrix and vector indices always start; with 0, spanning up to the specified limit-1. However, there are; constructors to which one can specify aribtrary lower and upper; bounds, e.g. TMatrixD m(1,10,1,5) defines a matrix that ranges; from 1..10, 1..5 (a(1,1)..a(10,5)). The present package provides all facilities to completely AVOID; returning matrices. Use ""TMatrixD A(TMatrixD::kTransposed,B);""; and other fancy constructors as much as possible. If one really needs; to return a matrix, return a TMatrixTLazy object instead. The; conversion is completely transparent to the end user, e.g.; ""TMatrixT m = THaarMatrixT(5);"" and _is_ efficient. Since TMatrixT et al. are fully integrated in ROOT, they of course; can be stored in a ROOT database. For usage examples see $ROOTSYS/test/stressLinear.cxx. Acknowledgements. 1. Oleg E. Kiselyov; First implementations were based on the his code . We have diverged; quite a bit since then but the ideas/code for lazy matrix and; ""nested function"" are 100% his .; You can see him and his code in action at http://okmij.org/ftp; 2. Chris R. Birchenhall,; We adapted his idea of the implementation for the decomposition; classes instead of our messy installation of matrix inversion; His installation of matrix condition number, using an iterative; scheme using the Hage algorithm is worth looking at !; Chris has a nice writeup (matdoc.ps) on his matrix classes at; ftp://ftp.mcc.ac.uk/pub/matclass/; 3. Mark Fischler and Steven Haywood of CLHEP; They did the slave labor of spelling out all sub-determinants; for Cramer inversion of (4x4),(5x5) and (6x6) matrices; The stack storage for small matrices was also taken from them; 4. Roldan Pozo of TNT (http://math.nist.gov/tnt/); He converted the EISPACK routines for the eigen-ve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_double_.html:2133,test,test,2133,root/html528/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_double_.html,12,['test'],['test']
Testability," adjusted on tick mark.; (default is centered); chopt='L': labels are Left adjusted on tick mark.; chopt='C': labels are Centered on tick mark.; chopt='M': In the Middle of the divisions. Format of labels. Blank characters are stripped, and then the; label is correctly aligned. the dot, if last; character of the string, is also stripped,; unless the option ""."" (a dot, or period) is specified.; if SetDecimals(kTRUE) has been called (bit TAxis::kDecimals set).; all labels have the same number of decimals after the "".""; The same is true if gStyle->SetStripDecimals(kFALSE) has been called. In the following, we have some parameters, like; tick marks length and characters height (in percentage; of the length of the axis (WC)); The default values are as follows:. Primary tick marks: 3.0 %; Secondary tick marks: 1.5 %; Third order tick marks: .75 %; Characters height for labels: 4%. Labels offset: 1.0 %. optional grid. chopt='W': cross-Wire; In case of a log axis, the grid is only drawn for the primary tick marks; if the number of secondary and tertiary divisions is 0. Axis bining optimization. By default the axis bining is optimized . chopt='N': No bining optimization; chopt='I': Integer labelling. Maximum Number of Digits for the axis labels. See the static function TGaxis::SetMaxDigits. Time representation. Axis labels may be considered as times, plotted in a defined time format.; The format is set with SetTimeFormat().; wmin and wmax are considered as two time values in seconds.; The time axis will be spread around the time offset value (set with; SetTimeOffset() ). Actually it will go from TimeOffset+wmin to; TimeOffset+wmax.; see examples in tutorials timeonaxis.C and timeonaxis2.C. chopt='t': Plot times with a defined format instead of values. void AdjustBinSize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BinWidth); Axis labels optimisation. This method adjusts the bining of the axis; in order to have integer valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGaxis.html:18007,log,log,18007,root/html528/TGaxis.html,https://root.cern,https://root.cern/root/html528/TGaxis.html,5,['log'],['log']
Testability," after data storage. If TSQLFile detects; any problems, ROLLBACK command will be used to restore; previous state of data base. If transactions not supported by SQL server,; they can be disabled by SetUseTransactions(kTransactionsOff). Or user; can take responsibility to use transactions function to hime. By default only indexes for basic tables are created.; In most cases usage of indexes increase perfomance to data reading,; but it also can increase time of writing data to database.; There are several modes of index usage available in SetUseIndexes() method. There is MakeSelectQuery(TClass*) method, which; produces SELECT statement to get objects data of specified class.; Difference from simple statement like:; mysql> SELECT * FROM TH1I_ver1; that not only data for that class, but also data from parent classes; will be extracted from other tables and combined in single result table.; Such select query can be usufull for external access to objects data. Up to now MySQL 4.1 and Oracle 9i were tested.; Some extra work is required for other SQL databases.; Hopefully, this should be straigthforward. Known problems and open questions.; 1) TTree is not supported by TSQLFile. There is independent development; of TTreeSQL class, which allows to store trees directly in SQL database; 2) TClonesArray is store objects in raw format,; which can not be accessed outside ROOT.; This will be changed later.; 3) TDirectory cannot work. Hopefully, will (changes in ROOT basic I/O is required); 4) Streamer infos are not written to file, therefore schema evolution; is not yet supported. All eforts are done to enable this feature in; the near future. Example how TSQLFile can be used:. example of a session saving data to a SQL data base. const char* dbname = ""mysql://host.domain:3306/dbname"";; const char* username = ""username"";; const char* userpass = ""userpass"";. // Clean data base and create primary tables; TSQLFile* f = new TSQLFile(dbname, ""recreate"", username, userpass);; // Write with",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:5339,test,tested,5339,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['test'],['tested']
Testability," again with the same covariance one can provide a null CovMAtrix and only lmat ; Definition at line 107 of file GSLRandomFunctions.h. ◆ GaussianTail(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::GaussianTail ; (; double ; a, . double ; sigma = 1 . ). inline . Gaussian Tail distribution. ; Definition at line 89 of file GSLRandomFunctions.h. ◆ GausZig(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::GausZig ; (; double ; mean, . double ; sigma . ). inline . Definition at line 57 of file GSLRandomFunctions.h. ◆ Landau(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Landau ; (; double ; mean = 0, . double ; sigma = 1 . ). inline . Landau distribution. ; Definition at line 127 of file GSLRandomFunctions.h. ◆ Logistic(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Logistic ; (; double ; a). inline . Logistic distribution. ; Definition at line 182 of file GSLRandomFunctions.h. ◆ LogNormal(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::LogNormal ; (; double ; zeta, . double ; sigma . ). inline . Log Normal distribution. ; Definition at line 148 of file GSLRandomFunctions.h. ◆ Multinomial(). template<class EngineType > . std::vector< unsigned int > ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ). inline . Multinomial distribution. ; Definition at line 238 of file GSLRandomFunctions.h. ◆ NegativeBinomial(). template<class EngineType > . unsigned int ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::NegativeBinomial ; (; double ; n, . double ; prob . ). inline . Negative Binomial distribution First parameter is n, second is probability To",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html:11273,Log,Logistic,11273,doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,1,['Log'],['Logistic']
Testability," all arrays will be stored in raw format If limit<0, all array values will be stored in column form Default value is 21. ;  ; void SetEND (Long64_t) final;  ; void SetTablesType (const char *table_type);  Defines tables type, which is used in CREATE TABLE statements Now is only used for MySQL database, where following types are supported: ""BDB"", ""HEAP"", ""ISAM"", ""InnoDB"", ""MERGE"", ""MRG_MYISAM"", ""MYISAM"" Default for TSQLFile is ""InnoDB"". ;  ; void SetUseIndexes (Int_t use_type=kIndexesBasic);  Specify usage of indexes for data tables. ;  ; void SetUseSuffixes (Bool_t on=kTRUE);  enable/disable uasge of suffixes in columns names can be changed before first object is saved into file ;  ; void SetUseTransactions (Int_t mode=kTransactionsAuto);  Defines usage of transactions statements for writing objects data to database. ;  ; Int_t Sizeof () const final;  Return the size in bytes of the file header. ;  ; void SkipArrayLimit ();  ; void StartLogFile (const char *fname);  start logging of all SQL statements in specified file ;  ; Bool_t StartTransaction ();  Start user transaction. ;  ; void StopLogFile ();  close logging file ;  ; void Streamer (TBuffer &) override;  Streamer for TSQLFile class. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) const final;  One can not save a const TDirectory object. ;  ; Int_t Write (const char *=nullptr, Int_t=0, Int_t=0) final;  Write memory objects to this file. ;  ; Bool_t WriteBuffer (const char *, Int_t) final;  Write a buffer to the file. ;  ; void WriteFree () final;  Write FREE linked list on the file. ;  ; void WriteHeader () final;  Write file info like configurations, title, UUID and other. ;  ; void WriteStreamerInfo () final;  Store all TVirtualStreamerInfo, used in file, in sql database. ;  ;  Public Member Functions inherited from TFile;  TFile ();  File default Constructor. ;  ;  TFile (const char *fname, Option_t *option="""", const char *ftitle=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSQLFile.html:14591,log,logging,14591,doc/master/classTSQLFile.html,https://root.cern,https://root.cern/doc/master/classTSQLFile.html,1,['log'],['logging']
Testability," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:5139,test,test,5139,doc/master/classTMVA_1_1BinarySearchTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html,1,['test'],['test']
Testability," all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetBkg1] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.13613 0.97981 [ -2.0823 2.9998 ]; : var2: 0.38548 0.81654 [ -1.3349 2.5106 ]; : var3: 0.66949 0.88808 [ -1.4774 3.9796 ]; : var4: 0.33525 1.2442 [ -2.9030 3.3317 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetBkg1 BDTG : 0.993; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from training sample) ; : Name: Method: @B=0.01 @B=0.10 @B=0.30 ; : -------------------------------------------------------------------------------------------------------------------; : datasetBkg1 BDTG : 0.000 (0.985) 0.985 (0.987) 0.989 (0.991); : -------------------------------------------------------------------------------------------------------------------; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TestTree' with 200 events; : ; <HEADER> Dataset:datasetBkg1 : Created tree 'TrainTree' with 200 events; : ; <HEADER> Factory : Thank you for using TMVA!; : For citation information, please visit: http://tmva.sf.net/citeTMVA.html; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Signal""; : Add Tree TreeS of type Signal with 200 events; <HEADER> DataSetInfo : [datasetBkg2] : Added class ""Background""; : Add Tree Tre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html:18614,Test,Testing,18614,doc/master/TMVAMultipleBackgroundExample_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMultipleBackgroundExample_8C.html,2,"['Test', 'test']","['Testing', 'test']"
Testability," allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixAmpY1;  [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ;  ; Bool_t fFixAx;  logical value of ax parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixAy;  logical value of ay parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBx;  logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixBy;  logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:27188,log,logical,27188,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability," also cleared, since there is no more content in the bins. ; Definition at line 2517 of file TH1.cxx. ◆ Clone(). TObject * TH1::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a complete copy of the underlying object. ; If 'newname' is set, the copy's name will be set to that name. ; Reimplemented from TObject.; Reimplemented in TH2Poly.; Definition at line 2752 of file TH1.cxx. ◆ ComputeIntegral(). Double_t TH1::ComputeIntegral ; (; Bool_t ; onlyPositive = false). virtual . Compute integral (normalized cumulative sum of bins) w/o under/overflows The result is stored in fIntegral and used by the GetRandom functions. ; This function is automatically called by GetRandom when the fIntegral array does not exist or when the number of entries in the histogram has changed since the previous call to GetRandom. The resulting integral is normalized to 1. If the routine is called with the onlyPositive flag set an error will be produced in case of negative bin content and a NaN value returned Returns1 if success, 0 if integral is zero, NAN if onlyPositive-test fails ; Reimplemented in TH2Poly.; Definition at line 2537 of file TH1.cxx. ◆ Copy(). void TH1::Copy ; (; TObject & ; obj); const. overridevirtual . Copy this histogram structure to newth1. ; Note that this function does not copy the list of associated functions. Use TObject::Clone to make a full copy of a histogram.; Note also that the histogram it will be created in gDirectory (if AddDirectoryStatus()=true) or will not be added to any directory if AddDirectoryStatus()=false independently of the current directory stored in the original histogram ; Reimplemented from TObject.; Reimplemented in TH1C, TH1S, TH1I, TH1L, TH1F, TH1D, TH2, TH2C, TH2S, TH2I, TH2L, TH2F, TH2D, TH3, TH3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:103116,test,test,103116,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," an other TLorentzRotation,; by a pure TRotation or by a boost:;   TLorentzRotation l;      // l is; initialized as identity;   TLorentzRotation m(l);   // m = l;   TRotation r;;   TLorentzRotation lr(r);;   TLorentzRotation lb1(bx,by,bz);;   TVector3 b;;   TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:;  | 1+gamma'*bx*bx  gamma'*bx*by   gamma'*bx*bz ; gamma*bx |;  |  gamma'*by*bx  1+gamma'*by*by  gamma'*by*bz ; gamma*by |;  |  gamma'*bz*bx   gamma'*bz*by  1+gamma'*bz*bz; gamma*bz |;  |    gamma*bx      ; gamma*by       gamma*bz    ; gamma   |; with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta); and gamma'=(gamma-1)/beta*beta. Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions; XX(), XY() .. TT(),; through the operator (int,int):;   Double_t xx;;   TLorentzRotation l;;   xx = l.XX();    // gets the xx component;   xx = l(0,0);    // gets the xx component;   if (l==m) {...}  // test for equality;   if (l !=m) {...} // test for inequality;   if (l.IsIdentity()) {...} // test for identity;  . Transformations of a LorentzRotation. Compound transformations; There are four possibilities to find the product of two TLorentzRotation; transformations:;   TLorentzRotation a,b,c;;   c = b*a;                       // product;   c = a.MatrixMultiplication(b);  // a is unchanged;   a *= b;                        // Attention: a=a*b;   c = a.Transform(b)             // a=b*a then c=a;  . Lorentz boosts;   Double_t bx, by, bz;;   TVector3 v(bx,by,bz);;   TLorentzRotation l;;   l.Boost(v);;   l.Boost(bx,by,bz);;  . Rotations;   TVector3 axis;;   l.RotateX(TMath::Pi());   //  rotation around; x-axis;   l.Rotate(.5,axis);               //  rotation around specified vector. Inverse transformation; The matrix for the inverse transformation of a TLorentzRotation is as follows:;            ; | xx  yx  zx -tx |;            ; |               ; |;            ; | xy  yy  zy -ty |;            ; |    ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLorentzRotation.html:2216,test,test,2216,root/html528/TLorentzRotation.html,https://root.cern,https://root.cern/root/html528/TLorentzRotation.html,6,['test'],['test']
Testability," an un-normalized RooGaussian over x. ; To calculate the integral over mean, just interchange the respective values of x and mean. Parameters. xMinMinimum value of variable to integrate wrt. ; xMaxMaximum value of of variable to integrate wrt. ; meanMean. ; sigmaSigma. . ReturnsThe integral of an un-normalized RooGaussian over the value in x. ; Definition at line 418 of file MathFuncs.h. ◆ getUniformBinning(). unsigned int RooFit::Detail::MathFuncs::getUniformBinning ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins . ). inline . Definition at line 172 of file MathFuncs.h. ◆ interpolate1d(). double RooFit::Detail::MathFuncs::interpolate1d ; (; double ; low, . double ; high, . double ; val, . unsigned int ; numBins, . double const * ; vals . ). inline . Definition at line 178 of file MathFuncs.h. ◆ landau(). double RooFit::Detail::MathFuncs::landau ; (; double ; x, . double ; mu, . double ; sigma . ). inline . Definition at line 331 of file MathFuncs.h. ◆ logNormal(). double RooFit::Detail::MathFuncs::logNormal ; (; double ; x, . double ; k, . double ; m0 . ). inline . Definition at line 338 of file MathFuncs.h. ◆ logNormalIntegral(). double RooFit::Detail::MathFuncs::logNormalIntegral ; (; double ; xMin, . double ; xMax, . double ; m0, . double ; k . ). inline . Definition at line 627 of file MathFuncs.h. ◆ logNormalIntegralStandard(). double RooFit::Detail::MathFuncs::logNormalIntegralStandard ; (; double ; xMin, . double ; xMax, . double ; mu, . double ; sigma . ). inline . Definition at line 638 of file MathFuncs.h. ◆ logNormalStandard(). double RooFit::Detail::MathFuncs::logNormalStandard ; (; double ; x, . double ; sigma, . double ; mu . ). inline . Definition at line 343 of file MathFuncs.h. ◆ nll(). double RooFit::Detail::MathFuncs::nll ; (; double ; pdf, . double ; weight, . int ; binnedL, . int ; doBinOffset . ). inline . Definition at line 353 of file MathFuncs.h. ◆ poisson(). double RooFit::Detail::MathFuncs::poisson ; (; double ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html:8698,log,logNormal,8698,doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,https://root.cern,https://root.cern/doc/master/namespaceRooFit_1_1Detail_1_1MathFuncs.html,1,['log'],['logNormal']
Testability," and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_th1.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.12/07 - Reference Guide Generated on Sat Sep 29 2018 23:44:47 (GVA Time) using Doxygen 1.8.13. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:163103,benchmark,benchmarks,163103,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['benchmark'],['benchmarks']
Testability," and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 1786 Log() << "" -> adjust \""TemperatureScale\"""" << brk << Endl;; 1787 Log() << "" -> adjust \""AdaptiveSpeed\"""" << Endl;; 1788 Log() << """" << Endl;; 1789 Log() << ""\""Decreasing Adaptive\"" approach:"" << Endl;; 1790 Log() << """" << Endl;; 1791 Log() << ""The algorithm calculates the initial temperature (based on the effect-"" << Endl;; 1792 Log() << ""iveness of large steps) and the multiplier that ensures to reach the"" << Endl;; 1793 Log() << ""minimal temperature with the requested number of iteration steps."" << Endl;; 1794 Log() << ""The performance can be improved by adjusting the minimal temperature"" << Endl;; 1795 Log() << "" (\""MinTemperature\"") and by increasing number of steps (\""MaxCalls\""):"" << brk << Endl;; 1796 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1797 Log() << "" -> adjust \""MinTemperature\"""" << Endl;; 1798 Log() << "" "" << Endl;; 1799 Log() << ""Other kernels:"" << Endl;; 1800 Log() << """" << Endl;; 1801 Log() << ""Alternative ways of counting the temperature change are implemented. "" << Endl;; 1802 Log() << ""Each of them starts with the maximum temperature (\""MaxTemperature\"")"" << Endl;; 1803 Log() << ""and decreases while changing the temperature according to a given"" << Endl;; 1804 Log() << ""prescription:"" << brk << Endl;; 1805 Log() << ""CurrentTemperature ="" << brk << Endl;; 1806 Log() << "" - Sqrt: InitialTemperature / Sqrt(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1807 Log() << "" - Log: InitialTemperature / Log(StepNumber+2) * TemperatureScale"" << brk << Endl;; 1808 Log() << "" - Homo: InitialTemperature / (StepNumber+2) * TemperatureScale"" << brk << Endl;; 1809 Log() << "" - Sin: (Sin(StepNumber / TemperatureScale) + 1) / (StepNumber + 1)*InitialTemperature + Eps"" << brk << Endl;; 1810 Log() << "" - Geo:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:71975,Log,Log,71975,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,8,['Log'],['Log']
Testability," and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); Send a file to master or slave servers. Returns number of slaves; the file was sent to, maybe 0 in case master and slaves have the same; file system image, -1 in case of error.; If defined, send to worker 'wrk' only.; If defined, the full path of the remote path will be rfile.; If rfile = ""cache"" the file is copied to the remote cache instead of the sandbox; (to copy to the cache on a different name use rfile = ""cache:newname"").; The mask 'opt' is an or of ESendFileOpt:. kAscii (0x0) if set true ascii file transfer is used; kBinary (0x1) if set true binary file transfer is used; kForce (0x2) if not set an attempt is done to find out; whether the file really needs to be downloaded; (a valid copy may already exist in the cache; from a previous run); the bit is set by; UploadPackage, since the check is done elsewhere.; kForward (0x4) if set, ask server to forward the file to slave; or submaster (meaningless for slave servers).; kCpBin (0x8) Retrieve from the cache the binaries associated; with the file; kCp (0x10) Retrieve the files from the cache. Int_t Echo(const TObject* obj); Sends an object to master and workers and expect them to send back a; message with the output of its TObject::Print(). Returns -1 on error, the; number of workers that received the objects on success. Int_t Echo(const char* str); Sends a string to master and wo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:67619,sandbox,sandbox,67619,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,2,['sandbox'],['sandbox']
Testability," and compiler version, e.g. '53403_linuxx8664gcc_gcc46' . ; Definition at line 6702 of file TProofServ.cxx. ◆ RestartComputeTime(). void TProofServ::RestartComputeTime ; (; ). Reset the compute time. ; Definition at line 1126 of file TProofServ.cxx. ◆ Run(). void TProofServ::Run ; (; Bool_t ; retrn = kFALSE). overridevirtual . Main server eventloop. ; Reimplemented from TApplication.; Definition at line 2650 of file TProofServ.cxx. ◆ SendAsynMessage(). void TProofServ::SendAsynMessage ; (; const char * ; msg, . Bool_t ; lf = kTRUE . ). Send an asychronous message to the master / client . ; Masters will forward up the message to the client. The client prints 'msg' of stderr and adds a '\n'/'\r' depending on 'lf' being kTRUE (default) or kFALSE. Returns the return value from TSocket::Send(TMessage &) . ; Definition at line 5989 of file TProofServ.cxx. ◆ SendLogFile(). void TProofServ::SendLogFile ; (; Int_t ; status = 0, . Int_t ; start = -1, . Int_t ; end = -1 . ). virtual . Send log file to master. ; If start > -1 send only bytes in the range from start to end, if end <= start send everything from start. ; Definition at line 2665 of file TProofServ.cxx. ◆ SendParallel(). void TProofServ::SendParallel ; (; Bool_t ; async = kFALSE). Send number of parallel nodes to master or client. ; Definition at line 2780 of file TProofServ.cxx. ◆ SendResults(). Int_t TProofServ::SendResults ; (; TSocket * ; sock, . TList * ; outlist = 0, . TQueryResult * ; pq = 0 . ). private . Sends all objects from the given list to the specified socket. ; Definition at line 4244 of file TProofServ.cxx. ◆ SendStatistics(). void TProofServ::SendStatistics ; (; ). Send statistics of slave server to master or client. ; Definition at line 2760 of file TProofServ.cxx. ◆ SetErrorHandlerFile(). FILE * TProofServ::SetErrorHandlerFile ; (; FILE * ; ferr). static . Set the file stream where to log (default stderr). ; If ferr == 0 the default is restored. Returns current setting. ; Definition at line 5744 o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:53272,log,log,53272,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability," and phi Phi is restricted to be in the range [-PI,PI); See alsoOverview of the physics vector library ; Definition at line 48 of file CylindricalEta3D.h. Public Types; typedef T Scalar;  . Public Member Functions;  CylindricalEta3D ();  Default constructor with rho=eta=phi=0. ;  ; template<class CoordSystem > ;  CylindricalEta3D (const CoordSystem &v);  Construct from any Vector or coordinate system implementing Rho(), Eta() and Phi() ;  ;  CylindricalEta3D (const CylindricalEta3D &v);  copy constructor ;  ;  CylindricalEta3D (Scalar rho, Scalar eta, Scalar phi);  Construct from rho eta and phi values. ;  ; T Eta () const;  ; void GetCoordinates (Scalar &rho, Scalar &eta, Scalar &phi) const;  get internal data into 3 Scalar numbers ;  ; void GetCoordinates (Scalar dest[]) const;  get internal data into an array of 3 Scalar numbers ;  ; T Mag2 () const;  ; void Negate ();  negate the vector ;  ; bool operator!= (const CylindricalEta3D &rhs) const;  ; template<class CoordSystem > ; CylindricalEta3D & operator= (const CoordSystem &c);  generic assignment operator from any coordinate system ;  ; CylindricalEta3D & operator= (const CylindricalEta3D &v);  assignment operator ;  ; bool operator== (const CylindricalEta3D &rhs) const;  Exact component-by-component equality Note: Peculiar representations of the zero vector such as (0,1,0) will not test as equal to one another. ;  ; T Perp2 () const;  ; T Phi () const;  ; T R () const;  ; T Rho () const;  ; void Scale (T a);  scale by a scalar quantity a – for cylindrical eta coords, as long as a >= 0, only rho changes! ;  ; void SetCoordinates (const Scalar src[]);  Set internal data based on an array of 3 Scalar numbers. ;  ; void SetCoordinates (Scalar rho, Scalar eta, Scalar phi);  Set internal data based on 3 Scalar numbers. ;  ; void SetEta (T eta);  set the eta coordinate value keeping rho and phi constant ;  ; void SetPhi (T phi);  set the phi coordinate value keeping rho and eta constant ;  ; void SetRho (T rho);  se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html:2090,test,test,2090,doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,1,['test'],['test']
Testability," and ranges that are meant to be tuned. ;  ; void PrintHelpMessage () const;  prints out method-specific help method ;  ; void ProcessSetup ();  process all options the ""CheckForUnusedOptions"" is done in an independent call, since it may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; void ReadStateFromFile ();  Function to write options and weights to file. ;  ; void ReadStateFromStream (std::istream &tf);  read the header from the weight files of the different MVA methods ;  ; void ReadStateFromStream (TFile &rf);  write reference MVA distributions (and other information) to a ROOT type weight file ;  ; void ReadStateFromXMLString (const char *xmlstr);  for reading from memory ;  ; void RerouteTransformationHandler (TransformationHandler *fTargetTransformation);  ; virtual void SetAnalysisType (Types::EAnalysisType type);  ; void SetBaseDir (TDirectory *methodDir);  ; void SetFile (TFile *file);  ; void SetMethodBaseDir (TDirectory *methodDir);  ; void SetMethodDir (TDirectory *methodDir);  ; void SetModelPersistence (Bool_t status);  ; void SetSignalReferenceCut (Double_t cut);  ; void SetSignalReferenceCutOrientation (Double_t cutOrientation);  ; void SetSilentFile (Bool_t status);  ; void SetTestTime (Double_t testTime);  ; void SetTestvarName (const TString &v="""");  ; void SetTrainTime (Double_t trainTime);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  set the tuning parameters according to the argument This is just a dummy . ;  ; void SetupMethod ();  setup of methods ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void TestClassification ();  initialization ;  ; virtual void TestMulticlass ();  test multiclass classification ;  ; virtual void TestRegression (Double_t &bias, Double_t &biasT, Double_t &dev, Double_t &devT, Double_t &rms, Double_t &rmsT, Double_t &mInf, Double_t &mInfT, Double_t &corr, Types::ETreeType typ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html:10190,test,testTime,10190,doc/master/classTMVA_1_1MethodCrossValidation.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodCrossValidation.html,2,['test'],['testTime']
Testability," and runtime overhead; [#14509] - ROOT segfaults on riscv64; [#14508] - Using LZMA compression with RNTupleWriter leads to memory corruption; [#14499] - It is not possible to set the Title of the palette for a 3D axis; [#14462] - Parser for I/O customization rule is too strict.; [#14458] - Crash when doing Weighted Likelihood fit; [#14453] - Implement IsInside for TEllipse; [#14401] - The red frame around the selected pad of the webgui is not configurable; [#14385] - Strange behavior with TF1 and SetParameters; [#14381] - Legend entry for exclusion graph; [#14376] - build failure with mysql 8.3; [#14372] - File with mtime equal to 0 are ignored by Cling.; [#14333] - “Empty plot” for df014_CSVDataSource.C; [#14331] - Unexpected behaviour when using the Project3D function to make a TH2 from a TH3; [#14329] - [RF] RDataFrameToRooFit - Clarification on returned object; [#14324] - Compatibility Issue with thisroot.sh and zsh; [#14320] - [RF] Wrong analytic integrals when using Gaussians with sigma depending on the observable; [#14303] - Test failure with nbconvert-7.14; [#14302] - The command “root –notebook” is not allowed on Windows 11; [#14277] - Cling triggers a huge number of openat calls when loading libraries; [#14263] - [tmva] When using DNN_USE_CBLAS, CMakeLists should link publicly to gsl instead of privately; [#14256] - TAxis::GetTicks and TAxis::SetTicks are inconsistent. Significantly so.; [#14244] - String comparison operators defined in TString.h should be defined as constexpr; [#14229] - [6.30] root-config –git-revision broken; [#14225] - [RF] Segmentation fault in ROOT 6.30 workspace creation; [#14223] - Extremely long startup time when loading dictionaries with pyroot; [#14219] - [cling] Use deduction guides for llvm::ArrayRef; [#14211] - Implement value printing for std::source_location; [#14205] - [cling] Replace llvm::Optional and llvm::None with std::optional; [#14199] - Memory hoarding triggered by the TPluginManager; [#14188] - cmake find_package R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:29372,Test,Test,29372,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Test'],['Test']
Testability," and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TApplicationServer.html:16881,log,logon,16881,root/html604/TApplicationServer.html,https://root.cern,https://root.cern/root/html604/TApplicationServer.html,4,"['Log', 'log']","['Logon', 'logfile', 'logon']"
Testability," and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationServer.html:16881,log,logon,16881,root/html602/TApplicationServer.html,https://root.cern,https://root.cern/root/html602/TApplicationServer.html,4,"['Log', 'log']","['Logon', 'logfile', 'logon']"
Testability," and/or slaves.; If plusMaster is kTRUE then exeucte on slaves and master too.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char *cmd, ESlaves list, Bool_t plusMaster); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster. Returns -1 in case of error, >=0 in case of; succes. Int_t Exec(const char* cmd, const char* ord, Bool_t logtomacro = kFALSE); Send command to be executed on node of ordinal 'ord' (use ""0"" for master).; Command can be any legal command line command. Commands like; "".x file.C"" or "".L file.C"" will cause the file file.C to be send; to the PROOF cluster.; If logtomacro is TRUE the text result of the action is saved in the fMacroLog; TMacro, accessible via TMacro::GetMacroLog();; Returns -1 in case of error, >=0 in case of succes. Int_t SendCommand(const char* cmd, TProof::ESlaves list = kActive); Send command to be executed on the PROOF master and/or slaves.; Command can be any legal command line command, however commands; like "".x file.C"" or "".L file.C"" will not cause the file.C to be; transfered to the PROOF cluster. In that case use TProof::Exec().; Returns the status send by the remote server as part of the; kPROOF_LOGDONE message. Typically this is the return code of the; command on the remote side. Returns -1 in case of error. TString Getenv(const char* env, const char* ord = ""0""); Get value of environment variable 'env' on node 'ord'. Int_t GetRC(const char* RCenv, Int_t& env, const char* ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:62228,log,logtomacro,62228,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['log'],['logtomacro']
Testability," any generic model function If data set is binned a least square fit is performed If data set is unbinned a maximum likelihood fit (not extended) is done Pre-requisite on the function: it must implement the 1D or multidimensional parametric function interface. ; Note that both the input data and the function object are copied by the Fitter. ; Definition at line 144 of file Fitter.h. ◆ Fit() [3/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< BinData > & ; data, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit a binned data set using a least square fit. ; Pass the input data using a shared_ptr for NOT copying the input data. ; Definition at line 165 of file Fitter.h. ◆ Fit() [4/5]. bool ROOT::Fit::Fitter::Fit ; (; const std::shared_ptr< UnBinData > & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function uses a shared_ptr to avoid copying the input data. ; Definition at line 195 of file Fitter.h. ◆ Fit() [5/5]. bool ROOT::Fit::Fitter::Fit ; (; const UnBinData & ; data, . bool ; extended = false, . const ROOT::EExecutionPolicy & ; executionPolicy = ROOT::EExecutionPolicy::kSequential . ). inline . Fit an un-binned data set using the negative log-likelihood method. ; This function copies the input data. ; Definition at line 188 of file Fitter.h. ◆ FitFCN() [1/6]. bool ROOT::Fit::Fitter::FitFCN ; (; ). Perform a fit with the previously set FCN function. ; Require SetFCN before ; Definition at line 269 of file Fitter.cxx. ◆ FitFCN() [2/6]. bool ROOT::Fit::Fitter::FitFCN ; (; const ROOT::Math::FitMethodFunction & ; fcn, . const double * ; params = nullptr . ). Fit using a FitMethodFunction interface. ; Same as method above, but now extra information can be taken from the function class ; Definition at line 226 of file Fitter.cxx. ◆ FitFCN()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:23272,log,log-likelihood,23272,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['log'],['log-likelihood']
Testability," approximate number; of lines to be retrieved is given by 'lines', with the convention that; 0 means 'all', a positive number means the first 'lines' and a negative; number means the last '-lines'. Default is -1000.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(Int_t from = 0, Int_t to = -1); Display the current content starting from line 'from' to line 'to'; inclusive.; A negative value for 'from' indicates lines counted from the end; (tail action); 'to' is ignored in such a case.; TProofLog::Prt is called to display: the location (screen, file, box); is defined there.; Return 0 on success, -1 in case of any error. void Print(Option_t* opt = 0) const; Print a line with the relevant info. void Prt(const char* what); Special printing procedure. Int_t Grep(const char* txt, TString& res, Int_t from = 0); Search lines containing 'txt', starting from line 'from'. Return; their blanck-separated list into 'res'.; Return the number of lines found, or -1 in case of error. TProofLogElem(const char* ord, const char* url, TProofLog* logger); the name of TProofLogElem is the ordinal number of the corresp. worker; the title is the url. TMacro * GetMacro() const; { return fMacro; }. const char * GetRole(); { return fRole.Data(); }. Bool_t IsMaster() const; { return (fRole == ""master"") ? kTRUE : kFALSE; }. Bool_t IsSubMaster() const; { return (fRole == ""submaster"") ? kTRUE : kFALSE; }. Bool_t IsWorker() const; { return (fRole == ""worker"") ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fccbadad9cd6f81ccb7726dddea80e0d $ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLogElem.html:8424,log,logger,8424,root/html602/TProofLogElem.html,https://root.cern,https://root.cern/root/html602/TProofLogElem.html,1,['log'],['logger']
Testability," approximate number; of lines to be retrieved is given by 'lines', with the convention that; 0 means 'all', a positive number means the first 'lines' and a negative; number means the last '-lines'. Default is -1000.; If opt == TProofLog::kGrep only the lines containing 'pattern' are; retrieved (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; Return 0 on success, -1 in case of any error. void Display(Int_t from = 0, Int_t to = -1); Display the current content starting from line 'from' to line 'to'; inclusive.; A negative value for 'from' indicates lines counted from the end; (tail action); 'to' is ignored in such a case.; TProofLog::Prt is called to display: the location (screen, file, box); is defined there.; Return 0 on success, -1 in case of any error. void Print(Option_t* opt = 0) const; Print a line with the relevant info. void Prt(const char* what); Special printing procedure. Int_t Grep(const char* txt, TString& res, Int_t from = 0); Search lines containing 'txt', starting from line 'from'. Return; their blanck-separated list into 'res'.; Return the number of lines found, or -1 in case of error. TProofLogElem(const char* ord, const char* url, TProofLog* logger); the name of TProofLogElem is the ordinal number of the corresp. worker; the title is the url. TMacro * GetMacro() const; { return fMacro; }. const char * GetRole(); { return fRole.Data(); }. Bool_t IsMaster() const; { return (fRole == ""master"") ? kTRUE : kFALSE; }. Bool_t IsSubMaster() const; { return (fRole == ""submaster"") ? kTRUE : kFALSE; }. Bool_t IsWorker() const; { return (fRole == ""worker"") ? kTRUE : kFALSE; }. » Author: G. Ganis 31/08/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id: 5d579564fccbadad9cd6f81ccb7726dddea80e0d $ » Last generated: 2015-09-08 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofLogElem.html:8424,log,logger,8424,root/html604/TProofLogElem.html,https://root.cern,https://root.cern/root/html604/TProofLogElem.html,1,['log'],['logger']
Testability," are a clone.; 977 delete fPlayer;; 978 fPlayer = nullptr;; 979 if (fExternalFriends) {; 980 using namespace ROOT::Detail;; 981 for(auto fetree : TRangeStaticCast<TFriendElement>(*fExternalFriends)); 982 fetree->Reset();; 983 fExternalFriends->Clear(""nodelete"");; 984 SafeDelete(fExternalFriends);; 985 }; 986 if (fFriends) {; 987 fFriends->Delete();; 988 delete fFriends;; 989 fFriends = nullptr;; 990 }; 991 if (fAliases) {; 992 fAliases->Delete();; 993 delete fAliases;; 994 fAliases = nullptr;; 995 }; 996 if (fUserInfo) {; 997 fUserInfo->Delete();; 998 delete fUserInfo;; 999 fUserInfo = nullptr;; 1000 }; 1001 if (fClones) {; 1002 // Clone trees should no longer be removed from fClones when they are deleted.; 1003 {; 1004 R__LOCKGUARD(gROOTMutex);; 1005 gROOT->GetListOfCleanups()->Remove(fClones);; 1006 }; 1007 // Note: fClones does not own its content.; 1008 delete fClones;; 1009 fClones = nullptr;; 1010 }; 1011 if (fEntryList) {; 1012 if (fEntryList->TestBit(kCanDelete) && fEntryList->GetDirectory()==nullptr) {; 1013 // Delete the entry list if it is marked to be deleted and it is not also; 1014 // owned by a directory. (Otherwise we would need to make sure that a; 1015 // TDirectoryFile that has a TTree in it does a 'slow' TList::Delete.; 1016 delete fEntryList;; 1017 fEntryList=nullptr;; 1018 }; 1019 }; 1020 delete fTreeIndex;; 1021 fTreeIndex = nullptr;; 1022 delete fBranchRef;; 1023 fBranchRef = nullptr;; 1024 delete [] fClusterRangeEnd;; 1025 fClusterRangeEnd = nullptr;; 1026 delete [] fClusterSize;; 1027 fClusterSize = nullptr;; 1028 ; 1029 if (fTransientBuffer) {; 1030 delete fTransientBuffer;; 1031 fTransientBuffer = nullptr;; 1032 }; 1033}; 1034 ; 1035////////////////////////////////////////////////////////////////////////////////; 1036/// Returns the transient buffer currently used by this TTree for reading/writing baskets.; 1037 ; 1038TBuffer* TTree::GetTransientBuffer(Int_t size); 1039{; 1040 if (fTransientBuffer) {; 1041 if (fTransientBuffer->BufferSize",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:36402,Test,TestBit,36402,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Test'],['TestBit']
Testability," area of the polygon enclosed by the points of the TGraph.; 1780/// The polygon segments, which are defined by the points of the TGraph, do not need to form a closed polygon,; 1781/// since the last polygon segment, which closes the polygon, is taken as the line connecting the last TGraph point; 1782/// with the first one. It is clear that the order of the point is essential in defining the polygon.; 1783/// Also note that the segments should not intersect.; 1784///; 1785/// NB:; 1786/// - if last=-1 (default) last is set to the last point.; 1787/// - if (first <0) the first point (0) is taken.; 1788///; 1789/// ### Method:; 1790///; 1791/// There are many ways to calculate the surface of a polygon. It all depends on what kind of data; 1792/// you have to deal with. The most evident solution would be to divide the polygon in triangles and; 1793/// calculate the surface of them. But this can quickly become complicated as you will have to test; 1794/// every segments of every triangles and check if they are intersecting with a current polygon's; 1795/// segment or if it goes outside the polygon. Many calculations that would lead to many problems...; 1796///; 1797/// ### The solution (implemented by R.Brun); 1798/// Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; 1799/// segments don't intersect.; 1800/// It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; 1801/// vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; 1802/// by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; 1803///; 1804/// ### Sources; 1805/// - http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; 1806/// - http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon; 1807 ; 1808Double_t TGraph::Integral(Int_t first, Int_t last) const; 1809{; 1810 if (first < 0) first = 0;; 1811 i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:64418,test,test,64418,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,1,['test'],['test']
Testability," arithmetic does not always work perfectly, and the Abs doesn't hurt ;  ; double fEpsilon = -1;  acceptable error for Keys interval determination ;  ; RooArgSet fGlobalObs;  global observables ;  ; enum MCMCInterval::IntervalType fIntervalType = MCMCInterval::kShortest;  ; double fLeftSideTF = -1;  left side tail-fraction for interval ;  ; RooArgSet fNuisParams;  nuisance parameters for interval (not really used) ;  ; Int_t fNumBins = 0;  set the number of bins to create for each axis when constructing the interval ;  ; Int_t fNumBurnInSteps = 0;  number of iterations to discard as burn-in, starting from the first ;  ; Int_t fNumIters = 0;  number of iterations to run metropolis algorithm ;  ; RooAbsPdf * fPdf;  pointer to common PDF (owned by the workspace) ;  ; RooArgSet fPOI;  parameters of interest for interval ;  ; RooAbsPdf * fPriorPdf;  pointer to prior PDF (owned by the workspace) ;  ; ProposalFunction * fPropFunc;  Proposal function for MCMC integration. ;  ; double fSize = -1;  size of the test (eg. specified rate of Type I error) ;  ; bool fUseKeys = false;  whether to use kernel estimation to determine interval ;  ; bool fUseSparseHist = false;  whether to use sparse histogram (if using hist at all) ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:16729,test,test,16729,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['test'],['test']
Testability," as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  bent.py Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:113580,test,testing,113580,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['test'],['testing']
Testability," as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  annotation3d.C This example show how to put some annotation on a 3D plot using 3D polylines ;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:115327,test,testing,115327,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['testing']
Testability," as a Postscript file ;  latex2.C This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file ;  latex3.C Example illustrating a TPaveText with Latex inside ;  latex4.C Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files ;  latex5.C This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files ;  mandelbrot.C Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set ;  manyaxis.C Show several TGaxis formats ;  markerwarning.C This script illustrates the danger of using asymmetric symbols ;  mass_spectrum.C This macro makes use of some basic graphics primitives such as line, arrow and text ;  palettes.C This macro draws all the high definition palettes available in ROOT ;  pavetext.C Draw a pave text ;  piechart.C Pie chart example ;  polytest1.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  polytest2.C This macro is testing the ""compacting"" algorithm in TPadPainter ;  pstable.C Display all possible types of ROOT/Postscript characters ;  psview.C An example how to display PS, EPS, PDF files in canvas ;  quarks.C Example illustrating divided pads and Latex ;  tmathtext.CThis macro draws various formula in a canvas ;  tmathtext2.C This macro draw all possible symbols provided by TMathtext ;  tornado.C Show 3-d polymarker ;  transparency.C This macro demonstrates the use of color transparency ;  triangles.C Generate small triangles randomly in the canvas ;  ► graphs;  approx.C Macro to test interpolation function Approx ;  bent.C Bent error bars ;  exclusiongraph.C Draw three graphs with an exclusion zone ;  exclusiongraph2.C Draw several graphs with an exclusion zones ;  gerrors.C Draw a graph with error bars ;  gerrors2.C Draw two graphs with error bars ;  graph.C Draw a simple graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  gr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:115002,test,testing,115002,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['testing']
Testability," as they are or for normalised variables (in the range of 0-1) if ""norm"" is set to kTRUE ; Definition at line 2942 of file MethodBase.cxx. ◆ Streamer(). virtual void TMVA::MethodBase::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IMethod.; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::MethodBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 731 of file MethodBase.h. ◆ TestClassification(). void TMVA::MethodBase::TestClassification ; (; ). virtual . initialization ; Reimplemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodBoost, and TMVA::MethodCuts.; Definition at line 1127 of file MethodBase.cxx. ◆ TestMulticlass(). void TMVA::MethodBase::TestMulticlass ; (; ). virtual . test multiclass classification ; Definition at line 1100 of file MethodBase.cxx. ◆ TestRegression(). void TMVA::MethodBase::TestRegression ; (; Double_t & ; bias, . Double_t & ; biasT, . Double_t & ; dev, . Double_t & ; devT, . Double_t & ; rms, . Double_t & ; rmsT, . Double_t & ; mInf, . Double_t & ; mInfT, . Double_t & ; corr, . Types::ETreeType ; type . ). virtual . calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample . bias = average deviation; dev = average absolute deviation; rms = rms of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBase.html:75806,Test,TestClassification,75806,doc/master/classTMVA_1_1MethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBase.html,1,['Test'],['TestClassification']
Testability," asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMethodCall&operator=(const TMethodCall& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetParam(); TMethodCall::EReturnTypeReturnType(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetParam(Long_t l); voidSetParam(Double_t d); voidSetParam(Long64_t ll); voidSetParam(ULong64_t ull); voidSetParamPtrs(void* paramArr, Int_t nparam = -1); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMethodCall.html:5949,Test,TestBit,5949,root/html534/TMethodCall.html,https://root.cern,https://root.cern/root/html534/TMethodCall.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tRooAbsIntegrator::printEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tsetLimits(Double_t* xmin, Double_t* xmax); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsIntegrator::setPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tsetUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAdaptiveGaussKronrodIntegrator1D.html:6579,Test,TestBit,6579,root/html534/RooAdaptiveGaussKronrodIntegrator1D.html,https://root.cern,https://root.cern/root/html534/RooAdaptiveGaussKronrodIntegrator1D.html,14,['Test'],"['TestBit', 'TestBits']"
Testability," asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* chopt = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* chopt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMaximum(Double_t maximum = -1111); virtual voidSetMinimum(Double_t minimum = -1111); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMultiGraph.html:11367,Test,TestBit,11367,root/html530/TMultiGraph.html,https://root.cern,https://root.cern/root/html530/TMultiGraph.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::HybridPlot&operator=(const RooStats::HybridPlot&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridPlot.html:5684,Test,TestBit,5684,root/html602/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridPlot.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods); public:. virtual~GenSpec(); static TClass*Class(); RooAbsPdf::GenSpecGenSpec(); virtual TClass*IsA() const; RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName, Bool_t init = kFALSE). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Bool_t_init; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf__GenSpec.html:4307,assert,assert,4307,root/html602/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf__GenSpec.html,2,['assert'],['assert']
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods); public:. virtual~GenSpec(); static TClass*Class(); RooAbsPdf::GenSpecGenSpec(); virtual TClass*IsA() const; RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t exten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsPdf__GenSpec.html:4307,assert,assert,4307,root/html530/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html530/RooAbsPdf__GenSpec.html,1,['assert'],['assert']
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods); public:. virtual~GenSpec(); static TClass*Class(); RooAbsPdf::GenSpecGenSpec(); virtual TClass*IsA() const; RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName, Bool_t init = kFALSE). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Bool_t_init; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsPdf__GenSpec.html:4307,assert,assert,4307,root/html532/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html532/RooAbsPdf__GenSpec.html,1,['assert'],['assert']
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods); public:. virtual~GenSpec(); static TClass*Class(); RooAbsPdf::GenSpecGenSpec(); virtual TClass*IsA() const; RooAbsPdf::GenSpec&operator=(const RooAbsPdf::GenSpec&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. RooAbsPdf::GenSpecGenSpec(const RooAbsPdf::GenSpec& other); RooAbsPdf::GenSpecGenSpec(RooAbsGenContext* context, const RooArgSet& whatVars, RooDataSet* protoData, Int_t nGen, Bool_t extended, Bool_t randProto, Bool_t resampleProto, TString dsetName, Bool_t init = kFALSE). Data Members; private:. TString_dsetName; Bool_t_extended; RooAbsGenContext*_genContext; Bool_t_init; Int_t_nGen; RooDataSet*_protoData; Bool_t_randProto; Bool_t_resampleProto; RooArgSet_whatVars. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~GenSpec(). GenSpec(RooAbsGenContext* context, const RooArgSet& wha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsPdf__GenSpec.html:4307,assert,assert,4307,root/html534/RooAbsPdf__GenSpec.html,https://root.cern,https://root.cern/root/html534/RooAbsPdf__GenSpec.html,1,['assert'],['assert']
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:4299,assert,assert,4299,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,6,['assert'],['assert']
Testability," assert. Integrated category dependents should always be; summed over all of their states. [Direct generation of observables]. Any PDF dependent can be generated with the accept/reject method,; but for certain PDFs more efficient methods may be implemented. To; implement direct generation of one or more observables, two; functions need to be implemented, similar to those for analytical; integrals:. Int_t getGenerator(const RooArgSet& generateVars, RooArgSet& directVars) and; void generateEvent(Int_t code). The first function advertises observables that can be generated,; similar to the way analytical integrals are advertised. The second; function implements the generator for the advertised observables. The generated dependent values should be store in the proxy; objects. For this the assignment operator can be used (i.e. xProxy; = 3.0 ). Never call assign to any proxy not known to be a dependent; via the generation code. Doing so may be ill-defined, e.g. in case; the proxy holds a function, and will trigger an assert. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~RooAbsPdf(); voidTObject::AbstractMethod(const char* method) const; Bool_tRooAbsArg::addOwnedComponents(const RooArgSet& comps); voidRooAbsArg::addParameters(RooArgSet& params, const RooArgSet* nset = 0, Bool_t stripDisconnected = kTRUE) const; voidRooAbsArg::addServer(RooAbsArg& server, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); virtual Double_tRooAbsReal::analyticalIntegral(Int_t code, const char* rangeName = 0) const; virtual Double_tanalyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; virtual voidTObject::AppendPad(Option_t* option = """"); TF1*RooAbsReal::asTF(const RooArgList& obs, const RooArgList& pars = RooArgLis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:4299,assert,assert,4299,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['assert'],['assert']
Testability," at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Run the tests. Running the ROOT battery of tests; Running all ROOT tests on at least a platform before sending a PR or before pushing anything to the ROOT repository is mandatory.; The ROOT continuous integration infrastructure allows to automatically check the PR also on a battery of platform, for example including macos and linux boxes.; In order to be able to run all tests, the simple steps below need to be followed; Prepare your development area and build ROOT; mkdir RootDevelopment; cd RootDevelopment; git clone https://github.com/root-project/root; git clone https://github.com/root-project/roottest; mkdir build; cd build; echo Note the cmake options; cmake -DCMAKE_BUILD_TYPE=Debug -Dtesting=ON -Droottest=ON ../root. Inspect and run the tests; From within the build directory. List all tests: ctest -N; List all test matching a regex: ctest -N -R myregex; Run all tests on N cores: ctest -j N. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User'",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/run-tests.html:1870,test,tests,1870,d/run-tests.html,https://root.cern,https://root.cern/d/run-tests.html,1,['test'],['tests']
Testability," at line 140 of file MethodBDT.h. ◆ SetNTrees(). void TMVA::MethodBDT::SetNTrees ; (; Int_t ; d). inline . Definition at line 138 of file MethodBDT.h. ◆ SetShrinkage(). void TMVA::MethodBDT::SetShrinkage ; (; Double_t ; s). inline . Definition at line 141 of file MethodBDT.h. ◆ SetTuneParameters(). void TMVA::MethodBDT::SetTuneParameters ; (; std::map< TString, Double_t > ; tuneParameters). virtual . Set the tuning parameters according to the argument. ; Reimplemented from TMVA::MethodBase.; Definition at line 1121 of file MethodBDT.cxx. ◆ SetUseNvars(). void TMVA::MethodBDT::SetUseNvars ; (; Int_t ; n). inline . Definition at line 142 of file MethodBDT.h. ◆ Streamer(). virtual void TMVA::MethodBDT::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::MethodBase. ◆ StreamerNVirtual(). void TMVA::MethodBDT::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 305 of file MethodBDT.h. ◆ TestTreeQuality(). Double_t TMVA::MethodBDT::TestTreeQuality ; (; DecisionTree * ; dt). Test the tree quality.. in terms of Misclassification. ; Definition at line 1696 of file MethodBDT.cxx. ◆ Train(). void TMVA::MethodBDT::Train ; (; void ; ). virtual . BDT training. ; Implements TMVA::MethodBase.; Definition at line 1142 of file MethodBDT.cxx. ◆ UpdateTargets(). void TMVA::MethodBDT::UpdateTargets ; (; std::vector< const TMVA::Event * > & ; eventSample, . UInt_t ; cls = 0 . ). private . Calculate residual for all events. ; Definition at line 1434 of file MethodBDT.cxx. ◆ UpdateTargetsRegression(). void TMVA::MethodBDT::UpdateTargetsRegression ; (; std::vector< const TMVA::Event * > & ; eventSample, . Bool_t ; first = kFALSE . ). private . Calculate residuals for all events and update targets for next iter. ; Parameters. [in]eventSampleThe collection of events currently under training. ; [in]firstShould be true when called before the first boosting iteration has been run . Definition at line 1556 of file MethodBDT.cxx. ◆ WriteMonitorin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:58913,Test,TestTreeQuality,58913,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['Test'],['TestTreeQuality']
Testability," at line 167 of file TGeoShape.cxx. ◆ TGeoShape() [2/2]. TGeoShape::TGeoShape ; (; const char * ; name). Default constructor. ; Definition at line 182 of file TGeoShape.cxx. ◆ ~TGeoShape(). TGeoShape::~TGeoShape ; (; ). override . Destructor. ; Definition at line 197 of file TGeoShape.cxx. Member Function Documentation. ◆ AfterStreamer(). virtual void TGeoShape::AfterStreamer ; (; ). inlinevirtual . Reimplemented in TGeoConeSeg, and TGeoTubeSeg.; Definition at line 93 of file TGeoShape.h. ◆ Big(). static Double_t TGeoShape::Big ; (; ). inlinestatic . Definition at line 87 of file TGeoShape.h. ◆ Capacity(). virtual Double_t TGeoShape::Capacity ; (; ); const. pure virtual . Implemented in TGeoArb8, TGeoBBox, TGeoCompositeShape, TGeoCone, TGeoConeSeg, TGeoEltu, TGeoHalfSpace, TGeoHype, TGeoPara, TGeoParaboloid, TGeoPcon, TGeoPgon, TGeoScaledShape, TGeoSphere, TGeoTorus, TGeoTrd1, TGeoTrd2, TGeoTube, TGeoTubeSeg, TGeoCtub, TGeoXtru, and TGeoVGShape. ◆ CheckShape(). void TGeoShape::CheckShape ; (; Int_t ; testNo, . Int_t ; nsamples = 10000, . Option_t * ; option = """" . ). Test for shape navigation methods. ; Summary for test numbers:. 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 211 of file TGeoShape.cxx. ◆ Class(). static TClass * TGeoShape::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoShape::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoShape::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 171 of file TGeoShape.h. ◆ ClearThreadData(). virtual void TGeoShape::ClearThreadData ; (; ); const. inlinevirtual . Reimplemented in TGeoCompositeShape, TGeoPgon, and TGeoXtru.; Definition at line 66 of file TGeoShape.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShape.html:27637,test,testNo,27637,doc/master/classTGeoShape.html,https://root.cern,https://root.cern/doc/master/classTGeoShape.html,1,['test'],['testNo']
Testability," at line 17 of file TGeoHalfSpace.h. Public Member Functions;  TGeoHalfSpace ();  Dummy constructor. ;  ;  TGeoHalfSpace (const char *name, Double_t *p, Double_t *n);  Constructor with name, point on the plane and normal. ;  ;  TGeoHalfSpace (Double_t *params);  Default constructor specifying minimum and maximum radius. ;  ;  ~TGeoHalfSpace () override;  destructor ;  ; Double_t Capacity () const override;  ; void ComputeBBox () override;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Compute normal to closest surface from POINT. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  test if point is inside the half-space ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  A half-space does not have a mesh primitive. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  compute distance from inside point to the plane ;  ; void DistFromOutside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoHalfSpace.html:1897,test,test,1897,doc/master/classTGeoHalfSpace.html,https://root.cern,https://root.cern/doc/master/classTGeoHalfSpace.html,1,['test'],['test']
Testability," at line 240 of file TFile.h. ◆ GetReadaheadSize(). Int_t TFile::GetReadaheadSize ; (; ). static . Static function returning the readahead buffer size. ; Definition at line 4599 of file TFile.cxx. ◆ GetReadCalls(). virtual Int_t TFile::GetReadCalls ; (; ); const. inlinevirtual . Definition at line 244 of file TFile.h. ◆ GetReadStreamerInfo(). Bool_t TFile::GetReadStreamerInfo ; (; ). static . If the streamerinfos are to be read at file opening. ; See TFile::SetReadStreamerInfo for more documentation. ; Definition at line 3742 of file TFile.cxx. ◆ GetRecordHeader(). Int_t TFile::GetRecordHeader ; (; char * ; buf, . Long64_t ; first, . Int_t ; maxbytes, . Int_t & ; nbytes, . Int_t & ; objlen, . Int_t & ; keylen . ). Read the logical record header starting at a certain postion. ; Parameters. [in]bufpointer to buffer ; [in]firstread offset ; [in]maxbytesBytes which are read into buf. ; [out]nbytesNumber of bytes in record if negative, this is a deleted record if 0, cannot read record, wrong value of argument first ; [out]objlenUncompressed object size ; [out]keylenLength of logical record header. The function reads nread bytes where nread is the minimum of maxbytes and the number of bytes before the end of file. The function returns nread. Note that the arguments objlen and keylen are returned only if maxbytes >=16 ; Definition at line 1301 of file TFile.cxx. ◆ GetRelOffset(). Long64_t TFile::GetRelOffset ; (; ); const. inline . Definition at line 251 of file TFile.h. ◆ GetSeekFree(). virtual Long64_t TFile::GetSeekFree ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 252 of file TFile.h. ◆ GetSeekInfo(). virtual Long64_t TFile::GetSeekInfo ; (; ); const. inlinevirtual . Reimplemented in TSQLFile, and TXMLFile.; Definition at line 253 of file TFile.h. ◆ GetSize(). Long64_t TFile::GetSize ; (; ); const. virtual . Returns the current file size. ; Returns -1 in case the file could not be stat'ed. ; Reimplemented in TDavixFile, TSQL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTFile.html:68485,log,logical,68485,doc/v632/classTFile.html,https://root.cern,https://root.cern/doc/v632/classTFile.html,2,['log'],['logical']
Testability," at line 29 of file TBenchmark.h. Public Member Functions;  TBenchmark ();  Benchmark default constructor. ;  ; virtual ~TBenchmark ();  Benchmark destructor. ;  ; Int_t GetBench (const char *name) const;  Returns index of Benchmark name. ;  ; Float_t GetCpuTime (const char *name);  Returns Cpu time used by Benchmark name. ;  ; Float_t GetRealTime (const char *name);  Returns Realtime used by Benchmark name. ;  ; TClass * IsA () const override;  ; void Print (Option_t *name="""") const override;  Prints parameters of Benchmark name. ;  ; virtual void Reset ();  Reset all Benchmarks. ;  ; virtual void Show (const char *name);  Stops Benchmark name and Prints results. ;  ; virtual void Start (const char *name);  Starts Benchmark with the specified name. ;  ; virtual void Stop (const char *name);  Terminates Benchmark with specified name. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Summary (Float_t &rt, Float_t &cp);  Prints a summary of all benchmarks. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this obj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:1487,benchmark,benchmarks,1487,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['benchmark'],['benchmarks']
Testability," at line 373 of file DataSetInfo.cxx. ◆ SetDataSetManager(). void TMVA::DataSetInfo::SetDataSetManager ; (; DataSetManager * ; dsm). inlineprivate . Definition at line 198 of file DataSetInfo.h. ◆ SetMsgType(). void TMVA::DataSetInfo::SetMsgType ; (; EMsgType ; t); const. Definition at line 106 of file DataSetInfo.cxx. ◆ SetNormalization(). void TMVA::DataSetInfo::SetNormalization ; (; const TString & ; norm). inline . Definition at line 132 of file DataSetInfo.h. ◆ SetRootDir(). void TMVA::DataSetInfo::SetRootDir ; (; TDirectory * ; d). inline . Definition at line 189 of file DataSetInfo.h. ◆ SetSplitOptions(). void TMVA::DataSetInfo::SetSplitOptions ; (; const TString & ; so). inline . Definition at line 185 of file DataSetInfo.h. ◆ SetTestingSumBackgrWeights(). void TMVA::DataSetInfo::SetTestingSumBackgrWeights ; (; Double_t ; testingSumBackgrWeights). inline . Definition at line 139 of file DataSetInfo.h. ◆ SetTestingSumSignalWeights(). void TMVA::DataSetInfo::SetTestingSumSignalWeights ; (; Double_t ; testingSumSignalWeights). inline . Definition at line 138 of file DataSetInfo.h. ◆ SetTrainingSumBackgrWeights(). void TMVA::DataSetInfo::SetTrainingSumBackgrWeights ; (; Double_t ; trainingSumBackgrWeights). inline . Definition at line 137 of file DataSetInfo.h. ◆ SetTrainingSumSignalWeights(). void TMVA::DataSetInfo::SetTrainingSumSignalWeights ; (; Double_t ; trainingSumSignalWeights). inline . Definition at line 134 of file DataSetInfo.h. ◆ SetWeightExpression(). void TMVA::DataSetInfo::SetWeightExpression ; (; const TString & ; exp, . const TString & ; className = """" . ). set the weight expressions for the classes if class name is specified, set only for this class if class name is unknown, register new class with this name ; Definition at line 346 of file DataSetInfo.cxx. ◆ Streamer(). virtual void TMVA::DataSetInfo::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::Dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html:29682,test,testingSumSignalWeights,29682,doc/master/classTMVA_1_1DataSetInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSetInfo.html,1,['test'],['testingSumSignalWeights']
Testability," at line 45 of file TSpectrumFit.h. ◆ fBErr. Double_t TSpectrumFit::fBErr. protected . error value of b parameter ; Definition at line 46 of file TSpectrumFit.h. ◆ fBInit. Double_t TSpectrumFit::fBInit. protected . initial value of b parameter (slope), for details see html manual and references ; Definition at line 44 of file TSpectrumFit.h. ◆ fChi. Double_t TSpectrumFit::fChi. protected . here the fitting functions return resulting chi square ; Definition at line 29 of file TSpectrumFit.h. ◆ fFitTaylor. Int_t TSpectrumFit::fFitTaylor. protected . order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:53163,log,logical,53163,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['log'],['logical']
Testability," at line 88 of file FitterBase.cxx. ◆ GetFitterTarget(). IFitterTarget & TMVA::FitterBase::GetFitterTarget ; (; ); const. inline . Definition at line 64 of file FitterBase.h. ◆ GetName(). const char * TMVA::FitterBase::GetName ; (; ); const. inlinevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 70 of file FitterBase.h. ◆ GetNpars(). Int_t TMVA::FitterBase::GetNpars ; (; ); const. inline . Definition at line 67 of file FitterBase.h. ◆ IsA(). virtual TClass * TMVA::FitterBase::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter.; Definition at line 97 of file FitterBase.h. ◆ Log(). MsgLogger & TMVA::FitterBase::Log ; (; ); const. inlineprotected . message logger ; Definition at line 89 of file FitterBase.h. ◆ Run() [1/2]. Double_t TMVA::FitterBase::Run ; (; ). estimator function interface for fitting ; Definition at line 74 of file FitterBase.cxx. ◆ Run() [2/2]. virtual Double_t TMVA::FitterBase::Run ; (; std::vector< Double_t > & ; pars). pure virtual . Implemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ SetIPythonInteractive(). void TMVA::FitterBase::SetIPythonInteractive ; (; bool * ; ExitFromTraining, . UInt_t * ; fIPyMaxIter_, . UInt_t * ; fIPyCurrentIter_ . ). inline . Definition at line 73 of file FitterBase.h. ◆ Streamer(). virtual void TMVA::FitterBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable.; Reimplemented in TMVA::GeneticFitter, TMVA::MCFitter, TMVA::MinuitFitter, and TMVA::SimulatedAnnealingFitter. ◆ StreamerNVirtual(). void TMVA::FitterBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inlin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:17205,log,logger,17205,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['log'],['logger']
Testability," auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; hs->Add(h2st);; ; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; hs->Add(h3st);; ; // draw the stack; hs->Draw(""pfc nostack"");; }; kOcean@ kOceanDefinition TColor.h:119; THStackThe Histogram stack class.Definition THStack.h:40; TStyle::SetPalettevoid SetPalette(Int_t ncolors=kBird, Int_t *colors=nullptr, Float_t alpha=1.)See TColor::SetPalette.Definition TStyle.cxx:1888; . ; void thstack2palettecolor() ; {; gStyle->SetPalette(1);; auto h1 = new TH2F(""h1"",""h1"",20,0,6,20,-4,4);; auto h2 = new TH2F(""h2"",""h2"",20,0,6,20,-4,4);; auto h3 = new TH2F(""h3"",""h3"",20,0,6,20,-4,4);; auto h4 = new TH2F(""h4"",""h4"",20,0,6,20,-4,4);; auto h5 = new TH2F(""h5"",""h5"",20,0,6,20,-4,4);; h2->Fill(2.,0.,5);; h3->Fill(3.,0.,10);; h4->Fill(4.,0.,15);; h5->Fill(5.,0.,20);; auto hs = new THStack(""hs"",""Test of palette colored lego stack"");; hs->Add(h1);; hs->Add(h2);; hs->Add(h3);; hs->Add(h4);; hs->Add(h5);; hs->Draw(""0lego1 PFC"");; }; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; . Superimposing two histograms with different scales in the same pad; The following example creates two histograms, the second histogram is the bins integral of the first one. It shows a procedure to draw the two histograms in the same pad and it draws the scale of the second histogram using a new vertical axis on the right side. See also the tutorial transpad.C for a variant of this example.; {; auto c1 = new TCanvas(""c1"",""c1"",600,400);; // create/fill draw h1; gStyle->SetOptStat(kFALSE);; auto h1 = new TH1F(""h1"",""Superimposing two histograms with different scales"",100,-3,3);; Int_t i;; for (i=0;i<10000;i++) h1->Fill(gRandom->Gaus(0,1));; h1->Draw();; c1->Update();; ; // create hint1 filled with the bins integral of h1; auto hint1 = new TH1F(""hint1"",""h1 bins integral"",100,-3,3);; float sum = 0.f;; for (i=1;i<=100;i++) {; sum += h1->GetBinContent(i);; hin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:20886,Test,Test,20886,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['Test'],['Test']
Testability," average rate on same plot (default); dofit = 0 no fit; 1 fit with the relevant '1st degree related' function; 2 fit with the relevant '2nd degree related' function; 3 fit with varying rcpu function; n0 = for dofit == 3, number of real cores; n1 = for dofit == 3, number of total cores (real + hyperthreaded). TGraphErrors * GetGraph(TDirectory* d, const char* pfn, Int_t& nb, Double_t& xmi, Double_t& xmx, Double_t& ymi, Double_t& ymx, Int_t& kmx, TProfile*& pf); Get from TDirectory 'd' the TProfile named 'pfn' and create the graph.; Return also the max y in mx. void AssertFittingFun(Double_t mi, Double_t mx); Make sure that the fitting functions are defined. void GetPerfSpecs(const char* path = ""."", Int_t degfit = 1); Get performance specs. Check file 'path', or files in directory 'path'; (default current directory).; The degree of the polynomial used for the fit is 'degfit' (default 1). Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs"", Bool_t verbose = kFALSE, Int_t dofit = 0, Int_t n0 = -1, Int_t n1 = -1); Draw the CPU speedup plot.; opt = 'typewhat', e.g. 'std:max:'; type = 'std:' draw standard plot; 'stdx:' draw standard plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node; what = 'max:' draw max rate; 'avg:' draw average rate; 'all:' draw max and average rate on same plot (default); type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots; dofit = 0 no fit; 1 fit with default 3 parameter saturated I/O formula; 2 fit with 4 par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofBench.html:11345,test,test,11345,root/html534/TProofBench.html,https://root.cern,https://root.cern/root/html534/TProofBench.html,3,['test'],['test']
Testability," axis = ""X""); virtual voidTH1::SetTitleSize(Float_t size = 0.02, Option_t* axis = ""X""); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTH1::SetXTitle(const char* title); virtual voidTH1::SetYTitle(const char* title); virtual voidTH1::SetZTitle(const char* title); virtual TH1*TH1::ShowBackground(Int_t niter = 20, Option_t* option = ""same"")MENU ; virtual voidShowMembers(TMemberInspector&); virtual Int_tTH1::ShowPeaks(Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.05)MENU ; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidTH1::Smooth(Int_t ntimes = 1, Option_t* option = """")MENU ; static voidTH1::SmoothArray(Int_t NN, Double_t* XX, Int_t ntimes = 1); static voidTH1::StatOverflows(Bool_t flag = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTH1::Sumw2(Bool_t flag = kTRUE); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TH1*TH1::TransformHisto(TVirtualFFT* fft, TH1* h_output, Option_t* option); virtual voidTH1::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; static voidTArray::WriteArray(TBuffer& b, const TArray* a). protected:. Bool_tTArray::BoundsOk(const char* where, Int_t at) const; virtual Int_tTH3::BufferFill(Double_t, Double_t); virtual Int_tTH3::BufferFill(Double_t, Double_t, Double_t); virtual Int_tTH3::BufferFill(Double_t x, Double_t y, Double_t z, Double_t w); static boolTH1::CheckAxisLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLabels(const TAxis* a1, const TAxis* a2); static boolTH1::CheckBinLimits(const TAxis* a1, const TAxis* a2); static boolTH1::CheckConsistency(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLTH3Composition.html:21314,Test,TestBit,21314,root/html534/TGLTH3Composition.html,https://root.cern,https://root.cern/root/html534/TGLTH3Composition.html,12,['Test'],"['TestBit', 'TestBits']"
Testability," axis = ""xz"" set the two axes. Alphanumeric labels; Axis labels can be any alphanumeric character strings. Such axis can be produced only with histograms because the labels'definition is stored in TAxis. The following example demonstrates how to create such labels.; ; TCanvas *hlabels2(); {; const Int_t nx = 12;; const Int_t ny = 20;; const char *month[nx] = {""January"",""February"",""March"",""April"",""May"",; ""June"",""July"",""August"",""September"",""October"",""November"",; ""December""};; const char *people[ny] = {""Jean"",""Pierre"",""Marie"",""Odile"",""Sebastien"",; ""Fons"",""Rene"",""Nicolas"",""Xavier"",""Greg"",""Bjarne"",""Anton"",; ""Otto"",""Eddy"",""Peter"",""Pasha"",""Philippe"",""Suzanne"",""Jeff"",; ""Valery""};; TCanvas *c1 = new TCanvas(""c1"",""demo bin labels"",10,10,600,600);; c1->SetGrid();; c1->SetLeftMargin(0.15);; c1->SetBottomMargin(0.15);; TH2F *h = new TH2F(""h"",""test"",3,0,3,2,0,2);; h->SetCanExtend(TH1::kAllAxes);; h->SetStats(0);; gRandom->SetSeed();; for (Int_t i=0;i<15000;i++) {; Int_t rx = gRandom->Rndm()*nx;; Int_t ry = gRandom->Rndm()*ny;; h->Fill(people[ry],month[rx],1);; }; h->LabelsDeflate(""X"");; h->LabelsDeflate(""Y"");; h->LabelsOption(""v"");; h->Draw(""text"");; ; TPaveText *pt = new TPaveText(0.6,0.85,0.98,0.98,""brNDC"");; pt->SetFillColor(18);; pt->SetTextAlign(12);; pt->AddText(""Use the axis Context Menu LabelsOption"");; pt->AddText("" \""a\"" to sort by alphabetic order"");; pt->AddText("" \"">\"" to sort by decreasing values"");; pt->AddText("" \""<\"" to sort by increasing values"");; pt->Draw();; return c1;; }; h#define h(i)Definition RSha256.hxx:106; Int_tint Int_tDefinition RtypesCore.h:45; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TH1::kAllAxes@ kAllAxesDefinition TH1.h:76; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGaxis.html:12442,test,test,12442,doc/master/classTGaxis.html,https://root.cern,https://root.cern/doc/master/classTGaxis.html,1,['test'],['test']
Testability," axis->GetXmin();; 769 xmax[i] = axis->GetXmax();; 770 }; 771 ; 772 // Put default options, needed for the likelihood fitting of sparse; 773 // data.; 774 ROOT::Fit::DataOptions& dopt = dv.Opt();; 775 //dopt.fUseEmpty = true;; 776 // when using sparse data need to set option to use normalized bin volume, because sparse bins are merged together; 777 //if (!dopt.fIntegral) dopt.fBinVolume = true;; 778 dopt.fBinVolume = true;; 779 dopt.fNormBinVolume = true;; 780 ; 781 // Get the sparse data; 782 ROOT::Fit::SparseData d(ndim, &xmin[0], &xmax[0]);; 783 ROOT::Fit::FillData(d, s1, func);; 784 ; 785// std::cout << ""FillData(BinData & dv, const THnBase * s1, TF1 * func) (1)"" << std::endl;; 786 ; 787 // Create the bin data from the sparse data; 788 d.GetBinDataIntegral(dv);; 789 ; 790}; 791 ; 792void FillData ( BinData & dv, const TGraph * gr, TF1 * func ) {; 793 // fill the data vector from a TGraph. Pass also the TF1 function which is; 794 // needed in case to exclude points rejected by the function; 795 assert(gr != nullptr);; 796 ; 797 // get fit option; 798 DataOptions & fitOpt = dv.Opt();; 799 ; 800 BinData::ErrorType type = GetDataType(gr,fitOpt);; 801 // adjust option according to type; 802 fitOpt.fErrors1 = (type == BinData::kNoError);; 803 // set this if we want to have error=1 for points with zero errors (by default they are skipped); 804 // fitOpt.fUseEmpty = true;; 805 ; 806 // use coordinate or asym errors in case option is set and type is consistent; 807 fitOpt.fCoordErrors &= (type == BinData::kCoordError) || (type == BinData::kAsymError) ;; 808 fitOpt.fAsymErrors &= (type == BinData::kAsymError);; 809 ; 810 ; 811 // if data are filled already check if there are consistent - otherwise do nothing; 812 if (dv.Size() > 0 && dv.NDim() == 1 ) {; 813 // check if size is correct otherwise flag an errors; 814 if ( dv.GetErrorType() != type ) {; 815 Error(""FillData"",""Inconsistent TGraph with previous data set- skip all graph data"");; 816 return;; 817 }; 818 }; 819 ; 82",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:25773,assert,assert,25773,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['assert'],['assert']
Testability," be able to stop and launch new jobs) please send a request to Patricia Mendez to obtain an account.; ROOT jobs; Each project in the SFT Jenkins has a specific 'tab' for the defined project jobs. The ROOT tab contains all the defined jobs for ROOT. They are organized as follow:. nightly builds: The jobs are named root-nightly-<version> and they are implemented as multi-configuration project. They are run once a day (around after midnight CET) but they can be started by hand at any time of the day (see later) and select for what configurations to run.; incremental builds: The jobs are named root-incremental-<version> and they are implemented as multi-configuration project. They are run as soon new commits appear in the ROOT git repository and the builds are incremental by default. A full re-build can be triggered by checking the option EMPTY_BINARY.; documentation generation. The jobs are named root-makedoc-<version>. They are started automatically once a day during the day.; testing installations. The job is named root-install and builds ROOT for a number of platforms, produces the installation tar-file or installation kit, installs it in a different place nd runs the tests against the installation (needed to delete the build and source area).; building releases. The job is named root-release-<version> and is multi-configuration job. It builds ROOT for a given 'tagged' version using the source distribution tar-file and produces binaries for a number of configurations, which are installed automatically in the download ROOT server.; other procedures. cling-periodic; cling-clone-repo; cling-repo-sync; root-test; root-staticAnalysis-master. Basic operations; Understanding information for a single build; The Status shows a summary for the build. In case of multi-configuration jobs it it also show the configuration matrix that can be used to select a contrete configuration. See the following figure: ; For each individual build (select one cell in the matrix) the following",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how-use-root-jenkins.html:3444,test,testing,3444,d/how-use-root-jenkins.html,https://root.cern,https://root.cern/d/how-use-root-jenkins.html,1,['test'],['testing']
Testability," be casted to MethodCategory. /Factory""; 435 << Endl; // DSMTEST; 436 return nullptr;; 437 }; 438 if (fModelPersistence); 439 methCat->SetWeightFileDir(fileDir);; 440 methCat->SetModelPersistence(fModelPersistence);; 441 methCat->fDataSetManager = loader->GetDataSetInfo().GetDataSetManager(); // DSMTEST; 442 methCat->SetFile(fgTargetFile);; 443 methCat->SetSilentFile(IsSilentFile());; 444 } // DSMTEST; 445 ; 446 if (!method->HasAnalysisType(fAnalysisType, loader->GetDataSetInfo().GetNClasses(),; 447 loader->GetDataSetInfo().GetNTargets())) {; 448 Log() << kWARNING << ""Method "" << method->GetMethodTypeName() << "" is not capable of handling "";; 449 if (fAnalysisType == Types::kRegression) {; 450 Log() << ""regression with "" << loader->GetDataSetInfo().GetNTargets() << "" targets."" << Endl;; 451 } else if (fAnalysisType == Types::kMulticlass) {; 452 Log() << ""multiclass classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 453 } else {; 454 Log() << ""classification with "" << loader->GetDataSetInfo().GetNClasses() << "" classes."" << Endl;; 455 }; 456 return 0;; 457 }; 458 ; 459 if (fModelPersistence); 460 method->SetWeightFileDir(fileDir);; 461 method->SetModelPersistence(fModelPersistence);; 462 method->SetAnalysisType(fAnalysisType);; 463 method->SetupMethod();; 464 method->ParseOptions();; 465 method->ProcessSetup();; 466 method->SetFile(fgTargetFile);; 467 method->SetSilentFile(IsSilentFile());; 468 ; 469 // check-for-unused-options is performed; may be overridden by derived classes; 470 method->CheckSetup();; 471 ; 472 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 473 MVector *mvector = new MVector;; 474 fMethodsMap[datasetname] = mvector;; 475 }; 476 fMethodsMap[datasetname]->push_back(method);; 477 return method;; 478}; 479 ; 480////////////////////////////////////////////////////////////////////////////////; 481/// Books MVA method. The option configuration string is custom for each MVA; 482/// the TString field ""theN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:18818,Log,Log,18818,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability," be overridden if an object has to react to timers. ; Reimplemented in TGWindow, TGuiBldDragManager, TSessionViewer, TGraphTime, TGLEventHandler, TGCommandPlugin, TGDNDManager, TGFileContainer, TGPopupMenu, TGScrollBar, TGShutter, TGTextEdit, TGTextEditor, TGTextEntry, TGTextView, TGToolTip, TGHtml, TVirtualPacketizer, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, TProofPlayerLite, and TTreeViewer.; Definition at line 498 of file TObject.cxx. ◆ Hash(). ULong_t TObject::Hash ; (; ); const. virtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTObject.html:42497,log,logarithmic,42497,doc/master/classTObject.html,https://root.cern,https://root.cern/doc/master/classTObject.html,1,['log'],['logarithmic']
Testability," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t* rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context hol",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:13660,log,logicals,13660,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,4,['log'],['logicals']
Testability," be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqiue 'ID' in refresh-cache.; Returns 0 if not found. UInt_t SizeOfScene() const; Return memory cost of scene.; Warning: NOT CORRECT at present - doesn't correctly calculate size.; of logical shapes with dynamic internal contents. void DumpMapSizes() const; Print sizes of logical nad physical-shape maps. void RGBAFromColorIdx(Float_t[4] rgba, Color_t ci, Char_t transp = 0); Fill rgba color from ROOT color-index ci and transparency (0->100). Bool_t IsOutside(const TGLBoundingBox& box, const TGLPlaneSet_t& planes); Check if box is outside of all planes. TGLScene(const TGLScene& ). TGLScene& operator=(const TGLScene& ). TSceneInfo* CreateSceneInfo(TGLViewerBase* view). LogicalShapeMap_t& RefLogicalShapes(); Temporary export for setting selected-state of physical shapes. { return fLogicalShapes; }. TGLContextIdentity* GetGLCtxIdentity() const. GL-context h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLScene.html:14297,log,logicals,14297,root/html602/TGLScene.html,https://root.cern,https://root.cern/root/html602/TGLScene.html,2,['log'],['logicals']
Testability," been used at the training of the .xml weight file at hand ;  ; void DeclareOptions ();  ; void FindMVACut (MethodBase *method);  find the CUT on the individual MVA that defines an event as correct or misclassified (to be used in the boosting process) ;  ; Double_t GetBoostROCIntegral (Bool_t, Types::ETreeType, Bool_t CalcOverlapIntergral=kFALSE);  Calculate the ROC integral of a single classifier or even the whole boosted classifier. ;  ; void Init ();  ; void InitHistos ();  initialisation routine ;  ; void MonitorBoost (Types::EBoostStage stage, UInt_t methodIdx=0);  fill various monitoring histograms from information of the individual classifiers that have been boosted. ;  ; void PrintResults (const TString &, std::vector< Double_t > &, const Double_t) const;  ; void ProcessOptions ();  process user options ;  ; void ResetBoostWeights ();  resetting back the boosted weights of the events to 1 ;  ; Double_t SingleBoost (MethodBase *method);  ; void SingleTrain ();  initialization ;  ; virtual void TestClassification ();  initialization ;  ; virtual void WriteEvaluationHistosToFile (Types::ETreeType treetype);  writes all MVA evaluation histograms to file ;  ; void WriteMonitoringHistosToFile (void) const;  write special monitoring histograms to file dummy implementation here --------------— ;  . Private Attributes; Double_t fAdaBoostBeta;  ADA boost parameter, default is 1. ;  ; Double_t fBaggedSampleFraction;  rel.Size of bagged sample ;  ; TString fBoostedMethodName;  details of the boosted classifier ;  ; TString fBoostedMethodOptions;  options ;  ; TString fBoostedMethodTitle;  title ;  ; UInt_t fBoostNum;  Number of times the classifier is boosted. ;  ; TString fBoostType;  string specifying the boost type ;  ; Double_t fBoostWeight;  the weight used to boost the next classifier ;  ; std::vector< TH1 * > fBTrainBgdMVAHist;  ; std::vector< TH1 * > fBTrainSigMVAHist;  ; DataSetManager * fDataSetManager;  DSMTEST. ;  ; Bool_t fDetailedMonitoring;  produce detail",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html:28259,Test,TestClassification,28259,doc/master/classTMVA_1_1MethodBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBoost.html,1,['Test'],['TestClassification']
Testability," before, the per-event analysis happens in Process(). Here again, you need to get the tree entry before you can access the corresponding data members of your selector.; Fitting and Drawing the Histogram; Here again, once the histogram is filled, fit it with a pol2 using TH1::Fit(""pol2"").; See the documentation of TSelector on where to do the fitting, i.e. which function of your selector gets called after the whole tree has been processed. You should first fit and then draw, to see the fit together with the histogram.; At the end, you should get the same result than the figure 6 in Histogramming; If, for any reason, you don't manage to get it working, you can download the working selector file here: FullEventDataSelector.C (or; wget http://root-mirror.github.io/training/intro/FullEventDataSelector.C); Note: You will have to use it that way:; EventTree->Process(""FullEventDataSelector.C""). . ‹ Accessing a TTree With a TSelector; up; Using a TSelector with PROOF ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming-selector.html:5276,test,tests,5276,d/histogramming-selector.html,https://root.cern,https://root.cern/d/histogramming-selector.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability," bestSignificance); 447 {; 448 bestSignificance = significance;; 449 bestCutSignificance = currentCut;; 450 }; 451 ; 452 addPoint (""Significance"", currentCut, significance);; 453 // m_histSignificance->Fill (currentCut, significance);; 454 }; 455 ; 456 m_significances.push_back (bestSignificance);; 457 ; 458 clear (""OutputSig"");; 459 clear (""OutputBkg"");; 460 for (size_t i = 0; i < numBinsData; ++i); 461 {; 462 addPoint (""OutputSig"", x.at (i), datSig.at (i)/sumWeightsSig);; 463 addPoint (""OutputBkg"", x.at (i), datBkg.at (i)/sumWeightsBkg);; 464 // m_histOutputSignal->Fill (x.at (i), datSig.at (1)/sumWeightsSig);; 465 // m_histOutputBackground->Fill (x.at (i), datBkg.at (1)/sumWeightsBkg);; 466 }; 467 ; 468 ; 469 if (fMonitoring); 470 {; 471 plot (""ROC"", """", 2, kRed);; 472 plot (""Significance"", """", 3, kRed);; 473 plot (""OutputSig"", """", 4, kRed);; 474 plot (""OutputBkg"", ""same"", 4, kBlue);; 475 fMonitoring->ProcessEvents ();; 476 }; 477 ; 478 m_cutValue = bestCutSignificance;; 479 }; 480 ; 481 ; 482 /** \brief check for convergence ; 483 *; 484 */; 485 bool Settings::hasConverged (double testError); 486 {; 487 // std::cout << ""check convergence; minError "" << m_minError << "" current "" << testError; 488 // << "" current convergence count "" << m_convergenceCount << std::endl;; 489 if (testError < m_minError*0.999); 490 {; 491 m_convergenceCount = 0;; 492 m_minError = testError;; 493 }; 494 else; 495 {; 496 ++m_convergenceCount;; 497 m_maxConvergenceCount = std::max (m_convergenceCount, m_maxConvergenceCount);; 498 }; 499 ; 500 ; 501 if (m_convergenceCount >= convergenceSteps () || testError <= 0); 502 return true;; 503 ; 504 return false;; 505 }; 506 ; 507 ; 508 ; 509 /** \brief set the weight sums to be scaled to (preparations for monitoring output); 510 *; 511 */; 512 void ClassificationSettings::setWeightSums (double sumOfSigWeights, double sumOfBkgWeights); 513 {; 514 m_sumOfSigWeights = sumOfSigWeights; m_sumOfBkgWeights = sumOfBkgWeights;; 515 }; 516 ; 517 /** \brie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:16841,test,testError,16841,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,3,['test'],['testError']
Testability," bias; oneOverZeroError: for bins with zero error, this number defines 1/error.; Return value: number of bins with bad error; +10000*number of unconstrained output bins; Note: return values>=10000 are fatal errors,; for the given input, the unfolding can not be done!; Data members modified:; fY, fVyy, fVyyinv, fBiasScale, fNdf; Data members cleared; see ClearResults. Double_t DoUnfold(Double_t tau); Unfold with given value of regularisation parameter tau; tau: new tau parameter; required data members:; fA: matrix to relate x and y; fY: measured data points; fX0: bias on x; fBiasScale: scale factor for fX0; fV: inverse of covariance matrix for y; fLsquared: regularisation conditions; modified data members:; fTauSquared and those documented in DoUnfold(void). Int_t ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); scan the L curve; nPoint: number of points on the resulting curve; tauMin: smallest tau value to study; tauMax: largest tau value to study; lCurve: the L curve as graph; logTauX: output spline of x-coordinates vs tau for the L curve; logTauY: output spline of y-coordinates vs tau for the L curve; return value: the coordinate number (0..nPoint-1) with the ""best"" choice; of tau. TH1D * GetOutput(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive unfolding result as histogram; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. TH1D * GetBias(const char* name, const char* title, Double_t x0 = 0.0, Double_t x1 = 0.0) const; retreive bias as histogram; name: name of the histogram; title: title of the histogram; x0,x1: lower/upper edge of histogram.; if (x0>=x1) then x0=0 and x1=nbin are used. TH1D * GetFoldedOutput(const char* name, const char* title, Double_t y0 = 0.0, Double_t y1 = 0.0) const; retreive unfolding result folded back by the matrix; name: name of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnfold.html:28579,log,logTauX,28579,root/html528/TUnfold.html,https://root.cern,https://root.cern/root/html528/TUnfold.html,12,['log'],"['logTauX', 'logTauY']"
Testability," binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". Note also that for GoF test of unbinned data ROOT provides also the class; ROOT::Math::GoFTest. The class has also method for doing one sample tests; (i.e. comparing the data with a given distribution). void SetContent(const Double_t* content); -*-*-*-*-*-*Replace bin contents by the contents of array content*-*-*-*. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; see GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); Set the number and values of contour levels. By default the number of contour levels is set to 20. The contours values; in the array ""levels"" should be specified in increasing order. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); Set value for one contour level. Double_t GetMaximum(Double_t maxval = FLT_MAX) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the maximum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:119153,log,log,119153,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,2,['log'],['log']
Testability," bits per element).Definition TArrayD.h:27; TF11-Dim function classDefinition TF1.h:233; TF1::GetMinimumvirtual Double_t GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the minimum value of the function on the (xmin, xmax) interval.Definition TF1.cxx:1696; TF1::SetRangevirtual void SetRange(Double_t xmin, Double_t xmax)Initialize the upper and lower bounds to draw the function.Definition TF1.cxx:3528; TF1::Integralvirtual Double_t Integral(Double_t a, Double_t b, Double_t epsrel=1.e-12)IntegralOneDim or analytical integral.Definition TF1.cxx:2531; TF1::GetRangevirtual void GetRange(Double_t *xmin, Double_t *xmax) constReturn range of a generic N-D function.Definition TF1.cxx:2281; TF1::fNpxInt_t fNpxNumber of points used for the graphical representation.Definition TF1.h:267; TF1::GetMaximumvirtual Double_t GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constReturns the maximum value of the function.Definition TF1.cxx:1614; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::GetMaximumXYvirtual Double_t GetMaximumXY(Double_t &x, Double_t &y) constCompute the X and Y values corresponding to the maximum value of the function.Definition TF2.cxx:440; TF2::FindMinMaxvirtual Double_t FindMinMax(Double_t *x, bool findmax) constReturn minimum/maximum value of the function.Definition TF2.cxx:363; TF2::~TF2~TF2() overrideF2 default destructor.Definition TF2.cxx:195; TF2::GetMinimumvirtual Double_t GetMinimum(Double_t *x) constReturn minimum/maximum value of the function.Definition TF2.cxx:465; TF2::Copyvoid Copy(TObject &f2) const overrideCopy this F2 to a new F2.Definition TF2.cxx:210; TF2::GetRandom2virtual void GetRandom2(Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr)Return 2 random numbers following this function shape.Definition TF2.cxx:547; TF2::GetSaveDouble_t GetSave(const Double_t *x) overrideGet value correspondin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8h_source.html:9884,log,logx,9884,doc/master/TF2_8h_source.html,https://root.cern,https://root.cern/doc/master/TF2_8h_source.html,1,['log'],['logx']
Testability," bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; Optimisation interface; These functions allow RooFit to optimise a computation graph, to keep track of cached values, and to invalidate caches. . virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:21473,test,test,21473,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['test'],['test']
Testability," bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooFit/TestStatistics/RooRealL.h>. Inheritance diagram for RooFit::TestStatistics::RooRealL:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealL() [1/2]. RooFit::TestStatistics::RooRealL::RooRealL ; (; const char * ; name, . const char * ; title, . std::shared_ptr< RooAbsL > ; likelihood . ). Definition at line 32 of file RooRealL.cxx. ◆ RooRealL() [2/2]. RooFit::TestStatistics::RooRealL::RooRealL ; (; const RooRealL & ; other, . const char * ; name = nullptr . ). Definition at line 42 of file RooRealL.cxx. Member Function Documentation. ◆ Class(). static TClass * RooFit::TestStatistics::RooRealL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooFit::TestStatistics::RooRealL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooFit::TestStatistics::RooRealL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 55 of file RooRealL.h. ◆ clone(). TObject * RooFit::TestStatistics::RooRealL::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 33 of file RooRealL.h. ◆ DeclFileName(). static const char * RooFit::TestStatistics::RooRealL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 55 of file RooRealL.h. ◆ defaultErrorLevel(). double RooFit::TestStatistics::RooRealL::defaultErrorLevel ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 42 of file RooRealL.h. ◆ ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html:60909,Test,TestStatistics,60909,doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,https://root.cern,https://root.cern/doc/master/classRooFit_1_1TestStatistics_1_1RooRealL.html,1,['Test'],['TestStatistics']
Testability," bool importWorkspaceHook (RooWorkspace &ws);  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSuperCategory.html:17007,test,testArg,17007,doc/master/classRooSuperCategory.html,https://root.cern,https://root.cern/doc/master/classRooSuperCategory.html,2,"['Test', 'test']","['Test', 'testArg']"
Testability," box. We also provide a convenience function, SetAABoundingBox(), for simpler case of setting an axis aligned bounding box. Master/Local Reference Frames; The Core section of TBuffer3D contains two members relating to reference frames: fLocalFrame & fLocalMaster. fLocalFrame indicates if any positions in the buffer (bounding box and tessellation vertexes) are in local or master (world frame). fLocalMaster is a standard 4x4 translation matrix (OpenGL column major ordering) for placing the object into the 3D master frame.; If fLocalFrame is kFALSE, fLocalMaster should contain an identity matrix. This is set by default, and can be reset using SetLocalMasterIdentity() function. Logical & Physical Objects; There are two cases of object addition:. Add this object as a single independent entity in the world reference frame.; Add a physical placement (copy) of this logical object (described in local reference frame). The second case is very typical in geometry packages, GEANT4, where we have very large number repeated placements of relatively few logical (unique) shapes. Some viewers (OpenGL only at present) are able to take advantage of this by identifying unique logical shapes from the fID logical ID member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching with considerable performance gains in these cases.; For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. The viewer indicates this through the interface method PreferLocalFrame(); TVirtualViewer3D::PreferLocalFramevirtual Bool_t PreferLocalFrame() const =0; If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualViewer3D.html:7521,log,logical,7521,doc/master/classTVirtualViewer3D.html,https://root.cern,https://root.cern/doc/master/classTVirtualViewer3D.html,1,['log'],['logical']
Testability," buffer, Int_t length, ESendRecvOptions opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TPSocket(TInetAddress address, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(TInetAddress address, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, const char* service, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, Int_t tcpwindowsize = -1); TPSocket(const char* host, Int_t port, Int_t size, TSocket* sock); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPSocket.html:7261,Test,TestBit,7261,root/html602/TPSocket.html,https://root.cern,https://root.cern/root/html602/TPSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," buffer.Definition TString.cxx:1401; TString::ClobberSsiz_t Clobber(Ssiz_t nc)Clear string and make sure it has a capacity of nc.Definition TString.cxx:1246; TString::Clonevoid Clone(Ssiz_t nc)Make self a distinct copy with capacity of at least tot, where tot cannot be smaller than the current...Definition TString.cxx:1279; TString::SetSizevoid SetSize(Ssiz_t s)Definition TString.h:248; TString::Zerovoid Zero()Definition TString.h:264; TString::SetLongPointervoid SetLongPointer(char *p)Definition TString.h:251; TString::GetLongSizeSsiz_t GetLongSize() constDefinition TString.h:247; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::Classstatic TClass * Class(); TString::GetInitialCapacitystatic Ssiz_t GetInitialCapacity()Definition TString.cxx:1568; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::AssertElementvoid AssertElement(Ssiz_t nc) constCheck to make sure a string index is in range.Definition TString.cxx:1208; TString::ReadBuffervirtual void ReadBuffer(char *&buffer)Read string from I/O buffer.Definition TString.cxx:1331; TString::IsAlnumBool_t IsAlnum() constReturns true if all characters in string are alphanumeric.Definition TString.cxx:1813; TString::FormImpvoid FormImp(const char *fmt, va_list ap)Formats a string using a printf style format descriptor.Definition TString.cxx:2310; TString::GetPointerchar * GetPointer()Definition TString.h:256; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TString::Recommendstatic Ssiz_t Recommend(Ssiz_t s)Definition TString.h:234; TString::AtollLong64_t Atoll() constReturn long long value of string.Definition TString.cxx:2014; TSubStringA zero length substring is legal.Definition TString.h:85; TSubString::TSubStringTSubString(const TString &s, Ssiz_t start, Ssiz_t len)Private constructor.Definition TString.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:105417,Assert,AssertElementvoid,105417,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,2,['Assert'],"['AssertElement', 'AssertElementvoid']"
Testability," bufsize); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDirectoryFile::SetModified(); virtual voidTDirectory::SetMother(TObject* mother); virtual voidTDirectory::SetName(const char* newname); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual Int_tTDirectoryFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0); virtual Int_tTDirectoryFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsize = 0) const; virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteTObject(const TObject* obj, const char* name = 0, Option_t* option = """", Int_t bufsize = 0); RooWorkspace::WSDirWSDir(const char* name, const char* title, RooWo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__WSDir.html:9485,Test,TestBits,9485,root/html534/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__WSDir.html,1,['Test'],['TestBits']
Testability," but I can't include Type.h here. size_t FunctionMemberSize(Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. * FunctionMemberByNameAndSignature will return the member with the name,; * optionally the signature of the function may be given as a type; * @param name of function member; * @param signature of the member function; * @modifiers_mask When matching, do not compare the listed modifiers; * @return reflection information of the function member. this overloading is unfortunate but I can't include Type.h here. * FunctionMemberSize will return the number of function members of; * this type; * @return number of function members. void GenerateDict(Reflex::DictionaryGenerator& generator) const. * GenerateDict will produce the dictionary information of this type; * @param generator a reference to the dictionary generator instance. bool HasBase(const Reflex::Type& cl) const. * HasBase will check whether this class has a base class given; * as argument; * @param cl the base-class to check for; * @return the Base info if it is found, an empty base otherwise (can be tested for bool). bool IsPrivate() const. * IsPrivate will check if the scope access is private; * @return true if scope access is private. bool IsProtected() const. * IsProtected will check if the scope access is protected; * @return true if scope access is protected. bool IsPublic() const. * IsPublic will check if the scope access is public; * @return true if scope access is public. Member LookupMember(const string& nam) const. * LookupMember will lookup a member in the current scope; * @param nam the string representation of the member to lookup; * @return if a matching member is found return it, otherwise return empty member. Type LookupType(const string& nam) const. * LookupType will lookup a type in the current scope; * @param nam the string representation of the type to lookup; * @return if a matching type is found return it, otherwise return empty type. Scope LookupScope(const string& nam) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__Scope.html:14009,test,tested,14009,root/html526/Reflex__Scope.html,https://root.cern,https://root.cern/root/html526/Reflex__Scope.html,5,['test'],['tested']
Testability," by Benchmark name. ; Definition at line 117 of file TBenchmark.cxx. ◆ GetRealTime(). Float_t TBenchmark::GetRealTime ; (; const char * ; name). Returns Realtime used by Benchmark name. ; Definition at line 127 of file TBenchmark.cxx. ◆ IsA(). TClass * TBenchmark::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 56 of file TBenchmark.h. ◆ operator=(). TBenchmark & TBenchmark::operator= ; (; const TBenchmark & ; bm). protected . Assignment operator. ; Definition at line 64 of file TBenchmark.cxx. ◆ Print(). void TBenchmark::Print ; (; Option_t * ; name = """"); const. overridevirtual . Prints parameters of Benchmark name. ; Reimplemented from TObject.; Definition at line 137 of file TBenchmark.cxx. ◆ Reset(). void TBenchmark::Reset ; (; ). virtual . Reset all Benchmarks. ; Definition at line 147 of file TBenchmark.cxx. ◆ Show(). void TBenchmark::Show ; (; const char * ; name). virtual . Stops Benchmark name and Prints results. ; Definition at line 155 of file TBenchmark.cxx. ◆ Start(). void TBenchmark::Start ; (; const char * ; name). virtual . Starts Benchmark with the specified name. ; An independent timer (see class TStopwatch) is started. The name of the benchmark is entered into the list of benchmarks. Benchmark can be stopped via TBenchmark::Stop(). Results can be printed via TBenchmark::Print(). TBenchmark::Show() can be used to stop benchmark and print results. If name is an already existing benchmark, timing will resume. A summary of all benchmarks can be seen via TBenchmark::Summary(). ; Definition at line 172 of file TBenchmark.cxx. ◆ Stop(). void TBenchmark::Stop ; (; const char * ; name). virtual . Terminates Benchmark with specified name. ; Definition at line 201 of file TBenchmark.cxx. ◆ Streamer(). void TBenchmark::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBenchmark::Stre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:14737,Benchmark,Benchmark,14737,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['Benchmark'],['Benchmark']
Testability," by Rene Brun. ; Definition at line 1846 of file TMath.cxx. ◆ StruveL0(). Double_t TMath::StruveL0 ; (; Double_t ; x). Struve functions of order 1. ; Modified Struve Function of Order 0.; AuthorKirill Filimonov. ; Definition at line 1923 of file TMath.cxx. ◆ StruveL1(). Double_t TMath::StruveL1 ; (; Double_t ; x). Modified Struve functions of order 0. ; Modified Struve Function of Order 1.; AuthorKirill Filimonov. ; Definition at line 1970 of file TMath.cxx. ◆ Student(). Double_t TMath::Student ; (; Double_t ; T, . Double_t ; ndf . ). Computes density function for Student's t- distribution (the probability function (integral of density) is computed in StudentI). ; First parameter stands for x - the actual variable of the density function p(x) and the point at which the density is calculated. Second parameter stands for number of degrees of freedom.; About Student distribution: Student's t-distribution is used for many significance tests, for example, for the Student's t-tests for the statistical significance of difference between two sample means and for confidence intervals for the difference between two population means.; Example: suppose we have a random sample of size n drawn from normal distribution with mean Mu and st.deviation Sigma. Then the variable; t = (sample_mean - Mu)/(sample_deviation / sqrt(n)); has Student's t-distribution with n-1 degrees of freedom.; NOTE that this function's second argument is number of degrees of freedom, not the sample size.; As the number of degrees of freedom grows, t-distribution approaches Normal(0,1) distribution.; AuthorAnna Kreshuk ; Definition at line 2623 of file TMath.cxx. ◆ StudentI(). Double_t TMath::StudentI ; (; Double_t ; T, . Double_t ; ndf . ). Calculates the cumulative distribution function of Student's t-distribution second parameter stands for number of degrees of freedom, not for the number of samples if x has Student's t-distribution, the function returns the probability of x being less than T. ; This is e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:85091,test,tests,85091,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,2,['test'],['tests']
Testability," by default, standard Cauchy distribution is used (t=0, s=1) ;  ; constexpr Double_t Ccgs ();  \( cm s^{-1} \) ;  ; Double_t Ceil (Double_t x);  Rounds x upward, returning the smallest integral value that is not less than x. ;  ; Int_t CeilNint (Double_t x);  Returns the nearest integer of TMath::Ceil(x). ;  ; Double_t ChisquareQuantile (Double_t p, Double_t ndf);  Evaluate the quantiles of the chi-squared probability distribution function. ;  ; Double_t Cos (Double_t);  Returns the cosine of an angle of x radians. ;  ; Double_t CosH (Double_t);  Returns the hyperbolic cosine of x. ;  ; template<typename T > ; T * Cross (const T v1[3], const T v2[3], T out[3]);  Calculates the Cross Product of two vectors: out = [v1 x v2]. ;  ; constexpr Double_t CUncertainty ();  Speed of light uncertainty. ;  ; constexpr Double_t DegToRad ();  Conversion from degree to radian: \( \frac{\pi}{180} \). ;  ; Double_t DiLog (Double_t x);  Modified Struve functions of order 1. ;  ; constexpr Double_t E ();  Base of natural log: \( e \). ;  ; Double_t Erf (Double_t x);  Computation of the error function erf(x). ;  ; Double_t Erfc (Double_t x);  Computes the complementary error function erfc(x). ;  ; Double_t ErfcInverse (Double_t x);  Returns the inverse of the complementary error function. ;  ; Double_t ErfInverse (Double_t x);  Returns the inverse error function. ;  ; constexpr Double_t EulerGamma ();  Euler-Mascheroni Constant. ;  ; Bool_t Even (Long_t a);  Returns true if a is even. ;  ; Double_t Exp (Double_t x);  Returns the base-e exponential function of x, which is e raised to the power x. ;  ; Double_t Factorial (Int_t i);  Computes factorial(n). ;  ; Double_t FDist (Double_t F, Double_t N, Double_t M);  Computes the density function of F-distribution (probability function, integral of density, is computed in FDistI). ;  ; Double_t FDistI (Double_t F, Double_t N, Double_t M);  Calculates the cumulative distribution function of F-distribution (see ROOT::Math::fdistribution_cdf). ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:5893,log,log,5893,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['log'],['log']
Testability," by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods); public:. virtual~ProfileLikelihoodCalculator(); static TClass*Class(); RooStats::CombinedCalculatorRooStats::CombinedCalculator::CombinedCalculator(); RooStats::CombinedCalculatorRooStats::CombinedCalculator::CombinedCalculator(const RooStats::CombinedCalculator&); RooStats::CombinedCalculatorRooStats::CombinedCalculator::CombinedCalculator(RooAbsData& data, const RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); RooStats::CombinedCalculatorRooStats::CombinedCalculator::CombinedCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0, const RooArgSet* altParams = 0, const RooArgSet* nuisParams = 0); virtual Double_tRooStats::CombinedCalculator::ConfidenceLevel() const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__ProfileLikelihoodCalculator.html:2164,test,test-statistic,2164,root/html602/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__ProfileLikelihoodCalculator.html,2,['test'],['test-statistic']
Testability," by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods); public:. virtual~ProfileLikelihoodCalculator(); static TClass*Class(); virtual Double_tRooStats::CombinedCalculator::ConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::LikelihoodInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::ProfileLikelihoodCalculator&operator=(const RooStats::ProfileLikelihoodCalculator&); RooStats::ProfileLikelihoodCalculatorProfileLikelihoodCalculator(); RooStats::ProfileLikelihoodCalculatorProfileLikelihoodCalculator(const RooStats::ProfileLikelihoodCalculator&); RooStats::ProfileLikelihoodCalculatorProfileLikelihoodCalculator(RooAbsData& data, RooStats::ModelConfig& model, Double_t size = 0.05); RooStats::ProfileLikelihoodCalculatorProfileLikelihoodCalculator(RooAbsData& data, RooAbsPdf& pdf,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html:2154,test,test-statistic,2154,root/html528/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__ProfileLikelihoodCalculator.html,4,['test'],['test-statistic']
Testability," by specifying:. a model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of interest. The nuisance parameters will be all other parameters of the model ; a set of parameters of which specify the null hypothesis (including values and const/non-const status) . The interface allows one to pass the model, data, and parameters either directly or via a ModelConfig class.; The alternate hypothesis leaves the parameter free to take any value other than those specified by the null hypotesis. There is therefore no need to ; specify the alternate parameters. . After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods); public:. virtual~ProfileLikelihoodCalculator(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tRooStats::CombinedCalculator::ConfidenceLevel() const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html:2179,test,test-statistic,2179,root/html526/RooStats__ProfileLikelihoodCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__ProfileLikelihoodCalculator.html,1,['test'],['test-statistic']
Testability," by the extrusion of an arbitrary polygon with fixed outline between s...Definition TGeoXtru.h:22; TGeoXtru::Classstatic TClass * Class(); TLockGuardDefinition TVirtualMutex.h:70; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:207; TRegexpRegular expression class.Definition TRegexp.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; double; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RGeomSignalFunc_tstd::function< void(const std::string &)> RGeomSignalFunc_tDefinition RGeomData.hxx:208; ROOT::RGeomLogExperimental::RLogChannel & RGeomLog()Log channel for Geomviewer diagnostics.Definition RGeomData.cxx:49; ROOT::RGeomScanFunc_tstd::function< bool(RGeomNode &, std::vector< int > &, bool, int)> RGeomScanFunc_tDefinition RGeomData.hxx:206; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3687. geomwebviewersrcRGeomData.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RGeomData_8cxx_source.html:95716,Log,Log,95716,doc/v632/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RGeomData_8cxx_source.html,1,['Log'],['Log']
Testability," by; (9). Thus, using the Gram-Schmidt orthogonalisation, we; can decide if we want to include this function in the final model,; before the matrix inversion.; . Function Selection Based on Residual; . Supposing that steps of the procedure have been performed, the; problem now is to consider the ; function.; ; The sum of squares of residuals can be written as; . (12). where the relation (9) have been taken into account. The; contribution of the ; function to the reduction of S, is; given by; . (13). Two test are now applied to decide whether this . function is to be included in the final expression, or not.; . Test 1; . Denoting by the subspace spanned by; ; the function ; is; by construction (see (4)) the projection of the function; onto the direction perpendicular to . Now, if the; length of ; (given by ; ); is very small compared to the length of ; this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle).; . Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2; . Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle; ; between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle); ; However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of are chosen first; (TMultiDimFit::TestFunction).; ; In case isn't defined, an alternative method of; performing this second test is used: The ; function; ; is accepted if (refer also to equation (13)); . (14). where is the sum of the first ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:7371,test,test,7371,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability," bytes; Double32_t Double 8 bytes in memory, written as a Float 4 bytes; Bool_t Boolean (0=false, 1=true). If you do not want to save a variable on disk, you can use int or Int_t, the result will be the same and the interpreter or the compiler will treat them in exactly the same way.; 2.5.3 TObject; In ROOT, almost all classes inherit from a common base class called TObject. This kind of architecture is also used in the Java language. The TObject class provides default behavior and protocol for all objects in the ROOT system. The main advantage of this approach is that it enforces the common behavior of the derived classes and consequently it ensures the consistency of the whole system. See “The Role of TObject”.; TObject provides protocol, i.e. (abstract) member functions, for:. Object I/O (Read(), Write()); Error handling (Warning(), Error(), SysError(), Fatal()); Sorting (IsSortable(), Compare(), IsEqual(), Hash()); Inspection (Dump(), Inspect()); Printing (Print()); Drawing (Draw(), Paint(), ExecuteEvent()); Bit handling (SetBit(), TestBit()); Memory allocation (operatornew and delete, IsOnHeap()); Access to meta information (IsA(), InheritsFrom()); Object browsing (Browse(), IsFolder()). 2.6 Global Variables; ROOT has a set of global variables that apply to the session. For example, gDirectory always holds the current directory, and gStyle holds the current style.; All global variables begin with “g” followed by a capital letter.; 2.6.1 gROOT; The single instance of TROOT is accessible via the global gROOT and holds information relative to the current session. By using the gROOT pointer, you get the access to every object created in a ROOT program. The TROOT object has several lists pointing to the main ROOT objects. During a ROOT session, the gROOT keeps a series of collections to manage objects. They can be accessed via gROOT::GetListOf... methods.; gROOT->GetListOfClasses(); gROOT->GetListOfColors(); gROOT->GetListOfTypes(); gROOT->GetListOfGlobals(); gROOT->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:59361,Test,TestBit,59361,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['TestBit']
Testability," bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti)SIGNAL ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReinitSelector(TQueryResult* qr); virtual voidRemoveQueryResult(const char* ref); voidTObject::ResetBit(UInt_t f); virtual voidRestorePreviousQuery(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCurrentQuery(TQueryResult* q); virtual voidSetDispatchTimer(Bool_t on = kTRUE); virtual voidSetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInitTime(); virtual voidSetMaxDrawQueries(Int_t max); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStoreFeedback(TObject* slave, TList* out); virtual voidStoreOutput(TList* out); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualProofPlayer.html:10065,Test,TestBit,10065,root/html528/TVirtualProofPlayer.html,https://root.cern,https://root.cern/root/html528/TVirtualProofPlayer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," c#define c(i)Definition RSha256.hxx:101; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; v@ vDefinition rootcling_impl.cxx:3699; Example: gStyle->SetOptFit(1011);; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; print fit probability, parameter names/values and errors. When ""v"" = 1 is specified, only the non-fixed parameters are shown.; When ""v"" = 2 all parameters are shown. Note: gStyle->SetOptFit(1) means ""default value"", so it is equivalent to gStyle->SetOptFit(111). Statistics box editing; The following example show how to remove and add a line in a statistics box.; ; TCanvas *statsEditing() {; // Create and plot a test histogram with stats; TCanvas *se = new TCanvas;; TH1F *h = new TH1F(""h"",""test"",100,-3,3);; h->FillRandom(""gaus"",3000);; gStyle->SetOptStat();; h->Draw();; se->Update();; ; // Retrieve the stat box; TPaveStats *ps = (TPaveStats*)se->GetPrimitive(""stats"");; ps->SetName(""mystats"");; TList *listOfLines = ps->GetListOfLines();; ; // Remove the RMS line; TText *tconst = ps->GetLineWith(""RMS"");; listOfLines->Remove(tconst);; ; // Add a new line in the stat box.; // Note that ""="" is a control character; TLatex *myt = new TLatex(0,0,""Test = 10"");; myt ->SetTextFont(42);; myt ->SetTextSize(0.04);; myt ->SetTextColor(kRed);; listOfLines->Add(myt);; ; // the following line is needed to avoid that the automatic redrawing of stats; h->SetStats(0);; ; se->Modified();; return se;; }; kRed@ kRedDefinition Rtypes.h:66; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::Updatev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveStats.html:7024,test,test,7024,doc/master/classTPaveStats.html,https://root.cern,https://root.cern/doc/master/classTPaveStats.html,2,['test'],['test']
Testability," cache if active.; Return kTRUE in case of error. void FillBuffer(char*& buffer); Encode file output buffer.; The file output buffer contains only the FREE data record. Int_t GetBestBuffer() const; Return the best buffer size of objects on this file.; The best buffer size is estimated based on the current mean value; and standard deviation of all objects written so far to this file.; Returns mean value + one standard deviation. Float_t GetCompressionFactor(); Return the file compression factor.; Add total number of compressed/uncompressed bytes for each key.; return ratio of the two. Int_t GetErrno() const; Method returning errno. Is overriden in TRFIOFile. void ResetErrno() const; Method resetting the errno. Is overridden in TRFIOFile. TFileCacheRead * GetCacheRead() const; Return a pointer to the current read cache. TFileCacheWrite * GetCacheWrite() const; Return a pointer to the current write cache. Int_t GetRecordHeader(char* buf, Long64_t first, Int_t maxbytes, Int_t& nbytes, Int_t& objlen, Int_t& keylen); Read the logical record header starting at position first.; Maxbytes bytes are read into buf the function reads nread bytes; where nread is the minimum of maxbytes and the number of bytes; before the end of file. The function returns nread.; In output arguments:; nbytes : number of bytes in record; if negative, this is a deleted record; if 0, cannot read record, wrong value of argument first; objlen : uncompressed object size; keylen : length of logical record header; Note that the arguments objlen and keylen are returned only; if maxbytes >=16. Long64_t GetSize() const; Returns the current file size. Returns -1 in case the file could not; be stat'ed. const TList * GetStreamerInfoCache(); Returns the cached list of StreamerInfos used in this file. TList * GetStreamerInfoList(); Read the list of TStreamerInfo objects written to this file.; The function returns a TList. It is the user'responsability; to delete the list created by this function. Using the list, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:29630,log,logical,29630,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,3,['log'],['logical']
Testability," cache. void inline InitializeCompressedBuffer(Int_t len, TFile* file); Initialize the compressed buffer; either from the TTree or create a local one. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& ); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBasket.html:11644,log,logical,11644,root/html534/TBasket.html,https://root.cern,https://root.cern/root/html534/TBasket.html,3,['log'],['logical']
Testability," cache. void inline InitializeCompressedBuffer(Int_t len, TFile* file); Initialize the compressed buffer; either from the TTree or create a local one. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.); Reduce memory used by fEntryOffset and the TBuffer if needed .. void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBasket.html:11591,log,logical,11591,root/html532/TBasket.html,https://root.cern,https://root.cern/root/html532/TBasket.html,1,['log'],['logical']
Testability," calculation. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments; FitGauss(Bool_t flag) -- Add a gaussian fit to the frame. If no frame specifications are given, the AutoSymRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Double_t hi, Int_t nBins = 100); Create a RooPlot of the -log(L) distribution in the range lo-hi; with 'nBins' bins. RooPlot* plotError(const RooRealVar& param, Double_t lo, Double_t hi, Int_t nbins = 100); Create a RooPlot of the distribution of the fitted errors of the given parameter.; The frame is created with a range [lo,hi] and plotted data will be binned in 'nbins' bins. RooPlot* plotPull(const RooRealVar& param, Double_t lo = -3., Double_t hi = 3., Int_t nbins = 25, Bool_t fitGauss = kFALSE); Create a RooPlot of the pull distribution for the given; parameter. The range lo-hi is plotted in nbins. If fitGauss is; set, an unbinned ML fit of the distribution to a Gaussian p.d.f; is performed. The fit result is overlaid on the returned RooPlot; and a box with the fitted mean and sigma is added. RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMCStudy.html:26637,log,log,26637,root/html602/RooMCStudy.html,https://root.cern,https://root.cern/root/html602/RooMCStudy.html,2,['log'],['log']
Testability," calculation. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments; FitGauss(Bool_t flag) -- Add a gaussian fit to the frame. If no frame specifications are given, the AutoSymRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Double_t hi, Int_t nBins = 100); Create a RooPlot of the -log(L) distribution in the range lo-hi; with 'nBins' bins. RooPlot* plotError(const RooRealVar& param, Double_t lo, Double_t hi, Int_t nbins = 100); Create a RooPlot of the distribution of the fitted errors of the given parameter.; The frame is created with a range [lo,hi] and plotted data will be binned in 'nbins' bins. RooPlot* plotPull(const RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); Create a RooPlot of the pull distribution for the given; parameter. The range lo-hi is plotted in nbins. If fitGauss is; set, an unbinned ML fit of the distribution to a Gaussian p.d.f; is performed. The fit result is overlaid on the returned RooPlot; and a box with the fitted mean and sigma is added. RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMCStudy.html:25686,log,log,25686,root/html526/RooMCStudy.html,https://root.cern,https://root.cern/root/html526/RooMCStudy.html,1,['log'],['log']
Testability," calculation. This function accepts the following optional arguments; FrameRange(double lo, double hi) -- Set range of frame to given specification; FrameBins(int bins) -- Set default number of bins of frame to given number; Frame(...) -- Pass supplied named arguments to RooAbsRealLValue::frame() function. See frame() function; for list of allowed arguments; FitGauss(Bool_t flag) -- Add a gaussian fit to the frame. If no frame specifications are given, the AutoSymRange() feature will be used to set the range; Any other named argument is passed to the RooAbsData::plotOn() call. See that function for allowed options. RooPlot* makeFrameAndPlotCmd(const RooRealVar& param, RooLinkedList& cmdList, Bool_t symRange = kFALSE) const; Internal function. Construct RooPlot from given parameter and modify the list of named; arguments 'cmdList' to only contain the plot arguments that should be forwarded to; RooAbsData::plotOn(). RooPlot* plotNLL(Double_t lo, Double_t hi, Int_t nBins = 100); Create a RooPlot of the -log(L) distribution in the range lo-hi; with 'nBins' bins. RooPlot* plotError(const RooRealVar& param, Double_t lo, Double_t hi, Int_t nbins = 100); Create a RooPlot of the distribution of the fitted errors of the given parameter.; The frame is created with a range [lo,hi] and plotted data will be binned in 'nbins' bins. RooPlot* plotPull(const RooRealVar& param, Double_t lo = -3.0, Double_t hi = 3.0, Int_t nbins = 25, Bool_t fitGauss = kFALSE); Create a RooPlot of the pull distribution for the given; parameter. The range lo-hi is plotted in nbins. If fitGauss is; set, an unbinned ML fit of the distribution to a Gaussian p.d.f; is performed. The fit result is overlaid on the returned RooPlot; and a box with the fitted mean and sigma is added. RooMCStudy(const RooAbsPdf& model, const RooArgSet& observables, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCStudy.html:26100,log,log,26100,root/html528/RooMCStudy.html,https://root.cern,https://root.cern/root/html528/RooMCStudy.html,4,['log'],['log']
Testability," can be recovered, the file will be declared Zombie by; 2017/// the calling function. This function is automatically called when; 2018/// opening a file.; 2019/// If the file is open in read only mode, the file is not modified.; 2020/// If open in update mode and the function finds something to recover,; 2021/// a new directory header is written to the file. When opening the file gain; 2022/// no message from Recover will be reported.; 2023/// If keys have been recovered, the file is usable and you can safely; 2024/// read the corresponding objects.; 2025/// If the file is not usable (a zombie), you can test for this case; 2026/// with code like:; 2027///; 2028/// ~~~{.cpp}; 2029/// TFile f(""myfile.root"");; 2030/// if (f.IsZombie()) {<actions to take if file is unusable>}; 2031/// ~~~; 2032///; 2033/// If the file has been recovered, the bit kRecovered is set in the TFile object in memory.; 2034/// You can test if the file has been recovered with; 2035///; 2036/// if (f.TestBit(TFile::kRecovered)) {... the file has been recovered}; 2037///; 2038/// When writing TTrees to a file, it is important to save the Tree header; 2039/// at regular intervals (see TTree::AutoSave). If a file containing a Tree; 2040/// is recovered, the last Tree header written to the file will be used.; 2041/// In this case all the entries in all the branches written before writing; 2042/// the header are valid entries.; 2043/// One can disable the automatic recovery procedure by setting; 2044///; 2045/// TFile.Recover 0; 2046///; 2047/// in the <em>system.rootrc</em> file.; 2048 ; 2049Int_t TFile::Recover(); 2050{; 2051 Short_t keylen,cycle;; 2052 UInt_t datime;; 2053 Int_t nbytes,date,time,objlen,nwheader;; 2054 Long64_t seekkey,seekpdir;; 2055 char header[1024];; 2056 char *buffer, *bufread;; 2057 char nwhc;; 2058 Long64_t idcur = fBEGIN;; 2059 ; 2060 Long64_t size;; 2061 if ((size = GetSize()) == -1) { // NOLINT: silence clang-tidy warnings; 2062 Error(""Recover"", ""cannot stat the file %s"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:72784,Test,TestBit,72784,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Test'],['TestBit']
Testability," canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  pavetext.C;   Draw a pave text. ;  ; file  perceptualcolormap.C;   A “Perceptual” colormap explicitly identifies a fixed value in the data ;  ; file  piechart.C;   Pie chart example. ;  ; file  polytest1.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  polytest2.C;   This macro is testing the ""compacting"" algorithm in TPadPainter. ;  ; file  pstable.C;   Display all possible types of ROOT/Postscript characters. ;  ; file  psview.C;   An example how to display PS, EPS, PDF files in canvas. ;  ; file  quarks.C;   Example illustrating divided pads and Latex. ;  ; file  save_batch.C;  This macro demonstrates batch image mode of web canvas When enabled - several images converted into JSON before all together provided to headless browser to produce image files. ;  ; file  saveall.C;   Creates many canvases and save as images or pdf. ;  ; file  schroedinger_hydrogen.C;   Plot the Amplitude of a Hydrogen Atom. ;  ; file  tmathtext.C;  This macro draws various formula in a canvas. ;  ; file  tmathtext2.C;   This macro draw all possible symbols provided by TMathtext. ;  ; file  tornado.C;   Show 3-d polymarker. ;  ; file  transparency.C;   This macro demonstrates the use of color transparency. ;  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphics.html:3271,test,testing,3271,doc/master/group__tutorial__graphics.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html,1,['test'],['testing']
Testability," capacity. If nc != current capacity Clone() the string; in a string with the desired capacity. int CompareTo(const char* cs, TString::ECaseCompare cmp = kExact) const; Compare a string to char *cs2. int CompareTo(const TString& st, TString::ECaseCompare cmp = kExact) const; Compare a string to another string. Int_t CountChar(Int_t c) const; Return number of times character c occurs in the string. TString Copy() const; Copy a string. UInt_t Hash(TString::ECaseCompare cmp = kExact) const; Return hash value. UInt_t Hash(const void* txt, Int_t ntxt); Calculates hash index from any char string. (static function); Based on precalculated table of 256 specially selected numbers.; These numbers are selected in such a way, that for string; length == 4 (integer number) the hash is unambigous, i.e.; from hash value we can recalculate input (no degeneration). The quality of hash method is good enough, that; ""random"" numbers made as R = Hash(1), Hash(2), ...Hash(N); tested by <R>, <R*R>, <Ri*Ri+1> gives the same result; as for libc rand(). For string: i = TString::Hash(string,nstring);; For int: i = TString::Hash(&intword,sizeof(int));; For pointer: i = TString::Hash(&pointer,sizeof(void*));. V.Perev. Ssiz_t Index(const char* pat, Ssiz_t patlen, Ssiz_t i, TString::ECaseCompare cmp) const; Search for a string in the TString. Plen is the length of pattern,; startIndex is the index from which to start and cmp selects the type; of case-comparison. Bool_t MaybeRegexp() const; Returns true if string contains one of the regexp characters ""^$.[]*+?"". Bool_t MaybeWildcard() const; Returns true if string contains one of the wildcard characters ""[]*?"". TString& Prepend(char c, Ssiz_t rep = 1); Prepend characters to self. TString & Replace(Ssiz_t pos, Ssiz_t n, const char* s, Ssiz_t ns); Remove at most n1 characters from self beginning at pos,; and replace them with the first n2 characters of cs. TString& ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); Find & Replace ls1 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TString.html:10103,test,tested,10103,root/html528/TString.html,https://root.cern,https://root.cern/root/html528/TString.html,1,['test'],['tested']
Testability," case of empty bin they could be merged in a single larger bin; 514 Return a NULL pointer if the bin width is not stored; 515 */; 516 // not threadsafe, to be replaced with never constructs!; 517 // for example: just return std::array or std::vector, there's; 518 // is going to be only minor overhead in c++11.; 519 const double* BinUpEdge( unsigned int ipoint ) const; 520 {; 521 if ( fBinEdge.empty() || ipoint > fBinEdge.front().size() ); 522 return nullptr;; 523 ; 524 GetBinUpEdgeCoordinates(ipoint, fpTmpBinEdgeVector);; 525 ; 526 return fpTmpBinEdgeVector;; 527 }; 528 ; 529 /**; 530 * Thread save version of function retrieving the bin up-edge in case of multidimensions; 531 */; 532 void GetBinUpEdgeCoordinates(unsigned int ipoint, double * x) const; 533 {; 534 if (fBinEdge.empty() || ipoint > fBinEdge.front().size()) return;; 535 assert(!fBinEdge.empty());; 536 assert(ipoint < fMaxPoints);; 537 for (unsigned int i = 0; i < fDim; i++) {; 538 x[i] = fBinEdge[i][ipoint];; 539 }; 540 }; 541 ; 542 /**; 543 query if the data store the bin edges instead of the center; 544 */; 545 bool HasBinEdges() const {; 546 return fBinEdge.size() == fDim && !fBinEdge[0].empty();; 547 }; 548 ; 549 /**; 550 retrieve the reference volume used to normalize the data when the option bin volume is set; 551 */; 552 double RefVolume() const { return fRefVolume; }; 553 ; 554 /**; 555 set the reference volume used to normalize the data when the option bin volume is set; 556 */; 557 void SetRefVolume(double value) { fRefVolume = value; }; 558 ; 559 /**; 560 retrieve the errortype; 561 */; 562 ErrorType GetErrorType( ) const; 563 {; 564 return fErrorType;; 565 }; 566 ; 567 /**; 568 compute the total sum of the data content; 569 (sum of weights in case of weighted data set); 570 */; 571 double SumOfContent() const { return fSumContent; }; 572 ; 573 /**; 574 compute the total sum of the error square; 575 (sum of weight square in case of a weighted data set); 576 */; 577 double SumOfError2() const { ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:19118,assert,assert,19118,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability," case. ; Implements RooAbsLValue.; Definition at line 133 of file RooErrorVar.cxx. ◆ getValV(). double RooErrorVar::getValV ; (; const RooArgSet * ; set = nullptr); const. overridevirtual . Return value, i.e. error on input variable. ; Reimplemented from RooAbsReal.; Definition at line 70 of file RooErrorVar.cxx. ◆ hasBinning(). bool RooErrorVar::hasBinning ; (; const char * ; name); const. overridevirtual . Return true if we have binning with given name. ; Implements RooAbsRealLValue.; Definition at line 80 of file RooErrorVar.cxx. ◆ IsA(). TClass * RooErrorVar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsRealLValue.; Definition at line 101 of file RooErrorVar.h. ◆ isFundamental(). bool RooErrorVar::isFundamental ; (; ); const. inlineoverridevirtual . Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ; Note that this test is subtlely different from the dynamic isDerived() test, e.g. a constant is not derived but is also not fundamental. ; Reimplemented from RooAbsArg.; Definition at line 51 of file RooErrorVar.h. ◆ operator=(). RooAbsArg & RooAbsRealLValue::operator= ; (; double ; newValue). virtual . Assignment operator from a double. ; Reimplemented from RooAbsRealLValue.; Definition at line 46 of file RooAbsRealLValue.cxx. ◆ readFromStream(). bool RooErrorVar::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from given stream. ; Reimplemented from RooAbsRealLValue.; Definition at line 289 of file RooErrorVar.cxx. ◆ removeMax(). void RooErrorVar::removeMax ; (; const char * ; name = nullptr). Remove upper bound from named binning, or default binning if name is null. ; Definition at line 152 of file RooErrorVar.cxx. ◆ removeMin(). void RooErrorVar::removeMin ; (; const char * ; name = nullptr). Remove lower bound from named binning, or defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooErrorVar.html:73373,test,test,73373,doc/master/classRooErrorVar.html,https://root.cern,https://root.cern/doc/master/classRooErrorVar.html,2,['test'],['test']
Testability," cbShape(double m, double m0, double sigma, double alpha, double n)Definition MathFuncs.h:382; RooFit::Detail::MathFuncs::polynomialdouble polynomial(double const *coeffs, int nCoeffs, int lowestOrder, double x)In pdfMode, a coefficient for the constant term of 1.0 is implied if lowestOrder > 0.Definition MathFuncs.h:130; RooFit::Detail::MathFuncs::recursiveFractiondouble recursiveFraction(double *a, unsigned int n)Definition MathFuncs.h:371; RooFit::Detail::MathFuncs::constraintSumdouble constraintSum(double const *comp, unsigned int compSize)Definition MathFuncs.h:163; RooFit::Detail::MathFuncs::cbShapeIntegraldouble cbShapeIntegral(double mMin, double mMax, double m0, double sigma, double alpha, double n)Definition MathFuncs.h:649; RooFit::Detail::MathFuncs::fast_fmadouble fast_fma(double x, double y, double z) noexceptuse fast FMA if available, fall back to normal arithmetic if notDefinition MathFuncs.h:500; RooFit::Detail::MathFuncs::logNormalIntegralStandarddouble logNormalIntegralStandard(double xMin, double xMax, double mu, double sigma)Definition MathFuncs.h:638; RooFit::Detail::MathFuncs::landaudouble landau(double x, double mu, double sigma)Definition MathFuncs.h:331; RooFit::Detail::MathFuncs::gaussiandouble gaussian(double x, double mean, double sigma)Function to evaluate an un-normalized RooGaussian.Definition MathFuncs.h:86; RooFit::Detail::MathFuncs::productdouble product(double const *factors, std::size_t nFactors)Definition MathFuncs.h:93; RooFit::Detail::MathFuncs::chebychevdouble chebychev(double *coeffs, unsigned int nCoeffs, double x_in, double xMin, double xMax)Definition MathFuncs.h:139; RooFit::Detail::MathFuncs::poissondouble poisson(double x, double par)Definition MathFuncs.h:198; RooFit::Detail::MathFuncs::binomialdouble binomial(int n, int k)Calculates the binomial coefficient n over k.Definition MathFuncs.h:31; RooFit::Detail::MathFuncs::getUniformBinningunsigned int getUniformBinning(double low, double high, double val, unsigned int num",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:28132,log,logNormalIntegralStandarddouble,28132,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,2,['log'],"['logNormalIntegralStandard', 'logNormalIntegralStandarddouble']"
Testability," chaine, Int_t& err, Int_t offset = 0); Check if the chain as function call. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. void Analyze(const char* schain, Int_t& err, Int_t offset = 0); Analyze a sub-expression in one formula. Expressions in one formula are recursively analyzed.; Result of analysis is stored in the object tables. Table of function codes and errors. * functions :. + 1 pow 20; - 2 sq 21; * 3 sqrt 22; / 4 strstr 23; % 5 min 24; max 25; log 30; cos 10 exp 31; sin 11 log10 32; tan 12; acos 13 abs 41; asin 14 sign 42; atan 15 int 43; atan2 16; fmod 17 rndm 50. cosh 70 acosh 73; sinh 71 asinh 74; tanh 72 atanh 75. expo 100 gaus 110 gausn (see note below); expo(0) 100 0 gaus(0) 110 0 gausn(0); expo(1) 100 1 gaus(1) 110 1 gausn(1); xexpo 100 x xgaus 110 x xgausn; yexpo 101 x ygaus 111 x ygausn; zexpo 102 x zgaus 112 x zgausn; xyexpo 105 x xygaus 115 x xygausn; yexpo(5) 102 5 ygaus(5) 111 5 ygausn(5); xyexpo(2) 105 2 xygaus(2) 115 2 xygausn(2). landau 120 x landaun (see note below); landau(0) 120 0 landaun(0); landau(1) 120 1 landaun(1); xlandau 120 x xlandaun; ylandau 121 x ylandaun; zlandau 122 x zlandaun; xylandau 125 x xylandaun; ylandau(5) 121 5 ylandaun(5); xylandau(2) 125 2 xylandaun(2). pol0 130 x pol1 130 1xx; pol0(0) 130 0 pol1(0) 130 100; pol0(1) 130 1 pol1(1) 130 101; xpol0 130 x xpol1 130 101; ypol0 131 x ypol1 131 101; zpol0 132 x zpol1 132 1xx; ypol0(5) 131 5 ypol1(5) 131 105. pi 40. && 60 < 64; || 61 > 65; == 62 <= 66; != 63 => 67; !",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:15152,log,log,15152,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['log'],['log']
Testability," char * TStatsFeedback::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 44 of file TStatsFeedback.h. ◆ Feedback(). void TStatsFeedback::Feedback ; (; TList * ; objs). Display feedback. ; Definition at line 74 of file TStatsFeedback.cxx. ◆ GetName(). const char * TStatsFeedback::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 41 of file TStatsFeedback.h. ◆ Hash(). ULong_t TStatsFeedback::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498; TStatsFeedback::HashULong_t Hash() const overrideReturn hash value for this object.Definition TStatsFeedback.h:42. Reimplemented from TObject.; Definit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStatsFeedback.html:16498,Test,TestBit,16498,doc/master/classTStatsFeedback.html,https://root.cern,https://root.cern/doc/master/classTStatsFeedback.html,1,['Test'],['TestBit']
Testability," char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:11198,test,test,11198,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability," char *newname) overrideTDirectoryvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetSeekDir(Long64_t)TDirectoryinlinevirtual; SetTitle(const char *title="""")TNamedvirtual; SetTRefAction(TObject *, TObject *)TDirectoryinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetWritable(Bool_t)TDirectoryinlinevirtual; SharedGDirectory_t typedefTDirectoryprotected; Sizeof() const overrideTDirectoryinlinevirtual; Streamer(TBuffer &) overrideTDirectoryvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TDirectoryinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TContextTDirectoryfriend; TDirectory(const TDirectory &directory)=deleteTDirectoryprotected; TDirectory()TDirectory; TDirectory(const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr)TDirectory; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnregisterContext(TContext *ctxt)TDirectoryprotected; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) overrideTDirectoryinlinevirtual; Write(const char *=nullptr, Int_t=0, Int_t=0) const overrideTDirectoryinlinevirtual; WriteDirHeader()TDirectoryinlinevirtual; WriteKeys()TDirectoryinlinevirtual; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObject(const T *obj, const char *name, Option_t *option="""", Int_t bufsize=0)TDirectoryinline; WriteObjectAny(const void *, const char *, const char *, Option_t *="""", Int_t=0)TDirectoryinlinevirtual; WriteObjectAny(const void *, const TClass *, const char *, Option_t *="""", Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectory-members.html:9528,Test,TestBit,9528,doc/master/classTDirectory-members.html,https://root.cern,https://root.cern/doc/master/classTDirectory-members.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char *value);  add attribute to node ;  ; void * AddChild (void *parent, const char *childname, const char *content=nullptr, bool isRootNode=false);  add child node ;  ; Bool_t AddComment (void *node, const char *comment);  ; Bool_t AddRawLine (void *node, const char *raw);  XML helpers. ;  ; std::vector< TMatrixDSym * > * CalcCovarianceMatrices (const std::vector< const Event * > &events, Int_t maxCls, VariableTransformBase *transformBase=nullptr);  ; std::vector< TMatrixDSym * > * CalcCovarianceMatrices (const std::vector< Event * > &events, Int_t maxCls, VariableTransformBase *transformBase=nullptr);  compute covariance matrices ;  ; Bool_t CheckForSilentOption (const TString &) const;  check for ""silence"" option in configuration option string ;  ; Bool_t CheckForVerboseOption (const TString &) const;  check if verbosity ""V"" set in option ;  ; Bool_t CheckSplines (const TH1 *, const TSpline *);  check quality of splining by comparing splines and histograms in each bin ;  ; const TString & Color (const TString &);  human readable color strings ;  ; void ComputeStat (const std::vector< TMVA::Event * > &, std::vector< Float_t > *, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Double_t &, Int_t signalClass, Bool_t norm=kFALSE);  sanity check ;  ; Double_t ComputeVariance (Double_t sumx2, Double_t sumx, Int_t nx);  compute variance from given sums ;  ; Bool_t ContainsRegularExpression (const TString &s);  check if regular expression helper function to search for ""$!%^&()'<>?= "" in a string ;  ; void FormattedOutput (const std::vector< Double_t > &, const std::vector< TString > &, const TString titleVars, const TString titleValues, MsgLogger &logger, TString format=""%+1.3f"");  formatted output of simple table ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &, MsgLogger &logger);  formatted output of matrix (with labels) ;  ; void FormattedOutput (const TMatrixD &, const std::vector< TString > &vert, const std::vector< TString > ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:2724,log,logger,2724,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['log'],['logger']
Testability," char * GetConfFile () const;  ; Float_t GetCpuTime () const;  ; const char * GetDataPoolUrl () const;  ; TMap * GetDataSetQuota (const char *optStr="""");  returns a map of the quotas of all groups ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of queries whose full results are kept in the remote sandbox. ;  ; TFileCollection * GetMissingFiles (TQueryResult *qr=0);  Get a TFileCollection with the files missing in the query described by 'qr' or the last query if qr is null (default). ;  ; Int_t GetNumberOfDrawQueries ();  ; Int_t GetNumberOfQueries ();  Number of queries processed by this session. ;  ; TObject * GetOutput (const char *name);  Get specified object that has been produced during the processing (see Process()). ;  ; TList * GetOutputList ();  Get list with all object created during processing (see Process()). ;  ; TList * GetOutputNames ();  FIXME: to be written. ;  ; Int_t GetParallel () const;  Returns number of slaves active in parallel mode. ;  ; TObject * GetParameter (const c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:11573,log,logs,11573,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['logs']
Testability," char* = 0); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tVerifyDataSet(const char* uri, const char* = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofLite.html:18719,log,loglevel,18719,root/html602/TProofLite.html,https://root.cern,https://root.cern/root/html602/TProofLite.html,2,['log'],['loglevel']
Testability," char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDocMacroDirective&operator=(const TDocMacroDirective&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDocMacroDirective.html:5293,Test,TestBit,5293,root/html530/TDocMacroDirective.html,https://root.cern,https://root.cern/root/html530/TDocMacroDirective.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* dataset = """", const char* opt = ""M""); virtual voidShowDataSetCache(const char* dataset = 0); voidTProof::ShowDataSetQuota(Option_t* opt = 0); virtual voidShowDataSets(const char* uri = """", const char* = 0); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp); voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); Int_tTProof::UploadDataSet(const char* dataset, TList* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Int_tTProof::UploadDataSet(const char* dataset, const char* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Int_tTProof::UploadDataSetFromFile(const char* dataset, const char* file, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tVerifyDataSet(const char* uri, const char* = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:17100,Test,TestBit,17100,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidTStreamerElement::SetArrayDim(Int_t dim); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCountClass(const char* clname); voidSetCountName(const char* name); voidSetCountVersion(Int_t count); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTStreamerElement::SetMaxIndex(Int_t dim, Int_t max); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTStreamerElement::SetNewClass(TClass* cl); virtual voidTStreamerElement::SetNewType(Int_t dtype); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTStreamerElement::SetOffset(Int_t offset); virtual voidTStreamerElement::SetSize(Int_t dsize); virtual voidTStreamerElement::SetStreamer(TMemberStreamer* streamer); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTStreamerElement::SetTObjectOffset(Int_t tobjoffset); virtual voidTStreamerElement::SetType(Int_t dtype); virtual voidTStreamerElement::SetTypeName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTStreamerElement::Update(const TClass* oldClass, TClass* newClass); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TStreamerLoop.html:6764,Test,TestBit,6764,root/html528/TStreamerLoop.html,https://root.cern,https://root.cern/root/html528/TStreamerLoop.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:15698,log,logon,15698,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,1,['log'],['logon']
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2010-10-06 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationServer.html:15857,log,logon,15857,root/html528/TApplicationServer.html,https://root.cern,https://root.cern/root/html528/TApplicationServer.html,1,['log'],['logon']
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplicationServer.html:16008,log,logon,16008,root/html530/TApplicationServer.html,https://root.cern,https://root.cern/root/html530/TApplicationServer.html,1,['log'],['logon']
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT supp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TApplicationServer.html:16008,log,logon,16008,root/html532/TApplicationServer.html,https://root.cern,https://root.cern/root/html532/TApplicationServer.html,1,['log'],['logon']
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TApplicationServer.html:16793,log,logon,16793,root/html604/TApplicationServer.html,https://root.cern,https://root.cern/root/html604/TApplicationServer.html,1,['log'],['logon']
Testability," char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationServer.html:16793,log,logon,16793,root/html602/TApplicationServer.html,https://root.cern,https://root.cern/root/html602/TApplicationServer.html,1,['log'],['logon']
Testability," char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tReadBuffer(char* buf, Long64_t pos, Int_t len); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetFile(TFile* file); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteBuffer(const char* buf, Long64_t pos, Int_t len).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFileCacheWrite.html:4978,Test,TestBit,4978,root/html534/TFileCacheWrite.html,https://root.cern,https://root.cern/root/html534/TFileCacheWrite.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TParticleClassPDG(const char* name = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParticleClassPDG.html:4627,Test,TestBit,4627,root/html602/TParticleClassPDG.html,https://root.cern,https://root.cern/root/html602/TParticleClassPDG.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); const TString&TMVA::Configurable::GetReferenceFile() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; voidTObject::MakeZombie(); voidTMVA::Configurable::ResetSetFlag(); voidTMVA::Configurable::WriteOptionsReferenceToFile(). private:. voidBuildKDEPDF(); voidBuildSplinePDF(); voidCheckHist() const; voidFillHistToGraph(); voidFillSplineToHist(); voidFindBinInverse(const TH1* histogram, Int_t& lowerBin, Int_t& higherBin, Double_t& lowerBinValue, Double_t& higherBinValue, Double_t y, Bool_t isMonotonouslyIncreasingFunction = kFALSE) const; Double_tGetIntegral() const; Double_tGetPdfHistBinWidth() const; static TMVA::PDF*&GetThisPdfThreadLocal(); static Double_tIGetVal(Double_t*, Double_t*); TMVA::MsgLogger&Log() const; voidSmoothHistogram(); static TMVA::PDF*ThisPDF(); Bool_tUseHistogram() const. Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TMVA::PDF::EInterpolateMethodkKDE; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TMVA::P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDF.html:7819,Log,Log,7819,root/html602/TMVA__PDF.html,https://root.cern,https://root.cern/root/html602/TMVA__PDF.html,2,['Log'],['Log']
Testability," char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressLog.html:16356,Test,TestBit,16356,root/html528/TProofProgressLog.html,https://root.cern,https://root.cern/root/html528/TProofProgressLog.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," char* name); virtual voidSetTestSize(Double_t size); virtual voidSetTestStatistic(RooStats::TestStatistic* testStatistic); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooStats::TestStatSamplerTestStatSampler(); RooStats::TestStatSamplerTestStatSampler(const RooStats::TestStatSampler&). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; virtual ~TestStatSampler(); TestStatSampler();. {}. SamplingDistribution* GetSamplingDistribution(RooArgSet& paramsOfInterest); Main interface to get a ConfInterval, pure virtual. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. void Initialize(RooAbsArg& testStatistic, RooArgSet& paramsOfInterest, RooArgSet& nuisanceParameters); Common Initialization. void SetPdf(RooAbsPdf& ); Set the Pdf, add to the the workspace if not already there. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. void SetParametersForTestStat(const RooArgSet& ); specify the values of parameters used when evaluating test statistic. void SetNuisanceParameters(const RooArgSet& ); REMOVE THIS; specify the parameters of interest in the interval; virtual void SetParameters(const RooArgSet&) = 0;; specify the nuisance parameters (eg. the rest of the parameters). void SetObservables(const RooArgSet& ); specify the observables in the dataset (needed to evaluate the test statistic). void SetGlobalObservables(const RooArgSet& ); specify the conditional observables. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__TestStatSampler.html:2545,test,testStatistic,2545,root/html602/RooStats__TestStatSampler.html,https://root.cern,https://root.cern/root/html602/RooStats__TestStatSampler.html,2,['test'],['testStatistic']
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegisterCommand(const char* cmdname, const char* method, const char* icon); Bool_tRegisterObject(const char* subfolder, TObject* obj); voidTObject::ResetBit(UInt_t f); voidRestrict(const char* path, const char* options); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidScanHierarchy(const char* topname, const char* path, TRootSnifferStore* store, Bool_t only_fields = kFALSE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentCallArg(THttpCallArg* arg); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); Bool_tSetItemField(const char* fullname, const char* name, const char* value); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t on = kTRUE); voidSetScanGlobalDir(Bool_t on = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSniffer(const TRootSniffer&); TRootSniffer(const char* name, const char* objpath = ""Objects""); Bool_tUnregisterObject(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TRootSniffer.html:6535,Test,TestBit,6535,root/html604/TRootSniffer.html,https://root.cern,https://root.cern/root/html604/TRootSniffer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTGLEventHandler::RemoveTooltip(); virtual voidTGLEventHandler::Repaint(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTGEventHandler::SendMessage(const TGWindow* w, Long_t msg, Long_t parm1, Long_t parm2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGLEventHandler::SetDoInternalSelection(Bool_t x); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLego(TEveCaloLego* x); voidTGLEventHandler::SetMouseOverSelectDelay(Int_t ms); voidTGLEventHandler::SetMouseOverTooltipDelay(Int_t ms); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidTGLEventHandler::SetSecSelType(Int_t t); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidTGLEventHandler::SetTooltipPixelTolerance(Int_t t); voidSetTransTheta(Float_t h); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGLEventHandler::StartMouseTimer(); virtual voidTGLEventHandler::StopMouseTimer(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGLEventHandler::TriggerTooltip(const char* text); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveLegoEventHandler.html:9336,Test,TestBit,9336,root/html530/TEveLegoEventHandler.html,https://root.cern,https://root.cern/root/html530/TEveLegoEventHandler.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Bool_tSendFileCloseEvent(TFile*); virtual Bool_tSendFileOpenProgress(TFile*, TList*, const char*, Bool_t = kFALSE); virtual Bool_tSendFileReadProgress(TFile*); virtual Bool_tSendFileWriteProgress(TFile*); virtual Bool_tSendInfoDescription(const char*); virtual Bool_tSendInfoStatus(const char*); virtual Bool_tSendInfoTime(); virtual Bool_tSendInfoUser(const char* = 0); virtual Bool_tSendParameters(TList*, const char* = 0); virtual Bool_tSendProcessingProgress(Double_t, Double_t, Bool_t = kFALSE); virtual Bool_tSendProcessingStatus(const char*, Bool_t = kFALSE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLogLevel(const char* = ""WARNING""); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidVerbose(Bool_t); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualMonitoringWriter.html:5308,Test,TestBit,5308,root/html534/TVirtualMonitoringWriter.html,https://root.cern,https://root.cern/root/html534/TVirtualMonitoringWriter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::GenFunc0 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::GenFunc10 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::GenFunc110 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::GenFunc1110 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::TFunc0 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::v5::TFormulaPrimitive::TFunc10 fpointer); ROOT::v5::TFormulaPrimitiveTFormulaPrimitive(const char* name, const char* formula, ROOT::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__v5__TFormulaPrimitive.html:5720,Test,TestBit,5720,root/html604/ROOT__v5__TFormulaPrimitive.html,https://root.cern,https://root.cern/root/html604/ROOT__v5__TFormulaPrimitive.html,1,['Test'],['TestBit']
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFormulaPrimitive(); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::GenFunc0 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::GenFunc10 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::GenFunc110 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::GenFunc1110 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::TFunc0 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::TFunc10 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::TFunc110 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::TFunc1110 fpointer); TFormulaPrimitive(const char* name, const char* formula, TFormulaPrimitive::TFuncG fpointer); TFormulaPrimitive(const char* name, const char* form",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFormulaPrimitive.html:5650,Test,TestBit,5650,root/html602/TFormulaPrimitive.html,https://root.cern,https://root.cern/root/html602/TFormulaPrimitive.html,1,['Test'],['TestBit']
Testability," char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TTableSorter(); TTableSorter(const TTable& table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, TString& colName, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const Float_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Double_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const Long_t* simpleArray, Int_t arraySize, Int_t firstRow = 0, Int_t numberRows = 0); TTableSorter(const TTable& table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); TTableSorter(const TTable* table, SEARCHMETHOD search, COMPAREMETHOD compare, Int_t firstRow = 0, Int_t numbeRows = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTableSorter.html:7938,Test,TestBit,7938,root/html602/TTableSorter.html,https://root.cern,https://root.cern/root/html602/TTableSorter.html,2,['Test'],['TestBit']
Testability," char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; virtual voidTProofPlayer::MergeOutput(); virtual voidSetupFeedback(); virtual voidStopFeedback(). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofPlayer::EStatusBitsTProofPlayer::kDispatchOneEvent; static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kFinished; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerLocal.html:12521,Assert,AssertSelector,12521,root/html602/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html602/TProofPlayerLocal.html,1,['Assert'],['AssertSelector']
Testability," char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. Int_tTProofPlayer::AssertSelector(const char* selector_file); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Bool_tTProofPlayer::CheckMemUsage(Long64_t& mfreq, Bool_t& w80r, Bool_t& w80v, TString& wmsg); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Int_tTProofPlayer::DrawCanvas(TObject* obj); virtual void*TProofPlayer::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTObject::MakeZombie(); voidTProofPlayer::MapOutputListToDataMembers() const; virtual voidTProofPlayer::MergeOutput(); virtual voidSetupFeedback(); virtual voidStopFeedback(). private:. virtual Bool_tHandleTimer(TTimer* timer). Data Members; public:. static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kAborted; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProofPlayer::EStatusBitsTProofPlayer::kDispatchOneEvent; static TVirtualProofPlayer::EExitStatusTVirtualProofPlayer::kFinished; static TObject::EStatusBitsTObject::kHasUU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSlave.html:12415,Assert,AssertSelector,12415,root/html602/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSlave.html,1,['Assert'],['AssertSelector']
Testability," char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofCondor(const TProofCondor&); TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:19274,Test,TestBits,19274,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,2,['Test'],['TestBits']
Testability," char* optStr = """"); voidTProof::ShowEnabledPackages(Bool_t all = kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofSuperMaster(const TProofSuperMaster&); TProofSuperMaster(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofSuperMaster.html:19109,Test,TestBits,19109,root/html602/TProofSuperMaster.html,https://root.cern,https://root.cern/root/html602/TProofSuperMaster.html,2,['Test'],['TestBits']
Testability," char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFilePrefetch&operator=(const TFilePrefetch&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); voidReadAsync(TFPBlock*, Bool_t&); voidReadBlock(Long64_t*, Int_t*, Int_t); Bool_tReadBuffer(char*, Long64_t, Int_t); voidReadListOfBlocks(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveBlockInCache(TFPBlock*); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tSetCache(const char*); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Int_tSumHex(const char*); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tThreadStart(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFilePrefetch.html:4913,Test,TestBit,4913,root/html530/TFilePrefetch.html,https://root.cern,https://root.cern/root/html530/TFilePrefetch.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDefined(Bool_t flag = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUsed(Bool_t flag = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Int_tZ() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoElement.html:5408,Test,TestBit,5408,root/html530/TGeoElement.html,https://root.cern,https://root.cern/root/html530/TGeoElement.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSharedPropertiesList&operator=(const RooSharedPropertiesList&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); RooSharedProperties*registerProperties(RooSharedProperties*, Bool_t canDeleteIncoming = kTRUE); voidTObject::ResetBit(UInt_t f); RooSharedPropertiesList(); RooSharedPropertiesList(const RooSharedPropertiesList&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidunregisterProperties(RooSharedProperties*); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSharedPropertiesList.html:4623,Test,TestBit,4623,root/html602/RooSharedPropertiesList.html,https://root.cern,https://root.cern/root/html602/RooSharedPropertiesList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," char* t); virtual voidTEveTrack::SetTrackParams(const TEveTrack& t); virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTPolyMarker3D::Size() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveTrack::SortPathMarksByTime(); voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTEvePointSet::TakeAction(TEvePointSelector*); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveTrackProjected(); virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent, bool notifyParent = true); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveTrack::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveTrackProjected.html:23492,Test,TestBit,23492,root/html602/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html602/TEveTrackProjected.html,6,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability," char* table_type); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUseIndexes(Int_t use_type = kIndexesBasic); voidSetUseSuffixes(Bool_t on = kTRUE); voidSetUseTransactions(Int_t mode = kTransactionsAuto); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tSizeof() const; voidSkipArrayLimit(); voidStartLogFile(const char* fname)MENU ; Bool_tStartTransaction(); voidStopLogFile()MENU ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSQLFile(); TSQLFile(const TSQLFile&); TSQLFile(const char* dbname, Option_t* option = ""read"", const char* user = ""user"", const char* pass = ""pass""); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0); virtual Int_tWrite(const char* = 0, Int_t = 0, Int_t = 0) const; virtual Bool_tWriteBuffer(const char*, Int_t); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidWriteFree(); virtual voidWriteHeader(); virtual voidTDirectoryFile::WriteKeys(); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual UShort_tTFile::WriteProcessID(TProcessID* pid); virtual voidWriteStreamerInfo(); virtual Int_tTDirectoryFile::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLFile.html:21006,Test,TestBits,21006,root/html602/TSQLFile.html,https://root.cern,https://root.cern/root/html602/TSQLFile.html,2,['Test'],['TestBits']
Testability," char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowFrame(TGFrame* frame, const char* n = ""TEveWindowFrame"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowFrame.html:16903,Test,TestBit,16903,root/html602/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html602/TEveWindowFrame.html,2,['Test'],['TestBit']
Testability," char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveWindowTab(TGTab* tab, const char* n = ""TEveWindowTab"", const char* t = """"); voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveWindowTab.html:16853,Test,TestBit,16853,root/html602/TEveWindowTab.html,https://root.cern,https://root.cern/root/html602/TEveWindowTab.html,2,['Test'],['TestBit']
Testability," char* title); Set the selection beeing edited. void SetCurrentSelection(TParallelCoordSelect* sel); Set the selection beeing edited. void SetDotsSpacing(Int_t s = 0); Set dots spacing. Modify the line style 11. void SetEntryList(TParallelCoord* para, TEntryList* enlist); Set the entry lists of ""para"". void SetGlobalMax(Double_t max); Force all variables to adopt the same max. void SetGlobalMin(Double_t min); Force all variables to adopt the same min. void SetLiveRangesUpdate(Bool_t ); If true, the pad is updated while the motion of a dragged range. void SetVertDisplay(Bool_t vert = kTRUE); Set the vertical or horizontal display. void UnzoomAll(); Unzoom all variables. TParallelCoord(). Bool_t GetCandleChart(); {return TestBit(kCandleChart);}. Long64_t GetCurrentFirst(); {return fCurrentFirst;}. Long64_t GetCurrentN(); {return fCurrentN;}. Bool_t GetCurveDisplay() const; {return TestBit(kCurveDisplay);}. Int_t GetDotsSpacing() const; {return fDotsSpacing;}. Bool_t GetGlobalScale(); {return TestBit(kGlobalScale);}. Bool_t GetGlobalLogScale(); {return TestBit(kGlobalLogScale);}. Color_t GetLineColor(); {return fLineColor;}. Width_t GetLineWidth(); {return fLineWidth;}. UInt_t GetNvar(); {return fNvar;}. Long64_t GetNentries(); {return fNentries;}. TList * GetSelectList(); {return fSelectList;}. TList * GetVarList(); {return fVarList;}. Bool_t GetVertDisplay() const; {return TestBit(kVertDisplay);}. Int_t GetWeightCut() const; {return fWeightCut;}. void SetCurveDisplay(Bool_t curve = 1); {SetBit(kCurveDisplay,curve);}. void SetCurrentEntries(TEntryList* entries); {fCurrentEntries = entries;}. void SetInitEntries(TEntryList* entries); {fInitEntries = entries;}. void SetLineColor(Color_t col); {fLineColor = col;}. void SetLineWidth(Width_t wid); {fLineWidth = wid;}. void SetNentries(Long64_t n); {fNentries = n;}. void SetTree(TTree* tree); {fTree = tree;}. void SetWeightCut(Int_t w = 0); {fWeightCut = w;}. » Author: Bastien Dalla Piazza 02/08/2007 » Copyright (C) 1995-20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoord.html:17509,Test,TestBit,17509,root/html530/TParallelCoord.html,https://root.cern,https://root.cern/root/html530/TParallelCoord.html,2,['Test'],['TestBit']
Testability," chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  timeSeriesFromCSV.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV.py This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV_TDF.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  zones.py Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui;  buttonChangelabel.CThis macro gives an example for changing text button labels anytime the Start or Pause buttons are clicked ;  buttongroupState.CA simple example that shows the enabled and disabled state of a button group with radio and check buttons ;  buttonsLayout.CThis macro gives an example of different buttons' layout ;  buttonTest.CThis macro gives an example of how to set/change text button attributes ;  calendar.CThis macro gives an example of how to use html widget to display tabular data ;  CPUMeter.CSimple macro showing capabilities of the TGSpeedo widget ;  customContextMenu.CExample showing how to add a function to the class context menu ;  customTH1Fmenu.CExample sh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:116920,log,log,116920,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,3,['log'],['log']
Testability, charts. ROOT; » TMVA; » TMVA::TActivationChooser. class TMVA::TActivationChooser. TActivationChooser. Class for easily choosing activation functions. Function Members (Methods); public:. virtual~TActivationChooser(); static TClass*Class(); TMVA::TActivation*CreateActivation(TMVA::TActivationChooser::EActivationType type) const; TMVA::TActivation*CreateActivation(const TString& type) const; vector<TString>*GetAllActivationNames() const; virtual TClass*IsA() const; TMVA::TActivationChooser&operator=(const TMVA::TActivationChooser&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TMVA::TActivationChooserTActivationChooser(); TMVA::TActivationChooserTActivationChooser(const TMVA::TActivationChooser&). private:. TMVA::MsgLogger&Log() const. Data Members; public:. enum EActivationType { kLinear; kSigmoid; kTanh; kRadial; };. private:. TStringfLINEARactivation function name; TMVA::MsgLogger*fLogger! message logger; TStringfRADIALactivation function name; TStringfSIGMOIDactivation function name; TStringfTANHactivation function name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TActivationChooser(); defaut constructor. ~TActivationChooser(); destructor. CreateActivation(EActivationType type); instantiate the correct activation object according to the; type choosen (given as the enumeration type). CreateActivation(const TString& type) const; instantiate the correct activation object according to the; type choosen (given by a TString). GetAllActivationNames() const; retuns the names of all know activation functions. TActivationChooser(). » Author: Matt Jachowski » Copyright (c) 2005: *; » Last changed: root/tmva $Id: TActivationChooser.h 40005 2011-06-27 15:29:10Z stelzer $ » Last generated: 2011-11-03 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMVA__TActivationChooser.html:1211,log,logger,1211,root/html532/TMVA__TActivationChooser.html,https://root.cern,https://root.cern/root/html532/TMVA__TActivationChooser.html,1,['log'],['logger']
Testability," class ; Definition at line 47 of file TGObject.h. ◆ DeclFileName(). static const char * TGObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TGObject.h. ◆ GetClient(). TGClient * TGObject::GetClient ; (; ); const. inline . Definition at line 42 of file TGObject.h. ◆ GetId(). Handle_t TGObject::GetId ; (; ); const. inline . Definition at line 41 of file TGObject.h. ◆ Hash(). ULong_t TGObject::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TGObject::HashULong_t Hash() const overrideReturn hash value for this object.Definition TGObject.h:43; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 43 of file TGObject.h. ◆ IsA(). TClass * TGObject::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGObject.html:12449,log,logarithmic,12449,doc/master/classTGObject.html,https://root.cern,https://root.cern/doc/master/classTGObject.html,1,['log'],['logarithmic']
Testability," class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; THStack::THStackTHStack()Definition THStack.h:57; TTextBase class for several text objects.Definition TText.h:22; h1TH1F * h1Definition legend1.C:5. A more complex example:; ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHStack.html:3608,test,test,3608,doc/master/classTHStack.html,https://root.cern,https://root.cern/doc/master/classTHStack.html,3,['test'],['test']
Testability, class; TProof PROOF control class; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressInfo Progress information; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interfa,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ClassIndex.html:111052,log,log,111052,root/html526/ClassIndex.html,https://root.cern,https://root.cern/root/html526/ClassIndex.html,1,['log'],['log']
Testability, class; TProof PROOF control class; TProofChain TChain proxy for running chains on PROOF; TProofCondor PROOF control class for slaves allocated by condor; TProofDebug ; TProofDesc Small class describing a proof session; TProofDraw Tree drawing selector for PROOF; TProofDrawEntryList A Selectoor to fill a TEntryList from TTree::Draw; TProofDrawEventList Tree drawing selector for PROOF; TProofDrawGraph Tree drawing selector for PROOF; TProofDrawHist Tree drawing selector for PROOF; TProofDrawListOfGraphs Tree drawing selector for PROOF; TProofDrawListOfGraphs::Point3D_t ; TProofDrawListOfPolyMarkers3D Tree drawing selector for PROOF; TProofDrawListOfPolyMarkers3D::Point4D_t ; TProofDrawPolyMarker3D Tree drawing selector for PROOF; TProofDrawProfile Tree drawing selector for PROOF; TProofDrawProfile2D Tree drawing selector for PROOF; TProofLimitsFinder Find and communicate best axis limits; TProofLite PROOF control class; TProofLog PROOF session log handler; TProofLogElem PROOF session log element; TProofMgr Abstract PROOF manager interface; TProofMgrLite XrdProofd PROOF manager interface; TProofNodeInfo Class describing a PROOF node; TProofOutputFile Wrapper class to steer the merging of files produced on workers; TProofPlayer Basic PROOF player; TProofPlayerLite PROOF player running in PROOF-Lite; TProofPlayerLocal PROOF player running on client; TProofPlayerRemote PROOF player running on master server; TProofPlayerSlave PROOF player running on slave server; TProofPlayerSuperMaster PROOF player running on super master; TProofProgressDialog PROOF progress dialog; TProofProgressLog Class implementing a log graphic box; TProofProgressMemoryPlot PROOF progress memory plots; TProofProgressStatus Proof progress status class; TProofQueryResult Class describing a PROOF query; TProofResources Abstract class describing PROOF resources; TProofResourcesStatic Class to handle PROOF static config; TProofServ PROOF Server Application Interface; TProofServLite Local worker PROOF Ser,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:109106,log,log,109106,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,1,['log'],['log']
Testability," clipInvalid) const; 2981{; 2982 auto binding = std::make_unique<RooRealBinding>(*this,vars,nset,clipInvalid);; 2983 if(!binding->isValid()) {; 2984 coutE(InputArguments) << ClassName() << ""::"" << GetName() << "":bindVars: cannot bind to "" << vars << std::endl ;; 2985 return nullptr;; 2986 }; 2987 return RooFit::makeOwningPtr(std::unique_ptr<RooAbsFunc>{std::move(binding)});; 2988}; 2989 ; 2990 ; 2991 ; 2992////////////////////////////////////////////////////////////////////////////////; 2993/// Copy the cached value of another RooAbsArg to our cache.; 2994/// Warning: This function just copies the cached values of source,; 2995/// it is the callers responsibility to make sure the cache is clean.; 2996 ; 2997void RooAbsReal::copyCache(const RooAbsArg* source, bool /*valueOnly*/, bool setValDirty); 2998{; 2999 auto other = static_cast<const RooAbsReal*>(source);; 3000 assert(dynamic_cast<const RooAbsReal*>(source));; 3001 ; 3002 _value = other->_treeReadBuffer ? other->_treeReadBuffer->operator double() : other->_value;; 3003 ; 3004 if (setValDirty) {; 3005 setValueDirty() ;; 3006 }; 3007}; 3008 ; 3009 ; 3010////////////////////////////////////////////////////////////////////////////////; 3011 ; 3012void RooAbsReal::attachToVStore(RooVectorDataStore& vstore); 3013{; 3014 vstore.addReal(this)->setBuffer(this,&_value);; 3015}; 3016 ; 3017 ; 3018////////////////////////////////////////////////////////////////////////////////; 3019/// Attach object to a branch of given TTree. By default it will; 3020/// register the internal value cache RooAbsReal::_value as branch; 3021/// buffer for a double tree branch with the same name as this; 3022/// object. If no double branch is found with the name of this; 3023/// object, this method looks for a Float_t Int_t, UChar_t and UInt_t, etc; 3024/// branch. If any of these are found, a TreeReadBuffer; 3025/// that branch is created, and saved in _treeReadBuffer.; 3026/// TreeReadBuffer::operator double() can be used to convert the value",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:130265,assert,assert,130265,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['assert'],['assert']
Testability," clipPlanes = 0); Render DrawElements in elementVec with given timeout.; If clipPlanes is non-zero, test each element against its; clipping planes. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been identified or FALSE otherwise.; The scene-info member of the record is already set by the caller. void CalcBoundingBox() const; Encapsulates all physical shapes bounding box with axes aligned box.; Validity checked in the base-class. void AdoptLogical(TGLLogicalShape& shape); Adopt dynamically created logical 'shape' - add to internal map; and take responsibility for deleting. Bool_t DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); Destroy logical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. If mustFind is true, an error is reported if the logical is not; found. Int_t DestroyLogicals(); Destroy all logical shapes in scene.; Return number of destroyed logicals. TGLLogicalShape * FindLogical(TObject* logid) const; Find and return logical shape identified by unqiue logid.; Returns 0 if not found. void AdoptPhysical(TGLPhysicalShape& shape); Adopt dynamically created physical 'shape' - add to internal map and take; responsibility for deleting. void DestroyPhysicalInternal(TGLScene::PhysicalShapeMapIt_t pit); Virtual function to destroy a physical. Sub-classes might have; special checks to perform.; Caller should also invalidate the draw-list. Bool_t DestroyPhysical(UInt_t phid); Destroy physical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. Int_t DestroyPhysicals(); Destroy physical shapes. TGLPhysicalShape* FindPhysical(UInt_t phid) const; Find and return physical shape identified by unqiue 'ID'.; Returns 0 if not found. UInt_t GetMaxPhysicalID(); Returns the maximum used physical id.; Returns 0 if empty. Bool_t BeginUpdate(); Put scene i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:11066,log,logical,11066,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,6,['log'],['logical']
Testability," clsDist = 0, TList* clsbDist = 0, TList* clbDist = 0); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverter.h 40096 2011-07-01 10:08:17Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:11195,test,test,11195,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,1,['test'],['test']
Testability," clsDist = 0, TList* clsbDist = 0, TList* clbDist = 0); rebuild the sampling distributions by; generating some toys and find for each of theam a new upper limit; Return the upper limit distribution and optionally also the pValue distributions for Cls, Clsb and Clbxs; as a TList for each scanned point. void SetFixedScan(int nBins, double xMin = 1, double xMax = -1); set for a fixed scan in nbins. void SetAutoScan(); set auto scan (default). { SetFixedScan(0); }. void UseCLs(bool on = true); { fUseCLs = on; if (fResults) fResults->UseCLs(on); }. void SetModel(const RooStats::ModelConfig& ); { }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size; if (fResults) fResults->SetTestSize(size); }. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl; if (fResults) fResults->SetConfidenceLevel(cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. HypoTestCalculatorGeneric * GetHypoTestCalculator() const; retrieved a reference to the internally used HypoTestCalculator; it might be invalid when the class is deleted. { return fCalculator0; }. void SetVerbose(int level = 1); set verbose level (0,1,2). { fVerbose = level; }. void SetMaximumToys(int ntoys); set maximum number of toys. { fMaxToys = ntoys;}. void SetNumErr(double err); set numerical error in test statistic evaluation (default is zero). { fNumErr = err; }. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: HypoTestInverter.h 41455 2011-10-18 13:23:21Z moneta $ » Last generated: 2011-11-03 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverter.html:11712,test,test,11712,root/html532/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverter.html,1,['test'],['test']
Testability," collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage of the ROOT string class. vmatrix.cxx; Verification program for the TMatrix class. vvector.cxx; Verification program for the TVectorclass. vlazy.cxx; Verification program for lazy matrices. hworld.cxx; Small program showing basic graphics. guitest.cxx; Example usage of the ROOT GUI classes. gui viewer .cxx; Another ROOT GUI example program. Hello.cxx; Dancing text example. Aclock.cxx; Analog clock (a la X11 xclock). Tetris.cxx; The known Tetris game based on the ROOT graphics. stress.cxx; Important ROOT stress testing program. stress*.cxx; Stress testing of different ROOT classes. bench.cxx; STL and ROOT container test and benchmarking program. QpRandomDriver.cx x; Verification program for Quadratic programming classes in Quadp library. DrawTest.sh; Entry script to extensive TTree query test suite. dt_*; Scripts used by DrawTest.sh. The $ROOTSYS/test directory is a gold mine of root-wisdom nuggets, and we encourage you to explore and exploit it. These instructions will compile all programs in $ROOTSYS/test:; If you do not have write permission in the $ROOTSYS/test directory, copy the entire $ROOTSYS/test directory to your area. The Makefile is a useful example of how ROOT applications are linked and built. Edit the Makefile to specify your architecture by changing the ARCH variable, for example, on an SGI machine type:ARCH = sgikcc.; Now compile all programs:; % gmake; This will build several applications and shared libraries. We are especially interested in Event, stress, and guitest.; 20.2.1 Event - An Example of a ROOT Application; Event is created by compiling MainEvent.cxx, and Event.cxx. It creates a ROOT file with a tree and two histograms. When running Event we have four optional arguments with defaults:. Argument; Default. 1; Number of Events (1 … n); 400. 2; Compression level:; 0: no compression at all.; 1: If the split level is set to zero, everything is comp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1077066,test,test,1077066,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability," color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidSetPhi(Double_t phi = 30); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidSetSelected(TObject* obj); virtual voidSetTheta(Double_t theta = 30); virtual voidSetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidSetTickx(Int_t value = 1); virtual voidSetTicky(Int_t value = 1); virtual voidSetTitle(const char* title = """"); virtual voidSetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVertical(Bool_t vert = kTRUE); virtual voidSetView(TView* view = 0); virtual voidSetViewer3D(TVirtualViewer3D*); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdate(); virtual voidTObject::UseCurrentStyle(); virtual Int_tUtoAbsPixel(Double_t u) const; virtual Int_tUtoPixel(Double_t u) const; virtual Int_tVtoAbsPixel(Double_t v) const; virtual Int_tVtoPixel(Double_t v) const; virtual TObject*WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tXtoAbsPixel(Double_t x) const; virtual Double_tXtoPad(Double_t x) const; virtual Int_tXtoPixel(Double_t x) const; virtual Int_tYtoAbsPixel(Double_t y) const; virtual Double_tYtoPad(Double_t y) const; virtual Int_tYtoPixel(Double_t y) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualPad.html:17322,Test,TestBit,17322,root/html528/TVirtualPad.html,https://root.cern,https://root.cern/root/html528/TVirtualPad.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TEveTriangleSet * ReadTrivialFile (const char *file);  Read a simple ascii input file describing vertices and triangles. ;  ;  Static Public Member Functions inherited from TEveElementList; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveTriangleSet.html:28473,Assert,AssertBBox,28473,doc/master/classTEveTriangleSet.html,https://root.cern,https://root.cern/doc/master/classTEveTriangleSet.html,1,['Assert'],['AssertBBox']
Testability," color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGeoHMatrix * GetGeoHMatrixIdentity ();  Return static identity matrix in homogeneous representation. ;  ; static TGeoManager * GetGeoMangeur ();  Return static geo-manager that is used internally to make shapes lead a happy life. ;  ; static TEveGeoShape * ImportShapeExtract (TEveGeoShapeExtract *gse, TEveElement *parent=nullptr);  Import a shape extract 'gse' under element 'parent'. ;  ;  Static Public Member Functions inherited from TEveShape; static void CheckAndFixBoxOrientationEv (TEveVector box[8])",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoShape.html:29492,Assert,AssertBBox,29492,doc/master/classTEveGeoShape.html,https://root.cern,https://root.cern/doc/master/classTEveGeoShape.html,1,['Assert'],['AssertBBox']
Testability," color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveShape; static void CheckAndFixBoxOrientationEv (TEveVector box[8]);  Make sure box orientation is consistent with standard arrangement. ;  ; static void CheckAndFixBoxOrientationFv (Float_t box[8][3]);  Make sure box orientation is consistent with standard arrangement. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FindConvexHull (const v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBox.html:28984,Assert,AssertBBox,28984,doc/master/classTEveBox.html,https://root.cern,https://root.cern/doc/master/classTEveBox.html,2,['Assert'],['AssertBBox']
Testability," color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjected;  TEveProjected ();  Constructor. ;  ; virtual ~TEveProjected ();  Destructor. ;  ; Float_t GetDepth () const;  ; TEveProjectionManager * GetManager () const;  ; TEveProjectable * GetProjectable () const;  ; virtual void SetDepth (Float_t d);  Set depth coordinate for the element. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UnRefProjectable (TEveProjectable *assumed_parent, bool notifyParent=true);  Remove reference to projectable. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * Dec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxProjected.html:28628,Assert,AssertBBox,28628,doc/master/classTEveBoxProjected.html,https://root.cern,https://root.cern/doc/master/classTEveBoxProjected.html,4,['Assert'],['AssertBBox']
Testability," color, rMin, rMax, dz);; break;; }; case 2: {; volumes[i] = geom->MakeTubs(name, medSolid, rMin, rMax, dz,; phi1, phi2);; printf(""Volume %d : Color %d, Tube Seg, Inner Radius %f, ""; ""Outer Radius %f, Length %f, Phi1 %f, Phi2 %f\n"",; i, color, rMin, rMax, dz, phi1, phi2);; break;; }; case 3: {; Double_t n1[3], n2[3];; n1[0] = gRandom->Rndm()*.5;; n1[1] = gRandom->Rndm()*.5; n1[2] = -1.0 + gRandom->Rndm()*.5;; n2[0] = gRandom->Rndm()*.5;; n2[1] = gRandom->Rndm()*.5; n2[2] = 1.0 - gRandom->Rndm()*.5;; ; volumes[i] = geom->MakeCtub(name, medSolid, rMin, rMax, dz,; phi1, phi2, n1[0], n1[1], n1[2],; n2[0], n2[1], n2[2]);; printf(""Volume %d : Color %d, Cut Tube, Inner Radius %f, ""; ""Outer Radius %f, Length %f, Phi1 %f, Phi2 %f, ""; ""n1 (%f,%f,%f), n2 (%f,%f,%f)\n"",; i, color, rMin, rMax, dz, phi1, phi2,; n1[0], n1[1], n1[2], n2[0], n2[1], n2[2]);; break;; }; default: {; assert(kFALSE);; }; }; ; volumes[i]->SetLineColor(color);; }; ; printf(""\nCreated %d volumes\n\n"", volumeCount);; ; // Scatter reqSpheres placed sphere randomly in space; Double_t x, y, z;; for (i = 0; i < reqNodes; i++) {; // Pick random volume; UInt_t useVolume = gRandom->Integer(volumeCount);; ; TGeoTranslation * trans;; TGeoRotation * rot;; if (randomDist) {; // Random translation; gRandom->Rannor(x, y);; gRandom->Rannor(z,dummy);; trans = new TGeoTranslation(x*worldRadius, y*worldRadius, z*worldRadius);; ; // Random rotation; gRandom->Rannor(x, y);; gRandom->Rannor(z,dummy);; rot = new TGeoRotation(""rot"", x*360.0, y*360.0, z*360.0);; } else {; UInt_t perSide = pow(reqNodes,1.0/3.0)+0.5;; Double_t distance = sizeBase*5.0;; UInt_t xi, yi, zi;; zi = i / (perSide*perSide);; yi = (i / perSide) % perSide;; xi = i % perSide;; trans = new TGeoTranslation(xi*distance,yi*distance,zi*distance);; rot = new TGeoRotation(""rot"",0.0, 0.0, 0.0);; }; top->AddNode(volumes[useVolume], i, new TGeoCombiTrans(*trans, *rot));; //printf(""Added node %d (Volume %d)\n"", i, useVolume);; }; geom->CloseGeometry();; top->Draw(""ogl"");;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/glViewerLOD_8C.html:3358,assert,assert,3358,doc/master/glViewerLOD_8C.html,https://root.cern,https://root.cern/doc/master/glViewerLOD_8C.html,1,['assert'],['assert']
Testability," compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_subpads.cxx;  draw_th1.cxxThis macro generates a small V7 TH1D, fills it and draw it in a V7 canvas ;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  line.cxx;  lineStyle.cxx;  lineWidth.cxx;  markerStyle.cxx;  pad.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► vecops;  vo001_AdoptOrOwnMemory.C In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo001_AdoptOrOwnMemory.py In this tutorial we learn how the RVec class can be used to adopt existing memory or allocate some ;  vo002_VectorCalculations.C In this tutorial we learn how the RVec class can be used to express easily mathematical operations involving arrays and scalars ;  vo003_LogicalOperations.C In this tutorial we learn how the RVec class can be used to express logical operations ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:165602,log,logical,165602,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,1,['log'],['logical']
Testability," comparing weighted and unweighted histograms. ; Compares the histograms' adjusted (normalized) residuals. Function: Returns p-value. Other return values are specified by the 3rd parameter; Parameters. [in]h2the second histogram ; [in]option; ""UU"" = experiment experiment comparison (unweighted-unweighted); ""UW"" = experiment MC comparison (unweighted-weighted). Note that the first histogram should be unweighted; ""WW"" = MC MC comparison (weighted-weighted); ""NORM"" = to be used when one or both of the histograms is scaled but the histogram originally was unweighted; by default underflows and overflows are not included:; ""OF"" = overflows included; ""UF"" = underflows included. ""P"" = print chi2, ndf, p_value, igood; ""CHI2"" = returns chi2 instead of p-value; ""CHI2/NDF"" = returns \( \chi^{2} \)/ndf . [in]resnot empty - computes normalized residuals and returns them in this array. The current implementation is based on the papers \( \chi^{2} \) test for comparison of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123 by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; Introduction:; A frequently used technique in data analysis is the comparison of histograms. First suggested by Pearson [1] the \( \chi^{2} \) test of homogeneity is used widely for comparing usual (unweighted) histograms. This paper describes the implementation modified \( \chi^{2} \) tests for comparison of weighted and unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:86729,test,test,86729,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," comparison:. A simple modification of the ideas described above can be used for the; comparison of the usual (unweighted) and weighted histograms. Let us; denote the number of events in the ith bin in the unweighted; histogram as ni and the common weight of events in the ith bin of the; weighted histogram as wi. The total number of events in the; unweighted histogram is equal to. and the total weight of events in the weighted histogram is equal to. Let us formulate the hypothesis of identity of an unweighted histogram; to a weighted histogram so that there exist r constants p1,...,pr, such; that. for the unweighted histogram. The weight wi is a random variable with a; distribution approximated by the normal probability distribution; where is the variance of the weight wi.; If we replace the variance ; with estimate (sum of squares of weights of; events in the ith bin) and the hypothesis of identity is valid, then the; maximum likelihood estimator of pi,i=1,...,r, is. We may then use the test statistic. and it has approximately a distribution [2]. This test, as well; as the original one [3], has a restriction on the expected frequencies. The; expected frequencies recommended for the weighted histogram is more than 25.; The value of the minimal expected frequency can be decreased down to 10 for; the case when the weights of the events are close to constant. In the case; of a weighted histogram if the number of events is unknown, then we can; apply this recommendation for the equivalent number of events as. The minimal expected frequency for an unweighted histogram must be 1. Notice; that any usual (unweighted) histogram can be considered as a weighted; histogram with events that have constant weights equal to 1.; The variance of the difference between the weight wi; and the estimated expectation value of the weight is approximately equal to:. The residuals. have approximately a normal distribution with mean equal to 0 and standard; deviation equal to 1. Two weighted ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:48857,test,test,48857,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['test'],['test']
Testability, computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->GetEntriesFast());}. void ClearNodes(); {fNodes = 0;}. Bool_t Contains(const Double_t* point) const; {return fShape->Contains(point);}. Bool_t IsRunTime() const; {return fShape->IsRunTimeShape();}. Bool_t IsVolumeMulti() const; {return kFALSE;}. Int_t GetRefCount() const; {return fRefCount;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. void Grab(); {fRefCount++;}. void Release(); {fRefCount--; if (fRefCount==0) delete this;}. Bool_t IsActive() const; {return TGeoAtt::IsActive();}. Bool_t IsActiveDaughters() const; {return TGeoAtt::IsActiveDaughters();}. Bool_t IsAdded() const; {return TObject::TestBit(kVolumeAdded);}. Bool_t IsOverlappingCandidate() const; {return TObject::TestBit(kVolumeOC);}. Bool_t IsReplicated() const; {return TObject::TestBit(kVolumeReplicated);}. Bool_t IsSelected() const; {return TObject::TestBit(kVolumeSelected);}. Bool_t IsCylVoxels() const; {return TObject::TestBit(kVoxelsCyl);}. Bool_t IsXYZVoxels() const; {return TObject::TestBit(kVoxelsXYZ);}. Bool_t IsValid() const; {return fShape->IsValid();}. Bool_t IsVisible() const; {return TGeoAtt::IsVisible();}. Bool_t IsVisibleDaughters() const; {return TGeoAtt::IsVisDaughters();}. Bool_t IsVisContainers() const; {return TGeoAtt::IsVisContainers();}. Bool_t IsVisLeaves() const; {return TGeoAtt::IsVisLeaves();}. Bool_t IsVisOnly() const; {return TGeoAtt::IsVisOnly();}. Int_t GetCurrentNodeIndex() const; {return -1;}. Int_t GetNextNodeIndex() const; {return -1;}. TObjArray * GetNodes(); {return fNodes;}. Int_t GetNtotal() const; {return fNtotal;}. TGeoManager * GetGeoManager() const; {return fGeoManager;}. TGeoMaterial * GetMaterial() const; {return GetMedium()->GetMaterial();}. TGeoMedium * GetMedium() const; {return (fMedium)?fMedium:DummyMedium();}. TObject * GetField() const; {return fField;}. TGeoPatternFinder ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:44758,Test,TestBit,44758,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['Test'],['TestBit']
Testability, configuration ; : 129 | 10648.9 9650.52 0.0200265 0.0017972 43885.3 0; : 130 Minimum Test error found - save the configuration ; : 130 | 10561.5 9564.19 0.0200344 0.00180234 43878.7 0; : 131 Minimum Test error found - save the configuration ; : 131 | 10475.3 9477.45 0.0200356 0.00180107 43872.9 0; : 132 Minimum Test error found - save the configuration ; : 132 | 10388.3 9392.54 0.0200847 0.0018148 43788 0; : 133 Minimum Test error found - save the configuration ; : 133 | 10303 9307.9 0.0200258 0.00180758 43912.1 0; : 134 Minimum Test error found - save the configuration ; : 134 | 10217.2 9225.8 0.0200352 0.00180785 43890.1 0; : 135 Minimum Test error found - save the configuration ; : 135 | 10133.2 9143.83 0.0200313 0.00180712 43897.8 0; : 136 Minimum Test error found - save the configuration ; : 136 | 10051.9 9059.29 0.0200892 0.0018637 43894.4 0; : 137 Minimum Test error found - save the configuration ; : 137 | 9966.99 8978.86 0.0201265 0.00183533 43737 0; : 138 Minimum Test error found - save the configuration ; : 138 | 9887.13 8895.8 0.0200521 0.00180887 43851.8 0; : 139 Minimum Test error found - save the configuration ; : 139 | 9804.58 8815.4 0.020043 0.00180744 43870.3 0; : 140 Minimum Test error found - save the configuration ; : 140 | 9722.87 8737.3 0.0202214 0.00190002 43664.9 0; : 141 Minimum Test error found - save the configuration ; : 141 | 9644.27 8657.79 0.020429 0.00182729 43006.8 0; : 142 Minimum Test error found - save the configuration ; : 142 | 9564.39 8579.88 0.0204803 0.00186473 42974.8 0; : 143 Minimum Test error found - save the configuration ; : 143 | 9485.56 8503.01 0.0205275 0.0018356 42799.2 0; : 144 Minimum Test error found - save the configuration ; : 144 | 9408.47 8425.29 0.0205008 0.00183704 42863.9 0; : 145 Minimum Test error found - save the configuration ; : 145 | 9331.33 8347.95 0.0201933 0.00180744 43511.7 0; : 146 Minimum Test error found - save the configuration ; : 146 | 9254.79 8271.21 0.0201415 0.00180723 43634.1 0; : 147 M,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:26504,Test,Test,26504,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 249 | 3970.44 3073.93 0.0201703 0.00181858 43592.7 0; : 250 Minimum Test error found - save the configuration ; : 250 | 3939.05 3041.72 0.0204513 0.00185682 43023.5 0; : 251 Minimum Test error found - save the configuration ; : 251 | 3905.19 3012.24 0.0207706 0.0018857 42361.9 0; : 252 Minimum Test error found - save the configuration ; : 252 | 3873.64 2981.7 0.0208833 0.0019031 42149.1 0; : 253 Minimum Test error found - save the configuration ; : 253 | 3841.98 2951.54 0.0208487 0.0019305 42287.4 0; : 254 Minimum Test error found - save the configuration ; : 254 | 3809.95 2921.87 0.0208755 0.00187363 42101.1 0; : 255 Minimum Test error found - save the configuration ; : 255 | 3779.13 2892.2 0.020905 0.00188208 42054.6 0; : 256 Minimum Test error found - save the configuration ; : 256 | 3747.34 2863.22 0.020356 0.00183152 43186 0; : 257 Minimum Test error found - save the configuration ; : 257 | 3717.23 2832.96 0.0205175 0.00183548 42822 0; : 258 Minimum Test error found - save the configuration ; : 258 | 3685.71 2804.1 0.0207306 0.00191201 42511.2 0; : 259 Minimum Test error found - save the configuration ; : 259 | 3655.28 2775.93 0.0206157 0.0018465 42623 0; : 260 Minimum Test error found - save the configuration ; : 260 | 3624.6 2748.54 0.0206258 0.00186298 42637.5 0; : 261 Minimum Test error found - save the configuration ; : 261 | 3595.24 2720.67 0.0206036 0.00182681 42605.8 0; : 262 Minimum Test error found - save the configuration ; : 262 | 3565.68 2692.59 0.0203715 0.00187472 43250.7 0; : 263 Minimum Test error found - save the configuration ; : 263 | 3536.15 2665.16 0.0204197 0.00183921 43055.9 0; : 264 Minimum Test error found - save the configuration ; : 264 | 3507.67 2636.8 0.0206158 0.00185399 42639.7 0; : 265 Minimum Test error found - save the configuration ; : 265 | 3477.42 2610.03 0.0202093 0.0018315 43530.8 0; : 266 Minimum Test error found - save the configuration ; : 266 | 3448.44 2583.82 0.0201348 0.00181129 43659.7 0; : 267 Mi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:40091,Test,Test,40091,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 594 | 130.385 83.3494 0.0201184 0.00182079 43721.6 0; : 595 Minimum Test error found - save the configuration ; : 595 | 128.821 82.7241 0.0201197 0.00182054 43718 0; : 596 Minimum Test error found - save the configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79134,Test,Test,79134,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 596 | 127.285 81.8772 0.0201421 0.00182102 43665.5 0; : 597 Minimum Test error found - save the configuration ; : 597 | 125.567 80.7585 0.0201182 0.00182506 43732.1 0; : 598 Minimum Test error found - save the configuration ; : 598 | 124.213 80.6209 0.0201133 0.0018121 43713 0; : 599 Minimum Test error found - save the configuration ; : 599 | 122.94 79.487 0.0201252 0.00180702 43672.5 0; : 600 Minimum Test error found - save the configuration ; : 600 | 121.268 78.716 0.0201262 0.0018137 43686.1 0; : 601 Minimum Test error found - save the configuration ; : 601 | 119.733 78.5666 0.0201064 0.00181556 43737.8 0; : 602 Minimum Test error found - save the configuration ; : 602 | 118.293 77.4143 0.0201212 0.00181376 43698 0; : 603 Minimum Test error found - save the configuration ; : 603 | 116.739 75.9525 0.0201101 0.00180951 43714.3 0; : 604 Minimum Test error found - save the configuration ; : 604 | 115.282 75.4842 0.0201093 0.00181811 43737 0; : 605 Minimum Test error found - save the configuration ; : 605 | 113.756 74.5415 0.0201179 0.00181105 43699.5 0; : 606 Minimum Test error found - save the configuration ; : 606 | 112.65 73.8117 0.0200987 0.00180944 43741.5 0; : 607 Minimum Test error found - save the configuration ; : 607 | 110.993 73.1273 0.0200934 0.00180455 43742.6 0; : 608 Minimum Test error found - save the configuration ; : 608 | 109.653 72.3206 0.0201066 0.00180567 43713.6 0; : 609 Minimum Test error found - save the configuration ; : 609 | 108.357 71.632 0.0200983 0.00180999 43743.9 0; : 610 Minimum Test error found - save the configuration ; : 610 | 106.875 70.7773 0.0201154 0.00182046 43728 0; : 611 | 105.742 70.7984 0.0200525 0.00175765 43728.1 1; : 612 Minimum Test error found - save the configuration ; : 612 | 104.268 69.338 0.0202166 0.00183521 43522.3 0; : 613 Minimum Test error found - save the configuration ; : 613 | 102.858 68.9009 0.0202348 0.00182917 43464.9 0; : 614 Minimum Test error found - save the configuration ; : 614,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:79360,Test,Test,79360,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 6 | 0.387736 0.373696 0.0792581 0.00678916 44156.9 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.373399 0.360485 0.0791536 0.00677002 44208.9 0; : 8 Minimum Test error found - save the configuration ; : 8 | 0.362792 0.352336 0.0796639 0.00682572 43933 0; : 9 Minimum Test error found - save the configuration ; : 9 | 0.353594 0.340526 0.0805399 0.00700876 43519 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.345712 0.336826 0.080966 0.0069933 43259.2 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.338399 0.329567 0.0802544 0.00691181 43630.9 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.333122 0.322325 0.0804981 0.00689735 43477.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.326577 0.317097 0.0800716 0.00688531 43724 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.320979 0.311994 0.080369 0.00694962 43585.2 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.316442 0.305918 0.0803736 0.00690045 43553.3 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.311672 0.301667 0.0807629 0.00695777 43357.4 0; : 17 Minimum Test error found - save the configuration ; : 17 | 0.306787 0.297289 0.0804752 0.00690149 43493.8 0; : 18 Minimum Test error found - save the configuration ; : 18 | 0.303107 0.295781 0.0805443 0.00693772 43474.3 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.300241 0.290359 0.0805629 0.00693546 43462 0; : 20 | 0.29682 0.292587 0.0806285 0.00686869 43384.1 1; : ; : Elapsed time for training with 4000 events: 1.62 sec ; : Dataset[dataset] : Create results for training; : Dataset[dataset] : Multiclass evaluation of DL_CPU on training sample; : Dataset[dataset] : Elapsed time for evaluation of 4000 events: 0.106 sec ; : Creating multiclass response histograms...; : Creating multiclass performance histograms...; : Creating xml weight file: ␛[0;36mdataset/weights/,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:16377,Test,Test,16377,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,1,['Test'],['Test']
Testability, configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found - save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save t,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:19541,Test,Test,19541,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 787 | 12.2089 15.7994 0.0201254 0.00182497 43714.8 0; : 788 Minimum Test error found - save the configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:98284,Test,Test,98284,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 788 | 11.8962 15.4841 0.0201259 0.00183192 43730.1 0; : 789 | 11.7703 15.6571 0.0200815 0.00176624 43679.3 1; : 790 Minimum Test error found - save the configuration ; : 790 | 11.5659 15.3611 0.0201716 0.00184466 43651.5 0; : 791 Minimum Test error found - save the configuration ; : 791 | 11.5078 15.2368 0.0201178 0.00182919 43743 0; : 792 | 11.3858 15.3308 0.0200358 0.001762 43778.5 1; : 793 Minimum Test error found - save the configuration ; : 793 | 11.148 14.9168 0.0201055 0.00182242 43756.2 0; : 794 Minimum Test error found - save the configuration ; : 794 | 10.9366 14.9107 0.0201153 0.00182387 43736.3 0; : 795 | 11.1392 14.953 0.020041 0.00176266 43767.6 1; : 796 | 11.1019 15.4101 0.0200549 0.00175791 43723.2 2; : 797 | 11.12 15.292 0.0200628 0.00175972 43708.5 3; : 798 | 10.8935 14.9786 0.0200585 0.0017545 43706.3 4; : 799 Minimum Test error found - save the configuration ; : 799 | 10.7942 14.6749 0.0201633 0.00182171 43616.6 0; : 800 Minimum Test error found - save the configuration ; : 800 | 10.3317 14.1583 0.0201165 0.00182126 43727.2 0; : 801 | 10.3503 14.2866 0.0200523 0.00175781 43729 1; : 802 | 10.3453 15.2815 0.0200406 0.00175563 43751.8 2; : 803 | 10.2123 14.6873 0.0200478 0.00175638 43736.3 3; : 804 | 10.1133 14.2109 0.0201368 0.00176313 43540.5 4; : 805 Minimum Test error found - save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:98398,Test,Test,98398,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 873 | 5.70638 8.71803 0.0200731 0.00181478 43815.7 0; : 874 Minimum Test error found - save the configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.334,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:104969,Test,Test,104969,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 874 | 5.53455 8.53383 0.0201925 0.00181685 43535.8 0; : 875 | 5.74708 8.69754 0.0202376 0.00177647 43334.2 1; : 876 | 5.6794 9.00589 0.0202045 0.00176006 43373.5 2; : 877 | 5.64383 8.64736 0.0203248 0.00179972 43184.7 3; : 878 Minimum Test error found - save the configuration ; : 878 | 5.55379 8.16524 0.0206602 0.00187795 42593.5 0; : 879 | 5.63754 8.31065 0.0203728 0.00175638 42972.7 1; : 880 | 5.71571 8.37499 0.0201251 0.00178041 43609.3 2; : 881 | 5.7556 8.5037 0.0200424 0.00175411 43743.8 3; : 882 | 5.47815 8.64255 0.0200508 0.00175977 43737.3 4; : 883 | 5.49484 8.19099 0.0201663 0.00175135 43443 5; : 884 Minimum Test error found - save the configuration ; : 884 | 5.44144 8.14796 0.020157 0.00182376 43636.7 0; : 885 | 5.72885 9.21369 0.0207466 0.00176462 42145.2 1; : 886 | 5.67418 8.64993 0.0200759 0.00176094 43680.2 2; : 887 Minimum Test error found - save the configuration ; : 887 | 5.55202 8.05484 0.0201465 0.00184145 43703.7 0; : 888 Minimum Test error found - save the configuration ; : 888 | 5.4009 7.86368 0.0201494 0.00184759 43711.4 0; : 889 | 5.09006 7.93881 0.0200766 0.00176618 43691 1; : 890 | 5.16257 8.05551 0.0200625 0.00176866 43730.7 2; : 891 Minimum Test error found - save the configuration ; : 891 | 5.07326 7.82028 0.0201532 0.0018382 43680.1 0; : 892 | 5.14088 7.89491 0.0200852 0.00179174 43731.4 1; : 893 Minimum Test error found - save the configuration ; : 893 | 5.13302 7.67646 0.0201541 0.00183919 43680.3 0; : 894 | 5.44229 7.83993 0.0200562 0.00176505 43736.9 1; : 895 | 5.40474 8.2327 0.0200223 0.00176151 43809.8 2; : 896 Minimum Test error found - save the configuration ; : 896 | 5.30823 7.62628 0.0201123 0.00182273 43740.8 0; : 897 | 6.20081 8.04326 0.0200652 0.00176931 43725.7 1; : 898 | 5.99101 8.0649 0.0200274 0.00175928 43792 2; : 899 Minimum Test error found - save the configuration ; : 899 | 5.1416 7.3348 0.0201215 0.00182199 43717.1 0; : 900 | 4.88699 7.46821 0.0200416 0.0017612 43762.6 1; : 901 Minimum Test error ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:105083,Test,Test,105083,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 901 | 4.92918 7.2702 0.0200754 0.00181642 43814.2 0; : 902 Minimum Test error found - save the configuration ; : 902 | 5.04871 7.17895 0.0200791 0.00180807 43785.1 0; : 903 | 4.88551 7.21813 0.0200213 0.00174992 43784.3 1; : 904 | 4.98683 7.44507 0.0200553 0.00174858 43699.9 2; : 905 | 4.82992 7.45009 0.0202406 0.00175807 43284.1 3; : 906 | 4.86112 7.78644 0.0202162 0.00175457 43333 4; : 907 Minimum Test error found - save the configuration ; : 907 | 4.76534 7.04169 0.0202678 0.00183052 43390.4 0; : 908 | 4.77659 7.36078 0.0201903 0.00174867 43380.2 1; : 909 | 5.40526 9.09975 0.0204121 0.00175613 42881.7 2; : 910 | 5.23108 7.3695 0.0200572 0.0017555 43711.7 3; : 911 | 4.9718 7.21676 0.0200739 0.00175828 43678.5 4; : 912 Minimum Test error found - save the configuration ; : 912 | 4.64478 6.77041 0.0201181 0.00182552 43733.5 0; : 913 | 4.96617 7.29752 0.0200675 0.00175608 43688.5 1; : 914 | 4.79524 7.25946 0.0200357 0.00175682 43766.4 2; : 915 Minimum Test error found - save the configuration ; : 915 | 4.5624 6.6787 0.0201058 0.0018145 43736.7 0; : 916 Minimum Test error found - save the configuration ; : 916 | 4.49553 6.65717 0.0201015 0.00180949 43734.9 0; : 917 Minimum Test error found - save the configuration ; : 917 | 4.36563 6.60613 0.0201007 0.00181415 43748 0; : 918 Minimum Test error found - save the configuration ; : 918 | 4.47049 6.3479 0.0200865 0.00182018 43796.4 0; : 919 | 4.35846 6.60136 0.0200632 0.00176343 43716.3 1; : 920 | 4.30933 6.53557 0.0200239 0.00175965 43801.4 2; : 921 Minimum Test error found - save the configuration ; : 921 | 4.32266 6.29119 0.0200952 0.00182605 43789.5 0; : 922 | 4.32742 6.39561 0.0200257 0.00176292 43804.9 1; : 923 | 4.33774 6.46608 0.0200201 0.00176071 43813 2; : 924 | 4.36503 6.3111 0.0200702 0.00177545 43728.3 3; : 925 | 4.7314 7.24632 0.0202093 0.00176259 43368.2 4; : 926 | 4.61316 6.64099 0.020249 0.00181216 43391.3 5; : 927 Minimum Test error found - save the configuration ; : 927 | 4.41727 6.09792,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:107100,Test,Test,107100,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, configuration ; : 936 | 4.45077 5.93539 0.020128 0.0018336 43729.3 0; : 937 | 4.31583 6.35935 0.0203501 0.00176302 43040.6 1; : 938 Minimum Test error found - save the configuration ; : 938 | 4.1293 5.8271 0.0205749 0.0018749 42780.8 0; : 939 Minimum Test error found - save the configuration ; : 939 | 4.02273 5.7049 0.0206164 0.00186577 42665.2 0; : 940 | 3.91188 6.29174 0.0201055 0.00180854 43723.1 1; : 941 | 3.89757 5.80965 0.0203179 0.00179759 43195.8 2; : 942 | 3.94904 5.73464 0.0200877 0.00175468 43637.1 3; : 943 | 3.90362 5.73888 0.0200954 0.00175028 43608.4 4; : 944 | 3.87035 5.70718 0.0200345 0.0017513 43756.1 5; : 945 | 4.07017 5.95519 0.020321 0.00177709 43140.8 6; : 946 Minimum Test error found - save the configuration ; : 946 | 4.03451 5.59581 0.0201405 0.00182817 43686.3 0; : 947 | 3.85593 5.66203 0.0200425 0.00175434 43744.1 1; : 948 Minimum Test error found - save the configuration ; : 948 | 3.86683 5.35682 0.0204778 0.00185498 42958.2 0; : 949 Minimum Test error found - save the configuration ; : 949 | 3.68334 5.31467 0.0201988 0.00181717 43521.8 0; : 950 | 3.73312 5.52286 0.0201437 0.00175576 43506.8 1; : 951 | 3.85908 5.35112 0.0203536 0.00178284 43078.6 2; : 952 | 3.97296 5.91801 0.0201499 0.00177356 43534.3 3; : 953 Minimum Test error found - save the configuration ; : 953 | 3.78482 5.22353 0.0202416 0.0018489 43495.5 0; : 954 | 3.77661 6.79704 0.0200822 0.00176597 43677.1 1; : 955 | 4.26211 5.70833 0.020048 0.0017647 43755.8 2; : 956 | 3.83703 5.25865 0.0200643 0.00176603 43720 3; : 957 Minimum Test error found - save the configuration ; : 957 | 3.70429 5.19606 0.0204948 0.00189018 43000 0; : 958 | 3.80095 5.43788 0.0203069 0.00176137 43137.1 1; : 959 Minimum Test error found - save the configuration ; : 959 | 3.68258 5.15386 0.0202548 0.00182461 43407 0; : 960 Minimum Test error found - save the configuration ; : 960 | 3.74165 4.97436 0.0200851 0.00180832 43771.4 0; : 961 | 3.60053 5.18492 0.0200347 0.00175376 43761.4 1; : 962 | 4.06747 4.98756,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:109679,Test,Test,109679,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability," configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual void preferredObservableScanOrder (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBinSamplingPdf.html:29068,log,logEvalError,29068,doc/master/classRooBinSamplingPdf.html,https://root.cern,https://root.cern/doc/master/classRooBinSamplingPdf.html,4,"['Log', 'log']","['Log', 'logEvalError']"
Testability," configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:26918,log,logEvalError,26918,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,2,"['Log', 'log']","['Log', 'logEvalError']"
Testability," const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const LogLikelihoodFCN &f)Copy constructor.Definition LogLikelihoodFCN.h:86; ROOT::Fit::LogLikelihoodFCN::BaseFCNBasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCNDefinition LogLikelihoodFCN.h:45; ROOT::Fit::LogLikelihoodFCN::TModelFunType::BackendType TDefinition LogLikelihoodFCN.h:44; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf)Definition LogLikelihoodFCN.h:57; ROOT::Fit::LogLikelihoodFCN::UseSumOfWeightSquarevoid UseSumOfWeightSquare(bool on=true)Definition LogLikelihoodFCN.h:139; ROOT::Fit::LogLikelihoodFCN::Gradientvirtual void Gradient(const double *x, double *g) constDefinition LogLikelihoodFCN.h:127; ROOT::Fit::LogLikelihoodFCN::BaseObjFunction::ROOT::Math::BasicFitMethodFunction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:9576,Log,LogLikelihoodFCN,9576,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,3,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFCNLogLikelihoodFCN']"
Testability," const Double_t * ArrY () const;  ; Double_t * ArrZ ();  ; const Double_t * ArrZ () const;  ;  ClassDefOverride (REveTrans, 1);  ; Double_t & CM (Int_t i, Int_t j);  ; Double_t CM (Int_t i, Int_t j) const;  ; TVector3 GetBaseVec (Int_t b) const;  Get base-vector with index b. ;  ; void GetBaseVec (Int_t b, TVector3 &v) const;  ; Bool_t GetEditRotation ();  ; Bool_t GetEditScale ();  ; Bool_t GetEditTrans () const;  ; TVector3 GetPos () const;  ; void GetPos (Double_t &x, Double_t &y, Double_t &z) const;  Get position (base-vec 4). ;  ; void GetPos (Double_t *x) const;  ; void GetPos (Float_t *x) const;  ; void GetPos (TVector3 &v) const;  ; void GetRotAngles (Float_t *x) const;  Get Cardan rotation angles (pattern xYz above). ;  ; void GetScale (Double_t &sx, Double_t &sy, Double_t &sz) const;  Deduce scales from sizes of base vectors. ;  ; Bool_t GetUseTrans () const;  ; Double_t Invert ();  Invert matrix. ;  ; Bool_t IsScale (Double_t low=0.9, Double_t high=1.1) const;  Test if the transformation is a scale. ;  ; void Move (const REveTrans &a, Int_t ai, Double_t amount);  Move in a's coord-system along axis-index ai. ;  ; void Move3 (const REveTrans &a, Double_t x, Double_t y, Double_t z);  General move in a's coord-system. ;  ; void Move3LF (Double_t x, Double_t y, Double_t z);  General move in local-frame. ;  ; void Move3PF (Double_t x, Double_t y, Double_t z);  General move in parent-frame. ;  ; void MoveLF (Int_t ai, Double_t amount);  Move in local-frame along axis with index ai. ;  ; void MovePF (Int_t ai, Double_t amount);  Move in parent-frame along axis index ai. ;  ; void Multiply (const Double_t *vin, Double_t *vout, Double_t w=1) const;  Multiply vector and fill output array vout. ;  ; TVector3 Multiply (const TVector3 &v, Double_t w=1) const;  Multiply vector and return it. ;  ; void MultiplyIP (Double_t *v, Double_t w=1) const;  Multiply vector in-place. ;  ; void MultiplyIP (Float_t *v, Double_t w=1) const;  Multiply vector in-place. ;  ; void Multip",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html:1799,Test,Test,1799,doc/master/classROOT_1_1Experimental_1_1REveTrans.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveTrans.html,1,['Test'],['Test']
Testability," const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDerivative&operator=(const RooDerivative&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_torder() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDerivative.html:19544,test,testArg,19544,root/html602/RooDerivative.html,https://root.cern,https://root.cern/root/html602/RooDerivative.html,2,['test'],['testArg']
Testability," const RooAbsArg& var2, const RooAbsArg& var3, const RooAbsArg& var4, const RooAbsArg& var5, const RooAbsArg& var6, const RooAbsArg& var7, const RooAbsArg& var8, const RooAbsArg& var9, const char* name = """"); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); RooAbsCollection*RooAbsCollection::selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsCollection::setHashTableSize(Int_t i); voidRooAbsCollection::setName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t reverse = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgList.html:11335,Test,TestBit,11335,root/html602/RooArgList.html,https://root.cern,https://root.cern/root/html602/RooArgList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const SourceTypeList_t &source, MembersTypeMap_t &members, std::string &className, std::string &mappedName, std::ostream &output);  Write down the sources. ;  ; void WriteReadRawRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ;  ; void WriteReadRuleFunc (SchemaRuleMap_t &rule, int index, std::string &mappedName, MembersTypeMap_t &members, std::ostream &output);  Write the conversion function for Read rule, the function name is being written to rule[""funcname""]. ;  ; void WriteSchemaList (std::list< SchemaRuleMap_t > &rules, const std::string &listName, std::ostream &output);  Write schema rules. ;  . Variables; R__EXTERN TVirtualRWMutex * gCoreMutex = nullptr;  ; R__EXTERN SchemaRuleClassMap_t gReadRawRules;  ; R__EXTERN SchemaRuleClassMap_t gReadRules;  . Detailed Description; This file contains a specialised ROOT message handler to test for diagnostic in unit tests. ; Class RooRealSumFunc implements a PDF constructed from a sum of functions:; A space to attach TBranches.; Namespace for new ROOT classes and functions.; VSD Structures.; tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7; AuthorStephan Hageboeck steph.nosp@m.an.h.nosp@m.agebo.nosp@m.eck@.nosp@m.cern..nosp@m.ch; Sum(i=1,n-1) coef_i * func_i(x) + [ 1 - (Sum(i=1,n-1) coef_i ] * func_n(x); pdf(x) = ------------------------------------------------------------------------------; Sum(i=1,n-1) coef_i * Int(func_i)dx + [ 1 - (Sum(i=1,n-1) coef_i ] * Int(func_n)dx; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; where coef_i and func_i are RooAbsReal objects, and x is the collection of dependents. In the present version coef_i may not depend on x, but this limitation may be removed in the future. Differ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v628/namespaceROOT.html:14323,test,test,14323,doc/v628/namespaceROOT.html,https://root.cern,https://root.cern/doc/v628/namespaceROOT.html,2,['test'],"['test', 'tests']"
Testability," const TCut &rhs);; 89// Preventing warnings with -Weffc++ in GCC since the overloading of the && and || operators was a design choice.; 90#if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) >= 40600; 91#pragma GCC diagnostic push; 92#pragma GCC diagnostic ignored ""-Weffc++""; 93#endif; 94TCut operator&&(const TCut &lhs, const char *rhs);; 95TCut operator&&(const char *lhs, const TCut &rhs);; 96TCut operator&&(const TCut &lhs, const TCut &rhs);; 97TCut operator||(const TCut &lhs, const char *rhs);; 98TCut operator||(const char *lhs, const TCut &rhs);; 99TCut operator||(const TCut &lhs, const TCut &rhs);; 100#if (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__) >= 40600; 101#pragma GCC diagnostic pop; 102#endif; 103TCut operator!(const TCut &rhs);; 104 ; 105#endif; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; operator*TCut operator*(const TCut &lhs, const char *rhs)Multiplication.Definition TCut.cxx:208; operator!TCut operator!(const TCut &rhs)Logical negation.Definition TCut.cxx:292; operator+TCut operator+(const TCut &lhs, const char *rhs)Addition.Definition TCut.cxx:184; operator||TCut operator||(const TCut &lhs, const char *rhs)Logical or.Definition TCut.cxx:256; operator&&TCut operator&&(const TCut &lhs, const char *rhs)Logical and.Definition TCut.cxx:232; namechar name[80]Definition TGX11.cxx:110; TNamed.h; TCutA specialized string object used for TTree selections.Definition TCut.h:25; TCut::TCutTCut()Constructor.Definition TCut.cxx:47; TCut::operator==bool operator==(const char *rhs) constComparison.Definition TCut.cxx:82; TCut::operator*friend TCut operator*(const TCut &lhs, const char *rhs)Multiplication.Definition TCut.cxx:208; TCut::operator!friend TCut operator!(const TCut &rhs)Logical negation.Definition TCut.cxx:292; TCut::operator>=bool operator>=(const TCut &rhs); TCut::operator+friend TCut operator+(const TCut &lhs, const char *rhs)Addition.Definition TCut.cxx:184; TCut::operator<bool operato",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCut_8h_source.html:4698,Log,Logical,4698,doc/master/TCut_8h_source.html,https://root.cern,https://root.cern/doc/master/TCut_8h_source.html,1,['Log'],['Logical']
Testability," const TGeoBBox* box2, const TGeoMatrix* mat2); Check if 2 positioned boxes overlap. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Computes normal to closest surface from POINT. Bool_t CouldBeCrossed(Double_t* point, Double_t* dir) const; Decides fast if the bounding box could be crossed by a vector. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute closest distance from point px,py to each corner. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); --- Divide this box shape belonging to volume ""voldiv"" into ndiv equal volumes; called divname, from start position with the given step. Returns pointer; to created division cell volume. In case a wrong division axis is supplied,; returns pointer to volume to be divided. void ComputeBBox(); Compute bounding box - nothing to do in this case. Bool_t Contains(Double_t* point) const; Test if point is inside this shape. Bool_t Contains(const Double_t* point, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin); Test if point is inside this shape. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, Double_t stepmax = TGeoShape::Big()); Compute distance from inside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; Compute distance from outside point to surface of the box.; Boundary safe algorithm. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Double_t dx, Double_t dy, Double_t dz, const Double_t* origin, D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoBBox.html:14347,Test,Test,14347,root/html528/TGeoBBox.html,https://root.cern,https://root.cern/root/html528/TGeoBBox.html,3,['Test'],['Test']
Testability," const TH1* theHist, TMVA::KDEKernel::EKernelType ktype, TMVA::KDEKernel::EKernelIter kiter, TMVA::KDEKernel::EKernelBorder kborder, Float_t FineFactor, Bool_t norm = kTRUE); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; voidProcessOptions(); virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); voidReadXML(void* pdfnode); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetReadingVersion(UInt_t rv); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); voidValidatePDF(TH1* original = 0) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDF.html:6295,Test,TestBit,6295,root/html530/TMVA__PDF.html,https://root.cern,https://root.cern/root/html530/TMVA__PDF.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7393 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrappi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTClass.html:94034,test,testio,94034,doc/v632/classTClass.html,https://root.cern,https://root.cern/doc/v632/classTClass.html,1,['test'],['testio']
Testability," const TObjArray * TClass::GetStreamerInfos ; (; ); const. inline . Definition at line 492 of file TClass.h. ◆ GetTypeInfo(). const std::type_info * TClass::GetTypeInfo ; (; ); const. inline . Definition at line 496 of file TClass.h. ◆ HasConsistentHashMember(). Bool_t TClass::HasConsistentHashMember ; (; ). inline . Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ; Definition at line 501 of file TClass.h. ◆ HasCustomStreamerMember(). Bool_t TClass::HasCustomStreamerMember ; (; ); const. inline . The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ; Definition at line 508 of file TClass.h. ◆ HasDataMemberInfo(). Bool_t TClass::HasDataMemberInfo ; (; ); const. inline . Definition at line 407 of file TClass.h. ◆ HasDefaultConstructor(). Bool_t TClass::HasDefaultConstructor ; (; Bool_t ; testio = kFALSE); const. Return true if we have access to a constructor usable for I/O. ; This is typically the default constructor but can also be a constructor specifically marked for I/O (for example a constructor taking a TRootIOCtor* as an argument). In other words, if this routine returns true, TClass::New is guarantee to succeed. To know if the class described by this TClass has a default constructor (public or not), use cl->GetProperty() & kClassHasDefaultCtor; kClassHasDefaultCtor@ kClassHasDefaultCtorDefinition TDictionary.h:140; To know if the class described by this TClass has a public default constructor use: gInterpreter->ClassInfo_HasDefaultConstructor(aClass->GetClassInfo());; gInterpreter#define gInterpreterDefinition TInterpreter.h:573. Definition at line 7460 of file TClass.cxx. ◆ HasDictionary(). Bool_t TClass::HasDictionary ; (; ); const. Check whether a class has a dictionary or not. ; This is equivalent to ask if a class is coming from a bootstrappi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass.html:94035,test,testio,94035,doc/master/classTClass.html,https://root.cern,https://root.cern/doc/master/classTClass.html,1,['test'],['testio']
Testability," const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() const; { return fSelectedPad; }. TVirtualPad * GetClickSelectedPad() const; { return fClickSelectedPad; }. Bool_t GetShowEventStatus() const; { return TestBit(kShowEventStatus); }. Bool_t GetShowToolBar() const; { return TestBit(kShowToolBar); }. Bool_t GetShowEditor() const; { return TestBit(kShowEditor); }. Bool_t GetShowToolTips() const; { return TestBit(kShowToolTips); }. Bool_t GetAutoExec() const; { return TestBit(kAutoExec); }. Size_t GetXsizeUser() const; {return fXsizeUser;}. Size_t GetYsizeUser() const; {return fYsizeUser;}. Size_t GetXsizeReal() const; {return fXsizeReal;}. Size_t GetYsizeReal() const; {return fYsizeReal;}. Int_t GetCanvasID() const; {return fCanvasID;}. TCanvasImp * GetCanvasImp() const; {return fCanvasImp;}. UInt_t GetWindowWidth() const; { return fWindowWidth; }. UInt_t GetWindowHeight() const; { return fWindowHeight; }. UInt_t GetWw() const; { return fCw; }. UInt_t GetWh() const; { return fCh; }. void GetCanvasPar(Int_t& wtopx, Int_t& wtopy, UInt_t& ww, UInt_t& wh); {wtopx=GetWindowTopX(); wtopy=fWindowTopY; ww=fWindowWidth; wh=fWindowHeight;}. Bool_t HasMenuBar() const; { return TestBit(kMenuBar); }. void Iconify(); { fCanvasImp->Iconify(); }. Bool_t IsBatch() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TCanvas.html:45842,Test,TestBit,45842,root/html526/TCanvas.html,https://root.cern,https://root.cern/root/html526/TCanvas.html,7,['Test'],['TestBit']
Testability," const char * ; comment = 0 . ). virtual . Create a reference to a class documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1788 of file TDocOutput.cxx. ◆ ReferenceEntity() [2/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataMember * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a data member documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1814 of file TDocOutput.cxx. ◆ ReferenceEntity() [3/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataType * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a type documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:24338,test,test,24338,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability," const char * ; exclude . ). virtual . Partition dataset 'ds' accordingly to the servers. ; The returned TMap contains: <server> --> <subdataset> (TFileCollection) where <subdataset> is the subset of 'ds' on <server> The partitioning is done using all the URLs in the TFileInfo's, so the resulting datasets are not mutually exclusive. The string 'exclude' contains a comma-separated list of servers to exclude from the map. ; Definition at line 1006 of file TDataSetManager.cxx. ◆ GetUserUsedMap(). virtual TMap * TDataSetManager::GetUserUsedMap ; (; ). inlineprotectedvirtual . Definition at line 71 of file TDataSetManager.h. ◆ IsA(). TClass * TDataSetManager::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TDataSetManagerFile.; Definition at line 158 of file TDataSetManager.h. ◆ MonitorUsedSpace(). void TDataSetManager::MonitorUsedSpace ; (; TVirtualMonitoringWriter * ; monitoring). virtual . Log info to the monitoring server. ; Definition at line 673 of file TDataSetManager.cxx. ◆ NotifyUpdate(). Int_t TDataSetManager::NotifyUpdate ; (; const char * ; group = 0, . const char * ; user = 0, . const char * ; dspath = 0, . Long_t ; mtime = 0, . const char * ; checksum = 0 . ). virtual . Save into the <datasetdir>/dataset.list file the name of the last updated or created or modified dataset Returns 0 on success, -1 on error. ; Reimplemented in TDataSetManagerFile.; Definition at line 773 of file TDataSetManager.cxx. ◆ operator=(). TDataSetManager & TDataSetManager::operator= ; (; const TDataSetManager & ; ). private . ◆ ParseDataSetSrvMaps(). TList * TDataSetManager::ParseDataSetSrvMaps ; (; const TString & ; srvmaps). static . Create a server mapping list from the content of 'srvmaps' Return the list (owned by the caller) or 0 if no valid info could be found) ; Definition at line 1867 of file TDataSetManager.cxx. ◆ ParseInitOpts(). void TDataSetManager::ParseInitOpts ; (; const char * ; opts).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:26883,Log,Log,26883,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,1,['Log'],['Log']
Testability," const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TLibraryDocInfo&operator=(const TLibraryDocInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLibraryDocInfo.html:4758,Test,TestBit,4758,root/html530/TLibraryDocInfo.html,https://root.cern,https://root.cern/root/html530/TLibraryDocInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootGuiFactory&operator=(const TRootGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRootGuiFactory.html:5715,Test,TestBit,5715,root/html530/TRootGuiFactory.html,https://root.cern,https://root.cern/root/html530/TRootGuiFactory.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); Int_tSize() const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDataType.html:5049,Test,TestBit,5049,root/html530/TDataType.html,https://root.cern,https://root.cern/root/html530/TDataType.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBaseClass.html:5116,Test,TestBit,5116,root/html534/TBaseClass.html,https://root.cern,https://root.cern/root/html534/TBaseClass.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReflect(Bool_t flag = kTRUE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDivIndex(Int_t index); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetNext(Int_t index); static voidTObject::SetObjectStat(Bool_t stat); voidSetRange(Double_t start, Double_t step, Int_t ndivisions); voidSetSpacedOut(Bool_t flag); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVolume(TGeoVolume* vol); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateMatrix(Int_t, TGeoHMatrix&) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPatternFinder.html:6235,Test,TestBit,6235,root/html532/TGeoPatternFinder.html,https://root.cern,https://root.cern/root/html532/TGeoPatternFinder.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); ROOT::TSchemaRuleSet&operator=(const ROOT::TSchemaRuleSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemoveRule(ROOT::TSchemaRule* rule); voidRemoveRules(TObjArray* rules); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClass(TClass* cls); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; ROOT::TSchemaRuleSetTSchemaRuleSet(); ROOT::TSchemaRuleSetTSchemaRuleSet(const ROOT::TSchemaRuleSet&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__TSchemaRuleSet.html:5245,Test,TestBit,5245,root/html602/ROOT__TSchemaRuleSet.html,https://root.cern,https://root.cern/root/html602/ROOT__TSchemaRuleSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THilbertMatrixTSym<double>&operator=(const THilbertMatrixTSym<double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THilbertMatrixTSym<double>(); THilbertMatrixTSym<double>(Int_t no_rows); THilbertMatrixTSym<double>(const THilbertMatrixTSym<double>&); THilbertMatrixTSym<double>(Int_t row_lwb, Int_t row_upb); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THilbertMatrixTSym_double_.html:4562,Test,TestBit,4562,root/html602/THilbertMatrixTSym_double_.html,https://root.cern,https://root.cern/root/html602/THilbertMatrixTSym_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRootSnifferStore&operator=(const TRootSnifferStore&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetField(Int_t, const char*, const char*, Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidSetResult(void* _res, TClass* _rescl, TDataMember* _resmemb, Int_t _res_chld); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRootSnifferStore(); TRootSnifferStore(const TRootSnifferStore&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRootSnifferStore.html:4822,Test,TestBit,4822,root/html602/TRootSnifferStore.html,https://root.cern,https://root.cern/root/html602/TRootSnifferStore.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tParseBuffer(const char* contents, Int_t len); virtual Int_tParseFile(const char* filename); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetReplaceEntities(Bool_t val = kTRUE); voidSetStopOnError(Bool_t stop = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetValidate(Bool_t val = kTRUE); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStopParser(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TXMLParser(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXMLParser.html:7943,Test,TestBit,7943,root/html602/TXMLParser.html,https://root.cern,https://root.cern/root/html602/TXMLParser.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const char* comment). void* GetParent(void* child); get parent node. void* GetChild(void* parent, const char* childname = 0); get child node. void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices( const std::vector<const Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ). CalcCovarianceMatrices( const std::vector<Event*>& events, Int_t maxCls, VariableTransformBase* transformBase ); compute covariance matrices. TH1* GetCumulativeDist(TH1* h); get the cumulative distribution of a histogram. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Tools.html:11818,Log,Logger,11818,root/html534/TMVA__Tools.html,https://root.cern,https://root.cern/root/html534/TMVA__Tools.html,3,['Log'],['Logger']
Testability," const char* comment). void* GetParent(void* child); get parent node. void* GetChild(void* parent, const char* childname = 0); get child node. void* GetNextChild(void* prevchild, const char* childname = 0); XML helpers. const char* GetContent(void* node); XML helpers. const char* GetName(void* node); XML helpers. Bool_t AddRawLine(void* node, const char* raw); XML helpers. std::vector<TString> SplitString(const TString& theOpt, const char separator) const; splits the option string at 'separator' and fills the list; 'splitV' with the primitive strings. TString StringFromInt(Long_t i); string tools. TString StringFromDouble(Double_t d); string tools. void WriteTMatrixDToXML(void* node, const char* name, TMatrixD* mat); XML helpers. void WriteTVectorDToXML(void* node, const char* name, TVectorD* vec). void ReadTVectorDFromXML(void* node, const char* name, TVectorD* vec). void ReadTMatrixDFromXML(void* node, const char* name, TMatrixD* mat). void TMVAWelcomeMessage(); direct output, eg, when starting ROOT session -> no use of Logger here. void TMVAVersionMessage(TMVA::MsgLogger& logger); prints the TMVA release number and date. void ROOTVersionMessage(TMVA::MsgLogger& logger); prints the ROOT release number and date. void TMVAWelcomeMessage(TMVA::MsgLogger& logger, TMVA::Tools::EWelcomeMessage m = kStandardWelcomeMsg); various kinds of welcome messages; ASCII text generated by this site: http://www.network-science.de/ascii. void TMVACitation(TMVA::MsgLogger& logger, TMVA::Tools::ECitation citType = kPlainText); kinds of TMVA citation. Bool_t HistoHasEquidistantBins(const TH1& h). CalcCovarianceMatrices(const vector<TMVA::Event*,allocator<TMVA::Event*> >& events, Int_t maxCls, TMVA::VariableTransformBase* transformBase = 0); compute covariance matrices. Double_t ComputeVariance(Double_t sumx2, Double_t sumx, Int_t nx). Tools(). TXMLEngine& xmlengine(); { return *fXMLEngine; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Tools.html:11584,Log,Logger,11584,root/html530/TMVA__Tools.html,https://root.cern,https://root.cern/root/html530/TMVA__Tools.html,2,['Log'],['Logger']
Testability," const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:11210,Log,LogViewer,11210,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,2,['Log'],['LogViewer']
Testability," const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tTProof::Load(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:11275,Log,LogViewer,11275,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,4,['Log'],['LogViewer']
Testability," const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*RooAbsMoment::mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFirstMoment.html:18842,test,testArg,18842,root/html534/RooFirstMoment.html,https://root.cern,https://root.cern/root/html534/RooFirstMoment.html,3,['test'],['testArg']
Testability," const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*RooAbsMoment::mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFirstMoment&operator=(const RooFirstMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAbsArg::overlaps(const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFirstMoment.html:18532,test,testArg,18532,root/html602/RooFirstMoment.html,https://root.cern,https://root.cern/root/html602/RooFirstMoment.html,2,['test'],['testArg']
Testability," const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*RooAbsMoment::mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooMoment&operator=(const RooMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMoment.html:18507,test,testArg,18507,root/html602/RooMoment.html,https://root.cern,https://root.cern/root/html602/RooMoment.html,2,['test'],['testArg']
Testability," const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsReal*RooAbsMoment::mean(); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSecondMoment&operator=(const RooSecondMoment&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_tRooAbsMoment::order() const; Bool_tRooAbsArg::overlaps(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSecondMoment.html:18537,test,testArg,18537,root/html602/RooSecondMoment.html,https://root.cern,https://root.cern/root/html602/RooSecondMoment.html,2,['test'],['testArg']
Testability," const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRefTable&operator=(const TRefTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadBuffer(TBuffer& b); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(Option_t* = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetParent(const TObject* parent, Int_t branchID); static voidSetRefTable(TRefTable* table); virtual voidSetUID(UInt_t uid, TProcessID* context = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRefTable.html:6232,Test,TestBit,6232,root/html534/TRefTable.html,https://root.cern,https://root.cern/root/html534/TRefTable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tvolume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:17028,Test,TestBits,17028,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,1,['Test'],['TestBits']
Testability," const char*); virtual TObjString*ReadBuffer(const char*, Long64_t, Int_t); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReset(Bool_t hard = kFALSE, const char* usr = 0); voidTObject::ResetBit(UInt_t f); virtual Int_tRm(const char*, const char* = 0, const char* = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendMsgToUsers(const char*, const char* = 0); virtual voidSetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInvalid(); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetROOTVersion(const char*); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidSetTXProofMgrHook(TProofMgr_t pmh); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidShowROOTVersions(); virtual voidShowWorkers(); virtual voidShutdownSession(Int_t id); virtual voidShutdownSession(TProof* p); virtual Int_tTNamed::Sizeof() const; virtual Int_tStat(const char*, FileStat_t&, const char* = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTail(const char*, const char* = 0, const char* = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofMgr.html:6971,Test,TestBit,6971,root/html530/TProofMgr.html,https://root.cern,https://root.cern/root/html530/TProofMgr.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const. Return the type (name) of the used generator. unsigned int EngineSize() const. Return the size of the generator state. double Gaus(double mean = 0, double sigma = 1); Random Distributions; 	Use naming and signatures compatible with ROOT TRandom. Gaussian distribution. Default method (use Ziggurat). double GausBM(double mean = 0, double sigma = 1). Gaussian distribution (Box-Muller method). double GausR(double mean = 0, double sigma = 1). Gaussian distribution (Ratio Method). double GaussianTail(double a, double sigma = 1). Gaussian Tail distribution. void Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y). Bivariate Gaussian distribution with correlation. double Exp(double tau). Exponential distribution. double BreitWigner(double mean = 0., double gamma = 1). Breit Wigner distribution. double Landau(double mean = 0, double sigma = 1). Landau distribution. double Gamma(double a, double b). Gamma distribution. double LogNormal(double zeta, double sigma). Log Normal distribution. double ChiSquare(double nu). Chi square distribution. double FDist(double nu1, double nu2). F distrbution. double tDist(double nu). t student distribution. void Circle(double& x, double& y, double r = 1). generate random numbers in a 2D circle of radious 1. void Sphere(double& x, double& y, double& z, double r = 1). generate random numbers in a 3D sphere of radious 1. unsigned int Poisson(double mu). Poisson distribution. unsigned int Binomial(unsigned int ntot, double prob). Binomial distribution. std::vector<unsigned int> Multinomial(unsigned int ntot, const vector<double>& p). Multinomial distribution. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 ROOT Foundation, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: Random.h 21553 2007-12-21 10:55:46Z moneta $ » Last generated: 2009-12-07 13:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Math__Random_-p1GSLRngGFSR4_.html:3833,Log,Log,3833,root/html526/ROOT__Math__Random_-p1GSLRngGFSR4_.html,https://root.cern,https://root.cern/root/html526/ROOT__Math__Random_-p1GSLRngGFSR4_.html,4,['Log'],['Log']
Testability," const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-06-30 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html:2405,log,log,2405,root/html602/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html602/ROOT__Minuit2__FCNBase.html,1,['log'],['log']
Testability," const. The meaning of the vector of parameters is of course defined by the user,; who uses the values of those parameters to calculate their function Value.; The order and the position of these parameters is strictly the one specified; by the user when supplying the starting values for minimization. The starting; values must be specified by the user, either via an std::vector<double> or the; MnUserParameters supplied as input to the MINUIT minimizers such as; VariableMetricMinimizer or MnMigrad. Later values are determined by MINUIT; as it searches for the Minimum or performs whatever analysis is requested by; the user. @param par function parameters as defined by the user. @return the Value of the function. @see MnUserParameters; @see VariableMetricMinimizer; @see MnMigrad. double ErrorDef() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. Comment a little bit better with links!!!!!!!!!!!!!!!!!. {return Up();}. double Up() const. Error definition of the function. MINUIT defines Parameter errors as the; change in Parameter Value required to change the function Value by up. Normally,; for chisquared fits it is 1, and for negative log likelihood, its Value is 0.5.; If the user wants instead the 2-sigma errors for chisquared fits, it becomes 4,; as Chi2(x+n*sigma) = Chi2(x) + n*n. \todo Comment a little bit better with links!!!!!!!!!!!!!!!!! Idem for ErrorDef(). void SetErrorDef(double ). add interface to set dynamically a new error definition; Re-implement this function if needed. {}. » Last changed: root/minuit2:$Id$ » Last generated: 2015-09-08 17:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Minuit2__FCNBase.html:2405,log,log,2405,root/html604/ROOT__Minuit2__FCNBase.html,https://root.cern,https://root.cern/root/html604/ROOT__Minuit2__FCNBase.html,1,['log'],['log']
Testability," const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 246 of file RooMsgService.h. ◆ isActive(). template<class T > . bool RooMsgService::isActive ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inline . Check if logging is active for given object/topic/RooFit::MsgLevel combination. ; Definition at line 186 of file RooMsgService.h. ◆ log() [1/3]. ostream & RooMsgService::log ; (; const RooAbsArg * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with RooAbsArg object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 419 of file RooMsgService.cxx. ◆ log() [2/3]. ostream & RooMsgService::log ; (; const TObject * ; self, . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; topic, . bool ; skipPrefix = false . ). Log error message associated with TObject object self at given level and topic. ; If skipPrefix is true the standard RooMsgService prefix is not added. ; Definition at line 456 of file RooMsgService.cxx. ◆ log() [3/3]. std::ostream & RooMsgService::log ; (; std::nullptr_t ; , . RooFit::MsgLevel ; level, . RooFit::MsgTopic ; facility, . bool ; forceSkipPrefix = false . ). inline . Definition at line 180 of file RooMsgService.h. ◆ numStreams(). Int_t RooMsgService::numStreams ; (; ); const. inline . Definition at line 163 of file RooMsgService.h. ◆ Print(). void RooMsgService::Print ; (; Option_t * ; options = nullptr); const. overridevirtual . Print configuration of message service. ; If ""v"" option is given also inactive streams are listed ; Reimplemented from TObject.; Definition at line 486 of file RooMsgService.cxx. ◆ reset(). void RooMsgService::reset ; (; ). Definition at line 113 of file RooMsgService.cxx. ◆ restoreState(). void RooMsgService::restoreState ; (; ). Restore last saved state of message service. ; Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:20428,Log,Log,20428,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['Log'],['Log']
Testability," const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; RooStats::HistFactory::LinInterpVarLinInterpVar(); RooStats::HistFactory::LinInterpVarLinInterpVar(const RooStats::HistFactory::LinInterpVar&); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title); RooStats::HistFactory::LinInterpVarLinInterpVar(const RooStats::HistFactory::LinInterpVar&, const char*); RooStats::HistFactory::LinInterpVarLinInterpVar(const char* name, const char* title, const RooArgList& _paramList, double nominal, vector<double> low, vector<double> high); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html:17714,log,logEvalError,17714,root/html602/RooStats__HistFactory__LinInterpVar.html,https://root.cern,https://root.cern/root/html602/RooStats__HistFactory__LinInterpVar.html,2,['log'],['logEvalError']
Testability," const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Int_torder() const; Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsMoment.html:19618,test,testArg,19618,root/html534/RooAbsMoment.html,https://root.cern,https://root.cern/root/html534/RooAbsMoment.html,2,['test'],['testArg']
Testability," const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooCFunction2Binding<double,int,int>&operator=(const RooCFunction2Binding<double,int,int>&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction2Binding_double_int_int_.html:19988,test,testArg,19988,root/html602/RooCFunction2Binding_double_int_int_.html,https://root.cern,https://root.cern/root/html602/RooCFunction2Binding_double_int_int_.html,2,['test'],['testArg']
Testability," const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveCluster&operator=(const TEveCluster&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveCluster.html:4234,Test,TestBit,4234,root/html528/TEveCluster.html,https://root.cern,https://root.cern/root/html528/TEveCluster.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveRecKink&operator=(const TEveRecKink&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveRecKink.html:4234,Test,TestBit,4234,root/html528/TEveRecKink.html,https://root.cern,https://root.cern/root/html528/TEveRecKink.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRecWinPair&operator=(const TRecWinPair&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRecWinPair.html:6595,Test,TestBit,6595,root/html528/TRecWinPair.html,https://root.cern,https://root.cern/root/html528/TRecWinPair.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGPicturePool(const TGClient* client, const char* path); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGPicturePool.html:4779,Test,TestBit,4779,root/html602/TGPicturePool.html,https://root.cern,https://root.cern/root/html602/TGPicturePool.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDecisionTreeDensity(); {}. PDEFoamDecisionTreeDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDecisionTreeDensity(const TMVA::PDEFoamDecisionTreeDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is not used in the decision tree like PDEFoam,; instead FillHist() is used. void FillHistograms(TMVA::Volume& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& , vector<TH1D*>& ); Fill the given histograms with signal and background events,; which are found in the volume. Parameters:. - volume - volume box to search in. - hsig, hbkg, hsig_unw, hbkg_unw - histograms with weighted and; unweighte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDecisionTreeDensity.html:7038,log,logger,7038,root/html602/TMVA__PDEFoamDecisionTreeDensity.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDecisionTreeDensity.html,2,['log'],['logger']
Testability," const; Double_tTMVA::PDEFoamDensityBase::GetBoxVolume(); TMVA::MsgLogger&TMVA::PDEFoamDensityBase::Log() const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TMVA::BinarySearchTree*TMVA::PDEFoamDensityBase::fBstBinary tree to find events within a volume; UInt_tfClasssignal class; TMVA::MsgLogger*TMVA::PDEFoamDensityBase::fLogger! message logger. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; PDEFoamDiscriminantDensity(); {}. PDEFoamDiscriminantDensity(vector<Double_t> box, UInt_t cls); User construcor:. Parameters:. - box - size of the range-searching box (n-dimensional; std::vector). - cls - event class used for the range-searching. PDEFoamDiscriminantDensity(const TMVA::PDEFoamDiscriminantDensity& ); Copy constructor. Double_t Density(vector<Double_t>& Xarg, Double_t& event_density); This function is needed during the foam buildup. It returns the; average number density of events of type fClass within the; range-searching volume (specified by fBox). Parameters:. - xev - event vector (in [fXmin,fXmax]) to place the box at. - event_density - here the event density is stored. Returns:. Number of events (event weights) of type fClass, which were; found in the range-searching volume at point ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamDiscriminantDensity.html:6985,log,logger,6985,root/html602/TMVA__PDEFoamDiscriminantDensity.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamDiscriminantDensity.html,2,['log'],['logger']
Testability," const; Int_tLayout(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGraphStruct&operator=(const TGraphStruct&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMargin(Double_t m = 10); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGraphStruct.html:6694,Test,TestBit,6694,root/html530/TGraphStruct.html,https://root.cern,https://root.cern/root/html530/TGraphStruct.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; Int_tTMVA::VariableTransformBase::GetNClasses() const; UInt_tTMVA::VariableTransformBase::GetNTargets() const; UInt_tTMVA::VariableTransformBase::GetNVariables() const; voidTObject::MakeZombie(); voidTMVA::VariableTransformBase::SetCreated(Bool_t c = kTRUE); voidTMVA::VariableTransformBase::SetName(const TString& c); voidTMVA::VariableTransformBase::SetNVariables(UInt_t i); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets(); vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TMVA::Event*TMVA::VariableTransformBase::fBackTransformedEventholds the current back-transformed event; TMVA::DataSetInfo&TMVA::VariableTransformBase::fDsi; TMVA::MsgLogger*TMVA::VariableTransformBase::fLogger! message logger; TMVA::TMVAVersion_tTMVA::VariableTransformBase::fTMVAVersion; TMVA::Event*TMVA::VariableTransformBase::fTransformedEventholds the current transformed event. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; VariableIdentityTransform( DataSetInfo& dsi ); constructor. void Initialize(); nothing to initialize. Bool_t PrepareTransformation(const vector<TMVA::Event*,allocator<TMVA::Event*> >& ); the identity does not need to be prepared, only calculate the normalization. void AttachXMLTo(void* parent); identity transformation to write to XML; Log() << kFATAL << ""Please implement writing of transformation as XML"" << Endl;. void ReadFromXML(void* trfnode); reding the identity transformation from XML. const TMVA::Event* Transform(const TMVA::Event *const , Int_t cls) const; identity transform returns same event. void MakeFunction(ostream& fout, const TString& fncName, Int_t part, UInt_t trCounter, Int_t cls); creates ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__VariableIdentityTransform.html:7667,log,logger,7667,root/html528/TMVA__VariableIdentityTransform.html,https://root.cern,https://root.cern/root/html528/TMVA__VariableIdentityTransform.html,1,['log'],['logger']
Testability," const; Print the current list of overlaps held by the manager class. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); --- Draw point (x,y,z) over the picture of the daughers of the volume containing this point.; Generates a report regarding the path to the node containing this point and the distance to; the closest boundary. void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; Distance to boundary is bigger than safety. void ShapeDistances(TGeoShape* shape, Int_t nsamples, Option_t* option); Test TGeoShape::DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute d1 = DistFromInside and move the; point on the boundary. Compute DistFromOutside and propagate with d2 making sure that; the shape is not re-entered. Swap direction and call DistFromOutside that; should fall back on the same point on the boundary (at d2). Propagate back on boundary; then compute DistFromInside that should be bigger than d1.; Plot d-(d1+d2). void ShapeSafety(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of safe distance for a given shape.; Sample points inside the 2x bounding box and compute safety. Generate; directions randomly in cos(theta) and compute distance to boundary. Check if; distance to boundary is bigger than safety. void ShapeNormal(TGeoShape* shape, Int_t nsamples, Option_t* option); Check of validity of the normal for a given shape.; Sample points inside the shape. Generate directions random",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoChecker.html:15131,Test,Test,15131,root/html530/TGeoChecker.html,https://root.cern,https://root.cern/root/html530/TGeoChecker.html,5,['Test'],['Test']
Testability," const; Return function value at current upper bound of the minimization interval. . bool Minimize(int maxIter, double absTol = 1.E-8, double relTol = 1.E-10); Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached.; Return true if iterations converged successfully; \@param maxIter maximum number of iterations.; \@param absTol desired absolute error in the minimum position (default 1.E-8); \@param absTol desired relative error in the minimum position (default = 1.E-10). int Iterations() const; Return number of iteration used to find minimum . { return fNIter; }. const char * Name() const; Return name of minimization algorithm (""BrentMinimizer1D"") . void SetFunction(const ROOT::Math::IGenFunction& f, double xlow, double xup); Sets function to be minimized. \@param f Function to be minimized.; \@param xlow Lower bound of the search interval.; \@param xup Upper bound of the search interval. void SetNpx(int npx); Set the number of point used to bracket root using a grid . { fNpx = npx; }. void SetLogScan(bool on). Set a log grid scan (default is equidistant bins); will work only if xlow > 0. { fLogScan = on; }. int Status() const; Returns status of last estimate. If = 0 is OK . { return fStatus; }. void SetDefaultNpx(int npx); static function used to modify the default parameters; set number of default Npx used at construction time (when SetNpx is not called); Default value is 100. void SetDefaultNSearch(int n); set number of times the bracketing search in combination with is done to find a good interval; Default value is 10. » Author: David Gonzalez Maline 2/2008 » Copyright (c) 2004 Maline, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: BrentMinimizer1D.h 41847 2011-11-09 18:03:47Z rdm $ » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__BrentMinimizer1D.html:4665,log,log,4665,root/html532/ROOT__Math__BrentMinimizer1D.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__BrentMinimizer1D.html,1,['log'],['log']
Testability," const; RooStats::TestStatSampler*GetTestStatSampler(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(); RooStats::IntervalCalculatorRooStats::IntervalCalculator::IntervalCalculator(const RooStats::IntervalCalculator&); virtual TClass*IsA() const; RooStats::NeymanConstructionNeymanConstruction(const RooStats::NeymanConstruction&); RooStats::NeymanConstructionNeymanConstruction(RooAbsData& data, RooStats::ModelConfig& model); RooStats::NeymanConstruction&operator=(const RooStats::NeymanConstruction&); voidSaveBeltToFile(bool flag = true); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); voidSetLeftSideTailFraction(Double_t leftSideFraction = 0.); virtual voidSetModel(const RooStats::ModelConfig& model); virtual voidSetNuisanceParameters(const RooArgSet&); voidSetParameterPointsToTest(RooAbsData& pointsToTest); virtual voidSetParameters(const RooArgSet&); virtual voidSetPdf(RooAbsPdf&); virtual voidSetTestSize(Double_t size); voidSetTestStatSampler(RooStats::TestStatSampler& sampler); virtual voidShowMembers(TMemberInspector& insp) const; virtual Double_tSize() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidUseAdaptiveSampling(bool flag = true). Data Members; private:. boolfAdaptiveSamplingcontrols use of adaptive sampling algorithm; Double_tfAdditionalNToysFactorgive user ability to ask for more toys; RooStats::ConfidenceBelt*fConfBelt; boolfCreateBeltcontrols use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set; Double_tfLeftSideFraction; RooStats::ModelConfig&fModel; RooAbsData*fPointsToTest; boolfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::TestStatSampler*fTestStatSampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; NeymanConstruction(RooAbsData& data, RooStats::ModelConf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__NeymanConstruction.html:3727,Test,TestStatSampler,3727,root/html602/RooStats__NeymanConstruction.html,https://root.cern,https://root.cern/root/html602/RooStats__NeymanConstruction.html,2,['Test'],['TestStatSampler']
Testability," const; const char*name() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(double x, double y, bool z) const; RooCFunction3Ref<double,double,double,bool>&operator=(const RooCFunction3Ref<double,double,double,bool>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction3Ref_double_double_double_bool_.html:5408,Test,TestBit,5408,root/html530/RooCFunction3Ref_double_double_double_bool_.html,https://root.cern,https://root.cern/root/html530/RooCFunction3Ref_double_double_double_bool_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; const char*name() const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(unsigned int x, double y) const; RooCFunction2Ref<double,unsigned int,double>&operator=(const RooCFunction2Ref<double,unsigned int,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooCFunction2Ref_double_unsigned_int_double_.html:5408,Test,TestBit,5408,root/html530/RooCFunction2Ref_double_unsigned_int_double_.html,https://root.cern,https://root.cern/root/html530/RooCFunction2Ref_double_unsigned_int_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(const ROOT::Math::GSLRngGFSR4&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngGFSR4&operator=(const ROOT::Math::GSLRngGFSR4&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLRngGFSR4.html:2489,Log,LogNormal,2489,root/html534/ROOT__Math__GSLRngGFSR4.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLRngGFSR4.html,1,['Log'],['LogNormal']
Testability," const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxGSLRngRanLux(); ROOT::Math::GSLRngRanLuxGSLRngRanLux(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLuxGSLRngRanLux(ROOT::Math::GSLRngRanLux&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLux&operator=(const ROOT::Math::GSLRngRanLux&); ROOT::Math::GSLRngRanLux&operator=(ROOT::Math::GSLRngRanLux&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngRanLux.html:2571,Log,LogNormal,2571,root/html602/ROOT__Math__GSLRngRanLux.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngRanLux.html,2,['Log'],['LogNormal']
Testability," const; internal function compute the interval using Cdf integration. void ApproximatePosterior() const; approximate posterior in nbins using a TF1; scan the poi values and evaluate the posterior at each point; and save the result in a cloned TF1; For each point the posterior is evaluated by integrating the nuisance; parameters. void ComputeIntervalFromApproxPosterior(double c1, double c2) const; compute the interval using the approximate posterior function. void ComputeShortestInterval() const; compute the shortest interval. BayesianCalculator(); constructor. void SetData(RooAbsData& data). void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLevel() const; Get the Confidence level for the test. { return 1.-fSize; }. void SetLeftSideTailFraction(Double_t leftSideFraction); set the fraction of probability content on the left tail; Central limits use 0.5 (default case); for upper limits it is 0 and 1 for lower limit; For shortest intervals a negative value (i.e. -1) must be given. {fLeftSideFraction = leftSideFraction;}. void SetShortestInterval(); set the Bayesian calculator to compute the shorest interval (default is central interval); to switch off SetLeftSideTailFraction to the rght value. { fLeftSideFraction = -1; }. void SetBrfPrecision(double precision); set the precision of the Root Finder. { fBrfPrecision = precision; }. void SetScanOfPosterior(int nbin = 100); use directly the approximate posterior function obtained by binning it in nbins; by default the cdf is used by integrating the posterior; if a value of nbin <= 0 the cdf function will be used. { fNScanBins = nbin; }. void SetNumIters(Int_t numIters); set the number of iteratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__BayesianCalculator.html:16283,test,test,16283,root/html530/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html530/RooStats__BayesianCalculator.html,2,['test'],['test']
Testability," const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; intProcessCard(const char* filename); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HLFactory.html:5329,Test,TestBit,5329,root/html534/RooStats__HLFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HLFactory.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(const TTree* T); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateFormulaLeaves(const TTree* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeIndex.html:5505,Test,TestBit,5505,root/html534/TTreeIndex.html,https://root.cern,https://root.cern/root/html534/TTreeIndex.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); voidResetStep(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCharge(Int_t charge); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetField(Double_t bx, Double_t by, Double_t bz, Bool_t is_normalized = kTRUE); voidSetHelixStep(Double_t hstep); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetXYcurvature(Double_t curvature); virtual voidShowMembers(TMemberInspector&); voidStep(Double_t step); Double_tStepToPlane(Double_t* point, Double_t* norm); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUpdateHelix(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoHelix.html:6128,Test,TestBit,6128,root/html534/TGeoHelix.html,https://root.cern,https://root.cern/root/html534/TGeoHelix.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tRooAbsArg::isFundamental() const; Bool_tRooAbsHiddenReal::isHidden() const; virtual Bool_tRooAbsReal::isIdentical(const RooAbsArg& other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooUnblindCPAsymVar.html:18092,log,logEvalError,18092,root/html534/RooUnblindCPAsymVar.html,https://root.cern,https://root.cern/root/html534/RooUnblindCPAsymVar.html,12,['log'],['logEvalError']
Testability," const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; virtual Bool_tRooAbsRealLValue::isValidReal(Double_t value, Bool_t printError = kFALSE) const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; virtual Double_tjacobian() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); virtual Int_tRooAbsRealLValue::numBins(const char* rangeName = 0) const; virtual Int_tRooAbsRealLValue::numBins(const RooAbsBinning& binning) const; Int_tRooAbsArg::numCaches()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooLinearVar.html:21621,log,logEvalError,21621,root/html534/RooLinearVar.html,https://root.cern,https://root.cern/root/html534/RooLinearVar.html,3,['log'],['logEvalError']
Testability," const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; Int_tLoadPlugin(); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPluginHandler.html:7429,Test,TestBit,7429,root/html530/TPluginHandler.html,https://root.cern,https://root.cern/root/html530/TPluginHandler.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Long64_t&operator()(Long64_t key); Long64_t&operator()(ULong64_t hash, Long64_t key); TExMap&operator=(const TExMap&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRemove(Long64_t key); voidRemove(ULong64_t hash, Long64_t key); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TExMap.html:5003,Test,TestBit,5003,root/html530/TExMap.html,https://root.cern,https://root.cern/root/html530/TExMap.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamKernelBase&operator=(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamKernelBasePDEFoamKernelBase(); TMVA::PDEFoamKernelBasePDEFoamKernelBase(const TMVA::PDEFoamKernelBase&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__PDEFoamKernelBase.html:4969,Test,TestBit,4969,root/html602/TMVA__PDEFoamKernelBase.html,https://root.cern,https://root.cern/root/html602/TMVA__PDEFoamKernelBase.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObjString&operator=(const TObjString&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); voidReadBuffer(char*& buffer); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetString(const char* s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TString&String(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TObjString(const char* s = """"); TObjString(const TObjString& s); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObjString.html:4403,Test,TestBit,4403,root/html602/TObjString.html,https://root.cern,https://root.cern/root/html602/TObjString.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TRecWinPair&operator=(const TRecWinPair&); TRecWinPair&operator=(TRecWinPair&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TRecWinPair(TRecWinPair&&); TRecWinPair(const TRecWinPair&); TRecWinPair(Window_t key, Window_t value); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TRecWinPair.html:6659,Test,TestBit,6659,root/html602/TRecWinPair.html,https://root.cern,https://root.cern/root/html602/TRecWinPair.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLObjectDataPool&operator=(const TSQLObjectDataPool&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSQLObjectDataPool(); TSQLObjectDataPool(const TSQLObjectDataPool&); TSQLObjectDataPool(TSQLClassInfo* info, TSQLResult* data); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLObjectDataPool.html:4726,Test,TestBit,4726,root/html602/TSQLObjectDataPool.html,https://root.cern,https://root.cern/root/html602/TSQLObjectDataPool.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual Bool_tisDerived() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooConstVar.html:16564,log,logEvalError,16564,root/html532/RooConstVar.html,https://root.cern,https://root.cern/root/html532/RooConstVar.html,1,['log'],['logEvalError']
Testability," const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual Double_tGetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*GetMethodCall() const; virtual Double_tGetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tGetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tGetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tGetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tGetNumberFitPoints() const; virtual Int_tGetNumberFreeParameters() const; virtual char*GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetParameters(Double_t* params); TObject*GetParent() const; virtual Double_tGetParError(Int_t ipar) const; virtual Double_t*GetParErrors() const; virtual voidGetParLimits(Int_t ipar, Double_t& parmin, Double_t& parmax) const; virtual const char*TF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:10033,log,logx,10033,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,3,['log'],['logx']
Testability," const; virtual voidPrintValue(Int_t i = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidReadBasket(TBuffer& b); virtual voidReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); virtual voidReadValue(istream& s); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tTLeaf::ResetAddress(void* add, Bool_t destructor = kFALSE); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidSetAddress(void* add = 0); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTLeaf::SetBranch(TBranch* branch); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTLeaf::SetLeafCount(TLeaf* leaf); virtual voidTLeaf::SetLen(Int_t len = 1); virtual voidSetMaximum(Long64_t max); virtual voidSetMinimum(Long64_t min); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTLeaf::SetOffset(Int_t offset = 0); virtual voidTLeaf::SetRange(Bool_t range = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTLeaf::SetUnsigned(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TLeafL.html:5983,Test,TestBit,5983,root/html530/TLeafL.html,https://root.cern,https://root.cern/root/html530/TLeafL.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsBinning::printValue(ostream& os) const; virtual Int_tRooAbsBinning::rawBinNumber(Double_t x) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRooAbsBinning::removeHook(RooAbsRealLValue&) const; voidTObject::ResetBit(UInt_t f); RooUniformBinning(const char* name = 0); RooUniformBinning(const RooUniformBinning& other, const char* name = 0); RooUniformBinning(Double_t xlo, Double_t xhi, Int_t nBins, const char* name = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidRooAbsBinning::setMax(Double_t xhi); virtual voidRooAbsBinning::setMin(Double_t xlo); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetRange(Double_t xlo, Double_t xhi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooUniformBinning.html:7120,Test,TestBit,7120,root/html602/RooUniformBinning.html,https://root.cern,https://root.cern/root/html602/RooUniformBinning.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(TTreeFormula*); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual Bool_tSync(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateFormulaLeaves(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeFormulaManager.html:4575,Test,TestBit,4575,root/html530/TTreeFormulaManager.html,https://root.cern,https://root.cern/root/html530/TTreeFormulaManager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetIsObject(Bool_t isObject); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteRealData(void* pointer, char*& buffer).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRealData.html:4843,Test,TestBit,4843,root/html530/TRealData.html,https://root.cern,https://root.cern/root/html530/TRealData.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TEveRecV0&operator=(const TEveRecV0&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveRecV0(); TEveRecV0(const TEveRecV0&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveRecV0.html:4245,Test,TestBit,4245,root/html602/TEveRecV0.html,https://root.cern,https://root.cern/root/html602/TEveRecV0.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooHashTable&operator=(const RooHashTable&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tremove(TObject* arg, TObject* hashArg = 0); Bool_treplace(const TObject* oldArg, const TObject* newArg, const TObject* oldHashArg = 0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); Int_tsize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooHashTable.html:5026,Test,TestBit,5026,root/html528/RooHashTable.html,https://root.cern,https://root.cern/root/html528/RooHashTable.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THtml::TFileSysEntry&operator=(const THtml::TFileSysEntry&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THtml::TFileSysEntryTFileSysEntry(const THtml::TFileSysEntry&); THtml::TFileSysEntryTFileSysEntry(const char* name, THtml::TFileSysDir* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THtml__TFileSysEntry.html:4375,Test,TestBit,4375,root/html528/THtml__TFileSysEntry.html,https://root.cern,https://root.cern/root/html528/THtml__TFileSysEntry.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSimPdfBuilder&operator=(const RooSimPdfBuilder&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooSimPdfBuilder(const RooArgSet& pdfProtoList); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; const RooArgSet&splitLeafList(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSimPdfBuilder.html:18286,Test,TestBit,18286,root/html602/RooSimPdfBuilder.html,https://root.cern,https://root.cern/root/html602/RooSimPdfBuilder.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const; voidTObject::MayNotUse(const char* method) const; virtual boolMerge(TCollection* in); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TParameter<bool>&operator=(const TParameter<bool>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVal(const bool& val); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParameter_bool_.html:4672,Test,TestBit,4672,root/html530/TParameter_bool_.html,https://root.cern,https://root.cern/root/html530/TParameter_bool_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveArrow.html:26088,Assert,AssertBBox,26088,doc/master/classTEveArrow.html,https://root.cern,https://root.cern/doc/master/classTEveArrow.html,2,['Assert'],['AssertBBox']
Testability," const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttAxis;  TAttAxis ();  ; virtual ~TAttAxis ();  Destructor. ;  ; void Copy (TAttAxis &attaxis) const;  Copy of the object. ;  ; virtual Color_t GetAxisColor () const;  ; virtual Color_t GetLabelColor () const;  ; virtual Style_t GetLabelFont () const;  ; virtual Float_t GetLabelOffset () const;  ; virtual Float_t GetLabelSize () const;  ; virtual Int_t GetMaxDigits () const;  ; virtual Int_t GetNdivisions () const;  ; virtual Float_t GetTickLength () const;  ; virtual Color_t GetTitleColor () const;  ; virtual Style_t GetTitleFont () const;  ; virtual Float_t GetTitleOffset () const;  ; virtual Float_t GetTitleSize () const;  ; virtual void ResetAttAxis ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveProjectionAxes.html:27559,Assert,AssertBBox,27559,doc/master/classTEveProjectionAxes.html,https://root.cern,https://root.cern/doc/master/classTEveProjectionAxes.html,1,['Assert'],['AssertBBox']
Testability," const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAtt3D;  TAtt3D ();  ; virtual ~TAtt3D ();  ; virtual void Sizeof3D () const;  Set total size of this 3D object (used by X3D interface). ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TAttBBox;  TAttBBox ();  ; virtual ~TAttBBox ();  ; Float_t * AssertBBox ();  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCalo2D.html:31214,Assert,AssertBBox,31214,doc/master/classTEveCalo2D.html,https://root.cern,https://root.cern/doc/master/classTEveCalo2D.html,3,['Assert'],['AssertBBox']
Testability," const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsComposite () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:7825,Test,TestShapeBit,7825,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,2,['Test'],"['TestShapeBit', 'TestShapeBits']"
Testability," const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Dist &cdf, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; void SetUserDistribution (const IGenFunction &dist, GoFTest::EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test using the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ; void SetUserDistribution (Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Sets the user input distribution function for 1-sample test as a generic functor object. ;  ; void SetUserPDF (const IGenFunction &pdf, Double_t x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:4429,test,tests,4429,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['tests']
Testability," const;  returns a pointer to the TVirtualStreamerInfo object for version If the object does not exist, it is created ;  ; TVirtualStreamerInfo * GetStreamerInfoAbstractEmulated (Int_t version=0) const;  For the case where the requestor class is emulated and this class is abstract, returns a pointer to the TVirtualStreamerInfo object for version with an emulated representation whether or not the class is loaded. ;  ; const TObjArray * GetStreamerInfos () const;  ; const std::type_info * GetTypeInfo () const;  ; Bool_t HasConsistentHashMember ();  Return 'true' if we can guarantee that if this class (or any class in this class inheritance hierarchy) overload TObject::Hash it also starts the RecursiveRemove process from its own destructor. ;  ; Bool_t HasCustomStreamerMember () const;  The class has a Streamer method and it is implemented by the user or an older (not StreamerInfo based) automatic streamer. ;  ; Bool_t HasDataMemberInfo () const;  ; Bool_t HasDefaultConstructor (Bool_t testio=kFALSE) const;  Return true if we have access to a constructor usable for I/O. ;  ; Bool_t HasDictionary () const;  Check whether a class has a dictionary or not. ;  ; Bool_t HasInterpreterInfo () const;  ; Bool_t HasInterpreterInfoInMemory () const;  ; Bool_t HasLocalHashMember () const;  Returns true if this class has an definition and/or overload of the member function Hash. ;  ; void IgnoreTObjectStreamer (Bool_t ignore=kTRUE);  When the class kIgnoreTObjectStreamer bit is set, the automatically generated Streamer will not call TObject::Streamer. ;  ; Bool_t InheritsFrom (const char *cl) const override;  Return kTRUE if this class inherits from a class with name ""classname"". ;  ; Bool_t InheritsFrom (const TClass *cl) const override;  Return kTRUE if this class inherits from class cl. ;  ; void InterpretedShowMembers (void *obj, TMemberInspector &insp, Bool_t isTransient);  Do a ShowMembers() traversal of all members and base classes' members using the reflection information f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQClass.html:15762,test,testio,15762,doc/master/classTQClass.html,https://root.cern,https://root.cern/doc/master/classTQClass.html,3,['test'],['testio']
Testability," constIssue error message.Definition TObject.cxx:993; TObject::SetDrawOptionvirtual void SetDrawOption(Option_t *option="""")Set drawing option for object.Definition TObject.cxx:770; TObject::Fatalvirtual void Fatal(const char *method, const char *msgfmt,...) constIssue fatal error message.Definition TObject.cxx:1021; TObject::SetDtorOnlystatic void SetDtorOnly(void *obj)Set destructor only flag.Definition TObject.cxx:1090; TObject::SetUniqueIDvirtual void SetUniqueID(UInt_t uid)Set the unique object id.Definition TObject.cxx:797; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TObject::EDeprecatedStatusBitsEDeprecatedStatusBitsDefinition TObject.h:75; TObject::kObjInCanvas@ kObjInCanvasfor backward compatibility only, use kMustCleanupDefinition TObject.h:76; TObject::DrawClassvirtual void DrawClass() constDraw class inheritance tree of the class to which this object belongs.Definition TObject.cxx:295; TObject::TestBitsInt_t TestBits(UInt_t f) constDefinition TObject.h:200; TObject::Comparevirtual Int_t Compare(const TObject *obj) constCompare abstract method.Definition TObject.cxx:244; TObject::MakeZombievoid MakeZombie()Definition TObject.h:53; TObject::~TObjectvirtual ~TObject()TObject destructor.Definition TObject.cxx:164; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TObject::Printvirtual void Print(Option_t *option="""") constThis method must be overridden when a class wants to print itself.Definition TObject.cxx:642; TObject::Popvirtual void Pop()Pop on object drawn in a pad to the top of the display list.Definition TObject.cxx:621; TObject::TObjectTObject()TObject constructor.Definition TObject.h:254; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:520; TObject::lsvirtual void ls(Option_t *option="""") constThe ls function lists the contents of a class on stdout",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObject_8h_source.html:29672,Test,TestBits,29672,doc/master/TObject_8h_source.html,https://root.cern,https://root.cern/doc/master/TObject_8h_source.html,1,['Test'],['TestBits']
Testability," constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTUBE::SetAspectRatio(Float_t factor = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTUBS.html:6890,Test,TestBit,6890,root/html530/TTUBS.html,https://root.cern,https://root.cern/root/html530/TTUBS.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; IGradModelFunction typedefROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; IModelFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kLogLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kPoissonLikelihood enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; kUndefined enum valueROOT::Math::BasicFitMethodFunction< DerivFunType >; LogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::Basic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:3569,Log,LogLikelihoodFCN,3569,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability," constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinuit construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooMinuit.html:12505,log,log,12505,root/html526/RooMinuit.html,https://root.cern,https://root.cern/root/html526/RooMinuit.html,8,['log'],"['log', 'logging']"
Testability," constant term optimization on; function being minimized. RooFitResult* save(const char* name = 0, const char* title = 0); Save and return a RooFitResult snaphot of current minimizer status.; This snapshot contains the values of all constant parameters,; the value of all floating parameters at RooMinuit construction and; after the last MINUIT operation, the MINUIT status, variance quality,; EDM setting, number of calls with evaluation problems, the minimized; function value and the full correlation matrix. RooPlot* contour(RooRealVar& var1, RooRealVar& var2, Double_t n1 = 1, Double_t n2 = 2, Double_t n3 = 0, Double_t n4 = 0, Double_t n5 = 0, Double_t n6 = 0); Create and draw a TH2 with the error contours in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. Bool_t setLogFile(const char* logfile = 0); Change the file name for logging of a RooMinuit of all MINUIT steppings; through the parameter space. If inLogfile is null, the current log file; is closed and logging is stopped. Double_t getPdfParamVal(Int_t index); Access PDF parameter value by ordinal index (needed by MINUIT). Double_t getPdfParamErr(Int_t index); Access PDF parameter error by ordinal index (needed by MINUIT). Bool_t setPdfParamVal(Int_t index, Double_t value, Bool_t verbose = kFALSE); Modify PDF parameter value by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t value); Modify PDF parameter error by ordinal index (needed by MINUIT). void clearPdfParamAsymErr(Int_t index); Modify PDF parameter error by ordinal index (needed by MINUIT). void setPdfParamErr(Int_t index, Double_t loVal, Double_t hiVal); Modify PDF parameter error by ordinal index (needed by MINUIT). void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void backProp(); Transfer MINUIT fit results back into RooFit objects. void updateFloatVec(). void applyCovarianceMatrix(TMatrixDSym& V); Apply re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:12987,log,log,12987,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,6,['log'],"['log', 'logging']"
Testability," constructor. ;  ;  TGeoCompositeShape (const char *name, const char *expression);  Default constructor. ;  ;  TGeoCompositeShape (const char *name, TGeoBoolNode *node);  Constructor with a Boolean node. ;  ;  ~TGeoCompositeShape () override;  destructor ;  ; Double_t Capacity () const override;  Computes capacity of this shape [length^3] by sampling with 1% error. ;  ; void ClearThreadData () const override;  Needed just for cleanup. ;  ; void ComputeBBox () override;  compute bounding box of the sphere ;  ; void ComputeNormal (const Double_t *point, const Double_t *dir, Double_t *norm) override;  Computes normal vector in POINT to the composite shape. ;  ; void ComputeNormal_v (const Double_t *points, const Double_t *dirs, Double_t *norms, Int_t vecsize) override;  Compute the normal for an array o points so that norm.dot.dir is positive Input: Arrays of point coordinates and directions + vector size Output: Array of normal directions. ;  ; Bool_t Contains (const Double_t *point) const override;  Tests if point is inside the shape. ;  ; void Contains_v (const Double_t *points, Bool_t *inside, Int_t vecsize) const override;  Check the inside status for each of the points in the array. ;  ; void CreateThreadData (Int_t nthreads) override;  Needed just for cleanup. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute closest distance from point px,py to each corner. ;  ; Double_t DistFromInside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big(), Double_t *safe=nullptr) const override;  Compute distance from inside point to outside of this composite shape. ;  ; void DistFromInside_v (const Double_t *points, const Double_t *dirs, Double_t *dists, Int_t vecsize, Double_t *step) const override;  Compute distance from array of input points having directions specified by dirs. Store output in dists. ;  ; Double_t DistFromOutside (const Double_t *point, const Double_t *dir, Int_t iact=1, Double_t step=TGeoShape::Big()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoCompositeShape.html:10885,Test,Tests,10885,doc/master/classTGeoCompositeShape.html,https://root.cern,https://root.cern/doc/master/classTGeoCompositeShape.html,1,['Test'],['Tests']
Testability," constructor. ~Configurable(); default destructur. void SplitOptions(const TString& theOpt, TList& loo) const; splits the option string at ':' and fills the list 'loo' with the primitive strings. void ResetSetFlag(); resets the IsSet falg for all declare options; to be called before options are read from stream. void ParseOptions(); options parser. void CheckForUnusedOptions() const; checks for unused options in option string. void PrintOptions() const; prints out the options set in the options string and the defaults. void WriteOptionsToStream(ostream& o, const TString& prefix) const; write options to output stream (e.g. in writing the MVA weight files. void AddOptionsXMLTo(void* parent) const; write options to XML file. void ReadOptionsFromXML(void* node). void WriteOptionsReferenceToFile(); write complete options to output stream. void ReadOptionsFromStream(istream& istr); read option back from the weight file. const char* GetName() const; { return GetConfigName(); }. const char* GetConfigName() const; { return fConfigName; }. const char* GetConfigDescription() const; { return fConfigDescription; }. void SetConfigName(const char* n); { fConfigName = TString(n); }. void SetConfigDescription(const char* d); { fConfigDescription = TString(d); }. const TString& GetOptions() const; { return fOptions; }. void SetOptions(const TString& s); { fOptions = s; }. Bool_t LooseOptionCheckingEnabled() const; { return fLooseOptionCheckingEnabled; }. void EnableLooseOptions(Bool_t b = kTRUE); { fLooseOptionCheckingEnabled = b; }. const TString& GetReferenceFile() const; { return fReferenceFile; }. void SetMsgType(TMVA::EMsgType t); set message type. { fLogger->SetMinType(t); }. Log(). » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__Configurable.html:8200,Log,Log,8200,root/html534/TMVA__Configurable.html,https://root.cern,https://root.cern/root/html534/TMVA__Configurable.html,1,['Log'],['Log']
Testability," constructor. ~TMacro(); Delete this macro. TMacro& operator=(const TMacro& ); Copy constructor. TObjString * AddLine(const char* text); Add line with text in the list of lines of this macro. Returns 0 in; case of error, otherwise the added TObjString. void Browse(TBrowser* b); When clicking in the browser, the following action is performed; on this macro, depending the content of the variable TMacro.Browse.; TMacro.Browse can be set in the system.rootrc or .rootrc file like; TMacro.Browse : Action; or set via gEnv->SetValue, eg; gEnv->SetValue(""TMacro.Browse"",""Print"");; By default TMacro.Browse=""""; -if TMacro.Browse ="""" the macro is executed; -if TMacro.Browse =""Print"" the macro is printed in stdout; -if TMacro.Browse is of the form ""mymacro.C""; the macro void mymacro.C(TMacro *m) is called where m=this macro; An example of macro.C saving the macro into a file and viewing it; with emacs is shown below:; void mymacro(TMacro *m) {; m->SaveSource(""xx.log"");; gSystem->Exec(""emacs xx.log&"");; }. TMD5 * Checksum(); Returns checksum of the current content. The returned TMD5 object must; be deleted by the user. Returns 0 in case of error. Long_t Exec(const char* params = 0, Int_t* error = 0); Execute this macro with params, if params is 0, default parameters; (set via SetParams) are used.; error is set to an TInterpreter::EErrorCode by TApplication::ProcessLine().; Returns the result of the macro (return value or value of the last; expression), cast to a Long_t. TObjString * GetLineWith(const char* text) const; Search the first line containing text. void Paint(Option_t* option = """"); Execute this macro (called by TPad::Paint). void Print(Option_t* option = """") const; Print contents of this macro. Int_t ReadFile(const char* filename); Read lines in filename in this macro. void SaveSource(const char* filename); Save macro source in filename. void SaveSource(FILE* fp); Save macro source in file pointer fp. void SavePrimitive(ostream& out, Option_t* option = """"); Save macro sou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMacro.html:8497,log,log,8497,root/html534/TMacro.html,https://root.cern,https://root.cern/root/html534/TMacro.html,1,['log'],['log']
Testability," containing these data members: char fType[20];; Int_t fNtrack;; Int_t fNseg;; Int_t fNvertex;; UInt_t fFlag;; Float_t fTemperature;; EventHeader fEvtHdr;; TClonesArray *fTracks; //->; TH1F *fH; //->; Int_t fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622. the difference in splitting or not splitting a branch; how to read selected branches of the tree, and print the first entry with less than 587 tracks.; how to browse and analyze the Tree via the TBrowser and TTreeViewer. This example can be run in many different ways:; way1 using the Cling interpreter: .x tree4.C. way2 using the Cling interpreter: .L tree4.C; tree4(). way3 using ACLIC: .L ../test/libEvent.so; .x tree4.C++; One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree4.C; tree4r();; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TClassTable.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""../test/Event.h""; ; void tree4w(); {; ; //create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; ; // Create a ROOT Tree; TTree t4(""t4"",""A Tree with Events"");; ; // Create a pointer to an Event object; Event *event = new Event();; ; // Create two branches, split one.; t4.Branch(""event_split"", &event,16000,99);; t4.Branch(""event_not_split"", &event,16000,0);; ; // a local variable for the event type; char etype[20];; ; // Fill the tree; for (Int_t ev = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:1409,test,test,1409,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,1,['test'],['test']
Testability," contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooPrintable::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooPrintable::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLineColor(Color_t color); voidSetLineWidth(Int_t width); voidSetMCMCInterval(RooStats::MCMCInterval& interval); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetShowBurnIn(Bool_t showBurnIn); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__MCMCIntervalPlot.html:6928,Test,TestBit,6928,root/html526/RooStats__MCMCIntervalPlot.html,https://root.cern,https://root.cern/root/html526/RooStats__MCMCIntervalPlot.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," contour options. ;  ; file  ellipse.C;   Draw ellipses. ;  ; file  eval.C;   This macro produces the flowchart of TFormula::Eval. ;  ; file  event.C;   Illustrate some basic primitives. ;  ; file  feynman.C;   Draw Feynman diagrams. ;  ; file  first.C;   Show some basic primitives. ;  ; file  formula1.C;   Display interpreted functions. ;  ; file  framework.C;   An example with basic graphics illustrating the Object Oriented User Interface of ROOT. ;  ; file  gaxis.C;   Simple example illustrating how to draw TGaxis objects in various formats. ;  ; file  gaxis2.C;   Example illustrating how to draw TGaxis with labels defined by a function. ;  ; file  gaxis3.C;   Example illustrating how to modify individual labels of a TGaxis. ;  ; file  graph_edit_playback.C;  This macro plays a recorded ROOT session showing how to perform various interactive graphical editing operations. ;  ; file  gtime.C;  Example of a graph of data moving in time. ;  ; file  inside.C;   Test the IsInside methods of various graphics primitives. ;  ; file  latex.C;   This macro draws 5 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex2.C;   This macro draws 4 Latex-style formula in a canvas and prints the canvas as a Postscript file. ;  ; file  latex3.C;   Example illustrating a TPaveText with Latex inside. ;  ; file  latex4.C;   Draw the Greek letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  latex5.C;   This draws the Mathematical Symbols letters as a table and save the result as GIF, PS, PDF and SVG files. ;  ; file  mandelbrot.C;   Using TExec to handle keyboard events and TComplex to draw the Mandelbrot set. ;  ; file  markerwarning.C;   This script illustrates the danger of using asymmetric symbols. ;  ; file  mass_spectrum.C;   This macro makes use of some basic graphics primitives such as line, arrow and text. ;  ; file  palettes.C;   This macro draws all the high definition palettes available in ROOT. ;  ; file  p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphics.html:2023,Test,Test,2023,doc/master/group__tutorial__graphics.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphics.html,1,['Test'],['Test']
Testability," coordinates belong to; 700 Int_t n = (Int_t)(floor((x-fXaxis.GetXmin())/fStepX));; 701 Int_t m = (Int_t)(floor((y-fYaxis.GetXmin())/fStepY));; 702 ; 703 // Make sure the array indices are correct.; 704 if (n>=fCellX) n = fCellX-1;; 705 if (m>=fCellY) m = fCellY-1;; 706 if (n<0) n = 0;; 707 if (m<0) m = 0;; 708 ; 709 if (fIsEmpty[n+fCellX*m]) {; 710 fOverflow[4]+= w;; 711 if (fSumw2.fN) fSumw2.fArray[4] += w*w;; 712 return -5;; 713 }; 714 ; 715 TH2PolyBin *bin;; 716 Int_t bi;; 717 ; 718 TIter next(&fCells[n+fCellX*m]);; 719 TObject *obj;; 720 ; 721 while ((obj=next())) {; 722 bin = (TH2PolyBin*)obj;; 723 // needs to account offset in array for overflow bins; 724 bi = bin->GetBinNumber()-1+kNOverflow;; 725 if (bin->IsInside(x,y)) {; 726 bin->Fill(w);; 727 ; 728 // Statistics; 729 fTsumw = fTsumw + w;; 730 fTsumw2 = fTsumw2 + w*w;; 731 fTsumwx = fTsumwx + w*x;; 732 fTsumwx2 = fTsumwx2 + w*x*x;; 733 fTsumwy = fTsumwy + w*y;; 734 fTsumwy2 = fTsumwy2 + w*y*y;; 735 if (fSumw2.fN) {; 736 assert(bi < fSumw2.fN);; 737 fSumw2.fArray[bi] += w*w;; 738 }; 739 fEntries++;; 740 ; 741 SetBinContentChanged(kTRUE);; 742 ; 743 return bin->GetBinNumber();; 744 }; 745 }; 746 ; 747 fOverflow[4]+= w;; 748 if (fSumw2.fN) fSumw2.fArray[4] += w*w;; 749 return -5;; 750}; 751 ; 752////////////////////////////////////////////////////////////////////////////////; 753/// Increment the bin named ""name"" by w.; 754 ; 755Int_t TH2Poly::Fill(const char* name, Double_t w); 756{; 757 TString sname(name);; 758 ; 759 TIter next(fBins);; 760 TObject *obj;; 761 TH2PolyBin *bin;; 762 ; 763 while ((obj = next())) {; 764 bin = (TH2PolyBin*) obj;; 765 if (!sname.CompareTo(bin->GetPolygon()->GetName())) {; 766 bin->Fill(w);; 767 fEntries++;; 768 SetBinContentChanged(kTRUE);; 769 return bin->GetBinNumber();; 770 }; 771 }; 772 ; 773 return 0;; 774}; 775 ; 776////////////////////////////////////////////////////////////////////////////////; 777/// Fills a 2-D histogram with an array of values and weights.; 778///; 7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:26558,assert,assert,26558,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,1,['assert'],['assert']
Testability," corresponding to the (x,y) point in fGraph2D. ;  ; void FindAllTriangles ();  Attempt to find all the Delaunay triangles of the point set. ;  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsContent () const;  ; Int_t * GetMTried () const;  ; Int_t GetNdt () const;  ; Int_t * GetNTried () const;  ; Int_t * GetPTried () const;  ; Double_t * GetXN () const;  ; Double_t GetXNmax () const;  ; Double_t GetXNmin () const;  ; Double_t * GetYN () const;  ; Double_t GetYNmax () const;  ; Double_t GetYNmin () const;  ; Double_t Interpolate (Double_t x, Double_t y);  Finds the Delaunay triangle that the point (xi,yi) sits in (if any) and calculate a z-value for it by linearly interpolating the z-values that make up that triangle. ;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  Sets the histogram bin height for points lying outside the convex hull ie: the bins in the margin. ;  ; void SetMaxIter (Int_t n=100000);  Defines the number of triangles tested for a Delaunay triangle (number of iterations) before abandoning the search. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay.html:2790,test,tested,2790,doc/master/classTGraphDelaunay.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay.html,1,['test'],['tested']
Testability," create input formulas for tree TreeS; : Building event vectors for type 2 Background; : Dataset[Category_Fisher_1_dsi] : create input formulas for tree TreeB; <HEADER> DataSetFactory : [Category_Fisher_1_dsi] : Number of events in input trees; : Dataset[Category_Fisher_1_dsi] : Signal requirement: ""abs(eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Signal -- number of events passed: 5123 / sum of weights: 5123 ; : Dataset[Category_Fisher_1_dsi] : Signal -- efficiency : 0.5123; : Dataset[Category_Fisher_1_dsi] : Background requirement: ""abs(eta)<=1.3""; : Dataset[Category_Fisher_1_dsi] : Background -- number of events passed: 5134 / sum of weights: 5134 ; : Dataset[Category_Fisher_1_dsi] : Background -- efficiency : 0.5134; : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5123 preselection efficiency); : Dataset[Category_Fisher_1_dsi] : you have opted for scaling the number of requested training/testing events; : to be scaled by the preselection efficiency; : ( 0 * 0.5134 preselection efficiency); : Number of training and testing events; : ---------------------------------------------------------------------------; : Signal -- training events : 2561; : Signal -- testing events : 2561; : Signal -- training and testing events: 5122; : Dataset[Category_Fisher_1_dsi] : Signal -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5123; : Background -- training events : 2567; : Background -- testing events : 2567; : Background -- training and testing events: 5134; : Dataset[Category_Fisher_1_dsi] : Background -- due to the preselection a scaling factor has been applied to the numbers of requested events: 0.5134; : ; <HEADER> DataSetInfo : Correlation matrix (Signal):; : ----------------------------------------; : var1 var2 var3 var4; : var1: +1.000 -0.017 +0.004 +0.001; : var2: -0.017 +1.000 -0.019 -0.003; : var3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationCategory_8C.html:6465,test,testing,6465,doc/master/TMVAClassificationCategory_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationCategory_8C.html,1,['test'],['testing']
Testability," created QWebEngineView can be found with the command:; 350///; 351/// auto view = qparent->findChild<QWebEngineView*>(""RootWebView"");; 352 ; 353std::string RWebDisplayArgs::GetQt5EmbedQualifier(const void *qparent, const std::string &urlopt, unsigned qtversion); 354{; 355 std::string where = (qtversion >= 0x60000) ? ""qt6"" : ""qt5"";; 356 if (qparent) {; 357 where.append("":"");; 358 where.append(std::to_string((uintptr_t) qparent));; 359 }; 360 if (!urlopt.empty()) {; 361 where.append(""?"");; 362 where.append(urlopt);; 363 }; 364 return where;; 365}; RConfig.hxx; RLogger.hxx; RWebDisplayArgs.hxx; RWebWindow.hxx; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; heightOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t heightDefinition TGWin32VirtualXProxy.cxx:164; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::RWebDisplayArgs::GetBrowserNamestd::string GetBrowserName() constReturns configured browser name.Definition RWebDisplayArgs.cxx:248; ROOT::RWebDisplayArgs::~RWebDisplayArgsvirtual ~RWebDisplayArgs()Destructor.; ROOT::RWebDisplayArgs::GetBrowserKindEBrowserKind GetBrowserKind() constreturns configured browser kind, see EBrowserKind for supported valuesDefinition RWebDisplayArgs.hxx:98; ROOT::RWebDisplayArgs::SetUrlOptRWebDisplayArgs & SetUrlOpt(const std::string &opt)set window url optionsDefinition RWebDisplayArgs.hxx:148; ROOT::RWebDisplayArgs::SetPosAsStrbool SetPosAsStr(const std::string &str)Set position of web browser window as string like ""100,100"".Definition RWebDisplayArgs.cxx:120; ROOT::RWebDisplayArgs::fExecstd::string fExec! string to run browser, used with kCus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebDisplayArgs_8cxx_source.html:12801,log,log,12801,doc/v632/RWebDisplayArgs_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebDisplayArgs_8cxx_source.html,1,['log'],['log']
Testability," created QWebEngineView can be found with the command:; 355///; 356/// auto view = qparent->findChild<QWebEngineView*>(""RootWebView"");; 357 ; 358std::string RWebDisplayArgs::GetQt5EmbedQualifier(const void *qparent, const std::string &urlopt, unsigned qtversion); 359{; 360 std::string where = (qtversion >= 0x60000) ? ""qt6"" : ""qt5"";; 361 if (qparent) {; 362 where.append("":"");; 363 where.append(std::to_string((uintptr_t) qparent));; 364 }; 365 if (!urlopt.empty()) {; 366 where.append(""?"");; 367 where.append(urlopt);; 368 }; 369 return where;; 370}; RConfig.hxx; RLogger.hxx; RWebDisplayArgs.hxx; RWebWindow.hxx; widthOption_t Option_t widthDefinition TGWin32VirtualXProxy.cxx:56; heightOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t heightDefinition TGWin32VirtualXProxy.cxx:164; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; ROOT::Experimental::RLogChannelA log configuration for a channel, e.g.Definition RLogger.hxx:101; ROOT::RWebDisplayArgsHolds different arguments for starting browser with RWebDisplayHandle::Display() method.Definition RWebDisplayArgs.hxx:33; ROOT::RWebDisplayArgs::GetBrowserNamestd::string GetBrowserName() constReturns configured browser name.Definition RWebDisplayArgs.cxx:252; ROOT::RWebDisplayArgs::~RWebDisplayArgsvirtual ~RWebDisplayArgs()Destructor.; ROOT::RWebDisplayArgs::GetBrowserKindEBrowserKind GetBrowserKind() constreturns configured browser kind, see EBrowserKind for supported valuesDefinition RWebDisplayArgs.hxx:99; ROOT::RWebDisplayArgs::SetUrlOptRWebDisplayArgs & SetUrlOpt(const std::string &opt)set window url optionsDefinition RWebDisplayArgs.hxx:149; ROOT::RWebDisplayArgs::SetPosAsStrbool SetPosAsStr(const std::string &str)Set position of web browser window as string like ""100,100"".Definition RWebDisplayArgs.cxx:120; ROOT::RWebDisplayArgs::fExecstd::string fExec! string to run browser, used with kCus",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html:12932,log,log,12932,doc/master/RWebDisplayArgs_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RWebDisplayArgs_8cxx_source.html,1,['log'],['log']
Testability," created. A node B_i does not represent a unique; object in the geometry because its container A might be at its turn positioned; as node inside several other volumes. Only when a complete branch of nodes; is fully defined up to the top node in the geometry, a given path like:; /TOP_1/.../A_3/B_7 will represent an unique object. Its global transformation; matrix can be computed as the pile-up of all local transformations in its; branch. We will therefore call ""logical graph"" the hierarchy defined by nodes; and volumes. The expansion of the logical graph by all possible paths defines; a tree sructure where all nodes are unique ""touchable"" objects. We will call; this the ""physical tree"". Unlike the logical graph, the physical tree can; become a huge structure with several milions of nodes in case of complex; geometries, therefore it is not always a good idea to keep it transient; in memory. Since a the logical and physical structures are correlated, the; modeller rather keeps track only of the current branch, updating the current; global matrix at each change of the level in geometry. The current physical node; is not an object that can be asked for at a given moment, but rather represented; by the combination: current node + current global matrix. However, physical nodes; have unique ID's that can be retreived for a given modeler state. These can be; fed back to the modeler in order to force a physical node to become current.; The advantage of this comes from the fact that all navigation queries check; first the current node, therefore knowing the location of a point in the; geometry can be saved as a starting state for later use. Nodes can be declared as ""overlapping"" in case they do overlap with other; nodes inside the same container or extrude this container. Non-overlapping; nodes can be created with:. TGeoVolume::AddNode(TGeoVolume *daughter, Int_t copy_No, TGeoMatrix *matr);. The creation of overapping nodes can be done with a similar prototype:. TGeoVolume::Ad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoIterator.html:1712,log,logical,1712,root/html528/TGeoIterator.html,https://root.cern,https://root.cern/root/html528/TGeoIterator.html,18,['log'],['logical']
Testability," currently; 1248/// defined ranges (see TAxis::SetRange). By default the ranges include; 1249/// all bins from 1 to nbins included, excluding underflows and overflows.; 1250/// To force the underflows and overflows in the computation, one must; 1251/// call the static function TH1::StatOverflows(kTRUE) before filling; 1252/// the histogram.; 1253 ; 1254void TH2::GetStats(Double_t *stats) const; 1255{; 1256 if (fBuffer) ((TH2*)this)->BufferEmpty();; 1257 ; 1258 if ((fTsumw == 0 && fEntries > 0) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange)) {; 1259 std::fill(stats, stats + 7, 0);; 1260 ; 1261 Int_t firstBinX = fXaxis.GetFirst();; 1262 Int_t lastBinX = fXaxis.GetLast();; 1263 Int_t firstBinY = fYaxis.GetFirst();; 1264 Int_t lastBinY = fYaxis.GetLast();; 1265 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 1266 if (GetStatOverflowsBehaviour()) {; 1267 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 1268 if (firstBinX == 1) firstBinX = 0;; 1269 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 1270 }; 1271 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 1272 if (firstBinY == 1) firstBinY = 0;; 1273 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 1274 }; 1275 }; 1276 // check for labels axis. In that case corresponding statistics do not make sense and it is set to zero; 1277 Bool_t labelXaxis = ((const_cast<TAxis&>(fXaxis)).GetLabels() && fXaxis.CanExtend() );; 1278 Bool_t labelYaxis = ((const_cast<TAxis&>(fYaxis)).GetLabels() && fYaxis.CanExtend() );; 1279 ; 1280 for (Int_t biny = firstBinY; biny <= lastBinY; ++biny) {; 1281 Double_t y = (!labelYaxis) ? fYaxis.GetBinCenter(biny) : 0;; 1282 for (Int_t binx = firstBinX; binx <= lastBinX; ++binx) {; 1283 Double_t x = (!labelXaxis) ? fXaxis.GetBinCenter(binx) : 0;; 1284 //w = TMath::Abs(GetBinContent(bin));; 1285 Int_t bin = GetBin(binx,biny);; 1286 Double_t w = RetrieveBinContent(bin);; 1287 Double_t wx = w * x; // avoid some extra multiplications a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:51237,Test,TestBit,51237,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability," data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0.721714 1.40039 0.112743 931.931 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.744775 0.695682 1.39558 0.112793 935.465 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.694124 0.686492 1.40809 0.112179 925.986 0; : 4 | 0.679848 0.699399 1.40006 0.109116 929.552 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.670651 0.682024 1.40299 0.112234 929.685 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.652355 0.665731 1.40537 0.11341 928.823 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.647198 0.663594 1.40991 0.11661 927.858 0; : 8 | 0.624112 0.674678 1.40336 0.112656 929.728 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.597489 0.647076 1.41653 0.119736 925.361 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.561268 0.630455 1.40233 0.116045 932.919 0; : ; : Elapsed time for training with 1600 events: 14.2 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_CNN_CPU : [dataset] : Evaluation of TMVA_CNN_CPU on training sample (1600 events); : Elapsed time for evaluation of 1600 events: 0.629 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVA_CNN_Classification_TMVA_CNN_CPU.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: PyKeras for Classification; : ; : ; : ␛[1m================================================================␛[",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:14986,Test,Test,14986,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['Test']
Testability," data containers to zero size.; Keep the old data-storage parameters. void AddBox(const Float_t* verts); Create a new box from a set of 8 vertices.; To be used for box-type kBT_FreeBox. void AddBox(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h, Float_t d); Create a new axis-aligned box from at a given position and with; specified dimensions.; To be used for box-type kBT_AABox. void AddBox(Float_t a, Float_t b, Float_t c); Create a new axis-aligned box from at a given position.; To be used for box-type kBT_AABoxFixedDim. void AddCone(const TEveVector& pos, const TEveVector& dir, Float_t r); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_Cone. void AddEllipticCone(const TEveVector& pos, const TEveVector& dir, Float_t r, Float_t r2, Float_t angle = 0); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_EllipticCone. void ComputeBBox(); Fill bounding-box information of the base-class TAttBBox (virtual method).; If member 'TEveFrameBox* fFrame' is set, frame's corners are used as bbox. void Test(Int_t nboxes); Fill the structure with a random set of boxes. TEveBoxSet(const TEveBoxSet& ). TEveBoxSet& operator=(const TEveBoxSet& ). virtual ~TEveBoxSet(); {}. Float_t GetDefWidth() const; { return fDefWidth; }. Float_t GetDefHeight() const; { return fDefHeight; }. Float_t GetDefDepth() const; { return fDefDepth; }. Bool_t GetDrawConeCap() const; { return fDrawConeCap; }. void SetDefWidth(Float_t v); { fDefWidth = v ; }. void SetDefHeight(Float_t v); { fDefHeight = v ; }. void SetDefDepth(Float_t v); { fDefDepth = v ; }. void SetDrawConeCap(Bool_t x); { fDrawConeCap=x; StampObjProps(); }. Int_t GetBoxSkip() const; { return fBoxSkip; }. void SetBoxSkip(Int_t bs); { fBoxSkip = bs; }. » Last changed: root/eve:$Id$ » Last generated: 2015-03-13 19:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveBoxSet.html:30690,Test,Test,30690,root/html534/TEveBoxSet.html,https://root.cern,https://root.cern/root/html534/TEveBoxSet.html,1,['Test'],['Test']
Testability," data containers to zero size.; Keep the old data-storage parameters. void AddBox(const Float_t* verts); Create a new box from a set of 8 vertices.; To be used for box-type kBT_FreeBox. void AddBox(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h, Float_t d); Create a new axis-aligned box from at a given position and with; specified dimensions.; To be used for box-type kBT_AABox. void AddBox(Float_t a, Float_t b, Float_t c); Create a new axis-aligned box from at a given position.; To be used for box-type kBT_AABoxFixedDim. void AddCone(const TEveVector& pos, const TEveVector& dir, Float_t r); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_Cone. void AddEllipticCone(const TEveVector& pos, const TEveVector& dir, Float_t r, Float_t r2, Float_t angle = 0); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_EllipticCone. void ComputeBBox(); Fill bounding-box information of the base-class TAttBBox (virtual method).; If member 'TEveFrameBox* fFrame' is set, frame's corners are used as bbox. void Test(Int_t nboxes); Fill the structure with a random set of boxes. TEveBoxSet(const TEveBoxSet& ). TEveBoxSet& operator=(const TEveBoxSet& ). virtual ~TEveBoxSet(); {}. Float_t GetDefWidth() const; { return fDefWidth; }. Float_t GetDefHeight() const; { return fDefHeight; }. Float_t GetDefDepth() const; { return fDefDepth; }. Bool_t GetDrawConeCap() const; { return fDrawConeCap; }. void SetDefWidth(Float_t v); { fDefWidth = v ; }. void SetDefHeight(Float_t v); { fDefHeight = v ; }. void SetDefDepth(Float_t v); { fDefDepth = v ; }. void SetDrawConeCap(Bool_t x); { fDrawConeCap=x; StampObjProps(); }. Int_t GetBoxSkip() const; { return fBoxSkip; }. void SetBoxSkip(Int_t bs); { fBoxSkip = bs; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-02 15:42; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TEveBoxSet.html:31998,Test,Test,31998,root/html604/TEveBoxSet.html,https://root.cern,https://root.cern/root/html604/TEveBoxSet.html,1,['Test'],['Test']
Testability," data containers to zero size.; Keep the old data-storage parameters. void AddBox(const Float_t* verts); Create a new box from a set of 8 vertices.; To be used for box-type kBT_FreeBox. void AddBox(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h, Float_t d); Create a new axis-aligned box from at a given position and with; specified dimensions.; To be used for box-type kBT_AABox. void AddBox(Float_t a, Float_t b, Float_t c); Create a new axis-aligned box from at a given position.; To be used for box-type kBT_AABoxFixedDim. void AddCone(const TEveVector& pos, const TEveVector& dir, Float_t r); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_Cone. void AddEllipticCone(const TEveVector& pos, const TEveVector& dir, Float_t r, Float_t r2, Float_t angle = 0); Create a cone with apex at pos, axis dir and radius r.; To be used for box-type kBT_EllipticCone. void ComputeBBox(); Fill bounding-box information of the base-class TAttBBox (virtual method).; If member 'TEveFrameBox* fFrame' is set, frame's corners are used as bbox. void Test(Int_t nboxes); Fill the structure with a random set of boxes. TEveBoxSet(const TEveBoxSet& ). TEveBoxSet& operator=(const TEveBoxSet& ). virtual ~TEveBoxSet(); {}. Float_t GetDefWidth() const; { return fDefWidth; }. Float_t GetDefHeight() const; { return fDefHeight; }. Float_t GetDefDepth() const; { return fDefDepth; }. Bool_t GetDrawConeCap() const; { return fDrawConeCap; }. void SetDefWidth(Float_t v); { fDefWidth = v ; }. void SetDefHeight(Float_t v); { fDefHeight = v ; }. void SetDefDepth(Float_t v); { fDefDepth = v ; }. void SetDrawConeCap(Bool_t x); { fDrawConeCap=x; StampObjProps(); }. Int_t GetBoxSkip() const; { return fBoxSkip; }. void SetBoxSkip(Int_t bs); { fBoxSkip = bs; }. » Last changed: root/eve:$Id$ » Last generated: 2015-06-30 14:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBoxSet.html:31998,Test,Test,31998,root/html602/TEveBoxSet.html,https://root.cern,https://root.cern/root/html602/TEveBoxSet.html,1,['Test'],['Test']
Testability," data file"" << std::endl;; 278 exit(1);; 279 }; 280 std::cout << ""--- TMVAClassificationApp : Using input file: "" << input->GetName() << std::endl;; 281 ; 282 // Event loop; 283 ; 284 // Prepare the event tree; 285 // - Here the variable names have to corresponds to your tree; 286 // - You can use the same variables as above which is slightly faster,; 287 // but of course you can use different ones and copy the values inside the event loop; 288 //; 289 std::cout << ""--- Select signal sample"" << std::endl;; 290 TTree* theTree = (TTree*)input->Get(""TreeS"");; 291 Float_t userVar1, userVar2;; 292 theTree->SetBranchAddress( ""var1"", &userVar1 );; 293 theTree->SetBranchAddress( ""var2"", &userVar2 );; 294 theTree->SetBranchAddress( ""var3"", &var3 );; 295 theTree->SetBranchAddress( ""var4"", &var4 );; 296 ; 297 // Efficiency calculator for cut method; 298 Int_t nSelCutsGA = 0;; 299 Double_t effS = 0.7;; 300 ; 301 std::vector<Float_t> vecVar(4); // vector for EvaluateMVA tests; 302 ; 303 std::cout << ""--- Processing: "" << theTree->GetEntries() << "" events"" << std::endl;; 304 TStopwatch sw;; 305 sw.Start();; 306 for (Long64_t ievt=0; ievt<theTree->GetEntries();ievt++) {; 307 ; 308 if (ievt%1000 == 0) std::cout << ""--- ... Processing event: "" << ievt << std::endl;; 309 ; 310 theTree->GetEntry(ievt);; 311 ; 312 var1 = userVar1 + userVar2;; 313 var2 = userVar1 - userVar2;; 314 ; 315 // Return the MVA outputs and fill into histograms; 316 ; 317 if (Use[""CutsGA""]) {; 318 // Cuts is a special case: give the desired signal efficiency; 319 Bool_t passed = reader->EvaluateMVA( ""CutsGA method"", effS );; 320 if (passed) nSelCutsGA++;; 321 }; 322 ; 323 if (Use[""Likelihood"" ]) histLk ->Fill( reader->EvaluateMVA( ""Likelihood method"" ) );; 324 if (Use[""LikelihoodD"" ]) histLkD ->Fill( reader->EvaluateMVA( ""LikelihoodD method"" ) );; 325 if (Use[""LikelihoodPCA""]) histLkPCA ->Fill( reader->EvaluateMVA( ""LikelihoodPCA method"" ) );; 326 if (Use[""LikelihoodKDE""]) histLkKDE ->Fill( reader->EvaluateMVA( """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html:12943,test,tests,12943,doc/master/TMVAClassificationApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAClassificationApplication_8C_source.html,1,['test'],['tests']
Testability," data set already exists, newPoints are appended to the existing data set. (i.e., if the data exists Initialize() is equivalent to a resize( NPoints() + maxpoints)). Initialize() and Append() are equivalent. ; Definition at line 122 of file BinData.h. ◆ InitializeErrors(). void ROOT::Fit::BinData::InitializeErrors ; (; ). protected . Definition at line 651 of file BinData.cxx. ◆ InvError(). double ROOT::Fit::BinData::InvError ; (; unsigned int ; ipoint); const. inline . Return the inverse of error on the value for the given fit point useful when error in the coordinates are not stored and then this is used directly this as the weight in the least square function. ; Definition at line 325 of file BinData.h. ◆ IsWeighted(). bool ROOT::Fit::BinData::IsWeighted ; (; ); const. inline . return true if the data set is weighted We cannot compute ourselves because sometimes errors are filled with 1 instead of zero (as in ROOT::Fit::FillData ) ; Definition at line 584 of file BinData.h. ◆ LogTransform(). BinData & ROOT::Fit::BinData::LogTransform ; (; ). apply a Log transformation of the data values can be used for example when fitting an exponential or gaussian Transform the data in place need to copy if want to preserve original data The data sets must not contain negative values. ; IN case it does, an empty data set is returned ; Definition at line 349 of file BinData.cxx. ◆ operator=(). BinData & ROOT::Fit::BinData::operator= ; (; const BinData & ; rhs). assignment operator ; Definition at line 230 of file BinData.cxx. ◆ RefVolume(). double ROOT::Fit::BinData::RefVolume ; (; ); const. inline . retrieve the reference volume used to normalize the data when the option bin volume is set ; Definition at line 552 of file BinData.h. ◆ SetRefVolume(). void ROOT::Fit::BinData::SetRefVolume ; (; double ; value). inline . set the reference volume used to normalize the data when the option bin volume is set ; Definition at line 557 of file BinData.h. ◆ SumOfContent(). double ROOT::Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:26766,Log,LogTransform,26766,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['Log'],['LogTransform']
Testability," data set in workspace; Bool_tfExtendedif nEvents should fluctuate; RooDataSet*fLastDataSetwork around for memory issues in nllvar->setData(data, noclone); Int_tfNeventsnumber of events per toy (may be ignored depending on settings); Int_tfNtoysnumber of toys to generate; RooArgSet*fNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSet*fObservablesRooArgSet specifying the observables in the dataset (needed to evaluate the test statistic); Bool_tfOwnsWorkspaceflag if this object owns its workspace; RooArgSet*fPOIRooArgSet specifying parameters of interest for interval; const char*fPdfNamename of common PDF in workspace; TRandom*fRandrandom generator; Double_tfSize; RooStats::TestStatistic*fTestStatpointer to the test statistic that is being sampled; TStringfVarNamename of test statistic; RooWorkspace*fWSa workspace that owns all the components to be used by the calculator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ToyMCSampler(TestStatistic &ts). virtual ~ToyMCSampler(). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. SamplingDistribution* GetSamplingDistribution(RooArgSet& allParameters); Main interface to get a SamplingDistribution. RooAbsData* GenerateToyData(RooArgSet& allParameters) const; This method generates a toy dataset for the given parameter point. SetParameters(&allParameters, parameters). string MakeName(RooArgSet& ); helper method to create meaningful names for sampling dist. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); Main interface to evaluate the test statistic on a dataset. const RooAbsArg* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initia",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__ToyMCSampler.html:3819,Test,TestStatistic,3819,root/html526/RooStats__ToyMCSampler.html,https://root.cern,https://root.cern/root/html526/RooStats__ToyMCSampler.html,1,['Test'],['TestStatistic']
Testability," data1.GetPoint(i, value);; 774 xdata[i] = *x; ; 775 ntot1 += value; ; 776 }; 777 for (unsigned int i = 0; i < n2; ++i) {; 778 double value = 0;; 779 const double * x = data2.GetPoint(i, value);; 780 xdata[n1+i] = *x;; 781 ntot2 += value; ; 782 }; 783 double nall = ntot1+ntot2; ; 784 // sort the combined data ; 785 std::vector<unsigned int> index(n1+n2);; 786 TMath::Sort(n1+n2, &xdata[0], &index[0], false ); ; 787 ; 788 // now compute the sums for the tests ; 789 double sum1 = 0; ; 790 double sum2 = 0;; 791 double sumAll = 0; ; 792 double adsum = 0;; 793 unsigned int j = 0; ; 794 ; 795 while( j < n1+n2 ) { ; 796// for (unsigned int j = 0; j < n1+n2; ++j) { ; 797 // skip equal observations; 798 double x = xdata[ index[j] ]; ; 799 unsigned int k = j; ; 800 // loop on the bins with the same center value ; 801 double t = 0;; 802 do { ; 803 unsigned int i = index[k];; 804 double value = 0; ; 805 if (i < n1 ) {; 806 value = data1.Value(i); ; 807 sum1 += value;; 808 }; 809 else { ; 810 // from data2; 811 i -= n1;; 812 assert(i < n2);; 813 value = data2.Value(i); ; 814 sum2 += value; ; 815 }; 816 sumAll += value;; 817 t += value; ; 818 //std::cout << ""j "" << j << "" k "" << k << "" data "" << x << "" index "" << index[k] << "" value "" << value << std::endl;; 819 k++;; 820 } while ( k < n1+n2 && xdata[ index[k] ] == x );; 821 ; 822 ; 823 j = k; ; 824 // skip last point; 825 if (j < n1+n2) {; 826 double tmp1 = ( nall * sum1 - ntot1 * sumAll );; 827 double tmp2 = ( nall * sum2 - ntot2 * sumAll );; 828 adsum += t * (tmp1*tmp1/ntot1 + tmp2*tmp2/ntot2) / ( sumAll * (nall - sumAll) ) ;; 829 ; 830 //std::cout << ""comp sum "" << adsum << "" "" << t << "" "" << sumAll << "" s1 "" << sum1 << "" s2 "" << sum2 << "" tmp1 "" << tmp1 << "" tmp2 "" << tmp2 << std::endl;; 831 }; 832 }; 833 double A2 = adsum / nall; ; 834 ; 835 // compute the normalized test statistic ; 836 std::vector<size_t> ns(2); ; 837 ns[0] = ntot1; ; 838 ns[1] = ntot2;; 839 //std::cout << "" ad2 = "" << A2 << "" nall "" << nall;; 840 ; 841 Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:29194,assert,assert,29194,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['assert'],['assert']
Testability," deepNet, . std::vector< Matrix_t > & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Similar to StepReducedWeights(...) but also evaluates the loss. ; May trigger synchronization with the device. ; Definition at line 224 of file DLMinimizers.h. Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 72 of file DLMinimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 76 of file DLMinimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 74 of file DLMinimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 81 of file DLMinimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 82 of file DLMinimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 73 of file DLMinimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 80 of file DLMini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:11932,test,test,11932,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['test'],['test']
Testability," default (Option = """") return CLs or CLsb depending if the flag UseCLs is set If Option = ""CLb"" return CLb plot = ""CLs+b"" return CLs+b plot independently of the flag = ""CLs"" return CLs plot independently of the flag ; Make the plot of the result of the scan using the observed data.; By default plot CLs or CLsb depending if the flag UseCLs is set for the results that are passed to this instance.; Parameters. optOptions according to following list:; Empty: Return CLs or CLs+b depending on the value of UseCLs.ƒ; ""CLB"": return CLb plot; ""CLS+B"" / ""CLSPLUSB"": return CLs+b plot independently of the flag; ""CLS"": return CLs plot independently of the flag . Definition at line 80 of file HypoTestInverterPlot.cxx. ◆ MakeTestStatPlot(). SamplingDistPlot * HypoTestInverterPlot::MakeTestStatPlot ; (; int ; index, . int ; type = 0, . int ; nbins = 100 . ). Plot the test statistic distributions. ; Parameters. indexIndex of the result stored in HypoTestInverterResult ; typeType of the test (see below) ; nbinsNumber of bins; type =0 null and alt; type = 1 only null (S+B); type = 2 only alt (B) . Definition at line 395 of file HypoTestInverterPlot.cxx. ◆ Streamer(). void RooStats::HypoTestInverterPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HypoTestInverterPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 76 of file HypoTestInverterPlot.h. Member Data Documentation. ◆ fResults. HypoTestInverterResult* RooStats::HypoTestInverterPlot::fResults. private . Definition at line 72 of file HypoTestInverterPlot.h. Libraries for RooStats::HypoTestInverterPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HypoTestInverterPlot.h; roofit/roostats/src/HypoTestInverterPlot.cxx. RooStatsHypoTestInverterPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html:17385,test,test,17385,doc/master/classRooStats_1_1HypoTestInverterPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterPlot.html,1,['test'],['test']
Testability," default the p-value; when using option ""t"" returns the test statistic value ""A2"". ; Definition at line 854 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [2/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; const ROOT::Fit::BinData & ; data1, . const ROOT::Fit::BinData & ; data2, . Double_t & ; pvalue, . Double_t & ; testStat . ). static . Compute the 2-Sample Anderson Darling test for binned data assuming equal data are present at the bin center values. ; Used by TH1::AndersonDarling ; Definition at line 750 of file GoFTest.cxx. ◆ AndersonDarling2SamplesTest() [3/3]. void ROOT::Math::GoFTest::AndersonDarling2SamplesTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 2-Sample Test. ; The Anderson-Darling K-Sample Test algorithm is described and taken from http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andeksam.htm and from (1) Scholz F.W., Stephens M.A. (1987), K-sample Anderson-Darling Tests, Journal of the American Statistical Association, 82, 918–924. (2-samples variant implemented). ; Definition at line 646 of file GoFTest.cxx. ◆ AndersonDarlingTest() [1/2]. Double_t ROOT::Math::GoFTest::AndersonDarlingTest ; (; const Char_t * ; option = ""p""); const. Anderson-Darling 2-Sample Test. ; Returns default p-value; option ""t"" returns the test statistic value ""A2"" ; Definition at line 890 of file GoFTest.cxx. ◆ AndersonDarlingTest() [2/2]. void ROOT::Math::GoFTest::AndersonDarlingTest ; (; Double_t & ; pvalue, . Double_t & ; testStat . ); const. Performs the Anderson-Darling 1-Sample Test. ; The Anderson-Darling 1-Sample Test algorithm for a specific distribution is described at http://www.itl.nist.gov/div898/software/dataplot/refman1/auxillar/andedarl.htm and described and taken from (2) Marsaglia J.C.W., Marsaglia G. (2004), Evaluating the Anderson-Darling Distribution, Journal of Statistical Software, Volume 09, Issue i02. and described and taken from (3) Lewis P.A.W. (1961), The Annal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:12193,Test,Tests,12193,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Tests']
Testability," defined, one can retrieve the time evolution for the radioactive materials/mixtures by using one of the next two methods:; Method 1; TGeoMaterial::FillMaterialEvolution(TObjArray *population, Double_t precision=0.001); TGeoMaterial::FillMaterialEvolutionvirtual void FillMaterialEvolution(TObjArray *population, Double_t precision=0.001)Fills a user array with all the elements deriving from the possible decay of the top element composin...Definition TGeoMaterial.cxx:742; TObjArrayAn array of TObjects.Definition TObjArray.h:31; To use this method, one has to provide an empty TObjArray object that will be filled with all elements coming from the decay chain of the initial radionuclides contained by the material/mixture. The precision represent the cumulative branching ratio for which decay products are still considered. The population list may contain stable elements as well as radionuclides, depending on the initial elements. To test if an element is a radionuclide:; Bool_t TGeoElement::IsRadioNuclide() const; Bool_tbool Bool_tDefinition RtypesCore.h:63; TGeoElement::IsRadioNuclidevirtual Bool_t IsRadioNuclide() constDefinition TGeoElement.h:82; All radionuclides in the output population list have attached objects that represent the time evolution of their fraction of nuclei with respect to the top radionuclide in the decay chain. These objects (Bateman solutions) can be retrieved and drawn:; TGeoBatemanSol *TGeoElementRN::Ratio();; void TGeoBatemanSol::Draw();; TGeoBatemanSolDefinition TGeoElement.h:286; TGeoBatemanSol::Drawvoid Draw(Option_t *option="""") overrideDraw the solution of Bateman equation versus time.Definition TGeoElement.cxx:1612; TGeoElementRN::RatioTGeoBatemanSol * Ratio() constDefinition TGeoElement.h:188; Method 2; Another method allows to create the evolution of a given radioactive material/mixture at a given moment in time:; TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001); TGeoMaterial::DecayMaterialvirtual TGeoMaterial * Decay",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Materials__classes.html:10106,test,test,10106,doc/master/group__Materials__classes.html,https://root.cern,https://root.cern/doc/master/group__Materials__classes.html,1,['test'],['test']
Testability," definition bitmap images. ;  ; Bool_t fIsReading;  ! Set to FALSE when userclass::UseCurrentStyle is called by the style manager ;  ; Int_t fJoinLinePS;  Determines the appearance of joining lines on PostScript, PDF and SVG. ;  ; Width_t fLegendBorderSize;  Legend box border size. ;  ; Color_t fLegendFillColor;  Legend fill color. ;  ; Style_t fLegendFillStyle;  Legend fill style. ;  ; Style_t fLegendFont;  Legend font style. ;  ; Double_t fLegendTextSize;  Legend text size. If 0 the size is computed automatically. ;  ; Float_t fLegoInnerR;  Inner radius for cylindrical legos. ;  ; Float_t fLineScalePS;  Line scale factor when drawing lines on Postscript. ;  ; TString fLineStyle [30];  String describing line style i (for postScript) ;  ; Int_t fNumberContours;  Default number of contours for 2-d plots. ;  ; Int_t fOptDate;  True if date option is selected. ;  ; Int_t fOptFile;  True if option File is selected. ;  ; Int_t fOptFit;  True if option Fit is selected. ;  ; Int_t fOptLogx;  True if log scale in X. ;  ; Int_t fOptLogy;  True if log scale in y. ;  ; Int_t fOptLogz;  True if log scale in z. ;  ; Int_t fOptStat;  True if option Stat is selected. ;  ; Int_t fOptTitle;  True if option Title is selected. ;  ; Bool_t fOrthoCamera;  Use orthographic camera with web display. ;  ; Int_t fPadBorderMode;  Pad border mode. ;  ; Width_t fPadBorderSize;  Pad border size. ;  ; Float_t fPadBottomMargin;  Pad bottom margin. ;  ; Color_t fPadColor;  Pad color. ;  ; Bool_t fPadGridX;  True to get the grid along X. ;  ; Bool_t fPadGridY;  True to get the grid along Y. ;  ; Float_t fPadLeftMargin;  Pad left margin. ;  ; Float_t fPadRightMargin;  Pad right margin. ;  ; Int_t fPadTickX;  True to set special pad ticks along X. ;  ; Int_t fPadTickY;  True to set special pad ticks along Y. ;  ; Float_t fPadTopMargin;  Pad top margin. ;  ; TString fPaintTextFormat;  Printing format for TH2::PaintText. ;  ; Float_t fPaperSizeX;  PostScript paper size along X. ;  ; Float_t fPaperSizeY;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle.html:39396,log,log,39396,doc/master/classTStyle.html,https://root.cern,https://root.cern/doc/master/classTStyle.html,1,['log'],['log']
Testability," delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); Int_toperator Int_t() const; void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooInt&operator=(Int_t value); RooInt&operator=(const RooInt&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooInt.html:4603,Test,TestBit,4603,root/html526/RooInt.html,https://root.cern,https://root.cern/root/html526/RooInt.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THLimitsFinder&operator=(const THLimitsFinder&); static voidOptimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static voidOptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetLimitsFinder(THLimitsFinder* finder); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THLimitsFinder.html:5180,Test,TestBit,5180,root/html530/THLimitsFinder.html,https://root.cern,https://root.cern/root/html530/THLimitsFinder.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualIndex&operator=(const TVirtualIndex&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(const TTree* T); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateFormulaLeaves(const TTree* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualIndex.html:5128,Test,TestBit,5128,root/html530/TVirtualIndex.html,https://root.cern,https://root.cern/root/html530/TVirtualIndex.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMethodArg(MethodArgInfo_t* info = 0, TFunction* method = 0); voidUpdate(MethodArgInfo_t* info); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMethodArg.html:5228,Test,TestBit,5228,root/html602/TMethodArg.html,https://root.cern,https://root.cern/root/html602/TMethodArg.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFileStager&operator=(const TFileStager&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual Bool_tStage(const char*, Option_t* = 0); virtual Bool_tStage(TCollection* pathlist, Option_t* opt = 0); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFileStager.html:5218,Test,TestBit,5218,root/html528/TFileStager.html,https://root.cern,https://root.cern/root/html528/TFileStager.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMethod&operator=(const TMethod& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tTFunction::Property() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMenuItem(EMenuItemKind menuItem); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual TMethodCall*SetterMethod(); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMethod.html:5796,Test,TestBit,5796,root/html534/TMethod.html,https://root.cern,https://root.cern/root/html534/TMethod.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* name = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShow(const char* name); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStart(const char* name); virtual voidStop(const char* name); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidSummary(Float_t& rt, Float_t& cp); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:4842,Test,TestBit,4842,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTVirtualViewer3D::PadPaint(TVirtualPad*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPreferLocalFrame() const; virtual voidTObject::Print(Option_t* option = """") const; virtual voidTVirtualViewer3D::PrintObjects(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTVirtualViewer3D::ResetCameras(); virtual voidTVirtualViewer3D::ResetCamerasAfterNextUpdate(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual TObject*TVirtualViewer3D::SelectObject(Int_t, Int_t); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); static TVirtualViewer3D*TVirtualViewer3D::Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TViewer3DPad.html:5247,Test,TestBit,5247,root/html530/TViewer3DPad.html,https://root.cern,https://root.cern/root/html530/TViewer3DPad.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLClassInfo&operator=(const TSQLClassInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClassTableName(const char* name); voidSetColumns(TObjArray* columns); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetRawExist(Bool_t on); voidSetRawTableName(const char* name); voidSetTableStatus(TObjArray* columns = 0, Bool_t israwtable = kFALSE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSQLClassInfo(); TSQLClassInfo(const TSQLClassInfo&); TSQLClassInfo(Long64_t classid, const char* classname, Int_t version); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLClassInfo.html:5098,Test,TestBit,5098,root/html602/TSQLClassInfo.html,https://root.cern,https://root.cern/root/html602/TSQLClassInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooStats::PdfProposal&operator=(const RooStats::PdfProposal&); virtual voidTObject::Paint(Option_t* option = """"); RooStats::PdfProposalPdfProposal(); RooStats::PdfProposalPdfProposal(RooAbsPdf& pdf); RooStats::PdfProposalPdfProposal(const RooStats::PdfProposal&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual voidprintMappings(); virtual voidPropose(RooArgSet& xPrime, RooArgSet& x); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetCacheSize(Int_t size); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwnsPdf(Bool_t ownsPdf); virtual voidSetPdf(RooAbsPdf& pdf); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__PdfProposal.html:6128,Test,TestBit,6128,root/html528/RooStats__PdfProposal.html,https://root.cern,https://root.cern/root/html528/RooStats__PdfProposal.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::Timer&operator=(const TMVA::Timer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTStopwatch::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); Double_tTStopwatch::RealTime(); virtual voidTObject::RecursiveRemove(TObject* obj); voidReset(); voidTObject::ResetBit(UInt_t f); voidTStopwatch::ResetCpuTime(Double_t time = 0); voidTStopwatch::ResetRealTime(Double_t time = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); voidTStopwatch::Start(Bool_t reset = kTRUE); voidTStopwatch::Stop(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TimerTimer(const TMVA::Timer&); TMVA::TimerTimer(const char* prefix = """", Bool_t colourfulOutput = kTRUE); TMVA::TimerTimer(Int_t ncounts, const char* prefix = """", Bool_t colourfulOutput = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__Timer.html:5306,Test,TestBit,5306,root/html530/TMVA__Timer.html,https://root.cern,https://root.cern/root/html530/TMVA__Timer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFileStager&operator=(const TFileStager&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual Bool_tStage(const char*, Option_t* = 0); virtual Bool_tStage(TCollection* pathlist, Option_t* opt = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFileStager(const char* stager); TFileStager(const TFileStager&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileStager.html:5330,Test,TestBit,5330,root/html602/TFileStager.html,https://root.cern,https://root.cern/root/html602/TFileStager.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr, void* vp); Double_toperator Double_t() const; void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooRealProxy&operator=(const Double_t& value); RooRealProxy&operator=(const RooRealProxy&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual voidRooArgProxy::print(ostream& os, Bool_t addContents = kFALSE) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Bool_tsetArg(RooAbsReal& newRef); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealProxy.html:5647,Test,TestBit,5647,root/html526/RooRealProxy.html,https://root.cern,https://root.cern/root/html526/RooRealProxy.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooExpensiveObjectCache&operator=(const RooExpensiveObjectCache&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidprint() const; virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tregisterObject(const char* ownerName, const char* objectName, TObject& cacheObject, TIterator* paramIter); Bool_tregisterObject(const char* ownerName, const char* objectName, TObject& cacheObject, const RooArgSet& params); voidTObject::ResetBit(UInt_t f); const TObject*retrieveObject(const char* name, TClass* tclass, const RooArgSet& params); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); Bool_tsetObj(Int_t uniqueID, TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); Int_tsize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooExpensiveObjectCache.html:5321,Test,TestBit,5321,root/html526/RooExpensiveObjectCache.html,https://root.cern,https://root.cern/root/html526/RooExpensiveObjectCache.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGondzioSolver&operator=(const TGondzioSolver& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidReset_parameters(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTQpSolverBase::SetArTol(Double_t ar); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTQpSolverBase::SetMuTol(Double_t m); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSolve(TQpDataBase* prob, TQpVar* iterate, TQpResidual* resid); virtual voidTQpSolverBase::Start(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidTQpSolverBase::SteveStart(TQpProbBase* formulation, TQpVar* iterate, TQpDataBase* prob, TQpResidual* resid, TQpVar* step); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGondzioSolver.html:6101,Test,TestBit,6101,root/html530/TGondzioSolver.html,https://root.cern,https://root.cern/root/html530/TGondzioSolver.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TProofMonSenderML&operator=(const TProofMonSenderML&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendDataSetInfo(TDSet*, TList*, const char*, const char*); virtual Int_tSendFileInfo(TDSet*, TList*, const char*, const char*); virtual Int_tSendSummary(TList*, const char*); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); Int_tTProofMonSender::SetSendOptions(const char*); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofMonSenderML.html:5046,Test,TestBit,5046,root/html532/TProofMonSenderML.html,https://root.cern,https://root.cern/root/html532/TProofMonSenderML.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLTableInfo&operator=(const TSQLTableInfo&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSQLTableInfo(); TSQLTableInfo(const TSQLTableInfo&); TSQLTableInfo(const char* tablename, TList* columns, const char* comment = ""SQL table"", const char* engine = 0, const char* create_time = 0, const char* update_time = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLTableInfo.html:4865,Test,TestBit,4865,root/html602/TSQLTableInfo.html,https://root.cern,https://root.cern/root/html602/TSQLTableInfo.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:15140,test,test,15140,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['test'],['test']
Testability," details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrumFit.html:36941,log,logical,36941,root/html602/TSpectrumFit.html,https://root.cern,https://root.cern/root/html602/TSpectrumFit.html,4,['log'],['logical']
Testability," determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*,allocator<const TMVA::BinarySearchTreeNode*> >& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodPDERS.html:21682,test,test,21682,root/html528/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodPDERS.html,4,['test'],['test']
Testability," determine volume range; available values are: MinMax; Unscaled; RMS; kNN; Adaptive <default>. KernelEstimator <string> Kernel estimation function; available values are: Box <default>; Sphere; Teepee; Gauss; Sinc3; Sinc5; Sinc7; Sinc9; Sinc11; Lanczos2; Lanczos3; Lanczos5; Lanczos8; Trim. DeltaFrac <float> Ratio of #EventsMin/#EventsMax for MinMax and RMS volume range; NEventsMin <int> Minimum number of events for adaptive volume range; NEventsMax <int> Maximum number of events for adaptive volume range; MaxVIterations <int> Maximum number of iterations for adaptive volume range; InitialScale <float> Initial scale for adaptive volume range; GaussSigma <float> Width with respect to the volume size of Gaussian kernel estimator. void ProcessOptions(); process the options specified by the user. void Train( void ); this is a dummy training: the preparation work to do is the construction; of the binary tree as a pointer chain. It is easier to directly save the; trainingTree in the weight file, and to rebuild the binary tree in the; test phase from scratch. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); init the size of a volume element using a defined fraction of the; volume containing the entire events. const std::vector< Float_t >& GetRegressionValues(). void CalcAverages(); compute also average RMS values required for adaptive Gaussian. void CreateBinarySearchTree(TMVA::Types::ETreeType type); create binary search trees for signal and background. void SetVolumeElement( void ); defines volume dimensions. Double_t IGetVolumeContentForRoot(Double_t ); Interface to RootFinder. Double_t GetVolumeContentForRoot(Double_t ); count number of events in rescaled volume. void GetSample(const TMVA::Event& e, vector<const TMVA::BinarySearchTreeNode*>& events, TMVA::Volume* volume). Double_t CRScalc(const TMVA::Event& ). void RRScalc(const TMVA::Event& , vector<Float_t>* count). Double_t CKernelEstimate(const TMVA::Event& , vector<const TMVA::BinarySearchTreeNode*>&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDERS.html:24049,test,test,24049,root/html602/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDERS.html,2,['test'],['test']
Testability," dim2 = -1, Bool_t TreatEmptyCells = kFALSE). private:. TMVA::PDEFoamDistr*GetDistr() const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_t*fAlpha[fDim] Internal parameters of the hyperrectangle; TMVA::PDEFoamCell**fCells[fNCells] Array of ALL cells; TMVA::EDTSeparationfDTSeparationsplit cells according to decision tree logic; Int_tfDimDimension of the integration/simulation space; TMVA::PDEFoamDistr*fDistr! distribution of training events; Int_tfEvPerBinMaximum number of effective (wt=1) events per bin; Bool_tfFillFoamWithOrigWeightsfill the foam with boost or orig. weights; TMVA::EFoamTypefFoamTypetype of foam; TObjArray*fHistEdgHistograms of wt, one for each cell edge; Int_t*fInhiDiv! [fDim] Flags for inhibiting cell division; Int_tfLastCeIndex of the last cell; TMVA::MsgLogger*fLogger! message logger; Int_t*fMaskDiv! [fDim] Dynamic Mask for cell division; UInt_tfMaxDepthmaximum depth of cell tree; Int_tfNBinNo. of bins in the edge histogram for cell MC exploration; Int_tfNCellsMaximum number of cells; UInt_tfNElementsnumber of variables in every cell; Int_tfNSamplNo. of MC events, when dividing (exploring) cell; TStringfNameName of a given instance of the FOAM class; UInt_tfNminminimal number of events in cell to split cell; Int_tfNoActNumber of active cells; Bool_tfPeekMaxpeek up cell with max. driver integral for split; TRandom3*fPseRanPointer to user-defined generator of pseudorandom numbers; Double_t*fRvec[fDim] random number vector from r.n. generator fDim+1 maximum elements; TMVA::Timer*fTimertimer for graphical output; TObjArray*fVariableNamescollection of all variable names; Float_tfVolFracvolume fraction (with respect to total phase space; Double_t*fXmax[fDim] maximum for variable transform; Double_t*fXmin[fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__PDEFoam.html:10553,log,logger,10553,root/html528/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html528/TMVA__PDEFoam.html,1,['log'],['logger']
Testability," direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;�������������",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:49648,log,logical,49648,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability," direction is reset to the steepes descent. How; to use it... TMLP is build from 3 classes: TNeuron, TSynapse and; TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used; explicitely by the user.; TMultiLayerPerceptron will take examples from a TTree; given in the constructor. The network is described by a simple; string: The input/output layers are defined by giving the expression for; each neuron, separated by comas. Hidden layers are just described; by the number of neurons. The layers are separated by colons.; In addition, input/output layer formulas can be preceded by '@' (e.g ""@out""); if one wants to also normalize the data from the TTree.; Input and outputs are taken from the TTree given as second argument.; Expressions are evaluated as for TTree::Draw(), arrays are expended in; distinct neurons, one for each index.; This can only be done for fixed-size arrays.; If the formula ends with ""!"", softmax functions are used for the output layer.; One defines the training and test datasets by TEventLists. Example:; TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; Both the TTree and the TEventLists can be defined in; the constructor, or later with the suited setter method. The lists; used for training and test can be defined either explicitely, or via; a string containing the formula to be used to define them, exactly as; for a TCut.; The learning method is defined using the; TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :; TMultiLayerPerceptron::kStochastic, ; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS; A weight can be assigned to events, either in the constructor, either; with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight; is taken into account.; Finally, one starts the training with; TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The; first argument is the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:6991,test,test,6991,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,3,['test'],['test']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TApplicationServer.html:15932,log,logon,15932,root/html534/TApplicationServer.html,https://root.cern,https://root.cern/root/html534/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For comments or suggestions regardi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:15603,log,logon,15603,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2010-10-06 16:19; This page has been automatically generated. For comments or suggestions regardi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationServer.html:15762,log,logon,15762,root/html528/TApplicationServer.html,https://root.cern,https://root.cern/root/html528/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regardi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplicationServer.html:15913,log,logon,15913,root/html530/TApplicationServer.html,https://root.cern,https://root.cern/root/html530/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regardi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TApplicationServer.html:15913,log,logon,15913,root/html532/TApplicationServer.html,https://root.cern,https://root.cern/root/html532/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 15:37; This page has been automatically generated. For commen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TApplicationServer.html:16698,log,logon,16698,root/html604/TApplicationServer.html,https://root.cern,https://root.cern/root/html604/TApplicationServer.html,2,['log'],['logon']
Testability," directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. TApplicationServer(Int_t* argc, char** argv, FILE* flog, const char* logfile). Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 14:38; This page has been automatically generated. For commen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TApplicationServer.html:16698,log,logon,16698,root/html602/TApplicationServer.html,https://root.cern,https://root.cern/root/html602/TApplicationServer.html,2,['log'],['logon']
Testability," directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TString fClassName;  name of the class the tree belongs to ;  ; Bool_t fOwner;  true if created from file ;  ; TTree * fTree;  pointer to the tree ;  ; Types::ETreeType fTreeType;  tree is for training/testing/both ;  ; Double_t fWeight;  weight for the tree ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *loca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html:9356,test,testing,9356,doc/master/classTMVA_1_1TreeInfo.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TreeInfo.html,1,['test'],['testing']
Testability," disabled for now.; 1901 //; 1902 // // --- Acheivable signal efficiency * signal purity; 1903 // // --------------------------------------------------------------------; 1904 // Log() << kINFO << Endl;; 1905 // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; 1906 // Log() << kINFO << hLine << Endl;; 1907 ; 1908 // // iterate over methods and evaluate; 1909 // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; 1910 // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; 1911 // if (theMethod == 0) {; 1912 // continue;; 1913 // }; 1914 ; 1915 // TString header = ""DataSet Name MVA Method "";; 1916 // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; 1917 // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; 1918 // }; 1919 ; 1920 // Log() << kINFO << header << Endl;; 1921 // Log() << kINFO << hLine << Endl;; 1922 // for (Int_t i = 0; i < nmeth_used[0]; i++) {; 1923 // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; 1924 // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; 1925 // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; 1926 // }; 1927 // Log() << kINFO << res << Endl;; 1928 // }; 1929 ; 1930 // Log() << kINFO << hLine << Endl;; 1931 // Log() << kINFO << Endl;; 1932 // }; 1933 ; 1934 // --- 1 vs Rest ROC AUC, signal efficiency @ given background efficiency; 1935 // --------------------------------------------------------------------; 1936 TString header1 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Dataset"", ""MVA Method"", ""ROC AUC"", ""Sig eff@B=0.01"",; 1937 ""Sig eff@B=0.10"", ""Sig eff@B=0.30"");; 1938 TString header2 = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", ""Name:"", ""/ Class:"", ""test (train)"", ""test (train)"",; 1939 ""test (train)"", ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:80058,Log,Log,80058,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],['Log']
Testability," distribution (lower tail).Definition ProbFuncMathCore.cxx:161; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; F#define F(x, y, z); H#define H(x, y, z); MathNamespace for new Math classes and functions.; ROOT::Math::adkTestStatvoid adkTestStat(double *adk, const std::vector< std::vector< double > > &samples, const std::vector< double > &zstar)Definition GoFTest.cxx:546; ROOT::Math::getCountint getCount(double z, const double *dat, int n)Definition GoFTest.cxx:520; ROOT::Math::getSumint getSum(const int *x, int n)Definition GoFTest.cxx:534; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; TMath::KolmogorovTestDouble_t KolmogorovTest(Int_t na, const Double_t *a, Int_t nb, const Double_t *b, Option_t *option)Statistical test whether two one-dimensional sets of points are compatible with coming from the same ...Definition TMath.cxx:805; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::KolmogorovProbDouble_t KolmogorovProb(Double_t z)Calculates the Kolmogorov distribution function,.Definition TMath.cxx:679; TMath::Sortvoid Sort(Index n, const Element *a, Index *index, Bool_t down=kTRUE)Sort the n elements of the array a of generic templated type Element.Definition TMathBase.h:431; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; ROOT::Math::CDFWrapperDefinition GoFTest.cxx:40; ROOT::Math::CDFWrapper::CDFWrapperCDFWrapper(const IGenFunction &cdf, Double_t xmin=0, Double_t xmax=-1)Definition GoFTest.cxx:50; ROOT::Math::CDFWrapper::DoEvalDouble_t DoEval(Double_t x) const overrideimplementation of the evaluation function. Must be implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:46695,Log,Log,46695,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,2,"['Log', 'log']","['Log', 'logarithm']"
Testability," divisions: enter a number ij with 0<i<99 and 0<j<99.Definition TGraphPolargram.cxx:787; TGraphPolargram::GetRadialLabelSizeDouble_t GetRadialLabelSize()Definition TGraphPolargram.h:75; TGraphPolargram::GetPolarColorLabelColor_t GetPolarColorLabel()Definition TGraphPolargram.h:69; TGraphPolargram::fRadialOffsetDouble_t fRadialOffsetOffset for radial labels.Definition TGraphPolargram.h:33; THLimitsFinder::Optimizestatic void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t &BinLow, Double_t &BinHigh, Int_t &nbins, Double_t &BWID, Option_t *option="""")Static function to compute reasonable axis limits.Definition THLimitsFinder.cxx:184; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::PaintLatexvirtual void PaintLatex(Double_t x, Double_t y, Double_t angle, Double_t size, const char *text)Main drawing function.Definition TLatex.cxx:2114; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TText::PaintTextvirtual void PaintText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html:43141,Test,TestBit,43141,doc/master/TGraphPolargram_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html,1,['Test'],['TestBit']
Testability," dolly, Double_t* center, Double_t hRotate, Double_t vRotate); voidTGLViewer::SetPictureFileName(const TString& f); voidTGLViewer::SetPointScale(Float_t s); voidTGLViewer::SetResetCamerasOnUpdate(Bool_t v); voidTGLViewer::SetSmartRefresh(Bool_t smart_ref); voidTGLViewer::SetSmoothLines(Bool_t s); voidTGLViewer::SetSmoothPoints(Bool_t s); voidTGLViewer::SetStereo(Bool_t s); voidTGLViewer::SetStereoEyeOffsetFac(Float_t f); voidTGLViewer::SetStereoFrustumAsymFac(Float_t f); voidTGLViewer::SetStereoZeroParallax(Float_t f); voidTGLViewerBase::SetStyle(Short_t st); virtual voidTObject::SetUniqueID(UInt_t uid); voidTGLViewerBase::SetWFLineW(Float_t w); voidShow(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Short_tTGLViewerBase::Style() const; voidTGLViewer::SwitchColorSet(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTGLLockable::TakeLock(TGLLockable::ELock lock) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidToggleEditObject(); voidToggleOrthoDolly(); voidToggleOrthoRotate(); virtual voidTGLViewer::UnClicked(TObject* obj, UInt_t button, UInt_t state)SIGNAL ; virtual voidTGLViewer::UnMouseOver(TObject* obj, UInt_t state)SIGNAL ; voidTGLViewer::UpdateScene(Bool_t redraw = kTRUE); virtual voidTObject::UseCurrentStyle(); voidTGLViewer::UseDarkColorSet(); voidTGLViewer::UseDefaultColorSet(Bool_t x); static voidTGLViewer::UseDefaultColorSetForNewViewers(Bool_t x); voidTGLViewer::UseLightColorSet(); static TVirtualViewer3D*TVirtualViewer3D::Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Int_tTGLViewer::ViewportDiagonal() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Float_tTGLViewerBase::WFLineW() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSAViewer.html:16624,Test,TestBit,16624,root/html528/TGLSAViewer.html,https://root.cern,https://root.cern/root/html528/TGLSAViewer.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," double * ex , const double * ey,; 113 const double * eval ) :; 114 FitData( n, dataX, dataY ),; 115 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 116 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 117 {; 118 assert( val );; 119 fDataPtr = val;; 120 ; 121 if ( nullptr != eval ); 122 {; 123 fDataErrorPtr = eval;; 124 ; 125 fErrorType = kValueError;; 126 ; 127 if ( nullptr != ex || nullptr != ey ); 128 {; 129 fCoordErrorsPtr.resize( 2 );; 130 ; 131 fCoordErrorsPtr[0] = ex;; 132 fCoordErrorsPtr[1] = ey;; 133 ; 134 fErrorType = kCoordError;; 135 }; 136 }; 137 else; 138 {; 139 fErrorType = kNoError;; 140 }; 141 ; 142 fpTmpCoordErrorVector = new double [ fDim ];; 143 ComputeSums();; 144 }; 145 ; 146 /**; 147 constructor from external data for 3D with errors on coordinate and value; 148 */; 149 BinData::BinData(unsigned int n, const double * dataX, const double * dataY,; 150 const double * dataZ, const double * val, const double * ex ,; 151 const double * ey , const double * ez , const double * eval ) :; 152 FitData( n, dataX, dataY, dataZ ),; 153 fDataErrorPtr( nullptr ), fDataErrorHighPtr( nullptr ), fDataErrorLowPtr( nullptr ),; 154 fpTmpCoordErrorVector( nullptr ), fpTmpBinEdgeVector( nullptr ); 155 {; 156 assert( val );; 157 fDataPtr = val;; 158 ; 159 if ( nullptr != eval ); 160 {; 161 fDataErrorPtr = eval;; 162 ; 163 fErrorType = kValueError;; 164 ; 165 if ( nullptr != ex || nullptr != ey || nullptr != ez ); 166 {; 167 fCoordErrorsPtr.resize( 3 );; 168 ; 169 fCoordErrorsPtr[0] = ex;; 170 fCoordErrorsPtr[1] = ey;; 171 fCoordErrorsPtr[2] = ez;; 172 ; 173 fErrorType = kCoordError;; 174 }; 175 }; 176 else; 177 {; 178 fErrorType = kNoError;; 179 }; 180 ; 181 fpTmpCoordErrorVector = new double [ fDim ];; 182 ComputeSums();; 183 }; 184 ; 185 /**; 186 destructor; 187 */; 188 BinData::~BinData(); 189 {; 190 assert( fMaxPoints == 0 || fWrapped == fData.empty() );; 191 ; 192 assert( kValueError == fErrorType || kCoordErro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:4490,assert,assert,4490,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability," double *h=nullptr, bool fullHessian=false) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::BasicFitMethodFunction< DerivFunType >private; fNEffPointsROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fNPointsROOT::Math::BasicFitMethodFunction< DerivFunType >private; fWeightROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; G2(const double *, double *) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; Gradient(const double *x, double *g) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; HasHessian() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; Hessian(const double *x, double *hess) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; IGradModelFunction typedefROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; IModelFunction typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinestatic; IsAGradFCN()ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; kLeastSquare enum valueROOT::Math::BasicFitMethodFunction< DerivFunTyp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:2032,Log,LogLikelihoodFCN,2032,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability," double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4GSLRngGFSR4(ROOT::Math::GSLRngGFSR4&&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngGFSR4&operator=(const ROOT::Math::GSLRngGFSR4&); ROOT::Math::GSLRngGFSR4&operator=(ROOT::Math::GSLRngGFSR4&&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ROOT__Math__GSLRngGFSR4.html:2559,Log,LogNormal,2559,root/html602/ROOT__Math__GSLRngGFSR4.html,https://root.cern,https://root.cern/root/html602/ROOT__Math__GSLRngGFSR4.html,2,['Log'],['LogNormal']
Testability," double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void operator() (ETestType test, Double_t &pvalue, Double_t &testStat) const;  The class's unary functions performing the gif test according to the ETestType provided. ;  ; Double_t operator() (ETestType test=kAD, const Char_t *option=""p"") const;  Returns default Anderson Darling 1-Sample Test and default p-value; option ""t"" returns the test statistic value specific to the test type. ;  ; void SetDistribution (EDistribution dist, const std::vector< double > &distParams={});  Sets the distribution for the predefined distribution types and optionally its parameters for 1-sample tests. ;  ; void SetUserCDF (const IGenFunction &cdf, Double_t xmin=1, Double_t xmax=0);  Specialization to set the user input distribution as a cumulative distribution function for 1-sample tests. ;  ; template<class Dist > ; void SetUserCDF (Di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:3722,Test,Test,3722,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['Test'],['Test']
Testability," double x0=0);  Complement of the cumulative distribution function of the F-distribution (upper tail). ;  ; double ROOT::Math::gamma_cdf (double x, double alpha, double theta, double x0=0);  Cumulative distribution function of the gamma distribution (lower tail). ;  ; double ROOT::Math::gamma_cdf_c (double x, double alpha, double theta, double x0=0);  Complement of the cumulative distribution function of the gamma distribution (upper tail). ;  ; double ROOT::Math::landau_cdf (double x, double xi=1, double x0=0);  Cumulative distribution function of the Landau distribution (lower tail). ;  ; double ROOT::Math::landau_cdf_c (double x, double xi=1, double x0=0);  Complement of the distribution function of the Landau distribution (upper tail). ;  ; double ROOT::Math::lognormal_cdf (double x, double m, double s, double x0=0);  Cumulative distribution function of the lognormal distribution (lower tail). ;  ; double ROOT::Math::lognormal_cdf_c (double x, double m, double s, double x0=0);  Complement of the cumulative distribution function of the lognormal distribution (upper tail). ;  ; double ROOT::Math::negative_binomial_cdf (unsigned int k, double p, double n);  Cumulative distribution function of the Negative Binomial distribution Lower tail of the integral of the negative_binomial_pdf. ;  ; double ROOT::Math::negative_binomial_cdf_c (unsigned int k, double p, double n);  Complement of the cumulative distribution function of the Negative Binomial distribution. ;  ; double ROOT::Math::normal_cdf (double x, double sigma=1, double x0=0);  Cumulative distribution function of the normal (Gaussian) distribution (lower tail). ;  ; double ROOT::Math::normal_cdf_c (double x, double sigma=1, double x0=0);  Complement of the cumulative distribution function of the normal (Gaussian) distribution (upper tail). ;  ; double ROOT::Math::poisson_cdf (unsigned int n, double mu);  Cumulative distribution function of the Poisson distribution Lower tail of the integral of the poisson_pdf. ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__ProbFunc.html:5206,log,lognormal,5206,doc/master/group__ProbFunc.html,https://root.cern,https://root.cern/doc/master/group__ProbFunc.html,1,['log'],['lognormal']
Testability," double& z) const; doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine&); ROOT::Math::GSLRngTausGSLRngTaus(); ROOT::Math::GSLRngTausGSLRngTaus(const ROOT::Math::GSLRngTaus&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngTaus&operator=(const ROOT::Math::GSLRngTaus&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLRngTaus.html:2474,Log,LogNormal,2474,root/html528/ROOT__Math__GSLRngTaus.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLRngTaus.html,3,['Log'],['LogNormal']
Testability," double* GetPointError(unsigned int ipoint, double & errvalue) const; 463 {; 464 assert( ipoint < fMaxPoints );; 465 assert( fErrorType == kCoordError || fErrorType == kAsymError );; 466 ; 467 errvalue = Error( ipoint );; 468 return CoordErrors( ipoint );; 469 }; 470 ; 471 /**; 472 Get errors on the point (coordinate errors and asymmetric value errors) for the; 473 given fit point.; 474 It must be called only when the coordinate errors and asymmetric errors are stored; 475 otherwise it will produce an assert.; 476 */; 477 // not threadsafe, to be replaced with never constructs!; 478 // for example: just return std::array or std::vector, there's; 479 // is going to be only minor overhead in c++11.; 480 const double* GetPointError(unsigned int ipoint, double & errlow, double & errhigh) const; 481 {; 482 assert( ipoint < fMaxPoints );; 483 assert( fErrorType == kAsymError );; 484 assert( !fDataErrorPtr && fDataErrorHighPtr && fDataErrorLowPtr );; 485 assert( fDataError.empty() );; 486 assert( fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 487 assert( fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 488 assert( fDataErrorLow.empty() == fDataErrorHigh.empty() );; 489 ; 490 errhigh = fDataErrorHighPtr[ ipoint ];; 491 errlow = fDataErrorLowPtr[ ipoint ];; 492 ; 493 return CoordErrors( ipoint );; 494 }; 495 ; 496 /**; 497 returns a single coordinate error component of a point.; 498 This function is threadsafe in contrast to Coords(...); 499 and can easily get vectorized by the compiler in loops; 500 running over the ipoint-index.; 501 */; 502 double GetBinUpEdgeComponent( unsigned int ipoint, unsigned int icoord ) const; 503 {; 504 assert( icoord < fDim );; 505 assert( !fBinEdge.empty() );; 506 assert( ipoint < fBinEdge.front().size() );; 507 ; 508 return fBinEdge[icoord][ipoint];; 509 }; 510 ; 511 /**; 512 return an array containing the upper edge of the bin for coordinate i; 513 In case of empty bin they could be merged in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8h_source.html:17280,assert,assert,17280,doc/master/BinData_8h_source.html,https://root.cern,https://root.cern/doc/master/BinData_8h_source.html,1,['assert'],['assert']
Testability," doubleROOT::Math::GSLRandomEngine::Exponential(double mu) const; doubleROOT::Math::GSLRandomEngine::FDist(double nu1, double nu2) const; doubleROOT::Math::GSLRandomEngine::Gamma(double a, double b) const; doubleROOT::Math::GSLRandomEngine::Gaussian(double sigma) const; voidROOT::Math::GSLRandomEngine::Gaussian2D(double sigmaX, double sigmaY, double rho, double& x, double& y) const; doubleROOT::Math::GSLRandomEngine::GaussianRatio(double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianTail(double a, double sigma) const; doubleROOT::Math::GSLRandomEngine::GaussianZig(double sigma) const; ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(ROOT::Math::GSLRngWrapper* rng); ROOT::Math::GSLRandomEngineROOT::Math::GSLRandomEngine::GSLRandomEngine(const ROOT::Math::GSLRandomEngine& eng); ROOT::Math::GSLRngRanLuxGSLRngRanLux(); ROOT::Math::GSLRngRanLuxGSLRngRanLux(const ROOT::Math::GSLRngRanLux&); voidROOT::Math::GSLRandomEngine::Initialize(); doubleROOT::Math::GSLRandomEngine::Landau() const; doubleROOT::Math::GSLRandomEngine::LogNormal(double zeta, double sigma) const; vector<unsigned int>ROOT::Math::GSLRandomEngine::Multinomial(unsigned int ntot, const vector<double>& p) const; stringROOT::Math::GSLRandomEngine::Name() const; unsigned intROOT::Math::GSLRandomEngine::NegativeBinomial(double p, double n) const; doubleROOT::Math::GSLRandomEngine::operator()() const; ROOT::Math::GSLRngRanLux&operator=(const ROOT::Math::GSLRngRanLux&); unsigned intROOT::Math::GSLRandomEngine::Poisson(double mu) const; voidROOT::Math::GSLRandomEngine::RandomArray(double* begin, double* end) const; unsigned intROOT::Math::GSLRandomEngine::RndmInt(unsigned int max) const; voidROOT::Math::GSLRandomEngine::SetSeed(unsigned int seed) const; unsigned intROOT::Math::GSLRandomEngine::Size() const; doubleROOT::Math::GSLRandomEngine::tDist(double nu) const; voidROOT::Math::GSLRandomEngine::Terminate().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GSLRngRanLux.html:2498,Log,LogNormal,2498,root/html534/ROOT__Math__GSLRngRanLux.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GSLRngRanLux.html,1,['Log'],['LogNormal']
Testability," drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TVolume.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2010-09-30 11:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVolume.html:17720,Test,TestBit,17720,root/html528/TVolume.html,https://root.cern,https://root.cern/root/html528/TVolume.html,1,['Test'],['TestBit']
Testability," drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TVolume.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-07-04 15:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVolume.html:17789,Test,TestBit,17789,root/html530/TVolume.html,https://root.cern,https://root.cern/root/html530/TVolume.html,1,['Test'],['TestBit']
Testability," drawn; -; *. void PaintShape(Option_t* option = """"); Paint shape of the volume; To be called from the TObject::Paint method only. void DeletePosition(TVolumePosition* position); DeletePosition deletes the position of the TVolume *node from this TVolume; and removes that volume from the list of the nodes of this TVolume. void GetLocalRange(Float_t* min, Float_t* max); GetRange. Calculates the size of 3 box the volume occupies,; Return:; two floating point arrays with the bound of box; surroundind all shapes of this TVolumeView. void SetVisibility(TVolume::ENodeSEEN vis = TVolume::kBothVisible); Set visibility for this volume and its sons*-*-*-*-; *-* =========================================; ENodeSEEN Visibility flag 00 - everything visible,; 10 - this unvisible, but sons are visible; 01 - this visible but sons; 11 - neither this nor its sons are visible; -; *. void Sizeof3D() const; -*-*-*-*Return total size of this 3-D volume with its attributes; *-* ==========================================================. void Add(TDataSet* dataset); { TDataSet::Add(dataset);}. Bool_t IsMarked() const; { return TestBit(kMark); }. void SetPositionsList(TList* list = 0); {AddObject((TObject *)list);}. TVolume(). const Option_t * GetOption() const; { return fOption.Data();}. TShape * GetShape() const; {return fShape;}. TList * GetListOfShapes() const; {return fListOfShapes;}. ENodeSEEN GetVisibility() const; {return fVisibility;}. TList * GetListOfPositions(); { return (TList *)(GetObject());}. ULong_t Hash() const; { return TObject::Hash();}. Bool_t Is3D() const; {return kTRUE;}. TList * Nodes() const; { return GetList(); }. » Author: Valery Fine 10/12/98 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id: TVolume.h 27157 2009-01-15 14:05:12Z brun $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVolume.html:17789,Test,TestBit,17789,root/html532/TVolume.html,https://root.cern,https://root.cern/root/html532/TVolume.html,1,['Test'],['TestBit']
Testability," dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAddition.html:19934,test,testArg,19934,root/html534/RooAddition.html,https://root.cern,https://root.cern/root/html534/RooAddition.html,2,['test'],['testArg']
Testability," dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsSelfCachedReal&operator=(const RooAbsSelfCachedReal&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsSelfCachedReal.html:20256,test,testArg,20256,root/html602/RooAbsSelfCachedReal.html,https://root.cern,https://root.cern/root/html602/RooAbsSelfCachedReal.html,2,['test'],['testArg']
Testability," dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooRecursiveFraction&operator=(const RooRecursiveFraction&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRecursiveFraction.html:19620,test,testArg,19620,root/html602/RooRecursiveFraction.html,https://root.cern,https://root.cern/root/html602/RooRecursiveFraction.html,2,['test'],['testArg']
Testability," e1 = fH->GetBinError(i);; 7390 xmax = TMath::Max(xmax,c1+e1);; 7391 xmin = TMath::Min(xmin,c1-e1);; 7392 }; 7393 if (Hoption.Func) {; 7394 xv[0] = fXaxis->GetBinCenter(i);; 7395 while ((f = (TObject*) next())) {; 7396 if (f->IsA() == TF1::Class()) {; 7397 f1 = (TF1*)f;; 7398 if (xv[0] < f1->GetXmin() || xv[0] > f1->GetXmax()) continue;; 7399 fval = f1->Eval(xv[0],0,0);; 7400 xmax = TMath::Max(xmax,fval);; 7401 if (Hoption.Logy) {; 7402 if (fval > 0.3*c1) xmin = TMath::Min(xmin,fval);; 7403 }; 7404 }; 7405 }; 7406 next.Reset();; 7407 }; 7408 allchan += c1;; 7409 }; 7410 ; 7411 // Take into account maximum , minimum; 7412 ; 7413 if (Hoption.Logx && xmin <= 0) {; 7414 if (xmax >= 1) xmin = TMath::Max(.5,xmax*1e-10);; 7415 else xmin = 0.001*xmax;; 7416 }; 7417 Double_t xm = xmin;; 7418 if (maximum) xmax = fH->GetMaximumStored();; 7419 if (minimum) xm = fH->GetMinimumStored();; 7420 if (Hoption.Logx && xm <= 0) {; 7421 Error(where, ""log scale requested with zero or negative argument (%f)"", xm);; 7422 return 0;; 7423 }; 7424 else xmin = xm;; 7425 if (xmin >= xmax) {; 7426 if (Hoption.Logx) {; 7427 if (xmax > 0) xmin = 0.001*xmax;; 7428 else {; 7429 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", xmax);; 7430 return 0;; 7431 }; 7432 }; 7433 else {; 7434 if (xmin > 0) {; 7435 xmin = 0;; 7436 xmax *= 2;; 7437 } else if (xmin < 0) {; 7438 xmax = 0;; 7439 xmin *= 2;; 7440 } else {; 7441 xmin = 0;; 7442 xmax = 1;; 7443 }; 7444 }; 7445 }; 7446 ; 7447 // take into account normalization factor; 7448 Hparam.allchan = allchan;; 7449 Double_t factor = allchan;; 7450 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 7451 if (allchan) factor /= allchan;; 7452 if (factor == 0) factor = 1;; 7453 Hparam.factor = factor;; 7454 xmax = factor*xmax;; 7455 xmin = factor*xmin;; 7456 ; 7457 // For log scales, histogram coordinates are LOG10(ymin) and; 7458 // LOG10(ymax). Final adjustment (if not option ""Same""; 7459 // or ""+"" for ymax) of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:267709,Log,Logx,267709,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'log']","['Logx', 'log']"
Testability," e1;; 7377 Double_t xv[1];; 7378 Double_t fval;; 7379 Int_t i;; 7380 TObject *f;; 7381 TF1 *f1;; 7382 Double_t allchan = 0;; 7383 TIter next(fFunctions);; 7384 for (i=first; i<=last;i++) {; 7385 c1 = fH->GetBinContent(i);; 7386 xmax = TMath::Max(xmax,c1);; 7387 xmin = TMath::Min(xmin,c1);; 7388 if (Hoption.Error) {; 7389 e1 = fH->GetBinError(i);; 7390 xmax = TMath::Max(xmax,c1+e1);; 7391 xmin = TMath::Min(xmin,c1-e1);; 7392 }; 7393 if (Hoption.Func) {; 7394 xv[0] = fXaxis->GetBinCenter(i);; 7395 while ((f = (TObject*) next())) {; 7396 if (f->IsA() == TF1::Class()) {; 7397 f1 = (TF1*)f;; 7398 if (xv[0] < f1->GetXmin() || xv[0] > f1->GetXmax()) continue;; 7399 fval = f1->Eval(xv[0],0,0);; 7400 xmax = TMath::Max(xmax,fval);; 7401 if (Hoption.Logy) {; 7402 if (fval > 0.3*c1) xmin = TMath::Min(xmin,fval);; 7403 }; 7404 }; 7405 }; 7406 next.Reset();; 7407 }; 7408 allchan += c1;; 7409 }; 7410 ; 7411 // Take into account maximum , minimum; 7412 ; 7413 if (Hoption.Logx && xmin <= 0) {; 7414 if (xmax >= 1) xmin = TMath::Max(.5,xmax*1e-10);; 7415 else xmin = 0.001*xmax;; 7416 }; 7417 Double_t xm = xmin;; 7418 if (maximum) xmax = fH->GetMaximumStored();; 7419 if (minimum) xm = fH->GetMinimumStored();; 7420 if (Hoption.Logx && xm <= 0) {; 7421 Error(where, ""log scale requested with zero or negative argument (%f)"", xm);; 7422 return 0;; 7423 }; 7424 else xmin = xm;; 7425 if (xmin >= xmax) {; 7426 if (Hoption.Logx) {; 7427 if (xmax > 0) xmin = 0.001*xmax;; 7428 else {; 7429 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", xmax);; 7430 return 0;; 7431 }; 7432 }; 7433 else {; 7434 if (xmin > 0) {; 7435 xmin = 0;; 7436 xmax *= 2;; 7437 } else if (xmin < 0) {; 7438 xmax = 0;; 7439 xmin *= 2;; 7440 } else {; 7441 xmin = 0;; 7442 xmax = 1;; 7443 }; 7444 }; 7445 }; 7446 ; 7447 // take into account normalization factor; 7448 Hparam.allchan = allchan;; 7449 Double_t factor = allchan;; 7450 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:267453,Log,Logx,267453,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability," each file, the link’s text will be the file name without extension, with underscores replaced by spaces.; You can see an example of the module documentation including links, the corresponding index.html, and the module class index at http://root.cern.ch/root/html/HIST_Index.html.; 27.2 Converting Sources (and Other Files) to HTML; THtml can take a file (C++ or text) and convert it to HTML. There are two main use cases:; The output of a macro converted to HTML will almost look like the beautified source file of a class reference. The Begin_Html/End_Html keywords are supported; comments, strings, and keywords are colored like in THtml’s output for source code.; The macro Event.cxx in $ROOTSYS/test can be seen as an example of documented ROOT macros at http://root.cern.ch/root/html/examples/Event.cxx.html; THtml::Convert()converts a single text file to HTML. For example, it can be run on a change log. Each known class name will be linked to its documentation page. An example is ROOT’s change log at http://root.cern.ch/root/html/examples/V5.16.txt.html; To convert the source file MyCode.C to HTML, you can run; root[] THtml h; root[] h.Convert(""MyCode.C"", ""Look At My Code"", ""htmlout/"");; This will create the file htmlout/MyCode.C.html. The HTML page will have the title “Look At My Code”.; 27.3 Special Documentation Elements: Directives; A common documentation problem is the inclusion of images. They are usually generated externally, which poses problems with where to keep the images, and how to keep them up to date. THtml solves this by offering a few special documentation elements: macro and latex directives.; 27.3.1 Latex Directive; Documentation surrounded by the keywords BEGIN_LATEX / END_LATEX will be passed to ROOT Latex engine TLatex. The keywords can be written with small or capital letters (case insensitive). The output will be stored to an image file, which gets automatically included in the documentation.; // This function calculates BEGIN_LATEX; // F(x_{#fra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1244399,log,log,1244399,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability," each individual branches are stored contiguously. This tends to optimize reading speed when reading a small number (1->5) of branches, since all their baskets will be clustered together instead of being spread across the file. However it might decrease the performance when reading more branches (or the full entry).; When using SortBasketsByEntry the baskets with the lowest starting entry are written first. (i.e. the baskets are sorted by the index/number of the first entry they contain). This means that on the file the baskets will be in the order in which they will be needed when reading the whole tree sequentially.; For examples of CloneTree, see tutorials:. copytree.C: A macro to copy a subset of a TTree to a new TTree. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1; copytree2.C: A macro to copy a subset of a TTree to a new TTree. One branch of the new Tree is written to a separate file. The input file has been generated by the program in $ROOTSYS/test/Event with: Event 1000 1 1 1 . Reimplemented in TNtuple.; Definition at line 3139 of file TTree.cxx. ◆ CopyAddresses(). void TTree::CopyAddresses ; (; TTree * ; tree, . bool ; undo = false . ). virtual . Set branch addresses of passed tree equal to ours. ; If undo is true, reset the branch addresses instead of copying them. This ensures 'separation' of a cloned tree from its original. ; Definition at line 3299 of file TTree.cxx. ◆ CopyEntries(). Long64_t TTree::CopyEntries ; (; TTree * ; tree, . Long64_t ; nentries = -1, . Option_t * ; option = """", . bool ; needCopyAddresses = false . ). virtual . Copy nentries from given tree to this tree. ; This routines assumes that the branches that intended to be copied are already connected. The typical case is that this tree was created using tree->CloneTree(0).; By default copy all entries.; Returns number of bytes copied to this tree.; If 'option' contains the word 'fast' and nentries is -1, the cloning will be done without u",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTree.html:106425,test,test,106425,doc/master/classTTree.html,https://root.cern,https://root.cern/doc/master/classTTree.html,2,['test'],['test']
Testability," effB); virtual voidInit(); voidMatchCutsToPars(vector<Double_t>&, Double_t*, Double_t*); voidMatchCutsToPars(vector<Double_t>&, Double_t**, Double_t**, Int_t ibin); voidMatchParsToCuts(const vector<Double_t>&, Double_t*, Double_t*); voidMatchParsToCuts(Double_t*, Double_t*, Double_t*). Data Members; public:. enum EFitMethodType { kUseMonteCarlo; kUseGeneticAlgorithm; kUseSimulatedAnnealing; kUseMinuit; kUseEventScan; kUseMonteCarloEvents; };; enum EEffMethod { kUseEventSelection; kUsePDFs; };; enum EFitParameters { kNotEnforced; kForceMin; kForceMax; kForceSmart; };; enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static const Double_tfgMaxAbsCutVal. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__MethodCuts.html:18095,test,testing,18095,root/html530/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html530/TMVA__MethodCuts.html,3,['test'],['testing']
Testability," effB); virtual voidInit(); voidMatchCutsToPars(vector<Double_t>&, Double_t*, Double_t*); voidMatchCutsToPars(vector<Double_t>&, Double_t**, Double_t**, Int_t ibin); voidMatchParsToCuts(const vector<Double_t>&, Double_t*, Double_t*); voidMatchParsToCuts(Double_t*, Double_t*, Double_t*). Data Members; public:. enum EFitMethodType { kUseMonteCarlo; kUseGeneticAlgorithm; kUseSimulatedAnnealing; kUseMinuit; kUseEventScan; kUseMonteCarloEvents; };; enum EEffMethod { kUseEventSelection; kUsePDFs; };; enum EFitParameters { kNotEnforced; kForceMin; kForceMax; kForceSmart; };; enum TMVA::MethodBase::EWeightFileType { kROOT; kTEXT; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Bool_tTMVA::MethodBase::fSetupCompletedis method setup; const TMVA::Event*TMVA::MethodBase::fTmpEvent! temporary event when testing on a different DataSet than the own one; static const Double_tfgMaxAbsCutVal. protected:. TMVA::Types::EAnalysisTypeTMVA::MethodBase::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. TString*fAllVarsIwhat to do with variables; TMVA::BinarySearchTree*fBinaryTreeB; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:17554,test,testing,17554,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,1,['test'],['testing']
Testability," effB01Test = rocCurveTest->GetEffSForEffB(0.01);; 1984 const Double_t effB10Test = rocCurveTest->GetEffSForEffB(0.10);; 1985 const Double_t effB30Test = rocCurveTest->GetEffSForEffB(0.30);; 1986 const TString rocaucCmp = TString::Format(""%5.3f (%5.3f)"", rocaucTest, rocaucTrain);; 1987 const TString effB01Cmp = TString::Format(""%5.3f (%5.3f)"", effB01Test, effB01Train);; 1988 const TString effB10Cmp = TString::Format(""%5.3f (%5.3f)"", effB10Test, effB10Train);; 1989 const TString effB30Cmp = TString::Format(""%5.3f (%5.3f)"", effB30Test, effB30Train);; 1990 row = TString::Format(""%-15s%-15s%-15s%-15s%-15s%-15s"", """", className.Data(), rocaucCmp.Data(), effB01Cmp.Data(),; 1991 effB10Cmp.Data(), effB30Cmp.Data());; 1992 Log() << kINFO << row << Endl;; 1993 ; 1994 delete rocCurveTrain;; 1995 delete rocCurveTest;; 1996 }; 1997 }; 1998 }; 1999 Log() << kINFO << Endl;; 2000 Log() << kINFO << hLine << Endl;; 2001 Log() << kINFO << Endl;; 2002 ; 2003 // --- Confusion matrices; 2004 // --------------------------------------------------------------------; 2005 auto printMatrix = [](TMatrixD const &matTraining, TMatrixD const &matTesting, std::vector<TString> classnames,; 2006 UInt_t numClasses, MsgLogger &stream) {; 2007 // assert (classLabledWidth >= valueLabelWidth + 2); 2008 // if (...) {Log() << kWARN << ""..."" << Endl; }; 2009 ; 2010 // TODO: Ensure matrices are same size.; 2011 ; 2012 TString header = TString::Format("" %-14s"", "" "");; 2013 TString headerInfo = TString::Format("" %-14s"", "" "");; 2014 ; 2015 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {; 2016 header += TString::Format("" %-14s"", classnames[iCol].Data());; 2017 headerInfo += TString::Format("" %-14s"", "" test (train)"");; 2018 }; 2019 stream << kINFO << header << Endl;; 2020 stream << kINFO << headerInfo << Endl;; 2021 ; 2022 for (UInt_t iRow = 0; iRow < numClasses; ++iRow) {; 2023 stream << kINFO << TString::Format("" %-14s"", classnames[iRow].Data());; 2024 ; 2025 for (UInt_t iCol = 0; iCol < numClasses; ++iCol) {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:83940,Log,Log,83940,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,5,"['Log', 'assert']","['Log', 'assert']"
Testability," elements for highlight. ;  ; void RenderTransp (TGLRnrCtx &rnrCtx) override;  Render transparent elements. ;  ; Bool_t ResolveSelectRecord (TGLSelectRecord &rec, Int_t curIdx) override;  Process selection record rec. ;  ; UInt_t SizeOfScene () const;  Return memory cost of scene. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateLogical (TObject *logid);  Drop display-lists for the logical (assume TGLObject/direct rendering). ;  ; virtual void UpdatePhysical (UInt_t phid, Double_t *trans, Color_t cidx=-1, UChar_t transp=0);  Reposition/recolor physical shape. ;  ; virtual void UpdatePhysical (UInt_t phid, Double_t *trans, UChar_t *col);  Reposition/recolor physical shape. ;  ; virtual void UpdatePhysioLogical (TObject *logid, Double_t *trans, Color_t cidx, UChar_t transp);  Reposition/recolor physical for given logical (assume TGLObject and a single physical). ;  ; virtual void UpdatePhysioLogical (TObject *logid, Double_t *trans, UChar_t *col);  Reposition/recolor physical for given logical (assume TGLObject and a single physical). ;  ; void UpdateSceneInfo (TGLRnrCtx &rnrCtx) override;  Fill scene-info with information needed for rendering, take into account the render-context (viewer state, camera, clipping). ;  ;  Public Member Functions inherited from TGLSceneBase;  TGLSceneBase ();  ;  ~TGLSceneBase () override;  Destructor. ;  ; void AddViewer (TGLViewerBase *viewer);  Add viewer to the list. ;  ; const TGLBoundingBox & BoundingBox () const;  ; TGLClip * Clip () const;  ; Bool_t GetAutoDestruct () const;  ; UInt_t GetMinorStamp () const;  ; virtual const char * GetName () const;  ; Bool_t GetSelectable () const;  ; UInt_t GetTimeStamp () const;  ; virtual const char * GetTitle () const;  ; void IncMinorStamp ();  ; void IncTimeStamp ();  ; void InvalidateBoundingBox ();  ; const char * LockIdStr () const override;  Name printed on locking info messages. ;  ; Short_t LOD () const;  ; virtual void PostRender (TGLRnrCtx &r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLScenePad.html:15274,log,logid,15274,doc/master/classTGLScenePad.html,https://root.cern,https://root.cern/doc/master/classTGLScenePad.html,2,['log'],"['logical', 'logid']"
Testability," elements. ;  ; virtual void Print (Option_t *option, TPRegexp &regexp, Int_t recurse=1) const;  Print the collection header and its elements that match the regexp. ;  ; void Print (Option_t *option="""") const override;  Default print for collections, calls Print(option, 1). ;  ; void Rehash (Int_t newCapacity, Bool_t checkObjValidity=kTRUE);  Rehash the hashtable. ;  ; TObject * Remove (TObject *obj) override;  Remove object from the hashtable. ;  ; TObject * RemoveSlow (TObject *obj);  Remove object from the hashtable without using the hash value. ;  ; void SetRehashLevel (Int_t rehash);  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; virtual Int_t GetEntries () const;  ; const char * GetName () const override;  Return name of this collection. ;  ; virtual Int_t GrowBy (Int_t delta) const;  Increase the collection's capacity by delta slots. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsArgNull (const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHashTable.html:3862,Assert,AssertClass,3862,doc/master/classTHashTable.html,https://root.cern,https://root.cern/doc/master/classTHashTable.html,2,['Assert'],['AssertClass']
Testability," empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current; user.; Not supported. void ShowWorkers(); Show available workers. TProofDesc * GetProofDesc(Int_t id); Get TProofDesc instance corresponding to 'id'. TProofDesc * GetProofDesc(TProof* p); Get TProofDesc instance corresponding to TProof object 'p'. void DiscardSession(TProof* p); Discard TProofDesc of session 'p' from the internal list. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new remote session (master and associated workers). Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TList * GetListOfManagers(); Extract pointers to PROOF managers from TROOT::fProofs. TProofMgr * Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); Static method returning the appropriate TProofMgr object using; the plugin manager. TProofMgr_t GetXProofMgrHook(); Get the constructor hook fro TXProofMgr.; We do this without the plugin manager because it blocks the; CINT mutex breaking the parallel startup. void SetTXProofMgrHook(TProofMgr_t pmh); Set hook to TXProofMgr ctor. Int_t Ping(const char* url, Bool_t checkxrd = kFALSE); Non-blocking check for a PROOF (or Xrootd, if checkxrd) service at 'url'; Return; 0 if a XProofd (or Xrootd, if checkxrd) daemon is listening at 'url'; -1 if nothing is listening on the port (connection cannot be open); 1 if something is listening but not XProofd (or not Xrootd, if checkxrd). TProofMgr(const TProofMgr& ). TProofMgr& operator=(const TProofMgr& ). TProofMgr(); { }. Bool_t IsLite() const; { return (fServType == kProofLite); }. Bool_t IsProofd() const; { return (fServType == kProofd); }. Bool_t IsValid() const; { return kTRUE; }. void SetInvalid(); { }. void Close(); { SetInvalid(); }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofMgr.html:10985,log,loglevel,10985,root/html532/TProofMgr.html,https://root.cern,https://root.cern/root/html532/TProofMgr.html,1,['log'],['loglevel']
Testability," empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current; user.; Not supported. void ShowWorkers(); Show available workers. TProofDesc * GetProofDesc(Int_t id); Get TProofDesc instance corresponding to 'id'. TProofDesc * GetProofDesc(TProof* p); Get TProofDesc instance corresponding to TProof object 'p'. void DiscardSession(TProof* p); Discard TProofDesc of session 'p' from the internal list. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new remote session (master and associated workers). Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TList * GetListOfManagers(); Extract pointers to PROOF managers from TROOT::fProofs. TProofMgr * Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); Static method returning the appropriate TProofMgr object using; the plugin manager. TProofMgr_t GetXProofMgrHook(); Get the constructor hook fro TXProofMgr.; We do this without the plugin manager because it blocks the; CINT mutex breaking the parallel startup. void SetTXProofMgrHook(TProofMgr_t pmh); Set hook to TXProofMgr ctor. Int_t Ping(const char* url, Bool_t checkxrd = kFALSE); Non-blocking check for a PROOF (or Xrootd, if checkxrd) service at 'url'; Return; 0 if a XProofd (or Xrootd, if checkxrd) daemon is listening at 'url'; -1 if nothing is listening on the port (connection cannot be open); 1 if something is listening but not XProofd (or not Xrootd, if checkxrd). void ReplaceSubdirs(const char* fn, TString& fdst, TList& dirph); Parse file name extracting the directory subcomponents in dirs, stored; as TObjStrings. TFileCollection * UploadFiles(TList* src, const char* mss, const char* dest = 0); Upload files provided via the list 'src' (as TFileInfo or TObjString); to '",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofMgr.html:11399,log,loglevel,11399,root/html534/TProofMgr.html,https://root.cern,https://root.cern/root/html534/TProofMgr.html,3,['log'],['loglevel']
Testability," empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current; user.; Not supported. void ShowWorkers(); Show available workers. TProofDesc * GetProofDesc(Int_t id); Get TProofDesc instance corresponding to 'id'. TProofDesc * GetProofDesc(TProof* p); Get TProofDesc instance corresponding to TProof object 'p'. void DiscardSession(TProof* p); Discard TProofDesc of session 'p' from the internal list. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new remote session (master and associated workers). Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TList * GetListOfManagers(); Extract pointers to PROOF managers from TROOT::fProofs. TProofMgr * Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); Static method returning the appropriate TProofMgr object using; the plugin manager. TProofMgr_t GetXProofMgrHook(); Get the constructor hook fro TXProofMgr.; We do this without the plugin manager because it blocks the; CINT mutex breaking the parallel startup. void SetTXProofMgrHook(TProofMgr_t pmh); Set hook to TXProofMgr ctor. TProofMgr(const TProofMgr& ). TProofMgr& operator=(const TProofMgr& ). TProofMgr(); { }. Bool_t IsLite() const; { return (fServType == kProofLite); }. Bool_t IsProofd() const; { return (fServType == kProofd); }. Bool_t IsValid() const; { return kTRUE; }. void SetInvalid(); { }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TProofLog * GetSessionLogs(Int_t = 0, const char* = 0, const char* = ""-v \""| SvcMsg\""""); { return (TProofLog *)0; }. const char * GetUrl(); { return fUrl.GetUrl(); }. TObjString * ReadBuffer(const char* , Long64_t , Int_t ); { return (TObjString *)0; }. TObjString * ReadBuffer(const char* , const char* ); { return (TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofMgr.html:10825,log,loglevel,10825,root/html528/TProofMgr.html,https://root.cern,https://root.cern/root/html528/TProofMgr.html,1,['log'],['loglevel']
Testability," empty or null the message is send to all the connected users.; return 0 in case of success, -1 in case of error. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current; user.; Not supported. void ShowWorkers(); Show available workers. TProofDesc * GetProofDesc(Int_t id); Get TProofDesc instance corresponding to 'id'. TProofDesc * GetProofDesc(TProof* p); Get TProofDesc instance corresponding to TProof object 'p'. void DiscardSession(TProof* p); Discard TProofDesc of session 'p' from the internal list. TProof * CreateSession(const char* = 0, const char* = 0, Int_t = -1); Create a new remote session (master and associated workers). Bool_t MatchUrl(const char* url); Checks if 'url' refers to the same 'user@host:port' entity as the URL; in memory. TList * GetListOfManagers(); Extract pointers to PROOF managers from TROOT::fProofs. TProofMgr * Create(const char* url, Int_t loglevel = -1, const char* alias = 0, Bool_t xpd = kTRUE); Static method returning the appropriate TProofMgr object using; the plugin manager. TProofMgr_t GetXProofMgrHook(); Get the constructor hook fro TXProofMgr.; We do this without the plugin manager because it blocks the; CINT mutex breaking the parallel startup. void SetTXProofMgrHook(TProofMgr_t pmh); Set hook to TXProofMgr ctor. TProofMgr(const TProofMgr& ). TProofMgr& operator=(const TProofMgr& ). TProofMgr(); { }. Bool_t IsLite() const; { return (fServType == kProofLite); }. Bool_t IsProofd() const; { return (fServType == kProofd); }. Bool_t IsValid() const; { return kTRUE; }. void SetInvalid(); { }. void Close(); { SetInvalid(); }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TProofLog * GetSessionLogs(Int_t = 0, const char* = 0, const char* = ""-v \""| SvcMsg\"""", Bool_t = kFALSE); { return (TProofLog *)0; }. const char * GetUrl(); { return fUrl.GetUrl(); }. TObjString * ReadBuffer(const char* , Long64_t , Int_t ); { return (TObjString *)0; }. TObjString * Re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofMgr.html:10924,log,loglevel,10924,root/html530/TProofMgr.html,https://root.cern,https://root.cern/root/html530/TProofMgr.html,1,['log'],['loglevel']
Testability," end namespace HFitInterface; 105 ; 106 ; 107void FillData(BinData & dv, const TH1 * hfit, TF1 * func); 108{; 109 // Function to fill the binned Fit data structure from a TH1; 110 // The dimension of the data is the same of the histogram dimension; 111 // The function pointer is need in case of integral is used and to reject points; 112 // rejected in the function; 113 ; 114 // the TF1 pointer cannot be constant since EvalPar and InitArgs are not const methods; 115 ; 116 // get fit option; 117 const DataOptions & fitOpt = dv.Opt();; 118 ; 119 ; 120 // store instead of bin center the bin edges; 121 bool useBinEdges = fitOpt.fIntegral || fitOpt.fBinVolume;; 122 ; 123 assert(hfit != nullptr);; 124 ; 125 //std::cout << ""creating Fit Data from histogram "" << hfit->GetName() << std::endl;; 126 ; 127 int hxfirst = hfit->GetXaxis()->GetFirst();; 128 int hxlast = hfit->GetXaxis()->GetLast();; 129 ; 130 int hyfirst = hfit->GetYaxis()->GetFirst();; 131 int hylast = hfit->GetYaxis()->GetLast();; 132 ; 133 int hzfirst = hfit->GetZaxis()->GetFirst();; 134 int hzlast = hfit->GetZaxis()->GetLast();; 135 ; 136 // function by default has same range (use that one if requested otherwise use data one); 137 ; 138 ; 139 // get the range (add the function range ??); 140 // to check if inclusion/exclusion at end/point; 141 const DataRange & range = dv.Range();; 142 if (range.Size(0) != 0) {; 143 HFitInterface::ExamineRange( hfit->GetXaxis(), range(0), hxfirst, hxlast);; 144 if (range.Size(0) > 1 ) {; 145 Warning(""ROOT::Fit::FillData"",""support only one range interval for X coordinate"");; 146 }; 147 }; 148 ; 149 if (hfit->GetDimension() > 1 && range.Size(1) != 0) {; 150 HFitInterface::ExamineRange( hfit->GetYaxis(), range(1), hyfirst, hylast);; 151 if (range.Size(1) > 1 ); 152 Warning(""ROOT::Fit::FillData"",""support only one range interval for Y coordinate"");; 153 }; 154 ; 155 if (hfit->GetDimension() > 2 && range.Size(2) != 0) {; 156 HFitInterface::ExamineRange( hfit->GetZaxis(), range(2), hz",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitInterface_8cxx_source.html:4297,assert,assert,4297,doc/master/HFitInterface_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitInterface_8cxx_source.html,1,['assert'],['assert']
Testability, end of the deltas (back-propagation); 596 ; 597 iterator_type valueGradientsBegin () { return begin (m_valueGradients); } ///< returns iterator to the begin of the gradients of the node values; 598 iterator_type valueGradientsEnd () { return end (m_valueGradients); } ///< returns iterator to the end of the gradients of the node values; 599 ; 600 const_iterator_type valueGradientsBegin () const { return begin (m_valueGradients); } ///< returns const iterator to the begin of the gradients; 601 const_iterator_type valueGradientsEnd () const { return end (m_valueGradients); } ///< returns const iterator to the end of the gradients; 602 ; 603 iterator_type gradientsBegin () { assert (m_hasGradients); return m_itGradientBegin; } ///< returns iterator to the begin of the gradients; 604 const_iterator_type gradientsBegin () const { assert (m_hasGradients); return m_itGradientBegin; } ///< returns const iterator to the begin of the gradients; 605 const_iterator_type weightsBegin () const { assert (m_hasWeights); return m_itConstWeightBegin; } ///< returns const iterator to the begin of the weights for this layer; 606 ; 607 std::shared_ptr<std::function<double(double)>> activationFunction () const { return m_activationFunction; }; 608 std::shared_ptr<std::function<double(double)>> inverseActivationFunction () const { return m_inverseActivationFunction; }; 609 ; 610 /*! \brief set the drop-out info for this layer; 611 *; 612 */; 613 template <typename Iterator>; 614 void setDropOut (Iterator itDrop) { m_itDropOut = itDrop; m_hasDropOut = true; }; 615 ; 616 /*! \brief clear the drop-out-data for this layer; 617 *; 618 *; 619 */; 620 void clearDropOut () { m_hasDropOut = false; }; 621 ; 622 bool hasDropOut () const { return m_hasDropOut; } ///< has this layer drop-out turned on?; 623 const_dropout_iterator dropOut () const { assert (m_hasDropOut); return m_itDropOut; } ///< return the begin of the drop-out information; 624 ; 625 size_t size () const { return m_size; } ///< retur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:20547,assert,assert,20547,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['assert'],['assert']
Testability," end of this page.; Fitting and Drawing the Histogram; Once the histogram is filled, fit it with a pol2 using TH1::Fit(""pol2""). Here ""pol2"" is ROOT's short name for ""polynomial of 2nd degree"", i.e. [0] + [1]x + [2]x*x, aka ""parabola"".; ""Fitting"" means using a function (in this case the pol2) with one or more free parameters ([0]..[2] in this case) and looking for those values of the parameters that result in the function passing as closely as possible through the data points, where ""close"" takes the points' uncertainties into account. You should first fit and then draw, to see the fit together with the histogram.; At the end, you should get something like this:. Figure 6: Distribution of ""fPosX"" leaf values, fitted with a pol2; If, for any reason, you don't manage to get it working, you can download the working macro file here: AnalyzeTree.C (or; wget http://root-mirror.github.io/training/intro/AnalyzeTree.C); . ‹ Using a Macro to Read a TTree; up; Fit Panel ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/histogramming.html:5526,test,tests,5526,d/histogramming.html,https://root.cern,https://root.cern/d/histogramming.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability," entity, . const char * ; comment = 0 . ). virtual . Create a reference to a type documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a method documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1909 of file TDocOutput.cxx. ◆ ReferenceIsRelative(). Bool_t TDocOutput::ReferenceIsRelative ; (; const char * ; reference); const. virtual . Check whether reference is a relative reference, and can (or should) be prependen by relative paths. ; For HTML, check that it doesn't start with ""http://"" or ""https://"" ; Definition at line 1951 of file TDocOutput.cxx. ◆ ReplaceSpecialChars() [1/4]. const char * TDocOutput::ReplaceSpecialChars ; (; char ; c). virtual . Replace ampersand, less-than and greater-than character, writing to out. ; If 0 is returned, no replacement needs to be done. ; Definition at line 1962 of file TDocOutput.cxx. ◆ ReplaceSpecialChars() [2/4]. void TDocOutput::ReplaceSpecialChars ; (; std::ostream & ; out, . const char * ; string . ). Replace ampersand, less-than and greater-than characters, writing to out. ; Inpu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:25624,test,test,25624,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability," enum be at; 50// the ""ROOT-IO-wide"" level and not restricted to TBasket -- even if all the currently-foreseen; 51// usage of this mechanism somehow involves baskets currently.; 52enum class EIOFeatures {; 53 kGenerateOffsetMap = BIT(0),; 54 kSupported = kGenerateOffsetMap // Union of all features in this enum.; 55};; 56 ; 57 ; 58// These are previous experimental features that are not supported in this series.; 59// NOTE: the intent is that there is never an IO feature that goes into the ROOT:: namespace; 60// but is unsupported.; 61enum class EIOUnsupportedFeatures {; 62 kUnsupported = 0 // Union of all features in this enum.; 63};; 64 ; 65 ; 66} // namespace Experimental; 67 ; 68 ; 69class TIOFeatures {; 70friend class ::TTree;; 71friend class ::TBranch;; 72friend class ::TBasket;; 73 ; 74public:; 75 TIOFeatures() {}; 76 ; 77 void Clear(EIOFeatures bits);; 78 void Clear(Experimental::EIOUnsupportedFeatures bits);; 79 void Clear(Experimental::EIOFeatures bits);; 80 bool Set(EIOFeatures bits);; 81 bool Set(Experimental::EIOFeatures bits);; 82 bool Set(const std::string &);; 83 bool Test(EIOFeatures bits) const;; 84 bool Test(Experimental::EIOFeatures bits) const;; 85 bool Test(Experimental::EIOUnsupportedFeatures bits) const;; 86 void Print() const;; 87 ; 88 // The number of known, defined IO features (supported / unsupported / experimental).; 89 static constexpr int kIOFeatureCount = 1;; 90 ; 91private:; 92 // These methods allow access to the raw bitset underlying; 93 // this object, breaking type safety. They are necessary for; 94 // efficient interaction with TTree / TBranch / TBasket, but left; 95 // private to prevent users from interacting with the raw bits.; 96 TIOFeatures(UChar_t IOBits) : fIOBits(IOBits) {}; 97 UChar_t GetFeatures() const;; 98 void Set(UChar_t newBits) {fIOBits = newBits;}; 99 ; 100 UChar_t fIOBits{0};; 101};; 102 ; 103} // namespace ROOT; 104 ; 105#endif // ROOT_TIO_FEATURES; UChar_tunsigned char UChar_tDefinition RtypesCore.h:38; Rtypes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TIOFeatures_8hxx_source.html:2922,Test,Test,2922,doc/master/TIOFeatures_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TIOFeatures_8hxx_source.html,6,['Test'],['Test']
Testability," err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2] and its error; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x.; the error is computed using error propagation from the bin errors assumming that; all the bins are uncorrelated. Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using the Anderson-Darling 2 sample test.; The AD 2 sample test formula are derived from the paper; F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class; It is the same formula ( (6) in the paper), and also shown in this preprint; http://arxiv.org/pdf/0804.0380v1.pdf; Binned data are considered as un-binned data; with identical observation happening in the bin center. option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms. Double_t AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; Same funciton as above but returning also the test statistic value. Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using Kolmogo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:114007,Test,Test,114007,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,3,['Test'],['Test']
Testability," error = 0); Bool_tTApplication::QuitOpt() const; virtual voidTApplication::Raise(); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTApplication::RemoveIdleTimer(); voidTObject::ResetBit(UInt_t f); Bool_tTApplication::ReturnFromRun() const; virtual voidTApplication::ReturnPressed(char* text)SIGNAL ; virtual voidTApplication::Run(Bool_t retrn = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTApplication::Terminate(Int_t status = 0)SIGNAL ; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; PyROOT::TPyROOTApplicationTPyROOTApplication(const char* acn, Int_t* argc, char** argv, Bool_t bLoadLibs = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/PyROOT__TPyROOTApplication.html:10273,Test,TestBit,10273,root/html526/PyROOT__TPyROOTApplication.html,https://root.cern,https://root.cern/root/html526/PyROOT__TPyROOTApplication.html,2,['Test'],"['TestBit', 'TestBits']"
Testability, error found - save the configuration ; : 1 | 0.70053 0.692869 0.629389 0.0419042 4255.43 0; : 2 | 0.694153 0.694394 0.642643 0.0421501 4163.24 1; : 3 | 0.689625 0.697522 0.642119 0.0416746 4163.58 2; : 4 | 0.681203 0.694822 0.637781 0.0412238 4190.71 3; : 5 Minimum Test error found - save the configuration ; : 5 | 0.673678 0.681248 0.623882 0.0409529 4288.69 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.660284 0.667264 0.616834 0.0410715 4342.07 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.640131 0.636981 0.607427 0.0404816 4409.59 0; : 8 | 0.616397 0.638352 0.60791 0.0403928 4405.16 1; : 9 Minimum Test error found - save the configuration ; : 9 | 0.599679 0.608826 0.606268 0.0407993 4421.11 0; : 10 Minimum Test error found - save the configuration ; : 10 | 0.585295 0.60026 0.604906 0.0402508 4427.48 0; : 11 Minimum Test error found - save the configuration ; : 11 | 0.568589 0.592822 0.598106 0.0406425 4484.6 0; : 12 Minimum Test error found - save the configuration ; : 12 | 0.559657 0.589421 0.600393 0.0404151 4464.46 0; : 13 Minimum Test error found - save the configuration ; : 13 | 0.552318 0.583187 0.601709 0.0405559 4455.11 0; : 14 Minimum Test error found - save the configuration ; : 14 | 0.540541 0.58147 0.593964 0.0401674 4514.29 0; : 15 Minimum Test error found - save the configuration ; : 15 | 0.532596 0.581192 0.589633 0.0399271 4547.88 0; : 16 Minimum Test error found - save the configuration ; : 16 | 0.529842 0.56732 0.599541 0.040336 4470.63 0; : 17 | 0.521737 0.574812 0.603666 0.0406979 4440.75 1; : 18 Minimum Test error found - save the configuration ; : 18 | 0.517445 0.565391 0.598324 0.0405273 4481.92 0; : 19 Minimum Test error found - save the configuration ; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:16511,Test,Test,16511,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['Test']
Testability," estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:49068,log,logical,49068,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability," evaluate the function given a vector of coordinate values,; by implementing operator() (const double *).; In addition it defines the interface for copying functions via the pure virtual method Clone(); and the interface for getting the function dimension via the NDim() method.; Derived classes must implement the pure private virtual method DoEval(const double *) for the; function evaluation in addition to NDim() and Clone(). @ingroup GenFunc. This class is also known as (typedefs to this class)ROOT::Math::IMultiGenFunction, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction, ROOT::Fit::Chi2FCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction, ROOT::Math::Functor::ImplBase, ROOT::Fit::Chi2FCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction, ROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction, ROOT::Math::IParametricFunctionMultiDim::BaseFunc, ROOT::Math::MinimTransformFunction::BaseFunc, ROOT::Math::IParametricGradFunctionMultiDim::BaseFunc, ROOT::Fit::PoissonLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction, ROOT::Math::IBaseFunctionMultiDim::BaseFunc, ROOT::Math::GradFunctor::ImplBase, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>::BaseFunction, ROOT::Math::IGradientFunctionMultiDim::BaseFunc, ROOT::Fit::Fitter::BaseFunc, ROOT::Math::WrappedMultiTF1::BaseFunc, ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::BaseFunction. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~IBaseFunctionMultiDim(); virtual ROOT::Math::IBaseFunctionMultiDim*Clone() const; virtual unsigned intNDim() const; doubleoperator()(const double* x) const; ROOT::Math::IBaseFunctionMultiDim&operator=(const ROOT::Math::IBaseFunctionMultiDim&). private:. virtual doubleDo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__IBaseFunctionMultiDim.html:1771,Log,LogLikelihoodFCN,1771,root/html534/ROOT__Math__IBaseFunctionMultiDim.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__IBaseFunctionMultiDim.html,2,['Log'],['LogLikelihoodFCN']
Testability," evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test statistics for; each of them. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the inp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:37925,test,test,37925,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,4,['test'],['test']
Testability," event-vector from input, apply preselection ===============; 224 EventVectorOfClassesOfTreeType tmpEventVector;; 225 BuildEventVector( dsi, dataInput, tmpEventVector, eventCounts );; 226 ; 227 DataSet* ds = MixEvents( dsi, tmpEventVector, eventCounts,; 228 splitMode, mixMode, normMode, splitSeed );; 229 ; 230 const Bool_t showCollectedOutput = kFALSE;; 231 if (showCollectedOutput) {; 232 Int_t maxL = dsi.GetClassNameMaxLength();; 233 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Collected:"" << Endl;; 234 for (UInt_t cl = 0; cl < dsi.GetNClasses(); cl++) {; 235 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 236 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 237 << "" training entries: "" << ds->GetNClassEvents( 0, cl ) << Endl;; 238 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ""; 239 << setiosflags(ios::left) << std::setw(maxL) << dsi.GetClassInfo(cl)->GetName(); 240 << "" testing entries: "" << ds->GetNClassEvents( 1, cl ) << Endl;; 241 }; 242 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" "" << Endl;; 243 }; 244 ; 245 return ds;; 246}; 247 ; 248////////////////////////////////////////////////////////////////////////////////; 249/// checks a TTreeFormula for problems; 250 ; 251Bool_t TMVA::DataSetFactory::CheckTTreeFormula( TTreeFormula* ttf,; 252 const TString& expression,; 253 Bool_t& hasDollar ); 254{; 255 Bool_t worked = kTRUE;; 256 ; 257 if( ttf->GetNdim() <= 0 ); 258 Log() << kFATAL << ""Expression "" << expression.Data(); 259 << "" could not be resolved to a valid formula. "" << Endl;; 260 if( ttf->GetNdata() == 0 ){; 261 Log() << kWARNING << ""Expression: "" << expression.Data(); 262 << "" does not provide data for this event. ""; 263 << ""This event is not taken into account. --> please check if you use as a variable ""; 264 << ""an entry of an array which is not filled for some events ""; 265 << ""(e.g. arr[4] when arr has only 3 elements)."" << Endl;; 266 Log() << kWARNING << ""If you",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:9409,test,testing,9409,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,"['Log', 'test']","['Log', 'testing']"
Testability," example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_th1.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Hand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:160841,Test,Test,160841,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['Test'],['Test']
Testability," example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to crea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:160015,Test,Test,160015,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Test'],['Test']
Testability," examples or try it in your browser!;  . Download ROOT; or Read More ... . . . Previous. Pause. Next. Under the Spotlight. 2019-02-02 ; Full Totem Analysis based on RDataFrame and distributed on a big Spark cluster with PyRDF! ; Milosz Blaszkiewicz and Aleksandra Mnich (AGH University of Science and Technology - Poland) wanted to evaluate a set of Big Data tools for the analysis of the data from the TOTEM experiment which will enable interactive or semi-interactive work with large amounts of data. . 2018-01-17 ; ROOT Users' Workshop 2018 ; The ROOT team would like to invite you to the 11th ROOT Users' Workshop. . 2017-08-03 ; The ROOT Docker container (alpha version) ; Do you like Docker? Would you like to use ROOT? We provide an alpha version of the ROOT Docker container!; . 2016-09-05 ; Get the most out of the ROOT tutorials! ; All ROOT tutorials are now available as ROOTBooks which can be statically visualized via NBViewer or interactively explored with SWAN.; . . Other News. 2019-01-30 ; More tests, more benchmarks! . 2019-01-30 ; Better argument parsing . 2019-01-30 ; Transform GNU-makefile tests to CMake . 2018-07-11 ; RDataFrame session at CHEP 2018 . Latest Releases. Release 6.20/06 - 2020-06-10. Release 6.20/04 - 2020-04-01. Release 6.20/02 - 2020-03-15. Release 6.20/00 - 2020-02-26. . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/index.html:3194,test,tests,3194,d/index.html,https://root.cern,https://root.cern/d/index.html,5,"['Benchmark', 'benchmark', 'test']","['Benchmarks', 'benchmarks', 'tests']"
Testability," extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:32541,test,test,32541,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability," f(i)Definition RSha256.hxx:104; S0#define S0(x)Definition RSha256.hxx:88; S1#define S1(x)Definition RSha256.hxx:89; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; e#define e(i)Definition RSha256.hxx:103; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; resultOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t resultDefinition TGWin32VirtualXProxy.cxx:174; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; xminfloat xminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefinition THbookFile.cxx:95; TMath.h; double; ROOT::Math::lognormal_pdfdouble lognormal_pdf(double x, double m, double s, double x0=0)Probability density function of the lognormal distribution.Definition PdfFuncMathCore.h:483; ROOT::Math::landau_pdfdouble landau_pdf(double x, double xi=1, double x0=0)Probability density function of the Landau distribution:Definition PdfFuncMathCore.cxx:21; ROOT::Math::inc_gamma_cdouble inc_gamma_c(double a, double x)Calculates the normalized (regularized) upper incomplete gamma function (upper integral)Definition SpecFuncMathCore.cxx:103; ROOT::Math::inc_gammadouble inc_gamma(double a, double x)Calculates the normalized (regularized) lower incomplete gamma function (lower integral)Definition SpecFuncMathCore.cxx:99; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; RooFit::Detail::MathFuncs::logNormalIntegraldouble logNormalIntegral(double xMin, double xMax, double m0, double k)Definition MathFuncs.h:627; RooFit::Detail::MathFuncs::gaussianI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MathFuncs_8h_source.html:25643,log,lognormal,25643,doc/master/MathFuncs_8h_source.html,https://root.cern,https://root.cern/doc/master/MathFuncs_8h_source.html,1,['log'],['lognormal']
Testability," f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TBenchmark(const TBenchmark&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TBenchmark&operator=(const TBenchmark&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor*-*-*-; *-* =============================. TBenchmark(const TBenchmark& ); copy constructor. TBenchmark& operator=(const TBenchmark& ); assignment operator. ~TBenchmark(); Benchmark default destructor*-*-*-; *-* ============================. Int_t GetBench(const char* name) const; -*-*-*Returns index of Benchmark name; *-* ===============================. Float_t GetCpuTime(const char* name); -*-*-*Returns Cpu time used by Benchmark name; *-* =======================================. Float_t GetRealTime(const char* name); -*-*-*Returns Realtime used by Benchmark name; *-* =======================================. void Print(Option_t* name = """") const; -*Prints parameters of Benchmark name; *-* =========",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBenchmark.html:5789,benchmark,benchmarks,5789,root/html526/TBenchmark.html,https://root.cern,https://root.cern/root/html526/TBenchmark.html,12,['benchmark'],['benchmarks']
Testability," f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. TBenchmark(const TBenchmark&); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TBenchmark&operator=(const TBenchmark&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor. TBenchmark(const TBenchmark& ); Copy constructor. TBenchmark& operator=(const TBenchmark& ); Assignment operator. ~TBenchmark(); Benchmark destructor. Int_t GetBench(const char* name) const; Returns index of Benchmark name. Float_t GetCpuTime(const char* name); Returns Cpu time used by Benchmark name. Float_t GetRealTime(const char* name); Returns Realtime used by Benchmark name. void Print(Option_t* name = """") const; Prints parameters of Benchmark name. void Reset(); Reset all Benchmarks. void Show(const char* name); Stops Benchmark name and Prints results. void Start(const char* name); Starts Benchmark with the specified name. An independent timer (see class TStopwatch) is started.; The name of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:5810,benchmark,benchmarks,5810,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,3,['benchmark'],['benchmarks']
Testability," f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs); virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const; voidUseSumOfWeightSquare(bool on = true).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:4658,Log,LogLikelihoodFCN,4658,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,2,['Log'],['LogLikelihoodFCN']
Testability," f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTGeoBBox::SetBoxDimensions(Double_t dx, Double_t dy, Double_t dz, Double_t* origin = 0); voidTGeoBBox::SetBoxPoints(Double_t* points) const; virtual voidSetDimensions(Double_t* param); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEltuDimensions(Double_t a, Double_t b, Double_t dz); voidTGeoShape::SetId(Int_t id); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidSetPoints(Float_t* points) const; voidTGeoShape::SetRuntime(Bool_t flag = kTRUE); virtual voidTGeoTube::SetSegsAndPols(TBuffer3D& buff) const; voidTGeoShape::SetShapeBit(UInt_t f); voidTGeoShape::SetShapeBit(UInt_t f, Bool_t set); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidTGeoShape::SetTransform(TGeoMatrix* matrix); voidTGeoTube::SetTubeDimensions(Double_t rmin, Double_t rmax, Double_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); Int_tTGeoShape::ShapeDistancetoPrimitive(Int_t numpoints, Int_t px, Int_t py) const; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidTGeoTube::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTGeoShape::TestShapeBit(UInt_t f) const; Int_tTGeoShape::TestShapeBits(UInt_t f) const; static Double_tTGeoShape::Tolerance(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoEltu.html:9969,Test,TestBit,9969,root/html528/TGeoEltu.html,https://root.cern,https://root.cern/root/html528/TGeoEltu.html,12,['Test'],"['TestBit', 'TestBits', 'TestShapeBit', 'TestShapeBits']"
Testability," f2->SetLineWidth(1); f2->SetLineColor(3);; f3->SetLineWidth(1); f3->SetLineColor(4);; f1->Draw();; f2->Draw(""same"");; f3->Draw(""same"");; f1->GetYaxis()->SetMoreLogLabels();; TPaveText *pave1 = new TPaveText(-6,2,6,6);; pave1->SetFillColor(42);; pave1->SetTextAlign(12);; pave1->SetTextFont(42);; pave1->AddText(""Log scale along Y axis."");; pave1->AddText(""More Log labels requested."");; pave1->Draw();; ; pad2->cd();; double x[10] = { 200, 300, 400, 500, 600, 650, 700, 710, 900,1000 };; double y[10] = { 200, 1000, 900, 400, 500, 250, 800, 150, 201, 220 };; TGraph *g_2 = new TGraph(10,x,y);; g_2->Draw(""AL*"");; g_2->SetMarkerColor(2);; g_2->GetYaxis()->SetMoreLogLabels();; g_2->GetYaxis()->SetNoExponent();; pad2->SetLogy();; g_2->GetXaxis()->SetMoreLogLabels();; pad2->SetLogx();; pad2->SetGridx();; TPaveText *pave2 = new TPaveText(150,80,500,180);; pave2->SetFillColor(42);; pave2->SetTextFont(42);; pave2->SetTextAlign(12);; pave2->AddText(""Log scale along X and Y axis."");; pave2->AddText(""More Log labels on both."");; pave2->AddText(""No exponent along Y axis."");; pave2->Draw();; ; pad3->cd();; pad3->SetGridx();; pad3->SetGridy();; pad3->SetLogy();; pad3->SetLogx();; TF1 *f4 = new TF1(""f4a"",""x*sin(x+10)+25"",1,21);; f4->SetLineWidth(1);; f4->Draw();; f4->SetNpx(200);; f4->GetYaxis()->SetMoreLogLabels();; f4->GetXaxis()->SetMoreLogLabels();; f4 = new TF1(""f4b"",""x*cos(x+10)*sin(x+10)+25"",1,21);; f4->SetLineWidth(1); f4->Draw(""same"");; f4->SetNpx(200);; Int_t a = 20;; for (int i=a; i>=1; i--) {; f4 = new TF1(Form(""f4b_%d"",i),""x*sin(x+10)*[0]/[1]+25"",1,21);; f4->SetParameter(0,i);; f4->SetParameter(1,a);; f4->SetNpx(200);; f4->SetLineWidth(1); f4->SetLineColor(i+10);; f4->Draw(""same"");; f4 = new TF1(Form(""f4c_%d"",i),""x*cos(x+10)*sin(x+10)*[0]/[1]+25"",1,25);; f4->SetParameter(0,i);; f4->SetParameter(1,a);; f4->SetNpx(200);; f4->SetLineWidth(1); f4->SetLineColor(i+30); f4->Draw(""same"");; }; TPaveText *pave3 = new TPaveText(1.2,8,9,15);; pave3->SetFillColor(42);; pave3->AddText(""Lo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/logscales_8C.html:2299,Log,Log,2299,doc/master/logscales_8C.html,https://root.cern,https://root.cern/doc/master/logscales_8C.html,1,['Log'],['Log']
Testability," fFinder->cd(i);; 3078 TGeoNodeOffset *node = new TGeoNodeOffset(cell, i, 0.);; 3079 node->SetFinder(fFinder);; 3080 fNodes->Add(node);; 3081 }; 3082 return cell;; 3083}; 3084 ; 3085////////////////////////////////////////////////////////////////////////////////; 3086/// Make a clone of volume VOL but which is an assembly.; 3087 ; 3088TGeoVolumeAssembly *TGeoVolumeAssembly::MakeAssemblyFromVolume(TGeoVolume *volorig); 3089{; 3090 if (volorig->IsAssembly() || volorig->IsVolumeMulti()); 3091 return nullptr;; 3092 Int_t nd = volorig->GetNdaughters();; 3093 if (!nd); 3094 return nullptr;; 3095 TGeoVolumeAssembly *vol = new TGeoVolumeAssembly(volorig->GetName());; 3096 Int_t i;; 3097 // copy other attributes; 3098 Int_t nbits = 8 * sizeof(UInt_t);; 3099 for (i = 0; i < nbits; i++); 3100 vol->SetAttBit(1 << i, volorig->TestAttBit(1 << i));; 3101 for (i = 14; i < 24; i++); 3102 vol->SetBit(1 << i, volorig->TestBit(1 << i));; 3103 ; 3104 // copy field; 3105 vol->SetField(volorig->GetField());; 3106 // Set bits; 3107 for (i = 0; i < nbits; i++); 3108 vol->SetBit(1 << i, volorig->TestBit(1 << i));; 3109 vol->SetBit(kVolumeClone);; 3110 // make copy nodes; 3111 vol->MakeCopyNodes(volorig);; 3112 // volorig->CloneNodesAndConnect(vol);; 3113 vol->GetShape()->ComputeBBox();; 3114 // copy voxels; 3115 TGeoVoxelFinder *voxels = nullptr;; 3116 if (volorig->GetVoxels()) {; 3117 voxels = new TGeoVoxelFinder(vol);; 3118 vol->SetVoxelFinder(voxels);; 3119 }; 3120 // copy option, uid; 3121 vol->SetOption(volorig->GetOption());; 3122 vol->SetNumber(volorig->GetNumber());; 3123 vol->SetNtotal(volorig->GetNtotal());; 3124 return vol;; 3125}; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; s1#define s1(x)Definition RSha256.hxx:91; Style_tshort Style_tDefinition RtypesCore.h:82; Int_tint Int_tDefinition RtypesCore.h:45; Color_tshort Color_tDefinition RtypesCore.h:85; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Width_tshort Width_tDefinition RtypesCore",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:111946,Test,TestAttBit,111946,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,3,['Test'],"['TestAttBit', 'TestBit']"
Testability," fIPyMaxIter = nsamples;; 709 ; 710 Log() << kINFO << ""Running full event scan: "" << Endl;; 711 for (Int_t ievt1=0; ievt1<nevents; ievt1++) {; 712 for (Int_t ievt2=ievt1+1; ievt2<nevents; ievt2++) {; 713 ; 714 fIPyCurrentIter = ic;; 715 if (fExitFromTraining) break;; 716 EstimatorFunction( ievt1, ievt2 );; 717 ; 718 // what's the time please?; 719 ic++;; 720 if ((nsamples<10000) || ic%10000 == 0) timer.DrawProgressBar( ic );; 721 }; 722 }; 723 }; 724 // --------------------------------------------------------------------------; 725 else if (fFitMethod == kUseMonteCarloEvents) {; 726 ; 727 Int_t nsamples = 200000;; 728 UInt_t seed = 100;; 729 DeclareOptionRef( nsamples, ""SampleSize"", ""Number of Monte-Carlo-Event samples"" );; 730 DeclareOptionRef( seed, ""Seed"", ""Seed for the random generator (0 takes random seeds)"" );; 731 ParseOptions();; 732 ; 733 Int_t nevents = Data()->GetNEvents();; 734 Int_t ic = 0;; 735 ; 736 // timing of MC; 737 Timer timer( nsamples, GetName() );; 738 fIPyMaxIter = nsamples;; 739 ; 740 // random generator; 741 TRandom3*rnd = new TRandom3( seed );; 742 ; 743 Log() << kINFO << ""Running Monte-Carlo-Event sampling over "" << nsamples << "" events"" << Endl;; 744 std::vector<Double_t> pars( 2*GetNvar() );; 745 ; 746 for (Int_t itoy=0; itoy<nsamples; itoy++) {; 747 fIPyCurrentIter = ic;; 748 if (fExitFromTraining) break;; 749 ; 750 for (UInt_t ivar=0; ivar<GetNvar(); ivar++) {; 751 ; 752 // generate minimum and delta cuts for this variable; 753 ; 754 // retrieve signal events; 755 Bool_t isSignal = kFALSE;; 756 Int_t ievt1, ievt2;; 757 Double_t evt1 = 0., evt2 = 0.;; 758 Int_t nbreak = 0;; 759 while (!isSignal) {; 760 ievt1 = Int_t(rnd->Uniform(0.,1.)*nevents);; 761 ievt2 = Int_t(rnd->Uniform(0.,1.)*nevents);; 762 ; 763 const Event *ev1 = GetEvent(ievt1);; 764 isSignal = DataInfo().IsSignal(ev1);; 765 evt1 = ev1->GetValue( ivar );; 766 ; 767 const Event *ev2 = GetEvent(ievt2);; 768 isSignal &= DataInfo().IsSignal(ev2);; 769 evt2 = ev2->GetValue( ivar )",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:28199,Log,Log,28199,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability," fInfo->SetBit(TStreamerInfo::kBuildRunning);; 247 fInfo->SetBit(TStreamerInfo::kBuildOldUsed);; 248 }; 249 ~TPreventRecursiveBuildGuard() {; 250 fInfo->ResetBit(TStreamerInfo::kBuildOldUsed);; 251 fInfo->ResetBit(TStreamerInfo::kBuildRunning);; 252 }; 253 TStreamerInfo* fInfo;; 254 };; 255 ; 256}; 257 ; 258////////////////////////////////////////////////////////////////////////////////; 259/// Build the I/O data structure for the current class version.; 260///; 261/// A list of TStreamerElement derived classes is built by scanning; 262/// one by one the list of data members of the analyzed class.; 263void TStreamerInfo::Build(Bool_t isTransient); 264{; 265 // Did another thread already do the work?; 266 if (fIsCompiled) return;; 267 ; 268 R__LOCKGUARD(gInterpreterMutex);; 269 ; 270 // Did another thread already do the work while we were waiting ..; 271 if (fIsCompiled) return;; 272 ; 273 // Has Build already been run?; 274 if (fIsBuilt) return;; 275 ; 276 // Are we recursing on ourself?; 277 if (TestBit(TStreamerInfo::kBuildRunning)) return;; 278 ; 279 // This is used to avoid unwanted recursive call to Build or BuildOld.; 280 TPreventRecursiveBuildGuard buildGuard(this);; 281 ; 282 if (fClass->GetCollectionProxy()) {; 283 TVirtualCollectionProxy *proxy = fClass->GetCollectionProxy();; 284 TString title;; 285 if (proxy->GetValueClass()) {; 286 title.Form(""<%s%s> Used to call the proper TStreamerInfo case"",proxy->GetValueClass()->GetName(),proxy->HasPointers() ? ""*"" : """");; 287 } else {; 288 title .Form(""<%s%s> Used to call the proper TStreamerInfo case"",TDataType::GetTypeName(proxy->GetType()),proxy->HasPointers() ? ""*"" : """");; 289 }; 290 TStreamerElement* element = new TStreamerSTL(""This"", title.Data(), 0, fClass->GetName(), *proxy, 0);; 291 fElements->Add(element);; 292 Compile();; 293 fCheckSum = fClass->GetCheckSum();; 294 fIsBuilt = kTRUE;; 295 return;; 296 }; 297 ; 298 // Warn on read/write of RVec (see 6.24 release notes); 299 if (strncmp(GetName(), ""ROOT::V",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:8194,Test,TestBit,8194,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Test'],['TestBit']
Testability," fMaxPoints == 0 || fDataError.empty() || &fDataError.front() == fDataErrorPtr );; 328 assert( fMaxPoints == 0 || fDataErrorHigh.empty() || &fDataErrorHigh.front() == fDataErrorHighPtr );; 329 assert( fMaxPoints == 0 || fDataErrorLow.empty() || &fDataErrorLow.front() == fDataErrorLowPtr );; 330 assert( fMaxPoints == 0 || fDataErrorLow.empty() == fDataErrorHigh.empty() );; 331 assert( fMaxPoints == 0 || fData.empty() || &fData.front() == fDataPtr );; 332 ; 333 FitData::Append( newPoints, dim );; 334 ; 335 fErrorType = err;; 336 ; 337 InitDataVector( );; 338 InitializeErrors( );; 339 }; 340 ; 341 ; 342 /**; 343 apply a Log transformation of the data values; 344 can be used for example when fitting an exponential or gaussian; 345 Transform the data in place need to copy if want to preserve original data; 346 The data sets must not contain negative values. IN case it does,; 347 an empty data set is returned; 348 */; 349 BinData & BinData::LogTransform(); 350 { // apply log transform on the bin data values; 351 ; 352 if ( fWrapped ); 353 {; 354 UnWrap();; 355 }; 356 ; 357 if ( kNoError == fErrorType ); 358 {; 359 fDataError.resize(fNPoints + FitData::VectorPadding(fNPoints));; 360 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 361 }; 362 ; 363 for ( unsigned int i=0; i < fNPoints; i++ ); 364 {; 365 double val = fData[i];; 366 ; 367 if ( val <= 0 ); 368 {; 369 MATH_ERROR_MSG(""BinData::TransformLog"",""Some points have negative values - cannot apply a log transformation"");; 370 return *this;; 371 }; 372 ; 373 fData[i] = std::log( val );; 374 ; 375 if( kNoError == fErrorType ); 376 {; 377 fDataError[i] = val;; 378 }; 379 else if ( kValueError == fErrorType ); 380 {; 381 fDataError[i]*= val;; 382 }; 383 else if ( kCoordError == fErrorType ); 384 {; 385 fDataError[i]/= val;; 386 }; 387 else if ( kAsymError == fErrorType ); 388 {; 389 fDataErrorHigh[i]/= val;; 390 fDataErrorLow[i]/= val;; 391 }; 392 else; 393 assert(false);; 394 }; 395 ; 396 if ( kNoError ==",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:10528,Log,LogTransform,10528,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,"['Log', 'log']","['LogTransform', 'log']"
Testability," fMeasures[10];; Float_t fMatrix[4][4];; Float_t *fClosestDistance; //[fNvertex]; Int_tint Int_tDefinition RtypesCore.h:45; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; Float_tfloat Float_tDefinition RtypesCore.h:57; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622. the difference in splitting or not splitting a branch; how to read selected branches of the tree, and print the first entry with less than 587 tracks.; how to browse and analyze the Tree via the TBrowser and TTreeViewer. This example can be run in many different ways:; way1 using the Cling interpreter: .x tree4.C. way2 using the Cling interpreter: .L tree4.C; tree4(). way3 using ACLIC: .L ../test/libEvent.so; .x tree4.C++; One can also run the write and read parts in two separate sessions. For example following one of the sessions above, one can start the session: .L tree4.C; tree4r();; ; R__LOAD_LIBRARY($ROOTSYS/test/libEvent.so); ; #include ""TFile.h""; #include ""TTree.h""; #include ""TBrowser.h""; #include ""TH2.h""; #include ""TRandom.h""; #include ""TClassTable.h""; #include ""TSystem.h""; #include ""TROOT.h""; #include ""../test/Event.h""; ; void tree4w(); {; ; //create a Tree file tree4.root; TFile f(""tree4.root"",""RECREATE"");; ; // Create a ROOT Tree; TTree t4(""t4"",""A Tree with Events"");; ; // Create a pointer to an Event object; Event *event = new Event();; ; // Create two branches, split one.; t4.Branch(""event_split"", &event,16000,99);; t4.Branch(""event_not_split"", &event,16000,0);; ; // a local variable for the event type; char etype[20];; ; // Fill the tree; for (Int_t ev = 0; ev <100; ev++) {; Float_t sigmat, sigmas;; gRandom->Rannor(sigmat,sigmas);; Int_t ntrack = Int_t(600 + 600 *sigmat/120.);; Float_t random = gRandom->Rndm(1);; sprintf(etype,""type%d"",ev%5);; event->SetType(etype);; event->SetHeader(ev, 200, 960312, random);; event->SetNseg(Int_t(10*ntrack+20*sigmas));; event->SetNve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tree4_8C.html:1635,test,test,1635,doc/master/tree4_8C.html,https://root.cern,https://root.cern/doc/master/tree4_8C.html,1,['test'],['test']
Testability," fRotationMatrix[2] +; 2594 fRotationMatrix[6] * fRotationMatrix[1] * fRotationMatrix[5] -; 2595 fRotationMatrix[2] * fRotationMatrix[4] * fRotationMatrix[6] -; 2596 fRotationMatrix[5] * fRotationMatrix[7] * fRotationMatrix[0] -; 2597 fRotationMatrix[8] * fRotationMatrix[1] * fRotationMatrix[3];; 2598 return det;; 2599}; 2600 ; 2601////////////////////////////////////////////////////////////////////////////////; 2602/// multiply to the right with an other transformation; 2603/// if right is identity matrix, just return; 2604 ; 2605void TGeoHMatrix::Multiply(const TGeoMatrix *right); 2606{; 2607 if (right->IsIdentity()); 2608 return;; 2609 const Double_t *r_tra = right->GetTranslation();; 2610 const Double_t *r_rot = right->GetRotationMatrix();; 2611 const Double_t *r_scl = right->GetScale();; 2612 if (IsIdentity()) {; 2613 if (right->IsRotation()) {; 2614 SetBit(kGeoRotation);; 2615 memcpy(fRotationMatrix, r_rot, kN9);; 2616 if (right->IsReflection()); 2617 SetBit(kGeoReflection, !TestBit(kGeoReflection));; 2618 }; 2619 if (right->IsScale()) {; 2620 SetBit(kGeoScale);; 2621 memcpy(fScale, r_scl, kN3);; 2622 }; 2623 if (right->IsTranslation()) {; 2624 SetBit(kGeoTranslation);; 2625 memcpy(fTranslation, r_tra, kN3);; 2626 }; 2627 return;; 2628 }; 2629 Int_t i, j;; 2630 Double_t new_rot[9];; 2631 ; 2632 if (right->IsRotation()) {; 2633 SetBit(kGeoRotation);; 2634 if (right->IsReflection()); 2635 SetBit(kGeoReflection, !TestBit(kGeoReflection));; 2636 }; 2637 if (right->IsScale()); 2638 SetBit(kGeoScale);; 2639 if (right->IsTranslation()); 2640 SetBit(kGeoTranslation);; 2641 ; 2642 // new translation; 2643 if (IsTranslation()) {; 2644 for (i = 0; i < 3; i++) {; 2645 fTranslation[i] += fRotationMatrix[3 * i] * r_tra[0] + fRotationMatrix[3 * i + 1] * r_tra[1] +; 2646 fRotationMatrix[3 * i + 2] * r_tra[2];; 2647 }; 2648 }; 2649 if (IsRotation()) {; 2650 // new rotation; 2651 for (i = 0; i < 3; i++) {; 2652 for (j = 0; j < 3; j++) {; 2653 new_rot[3 * i + j] = fRotationMatri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html:90056,Test,TestBit,90056,doc/master/TGeoMatrix_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8cxx_source.html,1,['Test'],['TestBit']
Testability," fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2010-09-23 20:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionViewer.html:29854,log,log,29854,root/html528/TSessionViewer.html,https://root.cern,https://root.cern/root/html528/TSessionViewer.html,2,['log'],['log']
Testability," fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TSessionViewer.h 20882 2007-11-19 11:31:26Z rdm $ » Last generated: 2011-07-04 15:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSessionViewer.html:30007,log,log,30007,root/html530/TSessionViewer.html,https://root.cern,https://root.cern/root/html530/TSessionViewer.html,2,['log'],['log']
Testability," fXmaxTF1protected; fXminTF1protected; GetChisquare() constTF1inline; GetCurrent()TF1static; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetExpFormula(Option_t *option="""") constTF1inlinevirtual; GetFillColor() constTAttFillinlinevirtual; GetFillStyle() constTAttFillinlinevirtual; GetFormula()TF1inlinevirtual; GetFormula() constTF1inlinevirtual; GetHistogram() constTF1virtual; GetIconName() constTObjectvirtual; GetLinearPart(Int_t i) constTF1inlinevirtual; GetLineColor() constTAttLineinlinevirtual; GetLineStyle() constTAttLineinlinevirtual; GetLineWidth() constTAttLineinlinevirtual; GetMarkerColor() constTAttMarkerinlinevirtual; GetMarkerLineWidth(Style_t style)TAttMarkerstatic; GetMarkerSize() constTAttMarkerinlinevirtual; GetMarkerStyle() constTAttMarkerinlinevirtual; GetMarkerStyleBase(Style_t style)TAttMarkerstatic; GetMaximum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMaximumStored() constTF1inlinevirtual; GetMaximumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMethodCall() constTF1inline; GetMinimum(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinimumStored() constTF1inlinevirtual; GetMinimumX(Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) constTF1virtual; GetMinMaxNDim(Double_t *x, Bool_t findmax, Double_t epsilon=0, Int_t maxiter=0) constTF1protectedvirtual; GetName() const overrideTNamedinlinevirtual; GetNDF() constTF1virtual; GetNdim() constTF1inlinevirtual; GetNpar() constTF1inlinevirtual; GetNpx() constTF1inlinevirtual; GetNumber() constTF1inlinevirtual; GetNumberFitPoints() constTF1inlinevirtual; GetNumberFreeParameters() constTF1virtual; GetObjectInfo(Int_t px, Int_t py) const overrideTF1virtual; GetObjectStat()TObjectstatic; GetOption() constTObjectinlinevirtual; GetP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1-members.html:5706,log,logx,5706,doc/master/classTF1-members.html,https://root.cern,https://root.cern/doc/master/classTF1-members.html,1,['log'],['logx']
Testability," factor \( \sum w_{i} / \sum w_{i}^2 \) (the effective weight of the Poisson term), i.e., change \(\mathrm{Poisson}(N_\mathrm{observed} = \sum w_{i} | N_\mathrm{expect} )\) to \( \mathrm{Poisson}(\sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 | N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 ) \), weighted by the effective weight \( \sum w_{i}^2 / \sum w_{i} \) in the likelihood. Since here we compute the likelihood with the weight square, we need to multiply by the square of the effective weight:; \( W_\mathrm{expect} = N_\mathrm{expect} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective expected entries; \( W_\mathrm{observed} = \sum w_{i} \cdot \sum w_{i} / \sum w_{i}^2 \) : effective observed entries. The extended term for the likelihood weighted by the square of the weight will be then:; \( \left(\sum w_{i}^2 / \sum w_{i}\right)^2 \cdot W_\mathrm{expect} - (\sum w_{i}^2 / \sum w_{i})^2 \cdot W_\mathrm{observed} \cdot \log{W_\mathrm{expect}} \); aund this is using the previous expressions for \( W_\mathrm{expect} \) and \( W_\mathrm{observed} \):; \( \sum w_{i}^2 / \sum w_{i} \cdot N_\mathrm{expect} - \sum w_{i}^2 \cdot \log{W_\mathrm{expect}} \); Since the weights are constants in the likelihood we can use \(\log{N_\mathrm{expect}}\) instead of \(\log{W_\mathrm{expect}}\).; See also RooAbsPdf::extendedTerm(RooAbsData const& data, bool weightSquared, bool doOffset), which takes a dataset to extract \(N_\mathrm{observed}\) and the normalization set. ; Definition at line 725 of file RooAbsPdf.cxx. ◆ extendedTerm() [3/3]. double RooAbsPdf::extendedTerm ; (; RooAbsData const & ; data, . bool ; weightSquared, . bool ; doOffset = false . ); const. Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ; This function is a wrapper around RooAbsPdf::extendedTerm(double, RooArgSet const *, double, bool) const, where the number of observed events and observables to be",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:101390,log,log,101390,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,4,['log'],['log']
Testability," factory->BookMethod( dataloader, TMVA::Types::kLD, ""LD"", ""H:!V:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; ; // Fisher discriminant (same as LD); if (Use[""Fisher""]); factory->BookMethod( dataloader, TMVA::Types::kFisher, ""Fisher"", ""H:!V:Fisher:VarTransform=None:CreateMVAPdfs:PDFInterpolMVAPdf=Spline2:NbinsMVAPdf=50:NsmoothMVAPdf=10"" );; ; // Fisher with Gauss-transformed input variables; if (Use[""FisherG""]); factory->BookMethod( dataloader, TMVA::Types::kFisher, ""FisherG"", ""H:!V:VarTransform=Gauss"" );; ; // Composite classifier: ensemble (tree) of boosted Fisher classifiers; if (Use[""BoostedFisher""]); factory->BookMethod( dataloader, TMVA::Types::kFisher, ""BoostedFisher"",; ""H:!V:Boost_Num=20:Boost_Transform=log:Boost_Type=AdaBoost:Boost_AdaBoostBeta=0.2:!Boost_DetailedMonitoring"" );; ; // Function discrimination analysis (FDA) -- test of various fitters - the recommended one is Minuit (or GA or SA); if (Use[""FDA_MC""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MC"",; ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=MC:SampleSize=100000:Sigma=0.1"" );; ; if (Use[""FDA_GA""]) // can also use Simulated Annealing (SA) algorithm (see Cuts_SA options]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GA"",; ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=GA:PopSize=100:Cycles=2:Steps=5:Trim=True:SaveBestGen=1"" );; ; if (Use[""FDA_SA""]) // can also use Simulated Annealing (SA) algorithm (see Cuts_SA options]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_SA"",; ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=SA:MaxCalls=15000:KernelTemp=IncAdaptive:InitialTemp=1e+6:MinTemp=1e-6:Eps=1e-10:UseDefaultScale"" );; ; if (Use[""FDA_MT""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MT"",; ""H:!V:Formula=(0)+(1)*x",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:97262,test,test,97262,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability," fails for pointers to functions. Bool_t ExcludedByFignore(TString s); [static utility function]. returns true iff ""s"" ends with one of; the strings listed in the ""TabCom.FileIgnore"" resource. TString GetSysIncludePath(); [static utility function]. returns a colon-separated string of directories; that CINT will search when you call #include<...>. returns empty string on failure. Bool_t IsDirectory(const char[] fileName); [static utility function]. calls TSystem::GetPathInfo() to see if ""fileName""; is a system directory. TSeqCollection * NewListOfFilesInPath(const char[] path); [static utility function]. creates a list containing the full path name for each file; in the (colon separated) string ""path1"". memory is allocated with ""new"", so; whoever calls this function takes responsibility for deleting it. Bool_t PathIsSpecifiedInFileName(const TString& fileName); [static utility function]. true if ""fileName""; 1. is an absolute path (""/tmp/a""); 2. is a relative path (""../whatever"", ""./test""); 3. starts with user name (""~/mail""); 4. starts with an environment variable (""$ROOTSYS/bin""). void NoMsg(Int_t errorLevel); [static utility function]. calling ""NoMsg( errorLevel )"",; sets ""gErrorIgnoreLevel"" to ""errorLevel+1"" so that; all errors with ""level < errorLevel"" will be ignored. calling the function with a negative argument; (e.g., ""NoMsg( -1 )""); resets gErrorIgnoreLevel to its previous value. Int_t Complete(const TRegexp& re, const TSeqCollection* pListOfCandidates, const char[] appendage, ostream& out, TString::ECaseCompare cmp = TString::kExact); [private]. void CopyMatch(char[] dest, const char[] localName, const char[] appendage = 0, const char[] fullName = 0) const; [private]. TString DeterminePath(const TString& fileName, const char[] defaultPath) const; [private]. TString ExtendPath(const char[] originalPath, TString newBase) const; [private]. Int_t Hook(char* buf, int* pLoc, ostream& out); [private]. void InitPatterns(); [private]. TClass * MakeClassFromClassName(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:11516,test,test,11516,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['test'],['test']
Testability," false, int testStatistics = 1, int ntoys = 1000); Constructor with a ModelConfig object representing the signal + background model and; another model config representig the background only model; a Prior pdf for the nuiscane parameter of the signal and background can be specified in; the s+b model or the b model. If it is specified in the s+b model, the one of the s+b model will be used. ~HybridCalculator(); HybridCalculator destructor. void SetNullModel(const RooStats::ModelConfig& ); Set the model describing the null hypothesis. void SetAlternateModel(const RooStats::ModelConfig& ); Set the model describing the alternate hypothesis. void SetTestStatistic(int index); set the desired test statistics:; index=1 : likelihood ratio: 2 * log( L_sb / L_b ) (DEFAULT); index=2 : number of generated events; index=3 : profiled likelihood ratio; if the index is different to any of those values, the default is used. HybridResult* Calculate(TH1& data, unsigned int nToys, bool usePriors); first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(RooAbsData& data, unsigned int nToys, bool usePriors); first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(unsigned int nToys, bool usePriors) const. void RunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const; do the actual run-MC processing. void PrintMore(const char* options) const; Print out some information about the input models. HybridResult* GetHypoTest() const; perform the hypothesis test and return result of hypothesis test. bool DoCheckInputs() const. explicit HybridCalculator(const char *name = 0); Dummy Constructor with only name. void SetCommonPdf(RooAbsPdf& pdf); Set a common PDF for both the null and alternate. { fSbModel = &pdf; }. void SetNullPdf(RooAbsPdf& pdf); Set the PDF for the null (only B). { fBModel = &pdf; }. void SetAlternatePdf(RooAbsPdf& pdf); Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:12544,test,test,12544,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,1,['test'],['test']
Testability," false. ; Definition at line 139 of file TIOFeatures.cxx. ◆ Set() [3/4]. bool TIOFeatures::Set ; (; Experimental::EIOFeatures ; input_bits). Set a specific IO feature. ; Parameters. [in]input_bitsThe specific feature to enable. Sets a feature in the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT.; If the feature is supported by ROOT, this function returns true; otherwise, it returns false. ; Definition at line 125 of file TIOFeatures.cxx. ◆ Set() [4/4]. void ROOT::TIOFeatures::Set ; (; UChar_t ; newBits). inlineprivate . Definition at line 98 of file TIOFeatures.hxx. ◆ Test() [1/3]. bool TIOFeatures::Test ; (; EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 239 of file TIOFeatures.cxx. ◆ Test() [2/3]. bool TIOFeatures::Test ; (; Experimental::EIOFeatures ; input_bits); const. Test to see if a given feature is set. ; Parameters. [in]input_bitsThe specific feature to test. Returns true if the feature is enables in this object and supported by this version of ROOT. ; Definition at line 228 of file TIOFeatures.cxx. ◆ Test() [3/3]. bool ROOT::TIOFeatures::Test ; (; Experimental::EIOUnsupportedFeatures ; bits); const. Friends And Related Symbol Documentation. ◆ ::TBasket. friend class ::TBasket. friend . Definition at line 72 of file TIOFeatures.hxx. ◆ ::TBranch. friend class ::TBranch. friend . Definition at line 71 of file TIOFeatures.hxx. ◆ ::TTree. friend class ::TTree. friend . Definition at line 70 of file TIOFeatures.hxx. Member Data Documentation. ◆ fIOBits. UChar_t ROOT::TIOFeatures::fIOBits {0}. private . Definition at line 100 of file TIOFeatures.hxx. ◆ kIOFeatureCount. constexpr int ROOT::TIOFeatures::kIOFeatureCount = 1. staticconstexpr . Definition at line 89 of file TIOFeatures.hxx. Libraries for ROOT::TIOFeat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:6549,Test,Test,6549,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Test'],['Test']
Testability," fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetHistogram(TH1F* h); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidSetMaximum(Double_t maximum = -1111)MENU ; virtual voidSetMinimum(Double_t minimum = -1111)MENU ; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoint(Int_t i, Double_t x, Double_t y); virtual voidSetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidSort(Bool_t (*)(const TGraph*, Int_t, Int_t) greater = &TGraph::CompareX, Bool_t ascending = kTRUE, Int_t low = 0, Int_t high = -1111); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidZero(Int_t& k, Double_t AZ, Double_t BZ, Double_t E2, Double_t& X, Double_t& Y, Int_t maxiterations).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGraph.html:11317,Test,TestBit,11317,root/html534/TGraph.html,https://root.cern,https://root.cern/root/html534/TGraph.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," file ExpectedErrorPruneTool.cxx. ◆ GetNodeError(). Double_t TMVA::ExpectedErrorPruneTool::GetNodeError ; (; DecisionTreeNode * ; node); const. private . Calculate an UPPER limit on the error made by the classification done by this node. ; If the S/S+B of the node is f, then according to the training sample, the error rate (fraction of misclassified events by this node) is (1-f) Now f has a statistical error according to the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::ExpectedErrorPruneTool::fPruneSequence. private . ! the (optimal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:5076,Log,Log,5076,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['Log'],['Log']
Testability," file Minimizers.h. ◆ StepReducedWeightsLoss() [1/2]. template<typename Architecture_t > . template<typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::StepReducedWeightsLoss ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ). Similar to StepReducedWeights(...) but also evaluates the loss. ; May trigger synchronization with the device. . ◆ StepReducedWeightsLoss() [2/2]. template<typename Architecture_t > . template<typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::StepReducedWeightsLoss ; (; Net_t & ; net, . Matrix_t & ; input, . const Matrix_t & ; output, . const Matrix_t & ; weights . ); -> Scalar_t. inline . Definition at line 642 of file Minimizers.h. ◆ Train() [1/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads . ); -> Scalar_t. Definition at line 196 of file Minimizers.h. ◆ Train() [2/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . Scalar_t TMVA::DNN::TGradientDescent< Architecture_t >::Train ; (; const Data_t & ; TrainingDataIn, . size_t ; nTrainingSamples, . const Data_t & ; TestDataIn, . size_t ; nTestSamples, . Net_t & ; net, . size_t ; nThreads = 1 . ). Train the given net using the given training input data (events), training output data (labels), test input data (events), test output data (labels). . ◆ TrainMomentum() [1/2]. template<typename Architecture_t > . template<typename Data_t , typename Net_t > . auto TMVA::DNN::TGradientDescent< Architecture_t >::TrainMomentum ; (; const Data_t & ; trainingData, . size_t ; nTrainingSamples, . const Data_t & ; testData, . size_t ; nTestSamples, . Net_t & ; net, . Scalar_t ; momentum, . size_t ; nThreads . ); -> Scalar_t. Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html:13122,test,testData,13122,doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TGradientDescent.html,1,['test'],['testData']
Testability," file TASPluginGS.h. ◆ DeclFileName(). static const char * TASPluginGS::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 38 of file TASPluginGS.h. ◆ File2ASImage(). ASImage * TASPluginGS::File2ASImage ; (; const char * ; filename). overridevirtual . read PS/EPS/PDF file and convert it to ASImage ; Reimplemented from TASImagePlugin.; Definition at line 76 of file TASPluginGS.cxx. ◆ Hash(). ULong_t TASPluginGS::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASPluginGS::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASPluginGS.h:34; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TASImagePlugin.; Definition at line 34 of file TASPluginGS.h. ◆ IsA(). TClass * TASPluginGS::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPluginGS.html:13341,log,logarithmic,13341,doc/master/classTASPluginGS.html,https://root.cern,https://root.cern/doc/master/classTASPluginGS.html,1,['log'],['logarithmic']
Testability," file TDocOutput.cxx. ◆ ProcessDocInDir(). void TDocOutput::ProcessDocInDir ; (; std::ostream & ; out, . const char * ; indir, . const char * ; outdir, . const char * ; linkdir . ). protected . Write links to files indir/*.txt, indir/*.html (non-recursive) to out. ; If one of the files is called ""index.{html,txt}"" it will be included in out (instead of copying it to outdir and generating a link to linkdir). txt files are passed through Convert(). The files' links are sorted alphabetically. ; Definition at line 1676 of file TDocOutput.cxx. ◆ ReferenceEntity() [1/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TClass * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a class documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1788 of file TDocOutput.cxx. ◆ ReferenceEntity() [2/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataMember * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a data member documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1814 of file TDocOutput.cxx. ◆ ReferenceEntity() [3/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataType * ; entity, . const char * ; comment = 0 . ). virtual . Create a r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:23686,test,test,23686,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability," file THtml.h. ◆ GetName(). const char * THtml::TFileSysEntry::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 115 of file THtml.h. ◆ GetParent(). TFileSysDir * THtml::TFileSysEntry::GetParent ; (; ); const. inline . Definition at line 127 of file THtml.h. ◆ Hash(). ULong_t THtml::TFileSysEntry::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; THtml::TFileSysEntry::HashULong_t Hash() const overrideReturn hash value for this object.Definition THtml.h:116; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 116 of file THtml.h. ◆ IsA(). TClass * THtml::TFileSysEntry::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reim",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html:12622,log,logarithmic,12622,doc/master/classTHtml_1_1TFileSysEntry.html,https://root.cern,https://root.cern/doc/master/classTHtml_1_1TFileSysEntry.html,1,['log'],['logarithmic']
Testability, file TSynapse.h. ◆ GetDelta(). Double_t TMVA::TSynapse::GetDelta ; (; ). inline . Definition at line 87 of file TSynapse.h. ◆ GetLearningRate(). Double_t TMVA::TSynapse::GetLearningRate ; (; ). inline . Definition at line 59 of file TSynapse.h. ◆ GetWeight(). Double_t TMVA::TSynapse::GetWeight ; (; ). inline . Definition at line 53 of file TSynapse.h. ◆ GetWeightedDelta(). Double_t TMVA::TSynapse::GetWeightedDelta ; (; ). get error field of post-neuron weighted by synapse weight ; Definition at line 87 of file TSynapse.cxx. ◆ GetWeightedValue(). Double_t TMVA::TSynapse::GetWeightedValue ; (; ). get output of pre-neuron weighted by synapse weight ; Definition at line 76 of file TSynapse.cxx. ◆ InitDelta(). void TMVA::TSynapse::InitDelta ; (; ). inline . Definition at line 83 of file TSynapse.h. ◆ IsA(). virtual TClass * TMVA::TSynapse::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 101 of file TSynapse.h. ◆ Log(). TMVA::MsgLogger & TMVA::TSynapse::Log ; (; ); const. private . Definition at line 116 of file TSynapse.cxx. ◆ SetDEDw(). void TMVA::TSynapse::SetDEDw ; (; Double_t ; DEDw). inline . Definition at line 85 of file TSynapse.h. ◆ SetLearningRate(). void TMVA::TSynapse::SetLearningRate ; (; Double_t ; rate). inline . Definition at line 56 of file TSynapse.h. ◆ SetPostNeuron(). void TMVA::TSynapse::SetPostNeuron ; (; TNeuron * ; post). inline . Definition at line 68 of file TSynapse.h. ◆ SetPreNeuron(). void TMVA::TSynapse::SetPreNeuron ; (; TNeuron * ; pre). inline . Definition at line 65 of file TSynapse.h. ◆ SetWeight(). void TMVA::TSynapse::SetWeight ; (; Double_t ; weight). set synapse weight ; Definition at line 68 of file TSynapse.cxx. ◆ Streamer(). virtual void TMVA::TSynapse::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMVA::TSynapse::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TSynapse.html:13700,Log,Log,13700,doc/master/classTMVA_1_1TSynapse.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TSynapse.html,1,['Log'],['Log']
Testability," file containing the class declaration ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ DerivDir(). Double_t TMultiLayerPerceptron::DerivDir ; (; Double_t * ; dir). protected . scalar product between gradient and direction = derivative along direction ; Definition at line 2470 of file TMultiLayerPerceptron.cxx. ◆ Draw(). void TMultiLayerPerceptron::Draw ; (; Option_t * ; option = """"). overridevirtual . Draws the network structure. ; Neurons are depicted by a blue disk, and synapses by lines connecting neurons. The line width is proportional to the weight. ; Reimplemented from TObject.; Definition at line 2524 of file TMultiLayerPerceptron.cxx. ◆ DrawResult(). void TMultiLayerPerceptron::DrawResult ; (; Int_t ; index = 0, . Option_t * ; option = ""test"" . ); const. Draws the neural net output It produces an histogram with the output for the two datasets. ; Index is the number of the desired output neuron. ""option"" can contain:; test or train to select a dataset; comp to produce a X-Y comparison plot; nocanv to not create a new TCanvas for the plot . Definition at line 1533 of file TMultiLayerPerceptron.cxx. ◆ DumpWeights(). Bool_t TMultiLayerPerceptron::DumpWeights ; (; Option_t * ; filename = ""-""); const. Dumps the weights to a text file. ; Set filename to ""-"" (default) to dump to the standard output ; Definition at line 1607 of file TMultiLayerPerceptron.cxx. ◆ Evaluate(). Double_t TMultiLayerPerceptron::Evaluate ; (; Int_t ; index, . Double_t * ; params . ); const. Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ; Definition at line 1713 of file TMultiLayerPerceptron.cxx. ◆ ExpandStructure(). void TMultiLayerPerceptron::ExpandStructure ; (; ). private . Expand the structure of the first layer. ; Definition at line 1324 of file TMultiLayerPerceptron.cxx. ◆ Export(). void TMultiLayerPerceptron::Export ; (; Option_t * ; filename = ""NNfunction"", . Option_t * ; language = ""C++"" . ); const. Exports the NN as a f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:38010,test,test,38010,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability," file.; 1406 fnext.Reset();; 1407 while ((frelement = (TChainElement*) fnext())) {; 1408 void* addr = frelement->GetBaddress();; 1409 if (addr) {; 1410 TBranch* br = fTree->GetBranch(frelement->GetName());; 1411 TBranch** pp = frelement->GetBranchPtr();; 1412 if (pp) {; 1413 // FIXME: What if br is zero here?; 1414 *pp = br;; 1415 }; 1416 if (br) {; 1417 if (!frelement->GetCheckedType()) {; 1418 Int_t res = CheckBranchAddressType(br, TClass::GetClass(frelement->GetBaddressClassName()),; 1419 (EDataType) frelement->GetBaddressType(), frelement->GetBaddressIsPtr());; 1420 if ((res & kNeedEnableDecomposedObj) && !br->GetMakeClass()) {; 1421 br->SetMakeClass(true);; 1422 }; 1423 frelement->SetDecomposedObj(br->GetMakeClass());; 1424 frelement->SetCheckedType(true);; 1425 }; 1426 // FIXME: We may have to tell the branch it should; 1427 // not be an owner of the object pointed at.; 1428 br->SetAddress(addr);; 1429 if (TestBit(kAutoDelete)) {; 1430 br->SetAutoDelete(true);; 1431 }; 1432 }; 1433 }; 1434 }; 1435 if (fPlayer) {; 1436 fPlayer->UpdateFormulaLeaves();; 1437 }; 1438 // Notify user if requested.; 1439 if (fNotify) {; 1440 if(!fNotify->Notify()) return -6;; 1441 }; 1442 }; 1443 }; 1444 return treeReadEntry;; 1445 }; 1446 ; 1447 if (fExternalFriends) {; 1448 for(auto external_fe : ROOT::Detail::TRangeStaticCast<TFriendElement>(*fExternalFriends)) {; 1449 external_fe->MarkUpdated();; 1450 }; 1451 }; 1452 ; 1453 // Delete the current tree and open the new tree.; 1454 TTreeCache* tpf = nullptr;; 1455 // Delete file unless the file owns this chain!; 1456 // FIXME: The ""unless"" case here causes us to leak memory.; 1457 if (fFile) {; 1458 if (!fDirectory->GetList()->FindObject(this)) {; 1459 if (fTree) {; 1460 // (fFile != 0 && fTree == 0) can happen when; 1461 // InvalidateCurrentTree is called (for example from; 1462 // AddFriend). Having fTree === 0 is necessary in that; 1463 // case because in some cases GetTree is used as a check; 1464 // to see if a TTree is already ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:52363,Test,TestBit,52363,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,1,['Test'],['TestBit']
Testability," filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSendMsgToUsers(const char*, const char* = 0); virtual voidSetAlias(const char* alias = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInvalid(); virtual voidSetMssUrl(const char* mss); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetROOTVersion(const char*); virtual voidTNamed::SetTitle(const char* title = """")MENU ; static voidSetTXProofMgrHook(TProofMgr_t pmh); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidShowROOTVersions(); virtual voidShowWorkers(); virtual voidShutdownSession(Int_t id); virtual voidShutdownSession(TProof* p); virtual Int_tTNamed::Sizeof() const; virtual Int_tStat(const char*, FileStat_t&, const char* = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTail(const char*, const char* = 0, const char* = 0); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofMgr(const char* url, Int_t loglevel = -1, const char* alias = """"); static TFileCollection*UploadFiles(TList* src, const char* mss, const char* dest = 0); static TFileCollection*UploadFiles(const char* txtfile, const char* mss, const char* dest = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofMgr.html:7049,Test,TestBit,7049,root/html602/TProofMgr.html,https://root.cern,https://root.cern/root/html602/TProofMgr.html,6,"['Test', 'log']","['TestBit', 'TestBits', 'loglevel']"
Testability," fill color; Style_tfHistFillStylehistogram fill style; Color_tfHistLineColorhistogram line color; Style_tfHistLineStylehistogram line style; Width_tfHistLineWidthhistogram line width; Bool_tfHistMinimumZerotrue if default minimum is 0, false if minimum is automatic; Double_tfHistTopMarginmargin between histogram's top and pad's top; Bool_tfIsReading!Set to FALSE when userclass::UseCurrentStyle is called by the style manager; Width_tfLegendBorderSizelegend box border size; Color_tfLegendFillColorlegend fill color; Style_tfLegendFontlegend font style; Float_tfLegoInnerRInner radius for cylindrical legos; Float_tfLineScalePSLine scale factor when drawing lines on Postscript; TStringfLineStyle[30]String describing line style i (for postScript); Int_tfNumberContoursdefault number of contours for 2-d plots; Int_tfOptDate=1 if date option is selected; Int_tfOptFile=1 if option File is selected; Int_tfOptFit=1 if option Fit is selected; Int_tfOptLogx=1 if log scale in X; Int_tfOptLogy=1 if log scale in y; Int_tfOptLogz=1 if log scale in z; Int_tfOptStat=1 if option Stat is selected; Int_tfOptTitle=1 if option Title is selected; Int_tfPadBorderModepad border mode; Width_tfPadBorderSizepad border size; Float_tfPadBottomMarginpad bottom margin; Color_tfPadColorpad color; Bool_tfPadGridXtrue to get the grid along X; Bool_tfPadGridYtrue to get the grid along Y; Float_tfPadLeftMarginpad left margin; Float_tfPadRightMarginpad right margin; Int_tfPadTickX=1 to set special pad ticks along X; Int_tfPadTickY=1 to set special pad ticks along Y; Float_tfPadTopMarginpad top margin; TStringfPaintTextFormatPrinting format for TH2::PaintText; Float_tfPaperSizeXPostScript paper size along X; Float_tfPaperSizeYPostScript paper size along Y; Float_tfScreenFactorMultiplication factor for canvas size and position; Int_tfShowEditorShow pad editor; Int_tfShowEventStatusShow event status panel; Int_tfShowToolBarShow toolbar; Width_tfStatBorderSizeborder size of Stats PaveLabel; Color_tfStatColorst",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStyle.html:20114,log,log,20114,root/html530/TStyle.html,https://root.cern,https://root.cern/root/html530/TStyle.html,4,['log'],['log']
Testability," fill input variables in data set. void SetSignalWeightExpression(const TString& variable). void SetBackgroundWeightExpression(const TString& variable). void SetWeightExpression(const TString& variable, const TString& className = """"); Log() << kWarning << DefaultDataSetInfo().GetNClasses() /*fClasses.size()*/ << Endl;. void SetCut(const TString& cut, const TString& className = """"). void SetCut(const TCut& cut, const TString& className = """"). void AddCut(const TString& cut, const TString& className = """"). void AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put correlations of input data and a few (default + user; selected) transformations into the root file. void OptimizeAllMethods(TString fomType = ""ROCIntegral"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:18327,test,test,18327,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,4,['test'],['test']
Testability," first(void* env) {; 780 PEnv_t e = PEnv_t(env);; 781 PCont_t c = PCont_t(e->fObject);; 782 e->fIterator.first = 0;; 783 e->fIterator.second = c->size() > 0 ? c->test(e->fIterator.first) : false ; // Iterator actually hold the value.; 784 e->fSize = c->size();; 785 return &(e->fIterator.second);; 786 }; 787 static void* next(void* env) {; 788 PEnv_t e = PEnv_t(env);; 789 PCont_t c = PCont_t(e->fObject);; 790 for (; e->fIdx > 0 && e->fIterator.first != c->size(); ++(e->fIterator.first), --e->fIdx){ }; 791 e->fIterator.second = (e->fIterator.first != c->size()) ? c->test(e->fIterator.first) : false;; 792 return &(e->fIterator.second);; 793 }; 794 static void* construct(void*,size_t) {; 795 // Nothing to construct.; 796 return nullptr;; 797 }; 798 static void* collect(void *coll, void *array) {; 799 PCont_t c = PCont_t(coll);; 800 PValue_t m = PValue_t(array); // 'start' is a buffer outside the container.; 801 for (size_t i=0; i != c->size(); ++i, ++m ); 802 *m = c->test(i);; 803 return nullptr;; 804 }; 805 static void destruct(void*,size_t) {; 806 // Nothing to destruct.; 807 }; 808 ; 809 //static const bool fgLargeIterator = sizeof(typename Cont_t::iterator) > fgIteratorArenaSize;; 810 //typedef Iterators<Cont_t,fgLargeIterator> Iterators_t;; 811 ; 812 struct Iterators {; 813 union PtrSize_t { size_t fIndex; void *fAddress; };; 814 typedef std::pair<PtrSize_t,Bool_t> iterator;; 815 // In the end iterator we store the bitset pointer; 816 // and do not use the 'second' part of the pair.; 817 // In the other iterator we store the index; 818 // and the value.; 819 ; 820 static void create(void *coll, void **begin_arena, void **end_arena, TVirtualCollectionProxy*) {; 821 iterator *begin = new (*begin_arena) iterator;; 822 begin->first.fIndex = 0;; 823 begin->second = false;; 824 iterator *end = new (*end_arena) iterator;; 825 end->first.fAddress = coll;; 826 end->second = false;; 827 }; 828 static void* copy(void *dest_arena, const void *source_ptr) {; 829 const iterator ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:27840,test,test,27840,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,1,['test'],['test']
Testability," first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetKey(UInt_t, const char*, const char*); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridResult(); TGridResult(const TGridResult&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGridResult.html:8266,Test,TestBit,8266,root/html602/TGridResult.html,https://root.cern,https://root.cern/root/html602/TGridResult.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," fix their fraction definitions to the given named range. If nCPU is greater than; 1 the test statistic calculation will be paralellized over multiple processes. By default the data; is split with 'bulk' partitioning (each process calculates a contigious block of fraction 1/nCPU; of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; in each processing block many vary greatly thereby distributing the workload rather unevenly.; If interleave is set to true, the interleave partitioning strategy is used where each partition; i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; If splitCutRange is true, a different rangeName constructed as rangeName_{catName} will be used; as range definition for each index state of a RooSimultaneous. RooAbsTestStatistic(const RooAbsTestStatistic& other, const char* name = 0); Copy constructor. ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:42797,test,test,42797,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['test'],['test']
Testability," flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility ;  ; void DeclareOptions ();  Declare MethodPDEFoam options. ;  ; void Init (void);  default initialization called by all constructors ;  ; void PrintCoefficients (void);  ; void ProcessOptions ();  process user options ;  ; template<typename T > ; T Sqr (T x) const;  . Private Attributes; Bool_t fCompress;  compress foam output file ;  ; Bool_t fCutNmin;  Keep for bw compatibility: Grabbing cell with maximal RMS to split next (TFoam default) ;  ; Float_t fDiscrErrCut;  cut on discriminant error ;  ; TString fDTLogic;  use DT algorithm to split cells ;  ; EDTSeparation fDTSeparation;  enum which specifies the separation to use for the DT logic ;  ; Int_t fEvPerBin;  Maximum events (equiv.) per bin in build-up (1000) ;  ; Bool_t fFillFoamWithOrigWeights;  fill the foam with boost weights ;  ; std::vector< PDEFoam * > fFoam;  grown PDEFoams ;  ; Float_t fFrac;  Fraction used for calc of Xmin, Xmax. ;  ; EKernel fKernel;  Kernel for GetMvaValue() ;  ; PDEFoamKernelBase * fKernelEstimator;  Kernel estimator. ;  ; TString fKernelStr;  Kernel for GetMvaValue() (option string) ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; Bool_t fMultiTargetRegression;  do regression on multiple targets ;  ; Int_t fnActiveCells;  Number of active cells. ;  ; Int_t fnBin;  Number of bins in build-up (100) ;  ; Int_t fnCells;  Number of Cells (1000) ;  ; UInt_t fNmin;  minimal number of events in cell necessary to split cell"" ;  ; Int_t fnSampl;  Number of MC events per cell ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html:30354,log,logic,30354,doc/master/classTMVA_1_1MethodPDEFoam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPDEFoam.html,1,['log'],['logic']
Testability," flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; ROOT::R::TRDataFrame fDfSpectators;  ; ROOT::R::TRDataFrame fDfTest;  ; ROOT::R::TRDataFrame fDfTrain;  ; std::vector< std::string > fFactorTest;  ; std::vector< std::string > fFactorTrain;  ; TVectorD fWeightTest;  ; TVectorD fWeightTrain;  ; ROOT::R::TRInterface & r;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Friends; class Factory;  . Additional Inherited Members;  Public Types inherited from TMVA::MethodBase; enum  EWeightFileType { kROOT =0; , kTEXT; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html:26416,test,testing,26416,doc/master/classTMVA_1_1RMethodBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RMethodBase.html,2,"['log', 'test']","['logger', 'testing']"
Testability," flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsHiddenReal.html:26066,Test,TestBit,26066,root/html534/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html534/RooAbsHiddenReal.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2009-12-07 13:50; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:15786,log,logon,15786,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,3,"['Log', 'log']","['Logon', 'logon']"
Testability," fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2010-10-06 16:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TApplicationServer.html:15945,log,logon,15945,root/html528/TApplicationServer.html,https://root.cern,https://root.cern/root/html528/TApplicationServer.html,3,"['Log', 'log']","['Logon', 'logon']"
Testability," fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TApplicationServer.html:16096,log,logon,16096,root/html530/TApplicationServer.html,https://root.cern,https://root.cern/root/html530/TApplicationServer.html,3,"['Log', 'log']","['Logon', 'logon']"
Testability," fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for the execution, if any, are available. The line is either a C++; statement or an interpreter command starting with a ""."".; Return the return value of the command casted to a long. void ExecLogon(); Execute logon macro's. There are three levels of logon macros that; will be executed: the system logon etc/system.rootlogon.C, the global; user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward; compatibility also the logon macro as specified by the Rint.Logon; environment setting, by default ./rootlogon.C, will be executed.; No logon macros will be executed when the system is started with; the -n option. Int_t GetProtocol() const; { return fProtocol; }. Int_t GetPort() const; { return fUrl.GetPort(); }. const char * GetUser() const; { return fUrl.GetUser(); }. const char * GetHost() const; { return fUrl.GetHost(); }. TSocket * GetSocket() const; { return fSocket; }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsValid() const; { return fIsValid; }. » Author: G. Ganis 10/5/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id: TApplicationServer.h 23091 2008-04-09 15:04:27Z rdm $ » Last generated: 2011-11-03 20:10; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TApplicationServer.html:16096,log,logon,16096,root/html532/TApplicationServer.html,https://root.cern,https://root.cern/root/html532/TApplicationServer.html,3,"['Log', 'log']","['Logon', 'logon']"
Testability," fondef = 61, Float_t sizdef = 1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetIndiceSize(Double_t factorSize); virtual voidSetLimitIndiceSize(Int_t limitFactorSize); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTText::SetNDC(Bool_t isNDC = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTText::SetText(Double_t x, Double_t y, const char* text)MENU ; virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidTAttText::SetTextColor(Color_t tcolor = 1); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTText::SetX(Double_t x)MENU ; virtual voidTText::SetY(Double_t y)MENU ; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLatex.html:26492,Test,TestBit,26492,root/html528/TLatex.html,https://root.cern,https://root.cern/root/html528/TLatex.html,6,['Test'],"['TestBit', 'TestBits']"
Testability, fonts; [#14032] - TPaveText has problems when label is set; [#14030] - Allow zero-copy RNTuple bulk reading; [#13965] - [Cling] Assertion fails with wrong but innocent code; [#13962] - THnSparse::Scale() unsparsifies; [#13877] - [ntuple] Segfault when processing recursive classes; [#13865] - [FreeBSD] cling cmake error; [#13861] - Remove all traces of Python2 from the ROOT codebase in preparation for 6.32/00; [#13851] - Test crash with GCC 13 and C++20; [#13834] - Can’t open TBrowser locally after upgrading macos “Apple M2 14.0 (23A344)”; [#13825] - builtin libpng too old; [#13815] - Cling (rightfully) confused about forward-declared template specializations; [#13697] - Unexpected behaviour of KSTest with toys (“X” option) for identical histograms; [#13659] - rootprint/rootls missing recursive traversal; [#13623] - Add directory wildcarding in TChain; [#13531] - Huge RAM consumption of the hadd command for input files with several directories; [#13511] - TMapFile can’t work; [#13497] - Assertion failure in TMVA with vector iterators incompatible error on Windows; [#13441] - error in root-generated code for cubic spline (TSpline3); [#13421] - [MSVC] ROOT builds under msvc option /permissive- with error C4576; [#13359] - Bug in TFileMerger class for a single input file and a selective list of objects to be merged in output file; [#13288] - [cling] long double type incorrectly parsed by interpreter; [#13155] - TMVA doesn’t compile with pytorch 2.0.1; [#13130] - Valgrind reports leak when constructing TChain; [#13110] - Bug in TDecompBase::DiagProd; [#13079] - Builtin TBB library sometimes not found (or more exactly the one install in /usr/lib sometimes take priority); [#13041] - TVirtualFitter::GetFitter() unexpectedly returns NULL on macOS 12 and 13 with Xcode 14; [#13019] - LLVM assertion failure in HandleUnionActiveMemberChange; [#12993] - std::source_location not working in the interpreter; [#12959] - [ntuple] Distinguish between connecting a page sink and a page s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:32177,Assert,Assertion,32177,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Assert'],['Assertion']
Testability," for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 10616 c1 = fH->GetBinContent(i,j);; 10617 zmax = TMath::Max(zmax,c1);; 10618 if (Hoption.Error) {; 10619 e1 = fH->GetBinError(i,j);; 10620 zmax = TMath::Max(zmax,c1+e1);; 10621 }; 10622 zmin = TMath::Min(zmin,c1);; 10623 allchan += c1;; 10624 }; 10625 }; 10626 ; 10627 // Take into account maximum , minimum; 10628 ; 10629 if (maximum) zmax = fH->GetMaximumStored();; 10630 if (minimum) zmin = fH->GetMinimumStored();; 10631 if (Hoption.Logz && zmax < 0) {; 10632 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10633 return 0;; 10634 } else if (Hoption.Logz && zmin>=0 && zmax==0) { // empty histogram in log scale; 10635 zmin = 0.01;; 10636 zmax = 10.;; 10637 }; 10638 if (zmin >= zmax) {; 10639 if (Hoption.Logz) {; 10640 if (zmax > 0) zmin = 0.001*zmax;; 10641 else {; 10642 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10643 return 0;; 10644 }; 10645 }; 10646 }; 10647 ; 10648 // take into account normalization factor; 10649 Hparam.allchan = allchan;; 10650 Double_t factor = allchan;; 10651 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 10652 if (allchan) factor /= allchan;; 10653 if (factor == 0) factor = 1;; 10654 Hparam.factor = factor;; 10655 zmax = factor*zmax;; 10656 zmin = factor*zmin;; 10657 c1 = zmax;; 10658 if (TMath::Abs(zmin) > TMath::Abs(c1)) c1 = zmin;; 10659 ; 10660 // For log scales, histogram coordinates are log10(ymin) and; 10661 // log10(ymax). Final adjustment (if not option ""Same""); 10662 // or ""+"" for ymax) of ymax and ymin for logarithmic scale, if; 10663 // Maximum and Minimum are not defined.; 10664 if (Hoption.Logz) {; 10665 if (zmin <= 0) {; 10666 zmin = TMath::Min((Double_t)1, (Double_t)0.001*zmax);; 10667 fH->SetMinimum(zmin);; 10668 }; 10669 zmin = TMath::Log10(zmin);; 10670 if (!minimum) zmin += TMath::Log10(0.5);; 10671 zmax = TMath::Log10(zmax);; 10672 if (!maximum) zm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:382383,log,log,382383,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability, for CrossValidation; <HEADER> Factory : Test all methods; <HEADER> Factory : Test method: BDTG for Classification performance; : ; <HEADER> BDTG : [datasetcv] : Evaluation of BDTG on testing sample (1998 events); : Elapsed time for evaluation of 1998 events: 0.00612 sec ; <HEADER> Factory : Test method: Fisher for Classification performance; : ; <HEADER> Fisher : [datasetcv] : Evaluation of Fisher on testing sample (1998 events); : Elapsed time for evaluation of 1998 events: 0.000313 sec ; <HEADER> Factory : Evaluate all methods; <HEADER> Factory : Evaluate classifier: BDTG; : ; <HEADER> BDTG : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_BDTG : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: -0.014284 1.4061 [ -4.1075 4.0969 ]; : y: -0.0066370 1.4204 [ -4.8520 4.0761 ]; : -----------------------------------------------------------; <HEADER> Factory : Evaluate classifier: Fisher; : ; <HEADER> Fisher : [datasetcv] : Loop over test events and fill histograms with classifier response...; : ; <HEADER> TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : x: -0.014284 1.4061 [ -4.1075 4.0969 ]; : y: -0.0066370 1.4204 [ -4.8520 4.0761 ]; : -----------------------------------------------------------; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : datasetcv Fisher : 0.971; : datasetcv BDTG : 0.965; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; :,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:16590,test,test,16590,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['test']
Testability," for a gaus fit; 969///; 970/// Root > h3->Fit(0,15,22,0,0,10);; 971/// same as above, but only for bins 15 to 22 along X; 972/// and only for cells in X,Y for which the corresponding projection; 973/// along Z has more than cut bins filled.; 974///; 975/// NOTE: To access the generated histograms in the current directory, do eg:; 976/// TH2D *h3_1 = (TH2D*)gDirectory->Get(""h3_1"");; 977 ; 978void TH3::FitSlicesZ(TF1 *f1, Int_t binminx, Int_t binmaxx, Int_t binminy, Int_t binmaxy, Int_t cut, Option_t *option); 979{; 980 //Int_t nbinsz = fZaxis.GetNbins();; 981 ; 982 // get correct first and last bins for outer axes used in the loop doing the slices; 983 // when using default values (0,-1) check if an axis range is set in outer axis; 984 // do same as in DoProjection for inner axis; 985 auto computeFirstAndLastBin = [](const TAxis & outerAxis, Int_t &firstbin, Int_t &lastbin) {; 986 Int_t nbins = outerAxis.GetNbins();; 987 if ( lastbin < firstbin && outerAxis.TestBit(TAxis::kAxisRange) ) {; 988 firstbin = outerAxis.GetFirst();; 989 lastbin = outerAxis.GetLast();; 990 // For special case of TAxis::SetRange, when first == 1 and last; 991 // = N and the range bit has been set, the TAxis will return 0; 992 // for both.; 993 if (firstbin == 0 && lastbin == 0) {; 994 firstbin = 1;; 995 lastbin = nbins;; 996 }; 997 }; 998 if (firstbin < 0) firstbin = 0;; 999 if (lastbin < 0 || lastbin > nbins + 1) lastbin = nbins + 1;; 1000 if (lastbin < firstbin) {firstbin = 0; lastbin = nbins + 1;}; 1001 };; 1002 ; 1003 computeFirstAndLastBin(fXaxis, binminx, binmaxx);; 1004 computeFirstAndLastBin(fYaxis, binminy, binmaxy);; 1005 ; 1006 // limits for the axis of the fit results histograms are different; 1007 auto computeAxisLimits = [](const TAxis & outerAxis, Int_t firstbin, Int_t lastbin,; 1008 Int_t &nBins, Double_t &xMin, Double_t & xMax) {; 1009 Int_t firstOutBin = std::max(firstbin,1);; 1010 Int_t lastOutBin = std::min(lastbin,outerAxis.GetNbins() ) ;; 1011 nBins = lastOutBin-firstOut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8cxx_source.html:38545,Test,TestBit,38545,doc/master/TH3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH3_8cxx_source.html,1,['Test'],['TestBit']
Testability," for a tools which produce RooStats ConfIntervals ;  CLikelihoodIntervalLikelihoodInterval is a concrete implementation of the RooStats::ConfInterval interface ;  CLikelihoodIntervalPlotThis class provides simple and straightforward utilities to plot a LikelihoodInterval object ;  CMarkovChainStores the steps in a Markov Chain of points ;  CMaxLikelihoodEstimateTestStatMaxLikelihoodEstimateTestStat: TestStatistic that returns maximum likelihood estimate of a specified parameter ;  CMCMCCalculatorBayesian Calculator estimating an interval or a credible region using the Markov-Chain Monte Carlo method to integrate the likelihood function with the prior to obtain the posterior function ;  CMCMCIntervalPlotThis class provides simple and straightforward utilities to plot a MCMCInterval object ;  CMetropolisHastingsThis class uses the Metropolis-Hastings algorithm to construct a Markov Chain of data points using Monte Carlo ;  CMinNLLTestStatMinNLLTestStat is an implementation of the TestStatistic interface that calculates the minimum value of the negative log likelihood function and returns it as a test statistic ;  CModelConfigModelConfig is a simple class that holds configuration information specifying how a model should be used in the context of various RooStats tools ;  CNeymanConstructionNeymanConstruction is a concrete implementation of the NeymanConstruction interface that, as the name suggests, performs a NeymanConstruction ;  CNuisanceParametersSamplerHelper class for ToyMCSampler ;  CNumberCountingPdfFactory;  CNumEventsTestStatNumEventsTestStat is a simple implementation of the TestStatistic interface used for simple number counting ;  CPdfProposalPdfProposal is a concrete implementation of the ProposalFunction interface ;  CPointSetIntervalPointSetInterval is a concrete implementation of the ConfInterval interface ;  CProfileInspector;  CProfileLikelihoodCalculatorProfileLikelihoodCalculator is a concrete implementation of CombinedCalculator (the interface cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html606/annotated.html:7341,Test,TestStatistic,7341,root/html606/annotated.html,https://root.cern,https://root.cern/root/html606/annotated.html,1,['Test'],['TestStatistic']
Testability," for backward compatibility: """" equivalent to ""M"" ""LOCAL"" equivalent to ""ML"" or ""L"" ; Definition at line 68 of file TProofOutputFile.cxx. ◆ TProofOutputFile() [4/4]. TProofOutputFile::TProofOutputFile ; (; const char * ; path, . ERunType ; type, . UInt_t ; opt = kRemote, . const char * ; dsname = 0 . ). Main constructor. ; Definition at line 40 of file TProofOutputFile.cxx. ◆ ~TProofOutputFile(). TProofOutputFile::~TProofOutputFile ; (; ). override . Main destructor. ; Definition at line 232 of file TProofOutputFile.cxx. Member Function Documentation. ◆ AddFile(). void TProofOutputFile::AddFile ; (; TFileMerger * ; merger, . const char * ; path . ). private . Add file to merger, checking the result. ; Definition at line 467 of file TProofOutputFile.cxx. ◆ AdoptFile(). Int_t TProofOutputFile::AdoptFile ; (; TFile * ; f). Adopt a file already open. ; Return 0 if OK, -1 in case of failure ; Definition at line 274 of file TProofOutputFile.cxx. ◆ AssertDir(). Int_t TProofOutputFile::AssertDir ; (; const char * ; dirpath). static . Assert directory path 'dirpath', with the ownership of the last already existing subpath. ; Return 0 on success, -1 on error ; Definition at line 515 of file TProofOutputFile.cxx. ◆ Class(). static TClass * TProofOutputFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofOutputFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofOutputFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 124 of file TProofOutputFile.h. ◆ DeclFileName(). static const char * TProofOutputFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 124 of file TProofOutputFile.h. ◆ GetDir(). const char * TProofOutputFile::GetDir ; (; Bool_t ; raw = kFALSE); const. inline . Definition at line 96 of file TProofOutputFile.h. ◆ GetFileCollection(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:16571,Assert,AssertDir,16571,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['Assert'],['AssertDir']
Testability," for degrees of freedom of chi-squares; 2264/// mentioned above parameter F is the actual variable x of the; 2265/// density function p(x) and the point at which the density function; 2266/// is calculated.; 2267///; 2268/// ### About F distribution:; 2269/// F-distribution arises in testing whether two random samples; 2270/// have the same variance. It is the ratio of two chi-square; 2271/// distributions, with N and M degrees of freedom respectively,; 2272/// where each chi-square is first divided by it's number of degrees; 2273/// of freedom.; 2274///; 2275/// \author Anna Kreshuk; 2276 ; 2277Double_t TMath::FDist(Double_t F, Double_t N, Double_t M); 2278{; 2279 return ::ROOT::Math::fdistribution_pdf(F,N,M);; 2280}; 2281 ; 2282////////////////////////////////////////////////////////////////////////////////; 2283/// Calculates the cumulative distribution function of F-distribution; 2284/// (see ROOT::Math::fdistribution_cdf).; 2285/// This function occurs in the statistical test of whether two observed; 2286/// samples have the same variance. For this test a certain statistic F,; 2287/// the ratio of observed dispersion of the first sample to that of the; 2288/// second sample, is calculated. N and M stand for numbers of degrees; 2289/// of freedom in the samples 1-FDistI() is the significance level at; 2290/// which the hypothesis ""1 has smaller variance than 2"" can be rejected.; 2291/// A small numerical value of 1 - FDistI() implies a very significant; 2292/// rejection, in turn implying high confidence in the hypothesis; 2293/// ""1 has variance greater than 2"".; 2294///; 2295/// \author Anna Kreshuk; 2296 ; 2297Double_t TMath::FDistI(Double_t F, Double_t N, Double_t M); 2298{; 2299 Double_t fi = ::ROOT::Math::fdistribution_cdf(F,N,M);; 2300 return fi;; 2301}; 2302 ; 2303////////////////////////////////////////////////////////////////////////////////; 2304/// Computes the density function of Gamma distribution at point x.; 2305///; 2306/// \param[in] x evaluatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:76869,test,test,76869,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,1,['test'],['test']
Testability," for element access.; 133//; 134//////////////////////////////////////////////////////////////////////////; 135class TGenBitsetProxy : public TGenCollectionProxy {; 136 ; 137public:; 138 TGenBitsetProxy(const TGenCollectionProxy& c) : TGenCollectionProxy(c); 139 {; 140 // Standard Constructor.; 141 }; 142 ~TGenBitsetProxy() override; 143 {; 144 // Standard Destructor.; 145 }; 146 void* At(UInt_t idx) override; 147 {; 148 // Return the address of the value at index 'idx'; 149 ; 150 if ( fEnv && fEnv->fObject ) {; 151 switch( idx ) {; 152 case 0:; 153 fEnv->fStart = fFirst.invoke(fEnv);; 154 fEnv->fIdx = idx;; 155 break;; 156 default:; 157 fEnv->fIdx = idx - fEnv->fIdx;; 158 if (! fEnv->fStart ) fEnv->fStart = fFirst.invoke(fEnv);; 159 fNext.invoke(fEnv);; 160 fEnv->fIdx = idx;; 161 break;; 162 }; 163 typedef ROOT::TCollectionProxyInfo::Environ<std::pair<size_t,Bool_t> > EnvType_t;; 164 EnvType_t *e = (EnvType_t*)fEnv;; 165 return &(e->fIterator.second);; 166 }; 167 Fatal(""TGenVectorProxy"",""At> Logic error - no proxy object set."");; 168 return 0;; 169 }; 170 ; 171 void DeleteItem(Bool_t force, void* ptr) const override; 172 {; 173 // Call to delete/destruct individual item; 174 if ( force && ptr ) {; 175 fVal->DeleteItem(ptr);; 176 }; 177 }; 178};; 179 ; 180/*; 181\class TGenListProxy; 182\ingroup IO; 183Local optimization class.; 184 ; 185Collection proxies get copied. On copy we switch the type of the; 186proxy to the concrete STL type. The concrete types are optimized; 187for element access.; 188**/; 189 ; 190class TGenListProxy : public TGenVectorProxy {; 191public:; 192 // Standard Destructor; 193 TGenListProxy(const TGenCollectionProxy& c) : TGenVectorProxy(c); 194 {; 195 }; 196 // Standard Destructor; 197 ~TGenListProxy() override; 198 {; 199 }; 200 // Return the address of the value at index 'idx'; 201 void* At(UInt_t idx) override; 202 {; 203 if ( fEnv && fEnv->fObject ) {; 204 switch( idx ) {; 205 case 0:; 206 fEnv->fIdx = idx;; 207 return fEnv->fStart = fFi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:4980,Log,Logic,4980,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Log'],['Logic']
Testability," for first section; DefineSection(1, z1, x1, y1, scale1); // -''- secons section. DefineSection(nz-1, zn, xn, yn, scalen); // parameters for last section. *NOTES*; Currently navigation functionality not fully implemented (only Contains()).; Decomposition in concave polygons not implemented - drawing in solid mode; within x3d produces incorrect end-faces. Function Members (Methods); public:. TGeoXtru(); TGeoXtru(Int_t nz); TGeoXtru(Double_t* param); virtual~TGeoXtru(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; Bool_tDefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); virtual voidDefineSection(Int_t snum, Double_t z, Double_t x0 = 0., Double_t y0 = 0., Double_t scale = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; virtual Double_tDistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoXtru.html:2324,test,testNo,2324,root/html530/TGeoXtru.html,https://root.cern,https://root.cern/root/html530/TGeoXtru.html,1,['test'],['testNo']
Testability, for object code libraries (lib or lib64 or lib/ on Debian). CMAKE_INSTALL_INCLUDEDIR; PATH; Install destination for C/C++ header files (include). CMAKE_INSTALL_SYSCONFDIR; PATH; Install destination for read-only single-machine data (etc). CMAKE_INSTALL_MANDIR; PATH; Install destination for man documentation (DATAROOTDIR/man). CMAKE_INSTALL_DATAROOTDIR; PATH; Install directory for read-only architecture-independent data (share). CMAKE_INSTALL_DATADIR; PATH; Install destination read-only architecture-independent data (DATAROOTDIR/root). CMAKE_INSTALL_MACRODIR; PATH; Install destination for ROOT macros (DATAROOTDIR/macros). CMAKE_INSTALL_ICONDIR; PATH; Install destination for icons (DATAROOTDIR/icons). CMAKE_INSTALL_FONTDIR; PATH; Install destination for fonts (DATAROOTDIR/fonts). CMAKE_INSTALL_SRCDIR; PATH; Install destination for sources (DATAROOTDIR/src). CMAKE_INSTALL_DOCDIR; PATH; Install destination for documentation root (DATAROOTDIR/doc/root). CMAKE_INSTALL_TESTDIR; PATH; Install destination for tests (DOCDIR/test). CMAKE_INSTALL_TUTDIR; PATH; Install destination for tutorials (DOCDIR/tutorials). CMAKE_INSTALL_ACLOCALDIR; PATH; Install destination for locale-dependent data (DATAROOTDIR/aclocal). CMAKE_INSTALL_ELISPDIR; PATH; Install destination for lisp files (DATAROOTDIR/emacs/site-lisp). CMAKE_INSTALL_CMAKEDIR; PATH; Install destination for cmake modules (DATAROOTDIR/cmake). Additional Variables; A number of additional variables to control the way ROOT is built. Variable; Type; Explanation. LLVM_BUILD_TYPE; STRING; Build type for the bundled LLVM. It is used to set the CMAKE_BUILD_TYPE for the /interpreter/ subdirectory. External Libraries; ROOT requires a number of external libraries that the CMake system needs to locate. The list of externals depends on the build options that have been enabled. CMake will look for these third party products at a number of standard places in your system but the user can influence the search by setting some environment varia,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:16586,test,tests,16586,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,2,['test'],"['test', 'tests']"
Testability," for the associated shaded TH1F. void SetLineWidth(Width_t lwidth, const RooStats::SamplingDistribution* samplDist = 0). void SetLineStyle(Style_t style, const RooStats::SamplingDistribution* samplDist = 0). void SetMarkerStyle(Style_t style, const RooStats::SamplingDistribution* samplDist = 0). void SetMarkerColor(Color_t color, const RooStats::SamplingDistribution* samplDist = 0). void SetMarkerSize(Size_t size, const RooStats::SamplingDistribution* samplDist = 0). TH1F* GetTH1F(const RooStats::SamplingDistribution* samplDist = __null). void RebinDistribution(Int_t rebinFactor, const RooStats::SamplingDistribution* samplDist = 0). void DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); All the objects are written to rootfile. SamplingDistPlot(Int_t nbins = 100); Constructors for SamplingDistribution. void SetLegend(TLegend* l); set legend. { fLegend = l; }. void SetAxisTitle(char* varName); { fVarName = TString(varName); }. void SetApplyStyle(Bool_t s); If you do not want SamplingDistPlot to interfere with your style settings, call this; function with ""false"" before Draw(). { fApplyStyle = s; }. TH1 * GetHistogram(const RooStats::SamplingDistribution* samplDist = __null); { return GetTH1F(samplDist); }. RooPlot * GetPlot(); return plotter class used to draw the sampling distribution histograms; object is managed by SamplingDistPlot. { return fRooPlot; }. void SetLogXaxis(Bool_t lx); changes plot to log scale on x axis. { fLogXaxis = lx; }. void SetLogYaxis(Bool_t ly); changes plot to log scale on y axis. { fLogYaxis = ly; }. void SetXRange(double mi, double ma); change x range. { fXMin = mi; fXMax = ma; }. void SetYRange(double mi, double ma); change y range. { fYMin = mi; fYMax = ma; }. » Last changed: root/roostats:$Id$ » Last generated: 2015-06-02 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__SamplingDistPlot.html:14271,log,log,14271,root/html604/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html604/RooStats__SamplingDistPlot.html,2,['log'],['log']
Testability," for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsAnaConvPdf; double evaluate () const override;  Calculate the current unnormalized value of the PDF. ;  ; double getCoefNorm (Int_t coefIdx, const RooArgSet *nset, const TNamed *rangeName) const;  Returns the normalization integral value of the coefficient with number coefIdx over normalization set nset in range rangeName. ;  ; void makeCoefVarList (RooArgList &) const;  Build complete list of coefficient variables. ;  ; RooArgSet * parseIntegrationRequest (const RooArgSet &intSet, Int_t &coefCode, RooArgSet *analVars=nullptr) const;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:67493,test,testArg,67493,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,24,['test'],['testArg']
Testability," force = kFALSE); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTProofPlayer::SetCurrentQuery(TQueryResult* q); virtual voidTProofPlayer::SetDispatchTimer(Bool_t on = kTRUE); virtual voidTProofPlayer::SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTProofPlayer::SetExitStatus(TVirtualProofPlayer::EExitStatus st); virtual voidTProofPlayer::SetInitTime(); virtual voidTProofPlayer::SetMaxDrawQueries(Int_t max); virtual voidTProofPlayer::SetMerging(Bool_t = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTProofPlayer::SetOutputFilePath(const char* fp); voidTProofPlayer::SetProcessing(Bool_t on = kTRUE); virtual voidTProofPlayer::SetStopTimer(Bool_t on = kTRUE, Bool_t abort = kFALSE, Int_t timeout = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidTProofPlayer::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidTProofPlayer::StoreFeedback(TObject* slave, TList* out); virtual voidTProofPlayer::StoreOutput(TList* out); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTProofPlayer::UpdateAutoBin(const char* name, Double_t& xmin, Double_t& xmax, Double_t& ymin, Double_t& ymax, Double_t& zmin, Double_t& zmax); virtual voidTProofPlayer::UpdateProgressInfo(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerLocal.html:11980,Test,TestBit,11980,root/html534/TProofPlayerLocal.html,https://root.cern,https://root.cern/root/html534/TProofPlayerLocal.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," formula are derived from the paper; F.W Scholz, M.A. Stephens ""k-Sample Anderson-Darling Test"".; The test is implemented in root in the ROOT::Math::GoFTest class; It is the same formula ( (6) in the paper), and also shown in this preprint; http://arxiv.org/pdf/0804.0380v1.pdf; Binned data are considered as un-binned data; with identical observation happening in the bin center. option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms. Double_t AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; Same funciton as above but returning also the test statistic value. Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using Kolmogorov test.; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; and not for binned data as in the case of the histogram (see NOTE 3 below).; So, before using this method blindly, read the NOTE 3. Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure:; make pseudoexperiments based on random values from the parent; distribution and compare the KS distance of the pseudoexperiment; to the parent distribution. Bin the KS distances in a histogram,; and then take the integral of all the KS values above the value; obtained from th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:114916,test,test,114916,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,6,['test'],['test']
Testability," free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:54844,log,logical,54844,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['log'],['logical']
Testability," from RooAbsReal.; Definition at line 313 of file RooMomentMorphFunc.cxx. ◆ idxmax(). int RooMomentMorphFunc::idxmax ; (; const double & ; m); const. protected . Definition at line 456 of file RooMomentMorphFunc.cxx. ◆ idxmin(). int RooMomentMorphFunc::idxmin ; (; const double & ; m); const. protected . Definition at line 441 of file RooMomentMorphFunc.cxx. ◆ ij(). Int_t RooMomentMorphFunc::ij ; (; const Int_t & ; i, . const Int_t & ; j . ); const. inlineprotected . Definition at line 90 of file RooMomentMorphFunc.h. ◆ initialize(). void RooMomentMorphFunc::initialize ; (; ). protected . Definition at line 128 of file RooMomentMorphFunc.cxx. ◆ IsA(). TClass * RooMomentMorphFunc::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 105 of file RooMomentMorphFunc.h. ◆ isBinnedDistribution(). bool RooMomentMorphFunc::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 483 of file RooMomentMorphFunc.cxx. ◆ plotSamplingHint(). std::list< double > * RooMomentMorphFunc::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 471 of file RooMomentMorphFunc.cxx. ◆ selfNormalized(). virtual bool RooMomentMorphFunc::selfNormalized ; (; ); const. inlinevirtual . Definition at line 48 of file RooMomentMorphFunc.h. ◆ setMode(). void RooMomentMorphFunc::setMode ; (; const Setting & ; setting). inline . Definition at line 44 of file RooMomen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMomentMorphFunc.html:65390,Test,Tests,65390,doc/master/classRooMomentMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooMomentMorphFunc.html,1,['Test'],['Tests']
Testability," from their local repository with git -d <tag> and then re-pull from the repository. Otherwise, deleted tags will keep re-appearing in the remote repository and/or users will be unable to pull or push to the remote. Undo the last commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format, and colored.; For instance it is possible to pipe the differences of one file like this:; git diff path/to/file.cxx | tig. or see the changes of one revision like this:; git show b204d4c87 | tig. The most important interactive tig commands are:. 'h': opens the help screen; 'q': closes current window; 'Q': closes all windows and exi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:16140,log,log,16140,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['log'],['log']
Testability," from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; Bool_t_verboseVerbose messaging if true; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:39596,test,test,39596,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['test'],['test']
Testability," from.GetTitle();; 97 // need to set parameter values; 98 if (from.GetParameters()); 99 fParams->SetParameters(from.GetParameters());; 100 }; 101 // copy the other data members; 102 fNpx = from.fNpx;; 103 fType = (EFType)from.fType;; 104 fNpfits = from.fNpfits;; 105 fNDF = from.fNDF;; 106 fChisquare = from.fChisquare;; 107 fMaximum = from.fMaximum;; 108 fMinimum = from.fMinimum;; 109 fXmin = from.fXmin;; 110 fXmax = from.fXmax;; 111 ; 112 if (from.fParErrors); 113 fParErrors = std::vector<Double_t>(from.fParErrors, from.fParErrors + fNpar);; 114 if (from.fParMin); 115 fParMin = std::vector<Double_t>(from.fParMin, from.fParMin + fNpar);; 116 if (from.fParMax); 117 fParMax = std::vector<Double_t>(from.fParMax, from.fParMax + fNpar);; 118 if (from.fNsave > 0) {; 119 assert(from.fSave);; 120 fSave = std::vector<Double_t>(from.fSave, from.fSave + from.fNsave);; 121 }; 122 // set the bits; 123 for (int ibit = 0; ibit < 24; ++ibit); 124 if (from.TestBit(BIT(ibit))); 125 SetBit(BIT(ibit));; 126 ; 127 // copy the graph attributes; 128 from.TAttLine::Copy(*this);; 129 from.TAttFill::Copy(*this);; 130 from.TAttMarker::Copy(*this);; 131 }; 132};; 133} // unnamed namespace; 134 ; 135static void R__v5TF1Updater(Int_t nobjects, TObject **from, TObject **to); 136{; 137 auto **fromv5 = (ROOT::v5::TF1Data **)from;; 138 auto **target = (TF1v5Convert **)to;; 139 ; 140 for (int i = 0; i < nobjects; ++i) {; 141 if (fromv5[i] && target[i]); 142 target[i]->Convert(*fromv5[i]);; 143 }; 144}; 145 ; 146int R__RegisterTF1UpdaterTrigger = R__SetClonesArrayTF1Updater(R__v5TF1Updater);; 147 ; 148ClassImp(TF1);; 149 ; 150// class wrapping evaluation of TF1(x) - y0; 151class GFunc {; 152 const TF1 *fFunction;; 153 const double fY0;; 154public:; 155 GFunc(const TF1 *function , double y): fFunction(function), fY0(y) {}; 156 double operator()(double x) const; 157 {; 158 return fFunction->Eval(x) - fY0;; 159 }; 160};; 161 ; 162// class wrapping evaluation of -TF1(x); 163class GInverseFunc {; 164 const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:4073,Test,TestBit,4073,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Test'],['TestBit']
Testability," frond ends; Bool_t_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:35749,test,test,35749,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,3,['test'],['test']
Testability," frond ends; Bool_t_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of events in test statistic calculation; Int_t_nGofNumber of sub-contexts ; Int_t_numSetsTotal number of partitions in parallel calculation mode; Int_t_setNumPartition number of this instance in parallel calculation mode. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:37287,test,test,37287,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,1,['test'],['test']
Testability," function in warning situations.Definition TError.cxx:229; RooAbsCollection::setRealValuebool setRealValue(const char *name, double newVal=0.0, bool verbose=false)Set value of a RooAbsRealLValue stored in set with given name to newVal No error messages are printed...Definition RooAbsCollection.cxx:999; RooAbsReal::defaultIntegratorConfigstatic RooNumIntConfig * defaultIntegratorConfig()Returns the default numeric integration configuration for all RooAbsReals.Definition RooAbsReal.cxx:3272; RooCategory::setLabelbool setLabel(const char *label, bool printError=true) overrideSet value by specifying the name of the desired state.Definition RooCategory.cxx:186; RooLandauLandau distribution p.d.f.Definition RooLandau.h:24; RooMsgService::instancestatic RooMsgService & instance()Return reference to singleton instance.Definition RooMsgService.cxx:345; RooMsgService::addStreamInt_t addStream(RooFit::MsgLevel level, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={})Add a message logging stream for message with given RooFit::MsgLevel or higher.Definition RooMsgService.cxx:177; RooNumIntConfigHolds the configuration parameters of the various numeric integrators used by RooRealIntegral.Definition RooNumIntConfig.h:25; RooNumIntConfig::Printvoid Print(Option_t *options=nullptr) const overrideThis method must be overridden when a class wants to print itself.Definition RooNumIntConfig.h:70; RooNumIntConfig::setEpsRelvoid setEpsRel(double newEpsRel)Set relative convergence criteria (convergence if std::abs(Err)/abs(Int)<newEpsRel)Definition RooNumIntConfig.cxx:260; RooNumIntConfig::getConfigSectionconst RooArgSet & getConfigSection(const char *name) constRetrieve configuration information specific to integrator with given name.Definition RooNumIntConfig.cxx:214; RooNumIntConfig::method1DRooCategory & method1D()Definition RooNumIntConfig.h:34; RooNumIntConfig::setEpsAbsvoid setEpsA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf901__numintconfig_8C.html:6393,log,logging,6393,doc/master/rf901__numintconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf901__numintconfig_8C.html,1,['log'],['logging']
Testability," function title is ""fffffff"" and ""xxxx"" and ""yyyy"" are the; 3556/// titles for the X and Y axis respectively.; 3557 ; 3558void TF1::SetTitle(const char *title); 3559{; 3560 if (!title) return;; 3561 fTitle = title;; 3562 if (!fHistogram) return;; 3563 fHistogram->SetTitle(title);; 3564 if (gPad) gPad->Modified();; 3565}; 3566 ; 3567 ; 3568////////////////////////////////////////////////////////////////////////////////; 3569/// Stream a class object.; 3570 ; 3571void TF1::Streamer(TBuffer &b); 3572{; 3573 if (b.IsReading()) {; 3574 UInt_t R__s, R__c;; 3575 Version_t v = b.ReadVersion(&R__s, &R__c);; 3576 // process new version with new TFormula class which is contained in TF1; 3577 //printf(""reading TF1....- version %d..\n"",v);; 3578 ; 3579 if (v > 7) {; 3580 // new classes with new TFormula; 3581 // need to register the objects; 3582 b.ReadClassBuffer(TF1::Class(), this, v, R__s, R__c);; 3583 if (!TestBit(kNotGlobal)) {; 3584 R__LOCKGUARD(gROOTMutex);; 3585 gROOT->GetListOfFunctions()->Add(this);; 3586 }; 3587 return;; 3588 } else {; 3589 ROOT::v5::TF1Data fold;; 3590 //printf(""Reading TF1 as v5::TF1Data- version %d \n"",v);; 3591 fold.Streamer(b, v, R__s, R__c, TF1::Class());; 3592 // convert old TF1 to new one; 3593 ((TF1v5Convert *)this)->Convert(fold);; 3594 }; 3595 }; 3596 ; 3597 // Writing; 3598 else {; 3599 Int_t saved = 0;; 3600 // save not-formula functions as array of points; 3601 if (fType > 0 && fSave.empty() && fType != EFType::kCompositionFcn) {; 3602 saved = 1;; 3603 Save(fXmin, fXmax, 0, 0, 0, 0);; 3604 }; 3605 b.WriteClassBuffer(TF1::Class(), this);; 3606 ; 3607 // clear vector contents; 3608 if (saved) {; 3609 fSave.clear();; 3610 }; 3611 }; 3612}; 3613 ; 3614 ; 3615////////////////////////////////////////////////////////////////////////////////; 3616/// Called by functions such as SetRange, SetNpx, SetParameters; 3617/// to force the deletion of the associated histogram or Integral; 3618 ; 3619void TF1::Update(); 3620{; 3621 if (fHistogram) {; 3622 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:136654,Test,TestBit,136654,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['Test'],['TestBit']
Testability," gConfig().WriteOptionsReference() ? ""</b>"" : """";; 1723 TString brk = gConfig().WriteOptionsReference() ? ""<br>"" : """";; 1724 ; 1725 Log() << Endl;; 1726 Log() << gTools().Color(""bold"") << ""--- Short description:"" << gTools().Color(""reset"") << Endl;; 1727 Log() << Endl;; 1728 Log() << ""The optimisation of rectangular cuts performed by TMVA maximises "" << Endl;; 1729 Log() << ""the background rejection at given signal efficiency, and scans "" << Endl;; 1730 Log() << ""over the full range of the latter quantity. Three optimisation"" << Endl;; 1731 Log() << ""methods are optional: Monte Carlo sampling (MC), a Genetics"" << Endl;; 1732 Log() << ""Algorithm (GA), and Simulated Annealing (SA). GA and SA are"" << Endl;; 1733 Log() << ""expected to perform best."" << Endl;; 1734 Log() << Endl;; 1735 Log() << ""The difficulty to find the optimal cuts strongly increases with"" << Endl;; 1736 Log() << ""the dimensionality (number of input variables) of the problem."" << Endl;; 1737 Log() << ""This behavior is due to the non-uniqueness of the solution space.""<< Endl;; 1738 Log() << Endl;; 1739 Log() << gTools().Color(""bold"") << ""--- Performance optimisation:"" << gTools().Color(""reset"") << Endl;; 1740 Log() << Endl;; 1741 Log() << ""If the dimensionality exceeds, say, 4 input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). Choosing this option"" << Endl;; 1747 Log() << ""reduces the number of requirements for the variable from 2 (min/max)"" << Endl;; 1748 Log() << ""to a single one (TMVA finds out whether it is to be interpreted as"" << Endl;; 1749 Log() << ""min or max)."" << Endl;; 1750 Log() << Endl;; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:67879,Log,Log,67879,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,1,['Log'],['Log']
Testability," gRandom to exist.; assert(gRandom != nullptr && ""Reset, gRandom is null"");; ; if (nVertices < kNPointsDefault) {; Warning(""Reset"", ""resetting nVertices parameter to %u"", unsigned(kNPointsDefault));; nVertices = kNPointsDefault;; }; ; fXs.resize(nVertices);; fYs.resize(nVertices);; ; Double_t xMin = 0., xMax = 0., yMin = 0., yMax = 0.;; gPad->GetRange(xMin, yMin, xMax, yMax);; assert(xMax - xMin > 0 && yMax - yMin > 0 && ""Reset, invalid canvas' ranges"");; ; const Double_t xCentre = xMin + 0.5 * (xMax - xMin);; const Double_t yCentre = yMin + 0.5 * (yMax - yMin);; ; const Double_t r = TMath::Min(xMax - xMin, yMax - yMin) * 0.8 / 2;; const Double_t angle = TMath::TwoPi() / (nVertices - 1);; ; for (unsigned i = 0; i < nVertices - 1; ++i) {; const Double_t currR = r + gRandom->Rndm() * r * 0.01;; fXs[i] = xCentre + currR * TMath::Cos(angle * i);; fYs[i] = yCentre + currR * TMath::Sin(angle * i);; }; ; fXs[nVertices - 1] = fXs[0];; fYs[nVertices - 1] = fYs[0];; }; ; //_____________________________________________________________; void PolyTest1::Paint(const Option_t * /*notUsed*/); {; assert(gPad != nullptr && ""Paint, gPad is null"");; ; TAttFill::Modify();; gPad->PaintFillArea((Int_t)fXs.size(), &fXs[0], &fYs[0]);; ; TAttLine::Modify();; gPad->PaintPolyLine((Int_t)fXs.size(), &fXs[0], &fYs[0]);; }; ; void polytest1(); {; TCanvas * const cnv = new TCanvas;; cnv->cd();; ; PolyTest1 * polygon = new PolyTest1(1000000);; polygon->SetLineColor(kBlue);; polygon->SetFillColor(kRed);; polygon->SetLineWidth(1);; polygon->Draw();//Attach a polygon to a canvas.; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; Rtypes.h; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; TError.h; Warningvoid Warning(const char *location, const char *msgfmt,...)Use this function in warning situations.Definition TError.cxx:229; rOption_t Option_t TPoint TPoint const char G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest1_8C.html:3013,assert,assert,3013,doc/master/polytest1_8C.html,https://root.cern,https://root.cern/doc/master/polytest1_8C.html,1,['assert'],['assert']
Testability," generated by the NN ;  ; virtual const std::vector< Float_t > & GetRegressionValues ();  get the regression value generated by the NN ;  ; void InitANNBase ();  initialize ANNBase object ;  ; virtual void PrintNetwork () const;  print network representation, for debugging ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; virtual void ReadWeightsFromStream (std::istream &istr);  destroy/clear the network then read it back in from the weights file ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  read MLP from xml weight file ;  ; void SetActivation (TActivation *activation);  ; void SetNeuronInputCalculator (TNeuronInput *inputCalculator);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void WriteMonitoringHistosToFile () const;  write histograms to file ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:4797,Test,Testing,4797,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['Test'],['Testing']
Testability," generator library xml: Writing/Reading xml files; You can execute the scripts in $ROOTSYS/tutorials (or sub-directories) by setting your current directory in the script directory or from any user directory with write access. Several tutorials create new files. If you have write access to the tutorials directory, the new files will be created in the tutorials directory, otherwise they will be created in the user directory.; 1.6.4 $ROOTSYS/test; The test directory contains a set of examples example that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility. The list of source files is described in chapter “The Tutorials and Tests”.; The $ROOTSYS/test directory is a gold mine of ROOT-wisdom nuggets, and we encourage you to explore and exploit it. We recommend the new users to read the chapter “Getting Started”. The chapter “The Tutorials and Tests” has instructions on how to build all the programs and it goes over the examples Event and stress.; 1.6.5 $ROOTSYS/include; The include directory contains all header files. It is especially important because the header files contain the class definitions.; 1.6.6 $ROOTSYS/<library>; The directories we explored above are available when downloading the binaries. When downloading the source you also get a directory for each library with the corresponding header and source files, located in the inc and src subdirectories. To see what classes are in a library, you can check the <library>/inc directory for the list of class definitions. For example, the physics library libPhysics.so contains these class definitions:; > ls -m $ROOTSYS/math/physics/inc/; LinkDef.h, TFeldmanCousins.h, TGenPhaseSpace.h, TLorentzRotation.h,; TLorentzVector.h, TQuaternion.h, TRobustEstimator.h, TRolke.h,; TRotation.h, TVector2.h, TVector3.h; 1.7 How to Find More Information; website The ROOT web site has up to date documentation. The ROOT sourc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:27355,Test,Tests,27355,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Tests']
Testability, getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*_funcClonePointer to internal clone of input function; RooArgSet*_funcCloneSetSet owning all components of internal clone of input function; RooArgSet*_funcObsSetList of observables in the pdf expression; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**RooAbsTestStatistic::_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpModeRooAbsTestStatistic::_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>RooAbsTestStatistic::_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_tRooAbsTestStatistic::_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**RooAbsTestStatistic::_mpfeArray! Array of parallel execution frond ends; RooFit::MPSplitRooAbsTestStatistic::_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_tRooAbsTestStatistic::_nCPUNumber of processors to use in parallel calculation mode; Int_tRooAbsTestStatistic::_nEventsTotal number of events in test statistic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:38376,test,test,38376,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability," given an observed dat set, a model and a snapshot of poi.; Return the asimov data set + global observables set to values satisfying the constraints. RooAbsData * MakeAsimovData(const RooStats::ModelConfig& model, const RooArgSet& allParamValues, RooArgSet& globObs); static function to the an Asimov data set; given the model and the values of all parameters including the nuisance; Return the asimov data set + global observables set to values satisfying the constraints. AsymptoticCalculator(RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, bool nominalAsimov = false); HypoTestCalculatorGeneric(data, altModel, nullModel, 0); {; }. void SetOneSided(bool on); set test statistic for one sided (upper limits). { fOneSided = on; }. void SetTwoSided(); set the test statistics for two sided (in case of upper limits; for discovery does not make really sense). { fOneSided = false; fOneSidedDiscovery = false;}. void SetOneSidedDiscovery(bool on); set the test statistics for one-sided discovery. { fOneSidedDiscovery = on; }. bool IsTwoSided() const; { return (!fOneSided && !fOneSidedDiscovery); }. bool IsOneSidedDiscovery() const; { return fOneSidedDiscovery; }. void SetQTilde(bool on); set using of qtilde, by default is controlled if RoORealVar is limited or not. { fUseQTilde = on; }. const RooArgSet & GetBestFitPoi() const; return snapshot of the best fit parameter. { return fBestFitPoi; }. const RooRealVar * GetMuHat() const; return best fit parameter (firs of poi). { return dynamic_cast<RooRealVar*>(fBestFitPoi.first()); }. const RooArgSet & GetBestFitParams() const; return best fit value for all parameters. { return fBestFitPoi; }. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html:9973,test,test,9973,root/html534/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__AsymptoticCalculator.html,1,['test'],['test']
Testability," given an observed dat set, a model and a snapshot of poi.; Return the asimov data set + global observables set to values satisfying the constraints. RooAbsData * MakeAsimovData(const RooStats::ModelConfig& model, const RooArgSet& allParamValues, RooArgSet& globObs); static function to the an Asimov data set; given the model and the values of all parameters including the nuisance; Return the asimov data set + global observables set to values satisfying the constraints. AsymptoticCalculator(RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, bool nominalAsimov = false); HypoTestCalculatorGeneric(data, altModel, nullModel, 0); {; }. void SetOneSided(bool on); set test statistic for one sided (upper limits). { fOneSided = on; }. void SetTwoSided(); set the test statistics for two sided (in case of upper limits; for discovery does not make really sense). { fOneSided = false; fOneSidedDiscovery = false;}. void SetOneSidedDiscovery(bool on); set the test statistics for one-sided discovery. { fOneSidedDiscovery = on; }. bool IsTwoSided() const; { return (!fOneSided && !fOneSidedDiscovery); }. bool IsOneSidedDiscovery() const; { return fOneSidedDiscovery; }. void SetQTilde(bool on); set using of qtilde, by default is controlled if RoORealVar is limited or not. { fUseQTilde = on; }. const RooArgSet & GetBestFitPoi() const; return snapshot of the best fit parameter. { return fBestFitPoi; }. const RooRealVar * GetMuHat() const; return best fit parameter (firs of poi). { return dynamic_cast<RooRealVar*>(fBestFitPoi.first()); }. const RooArgSet & GetBestFitParams() const; return best fit value for all parameters. { return fBestFitPoi; }. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id$ » Last generated: 2015-06-30 14:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html:10150,test,test,10150,root/html602/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__AsymptoticCalculator.html,1,['test'],['test']
Testability," given an observed dat set, a model and a snapshot of poi.; Return the asimov data set + global observables set to values satisfying the constraints. RooAbsData * MakeAsimovData(const RooStats::ModelConfig& model, const RooArgSet& allParamValues, RooArgSet& globObs); static function to the an Asimov data set; given the model and the values of all parameters including the nuisance; Return the asimov data set + global observables set to values satisfying the constraints. AsymptoticCalculator(RooAbsData& data, const RooStats::ModelConfig& altModel, const RooStats::ModelConfig& nullModel, bool nominalAsimov = false); HypoTestCalculatorGeneric(data, altModel, nullModel, 0); {; }. void SetOneSided(bool on); set test statistic for one sided (upper limits). { fOneSided = on; }. void SetTwoSided(); set the test statistics for two sided (in case of upper limits; for discovery does not make really sense). { fOneSided = false; fOneSidedDiscovery = false;}. void SetOneSidedDiscovery(bool on); set the test statistics for one-sided discovery. { fOneSidedDiscovery = on; }. void SetNullModel(const RooStats::ModelConfig& nullModel); re-implement setters since they needs to re-initialize the calculator. void SetAlternateModel(const RooStats::ModelConfig& altModel). void SetData(RooAbsData& data). bool IsTwoSided() const; { return (!fOneSided && !fOneSidedDiscovery); }. bool IsOneSidedDiscovery() const; { return fOneSidedDiscovery; }. void SetQTilde(bool on); set using of qtilde, by default is controlled if RoORealVar is limited or not. { fUseQTilde = on; }. const RooArgSet & GetBestFitPoi() const; return snapshot of the best fit parameter. { return fBestFitPoi; }. const RooRealVar * GetMuHat() const; return best fit parameter (firs of poi). { return dynamic_cast<RooRealVar*>(fBestFitPoi.first()); }. const RooArgSet & GetBestFitParams() const; return best fit value for all parameters. { return fBestFitPoi; }. » Author: Sven Kreiss, Kyle Cranmer Nov 2010 » Copyright (C) 1995-2008, Rene B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooStats__AsymptoticCalculator.html:10241,test,test,10241,root/html604/RooStats__AsymptoticCalculator.html,https://root.cern,https://root.cern/root/html604/RooStats__AsymptoticCalculator.html,1,['test'],['test']
Testability," given dataset. ;  ; void optimizeConstantTerms (bool, bool=true);  Driver function to activate global constant term optimization. ;  ; void printCompactTreeHook (std::ostream &os, const char *indent="""") override;  Catch print hook function and forward to function clone. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Catch server redirect calls and forward to internal clone of function. ;  ; virtual RooArgSet requiredExtraObservables () const;  ; void runRecalculateCache (std::size_t firstEvent, std::size_t lastEvent, std::size_t stepSize) const override;  ; bool setDataSlave (RooAbsData &data, bool cloneData=true, bool ownNewDataAnyway=false) override;  Change dataset that is used to given one. ;  ;  Protected Member Functions inherited from RooAbsTestStatistic; double evaluate () const override;  Calculate and return value of test statistic. ;  ; virtual double getCarry () const;  ; bool initialize ();  One-time initialization of the test statistic. ;  ; void initMPMode (RooAbsReal *real, RooAbsData *data, const RooArgSet *projDeps, std::string const &rangeName, std::string const &addCoefRangeName);  Initialize multi-processor calculation mode. ;  ; void initSimMode (RooSimultaneous *pdf, RooAbsData *data, const RooArgSet *projDeps, std::string const &rangeName, std::string const &addCoefRangeName);  Initialize simultaneous p.d.f processing mode. ;  ; Int_t numSets () const;  ; void printCompactTreeHook (std::ostream &os, const char *indent="""") override;  Add extra information on component test statistics when printing itself as part of a tree structure. ;  ; virtual bool processEmptyDataSets () const;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward server redirect calls to component test statistics. ;  ; void setEventCount (Int_t nEvents);  ; void setMPSet (Int_t setNum, Int_t numS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooChi2Var.html:51845,test,test,51845,doc/master/classRooChi2Var.html,https://root.cern,https://root.cern/doc/master/classRooChi2Var.html,1,['test'],['test']
Testability," global matrix for node at LEVEL. TGeoNode * GetNode(Int_t level = -1) const; Return node in branch at LEVEL. If not specified, return last leaf. TGeoVolume * GetVolume(Int_t level = -1) const; Return volume associated with node at LEVEL in the branch. TGeoShape * GetShape(Int_t level = -1) const; Return shape associated with volume. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void Print(Option_t* option = """") const; Print info about this node. void Refresh(); Refresh this physical node. Called for all registered physical nodes; after an Align() call. void SetBranchAsState(); Set node branch according to current state. void SetMatrixOrig(const TGeoMatrix* local); Allows PN entries (or users) to preset the local original matrix for the; last node pointed by the path. Bool_t SetPath(const char* path); Specify the path for this node. void SetAligned(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeAligned,flag);}. Int_t GetLevel() const; {return fLevel;}. TGeoHMatrix * GetOriginalMatrix() const; {return fMatrixOrig;}. Bool_t IsAligned() const; {return TObject::TestBit(kGeoPNodeAligned);}. Bool_t IsVolAttributes() const; {return TObject::TestBit(kGeoPNodeVolAtt);}. Bool_t IsVisible() const; {return TObject::TestBit(kGeoPNodeVisible);}. Bool_t IsVisibleFull() const; {return TObject::TestBit(kGeoPNodeFull);}. void SetIsVolAtt(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVolAtt,flag);}. void SetVisibility(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVisible,flag);}. void SetVisibleFull(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeFull,flag);}. » Author: Andrei Gheata 17/02/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoPhysicalNode.h 25123 2008-08-12 09:59:46Z brun $ » Last generated: 2010-11-12 16:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPhysicalNode.html:11093,Test,TestBit,11093,root/html528/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html528/TGeoPhysicalNode.html,4,['Test'],['TestBit']
Testability," global matrix for node at LEVEL. TGeoNode * GetNode(Int_t level = -1) const; Return node in branch at LEVEL. If not specified, return last leaf. TGeoVolume * GetVolume(Int_t level = -1) const; Return volume associated with node at LEVEL in the branch. TGeoShape * GetShape(Int_t level = -1) const; Return shape associated with volume. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void Print(Option_t* option = """") const; Print info about this node. void Refresh(); Refresh this physical node. Called for all registered physical nodes; after an Align() call. void SetBranchAsState(); Set node branch according to current state. void SetMatrixOrig(const TGeoMatrix* local); Allows PN entries (or users) to preset the local original matrix for the; last node pointed by the path. Bool_t SetPath(const char* path); Specify the path for this node. void SetAligned(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeAligned,flag);}. Int_t GetLevel() const; {return fLevel;}. TGeoHMatrix * GetOriginalMatrix() const; {return fMatrixOrig;}. Bool_t IsAligned() const; {return TObject::TestBit(kGeoPNodeAligned);}. Bool_t IsVolAttributes() const; {return TObject::TestBit(kGeoPNodeVolAtt);}. Bool_t IsVisible() const; {return TObject::TestBit(kGeoPNodeVisible);}. Bool_t IsVisibleFull() const; {return TObject::TestBit(kGeoPNodeFull);}. void SetIsVolAtt(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVolAtt,flag);}. void SetVisibility(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVisible,flag);}. void SetVisibleFull(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeFull,flag);}. » Author: Andrei Gheata 17/02/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoPhysicalNode.h 25123 2008-08-12 09:59:46Z brun $ » Last generated: 2011-07-04 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoPhysicalNode.html:11162,Test,TestBit,11162,root/html530/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html530/TGeoPhysicalNode.html,4,['Test'],['TestBit']
Testability," global matrix for node at LEVEL. TGeoNode * GetNode(Int_t level = -1) const; Return node in branch at LEVEL. If not specified, return last leaf. TGeoVolume * GetVolume(Int_t level = -1) const; Return volume associated with node at LEVEL in the branch. TGeoShape * GetShape(Int_t level = -1) const; Return shape associated with volume. void Paint(Option_t* option = """"); Paint this node and its content according to visualization settings. void Print(Option_t* option = """") const; Print info about this node. void Refresh(); Refresh this physical node. Called for all registered physical nodes; after an Align() call. void SetBranchAsState(); Set node branch according to current state. void SetMatrixOrig(const TGeoMatrix* local); Allows PN entries (or users) to preset the local original matrix for the; last node pointed by the path. Bool_t SetPath(const char* path); Specify the path for this node. void SetAligned(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeAligned,flag);}. Int_t GetLevel() const; {return fLevel;}. TGeoHMatrix * GetOriginalMatrix() const; {return fMatrixOrig;}. Bool_t IsAligned() const; {return TObject::TestBit(kGeoPNodeAligned);}. Bool_t IsVolAttributes() const; {return TObject::TestBit(kGeoPNodeVolAtt);}. Bool_t IsVisible() const; {return TObject::TestBit(kGeoPNodeVisible);}. Bool_t IsVisibleFull() const; {return TObject::TestBit(kGeoPNodeFull);}. void SetIsVolAtt(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVolAtt,flag);}. void SetVisibility(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeVisible,flag);}. void SetVisibleFull(Bool_t flag = kTRUE); {TObject::SetBit(kGeoPNodeFull,flag);}. » Author: Andrei Gheata 17/02/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoPhysicalNode.h 25123 2008-08-12 09:59:46Z brun $ » Last generated: 2011-11-03 20:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoPhysicalNode.html:11162,Test,TestBit,11162,root/html532/TGeoPhysicalNode.html,https://root.cern,https://root.cern/root/html532/TGeoPhysicalNode.html,4,['Test'],['TestBit']
Testability, gpu_options.allow_growth=True; : Disabled TF eager execution when evaluating model ; : Loading Keras Model ; : Loaded model from file: Higgs_trained_model.h5; PyKeras : [dataset] : Evaluation of PyKeras on testing sample (6000 events); : Elapsed time for evaluation of 6000 events: 0.168 sec ; Factory : ␛[1mEvaluate all methods␛[0m; Factory : Evaluate classifier: Likelihood; : ; Likelihood : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_Likelihood : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: Fisher; : ; Fisher : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Also filling probability and rarity histograms (on request)...; TFHandler_Fisher : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0500 0.15582 [ 0.29757 2.8989 ]; : m_jlv: 1.0053 0.39478 [ 0.41660 5.8799 ]; : m_bb: 0.97464 0.52138 [ 0.10941 5.5163 ]; : m_wbb: 1.0296 0.35719 [ 0.38878 3.9747 ]; : m_wwbb: 0.95617 0.30368 [ 0.44118 4.0728 ]; : -----------------------------------------------------------; Factory : Evaluate classifier: BDT; : ; BDT : [dataset] : Loop over test events and fill histograms with classifier response...; : ; TFHandler_BDT : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : m_jj: 1.0447 0.66216 [ 0.14661 10.222 ]; : m_jjj: 1.0275 0.37015 [ 0.34201 5.6016 ]; : m_lv: 1.0,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:52354,test,test,52354,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['test'],['test']
Testability," graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multigraphpalettecolor.C Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  timeSeriesFromCSV.C This macro illustrates the use of the time axis on a TGraph with data read from a text file containing the SWAN usage statistics during July 2017 ;  timeSeriesFromCSV.py This macro illustrates the use of the time axis on a TGraph",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:115542,test,test,115542,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['test'],['test']
Testability," graph ;  graph2derrorsfit.C Draw and fit a TGraph2DErrors ;  graphApply.C A macro to demonstrate the functionality of TGraph::Apply() method ;  graphpalettecolor.C Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  graphpolar.C Create and draw a polar graph ;  graphpolar2.C Create and draw a polar graph with PI axis ;  graphpolar3.C Create and draw a polar graph with PI axis using a TF1 ;  graphShade.C Show how to shade an area between two graphs ;  graphstruct.C Draw a simple graph structure ;  graphtext.C Draw a graph with text attached to each point ;  gtime.C Example of TGraphTime ;  gtime2.C Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program ;  labels1.C Setting alphanumeric labels in a 1-d histogram ;  labels2.C Setting alphanumeric labels ;  motorcycle.C Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  multigraph.C Create and Draw a TMultiGraph ;  multigraphpalettecolor.C Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color) ;  multipalette.C Draw color plots using different color palettes ;  seism.C Strip chart example ;  splines_test.C Examples of use of the spline classes ;  surfaces.C Draw 2-Dim functions ;  timeonaxis.C This macro illustrates the use of the time mode on the axis with different time intervals and time formats ;  timeonaxis2.C Define the time offset as 2003, January 1st ;  timeonaxis3.C This example compares what the system time function gmtime and localtime give with what gives TGaxis ;  waves.C Hint: Spherical waves ;  zdemo.C This macro is an example of graphs in log scales with annotations ;  zones.C Example of script showing how to divide a canvas into adjacent subpads + axis labels on the top and right side of the pads ;  ► gui",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:117262,test,test,117262,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['test'],['test']
Testability," h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); voidSetNodePtr(TStructNode* val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointerButtonSlot(); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowLinksToggled(Bool_t on); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TStructViewerGUI(const TStructViewerGUI&); TStructViewerGUI(TStructViewer* parent, TStructNode* nodePtr, TList* colors, const TGWindow* p = __null, UInt_t w = 800, UInt_t h = 600); voidUndoButtonSlot(); virtual voidTGFrame::UnmapWindow(); voidUpdate(Bool_t resetCamera = false); voidUpdateButtonSlot(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TStructViewerGUI.html:16738,Test,TestBit,16738,root/html602/TStructViewerGUI.html,https://root.cern,https://root.cern/root/html602/TStructViewerGUI.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," h); voidSetMinMaxScale(Float_t min, Float_t max); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetOdoValue(Int_t val); voidSetScaleValue(Float_t val); voidSetScaleValue(Float_t val, Int_t damping); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetThresholdColors(TGSpeedo::EGlowColor col1, TGSpeedo::EGlowColor col2, TGSpeedo::EGlowColor col3); voidSetThresholds(Float_t th1 = 0.0, Float_t th2 = 0.0, Float_t th3 = 0.0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector&); voidStepScale(Float_t step); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* loc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGSpeedo.html:14545,Test,TestBit,14545,root/html534/TGSpeedo.html,https://root.cern,https://root.cern/root/html534/TGSpeedo.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," handle case of maximum in all variables. ; Reimplemented from RooAbsReal.; Definition at line 559 of file RooHistPdf.cxx. ◆ haveUnitNorm(). bool RooHistPdf::haveUnitNorm ; (; ); const. inline . Definition at line 82 of file RooHistPdf.h. ◆ importWorkspaceHook(). bool RooHistPdf::importWorkspaceHook ; (; RooWorkspace & ; ws). overrideprotectedvirtual . Check if our datahist is already in the workspace. ; Reimplemented from RooAbsArg.; Definition at line 607 of file RooHistPdf.cxx. ◆ initializeOwnedDataHist(). void RooHistPdf::initializeOwnedDataHist ; (; std::unique_ptr< RooDataHist > && ; dataHist). inlineprivate . Definition at line 157 of file RooHistPdf.h. ◆ IsA(). TClass * RooHistPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 162 of file RooHistPdf.h. ◆ isBinnedDistribution(). bool RooHistPdf::isBinnedDistribution ; (; const RooArgSet & ; ); const. inlineoverridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 94 of file RooHistPdf.h. ◆ maxVal(). double RooHistPdf::maxVal ; (; Int_t ; code); const. overridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Definition at line 571 of file RooHistPdf.cxx. ◆ plotSamplingHint() [1/2]. std::list< double > * RooHistPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Return sampling hint for making curves of (projections) of this function as the recursive division strategy of RooCurve cannot deal efficiently with the vertical lines that occur in a non-interpolated histogram. ; Reimplemented from RooAbsReal.; Definition at line 469 of file RooHistPdf.cxx. ◆ plotSamplingHint() [2/2]. std::list< double > * RooHistPdf::plotSamplingHint ; (; RooDataHist const & ; dataHist, . RooArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistPdf.html:85348,Test,Tests,85348,doc/master/classRooHistPdf.html,https://root.cern,https://root.cern/doc/master/classRooHistPdf.html,1,['Test'],['Tests']
Testability," has a TRefTable, set the current branch if; 1251 // branch is not a basic type.; 1252 //; 1253 ; 1254 // FIXME: This test probably needs to be extended past 10.; 1255 if ((fType >= -1) && (fType < 10)) {; 1256 TBranchRef* bref = fTree->GetBranchRef();; 1257 if (bref) {; 1258 fBranchID = bref->SetParent(this, fBranchID);; 1259 }; 1260 }; 1261 ; 1262 if (!nbranches) {; 1263 // No sub-branches.; 1264 if (!TestBit(kDoNotProcess)) {; 1265 nwrite = TBranch::FillImpl(imtHelper);; 1266 if (nwrite < 0) {; 1267 Error(""Fill"", ""Failed filling branch:%s, nbytes=%d"", GetName(), nwrite);; 1268 ++nerror;; 1269 } else {; 1270 nbytes += nwrite;; 1271 }; 1272 }; 1273 } else {; 1274 // We have sub-branches.; 1275 if (fType == 3 || fType == 4) {; 1276 // TClonesArray or STL container counter; 1277 nwrite = TBranch::FillImpl(imtHelper);; 1278 if (nwrite < 0) {; 1279 Error(""Fill"", ""Failed filling branch:%s, nbytes=%d"", GetName(), nwrite);; 1280 ++nerror;; 1281 } else {; 1282 nbytes += nwrite;; 1283 }; 1284 } else {; 1285 ++fEntries;; 1286 }; 1287 for (Int_t i = 0; i < nbranches; ++i) {; 1288 TBranchElement* branch = (TBranchElement*) fBranches[i];; 1289 if (!branch->TestBit(kDoNotProcess)) {; 1290 nwrite = branch->FillImpl(imtHelper);; 1291 if (nwrite < 0) {; 1292 Error(""Fill"", ""Failed filling branch:%s.%s, nbytes=%d"", GetName(), branch->GetName(), nwrite);; 1293 nerror++;; 1294 } else {; 1295 nbytes += nwrite;; 1296 }; 1297 }; 1298 }; 1299 }; 1300 ; 1301 if (fTree->Debug() > 0) {; 1302 // Debugging.; 1303 Long64_t entry = fEntries;; 1304 if ((entry >= fTree->GetDebugMin()) && (entry <= fTree->GetDebugMax())) {; 1305 printf(""Fill: %lld, branch=%s, nbytes=%d\n"", entry, GetName(), nbytes);; 1306 }; 1307 }; 1308 ; 1309 if (nerror != 0) {; 1310 return -1;; 1311 }; 1312 ; 1313 return nbytes;; 1314}; 1315 ; 1316////////////////////////////////////////////////////////////////////////////////; 1317/// Write leaves into i/o buffers for this branch.; 1318/// For the case where the branch is set in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:44800,Test,TestBit,44800,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability," has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""a"" and ""b"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent"",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous object; for each branch. You can force the previous object to be automatically; deleted if you call mybranch.SetAutoDelete(kTRUE) (default is kFALSE).; Example:; Consider the example in $ROOTSYS/test/Event.h; The top level branch in the tree T is declared with:; Event *event = 0; //event must be null or point to a valid object; //it must be initialized; T.SetBranchAddress(""event"",&event);; When reading the Tree, one can choose one of these 3 options:. OPTION 1. for (Long64_t i=0;i<nentries;i++) {; T.GetEntry(i);; // the object event has been filled at this point; }; The default (recommended). At the first entry an object of the class; Event will be created and pointed by event. At the following entries,; event will be overwritten by the new data. All internal members that are; TObject* are automatically deleted. It is important that these members; be in a valid state when GetEntry is called. Pointers must be correctly; initialized. However these internal members will not be deleted if the; characters ""->"" are specified as the first characters in the comment; field of the data member declaration. If ""->"" is specified, the pointer member is read via pointer->Str",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:92496,test,test,92496,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,1,['test'],['test']
Testability," has friends, also read the friends entry. To activate/deactivate one or more branches, use TBranch::SetBranchStatus; For example, if you have a Tree with several hundred branches, and you; are interested only by branches named ""u"" and ""v"", do; mytree.SetBranchStatus(""*"",0); //disable all branches; mytree.SetBranchStatus(""a"",1);; mytree.SetBranchStatus(""b"",1);; when calling mytree.GetEntry(i); only branches ""a"" and ""b"" will be read. WARNING!!; If your Tree has been created in split mode with a parent branch ""parent"",; mytree.SetBranchStatus(""parent"",1);; will not activate the sub-branches of ""parent"". You should do:; mytree.SetBranchStatus(""parent*"",1);. An alternative is to call directly; brancha.GetEntry(i); branchb.GetEntry(i);. IMPORTANT NOTE. By default, GetEntry reuses the space allocated by the previous object; for each branch. You can force the previous object to be automatically; deleted if you call mybranch.SetAutoDelete(kTRUE) (default is kFALSE).; Example:; Consider the example in $ROOTSYS/test/Event.h; The top level branch in the tree T is declared with:; Event *event = 0; //event must be null or point to a valid object; //it must be initialized; T.SetBranchAddress(""event"",&event);; When reading the Tree, one can choose one of these 3 options:. OPTION 1. for (Long64_t i=0;i<nentries;i++) {; T.GetEntry(i);; // the object event has been filled at this point; }; The default (recommended). At the first entry an object of the; class Event will be created and pointed by event.; At the following entries, event will be overwritten by the new data.; All internal members that are TObject* are automatically deleted.; It is important that these members be in a valid state when GetEntry; is called. Pointers must be correctly initialized.; However these internal members will not be deleted if the characters ""->""; are specified as the first characters in the comment field of the data; member declaration.; If ""->"" is specified, the pointer member is read via pointer->S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:88299,test,test,88299,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['test'],['test']
Testability," having the importance 1. ; The importance in evaluated as the total separation-gain that this variable had in the decision trees (weighted by the number of events) ; Definition at line 2745 of file DecisionTree.cxx. ◆ GetVariableImportance() [2/2]. Double_t TMVA::DecisionTree::GetVariableImportance ; (; UInt_t ; ivar). returns the relative importance of variable ivar ; Definition at line 2766 of file DecisionTree.cxx. ◆ IsA(). virtual TClass * TMVA::DecisionTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 243 of file DecisionTree.h. ◆ PruneNode(). void TMVA::DecisionTree::PruneNode ; (; TMVA::DecisionTreeNode * ; node). prune away the subtree below the node ; Definition at line 1194 of file DecisionTree.cxx. ◆ PruneNodeInPlace(). void TMVA::DecisionTree::PruneNodeInPlace ; (; TMVA::DecisionTreeNode * ; node). prune a node temporarily (without actually deleting its descendants which allows testing the pruned tree quality for many different pruning stages without ""touching"" the tree. ; Definition at line 1217 of file DecisionTree.cxx. ◆ PruneTree(). Double_t TMVA::DecisionTree::PruneTree ; (; const EventConstList * ; validationSample = nullptr). prune (get rid of internal nodes) the Decision tree to avoid overtraining several different pruning methods can be applied as selected by the variable ""fPruneMethod"". ; Definition at line 964 of file DecisionTree.cxx. ◆ SamplePurity(). Double_t TMVA::DecisionTree::SamplePurity ; (; EventList ; eventSample). private . calculates the purity S/(S+B) of a given event sample ; Definition at line 2722 of file DecisionTree.cxx. ◆ SetAnalysisType(). void TMVA::DecisionTree::SetAnalysisType ; (; Types::EAnalysisType ; t). inline . Definition at line 189 of file DecisionTree.h. ◆ SetMinLinCorrForFisher(). void TMVA::DecisionTree::SetMinLinCorrForFisher ; (; Double_t ; min). inline . Definition at line 192 of file DecisionTree.h. ◆ SetNodePurityLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:23162,test,testing,23162,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['test'],['testing']
Testability," histogram originally was unweighted; 1737/// - by default underflows and overflows are not included:; 1738/// * ""OF"" = overflows included; 1739/// * ""UF"" = underflows included; 1740/// - ""P"" = print chi2, ndf, p_value, igood; 1741/// - ""CHI2"" = returns chi2 instead of p-value; 1742/// - ""CHI2/NDF"" = returns \f$ \chi^{2} \f$/ndf; 1743/// \param[in] res not empty - computes normalized residuals and returns them in this array; 1744///; 1745/// The current implementation is based on the papers \f$ \chi^{2} \f$ test for comparison; 1746/// of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; 1747/// ""Comparison weighted and unweighted histograms"", arXiv:physics/0605123; 1748/// by N.Gagunashvili. This function has been implemented by Daniel Haertl in August 2006.; 1749///; 1750/// #### Introduction:; 1751///; 1752/// A frequently used technique in data analysis is the comparison of; 1753/// histograms. First suggested by Pearson [1] the \f$ \chi^{2} \f$ test of; 1754/// homogeneity is used widely for comparing usual (unweighted) histograms.; 1755/// This paper describes the implementation modified \f$ \chi^{2} \f$ tests; 1756/// for comparison of weighted and unweighted histograms and two weighted; 1757/// histograms [2] as well as usual Pearson's \f$ \chi^{2} \f$ test for; 1758/// comparison two usual (unweighted) histograms.; 1759///; 1760/// #### Overview:; 1761///; 1762/// Comparison of two histograms expect hypotheses that two histograms; 1763/// represent identical distributions. To make a decision p-value should; 1764/// be calculated. The hypotheses of identity is rejected if the p-value is; 1765/// lower then some significance level. Traditionally significance levels; 1766/// 0.1, 0.05 and 0.01 are used. The comparison procedure should include an; 1767/// analysis of the residuals which is often helpful in identifying the; 1768/// bins of histograms responsible for a significant overall \f$ \chi^{2} \f$ value.; 1769/// Residuals are the differ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:68015,test,test,68015,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability," histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approximated by a Poisson probability distribution ; \[; \frac{e^{-Np_{i}}(Np_{i})^{n_{i}}}{n_{i}!}; \]. for the first histogram and with distribution ; \[; \frac{e^{-Mp_{i}}(Mp_{i})^{m_{i}}}{m_{i}!}; \]. for the second histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:88475,test,test,88475,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," histograms. ;  ; RLogChannel & FitPanelLog ();  Log channel for FitPanel diagnostics. ;  ; template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> ; RFitResult FitTo (const RHist< DIMENSIONS, PRECISION, STAT... > &hist, const RFunction< DIMENSIONS > &func, std::span< const double > paramInit);  ; template<class DRAWABLE , std::enable_if_t< std::is_base_of< RDrawable, DRAWABLE >{}> * = nullptr> ; auto GetDrawable (const std::shared_ptr< DRAWABLE > &drawable);  Central method to insert drawable in list of pad primitives By default drawable placed as is. ;  ; auto GetDrawable (const std::shared_ptr< RH1C > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH1D > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH1F > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH1I > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH2C > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH2D > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH2F > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH2I > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3C > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3D > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3F > &histimpl);  ; auto GetDrawable (const std::shared_ptr< RH3I > &histimpl);  ; RLogChannel & GPadLog ();  Log channel for GPad diagnostics. ;  ; template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> ; class RHist< DIMENSIONS, PRECISION, STAT... > HistFromImpl (std::unique_ptr< typename RHist< DIMENSIONS, PRECISION, STAT... >::ImplBase_t > pHistImpl);  Adopt an external, stand-alone RHistImpl. The RHist will take ownership. ;  ; template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> ; RHist< DIMENSIONS, PRECISION, STAT... > HistFromImpl (std::unique_ptr< typename RHist< DIMENSIONS, PRECISION, STAT... >::ImplBase_t > pHistImpl);  Adopt an external, stand-al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:28923,Log,Log,28923,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,2,['Log'],['Log']
Testability," html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square ; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix approp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:15310,log,logical,15310,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,4,['log'],['logical']
Testability," i-th daughters of the volume specified by volName; According to A. Morsch' G3toRoot class. Int_t VolId2Mate(Int_t id) const. Return material number for a given volume id. Bool_t GetTransformation(const TString& volumePath, TGeoHMatrix& matrix); Returns the Transformation matrix between the volume specified; by the path volumePath and the Top or mater volume. The format; of the path volumePath is as follows (assuming ALIC is the Top volume); ""/ALIC_1/DDIP_1/S05I_2/S05H_1/S05G_3"". Here ALIC is the top most; or master volume which has only 1 instance of. Of all of the daughter; volumes of ALICE, DDIP volume copy #1 is indicated. Similarly for; the daughter volume of DDIP is S05I copy #2 and so on.; Inputs:; TString& volumePath The volume path to the specific volume; for which you want the matrix. Volume name; hierarchy is separated by ""/"" while the; copy number is appended using a ""_"".; Outputs:; TGeoHMatrix &mat A matrix with its values set to those; appropriate to the Local to Master transformation; Return:; A logical value if kFALSE then an error occurred and no change to; mat was made. Bool_t GetShape(const TString& volumePath, TString& shapeType, TArrayD& par); Returns the shape and its parameters for the volume specified; by volumeName.; Inputs:; TString& volumeName The volume name; Outputs:; TString &shapeType Shape type; TArrayD &par A TArrayD of parameters with all of the; parameters of the specified shape.; Return:; A logical indicating whether there was an error in getting this; information. Bool_t GetMaterial(const TString& volumeName, TString& name, Int_t& imat, Double_t& a, Double_t& z, Double_t& density, Double_t& radl, Double_t& inter, TArrayD& par); Returns the Material and its parameters for the volume specified; by volumeName.; Note, Geant3 stores and uses mixtures as an element with an effective; Z and A. Consequently, if the parameter Z is not integer, then; this material represents some sort of mixture.; Inputs:; TString& volumeName The volume na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoMCGeometry.html:19316,log,logical,19316,root/html528/TGeoMCGeometry.html,https://root.cern,https://root.cern/root/html528/TGeoMCGeometry.html,6,['log'],['logical']
Testability," id inside a volume B will create a node named A_id. This will be added to the list of nodes stored by B. In addition, when applying a division operation in N slices to a volume A, a list of nodes B_1, B_2, … , B_N is also created. A node B_i does not represent a unique object in the geometry because its container A might be at its turn positioned as node inside several other volumes. Only when a complete branch of nodes is fully defined up to the top node in the geometry, a given path:/TOP_1/…/A_3/B_7 will represent a unique object. Its global transformation matrix can be computed as the pile-up of all local transformations in its branch. We will therefore call logical graph the hierarchy defined by nodes and volumes. The expansion of the logical graph by all possible paths defines a tree structure where all nodes are unique “touchable” objects. We will call this the “physical tree”. Unlike the logical graph, the physical tree can become a huge structure with several millions of nodes in case of complex geometries; therefore, it is not always a good idea to keep it transient in memory. Since the logical and physical structures are correlated, the modeller rather keeps track only of the current branch, updating the current global matrix at each change of the level in geometry. The current physical node is not an object that can be asked for at a given moment, but rather represented by the combination: current node/current global matrix. However, physical nodes have unique ID’s that can be retrieved for a given modeller state. These can be fed back to the modeller in order to force a physical node to become current. The advantage of this comes from the fact that all navigation queries check first the current node; therefore the location of a point in the geometry can be saved as a starting state for later use.; Nodes can be declared as overlapping in case they do overlap with other nodes inside the same container or extrude this container (see also ‘Checking the Geom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:932565,log,logical,932565,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability," identity matrix, but it may also be initialized by an other TLorentzRotation, by a pure TRotation or by a boost:; TLorentzRotation l; // l is initialized as identity TLorentzRotation m(l); // m = l TRotation r; TLorentzRotation lr(r); TLorentzRotation lb1(bx,by,bz); TVector3 b; TLorentzRotation lb2(b);; The Matrix for a Lorentz boosts is:; | 1+gamma'*bx*bx gamma'*bx*by gamma'*bx*bz gamma*bx |; | gamma'*by*bx 1+gamma'*by*by gamma'*by*bz gamma*by |; | gamma'*bz*bx gamma'*bz*by 1+gamma'*bz*bz gamma*bz |; | gamma*bx gamma*by gamma*bz gamma |; with the boost vector b=(bx,by,bz) and gamma=1/Sqrt(1-beta*beta) and gamma'=(gamma-1)/beta*beta. . Access to the matrix components/Comparisons; Access to the matrix components is possible through the member functions XX(), XY() .. TT(), through the operator (int,int):; Double_t xx;; TLorentzRotation l;; xx = l.XX(); // gets the xx component; xx = l(0,0); // gets the xx component; ; if (l==m) {...} // test for equality; if (l !=m) {...} // test for inequality; if (l.IsIdentity()) {...} // test for identity; TLorentzRotation<div class=""legacybox""><h2>Legacy Code</h2> TLorentzRotation is a legacy interface: there will be no ...Definition TLorentzRotation.h:20; double; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4. Transformations of a LorentzRotation; Compound transformations; There are four possibilities to find the product of two TLorentzRotation transformations:; TLorentzRotation a,b,c;; c = b*a;// product; c = a.MatrixMultiplication(b); // a is unchanged; a *= b;// Attention: a=a*b; c = a.Transform(b)// a=b*a then c=a; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; a#define a(i)Definition RSha256.hxx:99; TLorentzRotation::MatrixMultiplicationTLorentzRotation MatrixMultiplication(const TLorentzRotation &) constDefinition TLorentzRotation.cxx:222; TLorentzRotation::TransformTLorentzRotation & Transform(const TLorentzRotation &)Definition TLorentzRotation.h:259; Lorentz boost",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLorentzRotation.html:2030,test,test,2030,doc/master/classTLorentzRotation.html,https://root.cern,https://root.cern/doc/master/classTLorentzRotation.html,1,['test'],['test']
Testability," if (TF1::RejectedPoint()) {cache += fPointSize; continue;}; 1845 eu = cache[1];; 1846 Derivatives(df,x);; 1847 Int_t n = 0;; 1848 fsum = (fu-cu)/eu;; 1849 if (flag!=1) {; 1850 for (j=0;j<npar;j++) {; 1851 if (pl0[j]>0){; 1852 df[n] = df[j]/eu;; 1853 // left only non-fixed param derivatives / by Sigma; 1854 gin[j] += df[n]*fsum;; 1855 n++;; 1856 }; 1857 }; 1858 Int_t l = 0;; 1859 for (j=0;j<n;j++); 1860 for (Int_t k=0;k<=j;k++); 1861 zik[l++] += df[j]*df[k];; 1862 }; 1863 f += .5*fsum*fsum;; 1864 npfit++;; 1865 cache += fPointSize;; 1866 }; 1867 f1->SetNumberFitPoints(npfit);; 1868 delete[] df;; 1869}; 1870 ; 1871////////////////////////////////////////////////////////////////////////////////; 1872/// Minimization function for H1s using a Likelihood method.; 1873/// Basically, it forms the likelihood by determining the Poisson; 1874/// probability that given a number of entries in a particular bin,; 1875/// the fit would predict it's value. This is then done for each bin,; 1876/// and the sum of the logs is taken as the likelihood.; 1877///; 1878/// Default method (function evaluated at center of bin); 1879/// for each point the cache contains the following info; 1880/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1881/// - 2D : bc,e,xc,yc; 1882/// - 3D : bc,e,xc,yc,zc; 1883 ; 1884void TFumili::FitLikelihood(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 1885{; 1886 Foption_t fitOption = GetFitOption();; 1887 if (fitOption.Integral) {; 1888 FitLikelihoodI(npar,gin,f,u,flag);; 1889 return;; 1890 }; 1891 Double_t cu,fu,fobs,fsub;; 1892 Double_t dersum[100];; 1893 Double_t x[3];; 1894 Int_t icu;; 1895 ; 1896 TH1 *hfit = (TH1*)GetObjectFit();; 1897 TF1 *f1 = (TF1*)GetUserFunc();; 1898 Int_t nd = hfit->GetDimension();; 1899 Int_t j;; 1900 Double_t *zik = GetZ();; 1901 Double_t *pl0 = GetPL0();; 1902 ; 1903 npar = f1->GetNpar();; 1904 SetParNumber(npar);; 1905 if(flag == 9) return;; 1906 Double_t *df=new Double_t[npar];; 1907 if (flag == 2)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:54063,log,logs,54063,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['log'],['logs']
Testability," if (eyl != 0. && ylow2 == ylow && DrawYLow) {; 2688 xb[0] = x-tx; yb[0] = ylow2+ty;; 2689 xb[1] = x-tx; yb[1] = ylow2;; 2690 xb[2] = x+tx; yb[2] = ylow2;; 2691 xb[3] = x+tx; yb[3] = ylow2+ty;; 2692 gPad->PaintPolyLine(4, xb, yb);; 2693 }; 2694 } else {; 2695 if (eyh != 0. && yup2 == yup && DrawYUp) gPad->PaintLine(x-tx,yup2,x+tx,yup2);; 2696 if (eyl != 0. && ylow2 == ylow && DrawYLow) gPad->PaintLine(x-tx,ylow2,x+tx,ylow2);; 2697 }; 2698 }; 2699 }; 2700 }; 2701 }; 2702 if (!brackets && !axis) PaintGraphSimple(theGraph, option);; 2703 gPad->ResetBit(TGraph::kClipFrame);; 2704 ; 2705 if (option3) {; 2706 Int_t logx = gPad->GetLogx();; 2707 Int_t logy = gPad->GetLogy();; 2708 gPad->SetLogx(0);; 2709 gPad->SetLogy(0);; 2710 if (option4) PaintGraph(theGraph, 2*theNpoints, xline.data(), yline.data(),""FC"");; 2711 else PaintGraph(theGraph, 2*theNpoints, xline.data(), yline.data(),""F"");; 2712 gPad->SetLogx(logx);; 2713 gPad->SetLogy(logy);; 2714 }; 2715}; 2716 ; 2717////////////////////////////////////////////////////////////////////////////////; 2718/// [Paint this TGraphMultiErrors with its current attributes.](\ref GrP3); 2719 ; 2720void TGraphPainter::PaintGraphMultiErrors(TGraph *theGraph, Option_t *option); 2721{; 2722 if (!theGraph->InheritsFrom(TGraphMultiErrors::Class())) {; 2723 PaintHelper(theGraph, option);; 2724 return;; 2725 }; 2726 ; 2727 auto tg = (TGraphMultiErrors *)theGraph;; 2728 ; 2729 Int_t NYErrors = tg->GetNYErrors();; 2730 if (NYErrors <= 0) {; 2731 PaintGraphSimple(tg, option);; 2732 return;; 2733 }; 2734 ; 2735 TString tsOpt = option;; 2736 tsOpt.ToLower();; 2737 ; 2738 std::vector<TString> options(NYErrors + 1);; 2739 Int_t filled = 0;; 2740 ; 2741 if (tsOpt.CountChar(';') < NYErrors) {; 2742 options[0] = tsOpt.Contains("";"") ? tsOpt(0, tsOpt.First(';')) : tsOpt.Copy();; 2743 filled++;; 2744 }; 2745 ; 2746 Ssiz_t firstSemicolon;; 2747 while ((firstSemicolon = tsOpt.First(';')) != kNPOS && filled <= NYErrors) {; 2748 options[filled] = tsOpt(0, firs",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:96852,log,logx,96852,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['log'],"['logx', 'logy']"
Testability," if (fGraphs) {; 1327 auto lnk = fGraphs->FirstLink();; 1328 ; 1329 chopt.ReplaceAll(""A"","""");; 1330 ; 1331 TObject *obj = nullptr;; 1332 ; 1333 while (lnk) {; 1334 ; 1335 obj = lnk->GetObject();; 1336 ; 1337 gPad->PushSelectableObject(obj);; 1338 ; 1339 if (!gPad->PadInHighlightMode() || (gPad->PadInHighlightMode() && obj == gPad->GetSelected())) {; 1340 TString opt = lnk->GetOption();; 1341 if (!opt.IsWhitespace()); 1342 obj->Paint(opt.ReplaceAll(""A"","""").Data());; 1343 else {; 1344 if (!chopt.IsWhitespace()) obj->Paint(chopt.Data());; 1345 else obj->Paint(""L"");; 1346 }; 1347 }; 1348 ; 1349 lnk = lnk->Next();; 1350 }; 1351 ; 1352 gfit = (TGraph*)obj; // pick one TGraph in the list to paint the fit parameters.; 1353 }; 1354 ; 1355 TF1 *fit = nullptr;; 1356 if (fFunctions) {; 1357 TIter next(fFunctions);; 1358 while (auto f = next()) {; 1359 if (f->InheritsFrom(TF1::Class())) {; 1360 if (f->TestBit(TF1::kNotDraw) == 0); 1361 f->Paint(""lsame"");; 1362 fit = (TF1*)f;; 1363 } else {; 1364 f->Paint();; 1365 }; 1366 }; 1367 }; 1368 ; 1369 if (gfit && fit); 1370 gfit->PaintStats(fit);; 1371}; 1372 ; 1373 ; 1374////////////////////////////////////////////////////////////////////////////////; 1375/// Divides the active pad and draws all Graphs in the Multigraph separately.; 1376 ; 1377void TMultiGraph::PaintPads(Option_t *option); 1378{; 1379 if (!gPad) return;; 1380 ; 1381 Int_t neededPads = fGraphs->GetSize();; 1382 Int_t existingPads = 0;; 1383 ; 1384 TVirtualPad *curPad = gPad;; 1385 TIter nextPad(curPad->GetListOfPrimitives());; 1386 ; 1387 while (auto obj = nextPad()) {; 1388 if (obj->InheritsFrom(TVirtualPad::Class())); 1389 existingPads++;; 1390 }; 1391 if (existingPads < neededPads) {; 1392 curPad->Clear();; 1393 Int_t nx = (Int_t)TMath::Sqrt((Double_t)neededPads);; 1394 if (nx*nx < neededPads) nx++;; 1395 Int_t ny = nx;; 1396 if (((nx*ny)-nx) >= neededPads) ny--;; 1397 curPad->Divide(nx,ny);; 1398 }; 1399 Int_t i = 0;; 1400 ; 1401 TIter nextGraph(fGraphs);; 1402 whil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMultiGraph_8cxx_source.html:43866,Test,TestBit,43866,doc/master/TMultiGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMultiGraph_8cxx_source.html,1,['Test'],['TestBit']
Testability," if (mat->IsEq(matref)) {; mat->SetMedia(media[j]);; break;; }; if (j==(i-1)) {; // different material; mat->SetMedia(imedia);; media[i] = imedia++;; mat->Print();; }; }; }. void CheckBoundaryErrors(Int_t ntracks = 1000000, Double_t radius = -1.); Check pushes and pulls needed to cross the next boundary with respect to the; position given by FindNextBoundary. If radius is not mentioned the full bounding; box will be sampled. void CheckBoundaryReference(Int_t icheck = -1); Check the boundary errors reference file created by CheckBoundaryErrors method.; The shape for which the crossing failed is drawn with the starting point in red; and the extrapolated point to boundary (+/- failing push/pull) in yellow. void CheckPoint(Double_t x = 0, Double_t y = 0, Double_t z = 0, Option_t* option = """"); Classify a given point. See TGeoChecker::CheckPoint(). void CheckShape(TGeoShape* shape, Int_t testNo, Int_t nsamples, Option_t* option); Test for shape navigation methods. Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate; directions randomly in cos(theta). Compute DistFromInside and move the; point with bigger distance. Compute DistFromOutside back from new point.; Plot d-(d1+d2). void CheckGeometryFull(Int_t ntracks = 1000000, Double_t vx = 0., Double_t vy = 0., Double_t vz = 0., Option_t* option = ""ob""); Geometry checking.; - if option contains 'o': Optional overlap checkings (by sampling and by mesh).; - if option contains 'b': Optional boundary crossing check + timing per volume. STAGE 1: extensive overlap checking by sampling per volume. Stdout need to be; checked by user to get report, then TGeoVolume::CheckOverlaps(0.01, ""s"") can; be called for the suspicious volumes.; STAGE2 : normal overlap checking using the shapes mesh - fills the list of; overlaps.; STAGE3 : shooting NRAYS rays from VERTEX and counting the total number of; crossings per volume (rays propagated from boundary to boundary until; geometry exit). Timing compute",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoManager.html:64648,test,test,64648,root/html530/TGeoManager.html,https://root.cern,https://root.cern/root/html530/TGeoManager.html,5,['test'],['test']
Testability," if (zmin >= 0 || Hoption.Logz) continue;; 5852 if (Hoption.Color == 2) continue;; 5853 }; 5854 }; 5855 ; 5856 if (Hoption.Logz) {; 5857 if (z > 0) z = TMath::Log10(z);; 5858 else z = zmin;; 5859 }; 5860 if (z < zmin && !Hoption.Zero) continue;; 5861 xup = xk + xstep;; 5862 xlow = xk;; 5863 if (Hoption.Logx) {; 5864 if (xup > 0) xup = TMath::Log10(xup);; 5865 else continue;; 5866 if (xlow > 0) xlow = TMath::Log10(xlow);; 5867 else continue;; 5868 }; 5869 yup = yk + ystep;; 5870 ylow = yk;; 5871 if (Hoption.System != kPOLAR) {; 5872 if (Hoption.Logy) {; 5873 if (yup > 0) yup = TMath::Log10(yup);; 5874 else continue;; 5875 if (ylow > 0) ylow = TMath::Log10(ylow);; 5876 else continue;; 5877 }; 5878 if (xup < gPad->GetUxmin()) continue;; 5879 if (yup < gPad->GetUymin()) continue;; 5880 if (xlow > gPad->GetUxmax()) continue;; 5881 if (ylow > gPad->GetUymax()) continue;; 5882 if (xlow < gPad->GetUxmin()) xlow = gPad->GetUxmin();; 5883 if (ylow < gPad->GetUymin()) ylow = gPad->GetUymin();; 5884 if (xup > gPad->GetUxmax()) xup = gPad->GetUxmax();; 5885 if (yup > gPad->GetUymax()) yup = gPad->GetUymax();; 5886 }; 5887 ; 5888 if (fH->TestBit(TH1::kUserContour)) {; 5889 zc = fH->GetContourLevelPad(0);; 5890 if (z < zc) continue;; 5891 color = -1;; 5892 for (Int_t k=0; k<ndiv; k++) {; 5893 zc = fH->GetContourLevelPad(k);; 5894 if (z < zc) {; 5895 continue;; 5896 } else {; 5897 color++;; 5898 }; 5899 }; 5900 } else {; 5901 color = Int_t(0.01+(z-zmin)*scale);; 5902 }; 5903 ; 5904 Int_t theColor = Int_t((color+0.99)*Float_t(ncolors)/Float_t(ndivz));; 5905 if (theColor > ncolors-1) theColor = ncolors-1;; 5906 fH->SetFillColor(gStyle->GetColorPalette(theColor));; 5907 fH->TAttFill::Modify();; 5908 if (Hoption.System != kPOLAR) {; 5909 gPad->PaintBox(xlow, ylow, xup, yup);; 5910 } else {; 5911 TCrown crown(0,0,ylow,yup,xlow*TMath::RadToDeg(),xup*TMath::RadToDeg());; 5912 crown.SetFillColor(gStyle->GetColorPalette(theColor));; 5913 crown.SetLineColor(fH->GetLineColor());; 5914 crown.S",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:217924,Log,Logy,217924,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'Test']","['Logy', 'TestBit']"
Testability, if flag set; RooAbsReal*RooAbsTestStatistic::_funcPointer to original input function; RooAbsReal*RooAbsOptTestStatistic::_funcClonePointer to internal clone of input function; RooArgSet*RooAbsOptTestStatistic::_funcCloneSetSet owning all components of internal clone of input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; static Int_tRooPrintable::_nameLength; RooArgSet*RooAbsOptTestStatistic::_normSetPointer to set with observables used for normalization; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_tRooAbsOptTestStatistic::_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*RooAbsOptTestStatistic::_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; TListRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; Bool_t_showProgressShow progress indication during evaluation if true; Int_tRooAbsTestStatistic::_simCountTotal number of component p.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataWeightedAverage.html:34026,test,test,34026,root/html528/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html528/RooDataWeightedAverage.html,2,['test'],['test']
Testability," if nobody owns the object it could end up as wasted memory (i.e. a memory leak) when no longer needed. If a collection is deleted, its objects are not. The user can force a collection to delete its objects, but that is the user’s choice.; 16.1.2 Determining the Class of Contained Objects; Most containers may hold heterogeneous collections of objects and then it is left to the user to correctly cast the TObject pointer to the right class. Casting to the wrong class will give wrong results and may well crash the program! Therefore, the user has to be very careful. Often a container only contains one class of objects, but if it really contains a mixture, it is possible to ask each object about its class using the InheritsFrom method.; For example if myObject is a TObject pointer:; if (myObject->InheritsFrom(""TParticle"") {; printf(""myObject is a TParticlen"");; }; As the name suggests, this test works even if the object is a subclass of TParticle. The member function IsA() can be used instead of InheritsFrom to make the test exact. The InheritsFrom and IsA methods use the extensive Run Time Type Information (RTTI) available via the ROOT meta-classes.; 16.1.3 Types of Collections; The ROOT system implements the following basic types of collections: unordered collections, ordered collections and sorted collections. Next figure shows the inheritance hierarchy for the primary collection classes. All primary collection classes derive from the abstract base class TCollection. The inheritance hierarchy of the primary collection classes. 16.1.4 Ordered Collections (Sequences); Sequences are collections that are externally ordered because they maintain internal elements according to the order in which they were added. The following sequences are available:. TList; THashList; TOrdCollection; TObjArray; TClonesArray. The TOrdCollection, TObjArray as well as the TClonesArray can be sorted using their Sort() member function (for this, the stored objects must provide a comparison fun",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:842256,test,test,842256,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability," if parameters are existing; 1999 std::vector<TString> newNames;; 2000 if (fNpar > 0) {; 2001 nparOffset = fNpar;; 2002 newNames.resize(f->GetNpar());; 2003 // start from higher number to avoid overlap; 2004 for (int jpar = f->GetNpar() - 1; jpar >= 0; --jpar) {; 2005 // parameters name have a ""p"" added in front; 2006 TString pj = TString(f->GetParName(jpar));; 2007 if (pj[0] == 'p' && TString(pj(1, pj.Length())).IsDigit()) {; 2008 TString oldName = TString::Format(""[%s]"", f->GetParName(jpar));; 2009 TString newName = TString::Format(""[p%d]"", nparOffset + jpar);; 2010 // std::cout << ""replace - parameter "" << f->GetParName(jpar) << "" with "" << newName <<; 2011 // std::endl;; 2012 replacementFormula.ReplaceAll(oldName, newName);; 2013 newNames[jpar] = newName;; 2014 } else; 2015 newNames[jpar] = f->GetParName(jpar);; 2016 }; 2017 // std::cout << ""after replacing params "" << replacementFormula << std::endl;; 2018 }; 2019 ExtractFunctors(replacementFormula);; 2020 // std::cout << ""after re-extracting functors "" << replacementFormula << std::endl;; 2021 ; 2022 // set parameter value from replacement formula; 2023 for (int jpar = 0; jpar < f->GetNpar(); ++jpar) {; 2024 if (nparOffset > 0) {; 2025 // parameter have an offset- so take this into account; 2026 assert((int)newNames.size() == f->GetNpar());; 2027 SetParameter(newNames[jpar], f->GetParameter(jpar));; 2028 } else; 2029 // names are the same between current formula and replaced one; 2030 SetParameter(f->GetParName(jpar), f->GetParameter(jpar));; 2031 }; 2032 // need to add parenthesis at begin and end of replacementFormula; 2033 replacementFormula.Insert(0, '(');; 2034 replacementFormula.Insert(replacementFormula.Length(), ')');; 2035 formula.Replace(i - name.Length(), name.Length(), replacementFormula, replacementFormula.Length());; 2036 // move forward the index i of the main loop; 2037 i += replacementFormula.Length() - name.Length();; 2038 ; 2039 // we have extracted all the functor for ""fname""; 2040 // std::c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:76842,assert,assert,76842,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['assert'],['assert']
Testability," if retrieve is true. TList * QuerySessions(Option_t* opt = ""S""); Get list of sessions accessible to this manager. Bool_t HandleInput(const void* ); Handle asynchronous input on the socket. Bool_t HandleError(const void* in = 0); Handle error on the input socket. Int_t Reset(Bool_t hard = kFALSE, const char* usr = 0); Send a cleanup request for the sessions associated with the current user.; If 'hard' is true sessions are signalled for termination and moved to; terminate at all stages (top master, sub-master, workers). Otherwise; (default) only top-master sessions are asked to terminate, triggering; a gentle session termination. In all cases all sessions should be gone; after a few (2 or 3) session checking cycles.; A user with superuser privileges can also asks cleaning for an different; user, specified by 'usr', or for all users (usr = *); Return 0 on success, -1 in case of error. TProofLog * GetSessionLogs(Int_t ridx = 0, const char* stag = 0, const char* pattern = ""-v \""| SvcMsg\"""", Bool_t rescan = kFALSE); Get logs or log tails from last session associated with this manager; instance.; The arguments allow to specify a session different from the last one:; isess specifies a position relative to the last one, i.e. 1; for the next to last session; the absolute value is taken; so -1 and 1 are equivalent.; stag specifies the unique tag of the wanted session; The special value stag = ""NR"" allows to just initialize the TProofLog; object w/o retrieving the files; this may be useful when the number; of workers is large and only a subset of logs is required.; If 'stag' is specified 'isess' is ignored (unless stag = ""NR"").; If 'pattern' is specified only the lines containing it are retrieved; (remote grep functionality); to filter out a pattern 'pat' use; pattern = ""-v pat"".; If 'rescan' is TRUE, masters will rescan the worker sandboxes for the exact; paths, instead of using the save information; may be useful when the; ssave information looks wrong or incomplete.; Returns",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXProofMgr.html:12472,log,logs,12472,root/html534/TXProofMgr.html,https://root.cern,https://root.cern/root/html534/TXProofMgr.html,6,['log'],"['log', 'logs']"
Testability," if x or/and y is less than the low-edge of the corresponding axis first bin,; 448/// the Underflow cell is incremented.; 449/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 450/// the Overflow cell is incremented.; 451///; 452/// - If the weight is not equal to 1, the storage of the sum of squares of; 453/// weights is automatically triggered and the sum of the squares of weights is incremented; 454/// by w^2 in the bin corresponding to x,y; 455///; 456/// The function returns the corresponding global bin number which has its content; 457/// incremented by w; 458 ; 459Int_t TH2::Fill(Double_t x, Double_t y, Double_t w); 460{; 461 if (fBuffer) return BufferFill(x,y,w);; 462 ; 463 Int_t binx, biny, bin;; 464 fEntries++;; 465 binx = fXaxis.FindBin(x);; 466 biny = fYaxis.FindBin(y);; 467 if (binx <0 || biny <0) return -1;; 468 bin = biny*(fXaxis.GetNbins()+2) + binx;; 469 if (!fSumw2.fN && w != 1.0 && !TestBit(TH1::kIsNotW)) Sumw2(); // must be called before AddBinContent; 470 if (fSumw2.fN) fSumw2.fArray[bin] += w*w;; 471 AddBinContent(bin,w);; 472 if (binx == 0 || binx > fXaxis.GetNbins()) {; 473 if (!GetStatOverflowsBehaviour()) return -1;; 474 }; 475 if (biny == 0 || biny > fYaxis.GetNbins()) {; 476 if (!GetStatOverflowsBehaviour()) return -1;; 477 }; 478 Double_t z= w;; 479 fTsumw += z;; 480 fTsumw2 += z*z;; 481 fTsumwx += z*x;; 482 fTsumwx2 += z*x*x;; 483 fTsumwy += z*y;; 484 fTsumwy2 += z*y*y;; 485 fTsumwxy += z*x*y;; 486 return bin;; 487}; 488 ; 489 ; 490////////////////////////////////////////////////////////////////////////////////; 491/// Increment cell defined by namex,namey by a weight w; 492///; 493/// - if x or/and y is less than the low-edge of the corresponding axis first bin,; 494/// the Underflow cell is incremented.; 495/// - if x or/and y is equal to or greater than the upper edge of corresponding axis last bin,; 496/// the Overflow cell is incremented.; 497///; 498/// - If the weight is not equal to 1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:18304,Test,TestBit,18304,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability, illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type You must run this tutorial with ACLIC: a dictionary will be automatically created ;  fildir.C This macro displays the ROOT Directory data structure ;  file.C This macro displays the physical ROOT file structure ;  hadd.C Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  loopdir11.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  Bessel.py Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel densi,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:131072,test,testMergeCont,131072,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['test'],['testMergeCont']
Testability, illustrates how to create a hierarchy of directories in a Root file ;  double32.C Tutorial illustrating use and precision of the Double32_t data type You must run this tutorial with ACLIC: a dictionary will be automatically created ;  fildir.C This macro displays the ROOT Directory data structure ;  file.C This macro displays the physical ROOT file structure ;  hadd.C Macro to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  loopdir11.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C E,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:128852,test,testMergeCont,128852,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['test'],['testMergeCont']
Testability," in a derived class (in principle against good; design since a child class should not provide less functionality; than its parent, however, sometimes it is necessary). Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TObject.h 34221 2010-06-30 10:23:33Z rdm $ » Last generated: 2010-10-04 18:52; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TObject.html:19241,Test,TestBit,19241,root/html528/TObject.html,https://root.cern,https://root.cern/root/html528/TObject.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void Reset(); Reset the basket to the starting state. i.e. as it was after calling; the constructor (and potentially attaching a TBuffer.). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket& ). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBasket.html:10889,log,logical,10889,root/html528/TBasket.html,https://root.cern,https://root.cern/root/html528/TBasket.html,1,['log'],['logical']
Testability," in case of error. void MoveEntries(Int_t dentries); Remove the first dentries of this basket, moving entries at; dentries to the start of the buffer. Int_t ReadBasketBuffers(Long64_t pos, Int_t len, TFile* file); Read basket buffers in memory and cleanup. Read a basket buffer. Check if buffers of previous ReadBasket; should not be dropped. Remember, we keep buffers in memory up to; fMaxVirtualSize.; The function returns 0 in case of success, 1 in case of error; This function was modified with the addition of the parallel; unzipping, it will try to get the unzipped file from the cache; receiving only a pointer to that buffer (so we shall not; delete that pointer), although we get a new buffer in case; it's not found in the cache.; There is a lot of code duplication but it was necesary to assure; the expected behavior when there is no cache. Int_t ReadBasketBytes(Long64_t pos, TFile* file); Read basket buffers in memory and cleanup. Read first bytes of a logical record starting at position pos; return record length (first 4 bytes of record). void SetReadMode(); Set read mode of basket. void SetWriteMode(); Set write mode of basket. void Streamer(TBuffer& b); Stream a class object. void Update(Int_t newlast, Int_t skipped); Update basket header and EntryOffset table. Int_t WriteBuffer(); Write buffer of this basket on the current file. The function returns the number of bytes committed to the memory.; If a write error occurs, the number of bytes returned is -1.; If no data are written, the number of bytes returned is 0. TBasket(const TBasket&). TBasket& operator=(const TBasket& ). TBranch * GetBranch() const; {return fBranch;}. Int_t GetBufferSize() const; {return fBufferSize;}. Int_t * GetDisplacement() const; {return fDisplacement;}. Int_t * GetEntryOffset() const; {return fEntryOffset;}. Int_t GetNevBuf() const; {return fNevBuf;}. Int_t GetNevBufSize() const; {return fNevBufSize;}. Int_t GetLast() const; {return fLast;}. void PrepareBasket(Long64_t ); {}. void SetBr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TBasket.html:10672,log,logical,10672,root/html526/TBasket.html,https://root.cern,https://root.cern/root/html526/TBasket.html,1,['log'],['logical']
Testability," in collection. ;  ; TClass * IsA () const override;  ; virtual Bool_t IsSorted () const;  ; virtual TObject * Last () const =0;  ; Int_t LastIndex () const;  ; Long64_t Merge (TCollection *list);  Merge this collection with all collections coming in the input list. ;  ; virtual void RemoveAfter (TObject *after);  ; virtual TObject * RemoveAt (Int_t idx);  ; virtual void RemoveBefore (TObject *before);  ; virtual void RemoveFirst ();  ; virtual void RemoveLast ();  ; void Streamer (TBuffer &) override;  Stream all objects in the collection to or from the I/O buffer. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UnSort ();  ;  Public Member Functions inherited from TCollection; virtual ~TCollection ();  TNamed destructor. ;  ; virtual void AddAll (const TCollection *col);  Add all objects from collection col to this collection. ;  ; void AddVector (TObject *obj1,...);  Add all arguments to the collection. ;  ; Bool_t AssertClass (TClass *cl) const;  Make sure all objects in this collection inherit from class cl. ;  ; TIter begin () const;  ; void Browse (TBrowser *b) override;  Browse this collection (called by TBrowser). ;  ; Int_t Capacity () const;  ; void Clear (Option_t *option="""") override=0;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an collection using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TCollection objects. ;  ; Bool_t Contains (const char *name) const;  ; Bool_t Contains (const TObject *obj) const;  ; void Delete (Option_t *option="""") override=0;  Delete this object. ;  ; void Draw (Option_t *option="""") override;  Draw all objects in this collection. ;  ; void Dump () const override;  Dump all objects in this collection. ;  ; TIter end () const;  ; TObject * FindObject (const char *name) const override;  Find an object in this collection using its name. ;  ; TObject * FindObject (const TObject *obj) const override;  Find an object in this co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSeqCollection.html:2212,Assert,AssertClass,2212,doc/master/classTSeqCollection.html,https://root.cern,https://root.cern/doc/master/classTSeqCollection.html,1,['Assert'],['AssertClass']
Testability," in getMaxVal. void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar information is passed as argument. void clearEvalErrorLog(); Clear the stack of evaluation error messages. void printEvalErrors(ostream& os = std::cout, Int_t maxPerNode = 10000000); Print all outstanding logged evaluation error on the given ostream. If maxPerNode; is zero, only the number of errors for each source (object with unique name) is listed.; If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown; per source of errors. A truncation message is shown if there were more errors logged; than shown. Int_t numEvalErrors(); Return the number of logged evaluation errors since the last clearing. void fixAddCoefNormalization(const RooArgSet& addNormSet = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:62209,log,logging,62209,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,7,['log'],['logging']
Testability," in multi-line collection printing to given amount. ;  . Protected Types; typedef RooArgList * pRooArgList;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddModels. ;  ; void getCompIntList (const RooArgSet *nset, const RooArgSet *iset, pRooArgList &compIntList, Int_t &code, const char *isetRangeName) const;  Check if this configuration was created before. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Retrieve cache element with for calculation of p.d.f value with normalization set nset and integrated over iset in range 'rangeName'. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooResolutionModel; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursive) override;  Forward redirectServers call to our basis function, which is not connected to either resolution model or the physics model. ;  ;  Protected Member Functi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAddModel.html:62978,test,test,62978,doc/master/classRooAddModel.html,https://root.cern,https://root.cern/doc/master/classRooAddModel.html,1,['test'],['test']
Testability," in object receiver. ;  . Protected Member Functions; void AssertIntIdsSize ();  Assert that size of IntId array is compatible with the size of the point array. ;  ;  Protected Member Functions inherited from TEveElement; virtual void AnnihilateRecursively ();  Protected member function called from TEveElement::Annihilate(). ;  ; virtual void PreDeleteElement ();  Externally assigned and controlled user data. ;  ; virtual void RemoveElementsInternal ();  Remove all elements. ;  ;  Protected Member Functions inherited from TPointSet3D; void CopyIds (const TPointSet3D &t);  Copy id objects from point-set 't'. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TAttBBox;  TAttBBox (const TAttBBox &tab);  ; void AssertBBoxExtents (Float_t epsilon=0.005);  Assert extents of all sides of the bounding-box are at least epsilon. ;  ; void BBoxCheckPoint (const Float_t *p);  ; void BBoxCheckPoint (Float_t x, Float_t y, Float_t z);  ; void BBoxClear ();  Remove BBox information. ;  ; void BBoxInit (Float_t infinity=1e6);  Dynamic Float_t[6] X(min,max), Y(min,max), Z(min,max) ;  ; void BBoxZero (Float_t epsilon=0, Float_t x=0, Float_t y=0, Float_t z=0);  Create cube of volume (2*epsilon)^3 at (x,y,z). ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  . Protected Attributes; TArrayI * fIntIds;  ; Int_t fIntIdsPerPoint;  ; TString fTitle;  ;  Protected Attributes inherited from TEveElement; Bool_t fCanEditMainColor;  ; Bool_t fCanEditMainTrans;  ; Bool_t fCanEditMainTransparency;  ; UChar_t fChangeBits;  ; List_t fChildren;  ; TEveCompound * fCompound;  ; UChar_t fCSCBits;  ; Int_t fDenyDestroy;  Counter for top-level list-tree items that prevent automatic destruction. ;  ; Bool_t fDestr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:40151,Assert,Assert,40151,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['Assert'],['Assert']
Testability," in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { fitterFcn()->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { fitterFcn()->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; fitterFcn()->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return fitterFcn()->SetLogFile(logf); }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. Int_t evalCounter() const; { return fitterFcn()->evalCounter() ; }. void zeroEvalCount(); { fitterFcn()->zeroEvalCount() ; }. Int_t getNPar() const; { return fitterFcn()->NDim() ; }. std::ofstream* logfile(); { return fitterFcn()->GetLogFile(); }. Double_t& maxFCN(); { return fitterFcn()->GetMaxFCN() ; }. const RooMinimizerFcn* fitterFcn() const; { return ( fitter()->GetFCN() ? ((RooMinimizerFcn*) fitter()->GetFCN()) : _fcn ) ; }. RooMinimizerFcn* fitterFcn(); { return ( fitter()->GetFCN() ? ((RooMinimizerFcn*) fitter()->GetFCN()) : _fcn ) ; }. » Last changed: Mon Jun 8 16:38:22 2015 » Last generated: 2015-06-08 16:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinimizer.html:13724,log,logf,13724,root/html534/RooMinimizer.html,https://root.cern,https://root.cern/root/html534/RooMinimizer.html,3,['log'],"['logf', 'logfile']"
Testability," in parameters var1 and v2 at up to 6 'sigma' settings; where 'sigma' is calculated as n*n*errorLevel. void profileStart(); Start profiling timer. void profileStop(); Stop profiling timer and report results of last session. void applyCovarianceMatrix(TMatrixDSym& V); Apply results of given external covariance matrix. i.e. propagate its errors; to all RRV parameter representations and give this matrix instead of the; HESSE matrix at the next save() call. RooFitResult* lastMinuitFit(const RooArgList& varList = RooArgList()); Import the results of the last fit performed, interpreting; the fit parameters as the given varList of parameters. RooMinimizer(RooAbsReal& function). void setEvalErrorWall(Bool_t flag); { fitterFcn()->SetEvalErrorWall(flag); }. void setPrintEvalErrors(Int_t numEvalErrors); { fitterFcn()->SetPrintEvalErrors(numEvalErrors); }. void setVerbose(Bool_t flag = kTRUE); { _verbose = flag ; fitterFcn()->SetVerbose(flag); }. void setProfile(Bool_t flag = kTRUE); { _profile = flag ; }. Bool_t setLogFile(const char* logf = 0); { return fitterFcn()->SetLogFile(logf); }. void saveStatus(const char* label, Int_t status); { _statusHistory.push_back(std::pair<std::string,int>(label,status)) ; }. Int_t evalCounter() const; { return fitterFcn()->evalCounter() ; }. void zeroEvalCount(); { fitterFcn()->zeroEvalCount() ; }. Int_t getNPar() const; { return fitterFcn()->NDim() ; }. std::ofstream* logfile(); { return fitterFcn()->GetLogFile(); }. Double_t& maxFCN(); { return fitterFcn()->GetMaxFCN() ; }. const RooMinimizerFcn* fitterFcn() const; { return ( fitter()->GetFCN() ? ((RooMinimizerFcn*) fitter()->GetFCN()) : _fcn ) ; }. RooMinimizerFcn* fitterFcn(); { return ( fitter()->GetFCN() ? ((RooMinimizerFcn*) fitter()->GetFCN()) : _fcn ) ; }. » Last changed: Mon Jun 8 17:46:57 2015 » Last generated: 2015-06-08 17:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooMinimizer.html:14312,log,logf,14312,root/html604/RooMinimizer.html,https://root.cern,https://root.cern/root/html604/RooMinimizer.html,3,['log'],"['logf', 'logfile']"
Testability," in root. ;  ; file  GammaFun.C;   Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  ; file  goftest.C;   GoFTest tutorial macro ;  ; file  hlquantiles.C;  Demo for quantiles (with highlight mode) ;  ; file  kdTreeBinning.C;   kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  ; file  Legendre.C;   Example of first few Legendre Polynomials ;  ; file  Legendre.py;   Example of first few Legendre Polynomials. ;  ; file  LegendreAssoc.C;   Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  ; file  limit.C;   This program demonstrates the computation of 95 % C.L. ;  ; file  mathBeta.C;   Test the TMath::BetaDist and TMath::BetaDistI functions ;  ; file  mathcoreCDF.C;   Example describing how to use the different cumulative distribution functions in ROOT. ;  ; file  mathcoreGenVector.C;   Example macro testing available methods and operation of the GenVector classes. ;  ; file  mathcoreSpecFunc.C;   Example macro describing how to use the special mathematical functions taking full advantage of the precision and speed of the C99 compliant environments. ;  ; file  mathcoreStatFunc.C;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreStatFunc.py;   Example macro showing some major probability density functions in ROOT. ;  ; file  mathcoreVectorCollection.C;   Example showing how to write and read a std vector of ROOT::Math LorentzVector in a ROOT tree. ;  ; file  mathcoreVectorFloatIO.C;   Macro illustrating I/O with Lorentz Vectors of floats The dictionary for LorentzVector of float is not in the libMathCore, therefore is generated when parsed the file with CLING. ;  ; file  mathcoreVectorIO.C;   Example of I/O of a mathcore Lorentz Vectors in a Tree and comparison with a TLorentzVector. ;  ; file  mathGammaNormal.C;   Tutorial illustrating the use of TMath::GammaDi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__math.html:2479,test,testing,2479,doc/master/group__tutorial__math.html,https://root.cern,https://root.cern/doc/master/group__tutorial__math.html,1,['test'],['testing']
Testability," in the TObjectTable. ;  . Private Attributes; Double_t * fA;  [fMaxParam] Fit parameter array ;  ; Double_t fAKAPPA;  ; Double_t * fAMN;  [fMaxParam] Minimum param value ;  ; Double_t * fAMX;  [fMaxParam] Maximum param value ;  ; TString * fANames;  [fMaxParam] Parameter names ;  ; Double_t * fCmPar;  [fMaxParam] parameters of commands ;  ; TString fCword;  Command string. ;  ; Double_t * fDA;  [fMaxParam] Parameter step ;  ; Bool_t fDEBUG;  debug info ;  ; Double_t * fDF;  [fMaxParam] First derivatives of theoretical function ;  ; Int_t fENDFLG;  End flag of fit. ;  ; Double_t fEPS;  fEPS - required precision of parameters. If fEPS<0 then ;  ; Double_t * fEXDA;  [fNED12] experimental data poInt_ter ;  ; Double_t * fGr;  [fMaxParam] Gradients of objective function ;  ; Bool_t fGRAD;  user calculated gradients ;  ; Double_t fGT;  Expected function change in next iteration. ;  ; Int_t fINDFLG [5];  internal flags; ;  ; Int_t fLastFixed;  Last fixed parameter number. ;  ; Bool_t fLogLike;  LogLikelihood flag. ;  ; Int_t fMaxParam;  ; Int_t fNED1;  Number of experimental vectors X=(x1,x2,...xK) ;  ; Int_t fNED12;  fNED1+fNED2 ;  ; Int_t fNED2;  K - Length of vector X plus 2 (for chi2) ;  ; Int_t fNfcn;  Number of FCN calls;. ;  ; Int_t fNlimMul;  fNlimMul - after fNlimMul successful iterations permits four-fold increasing of fPL ;  ; Int_t fNlog;  ; Int_t fNmaxIter;  fNmaxIter - maximum number of iterations ;  ; Int_t fNpar;  fNpar - number of parameters ;  ; Int_t fNstepDec;  fNstepDec - maximum number of step decreasing counter ;  ; Bool_t fNumericDerivatives;  ; Double_t * fParamError;  [fMaxParam] Parameter errors ;  ; Double_t * fPL;  [fMaxParam] Limits for parameters step. If <0, then parameter is fixed ;  ; Double_t * fPL0;  [fMaxParam] Step initial bounds ;  ; Double_t * fR;  [fMaxParam] Correlation factors ;  ; Double_t fRP;  Precision of fit ( machine zero on CDC 6000) quite old yeh? ;  ; Double_t fS;  fS - objective function value (return) ;  ; Double_t * fSu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFumili.html:21748,Log,LogLikelihood,21748,doc/master/classTFumili.html,https://root.cern,https://root.cern/doc/master/classTFumili.html,1,['Log'],['LogLikelihood']
Testability," in the documentation.; The dataframe tutorials json spec files were not displayed properly. Moreover there was no direct correspondence between the code source and the json file. Those files do not have any doc in them. With a direct link to the GitHub source file the dependency between source code and json is now more obvious.; Document how to remove shadow of TPave, as it was not evident (only explanations were hidden here and there in the forum).; Improve the SetFillColorAlpha documentation.; Simplify some graphics examples: arrow.C, crown.C, diamond.C and ellipse.C.; Fix a typo in the documentation of TGraph::SetHighlight in TGraph.cxx.; Change the marker style in the tutorial df014_CSVDataSource.; Remove useless settings in the tutorial scatter.C.; Fix the tutorial h1analysisTreeReader.C.; Fix doxygen formatting in TGNumberEntry.cxx.; Avoid the CDT documentation to appear in the reference guide.; Remove last references to the old ROOT drupal website. Build, Configuration and Testing Infrastructure; Release v6.32.00 is the first one integrated and tested entirely through the new GitHub based build system.; Bugs and Issues fixed in this release; More than 200 items were addressed for this release. The full list is:. [#15621] - Buffer overflow in TBranch::Init; [#15610] - Memory leak in TTree getattr pythonization; [#15590] - Infinite recursion in TFile::Open; [#15460] - TEnum::GetEnum(“B”)->GetUnderlyingType() does not following typedefs; [#15413] - Fails to build with cuDNN version 9; [#15406] - TEnum::GetEnum does not seem to see ‘through’ using statements.; [#15399] - Memory leak with jitted nodes if the execution is never triggered; [#15396] - [TMVA] Pymva test (Keras) failing on 632 and main; [#15370] - Broken link in HS3 printout; [#15340] - Webgraphics: canvas displayed, but many error printed; [#15253] - C++ standard not propagated via CMake anymore; [#15197] - RBDT does not support xgboost inference; [#15156] - Segfault in TMVA::Experimental::SOFIE::RMod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:24556,Test,Testing,24556,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['Test'],['Testing']
Testability," in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. If x is underflow or overflow, attempt to rebin histogram. Int_t FindBin(const char *label); Find bin number with label.; If label is not in the list of labels, add it.; If the number of labels exceeds the number of bins, double the number; of bins via TH1::LabelsInflate (if the histogram can be rebinned). Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TAxis.html:13473,log,log,13473,root/html526/TAxis.html,https://root.cern,https://root.cern/root/html526/TAxis.html,2,['log'],"['log', 'log-equidistant']"
Testability," in the pad or even canvas; when it is released. Int_t FindBin(Double_t x); Find bin number corresponding to abscissa x. If x is underflow or overflow, attempt to rebin histogram. Int_t FindBin(const char* label); Find bin number with label.; If label is not in the list of labels, add it.; If the number of labels exceeds the number of bins, double the number; of bins via TH1::LabelsInflate (if the histogram can be rebinned). Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAxis.html:13527,log,log,13527,root/html528/TAxis.html,https://root.cern,https://root.cern/root/html528/TAxis.html,2,['log'],"['log', 'log-equidistant']"
Testability," in the second one. The total weight of events; in the first histogram is equal to. and. in the second histogram. Let us formulate the hypothesis of identity of; weighted histograms so that there exist r constants p1,...,pr, such that. and also expectation value of weight w1i equal to W1pi and expectation value; of weight w2i equal to W2pi. Weights in both the histograms are random; variables with distributions which can be approximated by a normal; probability distribution for the first histogram; and by a distribution for the second.; Here and are the variances; of w1i and w2i with estimators and respectively.; If the hypothesis of identity is valid, then the maximum likelihood and; Least Square Method estimator of pi,i=1,...,r, is. We may then use the test statistic. and it has approximately a distribution [2].; The normalized or studentised residuals [6]. have approximately a normal distribution with mean equal to 0 and standard; deviation 1. A recommended minimal expected frequency is equal to 10 for; the proposed test. Numerical examples:. The method described herein is now illustrated with an example.; We take a distribution. defined on the interval [4,16]. Events distributed according to the formula; (1) are simulated to create the unweighted histogram. Uniformly distributed; events are simulated for the weighted histogram with weights calculated by; formula (1). Each histogram has the same number of bins: 20. Fig.1 shows; the result of comparison of the unweighted histogram with 200 events; (minimal expected frequency equal to one) and the weighted histogram with; 500 events (minimal expected frequency equal to 25). Fig 1. An example of comparison of the unweighted histogram with 200 events; and the weighted histogram with 500 events:; a) unweighted histogram;; b) weighted histogram;; c) normalized residuals plot;; d) normal Q-Q plot of residuals. The value of the test statistic is equal to; 21.09 with p-value equal to 0.33, therefore the hypothesis of iden",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:51011,test,test,51011,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['test'],['test']
Testability," in this morphing function ;  ; int nSamples () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  retrieve the sample Hint ;  ; void printCouplings () const;  print a set of couplings ;  ; void printEvaluation () const;  print the contributing samples and their respective weights ;  ; void printFlags () const;  print the flags and their current values ;  ; void printMetaArgs (std::ostream &os) const override;  Retrieve the matrix of coefficients. ;  ; void printParameters () const;  print the parameters and their current values ;  ; void printParameters (const char *samplename) const;  print all the parameters and their values in the given sample to the console ;  ; void printPhysics () const;  print the current physics values ;  ; void printSamples () const;  print all the known samples to the console ;  ; void printSampleWeights () const;  print the current sample weights ;  ; void printWeights () const;  print the current sample weights ;  ; void randomizeParameters (double z);  randomize the parameters a bit useful to test and debug fitting ;  ; TMatrixD readMatrixFromFile (const char *fname);  read a matrix from a text file ;  ; TMatrixD readMatrixFromStream (std::istream &stream);  read a matrix from a stream ;  ; void readParameters (TDirectory *f);  read the parameters from the input file ;  ; bool selfNormalized () const;  ; void setCacheAndTrackHints (RooArgSet &) override;  Retrieve the matrix of coefficients. ;  ; void setFlag (const char *name, double value);  set one flag to a specific value ;  ; void setParameter (const char *name, double value);  set one parameter to a specific value ;  ; void setParameter (const char *name, double value, double min, double max);  set one parameter to a specific value and range ;  ; void setParameter (const char *name, double value, double min, double max, double error);  set one parameter to a specific value and range ;  ; void setParameterConstant (const char *pa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:11042,test,test,11042,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,1,['test'],['test']
Testability," in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square ; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:15125,log,logical,15125,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,4,['log'],['logical']
Testability," indent = """") const; virtual voidRooAbsBinning::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsBinning::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsBinning::printValue(ostream& os) const; virtual Int_tRooAbsBinning::rawBinNumber(Double_t x) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRooAbsBinning::removeHook(RooAbsRealLValue&) const; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetMax(Double_t xhi); virtual voidsetMin(Double_t xlo); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetRange(Double_t xlo, Double_t xhi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRangeBinning.html:6944,Test,TestBit,6944,root/html530/RooRangeBinning.html,https://root.cern,https://root.cern/root/html530/RooRangeBinning.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," index state of a RooSimultaneous. RooAbsTestStatistic(const RooAbsTestStatistic& other, const char* name = 0); Copy constructor. ~RooAbsTestStatistic(); Destructor. Double_t evaluate() const; Calculates and return value of test statistic. If the test statistic; is calculated from on a RooSimultaneous, the test statistic calculation; is performed separately on each simultaneous p.d.f component and associated; data and then combined. If the test statistic calculation is parallelized; partitions are calculated in nCPU processes and a posteriori combined. Bool_t initialize(); One-time initialization of the test statistic. Setup; infrastructure for simultaneous p.d.f processing and/or; parallelized processing if requested. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Forward server redirect calls to component test statistics. void printCompactTreeHook(ostream& os, const char* indent = """"); Add extra information on component test statistics when printing; itself as part of a tree structure. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Forward constant term optimization management calls to component; test statistics. void setMPSet(Int_t setNum, Int_t numSets); Set MultiProcessor set number identification of this instance. void initMPMode(RooAbsReal* real, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize multi-processor calculation mode. Create component test statistics in separate; processed that are connected to this process through a RooAbsRealMPFE front-end class. void initSimMode(RooSimultaneous* pdf, RooAbsData* data, const RooArgSet* projDeps, const char* rangeName, const char* addCoefRangeName); Initialize simultaneous p.d.f processing mode. Strip simultaneous; p.d.f into individual components, split dataset in subset; matching each component and create component test sta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsTestStatistic.html:43591,test,test,43591,root/html602/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsTestStatistic.html,2,['test'],['test']
Testability," index); Int_tGetPopulationSize() const; const vector<TMVA::GeneticRange*>&GetRanges() const; vector<TMVA::GeneticRange*>&GetRanges(); voidGiveHint(vector<Double_t>& hint, Double_t fitness = 0); virtual TClass*IsA() const; voidMakeChildren(); voidMakeCopies(int number); voidMutate(Double_t probability = 20, Int_t startIndex = 0, Bool_t near = kFALSE, Double_t spread = 0.10000000000000001, Bool_t mirror = kFALSE); voidNextGeneration(); TMVA::GeneticPopulation&operator=(const TMVA::GeneticPopulation&); voidPrint(Int_t untilIndex = -1); voidPrint(ostream& out, Int_t utilIndex = -1); voidSetRandomSeed(UInt_t seed = 0); virtual voidShowMembers(TMemberInspector& insp) const; voidSort(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTrimPopulation(); vector<Double_t>VariableDistribution(Int_t varNumber); TH1F*VariableDistribution(Int_t varNumber, Int_t bins, Int_t min, Int_t max). private:. TMVA::MsgLogger&Log() const; TMVA::GeneticGenesMakeSex(TMVA::GeneticGenes male, TMVA::GeneticGenes female). Data Members; private:. vector<TMVA::GeneticGenes>fGenePoolthe ""genePool"" where the individuals of the current generation are stored; TMVA::MsgLogger*fLoggermessage logger; Int_tfPopulationSizeLimit; TRandom3*fRandomGeneratorrandom Generator for this population; vector<TMVA::GeneticRange*>fRangescontains the ranges inbetween the values of the coefficients have to be. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticPopulation(const vector<TMVA::Interval*>& ranges, Int_t size, UInt_t seed = 0); Constructor. ~GeneticPopulation(); destructor. void SetRandomSeed(UInt_t seed = 0); the random seed of the random generator. void MakeCopies(int number); produces offspring which is are copies of their parents; Parameters:; int number : the number of the last individual to be copied. void MakeChildren(); does what the name says,... it creates children out of members of the; current generation; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__GeneticPopulation.html:1854,Log,Log,1854,root/html602/TMVA__GeneticPopulation.html,https://root.cern,https://root.cern/root/html602/TMVA__GeneticPopulation.html,2,['Log'],['Log']
Testability," info in optfb, if available, or reparsing opt).; Feedback requirements are in the form <previous_option>fb=name1,name2,name3,... <next_option>; <previous_option>feedback=name1,name2,name3,...;<next_option>; The special name 'stats' triggers feedback about events and packets. The separator from the next option is either a ' ' or a ';'. Called interanally by TProof::Process. ; Definition at line 5232 of file TProof.cxx. ◆ SetInputDataFile(). void TProof::SetInputDataFile ; (; const char * ; datafile). Set the file to be used to optimally distribute the input data objects. ; If the file exists the object in the file are added to those in the fInputData list. If the file path is null, a default file will be created at the moment of sending the processing request with the content of the fInputData list. See also SendInputDataFile. ; Definition at line 9585 of file TProof.cxx. ◆ SetLogLevel(). void TProof::SetLogLevel ; (; Int_t ; level, . UInt_t ; mask = TProofDebug::kAll . ). Set server logging level. ; Definition at line 7079 of file TProof.cxx. ◆ SetManager(). void TProof::SetManager ; (; TProofMgr * ; mgr). Set manager and schedule its destruction after this for clean operations. ; Definition at line 1301 of file TProof.cxx. ◆ SetMaxDrawQueries(). void TProof::SetMaxDrawQueries ; (; Int_t ; max). Set max number of draw queries whose results are saved. ; Definition at line 2115 of file TProof.cxx. ◆ SetMonitor(). void TProof::SetMonitor ; (; TMonitor * ; mon = 0, . Bool_t ; on = kTRUE . ). private . Activate (on == TRUE) or deactivate (on == FALSE) all sockets monitored by 'mon'. ; Definition at line 2408 of file TProof.cxx. ◆ SetParallel(). Int_t TProof::SetParallel ; (; Int_t ; nodes = -1, . Bool_t ; random = kFALSE . ). Tell PROOF how many slaves to use in parallel. ; Returns the number of parallel slaves. Returns -1 in case of error. ; Definition at line 7140 of file TProof.cxx. ◆ SetParallelSilent(). Int_t TProof::SetParallelSilent ; (; Int_t ; nodes, . Bool_t ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:143886,log,logging,143886,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['logging']
Testability," information purposes; 1552 dsi.SetNormalization( normMode );; 1553 // !! these will be overwritten later by the 'rescaled' ones if; 1554 // NormMode != None !!!; 1555 dsi.SetTrainingSumSignalWeights(trainingSumSignalWeights);; 1556 dsi.SetTrainingSumBackgrWeights(trainingSumBackgrWeights);; 1557 dsi.SetTestingSumSignalWeights(testingSumSignalWeights);; 1558 dsi.SetTestingSumBackgrWeights(testingSumBackgrWeights);; 1559 ; 1560 ; 1561 if (normMode == ""NONE"") {; 1562 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""No weight renormalisation applied: use original global and event weights"" << Endl;; 1563 return;; 1564 }; 1565 //changed by Helge 27.5.2013 What on earth was done here before? I still remember the idea behind this which apparently was; 1566 //NOT understood by the 'programmer' :) .. the idea was to have SAME amount of effective TRAINING data for signal and background.; 1567 // Testing events are totally irrelevant for this and might actually skew the whole normalisation!!; 1568 else if (normMode == ""NUMEVENTS"") {; 1569 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1570 << ""\tWeight renormalisation mode: \""NumEvents\"": renormalises all event classes "" << Endl;; 1571 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1572 << "" such that the effective (weighted) number of events in each class equals the respective "" << Endl;; 1573 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1574 << "" number of events (entries) that you demanded in PrepareTrainingAndTestTree(\""\"",\""nTrain_Signal=.. )"" << Endl;; 1575 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1576 << "" ... i.e. such that Sum[i=1..N_j]{w_i} = N_j, j=0,1,2..."" << Endl;; 1577 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1578 << "" ... (note that N_j is the sum of TRAINING events (nTrain_j...with j=Signal,Background.."" << Endl;; 1579 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1580 << "" ..... Testing events are not renormalised",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:71564,Test,Testing,71564,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,2,"['Log', 'Test']","['Log', 'Testing']"
Testability," initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2010-09-23 19:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html:4023,Test,TestInterval,4023,root/html528/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html528/ROOT__Math__GSLMinimizer1D.html,3,"['Test', 'test']","['Test', 'TestInterval', 'test']"
Testability," initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-07-04 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ROOT__Math__GSLMinimizer1D.html:4025,Test,TestInterval,4025,root/html530/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html530/ROOT__Math__GSLMinimizer1D.html,3,"['Test', 'test']","['Test', 'TestInterval', 'test']"
Testability," initial search interval [xlow, xup], with a guess for the location of the minimum xmin.; The condition : \f$ f(xlow) > f(xmin) < f(xup)\f$ must be satisfied. int Iterate(). Perform a minimizer iteration and; if an unexepcted problem occurr then an error code will be returned. double XMinimum() const. Return current estimate of the position of the minimum. double XLower() const. Return current lower bound of the minimization interval. double XUpper() const. Return current upper bound of the minimization interval. double FValMinimum() const. Return function value at current estimate of the minimum. double FValLower() const. Return function value at current lower bound of the minimization interval. double FValUpper() const. Return function value at current upper bound of the minimization interval. bool Minimize(int maxIter, double absTol, double relTol). Find minimum position iterating until convergence specified by the absolute and relative tolerance or; the maximum number of iteration is reached; Return true is result is successfull; \@param maxIter maximum number of iteration; \@param absTol desired absolute error in the minimum position; \@param absTol desired relative error in the minimum position. int Iterations() const. Return number of iteration used to find minimum. int Status() const. Return status of last minimization. { return fStatus; }. const char * Name() const. Return name of minimization algorithm. int TestInterval(double xlow, double xup, double epsAbs, double epsRel). Test convergence of the interval.; The test returns success if; \f[; |x_{min}-x_{truemin}| < epsAbs + epsRel *x_{truemin}; \f]. » Author: L. Moneta, A. Zsenei 08/2005 » Copyright (c) 2004 moneta, CERN/PH-SFT *; » Last changed: root/mathmore:$Id: GSLMinimizer1D.h 32583 2010-03-12 09:57:42Z moneta $ » Last generated: 2011-11-03 20:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ROOT__Math__GSLMinimizer1D.html:4025,Test,TestInterval,4025,root/html532/ROOT__Math__GSLMinimizer1D.html,https://root.cern,https://root.cern/root/html532/ROOT__Math__GSLMinimizer1D.html,3,"['Test', 'test']","['Test', 'TestInterval', 'test']"
Testability," inittime=0., Float_t proctime=0.);  Set processing info. ;  ; void SetRecvTime (Float_t recvtime);  ; void SetTermTime (Float_t termtime);  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool fArchived;  whether the query has been archived ;  ; Long64_t fBytes;  number of bytes processed ;  ; bool fDraw;  true if draw action query ;  ; TDatime fEnd;  time when processing ended ;  ; Long64_t fEntries;  number of entries processed ;  ; bool fFinalized;  whether Terminate has been run ;  ; Long64_t fFirst;  first entry processed ;  ; Float_t fInitTime;  Initialization time (seconds) (millisec precision) ;  ; TList * fInputList;  input list; contains also data sets, entry list, ... ;  ; TString fLibList;  blank-separated list of libs loaded at fStart ;  ; TMacro * fLogFile;  file with log messages from the query ;  ; Float_t fMergeTime;  Merging time (seconds) (millisec precision) ;  ; Int_t fNumMergers;  Number of submergers. ;  ; Int_t fNumWrks;  Number of workers at start. ;  ; TString fOptions;  processing options + aclic mode (< opt >#< aclic_mode >) ;  ; TList * fOutputList;  output list ;  ; TString fParList;  colon-separated list of PAR loaded at fStart ;  ; Float_t fPrepTime;  Prepare time (seconds) (millisec precision) ;  ; Float_t fProcTime;  Processing time (seconds) (millisec precision) ;  ; Float_t fRecvTime;  Transfer-to-client time (seconds) (millisec precision) ;  ; TString fResultFile;  URL of the file where results have been archived. ;  ; TMacro * fSelecHdr;  selector header file ;  ; TMacro * fSelecImp;  selector implementation file ;  ; Int_t fSeqNum;  query unique sequential number ;  ; TDatime fStart;  time when processing started ;  ; EQueryStatus fStatus;  query status ;  ; Float_t fTermTime;  Terminate time (seconds) (millisec precision) ;  ; Float_t fUsedCP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQueryResult.html:14042,log,log,14042,doc/master/classTQueryResult.html,https://root.cern,https://root.cern/doc/master/classTQueryResult.html,1,['log'],['log']
Testability," inline . Definition at line 73 of file SamplingDistPlot.h. ◆ SetLegend(). void RooStats::SamplingDistPlot::SetLegend ; (; TLegend * ; l). inline . set legend ; Definition at line 56 of file SamplingDistPlot.h. ◆ SetLineColor(). void SamplingDistPlot::SetLineColor ; (; Color_t ; color, . const SamplingDistribution * ; samplDist = nullptr . ). Sets line color for given sampling distribution and fill color for the associated shaded TH1F. ; Definition at line 392 of file SamplingDistPlot.cxx. ◆ SetLineStyle(). void SamplingDistPlot::SetLineStyle ; (; Style_t ; style, . const SamplingDistribution * ; samplDist = nullptr . ). Definition at line 448 of file SamplingDistPlot.cxx. ◆ SetLineWidth(). void SamplingDistPlot::SetLineWidth ; (; Width_t ; lwidth, . const SamplingDistribution * ; samplDist = nullptr . ). Definition at line 429 of file SamplingDistPlot.cxx. ◆ SetLogXaxis(). void RooStats::SamplingDistPlot::SetLogXaxis ; (; bool ; lx). inline . changes plot to log scale on x axis ; Definition at line 91 of file SamplingDistPlot.h. ◆ SetLogYaxis(). void RooStats::SamplingDistPlot::SetLogYaxis ; (; bool ; ly). inline . changes plot to log scale on y axis ; Definition at line 93 of file SamplingDistPlot.h. ◆ SetMarkerColor(). void SamplingDistPlot::SetMarkerColor ; (; Color_t ; color, . const SamplingDistribution * ; samplDist = nullptr . ). Definition at line 486 of file SamplingDistPlot.cxx. ◆ SetMarkerSize(). void SamplingDistPlot::SetMarkerSize ; (; Size_t ; size, . const SamplingDistribution * ; samplDist = nullptr . ). Definition at line 505 of file SamplingDistPlot.cxx. ◆ SetMarkerStyle(). void SamplingDistPlot::SetMarkerStyle ; (; Style_t ; style, . const SamplingDistribution * ; samplDist = nullptr . ). Definition at line 467 of file SamplingDistPlot.cxx. ◆ SetSampleWeights(). void SamplingDistPlot::SetSampleWeights ; (; const SamplingDistribution * ; samplingDist). protected . Determine if the sampling distribution has weights and store them. ; Definition at l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html:25200,log,log,25200,doc/master/classRooStats_1_1SamplingDistPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistPlot.html,1,['log'],['log']
Testability," inline . return pointer to internal array ; Definition at line 633 of file SMatrix.icc. ◆ Array() [2/2]. template<class T , unsigned int D1, unsigned int D2, class R > . const T * ROOT::Math::SMatrix< T, D1, D2, R >::Array. inline . return read-only pointer to internal array ; Definition at line 630 of file SMatrix.icc. ◆ At() [1/2]. template<class T , unsigned int D1, unsigned int D2, class R > . T & ROOT::Math::SMatrix< T, D1, D2, R >::At ; (; unsigned int ; i, . unsigned int ; j . ). inline . read/write access to matrix element with indices starting from 0. ; Function will check index values and it will assert if they are wrong ; Definition at line 660 of file SMatrix.icc. ◆ At() [2/2]. template<class T , unsigned int D1, unsigned int D2, class R > . const T & ROOT::Math::SMatrix< T, D1, D2, R >::At ; (; unsigned int ; i, . unsigned int ; j . ); const. inline . read only access to matrix element, with indices starting from 0. ; Function will check index values and it will assert if they are wrong ; Definition at line 653 of file SMatrix.icc. ◆ begin() [1/2]. template<class T , unsigned int D1, unsigned int D2, class R > . T * ROOT::Math::SMatrix< T, D1, D2, R >::begin. inline . STL iterator interface. ; Definition at line 670 of file SMatrix.icc. ◆ begin() [2/2]. template<class T , unsigned int D1, unsigned int D2, class R > . const T * ROOT::Math::SMatrix< T, D1, D2, R >::begin. inline . STL const_iterator interface. ; Definition at line 680 of file SMatrix.icc. ◆ Col(). template<class T , unsigned int D1, unsigned int D2, class R > . SVector< T, D1 > ROOT::Math::SMatrix< T, D1, D2, R >::Col ; (; unsigned int ; thecol); const. return a full Matrix column as a vector (copy the content in a new vector) ; Definition at line 590 of file SMatrix.icc. ◆ Det(). template<class T , unsigned int D1, unsigned int D2, class R > . bool ROOT::Math::SMatrix< T, D1, D2, R >::Det ; (; T & ; det). inline . determinant of square Matrix via Dfact. ; Return true when the calculatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html:19474,assert,assert,19474,doc/master/classROOT_1_1Math_1_1SMatrix.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1SMatrix.html,1,['assert'],['assert']
Testability," inlineoverridevirtual . Reimplemented from TObject.; Definition at line 57 of file TPave.h. ◆ GetShadowColor(). Int_t TPave::GetShadowColor ; (; ); const. inline . Definition at line 58 of file TPave.h. ◆ GetX1NDC(). Double_t TPave::GetX1NDC ; (; ); const. inline . Definition at line 59 of file TPave.h. ◆ GetX2NDC(). Double_t TPave::GetX2NDC ; (; ); const. inline . Definition at line 60 of file TPave.h. ◆ GetY1NDC(). Double_t TPave::GetY1NDC ; (; ); const. inline . Definition at line 61 of file TPave.h. ◆ GetY2NDC(). Double_t TPave::GetY2NDC ; (; ); const. inline . Definition at line 62 of file TPave.h. ◆ Hash(). ULong_t TPave::Hash ; (; ); const. inlineoverridevirtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TPave::HashULong_t Hash() const overrideReturn hash value for this object.Definition TPave.h:63; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Definition at line 63 of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPave.html:24096,Test,TestBit,24096,doc/master/classTPave.html,https://root.cern,https://root.cern/doc/master/classTPave.html,1,['Test'],['TestBit']
Testability," inlineprivate . Definition at line 87 of file ResultsClassification.h. ◆ operator[](). const std::vector< Float_t > & TMVA::ResultsClassification::operator[] ; (; Int_t ; ievt); const. inlineoverridevirtual . Implements TMVA::Results.; Definition at line 72 of file ResultsClassification.h. ◆ Resize(). void TMVA::ResultsClassification::Resize ; (; Int_t ; entries). inline . Definition at line 58 of file ResultsClassification.h. ◆ SetValue(). void TMVA::ResultsClassification::SetValue ; (; Float_t ; value, . Int_t ; ievt, . Bool_t ; type . ). set MVA response ; Definition at line 69 of file ResultsClassification.cxx. ◆ Streamer(). void TMVA::ResultsClassification::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TMVA::Results. ◆ StreamerNVirtual(). void TMVA::ResultsClassification::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file ResultsClassification.h. Member Data Documentation. ◆ fLogger. MsgLogger* TMVA::ResultsClassification::fLogger. mutableprivate . ! message logger ; Definition at line 86 of file ResultsClassification.h. ◆ fMvaValues. std::vector<Float_t> TMVA::ResultsClassification::fMvaValues. private . mva values (Results) ; Definition at line 83 of file ResultsClassification.h. ◆ fMvaValuesTypes. std::vector<Bool_t> TMVA::ResultsClassification::fMvaValuesTypes. private . mva values type(sig/bkg) (Results) ; Definition at line 84 of file ResultsClassification.h. ◆ fRet. std::vector<Float_t> TMVA::ResultsClassification::fRet. mutableprivate . return val ; Definition at line 85 of file ResultsClassification.h. Libraries for TMVA::ResultsClassification:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ResultsClassification.h; tmva/tmva/src/ResultsClassification.cxx. TMVAResultsClassification. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html:15534,log,logger,15534,doc/master/classTMVA_1_1ResultsClassification.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsClassification.html,1,['log'],['logger']
Testability," inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 94 of file TApplicationServer.h. ◆ DeclFileName(). static const char * TApplicationServer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 94 of file TApplicationServer.h. ◆ ErrorHandler(). void TApplicationServer::ErrorHandler ; (; Int_t ; level, . Bool_t ; abort, . const char * ; location, . const char * ; msg . ). staticprotected . The error handler function. ; It prints the message on stderr and if abort is set it aborts the application. ; Definition at line 1088 of file TApplicationServer.cxx. ◆ ExecLogon(). void TApplicationServer::ExecLogon ; (; ). private . Execute logon macro's. ; There are three levels of logon macros that will be executed: the system logon etc/system.rootlogon.C, the global user logon ~/.rootlogon.C and the local ./.rootlogon.C. For backward compatibility also the logon macro as specified by the Rint.Logon environment setting, by default ./rootlogon.C, will be executed. No logon macros will be executed when the system is started with the -n option. ; Definition at line 1277 of file TApplicationServer.cxx. ◆ GetHost(). const char * TApplicationServer::GetHost ; (; ); const. inline . Definition at line 73 of file TApplicationServer.h. ◆ GetOptions(). void TApplicationServer::GetOptions ; (; Int_t * ; argc, . char ** ; argv . ). overridevirtual . Get and handle command line options. ; Fixed format: ""protocol url"" ; Reimplemented from TApplication.; Definition at line 449 of file TApplicationServer.cxx. ◆ GetPort(). Int_t TApplicationServer::GetPort ; (; ); const. inline . Definition at line 71 of file TApplicationServer.h. ◆ GetProtocol(). Int_t TApplicationServer::GetProtocol ; (; ); const. inline . Definition at line 70 of file TApplicationServer.h. ◆ GetSocket(). TSocket * TApplicationServer::GetSocket ; (; ); const. inline . Definition at line 74 of file TApplicationServer.h. ◆ GetUser(). const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplicationServer.html:25490,Log,Logon,25490,doc/master/classTApplicationServer.html,https://root.cern,https://root.cern/doc/master/classTApplicationServer.html,1,['Log'],['Logon']
Testability," inlinevirtual . Definition at line 435 of file TH1.h. ◆ GetCenter(). void TH1::GetCenter ; (; Double_t * ; center); const. virtual . Fill array with center of bins for 1D histogram Better to use h1.GetXaxis()->GetCenter(center) ; Definition at line 9174 of file TH1.cxx. ◆ GetContour(). Int_t TH1::GetContour ; (; Double_t * ; levels = nullptr). virtual . Return contour values into array levels if pointer levels is non zero. ; The function returns the number of contour levels. see GetContourLevel to return one contour only ; Definition at line 8411 of file TH1.cxx. ◆ GetContourLevel(). Double_t TH1::GetContourLevel ; (; Int_t ; level); const. virtual . Return value of contour number level. ; Use GetContour to return the array of all contour levels ; Definition at line 8430 of file TH1.cxx. ◆ GetContourLevelPad(). Double_t TH1::GetContourLevelPad ; (; Int_t ; level); const. virtual . Return the value of contour number ""level"" in Pad coordinates. ; ie: if the Pad is in log scale along Z it returns le log of the contour level value. See GetContour to return the array of all contour levels ; Definition at line 8440 of file TH1.cxx. ◆ GetCumulative(). TH1 * TH1::GetCumulative ; (; Bool_t ; forward = kTRUE, . const char * ; suffix = ""_cumulative"" . ); const. Return a pointer to a histogram containing the cumulative content. ; The cumulative can be computed both in the forward (default) or backward direction; the name of the new histogram is constructed from the name of this histogram with the suffix ""suffix"" appended provided by the user. If not provided a default suffix=""_cumulative"" is used.; The cumulative distribution is formed by filling each bin of the resulting histogram with the sum of that bin and all previous (forward == kTRUE) or following (forward = kFALSE) bins.; Note: while cumulative distributions make sense in one dimension, you may not be getting what you expect in more than 1D because the concept of a cumulative distribution is much trickier to define; mak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:154333,log,log,154333,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,2,['log'],['log']
Testability," input variables, it is "" << Endl;; 1742 Log() << ""advisable to scrutinize the separation power of the variables,"" << Endl;; 1743 Log() << ""and to remove the weakest ones. If some among the input variables"" << Endl;; 1744 Log() << ""can be described by a single cut (e.g., because signal tends to be"" << Endl;; 1745 Log() << ""larger than background), this can be indicated to MethodCuts via"" << Endl;; 1746 Log() << ""the \""Fsmart\"" options (see option string). Choosing this option"" << Endl;; 1747 Log() << ""reduces the number of requirements for the variable from 2 (min/max)"" << Endl;; 1748 Log() << ""to a single one (TMVA finds out whether it is to be interpreted as"" << Endl;; 1749 Log() << ""min or max)."" << Endl;; 1750 Log() << Endl;; 1751 Log() << gTools().Color(""bold"") << ""--- Performance tuning via configuration options:"" << gTools().Color(""reset"") << Endl;; 1752 Log() << """" << Endl;; 1753 Log() << bold << ""Monte Carlo sampling:"" << resbold << Endl;; 1754 Log() << """" << Endl;; 1755 Log() << ""Apart form the \""Fsmart\"" option for the variables, the only way"" << Endl;; 1756 Log() << ""to improve the MC sampling is to increase the sampling rate. This"" << Endl;; 1757 Log() << ""is done via the configuration option \""MC_NRandCuts\"". The execution"" << Endl;; 1758 Log() << ""time scales linearly with the sampling rate."" << Endl;; 1759 Log() << """" << Endl;; 1760 Log() << bold << ""Genetic Algorithm:"" << resbold << Endl;; 1761 Log() << """" << Endl;; 1762 Log() << ""The algorithm terminates if no significant fitness increase has"" << Endl;; 1763 Log() << ""been achieved within the last \""nsteps\"" steps of the calculation."" << Endl;; 1764 Log() << ""Wiggles in the ROC curve or constant background rejection of 1"" << Endl;; 1765 Log() << ""indicate that the GA failed to always converge at the true maximum"" << Endl;; 1766 Log() << ""fitness. In such a case, it is recommended to broaden the search "" << Endl;; 1767 Log() << ""by increasing the population size (\""popSize\"") and to give the GA "" <<",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:69042,Log,Log,69042,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,5,['Log'],['Log']
Testability," inputTensor = batch.GetInput();; 1548 auto outputMatrix = batch.GetOutput();; 1549 auto weights = batch.GetWeights();; 1550 // should we apply droput to the loss ??; 1551 valError += deepNet.Loss(inputTensor, outputMatrix, weights, inTraining, includeRegularization);; 1552 }; 1553 // normalize loss to number of batches and add regularization term; 1554 Double_t regTerm = (includeRegularization) ? deepNet.RegularizationTerm() : 0.0;; 1555 valError /= (Double_t)(nValidationSamples / settings.batchSize);; 1556 valError += regTerm;; 1557 ; 1558 //Log the loss value; 1559 fTrainHistory.AddValue(""valError"",nTrainEpochs,valError);; 1560 ; 1561 t2 = std::chrono::system_clock::now();; 1562 ; 1563 // checking for convergence; 1564 if (valError < minValError) {; 1565 convergenceCount = 0;; 1566 } else {; 1567 convergenceCount += settings.testInterval;; 1568 }; 1569 ; 1570 // copy configuration when reached a minimum error; 1571 if (valError < minValError ) {; 1572 // Copy weights from deepNet to fNet; 1573 Log() << std::setw(10) << nTrainEpochs; 1574 << "" Minimum Test error found - save the configuration "" << Endl;; 1575 for (size_t i = 0; i < deepNet.GetDepth(); ++i) {; 1576 fNet->GetLayerAt(i)->CopyParameters(*deepNet.GetLayerAt(i));; 1577 // if (i == 0 && deepNet.GetLayerAt(0)->GetWeights().size() > 1) {; 1578 // Architecture_t::PrintTensor(deepNet.GetLayerAt(0)->GetWeightsAt(0), "" input weights"");; 1579 // Architecture_t::PrintTensor(deepNet.GetLayerAt(0)->GetWeightsAt(1), "" state weights"");; 1580 // }; 1581 }; 1582 // Architecture_t::PrintTensor(deepNet.GetLayerAt(1)->GetWeightsAt(0), "" cudnn weights"");; 1583 // ArchitectureImpl_t::PrintTensor(fNet->GetLayerAt(1)->GetWeightsAt(0), "" cpu weights"");; 1584 ; 1585 minValError = valError;; 1586 }; 1587 else if ( minValError <= 0. ); 1588 minValError = valError;; 1589 ; 1590 if (!computeLossInTraining) {; 1591 trainingError = 0.0;; 1592 // Compute training error.; 1593 for (auto batch : trainingData) {; 1594 auto inputTensor =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:62162,test,testInterval,62162,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,3,"['Log', 'Test', 'test']","['Log', 'Test', 'testInterval']"
Testability," inserts discriminating variable in data set info ;  ; void AddVariable (const TString &expression, const TString &title, const TString &unit, char type='F', Double_t min=0, Double_t max=0);  user inserts discriminating variable in data set info ;  ; void AddVariablesArray (const TString &expression, int size, char type='F', Double_t min=0, Double_t max=0);  user inserts discriminating array of variables in data set info in case input tree provides an array of values ;  ; TTree * CreateEventAssignTrees (const TString &name);  create the data assignment tree (for event-wise data assignment by user) ;  ; DataInputHandler & DataInput ();  ; TH2 * GetCorrelationMatrix (const TString &className);  returns the correlation matrix of datasets ;  ; DataSetInfo & GetDataSetInfo ();  ; const DataSetInfo & GetDefaultDataSetInfo ();  ; virtual TClass * IsA () const;  ; DataLoader * MakeCopy (TString name);  Copy method use in VI and CV. ;  ; void MakeKFoldDataSet (CvSplit &s);  Function required to split the training and testing datasets into a number of folds. ;  ; void PrepareFoldDataSet (CvSplit &s, UInt_t foldNumber, Types::ETreeType tt=Types::kTraining);  Function for assigning the correct folds to the testing or training set. ;  ; void PrepareTrainingAndTestTree (const TCut &cut, const TString &splitOpt);  prepare the training and test trees -> same cuts for signal and background ;  ; void PrepareTrainingAndTestTree (const TCut &cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString &otherOpt=""SplitMode=Random:!V"");  prepare the training and test trees ;  ; void PrepareTrainingAndTestTree (const TCut &cut, Int_t Ntrain, Int_t Ntest=-1);  prepare the training and test trees kept for backward compatibility ;  ; void PrepareTrainingAndTestTree (TCut sigcut, TCut bkgcut, const TString &splitOpt);  prepare the training and test trees ;  ; void RecombineKFoldDataSet (CvSplit &s, Types::ETreeType tt=Types::kTraining);  Recombines the dataset. ;  ; voi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:4490,test,testing,4490,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['testing']
Testability," int i, double* g) const; shared_ptr<ROOT::Fit::UnBinData>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::DataPtr() const; virtual voidGradient(const double* x, double* g) const; ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(); ROOT::Math::IBaseFunctionMultiDimROOT::Math::IBaseFunctionMultiDim::IBaseFunctionMultiDim(const ROOT::Math::IBaseFunctionMultiDim&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>& f); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const shared_ptr<ROOT::Fit::UnBinData>& data, const shared_ptr<ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction>& func, int weight = 0, bool extended = false); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IBaseFunctionMultiDim>(const ROOT::Fit::UnBinData& data, const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction& func, int weight = 0, bool extended = false); virtual const ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction&ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunction() const; shared_ptr<ROOT::Fit::BasicFCN<ROOT::Math::IGradientFunctionMultiDim,ROOT::Fit::UnBinData>::IModelFunction>ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDim,ROOT::Fit::UnBinData>::ModelFunctionPtr() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IBaseFunctionMultiDim>::NPoints() const; doubleR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html:2794,Log,LogLikelihoodFCN,2794,root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html604/ROOT__Fit__LogLikelihoodFCN_-p0Math__IBaseFunctionMultiDim_.html,1,['Log'],['LogLikelihoodFCN']
Testability," integral of the ROC curve, also known as the area under curve; 856/// (AUC), for a given method.; 857///; 858/// Argument iClass specifies the class to generate the ROC curve in a; 859/// multiclass setting. It is ignored for binary classification.; 860///; 861 ; 862Double_t TMVA::Factory::GetROCIntegral(TString datasetname, TString theMethodName, UInt_t iClass, Types::ETreeType type); 863{; 864 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 865 Log() << kERROR << Form(""DataSet = %s not found in methods map."", datasetname.Data()) << Endl;; 866 return 0;; 867 }; 868 ; 869 if (!this->HasMethod(datasetname, theMethodName)) {; 870 Log() << kERROR << Form(""Method = %s not found with Dataset = %s "", theMethodName.Data(), datasetname.Data()); 871 << Endl;; 872 return 0;; 873 }; 874 ; 875 std::set<Types::EAnalysisType> allowedAnalysisTypes = {Types::kClassification, Types::kMulticlass};; 876 if (allowedAnalysisTypes.count(this->fAnalysisType) == 0) {; 877 Log() << kERROR << Form(""Can only generate ROC integral for analysis type kClassification. and kMulticlass.""); 878 << Endl;; 879 return 0;; 880 }; 881 ; 882 TMVA::ROCCurve *rocCurve = GetROC(datasetname, theMethodName, iClass, type);; 883 if (!rocCurve) {; 884 Log() << kFATAL; 885 << Form(""ROCCurve object was not created in Method = %s not found with Dataset = %s "", theMethodName.Data(),; 886 datasetname.Data()); 887 << Endl;; 888 return 0;; 889 }; 890 ; 891 Int_t npoints = TMVA::gConfig().fVariablePlotting.fNbinsXOfROCCurve + 1;; 892 Double_t rocIntegral = rocCurve->GetROCIntegral(npoints);; 893 delete rocCurve;; 894 ; 895 return rocIntegral;; 896}; 897 ; 898////////////////////////////////////////////////////////////////////////////////; 899/// Argument iClass specifies the class to generate the ROC curve in a; 900/// multiclass setting. It is ignored for binary classification.; 901///; 902/// Returns a ROC graph for a given method, or nullptr on error.; 903///; 904/// Note: Evaluation of the given method mu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:35552,Log,Log,35552,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability," integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t TMath::Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t TMath::Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t TMath::LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator TMath::LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t TMath::LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator TMath::LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t TMath::LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t TMath::Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t TMath::Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t TMath::Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t TMath::LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t TMath::LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; template<typename T > ; T TMath::MaxElement (Long64_t n, const T *a);  Returns maximum of array a of length n. ;  ; template<typename Iterator > ; Double_t TMath::Mean (Iterator first, Iterator last);  Returns the weighted mean of an array defined by the iterators. ;  ; template<typename Iterator , typename WeightIterator > ; Double_t TMath::Mean (Iterator first, Iterator last, WeightIterator wfirst);  Returns the weighted mean of an array defined by the first and last iterators. ;  ; template<typename T > ; Double_t TMath::Mean (Long64_t n, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:12174,Log,Log,12174,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,2,"['Log', 'log']","['Log', 'logarithm']"
Testability," interface (static method) The number of sampling points are taken from the TGraph. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Bool_t DefaultAddToGlobalList (Bool_t on=kTRUE);  Static method to add/avoid to add automatically functions to the global list (gROOT->GetListOfFunctions() ) After having called this static method, all the functions created afterwards will follow the desired behaviour. ;  ; static Double_t DerivativeError ();  Static function returning the error of the last call to the of Derivative's functions. ;  ; static TF1 * GetCurrent ();  Static function returning the current function being processed. ;  ; static void InitStandardFunctions ();  Create the basic function objects. ;  ; static Bool_t RejectedPoint ();  See TF1::RejectPoint above. ;  ; static void RejectPoint (Bool_t reject=kTRUE);  Static function to set the global flag to reject points the fgRejectPoint global flag is tested by all fit functions if TRUE the point is not included in the fit. ;  ; static void SetCurrent (TF1 *f1);  Static function setting the current function. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttLine; static TClass *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF1.html:42269,test,tested,42269,doc/master/classTF1.html,https://root.cern,https://root.cern/doc/master/classTF1.html,4,['test'],['tested']
Testability," interfaces; 33// and have still them in the documentation; 34#define MATH_UNUSED(var) (void)var; 35 ; 36 ; 37namespace ROOT {; 38 ; 39 namespace Math {; 40 ; 41 /**; 42 namespace defining Utility functions needed by mathcore; 43 */; 44 namespace Util {; 45 ; 46 /**; 47 Utility function for conversion to strings; 48 */; 49 template <class T>; 50 std::string ToString(const T &val); 51 {; 52 std::ostringstream buf;; 53 buf << val;; 54 ; 55 std::string ret = buf.str();; 56 return ret;; 57 }; 58 ; 59 /// safe evaluation of log(x) with a protections against negative or zero argument to the log; 60 /// smooth linear extrapolation below function values smaller than epsilon; 61 /// (better than a simple cut-off); 62 ; 63 template<class T>; 64 inline T EvalLog(T x) {; 65 static const T epsilon = T(2.0 * std::numeric_limits<double>::min());; 66#ifdef R__HAS_VECCORE; 67 T logval = vecCore::Blend<T>(x <= epsilon, x / epsilon + std::log(epsilon) - T(1.0), std::log(x));; 68#else; 69 T logval = x <= epsilon ? x / epsilon + std::log(epsilon) - T(1.0) : std::log(x);; 70#endif; 71 return logval;; 72 }; 73 ; 74 } // end namespace Util; 75 ; 76 /// \class KahanSum; 77 /// The Kahan summation is a compensated summation algorithm, which significantly reduces numerical errors; 78 /// when adding a sequence of finite-precision floating point numbers.; 79 /// This is done by keeping a separate running compensation (a variable to accumulate small errors).; 80 ///; 81 /// ### Auto-vectorisable accumulation; 82 /// This class can internally use multiple accumulators (template parameter `N`).; 83 /// When filled from a collection that supports index access from a *contiguous* block of memory,; 84 /// compilers such as gcc, clang and icc can auto-vectorise the accumulation. This happens by cycling; 85 /// through the internal accumulators based on the value of ""`index % N`"", so `N` accumulators can be filled from a block; 86 /// of `N` numbers in a single instruction.; 87 ///; 88 /// The usage of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Util_8h_source.html:1967,log,log,1967,doc/master/Util_8h_source.html,https://root.cern,https://root.cern/doc/master/Util_8h_source.html,3,['log'],"['log', 'logval']"
Testability," interpreter to funnel the Update(); 2517 // through the main thread) when the gThreadXAR mechanism does seemingly; 2518 // the same?; 2519 gInterpreter->Execute(this, IsA(), ""Update"", """");; 2520 return;; 2521 }; 2522 ; 2523 R__LOCKGUARD(gROOTMutex);; 2524 ; 2525 fUpdating = kTRUE;; 2526 ; 2527 if (!fCanvasImp->PerformUpdate(kFALSE)) {; 2528 ; 2529 if (!IsBatch()) FeedbackMode(kFALSE); // Goto double buffer mode; 2530 ; 2531 if (!UseGL() || fGLDevice == -1) PaintModified(); // Repaint all modified pad's; 2532 ; 2533 Flush(); // Copy all pad pixmaps to the screen; 2534 ; 2535 SetCursor(kCross);; 2536 }; 2537 ; 2538 fUpdating = kFALSE;; 2539}; 2540 ; 2541////////////////////////////////////////////////////////////////////////////////; 2542/// Asynchronous pad update.; 2543/// In case of web-based canvas triggers update of the canvas on the client side,; 2544/// but does not wait that real update is completed. Avoids blocking of caller thread.; 2545/// Have to be used if called from other web-based widget to avoid logical dead-locks.; 2546/// In case of normal canvas just canvas->Update() is performed.; 2547 ; 2548void TCanvas::UpdateAsync(); 2549{; 2550 fUpdated = kTRUE;; 2551 ; 2552 if (IsWeb()); 2553 fCanvasImp->PerformUpdate(kTRUE);; 2554 else; 2555 Update();; 2556}; 2557 ; 2558////////////////////////////////////////////////////////////////////////////////; 2559/// Used by friend class TCanvasImp.; 2560 ; 2561void TCanvas::DisconnectWidget(); 2562{; 2563 fCanvasID = 0;; 2564 fContextMenu = nullptr;; 2565}; 2566 ; 2567////////////////////////////////////////////////////////////////////////////////; 2568/// Check whether this canvas is to be drawn in grayscale mode.; 2569 ; 2570Bool_t TCanvas::IsGrayscale(); 2571{; 2572 return TestBit(kIsGrayscale);; 2573}; 2574 ; 2575////////////////////////////////////////////////////////////////////////////////; 2576/// Set whether this canvas should be painted in grayscale, and re-paint; 2577/// it if necessary.; 2578 ; 2579void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:82603,log,logical,82603,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['log'],['logical']
Testability," is a TFormula created with ""++""; 242 // hyperplane are not yet existing in TFormula; 243 if (fFunc->IsLinear()) {; 244 int ip = 0;; 245 fLinear = true;; 246 while (fLinear && ip < fFunc->GetNpar()) {; 247 fLinear &= (fFunc->GetLinearPart(ip) != nullptr);; 248 ip++;; 249 }; 250 }; 251 // distinguish case of polynomial functions and linear functions; 252 if (fDim == 1 && fFunc->GetNumber() >= 300 && fFunc->GetNumber() < 310) {; 253 fLinear = true;; 254 fPolynomial = true;; 255 }; 256 }; 257 ; 258 template<class T>; 259 WrappedMultiTF1Templ<T>::WrappedMultiTF1Templ(const WrappedMultiTF1Templ<T> &rhs) :; 260 BaseParamFunc(rhs),; 261 fLinear(rhs.fLinear),; 262 fPolynomial(rhs.fPolynomial),; 263 fOwnFunc(rhs.fOwnFunc),; 264 fFunc(rhs.fFunc),; 265 fDim(rhs.fDim); 266 //fParams(rhs.fParams); 267 {; 268 // copy constructor; 269 if (fOwnFunc) SetAndCopyFunction(rhs.fFunc);; 270 }; 271 ; 272 template<class T>; 273 WrappedMultiTF1Templ<T> &WrappedMultiTF1Templ<T>::operator= (const WrappedMultiTF1Templ<T> &rhs); 274 {; 275 // Assignment operator; 276 if (this == &rhs) return *this; // time saving self-test; 277 fLinear = rhs.fLinear;; 278 fPolynomial = rhs.fPolynomial;; 279 fOwnFunc = rhs.fOwnFunc;; 280 fDim = rhs.fDim;; 281 //fParams = rhs.fParams;; 282 return *this;; 283 }; 284 ; 285 template <class T>; 286 void WrappedMultiTF1Templ<T>::ParameterGradient(const T *x, const double *par, T *grad) const; 287 {; 288 // evaluate the gradient of the function with respect to the parameters; 289 //IMPORTANT NOTE: TF1::GradientPar returns 0 for fixed parameters to avoid computing useless derivatives; 290 // BUT the TLinearFitter wants to have the derivatives also for fixed parameters.; 291 // so in case of fLinear (or fPolynomial) a non-zero value will be returned for fixed parameters; 292 ; 293 if (!fLinear) {; 294 // need to set parameter values; 295 fFunc->SetParameters(par);; 296 // no need to call InitArgs (it is called in TF1::GradientPar); 297 double prec = this->GetDerivPrecisi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html:9805,test,test,9805,doc/master/WrappedMultiTF1_8h_source.html,https://root.cern,https://root.cern/doc/master/WrappedMultiTF1_8h_source.html,1,['test'],['test']
Testability," is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_th1.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:160760,Test,Test,160760,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['Test'],['Test']
Testability," is a variant of hsimple.C but using a TTree instead of a TNtuple ;  tree2.C This example illustrates how to make a Tree from variables or arrays in a C struct ;  tree2a.C This example is the same as tree2.C, but uses a class instead of a C-struct ;  tree3.C Example of a Tree where branches are variable length arrays A second Tree is created and filled in parallel ;  tree4.C This example writes a tree with objects of the class Event ;  treefriend.C Illustrates how to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unfold;  testUnfold1.C Test program for the classes TUnfold and related ;  testUnfold2.C Test program as an example for a user specific regularisation scheme ;  testUnfold3.C Simple Test program for the class TUnfoldDensity ;  testUnfold4.C Test program for the class TUnfoldSys ;  testUnfold5a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHand",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:159934,Test,Test,159934,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Test'],['Test']
Testability," is decoded, for available options see ""DeclareOptions"". ;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  Read the weights (BDT coefficients). ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *parent);  Reads the BDT from the xml file. ;  ; void Reset (void);  Reset the method, as if it had just been instantiated (forget all training etc.). ;  ; void SetAdaBoostBeta (Double_t b);  ; void SetBaggedSampleFraction (Double_t f);  ; void SetMaxDepth (Int_t d);  ; void SetMinNodeSize (Double_t sizeInPercent);  ; void SetMinNodeSize (TString sizeInPercent);  ; void SetNodePurityLimit (Double_t l);  ; void SetNTrees (Int_t d);  ; void SetShrinkage (Double_t s);  ; virtual void SetTuneParameters (std::map< TString, Double_t > tuneParameters);  Set the tuning parameters according to the argument. ;  ; void SetUseNvars (Int_t n);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Double_t TestTreeQuality (DecisionTree *dt);  Test the tree quality.. in terms of Misclassification. ;  ; void Train (void);  BDT training. ;  ; void WriteMonitoringHistosToFile (void) const;  Here we could write some histograms created during the processing to the output file. ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:7890,Test,TestTreeQuality,7890,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,2,['Test'],"['Test', 'TestTreeQuality']"
Testability," is defined only for both n and m > 0; 186 if (n < 0 || m < 0); 187 return std::numeric_limits<double>::quiet_NaN();; 188 ; 189 double z = n*(x-x0)/(m + n*(x-x0));; 190 // fox z->1 and large a and b IB looses precision use complement function; 191 if (z > 0.9 && n > 1 && m > 1); 192 return 1. - fdistribution_cdf_c(x,n,m,x0);; 193 ; 194 return ROOT::Math::inc_beta(z, .5*n, .5*m);; 195 }; 196 ; 197 ; 198 double gamma_cdf_c(double x, double alpha, double theta, double x0); 199 {; 200 return ROOT::Math::inc_gamma_c(alpha, (x-x0)/theta);; 201 }; 202 ; 203 ; 204 double gamma_cdf(double x, double alpha, double theta, double x0); 205 {; 206 return ROOT::Math::inc_gamma(alpha, (x-x0)/theta);; 207 }; 208 ; 209 ; 210 double lognormal_cdf_c(double x, double m, double s, double x0); 211 {; 212 double z = (std::log((x-x0))-m)/(s*kSqrt2);; 213 if (z > 1.) return 0.5*ROOT::Math::erfc(z);; 214 else return 0.5*(1.0 - ROOT::Math::erf(z));; 215 }; 216 ; 217 ; 218 double lognormal_cdf(double x, double m, double s, double x0); 219 {; 220 double z = (std::log((x-x0))-m)/(s*kSqrt2);; 221 if (z < -1.) return 0.5*ROOT::Math::erfc(-z);; 222 else return 0.5*(1.0 + ROOT::Math::erf(z));; 223 }; 224 ; 225 ; 226 double normal_cdf_c(double x, double sigma, double x0); 227 {; 228 double z = (x-x0)/(sigma*kSqrt2);; 229 if (z > 1.) return 0.5*ROOT::Math::erfc(z);; 230 else return 0.5*(1.-ROOT::Math::erf(z));; 231 }; 232 ; 233 ; 234 double normal_cdf(double x, double sigma, double x0); 235 {; 236 double z = (x-x0)/(sigma*kSqrt2);; 237 if (z < -1.) return 0.5*ROOT::Math::erfc(-z);; 238 else return 0.5*(1.0 + ROOT::Math::erf(z));; 239 }; 240 ; 241 ; 242 double tdistribution_cdf_c(double x, double r, double x0); 243 {; 244 double p = x-x0;; 245 double sign = (p>0) ? 1. : -1;; 246 return .5 - .5*ROOT::Math::inc_beta(p*p/(r + p*p), .5, .5*r)*sign;; 247 }; 248 ; 249 ; 250 double tdistribution_cdf(double x, double r, double x0); 251 {; 252 double p = x-x0;; 253 double sign = (p>0) ? 1. : -1;; 254 return .5 + .",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html:7109,log,log,7109,doc/master/ProbFuncMathCore_8cxx_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8cxx_source.html,1,['log'],['log']
Testability," is given – this number should be at least 2; Xvtx: array [nxy] of X coordinates of vertices; Yvtx: array [nxy] of Y coordinates of vertices; z: array [nz] of z plane positions; scale: array [nz] of scale factors; x0: array [nz] of x offsets; y0: array [nz] of y offsets. All XTRU shapes are correctly rendered in wire mode but can encounter difficulty when rendered as a solid with hidden surfaces. These exceptions occur if the outline shape is not a convex polygon. Both the X3D and OpenGL renderers expect polygons to be convex. The OpenGL spec specifies that points defining a polygon using the GL_POLYGON primitive may be rendered as the convex hull of that set.; Solid rendering under X3D can also give unexpected artifacts if the combination of x-y-z offsets and scales for the segments are chosen in such a manner that they represent a concave shape when sliced along a plane parallel to the z axis.; Choosing sets of point that represent a malformed polygon is not supported, but testing for such a condition is not implemented and thus it is left to the user to avoid this mistake. Definition at line 22 of file TXTRU.h. Public Member Functions;  TXTRU ();  TXTRU shape - default constructor. ;  ;  TXTRU (const char *name, const char *title, const char *material, Int_t nyx, Int_t nz);  TXTRU shape - normal constructor. ;  ;  TXTRU (const TXTRU &xtru);  TXTRU copy constructor. ;  ;  ~TXTRU () override;  TXTRU destructor deallocates arrays. ;  ; void Copy (TObject &xtru) const override;  TXTRU Copy method. ;  ; virtual void DefineSection (Int_t secNum, Float_t z, Float_t scale=1., Float_t x0=0., Float_t y0=0.);  Set z section iz information expand size of array if necessary. ;  ; virtual void DefineVertex (Int_t pointNum, Float_t x, Float_t y);  Set vertex point ipt to (x,y) expand size of array if necessary. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute the distance from point px,py to a TXTRU by calculating the closest approach to each corner. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTXTRU.html:2027,test,testing,2027,doc/master/classTXTRU.html,https://root.cern,https://root.cern/doc/master/classTXTRU.html,1,['test'],['testing']
Testability," is highlighted; 1375 {; 1376 TIter next(gROOT->GetListOfCanvases());; 1377 TCanvas *tc;; 1378 while ((tc = (TCanvas *)next())); 1379 tc->Update();; 1380 }; 1381 ; 1382 //if (pad->GetGLDevice() != -1 && fSelected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402 ; 1403 case kButton3Down:; 1404 // popup context menu; 1405 pad = Pick(px, py, prevSelObj);; 1406 if (!pad) return;; 1407 ; 1408 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1409 ; 1410 if (fContextMenu && fSelected && !fSelected->TestBit(kNoContextMenu) &&; 1411 !pad->TestBit(kNoContextMenu) && !TestBit(kNoContextMenu)); 1412 fContextMenu->Popup(px, py, fSelected, this, pad);; 1413 ; 1414 break;; 1415 ; 1416 case kButton3Motion:; 1417 break;; 1418 ; 1419 case kButton3Up:; 1420 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1421 break;; 1422 ; 1423 case kButton3Double:; 1424 break;; 1425 ; 1426 case kKeyPress:; 1427 if (!fSelectedPad || !fSelected) return;; 1428 gPad = fSelectedPad; // don't use cd() because we won't draw in pad; 1429 // we will only use its coordinate system; 1430 fSelected->ExecuteEvent(event, px, py);; 1431 ; 1432 RunAutoExec();; 1433 ; 1434 break;; 1435 ; 1436 case kButton1Shift:; 1437 // Try to select; 1438 pad = Pick(px, py, prevSelObj);; 1439 ; 1440 if (!pad) return;; 1441 ; 1442 EnterLeave(prevSelPad, prevSelObj);; 1443 ; 1444 gPad = pad; // don't use cd() we will use the current; 1445 // canvas via the GetCanvas member and not via; 1446 // gPad->GetCanvas; 1447 if (fSelected) {; 1448 fSelected->ExecuteEvent(event, px, py);; 1449 RunAutoExec();; 1450 }; 1451 bre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:44487,Test,TestBit,44487,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability," is ignored for binary classification.; 999///; 1000/// NOTE: The ROC curve is 1 vs. all where the given class is considered signal; 1001/// and the others considered background. This is ok in binary classification; 1002/// but in in multi class classification, the ROC surface is an N dimensional; 1003/// shape, where N is number of classes - 1.; 1004 ; 1005TMultiGraph *TMVA::Factory::GetROCCurveAsMultiGraph(TString datasetname, UInt_t iClass, Types::ETreeType type); 1006{; 1007 UInt_t line_color = 1;; 1008 ; 1009 TMultiGraph *multigraph = new TMultiGraph();; 1010 ; 1011 MVector *methods = fMethodsMap[datasetname.Data()];; 1012 for (auto *method_raw : *methods) {; 1013 TMVA::MethodBase *method = dynamic_cast<TMVA::MethodBase *>(method_raw);; 1014 if (method == nullptr) {; 1015 continue;; 1016 }; 1017 ; 1018 TString methodName = method->GetMethodName();; 1019 UInt_t nClasses = method->DataInfo().GetNClasses();; 1020 ; 1021 if (this->fAnalysisType == Types::kMulticlass && iClass >= nClasses) {; 1022 Log() << kERROR; 1023 << Form(""Given class number (iClass = %i) does not exist. There are %i classes in dataset."", iClass,; 1024 nClasses); 1025 << Endl;; 1026 continue;; 1027 }; 1028 ; 1029 TString className = method->DataInfo().GetClassInfo(iClass)->GetName();; 1030 ; 1031 TGraph *graph = this->GetROCCurve(datasetname, methodName, false, iClass, type);; 1032 graph->SetTitle(methodName);; 1033 ; 1034 graph->SetLineWidth(2);; 1035 graph->SetLineColor(line_color++);; 1036 graph->SetFillColor(10);; 1037 ; 1038 multigraph->Add(graph);; 1039 }; 1040 ; 1041 if (multigraph->GetListOfGraphs() == nullptr) {; 1042 Log() << kERROR << Form(""No metohds have class %i defined."", iClass) << Endl;; 1043 return nullptr;; 1044 }; 1045 ; 1046 return multigraph;; 1047}; 1048 ; 1049////////////////////////////////////////////////////////////////////////////////; 1050/// Draws ROC curves for all methods booked with the factory for a given class; 1051/// onto a canvas.; 1052///; 1053/// Argument",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:41864,Log,Log,41864,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability," is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum.html:52317,log,logical,52317,root/html602/TSpectrum.html,https://root.cern,https://root.cern/root/html602/TSpectrum.html,2,['log'],['logical']
Testability," is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum.html:51158,log,logical,51158,root/html528/TSpectrum.html,https://root.cern,https://root.cern/root/html528/TSpectrum.html,4,['log'],['logical']
Testability," is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCBShape.html:24915,Test,Tests,24915,doc/master/classRooCBShape.html,https://root.cern,https://root.cern/doc/master/classRooCBShape.html,3,['Test'],['Tests']
Testability," is the same formula ( (6) in the paper), and also shown in this preprint; http://arxiv.org/pdf/0804.0380v1.pdf; Binned data are considered as un-binned data; with identical observation happening in the bin center. option is a character string to specify options; ""D"" Put out a line of ""Debug"" printout; ""T"" Return the normalized A-D test statistic. Note1: Underflow and overflow are not considered in the test; Note2: The test works only for un-weighted histogram (i.e. representing counts); Note3: The histograms are not required to have the same X axis; Note4: The test works only for 1-dimensional histograms. Double_t AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; Same funciton as above but returning also the test statistic value. Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; this histogram and h2, using Kolmogorov test.; Note that the KolmogorovTest (KS) test should in theory be used only for unbinned data; and not for binned data as in the case of the histogram (see NOTE 3 below).; So, before using this method blindly, read the NOTE 3. Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure:; make pseudoexperiments based on random values from the parent; distribution and compare the KS distance of the pseudoexperiment; to the parent distribution. Bin the KS distances in a histogram,; and then take the integral of all the KS values above the value; obtained from the original data to Monte Carlo distribution.; The number of pseudo-experiments nEXPT is currently fixed at 1000.; The function returns the integral.; (thanks to Ben K",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:115037,test,test,115037,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,3,['test'],['test']
Testability," it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2364 of file TMath.cxx. ◆ LaplaceDistI(). Double_t TMath::LaplaceDistI ; (; Double_t ; x, . Double_t ; alpha = 0, . Double_t ; beta = 1 . ). Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ; By default, alpha=0, beta=1 This distribution is known under different names, most common is double exponential distribution, but it also appears as the two-tailed exponential or the bilateral exponential distribution ; Definition at line 2380 of file TMath.cxx. ◆ Ldexp(). Double_t TMath::Ldexp ; (; Double_t ; x, . Int_t ; exp . ). inline . Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ; Definition at line 715 of file TMath.h. ◆ Ln10(). constexpr Double_t TMath::Ln10 ; (; ). constexpr . Natural log of 10 (to convert log to ln) ; Definition at line 100 of file TMath.h. ◆ LnGamma(). Double_t TMath::LnGamma ; (; Double_t ; z). Computation of ln[gamma(z)] for all z. ; C.Lanczos, SIAM Journal of Numerical Analysis B1 (1964), 86.; The accuracy of the result is better than 2e-10.; AuthorNvE 14-nov-1998 UU-SAP Utrecht ; Definition at line 509 of file TMath.cxx. ◆ LocMax() [1/2]. template<typename Iterator > . Iterator TMath::LocMax ; (; Iterator ; first, . Iterator ; last . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found. ; Definition at line 1030 of file TMath.h. ◆ LocMax() [2/2]. template<typename T > . Long64_t TMath::LocMax ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the maximum element. ; If more than one element is maximum returns first found.; Implement here since it is faster (see comment in LocMin function) ; Definition at line 1012 of file TMath.h. ◆ LocMin() [1/2]. template<typename Iterator > . Iterator TMath::LocMin ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:58410,log,log,58410,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,2,['log'],['log']
Testability," it used ????; RooAbsData*fData; RooArgSetfNuisParamsRooArgSet specifying nuisance parameters for interval; RooArgSetfNullParamsRooArgSet specifying null parameters for hypothesis test; RooArgSetfPOIRooArgSet specifying parameters of interest for interval; RooAbsPdf*fPdf; Double_tfSizesize of the test (eg. specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SetTestSize(Double_t size). SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetNullModel(const RooStats::ModelConfig& ). void SetAlternateModel(const RooStats::ModelConfig& ). void SetPdf(RooAbsPdf& pdf); specific setting - keep for convenience- some of them could be removed; Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetNullParameters(const RooArgSet& set); set parameter values for the null if using a common PDF. {fNullParams.removeAll(); fNullParams.add(set);}. void SetAlternateParameters(const RooArgSet& set); set parameter values for the alternate if using a common PDF. {fAlternateParams.removeAll(); fAlternateParam",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:4275,test,test,4275,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,4,['test'],['test']
Testability," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPython.html:4694,Test,Test,4694,root/html604/TPython.html,https://root.cern,https://root.cern/root/html604/TPython.html,4,['Test'],['Test']
Testability," it were a macro (effectively an; execfile in __main__), and create Cling equivalents for any newly available; python classes. void ExecScript(const char* name, int argc = 0, const char** argv = 0); Execute a python stand-alone script, with argv CLI arguments. example of use:; const char* argv[] = { ""1"", ""2"", ""3"" };; TPython::ExecScript( ""test.py"", sizeof(argv)/sizeof(argv[0]), argv );. Bool_t Exec(const char* cmd); Execute a python statement (e.g. ""import ROOT""). const TPyReturn Eval(const char* expr); Evaluate a python expression (e.g. ""ROOT.TBrowser()""). Caution: do not hold on to the return value: either store it in a builtin; type (implicit casting will work), or in a pointer to a ROOT object (explicit; casting to a void* is required). Bool_t Bind(TObject* object, const char* label); Bind a ROOT object with, at the python side, the name ""label"". void Prompt(); Enter an interactive python session (exit with ^D). State is preserved; between successive calls. Bool_t ObjectProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of ObjectProxy type or any; derived type. Bool_t ObjectProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is ObjectProxy type. Bool_t MethodProxy_Check(PyObject* pyobject); Test whether the type of the given pyobject is of MethodProxy type or any; derived type. Bool_t MethodProxy_CheckExact(PyObject* pyobject); Test whether the type of the given pyobject is MethodProxy type. void* ObjectProxy_AsVoidPtr(PyObject* pyobject); Extract the object pointer held by the ObjectProxy pyobject. PyObject* ObjectProxy_FromVoidPtr(void* addr, const char* classname, Bool_t python_owns = kFALSE); Bind the addr to a python object of class defined by classname. virtual ~TPython(); { }. » Last changed: root/pyroot:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPython.html:4532,Test,Test,4532,root/html602/TPython.html,https://root.cern,https://root.cern/root/html602/TPython.html,4,['Test'],['Test']
Testability," it's name to get the correct real data offsets; 3608 ////////////////////////////////////////////////////////////////////; 3609 ; 3610 const bool isToplevelCollection = (this == GetMother() && (fType == 3 || fType == 4));; 3611 if( stlParentName.Length() && (dynamic_cast<TBranchSTL*>(fParent) || isToplevelCollection)); 3612 {; 3613 if( !strncmp( stlParentName.Data(), dataName.Data(), stlParentName.Length()-1 ); 3614 && dataName[ stlParentName.Length() ] == '.' ); 3615 dataName.Remove( 0, stlParentName.Length()+1 );; 3616 }; 3617 ; 3618 // Find our offset in our parent class using; 3619 // a lookup by name in the dictionary meta info; 3620 // for our parent class.; 3621 ; 3622 if (alternateElement) {; 3623 Ssiz_t dotpos = dataName.Last('.');; 3624 Ssiz_t endpos = dataName.Length();; 3625 if (dotpos != kNPOS) ++dotpos; else dotpos = 0;; 3626 dataName.Replace(dotpos,endpos-dotpos,subBranchElement->GetFullName());; 3627 }; 3628 TRealData* rd = pClass->GetRealData(dataName);; 3629 if (rd && (!rd->TestBit(TRealData::kTransient) || alternateElement)) {; 3630 // -- Data member exists in the dictionary meta info, get the offset.; 3631 // If we are using an alternateElement, it is the target of a rule; 3632 // and might be indeed transient.; 3633 offset = rd->GetThisOffset();; 3634 } else if (subBranchElement->TestBit(TStreamerElement::kWholeObject)) {; 3635 // We are a rule with no specific target, it applies to the whole; 3636 // object, let's set the offset to zero; 3637 offset = 0;; 3638 } else {; 3639 // -- No dictionary meta info for this data member, it must no; 3640 // longer exist; 3641 if (fEntries == 0) {; 3642 // ... unless we creating the branch in which case; 3643 // we have an internal error.; 3644 if (pClass->GetListOfRealData()->GetEntries() == 0) {; 3645 // We are probably missing the ShowMember, let's; 3646 // just issue an error.; 3647 Error(""InitializeOffsets"",; 3648 ""Could not find the real data member '%s' when constructing the branch '%s' [Likely miss",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:132519,Test,TestBit,132519,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Test'],['TestBit']
Testability," it.; This enables the viewer to be connected to a client which sends potentially; millions of objects, and only accept those that are of interest at a certain; time, caching the relatively small number of CPU/memory costly logical shapes,; and retaining/discarding the physical placements as required. The viewer may; decide to force the client to rebuild (republish) the scene (via; a TPad; repaint; at; present),; and; thus; collect; these; objects if; the; internal viewer state changes. It does this presently by forcing a repaint; on the attached TPad object - hence the reason for putting all publishing to; the viewer in the attached pad objects Paint() method. We will likely remove; this requirement in the future, indicating the rebuild request via a normal; ROOT signal, which the client can detect. Physical IDs; TVirtualViewer3D provides for two methods of object addition:virtual Int_t AddObject(const; TBuffer3D & buffer, Bool_t * addChildren = 0); virtual Int_t AddObject(UInt_t physicalID, const TBuffer3D & buffer, Bool_t * addChildren = 0); If you use the first (simple) case a viewer using logical/physical pairs; will generate IDs for each physical object internally. In the second you; can specify; a unique identifier from the client, which allows the viewer to be more; efficient. It can now cache both logical and physical objects, and only discard; physical; objects no longer of interest as part of scene rebuilds. Child Objects; In many geometries there is a rigid containment hierarchy, and so if the viewer; is not interested in a certain object due to limits/size then it will also; not be interest in any of the contained branch of descendents. Both AddObject(); methods have an addChildren parameter. The viewer will complete this (if passed); indicating if children (contained within the one just sent) are worth adding. Recyling TBuffer3D ; Once add AddObject() has been called, the contents are copied to the viewer; internally. You are free to destroy this objec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:10084,log,logical,10084,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,6,['log'],['logical']
Testability," ivar=0; ivar<nvars; ivar++); 747 eventCounts[i].varAvLength[ivar] = 0;; 748 }; 749 ; 750 //Bool_t haveArrayVariable = kFALSE;; 751 //Bool_t *varIsArray = new Bool_t[nvars];; 752 ; 753 // If there are NaNs in the tree:; 754 // => warn if used variables/cuts/weights contain nan (no problem if event is cut out); 755 // => fatal if cut value is nan or (event not cut out and nans somewhere); 756 // Count & collect all these warnings/errors and output them at the end.; 757 std::map<TString, int> nanInfWarnings;; 758 std::map<TString, int> nanInfErrors;; 759 ; 760 // if we work with chains we need to remember the current tree if; 761 // the chain jumps to a new tree we have to reset the formulas; 762 for (UInt_t cl=0; cl<nclasses; cl++) {; 763 ; 764 //Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Create training and testing trees -- looping over class \"""" << dsi.GetClassInfo(cl)->GetName() << ""\"" ..."" << Endl;; 765 ; 766 EventStats& classEventCounts = eventCounts[cl];; 767 ; 768 // info output for weights; 769 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 770 << ""\tWeight expression for class \'"" << dsi.GetClassInfo(cl)->GetName() << ""\': \""""; 771 << dsi.GetClassInfo(cl)->GetWeight() << ""\"""" << Endl;; 772 ; 773 // used for chains only; 774 TString currentFileName("""");; 775 ; 776 std::vector<TreeInfo>::const_iterator treeIt(dataInput.begin(dsi.GetClassInfo(cl)->GetName()));; 777 for (;treeIt!=dataInput.end(dsi.GetClassInfo(cl)->GetName()); ++treeIt) {; 778 ; 779 // read first the variables; 780 std::vector<Float_t> vars(nvars);; 781 std::vector<Float_t> tgts(ntgts);; 782 std::vector<Float_t> vis(nvis);; 783 TreeInfo currentInfo = *treeIt;; 784 ; 785 Log() << kINFO << ""Building event vectors for type "" << currentInfo.GetTreeType() << "" "" << currentInfo.GetClassName() << Endl;; 786 ; 787 EventVector& event_v = eventsmap[currentInfo.GetTreeType()].at(cl);; 788 ; 789 Bool_t isChain = (TString(""TChain"") == currentInfo.GetTree()->ClassName());; 790 curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:32154,Log,Log,32154,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability," kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooMinuit.html:8465,log,log,8465,root/html532/RooMinuit.html,https://root.cern,https://root.cern/root/html532/RooMinuit.html,1,['log'],['log']
Testability," kClassThreadSlot ; kFileThreadSlot ; kPerfStatsThreadSlot ; kMaxThreadSlot . Definition at line 19 of file TThreadSlots.h. Function Documentation. ◆ AddClass() [1/2]. void ROOT::AddClass ; (; const char * ; cname, . Version_t ; id, . const std::type_info & ; info, . DictFuncPtr_t ; dict, . Int_t ; pragmabits . ). Global function called by the ctor of a class's init class (see the ClassImp macro). ; Definition at line 843 of file TClassTable.cxx. ◆ AddClass() [2/2]. void ROOT::AddClass ; (; const char * ; cname, . Version_t ; id, . DictFuncPtr_t ; dict, . Int_t ; pragmabits . ). ◆ AddClassAlternate(). void ROOT::AddClassAlternate ; (; const char * ; normName, . const char * ; alternate . ). Global function called by GenerateInitInstance. ; (see the ClassImp macro). ; Definition at line 865 of file TClassTable.cxx. ◆ CallRecursiveRemoveIfNeeded(). void ROOT::CallRecursiveRemoveIfNeeded ; (; TObject & ; obj). inline . call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true. ; Note: this reset the kMustCleanup bit to allow harmless multiple call to this function. ; Definition at line 393 of file TROOT.h. ◆ Class_ShowMembers(). void ROOT::Class_ShowMembers ; (; TClass * ; cl, . const void * ; obj, . TMemberInspector & ; insp . ). Indirect call to the implementation of ShowMember allowing [forward] declaration with out a full definition of the TClass class. ; Definition at line 546 of file TClass.cxx. ◆ ClassTableHash(). static UInt_t ROOT::ClassTableHash ; (; const char * ; name, . UInt_t ; size . ). static . Definition at line 230 of file TClassTable.cxx. ◆ CompressionSettings() [1/2]. int ROOT::CompressionSettings ; (; RCompressionSetting::EAlgorithm ; algorithm, . int ; compressionLevel . ). ◆ CompressionSettings() [2/2]. int ROOT::CompressionSettings ; (; ROOT::ECompressionAlgorithm ; algorithm, . int ; compressionLevel . ). Deprecated name, do not use: . ◆ CreateClass() [1/2]. TClass * ROOT::CreateClass ; (; const char * ; cname, . Vers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v626/namespaceROOT.html:20789,Test,TestBit,20789,doc/v626/namespaceROOT.html,https://root.cern,https://root.cern/doc/v626/namespaceROOT.html,1,['Test'],['TestBit']
Testability," kClassification = 0,; 128 kRegression,; 129 kMulticlass,; 130 kNoAnalysisType,; 131 kMaxAnalysisType; 132 };; 133 ; 134 enum ESBType {; 135 kSignal = 0, ///< Never change this number - it is elsewhere assumed to be zero !; 136 kBackground,; 137 kSBBoth,; 138 kMaxSBType,; 139 kTrueType; 140 };; 141 ; 142 enum ETreeType {; 143 kTraining = 0,; 144 kTesting,; 145 kMaxTreeType, ///< also used as temporary storage for trees not yet assigned for testing;training...; 146 kValidation, ///< these are placeholders... currently not used, but could be moved ""forward"" if; 147 kTrainingOriginal ///< ever needed; 148 };; 149 ; 150 enum EBoostStage {; 151 kBoostProcBegin=0,; 152 kBeforeTraining,; 153 kBeforeBoosting,; 154 kAfterBoosting,; 155 kBoostProcEnd; 156 };; 157 ; 158 public:; 159 ; 160 static Types& Instance();; 161 static void DestroyInstance();; 162 ~Types();; 163 ; 164 Types::EMVA GetMethodType( const TString& method ) const;; 165 TString GetMethodName( Types::EMVA method ) const;; 166 ; 167 Bool_t AddTypeMapping(Types::EMVA method, const TString& methodname);; 168 ; 169 private:; 170 ; 171 Types();; 172#if !defined _MSC_VER; 173 static std::atomic<Types*> fgTypesPtr;; 174#else; 175 static Types* fgTypesPtr;; 176#endif; 177 ; 178 private:; 179 ; 180 std::map<TString, TMVA::Types::EMVA> fStr2type; ///< types-to-text map; 181 mutable MsgLogger* fLogger; ///<! message logger; 182 MsgLogger& Log() const { return *fLogger; }; 183 ; 184 };; 185}; 186 ; 187#endif; RtypesCore.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; UInt_tunsigned int UInt_tDefinition RtypesCore.h:46; TString.h; TMVA::MsgLoggerostringstream derivative to redirect and format outputDefinition MsgLogger.h:57; TMVA::TypesSingleton class for Global types used by TMVA.Definition Types.h:71; TMVA::Types::DestroyInstancestatic void DestroyInstance()""destructor"" of the single instanceDefinition Types.cxx:90; TMVA::Types::EBoostStageEBoostStageDefinition Types.h:150; TMVA::Types::kBoostProcBegin@ kBoostProcBeginDef",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html:4485,log,logger,4485,doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,2,"['Log', 'log']","['Log', 'logger']"
Testability," kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); voidSetQueryRunning(TProofQueryResult* pq); Int_tSetupWorkers(Int_t opt = 0, TList* wrks = 0); voidTProof::SetupWorkersEnv(TList* wrks, Bool_t increasingpool = kFALSE); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tTProof::StartSlaves(Bool_t attach = kFALSE); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); TProofLite(); voidTProof::UpdateDialog(); virtual voidTProof::ValidateDSet(TDSet* dset); Int_tTProof::VerifyDataSetParallel(const char* uri, const char* optStr). private:. Int_tCleanupSandbox(); Int_tCreateSandbox(); virtual voidFindUniqueSlaves(); Int_tInitDataSetManager(); voidNotifyStartUp(const char* action, Int_t done, Int_t tot); voidoperator=(const TProofLite&); voidResolveKeywords(TString& s, const char* ord, const char* logfile); virtual voidSendInputDataFile(); Int_tSetProofServEnv(const char* ord); voidShowDataDir(const char* dirname); TProofLite(const TProofLite&). Data Members; public:. static TProof::ERunStatusTProof::kAborted; static TProof::EUploadOptTProof::kAppend; static TProof::EUploadOptTProof::kAskUser; static TProof::EQueryModeTProof::kAsync; static TProof::ESubMergerTProof::kBeMerger; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TProof::EProofClearDataTProof::kDataset; static TProof::ERegisterOptTProof::kFailIfExists; static TProof::EProofClearDataTProof::kForceClear; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TProof::EStatusBitsTProof::kIsClient; static TProof::EStatusBitsTProof::kIsMaster; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofLite.html:23426,log,logfile,23426,root/html604/TProofLite.html,https://root.cern,https://root.cern/root/html604/TProofLite.html,1,['log'],['logfile']
Testability," kFALSE); voidTProof::ShowFeedback() const; voidTProof::ShowLog(Int_t qry = -1); voidTProof::ShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidTProof::ShowMissingFiles(TQueryResult* qr = 0); voidTProof::ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); voidTProof::ShowParameters(const char* wildcard = ""PROOF_*"") const; voidTProof::ShowQueries(Option_t* opt = """"); virtual voidTProof::ShowStagingStatusDataSet(const char* dataset, const char* optStr = ""filter:SsCc""); virtual Int_tTNamed::Sizeof() const; voidTProof::StartupMessage(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::StopProcess(Bool_t abort, Int_t timeout = -1); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTProof::Touch(); TProofCondor(const TProofCondor&); TProofCondor(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Int_tTProof::UploadDataSet(const char*, TList*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSet(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadDataSetFromFile(const char*, const char*, const char* = 0, Int_t = 0, TList* = 0); Int_tTProof::UploadPackage(const char* par, TProof::EUploadPackageOpt opt = kUntar, TList* workers = 0); virtual voidTObject::UseCurrentStyle(); Bool_tTProof::UseDynamicStartup() const; virtual Int_tTProof::VerifyDataSet(const char* dataset, const char* optStr = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:19476,log,loglevel,19476,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,2,['log'],['loglevel']
Testability," kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. ; Definition at line 27 of file TSpectrumFit.h. ◆ fFixA0. Bool_t TSpectrumFit::fFixA0. protected . logical value of a0 parameter, which allows to fix the parameter (not to fit). ; Definition at line 65 of file TSpectrumFit.h. ◆ fFixA1. Bool_t TSpectrumFit::fFixA1. protected . logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Definition at line 66 of file TSpectrumFit.h. ◆ fFixA2. Bool_t TSpectrumFit::fFixA2. protected . logical value of a2 parameter, which allows to fix the parameter (not to fit). ; Definition at line 67 of file TSpectrumFit.h. ◆ fFixAmp. Bool_t* TSpectrumFit::fFixAmp. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Definition at line 60 of file TSpectrumFit.h. ◆ fFixB. Bool_t TSpectrumFit::fFixB. protected . logical value of b parameter, which allows to fix the parameter (not to fit). ; Definition at line 63 of file TSpectrumFit.h. ◆ fFixPosition. Bool_t* TSpectrumFit::fFixPosition. protected . [fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Definition at line 59 of file TSpectrumFit.h. ◆ fFixS. Bool_t TSpectrumFit::fFixS. protected . logical value of s parameter, which allows to fix the parameter (not to fit). ; Definition at line 64 of file TSpectrumFit.h. ◆ fFixSigma. Bool_t TSpectrumFit::fFixSigma. protected . logical value of sigma parameter, which allows to fix the parameter (not to fit). ; Definition at line 61 of file TSpectrumFit.h. ◆ fFixT. Bool_t TSpectrumFit::fFixT. protected . logical value of t parameter, which allows to fix the parameter (not to fit). ; Definition at line 62 of file TSpectrumFit.h. ◆ fNPeaks. Int_t TSpectrumFit::fNPeaks. protected . number of peaks present in fit, input parameter, it should be > 0 ; Defi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:53759,log,logical,53759,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['log'],['logical']
Testability," kGeoShared = BIT(14),; 43 kGeoTranslation = BIT(17),; 44 kGeoRotation = BIT(18),; 45 kGeoScale = BIT(19),; 46 kGeoReflection = BIT(20),; 47 kGeoRegistered = BIT(21),; 48 kGeoSavePrimitive = BIT(22),; 49 kGeoMatrixOwned = BIT(23),; 50 kGeoCombiTrans = kGeoTranslation | kGeoRotation,; 51 kGeoGenTrans = kGeoTranslation | kGeoRotation | kGeoScale,; 52 kGeoMatrixBits = kGeoShared | kGeoGenTrans | kGeoReflection | kGeoRegistered | kGeoSavePrimitive | kGeoMatrixOwned; 53 };; 54 ; 55protected:; 56 TGeoMatrix(const TGeoMatrix &other);; 57 ; 58public:; 59 TGeoMatrix();; 60 TGeoMatrix(const char *name);; 61 ~TGeoMatrix() override;; 62 ; 63 Bool_t IsIdentity() const { return !TestBit(kGeoGenTrans); }; 64 Bool_t IsTranslation() const { return TestBit(kGeoTranslation); }; 65 Bool_t IsRotation() const { return TestBit(kGeoRotation); }; 66 Bool_t IsReflection() const { return TestBit(kGeoReflection); }; 67 Bool_t IsScale() const { return TestBit(kGeoScale); }; 68 Bool_t IsShared() const { return TestBit(kGeoShared); }; 69 Bool_t IsOwned() const { return TestBit(kGeoMatrixOwned); }; 70 Bool_t IsCombi() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation)); }; 71 Bool_t IsGeneral() const { return (TestBit(kGeoTranslation) && TestBit(kGeoRotation) && TestBit(kGeoScale)); }; 72 Bool_t IsRegistered() const { return TestBit(kGeoRegistered); }; 73 Bool_t IsRotAboutZ() const;; 74 void GetHomogenousMatrix(Double_t *hmat) const;; 75 const char *GetPointerName() const;; 76 ; 77 virtual Int_t GetByteCount() const;; 78 virtual const Double_t *GetTranslation() const = 0;; 79 virtual const Double_t *GetRotationMatrix() const = 0;; 80 virtual const Double_t *GetScale() const = 0;; 81 virtual TGeoHMatrix Inverse() const = 0;; 82 virtual void LocalToMaster(const Double_t *local, Double_t *master) const;; 83 virtual void LocalToMasterVect(const Double_t *local, Double_t *master) const;; 84 virtual void LocalToMasterBomb(const Double_t *local, Double_t *master) const;; 85 virtual TGeoMat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoMatrix_8h_source.html:2618,Test,TestBit,2618,doc/master/TGeoMatrix_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoMatrix_8h_source.html,1,['Test'],['TestBit']
Testability," kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooMsgService.h>. Inheritance diagram for RooMsgService:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~RooMsgService(). RooMsgService::~RooMsgService ; (; ). overridedefault . ◆ RooMsgService() [1/2]. RooMsgService::RooMsgService ; (; ). protected . Constructor. ; Defines names of message levels and mapping of topic codes to topic names Install default message streams. ; Definition at line 80 of file RooMsgService.cxx. ◆ RooMsgService() [2/2]. RooMsgService::RooMsgService ; (; const RooMsgService & ; ). protected . Member Function Documentation. ◆ activeStream(). template<class T > . Int_t RooMsgService::activeStream ; (; T ; self, . RooFit::MsgTopic ; topic, . RooFit::MsgLevel ; level . ). inlineprotected . Find appropriate logging stream for message from given object with given topic and message level. ; Definition at line 213 of file RooMsgService.h. ◆ addStream(). RooMsgService::addStream ; (; RooFit::MsgLevel ; level, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {} . ). Add a message logging stream for message with given RooFit::MsgLevel or higher. ; Higher means that messages with higher priority/severity are issued.; This method accepts the following arguments to configure the stream: . Output Style options . Prefix(bool flag=true) Prefix all messages in this stream with Topic/Originator information . Filtering options . Topic() Restrict stream to messages on given topic . ObjectName(const char*) Restrict stream to messages from object with given name . ClassName(const char*) Restrict stream to messages from objects with given class name . BaseClassName(const char*)Restrict stream to",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMsgService.html:15695,log,logging,15695,doc/master/classRooMsgService.html,https://root.cern,https://root.cern/doc/master/classRooMsgService.html,1,['log'],['logging']
Testability," kLODAxesAll; };. protected:. TGLBoundingBoxfBoundingBox! Shape's bounding box.; UInt_tfDLBase! display-list id base; Bool_tfDLCache! use display list caching; Int_tfDLSize! display-list size for different LODs; UShort_tfDLValid! display-list validity bit-field; TObject*fExternalObj! Also plays the role of ID.; TGLPhysicalShape*fFirstPhysical! first replica; Bool_tfOwnExtObj! External object is a fake; UInt_tfRef! physical instance ref counting; Bool_tfRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*fScene! scene where object is stored (can be zero!). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TGLLogicalShape(); Destroy logical shape. void AddRef(TGLPhysicalShape* phys) const; Add reference to given physical shape. void SubRef(TGLPhysicalShape* phys) const; Remove reference to given physical shape, potentially deleting; *this* object when hitting zero ref-count (if fRefStrong is; true). void DestroyPhysicals(); Destroy all physicals attached to this logical. UInt_t UnrefFirstPhysical(); Unreference first physical in the list, returning its id and; making it fit for destruction somewhere else.; Returns 0 if there are no replicas attached. void UpdateBoundingBoxesOfPhysicals(); Update bounding-boxed of all dependent physicals. Bool_t SetDLCache(Bool_t cached); Modify capture of draws into display list cache kTRUE - capture,; kFALSE direct draw. Return kTRUE is state changed, kFALSE if not. Bool_t ShouldDLCache(const TGLRnrCtx& rnrCtx) const; Returns kTRUE if draws should be display list cached; kFALSE otherwise. Here we check that:; a) fScene is set (Scene manages link to GL-context);; b) secondary selection is not in progress as different; render-path is usually taken in this case. Otherwise we return internal bool. Override this in sub-class if different behaviour is required. void DLCacheClear(); Clear all entries for all LODs for this drawable from the; display list cache but keeping the reserved ids ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLogicalShape.html:4955,log,logical,4955,root/html528/TGLLogicalShape.html,https://root.cern,https://root.cern/root/html528/TGLLogicalShape.html,3,['log'],['logical']
Testability," kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidSetEntrySep(UInt_t sep); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidSetMenuBar(TGMenuBar* bar); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUnCheckEntries(); virtual voidUnCheckEntry(Int_t id); virtual voidUnCheckEntryByData(void* user_data); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGPopupMenu.html:16340,Test,TestBit,16340,root/html534/TGPopupMenu.html,https://root.cern,https://root.cern/root/html534/TGPopupMenu.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. TGNumberEntry(const TGWindow* parent = 0, Double_t val = 0, Int_t digitwidth = 5, Int_t id = -1, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); virtual~TGNumberEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:2443,log,logarithmic,2443,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,4,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. TGNumberEntryField(const TGWindow* p, Int_t id, Double_t val, GContext_t norm, FontStruct_t font = GetDefaultFontStruct(), UInt_t option = kSunkenFrame|kDoubleBorder, Pixel_t back = GetWhitePixel()); TGNumberEntryField(const TGWindow* parent = 0, Int_t id = -1, Double_t val = 0, TGNumberFormat::EStyle style = kNESReal, TGNumberFormat::EAttribute attr = kNEAAnyNumber, TGNumberFormat::ELimit limits = kNELNoLimits, Double_t min = 0, Double_t max = 1); ~TGNumberEntryField(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryField.html:2436,log,logarithmic,2436,root/html528/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryField.html,4,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. TGNumberEntryLayout(TGNumberEntry* box); ~TGNumberEntryLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntryLayout.html:2420,log,logarithmic,2420,root/html528/TGNumberEntryLayout.html,https://root.cern,https://root.cern/root/html528/TGNumberEntryLayout.html,4,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. TGNumberFormat(); TGNumberFormat(const TGNumberFormat&); virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; public:. enum EStyle { kNESInteger; kNESRealOne; kNESRealTwo; kNESRealThree; kNESRealFour; kNESReal; kNESDegree; kNESMinSec; kNESHourMin; kNESHourMinSec; kNESDayMYear; kNESMDayYear; kNESHex; };; enum EAttribute { kNEAAnyNumber; kNEAN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberFormat.html:2381,log,logarithmic,2381,root/html528/TGNumberFormat.html,https://root.cern,https://root.cern/root/html528/TGNumberFormat.html,3,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. TGNumberFormat(); TGNumberFormat(const TGNumberFormat&); virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; public:. enum EStyle { kNESInteger; kNESRealOne; kNESRealTwo; kNESRealThree; kNESRealFour; kNESReal; kNESDegree; kNESMinSec; kNESHourMin; kNESHourMinSec; kNESDayMYear; kNESMDayYear; kNESHex; };; enum EAttribute { k",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGNumberFormat.html:2381,log,logarithmic,2381,root/html534/TGNumberFormat.html,https://root.cern,https://root.cern/root/html534/TGNumberFormat.html,1,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntry(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidAssociate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntry.html:2443,log,logarithmic,2443,root/html602/TGNumberEntry.html,https://root.cern,https://root.cern/root/html602/TGNumberEntry.html,2,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryField(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGTextEntry::AppendText(const char* text); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); voidTGTextEntry::Backspace(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntryField.html:2436,log,logarithmic,2436,root/html602/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html602/TGNumberEntryField.html,2,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberEntryLayout(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntryLayout.html:2420,log,logarithmic,2420,root/html602/TGNumberEntryLayout.html,https://root.cern,https://root.cern/root/html602/TGNumberEntryLayout.html,2,['log'],['logarithmic']
Testability," kNESDayMYear: date in day/month/year format; kNESMDayYear: date in month/day/year format; kNESHex: hex number. The following attributes can be specified:; kNEAAnyNumber: any number is allowed; kNEANonNegative: only non-negative numbers are allowed; kNEAPositive: only positive numbers are allowed. Explicit limits can be specified individually:; kNELNoLimits: no limits; kNELLimitMin: lower limit only; kNELLimitMax upper limit only; kNELLimitMinMax both lower and upper limits. TGNumberEntryField is a plain vanilla entry field, whereas; TGNumberEntry adds two small buttons to increase and decrease the; numerical value in the field. The number entry widgets also support; using the up and down cursor keys to change the numerical values.; The step size can be selected with control and shift keys:; -- small step (1 unit/factor of 3); shift medium step (10 units/factor of 10); control large step (100 units/factor of 30); shift-control huge step (1000 units/factor of 100). The steps are either linear or logarithmic. The default behaviour; is set when the entry field is created, but it can be changed by; pressing the alt key at the same time. Changing the number in the widget will generate the event:; kC_TEXTENTRY, kTE_TEXTCHANGED, widget id, 0.; Hitting the enter key will generate:; kC_TEXTENTRY, kTE_ENTER, widget id, 0.; Hitting the tab key will generate:; kC_TEXTENTRY, kTE_TAB, widget id, 0. /*. */. Function Members (Methods); public:. virtual~TGNumberFormat(); static TClass*Class(); virtual TClass*IsA() const; TGNumberFormat&operator=(const TGNumberFormat&); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); TGNumberFormat(); TGNumberFormat(const TGNumberFormat&). Data Members; public:. static TGNumberFormat::EAttributekNEAAnyNumber; static TGNumberFormat::EAttributekNEANonNegative; static TGNumberFormat::EAttributekNEAPositive; static TGNumberFormat::ELimitkNELLimitMax; static",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberFormat.html:2381,log,logarithmic,2381,root/html602/TGNumberFormat.html,https://root.cern,https://root.cern/root/html602/TGNumberFormat.html,2,['log'],['logarithmic']
Testability," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TMVA::PDEFoam; Double_t * fAlpha;  [fDim] Internal parameters of the hyperrectangle ;  ; PDEFoamCell ** fCells;  [fNCells] Array of ALL cells ;  ; Int_t fDim;  Dimension of the integration/simulation space. ;  ; PDEFoamDensityBase * fDistr;  ! distribution of training events ;  ; EDTSeparation fDTSeparation;  BACKWARDS COMPATIBILITY: split cells according to decision tree logic. ;  ; Int_t fEvPerBin;  Maximum number of effective (wt=1) events per bin. ;  ; Bool_t fFillFoamWithOrigWeights;  BACKWARDS COMPATIBILITY: fill the foam with boost or orig. weights. ;  ; EFoamType fFoamType;  BACKWARDS COMPATIBILITY: type of foam. ;  ; TObjArray * fHistEdg;  Histograms of wt, one for each cell edge. ;  ; Int_t * fInhiDiv;  ! [fDim] Flags for inhibiting cell division ;  ; Int_t fLastCe;  Index of the last cell. ;  ; MsgLogger * fLogger;  ! message logger ;  ; Int_t * fMaskDiv;  ! [fDim] Dynamic Mask for cell division ;  ; UInt_t fMaxDepth;  maximum depth of cell tree ;  ; TString fName;  Name of a given instance of the FOAM class. ;  ; Int_t fNBin;  No. of bins in the edge histogram for cell MC exploration. ;  ; Int_t fNCells;  Maximum number of cells. ;  ; UInt_t fNElements;  BACKWARDS COMPATIBILITY: number of variables in every cell. ;  ; UInt_t fNmin;  minimal number of events in cell to split cell ;  ; Int_t fNoAct;  Number of active cells. ;  ; Int_t fNSampl;  No. of MC events, when dividing (exploring) cell. ;  ; Bool_t fPeekMax;  BACKWARDS COMPATIBILITY: peek up cell with max. driver integral for split. ;  ; TRandom3 * fPseRan;  Pointer to user-defined generator of pseudorandom numbers. ;  ; Double_t * fRvec;  [fDim] random number vector from r.n. generator fDim+1 maximum elements ;  ; Timer * fTimer;  ! timer for graphical output ;  ; TObjArray * fVariableNames;  collection of all variable names ;  ; Float_t fVolFrac;  BACKWARDS COMPATIBILITY: volume fraction (with respect to total phase space",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html:17300,log,logger,17300,doc/master/classTMVA_1_1PDEFoamEvent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamEvent.html,1,['log'],['logger']
Testability," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/GeneticFitter.h>. Inheritance diagram for TMVA::GeneticFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ GeneticFitter(). TMVA::GeneticFitter::GeneticFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 50 of file GeneticFitter.cxx. ◆ ~GeneticFitter(). virtual TMVA::GeneticFitter::~GeneticFitter ; (; ). inlinevirtual . Definition at line 51 of file GeneticFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GeneticFitter::Class ; (; ). static . ReturnsTClass describin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html:16703,log,logger,16703,doc/master/classTMVA_1_1GeneticFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GeneticFitter.html,1,['log'],['logger']
Testability," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/MCFitter.h>. Inheritance diagram for TMVA::MCFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MCFitter(). TMVA::MCFitter::MCFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file MCFitter.cxx. ◆ ~MCFitter(). virtual TMVA::MCFitter::~MCFitter ; (; ). inlinevirtual . Definition at line 51 of file MCFitter.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::MCFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MCFitter.html:15489,log,logger,15489,doc/master/classTMVA_1_1MCFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MCFitter.html,1,['log'],['logger']
Testability," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TMVA::FitterBase; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::FitterBase; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMVA/SimulatedAnnealingFitter.h>. Inheritance diagram for TMVA::SimulatedAnnealingFitter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ SimulatedAnnealingFitter(). TMVA::SimulatedAnnealingFitter::SimulatedAnnealingFitter ; (; IFitterTarget & ; target, . const TString & ; name, . const std::vector< TMVA::Interval * > & ; ranges, . const TString & ; theOption . ). constructor ; Definition at line 51 of file SimulatedAnnealingFitter.cxx. ◆ ~SimulatedAnnealingFitter(). virtual TMVA::SimulatedAnnealingFitter::~SimulatedAnnealingFitter ; (; ). inlinevirtual . Definition at line 56 of file SimulatedAnnealingFitter.h. Member Function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html:16408,log,logger,16408,doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1SimulatedAnnealingFitter.html,1,['log'],['logger']
Testability," kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <RooMinimizer.h>. Inheritance diagram for RooMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ PrintLevel. enum RooMinimizer::PrintLevel. EnumeratorNone ; Reduced ; Normal ; ExtraForProblem ; Maximum . Definition at line 137 of file RooMinimizer.h. ◆ Strategy. enum RooMinimizer::Strategy. EnumeratorSpeed ; Balance ; Robustness . Definition at line 136 of file RooMinimizer.h. Constructor & Destructor Documentation. ◆ RooMinimizer(). RooMinimizer::RooMinimizer ; (; RooAbsReal & ; function, . Config const & ; cfg = {} . ). explicit . Construct MINUIT interface to given function. ; Function can be anything, but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2 (implemented by RooChi2Var). Other frequent use cases are a RooAddition of a RooNLLVar plus a penalty or constraint term. This class propagates all RooFit information (floating parameters, their values and errors) to MINUIT before each MINUIT call and propagates all MINUIT information back to the RooFit object at the end of each call (updated parameter values, their (asymmetric errors) etc. The default MINUIT error level for HESSE and MINOS error analysis is taken from the defaultErrorLevel() value of the input function. Constructor that accepts all configuration in struct with RooAbsReal likelihood ; Definition at line 86 of file RooMinimizer.cxx. ◆ ~RooMinimizer(). RooMinimizer::~RooMinimizer ; (; ). overridedefault . Destructor. . Member Function Documentation. ◆ addParamsToProcessTimer(). void RooMinimizer::addParamsToProcessTimer ; (; ). private . Add parameters in metadata field to process timer. ; Definition at line 678 of file RooMinimizer.cx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:16546,log,log,16546,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['log'],['log']
Testability," kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TVirtualViewer3D.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2010-09-23 20:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TVirtualViewer3D.html:17851,log,logical,17851,root/html528/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html528/TVirtualViewer3D.html,1,['log'],['logical']
Testability," kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TVirtualViewer3D.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualViewer3D.html:17920,log,logical,17920,root/html530/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html530/TVirtualViewer3D.html,1,['log'],['logical']
Testability," kSingleKey; kOverwrite; kWriteDelete; };. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id: TVirtualViewer3D.h 20877 2007-11-19 11:17:07Z rdm $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVirtualViewer3D.html:17920,log,logical,17920,root/html532/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html532/TVirtualViewer3D.html,1,['log'],['logical']
Testability," kSingleKey; kOverwrite; kWriteDelete; };. private:. TTree*fAnalysisTree; TTree*fIOTree; TMultiLayerPerceptron*fNetwork. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ~TMLPAnalyzer(); Destructor. Int_t GetLayers(); Returns the number of layers. Int_t GetNeurons(Int_t layer); Returns the number of neurons in given layer. TString GetNeuronFormula(Int_t idx); Returns the formula used as input for neuron (idx) in; the first layer. const char* GetInputNeuronTitle(Int_t in); Returns the name of any neuron from the input layer. const char* GetOutputNeuronTitle(Int_t out); Returns the name of any neuron from the output layer. void CheckNetwork(); Gives some information about the network in the terminal. void GatherInformations(); Collect information about what is usefull in the network.; This method has to be called first when analyzing a network.; Fills the two analysis trees. void DrawDInput(Int_t i); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; the ith input. void DrawDInputs(); Draws the distribution (on the test sample) of the; impact on the network output of a small variation of; each input.; DrawDInputs() draws something that approximates the distribution of the; derivative of the NN w.r.t. each input. That quantity is recognized as; one of the measures to determine key quantities in the network. What is done is to vary one input around its nominal value and to see; how the NN changes. This is done for each entry in the sample and produces; a distribution. What you can learn from that is:; - is variable a really useful, or is my network insensitive to it ?; - is there any risk of big systematic ? Is the network extremely sensitive; to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve; as input for an ""educated guess"" when optimizing the network. void DrawNetwork(Int_t neuron, const char* signal, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMLPAnalyzer.html:6927,test,test,6927,root/html534/TMLPAnalyzer.html,https://root.cern,https://root.cern/root/html534/TMLPAnalyzer.html,1,['test'],['test']
Testability," kTRUE); virtual voidSetBasketSize(Int_t buffsize); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBufferAddress(TBuffer* entryBuffer); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEntries(Long64_t entries); virtual voidSetEntryOffsetLen(Int_t len, Bool_t updateSubBranches = kFALSE); virtual voidSetFile(TFile* file = 0); virtual voidSetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidSetFirstEntry(Long64_t entry); virtual Bool_tSetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOffset(Int_t offset = 0); virtual voidSetStatus(Bool_t status = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetupAddresses(); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateAddress(); virtual voidUpdateFile(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TBranch.html:8557,Test,TestBit,8557,root/html530/TBranch.html,https://root.cern,https://root.cern/root/html530/TBranch.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," kTRUE); voidRooAbsReal::setPlotLabel(const char* label); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp, char* parent); RooMoment*RooAbsReal::sigma(RooRealVar& obs); RooMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooRealVar&var() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvolution.html:26035,Test,TestBit,26035,root/html526/RooNumConvolution.html,https://root.cern,https://root.cern/root/html526/RooNumConvolution.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," kTraining and kTesting; 1061 ; 1062TMVA::DataSet*; 1063TMVA::DataSetFactory::MixEvents( DataSetInfo& dsi,; 1064 EventVectorOfClassesOfTreeType& tmpEventVector,; 1065 EvtStatsPerClass& eventCounts,; 1066 const TString& splitMode,; 1067 const TString& mixMode,; 1068 const TString& normMode,; 1069 UInt_t splitSeed); 1070{; 1071 TMVA::RandomGenerator<TRandom3> rndm(splitSeed);; 1072 ; 1073 // ==== splitting of undefined events to kTraining and kTesting; 1074 ; 1075 // if splitMode contains ""RANDOM"", then shuffle the undefined events; 1076 if (splitMode.Contains( ""RANDOM"" ) /*&& !emptyUndefined*/ ) {; 1077 // random shuffle the undefined events of each class; 1078 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1079 EventVector& unspecifiedEvents = tmpEventVector[Types::kMaxTreeType].at(cls);; 1080 if( ! unspecifiedEvents.empty() ) {; 1081 Log() << kDEBUG << ""randomly shuffling ""; 1082 << unspecifiedEvents.size(); 1083 << "" events of class "" << cls; 1084 << "" which are not yet associated to testing or training"" << Endl;; 1085 std::shuffle(unspecifiedEvents.begin(), unspecifiedEvents.end(), rndm);; 1086 }; 1087 }; 1088 }; 1089 ; 1090 // check for each class the number of training and testing events, the requested number and the available number; 1091 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""SPLITTING ========"" << Endl;; 1092 for( UInt_t cls = 0; cls < dsi.GetNClasses(); ++cls ){; 1093 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""---- class "" << cls << Endl;; 1094 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName())<< ""check number of training/testing events, requested and available number of events and for class "" << cls << Endl;; 1095 ; 1096 // check if enough or too many events are already in the training/testing eventvectors of the class cls; 1097 EventVector& eventVectorTraining = tmpEventVector[ Types::kTraining ].at(cls);; 1098 EventVector& eventVectorTesting = tmpEventVector[ Types::kTesting ].at(cls);; 1099 EventVector& e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:46457,test,testing,46457,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['test'],['testing']
Testability," kTranslateX; kTranslateY; kTranslateZ; kTranslateAll; kScaleX; kScaleY; kScaleZ; kScaleAll; kRotateX; kRotateY; kRotateZ; kRotateAll; kManipAll; };. private:. TGLBoundingBoxfBoundingBox! bounding box of the physical (transformed); Float_tfColor[17]! GL color array; TGLPShapeRef*fFirstPSRef! pointer to first reference; UInt_tfID! unique physical ID within containing scene; Bool_tfInvertedWind! face winding TODO: can get directly from fTransform?; const TGLLogicalShape*fLogicalShape! the associated logical shape; TGLPhysicalShape::EManipfManip! permitted manipulation bitflags - see EManip; Bool_tfModified! has been modified - retain across scene rebuilds; TGLPhysicalShape*fNextPhysical! pointer to next replica; UChar_tfSelected! selected state; TGLMatrixfTransform! transform (placement) of physical instance. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const TGLMatrix& transform, Bool_t invertedWind, const Float_t* rgba); Construct a physical shape using arguments:; ID - unique drawable id.; logicalShape - bound logical shape; transform - transform for placement of logical drawing; invertedWind - use inverted face polygon winding?; rgba - basic four component (RGBA) diffuse color. TGLPhysicalShape(UInt_t ID, const TGLLogicalShape& logicalShape, const double* transform, Bool_t invertedWind, const Float_t* rgba); Construct a physical shape using arguments:; id - unique drawable id.; logicalShape - bound logical shape; transform - 16 Double_t component transform for placement of logical drawing; invertedWind - use inverted face polygon winding?; rgba - basic four component (RGBA) diffuse color. ~TGLPhysicalShape(); Destroy the physical shape. void AddReference(TGLPShapeRef* ref); Add reference ref. void RemoveReference(TGLPShapeRef* ref); Remove reference ref. void Modified(); Call this after modifying the physical so that the information; can be propagated to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLPhysicalShape.html:4440,log,logicalShape,4440,root/html528/TGLPhysicalShape.html,https://root.cern,https://root.cern/root/html528/TGLPhysicalShape.html,3,['log'],['logicalShape']
Testability," kUndefined) {; 870 MATH_ERROR_MSG(""AndersonDarlingTest"", ""Distribution type is undefined! Please use SetDistribution(GoFTest::EDistribution)."");; 871 return;; 872 }; 873 Double_t A2 = 0.0;; 874 Int_t n = fSamples[0].size();; 875 for (Int_t i = 0; i < n ; ++i) {; 876 Double_t x1 = fSamples[0][i];; 877 Double_t w1 = (*fCDF)(x1);; 878 Double_t result = (2 * (i + 1) - 1) * TMath::Log(w1) + (2 * (n - (i + 1)) + 1) * TMath::Log(1 - w1);; 879 A2 += result;; 880 }; 881 (A2 /= -n) -= n;; 882 if (A2 != A2) {; 883 MATH_ERROR_MSG(""AndersonDarlingTest"", ""Cannot compute p-value: data below or above the distribution's thresholds. Check sample consistency."");; 884 return;; 885 }; 886 pvalue = PValueAD1Sample(A2);; 887 testStat = A2;; 888 }; 889 ; 890 Double_t GoFTest::AndersonDarlingTest(const Char_t* option) const {; 891 Double_t pvalue, testStat;; 892 AndersonDarlingTest(pvalue, testStat);; 893 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1) != 0) ? pvalue : testStat;; 894 }; 895 ; 896 void GoFTest::KolmogorovSmirnov2SamplesTest(Double_t& pvalue, Double_t& testStat) const {; 897 pvalue = -1;; 898 testStat = -1;; 899 if (fTestSampleFromH0) {; 900 MATH_ERROR_MSG(""KolmogorovSmirnov2SamplesTest"", ""Only 1-sample tests can be issued with a 1-sample constructed GoFTest object!"");; 901 return;; 902 }; 903 const size_t na = fSamples[0].size();; 904 const size_t nb = fSamples[1].size();; 905 std::vector<Double_t> a(na);; 906 std::vector<Double_t> b(nb);; 907 std::copy(fSamples[0].begin(), fSamples[0].end(), a.begin());; 908 std::copy(fSamples[1].begin(), fSamples[1].end(), b.begin());; 909 pvalue = TMath::KolmogorovTest(na, a.data(), nb, b.data(), nullptr);; 910 testStat = TMath::KolmogorovTest(na, a.data(), nb, b.data(), ""M"");; 911 }; 912 ; 913 Double_t GoFTest::KolmogorovSmirnov2SamplesTest(const Char_t* option) const {; 914 Double_t pvalue, testStat;; 915 KolmogorovSmirnov2SamplesTest(pvalue, testStat);; 916 return (strncmp(option, ""p"", 1) == 0 || strncmp(option, ""t"", 1)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:31821,test,testStat,31821,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,7,['test'],"['testStat', 'tests']"
Testability," kWriteDelete; };. private:. RooArgList*_constParamList; TStopwatch_cumulTimer; Bool_t_doEvalErrorWall; Int_t_evalCounter; TMatrixDSym*_extV; RooArgList*_floatParamList; vector<RooAbsArg*>_floatParamVec; RooAbsReal*_func; Bool_t_handleLocalErrors; RooArgList*_initConstParamList; RooArgList*_initFloatParamList; ofstream*_logfile; Int_t_maxEvalMult; Double_t_maxFCN; Int_t_nPar; Int_t_numBadNLL; Int_t_optConst; Int_t_printEvalErrors; Int_t_printLevel; Bool_t_profile; Int_t_status; vector<std::pair<std::string,int> >_statusHistory; static TVirtualFitter*_theFitter; TStopwatch_timer; Bool_t_verbose; Int_t_warnLevel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Cleanup method called by atexit handler installed by RooSentinel; to delete all global heap objects when the program is terminated. RooMinuit(RooAbsReal& function); Construct MINUIT interface to given function. Function can be anything,; but is typically a -log(likelihood) implemented by RooNLLVar or a chi^2; (implemented by RooChi2Var). Other frequent use cases are a RooAddition; of a RooNLLVar plus a penalty or constraint term. This class propagates; all RooFit information (floating parameters, their values and errors); to MINUIT before each MINUIT call and propagates all MINUIT information; back to the RooFit object at the end of each call (updated parameter; values, their (asymmetric errors) etc. The default MINUIT error level; for HESSE and MINOS error analysis is taken from the defaultErrorLevel(); value of the input function. ~RooMinuit(); Destructor. void setStrategy(Int_t strat); Change MINUIT strategy to istrat. Accepted codes; are 0,1,2 and represent MINUIT strategies for dealing; most efficiently with fast FCNs (0), expensive FCNs (2); and 'intermediate' FCNs (1). void setErrorLevel(Double_t level); Set the level for MINUIT error analysis to the given; value. This function overrides the default value; that is taken in the RooMinuit constructor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMinuit.html:8572,log,log,8572,root/html534/RooMinuit.html,https://root.cern,https://root.cern/root/html534/RooMinuit.html,1,['log'],['log']
Testability," kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TProofServLite.h 33637 2010-05-28 13:13:05Z rdm $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServLite.html:17609,log,logo,17609,root/html530/TProofServLite.html,https://root.cern,https://root.cern/root/html530/TProofServLite.html,1,['log'],['logo']
Testability," kWriteDelete; };. protected:. TApplication*TApplication::fAppRemoteCurrent remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id: TProofServLite.h 33637 2010-05-28 13:13:05Z rdm $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofServLite.html:17609,log,logo,17609,root/html532/TProofServLite.html,https://root.cern,https://root.cern/root/html532/TProofServLite.html,1,['log'],['logo']
Testability," key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; voidsetVerbose(Bool_t clientFlag = kTRUE, Bool_t serverFlag = kTRUE); TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); voidstandby(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidRooAbsReal::writeToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealMPFE.html:26737,Test,TestBit,26737,root/html602/RooRealMPFE.html,https://root.cern,https://root.cern/root/html602/RooRealMPFE.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); TSocket(const char* sockpath); TSocket(Int_t descriptor); TSocket(const TSocket& s); TSocket(Int_t descriptor, const char* sockpath); TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); TSocket(TInetAddress address, Int_t port, Int_t tcpwindowsize = -1); TSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); TSocket(const char* host, Int_t port, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSocket.html:6844,Test,TestBit,6844,root/html602/TSocket.html,https://root.cern,https://root.cern/root/html602/TSocket.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," kind = kMESS_STRING); TObjString*TXSocket::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0, Long64_t l64 = 0, Int_t int3 = 0, const char* opt = 0); Int_tTXSocket::SendInterrupt(Int_t type); virtual Int_tTSocket::SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tTXSocket::SendRaw(const void* buf, Int_t len, ESendRecvOptions opt = kDontBlock); voidTXSocket::SendUrgent(Int_t type, Int_t int1, Int_t int2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetClientID(Int_t cid); voidTSocket::SetCompressionLevel(Int_t level = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTXSocket::SetInterrupt(); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTXSocket::SetOption(ESockOptions, Int_t); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTXSocket::SetSendOpt(ESendRecvOptions o); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); voidTXSocket::SetSessionID(Int_t id); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXUnixSocket.html:8278,Test,TestBit,8278,root/html528/TXUnixSocket.html,https://root.cern,https://root.cern/root/html528/TXUnixSocket.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," label, . int ; status . ). inline . Definition at line 179 of file RooMinimizer.h. ◆ seek(). int RooMinimizer::seek ; (; ). Execute SEEK. ; Changes in parameter values and calculated errors are automatically propagated back the RooRealVars representing the floating parameters in the MINUIT operation. ; Definition at line 442 of file RooMinimizer.cxx. ◆ setEps(). void RooMinimizer::setEps ; (; double ; eps). Change MINUIT epsilon. ; Definition at line 226 of file RooMinimizer.cxx. ◆ setErrorLevel(). void RooMinimizer::setErrorLevel ; (; double ; level). Set the level for MINUIT error analysis to the given value. ; This function overrides the default value that is taken in the RooMinimizer constructor from the defaultErrorLevel() method of the input function ; Definition at line 218 of file RooMinimizer.cxx. ◆ setEvalErrorWall(). void RooMinimizer::setEvalErrorWall ; (; bool ; flag). inline . Definition at line 149 of file RooMinimizer.h. ◆ setLogFile(). bool RooMinimizer::setLogFile ; (; const char * ; logf = nullptr). Definition at line 807 of file RooMinimizer.cxx. ◆ setMaxFunctionCalls(). void RooMinimizer::setMaxFunctionCalls ; (; int ; n). Change maximum number of likelihood function class from MINUIT (RooMinimizer default 500 * #parameters) ; Definition at line 207 of file RooMinimizer.cxx. ◆ setMaxIterations(). void RooMinimizer::setMaxIterations ; (; int ; n). Change maximum number of MINUIT iterations (RooMinimizer default 500 * #parameters) ; Definition at line 198 of file RooMinimizer.cxx. ◆ setMinimizerType(). void RooMinimizer::setMinimizerType ; (; std::string const & ; type). Choose the minimizer algorithm. ; Passing an empty string selects the default minimizer type returned by ROOT::Math::MinimizerOptions::DefaultMinimizerType(). ; Definition at line 246 of file RooMinimizer.cxx. ◆ setOffsetting(). void RooMinimizer::setOffsetting ; (; bool ; flag). Enable internal likelihood offsetting for enhanced numeric precision. ; Definition at line 234 of file",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMinimizer.html:27079,log,logf,27079,doc/master/classRooMinimizer.html,https://root.cern,https://root.cern/doc/master/classRooMinimizer.html,1,['log'],['logf']
Testability," label.; If the List of labels does not exist create it; If label is not in the list of labels do the following depending on the; bit TH1::kCanRebin of the parent histogram.; - if the bit is set add the new label and if the number of labels exceeds; the number of bins, double the number of bins via TH1::LabelsInflate; - if the bit is not set return 0 (underflow bin). -1 is returned only when the Axis has no parent histogram. Int_t FindFixBin(Double_t x) const; Find bin number corresponding to abscissa x. const char * GetBinLabel(Int_t bin) const; Return label for bin. Int_t GetFirst() const; return first bin on the axis; ie 1 if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Int_t GetLast() const; return last bin on the axis; ie fNbins if no range defined; NOTE: in some cases a zero is returned (see TAxis::SetRange). Double_t GetBinCenter(Int_t bin) const; Return center of bin. Double_t GetBinCenterLog(Int_t bin) const; Return center of bin in log; With a log-equidistant binning for a bin with low and up edges, the mean is :; 0.5*(ln low + ln up) i.e. sqrt(low*up) in logx (e.g. sqrt(10^0*10^2) = 10).; Imagine a bin with low=1 and up=100 :; - the center in lin is (100-1)/2=50.5; - the center in log would be sqrt(1*100)=10 (!=log(50.5)); NB: if the low edge of the bin is negative, the function returns the bin center; as computed by TAxis::GetBinCenter. Double_t GetBinLowEdge(Int_t bin) const; Return low edge of bin. Double_t GetBinUpEdge(Int_t bin) const; Return up edge of bin. Double_t GetBinWidth(Int_t bin) const; Return bin width. void GetCenter(Double_t* center) const; Return an array with the center of all bins. void GetLowEdge(Double_t* edge) const; Return an array with the lod edge of all bins. const char * GetTimeFormatOnly() const; Return *only* the time format from the string fTimeFormat. const char * GetTicks() const; Return the ticks option (see SetTicks). void LabelsOption(Option_t* option = ""h""); Set option(s) to draw axi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TAxis.html:13895,log,log,13895,root/html530/TAxis.html,https://root.cern,https://root.cern/root/html530/TAxis.html,4,['log'],"['log', 'log-equidistant']"
Testability," last AutoSave. if option contains ""SaveSelf"", gDirectory->SaveSelf() is called.; This allows another process to analyze the Tree while the Tree is being filled. if option contains ""FlushBaskets"", TTree::FlushBaskets is called and all; the current basket are closed-out and written to disk individually. By default the previous header is deleted after having written the new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occured while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- script treew.C; void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }. ----- script treer.C; void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch() with added check that addobj matches className. See TTree::Branch() for other details. TBranch* BranchImp(const char* branchname, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:39674,test,test,39674,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,2,['test'],['test']
Testability," last) Hparam.ylast = last;; 10603 Hparam.ymin = TMath::Log10(Hparam.ymin);; 10604 Hparam.ymax = TMath::Log10(Hparam.ymax);; 10605 }; 10606 ; 10607 ; 10608 // ----------------- Compute Z axis parameters; 10609 Double_t bigp = TMath::Power(10,32);; 10610 zmax = -bigp;; 10611 zmin = bigp;; 10612 Double_t c1, e1;; 10613 Double_t allchan = 0;; 10614 for (Int_t j=Hparam.yfirst; j<=Hparam.ylast;j++) {; 10615 for (Int_t i=Hparam.xfirst; i<=Hparam.xlast;i++) {; 10616 c1 = fH->GetBinContent(i,j);; 10617 zmax = TMath::Max(zmax,c1);; 10618 if (Hoption.Error) {; 10619 e1 = fH->GetBinError(i,j);; 10620 zmax = TMath::Max(zmax,c1+e1);; 10621 }; 10622 zmin = TMath::Min(zmin,c1);; 10623 allchan += c1;; 10624 }; 10625 }; 10626 ; 10627 // Take into account maximum , minimum; 10628 ; 10629 if (maximum) zmax = fH->GetMaximumStored();; 10630 if (minimum) zmin = fH->GetMinimumStored();; 10631 if (Hoption.Logz && zmax < 0) {; 10632 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10633 return 0;; 10634 } else if (Hoption.Logz && zmin>=0 && zmax==0) { // empty histogram in log scale; 10635 zmin = 0.01;; 10636 zmax = 10.;; 10637 }; 10638 if (zmin >= zmax) {; 10639 if (Hoption.Logz) {; 10640 if (zmax > 0) zmin = 0.001*zmax;; 10641 else {; 10642 if (!Hoption.Same) Error(where, ""log scale is requested but maximum is less or equal 0 (%f)"", zmax);; 10643 return 0;; 10644 }; 10645 }; 10646 }; 10647 ; 10648 // take into account normalization factor; 10649 Hparam.allchan = allchan;; 10650 Double_t factor = allchan;; 10651 if (fH->GetNormFactor() > 0) factor = fH->GetNormFactor();; 10652 if (allchan) factor /= allchan;; 10653 if (factor == 0) factor = 1;; 10654 Hparam.factor = factor;; 10655 zmax = factor*zmax;; 10656 zmin = factor*zmin;; 10657 c1 = zmax;; 10658 if (TMath::Abs(zmin) > TMath::Abs(c1)) c1 = zmin;; 10659 ; 10660 // For log scales, histogram coordinates are log10(ymin) and; 10661 // log10(ymax). Final adjustment (if not option ""Same""); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:382014,log,log,382014,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability," last); static voidTSeqCollection::QSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidTSeqCollection::QSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); virtual TObject*Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidRemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TList.html:9027,Test,TestBit,9027,root/html530/TList.html,https://root.cern,https://root.cern/root/html530/TList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. Int_t GetClassSize() const; { return Size(); }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TVirtualStreamerInfo * GetLastReadInfo() const; { return fLastReadInfo; }. void SetLastReadInfo(TVirtualStreamerInfo* info); { fLastReadInfo = info; }. TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstanceCount() const; { return fInstanceCount; }. UInt_t GetHeapInstanceCount() const; { return fOnHeap; }. TClass ** GetPersisten",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TClass.html:50225,Test,TestBit,50225,root/html534/TClass.html,https://root.cern,https://root.cern/root/html534/TClass.html,1,['Test'],['TestBit']
Testability," layout represented by 'checksum' to this class, if any. Bool_t HasDefaultConstructor() const; Return true if we have access to a default constructor. ROOT::MergeFunc_t GetMerge() const; Return the wrapper around Merge. ROOT::ResetAfterMergeFunc_t GetResetAfterMerge() const; Return the wrapper around Merge. ROOT::NewFunc_t GetNew() const; Return the wrapper around new ThisClass(). ROOT::NewArrFunc_t GetNewArray() const; Return the wrapper around new ThisClass[]. ROOT::DelFunc_t GetDelete() const; Return the wrapper around delete ThiObject. ROOT::DelArrFunc_t GetDeleteArray() const; Return the wrapper around delete [] ThiObject. ROOT::DesFunc_t GetDestructor() const; Return the wrapper around the destructor. ROOT::DirAutoAdd_t GetDirectoryAutoAdd() const; Return the wrapper around the directory auto add function. void SetClassSize(Int_t sizof); { fSizeof = sizof; }. void AddInstance(Bool_t heap = kFALSE); { fInstanceCount++; if (heap) fOnHeap++; }. Bool_t CanIgnoreTObjectStreamer(); { return TestBit(kIgnoreTObjectStreamer);}. void Dump() const; { TDictionary::Dump(); }. Version_t GetClassVersion() const; { fVersionUsed = kTRUE; return fClassVersion; }. const char * GetDeclFileName() const; { return fDeclFileName; }. Short_t GetDeclFileLine() const; { return fDeclFileLine; }. ClassInfo_t * GetClassInfo() const; { return fClassInfo; }. const char * GetContextMenuTitle() const; { return fContextMenuTitle; }. TVirtualStreamerInfo * GetCurrentStreamerInfo(). TList * GetListOfRealData() const; { return fRealData; }. const char * GetImplFileName() const; { return fImplFileName; }. Short_t GetImplFileLine() const; { return fImplFileLine; }. UInt_t GetInstanceCount() const; { return fInstanceCount; }. UInt_t GetHeapInstanceCount() const; { return fOnHeap; }. TVirtualRefProxy * GetReferenceProxy() const; { return fRefProxy; }. ShowMembersFunc_t GetShowMembersWrapper() const; { return fShowMembers; }. TObjArray * GetStreamerInfos() const; { return fStreamerInfo; }. const type_in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClass.html:48015,Test,TestBit,48015,root/html532/TClass.html,https://root.cern,https://root.cern/root/html532/TClass.html,1,['Test'],['TestBit']
Testability," length of ; this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle). Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2. Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle. between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of are chosen first; (TMultiDimFit::TestFunction). In case isn't defined, an alternative method of; performing this second test is used: The ; function. is accepted if (refer also to equation (13)). (14). where is the sum of the first residuals from the; functions previously accepted; and is the total number; of functions allowed in the final expression of the fit (defined by; user). >From this we see, that by restricting -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting. The more coefficients we evaluate, the more the sum of squares of; residuals will be reduced. We can evaluate before inverting. as shown below. Coefficients and Coefficient Errors. Having found a parameterization, that is the 's and , that; minimizes , we still need to determine the coefficients; . However, it's a feature of how we choose the significant; functions, that the evaluation of the 's becomes trivial; [5]. To derive ; , we first note that; equation (4) can be written as. (15). where. (16). Consequently, ; is an upper tri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:8173,test,test,8173,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['test'],['test']
Testability," level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); TBenchmark&operator=(const TBenchmark&). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_t*fCpuTime[fNbench] Cpu Time; TStringTNamed::fNameobject identifier; TString*fNames[fNbench] Names of benchmarks; Int_tfNbenchNumber of active benchmarks; Int_tfNmaxMaximum number of benchmarks initialized; Float_t*fRealTime[fNbench] Real Time; TStopwatch*fTimerTimers; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TBenchmark(); Benchmark default constructor. TBenchmark(const TBenchmark& ); Copy constructor. TBenchmark& operator=(const TBenchmark& ); Assignment operator. ~TBenchmark(); Benchmark destructor. Int_t GetBench(const char* name) const; Returns index of Benchmark name. Float_t GetCpuTime(const char* name); Returns Cpu time used by Benchmark name. Float_t GetRealTime(const char* name); Returns Realtime used by Benchmark name. void Print(Option_t* name = """") const; Prints parameters of Benchmark name. void Reset(); Reset all Benchmarks. void Show(const char* name); Stops Benchmark name and Prints results. void Start(const char* name); Starts Benchmark with the specified name. An independent timer (see class TStopwatch) is started.; The name of the benchmark is entered into the list of benchmarks.; Benchmark can be stopped via TBenchmark::Stop().; Results can be printed via TBenchmark::Print().; TBenchmark::Show() can be used to stop benchmark and print results.; If name is an already existing benchmark, timing will resume.; A summary of all benchmarks can be seen via TBenchmark::Summary(). void Stop(const char* name); Terminates Benchmark with specified name. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBenchmark.html:6278,Benchmark,Benchmark,6278,root/html534/TBenchmark.html,https://root.cern,https://root.cern/root/html534/TBenchmark.html,1,['Benchmark'],['Benchmark']
Testability," limit OVLP. ; Definition at line 1427 of file TGeoChecker.cxx. ◆ CheckOverlapsBySampling(). void TGeoChecker::CheckOverlapsBySampling ; (; TGeoVolume * ; vol, . Double_t ; ovlp = 0.1, . Int_t ; npoints = 1000000 . ); const. Check illegal overlaps for volume VOL within a limit OVLP by sampling npoints inside the volume shape. ; Definition at line 1196 of file TGeoChecker.cxx. ◆ CheckPoint(). void TGeoChecker::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). Draw point (x,y,z) over the picture of the daughters of the volume containing this point. ; Generates a report regarding the path to the node containing this point and the distance to the closest boundary. ; Definition at line 1692 of file TGeoChecker.cxx. ◆ CheckShape(). void TGeoChecker::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2); 2: Safety test. Sample points inside the bounding and compute safety. Generate directions randomly in cos(theta) and compute distance to boundary. Check if distance to boundary is bigger than safety . Definition at line 1752 of file TGeoChecker.cxx. ◆ CheckVoxels(). Double_t TGeoChecker::CheckVoxels ; (; TGeoVolume * ; vol, . TGeoVoxelFinder * ; voxels, . Double_t * ; xyz, . Int_t ; npoints . ). count voxel timing ; Definition at line 2967 of file TGeoChecker.cxx. ◆ Class(). static TClass * TGeoChecker::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoChecker::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoChecker::Class_Version ; (; ). inlinestaticco",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:21540,test,test,21540,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['test'],['test']
Testability," line 106 of file TNeuron.h. ◆ GetValue(). Double_t TMVA::TNeuron::GetValue ; (; ); const. inline . Definition at line 104 of file TNeuron.h. ◆ InitNeuron(). void TMVA::TNeuron::InitNeuron ; (; ). private . initialize the neuron, most variables still need to be set via setters ; Definition at line 67 of file TNeuron.cxx. ◆ InitSynapseDeltas(). void TMVA::TNeuron::InitSynapseDeltas ; (; ). initialize the error fields of all pre-neurons this method should only be called in batch mode ; Definition at line 283 of file TNeuron.cxx. ◆ IsA(). virtual TClass * TMVA::TNeuron::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 157 of file TNeuron.h. ◆ IsInputNeuron(). Bool_t TMVA::TNeuron::IsInputNeuron ; (; ); const. inline . Definition at line 116 of file TNeuron.h. ◆ IsOutputNeuron(). Bool_t TMVA::TNeuron::IsOutputNeuron ; (; ); const. inline . Definition at line 117 of file TNeuron.h. ◆ Log(). TMVA::MsgLogger & TMVA::TNeuron::Log ; (; ); const. private . Definition at line 343 of file TNeuron.cxx. ◆ NullifyLinks(). void TMVA::TNeuron::NullifyLinks ; (; TObjArray *& ; links). inlineprivate . Definition at line 139 of file TNeuron.h. ◆ NumLinks(). Int_t TMVA::TNeuron::NumLinks ; (; TObjArray * ; links); const. inlineprivate . Definition at line 135 of file TNeuron.h. ◆ NumPostLinks(). Int_t TMVA::TNeuron::NumPostLinks ; (; ); const. inline . Definition at line 109 of file TNeuron.h. ◆ NumPreLinks(). Int_t TMVA::TNeuron::NumPreLinks ; (; ); const. inline . Definition at line 108 of file TNeuron.h. ◆ PostLinkAt(). TSynapse * TMVA::TNeuron::PostLinkAt ; (; Int_t ; index); const. inline . Definition at line 111 of file TNeuron.h. ◆ PreLinkAt(). TSynapse * TMVA::TNeuron::PreLinkAt ; (; Int_t ; index); const. inline . Definition at line 110 of file TNeuron.h. ◆ Print(). virtual void TMVA::TNeuron::Print ; (; Option_t * ; option = """"); const. inlinevirtual . This method must be overridden when a class wants ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1TNeuron.html:16750,Log,Log,16750,doc/master/classTMVA_1_1TNeuron.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1TNeuron.html,1,['Log'],['Log']
Testability," line 111 of file Factory.h. ◆ PrintHelpMessage(). void TMVA::Factory::PrintHelpMessage ; (; const TString & ; datasetname, . const TString & ; methodTitle = """" . ); const. Print predefined help message of classifier. ; Iterate over methods and test. ; Definition at line 1333 of file Factory.cxx. ◆ RootBaseDir(). TDirectory * TMVA::Factory::RootBaseDir ; (; ). inline . Definition at line 149 of file Factory.h. ◆ SetInputTreesFromEventAssignTrees(). void TMVA::Factory::SetInputTreesFromEventAssignTrees ; (; ). private . ◆ SetVerbose(). void TMVA::Factory::SetVerbose ; (; Bool_t ; v = kTRUE). Definition at line 343 of file Factory.cxx. ◆ Streamer(). virtual void TMVA::Factory::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TMVA::Configurable. ◆ StreamerNVirtual(). void TMVA::Factory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 227 of file Factory.h. ◆ TestAllMethods(). void TMVA::Factory::TestAllMethods ; (; ). Evaluates all booked methods on the testing data and adds the output to the Results in the corresponiding DataSet. ; Definition at line 1271 of file Factory.cxx. ◆ TrainAllMethods(). void TMVA::Factory::TrainAllMethods ; (; ). Iterates through all booked methods and calls training. ; Definition at line 1114 of file Factory.cxx. ◆ TrainAllMethodsForClassification(). void TMVA::Factory::TrainAllMethodsForClassification ; (; void ; ). inline . Definition at line 115 of file Factory.h. ◆ TrainAllMethodsForRegression(). void TMVA::Factory::TrainAllMethodsForRegression ; (; void ; ). inline . Definition at line 116 of file Factory.h. ◆ Verbose(). Bool_t TMVA::Factory::Verbose ; (; void ; ); const. inline . Definition at line 134 of file Factory.h. ◆ WriteDataInformation(). void TMVA::Factory::WriteDataInformation ; (; DataSetInfo & ; fDataSetInfo). private . Definition at line 602 of file Factory.cxx. Friends And Related Symbol Documentation. ◆ CrossValidation. friend c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Factory.html:34802,Test,TestAllMethods,34802,doc/master/classTMVA_1_1Factory.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Factory.html,1,['Test'],['TestAllMethods']
Testability," line 1263 of file TRolke.cxx. ◆ EvalLikeMod6(). Double_t TRolke::EvalLikeMod6 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; z, . Double_t ; b, . Int_t ; m, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 6: Background known/Efficiency binomial. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1307 of file TRolke.cxx. ◆ EvalLikeMod7(). Double_t TRolke::EvalLikeMod7 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; em, . Double_t ; sde, . Double_t ; b, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 7: background known/Efficiency Gauss. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1366 of file TRolke.cxx. ◆ EvalMonomial(). Double_t TRolke::EvalMonomial ; (; Double_t ; x, . const Int_t ; coef[], . Int_t ; N . ). staticprivate . Evaluate mononomial. ; Definition at line 1430 of file TRolke.cxx. ◆ EvalPolynomial(). Double_t TRolke::EvalPolynomial ; (; Double_t ; x, . const Int_t ; coef[], . Int_t ; N . ). staticprivate . Evaluate polynomial. ; Definition at line 1413 of file TRolke.cxx. ◆ GetBackground(). Double_t TRolke::GetBackground ; (; ). private . Return a simple background value (estimate/truth) given the pre-specified model. ; Definition at line 418 of file TRolke.cxx. ◆ GetBounding(). bool TRolke::GetBounding ; (; ); const. inline . Definition at line 178 of file TRolke.h. ◆ GetCL(). Double_t TRolke::GetCL ; (; ); const. inline . Definition at line 121 of file TRolke.h. ◆ GetCriticalNumber(). bool TRolke::GetCriticalNumber ; (; Int_t & ; ncrit, . Int_t ; maxtry = -1 . ). ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:29243,Test,Test,29243,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Test'],['Test']
Testability," line 1303 of file TProofBench.cxx. ◆ RemoveDataSet(). Int_t TProofBench::RemoveDataSet ; (; const char * ; dset). Physically remove the dataset 'dset', i.e. ; remove the dataset and the files it describes Return 0 on success, -1 on error ; Definition at line 1315 of file TProofBench.cxx. ◆ RunCPU(). Int_t TProofBench::RunCPU ; (; Long64_t ; nevents = -1, . Int_t ; start = -1, . Int_t ; stop = -1, . Int_t ; step = -1 . ). Perform the CPU run Return 0 on success, -1 on error. ; Definition at line 336 of file TProofBench.cxx. ◆ RunCPUx(). Int_t TProofBench::RunCPUx ; (; Long64_t ; nevents = -1, . Int_t ; start = -1, . Int_t ; stop = -1 . ). Perform the CPU run scanning over the number of workers per node Return 0 on success, -1 on error. ; Definition at line 365 of file TProofBench.cxx. ◆ RunDataSet(). Int_t TProofBench::RunDataSet ; (; const char * ; dset = ""BenchDataSet"", . Int_t ; start = 1, . Int_t ; stop = -1, . Int_t ; step = 1 . ). Perform a test using dataset 'dset' Return 0 on success, -1 on error Open the file for the results. ; Definition at line 897 of file TProofBench.cxx. ◆ RunDataSetx(). Int_t TProofBench::RunDataSetx ; (; const char * ; dset = ""BenchDataSet"", . Int_t ; start = 1, . Int_t ; stop = -1 . ). Perform a test using dataset 'dset' scanning over the number of workers per node. ; Return 0 on success, -1 on error Open the file for the results ; Definition at line 932 of file TProofBench.cxx. ◆ SetCPUPar(). void TProofBench::SetCPUPar ; (; const char * ; par). inline . Definition at line 121 of file TProofBench.h. ◆ SetCPUSel(). void TProofBench::SetCPUSel ; (; const char * ; sel). inline . Definition at line 120 of file TProofBench.h. ◆ SetDataGenPar(). void TProofBench::SetDataGenPar ; (; const char * ; par). inline . Definition at line 125 of file TProofBench.h. ◆ SetDataGenSel(). void TProofBench::SetDataGenSel ; (; const char * ; sel). inline . Definition at line 124 of file TProofBench.h. ◆ SetDataPar(). void TProofBench::SetDataPar ; (; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBench.html:21794,test,test,21794,doc/master/classTProofBench.html,https://root.cern,https://root.cern/doc/master/classTProofBench.html,1,['test'],['test']
Testability," line 2506 of file TProofServ.cxx. ◆ ProcessNext(). void TProofServ::ProcessNext ; (; TString * ; slb = 0). protectedvirtual . process the next query from the queue of submitted jobs. ; to be called on the top master only. ; Definition at line 4416 of file TProofServ.cxx. ◆ QueueQuery(). Int_t TProofServ::QueueQuery ; (; TProofQueryResult * ; pq). private . Add a query to the waiting list Returns the number of queries in the list. ; Definition at line 6856 of file TProofServ.cxx. ◆ ReceiveFile(). Int_t TProofServ::ReceiveFile ; (; const char * ; file, . Bool_t ; bin, . Long64_t ; size . ). Receive a file, either sent by a client or a master server. ; If bin is true it is a binary file, other wise it is an ASCII file and we need to check for Windows \r tokens. Returns -1 in case of error, 0 otherwise. ; Definition at line 2578 of file TProofServ.cxx. ◆ RedirectOutput(). void TProofServ::RedirectOutput ; (; const char * ; dir = 0, . const char * ; mode = ""w"" . ). private . Redirect stdout to a log file. ; This log file will be flushed to the client or master after each command. ; Definition at line 2518 of file TProofServ.cxx. ◆ RegisterDataSets(). Int_t TProofServ::RegisterDataSets ; (; TList * ; in, . TList * ; out, . TDataSetManager * ; dsm, . TString & ; e . ). static . Register TFileCollections in 'out' as datasets according to the rules in 'in'. ; Definition at line 4697 of file TProofServ.cxx. ◆ ReleaseWorker(). virtual void TProofServ::ReleaseWorker ; (; const char * ; ). inlinevirtual . Definition at line 305 of file TProofServ.h. ◆ Reset(). void TProofServ::Reset ; (; const char * ; dir). Reset PROOF environment to be ready for execution of next command. ; Definition at line 2548 of file TProofServ.cxx. ◆ ResolveKeywords(). void TProofServ::ResolveKeywords ; (; TString & ; fname, . const char * ; path = 0 . ). static . Replace <ord>, <user>, <u>, <group>, <stag>, <qnum>, <file>, <rver> and <build> placeholders in fname. ; Here, <rver> is the root version in i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:51207,log,log,51207,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['log'],['log']
Testability," line 385 of file TProofServ.h. Constructor & Destructor Documentation. ◆ TProofServLogHandler() [1/2]. TProofServLogHandler::TProofServLogHandler ; (; const char * ; cmd, . TSocket * ; s, . const char * ; pfx = """" . ). Execute 'cmd' in a pipe and handle output messages from the related file. ; Definition at line 240 of file TProofServ.cxx. ◆ TProofServLogHandler() [2/2]. TProofServLogHandler::TProofServLogHandler ; (; FILE * ; f, . TSocket * ; s, . const char * ; pfx = """" . ). Handle available message from the open file 'f'. ; Definition at line 268 of file TProofServ.cxx. ◆ ~TProofServLogHandler(). TProofServLogHandler::~TProofServLogHandler ; (; ). override . Handle available message in the open file. ; Definition at line 286 of file TProofServ.cxx. Member Function Documentation. ◆ GetCmdRtn(). Int_t TProofServLogHandler::GetCmdRtn ; (; ). static . Static method to get the return code from the execution of a command via the pipe. ; This is always 0 when the log handler is not used with a pipe ; Definition at line 344 of file TProofServ.cxx. ◆ IsValid(). Bool_t TProofServLogHandler::IsValid ; (; ). inline . Definition at line 390 of file TProofServ.h. ◆ Notify(). Bool_t TProofServLogHandler::Notify ; (; ). overridevirtual . Handle available message in the open file. ; Reimplemented from TFileHandler.; Definition at line 303 of file TProofServ.cxx. ◆ ReadNotify(). Bool_t TProofServLogHandler::ReadNotify ; (; ). inlineoverridevirtual . Notify when something can be read from the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 393 of file TProofServ.h. ◆ SetDefaultPrefix(). void TProofServLogHandler::SetDefaultPrefix ; (; const char * ; pfx). static . Static method to set the default prefix. ; Definition at line 336 of file TProofServ.cxx. Member Data Documentation. ◆ fFile. FILE* TProofServLogHandler::fFile. private . Definition at line 378 of file TProofServ.h. ◆ fgCmdRtn. Int_t TProofServLogHandler::fgCmdRtn = 0. stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLogHandler.html:18485,log,log,18485,doc/master/classTProofServLogHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLogHandler.html,1,['log'],['log']
Testability," line 40 of file LogLikelihoodFCN.h. Public Types; typedef BasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCN;  ; typedef BaseObjFunction::BaseFunction BaseFunction;  ; typedef ::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunction;  ; typedef ::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunction;  ; typedef ModelFunType::BackendType T;  ; typedef BaseObjFunction::Type_t Type_t;  ;  Public Types inherited from ROOT::Math::BasicFitMethodFunction< DerivFunType >; typedef FunctionType::BaseFunc BaseFunction;  ; enum  Type_t ;  enumeration specifying the possible fit method types More...;  . Public Member Functions;  LogLikelihoodFCN (const LogLikelihoodFCN &f);  Copy constructor. ;  ;  LogLikelihoodFCN (const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) ;  ;  LogLikelihoodFCN (const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential);  Constructor from unbin data set and model function (pdf) for object managed by users. ;  ; virtual ~LogLikelihoodFCN ();  Destructor (no operations) ;  ; virtual BaseFunction * Clone () const;  clone the function (need to return Base for Windows) ;  ; virtual double DataElement (const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) const;  i-th likelihood contribution and its gradient ;  ; virtual void Gradient (const double *x, double *g) const;  ; virtual unsigned int NFitPoints () const;  ; LogLikelihoodFCN & operator= (const LogLikelihoodFCN &rhs);  Assignment operator. ;  ; virtual BaseObjFunction::Type_t Type () const;  get type of fit method function ;  ; void UseSumOfWeightSquare (bool on=true);  ;  Public Member Functions inherited from ROOT::F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:1455,Log,LogLikelihoodFCN,1455,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,2,['Log'],['LogLikelihoodFCN']
Testability," line 533 of file DataLoader.cxx. ◆ GetCorrelationMatrix(). TH2 * TMVA::DataLoader::GetCorrelationMatrix ; (; const TString & ; className). returns the correlation matrix of datasets ; Definition at line 717 of file DataLoader.cxx. ◆ GetDataSetInfo(). TMVA::DataSetInfo & TMVA::DataLoader::GetDataSetInfo ; (; ). Definition at line 137 of file DataLoader.cxx. ◆ GetDefaultDataSetInfo(). const DataSetInfo & TMVA::DataLoader::GetDefaultDataSetInfo ; (; ). inline . Definition at line 165 of file DataLoader.h. ◆ IsA(). virtual TClass * TMVA::DataLoader::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Configurable.; Definition at line 214 of file DataLoader.h. ◆ MakeCopy(). TMVA::DataLoader * TMVA::DataLoader::MakeCopy ; (; TString ; name). Copy method use in VI and CV. ; Definition at line 691 of file DataLoader.cxx. ◆ MakeKFoldDataSet(). void TMVA::DataLoader::MakeKFoldDataSet ; (; CvSplit & ; s). Function required to split the training and testing datasets into a number of folds. ; Required by the CrossValidation and HyperParameterOptimisation classes. The option to split the training dataset into a training set and a validation set is implemented but not currently used. ; Definition at line 662 of file DataLoader.cxx. ◆ PrepareFoldDataSet(). void TMVA::DataLoader::PrepareFoldDataSet ; (; CvSplit & ; s, . UInt_t ; foldNumber, . Types::ETreeType ; tt = Types::kTraining . ). Function for assigning the correct folds to the testing or training set. ; Definition at line 670 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [1/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; const TCut & ; cut, . const TString & ; splitOpt . ). prepare the training and test trees -> same cuts for signal and background ; Definition at line 632 of file DataLoader.cxx. ◆ PrepareTrainingAndTestTree() [2/4]. void TMVA::DataLoader::PrepareTrainingAndTestTree ; (; const TCut & ; cut, . Int_t ; NsigTrain, . Int_t ; NbkgTrain, . Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataLoader.html:30283,test,testing,30283,doc/master/classTMVA_1_1DataLoader.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataLoader.html,1,['test'],['testing']
Testability," line macro files; -l : do not show splash screen; -x : exit on exception; dir : if dir is a valid directory cd to it before executing. -? : print usage; -h : print usage; --help : print usage; -config : print ./configure options. -b ROOT session runs in batch mode, without graphics display. This mode is useful in case one does not want to set the DISPLAY or cannot do it for some reason.; -n usually, launching a ROOT session will execute a logon script and quitting will execute a logoff script. This option prevents the execution of these two scripts.; it is also possible to execute a script without entering a ROOT session. One simply adds the name of the script(s) after the ROOT command. Be warned: after finishing the execution of the script, ROOT will normally enter a new session.; -q process command line script files and exit. For example if you would like to run a script myMacro.C in the background, redirect the output into a file myMacro.log, and exit after the script execution, use the following syntax:; root -b -q myMacro.C > myMacro.log; If you need to pass a parameter to the script use:; root -b -q 'myMacro.C(3)' > myMacro.log; Be mindful of the quotes, i.e. if you need to pass a string as a parameter, the syntax is:; root -b -q 'myMacro.C(""text"")' > myMacro.log; You can build a shared library with ACLiC and then use this shared library on the command line for a quicker execution (i.e. the compiled speed rather than the interpreted speed). See also “Cling the C++ Interpreter”.; root -b -q myMacro.so > myMacro.log; ROOT has a powerful C/C++ interpreter giving you access to all available ROOT classes, global variables, and functions via the command line. By typing C++ statements at the prompt, you can create objects, call functions, execute scripts, etc. For example:; root[] 1+sqrt(9); (const double)4.00000000000000000e+00; root[] for (int i = 0; i<4; i++) cout << ""Hello"" << i << endl; Hello 0; Hello 1; Hello 2; Hello 3; root[] .q; To exit the ROOT session, ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:34003,log,log,34003,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability," linestyle = 1); virtual voidSetLineWidth(Width_t linewidth = 1); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidSetMarkerColor(Color_t cindex = 1); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTVirtualPS::SetStream(ofstream* os); virtual voidTAttText::SetTextAlign(Short_t align = 11); virtual voidTAttText::SetTextAngle(Float_t tangle = 0)MENU ; virtual voidTAttText::SetTextAttributes()MENU ; virtual voidSetTextColor(Color_t cindex = 1); virtual voidTAttText::SetTextFont(Font_t tfont = 62); virtual voidTAttText::SetTextSize(Float_t tsize = 1); virtual voidTAttText::SetTextSizePixels(Int_t npixels); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTVirtualPS::SetType(Int_t = -111); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidText(Double_t x, Double_t y, const char* string); voidTextNDC(Double_t u, Double_t v, const char* string); virtual voidTObject::UseCurrentStyle(); Double_tUtoPDF(Double_t u); Double_tVtoPDF(Double_t v); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteCompressedBuffer(); virtual voidTVirtualPS::WriteInteger(Int_t i, Bool_t space = kTRUE); virtual voidWriteReal(Float_t r); Double_tXtoPDF(Double_t x); Double_tYtoPDF(Double_t y).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPDF.html:9793,Test,TestBit,9793,root/html528/TPDF.html,https://root.cern,https://root.cern/root/html528/TPDF.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; TGLPlotPainter*fPlotPainter; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlot3D(); Constructor. ~TGLPlot3D(); Destructor. void SetPainter(TGLPlotPainter* p); Set painter object and destroy the old one. TGLPlot3D* InstantiatePlot(TObject* obj); Instantiate the correct plot-painter for given object.; Protected method. TGLPlot3D* CreatePlot(TH3* h, TPolyMarker3D* pm); Create GL plot for specified TH3 and polymarker. TGLPlot3D* CreatePlot(TObject* obj, const Option_t* opt, TVirtualPad* pad); Create GL plot for specified object and options.; Which axes are logarithmic is determined from a pad. TGLPlot3D* CreatePlot(TObject* obj, const Option_t* opt, Bool_t logx, Bool_t logy, Bool_t logz); Create GL plot for specified object and options.; Which axes are logarithmic is determined from explicit arguments. TGLPlot3D(const TGLPlot3D& ). TGLPlot3D& operator=(const TGLPlot3D& ). Bool_t KeepDuringSmartRefresh() const; { return kFALSE; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-02 15:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGLPlot3D.html:5347,log,logarithmic,5347,root/html604/TGLPlot3D.html,https://root.cern,https://root.cern/root/html604/TGLPlot3D.html,5,['log'],"['logarithmic', 'logx', 'logy', 'logz']"
Testability," list caching; Int_tTGLLogicalShape::fDLSize! display-list size for different LODs; UShort_tTGLLogicalShape::fDLValid! display-list validity bit-field; TObject*TGLLogicalShape::fExternalObj! Also plays the role of ID.; TGLPhysicalShape*TGLLogicalShape::fFirstPhysical! first replica; Bool_tTGLObject::fMultiColorAre multiple colors used for object rendering.; Bool_tTGLLogicalShape::fOwnExtObj! External object is a fake; TGLPlotPainter*fPlotPainter; UInt_tTGLLogicalShape::fRef! physical instance ref counting; Bool_tTGLLogicalShape::fRefStrong! Strong ref (delete on 0 ref); not in scene; TGLScene*TGLLogicalShape::fScene! scene where object is stored (can be zero!); static Bool_tTGLLogicalShape::fgIgnoreSizeForCameraInterest. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLPlot3D(); Constructor. ~TGLPlot3D(); Destructor. void SetPainter(TGLPlotPainter* p); Set painter object and destroy the old one. TGLPlot3D* InstantiatePlot(TObject* obj); Instantiate the correct plot-painter for given object.; Protected method. TGLPlot3D* CreatePlot(TH3* h, TPolyMarker3D* pm); Create GL plot for specified TH3 and polymarker. TGLPlot3D* CreatePlot(TObject* obj, const Option_t* opt, TVirtualPad* pad); Create GL plot for specified object and options.; Which axes are logarithmic is determined from a pad. TGLPlot3D* CreatePlot(TObject* obj, const Option_t* opt, Bool_t logx, Bool_t logy, Bool_t logz); Create GL plot for specified object and options.; Which axes are logarithmic is determined from explicit arguments. TGLPlot3D(const TGLPlot3D& ). TGLPlot3D& operator=(const TGLPlot3D& ). Bool_t KeepDuringSmartRefresh() const; { return kFALSE; }. » Author: Matevz Tadel 2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id$ » Last generated: 2015-06-30 14:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLPlot3D.html:5347,log,logarithmic,5347,root/html602/TGLPlot3D.html,https://root.cern,https://root.cern/root/html602/TGLPlot3D.html,5,['log'],"['logarithmic', 'logx', 'logy', 'logz']"
Testability," list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; Bool_tmap(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& obser",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooMappedCategory.html:10467,test,testArg,10467,root/html534/RooMappedCategory.html,https://root.cern,https://root.cern/root/html534/RooMappedCategory.html,1,['test'],['testArg']
Testability," list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Bool_tRooAbsArg::localNoDirtyInhibit() const; const RooCatType*RooAbsCategory::lookupType(Int_t index, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const char* label, Bool_t printError = kFALSE) const; const RooCatType*RooAbsCategory::lookupType(const RooCatType& type, Bool_t printError = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; Bool_tmap(const char* inKeyRegExp, const char* outKeyName, Int_t outKeyNum = NoCatIdx); voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Int_tRooAbsCategory::numTypes(const char* = 0) const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); Bool_tRooAbsCategory::operator!=(Int_t index); Bool_tRooAbsCategory::operator!=(const char* label); Bool_tRooAbsCategory::operator!=(const RooAbsArg& other); RooMappedCategory&operator=(const RooMappedCategory&); Bool_tRooAbsCategory::operator==(Int_t index) const; Bool_tRooAbsCategory::operator==(const char* label) const; virtual Bool_tRooAbsCategory::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMappedCategory.html:10220,test,testArg,10220,root/html602/RooMappedCategory.html,https://root.cern,https://root.cern/root/html602/RooMappedCategory.html,2,['test'],['testArg']
Testability," lmat ; Definition at line 107 of file GSLRandomFunctions.h. ◆ GaussianTail(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::GaussianTail ; (; double ; a, . double ; sigma = 1 . ). inline . Gaussian Tail distribution. ; Definition at line 89 of file GSLRandomFunctions.h. ◆ GausZig(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::GausZig ; (; double ; mean, . double ; sigma . ). inline . Definition at line 57 of file GSLRandomFunctions.h. ◆ Landau(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Landau ; (; double ; mean = 0, . double ; sigma = 1 . ). inline . Landau distribution. ; Definition at line 127 of file GSLRandomFunctions.h. ◆ Logistic(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Logistic ; (; double ; a). inline . Logistic distribution. ; Definition at line 182 of file GSLRandomFunctions.h. ◆ LogNormal(). template<class EngineType > . double ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::LogNormal ; (; double ; zeta, . double ; sigma . ). inline . Log Normal distribution. ; Definition at line 148 of file GSLRandomFunctions.h. ◆ Multinomial(). template<class EngineType > . std::vector< unsigned int > ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::Multinomial ; (; unsigned int ; ntot, . const std::vector< double > & ; p . ). inline . Multinomial distribution. ; Definition at line 238 of file GSLRandomFunctions.h. ◆ NegativeBinomial(). template<class EngineType > . unsigned int ROOT::Math::RandomFunctions< EngineType, ROOT::Math::GSLRandomEngine >::NegativeBinomial ; (; double ; n, . double ; prob . ). inline . Negative Binomial distribution First parameter is n, second is probability To be consistent with Random::Binomial. ; Definition at line 231 of file GSL",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html:11309,Log,Logistic,11309,doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RandomFunctions_3_01EngineType_00_01ROOT_1_1Math_1_1GSLRandomEngine_01_4.html,1,['Log'],['Logistic']
Testability," log entry.; 89 /// \param entry - the RLogEntry to be emitted.; 90 /// \returns false if further emission of this Log should be suppressed.; 91 ///; 92 /// \note This function is called concurrently; log emission must be locked; 93 /// if needed. (The default log handler using ROOT's DefaultErrorHandler is locked.); 94 virtual bool Emit(const RLogEntry &entry) = 0;; 95};; 96 ; 97/**; 98 A log configuration for a channel, e.g. ""RHist"".; 99 Each ROOT module has its own log, with potentially distinct verbosity.; 100 */; 101class RLogChannel : public RLogDiagCount {; 102 /// Name as shown in diagnostics; 103 std::string fName;; 104 ; 105 /// Verbosity of this channel. By default, use the global verbosity.; 106 ELogLevel fVerbosity = ELogLevel::kUnset;; 107 ; 108public:; 109 /// Construct an anonymous channel.; 110 RLogChannel() = default;; 111 ; 112 /// Construct an anonymous channel with a default verbosity.; 113 explicit RLogChannel(ELogLevel verbosity) : fVerbosity(verbosity) {}; 114 ; 115 /// Construct a log channel given its name, which is part of the diagnostics.; 116 RLogChannel(const std::string &name) : fName(name) {}; 117 ; 118 ELogLevel SetVerbosity(ELogLevel verbosity); 119 {; 120 std::swap(fVerbosity, verbosity);; 121 return verbosity;; 122 }; 123 ELogLevel GetVerbosity() const { return fVerbosity; }; 124 ELogLevel GetEffectiveVerbosity(const RLogManager &mgr) const;; 125 ; 126 const std::string &GetName() const { return fName; }; 127};; 128 ; 129/**; 130 A RLogHandler that multiplexes diagnostics to different client `RLogHandler`s; 131 and keeps track of the sum of `RLogDiagCount`s for all channels.; 132 ; 133 `RLogHandler::Get()` returns the process's (static) log manager.; 134 */; 135 ; 136class RLogManager : public RLogChannel, public RLogHandler {; 137 std::mutex fMutex;; 138 std::list<std::unique_ptr<RLogHandler>> fHandlers;; 139 ; 140public:; 141 /// Initialize taking a RLogHandler.; 142 RLogManager(std::unique_ptr<RLogHandler> lh) : RLogChannel(ELog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx_source.html:3933,log,log,3933,doc/master/RLogger_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx_source.html,1,['log'],['log']
Testability," log grid scan (default is equidistant bins) will work only if xlow > 0. ;  ; void SetNpx (int npx);  Set the number of point used to bracket root using a grid. ;  ; int Status () const override;  Returns status of last estimate. ;  ; double XLower () const override;  Return current lower bound of the minimization interval. ;  ; double XMinimum () const override;  Return current estimate of the position of the minimum. ;  ; double XUpper () const override;  Return current upper bound of the minimization interval. ;  . Static Public Member Functions; static void SetDefaultNpx (int npx);  set number of default Npx used at construction time (when SetNpx is not called) Default value is 100 ;  ; static void SetDefaultNSearch (int n);  set number of times the bracketing search in combination with is done to find a good interval Default value is 10 ;  . Private Attributes; const IGenFunction * fFunction;  Pointer to the function. ;  ; bool fLogScan;  flag to control usage of a log scan ;  ; int fNIter;  Number of iterations needed for the last estimation. ;  ; int fNpx;  Number of points to bracket minimum with grid (def is 100) ;  ; int fStatus;  Status of code of the last estimate. ;  ; double fXMax;  Upper bound of the search interval. ;  ; double fXMin;  Lower bound of the search interval. ;  ; double fXMinimum;  Position of the estimated minimum. ;  . Additional Inherited Members;  Private Member Functions inherited from ROOT::Math::IMinimizer1D;  IMinimizer1D ();  ; virtual ~IMinimizer1D ();  . #include <Math/BrentMinimizer1D.h>. Inheritance diagram for ROOT::Math::BrentMinimizer1D:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::BrentMinimizer1D ; (; ). Default Constructor. ; Definition at line 33 of file BrentMinimizer1D.cxx. ◆ ~BrentMinimizer1D(). ROOT::Math::BrentMinimizer1D::~BrentMinimizer1D ; (; ). inlineoverride . Defaul",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html:3617,log,log,3617,doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentMinimizer1D.html,1,['log'],['log']
Testability," logging; 1403 auto optimParametersString = [&]() {; 1404 TString optimParameters;; 1405 for ( auto & element : settings.optimizerParams) {; 1406 TString key = element.first;; 1407 key.ReplaceAll(settings.optimizerName + ""_"", """"); // strip optimizerName_; 1408 double value = element.second;; 1409 if (!optimParameters.IsNull()); 1410 optimParameters += "","";; 1411 else; 1412 optimParameters += "" ("";; 1413 optimParameters += TString::Format(""%s=%g"", key.Data(), value);; 1414 }; 1415 if (!optimParameters.IsNull()); 1416 optimParameters += "")"";; 1417 return optimParameters;; 1418 };; 1419 ; 1420 Log() << ""Training phase "" << trainingPhase << "" of "" << this->GetTrainingSettings().size() << "": ""; 1421 << "" Optimizer "" << settings.optimizerName; 1422 << optimParametersString(); 1423 << "" Learning rate = "" << settings.learningRate << "" regularization "" << (char)settings.regularization; 1424 << "" minimum error = "" << minValError << Endl;; 1425 if (!fInteractive) {; 1426 std::string separator(62, '-');; 1427 Log() << separator << Endl;; 1428 Log() << std::setw(10) << ""Epoch""; 1429 << "" | "" << std::setw(12) << ""Train Err."" << std::setw(12) << ""Val. Err."" << std::setw(12); 1430 << ""t(s)/epoch"" << std::setw(12) << ""t(s)/Loss"" << std::setw(12) << ""nEvents/s"" << std::setw(12); 1431 << ""Conv. Steps"" << Endl;; 1432 Log() << separator << Endl;; 1433 }; 1434 ; 1435 // set up generator for shuffling the batches; 1436 // if seed is zero we have always a different order in the batches; 1437 size_t shuffleSeed = 0;; 1438 if (fRandomSeed != 0) shuffleSeed = fRandomSeed + trainingPhase;; 1439 RandomGenerator<TRandom3> rng(shuffleSeed);; 1440 ; 1441 // print weights before; 1442 if (fBuildNet && debug) {; 1443 Log() << ""Initial Deep Net Weights "" << Endl;; 1444 auto & weights_tensor = deepNet.GetLayerAt(0)->GetWeights();; 1445 for (size_t l = 0; l < weights_tensor.size(); ++l); 1446 weights_tensor[l].Print();; 1447 auto & bias_tensor = deepNet.GetLayerAt(0)->GetBiases();; 1448 bias_tensor[0].P",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:56672,Log,Log,56672,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,2,['Log'],['Log']
Testability," lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linea rinterpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0) const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value. double GetExpectedUpperLimit(double nsig = 0) const; Get the expected upper limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (defa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html:12722,test,test,12722,root/html530/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability," lowSearch = false, double xmin = 1, double xmax = 0) const; return the X value of the given graph for the target value y0; the graph is evaluated using linear interpolation by default.; if option = ""S"" a TSpline3 is used. double FindInterpolatedLimit(double target, bool lowSearch = false, double xmin = 1, double xmax = 0); interpolate to find a limit value; Use a linear or a spline interpolation depending on the interpolation option. int FindClosestPointIndex(double target); find the object with the smallest error that is < 1 sigma from the target. Double_t LowerLimit(). Double_t UpperLimit(); std::cout << ""finding point with cl = "" << (1-ConfidenceLevel())/2 << endl;. Double_t CalculateEstimatedError(double target); Return an error estimate on the upper limit. This is the error on; either CLs or CLsplusb divided by an estimate of the slope at this; point. Double_t LowerLimitEstimatedError(). Double_t UpperLimitEstimatedError(). SamplingDistribution * GetBackgroundTestStatDist(int index) const; get the background test statistic distribution. SamplingDistribution * GetSignalAndBackgroundTestStatDist(int index) const; get the signal and background test statistic distribution. SamplingDistribution * GetExpectedPValueDist(int index) const; get the expected p-value distribution at the scanned point index. SamplingDistribution * GetLimitDistribution(bool lower) const; get the limit distribution (lower/upper depending on the flag); by interpolating the expected p values for each point. double GetExpectedLowerLimit(double nsig = 0, const char* opt = """") const; Get the expected lower limit; nsig is used to specify which expected value of the UpperLimitDistribution; For example; nsig = 0 (default value) returns the expected value; nsig = -1 returns the lower band value at -1 sigma; nsig + 1 return the upper value; opt = """" (default) : compute limit by interpolating all the p values, find the corresponding limit distribution; and then find the quantiles in the limit distributi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html:13051,test,test,13051,root/html532/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html532/RooStats__HypoTestInverterResult.html,1,['test'],['test']
Testability," ls(Option_t* option = """") const; -*-*-*List this 3-D polyline with its attributes; *-* ==========================================. void Print(Option_t* option = """") const; -*Dump this 3-D polyline with its attributes; *-* ==========================================. void Delete(Option_t* opt); { TObject::Delete(opt);}. Int_t DistancetoPrimitive(Int_t px, Int_t py); {return fPoints?fPoints->DistancetoPrimitive(px,py):99999;}. Int_t GetLastPosition() const; {return fPoints?fPoints->GetLastPosition():0;}. Int_t GetN() const; {return fPoints?fPoints->GetN():0;}. Float_t * GetP() const; {return fPoints?fPoints->GetP():0;}. Float_t GetX(Int_t idx) const; {return fPoints?fPoints->GetX(idx):0;}. Float_t GetY(Int_t idx) const; {return fPoints?fPoints->GetY(idx):0;}. Float_t GetZ(Int_t idx) const; {return fPoints?fPoints->GetZ(idx):0;}. const Float_t * GetXYZ(Int_t idx); {return fPoints?fPoints->GetXYZ(idx):0;}. Float_t * GetXYZ(Float_t* xyz, Int_t idx, Int_t num = 1) const; {return fPoints?fPoints->GetXYZ(xyz,idx,num):0;}. Option_t * GetOption() const; {return fPoints?fPoints->GetOption():"""";}. Int_t SetLastPosition(Int_t idx); {return fPoints?fPoints->SetLastPosition(idx):0;}. void SetOption(Option_t* option = """"); {if (fPoints) fPoints->SetOption(option);}. Int_t SetPoint(Int_t point, Float_t x, Float_t y, Float_t z); {return fPoints?fPoints->SetPoint(point,x,y,z):0;}. Int_t SetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"); {return fPoints?fPoints->SetPoints(n,p,option):0;}. Int_t Size() const; {return fPoints?fPoints->Size():0;}. Bool_t IsOwner() const; {return TestBit(kIsOwner);}. void PaintPoints(Int_t , Float_t* , Option_t* ); {;}. » Author: Valery Fine(fine@mail.cern.ch) 24/04/99 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/table:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPoints3D.html:10134,Test,TestBit,10134,root/html534/TPoints3D.html,https://root.cern,https://root.cern/root/html534/TPoints3D.html,1,['Test'],['TestBit']
Testability," make sure that only one pad is highlighted; 1375 {; 1376 TIter next(gROOT->GetListOfCanvases());; 1377 TCanvas *tc;; 1378 while ((tc = (TCanvas *)next())); 1379 tc->Update();; 1380 }; 1381 ; 1382 //if (pad->GetGLDevice() != -1 && fSelected); 1383 // fSelected->ExecuteEvent(event, px, py);; 1384 ; 1385 break; // don't want fPadSave->cd() to be executed at the end; 1386 ; 1387 case kButton2Motion:; 1388 //was empty!; 1389 case kButton2Up:; 1390 if (fSelected) {; 1391 gPad = fSelectedPad;; 1392 ; 1393 fSelected->ExecuteEvent(event, px, py);; 1394 RunAutoExec();; 1395 }; 1396 break;; 1397 ; 1398 case kButton2Double:; 1399 break;; 1400 ; 1401//*-*----------------------------------------------------------------------; 1402 ; 1403 case kButton3Down:; 1404 // popup context menu; 1405 pad = Pick(px, py, prevSelObj);; 1406 if (!pad) return;; 1407 ; 1408 if (!fDoubleBuffer) FeedbackMode(kFALSE);; 1409 ; 1410 if (fContextMenu && fSelected && !fSelected->TestBit(kNoContextMenu) &&; 1411 !pad->TestBit(kNoContextMenu) && !TestBit(kNoContextMenu)); 1412 fContextMenu->Popup(px, py, fSelected, this, pad);; 1413 ; 1414 break;; 1415 ; 1416 case kButton3Motion:; 1417 break;; 1418 ; 1419 case kButton3Up:; 1420 if (!fDoubleBuffer) FeedbackMode(kTRUE);; 1421 break;; 1422 ; 1423 case kButton3Double:; 1424 break;; 1425 ; 1426 case kKeyPress:; 1427 if (!fSelectedPad || !fSelected) return;; 1428 gPad = fSelectedPad; // don't use cd() because we won't draw in pad; 1429 // we will only use its coordinate system; 1430 fSelected->ExecuteEvent(event, px, py);; 1431 ; 1432 RunAutoExec();; 1433 ; 1434 break;; 1435 ; 1436 case kButton1Shift:; 1437 // Try to select; 1438 pad = Pick(px, py, prevSelObj);; 1439 ; 1440 if (!pad) return;; 1441 ; 1442 EnterLeave(prevSelPad, prevSelObj);; 1443 ; 1444 gPad = pad; // don't use cd() we will use the current; 1445 // canvas via the GetCanvas member and not via; 1446 // gPad->GetCanvas; 1447 if (fSelected) {; 1448 fSelected->ExecuteEvent(event, px, py);; 1449 RunA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:44459,Test,TestBit,44459,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['Test'],['TestBit']
Testability," many points, out of memory"");; 6395 return;; 6396 }; 6397 if1 = 1;; 6398 if2 = 2*npoints;; 6399 }; 6400 ; 6401 // compute the offset of the error bars due to the symbol size; 6402 s2x = gPad->PixeltoX(Int_t(0.5*sbasex)) - gPad->PixeltoX(0);; 6403 s2y =-gPad->PixeltoY(Int_t(0.5*sbasey)) + gPad->PixeltoY(0);; 6404 ; 6405 // compute size of the lines at the end of the error bars; 6406 Int_t dxend = Int_t(gStyle->GetEndErrorSize());; 6407 bxsize = gPad->PixeltoX(dxend) - gPad->PixeltoX(0);; 6408 bysize =-gPad->PixeltoY(dxend) + gPad->PixeltoY(0);; 6409 ; 6410 ; 6411 if (fixbin) {; 6412 if (Hoption.Logx) xp = TMath::Power(10,Hparam.xmin) + 0.5*Hparam.xbinsize;; 6413 else xp = Hparam.xmin + 0.5*Hparam.xbinsize;; 6414 } else {; 6415 delta = fH->GetBinWidth(first);; 6416 xp = fH->GetBinLowEdge(first) + 0.5*delta;; 6417 }; 6418 ; 6419 // if errormarker = 0 or symbolsize = 0. no symbol is drawn; 6420 if (Hoption.Logx) logxmin = TMath::Power(10,Hparam.xmin);; 6421 if (Hoption.Logy) logymin = TMath::Power(10,Hparam.ymin);; 6422 ; 6423 // ---------------------- Loop over the points---------------------; 6424 for (k=first; k<=last; k++) {; 6425 ; 6426 // get the data; 6427 // xp = X position of the current point; 6428 // yp = Y position of the current point; 6429 // ex1 = Low X error; 6430 // ex2 = Up X error; 6431 // ey1 = Low Y error; 6432 // ey2 = Up Y error; 6433 // (xi,yi) = Error bars coordinates; 6434 ; 6435 // apply offset on errors for bar histograms; 6436 Double_t xminTmp = gPad->XtoPad(fXaxis->GetBinLowEdge(k));; 6437 Double_t xmaxTmp = gPad->XtoPad(fXaxis->GetBinUpEdge(k));; 6438 if (Hoption.Logx) {; 6439 xminTmp = TMath::Power(10, xminTmp);; 6440 xmaxTmp = TMath::Power(10, xmaxTmp);; 6441 }; 6442 Double_t w = (xmaxTmp-xminTmp)*width;; 6443 xminTmp += offset*(xmaxTmp-xminTmp);; 6444 xmaxTmp = xminTmp + w;; 6445 xp = (xminTmp+xmaxTmp)/2.;; 6446 ; 6447 if (Hoption.Logx) {; 6448 if (xp <= 0) goto L30;; 6449 if (xp < logxmin) goto L30;; 6450 if (xp > TMath::Power(10,xmax)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:236144,Log,Logy,236144,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['Log', 'log']","['Logy', 'logymin']"
Testability," master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during query processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:23864,log,log,23864,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,3,['log'],['log']
Testability," master server. Int_t HandleSocketInput(TMessage* mess, Bool_t all); Process input coming from the client or from the master server.; If 'all' is kFALSE, process only those messages that can be handled; during qurey processing.; Returns -1 if the message could not be processed, <-1 if something went; wrong. Returns 1 if the action may have changed the parallel state.; Returns 2 if the message has to be enqueued.; Returns 0 otherwise. Bool_t AcceptResults(Int_t connections, TVirtualProofPlayer* mergerPlayer); Accept and merge results from a set of workers. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). Bool_t IsParallel() const; True if in parallel mode. void Print(Option_t* option = """") const; Print status of slave server. void RedirectOutput(const char* dir = 0, const char* mode = ""w""); Redirect stdout to a log file. This log file will be flushed to the; client or master after each command. void Reset(const char* dir); Reset PROOF environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void Run(Bool_t retrn = kFALSE); Main server eventloop. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. void SendStatistics(); Send statistics of slave server to master or client. void SendParallel(Bool_t async = kFALSE); Send number of parallel nodes to master or client. Int_t UnloadPackage(const char* package); Removes link to package in working directory,; removes entry from include path,; removes entry from enabled package ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServ.html:22907,log,log,22907,root/html528/TProofServ.html,https://root.cern,https://root.cern/root/html528/TProofServ.html,3,['log'],['log']
Testability," maxIter << "" and tolerance "" << absTol << std::endl;; 262 ; 263 // find the roots by iterating; 264 fStatus = 0;; 265 int status = 0;; 266 int iter = 0;; 267 do {; 268 iter++;; 269 status = fSolver->Iterate();; 270 ; 271 if (fPrintLevel >= 2) {; 272 std::cout << ""GSLMultiRootFinder::Solve - iteration # "" << iter << "" status = "" << status << std::endl;; 273 PrintState();; 274 }; 275 // act in case of error; 276 if (status == GSL_EBADFUNC) {; 277 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration encountered a singular point due to a bad function value"");; 278 fStatus = status;; 279 break;; 280 }; 281 if (status == GSL_ENOPROG) {; 282 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""The iteration is not making any progress"");; 283 fStatus = status;; 284 break;; 285 }; 286 if (status != GSL_SUCCESS) {; 287 MATH_ERROR_MSG(""GSLMultiRootFinder::Solve"",""Unknown iteration error - exit"");; 288 fStatus = status;; 289 break;; 290 }; 291 ; 292 // test also residual; 293 status = fSolver->TestResidual(absTol);; 294 ; 295 ; 296 // should test also the Delta ??; 297 int status2 = fSolver->TestDelta(absTol, relTol);; 298 if (status2 == GSL_SUCCESS) {; 299 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 300 }; 301 }; 302 while (status == GSL_CONTINUE && iter < maxIter);; 303 if (status == GSL_CONTINUE) {; 304 MATH_INFO_MSGVAL(""GSLMultiRootFinder::Solve"",""exceeded max iterations, reached tolerance is not sufficient"",absTol);; 305 }; 306 if (status == GSL_SUCCESS) {; 307 if (fPrintLevel>=1) { // print the result; 308 MATH_INFO_MSG(""GSLMultiRootFinder::Solve"",""The iteration converged"");; 309 std::cout << ""GSL Algorithm used is : "" << fSolver->Name() << std::endl;; 310 std::cout << ""Number of iterations = "" << iter<< std::endl;; 311 ; 312 PrintState();; 313 }; 314 }; 315 fIter = iter;; 316 fStatus = status;; 317 return (fStatus == GSL_SUCCESS);; 318 ; 319}; 320 ; 321void GSLMultiRootFinder::PrintState(std::ostream & os) {; 322 // print current state; 323 if (!fS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html:10416,Test,TestResidual,10416,doc/master/GSLMultiRootFinder_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GSLMultiRootFinder_8cxx_source.html,1,['Test'],['TestResidual']
Testability," maxLh+1;; 1012 for (UInt_t icol=0; icol<nhvar; icol++) clen += hLengths[icol]+1;; 1013 ; 1014 // bar line; 1015 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 1016 logger << Endl;; 1017 ; 1018 // title bar; 1019 logger << setw(maxL+1) << "" "";; 1020 for (UInt_t icol=0; icol<nhvar; icol++) logger << setw(hLengths[icol]+1) << horiz[icol];; 1021 logger << Endl;; 1022 ; 1023 // the numbers; 1024 for (UInt_t irow=0; irow<nvvar; irow++) {; 1025 logger << setw(maxL) << vert[irow] << "":"";; 1026 for (UInt_t icol=0; icol<nhvar; icol++) {; 1027 logger << setw(hLengths[icol]+1) << TString::Format( ""%+1.3f"", M(irow,icol) );; 1028 }; 1029 logger << Endl;; 1030 }; 1031 ; 1032 // bar line; 1033 for (UInt_t i=0; i<clen; i++) logger << ""-"";; 1034 logger << Endl;; 1035}; 1036 ; 1037////////////////////////////////////////////////////////////////////////////////; 1038/// histogramming utility; 1039 ; 1040TString TMVA::Tools::GetXTitleWithUnit( const TString& title, const TString& unit ); 1041{; 1042 return ( unit == """" ? title : ( title + "" ["" + unit + ""]"" ) );; 1043}; 1044 ; 1045////////////////////////////////////////////////////////////////////////////////; 1046/// histogramming utility; 1047 ; 1048TString TMVA::Tools::GetYTitleWithUnit( const TH1& h, const TString& unit, Bool_t normalised ); 1049{; 1050 TString retval = ( normalised ? ""(1/N) "" : """" );; 1051 retval += TString::Format( ""dN_{ }/^{ }%.3g %s"", h.GetXaxis()->GetBinWidth(1), unit.Data() );; 1052 return retval;; 1053}; 1054 ; 1055////////////////////////////////////////////////////////////////////////////////; 1056/// writes a float value with the available precision to a stream; 1057 ; 1058void TMVA::Tools::WriteFloatArbitraryPrecision( Float_t val, ostream& os ); 1059{; 1060 os << val << "" :: "";; 1061 void * c = &val;; 1062 for (int i=0; i<4; i++) {; 1063 Int_t ic = *((char*)c+i)-'\0';; 1064 if (ic<0) ic+=256;; 1065 os << ic << "" "";; 1066 }; 1067 os << "":: "";; 1068}; 1069 ; 1070/////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Tools_8cxx_source.html:35553,log,logger,35553,doc/master/Tools_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Tools_8cxx_source.html,3,['log'],['logger']
Testability," maximum greater than threshold*maximum bin content of this. ;  ; void Smooth (Int_t ntimes=1, Option_t *option="""") override;  Smooth bin contents of this 2-d histogram using kernel algorithms similar to the ones used in the raster graphics community. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TH1;  ~TH1 () override;  Histogram default destructor. ;  ; virtual Bool_t Add (const TH1 *h, const TH1 *h2, Double_t c1=1, Double_t c2=1);  Replace contents of this histogram by the addition of h1 and h2. ;  ; virtual Bool_t Add (const TH1 *h1, Double_t c1=1);  Performs the operation: this = this + c1*h1 If errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Bool_t Add (TF1 *h1, Double_t c1=1, Option_t *option="""");  Performs the operation: this = this + c1*f1 if errors are defined (see TH1::Sumw2), errors are also recalculated. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Double_t &advalue) const;  Same function as above but returning also the test statistic value. ;  ; virtual Double_t AndersonDarlingTest (const TH1 *h2, Option_t *option="""") const;  Statistical test of compatibility in shape between this histogram and h2, using the Anderson-Darling 2 sample test. ;  ; void Browse (TBrowser *b) override;  Browse the Histogram object. ;  ; virtual Bool_t CanExtendAllAxes () const;  Returns true if all axes are extendable. ;  ; virtual Double_t Chi2Test (const TH1 *h2, Option_t *option=""UU"", Double_t *res=nullptr) const;  \( \chi^{2} \) test for comparing weighted and unweighted histograms. ;  ; virtual Double_t Chi2TestX (const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) const;  The computation routine of the Chisquare test. ;  ; virtual Double_t Chisquare (TF1 *f1, Option_t *option="""") const;  Compute and return the chisquare of this histogram with respect to a function The chisquare is computed by weighting each histo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH2C.html:12090,test,test,12090,doc/master/classTH2C.html,https://root.cern,https://root.cern/doc/master/classTH2C.html,6,['test'],['test']
Testability," member of TBuffer3D. If repeated addition of the same fID is found, the shape is cached already - and the costly tessellation does not need to be sent again. The viewer can also perform internal GL specific caching (display lists) with considerable performance gains in these cases. For this to work correctly the logical object in must be described in TBuffer3D in the local reference frame, complete with the local/master translation. In some cases you will not have a real object you can reasonably set TBuffer3D::fID to, or the object is recycled or temporary. To suppress internal caching in the GL Viewer in these cases, set TBuffer3D::fID to 0 (null).; The viewer indicates it can support local frame objects through the TVirtualViewer3D interface method: PreferLocalFrame(). If this returns kTRUE you can make repeated calls to AddObject(), with TBuffer3D containing the same fID, and different fLocalMaster placements.; For viewers supporting logical/physical objects, the TBuffer3D content refers to the properties of the logical object, with the exception of:. fLocalMaster transform; fColor; fTransparency. attributes, which can be varied for each physical object.; As a minimum requirement all clients must be capable of filling the raw tessellation of the object buffer, in the master reference frame. Conversely viewers must always be capable of displaying the object described by this buffer. If either does not meet this requirement the object may not be displayed.; 9.13.4.8 Scene Rebuilds; TBuffer3D::AddObject is not an explicit command to the viewer - it may for various reasons decide to ignore it:. It already has the object internally cached.; The object falls outside some ‘interest’ limits of the viewer camera.; The object is too small to be worth drawing. In all these cases TBuffer3D::AddObject() returns kNone, as it does for successful addition, indicating it does not require further information about this object. Hence you should not try to make any assumptions abo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:414896,log,logical,414896,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['log'],['logical']
Testability," members |; Public Member Functions |; Static Public Member Functions |; Private Types |; Private Attributes |; List of all members ; TSessionQueryFrame Class Reference. . Definition at line 377 of file TSessionViewer.h. Public Member Functions;  TSessionQueryFrame (TGWindow *parent, Int_t w, Int_t h);  Constructor. ;  ;  ~TSessionQueryFrame () override;  Destructor. ;  ; void Build (TSessionViewer *gui);  Build query information frame. ;  ; void Feedback (TList *objs);  Feedback function connected to Feedback signal. ;  ; TEditQueryFrame * GetQueryEditFrame () const;  ; TCanvas * GetStatsCanvas () const;  ; TGTab * GetTab () const;  ; void IndicateStop (Bool_t aborted);  Indicate that Cancel or Stop was clicked. ;  ; TClass * IsA () const override;  ; void Modified (Bool_t mod=kTRUE);  Notify changes in query editor settings. ;  ; void OnBtnAbort ();  Abort processing query. ;  ; void OnBtnFinalize ();  Finalize query. ;  ; void OnBtnRetrieve ();  Retrieve query. ;  ; void OnBtnShowLog ();  Show query log. ;  ; void OnBtnStop ();  Stop processing query. ;  ; void OnBtnSubmit ();  Submit query. ;  ; void Progress (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti);  ; void Progress (Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses);  New version of Progress (just forward to the old version for the time being). ;  ; void ProgressLocal (Long64_t total, Long64_t processed);  Update progress bar and status labels. ;  ; void ResetProgressDialog (const char *selec, Int_t files, Long64_t first, Long64_t entries);  Reset progress frame information fields. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSessionQueryFrame.html:1154,log,log,1154,doc/master/classTSessionQueryFrame.html,https://root.cern,https://root.cern/doc/master/classTSessionQueryFrame.html,1,['log'],['log']
Testability," message can be overwritten many time before it really sends to the client If connid == 0, message will be add to all connections After ctrl message is add to the output, short timer is activated and message send afterwards. ; Definition at line 1167 of file TWebCanvas.cxx. ◆ AddCustomClass(). void TWebCanvas::AddCustomClass ; (; const std::string & ; clname, . bool ; with_derived = false . ). static . Assign custom class. ; Definition at line 475 of file TWebCanvas.cxx. ◆ AddCustomFonts(). void TWebCanvas::AddCustomFonts ; (; TPadWebSnapshot & ; master). protected . Add special canvas objects with custom fonts. ; Definition at line 614 of file TWebCanvas.cxx. ◆ AddFont(). Font_t TWebCanvas::AddFont ; (; const char * ; name, . const char * ; ttffile, . Int_t ; precision = 2 . ). static . Add font to static list of fonts supported by the canvas Name specifies name of the font, second is font file with .ttf or .woff2 extension Only True Type Fonts (ttf) are supported by PDF Returns font index which can be used in auto font_indx = TWebCanvas::AddFont(""test"", ""test.ttf"", 2); gStyle->SetStatFont(font_indx);. ; Definition at line 228 of file TWebCanvas.cxx. ◆ AddSendQueue(). void TWebCanvas::AddSendQueue ; (; unsigned ; connid, . const std::string & ; msg . ). protected . Add message to send queue for specified connection If connid == 0, message will be add to all connections. ; Definition at line 1187 of file TWebCanvas.cxx. ◆ AssignStatusBits(). void TWebCanvas::AssignStatusBits ; (; UInt_t ; bits). protected . Assign clients bits. ; Definition at line 1472 of file TWebCanvas.cxx. ◆ BatchImageMode(). void TWebCanvas::BatchImageMode ; (; UInt_t ; n = 100). static . Configure batch image mode for web graphics. ; Allows to process many images with single headless browser invocation and increase performance of image production. When many canvases are stored as image in difference places, they first collected in batch and then processed when at least n images are prepared. On",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebCanvas.html:20343,test,test,20343,doc/master/classTWebCanvas.html,https://root.cern,https://root.cern/doc/master/classTWebCanvas.html,2,['test'],['test']
Testability," message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*mean(RooRealVar& obs); RooAbsMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooAbsMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_toffset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsReal.html:17880,test,testArg,17880,root/html534/RooAbsReal.html,https://root.cern,https://root.cern/root/html534/RooAbsReal.html,1,['test'],['testArg']
Testability," message, const char* serverValueString = 0) const; static voidlogEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tmaxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*mean(RooRealVar& obs); RooAbsMoment*mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tminTrialSamples(const RooArgSet&) const; RooAbsMoment*moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tnumEvalErrorItems(); static Int_tnumEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_toffset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsReal&operator=(const RooAbsReal&); Bool_toperator==(Double_t value) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsReal.html:17875,test,testArg,17875,root/html602/RooAbsReal.html,https://root.cern,https://root.cern/root/html602/RooAbsReal.html,2,['test'],['testArg']
Testability," message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support for schema evolution is enabled the list of TStreamerInfo; used to stream this object is kept in fInfos. This information is used; by TSocket::Send that sends this list through the socket. This list is in; turn used by TSocket::Recv to store the TStreamerInfo objects in the; relevant TClass in case the TClass does not know yet about a particular; class version. This feature is implemented to support clients and servers; with either different ROOT versions or different user classes versions. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pid is already in the message.; If not, then:; - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; - mark bit uid+1 where uid id the uid of the ProcessID. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. TMessage(const TMessage& ); TMessage objects cannot be copied or assigned. void operator=(const TMessage& ). Bool_t TestBitNumber(UInt_t bitnumber) const; used by friend TSocket. { return fBitsPIDs.TestBitNumber(bitnumber); }. TClass * GetClass() const; { return fClass;}. void Reset(). UInt_t What() const; { return fWhat; }. void EnableSchemaEvolution(Bool_t enable = kTRUE); { fEvolution = enable; }. Bool_t UsesSchemaEvolution() const; { return fEvolution; }. TList * GetStreamerInfos() const; { return fInfos; }. char * CompBuffer() const; { return fBufComp; }. Int_t CompLength() const; { return (Int_t)(fBufCompCur - fBufComp); }. » Author: Fons Rademakers 19/12/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMessage.html:25954,Test,TestBitNumber,25954,root/html534/TMessage.html,https://root.cern,https://root.cern/root/html534/TMessage.html,2,['Test'],['TestBitNumber']
Testability," message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support for schema evolution is enabled the list of TStreamerInfo; used to stream this object is kept in fInfos. This information is used; by TSocket::Send that sends this list through the socket. This list is in; turn used by TSocket::Recv to store the TStreamerInfo objects in the; relevant TClass in case the TClass does not know yet about a particular; class version. This feature is implemented to support clients and servers; with either different ROOT versions or different user classes versions. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pid is already in the message.; If not, then:; - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; - mark bit uid+1 where uid id the uid of the ProcessID. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. TMessage(const TMessage& ); TMessage objects cannot be copied or assigned. void operator=(const TMessage& ). Bool_t TestBitNumber(UInt_t bitnumber) const; used by friend TSocket. { return fBitsPIDs.TestBitNumber(bitnumber); }. TClass * GetClass() const; { return fClass;}. void Reset(). UInt_t What() const; { return fWhat; }. void EnableSchemaEvolution(Bool_t enable = kTRUE); { fEvolution = enable; }. Bool_t UsesSchemaEvolution() const; { return fEvolution; }. TList * GetStreamerInfos() const; { return fInfos; }. char * CompBuffer() const; { return fBufComp; }. Int_t CompLength() const; { return (Int_t)(fBufCompCur - fBufComp); }. » Author: Fons Rademakers 19/12/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-02 16:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMessage.html:26826,Test,TestBitNumber,26826,root/html604/TMessage.html,https://root.cern,https://root.cern/root/html604/TMessage.html,2,['Test'],['TestBitNumber']
Testability," message. The message will only be uncompressed when; kMESS_ZIP is set. Returns -1 in case of error, 0 otherwise. void WriteObject(const TObject* obj); Write object to message buffer.; When support for schema evolution is enabled the list of TStreamerInfo; used to stream this object is kept in fInfos. This information is used; by TSocket::Send that sends this list through the socket. This list is in; turn used by TSocket::Recv to store the TStreamerInfo objects in the; relevant TClass in case the TClass does not know yet about a particular; class version. This feature is implemented to support clients and servers; with either different ROOT versions or different user classes versions. UShort_t WriteProcessID(TProcessID* pid); Check if the ProcessID pid is already in the message.; If not, then:; - mark bit 0 of fBitsPIDs to indicate that a ProcessID has been found; - mark bit uid+1 where uid id the uid of the ProcessID. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. TMessage(const TMessage& ); TMessage objects cannot be copied or assigned. void operator=(const TMessage& ). Bool_t TestBitNumber(UInt_t bitnumber) const; used by friend TSocket. { return fBitsPIDs.TestBitNumber(bitnumber); }. TClass * GetClass() const; { return fClass;}. void Reset(). UInt_t What() const; { return fWhat; }. void EnableSchemaEvolution(Bool_t enable = kTRUE); { fEvolution = enable; }. Bool_t UsesSchemaEvolution() const; { return fEvolution; }. TList * GetStreamerInfos() const; { return fInfos; }. char * CompBuffer() const; { return fBufComp; }. Int_t CompLength() const; { return (Int_t)(fBufCompCur - fBufComp); }. » Author: Fons Rademakers 19/12/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/net:$Id$ » Last generated: 2015-06-30 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMessage.html:26717,Test,TestBitNumber,26717,root/html602/TMessage.html,https://root.cern,https://root.cern/root/html602/TMessage.html,2,['Test'],['TestBitNumber']
Testability," method must be overridden if an object has to react to timers. ; Reimplemented in TGWindow, TGuiBldDragManager, TSessionViewer, TGLEventHandler, TGCommandPlugin, TGDNDManager, TGFileContainer, TGPopupMenu, TGScrollBar, TGShutter, TGTextEdit, TGTextEditor, TGTextEntry, TGTextView, TGToolTip, TGHtml, TVirtualPacketizer, TProofPlayerRemote, TProofPlayerSlave, TProofPlayerSuperMaster, TProofPlayerLite, and TTreeViewer.; Definition at line 493 of file TObject.cxx. ◆ Hash(). ULong_t TObject::Hash ; (; ); const. virtual . Return hash value for this object. ; Note: If this routine is overloaded in a derived class, this derived class should also add ROOT::CallRecursiveRemoveIfNeeded(*this); ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395; Otherwise, when RecursiveRemove is called (by ~TObject or example) for this type of object, the transversal of THashList and THashTable containers will will have to be done without call Hash (and hence be linear rather than logarithmic complexity). You will also see warnings like Error in <ROOT::Internal::TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:987; TObject::Hashvirtual ULong_t Hash() constReturn hash value for this object.Definition TObject.cxx:515; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented in TEnvRec, TNamed, TObjString, TParameter< AParamType >, TParameter< Long64_t >, TCollection, TPair, TASImagePlugin, TASPluginGS, TPad, TImagePlugin, TPave, TGObject, TGPicture, TIconBoxThumb, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTObject.html:42772,log,logarithmic,42772,doc/v632/classTObject.html,https://root.cern,https://root.cern/doc/v632/classTObject.html,1,['log'],['logarithmic']
Testability," method specifies depth of; of buffers, used to keep parameter values (100 in example). It is not; a limitation of rows number, which can be inserted with the statement.; When buffers are filled, they will be submitted to database and can be; reused again. This happens transparent to the user in NextIteration(); method. Oracle and some ODBC drivers support buffering of parameter values and,; as a result, bulk insert (update) operation. MySQL (native driver and; MyODBC 3) does not support such mode of operation, therefore adding; new rows will result in communication loop to database. One should also mention difference between Oracle and ODBC SQL syntax for; parameters. ODBC (and MySQL) uses question marks to specify position,; where parameters should be inserted (as shown in the example). Oracle uses; :1, :2 and so on marks for specify position of parameter 0, 1, and so on.; Therefore, similar to example query will look like:. TSQLStatement* stmt = serv->Statement(""INSERT INTO TESTTABLE (ID1, ID2, FFIELD, FVALUE) VALUES (:1, :2, :3, :4)"", 100);. There is a possibility to set parameter value to NULL with SetNull() method.; If this method called for first iteration, before one should call other Set...; to identify actual parameter type, which will be used for parameter later. 3. Getting data from database. To request data from data base, SELECT statement should be used.; After SELECT statement is created, it must be processed; (with TSQLStatement::Process()) method and result of statement; should be stored in internal buffers with TSQLStatement::StoreResult(); method. Information about selected fields (columns); can be obtained with GetNumFields() and GetFieldName() methods.; To recieve data for next result row, NextResultRow() method should be called.; Value from each column can be taken with the GetInt(), GetDouble(),; GetString() and other methods. There are no strict limitation which method should be used; to get column values. GetString() can be used as generic me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSQLStatement.html:4433,TEST,TESTTABLE,4433,root/html528/TSQLStatement.html,https://root.cern,https://root.cern/root/html528/TSQLStatement.html,3,['TEST'],['TESTTABLE']
Testability," method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNumIntFactory&operator=(const RooNumIntFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); Bool_tstoreProtoIntegrator(RooAbsIntegrator* proto, const RooArgSet& defConfig, const char* depName = """"); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumIntFactory.html:5165,Test,TestBit,5165,root/html534/RooNumIntFactory.html,https://root.cern,https://root.cern/root/html534/RooNumIntFactory.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetColor(TString name, Int_t color); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLinksVisibility(Bool_t val); static voidTObject::SetObjectStat(Bool_t stat); voidSetPointer(void* ptr, const char* clname = NULL); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TStructViewer.html:5884,Test,TestBit,5884,root/html530/TStructViewer.html,https://root.cern,https://root.cern/root/html530/TStructViewer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPythia8Decayer&operator=(const TPythia8Decayer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadDecayTable(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDebugLevel(Int_t debug); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetForceDecay(Int_t type); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPythia8Decayer.html:4711,Test,TestBit,4711,root/html534/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html534/TPythia8Decayer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be removed. Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TObject.html:19048,Test,TestBit,19048,root/html534/TObject.html,https://root.cern,https://root.cern/root/html534/TObject.html,3,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be removed. Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:25; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TObject.html:19662,Test,TestBit,19662,root/html604/TObject.html,https://root.cern,https://root.cern/root/html604/TObject.html,3,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; Use this method to declare a method obsolete. Specify as of which version; the method is obsolete and as from which version it will be removed. Bool_t GetObjectStat(); Get status of object stat flag. void SetObjectStat(Bool_t stat); Turn on/off tracking of objects in the TObjectTable. Long_t GetDtorOnly(); return destructor only flag. void SetDtorOnly(void* obj); set destructor only flag. void operator delete(void* ptr); operator delete. void operator delete[](void* ptr); operator delete []. void operator delete(void* ptr, void* vp); Only called by placement new when throwing an exception. void operator delete[](void* ptr, void* vp); Only called by placement new[] when throwing an exception. void MakeZombie(); { fBits |= kZombie; }. void Clear(Option_t* = """"); { }. Option_t * GetOption() const; { return """"; }. Bool_t IsSortable() const; { return kFALSE; }. Bool_t IsOnHeap() const; { return TestBit(kIsOnHeap); }. Bool_t IsZombie() const; { return TestBit(kZombie); }. void * operator new(size_t sz); ----- operators. { return TStorage::ObjectAlloc(sz); }. void * operator new[](size_t sz); { return TStorage::ObjectAlloc(sz); }. void * operator new(size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void * operator new[](size_t sz, void* vp); { return TStorage::ObjectAlloc(sz, vp); }. void SetBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetBit(UInt_t f); { fBits &= ~(f & kBitMask); }. Bool_t TestBit(UInt_t f) const; { return (Bool_t) ((fBits & f) != 0); }. Int_t TestBits(UInt_t f) const; { return (Int_t) (fBits & f); }. void InvertBit(UInt_t f); { fBits ^= f & kBitMask; }. » Author: Rene Brun 26/12/94 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TObject.html:19662,Test,TestBit,19662,root/html602/TObject.html,https://root.cern,https://root.cern/root/html602/TObject.html,3,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGuiFactory&operator=(const TGuiFactory&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGuiFactory.html:5853,Test,TestBit,5853,root/html530/TGuiFactory.html,https://root.cern,https://root.cern/root/html530/TGuiFactory.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPythia6Decayer&operator=(const TPythia6Decayer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadDecayTable(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDecayTableFile(const char* name); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetForceDecay(Int_t type); virtual voidSetForceDecay(TPythia6Decayer::EDecayType type); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteDecayTable().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPythia6Decayer.html:5177,Test,TestBit,5177,root/html530/TPythia6Decayer.html,https://root.cern,https://root.cern/root/html530/TPythia6Decayer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetConstrained(Bool_t c); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetModified(Bool_t m); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLParametricEquation.html:5755,Test,TestBit,5755,root/html530/TGLParametricEquation.html,https://root.cern,https://root.cern/root/html530/TGLParametricEquation.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); UInt_tTRefCnt::References() const; UInt_tTRefCnt::RemoveReference(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetLayoutHints(ULong_t lh); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPadBottom(Int_t v); virtual voidSetPadLeft(Int_t v); virtual voidSetPadRight(Int_t v); virtual voidSetPadTop(Int_t v); voidTRefCnt::SetRefCount(UInt_t r); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLayoutHints.html:5759,Test,TestBit,5759,root/html530/TGLayoutHints.html,https://root.cern,https://root.cern/root/html530/TGLayoutHints.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooSharedProperties&operator=(const RooSharedProperties&); Bool_toperator==(const RooSharedProperties& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opts = 0) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_trefCount() const; voidTObject::ResetBit(UInt_t f); RooSharedProperties(); RooSharedProperties(const char* uuidstr); RooSharedProperties(const RooSharedProperties&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetInSharedList(); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooSharedProperties.html:4876,Test,TestBit,4876,root/html602/RooSharedProperties.html,https://root.cern,https://root.cern/root/html602/RooSharedProperties.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:10970,Log,LogViewer,10970,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['Log'],['LogViewer']
Testability," method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTProof::IsDataReady(Long64_t& totalbytes, Long64_t& bytesready); virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTProof::IsFolder() const; Bool_tTProof::IsIdle() const; Bool_tTProof::IsLite() const; Bool_tTProof::IsMaster() const; Bool_tTObject::IsOnHeap() const; Bool_tTProof::IsParallel() const; Bool_tTProof::IsProofd() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTProof::IsValid() const; Bool_tTProof::IsWaiting() const; Bool_tTObject::IsZombie() const; virtual Int_tLoad(const char* macro, Bool_t notOnClient = kFALSE, Bool_t uniqueOnly = kTRUE, TList* wrks = 0); static voidTQObject::LoadRQ_OBJECT(); voidTProof::LogMessage(const char* msg, Bool_t all)SIGNAL ; static voidTProof::LogViewer(const char* url = 0, Int_t sessionidx = 0); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; static TProofMgr*TProof::Mgr(const char* url); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static TProof*TProof::Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofLite.html:11035,Log,LogViewer,11035,root/html530/TProofLite.html,https://root.cern,https://root.cern/root/html530/TProofLite.html,2,['Log'],['LogViewer']
Testability," method-specific help message]; : InputLayout: ""1|16|16"" [The Layout of the input]; : Layout: ""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; reshape (Reshape) (None, 16, 16, 1) 0 ; ; conv2d (Conv2D) (None, 16, 16, 10) 100 ; ; batch_normalization (Batch (None, 16, 16, 10) 40 ; Normalization) ; ; conv2d_1 (Conv2D) (None, 16, 16, 10) 910 ; ; max_pooling2d (MaxPooling2 (None, 15, 15, 10) 0 ; D) ; ; flatten (Flatten) (None, 2250) 0 ; ; dense (Dense) (None, 256) 576256 ; ; dense_1 (Dense) (None, 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:7195,test,testing,7195,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['testing']
Testability," method. To remove elements from; the clones array use Remove() or RemoveAt(). TObject * operator[](Int_t idx) const; Return the object at position idx. Returns 0 if idx is out of bounds. TObject * New(Int_t idx); Create an object of type fClass with the default ctor at the specified; index. Returns 0 in case of error. void AbsorbObjects(TClonesArray* tc); Directly move the object pointers from tc without cloning (copying).; This TClonesArray takes over ownership of all of tc's object; pointers. The tc array is left empty upon return. void AbsorbObjects(TClonesArray* tc, Int_t idx1, Int_t idx2); Directly move the rang of object pointers from tc without cloning; (copying).; This TClonesArray takes over ownership of all of tc's object pointers; from idx1 to idx2. The tc array is re-arranged by return. void MultiSort(Int_t nTCs, TClonesArray** tcs, Int_t upto = kMaxInt); Sort multiple TClonesArrays simultaneously with this array.; If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. TObject * AddrAt(Int_t idx). TClass * GetClass() const; { return fClass; }. void AddFirst(TObject* ); { MayNotUse(""AddFirst""); }. void AddLast(TObject* ); { MayNotUse(""AddLast""); }. void AddAt(TObject* , Int_t ); { MayNotUse(""AddAt""); }. void AddAtAndExpand(TObject* , Int_t ); { MayNotUse(""AddAtAndExpand""); }. Int_t AddAtFree(TObject* ); { MayNotUse(""AddAtFree""); return 0; }. void AddAfter(const TObject* , TObject* ); { MayNotUse(""AddAfter""); }. void AddBefore(const TObject* , TObject* ); { MayNotUse(""AddBefore""); }. Bool_t CanBypassStreamer() const; { return TestBit(kBypassStreamer); }. » Author: Rene Brun 11/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TClonesArray.h 40562 2011-08-11 16:05:17Z pcanal $ » Last generated: 2011-12-02 14:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:24573,Test,TestBit,24573,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,1,['Test'],['TestBit']
Testability," methodTitle, theOption);; 2514 ; 2515 // Train/Test/Evaluation; 2516 TrainAllMethods();; 2517 TestAllMethods();; 2518 EvaluateAllMethods();; 2519 ; 2520 // getting ROC; 2521 SROC = GetROCIntegral(xbitset.to_string(), methodTitle);; 2522 // std::cout << ""Seed: n "" << n << "" x "" << x << "" xbitset:"" << xbitset << "" ROC "" << SROC << std::endl;; 2523 ; 2524 // cleaning information to process sub-seeds; 2525 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2526 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2527 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2528 delete sresults;; 2529 delete seedloader;; 2530 this->DeleteAllMethods();; 2531 fMethodsMap.clear();; 2532 ; 2533 // removing global result because it is requiring a lot of RAM for all seeds; 2534 ; 2535 for (uint32_t i = 0; i < 32; ++i) {; 2536 if (x & (uint64_t(1) << i)) {; 2537 y = x & ~(1 << i);; 2538 std::bitset<32> ybitset(y);; 2539 // need at least one variable; 2540 // NOTE: if sub-seed is zero then is the special case; 2541 // that count in xbitset is 1; 2542 Double_t ny = log(x - y) / 0.693147;; 2543 if (y == 0) {; 2544 importances[ny] = SROC - 0.5;; 2545 // std::cout << ""SubSeed: "" << y << "" y:"" << ybitset << ""ROC "" << 0.5 << std::endl;; 2546 continue;; 2547 }; 2548 ; 2549 // creating loader for sub-seed; 2550 TMVA::DataLoader *subseedloader = new TMVA::DataLoader(ybitset.to_string());; 2551 // adding variables from sub-seed; 2552 for (int index = 0; index < nbits; index++) {; 2553 if (ybitset[index]); 2554 subseedloader->AddVariable(varNames[index], 'F');; 2555 }; 2556 ; 2557 // Loading Dataset; 2558 DataLoaderCopy(subseedloader, loader);; 2559 ; 2560 // Booking SubSeed; 2561 BookMethod(subseedloader, theMethod, methodTitle, theOption);; 2562 ; 2563 // Train/Test/Evaluation; 2564 TrainAllMethods();; 2565 TestAllMethods();; 2566 EvaluateAllMethods();; 2567 ; 2568 //",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:105335,log,log,105335,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['log'],['log']
Testability," might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the option ""xyz"". void Delete(Option_t* option = """"); Clear the clones array. Use",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:18873,Test,Tests,18873,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Test'],['Tests']
Testability," minftrain[0][i], minftrainT[0][i]); 1887 << Endl;; 1888 }; 1889 Log() << kINFO << hLine << Endl;; 1890 Log() << kINFO << Endl;; 1891 } else if (doMulticlass) {; 1892 // ====================================================================; 1893 // === Multiclass Output; 1894 // ====================================================================; 1895 ; 1896 TString hLine =; 1897 ""-------------------------------------------------------------------------------------------------------"";; 1898 ; 1899 // This part uses a genetic alg. to evaluate the optimal sig eff * sig pur.; 1900 // This is why it is disabled for now.; 1901 //; 1902 // // --- Acheivable signal efficiency * signal purity; 1903 // // --------------------------------------------------------------------; 1904 // Log() << kINFO << Endl;; 1905 // Log() << kINFO << ""Evaluation results ranked by best signal efficiency times signal purity "" << Endl;; 1906 // Log() << kINFO << hLine << Endl;; 1907 ; 1908 // // iterate over methods and evaluate; 1909 // for (MVector::iterator itrMethod = methods->begin(); itrMethod != methods->end(); itrMethod++) {; 1910 // MethodBase *theMethod = dynamic_cast<MethodBase *>(*itrMethod);; 1911 // if (theMethod == 0) {; 1912 // continue;; 1913 // }; 1914 ; 1915 // TString header = ""DataSet Name MVA Method "";; 1916 // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; 1917 // header += TString::Format(""%-12s "", theMethod->fDataSetInfo.GetClassInfo(icls)->GetName());; 1918 // }; 1919 ; 1920 // Log() << kINFO << header << Endl;; 1921 // Log() << kINFO << hLine << Endl;; 1922 // for (Int_t i = 0; i < nmeth_used[0]; i++) {; 1923 // TString res = TString::Format(""[%-14s] %-15s"", theMethod->fDataSetInfo.GetName(), mname[0][i].Data());; 1924 // for (UInt_t icls = 0; icls < theMethod->fDataSetInfo.GetNClasses(); ++icls) {; 1925 // res += TString::Format(""%#1.3f "", (multiclass_testEff[i][icls]) * (multiclass_testPur[i][icls]));; 1926 // }; 1927 // Log() << kINFO ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:79312,Log,Log,79312,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,3,['Log'],['Log']
Testability," mode); 243 TAttMarker::Modify(); //Change marker attributes only if necessary; 244 }; 245 // No break !!!; 246 ; 247 case kMouseMotion:; 248 pxold = px; pyold = py;; 249 gPad->SetCursor(kMove);; 250 break;; 251 ; 252 case kButton1Motion:; 253 p.fX = pxold; p.fY = pyold;; 254 if (!opaque) gVirtualX->DrawPolyMarker(1, &p);; 255 p.fX = px; p.fY = py;; 256 if (!opaque) gVirtualX->DrawPolyMarker(1, &p);; 257 pxold = px; pyold = py;; 258 if (opaque) {; 259 if (ndcsav) this->SetNDC(kFALSE);; 260 this->SetX(gPad->PadtoX(gPad->AbsPixeltoX(px)));; 261 this->SetY(gPad->PadtoY(gPad->AbsPixeltoY(py)));; 262 gPad->ShowGuidelines(this, event, 'i', true);; 263 gPad->Modified(kTRUE);; 264 gPad->Update();; 265 }; 266 break;; 267 ; 268 case kButton1Up:; 269 if (opaque) {; 270 if (ndcsav && !this->TestBit(kMarkerNDC)) {; 271 this->SetX((fX - gPad->GetX1())/(gPad->GetX2()-gPad->GetX1()));; 272 this->SetY((fY - gPad->GetY1())/(gPad->GetY2()-gPad->GetY1()));; 273 this->SetNDC();; 274 }; 275 gPad->ShowGuidelines(this, event);; 276 } else {; 277 if (TestBit(kMarkerNDC)) {; 278 dpx = gPad->GetX2() - gPad->GetX1();; 279 dpy = gPad->GetY2() - gPad->GetY1();; 280 xp1 = gPad->GetX1();; 281 yp1 = gPad->GetY1();; 282 fX = (gPad->AbsPixeltoX(pxold)-xp1)/dpx;; 283 fY = (gPad->AbsPixeltoY(pyold)-yp1)/dpy;; 284 } else {; 285 fX = gPad->PadtoX(gPad->AbsPixeltoX(px));; 286 fY = gPad->PadtoY(gPad->AbsPixeltoY(py));; 287 }; 288 gPad->Modified(kTRUE);; 289 gPad->Update();; 290 gVirtualX->SetTextColor(-1);; 291 }; 292 break;; 293 }; 294}; 295 ; 296////////////////////////////////////////////////////////////////////////////////; 297/// List this marker with its attributes.; 298 ; 299void TMarker::ls(Option_t *) const; 300{; 301 TROOT::IndentLevel();; 302 printf(""Marker X=%f Y=%f marker type=%d\n"",fX,fY,fMarkerStyle);; 303}; 304 ; 305////////////////////////////////////////////////////////////////////////////////; 306/// Paint this marker with its current attributes.; 307 ; 308void TMarker::Paint(Option_t *);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMarker_8cxx_source.html:8139,Test,TestBit,8139,doc/master/TMarker_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMarker_8cxx_source.html,2,['Test'],['TestBit']
Testability," model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); RooStats::CombinedCalculatorCombinedCalculator(); RooStats::CombinedCalculatorCombinedCalculator(const RooStats::CombinedCalculator&); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, const RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); RooStats::CombinedCalculatorCombinedCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0, const RooArgSet* altParams = 0, const RooArgSet* nuisParams = 0); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestRes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__CombinedCalculator.html:1575,test,test-statistic,1575,root/html602/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__CombinedCalculator.html,2,['test'],['test-statistic']
Testability," model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::CombinedCalculator&operator=(const RooStats::CombinedCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetConditionalObservables(const RooArgSet& set); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__CombinedCalculator.html:1575,test,test-statistic,1575,root/html534/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__CombinedCalculator.html,1,['test'],['test-statistic']
Testability," model common model (eg. a family of specific models which includes both the null and alternate),; a data set, ; a set of parameters of which specify the null (including values and const/non-const status), ; a set of parameters of which specify the alternate (including values and const/non-const status),; a set of parameters of nuisance parameters (including values and const/non-const status). The interface allows one to pass the model, data, and parameters via a workspace and then specify them with names.; The interface also allows one to pass the model, data, and parameters without a workspace (which is created internally). After configuring the calculator, one only needs to ask GetHypoTest() (which will return a HypoTestResult pointer) or GetInterval() (which will return an ConfInterval pointer). The concrete implementations of this interface should deal with the details of how the nuisance parameters are; dealt with (eg. integration vs. profiling) and which test-statistic is used (perhaps this should be added to the interface). The motivation for this interface is that we hope to be able to specify the problem in a common way for several concrete calculators. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~CombinedCalculator(); static TClass*Class(); virtual Double_tConfidenceLevel() const; virtual RooStats::HypoTestResult*GetHypoTest() const; virtual RooStats::ConfInterval*GetInterval() const; virtual TClass*IsA() const; RooStats::CombinedCalculator&operator=(const RooStats::CombinedCalculator&); virtual voidSetAlternateModel(const RooStats::ModelConfig&); virtual voidSetAlternateParameters(const RooArgSet& set); virtual voidRooStats::HypoTestCalculator::SetCommonModel(const RooStats::ModelConfig& model); virtual voidSetConfidenceLevel(Double_t cl); virtual voidSetData(RooAbsData& data); virtual voidSetModel(const RooStats::ModelConfig&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__CombinedCalculator.html:1573,test,test-statistic,1573,root/html526/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__CombinedCalculator.html,4,['test'],['test-statistic']
Testability," model describing the alternate hypothesis. void SetTestStatistic(int index); set the desired test statistics:; index=1 : likelihood ratio: 2 * log( L_sb / L_b ) (DEFAULT); index=2 : number of generated events; index=3 : profiled likelihood ratio; if the index is different to any of those values, the default is used. HybridResult* Calculate(TH1& data, unsigned int nToys, bool usePriors); first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(RooAbsData& data, unsigned int nToys, bool usePriors); first compute the test statistics for data and then prepare and run the toy-MC experiments. HybridResult* Calculate(unsigned int nToys, bool usePriors) const. void RunToys(vector<double>& bVals, vector<double>& sbVals, unsigned int nToys, bool usePriors) const; do the actual run-MC processing. void PrintMore(const char* options) const; Print out some information about the input models. HybridResult* GetHypoTest() const; perform the hypothesis test and return result of hypothesis test. bool DoCheckInputs() const. explicit HybridCalculator(const char *name = 0); Dummy Constructor with only name. void SetCommonPdf(RooAbsPdf& pdf); Set a common PDF for both the null and alternate. { fSbModel = &pdf; }. void SetNullPdf(RooAbsPdf& pdf); Set the PDF for the null (only B). { fBModel = &pdf; }. void SetAlternatePdf(RooAbsPdf& pdf); Set the PDF for the alternate hypothesis ( i.e. S+B). { fSbModel = &pdf; }. void SetData(RooAbsData& data); Set the DataSet. { fData = &data; }. void SetNullParameters(const RooArgSet& ); set parameter values for the null if using a common PDF. { }. void SetAlternateParameters(const RooArgSet& ); set parameter values for the alternate if using a common PDF. {}. void SetNuisancePdf(RooAbsPdf& prior_pdf); additional methods specific for HybridCalculator; set a prior pdf for the nuisance parameters. void SetNuisanceParameters(const RooArgSet& params); set the nuisance parameters to be marginalized. {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HybridCalculator.html:13144,test,test,13144,root/html526/RooStats__HybridCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__HybridCalculator.html,2,['test'],['test']
Testability," more information see TMVAClassification tutorial.; TMVA::DataLoader *dataloader = new TMVA::DataLoader(""datasetcv"");; ; // Data variables; dataloader->AddVariable(""x"", 'F');; dataloader->AddVariable(""y"", 'F');; ; // Spectator used for split; dataloader->AddSpectator(""eventID"", 'I');; ; // NOTE: Currently TMVA treats all input variables, spectators etc as; // floats. Thus, if the absolute value of the input is too large; // there can be precision loss. This can especially be a problem for; // cross validation with large event numbers.; // A workaround is to define your splitting variable as:; // `dataloader->AddSpectator(""eventID := eventID % 4096"", 'I');`; // where 4096 should be a number much larger than the number of folds; // you intend to run with.; ; // Attaches the trees so they can be read from; dataloader->AddSignalTree(sigTree, 1.0);; dataloader->AddBackgroundTree(bkgTree, 1.0);; ; // The CV mechanism of TMVA splits up the training set into several folds.; // The test set is currently left unused. The `nTest_ClassName=1` assigns; // one event to the test set for each class and puts the rest in the; // training set. A value of 0 is a special value and would split the; // datasets 50 / 50.; dataloader->PrepareTrainingAndTestTree("""", """",; ""nTest_Signal=1""; "":nTest_Background=1""; "":SplitMode=Random""; "":NormMode=NumEvents""; "":!V"");; ; // --------------------------------------------------------------------------; ; //; // This sets up a CrossValidation class (which wraps a TMVA::Factory; // internally) for 2-fold cross validation.; //; // The split type can be ""Random"", ""RandomStratified"" or ""Deterministic"".; // For the last option, check the comment below. Random splitting randomises; // the order of events and distributes events as evenly as possible.; // RandomStratified applies the same logic but distributes events within a; // class as evenly as possible over the folds.; //; UInt_t numFolds = 2;; TString analysisType = ""Classification"";; ; TString splitType ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:21550,test,test,21550,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['test']
Testability," msg)SIGNAL ; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOption(Option_t* option); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDrawFeedback.html:7201,Test,TestBit,7201,root/html530/TDrawFeedback.html,https://root.cern,https://root.cern/root/html530/TDrawFeedback.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," multiproc TSelector interfaces with the h1 analysis example ;  mp201_parallelHistoFill.C Parallel fill of a histogram This tutorial shows how a histogram can be filled in parallel with a multiprocess approach ;  mt001_fillHistos.CFill histograms in parallel and write them on file ;  mt101_fillNtuples.CFill n-tuples in distinct workers ;  mt102_readNtuplesFillHistosAndFit.CRead n-tuples in distinct workers, fill histograms, merge them and fit ;  mt201_parallelHistoFill.CParallel fill of a histogram ;  mtbb001_fillHistos.CFill histograms in parallel and write them on file ;  mtbb101_fillNtuples.CFill n-tuples in distinct workers ;  mtbb201_parallelHistoFill.CParallel fill of a histogram ;  ► net;  alien.C Example of use of the TAlien class (an implementation of TGrid) ;  authclient.CThis macro should be run together with authserv.C to test authentication between two remote ROOT sessions ;  authserv.CThis macro should be run together with authclient.C to test authentication between two remote ROOT sessions ;  fastMergeServer.CThis script shows how to make a simple iterative server that can receive TMemFile from multiple clients and merge them into a single file without block ;  hclient.CClient program which creates and fills a histogram ;  hclientbonj.CClient program which creates and fills a histogram ;  hcons.CHistogram consumer script ;  hprod.CHistogram producer script ;  hserv.CServer program which waits for two clients to connect ;  hserv2.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  hserv2bonj.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  LDAPExample.C;  parallelMergeClient.CClient program which creates and fills 2 histograms and a TTree ;  parallelMergeServer.CThis script shows how to make a simple iterative server that can accept connections while handling currently open connections ;  parallel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:133801,test,test,133801,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,1,['test'],['test']
Testability," n elements). ;  ; constexpr Double_t KUncertainty ();  Boltzmann's constant uncertainty. ;  ; Double_t Landau (Double_t x, Double_t mpv=0, Double_t sigma=1, Bool_t norm=kFALSE);  The LANDAU function. ;  ; Double_t LandauI (Double_t x);  Returns the cumulative (lower tail integral) of the Landau distribution function at point x. ;  ; Double_t LaplaceDist (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the probability density function of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t LaplaceDistI (Double_t x, Double_t alpha=0, Double_t beta=1);  Computes the cumulative distribution function (lower tail integral) of Laplace distribution at point x, with location parameter alpha and shape parameter beta. ;  ; Double_t Ldexp (Double_t x, Int_t exp);  Returns the result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:11930,log,log,11930,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,2,['log'],['log']
Testability," nValidationSamples;; 917 ; 918 Log() << kDEBUG << ""Using "" << nValidationSamples << "" validation samples."" << Endl;; 919 Log() << kDEBUG << ""Using "" << nTestSamples << "" training samples."" << Endl;; 920 ; 921 size_t trainingPhase = 1;; 922 fNet.Initialize(fWeightInitialization);; 923 for (TTrainingSettings & settings : fTrainingSettings) {; 924 ; 925 if (fInteractive){; 926 fInteractive->ClearGraphs();; 927 }; 928 ; 929 TNet<TCuda<>> net(settings.batchSize, fNet);; 930 net.SetWeightDecay(settings.weightDecay);; 931 net.SetRegularization(settings.regularization);; 932 ; 933 // Need to convert dropoutprobabilities to conventions used; 934 // by backend implementation.; 935 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 936 for (auto & p : dropoutVector) {; 937 p = 1.0 - p;; 938 }; 939 net.SetDropoutProbabilities(dropoutVector);; 940 ; 941 net.InitializeGradients();; 942 auto testNet = net.CreateClone(settings.batchSize);; 943 ; 944 Log() << kINFO << ""Training phase "" << trainingPhase << "" of ""; 945 << fTrainingSettings.size() << "":"" << Endl;; 946 trainingPhase++;; 947 ; 948 using DataLoader_t = TDataLoader<TMVAInput_t, TCuda<>>;; 949 ; 950 // Split training data into training and validation set; 951 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 952 const std::vector<Event *> trainingInputData =; 953 std::vector<Event *>(allData.begin(), allData.begin() + nTrainingSamples);; 954 const std::vector<Event *> testInputData =; 955 std::vector<Event *>(allData.begin() + nTrainingSamples, allData.end());; 956 ; 957 if (trainingInputData.size() != nTrainingSamples) {; 958 Log() << kFATAL << ""Inconsistent training sample size"" << Endl;; 959 }; 960 if (testInputData.size() != nTestSamples) {; 961 Log() << kFATAL << ""Inconsistent test sample size"" << Endl;; 962 }; 963 ; 964 size_t nThreads = 1;; 965 TMVAInput_t trainingTuple = std::tie(trainingInputData, DataInfo());; 966 TMVAInput_t testTuple = std::tie(testInputData, DataInf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:33700,Log,Log,33700,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability," name can be appended with a “+” or a “++” to use ACLiC.; root[] T->Process(""MySelector.C++"","""",1000,100);; When appending a “++”, the class will be compiled and dynamically loaded.; root[] T->Process(""MySelector.C+"","""",1000,100);; When appending a “+”, the class will also be compiled and dynamically loaded. When it is called again, it recompiles only if the macro (MySelector.C) has changed since it was compiled last. If not, it loads the existing library. The next example shows how to create a selector with a pointer:; MySelector *selector = (MySelector *)TSelector::GetSelector(""MySelector.C+"");; T->Process(selector);; Using this form, you can do things like:; selector->public_attribute1 = init_value;; for (int i=0; i<limit; i++) {; T->Process(selector);; selector->public_attribute1 =; function(selector->public_attribute2);; }; TTree::Process() is aware of PROOF, ROOT parallel processing facility. If PROOF is setup, it divides the processing amongst the slave CPUs.; 12.22.1 Performance Benchmarks. The program $ROOTSYS/test/bench.cxx compares the I/O performance of STL vectors to the ROOT native TClonesArrays collection class. It creates trees with and without compression for the following cases: vector<THit>, vector<THit*>, TClonesArray(TObjHit) not split TClonesArray(TObjHit) split.; The next graphs show the two columns on the right which represent the split and non-split TClonesArray, are significantly lower than the vectors. The most significant difference is in reading a file without compression.; The file size with compression, write times with and without compression and the read times with and without compression all favor the TClonesArray.; 12.23 Impact of Compression on I/O; This benchmark illustrates the pros and cons of the compression option. We recommend using compression when the time spent in I/O is small compared to the total processing time. In this case, if the I/O operation is increased by a factor of 5 it is still a small percentage of the total ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:647018,Benchmark,Benchmarks,647018,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Benchmark'],['Benchmarks']
Testability," name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TObjArray::AtTObject * At(Int_t idx) const overrideDefinition TObjArray.h:164; TObjArray::FindObjectTObject * FindObject(const char *name) const overrideFind an object in this collection using its name.Definition TObjArray.cxx:415; TObjArray::Addvoid Add(TObject *obj) overrideDefinition TObjArray.h:68; TObjLink::GetObjectTObject * GetObject() constDefinition TList.h:145; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::InheritsFromvirtual Bool_t InheritsFrom(const char *classname) constReturns kTRUE if object inherits from class ""classname"".Definition TObject.cxx:530; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::GetTitlevirtual const char * GetTitle() constReturns title of object.Definition TObject.cxx:488; TO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:479114,Test,TestBit,479114,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability," name) const; 8231{; 8232 R__LOCKGUARD(gInterpreterMutex);; 8233 return (ClassInfo_t*) new TClingClassInfo(GetInterpreterImpl(), name);; 8234}; 8235 ; 8236ClassInfo_t* TCling::ClassInfo_Factory(DeclId_t declid) const; 8237{; 8238 R__LOCKGUARD(gInterpreterMutex);; 8239 return (ClassInfo_t*) new TClingClassInfo(GetInterpreterImpl(), (const clang::Decl*)declid);; 8240}; 8241 ; 8242 ; 8243////////////////////////////////////////////////////////////////////////////////; 8244 ; 8245int TCling::ClassInfo_GetMethodNArg(ClassInfo_t* cinfo, const char* method, const char* proto, Bool_t objectIsConst /* = false */, EFunctionMatchMode mode /* = kConversionMatch */) const; 8246{; 8247 TClingClassInfo* TClinginfo = (TClingClassInfo*) cinfo;; 8248 return TClinginfo->GetMethodNArg(method, proto, objectIsConst, mode);; 8249}; 8250 ; 8251////////////////////////////////////////////////////////////////////////////////; 8252 ; 8253bool TCling::ClassInfo_HasDefaultConstructor(ClassInfo_t* cinfo, Bool_t testio) const; 8254{; 8255 TClingClassInfo *TClinginfo = (TClingClassInfo *) cinfo;; 8256 return TClinginfo->HasDefaultConstructor(testio) != ROOT::TMetaUtils::EIOCtorCategory::kAbsent;; 8257}; 8258 ; 8259////////////////////////////////////////////////////////////////////////////////; 8260 ; 8261bool TCling::ClassInfo_HasMethod(ClassInfo_t* cinfo, const char* name) const; 8262{; 8263 TClingClassInfo* TClinginfo = (TClingClassInfo*) cinfo;; 8264 return TClinginfo->HasMethod(name);; 8265}; 8266 ; 8267////////////////////////////////////////////////////////////////////////////////; 8268 ; 8269void TCling::ClassInfo_Init(ClassInfo_t* cinfo, const char* name) const; 8270{; 8271 R__LOCKGUARD(gInterpreterMutex);; 8272 TClingClassInfo* TClinginfo = (TClingClassInfo*) cinfo;; 8273 TClinginfo->Init(name);; 8274}; 8275 ; 8276////////////////////////////////////////////////////////////////////////////////; 8277 ; 8278void TCling::ClassInfo_Init(ClassInfo_t* cinfo, int tagnum) const; 8279{; 8280 R__LO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:321556,test,testio,321556,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['test'],['testio']
Testability," name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetText(const char* helpText); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootHelpDialog.html:16006,Test,TestBit,16006,root/html528/TRootHelpDialog.html,https://root.cern,https://root.cern/root/html528/TRootHelpDialog.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetTitle(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionLogView.html:16141,Test,TestBit,16141,root/html534/TSessionLogView.html,https://root.cern,https://root.cern/root/html534/TSessionLogView.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," name); virtual voidRecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*Remove(TObject* obj); virtual TObject*Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetClass(TClass* cl); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TListOfDataMembers(TClass* cl = 0); voidUnload(); voidUnload(TDictionary* member); voidTSeqCollection::UnSort(); voidUpdate(TDictionary* member); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TListOfDataMembers.html:8157,Test,TestBit,8157,root/html602/TListOfDataMembers.html,https://root.cern,https://root.cern/root/html602/TListOfDataMembers.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," name); virtual voidRooAbsArg::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidsetVal(const char* newVal); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:15051,Test,TestBit,15051,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," name); virtual voidTObject::RecursiveRemove(TObject* obj); voidreleaseOwnership(); virtual Bool_tremove(const RooAbsArg& var, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); Bool_tremove(const RooAbsCollection& list, Bool_t silent = kFALSE, Bool_t matchByNameOnly = kFALSE); virtual voidremoveAll(); Bool_treplace(const RooAbsCollection& other); virtual Bool_treplace(const RooAbsArg& var1, const RooAbsArg& var2); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); RooAbsCollection*selectByAttrib(const char* name, Bool_t value) const; RooAbsCollection*selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*selectCommon(const RooAbsCollection& refColl) const; voidsetAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetHashTableSize(Int_t i); voidsetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); RooAbsCollection*snapshot(Bool_t deepCopy = kTRUE) const; Bool_tsnapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidsort(Bool_t ascend = kTRUE); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidtakeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsCollection.html:8383,Test,TestBit,8383,root/html530/RooAbsCollection.html,https://root.cern,https://root.cern/root/html530/RooAbsCollection.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsArg::setOperMode(RooAbsArg::OperMode mode, Bool_t recurseADirty = kTRUE); voidRooAbsArg::setProhibitServerRedirect(Bool_t flag); voidsetRange(const char* rangeName, const char* stateNameList); voidRooAbsArg::setShapeDirty() const; voidRooAbsArg::setStringAttribute(const Text_t* key, const Text_t* value); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); const map<std::string,std::string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<std::string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; TIterator*RooAbsCategory::typeIterator() const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsCategoryLValue::volume(const char* rangeName) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bool_t compact) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCategory.html:16077,Test,TestBit,16077,root/html528/RooCategory.html,https://root.cern,https://root.cern/root/html528/RooCategory.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," name, Bool_t value) const; RooAbsCollection*RooAbsCollection::selectByName(const char* nameList, Bool_t verbose = kFALSE) const; RooAbsCollection*RooAbsCollection::selectCommon(const RooAbsCollection& refColl) const; voidRooAbsCollection::setAttribAll(const Text_t* name, Bool_t value = kTRUE); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); Bool_tsetCatIndex(const char* name, Int_t newVal = 0, Bool_t verbose = kFALSE); Bool_tsetCatLabel(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidRooAbsCollection::setHashTableSize(Int_t i); voidRooAbsCollection::setName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); Bool_tsetRealValue(const char* name, Double_t newVal = 0, Bool_t verbose = kFALSE); Bool_tsetStringValue(const char* name, const char* newVal = """", Bool_t verbose = kFALSE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; RooAbsCollection*RooAbsCollection::snapshot(Bool_t deepCopy = kTRUE) const; Bool_tRooAbsCollection::snapshot(RooAbsCollection& output, Bool_t deepCopy = kTRUE) const; voidRooAbsCollection::sort(Bool_t ascend = kTRUE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidRooAbsCollection::takeOwnership(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidwriteToFile(const char* fileName) const; virtual voidwriteToStream(ostream& os, Bool_t compact, const char* section = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:12354,Test,TestBit,12354,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," names from loader; 2482 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2483 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2484 ; 2485 long int range = pow(2, nbits);; 2486 ; 2487 // vector to save importances; 2488 std::vector<Double_t> importances(nbits);; 2489 for (int i = 0; i < nbits; i++); 2490 importances[i] = 0;; 2491 ; 2492 Double_t SROC, SSROC; // computed ROC value; 2493 for (UInt_t n = 0; n < nseeds; n++) {; 2494 x = rangen->Integer(range);; 2495 ; 2496 std::bitset<32> xbitset(x);; 2497 if (x == 0); 2498 continue; // data loader need at least one variable; 2499 ; 2500 // creating loader for seed; 2501 TMVA::DataLoader *seedloader = new TMVA::DataLoader(xbitset.to_string());; 2502 ; 2503 // adding variables from seed; 2504 for (int index = 0; index < nbits; index++) {; 2505 if (xbitset[index]); 2506 seedloader->AddVariable(varNames[index], 'F');; 2507 }; 2508 ; 2509 // Loading Dataset; 2510 DataLoaderCopy(seedloader, loader);; 2511 ; 2512 // Booking Seed; 2513 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2514 ; 2515 // Train/Test/Evaluation; 2516 TrainAllMethods();; 2517 TestAllMethods();; 2518 EvaluateAllMethods();; 2519 ; 2520 // getting ROC; 2521 SROC = GetROCIntegral(xbitset.to_string(), methodTitle);; 2522 // std::cout << ""Seed: n "" << n << "" x "" << x << "" xbitset:"" << xbitset << "" ROC "" << SROC << std::endl;; 2523 ; 2524 // cleaning information to process sub-seeds; 2525 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2526 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2527 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2528 delete sresults;; 2529 delete seedloader;; 2530 this->DeleteAllMethods();; 2531 fMethodsMap.clear();; 2532 ; 2533 // removing global result because it is requiring a lot of RAM for all seeds; 2534 ; 2535 for (uint32_t i = 0; i < 32",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:104193,Test,Test,104193,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Test'],"['Test', 'TestAllMethods']"
Testability," namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf606_nllerrorhandlingDefinition rf606_nllerrorhandling.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; RangeTa Range(0, 0, 1, 1); mTMarker mDefinition textangle.C:8; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_argus_over_argus_Int[m]_argusData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-33.8075 m0=5.29014; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.387202, denominator=argus_Int[m]=0.0305662; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-2417.08) to force MIGRAD to back out of this region. Error log follows.; Parameter values: k=-36.7074 m0=5.2901; RooAbsPdf::argus_over_argus_Int[m][ numerator=argus denominator=argus_Int[m] ]; getLogVal() top-level p.d.f not greater than zero @ numerator=argus=0.370612, denominator=argus_Int[m]=0.0290505; ; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -2419.30692128725559; Edm = 2.90497786168460102e-06; Nfcn = 47; k = -35.3713 +/- 3.51942 (limited); m0 = 5.2904 +/- 0.000261877 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Fitting -- RooAbsPdf::fitTo(argus_over_argus_Int[m]) f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html:6470,log,log,6470,doc/master/rf606__nllerrorhandling_8C.html,https://root.cern,https://root.cern/doc/master/rf606__nllerrorhandling_8C.html,1,['log'],['log']
Testability," navigation functionality not fully implemented (only Contains()).; Decomposition in concave polygons not implemented - drawing in solid mode; within x3d produces incorrect end-faces. Function Members (Methods); public:. TGeoXtru(); TGeoXtru(Int_t nz); TGeoXtru(Double_t* param); virtual~TGeoXtru(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoShape::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidCreateThreadData(Int_t nthreads); Bool_tDefinePolygon(Int_t nvert, const Double_t* xv, const Double_t* yv); virtual voidDefineSection(Int_t snum, Double_t z, Double_t x0 = 0., Double_t y0 = 0., Double_t scale = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(const Double_t* point, const Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoXtru.html:2364,test,testNo,2364,root/html534/TGeoXtru.html,https://root.cern,https://root.cern/root/html534/TGeoXtru.html,1,['test'],['testNo']
Testability, nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-845.198) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.74363 a1=-0.435344 mean=5.01952 nbkg=162.467 nsig=143.571 sig1frac=0.630815; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 260; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 250; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-1003.82) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.674666 a1=-0.383697 mean=5.00365 nbkg=169.829 nsig=179.534 sig1frac=0.921743; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-712.949) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.711808 a1=-0.34088 mean=4.99573 nbkg=115.49 nsig=133.015 sig1frac=0.908627; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 240; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 230; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 220; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 210; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 200; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 190; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 180; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 170; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 160; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 150; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-750.903) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.726225 a1=-0.429497 mean=5.03871 nbkg=129.53 nsig=136.644 s,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:23390,log,log,23390,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability, nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 140; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-740.756) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.899536 a1=-0.345881 mean=5.03897 nbkg=135.176 nsig=129.13 sig1frac=0.899393; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-677.604) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.766597 a1=-0.547838 mean=5.03836 nbkg=119.039 nsig=121.817 sig1frac=0.213703; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 130; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.527582 a1=-0.893856 mean=5.24753 nbkg=162.951 nsig=65.9357 sig1frac=0.970262; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.516095 a1=-0.955515 mean=5.14443 nbkg=157.502 nsig=97.2821 sig1frac=0.174928; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; RooAbsMinimizerFcn: Minimized function has error status.; Returning maximum FCN so far (-777.498) to force MIGRAD to back out of this region. Error log follows.; Parameter values: a0=0.510348 a1=-0.776595 mean=5.09286 nbkg=154.805 nsig=114.979 sig1frac=0.0496841; RooAddPdf::model[ nbkg * bkg_over_bkg_Int[x] + nsig * sig ] has 1 errors; ; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 120; [#0] PROGRESS:Generation -- RooMCStudy::run: sample 110; RooAbsMinimizerFcn:,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf801__mcstudy_8C.html:25426,log,log,25426,doc/master/rf801__mcstudy_8C.html,https://root.cern,https://root.cern/doc/master/rf801__mcstudy_8C.html,2,['log'],['log']
Testability," needs to use the fit option 'B' to have the fix of the paramter effective. ;  ; Double_t GetChisquare () const;  Return the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2() ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  ; virtual TFormula * GetFormula ();  ; virtual const TFormula * GetFormula () const;  ; virtual TH1 * GetHistogram () const;  Return a pointer to the histogram used to visualise the function Note that this histogram is managed by the function and in same case it is automatically deleted when some TF1 functions are called such as TF1::SetParameters, TF1::SetNpx, TF1::SetRange It is then reccomended either to clone the return object or calling again teh GetHistogram function whenever is needed. ;  ; virtual const TObject * GetLinearPart (Int_t i) const;  ; virtual Double_t GetMaximumStored () const;  ; virtual Double_t GetMaximumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the maximum value of the function. ;  ; TMethodCall * GetMethodCall () const;  ; virtual Double_t GetMinimumStored () const;  ; virtual Double_t GetMinimumX (Double_t xmin=0, Double_t xmax=0, Double_t epsilon=1.E-10, Int_t maxiter=100, Bool_t logx=false) const;  Returns the X value corresponding to the minimum value of the function on the (xmin, xmax) interval. ;  ; virtual Int_t GetNDF () const;  Return the number of degrees of freedom in the fit the fNDF parameter has been previously computed during a fit. ;  ; virtual Int_t GetNdim () const;  ; virtual Int_t GetNpar () const;  ; virtual Int_t GetNpx () const;  ; virtual Int_t GetNumber () const;  ; virtual Int_t GetNumberFitPoints () const;  ; virtual Int_t GetNumberFreeParameters () const;  Return the number of free parameters. ;  ; virtual Double_t GetParameter (const TString &name) const;  ; virtual Double_t GetParameter (Int_t ipar) const;  ; virtual Double_t * GetParameters () const;  ; virtual void G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:16272,log,logx,16272,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,2,['log'],['logx']
Testability," negate the vector ; Definition at line 216 of file CylindricalEta3D.h. ◆ operator!=(). template<class T > . bool ROOT::Math::CylindricalEta3D< T >::operator!= ; (; const CylindricalEta3D< T > & ; rhs); const. inline . Definition at line 241 of file CylindricalEta3D.h. ◆ operator=() [1/2]. template<class T > . template<class CoordSystem > . CylindricalEta3D & ROOT::Math::CylindricalEta3D< T >::operator= ; (; const CoordSystem & ; c). inline . generic assignment operator from any coordinate system ; Definition at line 226 of file CylindricalEta3D.h. ◆ operator=() [2/2]. template<class T > . CylindricalEta3D & ROOT::Math::CylindricalEta3D< T >::operator= ; (; const CylindricalEta3D< T > & ; v). inline . assignment operator ; Definition at line 96 of file CylindricalEta3D.h. ◆ operator==(). template<class T > . bool ROOT::Math::CylindricalEta3D< T >::operator== ; (; const CylindricalEta3D< T > & ; rhs); const. inline . Exact component-by-component equality Note: Peculiar representations of the zero vector such as (0,1,0) will not test as equal to one another. ; Definition at line 238 of file CylindricalEta3D.h. ◆ Perp2(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Perp2 ; (; ); const. inline . Definition at line 159 of file CylindricalEta3D.h. ◆ Phi(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Phi ; (; ); const. inline . Definition at line 140 of file CylindricalEta3D.h. ◆ pi(). template<class T > . static Scalar ROOT::Math::CylindricalEta3D< T >::pi ; (; ). inlinestaticprivate . Definition at line 128 of file CylindricalEta3D.h. ◆ R(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::R ; (; ); const. inline . Definition at line 148 of file CylindricalEta3D.h. ◆ Restrict(). template<class T > . void ROOT::Math::CylindricalEta3D< T >::Restrict ; (; ). inlineprivate . Definition at line 129 of file CylindricalEta3D.h. ◆ Rho(). template<class T > . T ROOT::Math::CylindricalEta3D< T >::Rho ; (; ); const. inline . Definition at line 13",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html:6471,test,test,6471,doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1CylindricalEta3D.html,1,['test'],['test']
Testability," neighborhood around the test event. The method assumes that the density of the ; : signal and background events is uniform and constant within the neighborhood. ; : k is an adjustable parameter and it determines an average size of the ; : neighborhood. Small k values (less than 10) are sensitive to statistical ; : fluctuations and large (greater than 100) values might not sufficiently capture ; : local differences between events in the training set. The speed of the k-NN; : method also increases with larger values of k. ; : ; : The k-NN method assigns equal weight to all input variables. Different scales ; : among the input variables is compensated using ScaleFrac parameter: the input ; : variables are scaled so that the widths for central ScaleFrac*100% events are ; : equal among all the input variables.; : ; : ␛[1m--- Additional configuration options: ␛[0m; : ; : The method inclues an option to use a Gaussian kernel to smooth out the k-NN; : response. The kernel re-weights events using a distance to the test event.; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; KNN : <Train> start...; : Reading 2000 events; : Number of signal events 1000; : Number of background events 1000; : Creating kd-tree with 2000 events; : Computing scale factor for 1d distributions: (ifrac, bottom, top) = (80%, 10%, 90%); ModulekNN : Optimizing tree for 4 variables with 2000 values; : <Fill> Class 1 has 1000 events; : <Fill> Class 2 has 1000 events; : Elapsed time for training with 2000 events: 0.00292 sec ; KNN : [dataset] : Evaluation of KNN on training sample (2000 events); : Elapsed time for evaluation of 2000 events: 0.0394 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_KNN.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_KNN.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: LD for Classificatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:34245,test,test,34245,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['test'],['test']
Testability," net.SetWeightDecay(settings.weightDecay);; 931 net.SetRegularization(settings.regularization);; 932 ; 933 // Need to convert dropoutprobabilities to conventions used; 934 // by backend implementation.; 935 std::vector<Double_t> dropoutVector(settings.dropoutProbabilities);; 936 for (auto & p : dropoutVector) {; 937 p = 1.0 - p;; 938 }; 939 net.SetDropoutProbabilities(dropoutVector);; 940 ; 941 net.InitializeGradients();; 942 auto testNet = net.CreateClone(settings.batchSize);; 943 ; 944 Log() << kINFO << ""Training phase "" << trainingPhase << "" of ""; 945 << fTrainingSettings.size() << "":"" << Endl;; 946 trainingPhase++;; 947 ; 948 using DataLoader_t = TDataLoader<TMVAInput_t, TCuda<>>;; 949 ; 950 // Split training data into training and validation set; 951 const std::vector<Event *> &allData = GetEventCollection(Types::kTraining);; 952 const std::vector<Event *> trainingInputData =; 953 std::vector<Event *>(allData.begin(), allData.begin() + nTrainingSamples);; 954 const std::vector<Event *> testInputData =; 955 std::vector<Event *>(allData.begin() + nTrainingSamples, allData.end());; 956 ; 957 if (trainingInputData.size() != nTrainingSamples) {; 958 Log() << kFATAL << ""Inconsistent training sample size"" << Endl;; 959 }; 960 if (testInputData.size() != nTestSamples) {; 961 Log() << kFATAL << ""Inconsistent test sample size"" << Endl;; 962 }; 963 ; 964 size_t nThreads = 1;; 965 TMVAInput_t trainingTuple = std::tie(trainingInputData, DataInfo());; 966 TMVAInput_t testTuple = std::tie(testInputData, DataInfo());; 967 DataLoader_t trainingData(trainingTuple, nTrainingSamples,; 968 net.GetBatchSize(), net.GetInputWidth(),; 969 net.GetOutputWidth(), nThreads);; 970 DataLoader_t testData(testTuple, nTestSamples, testNet.GetBatchSize(),; 971 net.GetInputWidth(), net.GetOutputWidth(),; 972 nThreads);; 973 DNN::TGradientDescent<TCuda<>> minimizer(settings.learningRate,; 974 settings.convergenceSteps,; 975 settings.testInterval);; 976 ; 977 std::vector<TNet<TCuda<>>> nets{};; 978 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:34213,test,testInputData,34213,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['test'],['testInputData']
Testability," new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* , TList* , const char* = 0, Int_t = 0, TList* = 0); *** This function is deprecated and will disappear in future versions ***; *** It is just a ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:87212,log,log,87212,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['log'],['log']
Testability," new PROOF player. TVirtualProofPlayer * MakePlayer(const char* player = 0, TSocket* s = 0); Construct a TProofPlayer object. The player string specifies which; player should be created: remote, slave, sm (supermaster) or base.; Default is remote. Socket is needed in case a slave player is created. void AddChain(TChain* chain); Add chain to data set. void RemoveChain(TChain* chain); Remove chain from data set. void GetLog(Int_t start = -1, Int_t end = -1); Ask for remote logs in the range [start, end]. If start == -1 all the; messages not yet received are sent back. TMacro * GetLastLog(); Fill a TMacro with the log lines since the last reading (fLogFileR); Return (TMacro *)0 if no line was logged.; The returned TMacro must be deleted by the caller. void PutLog(TQueryResult* qr); Display log of query pq into the log window frame. void ShowLog(const char* queryref); Display on screen the content of the temporary log file for query; in reference. void ShowLog(Int_t qry = -1); Display on screen the content of the temporary log file.; If qry == -2 show messages from the last (current) query.; If qry == -1 all the messages not yet displayed are shown (default).; If qry == 0, all the messages in the file are shown.; If qry > 0, only the messages related to query 'qry' are shown.; For qry != -1 the original file offset is restored at the end. void cd(Int_t id = -1); Set session with 'id' the default one. If 'id' is not found in the list,; the current session is set as default. void Detach(Option_t* opt = """"); Detach this instance to its proofserv.; If opt is 'S' or 's' the remote server is shutdown. void SetAlias(const char* alias = """"); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. Int_t UploadDataSet(const char* dataset, TList* files, const char* dest = 0, Int_t opt = kAskUser, TList* skippedFiles = 0); Upload a set of files and save the list of files by",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:76427,log,log,76427,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,3,['log'],['log']
Testability," new TMVA::DataLoader(""datasetcv"");; ; // Data variables; dataloader->AddVariable(""x"", 'F');; dataloader->AddVariable(""y"", 'F');; ; // Spectator used for split; dataloader->AddSpectator(""eventID"", 'I');; ; // NOTE: Currently TMVA treats all input variables, spectators etc as; // floats. Thus, if the absolute value of the input is too large; // there can be precision loss. This can especially be a problem for; // cross validation with large event numbers.; // A workaround is to define your splitting variable as:; // `dataloader->AddSpectator(""eventID := eventID % 4096"", 'I');`; // where 4096 should be a number much larger than the number of folds; // you intend to run with.; ; // Attaches the trees so they can be read from; dataloader->AddSignalTree(sigTree, 1.0);; dataloader->AddBackgroundTree(bkgTree, 1.0);; ; // The CV mechanism of TMVA splits up the training set into several folds.; // The test set is currently left unused. The `nTest_ClassName=1` assigns; // one event to the test set for each class and puts the rest in the; // training set. A value of 0 is a special value and would split the; // datasets 50 / 50.; dataloader->PrepareTrainingAndTestTree("""", """",; ""nTest_Signal=1""; "":nTest_Background=1""; "":SplitMode=Random""; "":NormMode=NumEvents""; "":!V"");; ; // --------------------------------------------------------------------------; ; //; // This sets up a CrossValidation class (which wraps a TMVA::Factory; // internally) for 2-fold cross validation.; //; // The split type can be ""Random"", ""RandomStratified"" or ""Deterministic"".; // For the last option, check the comment below. Random splitting randomises; // the order of events and distributes events as evenly as possible.; // RandomStratified applies the same logic but distributes events within a; // class as evenly as possible over the folds.; //; UInt_t numFolds = 2;; TString analysisType = ""Classification"";; ; TString splitType = (useRandomSplitting) ? ""Random"" : ""Deterministic"";; ; //; // One can also use a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVACrossValidation_8C.html:21638,test,test,21638,doc/master/TMVACrossValidation_8C.html,https://root.cern,https://root.cern/doc/master/TMVACrossValidation_8C.html,1,['test'],['test']
Testability," new header.; if option contains ""Overwrite"", the previous Tree header is deleted; before written the new header. This option is slightly faster, but; the default option is safer in case of a problem (disk quota exceeded); when writing the new header. The function returns the number of bytes written to the file.; if the number of bytes is null, an error has occurred while writing; the header to the file. How to write a Tree in one process and view it from another process. The following two scripts illustrate how to do this.; The script treew.C is executed by process1, treer.C by process2. ----- script treew.C; void treew() {; TFile f(""test.root"",""recreate"");; TNtuple *ntuple = new TNtuple(""ntuple"",""Demo"",""px:py:pz:random:i"");; Float_t px, py, pz;; for ( Int_t i=0; i<10000000; i++) {; gRandom->Rannor(px,py);; pz = px*px + py*py;; Float_t random = gRandom->Rndm(1);; ntuple->Fill(px,py,pz,random,i);; if (i%1000 == 1) ntuple->AutoSave(""SaveSelf"");; }; }. ----- script treer.C; void treer() {; TFile f(""test.root"");; TTree *ntuple = (TTree*)f.Get(""ntuple"");; TCanvas c1;; Int_t first = 0;; while(1) {; if (first == 0) ntuple->Draw(""px>>hpx"", """","""",10000000,first);; else ntuple->Draw(""px>>+hpx"","""","""",10000000,first);; first = (Int_t)ntuple->GetEntries();; c1.Update();; gSystem->Sleep(1000); //sleep 1 second; ntuple->Refresh();; }; }. TBranch* BranchImp(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch() with added check that addobj matches className. See TTree::Branch() for other details. TBranch* BranchImp(const char* branchname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.; See TTree::Branch for other details. TBranch* BranchImpRef(const char* branchname, const char* classname, TClass* ptrClass, void* addobj, Int_t bufsize, Int_t splitlevel); Same as TTree::Branch but automatic detection of the class name.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TTree.html:42189,test,test,42189,root/html532/TTree.html,https://root.cern,https://root.cern/root/html532/TTree.html,4,['test'],['test']
Testability," new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidSlaveBegin(TTree*); virtual voidTProofDraw::SlaveTerminate(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofDrawGraph.html:5297,Test,TestBit,5297,root/html530/TProofDrawGraph.html,https://root.cern,https://root.cern/root/html530/TProofDrawGraph.html,28,['Test'],"['TestBit', 'TestBits']"
Testability," new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidPrintEnv(EEnvLevel level = kEnvAll) const; virtual Int_tTObject::Read(const char* name); virtual Int_tReadFile(const char* fname, EEnvLevel level); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidSave(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSaveLevel(EEnvLevel level); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetRcName(const char* name); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValue(const char* name, EEnvLevel level = kEnvChange); virtual voidSetValue(const char* name, Int_t value); virtual voidSetValue(const char* name, Double_t value); virtual voidSetValue(const char* name, const char* value, EEnvLevel level = kEnvChange, const char* type = 0); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(const char* fname, EEnvLevel level = kEnvAll).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEnv.html:6958,Test,TestBit,6958,root/html530/TEnv.html,https://root.cern,https://root.cern/root/html530/TEnv.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tRead(TObject* obj); virtual voidReadBuffer(char*& buffer); virtual Bool_tReadFile(); voidReadKeyBuffer(char*& buffer); virtual TObject*ReadObj(); virtual void*ReadObjectAny(const TClass* expectedClass); virtual TObject*ReadObjWithBuffer(char* bufferRead); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetBuffer(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMotherDir(TDirectory* dir); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetParent(const TObject* parent); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tSizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tWriteFile(Int_t cycle = 1, TFile* f = 0).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TKey.html:7058,Test,TestBit,7058,root/html534/TKey.html,https://root.cern,https://root.cern/root/html534/TKey.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetElements(TList* e); voidSetMiniFrame(Bool_t r); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRGBA(const Float_t[4] arr); voidSetRGBALine(const Float_t[4] arr); voidSetRnrElements(Bool_t r); voidSetRnrFrame(Bool_t r); voidSetRnrSelf(Bool_t r); voidSetShape(TGeoShape* s); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTrans(const Double_t[16] arr); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TEveGeoShapeExtract(const char* n = ""TEveGeoShapeExtract"", const char* t = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveGeoShapeExtract.html:5226,Test,TestBit,5226,root/html602/TEveGeoShapeExtract.html,https://root.cern,https://root.cern/root/html602/TEveGeoShapeExtract.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGrid&operator=(const TGrid&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TGridJobStatusList*Ps(const char*, Bool_t = kTRUE); virtual const char*Pwd(Bool_t = kFALSE); virtual TGridResult*Query(const char*, const char*, const char* = """", const char* = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRegister(const char*, const char*, Long_t = -1, const char* = 0, const char* = 0, Bool_t = kFALSE); voidTObject::ResetBit(UInt_t f); virtual Bool_tResubmit(TGridJob* gridjob); virtual Bool_tResubmitById(TString); virtual Bool_tRm(const char*, Option_t* = """", Bool_t = kFALSE); virtual Bool_tRmdir(const char* = """", Option_t* = """", Bool_t = kFALSE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShell(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStderr(); virtual voidStdout(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual TGridJob*Submit(const char*); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGrid.html:6209,Test,TestBit,6209,root/html530/TGrid.html,https://root.cern,https://root.cern/root/html530/TGrid.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," no longer have 2 consecutive dots if the top level branche name has a trailing dot. The name of the collection’s index leaf also no longer include the dot. For example for “t.” the names where “t._” and “t..fValue” and are now “t_” and “t.fValue”. RDataFrame; New features. Introduce ROOT::RDF::RunGraphs, which allows to compute the results of multiple RDataFrames (or better, multiple independent computation graphs) concurrently while sharing the same thread pool. The computation may be more efficient than running the RDataFrames sequentially if an analysis consists of several computation graphs that individually do not fully utilize the available resources. See e.g. this tutorial for an example usage.; RDataFrame now supports reading friend TTrees with a TTreeIndex, aka “indexed friends”. More details at ROOT-9559.; Experimental logging capabilities have been added to RDataFrame. To activate logging, define the following variable before creating the RDataFrame object: auto verbosity = ROOT::Experimental::RLogScopedVerbosity(ROOT::Detail::RDF::RDFLogChannel(), ROOT::Experimental::ELogLevel.kInfo);.; With ROOT-10023 fixed, RDataFrame can now read and write certain branches containing unsplit objects, i.e. TBranchObjects. More information is available at ROOT-10022.; CSV files can now be opened and processed from remote HTTP(S) locations; RDataFrame results produced by the same action in different computation graphs can now be merged thanks to the new interface provided by ROOT::Detail::RDF::RMergeableValue, introduced in #5552. A feature originally requested with ROOT-9869, it helps streamline RDataFrame workflows in a distributed environment. Currently only a subset of RDataFrame actions have their corresponding mergeable class, but in the future it will be possible to extend it to any action through the creation of a new RMergeableValue derived class. Behavior changes. Snapshot now respects the basket size and split level of the original branch when copying branche",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:7432,log,logging,7432,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['log'],['logging']
Testability," node, or 0 if traininfo undefined ; Definition at line 260 of file DecisionTreeNode.h. ◆ GetSubTreeR(). Double_t TMVA::DecisionTreeNode::GetSubTreeR ; (; ); const. inline . return the resubstitution estimate, R(T_t), of the tree rooted at this node, or -1 if traininfo undefined ; Definition at line 300 of file DecisionTreeNode.h. ◆ GetSumTarget(). Float_t TMVA::DecisionTreeNode::GetSumTarget ; (; ); const. inline . return sum target, or -9999 if traininfo undefined ; Definition at line 340 of file DecisionTreeNode.h. ◆ GetSumTarget2(). Float_t TMVA::DecisionTreeNode::GetSumTarget2 ; (; ); const. inline . return sum target 2, or -9999 if traininfo undefined ; Definition at line 342 of file DecisionTreeNode.h. ◆ GetTmvaVersionCode(). UInt_t TMVA::DecisionTreeNode::GetTmvaVersionCode ; (; ). static . Definition at line 561 of file DecisionTreeNode.cxx. ◆ GoesLeft(). Bool_t TMVA::DecisionTreeNode::GoesLeft ; (; const Event & ; e); const. virtual . test event if it descends the tree at this node to the left ; Implements TMVA::Node.; Definition at line 179 of file DecisionTreeNode.cxx. ◆ GoesRight(). Bool_t TMVA::DecisionTreeNode::GoesRight ; (; const Event & ; e); const. virtual . test event if it descends the tree at this node to the right ; Implements TMVA::Node.; Definition at line 155 of file DecisionTreeNode.cxx. ◆ IncrementNBkgEvents(). void TMVA::DecisionTreeNode::IncrementNBkgEvents ; (; Float_t ; b). inline . increment the sum of the backgr weights in the node, if traininfo defined ; Definition at line 215 of file DecisionTreeNode.h. ◆ IncrementNBkgEvents_unweighted(). void TMVA::DecisionTreeNode::IncrementNBkgEvents_unweighted ; (; ). inline . increment the sum of the backgr weights in the node, if traininfo defined ; Definition at line 224 of file DecisionTreeNode.h. ◆ IncrementNEvents(). void TMVA::DecisionTreeNode::IncrementNEvents ; (; Float_t ; nev). inline . Definition at line 218 of file DecisionTreeNode.h. ◆ IncrementNEvents_unweighted(). void TMVA::Dec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:25326,test,test,25326,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['test'],['test']
Testability," nodes are the actual 'touchable' objects in the geometry, representing a path of positioned ...Definition TGeoPhysicalNode.h:35; TGeoPhysicalNode::Refreshvoid Refresh()Refresh this physical node.Definition TGeoPhysicalNode.cxx:475; TGeoRegionRegions are groups of volumes having a common set of user tracking cuts.Definition TGeoRegion.h:36; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoShape::IsCompositevirtual Bool_t IsComposite() constDefinition TGeoShape.h:130; TGeoShape::IsRunTimeShapeBool_t IsRunTimeShape() constDefinition TGeoShape.h:142; TGeoShape::ComputeBBoxvirtual void ComputeBBox()=0; TGeoShape::AfterStreamervirtual void AfterStreamer()Definition TGeoShape.h:93; TGeoShape::kGeoClosedShape@ kGeoClosedShapeDefinition TGeoShape.h:59; TGeoShape::kGeoArb8@ kGeoArb8Definition TGeoShape.h:52; TGeoShape::kGeoPcon@ kGeoPconDefinition TGeoShape.h:50; TGeoShape::IsATClass * IsA() const overrideDefinition TGeoShape.h:171; TGeoShape::TestShapeBitBool_t TestShapeBit(UInt_t f) constDefinition TGeoShape.h:167; TGeoSkinSurfaceDefinition TGeoOpticalSurface.h:177; TGeoVolumeAssemblyVolume assemblies.Definition TGeoVolume.h:316; TGeoVolumeAssembly::MakeAssemblyFromVolumestatic TGeoVolumeAssembly * MakeAssemblyFromVolume(TGeoVolume *vol)Make a clone of volume VOL but which is an assembly.Definition TGeoVolume.cxx:3088; TGeoVolumeMultiVolume families.Definition TGeoVolume.h:266; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::WeightADouble_t WeightA() constAnalytical computation of the weight.Definition TGeoVolume.cxx:2517; TGeoVolume::ClearThreadDatavirtual void ClearThreadData() constDefinition TGeoVolume.cxx:425; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::SetNumbervoid SetNumber(Int_t number)Definition TGeoVolume.h:245; TGeoVolume::SetLineWidthvoid SetLineWidth(Width_t lwidth",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:233214,Test,TestShapeBit,233214,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Test'],['TestShapeBit']
Testability," not contain the sorted indices but; all indeces of the smaller element in arbitrary order in work[0,...,k-1] and; all indeces of the larger element in arbitrary order in work[k+1,..,n-1]; work[k] will contain instead the index of the returned element. Taken from ""Numerical Recipes in C++"" without the index array; implemented by Anna Khreshuk. See also the declarations at the top of this file. Double_t Pi(). Fundamental constants. { return 3.14159265358979323846; }. Double_t TwoPi(); { return 2.0 * Pi(); }. Double_t PiOver2(); { return Pi() / 2.0; }. Double_t PiOver4(); { return Pi() / 4.0; }. Double_t InvPi(); { return 1.0 / Pi(); }. Double_t RadToDeg(); { return 180.0 / Pi(); }. Double_t DegToRad(); { return Pi() / 180.0; }. Double_t Sqrt2(); { return 1.4142135623730950488016887242097; }. Double_t E(); e (base of natural log). { return 2.71828182845904523536; }. Double_t Ln10(); natural log of 10 (to convert log to ln). { return 2.30258509299404568402; }. Double_t LogE(); base-10 log of e (to convert ln to log). { return 0.43429448190325182765; }. Double_t C(); velocity of light. { return 2.99792458e8; }. Double_t Ccgs(); { return 100.0 * C(); }. Double_t CUncertainty(); { return 0.0; }. Double_t G(); gravitational constant. { return 6.673e-11; }. Double_t Gcgs(); { return G() / 1000.0; }. Double_t GUncertainty(); { return 0.010e-11; }. Double_t GhbarC(); G over h-bar C. { return 6.707e-39; }. Double_t GhbarCUncertainty(); { return 0.010e-39; }. Double_t Gn(); standard acceleration of gravity. { return 9.80665; }. Double_t GnUncertainty(); { return 0.0; }. Double_t H(); Planck's constant. { return 6.62606876e-34; }. Double_t Hcgs(); { return 1.0e7 * H(); }. Double_t HUncertainty(); { return 0.00000052e-34; }. Double_t Hbar(); h-bar (h over 2 pi). { return 1.054571596e-34; }. Double_t Hbarcgs(); { return 1.0e7 * Hbar(); }. Double_t HbarUncertainty(); { return 0.000000082e-34; }. Double_t HC(); hc (h * c). { return H() * C(); }. Double_t HCcgs(); { return Hcgs() * C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TMath.html:45640,Log,LogE,45640,root/html532/TMath.html,https://root.cern,https://root.cern/root/html532/TMath.html,6,"['Log', 'log']","['LogE', 'log']"
Testability," not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle).; . Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2; . Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle; ; between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle); ; However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of are chosen first; (TMultiDimFit::TestFunction).; ; In case isn't defined, an alternative method of; performing this second test is used: The ; function; ; is accepted if (refer also to equation (13)); . (14). where is the sum of the first residuals from the; functions previously accepted; and is the total number; of functions allowed in the final expression of the fit (defined by; user).; ; >From this we see, that by restricting -- the number of; terms in the final model -- the fit is more difficult to perform,; since the above selection criteria is more limiting.; ; The more coefficients we evaluate, the more the sum of squares of; residuals will be reduced. We can evaluate before inverting; ; as shown below.; . Coefficients and Coefficient Errors. Having found a parameterization, that is the 's and , that; minimizes , we still need to determine the coefficients; . However, it's a feature of how we choose the significant; functions, that the evaluation of the 's becomes trivial; [5]. To derive ; , we first note that; equation (4) can be written as; . (15). where; . (16). Consequently, ; is an upper triangle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMultiDimFit.html:8291,test,test,8291,root/html534/TMultiDimFit.html,https://root.cern,https://root.cern/root/html534/TMultiDimFit.html,3,['test'],['test']
Testability," not enforced at run-time).; The third requirement, only necessary if you want to have class signals (i.e. for all objects of a class), is that you have to replace the standard ClassImp macro by ClassImpQ.; Signals are currently implemented for all ROOT GUI classes and the TTimer and TCanvas classes (to find quickly all defined signals do for example: grep '*SIGNAL*' $ROOTSYS/include/*.h).; 26.6 Examples; 26.6.1 A First Time Example (rqfirst.C); This example shows:. How to create interpreted class with signals with different types/number of arguments.; How to connect signals to slots.; How to activate signals. 26.6.2 Histogram Filling with Dynamic State Reported via Signals (rqsimple.C); Based on hsimple this example demonstrates:. All features of the hsimple example.; How to create an interpreted class with signals which will report about dynamic state of the histogram processing.; How to use the TTimer class for emulation of “multithreading”.; How to use signals for the concurrent update of pad, file, benchmark facility, etc. 26.6.3 An Example on How to Use Canvas Event Signals (rqfiller.C); This example shows:. How the object communication mechanism can be used for handling the TCanvas’s mouse/key events in an interpreted class. With this demo you can fill histograms by hand:. Click the left button or move mouse with button pressed to fill histograms.; Use the right button of the mouse to reset the histograms. 26.6.4 Complex GUI Using Signals and Slots (guitest.C); Based on $ROOTSYS/test/guitest.cxx this example demonstrates:. All features of the original compiled guitest.cxx program.; Sophisticated use of signals and slots to build a complete user interface that can be executed either in the interpreter or as a compiled program. 27 Automatic HTML Documentation. THtml is ROOT’s documentation engine. It can be used to document your classes in a reference guide, and to convert your text or source files to HTML.; 27.1 Reference Guide; The Reference Guide for the ROOT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1239100,benchmark,benchmark,1239100,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['benchmark'],['benchmark']
Testability," not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; static Int_tRooAbsPdf::_verboseEval; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooSimultaneous(const char* name, const char* title, RooAbsCategoryLValue& indexCat); Constructor with index category. PDFs associated with indexCat; states can be added after construction with the addPdf() function. RooSimultaneous can function without having a PDF associated; with every single state. The normalization in such cases is taken; from the number of registered PDFs, but getVal() will assert if; when called for an unregistered index state. RooSimultaneous(const char* name, const char* title, const RooArgList& pdfList, RooAbsCategoryLValue& indexCat); Constructor from index category and full list of PDFs.; In this constructor form, a PDF must be supplied for each indexCat state; to avoid ambiguities. The PDFS are associated in order with the state of the; index category as listed by the index categories type iterator. PDFs may not overlap (i.e. share any variables) with the index category (function). RooSimultaneous(const char* name, const char* title, map<std::string,RooAbsPdf*> pdfMap, RooAbsCategoryLValue& inIndexCat). void initialize(RooAbsCategoryLValue& inIndexCat, map<std::string,RooAbsPdf*> pdfMap); First see if there are any RooSimultaneous input components. RooSimultaneous(const RooSimultaneous& other, const char* name = 0); Copy constructor. ~RooSimultaneous(); Destructor. RooAbsPdf* getPdf(const char* catName) const; Return the p.d.f ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimultaneous.html:44831,assert,assert,44831,root/html534/RooSimultaneous.html,https://root.cern,https://root.cern/root/html534/RooSimultaneous.html,1,['assert'],['assert']
Testability," not supported"");; 960 return TTree::GetClusterIterator(-1);; 961}; 962 ; 963////////////////////////////////////////////////////////////////////////////////; 964/// Return absolute entry number in the chain.; 965/// The input parameter entry is the entry number in; 966/// the current tree of this chain.; 967 ; 968Long64_t TChain::GetChainEntryNumber(Long64_t entry) const; 969{; 970 return entry + fTreeOffset[fTreeNumber];; 971}; 972 ; 973////////////////////////////////////////////////////////////////////////////////; 974/// Return the total number of entries in the chain.; 975/// In case the number of entries in each tree is not yet known,; 976/// the offset table is computed.; 977 ; 978Long64_t TChain::GetEntries() const; 979{; 980 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 981 // Make sure the element list is up to date; 982 if (!TestBit(kProofUptodate)); 983 Warning(""GetEntries"", ""PROOF proxy not up-to-date:""; 984 "" run TChain::SetProof(true, true) first"");; 985 return fProofChain->GetEntries();; 986 }; 987 if (fEntries == TTree::kMaxEntries) {; 988 const_cast<TChain*>(this)->LoadTree(TTree::kMaxEntries-1);; 989 }; 990 return fEntries;; 991}; 992 ; 993////////////////////////////////////////////////////////////////////////////////; 994/// Get entry from the file to memory.; 995///; 996/// - getall = 0 : get only active branches; 997/// - getall = 1 : get all branches; 998///; 999/// Return the total number of bytes read,; 1000/// 0 bytes read indicates a failure.; 1001 ; 1002Int_t TChain::GetEntry(Long64_t entry, Int_t getall); 1003{; 1004 Long64_t treeReadEntry = LoadTree(entry);; 1005 if (treeReadEntry < 0) {; 1006 return 0;; 1007 }; 1008 if (!fTree) {; 1009 return 0;; 1010 }; 1011 return fTree->GetEntry(treeReadEntry, getall);; 1012}; 1013 ; 1014////////////////////////////////////////////////////////////////////////////////; 1015/// Return entry number corresponding to entry.; 1016///; 1017/// if no TEntryList set returns entry; 1018/// else ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:36910,Test,TestBit,36910,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability," npoints randomly in a box of 1E-5 around current point. ;  ; void SetNmeshPoints (Int_t npoints=1000);  Set number of points to be generated on the shape outline when checking for overlaps. ;  ; void SetSelectedNode (TGeoNode *node);  ; void ShapeDistances (TGeoShape *shape, Int_t nsamples, Option_t *option);  Test TGeoShape::DistFromInside/Outside. ;  ; void ShapeNormal (TGeoShape *shape, Int_t nsamples, Option_t *option);  Check of validity of the normal for a given shape. ;  ; void ShapeSafety (TGeoShape *shape, Int_t nsamples, Option_t *option);  Check of validity of safe distance for a given shape. ;  ; Double_t * ShootRay (Double_t *start, Double_t dirx, Double_t diry, Double_t dirz, Double_t *array, Int_t &nelem, Int_t &dim, Double_t *enpoint=nullptr) const;  Shoot one ray from start point with direction (dirx,diry,dirz). ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Test (Int_t npoints, Option_t *option);  Check time of finding ""Where am I"" for n points. ;  ; void TestOverlaps (const char *path);  Geometry overlap checker based on sampling. ;  ; Bool_t TestVoxels (TGeoVolume *vol, Int_t npoints=1000000);  Returns optimal voxelization type for volume vol. ;  ; Double_t Weight (Double_t precision=0.01, Option_t *option=""v"");  Estimate weight of top level volume with a precision SIGMA(W)/W better than PRECISION. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Chec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:6490,Test,Test,6490,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Test'],['Test']
Testability," nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& testArg, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* nset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark this object as having changed its shape, and propagate this status; change to all of our clients. Bool_t redirectServers(const RooAbsCollection& newServerList, Bool_t mustReplaceAll = kFALSE, Bool_t nameChange = kFALSE, Bool_t isRecursionStep = kFALSE); Substitute our servers with those listed in newSet. If nameChange is false, servers and; and substitutes are matched by name. If nameChange is true, servers are matched to args; in newSet that have the 'ORIGNAME:<servername>' attribute set. If mustReplaceAll is set,; a warning is printed and error status is returned if not all servers could be suc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:23551,test,testArg,23551,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,3,"['Test', 'test']","['Test', 'testArg']"
Testability," nset); Int_tRooAbsPdf::minDimNormValueCaching() const; virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual voidnormLeafServerList(RooArgSet& list) const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:23316,test,testArg,23316,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['test'],['testArg']
Testability," nullptr;; 895}; 896 ; 897////////////////////////////////////////////////////////////////////////////////; 898/// Returns the expanded value of the alias. Search in the friends if any.; 899 ; 900const char* TChain::GetAlias(const char* aliasName) const; 901{; 902 const char* alias = TTree::GetAlias(aliasName);; 903 if (alias) {; 904 return alias;; 905 }; 906 if (fTree) {; 907 return fTree->GetAlias(aliasName);; 908 }; 909 const_cast<TChain*>(this)->LoadTree(0);; 910 if (fTree) {; 911 return fTree->GetAlias(aliasName);; 912 }; 913 return nullptr;; 914}; 915 ; 916////////////////////////////////////////////////////////////////////////////////; 917/// Return pointer to the branch name in the current tree.; 918 ; 919TBranch* TChain::GetBranch(const char* name); 920{; 921 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 922 // Make sure the element list is up to date; 923 if (!TestBit(kProofUptodate)); 924 SetProof(true, true);; 925 return fProofChain->GetBranch(name);; 926 }; 927 if (fTree) {; 928 return fTree->GetBranch(name);; 929 }; 930 LoadTree(0);; 931 if (fTree) {; 932 return fTree->GetBranch(name);; 933 }; 934 return nullptr;; 935}; 936 ; 937////////////////////////////////////////////////////////////////////////////////; 938/// See TTree::GetReadEntry().; 939 ; 940bool TChain::GetBranchStatus(const char* branchname) const; 941{; 942 if (fProofChain && !(fProofChain->TestBit(kProofLite))) {; 943 // Make sure the element list is up to date; 944 if (!TestBit(kProofUptodate)); 945 Warning(""GetBranchStatus"", ""PROOF proxy not up-to-date:""; 946 "" run TChain::SetProof(true, true) first"");; 947 return fProofChain->GetBranchStatus(branchname);; 948 }; 949 return TTree::GetBranchStatus(branchname);; 950}; 951 ; 952////////////////////////////////////////////////////////////////////////////////; 953/// Return an iterator over the cluster of baskets starting at firstentry.; 954///; 955/// This iterator is not yet supported for TChain object.; 956 ; 957TTree::TClust",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TChain_8cxx_source.html:34821,Test,TestBit,34821,doc/master/TChain_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TChain_8cxx_source.html,2,['Test'],['TestBit']
Testability," nullptr . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ DistFromOutside_v(). void TGeoParaboloid::DistFromOutside_v ; (; const Double_t * ; points, . const Double_t * ; dirs, . Double_t * ; dists, . Int_t ; vecsize, . Double_t * ; step . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ DistToParaboloid(). Double_t TGeoParaboloid::DistToParaboloid ; (; const Double_t * ; point, . const Double_t * ; dir, . Bool_t ; in . ); const. ◆ Divide(). TGeoVolume * TGeoParaboloid::Divide ; (; TGeoVolume * ; voldiv, . const char * ; divname, . Int_t ; iaxis, . Int_t ; ndiv, . Double_t ; start, . Double_t ; step . ). overridevirtual . Reimplemented from TGeoBBox. ◆ GetBoundingCylinder(). void TGeoParaboloid::GetBoundingCylinder ; (; Double_t * ; param); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetBuffer3D(). const TBuffer3D & TGeoParaboloid::GetBuffer3D ; (; Int_t ; reqSections, . Bool_t ; localFrame . ); const. overridevirtual . Stub implementation to avoid forcing implementation at this stage. ; Reimplemented from TGeoBBox. ◆ GetDz(). Double_t TGeoParaboloid::GetDz ; (; ); const. inline . Definition at line 58 of file TGeoParaboloid.h. ◆ GetMakeRuntimeShape(). TGeoShape * TGeoParaboloid::GetMakeRuntimeShape ; (; TGeoShape * ; mother, . TGeoMatrix * ; mat . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetMeshNumbers(). void TGeoParaboloid::GetMeshNumbers ; (; Int_t & ; nvert, . Int_t & ; nsegs, . Int_t & ; npols . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetNmeshVertices(). Int_t TGeoParaboloid::GetNmeshVertices ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ GetPointsOnSegments(). Bool_t TGeoParaboloid::GetPointsOnSegments ; (; Int_t ; , . Double_t * ;  . ); const. inlineoverridevirtual . Reimplemented from TGeoBBox.; Definition at line 64 of file TGeoParaboloid.h. ◆ GetRhi(). Double_t TGeoParaboloid::GetRhi ; (; ); const. inline . Definition at line 57 of file TGeoParaboloid.h. ◆ GetRlo(). Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoParaboloid.html:26480,Stub,Stub,26480,doc/master/classTGeoParaboloid.html,https://root.cern,https://root.cern/doc/master/classTGeoParaboloid.html,1,['Stub'],['Stub']
Testability," number of parallel slaves. Returns -1 in case of error. Int_t SetParallel(Int_t nodes = -1, Bool_t random = kFALSE); Tell PROOF how many slaves to use in parallel. Returns the number of; parallel slaves. Returns -1 in case of error. Int_t GoMoreParallel(Int_t nWorkersToAdd); Add nWorkersToAdd workers to current list of workers. This function is; works on the master only, and only when an analysis is ongoing. A message; is sent back to the client when we go ""more"" parallel.; Returns -1 on error, number of total (not added!) workers on success. Int_t GoParallel(Int_t nodes, Bool_t accept = kFALSE, Bool_t random = kFALSE); Go in parallel mode with at most ""nodes"" slaves. Since the fSlaves; list is sorted by slave performace the active list will contain first; the most performant nodes. Returns the number of active slaves.; If random is TRUE, and nodes is less than the number of available workers,; a random selection is done.; Returns -1 in case of error. void ShowData(); List contents of the data directory in the sandbox.; This is the place where files produced by the client queries are kept. void ClearData(UInt_t what = kUnregistered, const char* dsname = 0); Remove files for the data directory.; The option 'what' can take the values:; kPurge remove all files and directories under '~/data'; kUnregistered remove only files not in registered datasets (default); kDataset remove files belonging to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:68751,sandbox,sandbox,68751,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,3,['sandbox'],['sandbox']
Testability," o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetVertical(Bool_t x = kTRUE); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector&); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTEveWindow::SwapWindow(TEveWindow* w); static voidTEveWindow::SwapWindows(TEveWindow* w1, TEveWindow* w2); voidTEveWindow::SwapWindowWithCurrent()MENU ; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; voidTEveWindow::TitleBarClicked(); voidTEveWindow::UndockWindow()MENU ; voidTEveWindow::UndockWindowDestroySlot()MENU ; virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveWindowPack.html:17123,Test,TestBit,17123,root/html534/TEveWindowPack.html,https://root.cern,https://root.cern/root/html534/TEveWindowPack.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability," obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedCom",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsString.html:8603,test,testArg,8603,root/html526/RooAbsString.html,https://root.cern,https://root.cern/root/html526/RooAbsString.html,2,['test'],['testArg']
Testability," obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tRooAbsArg::isFundamental() const; virtual Bool_tRooAbsArg::isLValue() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_toperator==(const char*) const; virtual Bool_toperator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::over",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsString.html:8771,test,testArg,8771,root/html530/RooAbsString.html,https://root.cern,https://root.cern/root/html530/RooAbsString.html,1,['test'],['testArg']
Testability," obj); static voidTFormula::SetMaxima(Int_t maxop = 1000, Int_t maxpar = 1000, Int_t maxconst = 1000); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTFormula::SetNumber(Int_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFormula::SetParameter(const char* name, Double_t parvalue); virtual voidTFormula::SetParameter(Int_t ipar, Double_t parvalue); virtual voidTFormula::SetParameters(const Double_t* params); virtual voidTFormula::SetParameters(Double_t p0, Double_t p1, Double_t p2 = 0, Double_t p3 = 0, Double_t p4 = 0, Double_t p5 = 0, Double_t p6 = 0, Double_t p7 = 0, Double_t p8 = 0, Double_t p9 = 0, Double_t p10 = 0)MENU ; virtual voidTFormula::SetParName(Int_t ipar, const char* name); virtual voidTFormula::SetParNames(const char* name0 = ""p0"", const char* name1 = ""p1"", const char* name2 = ""p2"", const char* name3 = ""p3"", const char* name4 = ""p4"", const char* name5 = ""p5"", const char* name6 = ""p6"", const char* name7 = ""p7"", const char* name8 = ""p8"", const char* name9 = ""p9"", const char* name10 = ""p10"")MENU ; voidSetQuickLoad(Bool_t quick); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFormula::Update(); virtual voidUpdateFormulaLeaves(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeFormula.html:9218,Test,TestBit,9218,root/html534/TTreeFormula.html,https://root.cern,https://root.cern/root/html534/TTreeFormula.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," obj); virtual voidSetEMail(const char* value = 0, const char* description = 0); virtual voidSetExecutable(const char* value = 0, const char* description = 0); virtual voidSetInputDataList(const char* list = ""collection.xml"", const char* description = 0); virtual voidSetInputDataListFormat(const char* format = ""xml-single"", const char* description = 0); virtual voidSetJobTag(const char* jobtag = 0, const char* description = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOutputDirectory(const char* value = 0, const char* description = 0); virtual voidSetPrice(UInt_t price = 1, const char* description = 0); virtual voidSetSplitArguments(const char* splitarguments = 0, const char* description = 0); virtual voidSetSplitMode(const char* value, UInt_t maxnumberofinputfiles = 0, UInt_t maxinputfilesize = 0, const char* d1 = 0, const char* d2 = 0, const char* d3 = 0); virtual voidSetTTL(UInt_t ttl = 72000, const char* description = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValidationCommand(const char* value, const char* description = 0); voidSetValue(const char* key, const char* value); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGridJDL(); TGridJDL(const TGridJDL&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGridJDL.html:6559,Test,TestBit,6559,root/html602/TGridJDL.html,https://root.cern,https://root.cern/root/html602/TGridJDL.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," obj); virtual voidSetErrmsgcallback(void* p) const; virtual Bool_tSetErrorMessages(Bool_t enable = kTRUE); virtual voidSetGetline(const char *(*)(const char* prompt) getlineFunc, void (*)(const char* line) histaddFunc); virtual voidSetgvp(Long_t) const; virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetProcessLineLock(Bool_t lock = kTRUE); virtual voidSetRTLD_LAZY() const; virtual voidSetRTLD_NOW() const; virtual voidSetTempLevel(int val) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTypedefInfo_Delete(TypedefInfo_t* tinfo) const; virtual TypedefInfo_t*TypedefInfo_Factory() const; virtual TypedefInfo_t*TypedefInfo_FactoryCopy(TypedefInfo_t* tinfo) const; virtual voidTypedefInfo_Init(TypedefInfo_t* tinfo, const char* funcname) const; virtual Bool_tTypedefInfo_IsValid(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Name(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Next(TypedefInfo_t* tinfo) const; virtual Long_tTypedefInfo_Property(TypedefInfo_t* tinfo) const; virtual intTypedefInfo_Size(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_Title(TypedefInfo_t* tinfo) const; virtual const char*TypedefInfo_TrueName(TypedefInfo_t* tinfo) const; virtual voidTypeInfo_Delete(TypeInfo_t* tinfo) const; virtual TypeInfo_t*TypeInfo_Factory() const; virtual TypeInfo_t*TypeInfo_Factory(G__value*) const; virtual TypeInfo_t*TypeInfo_FactoryCopy(TypeInfo_t*) const; virtual voidTypeInfo_Init(TypeInfo_t* tinfo, const char* fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCint.html:16392,Test,TestBits,16392,root/html534/TCint.html,https://root.cern,https://root.cern/root/html534/TCint.html,1,['Test'],['TestBits']
Testability," obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetValuesON(Bool_t on); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPaveStatsEditor.html:15170,Test,TestBit,15170,root/html534/TPaveStatsEditor.html,https://root.cern,https://root.cern/root/html534/TPaveStatsEditor.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," obj); virtual voidTHn::Reset(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTHnBase::Scale(Double_t c); voidTHn::SetBinContent(const Int_t* idx, Double_t v); virtual voidTHn::SetBinContent(Long64_t bin, Double_t v); voidTHnBase::SetBinEdges(Int_t idim, const Double_t* bins); voidTHnBase::SetBinError(const Int_t* idx, Double_t e); voidTHnBase::SetBinError(Long64_t bin, Double_t e); virtual voidTHn::SetBinError2(Long64_t bin, Double_t e2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTHnBase::SetEntries(Double_t entries); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTHnBase::SetTitle(const char* title); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTHn::Sumw2(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THnT<ULong64_t>(); THnT<ULong64_t>(const THnT<ULong64_t>&); THnT<ULong64_t>(THnT<ULong64_t>&&); THnT<ULong64_t>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_ULong64_t_.html:8309,Test,TestBit,8309,root/html602/THnT_ULong64_t_.html,https://root.cern,https://root.cern/root/html602/THnT_ULong64_t_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," obj); voidTObject::ResetBit(UInt_t f); RooStats::SamplingDistPlotSamplingDistPlot(Int_t nbins = 100); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidSetApplyStyle(Bool_t s); voidSetAxisTitle(char* varName); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLineColor(Color_t color, const RooStats::SamplingDistribution* samplDist = 0); voidSetLineStyle(Style_t style, const RooStats::SamplingDistribution* samplDist = 0); voidSetLineWidth(Width_t lwidth, const RooStats::SamplingDistribution* samplDist = 0); voidSetLogXaxis(Bool_t lx); voidSetLogYaxis(Bool_t ly); voidSetMarkerColor(Color_t color, const RooStats::SamplingDistribution* samplDist = 0); voidSetMarkerSize(Size_t size, const RooStats::SamplingDistribution* samplDist = 0); voidSetMarkerStyle(Style_t style, const RooStats::SamplingDistribution* samplDist = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SamplingDistPlot.html:7012,Test,TestBit,7012,root/html528/RooStats__SamplingDistPlot.html,https://root.cern,https://root.cern/root/html528/RooStats__SamplingDistPlot.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::FrequentistCalculator ; RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::FlexibleInterpVar flexible interpolation; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::HistoToWorkspaceFactoryFast ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/ClassIndex.html:44043,Test,TestStatistic,44043,root/html530/ClassIndex.html,https://root.cern,https://root.cern/root/html530/ClassIndex.html,1,['Test'],['TestStatistic']
Testability," object for RooSimWSTool; RooSimWSTool::MultiBuildConfig Build configuration object for RooSimWSTool with multiple prototype p.d.f.; RooSimWSTool::ObjBuildConfig Validated RooSimWSTool build configuration; RooSimWSTool::ObjSplitRule Validated RooSimWSTool split rule; RooSimWSTool::SplitRule Split rule specification for prototype p.d.f; RooSimultaneous Simultaneous operator p.d.f, functions like C++ 'switch()' on input p.d.fs operating on index category5A; RooSpHarmonic SpHarmonic polynomial; RooStats ; RooStats::AcceptanceRegion A simple class for acceptance regions used for ConfidenceBelt; RooStats::BayesianCalculator BayesianCalculator class; RooStats::BernsteinCorrection A utility to add polynomial corrrection terms to a model to improve the description of data.; RooStats::CombinedCalculator A base class that is for tools that can be both HypoTestCalculators and IntervalCalculators; RooStats::ConfInterval Interface for Confidence Intervals; RooStats::ConfidenceBelt A confidence belt for the Neyman Construction; RooStats::DebuggingSampler A simple implementation of the DistributionCreator interface; RooStats::DebuggingTestStat A concrete implementation of the TestStatistic interface, useful for debugging.; RooStats::FeldmanCousins Interface for tools setting limits (producing confidence intervals); RooStats::HLFactory The high Level Model Factory to create models from datacards; RooStats::Heaviside Your description goes here...; RooStats::HistFactory::EstimateSummary ; RooStats::HistFactory::HistoToWorkspaceFactory ; RooStats::HistFactory::LinInterpVar Piecewise linear interpolation; RooStats::HybridCalculator ; RooStats::HybridCalculatorGeneric ; RooStats::HybridCalculatorOriginal Hypothesis test calculator using a Bayesian-frequentist hybrid method; RooStats::HybridPlot Provides the plots for an HybridResult; RooStats::HybridResult Class containing the results of the HybridCalculator; RooStats::HypoTestCalculator Interface for tools doing hypothesis tests; RooSta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:44030,Test,TestStatistic,44030,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,1,['Test'],['TestStatistic']
Testability," object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const LogLikelihoodFCN &f)Copy constructor.Definition LogLikelihoodFCN.h:86; ROOT::Fit::LogLikelihoodFCN::BaseFCNBasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCNDefinition LogLikelihoodFCN.h:45; ROOT::Fit::LogLikelihoodFCN::TModelFunType::BackendType TDefinition LogLikelihoodFCN.h:44; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf)Definition LogLikelihoodFCN.h:57; ROOT::Fit::LogLikelihoodFCN::UseSumOfWeightSquarevoid UseSumOfWeightSquare(bool on=true)Definition LogLikelihoodFCN.h:139; ROOT::Fit::LogLikelihoodFCN::Gradientvirtual void Gradient(const double *x, double *g) constDefinition LogLikelihoodFCN.h:127; ROOT::Fit::LogLikelihoodFCN::BaseObjFunction::ROOT::Math::BasicFitMethodFunction< DerivFunType > BaseObjFunctionDefinition LogLikelihoodFCN.h:47; ROOT::Fit::LogLikelihoodFCN::Clonevirtual BaseFunction * Clone() constclone the fu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:9715,Log,LogLikelihoodFCN,9715,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,2,['Log'],['LogLikelihoodFCN']
Testability," object; Double_tfPrecisionRooCurve precision; Double_tfXmax; Double_tfXmin; Double_tfYmax; Double_tfYmin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; LikelihoodIntervalPlot(); LikelihoodIntervalPlot default constructor; with default parameters. LikelihoodIntervalPlot(LikelihoodInterval* theInterval); LikelihoodIntervalPlot copy constructor. ~LikelihoodIntervalPlot(); LikelihoodIntervalPlot destructor. void SetLikelihoodInterval(RooStats::LikelihoodInterval* theInterval). void SetPlotParameters(const RooArgSet* params). void Draw(Option_t* options = 0); draw the log of the profiled likelihood function in 1D with the interval or; as a 2D plot with the contours.; Higher dimensionals intervals cannot be drawn. One needs to call; SetPlotParameters to project interval in 1 or 2dim. Options for drawing 1D interals. For 1D problem the log of the profiled likelihood function is drawn bby default in a RooPlot as a; RooCurve; The plotting range (default is the full parameter range) and the precision of the RooCurve; can be specified by using SetRange(x1,x2) and SetPrecision(eps).; SetNPoints(npoints) can also be used (default is npoints=100); Optionally the function can be drawn as a TF1 (option=""tf1"") obtained by sampling the given npoints; in the given range. Options for drawing 2D intervals. For 2D case, a contour and optionally the profiled likelihood function is drawn by sampling npoints in; the given range. A 2d histogram of nbinsX=nbinsY = sqrt(npoints) is used for sampling the profiled likelihood.; The contour can be obtained by using Minuit or by the sampled histogram,; If using Minuit, the number of points specifies the number of contour points. If using an histogram the number of; points is approximatly the total number of bins of the histogram.; Possible options:; minuit/nominuit: use minuit for computing the contour; hist/nohist : sample in an histogram the profiled likelihood. Note that one can have both a drawing o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html:8893,log,log,8893,root/html534/RooStats__LikelihoodIntervalPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__LikelihoodIntervalPlot.html,1,['log'],['log']
Testability," objects. By setting the shell variable ROOTENV_NO_HOME=1 the reading of; 5651/// the `$HOME/<name>` resource file will be skipped. This might be useful in; 5652/// case the home directory resides on an automounted remote file system; 5653/// and one wants to avoid the file system from being mounted.; 5654 ; 5655void TCling::InitRootmapFile(const char *name); 5656{; 5657 assert(requiresRootMap(name) && ""We have a module!"");; 5658 ; 5659 if (!requiresRootMap(name)); 5660 return;; 5661 ; 5662 Bool_t ignore = fMapfile->IgnoreDuplicates(kFALSE);; 5663 ; 5664 fMapfile->SetRcName(name);; 5665 ; 5666 TString sname = ""system"";; 5667 sname += name;; 5668 char *s = gSystem->ConcatFileName(TROOT::GetEtcDir(), sname);; 5669 ; 5670 Int_t ret = ReadRootmapFile(s);; 5671 if (ret == -3) // old format; 5672 fMapfile->ReadFile(s, kEnvGlobal);; 5673 delete [] s;; 5674 if (!gSystem->Getenv(""ROOTENV_NO_HOME"")) {; 5675 s = gSystem->ConcatFileName(gSystem->HomeDirectory(), name);; 5676 ret = ReadRootmapFile(s);; 5677 if (ret == -3) // old format; 5678 fMapfile->ReadFile(s, kEnvUser);; 5679 delete [] s;; 5680 if (strcmp(gSystem->HomeDirectory(), gSystem->WorkingDirectory())) {; 5681 ret = ReadRootmapFile(name);; 5682 if (ret == -3) // old format; 5683 fMapfile->ReadFile(name, kEnvLocal);; 5684 }; 5685 } else {; 5686 ret = ReadRootmapFile(name);; 5687 if (ret == -3) // old format; 5688 fMapfile->ReadFile(name, kEnvLocal);; 5689 }; 5690 fMapfile->IgnoreDuplicates(ignore);; 5691}; 5692 ; 5693 ; 5694namespace {; 5695 using namespace clang;; 5696 ; 5697 class ExtVisibleStorageAdder: public RecursiveASTVisitor<ExtVisibleStorageAdder>{; 5698 // This class is to be considered an helper for AutoLoading.; 5699 // It is a recursive visitor is used to inspect namespaces and specializations; 5700 // coming from forward declarations in rootmaps and to set the external visible; 5701 // storage flag for them.; 5702 public:; 5703 ExtVisibleStorageAdder(std::unordered_set<const NamespaceDecl*>& nsSet): fNSS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:220320,assert,assert,220320,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability," objects. The Illegal overlaps folder is empty but can be filled after performing a geometry validity check (see section: ""Checking the; Geometry""). If tracking is performed using TGeo, the folder Tracks might contain user-defined tracks that can be visualized/animated in the geometry context (see section: ""Creating and; Visualizing Tracks""). Since for the time being we are interested more in the geometrical hierarchy, we will focus on the last two displayed items TOPand TOP_1. These are the top volume and the corresponding top node in the hierarchy.; Double clicking on the TOP volume will unfold all different volumes contained by the top volume. In the right panel, we will see all the volumes contained by TOP (if the same is positioned 4 times we will get 4 identical items). This rule will apply to any clicked volume in the hierarchy. Note that right clicking a volume item activates the volume context menu containing several specific methods. We will call the volume hierarchy developed in this way as the logical geometry graph. The volume objects are nodes inside this graph and the same volume can be accessed starting from different branches.; On the other hand, the real geometrical objects that are seen when visualizing or tracking the geometry are depicted in the TOP_1 branch. These are the nodes of the physical tree of positioned volumes represented by TGeoNode objects. This hierarchy is a tree since a node can have only one parent and several daughters. For a better understanding of the hierarchy, have a look at TGeoManage.; Just close now the X3D window and focus at the wire frame picture drawn in a pad. Activate Options/Event Status. Moving the mouse in the pad, you will notice that objects are sometimes changing color to red. Volumes are highlighted in this way whenever the mouse pointer is close enough to one of its vertices. When this happens, the corresponding volume is selected and you will see in the bottom right size of the ROOT canvas its name, shape t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:13113,log,logical,13113,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability," obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooFunctorPdfBinding&operator=(const RooFunctorPdfBinding&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsPdf::paramOn(RooPlot* frame, const RooAbsData* data, const char* label = """", Int_t sigDigits = 2, Option_t* options = ""NELU"", Double_t xmin = 0.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFunctorPdfBinding.html:23608,test,testArg,23608,root/html602/RooFunctorPdfBinding.html,https://root.cern,https://root.cern/root/html602/RooFunctorPdfBinding.html,2,['test'],['testArg']
Testability," obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 7195 of file xRooNode.cxx. ◆ clone(). TObject * PdfWrapper::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 7193 of file xRooNode.cxx. ◆ evaluate(). double PdfWrapper::evaluate ; (; ); const. inlineoverridevirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 7200 of file xRooNode.cxx. ◆ getSimplePropagatedError(). double PdfWrapper::getSimplePropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset_in . ); const. inline . Definition at line 7213 of file xRooNode.cxx. ◆ isBinnedDistribution(). bool PdfWrapper::isBinnedDistribution ; (; const RooArgSet & ; ); const. inlineoverridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 7194 of file xRooNode.cxx. ◆ selfNormalized(). bool PdfWrapper::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 7207 of file xRooNode.cxx. Member Data Documentation. ◆ fCoef. RooRealProxy PdfWrapper::fCoef. private . Definition at line 7425 of file xRooNode.cxx. ◆ fExpectedEventsMode. bool PdfWrapper::fExpectedEventsMode = false. private . Definition at line 7427 of file xRooNode.cxx. ◆ fExpPdf. RooRealProxy PdfWrapper::fExpPdf. private . Definition at line 7426 of file xRooNode.cxx. ◆ fFunc. RooRealProxy PdfWrapper::fFunc. private . Definition at line 7424 of file xRooNode.cxx. roofit/xroofit/src/xRooNode.cxx. PdfWrapper. ROOT master ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPdfWrapper.html:74891,Test,Tests,74891,doc/master/classPdfWrapper.html,https://root.cern,https://root.cern/doc/master/classPdfWrapper.html,1,['Test'],['Tests']
Testability," of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate; // x positions of 1D ridges (not fit).; // However they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y; // positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values; // of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix; // appropriate y positions of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks; // amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows; // to fix appropriate amplitudes of 2D peaks (not fit).; // However they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which alloes to fix; // appropriate amplitudes of 1D ridges (not fit).; // However they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D; // ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of; // fitted amplitudes of 1D ridges, output ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/spectrum/Spectrum.html:48988,log,logical,48988,root/html534/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/html534/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability," of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome How to create a ROOTbook?. ROOT 6.07 Onwards; The minimal version of Jupyter required in this case is 4.0.; Note that the sudo command might not be necessary on some platforms.; Provided that ROOT is installed on your machine, these are the steps to follow to use a ROOT-flavoured C++ notebook:; # Install dependencies; sudo pip install jupyter metakernel zmq;  ; # Launch ROOT notebook; root --notebook; This will open the notebook interface in your browser, where you will be able to select a ROOT C++ kernel. Note that this procedure assumes that executable python is the executable of Python2.; ROOT 6.05/02; An initial version of the ROOT Kernel is available already for version 6.05. It can be setup and ran with the following commands:; # Install IPython notebook 3.2; sudo pip install -Iv ipython[notebook]==3.2.0;  ; # Launch ROOT notebook; root --notebook. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/how/how-create-rootbook.html:3264,test,tests,3264,d/how/how-create-rootbook.html,https://root.cern,https://root.cern/d/how/how-create-rootbook.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability," of a given normalization range; to interpret function value. Needed for functions or p.d.f.s; whose shape depends on the choice of normalization such as; RooAddPdf. void setCacheCheck(Bool_t flag); Activate cache validation mode. Int_t getMaxVal(const RooArgSet& vars) const; Advertise capability to determine maximum value of function for given set of; observables. If no direct generator method is provided, this information; will assist the accept/reject generator to operate more efficiently as; it can skip the initial trial sampling phase to empirically find the function; maximum. Double_t maxVal(Int_t code) const; Return maximum value for set of observables identified by code assigned; in getMaxVal. void logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); Interface to insert remote error logging messages received by RooRealMPFE into current error loggin stream. void logEvalError(const char* message, const char* serverValueString = 0) const; Log evaluation error message. Evaluation errors may be routed through a different; protocol than generic RooFit warning message (which go straight through RooMsgService); because evaluation errors can occur in very large numbers in the use of likelihood; evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging(); messages reported through this function are not printed but all stored in a list,; along with server values at the time of reporting. Error messages logged in this; way can be printed in a structured way, eliminating duplicates and with the ability; to truncate the list by printEvalErrors. This is the standard mode of error logging; during MINUIT operations. If enableEvalErrorLogging() is false, all errors; reported through this method are passed for immediate printing through RooMsgService.; A string with server names and values is constructed automatically for error logging; purposes, unless a custom string with similar ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsReal.html:61463,log,logEvalError,61463,root/html526/RooAbsReal.html,https://root.cern,https://root.cern/root/html526/RooAbsReal.html,14,"['Log', 'log']","['Log', 'logEvalError']"
Testability," of all groups ;  ; TString Getenv (const char *env, const char *ord=""0"");  Get value of environment variable 'env' on node 'ord'. ;  ; TList * GetFeedbackList () const;  Return feedback list. ;  ; const char * GetGroup () const;  ; const char * GetImage () const;  ; TList * GetInputList ();  Get input list. ;  ; TMacro * GetLastLog ();  Fill a TMacro with the log lines since the last reading (fLogFileR) Return (TMacro *)0 if no line was logged. ;  ; TList * GetListOfEnabledPackages ();  Get from the master the list of names of the packages enabled. ;  ; TList * GetListOfPackages ();  Get from the master the list of names of the packages available. ;  ; TList * GetListOfSlaveInfos ();  Returns list of TSlaveInfo's. In case of error return 0. ;  ; TList * GetLoadedMacros () const;  ; void GetLog (Int_t start=-1, Int_t end=-1);  Ask for remote logs in the range [start, end]. ;  ; Int_t GetLogLevel () const;  ; TMacro * GetMacroLog ();  ; TProofMgr * GetManager ();  ; const char * GetMaster () const;  ; void GetMaxQueries ();  Get max number of queries whose full results are kept in the remote sandbox. ;  ; TFileCollection * GetMissingFiles (TQueryResult *qr=0);  Get a TFileCollection with the files missing in the query described by 'qr' or the last query if qr is null (default). ;  ; Int_t GetNumberOfDrawQueries ();  ; Int_t GetNumberOfQueries ();  Number of queries processed by this session. ;  ; TObject * GetOutput (const char *name);  Get specified object that has been produced during the processing (see Process()). ;  ; TList * GetOutputList ();  Get list with all object created during processing (see Process()). ;  ; TList * GetOutputNames ();  FIXME: to be written. ;  ; Int_t GetParallel () const;  Returns number of slaves active in parallel mode. ;  ; TObject * GetParameter (const char *par) const;  Get specified parameter. ;  ; Int_t GetPort () const;  ; EQueryMode GetQueryMode (Option_t *mode=0) const;  Find out the query mode based on the current setting and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:11827,sandbox,sandbox,11827,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['sandbox'],['sandbox']
Testability," of all members ; ROOT::Math::GSLMultiFit Class ReferenceMath » MathCore | Math » MathMore » Numerical Algorithms » Multi-dimensional Minimization. ; GSLMultiFit, internal class for implementing GSL non linear least square GSL fitting. ; Definition at line 53 of file GSLMultiFit.h. Public Member Functions;  GSLMultiFit (const gsl_multifit_fdfsolver_type *type=nullptr);  Default constructor No need to specify the type so far since only one solver exists so far. ;  ;  GSLMultiFit (const GSLMultiFit &)=delete;  ;  GSLMultiFit (GSLMultiFit &&)=delete;  ;  ~GSLMultiFit ();  Destructor (no operations) ;  ; const double * CovarMatrix () const;  return covariance matrix of the parameters ;  ; void CreateSolver (unsigned int npoints, unsigned int npar);  create the minimizer from the type and size of number of fitting points and number of parameters ;  ; double Edm () const;  ; const double * Gradient () const;  gradient value at the minimum ;  ; int Iterate ();  ; std::string Name () const;  ; GSLMultiFit & operator= (const GSLMultiFit &rhs)=delete;  ; GSLMultiFit & operator= (GSLMultiFit &&rhs)=delete;  ; template<class Func > ; int Set (const std::vector< Func > &funcVec, const double *x);  set the solver parameters ;  ; int TestDelta (double absTol, double relTol) const;  test using abs and relative tolerance |dx| < absTol + relTol*|x| for every component ;  ; int TestGradient (double absTol) const;  test gradient (ask from solver gradient vector) ;  ; const double * X () const;  parameter values at the minimum ;  . Private Attributes; gsl_matrix * fCov;  ; GSLMultiFitFunctionWrapper fFunc;  ; gsl_multifit_fdfsolver * fSolver;  ; gsl_vector * fTmp;  ; const gsl_multifit_fdfsolver_type * fType;  ; gsl_vector * fVec;  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/math/mathmore/src/GSLMultiFit.h>; Constructor & Destructor Documentation. ◆ GSLMultiFit() [1/3]. ROOT::Math::GSLMultiFit::GSLMultiFit ; (; const gsl_multifit_fdfsolver_type",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html:1445,Test,TestDelta,1445,doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiFit.html,4,"['Test', 'test']","['TestDelta', 'TestGradient', 'test']"
Testability," of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x. Double_t IntegralAndError(Int_t binx1, Int_t binx2, Double_t& err, Option_t* option = """") const; Return integral of bin contents in range [binx1,binx2] and its error; By default the integral is computed as the sum of bin contents in the range.; if option ""width"" is specified, the integral is the sum of; the bin contents multiplied by the bin width in x.; the error is computed using error propagation from the bin errors assumming that; all the bins are uncorrelated. Double_t DoIntegral(Int_t ix1, Int_t ix2, Int_t iy1, Int_t iy2, Int_t iz1, Int_t iz2, Double_t& err, Option_t* opt, Bool_t doerr = kFALSE) const; internal function compute integral and optionally the error between the limits; specified by the bin number values working for all histograms (1D, 2D and 3D). Double_t KolmogorovTest(const TH1* h2, Option_t* option = """") const; Statistical test of compatibility in shape between; THIS histogram and h2, using Kolmogorov test. Default: Ignore under- and overflow bins in comparison. option is a character string to specify options; ""U"" include Underflows in test (also for 2-dim); ""O"" include Overflows (also valid for 2-dim); ""N"" include comparison of normalizations; ""D"" Put out a line of ""Debug"" printout; ""M"" Return the Maximum Kolmogorov distance instead of prob; ""X"" Run the pseudo experiments post-processor with the following procedure:; make pseudoexperiments based on random values from the parent; distribution and compare the KS distance of the pseudoexperiment; to the parent distribution. Bin the KS distances in a histogram,; and then take the integral of all the KS values above the value; obtained from the original data to Monte Carlo distribution.; The number of pseudo-experiments nEXPT is currently fixed at 1000.; The function returns the integral.; (thanks to Ben Kilminster to submit this procedure). Note that; this op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:107287,test,test,107287,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,6,['test'],['test']
Testability," of clones; class can be constructed. This operator should not be used for; lefthand side assignments, like a[2] = xxx. Only like,; new (a[2]) myClass, or xxx = a[2]. Of course right hand side usage; is only legal after the object has been constructed via the; new operator or via the New() method. To remove elements from; the clones array use Remove() or RemoveAt(). TObject * operator[](Int_t idx) const; Return the object at position idx. Returns 0 if idx is out of bounds. TObject * New(Int_t idx); Create an object of type fClass with the default ctor at the specified; index. Returns 0 in case of error. void AbsorbObjects(TClonesArray* tc); Directly move the object pointers from tc to this without cloning; (copying).; ""this"" takes over ownership of all of tc's object pointers. tc is left; empty upon return. void MultiSort(Int_t nTCs, TClonesArray** tcs, Int_t upto = kMaxInt); Sort multiple TClonesArrays simultaneously with this.; If objects in array are sortable (i.e. IsSortable() returns true; for all objects) then sort array. TObject * AddrAt(Int_t idx). TClass * GetClass() const; { return fClass; }. void AddFirst(TObject* ); { MayNotUse(""AddFirst""); }. void AddLast(TObject* ); { MayNotUse(""AddLast""); }. void AddAt(TObject* , Int_t ); { MayNotUse(""AddAt""); }. void AddAtAndExpand(TObject* , Int_t ); { MayNotUse(""AddAtAndExpand""); }. Int_t AddAtFree(TObject* ); { MayNotUse(""AddAtFree""); return 0; }. void AddAfter(const TObject* , TObject* ); { MayNotUse(""AddAfter""); }. void AddBefore(const TObject* , TObject* ); { MayNotUse(""AddBefore""); }. Bool_t CanBypassStreamer() const; { return TestBit(kBypassStreamer); }. » Author: Rene Brun 11/02/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/cont:$Id: TClonesArray.h 33807 2010-06-10 07:23:32Z brun $ » Last generated: 2010-12-07 09:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TClonesArray.html:22008,Test,TestBit,22008,root/html528/TClonesArray.html,https://root.cern,https://root.cern/root/html528/TClonesArray.html,1,['Test'],['TestBit']
Testability," of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set an input list parameter. ;  ; void SetPerfTree (const char *pf=""perftree.root"", Bool_t withWrks=kFALSE);  Enable/Disable saving of the performance tree. ;  ; void SetPrintProgress (PrintProgress_t pp);  ; void SetProgressDialog (Bool_t on=kTRUE);  Enable/Disable the graphic progress dialog. ;  ; void SetQueryMode (EQueryMode mode);  Change query running mode to the one specified by 'mode'. ;  ; void SetRealTimeLog (Bool_t on=kTRUE);  Switch ON/OFF the real-time logging facility. ;  ; virtual void ShowCache (Bool_t all=kFALSE);  List contents of file cache. ;  ; virtual void ShowData ();  List contents of the data directory in the sandbox. ;  ; void ShowDataSet (const char *dataset="""", const char *opt=""filter:SsCc"");  display meta-info for given dataset usi ;  ; virtual void ShowDataSetCache (const char *dataset=0);  Display the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ShowDataSetQuota (Option_t *opt=0);  shows the quota and usage of all groups if opt contains ""U"" shows also distribution of usage on user-level ;  ; virtual void ShowDataSets (const char *uri="""", const char *optStr="""");  Shows datasets in locations that match the uri. ;  ; void ShowEnabledPackages (Bool_t all=kFALSE);  List which packages are enabled. ;  ; void ShowFeedback () const;  Show items in feedback list. ;  ; void ShowLog (const char *queryref);  Display on screen the content of the temporary log file f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:19208,log,logging,19208,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['log'],['logging']
Testability," of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set an input list parameter. ;  ; void SetPerfTree (const char *pf=""perftree.root"", Bool_t withWrks=kFALSE);  Enable/Disable saving of the performance tree. ;  ; void SetPrintProgress (PrintProgress_t pp);  ; void SetProgressDialog (Bool_t on=kTRUE);  Enable/Disable the graphic progress dialog. ;  ; void SetQueryMode (EQueryMode mode);  Change query running mode to the one specified by 'mode'. ;  ; void SetRealTimeLog (Bool_t on=kTRUE);  Switch ON/OFF the real-time logging facility. ;  ; void ShowDataSet (const char *dataset="""", const char *opt=""filter:SsCc"");  display meta-info for given dataset usi ;  ; void ShowDataSetQuota (Option_t *opt=0);  shows the quota and usage of all groups if opt contains ""U"" shows also distribution of usage on user-level ;  ; void ShowEnabledPackages (Bool_t all=kFALSE);  List which packages are enabled. ;  ; void ShowFeedback () const;  Show items in feedback list. ;  ; void ShowLog (const char *queryref);  Display on screen the content of the temporary log file for query in reference. ;  ; void ShowLog (Int_t qry=-1);  Display on screen the content of the temporary log file. ;  ; void ShowMissingFiles (TQueryResult *qr=0);  Show information about missing files during query described by 'qr' or the last query if qr is null (default). ;  ; void ShowPackages (Bool_t all=kFALSE, Bool_t redirlog=kFALSE);  List contents of package directory. ;  ; void ShowParameters (const char *wildcard=""PRO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:18225,log,logging,18225,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['log'],['logging']
Testability," of entries is incremented by 1 for all non empty cells.; 2075///; 2076/// if option ""d"" is specified, the profile is drawn in the current pad.; 2077///; 2078/// if option ""o"" original axis range of the target axes will be; 2079/// kept, but only bins inside the selected range will be filled.; 2080///; 2081/// The option can also be used to specify the projected profile error type.; 2082/// Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details; 2083///; 2084/// Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; 2085/// One must create a graphical cut (mouse or C++) and specify the name; 2086/// of the cut between [] in the option.; 2087/// For example, with a TCutG named ""cutg"", one can call:; 2088/// myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; 2089/// To invert the cut, it is enough to put a ""-"" in front of its name:; 2090/// myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; 2091/// It is possible to apply several cuts ("","" means logical AND):; 2092/// myhist->ProfileX("" "",firstybin,lastybin,""[cutg1,cutg2]"");; 2093///; 2094/// NOTE that if a TProfile named ""name"" exists in the current directory or pad with; 2095/// a compatible axis the profile is reset and filled again with the projected contents of the TH2.; 2096/// In the case of axis incompatibility an error is reported and a NULL pointer is returned.; 2097///; 2098/// NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile.; 2099///; 2100/// NOTE that the default under- / overflow behavior differs from what ProjectionX; 2101/// does! Profiles take the bin center into account, so here the under- and overflow; 2102/// bins are ignored by default.; 2103///; 2104/// NOTE that the return profile histogram is computed using the Y bin center values instead of; 2105/// the real Y values which are used to fill the 2d histogram. Therefore the obtained profile is just an approximation of the; 2106/// correct profile histogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:84481,log,logical,84481,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['log'],['logical']
Testability," of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square ; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixA2logical value of a2 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit). ; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit). ; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position errors; Double_t*fPositionInit[fNPeaks] array of initial values of peaks positions, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfSCalccalcu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:11119,log,logical,11119,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,4,['log'],['logical']
Testability," of events with respect to the control variable. TSPlot is optimal if the control variable is uncorrelated with the discriminating variables. A detail description of the formalism itself, called ; , is given in [1]. The method. The ; technique is developped in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species; of events. These species represent various signal components and; background components which all together account for the data sample.; The different terms of the log-Likelihood are:. : the total number of events in the data sample,. : the number of species of events populating the data sample,. : the number of events expected on the average for the species,. : the value of the PDFs of the discriminating variables for the species and for event , . : the set of control variables which, by definition, do not appear in the expression of the Likelihood function . The extended log-Likelihood reads:. (1). From this expression, after maximization of with respect to the parameters, a weight can be computed for every event and each species, in order to obtain later the true distribution ; of variable . If is one of the ; species present in the data sample, the weight for this species is defined by:. (2). where . is the covariance matrix resulting from the Likelihood maximization.; This matrix can be used directly from the fit, but this is numerically; less accurate than the direct computation:. (3). The distribution of the control variable  obtained by histogramming the weighted events reproduces, on average, the true distribution ; . The class TSPlot allows to reconstruct the true distribution ; of a control variable  for each of the ; species from the sole knowledge of the PDFs of the discriminating variables . The plots obtained thanks to the TSPlot class are called ; . Some properties and checks. Beside reproducing the true distribution, ; bear remarkable proper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:2596,log,log-Likelihood,2596,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,4,['log'],['log-Likelihood']
Testability," of file DataSet.h. ◆ ClearNClassEvents(). void TMVA::DataSet::ClearNClassEvents ; (; Int_t ; type). Definition at line 160 of file DataSet.cxx. ◆ CreateSampling(). void TMVA::DataSet::CreateSampling ; (; ); const. create an event sampling (random or importance sampling) ; Definition at line 508 of file DataSet.cxx. ◆ DeclFileName(). static const char * TMVA::DataSet::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file DataSet.h. ◆ DeleteAllResults(). void TMVA::DataSet::DeleteAllResults ; (; Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). Deletes all results currently in the dataset. ; Definition at line 343 of file DataSet.cxx. ◆ DeleteResults(). void TMVA::DataSet::DeleteResults ; (; const TString & ; resultsName, . Types::ETreeType ; type, . Types::EAnalysisType ; analysistype . ). delete the results stored for this particular Method instance. ; (here apparently called resultsName instead of MethodTitle Tree type (Training, testing etc..) Analysis Type (Classification, Multiclass, Regression etc..) ; Definition at line 316 of file DataSet.cxx. ◆ DestroyCollection(). void TMVA::DataSet::DestroyCollection ; (; Types::ETreeType ; type, . Bool_t ; deleteEvents . ). private . destroys the event collection (events + vector) ; Definition at line 189 of file DataSet.cxx. ◆ DivideTrainingSet(). void TMVA::DataSet::DivideTrainingSet ; (; UInt_t ; blockNum). divide training set ; Definition at line 371 of file DataSet.cxx. ◆ EventResult(). void TMVA::DataSet::EventResult ; (; Bool_t ; successful, . Long64_t ; evtNumber = -1 . ). increase the importance sampling weight of the event when not successful and decrease it when successful ; Definition at line 572 of file DataSet.cxx. ◆ GetCurrentType(). TMVA::Types::ETreeType TMVA::DataSet::GetCurrentType ; (; ); const. inline . Definition at line 194 of file DataSet.h. ◆ GetEvent() [1/3]. const TMVA::Event * TMVA::DataSet::GetEvent ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DataSet.html:18719,test,testing,18719,doc/master/classTMVA_1_1DataSet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DataSet.html,1,['test'],['testing']
Testability," of file IRootFinderMethod.h. ◆ SetFunction() [2/3]. bool ROOT::Math::BrentRootFinder::SetFunction ; (; const ROOT::Math::IGenFunction & ; , . double ; , . double ;  . ). overridevirtual . Sets the function for the rest of the algorithms. ; The parameters set the interval where the root has to be calculated. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 42 of file BrentRootFinder.cxx. ◆ SetFunction() [3/3]. virtual bool ROOT::Math::IRootFinderMethod::SetFunction ; (; const ROOT::Math::IGradFunction & ; , . double ;  . ). inlinevirtual . Set function to solve and the interval in where to look for the root. ; @param f Function to be minimized. @param xlow Lower bound of the search interval. @param xup Upper bound of the search interval. ; Reimplemented from ROOT::Math::IRootFinderMethod.; Definition at line 45 of file IRootFinderMethod.h. ◆ SetLogScan(). void ROOT::Math::BrentRootFinder::SetLogScan ; (; bool ; on). inline . Set a log grid scan (default is equidistant bins) will work only if xlow > 0. ; Definition at line 95 of file BrentRootFinder.h. ◆ SetNpx(). void ROOT::Math::BrentRootFinder::SetNpx ; (; int ; npx). inline . Set the number of point used to bracket root using a grid. ; Definition at line 89 of file BrentRootFinder.h. ◆ Solve(). bool ROOT::Math::BrentRootFinder::Solve ; (; int ; maxIter = 100, . double ; absTol = 1E-8, . double ; relTol = 1E-10 . ). overridevirtual . Returns the X value corresponding to the function value fy for (xmin<x<xmax). ; Method: First, the grid search is used to bracket the maximum with the step size = (xmax-xmin)/fNpx. This way, the step size can be controlled via the SetNpx() function. If the function is unimodal or if its extrema are far apart, setting the fNpx to a small value speeds the algorithm up many times. Then, Brent's method is applied on the bracketed interval.; @param maxIter maximum number of iterations. @param absTol desired absolute error in the minimum position. @param absTol desire",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html:7117,log,log,7117,doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1BrentRootFinder.html,1,['log'],['log']
Testability," of file RooProfileLL.cxx. ◆ setAlwaysStartFromMin(). void RooProfileLL::setAlwaysStartFromMin ; (; bool ; flag). inline . Definition at line 30 of file RooProfileLL.h. ◆ Streamer(). void RooProfileLL::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooProfileLL::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 70 of file RooProfileLL.h. ◆ validateAbsMin(). void RooProfileLL::validateAbsMin ; (; ); const. protected . Check that parameters and likelihood value for 'best fit' are still valid. ; If not, because the best fit has never been calculated, or because constant parameters have changed value or parameters have changed const/float status, the minimum is recalculated ; Definition at line 187 of file RooProfileLL.cxx. Member Data Documentation. ◆ _absMin. double RooProfileLL::_absMin = 0.0. mutableprotected . absolute minimum of -log(L) ; Definition at line 60 of file RooProfileLL.h. ◆ _absMinValid. bool RooProfileLL::_absMinValid = false. mutableprotected . flag if absmin is up-to-date ; Definition at line 59 of file RooProfileLL.h. ◆ _minimizer. std::unique_ptr<RooMinimizer> RooProfileLL::_minimizer = nullptr. mutableprotected . ! Internal minimizer instance ; Definition at line 57 of file RooProfileLL.h. ◆ _neval. Int_t RooProfileLL::_neval = 0. mutableprotected . Number evaluations used in last minimization. ; Definition at line 64 of file RooProfileLL.h. ◆ _nll. RooRealProxy RooProfileLL::_nll. protected . Input -log(L) function. ; Definition at line 52 of file RooProfileLL.h. ◆ _obs. RooSetProxy RooProfileLL::_obs. protected . Parameters of profile likelihood. ; Definition at line 53 of file RooProfileLL.h. ◆ _obsAbsMin. RooArgSet RooProfileLL::_obsAbsMin. mutableprotected . Observable values at absolute minimum. ; Definition at line 62 of file RooProfileLL.h. ◆ _par. RooSetProxy RooProfileLL::_par. protected . Marginal",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProfileLL.html:66552,log,log,66552,doc/master/classRooProfileLL.html,https://root.cern,https://root.cern/doc/master/classRooProfileLL.html,1,['log'],['log']
Testability," of file TCut.cxx. ◆ operator==() [2/2]. bool TCut::operator== ; (; const TCut & ; rhs); const. Comparison. ; Definition at line 90 of file TCut.cxx. ◆ operator>(). bool TCut::operator> ; (; const TCut & ; rhs). private . ◆ operator>=(). bool TCut::operator>= ; (; const TCut & ; rhs). private . ◆ Streamer(). void TCut::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TCut::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 79 of file TCut.h. Friends And Related Symbol Documentation. ◆ operator!. TCut operator! ; (; const TCut & ; rhs). friend . Logical negation. ; Definition at line 292 of file TCut.cxx. ◆ operator&& [1/3]. TCut operator&& ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Logical and. ; Definition at line 240 of file TCut.cxx. ◆ operator&& [2/3]. TCut operator&& ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Logical and. ; Definition at line 232 of file TCut.cxx. ◆ operator&& [3/3]. TCut operator&& ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Logical and. ; Definition at line 248 of file TCut.cxx. ◆ operator* [1/3]. TCut operator* ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Multiplication. ; Definition at line 216 of file TCut.cxx. ◆ operator* [2/3]. TCut operator* ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Multiplication. ; Definition at line 208 of file TCut.cxx. ◆ operator* [3/3]. TCut operator* ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Multiplication. ; Definition at line 224 of file TCut.cxx. ◆ operator+ [1/3]. TCut operator+ ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Addition. ; Definition at line 192 of file TCut.cxx. ◆ operator+ [2/3]. TCut operator+ ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Addition. ; Definition at line 184 of file TCut.cxx. ◆ operator+ [3/3]. TCut operator+ ; (; const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:17599,Log,Logical,17599,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['Log'],['Logical']
Testability," of file TGeoMatrix.cxx. ◆ GetRotationMatrix(). const Double_t * TGeoRotation::GetRotationMatrix ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Definition at line 239 of file TGeoMatrix.h. ◆ GetScale(). const Double_t * TGeoRotation::GetScale ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Definition at line 240 of file TGeoMatrix.h. ◆ GetTranslation(). const Double_t * TGeoRotation::GetTranslation ; (; ); const. inlineoverridevirtual . Implements TGeoMatrix.; Definition at line 238 of file TGeoMatrix.h. ◆ Inverse(). TGeoHMatrix TGeoRotation::Inverse ; (; ); const. overridevirtual . Return a temporary inverse of this. ; Implements TGeoMatrix.; Definition at line 986 of file TGeoMatrix.cxx. ◆ IsA(). TClass * TGeoRotation::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoMatrix.; Definition at line 242 of file TGeoMatrix.h. ◆ IsValid(). Bool_t TGeoRotation::IsValid ; (; ); const. Perform orthogonality test for rotation. ; Definition at line 1008 of file TGeoMatrix.cxx. ◆ LocalToMaster(). void TGeoRotation::LocalToMaster ; (; const Double_t * ; local, . Double_t * ; master . ); const. overridevirtual . convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ; Reimplemented from TGeoMatrix.; Definition at line 1067 of file TGeoMatrix.cxx. ◆ LocalToMasterBomb(). void TGeoRotation::LocalToMasterBomb ; (; const Double_t * ; local, . Double_t * ; master . ); const. inlineoverridevirtual . convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse ; Reimplemented from TGeoMatrix.; Definition at line 206 of file TGeoMatrix.h. ◆ LocalToMasterVect(). void TGeoRotation::LocalToMasterVect ; (; const Double_t * ; local, . Double_t * ; master . ); const. inlineoverridevirtual . convert a vector by multiplying its column vector (x, y, z, 1) to matrix inverse ; Reimplemented from TGeoMatrix.; Definition at line 202 of file TGeoMatrix.h. ◆ MakeClone(). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRotation.html:23611,test,test,23611,doc/master/classTGeoRotation.html,https://root.cern,https://root.cern/doc/master/classTGeoRotation.html,1,['test'],['test']
Testability," of file TMath.h. ◆ LocMin() [2/2]. template<typename T > . Long64_t TMath::LocMin ; (; Long64_t ; n, . const T * ; a . ). Returns index of array with the minimum element. ; If more than one element is minimum returns first found.; Implement here since this one is found to be faster (mainly on 64 bit machines) than stl generic implementation. When performing the comparison, the STL implementation needs to de-reference both the array iterator and the iterator pointing to the resulting minimum location ; Definition at line 982 of file TMath.h. ◆ Log(). Double_t TMath::Log ; (; Double_t ; x). inline . Returns the natural logarithm of x. ; Definition at line 756 of file TMath.h. ◆ Log10(). Double_t TMath::Log10 ; (; Double_t ; x). inline . Returns the common (base-10) logarithm of x. ; Definition at line 762 of file TMath.h. ◆ Log2(). Double_t TMath::Log2 ; (; Double_t ; x). Returns the binary (base-2) logarithm of x. ; Definition at line 107 of file TMath.cxx. ◆ LogE(). constexpr Double_t TMath::LogE ; (; ). constexpr . Base-10 log of e (to convert ln to log) ; Definition at line 107 of file TMath.h. ◆ LogNormal(). Double_t TMath::LogNormal ; (; Double_t ; x, . Double_t ; sigma, . Double_t ; theta = 0, . Double_t ; m = 1 . ). Computes the density of LogNormal distribution at point x. ; Variable X has lognormal distribution if Y=Ln(X) has normal distribution; Parameters. [in]xis the evaluation point ; [in]sigmais the shape parameter ; [in]thetais the location parameter ; [in]mis the scale parameter. The formula was taken from ""Engineering Statistics Handbook"" on site http://www.itl.nist.gov/div898/handbook/eda/section3/eda3669.htm Implementation using ROOT::Math::lognormal_pdf. Definition at line 2437 of file TMath.cxx. ◆ Max() [1/10]. Double_t TMath::Max ; (; Double_t ; a, . Double_t ; b . ). inline . Returns the largest of a and b. ; If both are equivalent, a is returned. aand b are Double_t. ; Definition at line 295 of file TMathBase.h. ◆ Max() [2/10]. Float_t TMath::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:60628,Log,LogE,60628,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Log'],['LogE']
Testability," of file TPad.h. ◆ GetTickx(). Int_t TPad::GetTickx ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 238 of file TPad.h. ◆ GetTicky(). Int_t TPad::GetTicky ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 239 of file TPad.h. ◆ GetTitle(). const char * TPad::GetTitle ; (; ); const. inlineoverridevirtual . Returns title of object. ; This default method returns the class title (i.e. description). Classes that give objects a title should override this method. ; Implements TVirtualPad.; Definition at line 261 of file TPad.h. ◆ GetUxmax(). Double_t TPad::GetUxmax ; (; ); const. inlineoverridevirtual . Returns the maximum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 232 of file TPad.h. ◆ GetUxmin(). Double_t TPad::GetUxmin ; (; ); const. inlineoverridevirtual . Returns the minimum x-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 228 of file TPad.h. ◆ GetUymax(). Double_t TPad::GetUymax ; (; ); const. inlineoverridevirtual . Returns the maximum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 234 of file TPad.h. ◆ GetUymin(). Double_t TPad::GetUymin ; (; ); const. inlineoverridevirtual . Returns the minimum y-coordinate value visible on the pad. If log axis the returned value is in decades. ; Implements TVirtualPad.; Definition at line 230 of file TPad.h. ◆ GetView(). TView * TPad::GetView ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 254 of file TPad.h. ◆ GetView3D(). TObject * TPad::GetView3D ; (; ); const. inlineoverridevirtual . Implements TVirtualPad.; Definition at line 255 of file TPad.h. ◆ GetViewer3D(). TVirtualViewer3D * TPad::GetViewer3D ; (; Option_t * ; type = """"). overridevirtual . Create/obtain handle to 3D vie",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:83253,log,log,83253,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['log'],['log']
Testability," of file TProof.cxx. ◆ SetPerfTree(). void TProof::SetPerfTree ; (; const char * ; pf = ""perftree.root"", . Bool_t ; withWrks = kFALSE . ). Enable/Disable saving of the performance tree. ; Definition at line 12624 of file TProof.cxx. ◆ SetPlayer(). void TProof::SetPlayer ; (; TVirtualProofPlayer * ; player). protected . Set a new PROOF player. ; Definition at line 10199 of file TProof.cxx. ◆ SetPrintProgress(). void TProof::SetPrintProgress ; (; PrintProgress_t ; pp). inline . Definition at line 1046 of file TProof.h. ◆ SetProgressDialog(). void TProof::SetProgressDialog ; (; Bool_t ; on = kTRUE). Enable/Disable the graphic progress dialog. ; By default the dialog is enabled ; Definition at line 12509 of file TProof.cxx. ◆ SetQueryMode(). void TProof::SetQueryMode ; (; EQueryMode ; mode). Change query running mode to the one specified by 'mode'. ; Definition at line 6107 of file TProof.cxx. ◆ SetRealTimeLog(). void TProof::SetRealTimeLog ; (; Bool_t ; on = kTRUE). Switch ON/OFF the real-time logging facility. ; When this option is ON, log messages from processing are sent back as they come, instead of being sent back at the end in one go. This may help debugging or monitoring in some cases, but, depending on the amount of log, it may have significant consequencies on the load over the network, so it must be used with care. ; Definition at line 7096 of file TProof.cxx. ◆ SetRunStatus(). void TProof::SetRunStatus ; (; ERunStatus ; rst). inlineprivate . Definition at line 672 of file TProof.h. ◆ SetupWorkersEnv(). void TProof::SetupWorkersEnv ; (; TList * ; wrks, . Bool_t ; increasingpool = kFALSE . ). protected . Set up packages, loaded macros, include and lib paths ... ; Definition at line 1528 of file TProof.cxx. ◆ ShowCache(). void TProof::ShowCache ; (; Bool_t ; all = kFALSE). virtual . List contents of file cache. ; If all is true show all caches also on slaves. If everything is ok all caches are to be the same. ; Reimplemented in TProofLite.; Definition at line 7",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:147090,log,logging,147090,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['log'],['logging']
Testability," of fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate x positions of 1D ridges (not fit). However, they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 1D ridges (not fit). However, they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 2D peaks, output parameters; double amp_err[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 2D peaks; bool fix_amp[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate amplitudes of 2D peaks (not fit). However, they are present in the estimated functional; double amp_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D ridges amplitudes, input parameters; double amp_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 1D ridges, output parameters; double amp_err_x1[MAX_NUMBER_OF_PEAKS2]; // amplitude errors of 1D ridges; bool fix_amp_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate amplitudes of 1D ridges (not fit). However, they are present in the estimated functional; double amp_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of 1D ridges amplitudes, input parameters; double amp_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 1D ridges, output parameters; double amp_err_y1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:49689,log,logical,49689,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability," of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named arguments are supported. ConditionalObservables(const RooArgSet& set) -- Do not normalize PDF over listed observables; Extended(Bool_t flag) -- Add extended likelihood term, off by default; Range(const char* name) -- Fit only data inside range with given name; Range(Double_t lo, Double_t hi) -- Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; Multiple comma separated range names can be specified.; SumCoefRange(const char* name) -- Set the range in which to interpret the coefficients of RooAddPdf components; NumCPU(int num) -- Parallelize NLL calculation on num CPUs; Optimize(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:47579,log,log,47579,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,2,['log'],['log']
Testability," of histo with negative bins.; 5254 ; 5255 if (z < 0) {; 5256 if (Hoption.Logz) continue;; 5257 z = -z;; 5258 kZNeg = kTRUE;; 5259 }; 5260 if (Hoption.Logz) {; 5261 if (z != 0) z = TMath::Log10(z);; 5262 else z = zmin;; 5263 }; 5264 ; 5265 if (dz == 0) continue;; 5266 zratio = TMath::Sqrt((z-zmin)/dz);; 5267 if (zratio == 0) continue;; 5268 ; 5269 xup = xcent*zratio + xk + xcent;; 5270 xlow = 2*(xk + xcent) - xup;; 5271 if (xup-xlow < dxmin) xup = xlow+dxmin;; 5272 if (Hoption.Logx) {; 5273 if (xup > 0) xup = TMath::Log10(xup);; 5274 else continue;; 5275 if (xlow > 0) xlow = TMath::Log10(xlow);; 5276 else continue;; 5277 }; 5278 ; 5279 yup = ycent*zratio + yk + ycent;; 5280 ylow = 2*(yk + ycent) - yup;; 5281 if (yup-ylow < dymin) yup = ylow+dymin;; 5282 if (Hoption.Logy) {; 5283 if (yup > 0) yup = TMath::Log10(yup);; 5284 else continue;; 5285 if (ylow > 0) ylow = TMath::Log10(ylow);; 5286 else continue;; 5287 }; 5288 ; 5289 xlow = TMath::Max(xlow, gPad->GetUxmin());; 5290 ylow = TMath::Max(ylow, gPad->GetUymin());; 5291 xup = TMath::Min(xup , gPad->GetUxmax());; 5292 yup = TMath::Min(yup , gPad->GetUymax());; 5293 ; 5294 if (xlow >= xup) continue;; 5295 if (ylow >= yup) continue;; 5296 ; 5297 if (Hoption.Box == 1) {; 5298 fH->SetFillColor(color);; 5299 fH->TAttFill::Modify();; 5300 gPad->PaintBox(xlow, ylow, xup, yup);; 5301 if (kZNeg) {; 5302 gPad->PaintLine(xlow, ylow, xup, yup);; 5303 gPad->PaintLine(xlow, yup, xup, ylow);; 5304 }; 5305 } else if (Hoption.Box == 11) {; 5306 // Draw the center of the box; 5307 fH->SetFillColor(color);; 5308 fH->TAttFill::Modify();; 5309 gPad->PaintBox(xlow, ylow, xup, yup);; 5310 ; 5311 // Draw top&left part of the box; 5312 Double_t x[7], y[7];; 5313 Double_t bwidth = 0.1;; 5314 x[0] = xlow; y[0] = ylow;; 5315 x[1] = xlow + bwidth*(xup-xlow); y[1] = ylow + bwidth*(yup-ylow);; 5316 x[2] = x[1]; y[2] = yup - bwidth*(yup-ylow);; 5317 x[3] = xup - bwidth*(xup-xlow); y[3] = y[2];; 5318 x[4] = xup; y[4] = yup;; 5319 x[5] = xlow; y[5] =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:197229,Log,Logy,197229,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logy']
Testability," of homogeneity is valid, then the maximum likelihood estimator of pi, i=1,...,r, is ; \[; \hat{p}_{i}= \frac{n_{i}+m_{i}}{N+M}; \]. and then ; \[; X^{2} = \sum_{i=1}^{r}\frac{(n_{i}-N\hat{p}_{i})^{2}}{N\hat{p}_{i}} + \sum_{i=1}^{r}\frac{(m_{i}-M\hat{p}_{i})^{2}}{M\hat{p}_{i}} =\frac{1}{MN} \sum_{i=1}^{r}\frac{(Mn_{i}-Nm_{i})^{2}}{n_{i}+m_{i}}; \]. has approximately a \( \chi^{2}_{(r-1)} \) distribution [3]. The comparison procedure can include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Most convenient for analysis are the adjusted (normalized) residuals [4] ; \[; r_{i} = \frac{n_{i}-N\hat{p}_{i}}{\sqrt{N\hat{p}_{i}}\sqrt{(1-N/(N+M))(1-(n_{i}+m_{i})/(N+M))}}; \]. If hypotheses of homogeneity are valid then residuals ri are approximately independent and identically distributed random variables having N(0,1) distribution. The application of the \( \chi^{2} \) test has restrictions related to the value of the expected frequencies Npi, Mpi, i=1,...,r. A conservative rule formulated in [5] is that all the expectations must be 1 or greater for both histograms. In practical cases when expected frequencies are not known the estimated expected frequencies \( M\hat{p}_{i}, N\hat{p}_{i}, i=1,...,r \) can be used.; Unweighted and weighted histograms comparison:; A simple modification of the ideas described above can be used for the comparison of the usual (unweighted) and weighted histograms. Let us denote the number of events in the ith bin in the unweighted histogram as ni and the common weight of events in the ith bin of the weighted histogram as wi. The total number of events in the unweighted histogram is equal to ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and the total weight of events in the weighted histogram is equal to ; \[; W = \sum_{i=1}^{r} w_{i}; \]. Let us formulate the hypothesis of identity of an unweighted histogram to a weighted histogram so that there exist r c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:90521,test,test,90521,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetMaximumX and TF1::GetX. Double_t GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the minimum value of the function; on the (xmin, xmax) interval; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; of iteration of the Brent algorithm; If the flag logx is set the grid search is done in log step size; This is done automatically if the log scale is set in the current Pad. NOTE: see also TF1::GetX. Double_t GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; Returns the X value corresponding to the function value fy for (xmin<x<xmax).; in other words it can find the roots of the function when fy=0 and successive calls; by changing the next call to [xmin+eps,xmax] where xmin is the previous root.; Method:; First, the grid search is used to bracket the maximum; with the step size = (xmax-xmin)/fNpx. This way, the step size; can be controlled via the SetNpx() function. If the function is; unimodal or if its extrema are far apart, setting the fNpx to; a small value speeds the algorithm up many times.; Then, Brent's method is applied on the bracketed interval; epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TF1.html:42641,log,logx,42641,root/html528/TF1.html,https://root.cern,https://root.cern/root/html528/TF1.html,12,['log'],"['log', 'logx']"
Testability," of objects in the TObjectTable. ;  . Protected Member Functions; virtual void DeclareOptions ()=0;  ; MsgLogger & Log () const;  message logger ;  ;  Protected Member Functions inherited from TMVA::Configurable; void EnableLooseOptions (Bool_t b=kTRUE);  ; const TString & GetReferenceFile () const;  ; Bool_t LooseOptionCheckingEnabled () const;  ; void ResetSetFlag ();  resets the IsSet flag for all declare options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TString fClassName;  ; bool * fExitFromTraining = nullptr;  ; IFitterTarget & fFitterTarget;  ; UInt_t * fIPyCurrentIter = nullptr;  ; UInt_t * fIPyMaxIter = nullptr;  ; MsgLogger * fLogger;  ; Int_t fNpars;  ; const std::vector< TMVA::Interval * > fRanges;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1FitterBase.html:13796,log,logger,13796,doc/master/classTMVA_1_1FitterBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1FitterBase.html,1,['log'],['logger']
Testability," of prob; ""X"" Run the pseudo experiments post-processor with the following procedure: make pseudoexperiments based on random values from the parent distribution, compare the KS distance of the pseudoexperiment to the parent distribution, and count all the KS values above the value obtained from the original data to Monte Carlo distribution. The number of pseudo-experiments nEXPT is by default 1000, and it can be changed by specifying the option as ""X=number"", for example ""X=10000"" for 10000 toys. The function returns the probability. (thanks to Ben Kilminster to submit this procedure). Note that this option ""X"" is much slower. The returned function value is the probability of test (much less than one means NOT compatible); Code adapted by Rene Brun from original HBOOK routine HDIFF; NOTE1 A good description of the Kolmogorov test can be seen at: http://www.itl.nist.gov/div898/handbook/eda/section3/eda35g.htm; NOTE2 see also alternative function TH1::Chi2Test The Kolmogorov test is assumed to give better results than Chi2Test in case of histograms with low statistics.; NOTE3 (Jan Conrad, Fred James) ""The returned value PROB is calculated such that it will be; uniformly distributed between zero and one for compatible histograms,; provided the data are not binned (or the number of bins is very large; compared with the number of events). Users who have access to unbinned; data and wish exact confidence levels should therefore not put their data; into histograms, but should call directly TMath::KolmogorovTest. On; the other hand, since TH1 is a convenient way of collecting data and; saving space, this function has been provided. However, the values of; PROB for binned data will be shifted slightly higher than expected,; depending on the effects of the binning. For example, when comparing two; uniform distributions of 500 events in 100 bins, the values of PROB,; instead of being exactly uniformly distributed between zero and one, have; a mean value of about 0.56. We can ap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:184782,test,test,184782,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability, of processors to use in parallel calculation mode; Int_tRooAbsTestStatistic::_nEventsTotal number of events in test statistic calculation; Int_tRooAbsTestStatistic::_nGofNumber of sub-contexts ; static Int_tRooPrintable::_nameLength; TNamed*RooAbsArg::_namePtr! Do not persist. Pointer to global instance of string that matches object named; RooArgSet*_normSetPointer to set with observables used for normalization; Int_tRooAbsTestStatistic::_numSetsTotal number of partitions in parallel calculation mode; Double_tRooAbsTestStatistic::_offset! Offset; Double_tRooAbsTestStatistic::_offsetCarry! avoids loss of precision; RooAbsArg::OperModeRooAbsArg::_operModeDirty state propagation mode; Bool_t_optimized!; RooAbsData*_origDataOriginal data ; RooAbsReal*_origFuncOriginal function ; Bool_t_ownDataDo we own the dataset; RooArgSet*RooAbsArg::_ownedComponents! Set of owned component; RooSetProxyRooAbsTestStatistic::_paramSetParameters of the test statistic (=parameters of the input function); Int_tRooAbsReal::_plotBinsNumber of plot bins; Double_tRooAbsReal::_plotMaxMaximum of plot range; Double_tRooAbsReal::_plotMinMinimum of plot range; Bool_tRooAbsArg::_prohibitServerRedirect! Prohibit server redirects -- Debugging tool; RooArgSet*_projDepsSet of projected observable; const RooArgSet*RooAbsTestStatistic::_projDepsPointer to set with projected observables; RooRefArrayRooAbsArg::_proxyListlist of proxies; stringRooAbsTestStatistic::_rangeNameName of range in which to calculate test statistic; Char_tRooAbsReal::_sbyteValue! Transient cache for signed byte values from tree branches ; TString_sealNoticeUser-defined notice shown when reading a sealed likelihood ; Bool_t_sealedIs test statistic sealed -- i.e. no access to data ; Bool_tRooAbsReal::_selectComp! Component selection flag for RooAbsPdf::plotCompOn; RooRefCountListRooAbsArg::_serverListlist of server objects; Int_tRooAbsTestStatistic::_setNumPartition number of this instance in parallel calculation mode; Bool_tRooAbsAr,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:39210,test,test,39210,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,3,['test'],['test']
Testability," of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::minimizerTypeMinimizerType minimizerType() constwhich minimizer shall be used (e.g. SGD)Definition NeuralNet.h:774; TMVA::DNN::Settings::m_dropOutstd::vector< double > m_dropOutDefinition NeuralNet.h:850; TMVA::DNN::Settings::m_minProgressdouble m_minProgresscurrent limits for the progress barDefinition NeuralNet.h:833; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::setProgressLimitsvirtual void setProgressLimits(double minProgress=0, double maxProgress=100)Definition NeuralNet.h:790; TMVA::DNN::Settings::m_maxProgressdouble m_maxProgresscurrent limits for the progress barDefinition NeuralNet.h:834; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::count_dEsize_t count_dEDefinition NeuralNet.h:843; TMVA::DNN::Settings::drawSamplevirtual void drawSample(const std::vector< double > &, const std::vector< double > &, const std::vector< double > &, double)callback for monitoring and loggingDefinition NeuralNet.h:807; TMVA::DNN::Settings::learningRatedouble learningRate() constget the learning rateDefinition NeuralNet.h:771; TMVA::DNN::Settings::m_dropRepetitionsdouble m_dropRepetitionsDefinition NeuralNet.h:849; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::~Settingsvirtual ~Settings()d'torDefinition NeuralNet.cxx:261; TMVA::DNN::Settings::m_convergenceCountsize_t m_convergenceCountDefinition NeuralNet.h:857; TMVA::DNN::Settings::m_regulariza",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:74247,log,loggingDefinition,74247,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['log'],['loggingDefinition']
Testability," of success and -1 in case of error. ; Reimplemented in TProofLite.; Definition at line 8628 of file TProof.cxx. ◆ LoadPackage(). Int_t TProof::LoadPackage ; (; const char * ; package, . Bool_t ; notOnClient = kFALSE, . TList * ; loadopts = 0, . TList * ; workers = 0 . ). private . Load specified package. ; Executes the PROOF-INF/SETUP.C script on all active nodes. If notOnClient = true, don't load package on the client. The default is to load the package also on the client. The argument 'loadopts' specify a list of objects to be passed to the SETUP. The objects in the list must be streamable; the SETUP macro will be executed like this: SETUP.C(loadopts). Returns 0 in case of success and -1 in case of error. ; Definition at line 8069 of file TProof.cxx. ◆ LogMessage(). void TProof::LogMessage ; (; const char * ; msg, . Bool_t ; all . ). Log a message into the appropriate window by emitting a signal. ; Definition at line 6414 of file TProof.cxx. ◆ LogViewer(). void TProof::LogViewer ; (; const char * ; url = 0, . Int_t ; sessionidx = 0 . ). static . Start the log viewer window usign the plugin manager. ; Definition at line 12470 of file TProof.cxx. ◆ MakePlayer(). TVirtualProofPlayer * TProof::MakePlayer ; (; const char * ; player = 0, . TSocket * ; s = 0 . ). protectedvirtual . Construct a TProofPlayer object. ; The player string specifies which player should be created: remote, slave, sm (supermaster) or base. Default is remote. Socket is needed in case a slave player is created. ; Reimplemented in TProofSuperMaster.; Definition at line 10211 of file TProof.cxx. ◆ MarkBad() [1/2]. void TProof::MarkBad ; (; TSlave * ; wrk, . const char * ; reason = 0 . ). private . Add a bad slave server to the bad slave list and remove it from the active list and from the two monitor objects. ; Assume that the work done by this worker was lost and ask packerizer to reassign it. ; Definition at line 4521 of file TProof.cxx. ◆ MarkBad() [2/2]. void TProof::MarkBad ; (; TSocket * ; s,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:115743,Log,LogViewer,115743,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Log'],['LogViewer']
Testability," of the Landau; 388 distribution (upper tail).; 389 ; 390 \f[ D(x) = \int_{x}^{+\infty} p(x) dx \f]; 391 ; 392 where p(x) is the Landau probability density function.; 393 It is implemented simply as 1. - #landau_cdf; 394 ; 395 @param x The argument \f$x\f$; 396 @param xi The width parameter \f$\xi\f$; 397 @param x0 The location parameter \f$x_0\f$; 398 ; 399 @ingroup ProbFunc; 400 ; 401 */; 402 inline double landau_cdf_c(double x, double xi = 1, double x0 = 0) {; 403 return 1. - landau_cdf(x,xi,x0);; 404 }; 405 ; 406 /**; 407 ; 408 Complement of the cumulative distribution function of the lognormal distribution; 409 (upper tail).; 410 ; 411 \f[ D(x) = \int_{x}^{+\infty} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]; 412 ; 413 For detailed description see; 414 <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; 415 Mathworld</A>.; 416 ; 417 @ingroup ProbFunc; 418 ; 419 */; 420 ; 421 double lognormal_cdf_c(double x, double m, double s, double x0 = 0);; 422 ; 423 ; 424 ; 425 ; 426 /**; 427 ; 428 Cumulative distribution function of the lognormal distribution; 429 (lower tail).; 430 ; 431 \f[ D(x) = \int_{-\infty}^{x} {1 \over x' \sqrt{2 \pi s^2} } e^{-(\ln{x'} - m)^2/2 s^2} dx' \f]; 432 ; 433 For detailed description see; 434 <A HREF=""http://mathworld.wolfram.com/LogNormalDistribution.html"">; 435 Mathworld</A>.; 436 ; 437 @ingroup ProbFunc; 438 ; 439 */; 440 ; 441 double lognormal_cdf(double x, double m, double s, double x0 = 0);; 442 ; 443 ; 444 ; 445 ; 446 /**; 447 ; 448 Complement of the cumulative distribution function of the normal (Gaussian); 449 distribution (upper tail).; 450 ; 451 \f[ D(x) = \int_{x}^{+\infty} {1 \over \sqrt{2 \pi \sigma^2}} e^{-x'^2 / 2\sigma^2} dx' \f]; 452 ; 453 For detailed description see; 454 <A HREF=""http://mathworld.wolfram.com/NormalDistribution.html"">; 455 Mathworld</A>.; 456 ; 457 @ingroup ProbFunc; 458 ; 459 */; 460 ; 461 double normal_cdf_c(double x, double sigma = 1, double x0 = 0);; 462 /// Alte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html:12973,log,lognormal,12973,doc/master/ProbFuncMathCore_8h_source.html,https://root.cern,https://root.cern/doc/master/ProbFuncMathCore_8h_source.html,1,['log'],['lognormal']
Testability," of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macro provides a simple example on how to use the trained regression MVAs within an analysis module ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:6500,test,testing,6500,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,2,['test'],['testing']
Testability," of the class) . Definition at line 1149 of file TRolke.cxx. ◆ EvalLikeMod4(). Double_t TRolke::EvalLikeMod4 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; y, . Double_t ; tau, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 4: Poiss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1217 of file TRolke.cxx. ◆ EvalLikeMod5(). Double_t TRolke::EvalLikeMod5 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; bm, . Double_t ; sdb, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 5: Gauss background/Efficiency known. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1263 of file TRolke.cxx. ◆ EvalLikeMod6(). Double_t TRolke::EvalLikeMod6 ; (; Double_t ; mu, . Int_t ; x, . Int_t ; z, . Double_t ; b, . Int_t ; m, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 6: Background known/Efficiency binomial. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimate is returned.; what = 3: Profile Likelihood of Test hypothesis is returned otherwise parameters as described in the beginning of the class) . Definition at line 1307 of file TRolke.cxx. ◆ EvalLikeMod7(). Double_t TRolke::EvalLikeMod7 ; (; Double_t ; mu, . Int_t ; x, . Double_t ; em, . Double_t ; sde, . Double_t ; b, . Int_t ; what . ). private . Calculates the Profile Likelihood for MODEL 7: background known/Efficiency Gauss. . what = 1: Maximum likelihood estimate is returned; what = 2: Profile Likelihood of Maximum Likelihood estimat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRolke.html:28165,Test,Test,28165,doc/master/classTRolke.html,https://root.cern,https://root.cern/doc/master/classTRolke.html,1,['Test'],['Test']
Testability," of the same code:; 893 gCling->Declare(fClingInput);; 894 fClingInitialized = PrepareEvalMethod();; 895 if (!fClingInitialized) Error(""InputFormulaIntoCling"",""Error compiling formula expression in Cling"");; 896 }; 897}; 898 ; 899////////////////////////////////////////////////////////////////////////////////; 900/// Fill structures with default variables, constants and function shortcuts; 901 ; 902void TFormula::FillDefaults(); 903{; 904 const TString defvars[] = { ""x"",""y"",""z"",""t""};; 905 const pair<TString, Double_t> defconsts[] = {{""pi"", TMath::Pi()},; 906 {""sqrt2"", TMath::Sqrt2()},; 907 {""infinity"", TMath::Infinity()},; 908 {""e"", TMath::E()},; 909 {""ln10"", TMath::Ln10()},; 910 {""loge"", TMath::LogE()},; 911 {""c"", TMath::C()},; 912 {""g"", TMath::G()},; 913 {""h"", TMath::H()},; 914 {""k"", TMath::K()},; 915 {""sigma"", TMath::Sigma()},; 916 {""r"", TMath::R()},; 917 {""eg"", TMath::EulerGamma()},; 918 {""true"", 1},; 919 {""false"", 0}};; 920 // const pair<TString,Double_t> defconsts[] = { {""pi"",TMath::Pi()}, {""sqrt2"",TMath::Sqrt2()},; 921 // {""infinity"",TMath::Infinity()}, {""ln10"",TMath::Ln10()},; 922 // {""loge"",TMath::LogE()}, {""true"",1},{""false"",0} };; 923 const pair<TString,TString> funShortcuts[] =; 924 { {""sin"",""TMath::Sin"" },; 925 {""cos"",""TMath::Cos"" }, {""exp"",""TMath::Exp""}, {""log"",""TMath::Log""}, {""log10"",""TMath::Log10""},; 926 {""tan"",""TMath::Tan""}, {""sinh"",""TMath::SinH""}, {""cosh"",""TMath::CosH""},; 927 {""tanh"",""TMath::TanH""}, {""asin"",""TMath::ASin""}, {""acos"",""TMath::ACos""},; 928 {""atan"",""TMath::ATan""}, {""atan2"",""TMath::ATan2""}, {""sqrt"",""TMath::Sqrt""},; 929 {""ceil"",""TMath::Ceil""}, {""floor"",""TMath::Floor""}, {""pow"",""TMath::Power""},; 930 {""binomial"",""TMath::Binomial""},{""abs"",""TMath::Abs""},; 931 {""min"",""TMath::Min""},{""max"",""TMath::Max""},{""sign"",""TMath::Sign"" },; 932 {""sq"",""TMath::Sq""}; 933 };; 934 ; 935 std::vector<TString> defvars2(10);; 936 for (int i = 0; i < 9; ++i); 937 defvars2[i] = TString::Format(""x[%d]"",i);; 938 ; 939 for (const auto &var : defvars) {; 940 int pos = fVars.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:33343,log,loge,33343,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,4,"['Log', 'log']","['Log', 'LogE', 'log', 'loge']"
Testability," of the vector of parameters std::vector\(<\)double\(>\) in the argument of FCNBase::operator() are of course defined by the user, who uses the values of those parameters to calculate his function value. The order and the position of these parameters is strictly the one specified by the user when supplying the starting values for minimization.; The starting values must be specified by the user, either via an std::vector\(<\)double\(>\) or the MnUserParameters (see [api:parameters]) supplied as input to the M minimizers such as VariableMetricMinimizer or MnMigrad (see [api:migrad]). Later values are determined by M as it searches for the minimum or performs whatever analysis is requested by the user.; 4.1.2 FCNBase::up(); [howto:errordef] Returns the value of \(\mbox{up}\) (default value \(= 1.\)), defining parameter errors. M defines parameter errors as the change in parameter value required to change the function value by \(\mbox{up}\). Normally, for chisquared fits \(\mbox{up = 1}\), and for negative log likelihood, \(\mbox{up = 0.5}\).; 4.1.3 \(\mbox{FCN}\) function with gradient; By default first derivatives are calculated numerically by M . In case the user wants to supply his own gradient calculator (e.g. analytical derivatives), he needs to implement the FCNGradientBase interface. The size of the output vector is the same as of the input one. The same is true for the position of the elements (first derivative of the function with respect to the \(n_\mathrm{th}\) variable has index \(n\) in the output vector).; 4.2 M parameters; Interaction with the parameters of the function are essential both for M and the user. Different interfaces are provided, depending on the level of interaction.; 4.2.1 Minimal required interface; Starting values of parameters and uncertainties can be provided to M by the user via std::vector\(<\)double\(>\) vector containers. Any interaction with the parameters before minimization (fix, release, limits, etc.) is not possible then.; Opt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/guides/minuit2/Minuit2.html:35001,log,log,35001,root/html534/guides/minuit2/Minuit2.html,https://root.cern,https://root.cern/root/html534/guides/minuit2/Minuit2.html,1,['log'],['log']
Testability," of variable 1 for the MC method (taking precedence over the; globale setting. The same values as for the global option are available. Variables 1..10 can be; set this way. CutRangeMin/Max <float> user-defined ranges in which cuts are varied. void ProcessOptions(); process user options; sanity check, do not allow the input variables to be normalised, because this; only creates problems when interpreting the cuts. Double_t GetMvaValue(Double_t* err = 0, Double_t* errUpper = 0); cut evaluation: returns 1.0 if event passed, 0.0 otherwise. void PrintCuts(Double_t effS) const; print cuts. Double_t GetCuts(Double_t effS, Double_t* cutMin, Double_t* cutMax) const; retrieve cut values for given signal efficiency; assume vector of correct size !!. Double_t GetCuts(Double_t effS, vector<Double_t>& cutMin, vector<Double_t>& cutMax) const; retrieve cut values for given signal efficiency. void Train( void ); training method: here the cuts are optimised for the training sample. void TestClassification(); nothing to test. Double_t EstimatorFunction(Int_t ievt1, Int_t ievt2); for full event scan. Double_t EstimatorFunction(vector<Double_t>& ); returns estimator for ""cut fitness"" used by GA. Double_t ComputeEstimator(vector<Double_t>& ); returns estimator for ""cut fitness"" used by GA; there are two requirements:; 1) the signal efficiency must be equal to the required one in the; efficiency scan; 2) the background efficiency must be as small as possible; the requirement 1) has priority over 2). void MatchParsToCuts( const std::vector<Double_t> & pars, Double_t* cutMin, Double_t* cutMax ); translates parameters into cuts. void MatchCutsToPars(vector<Double_t>& , Double_t** , Double_t** , Int_t ibin); translate the cuts into parameters (obsolete function). void MatchCutsToPars(vector<Double_t>& , Double_t* , Double_t* ); translates cuts into parameters. void GetEffsfromPDFs(Double_t* cutMin, Double_t* cutMax, Double_t& effS, Double_t& effB); compute signal and background efficiencies f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:22362,Test,TestClassification,22362,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,12,"['Test', 'test']","['TestClassification', 'test']"
Testability," of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* node, UInt_t tmva_Version_Code = 262656). void AddAttributesToNode(void* node) const; add attribute to xml. void SetFisherCoeff(Int_t ivar, Double_t coeff); set fisher coefficients. void AddContentToNode(stringstream& s) const; adding attributes to tree node (well, was used in BinarySearchTree,; and somehow I guess someone programmed it such that we need this in; this tree too, although we don't..). void ReadContent(stringstream& s); reading attributes from tree node (well, was used in BinarySearchTree,; and somehow I guess someone programmed it such that we need this in; this tree too, although we don't..). TMVA::MsgLogger& Log(). Node* CreateNode() const; { return new DecisionTreeNode(); }. void SetNFisherCoeff(Int_t nvars); {fFisherCoeff.resize(nvars);}. UInt_t GetNFisherCoeff() const; set fisher coefficients. { return fFisherCoeff.size();}. Double_t GetFisherCoeff(Int_t ivar) const; get fisher coefficients. {return fFisherCoeff.at(ivar);}. void SetSelector(Short_t i); set index of variable used for discrimination at this node. { fSelector = i; }. Short_t GetSelector() const; return index of variable used for discrimination at this node. { return fSelector; }. void SetCutValue(Float_t c); set the cut value applied at this node. { fCutValue = c; }. Float_t GetCutValue( void ); return the cut value applied at this node. { return fCutValue; }. void SetCutType(Bool_t t); set true: if event variable > cutValue ==> signal , false otherwise. { fCutType = t; }. Bool_t GetCutType( void ); return kTRUE: Cuts select signal, kFALSE: Cuts select bkg. { return fCutType; }. void SetNodeType(Int_t t); set node ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__DecisionTreeNode.html:9177,Log,Log,9177,root/html602/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html602/TMVA__DecisionTreeNode.html,1,['Log'],['Log']
Testability," of variable ivar from the training sample; that pass/end up in this node. void SetSampleMin(UInt_t ivar, Float_t xmin); set the minimum of variable ivar from the training sample; that pass/end up in this node. void SetSampleMax(UInt_t ivar, Float_t xmax); set the maximum of variable ivar from the training sample; that pass/end up in this node. void ReadAttributes(void* node, UInt_t tmva_Version_Code = 262657). void AddAttributesToNode(void* node) const; add attribute to xml. void SetFisherCoeff(Int_t ivar, Double_t coeff); set fisher coefficients. void AddContentToNode(stringstream& s) const; adding attributes to tree node (well, was used in BinarySearchTree,; and somehow I guess someone programmed it such that we need this in; this tree too, although we don't..). void ReadContent(stringstream& s); reading attributes from tree node (well, was used in BinarySearchTree,; and somehow I guess someone programmed it such that we need this in; this tree too, although we don't..). TMVA::MsgLogger& Log(). Node* CreateNode() const; { return new DecisionTreeNode(); }. void SetNFisherCoeff(Int_t nvars); {fFisherCoeff.resize(nvars);}. UInt_t GetNFisherCoeff() const; set fisher coefficients. { return fFisherCoeff.size();}. Double_t GetFisherCoeff(Int_t ivar) const; get fisher coefficients. {return fFisherCoeff.at(ivar);}. void SetSelector(Short_t i); set index of variable used for discrimination at this node. { fSelector = i; }. Short_t GetSelector() const; return index of variable used for discrimination at this node. { return fSelector; }. void SetCutValue(Float_t c); set the cut value applied at this node. { fCutValue = c; }. Float_t GetCutValue( void ); return the cut value applied at this node. { return fCutValue; }. void SetCutType(Bool_t t); set true: if event variable > cutValue ==> signal , false otherwise. { fCutType = t; }. Bool_t GetCutType( void ); return kTRUE: Cuts select signal, kFALSE: Cuts select bkg. { return fCutType; }. void SetNodeType(Int_t t); set node ty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__DecisionTreeNode.html:9185,Log,Log,9185,root/html604/TMVA__DecisionTreeNode.html,https://root.cern,https://root.cern/root/html604/TMVA__DecisionTreeNode.html,1,['Log'],['Log']
Testability," of view. Another plot of the timing per volume vs. number of daughters is produced. ; Definition at line 3811 of file TGeoManager.cxx. ◆ CheckOverlaps(). void TGeoManager::CheckOverlaps ; (; Double_t ; ovlp = 0.1, . Option_t * ; option = """" . ). Check all geometry for illegal overlaps within a limit OVLP. ; Definition at line 3869 of file TGeoManager.cxx. ◆ CheckPath(). Bool_t TGeoManager::CheckPath ; (; const char * ; path); const. Check if a geometry path is valid without changing the state of the current navigator. ; Definition at line 1715 of file TGeoManager.cxx. ◆ CheckPoint(). void TGeoManager::CheckPoint ; (; Double_t ; x = 0, . Double_t ; y = 0, . Double_t ; z = 0, . Option_t * ; option = """", . Double_t ; safety = 0. . ). Classify a given point. See TGeoChecker::CheckPoint(). ; Definition at line 3770 of file TGeoManager.cxx. ◆ CheckShape(). void TGeoManager::CheckShape ; (; TGeoShape * ; shape, . Int_t ; testNo, . Int_t ; nsamples, . Option_t * ; option . ). Test for shape navigation methods. ; Summary for test numbers:; 1: DistFromInside/Outside. Sample points inside the shape. Generate directions randomly in cos(theta). Compute DistFromInside and move the point with bigger distance. Compute DistFromOutside back from new point. Plot d-(d1+d2) . Definition at line 3783 of file TGeoManager.cxx. ◆ Class(). static TClass * TGeoManager::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGeoManager::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGeoManager::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 605 of file TGeoManager.h. ◆ CleanGarbage(). void TGeoManager::CleanGarbage ; (; ). Clean temporary volumes and shapes from garbage collection. ; Definition at line 1627 of file TGeoManager.cxx. ◆ ClearAttributes(). void TGeoManager::ClearAttributes ; (; ). Reset all attributes to default ones. ; Default attribut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:76684,Test,Test,76684,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Test'],['Test']
Testability," of volumes. This behaves like a normal container volume supporting other volumes positioned inside, but it has neither shape nor medium. It cannot be used directly as a piece of the geometry, but just as a temporary structure helping temporary assembling and positioning volumes.; If we define now C as an assembly containing A and B, positioning the assembly into D,E and F will actually position only A and Bdirectly into these volumes, taking into account their combined transformations A/B to C and C to D/E/F. This looks much nicer, is it? In fact, it is and it is not. Of course, we managed to get rid of the ""unnecessary"" volume C in our geometry, but we end-up with a more flat structure for D,E and F (more daughters inside). This can get much worse when extensively used, as in the case: assemblies of assemblies.; For deciding what to choose between using virtual containers or assemblies for a specific case, one can use for both cases, after the geometry was closed:; gGeoManager->SetTopVolume(ptr_D);; gGeoManager->Test();; gGeoManager->RestoreMasterVolume();; TGeoManager::RestoreMasterVolumevoid RestoreMasterVolume()Restore the master volume of the geometry.Definition TGeoManager.cxx:3118; TGeoManager::Testvoid Test(Int_t npoints=1000000, Option_t *option="""")Check time of finding ""Where am I"" for n points.Definition TGeoManager.cxx:1942; The ptr_D is a pointer to volume D containing the interesting structure. The test will provide the timing for classifying 1 million random points inside D.; Examples of Volume Positioning; Now let us make a simple volume representing a copper wire. We suppose that a medium is already created (see TGeoMedium class on how to create media).; We will create a TUBE shape for our wire, having Rmin=0cm, Rmax=0.01cm and a half-length dZ=1cm:; TGeoTube *tube = new TGeoTube(""wire_tube"",0,0.01,1);; TGeoTubeDefinition TGeoTube.h:17; One may omit the name for the shape wire_tube, if no retrieving by name is further needed during geometry buildin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:34172,Test,Test,34172,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['Test'],['Test']
Testability," of weight*X*X.Definition TH1.h:99; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::TH1TH1()Histogram default constructor.Definition TH1.cxx:615; TH1::TransformHistostatic TH1 * TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)For a given transform (first parameter), fills the histogram (second parameter) with the transform ou...Definition TH1.cxx:9319; TH1::UseCurrentStylevoid UseCurrentStyle() overrideCopy current attributes from/to current style.Definition TH1.cxx:7469; TH1::LabelsOptionvirtual void LabelsOption(Option_t *option=""h"", Option_t *axis=""X"")Sort bins with labels or set option(s) to draw axis with labels.Definition TH1.cxx:5382; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::fBarOffsetShort_t fBarOffset(1000*offset) for bar charts or legosDefinition TH1.h:93; TH1::Chi2TestXvirtual Double_t Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constThe computation routine of the Chisquare test.Definition TH1.cxx:2067; TH1::CheckBinLimitsstatic bool CheckBinLimits(const TAxis *a1, const TAxis *a2)Check bin limits.Definition TH1.cxx:1541; TH1::AddBinContentvirtual void AddBinContent(Int_t bin)Increment bin content by 1.Definition TH1.cxx:1268; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::FitOptionsMakestatic Int_t FitOptionsMake(Option_t *option, Foption_t &Foption)Decode string choptin and fill fitOption structure.Definition TH1.cxx:4652; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetNormFactorvirtual Double_t GetNormFactor() constDefinition TH1.h:301; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::GetSkewnessvirtual Double_t GetSkewness",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:437944,test,test,437944,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['test'],['test']
Testability," of weight*X*X.Definition TH1.h:99; TH1::GetStdDevvirtual Double_t GetStdDev(Int_t axis=1) constReturns the Standard Deviation (Sigma).Definition TH1.cxx:7607; TH1::TH1TH1()Histogram default constructor.Definition TH1.cxx:615; TH1::TransformHistostatic TH1 * TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)For a given transform (first parameter), fills the histogram (second parameter) with the transform ou...Definition TH1.cxx:9319; TH1::UseCurrentStylevoid UseCurrentStyle() overrideCopy current attributes from/to current style.Definition TH1.cxx:7469; TH1::LabelsOptionvirtual void LabelsOption(Option_t *option=""h"", Option_t *axis=""X"")Sort bins with labels or set option(s) to draw axis with labels.Definition TH1.cxx:5382; TH1::GetNbinsYvirtual Int_t GetNbinsY() constDefinition TH1.h:298; TH1::fBarOffsetShort_t fBarOffset(1000*offset) for bar charts or legosDefinition TH1.h:93; TH1::Chi2TestXvirtual Double_t Chi2TestX(const TH1 *h2, Double_t &chi2, Int_t &ndf, Int_t &igood, Option_t *option=""UU"", Double_t *res=nullptr) constThe computation routine of the Chisquare test.Definition TH1.cxx:2067; TH1::CheckBinLimitsstatic bool CheckBinLimits(const TAxis *a1, const TAxis *a2)Check bin limits.Definition TH1.cxx:1541; TH1::AddBinContentvirtual void AddBinContent(Int_t bin)Increment bin content by 1.Definition TH1.cxx:1268; TH1::GetBinErrorvirtual Double_t GetBinError(Int_t bin) constReturn value of error associated to bin number bin.Definition TH1.cxx:9063; TH1::FitOptionsMakestatic Int_t FitOptionsMake(Option_t *option, Foption_t &Foption)Decode string choptin and fill fitOption structure.Definition TH1.cxx:4652; TH1::GetNbinsZvirtual Int_t GetNbinsZ() constDefinition TH1.h:299; TH1::GetNormFactorvirtual Double_t GetNormFactor() constDefinition TH1.h:301; TH1::GetMeanvirtual Double_t GetMean(Int_t axis=1) constFor axis = 1,2 or 3 returns the mean value of the histogram along X,Y or Z axis.Definition TH1.cxx:7535; TH1::TH1TH1(const TH1 &)=delete; TH1::GetSke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:57781,test,test,57781,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['test'],['test']
Testability," offset); voidTBuffer::SetReadMode(); virtual voidSetReadParam(Int_t mapsize); voidTBuffer::SetReAllocFunc(ReAllocCharFun_t reallocfunc = 0); virtual voidSetStreamerElementNumber(TStreamerElement*, Int_t); virtual voidTObject::SetUniqueID(UInt_t uid); voidTBuffer::SetWriteMode(); virtual voidSetWriteParam(Int_t mapsize); virtual voidShowMembers(TMemberInspector&); virtual voidSkipObjectAny(); virtual voidSkipVersion(const TClass* cl = 0); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidStreamObject(TObject* obj); virtual voidStreamObject(void* obj, const type_info& typeinfo, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const char* className, const TClass* onFileClass = 0); virtual voidStreamObject(void* obj, const TClass* cl, const TClass* onFileClass = 0); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTagStreamerInfo(TVirtualStreamerInfo* info); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidWriteArray(const Bool_t* b, Int_t n); virtual voidWriteArray(const Char_t* c, Int_t n); virtual voidWriteArray(const UChar_t* c, Int_t n); virtual voidWriteArray(const Short_t* h, Int_t n); virtual voidWriteArray(const UShort_t* h, Int_t n); virtual voidWriteArray(const Int_t* i, Int_t n); virtual voidWriteArray(const UInt_t* i, Int_t n); virtual voidWriteArray(const Long_t* l, Int_t n); virtual voidWriteArray(const ULong_t* l, Int_t n); virtual voidWriteArray(const Long64_t* l, Int_t n); virtual voidWriteArray(const ULong64_t* ll, Int_t n); virtual voidWriteArray(const Float_t* f, Int_t n); virtual voidWriteArray(const Double_t* d, Int_t n); virtual voidWriteArrayDouble32(const Double_t* d, Int_t n, TStreamerElement* ele = 0); virtual voidWriteArrayFloat16(const Float_t* f, Int_t n, TStreamerElement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBufferFile.html:12710,Test,TestBit,12710,root/html534/TBufferFile.html,https://root.cern,https://root.cern/root/html534/TBufferFile.html,1,['Test'],['TestBit']
Testability," often is the test data tested; 769 double factorWeightDecay () const { return m_factorWeightDecay; } ///< get the weight-decay factor; 770 ; 771 double learningRate () const { return fLearningRate; } ///< get the learning rate; 772 double momentum () const { return fMomentum; } ///< get the momentum (e.g. for SGD); 773 int repetitions () const { return fRepetitions; } ///< how many steps have to be gone until the batch is changed; 774 MinimizerType minimizerType () const { return fMinimizerType; } ///< which minimizer shall be used (e.g. SGD); 775 ; 776 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:28296,test,testSample,28296,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,4,"['log', 'test']","['logging', 'testSample']"
Testability," oldType += TVirtualStreamerInfo::kConv;; 3961 }; 3962 } else {; 3963 oldType += TVirtualStreamerInfo::kSkip;; 3964 }; 3965 }; 3966 switch (SelectLooper(proxy)) {; 3967 case kAssociativeLooper:; 3968// } else if (proxy.GetCollectionType() == ROOT::kSTLset || proxy.GetCollectionType() == ROOT::kSTLmultiset; 3969// || proxy.GetCollectionType() == ROOT::kSTLmap || proxy.GetCollectionType() == ROOT::kSTLmultimap) {; 3970// sequence->AddAction( GenericAssocCollectionAction, new TConfigSTL(info,i,compinfo,offset,0,proxy.GetCollectionClass(),0,0) );; 3971 case kVectorLooper:; 3972 case kVectorPtrLooper:; 3973 // We can speed up the iteration in case of vector. We also know that all emulated collection are stored internally as a vector.; 3974 if (element->TestBit(TStreamerElement::kCache)) {; 3975 TConfiguredAction action( GetCollectionReadAction<VectorLooper>(info,element,oldType,i,compinfo,offset) );; 3976 sequence->AddAction( UseCacheVectorLoop, new TConfigurationUseCache(info,action,element->TestBit(TStreamerElement::kRepeat)) );; 3977 } else {; 3978 sequence->AddAction( GetCollectionReadAction<VectorLooper>(info,element,oldType,i,compinfo,offset));; 3979 }; 3980 break;; 3981 case kGenericLooper:; 3982 default:; 3983 // The usual collection case.; 3984 if (element->TestBit(TStreamerElement::kCache)) {; 3985 TConfiguredAction action( GetCollectionReadAction<VectorLooper>(info,element,oldType,i,compinfo,offset) );; 3986 sequence->AddAction( UseCacheGenericCollection, new TConfigurationUseCache(info,action,element->TestBit(TStreamerElement::kRepeat)) );; 3987 } else {; 3988 sequence->AddAction( GetCollectionReadAction<GenericLooper>(info,element,oldType,i,compinfo,offset) );; 3989 }; 3990 break;; 3991 }; 3992 }; 3993 return sequence;; 3994}; 3995 ; 3996////////////////////////////////////////////////////////////////////////////////; 3997/// Create the bundle of the actions necessary for the streaming memberwise of the content described by 'info' into the collection describ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:185011,Test,TestBit,185011,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,2,['Test'],['TestBit']
Testability," on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGGotoDialog(const TGGotoDialog&); TGGotoDialog(const TGWindow* p = 0, const TGWindow* main = 0, UInt_t w = 1, UInt_t h = 1, Long_t* ret_code = 0, UInt_t options = kVerticalFrame); virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGGotoDialog.html:16038,Test,TestBit,16038,root/html602/TGGotoDialog.html,https://root.cern,https://root.cern/root/html602/TGGotoDialog.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," on an algorithm implemented in the TMVA package. Each minimizer can be configured using the ROOT::Math::MinimizerOptions class. The list of possible option that can be set are:. Minimizer type (MinimizerOptions::SetMinimizerType(const char *)) .; Minimizer algorithm (MinimizerOptions::SetMinimizerAlgorithm(const char *)).; Print Level (MinimizerOptions::SetPrintLevel(int )) to set the verbose printing level (default is 0).; Tolerance (MinimizerOptions::SetTolerance(double )) tolerance used to control the iterations.; Maximum number of function calls (MinimizerOptions::SetMaxFunctionCalls(int )).; Maximum number of iterations (MinimizerOptions::SetMaxIterations(int )). Note that this is not used by Minuit; FCN Upper value for Error Definition (MinimizerOptions::SetErrorDef(double )). Value in the minimization function used to compute the parameter errors. The default is to get the uncertainties at the 68% CL is a value of 1 for a chi-squared function minimization and 0.5 for a log-likelihood function.; Strategy (MinimizerOptions::SetStrategy(int )), minimization strategy used. For each minimization strategy Minuit uses different configuration parameters (e.g. different requirements in computing derivatives, computing full Hessian (strategy = 2) or an approximate version. The default is a value of 1. In this case the full Hessian matrix is computed only after the minimization.; Precision (MinimizerOptions::SetPrecision(double )). Precision value in the evaluation of the minimization function. Default is numerical double precision. Note that not all the options are implemented by all the minimizers. For example in Minuit is possible to set the maximum number of function calls, but not the maximum number of iterations. The Strategy and the Precision options apply instead only for Minuit (and Minuit2).; The class supports also setting global default values for the options, by using the static functions MinimizerOptions::SetDefault... (for example MinimizerOptions::SetDe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:204855,log,log-likelihood,204855,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log-likelihood']
Testability," on non-iOS platform,; 6792 //on iOS depends on pad mode.; 6793 if (!gPad->PadInSelectionMode() && !gPad->PadInHighlightMode()); 6794 gPad->PaintPadFrame(Hparam.xmin,Hparam.ymin,Hparam.xmax,Hparam.ymax);; 6795}; 6796 ; 6797////////////////////////////////////////////////////////////////////////////////; 6798/// [Paint functions associated to an histogram.](\ref HP28""); 6799 ; 6800void THistPainter::PaintFunction(Option_t *); 6801{; 6802 auto lnk = fFunctions->FirstLink();; 6803 ; 6804 while (lnk) {; 6805 auto obj = lnk->GetObject();; 6806 TVirtualPad::TContext ctxt(true);; 6807 if (obj->InheritsFrom(TF2::Class())) {; 6808 if (!obj->TestBit(TF2::kNotDraw)) {; 6809 if (Hoption.Lego || Hoption.Surf || Hoption.Error >= 100) {; 6810 TF2 *f2 = (TF2*)obj;; 6811 f2->SetMinimum(fH->GetMinimum());; 6812 f2->SetMaximum(fH->GetMaximum());; 6813 f2->SetRange(fH->GetXaxis()->GetXmin(), fH->GetYaxis()->GetXmin(), fH->GetXaxis()->GetXmax(), fH->GetYaxis()->GetXmax() );; 6814 f2->Paint(""surf same"");; 6815 } else {; 6816 obj->Paint(""cont3 same"");; 6817 }; 6818 }; 6819 } else if (obj->InheritsFrom(TF1::Class())) {; 6820 if (!obj->TestBit(TF1::kNotDraw)) obj->Paint(""lsame"");; 6821 } else {; 6822 //Let's make this 'function' selectable on iOS device (for example, it can be TPaveStat).; 6823 gPad->PushSelectableObject(obj);; 6824 ; 6825 //The next statement is ALWAYS executed on non-iOS platform, on iOS it depends on pad's mode; 6826 //and picked object.; 6827 if (!gPad->PadInHighlightMode() || (gPad->PadInHighlightMode() && obj == gPad->GetSelected())); 6828 obj->Paint(lnk->GetOption());; 6829 }; 6830 lnk = lnk->Next();; 6831 }; 6832}; 6833 ; 6834////////////////////////////////////////////////////////////////////////////////; 6835/// [Control routine to draw 1D histograms](\ref HP01b); 6836 ; 6837void THistPainter::PaintHist(Option_t *); 6838{; 6839 ; 6840 //On iOS: do not highlight hist, if part of it was selected.; 6841 //Never executes on non-iOS platform.; 6842 if (gPad->PadInHighl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:248944,Test,TestBit,248944,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Test'],['TestBit']
Testability," one for the signal and one for the background. Each of the leaves may then have a multi-dimensional distribution. ; The class TUnfoldBinning takes care to map all bins of the ""measurement"" to a one-dimensional vector y. Similarly, the ""truth"" bins are mapped to the vector x.; How to choose the regularisation settings; In TUnfoldDensity, two methods are implemented to determine tau**2 . ScanLcurve() locate the tau where the L-curve plot has a ""kink"" this function is implemented in the TUnfold class . ScanTau() finds the solution such that some variable (e.g. global correlation coefficient) is minimized. This function is implemented in the TUnfoldDensity class . Each of the algorithms has its own advantages and disadvantages. The algorithm (1) does not work if the input data are too similar to the MC prediction. Typical no-go cases of the L-curve scan are: . the number of measurements is too small (e.g. ny=nx) . the input data have no statistical fluctuations [identical MC events are used to fill the matrix of migrations and the vector y for a ""closure test""] . The algorithm (2) only works if the variable does have a real minimum as a function of tau. If global correlations are minimized, the situation is as follows: The matrix of migration typically introduces negative correlations. The area constraint introduces some positive correlation. Regularisation on the ""size"" introduces no correlation. Regularisation on 1st or 2nd derivatives adds positive correlations. ; For these reasons, ""size"" regularisation does not work well with the tau-scan: the higher tau, the smaller rho, but there is no minimum. As a result, large values of tau (too strong regularisation) are found. In contrast, the tau-scan is expected to work better with 1st or 2nd derivative regularisation, because at some point the negative correlations from migrations are approximately cancelled by the positive correlations from the regularisation conditions. ; whichever algorithm is used, the output has to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:4401,test,test,4401,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,1,['test'],['test']
Testability," one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|300"" [The Layout of the input]; : Layout: ""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =================================================================; reshape (Reshape) (None, 10, 30) 0 ; ; lstm (LSTM) (None,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:10315,Test,TestRepetitions,10315,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability," one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|1|300"" [The Layout of the input]; : Layout: ""DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Running with nthreads = 4; --- RNNClassification : Using input file: time_data_t10_d30.root; number of variables is 300; vars_time0[0]; vars_time0[1]; vars_time0[2]; vars_time0[3]; vars_time0[4]; vars_time0[5]; vars_time0[6]; vars_time0[7]; vars_ti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html:5779,Test,TestRepetitions,5779,doc/master/TMVA__RNN__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8py.html,1,['Test'],['TestRepetitions']
Testability," onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidSetModel(TGLLightSet* m); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLLightSetSubEditor.html:14101,Test,TestBit,14101,root/html528/TGLLightSetSubEditor.html,https://root.cern,https://root.cern/root/html528/TGLLightSetSubEditor.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidSetHsbPosition(Int_t newPos); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); voidSetScrolling(Int_t scrolling); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVsbPosition(Int_t newPos); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGCanvas(const TGWindow* p = 0, UInt_t w = 1, UInt_t h = 1, UInt_t options = kSunkenFrame | kDoubleBorder, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGCanvas.html:14288,Test,TestBit,14288,root/html602/TGCanvas.html,https://root.cern,https://root.cern/root/html602/TGCanvas.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," opt = """") const; virtual Int_tTDataSet::Purge(Option_t* opt = """"); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTDataSet::Remove(TDataSet* set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObject(TObject* obj); virtual TObject*SetObject(TObject* obj, Bool_t makeOwner); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTDataSet::Update(); virtual voidTDataSet::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TObjectSet.html:7435,Test,TestBit,7435,root/html530/TObjectSet.html,https://root.cern,https://root.cern/root/html530/TObjectSet.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," optimize the data for the anticipated use. The class for a branch is called TBranch. If two variables are independent, and the designer knows the variables will not be used together, they should be placed on separate branches. If, however, the variables are related, such as the coordinates of a point, it is most efficient to create one branch with both coordinates on it. A variable on a TBranch is called a leaf (yes - TLeaf). Another point to keep in mind when designing trees is that branches of the same TTree can be written to separate files. To add a TBranch to a TTree we call the method TTree::Branch(). Note that we DO NOT use the TBranch constructor.; The TTree::Branch method has several signatures. The branch type differs by what is stored in it. A branch can hold an entire object, a list of simple variables, contents of a folder, contents of a TList, or an array of objects. Let’s see some examples. To follow along you will need the shared library libEvent.so. First, check if it is in $ROOTSYS/test. If it is, copy it to your own area. If it is not there, you have to build it by typing make in $ROOTSYS/test.; 12.9 Adding a Branch to Hold a List of Variables; As in the very first example (cernstaff.root.root) the data we want to save is a list of simple variables, such as integers or floats. In this case, we use the following TTree::Branch signature:; tree->Branch(""Ev_Branch"",&event,; ""temp/F:ntrack/I:nseg:nvtex:flag/i"");; The first parameter is the branch name.; The second parameter is the address from which the first variable is to be read. In the code above, “event” is a structure with one float and three integers and one unsigned integer. You should not assume that the compiler aligns the elements of a structure without gaps. To avoid alignment problems, you need to use structures with same length members. If your structure does not qualify, you need to create one branch for each element of the structure.; The leaf name is NOT used to pick the variable out o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:537446,test,test,537446,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability," option = """") const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1*TF1::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const TObject*TFormula::GetLinearPart(Int_t i); virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; static voidTFormula::GetMaxima(Int_t& maxop, Int_t& maxpar, Int_t& maxconst); virtual Double_tTF1::GetMaximum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMaximumStored() const; virtual Double_tTF1::GetMaximumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; TMethodCall*TF1::GetMethodCall() const; virtual Double_tTF1::GetMinimum(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual Double_tTF1::GetMinimumStored() const; virtual Double_tTF1::GetMinimumX(Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.0E-10, Int_t maxiter = 100, Bool_t logx = false) const; virtual const char*TNamed::GetName() const; virtual Int_tTF1::GetNDF() const; virtual Int_tTFormula::GetNdim() const; virtual Int_tTFormula::GetNpar() const; virtual Int_tTF1::GetNpx() const; virtual Int_tTFormula::GetNumber() const; virtual Int_tTF1::GetNumberFitPoints() const; virtual Int_tTF1::GetNumberFreeParameters() const; virtual char*TF1::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_tTFormula::GetParameter(Int_t ipar) const; Double_tTFormula::GetParameter(const char* name) const; virtual Double_t*TFormula::GetParameters() const; virtual voidTFormula::GetP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF12.html:4703,log,logx,4703,root/html602/TF12.html,https://root.cern,https://root.cern/root/html602/TF12.html,1,['log'],['logx']
Testability," option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& te",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:20929,test,testArg,20929,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,1,['test'],['testArg']
Testability," option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsReal&model() const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsReal::offset() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooNumConvolution&operator=(const RooNumConvolution&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooNumConvolution.html:20678,test,testArg,20678,root/html602/RooNumConvolution.html,https://root.cern,https://root.cern/root/html602/RooNumConvolution.html,2,['test'],['testArg']
Testability," option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars() const; const RooArgSet&numIntRealVars() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealIntegral.html:16926,test,testArg,16926,root/html526/RooRealIntegral.html,https://root.cern,https://root.cern/root/html526/RooRealIntegral.html,2,['test'],['testArg']
Testability," option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooMoment*RooAbsReal::mean(RooRealVar& obs); RooMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); static voidRooPrintable::nameFieldLength(Int_t newLen); virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRooAbsReal::numEvalErrors(); const RooArgSet&numIntCatVars() const; const RooArgSet&numIntRealVars() const; Bool_tRooAbsArg::observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TNamed&TNamed::operator=(const TNamed& rhs); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooRealIntegral.html:17370,test,testArg,17370,root/html530/RooRealIntegral.html,https://root.cern,https://root.cern/root/html530/RooRealIntegral.html,1,['test'],['testArg']
Testability," option = """") const; voidTObject::MayNotUse(const char* method) const; const char*name() const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(double x, double y, double z) const; RooCFunction3Ref<double,double,double,double>&operator=(const RooCFunction3Ref<double,double,double,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCFunction3Ref_double_double_double_double_.html:5365,Test,TestBit,5365,root/html528/RooCFunction3Ref_double_double_double_double_.html,https://root.cern,https://root.cern/root/html528/RooCFunction3Ref_double_double_double_double_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGLayoutManager&TGLayoutManager::operator=(const TGLayoutManager&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidSavePrimitive(ostream& out, Option_t* = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGLayoutManager::SetDefaultHeight(UInt_t); virtual voidTGLayoutManager::SetDefaultWidth(UInt_t); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTGLayoutManager::SetModified(Bool_t flag = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListLayout.html:5449,Test,TestBit,5449,root/html528/TGListLayout.html,https://root.cern,https://root.cern/root/html528/TGListLayout.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSplinePoly3&operator=(TSplinePoly3 const& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&TSplinePoly::X(); Double_t&TSplinePoly::Y().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSplinePoly3.html:4657,Test,TestBit,4657,root/html534/TSplinePoly3.html,https://root.cern,https://root.cern/root/html534/TSplinePoly3.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSplinePoly5&operator=(TSplinePoly5 const& other); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; Double_t&TSplinePoly::X(); Double_t&TSplinePoly::Y().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSplinePoly5.html:4709,Test,TestBit,4709,root/html534/TSplinePoly5.html,https://root.cern,https://root.cern/root/html534/TSplinePoly5.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualMCDecayer&operator=(const TVirtualMCDecayer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidReadDecayTable(); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetForceDecay(Int_t type); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVirtualMCDecayer.html:4867,Test,TestBit,4867,root/html530/TVirtualMCDecayer.html,https://root.cern,https://root.cern/root/html530/TVirtualMCDecayer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," option = """"); virtual Int_tTProofServ::SendAsynMessage(const char* msg, Bool_t lf = kTRUE); virtual voidTProofServ::SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); voidTProofServ::SendParallel(Bool_t async = kFALSE); voidTProofServ::SendStatistics(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTApplication::SetEchoMode(Bool_t mode); static FILE*TProofServ::SetErrorHandlerFile(FILE* ferr); virtual voidTApplication::SetIdleTimer(UInt_t idleTimeInSec, const char* command); static voidTProofServ::SetLastEntry(Long64_t lastentry); static voidTProofServ::SetLastMsg(const char* lastmsg); static voidTObject::SetObjectStat(Bool_t stat); voidTApplication::SetReturnFromRun(Bool_t ret); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTApplication::Show(); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTApplication::StartIdleing(); virtual voidTApplication::StopIdleing(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual Int_tTApplication::TabCompletionHook(char* buf, int* pLoc, ostream& out); virtual voidTerminate(Int_t status); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; static TProofServ*TProofServ::This(); voidTProofServ::TruncateLogFile(); TXProofServ(const TXProofServ&); TXProofServ(Int_t* argc, char** argv, FILE* flog = 0); Int_tTProofServ::UpdateSessionStatus(Int_t xst = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; const char*TApplication::WorkingDirectory() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TXProofServ.html:13108,Test,TestBit,13108,root/html602/TXProofServ.html,https://root.cern,https://root.cern/root/html602/TXProofServ.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidSetDirection(Float_t theta, Float_t phi); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* buff) const; virtual voidSetPosition(Float_t x, Float_t y, Float_t z); virtual voidSetRefObject(TObject* obj = 0); virtual voidSetSize(Float_t dx, Float_t dy, Float_t dz); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMarker3DBox.html:6386,Test,TestBit,6386,root/html528/TMarker3DBox.html,https://root.cern,https://root.cern/root/html528/TMarker3DBox.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual Int_tSetNextPoint(Double_t x, Double_t y, Double_t z)MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual voidSetPoint(Int_t point, Double_t x, Double_t y, Double_t z)MENU ; virtual voidSetPolyLine(Int_t n, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Float_t* p, Option_t* option = """"); virtual voidSetPolyLine(Int_t n, Double_t* p, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tSize() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TPolyLine3D(); TPolyLine3D(const TPolyLine3D& polylin); TPolyLine3D(Int_t n, Option_t* option = """"); TPolyLine3D(Int_t n, Float_t* p, Option_t* option = """"); TPolyLine3D(Int_t n, Double_t* p, Option_t* option = """"); TPolyLine3D(Int_t n, Float_t* x, Float_t* y, Float_t* z, Option_t* option = """"); TPolyLine3D(Int_t n, Double_t* x, Double_t* y, Double_t* z, Option_t* option = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPolyLine3D.html:6846,Test,TestBit,6846,root/html602/TPolyLine3D.html,https://root.cern,https://root.cern/root/html602/TPolyLine3D.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," option = "">""); static voidSetProxy(const char* url); static voidTFile::SetReadaheadSize(Int_t bufsize = 256000); virtual voidTFile::SetReadCalls(Int_t readcalls = 0); static voidTFile::SetReadStreamerInfo(Bool_t readinfo = kTRUE); virtual voidTDirectoryFile::SetSeekDir(Long64_t v); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTDirectoryFile::SetTRefAction(TObject* ref, TObject* parent); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDirectoryFile::SetWritable(Bool_t writable = kTRUE); virtual voidShowMembers(TMemberInspector&); virtual voidTFile::ShowStreamerInfo(); static Bool_tTFile::ShrinkCacheFileDir(Long64_t shrinkSize, Long_t cleanupInteval = 0); virtual Int_tTFile::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTFile::SumBuffer(Int_t bufsize); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTFile::UseCache(Int_t maxCacheSize = 10, Int_t pageSize = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0); virtual Int_tTFile::Write(const char* name = 0, Int_t opt = 0, Int_t bufsiz = 0) const; virtual Bool_tTFile::WriteBuffer(const char* buf, Int_t len); virtual voidTDirectoryFile::WriteDirHeader(); virtual voidTFile::WriteFree(); virtual voidTFile::WriteHeader(); virtual voidTDirectoryFile::WriteKeys(); Int_tTDirectory::WriteObject(const void* obj, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const char* classname, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual Int_tTDirectoryFile::WriteObjectAny(const void* obj, const TClass* cl, const char* name, Option_t* option = """", Int_t bufsize = 0); virtual USho",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TWebFile.html:14143,Test,TestBits,14143,root/html534/TWebFile.html,https://root.cern,https://root.cern/root/html534/TWebFile.html,1,['Test'],['TestBits']
Testability," option NOSTACK is specified, the histograms are all paint in the same pad as if the option SAME had been specified. This allows to compute X and Y scales common to all the histograms, like TMultiGraph does for graphs.; If the option PADS is specified, the current pad/canvas is subdivided into a number of pads equal to the number of histograms and each histogram is paint into a separate pad.; The following example shows various types of stacks (hstack.C).; ; void hstack(); {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; auto h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; auto cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");; ; cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; auto a = new THStack(""a"",""Stacked 2D histograms"");; auto f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params1);; auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; h2sta->SetFillCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:118531,test,test,118531,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,3,['test'],['test']
Testability," option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit slower, it is therefore the recommended method, when the histogram represent counts (Poisson statistics), where the chi-square methods may give incorrect results, especially in case of low statistics. In case of a weighted histogram, it is possible to perform also a likelihood fit by using the option ""WL"". Note a weighted histogram is a histogram which has been filled with weights and it has the information on the sum of the weight square for each bin ( TH1::Sumw2() has been c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:132961,log,log,132961,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['log'],['log']
Testability," option; 3924/// \parblock; 3925/// The drawing option.; 3926/// - When an histogram is produced it can be any histogram drawing option; 3927/// listed in THistPainter.; 3928/// - when no option is specified:; 3929/// - the default histogram drawing option is used; 3930/// if the expression is of the form ""e1"".; 3931/// - if the expression is of the form ""e1:e2""or ""e1:e2:e3"" a cloud of; 3932/// unbinned 2D or 3D points is drawn respectively.; 3933/// - if the expression has four fields ""e1:e2:e3:e4"" a cloud of unbinned 3D; 3934/// points is produced with e1 vs e2 vs e3, and e4 is mapped on the current color; 3935/// palette.; 3936/// - If option COL is specified when varexp has three fields:; 3937/// ~~~ {.cpp}; 3938/// tree.Draw(""e1:e2:e3"","""",""col"");; 3939/// ~~~; 3940/// a 2D scatter is produced with e1 vs e2, and e3 is mapped on the current; 3941/// color palette. The colors for e3 are evaluated once in linear scale before; 3942/// painting. Therefore changing the pad to log scale along Z as no effect; 3943/// on the colors.; 3944/// - if expression has more than four fields the option ""PARA""or ""CANDLE""; 3945/// can be used.; 3946/// - If option contains the string ""goff"", no graphics is generated.; 3947/// \endparblock; 3948/// \param [in] nentries The number of entries to process (default is all); 3949/// \param [in] firstentry The first entry to process (default is 0); 3950///; 3951/// ### Drawing expressions using arrays and array elements; 3952///; 3953/// Let assumes, a leaf fMatrix, on the branch fEvent, which is a 3 by 3 array,; 3954/// or a TClonesArray.; 3955/// In a TTree::Draw expression you can now access fMatrix using the following; 3956/// syntaxes:; 3957///; 3958/// | String passed | What is used for each entry of the tree; 3959/// |-----------------|--------------------------------------------------------|; 3960/// | `fMatrix` | the 9 elements of fMatrix |; 3961/// | `fMatrix[][]` | the 9 elements of fMatrix |; 3962/// | `fMatrix[2][2]` | only the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:156316,log,log,156316,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['log'],['log']
Testability," option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; Double_t GetBoxVolume ();  Returns the volume of range searching box fBox. ;  ; MsgLogger & Log () const;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; BinarySearchTree * fBst;  Binary tree to find events within a volume. ;  ; MsgLogger * fLogger;  ! message logger ;  . Private Attributes; std::vector< Double_t > fBox;  range-searching box ;  ; Bool_t fBoxHasChanged;  range searching box has changed ;  ; Double_t fBoxVolume;  volume of range searching box ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHas",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:10295,Log,Log,10295,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['Log'],['Log']
Testability," options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::PyMethodBase; PyObject * fClassifier;  ; PyObject * fLocalNS;  ; PyObject * fModule;  ; PyObject * fPyReturn;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMVA::PyMethodBase; static PyObject * fGlobalNS = NULL;  ; static PyObject * fMain = NULL;  ; static PyObject * fModulePickle = NULL;  ; static PyObject * fPickleDumps = NULL;  ; static PyObject * fPickleLoads = NULL;  . #include <TMVA/MethodPyKeras.h>. Inheritance diagram for TMVA::MethodPyKeras:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EBackendType. enum TMVA::MethodPyKeras::EBackendType. enumeration defining the used Kera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html:30142,test,testing,30142,doc/master/classTMVA_1_1MethodPyKeras.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyKeras.html,2,"['log', 'test']","['logger', 'testing']"
Testability," options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TMVA::PyMethodBase; PyObject * fClassifier;  ; PyObject * fLocalNS;  ; PyObject * fModule;  ; PyObject * fPyReturn;  ;  Protected Attributes inherited from TMVA::MethodBase; Types::EAnalysisType fAnalysisType;  ; UInt_t fBackgroundClass;  ; bool fExitFromTraining = false;  ; std::vector< TString > * fInputVars;  ; IPythonInteractive * fInteractive = nullptr;  temporary dataset used when evaluating on a different data (used by MethodCategory::GetMvaValues) ;  ; UInt_t fIPyCurrentIter = 0;  ; UInt_t fIPyMaxIter = 0;  ; std::vector< Float_t > * fMulticlassReturnVal;  ; Int_t fNbins;  ; Int_t fNbinsH;  ; Int_t fNbinsMVAoutput;  ; Ranking * fRanking;  ; std::vector< Float_t > * fRegressionReturnVal;  ; Results * fResults;  ; UInt_t fSignalClass;  ; DataSet * fTmpData = nullptr;  temporary event when testing on a different DataSet than the own one ;  ; const Event * fTmpEvent;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Static Protected Attributes inherited from TMVA::PyMethodBase; static PyObject * fGlobalNS = NULL;  ; static PyObject * fMain = NULL;  ; static PyObject * fModulePickle = NULL;  ; static PyObject * fPickleDumps = NULL;  ; static PyObject * fPickleLoads = NULL;  . #include <TMVA/MethodPyTorch.h>. Inheritance diagram for TMVA::MethodPyTorch:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ MethodPyTorch() [1/2]. MethodPyTorch::MethodPyTorch ; (; const TString & ; jobName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html:29196,test,testing,29196,doc/master/classTMVA_1_1MethodPyTorch.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyTorch.html,2,"['log', 'test']","['logger', 'testing']"
Testability," options to be called before options are read from stream ;  ; void WriteOptionsReferenceToFile ();  write complete options to output stream ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; std::shared_ptr< DataLoader > fDataLoader;  ! data ;  ; std::shared_ptr< TFile > fFile;  ! file to save the results ;  ; UInt_t fJobs;  ! number of jobs to run some high level algorithm in parallel ;  ; std::vector< OptionMap > fMethods;  ! Booked method information ;  ; Bool_t fModelPersistence;  ! flag to save the trained model ;  ; Bool_t fSilentFile;  ! if true dont produce file output ;  ; TStopwatch fTimer;  ! timer to measure the time. ;  ; TString fTransformations;  ! List of transformations to test ;  ; Bool_t fVerbose;  ! flag for extra information ;  ; TProcPool fWorkers;  ! procpool object ;  ;  Protected Attributes inherited from TMVA::Configurable; MsgLogger * fLogger;  ! message logger ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMVA/Envelope.h>. Inheritance diagram for TMVA::Envelope:.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Envelope.html:15852,test,test,15852,doc/master/classTMVA_1_1Envelope.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Envelope.html,2,"['log', 'test']","['logger', 'test']"
Testability," or h->SetDirectory(dir) to add it; to the list of objects in the directory dir. NOTE that this is a static function. To call it, use;; TH1::AddDirectory. Int_t BufferEmpty(Int_t action = 0); Fill histogram with all entries in the buffer.; action = -1 histogram is reset and refilled from the buffer (called by THistPainter::Paint); action = 0 histogram is filled from the buffer; action = 1 histogram is filled and buffer is deleted; The buffer is automatically deleted when the number of entries; in the buffer is greater than the number of entries in the histogram. Int_t BufferFill(Double_t x, Double_t w); accumulate arguments in buffer. When buffer is full, empty the buffer; fBuffer[0] = number of entries in buffer; fBuffer[1] = w of first entry; fBuffer[2] = x of first entry. bool CheckConsistency(const TH1* h1, const TH1* h2); Check histogram compatibility; returns kTRUE if number of bins and bin limits are identical. Double_t Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; test for comparing weighted and unweighted histograms. Function: Returns p-value. Other return values are specified by the 3rd parameter <br>. Parameters:. - h2: the second histogram; - option:; o ""UU"" = experiment experiment comparison (unweighted-unweighted); o ""UW"" = experiment MC comparison (unweighted-weighted). Note that; the first histogram should be unweighted; o ""WW"" = MC MC comparison (weighted-weighted); o ""NORM"" = to be used when one or both of the histograms is scaled; but the histogram originally was unweighted; o by default underflows and overlows are not included:; * ""OF"" = overflows included; * ""UF"" = underflows included; o ""P"" = print chi2, ndf, p_value, igood; o ""CHI2"" = returns chi2 instead of p-value; o ""CHI2/NDF"" = returns ; - res: not empty - computes normalized residuals and returns them in; this array. The current implementation is based on the papers test for comparison; of weighted and unweighted histograms"" in Proceedings of PHYSTAT05 and; ""Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:43504,test,test,43504,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,1,['test'],['test']
Testability," ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TList* list); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp | kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:66919,log,log,66919,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['log'],['log']
Testability," ord = ""0""); Get into 'env' the value of integer RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, Double_t& env, const char* ord = ""0""); Get into 'env' the value of double RC env variable 'rcenv' on node 'ord'. Int_t GetRC(const char* RCenv, TString& env, const char* ord = ""0""); Get into 'env' the value of string RC env variable 'rcenv' on node 'ord'. Int_t SendCurrentState(TList* list); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendCurrentState(TProof::ESlaves list = kActive); Transfer the current state of the master to the active slave servers.; The current state includes: the current working directory, etc.; Returns the number of active slaves. Returns -1 in case of error. Int_t SendInitialState(); Transfer the initial (i.e. current) state of the master to all; slave servers. Currently the initial state includes: log level.; Returns the number of active slaves. Returns -1 in case of error. Bool_t CheckFile(const char* file, TSlave* sl, Long_t modtime, Int_t cpopt = (kCp|kCpBin)); Check if a file needs to be send to the slave. Use the following; algorithm:; - check if file appears in file map; - if yes, get file's modtime and check against time in map,; if modtime not same get md5 and compare against md5 in map,; if not same return kTRUE.; - if no, get file's md5 and modtime and store in file map, ask; slave if file exists with specific md5, if yes return kFALSE,; if no return kTRUE.; The options 'cpopt' define if to copy things from cache to sandbox and what.; To retrieve from the cache the binaries associated with the file TProof::kCpBin; must be set in cpopt; the default is copy everything.; Returns kTRUE in case file needs to be send, returns kFALSE in case; file is already on remote node. Int_t SendFile(const char* file, Int_t opt = (kBinary|kForward|kCp|kCpBin), const char* r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:64096,log,log,64096,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['log'],['log']
Testability," os) const; virtual voidRooAbsBinning::printClassName(ostream& os) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooPrintable::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsBinning::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsBinning::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooAbsBinning::printValue(ostream& os) const; virtual Int_tRooAbsBinning::rawBinNumber(Double_t x) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRooAbsBinning::removeHook(RooAbsRealLValue&) const; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetMax(Double_t xhi); virtual voidsetMin(Double_t xlo); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetRange(Double_t xlo, Double_t xhi); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidupdateInput(const RooAbsBinning& input, Double_t slope = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooLinTransBinning.html:7045,Test,TestBit,7045,root/html530/RooLinTransBinning.html,https://root.cern,https://root.cern/root/html530/RooLinTransBinning.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," os) const; virtual voidRooAbsGenContext::printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsGenContext::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsGenContext::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidRooAbsGenContext::setProtoDataOrder(Int_t* lut); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsGenContext::setVerbose(Bool_t verbose = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooEffGenContext.html:6560,Test,TestBit,6560,root/html530/RooEffGenContext.html,https://root.cern,https://root.cern/root/html530/RooEffGenContext.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," os) const; virtual voidprintMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; virtual voidRooAbsGenContext::printName(ostream& os) const; virtual voidRooPrintable::printStream(ostream& os, Int_t contents, RooPrintable::StyleOption style, TString indent = """") const; virtual voidRooAbsGenContext::printTitle(ostream& os) const; virtual voidRooPrintable::printTree(ostream& os, TString indent = """") const; virtual voidRooPrintable::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidsetExpectedData(Bool_t); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidsetProtoDataOrder(Int_t* lut); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsGenContext::setVerbose(Bool_t verbose = kTRUE); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooSimSplitGenContext.html:6287,Test,TestBit,6287,root/html532/RooSimSplitGenContext.html,https://root.cern,https://root.cern/root/html532/RooSimSplitGenContext.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," os, TString indent = """") const; virtual voidRooAbsDataStore::printValue(ostream& os) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidreset(); voidTObject::ResetBit(UInt_t f); virtual voidresetCache(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidsetArgStatus(const RooArgSet& set, Bool_t active); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidRooAbsDataStore::setDirtyProp(Bool_t flag); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual const TTree*RooAbsDataStore::tree() const; virtual voidTObject::UseCurrentStyle(); virtual Bool_tvalid() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Double_tweight() const; virtual Double_tweight(Int_t index) const; virtual Double_tweightError(RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual voidweightError(Double_t& lo, Double_t& hi, RooAbsData::ErrorType etype = RooAbsData::Poisson) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCompositeDataStore.html:7022,Test,TestBit,7022,root/html528/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html528/RooCompositeDataStore.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," other, Bool_t assumeSameType = kFALSE); virtual Bool_tRooAbsArg::isLValue() const; virtual Bool_tRooAbsReal::isOffsetting() const; Bool_tTObject::IsOnHeap() const; Bool_tRooAbsArg::isShapeDirty() const; Bool_tRooAbsArg::isShapeServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isShapeServer(const char* name) const; virtual Bool_tRooAbsArg::IsSortable() const; Bool_tRooAbsArg::isValueDirty() const; Bool_tRooAbsArg::isValueDirtyAndClear() const; Bool_tRooAbsArg::isValueOrShapeDirtyAndClear() const; Bool_tRooAbsArg::isValueServer(const RooAbsArg& arg) const; Bool_tRooAbsArg::isValueServer(const char* name) const; Bool_tTObject::IsZombie() const; voidRooAbsArg::leafNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; Int_tloadDataSet(RooDataSet& data, TString options); Bool_tRooAbsArg::localNoDirtyInhibit() const; voidRooAbsReal::logEvalError(const char* message, const char* serverValueString = 0) const; static voidRooAbsReal::logEvalError(const RooAbsReal* originator, const char* origName, const char* message, const char* serverValueString = 0); virtual voidTNamed::ls(Option_t* option = """") const; virtual Double_tRooAbsReal::maxVal(Int_t code) const; voidTObject::MayNotUse(const char* method) const; RooAbsMoment*RooAbsReal::mean(RooRealVar& obs); RooAbsMoment*RooAbsReal::mean(RooRealVar& obs, const RooArgSet& nset); virtual Int_tRooAbsReal::minTrialSamples(const RooArgSet&) const; RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, Int_t order, Bool_t central, Bool_t takeRoot); RooAbsMoment*RooAbsReal::moment(RooRealVar& obs, const RooArgSet& normObs, Int_t order, Bool_t central, Bool_t takeRoot, Bool_t intNormObs); Bool_tRooAbsPdf::mustBeExtended() const; static voidRooPrintable::nameFieldLength(Int_t newLen); const TNamed*RooAbsArg::namePtr() const; const char*RooAbsPdf::normRange() const; virtual Bool_tTObject::Notify(); Int_tRooAbsArg::numCaches() const; static Int_tRooAbsReal::numEvalErrorItems(); static Int_tRo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:21473,log,logEvalError,21473,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,3,['log'],['logEvalError']
Testability," output.; Return 0 on success, -1 on failure. ~TApplicationServer(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void GetOptions(Int_t* argc, char** argv); Get and handle command line options. Fixed format:; ""protocol url"". void Run(Bool_t retrn = kFALSE); Main server eventloop. void HandleSocketInput(); Handle input coming from the client or from the master server. void HandleUrgentData(); Handle Out-Of-Band data sent by the master or client. void HandleSigPipe(); Called when the client is not alive anymore (i.e. when kKeepAlive; has failed). void Reset(const char* dir); Reset environment to be ready for execution of next command. Int_t ReceiveFile(const char* file, Bool_t bin, Long64_t size); Receive a file, either sent by a client or a master server.; If bin is true it is a binary file, other wise it is an ASCII; file and we need to check for Windows \r tokens. Returns -1 in; case of error, 0 otherwise. void SendLogFile(Int_t status = 0, Int_t start = -1, Int_t end = -1); Send log file to master.; If start > -1 send only bytes in the range from start to end,; if end <= start send everything from start. Int_t SendCanvases(); Send any created canvas to client. Int_t BrowseDirectory(const char* dirname); Browse directory and send back its content to client. Int_t BrowseFile(const char* fname); Browse root file and send back its content;; if fname is null, send the full list of files. Int_t BrowseKey(const char* keyname); Read key object and send it back to client. void Terminate(Int_t status); Terminate the proof server. void HandleCheckFile(TMessage* mess); Handle file checking request. void ErrorHandler(Int_t level, Bool_t abort, const char* location, const char* msg); The error handler function. It prints the message on stderr and; if abort is set it aborts the application. Long_t ProcessLine(const char* line, Bool_t = kFALSE, Int_t* err = 0); Parse a command line received from the client, making sure that the files; needed for th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TApplicationServer.html:14387,log,log,14387,root/html526/TApplicationServer.html,https://root.cern,https://root.cern/root/html526/TApplicationServer.html,7,['log'],['log']
Testability, over _clientListShape ; TIterator*RooAbsArg::_clientValueIter! Iterator over _clientListValue ; RooAbsData*_dataPointer to original input dataset; Bool_tRooAbsArg::_deleteWatch! Delete watch flag ; Bool_t_doOffsetApply interval value offset to control numeric precision?; RooExpensiveObjectCache*RooAbsArg::_eocachePointer to global cache manager for any expensive components created by this object; Double_t_evalCarry! carry of Kahan sum in evaluatePartition; Int_t_extSet! Number of designated set to calculated extended term; Bool_tRooAbsArg::_fastAllow fast access mode in getVal() and proxies; Float_tRooAbsReal::_floatValue! Transient cache for floating point values from tree branches ; Bool_tRooAbsReal::_forceNumIntForce numerical integration if flag set; RooAbsReal*_funcPointer to original input function; static Bool_tRooAbsReal::_globalSelectCompGlobal activation switch for component selection; RooAbsTestStatistic**_gofArray! Array of sub-contexts representing part of the combined test statistic; RooAbsTestStatistic::GOFOpMode_gofOpModeOperation mode of test statistic instance ; vector<RooFit::MPSplit>_gofSplitMode! GOF MP Split mode specified by component (when Auto is active); static Bool_tRooAbsReal::_hideOffsetOffset hiding flag; static Bool_tRooAbsArg::_inhibitDirtyStatic flag controlling global inhibit of dirty state propagation; Bool_t_init! Is object initialized ; Int_tRooAbsReal::_intValue! Transient cache for integer values from tree branches ; Bool_tRooAbsArg::_isConstant! Cached isConstant status ; TStringRooAbsReal::_labelPlot label for objects value; RooArgSet*RooAbsReal::_lastNSet!; Bool_tRooAbsArg::_localNoInhibitDirty! Prevent 'AlwaysDirty' mode for this node; RooRealMPFE**_mpfeArray! Array of parallel execution frond ends; RooFit::MPSplit_mpinterlUse interleaving strategy rather than N-wise split for partioning of dataset for multiprocessor-split; Int_t_nCPUNumber of processors to use in parallel calculation mode; Int_t_nEventsTotal number of even,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:35718,test,test,35718,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,1,['test'],['test']
Testability," over uniform observables; RooArgSet_uniformVars; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Fri Dec 2 14:26:49 2011 » Last generated: 2011-12-02 14:26; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooGenContext.html:10315,log,logic,10315,root/html532/RooGenContext.html,https://root.cern,https://root.cern/root/html532/RooGenContext.html,1,['log'],['logic']
Testability," over uniform observables; RooArgSet_uniformVars; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Mon Jul 4 15:23:00 2011 » Last generated: 2011-07-04 15:23; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooGenContext.html:10196,log,logic,10196,root/html530/RooGenContext.html,https://root.cern,https://root.cern/root/html530/RooGenContext.html,1,['log'],['logic']
Testability," over uniform observables; RooArgSet_uniformVars; Int_t_updateFMaxPerEventIf true, maximum p.d.f value needs to be recalculated for each event; Bool_tRooAbsGenContext::_verboseVerbose messaging?; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0); Initialize a new context for generating events with the specified; variables, using the specified PDF model. A prototype dataset (if provided); is not cloned and still belongs to the caller. The contents and shape; of this dataset can be changed between calls to generate() as long as the; expected columns to be copied to the generated dataset are present.; Any argument supplied in the forceDirect RooArgSet are always offered; for internal generation to the p.d.f., even if this is deemed unsafe by; the logic of RooGenContext. ~RooGenContext(); Destructor. void attach(const RooArgSet& params); Attach the cloned model to the event buffer we will be filling. void initGenerator(const RooArgSet& theEvent); Perform one-time initialization of the generator context. void generateEvent(RooArgSet& theEvent, Int_t remaining); Generate one event. The 'remaining' integer is not used other than; for printing messages. void printMultiline(ostream& os, Int_t content, Bool_t verbose = kFALSE, TString indent = """") const; Printing interface. RooGenContext(const RooAbsPdf& model, const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE, const RooArgSet* forceDirect = 0). » Last changed: Sat Sep 5 16:40:26 2015 » Last generated: 2015-09-05 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooGenContext.html:10337,log,logic,10337,root/html534/RooGenContext.html,https://root.cern,https://root.cern/root/html534/RooGenContext.html,1,['log'],['logic']
Testability," overflows.; 1250/// To force the underflows and overflows in the computation, one must; 1251/// call the static function TH1::StatOverflows(kTRUE) before filling; 1252/// the histogram.; 1253 ; 1254void TH2::GetStats(Double_t *stats) const; 1255{; 1256 if (fBuffer) ((TH2*)this)->BufferEmpty();; 1257 ; 1258 if ((fTsumw == 0 && fEntries > 0) || fXaxis.TestBit(TAxis::kAxisRange) || fYaxis.TestBit(TAxis::kAxisRange)) {; 1259 std::fill(stats, stats + 7, 0);; 1260 ; 1261 Int_t firstBinX = fXaxis.GetFirst();; 1262 Int_t lastBinX = fXaxis.GetLast();; 1263 Int_t firstBinY = fYaxis.GetFirst();; 1264 Int_t lastBinY = fYaxis.GetLast();; 1265 // include underflow/overflow if TH1::StatOverflows(kTRUE) in case no range is set on the axis; 1266 if (GetStatOverflowsBehaviour()) {; 1267 if ( !fXaxis.TestBit(TAxis::kAxisRange) ) {; 1268 if (firstBinX == 1) firstBinX = 0;; 1269 if (lastBinX == fXaxis.GetNbins() ) lastBinX += 1;; 1270 }; 1271 if ( !fYaxis.TestBit(TAxis::kAxisRange) ) {; 1272 if (firstBinY == 1) firstBinY = 0;; 1273 if (lastBinY == fYaxis.GetNbins() ) lastBinY += 1;; 1274 }; 1275 }; 1276 // check for labels axis. In that case corresponding statistics do not make sense and it is set to zero; 1277 Bool_t labelXaxis = ((const_cast<TAxis&>(fXaxis)).GetLabels() && fXaxis.CanExtend() );; 1278 Bool_t labelYaxis = ((const_cast<TAxis&>(fYaxis)).GetLabels() && fYaxis.CanExtend() );; 1279 ; 1280 for (Int_t biny = firstBinY; biny <= lastBinY; ++biny) {; 1281 Double_t y = (!labelYaxis) ? fYaxis.GetBinCenter(biny) : 0;; 1282 for (Int_t binx = firstBinX; binx <= lastBinX; ++binx) {; 1283 Double_t x = (!labelXaxis) ? fXaxis.GetBinCenter(binx) : 0;; 1284 //w = TMath::Abs(GetBinContent(bin));; 1285 Int_t bin = GetBin(binx,biny);; 1286 Double_t w = RetrieveBinContent(bin);; 1287 Double_t wx = w * x; // avoid some extra multiplications at the expense of some clarity; 1288 Double_t wy = w * y;; 1289 ; 1290 stats[0] += w;; 1291 stats[1] += GetBinErrorSqUnchecked(bin);; 1292 stats[2] += wx;; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2_8cxx_source.html:51393,Test,TestBit,51393,doc/master/TH2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2_8cxx_source.html,1,['Test'],['TestBit']
Testability," overrideTGeoVolumevirtual; SetVisRaytrace(Bool_t flag=kTRUE)TGeoAttinline; SetVisStreamed(Bool_t vis=kTRUE)TGeoAtt; SetVisTouched(Bool_t vis=kTRUE)TGeoAtt; SetVoxelFinder(TGeoVoxelFinder *finder)TGeoVolumeinline; Sizeof() constTNamedvirtual; Sizeof3D() constTAtt3Dvirtual; SortNodes()TGeoVolume; Streamer(TBuffer &) overrideTGeoVolumevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGeoVolumeinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAtt3D()TAtt3Dinline; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TestAttBit(UInt_t f) constTGeoAttinline; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGeoAtt()TGeoAtt; TGeoAtt(Option_t *vis_opt, Option_t *activity_opt="""", Option_t *optimization_opt="""")TGeoAtt; TGeoVolume(const TGeoVolume &)=deleteTGeoVolumeprivate; TGeoVolume()TGeoVolume; TGeoVolume(const char *name, const TGeoShape *shape, const TGeoMedium *med=nullptr)TGeoVolume; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UnmarkSaved()TGeoVolume; UseCurrentStyle()TObjectvirtual; Valid() constTGeoVolume; VisibleDaughters(Bool_t vis=kTRUE)TGeoVolume; Voxelize(Option_t *option)TGeoVolume; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Weight(Double_t precision=0.01, Option_t *option=""va"")TGeoVolume; WeightA() constTGeoVolume; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAtt3D()TAtt3Dinlinevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TGeoAtt()TGeoAttvirtual; ~TGeoVolume() overrideTGeoVolume; ~TNamed()TNamedvirtual; ~TObject()TOb",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoVolume-members.html:15258,Test,TestAttBit,15258,doc/master/classTGeoVolume-members.html,https://root.cern,https://root.cern/doc/master/classTGeoVolume-members.html,3,['Test'],"['TestAttBit', 'TestBit', 'TestBits']"
Testability," overrideTGraph2Dvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTGraph2DErrorsvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TGraph2DErrorsinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TGraph2D()TGraph2D; TGraph2D(Int_t n)TGraph2D; TGraph2D(Int_t n, Int_t *x, Int_t *y, Int_t *z)TGraph2D; TGraph2D(Int_t n, Float_t *x, Float_t *y, Float_t *z)TGraph2D; TGraph2D(Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(TH2 *h2)TGraph2D; TGraph2D(const char *name, const char *title, Int_t n, Double_t *x, Double_t *y, Double_t *z)TGraph2D; TGraph2D(const char *filename, const char *format=""%lg %lg %lg"", Option_t *option="""")TGraph2D; TGraph2D(const TGraph2D &)TGraph2D; TGraph2DErrors()TGraph2DErrors; TGraph2DErrors(Int_t n)TGraph2DErrors; TGraph2DErrors(Int_t n, Double_t *x, Double_t *y, Double_t *z, Double_t *ex=nullptr, Double_t *ey=nullptr, Double_t *ez=nullptr, Option_t *option="""")TGraph2DErrors; TGraph2DErrors(const TGraph2DErrors &)TGraph2DErrors; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DErrors-members.html:11511,Test,TestBit,11511,doc/master/classTGraph2DErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraph2DErrors-members.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond = -1. protected . 0=no end cond, 1=first derivative, 2=second derivative ; Definition at line 188 of file TSpline.h. ◆ fPoly. TSplinePoly3* TSpline3::fPoly = nullptr. protected . [fNp] Array of polynomial terms ; Definition at line 184 of file TSpline.h. ◆ fValBeg. Double_t TSpline3::fValBeg = 0. protected . Initial value of first or second derivative. ; Definition at line 185 of file TSpline.h. ◆ fValEnd. Double_t TSpline3::fValEnd = 0. protected . End value of first or second derivative. ; Definition at line 186 of file TSpline.h. Libraries for TSpline3:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TSpline.h; hist/hist/src/TSpline.c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline3.html:30205,test,test,30205,doc/master/classTSpline3.html,https://root.cern,https://root.cern/doc/master/classTSpline3.html,1,['test'],['test']
Testability," p )}{e(i)} \right)^2 }; \]. where y(i) is the bin content for each bin i, x(i) is the bin center and e(i) is the bin error (sqrt(y(i) for an un-weighted histogram). Bins with zero errors are excluded from the fit. See also later the note on the treatment of empty bins. When using option ""I"" the residual is computed not using the function value at the bin center, f(x(i)|p), but the integral of the function in the bin, Integral{ f(x|p)dx }, divided by the bin volume. When using option P (Pearson chi2), the expected error computed as e(i) = sqrt(f(x(i)|p)) is used. In this case empty bins are considered in the fit. Both chi-square methods should not be used when the bin content represent counts, especially in case of low bin statistics, because they could return a biased result. Likelihood Fits; When using option ""L"" a likelihood fit is used instead of the default chi-square fit. The likelihood is built assuming a Poisson probability density function for each bin. The negative log-likelihood to be minimized is. \[; NLL = - \sum_{i}{ \log {\mathrm P} ( y(i) | f(x(i) | p ) ) }; \]. where P(y|f) is the Poisson distribution of observing a count y(i) in the bin when the expected count is f(x(i)|p). The exact likelihood used is the Poisson likelihood described in this paper: S. Baker and R. D. Cousins, “Clarification of the use of chi-square and likelihood functions in fits to histograms,” Nucl. Instrum. Meth. 221 (1984) 437. \[; NLL = \sum_{i}{( f(x(i) | p ) + y(i)\log(y(i)/ f(x(i) | p )) - y(i)) }; \]. By using this formulation, 2*NLL can be interpreted as the chi-square resulting from the fit.; This method should be always used when the bin content represents counts (i.e. errors are sqrt(N) ). The likelihood method has the advantage of treating correctly bins with low statistics. In case of high statistics/bin the distribution of the bin content becomes a normal distribution and the likelihood and the chi2 fit give the same result.; The likelihood method, although a bit ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:132468,log,log-likelihood,132468,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['log'],['log-likelihood']
Testability," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBCPEffDecay.html:10200,log,log,10200,doc/master/classRooBCPEffDecay.html,https://root.cern,https://root.cern/doc/master/classRooBCPEffDecay.html,10,['log'],['log']
Testability," p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; virtual double expectedEvents (const RooArgSet *nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; virtual ExtendMode extendMode () const;  Returns ability of PDF to provide extended likelihood terms. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; virtual RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const;  Interface function to create a generator context from a p.d.f. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgusBG.html:5172,log,log,5172,doc/master/classRooArgusBG.html,https://root.cern,https://root.cern/doc/master/classRooArgusBG.html,52,['log'],['log']
Testability," pad as if the option ""SAME"" had been specified. This allows to; compute X and Y scales common to all the histograms, like; TMultiGraph does for graphs.; If the option ""PADS"" is specified, the current pad/canvas is; subdivided into a number of pads equal to the number of histograms and each; histogram is paint into a separate pad.; The following example shows various types of stacks. Picture; Source. TCanvas *hstack() {; // Example of stacked histograms: class THStack; //; // Author: Rene Brun; ; THStack *hs = new THStack(""hs"",""Stacked 1D histograms"");; //create three 1-d histograms; TH1F *h1st = new TH1F(""h1st"",""test hstack"",100,-4,4);; h1st->FillRandom(""gaus"",20000);; h1st->SetFillColor(kRed);; h1st->SetMarkerStyle(21);; h1st->SetMarkerColor(kRed);; hs->Add(h1st);; TH1F *h2st = new TH1F(""h2st"",""test hstack"",100,-4,4);; h2st->FillRandom(""gaus"",15000);; h2st->SetFillColor(kBlue);; h2st->SetMarkerStyle(21);; h2st->SetMarkerColor(kBlue);; hs->Add(h2st);; TH1F *h3st = new TH1F(""h3st"",""test hstack"",100,-4,4);; h3st->FillRandom(""gaus"",10000);; h3st->SetFillColor(kGreen);; h3st->SetMarkerStyle(21);; h3st->SetMarkerColor(kGreen);; hs->Add(h3st);; ; TCanvas *cst = new TCanvas(""cst"",""stacked hists"",10,10,700,700);; cst->SetFillColor(41);; cst->Divide(2,2);; // in top left pad, draw the stack with defaults; cst->cd(1);; hs->Draw();; // in top right pad, draw the stack in non-stack mode ; // and errors option; cst->cd(2);; gPad->SetGrid();; hs->Draw(""nostack,e1p"");; //in bottom left, draw in stack mode with ""lego1"" option; cst->cd(3);; gPad->SetFrameFillColor(17);; gPad->SetTheta(3.77);; gPad->SetPhi(2.9);; hs->Draw(""lego1"");. cst->cd(4);; //create two 2-D histograms and draw them in stack mode; gPad->SetFrameFillColor(17);; THStack *a = new THStack(""a"",""Stacked 2D histograms"");; TF2 *f1 = new TF2(""f1"",; ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; Double_t params[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5, ; 3600,-2,0.7,-3,0.3};; f1->SetParameters(params);; TH2F *h2sta = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:65393,test,test,65393,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,12,['test'],['test']
Testability," page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1814 of file TDocOutput.cxx. ◆ ReferenceEntity() [3/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TDataType * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a type documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a method documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1909 of file TDocOutput.cxx. ◆ ReferenceIsRelative(). Bool_t TDocOutput::ReferenceIsRelative ; (; const char * ; reference); const. virtual . Check whether reference is a relative reference, and can (or should) be prependen by relative paths. ; For HTML, check that it doesn't start with ""http:/",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:25074,test,test,25074,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability," page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1866 of file TDocOutput.cxx. ◆ ReferenceEntity() [4/4]. void TDocOutput::ReferenceEntity ; (; TSubString & ; str, . TMethod * ; entity, . const char * ; comment = 0 . ). virtual . Create a reference to a method documentation page. ; str encloses the text to create the reference for (e.g. name of instance). comment will be added e.g. as tooltip text. After the reference is put into str.String(), str will enclose the reference and the original text. Example: Input: str.String(): ""a gHtml test"" str.Begin(): 2 str.Length(): 5 Output: str.String(): ""a <a href=""THtml.html"">gHtml</a> test"" str.Begin(): 2 str.Length(): 30 ; Definition at line 1909 of file TDocOutput.cxx. ◆ ReferenceIsRelative(). Bool_t TDocOutput::ReferenceIsRelative ; (; const char * ; reference); const. virtual . Check whether reference is a relative reference, and can (or should) be prependen by relative paths. ; For HTML, check that it doesn't start with ""http://"" or ""https://"" ; Definition at line 1951 of file TDocOutput.cxx. ◆ ReplaceSpecialChars() [1/4]. const char * TDocOutput::ReplaceSpecialChars ; (; char ; c). virtual . Replace ampersand, less-than and greater-than character, writing to out. ; If 0 is returned, no replacement needs to be done. ; Definition at line 1962 of file TDocOutput.cxx. ◆ ReplaceSpecialChars() [2/4]. void TDocOutput::ReplaceSpecialChars ; (; std::ostream & ; out, . const char * ; string . ). Replace ampersand, less-than and greater-than characters, writing to out. ; Input: out - output file stream string - pointer to an array of characters ; Definition at line 20",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDocOutput.html:25717,test,test,25717,doc/master/classTDocOutput.html,https://root.cern,https://root.cern/doc/master/classTDocOutput.html,1,['test'],['test']
Testability," paint highlight bin as box (recursive calls PaintHighlightBin); 3898 gPad->Modified(kTRUE);; 3899 gPad->Update();; 3900 ; 3901 // emit Highlighted() signal; 3902 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, fH, fXHighlightBin, fYHighlightBin);; 3903}; 3904 ; 3905////////////////////////////////////////////////////////////////////////////////; 3906/// Paint highlight bin as TBox object; 3907 ; 3908void THistPainter::PaintHighlightBin(Option_t * /*option*/); 3909{; 3910 // call from PaintTitle; 3911 ; 3912 if (!fH->IsHighlight()) return;; 3913 ; 3914 Double_t uxmin = gPad->GetUxmin();; 3915 Double_t uxmax = gPad->GetUxmax();; 3916 Double_t uymin = gPad->GetUymin();; 3917 Double_t uymax = gPad->GetUymax();; 3918 if (gPad->GetLogx()) {; 3919 uxmin = TMath::Power(10.0, uxmin);; 3920 uxmax = TMath::Power(10.0, uxmax);; 3921 }; 3922 if (gPad->GetLogy()) {; 3923 uymin = TMath::Power(10.0, uymin);; 3924 uymax = TMath::Power(10.0, uymax);; 3925 }; 3926 ; 3927 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 3928 Double_t hcenter;; 3929 if (gPad->IsVertical()) {; 3930 hcenter = fXaxis->GetBinCenter(fXHighlightBin);; 3931 if ((hcenter < uxmin) || (hcenter > uxmax)) return;; 3932 } else {; 3933 hcenter = fYaxis->GetBinCenter(fXHighlightBin);; 3934 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3935 }; 3936 if (fH->GetDimension() == 2) {; 3937 hcenter = fYaxis->GetBinCenter(fYHighlightBin);; 3938 if ((hcenter < uymin) || (hcenter > uymax)) return;; 3939 }; 3940 ; 3941 // paint X highlight bin (for 1D or 2D); 3942 Double_t hbx1, hbx2, hby1, hby2;; 3943 if (gPad->IsVertical()) {; 3944 hbx1 = fXaxis->GetBinLowEdge(fXHighlightBin);; 3945 hbx2 = fXaxis->GetBinUpEdge(fXHighlightBin);; 3946 hby1 = uymin;; 3947 hby2 = uymax;; 3948 } else {; 3949 hbx1 = uxmin;; 3950 hbx2 = uxmax;; 3951 hby1 = fYaxis->GetBinLowEdge(fXHighlightBin);; 3952 hby2 = fYaxis->GetBinUpEdge(fXHighlightBin);; 3953 }; 3954 ; 3955 if (!gXHighlightBox) {; 3956 gXHighlight",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:152069,test,testing,152069,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,2,"['log', 'test']","['log', 'testing']"
Testability," pairs may overlap each other. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& numVars, const RooArgSet* normSet, const char* rangeName = 0) const. void getCompIntList(const RooArgSet* nset, const RooArgSet* iset, RooAddModel::pRooArgList& compIntList, Int_t& code, const char* isetRangeName) const; Check if this configuration was created before. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integral defined by given scenario code. Double_t expectedEvents(const RooArgSet* nset) const; Return the number of expected events, which is either the sum of all coefficients; or the sum of the components extended terms. void selectNormalization(const RooArgSet* depSet = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of observables; for interpretation of fraction coefficients. void selectNormalizationRange(const char* rangeName = 0, Bool_t force = kFALSE); Interface function used by test statistics to freeze choice of range; for interpretation of fraction coefficients. RooAbsGenContext* genContext(const RooArgSet& vars, const RooDataSet* prototype = 0, const RooArgSet* auxProto = 0, Bool_t verbose = kFALSE) const; Return specialized context to efficiently generate toy events from RooAddPdfs. Bool_t isDirectGenSafe(const RooAbsArg& arg) const; Direct generation is safe if all components say so. Int_t getGenerator(const RooArgSet& directVars, RooArgSet& generateVars, Bool_t staticInitOK = kTRUE) const; Return pseud-code that indicates if all components can do internal generation (1) or not (0). void generateEvent(Int_t code); This function should never be called as RooAddModel implements a custom generator context. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooAddModel to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooAddModel(*this,n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:47390,test,test,47390,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,6,['test'],['test']
Testability," paper; 600 adk[0] = adk[1] = 0;; 601 for (i = 0; i < k; i++) {; 602 mij = 0;; 603 maij = 0;; 604 innerSum = 0;; 605 aInnerSum = 0;; 606 ; 607 for (j = 0; j < l; j++) {; 608 mij += fij[i + j*k];; 609 maij = mij - (double) fij[i + j*k] / 2.0;; 610 bj = getSum(&lvec[0], j + 1);; 611 baj = bj - (double) lvec[j] / 2.0;; 612 ; 613 if (j < l - 1) {; 614 tmp = (double) nsum * mij - (double) ns[i] * bj;; 615 innerSum = innerSum + (double) lvec[j] * tmp * tmp /; 616 (bj * ((double) nsum - bj));; 617 }; 618 ; 619 tmp = (double) nsum * maij - (double) ns[i] * baj;; 620 aInnerSum = aInnerSum + (double) lvec[j] * tmp * tmp /; 621 (baj * (nsum - baj) - nsum * (double) lvec[j] / 4.0);; 622 }; 623 ; 624 adk[0] = adk[0] + innerSum / ns[i]; /* AkN2*/; 625 adk[1] = adk[1] + aInnerSum / ns[i]; /* AakN2 */; 626 }; 627 ; 628 /* k-sample Anderson-Darling test statistics in both original and; 629 alternative versions, AkN2 and AakN2, are stored in the given; 630 double array adk */; 631 adk[0] = adk[0] / (double) nsum; /* AkN2*/; 632 adk[1] = (nsum - 1) * adk[1] / ((double) nsum * (double) nsum); /* AakN2 */; 633 ; 634 // /* free pointers */; 635 // for (i = 0; i < k; i++) {; 636 // free(samples[i]);; 637 // }; 638 // free(samples);; 639 ; 640}; 641 ; 642 ; 643/*; 644 Taken from (1) -- Named for 2 samples but implemented for K. Restricted to K = 2 by the class's constructors; 645*/; 646void GoFTest::AndersonDarling2SamplesTest(Double_t& pvalue, Double_t& testStat) const {; 647 pvalue = -1;; 648 testStat = -1;; 649 if (fTestSampleFromH0) {; 650 MATH_ERROR_MSG(""AndersonDarling2SamplesTest"", ""Only 1-sample tests can be issued with a 1-sample constructed GoFTest object!"");; 651 return;; 652 }; 653 std::vector<Double_t> z(fCombinedSamples);; 654 // unique removes all consecutives duplicates elements. This is exactly what we wants ; 655 // for example unique of v={1,2,2,3,1,2,3,3} results in {1,2,3,1,2,3} which is exactly what we wants ; 656 std::vector<Double_t>::iterator endUnique = std::uniqu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GoFTest_8cxx_source.html:22549,test,test,22549,doc/master/GoFTest_8cxx_source.html,https://root.cern,https://root.cern/doc/master/GoFTest_8cxx_source.html,1,['test'],['test']
Testability," paramPoint, double& weight) const. RooAbsData* GenerateToyData(RooArgSet& paramPoint, double& weight, vector<double>& impNLLs, double& nullNLL) const. RooAbsData* GenerateToyData(vector<double>& weights) const. RooAbsData* GenerateToyData(vector<double>& weights, vector<double>& nullNLLs, vector<double>& impNLLs) const; global observables into account.; The values of the generated global observables remain in the pdf's variables.; They have to have those values for the subsequent evaluation of the; test statistics. int CreateImpDensitiesForOnePOIAdaptively(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, double nStdDevOverlap = 0.5, double poiValueForBackground = 0.0); these might not necessarily be the same thing. int CreateNImpDensitiesForOnePOI(RooAbsPdf& pdf, const RooArgSet& allPOI, RooRealVar& poi, int n, double poiValueForBackground = 0.0); n is the number of importance densities. ToyMCImportanceSampler(); Proof constructor. Do not use. ToyMCImportanceSampler(RooStats::TestStatistic& ts, Int_t ntoys). void SetDensityToGenerateFromByIndex(unsigned int i, bool fromNull = false); specifies the pdf to sample from. void AddImportanceDensity(RooAbsPdf* p, const RooArgSet* s); For importance sampling with multiple desnities/snapshots:; This is used to check the current Likelihood against Likelihoods from; other importance densities apart from the one given as importance snapshot.; The pdf can be NULL in which case the density from SetImportanceDensity(); is used. The snapshot is also optional. void AddNullDensity(RooAbsPdf* p, const RooArgSet* s = NULL); The pdf can be NULL in which case the density from SetPdf(); is used. The snapshot and TestStatistic is also optional. void SetPdf(RooAbsPdf& pdf); overwrite from ToyMCSampler. void SetParametersForTestStat(const RooArgSet& nullpoi); overwrite from ToyMCSampler. void SetApplyVeto(bool b = true); When set to true, this sets the weight of all toys to zero that; do not have the largest likelihood under the de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html:9674,Test,TestStatistic,9674,root/html534/RooStats__ToyMCImportanceSampler.html,https://root.cern,https://root.cern/root/html534/RooStats__ToyMCImportanceSampler.html,1,['Test'],['TestStatistic']
Testability," param[0] = Rmin; param[1] = Rmax; param[2] = theta1; param[3] = theta2; param[4] = phi1; param[5] = phi2. ~TGeoSphere(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the sphere; Double_t xmin, xmax, ymin, ymax, zmin, zmax;. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Int_t IsOnBoundary(const Double_t* point) const; Check if a point in local sphere coordinates is close to a boundary within; shape tolerance. Return values:; 0 - not close to boundary; 1 - close to Rmin boundary; 2 - close to Rmax boundary; 3,4 - close to phi1/phi2 boundary; 5,6 - close to theta1/theta2 boundary. Bool_t IsPointInside(const Double_t* point, Bool_t checkR = kTRUE, Bool_t checkTh = kTRUE, Bool_t checkPh = kTRUE) const; Check if a point is inside radius/theta/phi ranges for the spherical sector. Bool_t Contains(const Double_t* point) const; test if point is inside this sphere; check Rmin<=R<=Rmax. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each corner. Double_t DistFromOutside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the sphere; Check if the bounding box is crossed within the requested distance. Double_t DistFromInside(const Double_t* point, const Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the sphere. Double_t DistToSphere(const Double_t* point, const Double_t* dir, Double_t rsph, Bool_t check = kTRUE, Bool_t firstcross = kTRUE) const; compute distance to sphere of radius rsph. Direction has to be a unit vector. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step). const char * GetAxisName(In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoSphere.html:14875,test,test,14875,root/html534/TGeoSphere.html,https://root.cern,https://root.cern/root/html534/TGeoSphere.html,3,['test'],['test']
Testability," parameters; Double_t*fAmpErr[fNPeaks] array of amplitude errors; Double_t*fAmpInit[fNPeaks] array of initial values of peaks amplitudes, input parameters; Double_t*fArea[fNPeaks] array of calculated areas of peaks; Double_t*fAreaErr[fNPeaks] array of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square ; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixA2logical value of a2 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional ; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit). ; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional ; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit). ; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit). ; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of posi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrumFit.html:10867,log,logical,10867,root/html528/TSpectrumFit.html,https://root.cern,https://root.cern/root/html528/TSpectrumFit.html,4,['log'],['logical']
Testability," paramsOfInterest); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::TestStatistic&RooStats::TestStatistic::operator=(const RooStats::TestStatistic&); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(RooAbsPdf& pdf); RooStats::ProfileLikelihoodTestStatProfileLikelihoodTestStat(const RooStats::ProfileLikelihoodTestStat&); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; static voidSetAlwaysReuseNLL(Bool_t flag); voidSetOneSided(Bool_t flag = true); voidSetReuseNLL(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. const RooArgSet*fCachedBestFitParams; RooAbsData*fLastData; RooNLLVar*fNll!; Bool_tfOneSided; RooAbsPdf*fPdf; RooProfileLL*fProfile!; Bool_tfReuseNll; static Bool_tfgAlwaysReuseNll. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ProfileLikelihoodTestStat(); Proof constructor. Do not use. ProfileLikelihoodTestStat(RooAbsPdf& pdf). virtual ~ProfileLikelihoodTestStat(); delete fRand;; delete fTestStatistic;. void SetOneSided(Bool_t flag = true); {fOneSided = flag;}. void SetAlwaysReuseNLL(Bool_t flag); { fgAlwaysReuseNll = flag ; }. void SetReuseNLL(Bool_t flag); { fReuseNll = flag ; }. Double_t Evaluate(RooAbsData& data, RooArgSet& paramsOfInterest); Main interface to evaluate the test statistic on a dataset. const TString GetVarName() const; {return ""Profile Likelihood Ratio"";}. » Author: Kyle Cranmer, Lorenzo Moneta, Gregory Schott, Wouter Verkerke » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: ProfileLikelihoodTestStat.h 40023 2011-06-27 16:58:44Z moneta $ » Last generated: 2011-07-04 15:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html:2472,test,test,2472,root/html530/RooStats__ProfileLikelihoodTestStat.html,https://root.cern,https://root.cern/root/html530/RooStats__ProfileLikelihoodTestStat.html,1,['test'],['test']
Testability," part of a; probability density function, normalization is treated separately; in RooAbsPdf. The reason is that a RooAbsPdf object is more than a; PDF: it can be a building block for a more complex, composite PDF; if any of its variables are functions instead of variables. In; such cases the normalization of the composite may not be simply the; integral over the dependents of the top level PDF as these are; functions with potentially non-trivial Jacobian terms themselves.; Therefore. --> No explicit attempt should be made to normalize; the functions output in evaluate(). In addition, RooAbsPdf objects do not have a static concept of what; variables are parameters and what variables are dependents (which; need to be integrated over for a correct PDF normalization).; Instead the choice of normalization is always specified each time a; normalized values is requested from the PDF via the getVal(); method. RooAbsPdf manages the entire normalization logic of each PDF with; help of a RooRealIntegral object, which coordinates the integration; of a given choice of normalization. By default, RooRealIntegral will; perform a fully numeric integration of all dependents. However,; PDFs can advertise one or more (partial) analytical integrals of; their function, and these will be used by RooRealIntegral, if it; determines that this is safe (i.e. no hidden Jacobian terms,; multiplication with other PDFs that have one or more dependents in; commen etc). To implement analytical integrals, two functions must be implemented. First,. Int_t getAnalyticalIntegral(const RooArgSet& integSet, RooArgSet& anaIntSet). advertises the analytical integrals that are supported. 'integSet'; is the set of dependents for which integration is requested. The; function should copy the subset of dependents it can analytically; integrate to anaIntSet and return a unique identification code for; this integration configuration. If no integration can be; performed, zero should be returned. Second,. Double_t an",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:1690,log,logic,1690,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,12,['log'],['logic']
Testability," passed; total) &=& \frac{1 - level}{2}\\; 1990 P(x \geq passed; total) &=& 1 - P(x \leq passed - 1; total)\\; 1991 &=& 1 - \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed} (1 - t)^{passed - 1} dt\\; 1992 &=& 1 - \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed - 1} (1 - t)^{total - passed} dt\\; 1993 &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed - 1} (1 - t)^{total - passed} dt\\; 1994 &=& I_{\varepsilon}(passed,total - passed + 1); 1995 \f}; 1996The lower boundary is therefore given by the \f$ \frac{1 - level}{2}\f$ quantile; 1997of the beta distribution.; 1998 ; 1999The upper boundary of the Clopper-Pearson interval is the ""exact"" inversion; 2000of the test:; 2001 \f{eqnarray*}{; 2002 P(x \leq passed; total) &=& \frac{1 - level}{2}\\; 2003 P(x \leq passed; total) &=& \frac{1}{norm} * \int_{0}^{1 - \varepsilon} t^{total - passed - 1} (1 - t)^{passed} dt\\; 2004 &=& \frac{1}{norm} * \int_{\varepsilon}^{1} t^{passed} (1 - t)^{total - passed - 1} dt\\; 2005 &=& 1 - \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed - 1} dt\\; 2006 \Rightarrow 1 - \frac{1 - level}{2} &=& \frac{1}{norm} * \int_{0}^{\varepsilon} t^{passed} (1 - t)^{total - passed -1} dt\\; 2007 \frac{1 + level}{2} &=& I_{\varepsilon}(passed + 1,total - passed); 2008 \f}; 2009The upper boundary is therefore given by the \f$\frac{1 + level}{2}\f$ quantile; 2010of the beta distribution.; 2011 ; 2012Note: The connection between the binomial distribution and the regularized; 2013 incomplete beta function \f$ I_{\varepsilon}(\alpha,\beta)\f$ has been used.; 2014*/; 2015 ; 2016Double_t TEfficiency::ClopperPearson(Double_t total,Double_t passed,Double_t level,Bool_t bUpper); 2017{; 2018 Double_t alpha = (1.0 - level) / 2;; 2019 if(bUpper); 2020 return ((passed == total) ? 1.0 : ROOT::Math::beta_quantile(1 - alpha,passed + 1,total-passed));; 2021 else; 2022 return ((passed == 0) ? 0.0 : ROOT::Math::beta_quantile(alpha,passed,total-passed+1.0));; 2023}; 2024//////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEfficiency_8cxx_source.html:81549,test,test,81549,doc/master/TEfficiency_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEfficiency_8cxx_source.html,1,['test'],['test']
Testability," perf, const char* image, const char* workdir); TSlave*TProof::CreateSubmaster(const char* url, const char* ord, const char* image, const char* msd, Int_t nwk = 1); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; static Bool_tTProof::GetFileInCmd(const char* cmd, TString& fn); static Int_tTProof::GetInputData(TList* input, const char* cachedir, TString& emsg); TStringGetJobAd(); TList*TProof::GetListOfActiveSlaves() const; TVirtualProofPlayer*TProof::GetPlayer() const; TPluginHandler*TProof::GetProgressDialog() const; Int_tTProof::GetSandbox(TString& sb, Bool_t assert = kFALSE, const char* rc = 0); virtual void*TQObject::GetSender(); virtual const char*TQObject::GetSenderClassName() const; voidTProof::HandleLibIncPath(const char* what, Bool_t add, const char* dirs); Int_tTProof::HandleOutputOptions(TString& opt, TString& target, Int_t action); Int_tTProof::Init(const char* masterurl, const char* conffile, const char* confdir, Int_t loglevel, const char* alias = 0); voidTProof::InitMembers(); virtual TVirtualProofPlayer*TProof::MakePlayer(const char* player = 0, TSocket* s = 0); voidTObject::MakeZombie(); voidTProof::PrepareInputDataFile(TString& dataFile); Int_tTProof::RemoveWorkers(TList* wrks); static Int_tTProof::SaveInputData(TQueryResult* qr, const char* cachedir, TString& emsg); virtual voidTProof::SaveWorkerInfo(); Int_tTProof::SendFile(const char* file, Int_t opt = (kBinary | kForward | kCp | kCpBin), const char* rfile = 0, TSlave* sl = 0); static Int_tTProof::SendInputData(TQueryResult* qr, TProof* p, TString& emsg); virtual voidTProof::SendInputDataFile(); voidTProof::SetDSet(TDSet* dset); voidTProof::SetFeedback(TString& opt, TString& optfb, Int_t action); voidTProof::SetPlayer(TVirtualProofPlayer* player); static void*TProof::SlaveStartupThread(void* arg); virtual Bool_tStartSlaves(Bool_t); static voidTProof::SystemCmd(const char* cmd, Int_t fdout); voidTProof::UpdateDialog(); virtual voidTProof::ValidateD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofCondor.html:22330,log,loglevel,22330,root/html602/TProofCondor.html,https://root.cern,https://root.cern/root/html602/TProofCondor.html,1,['log'],['loglevel']
Testability," phi, Float_t cone_r, Float_t length = 0); virtual voidTEveElement::AddElement(TEveElement* el); Int_tAddEllipticCone(Float_t eta, Float_t phi, Float_t reta, Float_t rphi, Float_t length = 0); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidTEveShape::CheckAndFixBoxOrientationEv(TEveVector* box); static voidTEveShape::CheckAndFixBoxOrientationFv(Float_t** box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveJetCone.html:2274,Assert,AssertBBox,2274,root/html530/TEveJetCone.html,https://root.cern,https://root.cern/root/html530/TEveJetCone.html,3,['Assert'],['AssertBBox']
Testability," phi, Float_t cone_r, Float_t length = 0); virtual voidTEveElement::AddElement(TEveElement* el); Int_tAddEllipticCone(Float_t eta, Float_t phi, Float_t reta, Float_t rphi, Float_t length = 0); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidTEveShape::CheckAndFixBoxOrientationEv(TEveVector[8] box); static voidTEveShape::CheckAndFixBoxOrientationFv(Float_t[8][3] box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveJetCone.html:2206,Assert,AssertBBox,2206,root/html602/TEveJetCone.html,https://root.cern,https://root.cern/root/html602/TEveJetCone.html,2,['Assert'],['AssertBBox']
Testability," phi1 = TMath::Min(phimin,phimax);; 573 Double_t phi2 = TMath::Max(phimin,phimax);; 574 ; 575 //set number of points approximatively proportional to the ellipse circumference; 576 Double_t circ = kPI*(r1+r2)*(phi2-phi1)/360;; 577 Int_t n = (Int_t)(np*circ/((gPad->GetX2()-gPad->GetX1())+(gPad->GetY2()-gPad->GetY1())));; 578 if (n < 8) n= 8;; 579 if (n > np) n = np;; 580 Double_t angle,dx,dy;; 581 Double_t dphi = (phi2-phi1)*kPI/(180*n);; 582 Double_t ct = TMath::Cos(kPI*theta/180);; 583 Double_t st = TMath::Sin(kPI*theta/180);; 584 for (Int_t i=0;i<=n;i++) {; 585 angle = phi1*kPI/180 + Double_t(i)*dphi;; 586 dx = r1*TMath::Cos(angle);; 587 dy = r2*TMath::Sin(angle);; 588 x[i] = gPad->XtoPad(x1 + dx*ct - dy*st);; 589 y[i] = gPad->YtoPad(y1 + dx*st + dy*ct);; 590 }; 591 TString opt = option;; 592 opt.ToLower();; 593 if (phi2-phi1 >= 360 ) {; 594 if (GetFillStyle()) gPad->PaintFillArea(n,x,y);; 595 if (GetLineStyle()) gPad->PaintPolyLine(n+1,x,y);; 596 } else {; 597 x[n+1] = gPad->XtoPad(x1);; 598 y[n+1] = gPad->YtoPad(y1);; 599 x[n+2] = x[0];; 600 y[n+2] = y[0];; 601 if (GetFillStyle()) gPad->PaintFillArea(n+2,x,y);; 602 if (GetLineStyle()) {; 603 if (TestBit(kNoEdges) || opt.Contains(""only"")) gPad->PaintPolyLine(n+1,x,y);; 604 else gPad->PaintPolyLine(n+3,x,y);; 605 }; 606 }; 607}; 608 ; 609////////////////////////////////////////////////////////////////////////////////; 610/// Dump this ellipse with its attributes.; 611 ; 612void TEllipse::Print(Option_t *) const; 613{; 614 printf(""Ellipse: X1=%f Y1=%f R1=%f R2=%f"",fX1,fY1,fR1,fR2);; 615 if (GetLineColor() != 1) printf("" Color=%d"",GetLineColor());; 616 if (GetLineStyle() != 1) printf("" Style=%d"",GetLineStyle());; 617 if (GetLineWidth() != 1) printf("" Width=%d"",GetLineWidth());; 618 printf(""\n"");; 619}; 620 ; 621////////////////////////////////////////////////////////////////////////////////; 622/// Save primitive as a C++ statement(s) on output stream out; 623 ; 624void TEllipse::SavePrimitive(std::ostream &out, Optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEllipse_8cxx_source.html:19813,Test,TestBit,19813,doc/master/TEllipse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEllipse_8cxx_source.html,1,['Test'],['TestBit']
Testability," positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSpectrum2Fit.html:66380,log,logical,66380,root/html602/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html602/TSpectrum2Fit.html,2,['log'],['logical']
Testability," positions of 2D peaks, output parameters; double position_err_x[MAX_NUMBER_OF_PEAKS2]; // x position errors of 2D peaks; bool fix_position_x[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate x positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_y[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 2D peaks, input parameters; double position_calc_y[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 2D peaks, output parameters; double position_err_y[MAX_NUMBER_OF_PEAKS2]; // y position errors of 2D peaks; bool fix_position_y[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 2D peaks (not fit). However, they are present in the estimated functional; double position_init_x1[MAX_NUMBER_OF_PEAKS2]; // initial values of x positions of 1D ridges, input parameters; double position_calc_x1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted x positions of 1D ridges, output parameters; double position_err_x1[MAX_NUMBER_OF_PEAKS2]; // x position errors of 1D ridges; bool fix_position_x1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix appropriate x positions of 1D ridges (not fit). However, they are present in the estimated functional; double position_init_y1[MAX_NUMBER_OF_PEAKS2]; // initial values of y positions of 1D ridges, input parameters; double position_calc_y1[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted y positions of 1D ridges, output parameters; double position_err_y1[MAX_NUMBER_OF_PEAKS2]; // y position errors of 1D ridges; bool fix_position_y1[MAX_NUMBER_OF_PEAKS2]; // logical vector which allows to fix the appropriate y positions of 1D ridges (not fit). However, they are present in the estimated functional; double amp_init[MAX_NUMBER_OF_PEAKS2]; // initial values of 2D peaks amplitudes, input parameters; double amp_calc[MAX_NUMBER_OF_PEAKS2]; // calculated values of fitted amplitudes of 2D pea",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html:48724,log,logical,48724,root/htmldoc/guides/spectrum/Spectrum.html,https://root.cern,https://root.cern/root/htmldoc/guides/spectrum/Spectrum.html,1,['log'],['logical']
Testability," prefix of the source name; static const stringfgSuffixsuffix following source name; static map<EMsgType,std::string>*fgTypeMapmatches output types with strings. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InhibitOutput(); { fgInhibitOutput = kTRUE; }. void EnableOutput(). { fgInhibitOutput = kFALSE; }. MsgLogger(const TObject* source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger(const string& source, TMVA::EMsgType minType = kINFO); constructor. MsgLogger( EMsgType minType ); constructor. MsgLogger( const MsgLogger& parent ); copy constructor. ~MsgLogger(); destructor. TMVA::MsgLogger& operator=(const TMVA::MsgLogger& parent); assingment operator. std::string GetFormattedSource() const; make sure the source name is no longer than fgMaxSourceSize:. std::string GetPrintedSource() const; the full logger prefix. void Send(); activates the logger writer. void WriteMsg(TMVA::EMsgType type, const string& line) const; putting the output string, the message type, and the color; switcher together into a single string. TMVA::MsgLogger& Endmsg(TMVA::MsgLogger& logger); end line. void InitMaps(); Create the message type and color maps. void SetSource(const string& source); Accessors. { fStrSource = source; }. EMsgType GetMinType() const; { return fMinType; }. void SetMinType(TMVA::EMsgType minType); { fMinType = minType; }. std::string GetSource() const; { return fStrSource; }. UInt_t GetMaxSourceSize(); { return (UInt_t)fgMaxSourceSize; }. MsgLogger& operator<<( MsgLogger& ( *_f )( MsgLogger& ) ); Accept stream modifiers. MsgLogger& operator<<( std::ostream& ( *_f )( std::ostream& ) ). » Author: Attila Krasznahorkay, Andreas Hoecker, Joerg Stelzer, Eckhard von Toerne » Copyright (c) 2005-2011: *; » Last changed: root/tmva $Id$ » Last generated: 2015-03-14 16:44; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MsgLogger.html:11551,log,logger,11551,root/html534/TMVA__MsgLogger.html,https://root.cern,https://root.cern/root/html534/TMVA__MsgLogger.html,1,['log'],['logger']
Testability," primitive as a C++ statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 966 of file TSpline.cxx. ◆ SetCond(). void TSpline3::SetCond ; (; const char * ; opt). protected . Check the boundary conditions. ; Definition at line 574 of file TSpline.cxx. ◆ SetPoint(). void TSpline3::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 995 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline3::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d . ). virtual . Set point coefficient number i. ; Definition at line 1005 of file TSpline.cxx. ◆ Streamer(). void TSpline3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline3.html:29524,Test,Test,29524,doc/master/classTSpline3.html,https://root.cern,https://root.cern/doc/master/classTSpline3.html,1,['Test'],['Test']
Testability," private:. Double_tfAquadratic coeff.; Double_tfBZ value of parabola at x=y=0; Double_tfDzrange on Z axis [-dz, dz]; Double_tfRhiradius at z=+dz; Double_tfRloradius at z=-dz. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaboloid(); Dummy constructor. TGeoParaboloid(Double_t rlo, Double_t rhi, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoParaboloid(const char* name, Double_t rlo, Double_t rhi, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoParaboloid(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = rlo; param[1] = rhi; param[2] = dz. ~TGeoParaboloid(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside the elliptical tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Double_t DistToParaboloid(Double_t* point, Double_t* dir) const; Compute distance from a point to the parabola given by:; z = a*rsq + b; rsq = x*x+y*y. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the paraboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the paraboloid and safe distance. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the paraboloid along one axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The order; is t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoParaboloid.html:12580,test,test,12580,root/html528/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html528/TGeoParaboloid.html,1,['test'],['test']
Testability," private:. Double_tfAquadratic coeff.; Double_tfBZ value of parabola at x=y=0; Double_tfDzrange on Z axis [-dz, dz]; Double_tfRhiradius at z=+dz; Double_tfRloradius at z=-dz. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoParaboloid(); Dummy constructor. TGeoParaboloid(Double_t rlo, Double_t rhi, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoParaboloid(const char* name, Double_t rlo, Double_t rhi, Double_t dz); Default constructor specifying X and Y semiaxis length. TGeoParaboloid(Double_t* params); Default constructor specifying minimum and maximum radius; param[0] = rlo; param[1] = rhi; param[2] = dz. ~TGeoParaboloid(); destructor. Double_t Capacity() const; Computes capacity of the shape in [length^3]. void ComputeBBox(); compute bounding box of the tube. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside the elliptical tube. Int_t DistancetoPrimitive(Int_t px, Int_t py); compute closest distance from point px,py to each vertex. Double_t DistToParaboloid(Double_t* point, Double_t* dir, Bool_t in) const; Compute distance from a point to the parabola given by:; z = a*rsq + b; rsq = x*x+y*y. Double_t DistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from inside point to surface of the paraboloid. Double_t DistFromOutside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; compute distance from outside point to surface of the paraboloid and safe distance. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step); Divide the paraboloid along one axis. void GetBoundingCylinder(Double_t* param) const; --- Fill vector param[4] with the bounding cylinder parameters. The ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoParaboloid.html:12779,test,test,12779,root/html530/TGeoParaboloid.html,https://root.cern,https://root.cern/root/html530/TGeoParaboloid.html,2,['test'],['test']
Testability," procedure have been performed, the; problem now is to consider the ; function. The sum of squares of residuals can be written as. (12). where the relation (9) have been taken into account. The; contribution of the ; function to the reduction of S, is; given by. (13). Two test are now applied to decide whether this . function is to be included in the final expression, or not. Test 1. Denoting by the subspace spanned by. the function ; is; by construction (see (4)) the projection of the function; onto the direction perpendicular to . Now, if the; length of ; (given by ; ); is very small compared to the length of ; this new; function can not contribute much to the reduction of the sum of; squares of residuals. The test consists then in calculating the angle; between the two vectors ; and . (see also figure 1) and requiring that it's; greater then a threshold value which the user must set; (TMultiDimFit::SetMinAngle). Figure 1:; (a) Angle between ; and; ; , (b) angle between ; and; . ; Test 2. Let ; be the data vector to be fitted. As illustrated in; figure 1, the ; function . will contribute significantly to the reduction of , if the angle. between ; and ; is smaller than; an upper limit , defined by the user; (TMultiDimFit::SetMaxAngle). However, the method automatically readjusts the value of this angle; while fitting is in progress, in order to make the selection criteria; less and less difficult to be fulfilled. The result is that the; functions contributing most to the reduction of are chosen first; (TMultiDimFit::TestFunction). In case isn't defined, an alternative method of; performing this second test is used: The ; function. is accepted if (refer also to equation (13)). (14). where is the sum of the first residuals from the; functions previously accepted; and is the total number; of functions allowed in the final expression of the fit (defined by; user). >From this we see, that by restricting -- the number of; terms in the final model -- the fit is more diffi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiDimFit.html:7541,Test,Test,7541,root/html528/TMultiDimFit.html,https://root.cern,https://root.cern/root/html528/TMultiDimFit.html,3,['Test'],['Test']
Testability," process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. Function Members (Methods); public:. TRefArray(TProcessID* pid = 0); TRefArray(const TRefArray& a); TRefArray(Int_t s, TProcessID* pid); TRefArray(Int_t s, Int_t lowerBound = 0, TProcessID* pid = 0); virtual~TRefArray(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddAtAndExpand(TObject* obj, Int_t idx); virtual Int_tAddAtFree(TObject* obj); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRefArray.html:1743,test,test,1743,root/html528/TRefArray.html,https://root.cern,https://root.cern/root/html528/TRefArray.html,3,['test'],['test']
Testability," process.; To point the TRefArray to a different process do:; TRefArray array( processId );. For example, if 'obj' is an instance that was created in the different; process and you do:; TRefArray array( TProcessID::GetProcessWithUID( obj ) );; Then; array.Add(obj);; is correct (obj comes from the process the array is pointed to; while; TObject *nobj = new TObject;; array.Add(nobj);; is incorrect since 'nobj' was created in a different process than the; one the array is pointed to. In this case you will see error message:; Error in <TRefArray::AddAtAndExpand>: The object at 0x... is not; registered in the process the TRefArray point to; (pid = ProcessID../....). When a TRefArray is Streamed, only the pointer unique id is written,; not the referenced object. TRefArray may be assigned to different; branches of one Tree or several Trees.; The branch containing the TRefArray can be read before or after the; array (eg TClonesArray, STL vector,..) of the referenced objects. See an example in $ROOTSYS/test/Event.h. RESTRICTIONS when using TRefArray. - Elements in a TRefArray cannot point to a TFile or TDirectory.; - All elements of a TRefArray must be set in the same process,; In particular, one cannot modify some elements of the array in; a different process.; Use an array of TRef when one of the above restrictions is met. The number of TRef handled by a single process id is limited to; 16777215 (see TRef for more detail). When the TProcessID is full; (has seen 16777215 objects), we switch to new one TProcessID; maximum 65535 including the TProcessIDs read from file).; However TRefArray can not switch to new TProcessID if they already; contain objects. When the TProcessID has been switched due to overflow and an new; object is added to an existing, empty TRefArray, you will see:. Warning in <TRefArray::AddAtAndExpand>: The ProcessID for the 0x5f83819e8 has been switched to ProcessID4/6c89f37e-8259-11e2-9717-166ee183beef:4. If the TRefArray was not empty, you will se:. Error",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRefArray.html:1743,test,test,1743,root/html534/TRefArray.html,https://root.cern,https://root.cern/root/html534/TRefArray.html,3,['test'],['test']
Testability," produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_DNN_CPU; : ; TMVA_DNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: TMVA_CNN_CPU; : ; TMVA_CNN_CPU : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Evaluate deep neural network on CPU using batches with size = 1000; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: PyKeras; : ; PyKeras : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; Factory : Evaluate classifier: PyTorch; : ; PyTorch : [dataset] : Loop over test events and fill histograms with classifier response...; : ; : Dataset[dataset] : variable plots are not produces ! The number of variables is 256 , it is larger than 200; : ; : Evaluation results ranked by best signal efficiency and purity (area); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA ; : Name: Method: ROC-integ; : dataset PyTorch : 0.790; : dataset TMVA_CNN_CPU : 0.751; : dataset BDT : 0.750; : dataset TMVA_DNN_CPU : 0.688; : dataset PyKeras : 0.666; : -------------------------------------------------------------------------------------------------------------------; : ; : Testing efficiency compared to training efficiency (overtraining check); : -------------------------------------------------------------------------------------------------------------------; : DataSet MVA Signal efficiency: from test sample (from tra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:42765,test,test,42765,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['test']
Testability," prop = 0); virtual~TEveTrack(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTEveElement::AcceptElement(TEveElement* el); virtual voidTEveElement::AddElement(TEveElement* el); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TGListTreeItem* parent_lti); virtual TGListTreeItem*TEveElement::AddIntoListTree(TGListTree* ltree, TEveElement* parent); virtual TGListTreeItem*TEveElement::AddIntoListTrees(TEveElement* parent); virtual voidTEveElement::AddParent(TEveElement* re); voidAddPathMark(const TEvePathMark& pm); virtual voidTEveProjectable::AddProjected(TEveProjected* p); virtual voidTEveProjectable::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObj",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrack.html:1574,Assert,AssertBBox,1574,root/html528/TEveTrack.html,https://root.cern,https://root.cern/root/html528/TEveTrack.html,1,['Assert'],['AssertBBox']
Testability," proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable ; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:50389,Test,TestStatSampler,50389,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,4,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability," proposal function used with Markov Chain Monte Carlo; RooStats::ProposalHelper ; RooStats::RatioOfProfiledLikelihoodsTestStat implements the ratio of profiled likelihood as test statistic; RooStats::SPlot Class used for making sPlots; RooStats::SamplingDistPlot Class containing the results of the HybridCalculator; RooStats::SamplingDistribution Class containing the results of the HybridCalculator; RooStats::SamplingSummary A summary of acceptance regions for confidence belt; RooStats::SamplingSummaryLookup A simple class used by ConfidenceBelt; RooStats::SequentialProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::SimpleInterval Concrete implementation of ConfInterval for simple 1-D intervals in the form [a,b]; RooStats::SimpleLikelihoodRatioTestStat ; RooStats::TestStatSampler Interface for tools setting limits (producing confidence intervals); RooStats::TestStatistic Interface for a TestStatistic; RooStats::ToyMCImportanceSampler An implementation of importance sampling; RooStats::ToyMCPayload ; RooStats::ToyMCSampler A simple implementation of the TestStatSampler interface; RooStats::ToyMCStudy toy MC study for parallel processing; RooStats::UniformProposal A concrete implementation of ProposalFunction, that uniformly samples the parameter space.; RooStats::UpperLimitMCSModule MCStudy module to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:47110,Test,TestStatSampler,47110,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,8,['Test'],"['TestStatSampler', 'TestStatistic']"
Testability," protected . Assignment operator. ; Definition at line 64 of file TBenchmark.cxx. ◆ Print(). void TBenchmark::Print ; (; Option_t * ; name = """"); const. overridevirtual . Prints parameters of Benchmark name. ; Reimplemented from TObject.; Definition at line 137 of file TBenchmark.cxx. ◆ Reset(). void TBenchmark::Reset ; (; ). virtual . Reset all Benchmarks. ; Definition at line 147 of file TBenchmark.cxx. ◆ Show(). void TBenchmark::Show ; (; const char * ; name). virtual . Stops Benchmark name and Prints results. ; Definition at line 155 of file TBenchmark.cxx. ◆ Start(). void TBenchmark::Start ; (; const char * ; name). virtual . Starts Benchmark with the specified name. ; An independent timer (see class TStopwatch) is started. The name of the benchmark is entered into the list of benchmarks. Benchmark can be stopped via TBenchmark::Stop(). Results can be printed via TBenchmark::Print(). TBenchmark::Show() can be used to stop benchmark and print results. If name is an already existing benchmark, timing will resume. A summary of all benchmarks can be seen via TBenchmark::Summary(). ; Definition at line 172 of file TBenchmark.cxx. ◆ Stop(). void TBenchmark::Stop ; (; const char * ; name). virtual . Terminates Benchmark with specified name. ; Definition at line 201 of file TBenchmark.cxx. ◆ Streamer(). void TBenchmark::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TBenchmark::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 56 of file TBenchmark.h. ◆ Summary(). void TBenchmark::Summary ; (; Float_t & ; rt, . Float_t & ; cp . ). virtual . Prints a summary of all benchmarks. ; Definition at line 214 of file TBenchmark.cxx. Member Data Documentation. ◆ fCpuTime. Float_t* TBenchmark::fCpuTime. protected . Definition at line 37 of file TBenchmark.h. ◆ fNames. TString* TBenchmark::fNames. protected . Definition at line 35 of file TBench",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBenchmark.html:15254,benchmark,benchmark,15254,doc/master/classTBenchmark.html,https://root.cern,https://root.cern/doc/master/classTBenchmark.html,1,['benchmark'],['benchmark']
Testability," proto, string totName, string , string , int lowBin, int highBin, vector<std::string>& syst_x_expectedPrefixNames, vector<std::string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<std::string,std::string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<std::string,double> gammaSyst, map<std::string,double> uniformSyst, map<std::string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<std::string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<std::string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = std::string(""#sigma / #sigma_{SM}""), string YTitle = std::string(""-log likelihood"")). TDirectory * Makedirs(TDirectory* file, vector<std::string> names). TDirectory * Mkdir(TDirectory* file, string name). » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last generated: 2015-03-10 17:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html:11127,log,log,11127,root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['log'],['log']
Testability," provided by TGLHistPainter start with; GL keyword.; General information: plot types and supported options; The following types of plots are provided:. Lego - (TGLLegoPainter); The supported options are:; ; ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars.; ; Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y (if you see; what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:; ; ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines.; ; The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis.; In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:; ; "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system.; ; TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:; ; ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBOX1"": the same as ""glbox"", but spheres are drawn instead of boxes.; ; TH3 as iso-surface(s) - (TGLIsoPainter); The supported option is:; ; ""GLISO"" : TH3 is drawn using iso-surfaces.; ; TF3 (implicit function) - (TGLTF3Painter); The supported option is:; ; ""GLTF3"" : Draw a TF3.; ; Parametric surfaces - (TGLParametricPlot); $ROOTSYS/tutorials/gl/glparametric.C shows how to create parametric equations and; visualize the surface. Interaction with the plots. General information. All the interactions are implemented via standard methods Dist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLHistPainter.html:1510,log,logarithmic,1510,root/html528/TGLHistPainter.html,https://root.cern,https://root.cern/root/html528/TGLHistPainter.html,1,['log'],['logarithmic']
Testability," provided by TGLHistPainter start with; GL keyword.; General information: plot types and supported options; The following types of plots are provided:. Lego - (TGLLegoPainter); The supported options are:; ; ""GLLEGO"" : Draw a lego plot.; ""GLLEGO2"" : Bins with color levels.; ""GLLEGO3"" : Cylindrical bars.; ; Lego painter in cartesian supports logarithmic scales for X, Y, Z.; In polar only Z axis can be logarithmic, in cylindrical only Y (if you see; what it means).; Surfaces (TF2 and TH2 with ""GLSURF"" options) - (TGLSurfacePainter); The supported options are:; ; ""GLSURF"" : Draw a surface.; ""GLSURF1"" : Surface with color levels; ""GLSURF2"" : The same as ""GLSURF1"" but without polygon outlines.; ""GLSURF3"" : Color level projection on top of plot (works only in cartesian coordinate system).; ""GLSURF4"" : Same as ""GLSURF"" but without polygon outlines.; ; The surface painting in cartesian coordinates supports logarithmic scales along X, Y, Z axis.; In polar coordinates only the Z axis can be logarithmic, in cylindrical coordinates only the Y axis.; Additional options to SURF and LEGO - Coordinate systems:; The supported options are:; ; "" "" : Default, cartesian coordinates system.; ""POL"" : Polar coordinates system.; ""CYL"" : Cylindrical coordinates system.; ""SPH"" : Spherical coordinates system.; ; TH3 as boxes (spheres) - (TGLBoxPainter); The supported options are:; ; ""GLBOX"" : TH3 as a set of boxes, size of box is proportional to bin content.; ""GLBOX1"": the same as ""glbox"", but spheres are drawn instead of boxes.; ; TH3 as iso-surface(s) - (TGLIsoPainter); The supported option is:; ; ""GLISO"" : TH3 is drawn using iso-surfaces.; ; TH3 as color boxes - (TGLVoxelPainter); The supported option is:; ; ""GLCOL"" : TH3 is drawn using semi-transparent colored boxes.; See $ROOTSYS/tutorials/gl/glvox1.C.; ; TF3 (implicit function) - (TGLTF3Painter); The supported option is:; ; ""GLTF3"" : Draw a TF3.; ; Parametric surfaces - (TGLParametricPlot); $ROOTSYS/tutorials/gl/glparametric.C shows how t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLHistPainter.html:1510,log,logarithmic,1510,root/html530/TGLHistPainter.html,https://root.cern,https://root.cern/root/html530/TGLHistPainter.html,5,['log'],['logarithmic']
Testability," ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsStudy&operator=(const RooAbsStudy&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidreleaseDetailData(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; voidstoreDetailedOutput(Bool_t flag); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooDataSet*summaryData(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsStudy.html:5032,Test,TestBit,5032,root/html534/RooAbsStudy.html,https://root.cern,https://root.cern/root/html534/RooAbsStudy.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidReleaseRangeX(); voidReleaseRangeY(); voidReleaseRangeZ(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetData(TH1* data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMC(Int_t parm, TH1* MC); static voidTObject::SetObjectStat(Bool_t stat); voidSetRangeX(Int_t low, Int_t high); voidSetRangeY(Int_t low, Int_t high); voidSetRangeZ(Int_t low, Int_t high); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Int_t parm, TH1* weight); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidUnConstrain(Int_t parm); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFractionFitter.html:10093,Test,TestBit,10093,root/html534/TFractionFitter.html,https://root.cern,https://root.cern/root/html534/TFractionFitter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidTProcessID::PutObjectWithID(TObject* obj, UInt_t uid = 0); virtual Int_tTObject::Read(const char* name); virtual voidTProcessID::RecursiveRemove(TObject* obj); voidRemoveUUID(UInt_t number); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTProcessID::SetObjectCount(UInt_t number); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProcessUUID.html:6831,Test,TestBit,6831,root/html530/TProcessUUID.html,https://root.cern,https://root.cern/root/html530/TProcessUUID.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); Bool_tSectionsValid(UInt_t mask) const; voidSetAABoundingBox(const Double_t* origin, const Double_t* halfLengths); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLocalMasterIdentity(); static voidTObject::SetObjectStat(Bool_t stat); Bool_tSetRawSizes(UInt_t reqPnts, UInt_t reqPntsCapacity, UInt_t reqSegs, UInt_t reqSegsCapacity, UInt_t reqPols, UInt_t reqPolsCapacity); voidSetSectionsValid(UInt_t mask); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tType() const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TBuffer3D.html:13542,Test,TestBit,13542,root/html528/TBuffer3D.html,https://root.cern,https://root.cern/root/html528/TBuffer3D.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopDummy(Int_t ipop = 9999); Bool_tPopState(Int_t& nmany, Double_t* point = 0); Bool_tPopState(Int_t& nmany, Int_t level, Double_t* point = 0); virtual voidTObject::Print(Option_t* option = """") const; Int_tPushState(Bool_t ovlp, Int_t ntmany = 0, Int_t startlevel = 0, Double_t* point = 0); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefresh(); voidReleaseInfo(); voidTObject::ResetBit(UInt_t f); Bool_tRestoreState(Int_t& nmany, TGeoCacheState* state, Double_t* point = 0); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoNodeCache.html:5976,Test,TestBit,5976,root/html534/TGeoNodeCache.html,https://root.cern,https://root.cern/root/html534/TGeoNodeCache.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDLLSignificanceMCSModule&operator=(const RooDLLSignificanceMCSModule&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Bool_tprocessAfterFit(Int_t); virtual Bool_tRooAbsMCStudyModule::processBeforeGen(Int_t); virtual Bool_tRooAbsMCStudyModule::processBetweenGenAndFit(Int_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDLLSignificanceMCSModule.html:5796,Test,TestBit,5796,root/html534/RooDLLSignificanceMCSModule.html,https://root.cern,https://root.cern/root/html534/RooDLLSignificanceMCSModule.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TGridCollection&operator=(const TGridCollection&); virtual Bool_tOverlapCollection(TGridCollection*); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual Bool_tPrepare(Bool_t = kFALSE); virtual voidPrint(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Bool_tRemove(TMap*); virtual voidReset(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual Bool_tSelectFile(const char*, Int_t = -1, Int_t = -1); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tSetExportUrl(const char* = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetTag(const char*, const char*, TMap*); virtual voidSetTagFilterList(TList*); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tStage(Bool_t = kFALSE, Option_t* = """"); virtual voidStatus(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGridCollection.html:5967,Test,TestBit,5967,root/html528/TGridCollection.html,https://root.cern,https://root.cern/root/html528/TGridCollection.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject*operator()(const char* name) const; virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual voidPrint(Option_t* option, Int_t recurse) const; virtual voidPrint(Option_t* option, const char* wildcard, Int_t recurse = 1) const; virtual voidPrint(Option_t* option, TPRegexp& regexp, Int_t recurse = 1) const; virtual Int_tTObject::Read(const char* name); virtual voidRecursiveRemove(TObject* obj); virtual TObject*Remove(TObject* obj); voidRemoveAll(); virtual voidRemoveAll(TCollection* col); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); static voidStartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tWrite(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCollection.html:6402,Test,TestBit,6402,root/html534/TCollection.html,https://root.cern,https://root.cern/root/html534/TCollection.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsStudy&operator=(const RooAbsStudy&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidreleaseDetailData(); voidTObject::ResetBit(UInt_t f); RooAbsStudy(); RooAbsStudy(const RooAbsStudy& other); RooAbsStudy(const char* name, const char* title); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidstoreDetailedOutput(Bool_t flag); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); RooDataSet*summaryData(); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsStudy.html:5119,Test,TestBit,5119,root/html602/RooAbsStudy.html,https://root.cern,https://root.cern/root/html602/RooAbsStudy.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFunctionTemplate&operator=(const TFunctionTemplate& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Long_tProperty() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFunctionTemplate(const TFunctionTemplate& orig); TFunctionTemplate(FuncTempInfo_t* info, TClass* cl); virtual boolUpdate(FuncTempInfo_t* info); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFunctionTemplate.html:5023,Test,TestBit,5023,root/html602/TFunctionTemplate.html,https://root.cern,https://root.cern/root/html602/TFunctionTemplate.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDecompLU&operator=(const TDecompLU& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMatrix(const TMatrixD& a); static voidTObject::SetObjectStat(Bool_t stat); Double_tTDecompBase::SetTol(Double_t newTol); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Bool_tSolve(TVectorD& b); virtual Bool_tSolve(TMatrixDColumn& b); virtual TVectorDSolve(const TVectorD& b, Bool_t& ok); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTransSolve(TVectorD& b); virtual Bool_tTransSolve(TMatrixDColumn& b); virtual TVectorDTransSolve(const TVectorD& b, Bool_t& ok); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDecompLU.html:6034,Test,TestBit,6034,root/html534/TDecompLU.html,https://root.cern,https://root.cern/root/html534/TDecompLU.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TPoints3D&operator=(const TPoints3D&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidPaintPoints(Int_t, Float_t*, Option_t*); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetLastPosition(Int_t idx); virtual Int_tTPoints3DABC::SetNextPoint(Float_t x, Float_t y, Float_t z); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = """"); virtual Int_tSetPoint(Int_t point, Float_t x, Float_t y, Float_t z)MENU ; virtual Int_tSetPoints(Int_t n, Float_t* p = 0, Option_t* option = """"); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tSize() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPoints3D.html:6340,Test,TestBit,6340,root/html530/TPoints3D.html,https://root.cern,https://root.cern/root/html530/TPoints3D.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSPlot&operator=(const TSPlot&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidRefillHist(Int_t type, Int_t var, Int_t nbins, Double_t min, Double_t max, Int_t nspecies = -1); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInitialNumbersOfSpecies(Int_t* numbers); voidSetNEvents(Int_t ne); voidSetNSpecies(Int_t ns); voidSetNX(Int_t nx); voidSetNY(Int_t ny); static voidTObject::SetObjectStat(Bool_t stat); voidSetTree(TTree* tree); voidSetTreeSelection(const char* varexp = """", const char* selection = """", Long64_t firstentry = 0); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSPlot(); TSPlot(const TSPlot&); TSPlot(Int_t nx, Int_t ny, Int_t ne, Int_t ns, TTree* tree); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:14092,Test,TestBit,14092,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); doubleoperator()(unsigned int x, double y, double z) const; RooCFunction3Ref<double,unsigned int,double,double>&operator=(const RooCFunction3Ref<double,unsigned int,double,double>&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); RooCFunction3Ref<double,unsigned int,double,double>(double(*)(unsigned int,double,double) ptr = 0); RooCFunction3Ref<double,unsigned int,double,double>(const RooCFunction3Ref<double,unsigned int,double,double>&); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer& R__b); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCFunction3Ref_double_unsigned_int_double_double_.html:5402,Test,TestBit,5402,root/html602/RooCFunction3Ref_double_unsigned_int_double_double_.html,https://root.cern,https://root.cern/root/html602/RooCFunction3Ref_double_unsigned_int_double_double_.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," ptrSettings->learningRate (); 852 << "", momentum = "" << ptrSettings->momentum (); 853 << "", repetitions = "" << ptrSettings->repetitions (); 854 << Endl;; 855 ; 856 ptrSettings->setProgressLimits ((idxSetting)*100.0/(fSettings.size ()),; 857 (idxSetting+1)*100.0/(fSettings.size ()));; 858 ; 859 const std::vector<double>& dropConfig = ptrSettings->dropFractions ();; 860 if (!dropConfig.empty ()) {; 861 Log () << kINFO << ""Drop configuration"" << Endl; 862 << "" drop repetitions = "" << ptrSettings->dropRepetitions(); 863 << Endl;; 864 }; 865 ; 866 int idx = 0;; 867 for (auto f : dropConfig) {; 868 Log () << kINFO << "" Layer "" << idx << "" = "" << f << Endl;; 869 ++idx;; 870 }; 871 Log () << kINFO << Endl;; 872 ; 873 DNN::Steepest minimizer(ptrSettings->learningRate(),; 874 ptrSettings->momentum(),; 875 ptrSettings->repetitions());; 876 net.train(weights, trainPattern, testPattern, minimizer, *ptrSettings.get());; 877 ptrSettings.reset();; 878 Log () << kINFO << Endl;; 879 idxSetting++;; 880 }; 881 size_t weightIndex = 0;; 882 for (size_t l = 0; l < fNet.GetDepth(); l++) {; 883 auto & layerWeights = fNet.GetLayer(l).GetWeights();; 884 for (Int_t j = 0; j < layerWeights.GetNcols(); j++) {; 885 for (Int_t i = 0; i < layerWeights.GetNrows(); i++) {; 886 layerWeights(i,j) = weights[weightIndex];; 887 weightIndex++;; 888 }; 889 }; 890 auto & layerBiases = fNet.GetLayer(l).GetBiases();; 891 if (l == 0) {; 892 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 893 layerBiases(i,0) = weights[weightIndex];; 894 weightIndex++;; 895 }; 896 } else {; 897 for (Int_t i = 0; i < layerBiases.GetNrows(); i++) {; 898 layerBiases(i,0) = 0.0;; 899 }; 900 }; 901 }; 902 if (!fExitFromTraining) fIPyMaxIter = fIPyCurrentIter;; 903 ExitFromTraining();; 904}; 905 ; 906////////////////////////////////////////////////////////////////////////////////; 907 ; 908void TMVA::MethodDNN::TrainGpu(); 909{; 910 ; 911#ifdef DNNCUDA // Included only if DNNCUDA flag is set.; 912 Log() << kINFO << ""Start of neu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:31447,Log,Log,31447,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability," public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. TH1F*fB_histoThe b Histo; TH1F*fB_histo_shadedThe b Histo shaded; TLine*fData_testStat_lineThe line for the data value of the test statistic; TLegend*fLegendThe legend of the plot; TVirtualPad*fPadThe pad where it has been drawn; TH1F*fSb_histoThe sb Histo; TH1F*fSb_histo_shadedThe sb Histo shaded; boolfVerboseverbosity flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector<double>& b_values, double testStat_data, int n_bins, bool verbosity = true); HybridPlot constructor. ~HybridPlot(); destructor. void Draw(const char* options = """"); draw the S+B and B histogram in the current canvas. void DumpToFile(const char* RootFileName, const char* options); All the objects are written to rootfile. void DumpToImage(const char* filename). double GetHistoCenter(TH1* histo, double n_rms = 1, bool display_result = false); Get the center of the histo. double* GetHistoPvals(TH1* histo, double percentage). double GetMedian(TH1* histo). HybridPlot(const char* name, const char* title, const vector<double>& sb_values, const vector",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridPlot.html:7160,test,test,7160,root/html602/RooStats__HybridPlot.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridPlot.html,2,['test'],['test']
Testability," pxm); virtual voidTGX11::SetWindowName(Window_t id, char* name); virtual voidTGX11::SetWMPosition(Window_t id, Int_t x, Int_t y); virtual voidTGX11::SetWMSize(Window_t id, UInt_t w, UInt_t h); virtual voidTGX11::SetWMSizeHints(Window_t id, UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); virtual voidTGX11::SetWMState(Window_t id, EInitialState state); virtual voidTGX11::SetWMTransientHint(Window_t id, Window_t main_id); virtual voidTGX11::ShapeCombineMask(Window_t id, Int_t x, Int_t y, Pixmap_t mask); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTGX11::SubtractRegion(Region_t rega, Region_t regb, Region_t result); virtual Int_tTGX11::SupportsExtension(const char* ext) const; voidTGX11::Sync(Int_t mode); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Int_tTextWidth(FontStruct_t font, const char* s, Int_t len); virtual voidTGX11::TranslateCoordinates(Window_t src, Window_t dest, Int_t src_x, Int_t src_y, Int_t& dest_x, Int_t& dest_y, Window_t& child); virtual voidTGX11::UnionRectWithRegion(Rectangle_t* rect, Region_t src, Region_t dest); virtual voidTGX11::UnionRegion(Region_t rega, Region_t regb, Region_t result); virtual voidTGX11::UnmapWindow(Window_t id); virtual voidTGX11::Update(Int_t mode = 0); virtual voidTGX11::UpdateWindow(Int_t mode); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual voidTGX11::Warp(Int_t ix, Int_t iy, Window_t id = 0); virtual voidTGX11::WMDeleteNotify(Window_t id); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Int_tTGX11::WriteGIF(char* name); virtual voidTGX11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11TTF.html:20343,Test,TestBits,20343,root/html528/TGX11TTF.html,https://root.cern,https://root.cern/root/html528/TGX11TTF.html,1,['Test'],['TestBits']
Testability," py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; virtual Bool_t IsComposite () const;  ; virtual Bool_t IsReflected () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t TestShapeBit (UInt_t f) const;  ; Int_t TestShapeBits (UInt_t f) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoShapeAssembly.html:7539,Test,TestShapeBit,7539,doc/master/classTGeoShapeAssembly.html,https://root.cern,https://root.cern/doc/master/classTGeoShapeAssembly.html,2,['Test'],"['TestShapeBit', 'TestShapeBits']"
Testability," pyobject.; 109 if (!Initialize()); 110 return nullptr;; 111 ; 112// check validity of cast; 113 if (!CPPInstance_Check(pyobject)); 114 return nullptr;; 115 ; 116// get held object (may be null); 117 return ((CPPInstance*)pyobject)->GetObject();; 118}; 119 ; 120//-----------------------------------------------------------------------------; 121PyObject* CPyCppyy::Instance_FromVoidPtr(; 122 void* addr, const std::string& classname, bool python_owns); 123{; 124// Bind the addr to a python object of class defined by classname.; 125 if (!Initialize()); 126 return nullptr;; 127 ; 128// perform cast (the call will check TClass and addr, and set python errors); 129 PyObject* pyobject = BindCppObjectNoCast(addr, Cppyy::GetScope(classname), false);; 130 ; 131// give ownership, for ref-counting, to the python side, if so requested; 132 if (python_owns && CPPInstance_Check(pyobject)); 133 ((CPPInstance*)pyobject)->PythonOwns();; 134 ; 135 return pyobject;; 136}; 137 ; 138namespace CPyCppyy {; 139// version with C type arguments only for use with Numba; 140PyObject* Instance_FromVoidPtr(void* addr, const char* classname, int python_owns) {; 141 return Instance_FromVoidPtr(addr, std::string(classname), (bool)python_owns);; 142}; 143} // namespace CPyCppyy; 144 ; 145//-----------------------------------------------------------------------------; 146bool CPyCppyy::Scope_Check(PyObject* pyobject); 147{; 148// Test if the given object is of a CPPScope derived type.; 149 if (!Initialize()); 150 return false;; 151 ; 152 return CPPScope_Check(pyobject);; 153}; 154 ; 155//-----------------------------------------------------------------------------; 156bool CPyCppyy::Scope_CheckExact(PyObject* pyobject); 157{; 158// Test if the given object is of a CPPScope type.; 159 if (!Initialize()); 160 return false;; 161 ; 162 return CPPScope_CheckExact(pyobject);; 163}; 164 ; 165//-----------------------------------------------------------------------------; 166bool CPyCppyy::Instance_Check(PyObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/API_8cxx_source.html:4937,Test,Test,4937,doc/master/API_8cxx_source.html,https://root.cern,https://root.cern/doc/master/API_8cxx_source.html,1,['Test'],['Test']
Testability, pythonizing vector; [#11484] - roottest/root/meta/genreflex/ROOT-5768 needs to be enabled; [#11411] - PyROOT Python list of strings -> std::initializer_list< std::string > conversion is broken; [#11395] - Migrate to pcre2; [#11353] - Compiled program with libNew.so crash; [#11304] - WW option for fit functions as the W option; [#11238] - an old bug in ROOT v6 TAB completion ?; [#11197] - Build github release into version release procedure; [#11190] - ROOT compiled with -Ddev=ON crashes when type # in ROOT session; [#11021] - [Fit Panel] Fitting to Gaus + Pol0 in two steps is unnecessarily hard; [#10891] - [RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; [#10871] - [DF][ntuple] Better task splitting with RDF+RNTuple; [#10866] - ACLiC flags parsing for compiler command line options broken in certain cases; [#10684] - PyROOT Cannot use SofieFunctor in Python; [#10664] - [ntuple] Expose fixed-size arrays as RVecs in RDF datasource; [#10395] - [core] CleanCompiledMacros behavior; [#10222] - Suspicious behavior of TUnuran::SampleMulti; [#10221] - ROOT interpreter built with C++17 does not find std::optional without including it first; [#10146] - Byte swapped floats in TMVA sofie on big endian architectures (s390x); [#10061] - Distributed RDataFrame test failures on Mac/ARM; [#9917] - SetRange and SetRangeUser fail silently; [#9594] - Systematic build failure of ROOT master in the LCG DEBUG builds since Jan 15th; [#9524] - Failure to build/run when MACOSX_DEPLOYMENT_TARGET is set to 11 or higher; [#9514] - Printed SVG image contains newline cutting through XML tags; [#9489] - [RF] Cannot turn off useless messages with RooMCStudy unbinned fits + Progress bar would be better.; [#9292] - Integer overflow in TTreeCache::FillBuffer; [#8959] - ninja clean does not remove modules.idx; [#8952] - Make hadd return a non-zero exit code when encountering a corrupted file; [#8942] - cannot buid the dependent project; [#8794] - [TGNumberEntry] ce,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:36258,test,test,36258,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['test'],['test']
Testability," q, const Double_t* probSum); virtual Double_tTF2::GetRandom(); virtual Double_tTF2::GetRandom(Double_t xmin, Double_t xmax); virtual voidTF2::GetRandom2(Double_t& xrandom, Double_t& yrandom); virtual voidGetRandom3(Double_t& xrandom, Double_t& yrandom, Double_t& zrandom); virtual voidGetRange(Double_t& xmin, Double_t& xmax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& xmax, Double_t& ymax) const; virtual voidGetRange(Double_t& xmin, Double_t& ymin, Double_t& zmin, Double_t& xmax, Double_t& ymax, Double_t& zmax) const; virtual Double_tGetSave(const Double_t* x); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tTF1::GetX(Double_t y, Double_t xmin = 0, Double_t xmax = 0, Double_t epsilon = 1.E-10, Int_t maxiter = 100, Bool_t logx = false) const; TAxis*TF1::GetXaxis() const; virtual Double_tTF1::GetXmax() const; virtual Double_tTF1::GetXmin() const; TAxis*TF1::GetYaxis() const; virtual Double_tTF2::GetYmax() const; virtual Double_tTF2::GetYmin() const; TAxis*TF1::GetZaxis() const; virtual Double_tGetZmax() const; virtual Double_tGetZmin() const; virtual Double_tTF1::GradientPar(Int_t ipar, const Double_t* x, Double_t eps = 0.01); virtual voidTF1::GradientPar(const Double_t* x, Double_t* grad, Double_t eps = 0.01); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTF1::InitArgs(const Double_t* x, const Double_t* params); static voidTF1::InitStandardFunctions(); virtual voidTObject::Inspect() constMENU ; virtual Double_tIntegral(Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 0.000001); virtual Double_tIntegral(Double_t ax, Double_t bx, Double_t ay, Double_t by, Double_t epsilon = 0.000001); virtual Double_tIntegral(Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TF3.html:8810,log,logx,8810,root/html530/TF3.html,https://root.cern,https://root.cern/root/html530/TF3.html,3,['log'],['logx']
Testability," query specified by ref. ;  ; Int_t Retrieve (Int_t query, const char *path=0);  Send retrieve request for the qry-th query in fQueries. ;  ; Int_t SavePerfTree (const char *pf=0, const char *qref=0);  Save performance information from TPerfStats to file 'pf'. ;  ; void SendDataSetStatus (const char *msg, UInt_t n, UInt_t tot, Bool_t st);  Send or notify data set status. ;  ; Bool_t SendingLogToWindow () const;  ; void SendLogToWindow (Bool_t mode);  ; void SetActive (Bool_t=kTRUE);  ; virtual void SetAlias (const char *alias="""");  Set an alias for this session. ;  ; void SetDataPoolUrl (const char *url);  ; virtual Int_t SetDataSetTreeName (const char *dataset, const char *treename);  Set/Change the name of the default tree. ;  ; void SetDrawFeedbackOption (TDrawFeedback *f, Option_t *opt);  Set draw feedback option. ;  ; void SetInputDataFile (const char *datafile);  Set the file to be used to optimally distribute the input data objects. ;  ; void SetLogLevel (Int_t level, UInt_t mask=TProofDebug::kAll);  Set server logging level. ;  ; void SetManager (TProofMgr *mgr);  Set manager and schedule its destruction after this for clean operations. ;  ; void SetMaxDrawQueries (Int_t max);  Set max number of draw queries whose results are saved. ;  ; Int_t SetParallel (Int_t nodes=-1, Bool_t random=kFALSE);  Tell PROOF how many slaves to use in parallel. ;  ; void SetParameter (const char *par, const char *value);  Set input list parameter. ;  ; void SetParameter (const char *par, Double_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Int_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long64_t value);  Set an input list parameter. ;  ; void SetParameter (const char *par, Long_t value);  Set an input list parameter. ;  ; void SetPerfTree (const char *pf=""perftree.root"", Bool_t withWrks=kFALSE);  Enable/Disable saving of the performance tree. ;  ; void SetPrintProgress (PrintProgress_t pp);  ; void SetProgre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:17994,log,logging,17994,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,3,['log'],['logging']
Testability," query, . const char * ; url . ). Send archive request for the qry-th query in fQueries. ; Definition at line 6057 of file TProof.cxx. ◆ AskForOutput(). void TProof::AskForOutput ; (; TSlave * ; sl). private . Master asks for output from worker sl. ; Definition at line 4334 of file TProof.cxx. ◆ AskParallel(). void TProof::AskParallel ; (; ). private . Ask the for the number of parallel slaves. ; Definition at line 2077 of file TProof.cxx. ◆ AskStatistics(). void TProof::AskStatistics ; (; ). private . Ask the for the statistics of the slaves. ; Definition at line 2022 of file TProof.cxx. ◆ AssertDataSet(). Int_t TProof::AssertDataSet ; (; TDSet * ; dset, . TList * ; input, . TDataSetManager * ; mgr, . TString & ; emsg . ). staticprotected . Make sure that dataset is in the form to be processed. ; This may mean retrieving the relevant info from the dataset manager or from the attached input list. Returns 0 on success, -1 on error ; Definition at line 12014 of file TProof.cxx. ◆ AssertMacroPath(). void TProof::AssertMacroPath ; (; const char * ; macro). staticprotected . Make sure that the directory path contained by macro is in the macro path. ; Definition at line 8599 of file TProof.cxx. ◆ AssertPath(). Int_t TProof::AssertPath ; (; const char * ; path, . Bool_t ; writable . ). protected . Make sure that 'path' exists; if 'writable' is kTRUE, make also sure that the path is writable. ; Definition at line 1269 of file TProof.cxx. ◆ Broadcast() [1/6]. Int_t TProof::Broadcast ; (; const char * ; str, . Int_t ; kind, . TList * ; slaves . ). private . Broadcast a character string buffer to all slaves in the specified list. ; Use kind to set the TMessage what field. Returns the number of slaves the message was sent to. Returns -1 in case of error. ; Definition at line 2518 of file TProof.cxx. ◆ Broadcast() [2/6]. Int_t TProof::Broadcast ; (; const char * ; str, . Int_t ; kind = kMESS_STRING, . ESlaves ; list = kActive . ). private . Broadcast a character string buffer to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:66191,Assert,AssertMacroPath,66191,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Assert'],['AssertMacroPath']
Testability," questions of parameter dependence, see the discussion above on positive-definiteness. Possible other mathematical problems are the following:. Excessive numerical round off - be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution - the function may have unphysical local minima, especially at infinity in some variables. 5.10 Minuit2 Package; Minuit2 is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package. Compared with the TMinuit class, which is a direct conversion from FORTRAN to C++, Minuit2 is a complete redesign and re-implementation of the package. This new version provides all the functionality present in the old FORTRAN version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains some fixes and small improvements and this new functionality: * The possibility to set single side parameter limits * the FUMILI algorithm (see the next paragraph “FUMILI Minimization Package”), which is an optimized method for least square and log likelihood minimizations.; Minuit2 has been originally developed by M. Winkler and F. James in the SEAL project. More information can be found on the MINUIT Web Site and in particular at the following documentation page at http://www.cern.ch/minuit/doc/doc.html.; A detailed User Guide for Minuit2 exists, describing the API of the internal classes. ROOT uses Minuit2 for fitting via the Minuit2Minimizer class which implements the ROOT::Math::Minimizer interface.; Minuit2 is also distributed as an independent package of ROOT and can be built without any other dependency on the ROOT libraries.; Examples on how to use the Minuit2 and Fumili2 plug-ins are provided in the tutorials’ directory $ROOTSYS/tutorials/fit: minuit2FitBench.C, minuit2FitBench2D.C and minuit2GausFit.C. More information on the classes and functions present in Minuit2 is available at online referen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:225891,log,log,225891,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['log']
Testability," r0;; sw.Start();; for (i=0;i<N;i++) {; x = f1->GetRandom();; }; printf(""GausTF1........... %8.3f"",sw.CpuTime()*cpn);; gRandom = r1;; sw.Start();; for (i=0;i<N;i++) {; x = f1->GetRandom();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; gRandom = r2;; sw.Start();; for (i=0;i<N;i++) {; x = f1->GetRandom();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; gRandom = r3;; sw.Start();; for (i=0;i<N;i++) {; x = f1->GetRandom();; }; printf("" %8.3f\n"",sw.CpuTime()*cpn);; ; TF1 *f2 = new TF1(""f2"",""landau"",-5,15);; f2->SetParameters(1,0,1);; ; gRandom = r0;; sw.Start();; for (i=0;i<N;i++) {; x = f2->GetRandom();; }; printf(""LandauTF1......... %8.3f"",sw.CpuTime()*cpn);; gRandom = r1;; sw.Start();; for (i=0;i<N;i++) {; x = f2->GetRandom();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; gRandom = r2;; sw.Start();; for (i=0;i<N;i++) {; x = f2->GetRandom();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; gRandom = r3;; sw.Start();; for (i=0;i<N;i++) {; x = f2->GetRandom();; }; printf("" %8.3f\n"",sw.CpuTime()*cpn);; ; // test using Unuran; #if __has_include(""TUnuran.h""); TUnuran unr0(r0);; TUnuran unr1(r1);; TUnuran unr2(r2);; TUnuran unr3(r3);; ; // continuous distribution (ex. Gaus); TUnuranContDist dist(f1);; // use arou method (is probably the fastest); unr0.Init(dist,""arou"");; unr1.Init(dist,""arou"");; unr2.Init(dist,""arou"");; unr3.Init(dist,""arou"");; ; sw.Start();; for (i=0;i<N;i++) {; x = unr0.Sample();; }; printf(""GausUNURAN........ %8.3f"",sw.CpuTime()*cpn);; sw.Start();; for (i=0;i<N;i++) {; x = unr1.Sample();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; sw.Start();; for (i=0;i<N;i++) {; x = unr2.Sample();; }; printf("" %8.3f"",sw.CpuTime()*cpn);; sw.Start();; for (i=0;i<N;i++) {; x = unr3.Sample();; }; printf("" %8.3f\n"",sw.CpuTime()*cpn);; ; // Poisson (need to initialize before with Poisson mu value); ; unr0.InitPoisson(10);; unr1.InitPoisson(10);; unr2.InitPoisson(10);; unr3.InitPoisson(10);; ; sw.Start();; for (i=0;i<N;i++) {; x = unr0.SampleDiscr();; }; printf(""PoissonUNURAN(10). %8.3f"",sw.CpuTime()*cpn);; s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/testrandom_8C.html:12668,test,test,12668,doc/master/testrandom_8C.html,https://root.cern,https://root.cern/doc/master/testrandom_8C.html,1,['test'],['test']
Testability," ranging from firstybin to lastybin included.; By default, bins 1 to ny are included; When all bins are included, the number of entries in the projection; is set to the number of entries of the 2-D histogram, otherwise; the number of entries is incremented by 1 for all non empty cells. if option ""d"" is specified, the profile is drawn in the current pad. if option ""o"" original axis range of the taget axes will be; kept, but only bins inside the selected range will be filled. The option can also be used to specify the projected profile error type.; Values which can be used are 's', 'i', or 'g'. See TProfile::BuildOptions for details. Using a TCutG object, it is possible to select a sub-range of a 2-D histogram.; One must create a graphical cut (mouse or C++) and specify the name; of the cut between [] in the option.; For example, with a TCutG named ""cutg"", one can call:; myhist->ProfileX("" "",firstybin,lastybin,""[cutg]"");; To invert the cut, it is enough to put a ""-"" in front of its name:; myhist->ProfileX("" "",firstybin,lastybin,""[-cutg]"");; It is possible to apply several cuts ("","" means logical AND):; myhist->ProfileX("" "",firstybin,lastybin,[cutg1,cutg2]"");. NOTE that if a TProfile named ""name"" exists in the current directory or pad with; a compatible axis the profile is reset and filled again with the projected contents of the TH2.; In the case of axis incompatibility an error is reported and a NULL pointer is returned. NOTE that the X axis attributes of the TH2 are copied to the X axis of the profile. NOTE that the default under- / overflow behavior differs from what ProjectionX; does! Profiles take the bin center into account, so here the under- and overflow; bins are ignored by default. TProfile * ProfileY(const char* name = ""_pfy"", Int_t firstxbin = 1, Int_t lastxbin = -1, Option_t* option = """") const; *-*-*-*-*Project a 2-D histogram into a profile histogram along Y*-*-*-*-*-*; *-* ========================================================. The projection is made",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2.html:44057,log,logical,44057,root/html528/TH2.html,https://root.cern,https://root.cern/root/html528/TH2.html,3,['log'],['logical']
Testability," reader, too; 113 Float_t spec1,spec2;; 114 reader->AddSpectator( ""spec1:=var1*2"", &spec1 );; 115 reader->AddSpectator( ""spec2:=var1*3"", &spec2 );; 116 ; 117 // --- Book the MVA methods; 118 ; 119 TString dir = ""datasetreg/weights/"";; 120 TString prefix = ""TMVARegression"";; 121 ; 122 // Book method(s); 123 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; 124 if (it->second) {; 125 TString methodName = it->first + "" method"";; 126 TString weightfile = dir + prefix + ""_"" + TString(it->first) + "".weights.xml"";; 127 reader->BookMVA( methodName, weightfile );; 128 }; 129 }; 130 ; 131 // Book output histograms; 132 TH1* hists[100];; 133 Int_t nhists = -1;; 134 for (std::map<std::string,int>::iterator it = Use.begin(); it != Use.end(); it++) {; 135 TH1* h = new TH1F( it->first.c_str(), TString(it->first) + "" method"", 100, -100, 600 );; 136 if (it->second) hists[++nhists] = h;; 137 }; 138 nhists++;; 139 ; 140 // Prepare input tree (this must be replaced by your data source); 141 // in this example, there is a toy tree with signal and one with background events; 142 // we'll later on use only the ""signal"" events for the test in this example.; 143 //; 144 TFile *input(0);; 145 TString fname = ""./tmva_reg_example.root"";; 146 if (!gSystem->AccessPathName( fname )) {; 147 input = TFile::Open( fname ); // check if file in local directory exists; 148 }; 149 else {; 150 TFile::SetCacheFileDir(""."");; 151 input = TFile::Open(""http://root.cern/files/tmva_reg_example.root"", ""CACHEREAD""); // if not: download from ROOT server; 152 }; 153 if (!input) {; 154 std::cout << ""ERROR: could not open data file"" << std::endl;; 155 exit(1);; 156 }; 157 std::cout << ""--- TMVARegressionApp : Using input file: "" << input->GetName() << std::endl;; 158 ; 159 // --- Event loop; 160 ; 161 // Prepare the tree; 162 // - here the variable names have to corresponds to your tree; 163 // - you can use the same variables as above which is slightly faster,; 164 // but of course y",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html:4718,test,test,4718,doc/master/TMVARegressionApplication_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVARegressionApplication_8C_source.html,1,['test'],['test']
Testability," rebuilt. TTree* CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Copy a tree with selection. IMPORTANT:. The returned copied tree stays connected with the original tree; until the original tree is deleted. In particular, any changes; to the branch addresses in the original tree are also made to; the copied tree. Any changes made to the branch addresses of the; copied tree are overridden anytime the original tree changes its; branch addresses. When the original tree is deleted, all the; branch addresses of the copied tree are set to zero. For examples of CopyTree, see the tutorials:. copytree. Example macro to copy a subset of a tree to a new tree. The input file was generated by running the program in; $ROOTSYS/test/Event in this way:. ./Event 1000 1 1 1. copytree2. Example macro to copy a subset of a tree to a new tree. One branch of the new tree is written to a separate file. The input file was generated by running the program in; $ROOTSYS/test/Event in this way:. ./Event 1000 1 1 1. copytree3. Example macro to copy a subset of a tree to a new tree. Only selected entries are copied to the new tree.; NOTE that only the active branches are copied. TBasket* CreateBasket(TBranch* ); Create a basket for this tree and given branch. void Delete(Option_t* option = """"); Delete this tree from memory or/and disk. if option == ""all"" delete Tree object from memory AND from disk; all baskets on disk are deleted. All keys with same name; are deleted.; if option =="""" only Tree object in memory is deleted. void DirectoryAutoAdd(TDirectory* ); Called by TKey and TObject::Clone to automatically add us to a directory; when we are read from a file. Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Draw expression varexp for specified entries.; Returns -1 in case of error or number of selected events in case of success. This function a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTree.html:60836,test,test,60836,root/html528/TTree.html,https://root.cern,https://root.cern/root/html528/TTree.html,6,['test'],['test']
Testability," referenced object has a fUniqueID, a pointer to this unique object may be found using fObjects->At(fUniqueID). In the same way, when a TRef::GetObject is called, GetObject uses its own fUniqueID to find the pointer to the referenced object. See TProcessID::GetObjectWithID and PutObjectWithID.; 11.4.4.2 Object Number; When an object is referenced, a unique identifier is computed and stored in both the fUniqueID of the referenced and referencing object. This uniqueID is computed by incrementing by one the static global in TProcessID::fgNumber. The fUniqueID is the serial object number in the current session. One can retrieve the current fgNumber value by calling the static function TProcessID::GetObjectCount at any time or can set this number by TProcessID::SetObjectCount. To avoid a growing table of fObjects in TProcessID, in case, for example, one processes many events in a loop, it might be necessary to reset the object number at the end of processing of one event. See an example in $ROOTSYS/test/Event.cxx (look at function Build). The value of ObjectNumbermay be saved at the beginning of one event and reset to this original value at the end of the event. These actions may be nested.; saveNumber = TProcessID::GetObjectCount();; ...; TProcessID::SetObjectCount(savedNumber);; 11.4.5 Action on Demand; The normal behavior of a TRef has been described above. In addition, TRef supports “Actions on Demand”. It may happen that the referenced object is not yet in the memory, on a separate file or not yet computed. In this case, TRef is able to execute automatically an action:. Call to a compiled function (static function of member function); Call to an interpreted function; Execution of a Cling script. 11.4.5.1 How to Select This Option?; In the definition of the TRef data member in the original class, do:; TRef fRef; //EXEC:execName points to something; When the special keyword ""EXEC:"" is found in the comment field of the member, the next string is assumed to be the name o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:485258,test,test,485258,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability," regression foam from; file 'foam.root' and create a ROOT macro 'output.C', which; draws all PDEFoam cells with little boxes. The latter are; filled with colors according to the target value stored in the; cell. Also the cell number is drawn. TFile file(""foam.root"");; TMVA::PDEFoam *foam = (TMVA::PDEFoam*) gDirectory->Get(""MonoTargetRegressionFoam"");; foam->RootPlot2dim(""output.C"",""cell_value,cellnumber"");; gROOT->Macro(""output.C"");. void FillBinarySearchTree(const TMVA::Event* ev); Insert event to internal foam's density estimator; PDEFoamDensityBase. void DeleteBinarySearchTree(); Delete the foam's density estimator, which contains the binary; search tree. Float_t VarTransform(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransform(const vector<Float_t>& invec) const. Float_t VarTransformInvers(Int_t idim, Float_t x) const. std::vector<Float_t> VarTransformInvers(const vector<Float_t>& invec) const. PDEFoamDensityBase* GetDistr() const; get internal density. { assert(fDistr); return fDistr; }. void Initialize(); ---------- Foam creation functions. {}. void Finalize(); function to call after foam is grown. {}. void SetnCells(Long_t nCells); {fNCells =nCells;}. void SetnSampl(Long_t nSampl); {fNSampl =nSampl;}. void SetnBin(Int_t nBin); {fNBin = nBin;}. void SetEvPerBin(Int_t EvPerBin); {fEvPerBin =EvPerBin;}. void SetDensity(TMVA::PDEFoamDensityBase* dens); { fDistr = dens; }. Int_t GetTotDim() const; coverity[ -tainted_data_return ]. {return fDim; }. TString GetFoamName() const; {return fName; }. UInt_t GetNActiveCells() const; {return fNoAct;}. UInt_t GetNInActiveCells() const; {return GetNCells()-GetNActiveCells();}. UInt_t GetNCells() const; {return fNCells;}. PDEFoamCell* GetRootCell() const; {return fCells[0];}. void SetNmin(UInt_t val); Getters and Setters for user cut options. { fNmin=val; }. UInt_t GetNmin(); { return fNmin; }. void SetMaxDepth(UInt_t maxdepth); { fMaxDepth = maxdepth; }. UInt_t GetMaxDepth() const; { return fMaxDepth; }. Double_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoam.html:22868,assert,assert,22868,root/html530/TMVA__PDEFoam.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoam.html,5,['assert'],['assert']
Testability," regularisation parameter ;  ; Int_t RegularizeBins (int start, int step, int nbin, ERegMode regmode);  add regularisation conditions for a group of bins ;  ; Int_t RegularizeBins2D (int start_bin, int step1, int nbin1, int step2, int nbin2, ERegMode regmode);  add regularisation conditions for 2d unfolding ;  ; Int_t RegularizeCurvature (int left_bin, int center_bin, int right_bin, Double_t scale_left=1.0, Double_t scale_right=1.0);  add a regularisation condition on the curvature of three truth bin ;  ; Int_t RegularizeDerivative (int left_bin, int right_bin, Double_t scale=1.0);  add a regularisation condition on the difference of two truth bin ;  ; Int_t RegularizeSize (int bin, Double_t scale=1.0);  add a regularisation condition on the magnitude of a truth bin ;  ; virtual Int_t ScanLcurve (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **lCurve, TSpline **logTauX=nullptr, TSpline **logTauY=nullptr, TSpline **logTauCurvature=nullptr);  scan the L curve, determine tau and unfold at the final value of tau ;  ; virtual Int_t ScanSURE (Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph **logTauSURE=nullptr, TGraph **df_chi2A=nullptr, TGraph **lCurve=nullptr);  minimize Stein's unbiased risk estimator ""SURE"" using successive calls to DoUnfold at various tau. ;  ; void SetBias (const TH1 *bias);  set bias vector ;  ; void SetConstraint (EConstraint constraint);  set type of area constraint ;  ; void SetEpsMatrix (Double_t eps);  set numerical accuracy for Eigenvalue analysis when inverting matrices with rank problems ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTUnfoldDensity.html:21760,log,logTauX,21760,doc/master/classTUnfoldDensity.html,https://root.cern,https://root.cern/doc/master/classTUnfoldDensity.html,8,['log'],"['logTauCurvature', 'logTauSURE', 'logTauX', 'logTauY']"
Testability," related to the parallelization of likelihoods; 1053 * outside of the gradient calculation but in the minimization, most prominently; 1054 * in the linesearch step. The first argument this disables or enables likelihood; 1055 * parallelization. The second argument determines whether to split the task batches; 1056 * per event or per likelihood component. And the third argument how many events or; 1057 * respectively components to include in each batch.; 1058 * <tr><td> `TimingAnalysis(bool flag)` <td> **Experimental** - Log timings. This feature logs timings with NewStyle likelihoods on multiple processes simultaneously; 1059 * and outputs the timings at the end of a run to json log files, which can be analyzed with the; 1060 * `RooFit::MultiProcess::HeatmapAnalyzer`. Only works with simultaneous likelihoods.; 1061 * </table>; 1062 */; 1063 ; 1064 ; 1065/** @brief Protected implementation of the likelihood fitting routine.; 1066 *; 1067 * This virtual function can be overridden in case you want to change the likelihood fitting logic for custom PDFs.; 1068 *; 1069 * \note Never call this function directly. Instead, call RooAbsPdf::fitTo().; 1070 */; 1071 ; 1072std::unique_ptr<RooFitResult> RooAbsPdf::fitToImpl(RooAbsData& data, const RooLinkedList& cmdList); 1073{; 1074 return RooFit::FitHelpers::fitTo(*this, data, cmdList, false);; 1075}; 1076 ; 1077 ; 1078////////////////////////////////////////////////////////////////////////////////; 1079/// Print value of p.d.f, also print normalization integral that was last used, if any; 1080 ; 1081void RooAbsPdf::printValue(ostream& os) const; 1082{; 1083 // silent warning messages coming when evaluating a RooAddPdf without a normalization set; 1084 RooHelpers::LocalChangeMsgLevel locmsg(RooFit::WARNING, 0u, RooFit::Eval, false);; 1085 ; 1086 getVal() ;; 1087 ; 1088 if (_norm) {; 1089 os << getVal() << ""/"" << _norm->getVal() ;; 1090 } else {; 1091 os << getVal();; 1092 }; 1093}; 1094 ; 1095 ; 1096 ; 1097///////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:52941,log,logic,52941,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['logic']
Testability," relative to a reference machine a DELL Inspiron 7500 (Pentium III 600 MHz) with 256 MB of memory and 18GB IDE disk in ROOTMARKS. Higher ROOTMARKS means better performance. The reference machine has 200 ROOTMARKS, so the sample run below with 53.7 ROOTMARKS is about four times slower than the reference machine.; Here is a sample run:; % root -b; root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; 20.2.3 guitest - A Graphical User Interface. The guitest example, created by co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1085122,Test,Test,1085122,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Test']
Testability," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-02 16:30; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofServLite.html:19019,log,logo,19019,root/html604/TProofServLite.html,https://root.cern,https://root.cern/root/html604/TProofServLite.html,1,['log'],['logo']
Testability," remote application, if defined; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TList*TApplication::fgApplicationsList of available applications; static Long64_tTProofServ::fgLastEntryLast entry before exception; static TStringTProofServ::fgLastMsgMessage about status before exception. private:. TProofServLiteInterruptHandler*fInterruptHandler; TStringfSockPathunix socket path; Bool_tfTerminatedtrue if Terminate() has been already called. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofServLite(Int_t* argc, char** argv, FILE* flog = 0); Main constructor. Int_t CreateServer(); Finalize the server setup. If master, create the TProof instance to talk; the worker or submaster nodes.; Return 0 on success, -1 on error. ~TProofServLite(); Cleanup. Not really necessary since after this dtor there is no; live anyway. void HandleSigPipe(); Called when the client is not alive anymore; terminate the session. void HandleTermination(); Called when the client is not alive anymore; terminate the session. Int_t Setup(); Print the ProofServ logo on standard output.; Return 0 on success, -1 on error. void Terminate(Int_t status); Terminate the proof server. void HandleFork(TMessage* mess); Cloning itself via fork. Int_t SetupOnFork(const char* ord); Finalize the server setup afetr forking.; Return 0 on success, -1 on error. TProofServLite(Int_t* argc, char** argv, FILE* flog = 0). » Author: G. Ganis Oct 2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proofx:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofServLite.html:19018,log,logo,19018,root/html602/TProofServLite.html,https://root.cern,https://root.cern/root/html602/TProofServLite.html,1,['log'],['logo']
Testability," removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TFastCgi&operator=(const TFastCgi&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); static void*run_func(void*); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFastCgi.html:5491,Test,TestBit,5491,root/html534/TFastCgi.html,https://root.cern,https://root.cern/root/html534/TFastCgi.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," removedFromVers) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetProof(TProof* p); voidSetRemoteId(Int_t id); voidSetStatus(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofDesc.html:5177,Test,TestBit,5177,root/html534/TProofDesc.html,https://root.cern,https://root.cern/root/html534/TProofDesc.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," require.js and openui5 loaders was removed; Global hierarchy painter JSROOT.hpainter no longer existing, one can use getHPainter function:. import { getHPainter } from 'https://root.cern/js/7.0.0/modules/main.mjs';; let hpainter = getHPainter();. All math functions previously available via JSROOT.Math should be imported from base/math.mjs module:. import * as math from 'https://root.cern/js/7.0.0/modules/base/math.mjs';. Indication of batch mode JSROOT.batch_mode should be accessed via functions:. import { isBatchMode, setBatchMode } from 'https://root.cern/js/7.0.0/modules/main.mjs';; let was_batch = isBatchMode();; if (!was_batch) setBatchMode(true);. JSROOT.extend() function was removed, use Object.assign() instead. 1.11.11 Migration v5 -> v6. Main script was renamed to JSRoot.core.js. Old JSRootCore.js was deprecated and removed in v6.2. All URL parameters for main script ignored now, to load JSROOT functionality one should use JSROOT.require function. To create standard GUI, JSROOT.buildGUI function has to be used.; Instead of JSROOT.JSONR_unref() one can use JSROOT.parse(). If object is provided to JSROOT.parse() it just replaces all references which were introduced by TBufferJSON::ToJSON() method.; Instead of JSROOT.console() one should use console.log(). Instead of JSROOT.alert() one should use console.error().; Many settings were moved from JSROOT.gStyle to JSROOT.settings object. It was done to keep only TStyle-related members in JSROOT.gStyle.; Basic painter classes were renamed and made public:. JSROOT.TBasePainter -> JSROOT.BasePainter; JSROOT.TObjectPainter -> JSROOT.ObjectPainter. Internal ObjectPainter.DrawingReady api was deprecated. Draw function has to return Promise if object drawing postponed. As argument of returned promise object painter has to be used.; Many function names where adjusted to naming conventions. Like:. JSROOT.CreateHistogram -> JSROOT.createHistogram; JSROOT.CreateTGraph -> JSROOT.createTGraph; JSROOT.Create -> JSROOT.create. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html:36179,log,log,36179,root/htmldoc/guides/JSROOT/JSROOT.html,https://root.cern,https://root.cern/root/htmldoc/guides/JSROOT/JSROOT.html,1,['log'],['log']
Testability," result of multiplying x (the significant) by 2 raised to the power of exp (the exponent). ;  ; constexpr Double_t TMath::Ln10 ();  Natural log of 10 (to convert log to ln) ;  ; Double_t TMath::LnGamma (Double_t z);  Computation of ln[gamma(z)] for all z. ;  ; template<typename Iterator > ; Iterator TMath::LocMax (Iterator first, Iterator last);  Returns index of array with the maximum element. ;  ; template<typename T > ; Long64_t TMath::LocMax (Long64_t n, const T *a);  Returns index of array with the maximum element. ;  ; template<typename Iterator > ; Iterator TMath::LocMin (Iterator first, Iterator last);  Returns index of array with the minimum element. ;  ; template<typename T > ; Long64_t TMath::LocMin (Long64_t n, const T *a);  Returns index of array with the minimum element. ;  ; Double_t TMath::Log (Double_t x);  Returns the natural logarithm of x. ;  ; Double_t TMath::Log10 (Double_t x);  Returns the common (base-10) logarithm of x. ;  ; Double_t TMath::Log2 (Double_t x);  Returns the binary (base-2) logarithm of x. ;  ; constexpr Double_t TMath::LogE ();  Base-10 log of e (to convert ln to log) ;  ; Double_t TMath::LogNormal (Double_t x, Double_t sigma, Double_t theta=0, Double_t m=1);  Computes the density of LogNormal distribution at point x. ;  ; template<typename T > ; T TMath::MaxElement (Long64_t n, const T *a);  Returns maximum of array a of length n. ;  ; template<typename Iterator > ; Double_t TMath::Mean (Iterator first, Iterator last);  Returns the weighted mean of an array defined by the iterators. ;  ; template<typename Iterator , typename WeightIterator > ; Double_t TMath::Mean (Iterator first, Iterator last, WeightIterator wfirst);  Returns the weighted mean of an array defined by the first and last iterators. ;  ; template<typename T > ; Double_t TMath::Mean (Long64_t n, const T *a, const Double_t *w=nullptr);  Returns the weighted mean of an array a with length n. ;  ; template<typename T > ; Double_t TMath::Median (Long64_t n, const T *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8h.html:12385,log,logarithm,12385,doc/master/TMath_8h.html,https://root.cern,https://root.cern/doc/master/TMath_8h.html,1,['log'],['logarithm']
Testability," result; 407 // if using Fitter class must be done here; 408 // use old style Minuit for TMinuit and if no corrections have been applied; 409 if (!fitOption.Quiet) {; 410 R__LOCKGUARD(gROOTMutex);; 411 if (fitter->GetMinimizer() && fitConfig.MinimizerType() == ""Minuit"" &&; 412 !fitConfig.NormalizeErrors() && fitOption.Like <= 1) {; 413 fitter->GetMinimizer()->PrintResults(); // use old style Minuit; 414 }; 415 else {; 416 // print using FitResult class; 417 if (fitOption.Verbose) fitResult.PrintCovMatrix(std::cout);; 418 fitResult.Print(std::cout);; 419 }; 420 }; 421 ; 422 // store result in the backward compatible TVirtualFitter; 423 {; 424 R__LOCKGUARD(gROOTMutex);; 425 TVirtualFitter * lastFitter = TVirtualFitter::GetFitter();; 426 TBackCompFitter * bcfitter = new TBackCompFitter(fitter, fitdata);; 427 bcfitter->SetFitOption(fitOption);; 428 bcfitter->SetObjectFit(h1);; 429 bcfitter->SetUserFunc(f1);; 430 bcfitter->SetBit(TBackCompFitter::kCanDeleteLast);; 431 if (userFcn) {; 432 bcfitter->SetFCN(userFcn);; 433 // for interpreted FCN functions; 434 if (lastFitter->GetMethodCall() ) bcfitter->SetMethodCall(lastFitter->GetMethodCall() );; 435 }; 436 ; 437 // delete last fitter if it has been created here before; 438 if (lastFitter) {; 439 TBackCompFitter * lastBCFitter = dynamic_cast<TBackCompFitter *> (lastFitter);; 440 if (lastBCFitter && lastBCFitter->TestBit(TBackCompFitter::kCanDeleteLast) ); 441 delete lastBCFitter;; 442 }; 443 //N.B= this might create a memory leak if user does not delete the fitter they create; 444 TVirtualFitter::SetFitter( bcfitter );; 445 }; 446 ; 447 if (fitOption.StoreResult); 448 {; 449 TString name = ""TFitResult-"";; 450 name = name + h1->GetName() + ""-"" + f1->GetName();; 451 TString title = ""TFitResult-"";; 452 title += h1->GetTitle();; 453 tfr->SetName(name);; 454 tfr->SetTitle(title);; 455 return TFitResultPtr(tfr);; 456 }; 457 else; 458 return TFitResultPtr(iret);; 459}; 460 ; 461 ; 462void HFit::GetDrawingRange(TH1 * h1, ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:16845,Test,TestBit,16845,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['Test'],['TestBit']
Testability, return 0; return (fNodes->GetEntriesFast());}. void ClearNodes(); {fNodes = 0;}. Bool_t Contains(const Double_t* point) const; {return fShape->Contains(point);}. Bool_t IsRunTime() const; {return fShape->IsRunTimeShape();}. Bool_t IsVolumeMulti() const; {return kFALSE;}. Int_t GetRefCount() const; {return fRefCount;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. void Grab(); {fRefCount++;}. void Release(); {fRefCount--; if (fRefCount==0) delete this;}. Bool_t IsActive() const; {return TGeoAtt::IsActive();}. Bool_t IsActiveDaughters() const; {return TGeoAtt::IsActiveDaughters();}. Bool_t IsAdded() const; {return TObject::TestBit(kVolumeAdded);}. Bool_t IsOverlappingCandidate() const; {return TObject::TestBit(kVolumeOC);}. Bool_t IsReplicated() const; {return TObject::TestBit(kVolumeReplicated);}. Bool_t IsSelected() const; {return TObject::TestBit(kVolumeSelected);}. Bool_t IsCylVoxels() const; {return TObject::TestBit(kVoxelsCyl);}. Bool_t IsXYZVoxels() const; {return TObject::TestBit(kVoxelsXYZ);}. Bool_t IsValid() const; {return fShape->IsValid();}. Bool_t IsVisible() const; {return TGeoAtt::IsVisible();}. Bool_t IsVisibleDaughters() const; {return TGeoAtt::IsVisDaughters();}. Bool_t IsVisContainers() const; {return TGeoAtt::IsVisContainers();}. Bool_t IsVisLeaves() const; {return TGeoAtt::IsVisLeaves();}. Bool_t IsVisOnly() const; {return TGeoAtt::IsVisOnly();}. Int_t GetCurrentNodeIndex() const; {return -1;}. Int_t GetNextNodeIndex() const; {return -1;}. TObjArray * GetNodes(); {return fNodes;}. Int_t GetNtotal() const; {return fNtotal;}. TGeoManager * GetGeoManager() const; {return fGeoManager;}. TGeoMaterial * GetMaterial() const; {return GetMedium()->GetMaterial();}. TGeoMedium * GetMedium() const; {return (fMedium)?fMedium:DummyMedium();}. TObject * GetField() const; {return fField;}. TGeoPatternFinder * GetFinder() const; {return fFinder;}. const char * GetIconName() con,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:44831,Test,TestBit,44831,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['Test'],['TestBit']
Testability," return 0;; 2032 } else {; 2033 cl = info->GetClass();; 2034 }; 2035 }; 2036 return WriteObjectAny(obj,cl,name,option,bufsize);; 2037}; 2038 ; 2039////////////////////////////////////////////////////////////////////////////////; 2040/// Write object of class with dictionary cl in this directory.; 2041///; 2042/// obj may not derive from TObject; 2043/// To get the TClass* cl pointer, one can use; 2044///; 2045/// TClass *cl = TClass::GetClass(""classname"");; 2046///; 2047/// An alternative is to call the function WriteObjectAny above.; 2048/// see TDirectoryFile::WriteTObject for comments; 2049 ; 2050Int_t TDirectoryFile::WriteObjectAny(const void *obj, const TClass *cl, const char *name, Option_t *option, Int_t bufsize); 2051{; 2052 TDirectory::TContext ctxt(this);; 2053 ; 2054 if (!fFile) return 0;; 2055 ; 2056 if (!cl) {; 2057 Error(""WriteObject"",""Unknown type for %s, it can not be written."",name);; 2058 return 0;; 2059 }; 2060 ; 2061 if (!fFile->IsWritable()) {; 2062 if (!fFile->TestBit(TFile::kWriteError)) {; 2063 // Do not print the error if the file already had a SysError.; 2064 Error(""WriteObject"",""File %s is not writable"", fFile->GetName());; 2065 }; 2066 return 0;; 2067 }; 2068 ; 2069 if (!obj) return 0;; 2070 ; 2071 const char *className = cl->GetName();; 2072 const char *oname;; 2073 if (name && *name); 2074 oname = name;; 2075 else; 2076 oname = className;; 2077 ; 2078 if (cl && cl->GetCollectionProxy() && dynamic_cast<TEmulatedCollectionProxy*>(cl->GetCollectionProxy())) {; 2079 Error(""WriteObjectAny"",; 2080 ""The class requested (%s) for the key name \""%s\""""; 2081 "" is an instance of an stl collection and does not have a compiled CollectionProxy.""; 2082 "" Please generate the dictionary for this collection (%s). No data will be written."",; 2083 className, oname, className);; 2084 return 0;; 2085 }; 2086 ; 2087 TKey *key, *oldkey = nullptr;; 2088 Int_t bsize = GetBufferSize();; 2089 if (bufsize > 0) bsize = bufsize;; 2090 ; 2091 TString opt = option;; 209",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:70674,Test,TestBit,70674,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['Test'],['TestBit']
Testability," return false;; 147 unsigned int ret = 0;; 148 ret |= unur_urng_set_delete(fUrng, &UnuranRng<TRandom>::Delete);; 149 ret |= unur_urng_set_seed(fUrng, &UnuranRng<TRandom>::Seed);; 150 if (ret != 0) return false;; 151 ; 152 unur_chg_urng( fGen, fUrng);; 153 return true;; 154}; 155 ; 156bool TUnuran::SetContDistribution(const TUnuranContDist & dist ); 157{; 158 // internal method to set in unuran the function pointer for a continuous univariate distribution; 159 if (fUdistr != nullptr) unur_distr_free(fUdistr);; 160 fUdistr = unur_distr_cont_new();; 161 if (fUdistr == nullptr) return false;; 162 unsigned int ret = 0;; 163 ret = unur_distr_set_extobj(fUdistr, &dist);; 164 if ( ! dist.IsLogPdf() ) {; 165 ret |= unur_distr_cont_set_pdf(fUdistr, &ContDist::Pdf);; 166 ret |= unur_distr_cont_set_dpdf(fUdistr, &ContDist::Dpdf);; 167 if (dist.HasCdf() ) ret |= unur_distr_cont_set_cdf(fUdistr, &ContDist::Cdf);; 168 }; 169 else {; 170 // case user provides log of pdf; 171 ret |= unur_distr_cont_set_logpdf(fUdistr, &ContDist::Pdf);; 172 ret |= unur_distr_cont_set_dlogpdf(fUdistr, &ContDist::Dpdf);; 173 }; 174 ; 175 double xmin, xmax = 0;; 176 if (dist.GetDomain(xmin,xmax) ) {; 177 ret = unur_distr_cont_set_domain(fUdistr,xmin,xmax);; 178 if (ret != 0) {; 179 Error(""SetContDistribution"",""invalid domain xmin = %g xmax = %g "",xmin,xmax);; 180 return false;; 181 }; 182 }; 183 if (dist.HasMode() ) {; 184 ret = unur_distr_cont_set_mode(fUdistr, dist.Mode());; 185 if (ret != 0) {; 186 Error(""SetContDistribution"",""invalid mode given, mode = %g "",dist.Mode());; 187 return false;; 188 }; 189 }; 190 if (dist.HasPdfArea() ) {; 191 ret = unur_distr_cont_set_pdfarea(fUdistr, dist.PdfArea());; 192 if (ret != 0) {; 193 Error(""SetContDistribution"",""invalid area given, area = %g "",dist.PdfArea());; 194 return false;; 195 }; 196 }; 197 ; 198 return (ret ==0) ? true : false;; 199}; 200 ; 201 ; 202bool TUnuran::SetMultiDistribution(const TUnuranMultiContDist & dist ); 203{; 204 // internal method to ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TUnuran_8cxx_source.html:5822,log,log,5822,doc/master/TUnuran_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TUnuran_8cxx_source.html,1,['log'],['log']
Testability," return;; 1927 fTopVolume->SetVisBranch();; 1928 GetGeomPainter()->DrawPath(path, option);; 1929}; 1930 ; 1931////////////////////////////////////////////////////////////////////////////////; 1932/// Draw random points in the bounding box of a volume.; 1933 ; 1934void TGeoManager::RandomPoints(const TGeoVolume *vol, Int_t npoints, Option_t *option); 1935{; 1936 GetGeomPainter()->RandomPoints((TGeoVolume *)vol, npoints, option);; 1937}; 1938 ; 1939////////////////////////////////////////////////////////////////////////////////; 1940/// Check time of finding ""Where am I"" for n points.; 1941 ; 1942void TGeoManager::Test(Int_t npoints, Option_t *option); 1943{; 1944 GetGeomPainter()->Test(npoints, option);; 1945}; 1946 ; 1947////////////////////////////////////////////////////////////////////////////////; 1948/// Geometry overlap checker based on sampling.; 1949 ; 1950void TGeoManager::TestOverlaps(const char *path); 1951{; 1952 GetGeomPainter()->TestOverlaps(path);; 1953}; 1954 ; 1955////////////////////////////////////////////////////////////////////////////////; 1956/// Fill volume names of current branch into an array.; 1957 ; 1958void TGeoManager::GetBranchNames(Int_t *names) const; 1959{; 1960 GetCurrentNavigator()->GetBranchNames(names);; 1961}; 1962 ; 1963////////////////////////////////////////////////////////////////////////////////; 1964/// Get name for given pdg code;; 1965 ; 1966const char *TGeoManager::GetPdgName(Int_t pdg) const; 1967{; 1968 static char defaultname[5] = {""XXX""};; 1969 if (!fPdgNames || !pdg); 1970 return defaultname;; 1971 for (Int_t i = 0; i < fNpdg; i++) {; 1972 if (fPdgId[i] == pdg); 1973 return fPdgNames->At(i)->GetName();; 1974 }; 1975 return defaultname;; 1976}; 1977 ; 1978////////////////////////////////////////////////////////////////////////////////; 1979/// Set a name for a particle having a given pdg.; 1980 ; 1981void TGeoManager::SetPdgName(Int_t pdg, const char *name); 1982{; 1983 if (!pdg); 1984 return;; 1985 if (!fPdgNames)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:71046,Test,TestOverlaps,71046,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,['Test'],['TestOverlaps']
Testability," return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if requested).; 4587 // Histogram surround (if not option ""Same"").; 4588 PaintFrame();; 4589 ; 4590 // Paint histogram axis only; 4591 Bool_t gridx = gPad->GetGridx();; 4592 Bool_t gridy = gPad->GetGridy();; 4593 if (Hoption.Axis > 0) {; 4594 if (Hoption.Axis > 1) PaintAxis(kTRUE); //axis with grid; 4595 else {; 4596 if (gridx) gPad->SetGridx(0);; 4597 if (gridy) gPad->SetGridy(0);; 4598 PaintAxis(kFALSE);; 4599 if (gridx) gPad->SetGridx(1);; 4600 if (gridy) gPad->SetGridy(1);; 4601 }; 4602 if ((Hoption.Same%10) ==1) Hoption.Same += 1;; 4603 goto paintstat;; 4604 }; 4605 if (gridx || gridy) PaintAxis(kTRUE); // Draw the grid only; 4606 ; 4607 // test for options BAR or HBAR; 4608 if (Hoption.Bar >= 10) {; 4609 PaintBar(option);; 4610 }; 4611 ; 4612 // do not draw histogram if error bars required; 4613 if (!Hoption.Error) {; 4614 if (Hoption.Hist && Hoption.Bar<10) PaintHist(option);; 4615 }; 4616 ; 4617 // test for error bars or option E; 4618 if (Hoption.Error) {; 4619 PaintErrors(option);; 4620 if (Hoption.Hist == 2) PaintHist(option);; 4621 }; 4622 ; 4623 if (Hoption.Text) PaintText(option);; 4624 ; 4625 // test for associated function; 4626 if (Hoption.Func) {; 4627 Hoption_t hoptsave = Hoption;; 4628 Hparam_t hparsave = Hparam;; 4629 PaintFunction(option);; 4630 SetHistogram(hsave);; 4631 Hoption = hoptsave;; 4632 Hparam = hparsave;; 4633 }; 4634 ; 4635 if (gridx) gPad->SetGridx(0);; 4636 if (gridy) gPad->SetGridy(0);; 4637 PaintAxis(kFALSE);; 4638 if (gridx) gPad->SetGridx(1);; 4639 if (gridy) gPad->SetGridy(1);; 4640 ; 4641 PaintTitle(); // Draw histogram title; 4642 ; 4643 // Draw box with histogram statistics and/or fit parameters; 4644paintstat:; 4645 if ((Hoption.Same%10) != 1 && !fH->TestBit(TH1::kNoStats)) { // bit set via TH1::SetStats; 4646 TIter next(fFunctions);; 4647 TObject *obj = nullptr;; 4648 while ((obj = next())) {; 4649 if (obj->InheritsFrom(TF1::Class())) break;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:174655,test,test,174655,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['test'],['test']
Testability," right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionViewer.html:28755,log,log,28755,root/html602/TSessionViewer.html,https://root.cern,https://root.cern/root/html602/TSessionViewer.html,2,['log'],['log']
Testability," rnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIERUNIFORM:ValidationSize=0.2:RandomSeed=1234"");; ; rnnOptions.Append("":"");; rnnOptions.Append(inputLayoutString);; rnnOptions.Append("":"");; rnnOptions.Append(layoutString);; rnnOptions.Append("":"");; rnnOptions.Append(trainingStrategyString);; rnnOptions.Append("":"");; rnnOptions.Append(TString::Format(""Architecture=%s"", archString.Data()));; ; TString rnnName = ""TMVA_"" + TString(rnn_type);; factory->BookMethod(dataloader, TMVA::Types::kDL, rnnName, rnnOptions);; ; }; }; ; /**; ## Book TMVA fully connected dense layer models; ; **/; ; if (useTMVA_DNN) {; // Method DL with Dense Layer; TString inputLayoutString = TString::Format(""InputLayout=1|1|%d"", ntime * ninput);; ; TString layoutString(""Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR"");; // Training strategies.; TString trainingString1(""LearningRate=1e-3,Momentum=0.0,Repetitions=1,""; ""ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,""; ""WeightDecay=1e-4,Regularization=None,MaxEpochs=20""; ""DropConfig=0.0+0.+0.+0.,Optimizer=ADAM"");; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString += trainingString1; // + ""|"" + trainingString2; ; // General Options.; TString dnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER:RandomSeed=0"");; ; dnnOptions.Append("":"");; dnnOptions.Append(inputLayoutString);; dnnOptions.Append("":"");; dnnOptions.Append(layoutString);; dnnOptions.Append("":"");; dnnOptions.Append(trainingStrategyString);; dnnOptions.Append("":"");; dnnOptions.Append(archString);; ; TString dnnName = ""TMVA_DNN"";; factory->BookMethod(dataloader, TMVA::Types::kDL, dnnName, dnnOptions);; }; ; /**; ## Book Keras recurrent models; ; Book the different types of recurrent models in Keras (SimpleRNN, LSTM or GRU); ; **/; ; if (useKeras) {; ; for (int i = 0; i < 3; i++) {; ; if (use_rnn_type[i]) {; ; TString modelName = TString::Format(""model_%s.h5"", rnn_types[i].",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:67235,Test,TestRepetitions,67235,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability," rnr); virtual Bool_tTEveElement::SetRnrSelfChildren(Bool_t rnr_self, Bool_t rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; virtual voidTEveElement::UnHighlighted(); virtual voidTEveProjected::UnRefProjectable(TEveProjectable* assumed_parent); virtual voidTEveElement::UnSelected(); virtual voidUpdateProjection(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveShape::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetConeProjected.html:16151,Test,TestBit,16151,root/html528/TEveJetConeProjected.html,https://root.cern,https://root.cern/root/html528/TEveJetConeProjected.html,3,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability," rnr_children); virtual Bool_tTEveElement::SetRnrState(Bool_t rnr); virtual voidSetScaleAbs(Bool_t x); voidTEveElement::SetSourceObject(TObject* o); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTEveElement::SetTransMatrix(Double_t* carr); virtual voidTEveElement::SetTransMatrix(const TGeoMatrix& mat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTEveElement::SetUserData(void* ud); voidSetValueIsColor(Bool_t x); voidTEveElement::SetVizModel(TEveElement* model); voidTEveElement::SetVizTag(const TString& tag); virtual voidShowMembers(TMemberInspector& insp) const; virtual Bool_tTEveElement::SingleRnrState() const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; voidTEveElement::SpawnEditor()MENU ; voidTEveElement::StampColorSelection(); voidTEveElement::StampObjProps(); voidTEveElement::StampTransBBox(); voidTEveElement::StampVisibility(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Bool_tTEveElement::TestCSCBits(UChar_t f) const; TEveCaloViz(TEveCaloData* data = 0, const char* n = ""TEveCaloViz"", const char* t = """"); virtual voidTEveElement::UnHighlighted(); virtual voidTEveElement::UnSelected(); virtual voidTObject::UseCurrentStyle(); voidTEveElement::VizDB_Apply(const char* tag)MENU ; voidTEveElement::VizDB_Insert(const char* tag, Bool_t replace = kTRUE, Bool_t update = kTRUE)MENU ; voidTEveElement::VizDB_Reapply()MENU ; voidTEveElement::VizDB_UpdateModel(Bool_t update = kTRUE)MENU ; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTEveElement::WriteVizParams(ostream& out, const TString& var).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveCaloViz.html:17280,Test,TestBit,17280,root/html602/TEveCaloViz.html,https://root.cern,https://root.cern/root/html602/TEveCaloViz.html,6,['Test'],"['TestBit', 'TestBits', 'TestCSCBits']"
Testability," root[] .x stress.cxx(30). Test 1 : Functions, Random Numbers, Histogram Fits............. OK; Test 2 : Check size & compression factor of a Root file........ OK; Test 3 : Purge, Reuse of gaps in TFile......................... OK; Test 4 : Test of 2-d histograms, functions, 2-d fits........... OK; Test 5 : Test graphics & PostScript ............................OK; Test 6 : Test subdirectories in a Root file.................... OK; Test 7 : TNtuple, selections, TCutG, TEventList.......... OK; Test 8 : Trees split and compression modes..................... OK; Test 9 : Analyze Event.root file of stress 8................... OK; Test 10 : Create 10 files starting from Event.root.............. OK; Test 11 : Test chains of Trees using the 10 files............... OK; Test 12 : Compare histograms of test 9 and 11................... OK; Test 13 : Test merging files of a chain......................... OK; Test 14 : Check correct rebuilt of Event.root in test 13........ OK; Test 15 : Divert Tree branches to separate files................ OK; Test 16 : Cling test (3 nested loops) with LHCb trigger.......... OK; ******************************************************************; * IRIX64 fnpat1 6.5 01221553 IP27; ******************************************************************; stress : Total I/O = 75.3 Mbytes, I = 59.2, O = 16.1; stress : Compr I/O = 75.7 Mbytes, I = 60.0, O = 15.7; stress : Real Time = 307.61 seconds Cpu Time = 292.82 seconds; ******************************************************************; * ROOTMARKS = 53.7 * Root2.25/00 20000710/1022; 20.2.3 guitest - A Graphical User Interface. The guitest example, created by compiling guitest.cxx, tests and illustrates the use of the native GUI widgets such as cascading menus, dialog boxes, sliders and tab panels. It is a very useful example to study when designing a GUI. Some examples of the output of guitest are shown next. To run it type guitest at the system prompt in the $ROOTSYS/test directory. We have included",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1085467,Test,Test,1085467,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Test']
Testability, rule (i.e. the onfile class). ; Definition at line 456 of file TSchemaRule.cxx. ◆ SetTarget(). void TSchemaRule::SetTarget ; (; const TString & ; target). Set the target member of this rule (i.e. the in memory data member). ; Definition at line 492 of file TSchemaRule.cxx. ◆ SetTargetClass(). void TSchemaRule::SetTargetClass ; (; const TString & ; classname). Set the target class of this rule (i.e. the in memory class). ; Definition at line 474 of file TSchemaRule.cxx. ◆ SetVersion(). Bool_t TSchemaRule::SetVersion ; (; const TString & ; version). Set the version string - returns kFALSE if the format is incorrect. ; Definition at line 381 of file TSchemaRule.cxx. ◆ Streamer(). void ROOT::TSchemaRule::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::TSchemaRule::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 120 of file TSchemaRule.h. ◆ TestChecksum(). Bool_t TSchemaRule::TestChecksum ; (; UInt_t ; checksum); const. Check if given checksum is defined in this rule. ; Definition at line 437 of file TSchemaRule.cxx. ◆ TestVersion(). Bool_t TSchemaRule::TestVersion ; (; Int_t ; version); const. Check if given version number is defined in this rule. ; Definition at line 402 of file TSchemaRule.cxx. Member Data Documentation. ◆ fAttributes. TString ROOT::TSchemaRule::fAttributes. private . Definition at line 118 of file TSchemaRule.h. ◆ fChecksum. TString ROOT::TSchemaRule::fChecksum. private . Source version vector (for searching purposes) ; Definition at line 103 of file TSchemaRule.h. ◆ fChecksumVect. std::vector<UInt_t>* ROOT::TSchemaRule::fChecksumVect. mutableprivate . Definition at line 104 of file TSchemaRule.h. ◆ fCode. TString ROOT::TSchemaRule::fCode. private . Includes vector. ; Definition at line 113 of file TSchemaRule.h. ◆ fEmbed. Bool_t ROOT::TSchemaRule::fEmbed. private . Definition at line 114 of file TSchemaRul,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html:27020,Test,TestChecksum,27020,doc/v632/classROOT_1_1TSchemaRule.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TSchemaRule.html,2,['Test'],['TestChecksum']
Testability," s1, const char* s2); TString&TString::ReplaceAll(const char* s1, Ssiz_t ls1, const char* s2, Ssiz_t ls2); voidTString::Resize(Ssiz_t n); static Ssiz_tTString::ResizeIncrement(Ssiz_t ri = 16); virtual voidTGString::SetString(const char* s); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTString::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); TSubStringTString::Strip(TString::EStripType s = kTrailing, char c = ' ') const; TSubStringTString::SubString(const char* pat, Ssiz_t start = 0, TString::ECaseCompare cmp = kExact) const; TObjArray*TString::Tokenize(const TString& delim) const; Bool_tTString::Tokenize(TString& tok, Ssiz_t& from, const char* delim = "" "") const; voidTString::ToLower(); voidTString::ToUpper(); static voidTString::WriteString(TBuffer& b, const TString* a). protected:. static Ssiz_tTString::AdjustCapacity(Ssiz_t nc); voidTString::AssertElement(Ssiz_t nc) const; voidTString::Clobber(Ssiz_t nc); voidTString::Cow(); voidTString::Cow(Ssiz_t nc); voidDrawHotChar(Drawable_t id, GContext_t gc, Int_t x, Int_t y); voidTString::InitChar(char c); TStringRef*TString::Pref() const. Data Members; public:. enum TString::EStripType { kLeading; kTrailing; kBoth; };; enum TString::ECaseCompare { kExact; kIgnoreCase; };. protected:. char*TString::fDataref. counted data (TStringRef is in front); charfHotCharhot character; Int_tfHotPosposition of hot character; GContext_tfLastGCcontext used during last drawing; Int_tfOff1variable used during drawing (cache); Int_tfOff2variable used during drawing (cache). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHotString(const char* s); Create a hot string. void Draw(Drawable_t id, GContext_t gc, Int_t x, Int_t y); Draw a hot string and underline the hot character. void DrawWrapped(Drawable_t id, GContext_t gc, Int_t x, Int_t y, UInt_t w, FontStruct_t font); Draw a hot string in a column with width w. If string is longer than; w wrap ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGHotString.html:7441,Assert,AssertElement,7441,root/html528/TGHotString.html,https://root.cern,https://root.cern/root/html528/TGHotString.html,1,['Assert'],['AssertElement']
Testability," safe = 0) const; {}. TGeoVolume * Divide(TGeoVolume* voldiv, const char* divname, Int_t iaxis, Int_t ndiv, Double_t start, Double_t step). const char * GetAxisName(Int_t iaxis) const. Double_t GetAxisRange(Int_t iaxis, Double_t& xlo, Double_t& xhi) const. void GetBoundingCylinder(Double_t* param) const. Int_t GetByteCount() const. Bool_t GetPointsOnSegments(Int_t npoints, Double_t* array) const. Int_t GetFittingBox(const TGeoBBox* parambox, TGeoMatrix* mat, Double_t& dx, Double_t& dy, Double_t& dz) const. Int_t GetId() const; {return fShapeId;}. TGeoShape * GetMakeRuntimeShape(TGeoShape* mother, TGeoMatrix* mat) const. void GetMeshNumbers(Int_t& , Int_t& , Int_t& ) const; {;}. Int_t GetNmeshVertices() const; {return 0;}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsComposite() const; {return kFALSE;}. Bool_t IsCylType() const. Bool_t IsReflected() const; {return kFALSE;}. Bool_t IsRunTimeShape() const; {return TestShapeBit(kGeoRunTimeShape);}. Bool_t IsValid() const; {return !TestShapeBit(kGeoInvalidShape);}. Bool_t IsValidBox() const. void InspectShape() const. TBuffer3D * MakeBuffer3D() const; {return 0;}. Double_t Safety(const Double_t* point, Bool_t in = kTRUE) const. void Safety_v(const Double_t* , const Bool_t* , Double_t* , Int_t ) const; {}. void SetDimensions(Double_t* param). void SetId(Int_t id); {fShapeId = id;}. void SetPoints(Double_t* points) const. void SetPoints(Float_t* points) const. void SetSegsAndPols(TBuffer3D& buff) const. void SetRuntime(Bool_t flag = kTRUE); {SetShapeBit(kGeoRunTimeShape, flag);}. void Sizeof3D() const. void SetShapeBit(UInt_t f, Bool_t set); ----- bit manipulation. void ResetShapeBit(UInt_t f); { fShapeBits &= ~(f & kBitMask32); }. Bool_t TestShapeBit(UInt_t f) const; { return (Bool_t) ((fShapeBits & f) != 0); }. Int_t TestShapeBits(UInt_t f) const; { return (Int_t) (fShapeBits & f); }. void InvertShapeBit(UInt_t f); { fShapeBits ^= f & kBitMask32; }. » Author: Andrei Gheata 31/01/02 » Copyright (C) 1995-2000, Rene",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoShape.html:22329,Test,TestShapeBit,22329,root/html534/TGeoShape.html,https://root.cern,https://root.cern/root/html534/TGeoShape.html,3,['Test'],['TestShapeBit']
Testability," safe distance for a given shape. ; Sample points inside the 2x bounding box and compute safety. Generate directions randomly in cos(theta) and compute distance to boundary. Check if distance to boundary is bigger than safety. ; Definition at line 1940 of file TGeoChecker.cxx. ◆ ShootRay(). Double_t * TGeoChecker::ShootRay ; (; Double_t * ; start, . Double_t ; dirx, . Double_t ; diry, . Double_t ; dirz, . Double_t * ; array, . Int_t & ; nelem, . Int_t & ; dim, . Double_t * ; endpoint = nullptr . ); const. Shoot one ray from start point with direction (dirx,diry,dirz). ; Fills input array with points just after boundary crossings. ; Definition at line 2614 of file TGeoChecker.cxx. ◆ Streamer(). void TGeoChecker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGeoChecker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file TGeoChecker.h. ◆ Test(). void TGeoChecker::Test ; (; Int_t ; npoints, . Option_t * ; option . ). Check time of finding ""Where am I"" for n points. ; Definition at line 2709 of file TGeoChecker.cxx. ◆ TestOverlaps(). void TGeoChecker::TestOverlaps ; (; const char * ; path). Geometry overlap checker based on sampling. ; Definition at line 2761 of file TGeoChecker.cxx. ◆ TestVoxels(). Bool_t TGeoChecker::TestVoxels ; (; TGeoVolume * ; vol, . Int_t ; npoints = 1000000 . ). Returns optimal voxelization type for volume vol. . kFALSE - cartesian; kTRUE - cylindrical . Definition at line 3008 of file TGeoChecker.cxx. ◆ TimingPerVolume(). Double_t TGeoChecker::TimingPerVolume ; (; TGeoVolume * ; vol). private . Compute timing per ""FindNextBoundary"" + ""Safety"" call. ; Volume must be in the current path. ; Definition at line 741 of file TGeoChecker.cxx. ◆ Weight(). Double_t TGeoChecker::Weight ; (; Double_t ; precision = 0.01, . Option_t * ; option = ""v"" . ). Estimate weight of top level volume with a precision SIGM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoChecker.html:28760,Test,Test,28760,doc/master/classTGeoChecker.html,https://root.cern,https://root.cern/doc/master/classTGeoChecker.html,1,['Test'],['Test']
Testability," sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity () const;  ; const TVectorD * GetMeanVariables () const;  ; Double_t GetMinAngle () const;  ; Double_t GetMinQuantity () const;  ; Double_t GetMinRelativeError () const;  ; const TVectorD * GetMinVariables () const;  ; Int_t GetNCoefficients () const;  ; Int_t GetNVariables () const;  ; Int_t GetPolyType () const;  ; Int_t * GetPowerInd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:20150,test,test,20150,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['test'],['test']
Testability," sampling distribution; TStringfVarName. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const TString varName = """"); SamplingDistribution constructor. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, vector<Double_t>& sampleWeights, const TString varName = """"); SamplingDistribution constructor. SamplingDistribution(const char* name, const char* title, const TString varName = """"); SamplingDistribution constructor (with name and title). SamplingDistribution(); SamplingDistribution default constructor. ~SamplingDistribution(); SamplingDistribution destructor. void Add(RooStats::SamplingDistribution* other); merge SamplingDistributions. Double_t InverseCDF(Double_t pvalue); returns the inverse of the cumulative distribution function. Double_t InverseCDF(Double_t pvalue, Double_t sigmaVariaton, Double_t& inverseVariation); returns the inverse of the cumulative distribution function, with variations depending on number of samples. Double_t InverseCDFInterpolate(Double_t pvalue); returns the inverse of the cumulative distribution function. SamplingDistribution(const char* name, const char* title, vector<Double_t>& samplingDist, const TString varName = """"); Constructor for SamplingDistribution. Int_t GetSize() const; size of samples. {return fSamplingDist.size();}. std::vector<Double_t> GetSamplingDistribution() const; Get test statistics values. {return fSamplingDist;}. std::vector<Double_t> GetSampleWeights() const; Get the sampling weights. {return fSampleWeights;}. const TString GetVarName() const; {return fVarName;}. » Last changed: root/roostats:$Id: SamplingDistribution.h 31276 2009-11-18 15:06:42Z moneta $ » Last generated: 2009-12-07 13:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__SamplingDistribution.html:8284,test,test,8284,root/html526/RooStats__SamplingDistribution.html,https://root.cern,https://root.cern/root/html526/RooStats__SamplingDistribution.html,1,['test'],['test']
Testability, save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:15644,Test,Test,15644,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:17311,Test,Test,17311,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, save the configuration ; : 76 | 16584 15460 0.0199224 0.00178826 44115.8 0; : 77 Minimum Test error found - save the configuration ; : 77 | 16444.4 15323.6 0.0199118 0.00178921 44143.8 0; : 78 Minimum Test error found - save the configuration ; : 78 | 16305.9 15188.8 0.0201885 0.00179593 43495.8 0; : 79 Minimum Test error found - save the configuration ; : 79 | 16166.6 15057.4 0.0199259 0.00179169 44115.6 0; : 80 Minimum Test error found - save the configuration ; : 80 | 16031 14926.5 0.0199332 0.00179406 44103.6 0; : 81 Minimum Test error found - save the configuration ; : 81 | 15897.7 14793.4 0.0199416 0.00179024 44073.9 0; : 82 Minimum Test error found - save the configuration ; : 82 | 15763.4 14662.5 0.0199481 0.00178931 44055.8 0; : 83 Minimum Test error found - save the configuration ; : 83 | 15630.7 14533.2 0.019931 0.00179081 44101 0; : 84 Minimum Test error found - save the configuration ; : 84 | 15500.1 14404.7 0.0199524 0.00179281 44053.8 0; : 85 Minimum Test error found - save the configuration ; : 85 | 15368.8 14279.5 0.0199675 0.00179204 44015.4 0; : 86 Minimum Test error found - save the configuration ; : 86 | 15239.7 14153.7 0.0199843 0.00181623 44033.3 0; : 87 Minimum Test error found - save the configuration ; : 87 | 15114.3 14026.9 0.0199836 0.00180455 44006.8 0; : 88 Minimum Test error found - save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:20540,Test,Test,20540,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, save the configuration ; : 805 | 10.3447 13.9911 0.0201319 0.00182751 43705.3 0; : 806 | 10.3558 15.0191 0.0200537 0.00175652 43722.7 1; : 807 Minimum Test error found - save the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.963,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:99741,Test,Test,99741,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, save the configuration ; : 88 | 14984.6 13906.4 0.01996 0.00179383 44038 0; : 89 Minimum Test error found - save the configuration ; : 89 | 14861.1 13782.6 0.0200963 0.00185792 43863.5 0; : 90 Minimum Test error found - save the configuration ; : 90 | 14737.4 13659.4 0.0204557 0.00186757 43038.2 0; : 91 Minimum Test error found - save the configuration ; : 91 | 14612.9 13539.6 0.0208154 0.00188863 42268.3 0; : 92 Minimum Test error found - save the configuration ; : 92 | 14490.4 13421.6 0.0202522 0.00182164 43406.2 0; : 93 Minimum Test error found - save the configuration ; : 93 | 14371 13301.8 0.0200599 0.00180046 43813.1 0; : 94 Minimum Test error found - save the configuration ; : 94 | 14248.9 13186.1 0.0201736 0.00184165 43639.6 0; : 95 Minimum Test error found - save the configuration ; : 95 | 14131.5 13069.6 0.020175 0.00181418 43571 0; : 96 Minimum Test error found - save the configuration ; : 96 | 14014.5 12952.5 0.0201885 0.00182372 43561.6 0; : 97 Minimum Test error found - save the configuration ; : 97 | 13896.7 12838.4 0.0200385 0.00180689 43879.7 0; : 98 Minimum Test error found - save the configuration ; : 98 | 13782 12723.6 0.020062 0.00182418 43864.8 0; : 99 Minimum Test error found - save the configuration ; : 99 | 13666.4 12611.1 0.0200618 0.00180714 43824.4 0; : 100 Minimum Test error found - save the configuration ; : 100 | 13550.9 12502.3 0.0200464 0.00180511 43856.6 0; : 101 Minimum Test error found - save the configuration ; : 101 | 13439.7 12392 0.0201571 0.00185957 43721.7 0; : 102 Minimum Test error found - save the configuration ; : 102 | 13328.8 12281.3 0.0202143 0.00181888 43489.1 0; : 103 Minimum Test error found - save the configuration ; : 103 | 13217 12173.3 0.0200026 0.0018059 43964.1 0; : 104 Minimum Test error found - save the configuration ; : 104 | 13107.7 12065.4 0.0200115 0.00180466 43939.6 0; : 105 Minimum Test error found - save the configuration ; : 105 | 12997.9 11959.7 0.0201517 0.00183944 43686.6 0; : 106 Minimum Test er,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:21875,Test,Test,21875,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability," scales linearly with the sampling rate."" << Endl;; 1759 Log() << """" << Endl;; 1760 Log() << bold << ""Genetic Algorithm:"" << resbold << Endl;; 1761 Log() << """" << Endl;; 1762 Log() << ""The algorithm terminates if no significant fitness increase has"" << Endl;; 1763 Log() << ""been achieved within the last \""nsteps\"" steps of the calculation."" << Endl;; 1764 Log() << ""Wiggles in the ROC curve or constant background rejection of 1"" << Endl;; 1765 Log() << ""indicate that the GA failed to always converge at the true maximum"" << Endl;; 1766 Log() << ""fitness. In such a case, it is recommended to broaden the search "" << Endl;; 1767 Log() << ""by increasing the population size (\""popSize\"") and to give the GA "" << Endl;; 1768 Log() << ""more time to find improvements by increasing the number of steps"" << Endl;; 1769 Log() << ""(\""nsteps\"")"" << Endl;; 1770 Log() << "" -> increase \""popSize\"" (at least >10 * number of variables)"" << Endl;; 1771 Log() << "" -> increase \""nsteps\"""" << Endl;; 1772 Log() << """" << Endl;; 1773 Log() << bold << ""Simulated Annealing (SA) algorithm:"" << resbold << Endl;; 1774 Log() << """" << Endl;; 1775 Log() << ""\""Increasing Adaptive\"" approach:"" << Endl;; 1776 Log() << """" << Endl;; 1777 Log() << ""The algorithm seeks local minima and explores their neighborhoods, while"" << Endl;; 1778 Log() << ""changing the ambient temperature depending on the number of failures"" << Endl;; 1779 Log() << ""in the previous steps. The performance can be improved by increasing"" << Endl;; 1780 Log() << ""the number of iteration steps (\""MaxCalls\""), or by adjusting the"" << Endl;; 1781 Log() << ""minimal temperature (\""MinTemperature\""). Manual adjustments of the"" << Endl;; 1782 Log() << ""speed of the temperature increase (\""TemperatureScale\"" and \""AdaptiveSpeed\"")"" << Endl;; 1783 Log() << ""to individual data sets should also help. Summary:"" << brk << Endl;; 1784 Log() << "" -> increase \""MaxCalls\"""" << brk << Endl;; 1785 Log() << "" -> adjust \""MinTemperature\"""" << brk << Endl;; 178",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8cxx_source.html:70087,Log,Log,70087,doc/master/MethodCuts_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8cxx_source.html,13,['Log'],['Log']
Testability," scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.05); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:7890,Test,TestStatistic,7890,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,4,"['Test', 'test']","['TestStatistic', 'test']"
Testability," scannedVariable = 0, RooStats::HypoTestInverter::ECalculatorType type = kFrequentist, double size = 0.05); Constructor from a model for B model and a model for S+B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax, bool scanLog = false) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:8527,Test,TestStatistic,8527,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,2,"['Test', 'test']","['TestStatistic', 'test']"
Testability," seed); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual TMatrixTBase<double>&ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1); virtual TMatrixTBase<double>&ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1); virtual doubleRowNorm() const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual TMatrixTBase<double>&SetColIndexArray(Int_t* data); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual TMatrixTBase<double>&SetMatrixArray(const double* data, Option_t* option = """"); static voidTObject::SetObjectStat(Bool_t stat); virtual TMatrixTBase<double>&SetRowIndexArray(Int_t* data); virtual TMatrixTBase<double>&SetSub(Int_t row_lwb, Int_t col_lwb, const TMatrixTBase<double>& source); doubleSetTol(double newTol); virtual voidTObject::SetUniqueID(UInt_t uid); virtual TMatrixTBase<double>&Shift(Int_t row_shift, Int_t col_shift); virtual voidShowMembers(TMemberInspector&); virtual TMatrixTBase<double>&Sqr(); virtual TMatrixTBase<double>&Sqrt(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual doubleSum() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual TMatrixTBase<double>&UnitMatrix(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual TMatrixTBase<double>&Zero().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMatrixTBase_double_.html:14188,Test,TestBit,14188,root/html534/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html534/TMatrixTBase_double_.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressDialog.h 36073 2010-10-05 08:14:21Z ganis $ » Last generated: 2010-10-08 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressDialog.html:4585,log,logs,4585,root/html528/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html528/TProofProgressDialog.html,2,['log'],"['log-current-query-only', 'logs']"
Testability," sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressDialog.h 36073 2010-10-05 08:14:21Z ganis $ » Last generated: 2011-07-04 15:36; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofProgressDialog.html:4585,log,logs,4585,root/html530/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html530/TProofProgressDialog.html,2,['log'],"['log-current-query-only', 'logs']"
Testability," sel, Int_t sz, Long64_t fst, Long64_t ent); Reset dialog box preparing for new query. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); Update progress bar and status labels.; Use ""processed == total"" or ""processed < 0"" to indicate end of processing. Float_t AdjustBytes(Float_t mbs, TString& sf); Transform MBs to GBs ot TBs and get the correct suffix. ~TProofProgressDialog(); Cleanup dialog. void CloseWindow(); Called when dialog is closed. void DisableAsyn(); Disable the asyn switch when an external request for going asynchronous is issued. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void DoClose(); Close dialog. void DoLog(); Ask proof session for logs. void DoKeep(Bool_t on); Handle keep toggle button. void DoSetLogQuery(Bool_t on); Handle log-current-query-only toggle button. void DoStop(); Handle Stop button. void DoAbort(); Handle Cancel button. void DoAsyn(); Handle Asyn button. void DoPlotRateGraph(); Handle Plot Rate Graph. void DoMemoryPlot(); Do a memory plot. void DoEnableSpeedo(); Enable/Disable speedometer. TProofProgressDialog(TProof* proof, const char* selector, Int_t files, Long64_t first, Long64_t entries). void Progress(Long64_t total, Long64_t processed). » Author: Fons Rademakers 21/03/03 » Copyright (C) 1995-2003, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id: TProofProgressDialog.h 36073 2010-10-05 08:14:21Z ganis $ » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofProgressDialog.html:4585,log,logs,4585,root/html532/TProofProgressDialog.html,https://root.cern,https://root.cern/root/html532/TProofProgressDialog.html,2,['log'],"['log-current-query-only', 'logs']"
Testability," selected ;  vo005_Combinations.C In this tutorial we learn how combinations of RVecs can be build ;  vo005_Combinations.py In this tutorial we learn how combinations of RVecs can be build ;  vo006_IndexManipulation.C In this tutorial we demonstrate RVec helpers for index manipulation ;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlmodifyfile.C Example to read, modify and store xml file, using TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.16/01 - Reference Guide Generated on Su",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:173763,test,tests,173763,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability," selectors PAR. ~TProofBench(); Destructor. Int_t OpenOutFile(Bool_t wrt = kFALSE, Bool_t verbose = kTRUE); Set the otuput file; Return 0 on success, -1 on error. Int_t SetOutFile(const char* outfile, Bool_t verbose = kTRUE); Set the output file; Return 0 on success, -1 on error. void CloseOutFile(); Close output file. Int_t RunCPU(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1, Int_t step = -1); Perform the CPU run; Return 0 on success, -1 on error. Int_t RunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Perform the CPU run scanning over the number of workers per node; Return 0 on success, -1 on error. void DrawCPU(const char* outfile, const char* opt = ""std:""); Draw the CPU speedup plot.; opt = 'std:' draw standard evt/s plot; 'stdx:' draw standard evt/s plot, 1 worker per node; 'norm:' draw normalized plot; 'normx:' draw normalized plot, 1 worker per node. Int_t RunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Perform a test using dataset 'dset'; Return 0 on success, -1 on error; Open the file for the results. Int_t RunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); Perform a test using dataset 'dset' scanning over the number of workers; per node.; Return 0 on success, -1 on error; Open the file for the results. void DrawDataSet(const char* outfile, const char* opt = ""std:"", const char* type = ""mbs""); Draw the CPU speedup plot.; opt = 'std:' Standard scaling plot; 'norm:' Normalized scaling plot; 'stdx:' Standard scaling plot, 1 worker per node; 'normx:' Normalized scaling plot, 1 worker per node; type = 'mbs' MB/s scaling plots (default); 'evts' Event/s scaling plots. Int_t ReleaseCache(const char* dset); Release memory cache for dataset 'dset'; Return 0 on success, -1 on error. Int_t RemoveDataSet(const char* dset); Physically remove the dataset 'dset', i.e. remove the dataset and the files; it describes; Return 0 on success, -1 on error. Int_t MakeDataSet(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TProofBench.html:8974,test,test,8974,root/html532/TProofBench.html,https://root.cern,https://root.cern/root/html532/TProofBench.html,1,['test'],['test']
Testability," separated range names can be specified.; SumCoefRange(const char* name) -- Set the range in which to interpret the coefficients of RooAddPdf components; NumCPU(int num) -- Parallelize NLL calculation on num CPUs; Optimize(Bool_t flag) -- Activate constant term optimization (on by default); SplitRange(Bool_t flag) -- Use separate fit ranges in a simultaneous fit. Actual range name for each; subsample is assumed to by rangeName_{indexState} where indexState; is the state of the master index category of the simultaneous fit; Constrain(const RooArgSet&pars) -- For p.d.f.s that contain internal parameter constraint terms, only apply constraints to given subset of parameters; ExternalConstraints(const RooArgSet& ) -- Include given external constraints to likelihood; Verbose(Bool_t flag) -- Constrols RooFit informational messages in likelihood construction; CloneData(Bool flag) -- Use clone of dataset in NLL (default is true). RooAbsReal* createNLL(RooAbsData& data, const RooLinkedList& cmdList); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. See RooAbsPdf::createNLL(RooAbsData& data, RooCmdArg arg1, RooCmdArg arg2, RooCmdArg arg3, RooCmdArg arg4,; RooCmdArg arg5, RooCmdArg arg6, RooCmdArg arg7, RooCmdArg arg8). for documentation of options. RooFitResult* fitTo(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); Fit PDF to given dataset. If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset; is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT; commands MIGRAD, HESSE and MINOS in succession. The following ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:48522,log,log,48522,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['log'],['log']
Testability," separated range names can be specified.; SumCoefRange(const char* name) -- Set the range in which to interpret the coefficients of RooAddPdf components; NumCPU(int num) -- Parallelize NLL calculation on num CPUs; Optimize(Bool_t flag) -- Activate constant term optimization (on by default); SplitRange(Bool_t flag) -- Use separate fit ranges in a simultaneous fit. Actual range name for each; subsample is assumed to by rangeName_{indexState} where indexState; is the state of the master index category of the simultaneous fit; Constrain(const RooArgSet&pars) -- For p.d.f.s that contain internal parameter constraint terms, only apply constraints to given subset of parameters; ExternalConstraints(const RooArgSet& ) -- Include given external constraints to likelihood; Verbose(Bool_t flag) -- Constrols RooFit informational messages in likelihood construction; CloneData(Bool flag) -- Use clone of dataset in NLL (default is true). RooAbsReal* createNLL(RooAbsData& data, const RooLinkedList& cmdList); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. See RooAbsPdf::createNLL(RooAbsData& data, RooCmdArg arg1, RooCmdArg arg2, RooCmdArg arg3, RooCmdArg arg4,; RooCmdArg arg5, RooCmdArg arg6, RooCmdArg arg7, RooCmdArg arg8). for documentation of options. RooFitResult* fitTo(RooAbsData& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); Fit PDF to given dataset. If dataset is unbinned, an unbinned maximum likelihood is performed. If the dataset; is binned, a binned maximum likelihood is performed. By default the fit is executed through the MINUIT; comman",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAbsPdf.html:49200,log,log,49200,root/html528/RooAbsPdf.html,https://root.cern,https://root.cern/root/html528/RooAbsPdf.html,3,['log'],['log']
Testability," set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. Function Members (Methods); public:. virtual~MethodBDT(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Double_tBoost(vector<TMVA::Event*>, TMVA::DecisionTree* dt, Int_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBDT.html:3515,test,test,3515,root/html528/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBDT.html,3,['test'],['test']
Testability," set of decision trees (a forest).; Gradient boosting works more like a function expansion approach, where; each tree corresponds to a summand. The parameters for each summand (tree); are determined by the minimization of a error function (binomial log-; likelihood for classification and Huber loss for regression).; A greedy algorithm is used, which means, that only one tree is modified; at a time, while the other trees stay fixed. Bagging:. In this particular variant of the Boosted Decision Trees the boosting; is not done on the basis of previous training results, but by a simple; stochastic re-sampling of the initial training event sample. Random Trees:; Similar to the ""Random Forests"" from Leo Breiman and Adele Cutler, it; uses the bagging algorithm together and bases the determination of the; best node-split during the training on a random subset of variables only; which is individually chosen for each split. Analysis:. Applying an individual decision tree to a test event results in a; classification of the event as either signal or background. For the; boosted decision tree selection, an event is successively subjected to; the whole set of decision trees and depending on how often it is; classified as signal, a ""likelihood"" estimator is constructed for the; event being signal or background. The value of this estimator is the; one which is then used to select the events from an event sample, and; the cut value on this estimator defines the efficiency and purity of; the selection. Function Members (Methods); public:. virtual~MethodBDT(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; Double_tBoost(vector<const TMVA::Event*>&, TMVA::DecisionTree* dt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodBDT.html:3515,test,test,3515,root/html534/TMVA__MethodBDT.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodBDT.html,3,['test'],['test']
Testability," set of unblinding parameters ;  CRooUnblindPrecisionImplementation of BlindTools' precision blinding method A RooUnblindPrecision object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters ;  CRooUnblindUniformImplementation of BlindTools' offset blinding method A RooUnblindUniform object is a real valued function object, constructed from a blind value holder and a set of unblinding parameters ;  CRooUniformFlat p.d.f ;  CRooUniformBinningRooUniformBinning is an implementation of RooAbsBinning that provides a uniform binning in 'n' bins between the range end points ;  CRooUnitTestRooUnit test is an abstract base class for unit regression tests for RooFit and RooStats tests performed in stressRooFit and stressRooStats Implementations of this class must implement abstract method testCode() which defines the regression test to be performed ;  ►CRooVectorDataStoreRooVectorDataStore is the abstract base class for data collection that use a TTree as internal storage mechanism ;  CCatVector;  CRealFullVector;  CRealVector;  CRooVoigtianRooVoigtian is an efficient implementation of the convolution of a Breit-Wigner with a Gaussian, making use of the complex error function ;  ►CRooWorkspaceThe RooWorkspace is a persistable container for RooFit projects ;  ►CCodeRepo;  CClassFiles;  CClassRelInfo;  CExtraHeader;  CWSDir;  CRooWorkspaceHandleAn interface to set and retrieve a workspace ;  CRooXYChi2Var;  CRPadUserAxisBaseBase class for user coordinates (e.g ;  Crsa_KEY;  Crsa_KEY_export;  Crsa_NUMBER;  CSegment_t;  CSetWindowAttributes_t;  CSHtmlExtensions_t;  CSHtmlIndex_t;  CSHtmlMargin_t;  CSHtmlStyle_t;  CSHtmlStyleStack_t;  CSHtmlTokenMap_t;  CSQLite3_Stmt_t;  CSysInfo_t;  CtableDescriptor_st;  CTAdvancedGraphicsDialog;  CTAlien;  CTAlienCollection;  CTAlienDirectory;  CTAlienDirectoryEntry;  CTAlienFile;  CTAliEnFind;  CTAlienJDL;  CTAlienJob;  CTAlienJobStatus;  CTAlienJobStatusList;  CTAlienMasterJob;  CTAlienMaste",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/annotated.html:131527,test,test,131527,doc/v616/annotated.html,https://root.cern,https://root.cern/doc/v616/annotated.html,5,['test'],"['test', 'testCode', 'tests']"
Testability," set); virtual TDataSet*TDataSet::RemoveAt(Int_t idx); virtual voidTTable::Reset(Int_t c = 0); voidTObject::ResetBit(UInt_t f); virtual voidTTable::ResetMap(Bool_t wipe = kTRUE); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTTable::SavePrimitive(ostream& out, Option_t* option = """"); virtual voidTTable::Set(Int_t n); virtual voidTTable::Set(Int_t n, Char_t* array); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTDataSet::SetMother(TDataSet* parent = 0); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTable::SetNRows(Int_t n); virtual voidTDataSet::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTDataSet::SetParent(TDataSet* parent = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTDataSet::SetWrite(); virtual voidShowMembers(TMemberInspector& insp); virtual voidTDataSet::Shunt(TDataSet* newParent = 0); virtual Int_tTNamed::Sizeof() const; virtual voidTDataSet::Sort(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; static const char*TTable::TableDictionary(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTDataSet::UnMark()MENU ; voidTDataSet::UnMarkAll()MENU ; virtual voidTTable::Update(); virtual voidTTable::Update(TDataSet* set, UInt_t opt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenericTable.html:12972,Test,TestBit,12972,root/html528/TGenericTable.html,https://root.cern,https://root.cern/root/html528/TGenericTable.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," set); virtual voidSetBorderSize(Int_t bordersize = 4)MENU ; virtual voidSetCornerRadius(Double_t rad = 0.2)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name = """")MENU ; static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(Option_t* option = ""br""); virtual voidSetShadowColor(Int_t color)MENU ; virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetX1(Double_t x1); virtual voidSetX1NDC(Double_t x1); virtual voidSetX2(Double_t x2); virtual voidSetX2NDC(Double_t x2); virtual voidSetY1(Double_t y1); virtual voidSetY1NDC(Double_t y1); virtual voidSetY2(Double_t y2); virtual voidSetY2NDC(Double_t y2); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPave.html:7741,Test,TestBit,7741,root/html534/TPave.html,https://root.cern,https://root.cern/root/html534/TPave.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::VariableTransformBase::SetEnabled(Bool_t e); voidTMVA::VariableTransformBase::SetNormalise(Bool_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTMVA::VariableTransformBase::SetOutput(TMVA::Event* event, vector<Float_t>& output, vector<Char_t>& mask, const TMVA::Event* oldEvent = 0, Bool_t backTransform = kFALSE) const; voidTMVA::VariableTransformBase::SetOutputDataSetInfo(TMVA::DataSetInfo* outputDsi); voidTMVA::VariableTransformBase::SetTMVAVersion(TMVA::TMVAVersion_t v); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::VariableTransformBase::SetUseSignalTransform(Bool_t e = kTRUE); virtual voidShowMembers(TMemberInspector&); const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Spectators() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Targets() const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTMVA::VariableTransformBase::ToggleInputSortOrder(Bool_t sortOrder); virtual const TMVA::Event*Transform(const TMVA::Event *const, Int_t cls) const; virtual voidTObject::UseCurrentStyle(); Bool_tTMVA::VariableTransformBase::UseSignalTransform() const; TMVA::VariablePCATransformVariablePCATransform(TMVA::DataSetInfo& dsi); TMVA::VariablePCATransformVariablePCATransform(const TMVA::VariablePCATransform&); const vector<TMVA::VariableInfo>&TMVA::VariableTransformBase::Variables() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidWriteTransformationToStream(ostream&) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__VariablePCATransform.html:6431,Test,TestBit,6431,root/html534/TMVA__VariablePCATransform.html,https://root.cern,https://root.cern/root/html534/TMVA__VariablePCATransform.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," several paths defined by different tau choose the tau yielding the best path; start the scanning the chosen path; check error rate at a given frequency data used for check: [fPerfIdx1,fPerfIdx2]; stop when either of the following conditions are fullfilled:; loop index==fGDNPathSteps; error > fGDErrScale*errmin; only in DEBUG mode: risk is not monotonously decreasing. The algorithm will warn if:; the error rate was still decreasing when loop finished -> increase fGDNPathSteps!; minimum was found at an early stage -> decrease fGDPathStep; DEBUG: risk > previous risk -> entered chaotic region (regularization is too small) . Definition at line 538 of file RuleFitParams.cxx. ◆ MakeGradientVector(). void TMVA::RuleFitParams::MakeGradientVector ; (; ). protected . make gradient vector ; Definition at line 1375 of file RuleFitParams.cxx. ◆ MakeTstGradientVector(). void TMVA::RuleFitParams::MakeTstGradientVector ; (; ). protected . make test gradient vector for all tau same algorithm as MakeGradientVector() ; Definition at line 1259 of file RuleFitParams.cxx. ◆ Optimism(). Double_t TMVA::RuleFitParams::Optimism ; (; ). protected . implementation of eq. ; 7.17 in Hastie,Tibshirani & Friedman book this is the covariance between the estimated response yhat and the true value y. NOT REALLY SURE IF THIS IS CORRECT! — THIS IS NOT USED — ; Definition at line 925 of file RuleFitParams.cxx. ◆ Penalty(). Double_t TMVA::RuleFitParams::Penalty ; (; ); const. This is the ""lasso"" penalty To be used for regression. ; — NOT USED — ; Definition at line 356 of file RuleFitParams.cxx. ◆ Risk() [1/2]. Double_t TMVA::RuleFitParams::Risk ; (; UInt_t ; ind1, . UInt_t ; ind2, . Double_t ; neff . ); const. risk assessment ; Definition at line 314 of file RuleFitParams.cxx. ◆ Risk() [2/2]. Double_t TMVA::RuleFitParams::Risk ; (; UInt_t ; ind1, . UInt_t ; ind2, . Double_t ; neff, . UInt_t ; itau . ); const. risk assessment for tau model <itau> ; Definition at line 334 of file RuleFitParams.cxx. ◆ Ris",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html:15807,test,test,15807,doc/master/classTMVA_1_1RuleFitParams.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleFitParams.html,1,['test'],['test']
Testability," shapes. TGLPhysicalShape* FindPhysical(UInt_t phid) const; Find and return physical shape identified by unqiue 'ID'.; Returns 0 if not found. UInt_t GetMaxPhysicalID(); Returns the maximum used physical id.; Returns 0 if empty. Bool_t BeginUpdate(); Put scene in update mode, return true if lock acquired. void EndUpdate(Bool_t minorChange = kTRUE, Bool_t sceneChanged = kTRUE, Bool_t updateViewers = kTRUE); Exit scene update mode. If sceneChanged is true (default), the scene timestamp is; increased and basic draw-lists etc will be rebuild on next draw; request. If you only changed colors or some other visual; parameters that do not affect object bounding-box or; transformation matrix, you can set it to false. If updateViewers is true (default), the viewers using this scene; will be tagged as changed. If sceneChanged is true the; updateViewers should be true as well, unless you take care of; the viewers elsewhere or in some other way. void UpdateLogical(TObject* logid); Drop display-lists for the logical (assume TGLObject/direct rendering).; Re-calculate the bounding box (also for all physicals). void UpdatePhysical(UInt_t phid, Double_t* trans, UChar_t* col); Reposition/recolor physical shape. void UpdatePhysical(UInt_t phid, Double_t* trans, Color_t cidx = -1, UChar_t transp = 0); Reposition/recolor physical shape. void UpdatePhysioLogical(TObject* logid, Double_t* trans, UChar_t* col); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). void UpdatePhysioLogical(TObject* logid, Double_t* trans, Color_t cidx, UChar_t transp); Reposition/recolor physical for given logical (assume TGLObject and; a single physical). UInt_t BeginSmartRefresh(); Moves logicals that support smart-refresh to intermediate cache.; Destroys the others and returns the number of destroyed ones. void EndSmartRefresh(); Wipes logicals in refresh-cache. TGLLogicalShape * FindLogicalSmartRefresh(TObject* ID) const; Find and return logical shape identified by unqi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:12772,log,logid,12772,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,12,['log'],"['logical', 'logid']"
Testability," shared with the previous one; if not; wipe display-lists of all logicals. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque elements. void RenderTransp(TGLRnrCtx& rnrCtx); Render transparent elements. void RenderSelOpaque(TGLRnrCtx& rnrCtx); Render selected opaque elements. void RenderSelTransp(TGLRnrCtx& rnrCtx); Render selected transparent elements. void PostDraw(TGLRnrCtx& rnrCtx); Called after the rendering is finished.; In debug mode draw statistcs is dumped.; Parent's PostDraw is called for GL cleanup. void RenderAllPasses(TGLRnrCtx& rnrCtx, TGLScene::DrawElementPtrVec_t& elVec, Bool_t check_timeout); Do full rendering of scene. First draw the opaques, then the transparents. For each we do; the number of passes required by draw mode and clipping setup. void RenderElements(TGLRnrCtx& rnrCtx, TGLScene::DrawElementPtrVec_t& elVec, Bool_t check_timeout, const TGLPlaneSet_t* clipPlanes = 0); Render DrawElements in elementVec with given timeout.; If clipPlanes is non-zero, test each element against its; clipping planes. Bool_t ResolveSelectRecord(TGLSelectRecord& rec, Int_t curIdx); Process selection record rec.; 'curIdx' is the item position where the scene should start; its processing.; Return TRUE if an object has been identified or FALSE otherwise.; The scene-info member of the record is already set by the caller. void CalcBoundingBox() const; Encapsulates all physical shapes bounding box with axes aligned box.; Validity checked in the base-class. void AdoptLogical(TGLLogicalShape& shape); Adopt dynamically created logical 'shape' - add to internal map; and take responsibility for deleting. Bool_t DestroyLogical(TObject* logid, Bool_t mustFind = kTRUE); Destroy logical shape defined by unique 'ID'.; Returns kTRUE if found/destroyed - kFALSE otherwise. If mustFind is true, an error is reported if the logical is not; found. Int_t DestroyLogicals(); Destroy all logical shapes in scene.; Return number of destroyed logicals. TGLLogicalShape * FindLogical(TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLScene.html:10159,test,test,10159,root/html528/TGLScene.html,https://root.cern,https://root.cern/root/html528/TGLScene.html,3,['test'],['test']
Testability," should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCuts.html:2052,test,tests,2052,root/html528/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCuts.html,5,['test'],['tests']
Testability," should be used, which modifies; the significance criterion.; . The rectangular cut of a volume in the variable space is performed using; a binary tree to sort the training events. This provides a significant; reduction in computing time (up to several orders of magnitudes, depending; on the complexity of the problem at hand).; ; Technically, optimisation is achieved in TMVA by two methods:; ; Monte Carlo generation using uniform priors for the lower cut value,; and the cut width, thrown within the variable ranges.; A Genetic Algorithm (GA) searches for the optimal (""fittest"") cut sample.; The GA is configurable by many external settings through the option; string. For difficult cases (such as many variables), some tuning; may be necessary to achieve satisfying results; . Attempts to use Minuit fits (Simplex ot Migrad) instead have not shown; superior results, and often failed due to convergence at local minima.; . The tests we have performed so far showed that in generic applications,; the GA is superior to MC sampling, and hence GA is the default method.; It is worthwhile trying both anyway.; Decorrelated (or ""diagonalized"") Cuts. See class description for Method Likelihood for a detailed explanation.; ; . Function Members (Methods); public:. virtual~MethodCuts(); voidTObject::AbstractMethod(const char* method) const; voidTMVA::Configurable::AddOptionsXMLTo(void* parent) const; voidTMVA::MethodBase::AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType); virtual voidAddWeightsXMLTo(void* parent) const; virtual voidTObject::AppendPad(Option_t* option = """"); TDirectory*TMVA::MethodBase::BaseDir() const; virtual voidTObject::Browse(TBrowser* b); voidTMVA::Configurable::CheckForUnusedOptions() const; virtual voidCheckSetup(); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MethodCuts.html:2052,test,tests,2052,root/html534/TMVA__MethodCuts.html,https://root.cern,https://root.cern/root/html534/TMVA__MethodCuts.html,1,['test'],['tests']
Testability," sigma) const;  Gaussian distribution - default method is Box-Muller (polar method) ;  ; double GaussianZig (double sigma) const;  Gaussian distribution - Ziggurat method. ;  ; double GaussianRatio (double sigma) const;  Gaussian distribution - Ratio method. ;  ; double GaussianTail (double a, double sigma) const;  Gaussian Tail distribution. ;  ; void Gaussian2D (double sigmaX, double sigmaY, double rho, double &x, double &y) const;  Bivariate Gaussian distribution with correlation. ;  ; void GaussianND (size_t dim, const double *pars, const double *covmat, double *genpars, double *lmat=nullptr) const;  Multivariate Gaussian distribution. ;  ; double Exponential (double mu) const;  Exponential distribution. ;  ; double Cauchy (double a) const;  Cauchy distribution. ;  ; double Landau () const;  Landau distribution. ;  ; double Gamma (double a, double b) const;  Gamma distribution. ;  ; double Beta (double a, double b) const;  Beta distribution. ;  ; double LogNormal (double zeta, double sigma) const;  Log Normal distribution. ;  ; double ChiSquare (double nu) const;  Chi square distribution. ;  ; double FDist (double nu1, double nu2) const;  F distribution. ;  ; double tDist (double nu) const;  t student distribution ;  ; double Rayleigh (double sigma) const;  Rayleigh distribution. ;  ; double Logistic (double a) const;  Logistic distribution. ;  ; double Pareto (double a, double b) const;  Pareto distribution. ;  ; void Dir2D (double &x, double &y) const;  generate random numbers in a 2D circle of radious 1 ;  ; void Dir3D (double &x, double &y, double &z) const;  generate random numbers in a 3D sphere of radious 1 ;  ; unsigned int Poisson (double mu) const;  Poisson distribution. ;  ; unsigned int Binomial (double p, unsigned int n) const;  Binomial distribution. ;  ; unsigned int NegativeBinomial (double p, double n) const;  Negative Binomial distribution. ;  ; std::vector< unsigned int > Multinomial (unsigned int ntot, const std::vector< double > &p) const;  M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html:3878,Log,LogNormal,3878,doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLRandomEngine.html,30,['Log'],"['Log', 'LogNormal']"
Testability," signal and backgroundDefinition DataLoader.cxx:632; TMVA::DataLoader::AddBackgroundTreevoid AddBackgroundTree(TTree *background, Double_t weight=1.0, Types::ETreeType treetype=Types::kMaxTreeType)number of signal events (used to compute significance)Definition DataLoader.cxx:402; TMVA::DataLoader::GetDataSetInfoDataSetInfo & GetDataSetInfo()Definition DataLoader.cxx:137; TMVA::DataSetInfo::GetListOfVariablesstd::vector< TString > GetListOfVariables() constreturns list of variablesDefinition DataSetInfo.cxx:406; TMVA::FactoryThis is the main MVA steering class.Definition Factory.h:80; TMVA::Factory::TrainAllMethodsvoid TrainAllMethods()Iterates through all booked methods and calls training.Definition Factory.cxx:1114; TMVA::Factory::BookMethodMethodBase * BookMethod(DataLoader *loader, TString theMethodName, TString methodTitle, TString theOption="""")Book a classifier or regression method.Definition Factory.cxx:352; TMVA::Factory::TestAllMethodsvoid TestAllMethods()Evaluates all booked methods on the testing data and adds the output to the Results in the corresponi...Definition Factory.cxx:1271; TMVA::Factory::EvaluateAllMethodsvoid EvaluateAllMethods(void)Iterates over all MVAs that have been booked, and calls their evaluation methods.Definition Factory.cxx:1376; TMVA::Factory::GetROCCurveTGraph * GetROCCurve(DataLoader *loader, TString theMethodName, Bool_t setTitles=kTRUE, UInt_t iClass=0, Types::ETreeType type=Types::kTesting)Argument iClass specifies the class to generate the ROC curve in a multiclass setting.Definition Factory.cxx:912; TMVA::PyMethodBase::PyInitializestatic void PyInitialize()Initialize Python interpreter.Definition PyMethodBase.cxx:153; TMVA::Types::kPyKeras@ kPyKerasDefinition Types.h:103; TMVA::Types::kBDT@ kBDTDefinition Types.h:86; TMVA::Types::kDL@ kDLDefinition Types.h:99; TMacroClass supporting a collection of lines with C++ code.Definition TMacro.h:31; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:75668,Test,TestAllMethodsvoid,75668,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,3,"['Test', 'test']","['TestAllMethods', 'TestAllMethodsvoid', 'testing']"
Testability," simple and straightforward utilities to plot SamplingDistribution objects. More...;  ; class  SamplingDistribution;  This class simply holds a sampling distribution of some test statistic. More...;  ; class  SamplingSummary;  ; class  SamplingSummaryLookup;  ; class  SequentialProposal;  Class implementing a proposal function that samples the parameter space by moving only in one coordinate (chosen randomly) at each step. More...;  ; class  SimpleInterval;  SimpleInterval is a concrete implementation of the ConfInterval interface. More...;  ; class  SimpleLikelihoodRatioTestStat;  TestStatistic class that returns -log(L[null] / L[alt]) where L is the likelihood. More...;  ; class  SPlot;  A class to calculate ""sWeights"" used to create an ""sPlot"". More...;  ; class  TestStatistic;  TestStatistic is an interface class to provide a facility for construction test statistics distributions to the NeymanConstruction class. More...;  ; class  TestStatSampler;  TestStatSampler is an interface class for a tools which produce RooStats SamplingDistributions. More...;  ; class  ToyMCImportanceSampler;  ToyMCImportanceSampler is an extension of the ToyMCSampler for Importance Sampling. More...;  ; class  ToyMCPayload;  ; class  ToyMCSampler;  ToyMCSampler is an implementation of the TestStatSampler interface. More...;  ; class  ToyMCStudy;  ToyMCStudy is an implementation of RooAbsStudy for toy Monte Carlo sampling. More...;  ; class  UniformProposal;  UniformProposal is a concrete implementation of the ProposalFunction interface for use with a Markov Chain Monte Carlo algorithm. More...;  ; class  UpperLimitMCSModule;  This class allow to compute in the ToyMcStudy framework the ProfileLikelihood upper limit for each toy-MC sample generated. More...;  . Enumerations; enum  toysStrategies { EQUALTOYSPERDENSITY; , EXPONENTIALTOYDISTRIBUTION; };  . Functions; double AsimovSignificance (double s, double b, double sigma_b=0.0);  Compute the Asimov Median significance for a Poisson pro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceRooStats.html:8000,Test,TestStatSampler,8000,doc/master/namespaceRooStats.html,https://root.cern,https://root.cern/doc/master/namespaceRooStats.html,2,['Test'],['TestStatSampler']
Testability, simultaneous fits: creating and writing a workspace ;  ; file  rf502_wspacewrite.py;   Organization and simultaneous fits: creating and writing a workspace ;  ; file  rf503_wspaceread.C;   Organisation and simultaneous fits: reading and using a workspace ;  ; file  rf503_wspaceread.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #503 ;  ; file  rf504_simwstool.C;   Organisation and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf504_simwstool.py;   Organization and simultaneous fits: using RooSimWSTool to construct a simultaneous pdf that is built of variations of an input pdf ;  ; file  rf505_asciicfg.C;   Organisation and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf505_asciicfg.py;   Organization and simultaneous fits: reading and writing ASCII configuration files ;  ; file  rf506_msgservice.C;   Organisation and simultaneous fits: tuning and customizing the RooFit message logging facility ;  ; file  rf506_msgservice.py;   Organization and simultaneous fits: tuning and customizing the ROOT.RooFit message logging facility ;  ; file  rf508_listsetmanip.C;   Organization and simultaneous fits: RooArgSet and RooArgList tools and tricks ;  ; file  rf508_listsetmanip.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #508 ;  ; file  rf509_wsinteractive.C;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf509_wsinteractive.py;   Organization and simultaneous fits: easy interactive access to workspace contents - CINT to CLING code migration ;  ; file  rf510_wsnamedsets.C;   Organization and simultaneous fits: working with named parameter sets and parameter snapshots in workspaces ;  ; file  rf510_wsnamedsets.py;   'ORGANIZATION AND SIMULTANEOUS FITS' RooFit tutorial macro #510 ;  ; file  rf511_wsfactory_basic.C;   Organization and simultaneous fits: bas,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__roofit.html:13357,log,logging,13357,doc/master/group__tutorial__roofit.html,https://root.cern,https://root.cern/doc/master/group__tutorial__roofit.html,1,['log'],['logging']
Testability," sizdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSpline.html:6891,Test,TestBit,6891,root/html534/TSpline.html,https://root.cern,https://root.cern/root/html534/TSpline.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," size = trafoDefinition.Sizeof(); position < size; ++position) {; 93 TString ch = trafoDefinition(position,1);; 94 if (ch == ""("") ++parenthesisCount;; 95 else if (ch == "")"") --parenthesisCount;; 96 else if (ch == "","" && parenthesisCount == 0) trafoDefinition.Replace(position,1,'+');; 97 }; 98 ; 99 TList* trList = gTools().ParseFormatLine( trafoDefinition, ""+"" );; 100 TListIter trIt(trList);; 101 while (TObjString* os = (TObjString*)trIt()) {; 102 TString tdef = os->GetString();; 103 Int_t idxCls = -1;; 104 ; 105 TString variables = """";; 106 if (tdef.Contains(""("")) { // contains selection of variables; 107 Ssiz_t parStart = tdef.Index( ""("" );; 108 Ssiz_t parLen = tdef.Index( "")"", parStart )-parStart+1;; 109 ; 110 variables = tdef(parStart,parLen);; 111 tdef.Remove(parStart,parLen);; 112 variables.Remove(parLen-1,1);; 113 variables.Remove(0,1);; 114 }; 115 ; 116 TList* trClsList = gTools().ParseFormatLine( tdef, ""_"" ); // split entry to get trf-name and class-name; 117 TListIter trClsIt(trClsList);; 118 if (trClsList->GetSize() < 1); 119 log << kFATAL <<Form(""Dataset[%s] : "",dataInfo.GetName())<< ""Incorrect transformation string provided."" << Endl;; 120 const TString& trName = ((TObjString*)trClsList->At(0))->GetString();; 121 ; 122 if (trClsList->GetEntries() > 1) {; 123 TString trCls = ""AllClasses"";; 124 ClassInfo *ci = NULL;; 125 trCls = ((TObjString*)trClsList->At(1))->GetString();; 126 if (trCls != ""AllClasses"") {; 127 ci = dataInfo.GetClassInfo( trCls );; 128 if (ci == NULL); 129 log << kFATAL <<Form(""Dataset[%s] : "",dataInfo.GetName())<< ""Class "" << trCls << "" not known for variable transformation ""; 130 << trName << "", please check."" << Endl;; 131 else; 132 idxCls = ci->GetNumber();; 133 }; 134 }; 135 ; 136 VariableTransformBase* transformation = NULL;; 137 if (trName == ""I"" || trName == ""Ident"" || trName == ""Identity"") {; 138 if (variables.Length() == 0) variables = ""_V_"";; 139 transformation = new VariableIdentityTransform(dataInfo);; 140 }; 141 else if (trN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/VariableTransform_8cxx_source.html:4811,log,log,4811,doc/master/VariableTransform_8cxx_source.html,https://root.cern,https://root.cern/doc/master/VariableTransform_8cxx_source.html,1,['log'],['log']
Testability," so that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i} = 1; \]. and also expectation value of weight w1i equal to W1pi and expectation value of weight w2i equal to W2pi. Weights in both the histograms are random variables with distributions which can be approximated by a normal probability distribution \( N(W_{1}p_{i},\sigma_{1i}^{2}) \) for the first histogram and by a distribution \( N(W_{2}p_{i},\sigma_{2i}^{2}) \) for the second. Here \( \sigma_{1i}^{2} \) and \( \sigma_{2i}^{2} \) are the variances of w1i and w2i with estimators \( s_{1i}^{2} \) and \( s_{2i}^{2} \) respectively. If the hypothesis of identity is valid, then the maximum likelihood and Least Square Method estimator of pi,i=1,...,r, is ; \[; \hat{p}_{i} = \frac{w_{1i}W_{1}/s_{1i}^{2}+w_{2i}W_{2} /s_{2i}^{2}}{W_{1}^{2}/s_{1i}^{2}+W_{2}^{2}/s_{2i}^{2}}; \]. We may then use the test statistic ; \[; X^{2} = \sum_{i=1}^{r} \frac{(w_{1i}-W_{1}\hat{p}_{i})^{2}}{s_{1i}^{2}} + \sum_{i=1}^{r} \frac{(w_{2i}-W_{2}\hat{p}_{i})^{2}}{s_{2i}^{2}} = \sum_{i=1}^{r} \frac{(W_{1}w_{2i}-W_{2}w_{1i})^{2}}{W_{1}^{2}s_{2i}^{2}+W_{2}^{2}s_{1i}^{2}}; \]. and it has approximately a \( \chi^{2}_{(r-1)} \) distribution [2]. The normalized or studentised residuals [6] ; \[; r_{i} = \frac{w_{1i}-W_{1}\hat{p}_{i}}{s_{1i}\sqrt{1 - \frac{1}{(1+W_{2}^{2}s_{1i}^{2}/W_{1}^{2}s_{2i}^{2})}}}; \]. have approximately a normal distribution with mean equal to 0 and standard deviation 1. A recommended minimal expected frequency is equal to 10 for the proposed test.; Numerical examples:; The method described herein is now illustrated with an example. We take a distribution ; \[; \phi(x) = \frac{2}{(x-10)^{2}+1} + \frac{1}{(x-14)^{2}+1} (1); \]. defined on the interval [4,16]. Events distributed according to the formula (1) are simulated to create the unweighted histogram. Uniformly distributed events are simulated for the weighted histogram with weights calculated by formula (1). Each histogram has the same number of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:95018,test,test,95018,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::CrossEntropy. class TMVA::CrossEntropy: public TMVA::SeparationBase. Implementation of the CrossEntropy as separation criterion; -p log (p) - (1-p)log(1-p); p=purity. Function Members (Methods); public:. virtual~CrossEntropy(); static TClass*Class(); TMVA::CrossEntropyCrossEntropy(); TMVA::CrossEntropyCrossEntropy(const TMVA::CrossEntropy& g); const TString&TMVA::SeparationBase::GetName(); virtual Double_tTMVA::SeparationBase::GetSeparationGain(const Double_t& nSelS, const Double_t& nSelB, const Double_t& nTotS, const Double_t& nTotB); virtual Double_tGetSeparationIndex(const Double_t& s, const Double_t& b); virtual TClass*IsA() const; TMVA::CrossEntropy&operator=(const TMVA::CrossEntropy&); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(); TMVA::SeparationBaseTMVA::SeparationBase::SeparationBase(const TMVA::SeparationBase& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringTMVA::SeparationBase::fNamename of the concrete Separation Index impementation; Double_tTMVA::SeparationBase::fPrecisionCut. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationIndex(const Double_t& s, const Double_t& b); Cross Entropy defined as; -p log (p) - (1-p)log(1-p); p=purity = s/(s+b). CrossEntropy(); default constructor. { fName = ""CE""; }. CrossEntropy(const TMVA::CrossEntropy& g); copy constructor. {}. virtual ~CrossEntropy(); destructor. {}. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:15; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__CrossEntropy.html:1593,log,log,1593,root/html602/TMVA__CrossEntropy.html,https://root.cern,https://root.cern/root/html602/TMVA__CrossEntropy.html,2,['log'],['log']
Testability," space is then given by multiplying the measured variable tuple by the inverse of the SQM. Note that these transformations are performed for both signal and background separately, since the correlation pattern is not the same in the two samples.; The above diagonalisation is complete for linearly correlated, Gaussian distributed variables only. In real-world examples this is not often the case, so that only little additional information may be recovered by the diagonalisation procedure. In these cases, non-linear methods must be applied. ; Definition at line 61 of file MethodLikelihood.h. Public Member Functions;  MethodLikelihood (const TString &jobName, const TString &methodTitle, DataSetInfo &theData, const TString &theOption="""");  standard constructor ;  ;  MethodLikelihood (DataSetInfo &theData, const TString &theWeightFile);  construct likelihood references from file ;  ; virtual ~MethodLikelihood ();  destructor ;  ; void AddWeightsXMLTo (void *parent) const;  write weights to XML ;  ; const Ranking * CreateRanking ();  computes ranking of input variables ;  ; Double_t GetMvaValue (Double_t *err=nullptr, Double_t *errUpper=nullptr);  returns the likelihood estimator for signal fill a new Likelihood branch into the testTree ;  ; virtual Bool_t HasAnalysisType (Types::EAnalysisType type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes. ;  ; virtual TClass * IsA () const;  ; void ReadWeightsFromStream (std::istream &istr);  read weight info from file nothing to do for this method ;  ; void ReadWeightsFromStream (TFile &istr);  read reference PDF from ROOT file ;  ; void ReadWeightsFromXML (void *wghtnode);  read weights from XML ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train ();  create reference distributions (PDFs) from signal and background events: fill histograms and smooth them; if decorrelation is required, compute corresponding square-root ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html:3683,test,testTree,3683,doc/master/classTMVA_1_1MethodLikelihood.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodLikelihood.html,1,['test'],['testTree']
Testability," specified rate of Type I error). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; CombinedCalculator(); {}. CombinedCalculator(RooAbsData& data, RooAbsPdf& pdf, const RooArgSet& paramsOfInterest, Double_t size = 0.050000000000000003, const RooArgSet* nullParams = 0, const RooArgSet* altParams = 0, const RooArgSet* nuisParams = 0). SetTestSize(Double_t size). CombinedCalculator(RooAbsData& data, const RooStats::ModelConfig& model, Double_t size = 0.050000000000000003); constructor from data and model configuration. SetModel(const RooStats::ModelConfig& model). virtual ~CombinedCalculator(); destructor. { }. ConfInterval* GetInterval() const; Main interface to get a ConfInterval, pure virtual. HypoTestResult* GetHypoTest() const; main interface to get a HypoTestResult, pure virtual. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetNullModel(const RooStats::ModelConfig& ). void SetAlternateModel(const RooStats::ModelConfig& ). void SetPdf(RooAbsPdf& pdf); specific setting - keep for convenience- some of them could be removed; Set the Pdf. { fPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetNullParameters(const RooArgSet& set); set parameter values for the null if using a common PDF. {fNullParams.removeAll(); fNullParams.add(set);}. void SetAlternateParameters(const RooArgSet& set); set p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__CombinedCalculator.html:5639,test,test,5639,root/html602/RooStats__CombinedCalculator.html,https://root.cern,https://root.cern/root/html602/RooStats__CombinedCalculator.html,2,['test'],['test']
Testability," split with 'bulk' partitioning (each process calculates a contigious block of fraction 1/nCPU; of the data). For binned data this approach may be suboptimal as the number of bins with >0 entries; in each processing block many vary greatly thereby distributing the workload rather unevenly.; If interleave is set to true, the interleave partitioning strategy is used where each partition; i takes all bins for which (ibin % ncpu == i) which is more likely to result in an even workload.; If splitCutRange is true, a different rangeName constructed as rangeName_{catName} will be used; as range definition for each index state of a RooSimultaneous. RooAbsOptTestStatistic(const RooAbsOptTestStatistic& other, const char* name = 0); Copy constructor. void initSlave(RooAbsReal& real, RooAbsData& indata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName). ~RooAbsOptTestStatistic(); Destructor. Double_t combinedValue(RooAbsReal** gofArray, Int_t nVal) const; Method to combined test statistic results calculated into partitions into; the global result. This default implementation adds the partition return; values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsOptTestStatistic.html:45324,test,test,45324,root/html602/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability," squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : RandomSeed: ""1234"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""0.2"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,WeightDecay=1e-2,Regularization=None,MaxEpochs=20,Optimizer=ADAM,DropConfig=0.0+0.+0.+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking method: ␛[1mTMVA_DNN␛[0m; : ; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1e-3,Momentum=0.0,Repetitions=1,ConvergenceSteps=10,BatchSize=256,TestRepetitions=1,WeightDecay=1e-4,Regularization=None,MaxEpochs=20DropConfig=0.0+0.+0.+0.,Optimizer=ADAM:CPU""; : The following options are set:; : - By User:; : <none>; : - Default:; : Boost_num: ""0"" [Number of times the classifier will be boosted]; : Parsing option string: ; : ... ""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:WeightInitialization=XAVIER:RandomSeed=0:InputLayout=1|1|300:Layout=DENSE|64|TANH,DENSE|TANH|64,DENSE|TANH|64,LINEAR:TrainingStrategy=LearningRate=1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:8036,test,testing,8036,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['test'],['testing']
Testability," sstr << tokenString->GetString ().Data ();; 416 sstr >> currentValue;; 417 values.push_back (currentValue);; 418 }; 419 return values;; 420}; 421 ; 422////////////////////////////////////////////////////////////////////////////////; 423 ; 424void TMVA::MethodDNN::ProcessOptions(); 425{; 426 if (IgnoreEventsWithNegWeightsInTraining()) {; 427 Log() << kINFO; 428 << ""Will ignore negative events in training!""; 429 << Endl;; 430 }; 431 ; 432 if (fArchitectureString == ""STANDARD"") {; 433 Log() << kERROR << ""The STANDARD architecture has been deprecated. ""; 434 ""Please use Architecture=CPU or Architecture=CPU.""; 435 ""See the TMVA Users' Guide for instructions if you ""; 436 ""encounter problems.""; 437 << Endl;; 438 Log() << kFATAL << ""The STANDARD architecture has been deprecated. ""; 439 ""Please use Architecture=CPU or Architecture=CPU.""; 440 ""See the TMVA Users' Guide for instructions if you ""; 441 ""encounter problems.""; 442 << Endl;; 443 }; 444 ; 445 if (fArchitectureString == ""OPENCL"") {; 446 Log() << kERROR << ""The OPENCL architecture has not been implemented yet. ""; 447 ""Please use Architecture=CPU or Architecture=CPU for the ""; 448 ""time being. See the TMVA Users' Guide for instructions ""; 449 ""if you encounter problems.""; 450 << Endl;; 451 Log() << kFATAL << ""The OPENCL architecture has not been implemented yet. ""; 452 ""Please use Architecture=CPU or Architecture=CPU for the ""; 453 ""time being. See the TMVA Users' Guide for instructions ""; 454 ""if you encounter problems.""; 455 << Endl;; 456 }; 457 ; 458 if (fArchitectureString == ""GPU"") {; 459#ifndef DNNCUDA // Included only if DNNCUDA flag is _not_ set.; 460 Log() << kERROR << ""CUDA backend not enabled. Please make sure ""; 461 ""you have CUDA installed and it was successfully ""; 462 ""detected by CMAKE.""; 463 << Endl;; 464 Log() << kFATAL << ""CUDA backend not enabled. Please make sure ""; 465 ""you have CUDA installed and it was successfully ""; 466 ""detected by CMAKE.""; 467 << Endl;; 468#endif // DNNCUDA; 469 }; 470 ; 47",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDNN_8cxx_source.html:14973,Log,Log,14973,doc/master/MethodDNN_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDNN_8cxx_source.html,1,['Log'],['Log']
Testability," starts from the same point). Then open the file again:; root[0] TFile::Open(""http://root.cern/files/introtutorials/eventdata.root"");. For this exercise, you will probably need the TTree::Draw() documentation. Now, display the ""fPosY"" leaf values, without the browser, just by using the TTree::Draw() function. As the TTree is called EventTree, you need to call something like EventTree->Draw(""X""), which would draw the distribution of X values. Of course you don't want to draw the value of X but of fPosY...the value of X but of fPosY... Figure 4: Distribution of ""fPosY"" values; Still the same ""fPosY"" leaf values, but now apply a cut in the momentum, meaning draw only the fPosY value of events with a momentum higher than 50.0. Check the documentation of TTree::Draw() - you will be using the method overload taking a const char* as selection. Figure 5: Distribution of ""fPosY"" values, with a cut at 50.0. . ‹ Accessing a TTree With a TBrowser; up; TTree and Its Data ›. Navigate through this book; Meet a TTree; Accessing a TTree With a TBrowser; Using TTree::Draw() to access a TTree; TTree and Its Data; Using a Macro to Read a TTree; Histogramming; Fit Panel; Compiling Your Code (also known as ACLiC); Accessing a TTree With a TSelector; Histogramming in a Selector; Using a TSelector with PROOF; The End. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/using-ttreedraw-access-ttree.html:3883,test,tests,3883,d/using-ttreedraw-access-ttree.html,https://root.cern,https://root.cern/d/using-ttreedraw-access-ttree.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability," state estimation, reducing significantly the number of subsequent iterations. TMVA. Introducing TMVA PyTorch Interface, a method to use PyTorch internally with TMVA for deep learning. This can be used as an alternative to PyKeras Interface for complex models providing more flexibility and power.; Add support in the TMVA Keras interface for Tensorflow.Keras (the version embedded in Tensorflow) and for standalone Keras versions up to it latest 2.3. For using Tensorflow.Keras one needs to use the booking option tf.keras=True.; Update the TMVA Keras tutorials to use now tensorflow.keras.; Deprecate the MethodDNN in favour of MethodDL supporting both CNN and RNN; Add possibility to customize all relevant minimizer parameters used for training in MethodDL; Add support in MethodDL for the Cudnn version 8 when using the Cuda implementation for CNN and RNN Minuit2; Implement the missing support for MethodCategory for multiclass classifiers.; Add possibility to retrieve a ROC curve made with the training dataset instead of the default test dataset. RooFit Libraries. Extension / updates of the doxygen reference guide.; Allow for removing RooPlot from global directory management, see RooPlot::AddDirectory and RooPlot::SetDirectory; Hash-assisted finding of elements in RooWorkspace. Large RooWorkspace objects were slow in finding elements. This was improved using a hash map.; Stabilise RooStats::HypoTestInverter. It can now tolerate a few failed fits when conducting hypothesis tests. This is relevant when a few points in a parameter scan don’t converge due to numerical or model instabilities. These points will be skipped, and HypoTestInverter can continue.; Tweak pull / residual plots. ROOT automatically zoomed out a bit when a pull / residual plot is created. Now, the axis range of the original plot is transferred to the residual plot, so the pulls can be drawn below the main plot.; Improve plotting of RooBinSamplingPdf; Print a Warning message when the RooAddPdf is evaluated w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v624/release-notes.html:16271,test,test,16271,doc/v624/release-notes.html,https://root.cern,https://root.cern/doc/v624/release-notes.html,1,['test'],['test']
Testability," statement(s) on output stream out. ; Reimplemented from TObject.; Definition at line 966 of file TSpline.cxx. ◆ SetCond(). void TSpline3::SetCond ; (; const char * ; opt). protected . Check the boundary conditions. ; Definition at line 574 of file TSpline.cxx. ◆ SetPoint(). void TSpline3::SetPoint ; (; Int_t ; i, . Double_t ; x, . Double_t ; y . ). virtual . Set point number i. ; Definition at line 995 of file TSpline.cxx. ◆ SetPointCoeff(). void TSpline3::SetPointCoeff ; (; Int_t ; i, . Double_t ; b, . Double_t ; c, . Double_t ; d . ). virtual . Set point coefficient number i. ; Definition at line 1005 of file TSpline.cxx. ◆ Streamer(). void TSpline3::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TSpline3. ; Reimplemented from TSpline.; Definition at line 1173 of file TSpline.cxx. ◆ StreamerNVirtual(). void TSpline3::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 232 of file TSpline.h. ◆ Test(). void TSpline3::Test ; (; ). static . Test method for TSpline5. ; n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients.; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; mTMarker mDefinition textangle.C:8; test of TSpline3 with non equidistant knots and equidistant knots follows. ; Definition at line 613 of file TSpline.cxx. Member Data Documentation. ◆ fBegCond. Int_t TSpline3::fBegCond = -1. protected . 0=no beg cond, 1=first derivative, 2=second derivative ; Definition at line 187 of file TSpline.h. ◆ fEndCond. Int_t TSpline3::fEndCond =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpline3.html:29547,Test,Test,29547,doc/master/classTSpline3.html,https://root.cern,https://root.cern/doc/master/classTSpline3.html,1,['Test'],['Test']
Testability," static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofMgr::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofMgr::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 136 of file TProofMgr.h. ◆ Close(). void TProofMgr::Close ; (; ). inline . Definition at line 79 of file TProofMgr.h. ◆ Cp(). virtual Int_t TProofMgr::Cp ; (; const char * ; , . const char * ; = 0, . const char * ; = 0 . ). inlinevirtual . Definition at line 112 of file TProofMgr.h. ◆ Create(). TProofMgr * TProofMgr::Create ; (; const char * ; url, . Int_t ; loglevel = -1, . const char * ; alias = 0, . Bool_t ; xpd = kTRUE . ). static . Static method returning the appropriate TProofMgr object using the plugin manager. ; Definition at line 499 of file TProofMgr.cxx. ◆ CreateSession(). TProof * TProofMgr::CreateSession ; (; const char * ; cfg = 0, . const char * ; cfgdir = 0, . Int_t ; loglevel = -1 . ). virtual . Create a new remote session (master and associated workers). ; Reimplemented in TProofMgrLite.; Definition at line 387 of file TProofMgr.cxx. ◆ DeclFileName(). static const char * TProofMgr::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 136 of file TProofMgr.h. ◆ DetachSession() [1/2]. void TProofMgr::DetachSession ; (; Int_t ; id, . Option_t * ; opt = """" . ). virtual . Detach session with 'id' from its proofserv. ; The 'id' is the number shown by QuerySessions. The correspondent TProof object is deleted. If id == 0 all the known sessions are detached. Option opt=""S"" or ""s"" forces session shutdown. ; Definition at line 160 of file TProofMgr.cxx. ◆ DetachSession() [2/2]. void TProofMgr::DetachSession ; (; TProof * ; p, . Option_t * ; opt = """" . ). virtual . Detach session 'p' from its proofserv. ; The instance 'p' is invalidated and should be deleted by the caller ; Definition at line 204 of fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofMgr.html:19187,log,loglevel,19187,doc/master/classTProofMgr.html,https://root.cern,https://root.cern/doc/master/classTProofMgr.html,1,['log'],['loglevel']
Testability," static Int_tSecureSend(TSocket* Socket, Int_t enc, Int_t KeyType, const char* In); static Int_tSendRSAPublicKey(TSocket* Socket, Int_t key = 0); static voidSetAuthReUse(Bool_t authreuse); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); static voidSetDefaultRSAKeyType(Int_t key); static voidSetDefaultUser(const char* defaultuser); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetGlobalExpDate(TDatime expdate); static voidSetGlobalPasswd(const char* passwd); static voidSetGlobalPwHash(Bool_t pwhash); static voidSetGlobalSRPPwd(Bool_t srppwd); static voidSetGlobalUser(const char* user); static voidSetGlobusAuthHook(GlobusAuth_t func); static voidSetKrb5AuthHook(Krb5Auth_t func); static voidTObject::SetObjectStat(Bool_t stat); static voidSetPromptUser(Bool_t promptuser); static voidSetReadHomeAuthrc(Bool_t readhomeauthrc); static voidSetRSAInit(Int_t init = 1); voidSetRSAKeyType(Int_t key); static Int_tSetRSAPublic(const char* rsapubexport, Int_t klen); voidSetSecContext(TRootSecContext* ctx); static voidSetSecureAuthHook(SecureAuth_t func); static voidSetTimeOut(Int_t to); virtual voidTObject::SetUniqueID(UInt_t uid); static voidShow(Option_t* opt = ""S""); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TAuthenticate(const TAuthenticate&); TAuthenticate(TSocket* sock, const char* remote, const char* proto, const char* user = """"); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TAuthenticate.html:7436,Test,TestBit,7436,root/html602/TAuthenticate.html,https://root.cern,https://root.cern/root/html602/TAuthenticate.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if requested. ;  ; virtual Int_t DrawCanvas (TObject *obj);  Draw the object if it is a canvas. ;  ; void * GetSender () override;  ; void MapOutputListToDataMembers () const;  ; void MergeOutput (Bool_t savememvalues=kFALSE) override;  Merge output (may not be used in this class). ;  ; virtual void SetupFeedback ();  Set up feedback (may not be used in this class). ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; Bool_t fCreateSelObj;  the latest selector ;  ; TTimer * fDispatchTimer;  ; Int_t fDrawQueri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:20363,Assert,AssertSelector,20363,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['Assert'],['AssertSelector']
Testability," static TObject::EStatusBitsTObject::kMustCleanup; static RooStats::MetropolisHastings::FunctionSignkNegative; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static RooStats::MetropolisHastings::FunctionSignkPositive; static RooStats::MetropolisHastings::FunctionTypekRegular; static RooStats::MetropolisHastings::FunctionSignkSignUnset; static TObject::(anonymous)TObject::kSingleKey; static RooStats::MetropolisHastings::FunctionTypekTypeUnset; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. RooArgSetfChainParamsRooRealVars that are stored in the chain; RooAbsReal*fFunctionfunction that will generate likelihood values; Int_tfNumBurnInStepsnumber of iterations to discard as burn-in, starting from the first; Int_tfNumItersnumber of iterations to run metropolis algorithm; RooArgSetfParametersRooRealVars that define all parameter space; RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; enum FunctionSignfSignwhether the likelihood is negative (like NLL) or positive; enum FunctionTypefTypewhether the likelihood is on a regular, log, (or other) scale. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MetropolisHastings(); default constructor. MetropolisHastings(RooAbsReal& function, const RooArgSet& paramsOfInterest, RooStats::ProposalFunction& proposalFunction, Int_t numIters). MarkovChain* ConstructChain(). Bool_t ShouldTakeStep(Double_t d). Double_t CalcNLL(Double_t xL). MetropolisHastings(); default constructor. virtual ~MetropolisHastings(); {}. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the chain; if not specified all of them will be stored. { fChainParams.removeAll(); fChainParams.add(set); RemoveConstantParameters(&fChainParams); }. void SetParameters(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__MetropolisHastings.html:8853,log,log,8853,root/html602/RooStats__MetropolisHastings.html,https://root.cern,https://root.cern/root/html602/RooStats__MetropolisHastings.html,2,['log'],['log']
Testability," static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. const RooArgList*RooStats::HypoTestResult::fAllTestStatisticsDatafor the case of multiple test statistics, holds all the results; RooDataSet*RooStats::HypoTestResult::fAltDetailedOutput; RooStats::SamplingDistribution*RooStats::HypoTestResult::fAltDistr; Double_tRooStats::HypoTestResult::fAlternatePValuep-value for the alternate hypothesis (small number means disfavored); Double_tRooStats::HypoTestResult::fAlternatePValueErrorerror of p-value for the alternate hypothesis (small number means disfavored); Bool_tRooStats::HypoTestResult::fBackgroundIsAlt; RooDataSet*RooStats::HypoTestResult::fFitInfo; TStringTNamed::fNameobject identifier; RooDataSet*RooStats::HypoTestResult::fNullDetailedOutput; RooStats::SamplingDistribution*RooStats::HypoTestResult::fNullDistr; Double_tRooStats::HypoTestResult::fNullPValuep-value for the null hypothesis (small number means disfavored); Double_tRooStats::HypoTestResult::fNullPValueErrorerror of p-value for the null hypothesis (small number means disfavored); Bool_tRooStats::HypoTestResult::fPValueIsRightTail; Double_tRooStats::HypoTestResult::fTestStatisticDataresult of the test statistic evaluated on data; TStringTNamed::fTitleobject title. private:. boolfComputationsAltDoneFlagflag if the fAlternatePValue computation have been already done or not (ie need to be refreshed); boolfComputationsNulDoneFlagflag if the fNullPValue computation have been already done or not (ie need to be refreshed); boolfSumLargerValuesp-value for velues of testStat >= testStat_data (or testStat <= testStat_data); vector<double>fTestStat_bvector of results for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStats__HybridResult.html:9327,test,test,9327,root/html602/RooStats__HybridResult.html,https://root.cern,https://root.cern/root/html602/RooStats__HybridResult.html,4,['test'],['test']
Testability," static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void EnableOutput ();  ; static MsgLogger & Endmsg (MsgLogger &logger);  end line ;  ; static UInt_t GetMaxSourceSize ();  returns the maximum source size ;  ; static void InhibitOutput ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void InitMaps ();  Create the message type and color maps. ;  ; void Send ();  activates the logger writer ;  ; void WriteMsg (EMsgType type, const std::string &line) const;  putting the output string, the message type, and the color switcher together into a single string ;  . Private Attributes; EMsgType fActiveType;  active type ;  ; EMsgType fMinType;  minimum type for output ;  ; const TObject * fObjSource;  the source TObject (used for name) ;  ; std::string fStrSource;  alternative string source ;  . Static Private Attributes; static std::atomic< const std::map< EMsgType, std::string > * > fgColorMap {0};  matches output types with terminal colors ;  ; static std::atomic< Bool_t > fgInhibitOutput {kFALSE};  flag to suppress all output ;  ; static const UInt_t fgMaxSourceSize = 25;  maximum length of source name ;  ; static std::atomic< Bool_t > fgOutputSupressed;  disable the output globally (used by generic booster) ;  ; static const std::string fgPrefix = """";  the prefix of the source name ;  ; static const std::string fgSuffix = "": "";  suffix following source name ;  ; static std::atomic< const std::map< EMsgType, std::string > * > fgTypeMap",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html:10216,log,logger,10216,doc/master/classTMVA_1_1MsgLogger.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MsgLogger.html,1,['log'],['logger']
Testability," static std::unique_ptr< RooRatio > makeRatio (const char *name, const char *title, RooArgList &nr, RooArgList &dr);  Return the RooRatio form of products and denominators of morphing functions. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooLagrangianMorphFunc.html:56532,log,logEvalError,56532,doc/master/classRooLagrangianMorphFunc.html,https://root.cern,https://root.cern/doc/master/classRooLagrangianMorphFunc.html,3,['log'],"['logEvalError', 'logging']"
Testability," static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTTUBE::SetNumberOfDivisions(Int_t ndiv); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTTUBS::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; TCONS(); TCONS(const TCONS&); TCONS(const char* name, const char* title, const char* material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2 = 0); TCONS(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TCONS.html:7328,Test,TestBit,7328,root/html602/TCONS.html,https://root.cern,https://root.cern/root/html602/TCONS.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::SetDtorOnly(void* obj); voidTMVA::MethodBase::SetMethodBaseDir(TDirectory* methodDir); voidTMVA::MethodBase::SetMethodDir(TDirectory* methodDir); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidTMVA::MethodBase::SetSignalReferenceCut(Double_t cut); voidTMVA::MethodBase::SetTestTime(Double_t testTime); voidTMVA::MethodBase::SetTestvarName(const TString& v = """"); voidTMVA::MethodBase::SetTrainTime(Double_t trainTime); virtual voidTMVA::MethodBase::SetTuneParameters(map<TString,Double_t> tuneParameters); virtual voidTObject::SetUniqueID(UInt_t uid); voidTMVA::MethodBase::SetupMethod(); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTMVA::MethodBase::TestClassification(); virtual voidTMVA::MethodBase::TestMulticlass(); virtual voidTMVA::MethodBase::TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); static TMVA::MethodCFMlpANN*This(); virtual voidTrain(); voidTMVA::MethodBase::TrainMethod(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTMVA::MethodBase::WriteEvaluationHistosToFile(TMVA::Types::ETreeType treetype); virtual voidTMVA::MethodBase::WriteMonitoringHistosToFile() const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const; voidTMVA::MethodBase::WriteStateToFile() const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html:12759,Test,TestClassification,12759,root/html528/TMVA__MethodCFMlpANN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodCFMlpANN.html,3,['Test'],"['TestClassification', 'TestMulticlass', 'TestRegression']"
Testability," static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGButton::SetOn(Bool_t on = kTRUE, Bool_t emit = kFALSE); virtual voidTGedSelect::SetPopup(TGedPopup* p); virtual voidTGTextButton::SetRightMargin(Int_t val); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTGCheckButton::SetState(EButtonState state, Bool_t emit = kFALSE); virtual voidTGButton::SetStyle(UInt_t newstyle); virtual voidTGButton::SetStyle(const char* style); virtual voidTGTextButton::SetText(TGHotString* new_label); virtual voidTGTextButton::SetText(const TString& new_label); virtual voidTGTextButton::SetTextColor(Pixel_t color, Bool_t global = kFALSE); virtual voidTGTextButton::SetTextJustify(Int_t tmode); virtual voidTGTextButton::SetTitle(const char* label); virtual voidTGButton::SetToolTipText(const char* text, Long_t delayms = 400)MENU ; virtual voidTGTextButton::SetTopMargin(Int_t val); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGButton::SetUserData(void* userData); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); voidTGTextButton::SetWrapLength(Int_t wl); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTGButton::Toggle(Bool_t emit = kFALSE); virtual voidTGButton::Toggled(Bool_t on)SIGNAL ; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGedMarkerSelect.html:16458,Test,TestBit,16458,root/html534/TGedMarkerSelect.html,https://root.cern,https://root.cern/root/html534/TGedMarkerSelect.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDocLatexDirective&operator=(const TDocLatexDirective&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); Bool_tSeparatorIsRegexp() const; voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDocLatexDirective.html:5618,Test,TestBit,5618,root/html534/TDocLatexDirective.html,https://root.cern,https://root.cern/root/html534/TDocLatexDirective.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::PDEFoamEventDensity&operator=(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Paint(Option_t* option = """"); TMVA::PDEFoamEventDensityPDEFoamEventDensity(); TMVA::PDEFoamEventDensityPDEFoamEventDensity(vector<Double_t> box); TMVA::PDEFoamEventDensityPDEFoamEventDensity(const TMVA::PDEFoamEventDensity&); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::PDEFoamDensityBase::SetBox(vector<Double_t> box); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMVA__PDEFoamEventDensity.html:4966,Test,TestBit,4966,root/html530/TMVA__PDEFoamEventDensity.html,https://root.cern,https://root.cern/root/html530/TMVA__PDEFoamEventDensity.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TMVA::TSynapse&operator=(const TMVA::TSynapse&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDEDw(Double_t DEDw); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLearningRate(Double_t rate); static voidTObject::SetObjectStat(Bool_t stat); voidSetPostNeuron(TMVA::TNeuron* post); voidSetPreNeuron(TMVA::TNeuron* pre); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetWeight(Double_t weight); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TMVA::TSynapseTSynapse(); TMVA::TSynapseTSynapse(const TMVA::TSynapse&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__TSynapse.html:4649,Test,TestBit,4649,root/html528/TMVA__TSynapse.html,https://root.cern,https://root.cern/root/html528/TMVA__TSynapse.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tRooAbsIntegrator::printEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Bool_tRooIntegrator1D::setLimits(Double_t* xmin, Double_t* xmax); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsIntegrator::setPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tRooIntegrator1D::setUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegrator2D.html:5769,Test,TestBit,5769,root/html528/RooIntegrator2D.html,https://root.cern,https://root.cern/root/html528/RooIntegrator2D.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TAttParticle&operator=(const TAttParticle&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tSampleMass() const; virtual Double_tSampleMass(Double_t widthcut) const; virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TAttParticle.html:5392,Test,TestBit,5392,root/html528/TAttParticle.html,https://root.cern,https://root.cern/root/html528/TAttParticle.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); THLimitsFinder&operator=(const THLimitsFinder&); static voidOptimize(Double_t A1, Double_t A2, Int_t nold, Double_t& BinLow, Double_t& BinHigh, Int_t& nbins, Double_t& BWID, Option_t* option = """"); static voidOptimizeLimits(Int_t nbins, Int_t& newbins, Double_t& xmin, Double_t& xmax, Bool_t isInteger); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetLimitsFinder(THLimitsFinder* finder); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THLimitsFinder.html:5199,Test,TestBit,5199,root/html534/THLimitsFinder.html,https://root.cern,https://root.cern/root/html534/THLimitsFinder.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TVirtualIndex&operator=(const TVirtualIndex&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetTree(const TTree* T); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidUpdateFormulaLeaves(const TTree* parent); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualIndex.html:5159,Test,TestBit,5159,root/html534/TVirtualIndex.html,https://root.cern,https://root.cern/root/html534/TVirtualIndex.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TControlBarButton&operator=(const TControlBarButton&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); virtual voidSetAction(const char* action); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidSetType(const char* type); virtual voidSetType(Int_t type); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TControlBarButton.html:4990,Test,TestBit,4990,root/html526/TControlBarButton.html,https://root.cern,https://root.cern/root/html526/TControlBarButton.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TDecompSparse&operator=(const TDecompSparse& source); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* opt = """") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetMatrix(const TMatrixDSparse& a); static voidTObject::SetObjectStat(Bool_t stat); Double_tTDecompBase::SetTol(Double_t newTol); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVerbose(Int_t v); virtual voidShowMembers(TMemberInspector& insp); virtual Bool_tSolve(TVectorD& b); virtual Bool_tSolve(TMatrixDColumn&); virtual TVectorDSolve(const TVectorD& b, Bool_t& ok); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTransSolve(TVectorD& b); virtual Bool_tTransSolve(TMatrixDColumn&); virtual TVectorDTransSolve(const TVectorD& b, Bool_t& ok); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TDecompSparse.html:5424,Test,TestBit,5424,root/html530/TDecompSparse.html,https://root.cern,https://root.cern/root/html530/TDecompSparse.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Bool_tReadNotify(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTFileHandler::Remove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTFileHandler::ResetReadyMask(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTFileHandler::SetFd(int fd); virtual voidTFileHandler::SetInterest(Int_t mask); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTFileHandler::SetReadReady(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTFileHandler::SetWriteReady(); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual Bool_tTFileHandler::WriteNotify().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSocketHandler.html:8171,Test,TestBit,8171,root/html534/TXSocketHandler.html,https://root.cern,https://root.cern/root/html534/TXSocketHandler.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTSlave::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTSlave::SetArchCompiler(const char* ac); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTSlave::SetInputHandler(TFileHandler* ih); virtual voidSetInterruptHandler(Bool_t on = kTRUE); static voidTObject::SetObjectStat(Bool_t stat); voidTSlave::SetROOTVersion(const char* rv); voidTSlave::SetSessionTag(const char* st); static voidTSlave::SetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TXSlave.html:5922,Test,TestBit,5922,root/html534/TXSlave.html,https://root.cern,https://root.cern/root/html534/TXSlave.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSQLServer&operator=(const TSQLServer&); virtual voidTObject::Paint(Option_t* option = """"); virtual Int_tPing(); virtual Bool_tPingVerify(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual TSQLResult*Query(const char* sql); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tReload(); voidTObject::ResetBit(UInt_t f); virtual Bool_tRollback(); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelectDataBase(const char* dbname); virtual const char*ServerInfo(); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidSetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char*, Int_t = 100); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLServer.html:6266,Test,TestBit,6266,root/html530/TSQLServer.html,https://root.cern,https://root.cern/root/html530/TSQLServer.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," statistics objects that evaluate a function or PDF at each point of a given dataset. More...;  ; class  RooAbsPdf;  Abstract interface for all probability density functions. More...;  ; class  RooAbsProxy;  Abstract interface for proxy classes. More...;  ; class  RooAbsReal;  Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. More...;  ; class  RooAbsRealLValue;  Abstract base class for objects that represent a real value that may appear on the left hand side of an equation ('lvalue'). More...;  ; class  RooAbsSelfCached< Base_t >;  Abstract base class for functions whose output is cached in terms of a histogram in all observables between getVal() and evaluate(). More...;  ; class  RooAbsStudy;  Abstract base class for RooStudyManager modules. More...;  ; class  RooAbsTestStatistic;  Abstract base class for all test statistics. More...;  ; class  RooAcceptReject;  Generic Monte Carlo toy generator implement the accept/reject sampling technique on any positively valued function. More...;  ; class  RooAdaptiveGaussKronrodIntegrator1D;  Implements the Gauss-Kronrod integration algorithm. More...;  ; class  RooAdaptiveIntegratorND;  Adaptive one-dimensional numerical integration algorithm. More...;  ; class  RooAddGenContext;  Efficient implementation of the generator context specific for RooAddPdf PDFs. More...;  ; class  RooAddition;  Calculates the sum of a set of RooAbsReal terms, or when constructed with two sets, it sums the product of the terms in the two sets. More...;  ; class  RooAddPdf;  Efficient implementation of a sum of PDFs of the form. More...;  ; class  RooAICRegistry;  Utility class for operator p.d.f classes that keeps track of analytical integration codes and associated normalization and integration sets. More...;  ; class  RooArgProxy;  Abstract interf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Roofitcore.html:3884,test,test,3884,doc/master/group__Roofitcore.html,https://root.cern,https://root.cern/doc/master/group__Roofitcore.html,1,['test'],['test']
Testability," statistics to use; boolfTmpDoExtended; boolfUsePriorPdfuse a prior for nuisance parameters . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HybridCalculatorOriginal(const char* name = 0); constructor with name and title; set default parameters. HybridCalculatorOriginal(RooAbsPdf& sb_model, RooAbsPdf& b_model, RooArgList& observables, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); HybridCalculatorOriginal constructor without specifying a data set; the user need to specify the models in the S+B case and B-only case,; the list of observables of the model(s) (for MC-generation), the list of parameters; that are marginalised and the prior distribution of those parameters. HybridCalculatorOriginal(RooAbsData& data, RooAbsPdf& sb_model, RooAbsPdf& b_model, const RooArgSet* nuisance_parameters = 0, RooAbsPdf* prior_pdf = 0, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); HybridCalculatorOriginal constructor for performing hypotesis test; the user need to specify the data set, the models in the S+B case and B-only case.; In case of treatment of nuisance parameter, the user need to specify the; the list of parameters that are marginalised and the prior distribution of those parameters. HybridCalculatorOriginal(RooAbsData& data, const RooStats::ModelConfig& sb_model, const RooStats::ModelConfig& b_model, bool GenerateBinned = false, int testStatistics = 1, int ntoys = 1000); Constructor with a ModelConfig object representing the signal + background model and; another model config representig the background only model; a Prior pdf for the nuiscane parameter of the signal and background can be specified in; the s+b model or the b model. If it is specified in the s+b model, the one of the s+b model will be used. ~HybridCalculatorOriginal(); HybridCalculatorOriginal destructor. void SetNullModel(const RooStats::ModelConfig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html:11263,test,testStatistics,11263,root/html528/RooStats__HybridCalculatorOriginal.html,https://root.cern,https://root.cern/root/html528/RooStats__HybridCalculatorOriginal.html,8,['test'],"['test', 'testStatistics']"
Testability," std::pair< double, double > &r1, const std::pair< double, double > &r2);  ; ostream & operator<< (ostream &os, const ROOT::Fit::Box &b);  ; TFitResultPtr UnBinFit (ROOT::Fit::UnBinData *data, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption);  fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ;  . Variables; double gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef();  ; const int gInitialResultStatus = -99;  . Detailed Description; Namespace for the fitting classes. ; Typedef Documentation. ◆ Chi2Function. typedef Chi2FCN<ROOT::Math::IMultiGenFunction,ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2Function. Definition at line 167 of file Chi2FCN.h. ◆ Chi2GradFunction. typedef Chi2FCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::Chi2GradFunction. Definition at line 168 of file Chi2FCN.h. ◆ LogLikelihoodFunction. typedef LogLikelihoodFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::LogLikelihoodFunction. Definition at line 180 of file LogLikelihoodFCN.h. ◆ LogLikelihoodGradFunction. typedef LogLikelihoodFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::LogLikelihoodGradFunction. Definition at line 181 of file LogLikelihoodFCN.h. ◆ PoissonLLFunction. typedef PoissonLikelihoodFCN<ROOT::Math::IMultiGenFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::PoissonLLFunction. Definition at line 214 of file PoissonLikelihoodFCN.h. ◆ PoissonLLGradFunction. typedef PoissonLikelihoodFCN<ROOT::Math::IMultiGradFunction, ROOT::Math::IParamMultiFunction> ROOT::Fit::PoissonLLGradFunction. Definition at line 215 of file PoissonLikelihoodFCN.h. Enumeration Type Documentation. ◆ EChisquareType. enum class ROOT::Fit::EChisquareType. strong . EnumeratorkNeyman ; kPLikeRatio ; kPearson . Definition at line 53 of file HFitInterface.h. ◆ EFitObjectType. enum class ROOT::Fit::EFitObjectType. strong . EnumeratorkHistogr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:8553,Log,LogLikelihoodFCN,8553,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,4,['Log'],"['LogLikelihoodFCN', 'LogLikelihoodFunction']"
Testability," std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; BasicFitMethodFunction(int dim, int npoint)ROOT::Math::BasicFitMethodFunction< DerivFunType >inline; Clone() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Data() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; DataElement(const double *x, unsigned int i, double *g, double *h=nullptr, bool fullHessian=false) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; DataPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; DoDerivative(const double *x, unsigned int icoord) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; DoEval(const double *x) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlineprivatevirtual; fDataROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fExecutionPolicyROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fFuncROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >protected; fGradROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fIsExtendedROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; fNCallsROOT::Math::BasicFitMethodFunction< DerivFunType >mutableprivate; fNDimROOT::Math::BasicFitMethodFunction< DerivFunType >private; fNEffPointsROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >mutableprivate; fNPointsROOT::Math::BasicFitMethodFunction< DerivFunType >private; fWeightROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >private; G2(const double *, double *) constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; Gradient(const double *x, double *g) constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; HasHessian() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; Hessian(const double *x, double *hess) constROOT::Math::Ba",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:1588,Log,LogLikelihoodFCN,1588,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Log'],['LogLikelihoodFCN']
Testability," std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 743 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 277 of file RConversionRuleParser.cxx. ◆ WebGUILog(). ROOT::Experimental::RLogChannel & ROOT::WebGUILog ; (; ). Log channel for WebGUI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 476 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 694 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v630/namespaceROOT.html:44682,Log,Log,44682,doc/v630/namespaceROOT.html,https://root.cern,https://root.cern/doc/v630/namespaceROOT.html,1,['Log'],['Log']
Testability," std::string & ; tr . ). static . Replace all accurances of given string with other string. ; Definition at line 757 of file RConversionRuleParser.cxx. ◆ ToHumanReadableSize(). template<typename value_type > . void ROOT::ToHumanReadableSize ; (; value_type ; bytes, . Bool_t ; si, . Double_t * ; coeff, . const char ** ; units . ). Return the size expressed in 'human readable' format. ; Parameters. bytesthe size in bytes to be converted ; siwhether to use the SI units or not. ; coeffreturn the size expressed in the new unit. ; unitsreturn a pointer to the string representation of the new unit . Definition at line 38 of file StringConv.hxx. ◆ ValidateRule(). static Bool_t ROOT::ValidateRule ; (; const std::map< std::string, std::string > & ; rule, . std::string & ; error_string . ). static . Validate if the user specified rules are correct. ; Definition at line 291 of file RConversionRuleParser.cxx. ◆ WebGUILog(). ROOT::Experimental::RLogChannel & ROOT::WebGUILog ; (; ). Log channel for WebGUI diagnostics. ; Definition at line 24 of file RWebDisplayArgs.cxx. ◆ WriteAutoVariables(). static void ROOT::WriteAutoVariables ; (; const std::list< std::string > & ; target, . const SourceTypeList_t & ; source, . MembersTypeMap_t & ; members, . std::string & ; className, . std::string & ; mappedName, . std::ostream & ; output . ). static . Write down the sources. ; Definition at line 490 of file RConversionRuleParser.cxx. ◆ WriteReadRawRuleFunc(). void ROOT::WriteReadRawRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conversion function for ReadRaw rule, the function name is being written to rule[""funcname""]. ; Definition at line 708 of file RConversionRuleParser.cxx. ◆ WriteReadRuleFunc(). void ROOT::WriteReadRuleFunc ; (; SchemaRuleMap_t & ; rule, . int ; index, . std::string & ; mappedName, . MembersTypeMap_t & ; members, . std::ostream & ; output . ). Write the conve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT.html:44904,Log,Log,44904,doc/master/namespaceROOT.html,https://root.cern,https://root.cern/doc/master/namespaceROOT.html,2,['Log'],['Log']
Testability," std::string& str); 1015{; 1016 bool notPresent = fLinesHashSet.emplace(fHashFunc(str)).second;; 1017 if (notPresent){; 1018 fContent+=str;; 1019 }; 1020 return notPresent;; 1021}; 1022 ; 1023std::string TCling::ToString(const char* type, void* obj); 1024{; 1025 return fInterpreter->toString(type, obj);; 1026}; 1027 ; 1028////////////////////////////////////////////////////////////////////////////////; 1029///\returns true if the module was loaded.; 1030static bool LoadModule(const std::string &ModuleName, cling::Interpreter &interp); 1031{; 1032 // When starting up ROOT, cling would load all modulemap files on the include; 1033 // paths. However, in a ROOT session, it is very common to run aclic which; 1034 // will invoke rootcling and possibly produce a modulemap and a module in; 1035 // the current folder.; 1036 //; 1037 // Before failing, try loading the modulemap in the current folder and try; 1038 // loading the requested module from it.; 1039 std::string currentDir = gSystem->WorkingDirectory();; 1040 assert(!currentDir.empty());; 1041 gCling->RegisterPrebuiltModulePath(currentDir);; 1042 if (gDebug > 2); 1043 ::Info(""TCling::__LoadModule"", ""Preloading module %s. \n"",; 1044 ModuleName.c_str());; 1045 ; 1046 return interp.loadModule(ModuleName, /*Complain=*/true);; 1047}; 1048 ; 1049////////////////////////////////////////////////////////////////////////////////; 1050/// Loads the C++ modules that we require to run any ROOT program. This is just; 1051/// supposed to make a C++ module from a modulemap available to the interpreter.; 1052static void LoadModules(const std::vector<std::string> &modules, cling::Interpreter &interp); 1053{; 1054 for (const auto &modName : modules); 1055 LoadModule(modName, interp);; 1056}; 1057 ; 1058static bool IsFromRootCling() {; 1059 // rootcling also uses TCling for generating the dictionary ROOT files.; 1060 const static bool foundSymbol = dlsym(RTLD_DEFAULT, ""usedToIdentifyRootClingByDlSym"");; 1061 return foundSymbol;; 1062}; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:36908,assert,assert,36908,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['assert'],['assert']
Testability," std::unique_ptr< Value_t > > m;  JSON_object. ;  . Friends; class RAttrBase;  ; class RStyle;  . #include <ROOT/RAttrMap.hxx>; Member Enumeration Documentation. ◆ EValuesKind. enum ROOT::Experimental::RAttrMap::EValuesKind. EnumeratorkNoValue ; kBool ; kInt ; kDouble ; kString . Definition at line 40 of file RAttrMap.hxx. Constructor & Destructor Documentation. ◆ RAttrMap() [1/2]. ROOT::Experimental::RAttrMap::RAttrMap ; (; ). default . JSON_asbase - store as map object. . ◆ RAttrMap() [2/2]. ROOT::Experimental::RAttrMap::RAttrMap ; (; const RAttrMap & ; src). inline . Definition at line 172 of file RAttrMap.hxx. Member Function Documentation. ◆ Add(). RAttrMap & ROOT::Experimental::RAttrMap::Add ; (; const std::string & ; name, . std::unique_ptr< Value_t > && ; value . ). inline . Definition at line 141 of file RAttrMap.hxx. ◆ AddBestMatch(). void RAttrMap::AddBestMatch ; (; const std::string & ; name, . const std::string & ; value . ). private . Add attribute, converting to best possible type Tested boolean, int, double. ; If none works - store as a string ; Definition at line 69 of file RAttrMap.cxx. ◆ AddBool(). RAttrMap & ROOT::Experimental::RAttrMap::AddBool ; (; const std::string & ; name, . bool ; value . ). inline . Definition at line 143 of file RAttrMap.hxx. ◆ AddColor(). RAttrMap & ROOT::Experimental::RAttrMap::AddColor ; (; const std::string & ; name, . const RColor & ; value . ). inline . Definition at line 155 of file RAttrMap.hxx. ◆ AddDefaults(). RAttrMap & RAttrMap::AddDefaults ; (; const RAttrBase & ; vis). Add defaults values form sub attribute. ; Definition at line 49 of file RAttrMap.cxx. ◆ AddDouble(). RAttrMap & ROOT::Experimental::RAttrMap::AddDouble ; (; const std::string & ; name, . double ; value . ). inline . Definition at line 145 of file RAttrMap.hxx. ◆ AddInt(). RAttrMap & ROOT::Experimental::RAttrMap::AddInt ; (; const std::string & ; name, . int ; value . ). inline . Definition at line 144 of file RAttrMap.hxx. ◆ AddNoValue(). RAttr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html:3752,Test,Tested,3752,doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,1,['Test'],['Tested']
Testability," std::vector< const Event * > &);  TODO --> adapt to variable,target,spectator selection method to calculate minimum, maximum, mean, and RMS for all variables used in the MVA. ;  ; Int_t GetNClasses () const;  ; UInt_t GetNSpectators () const;  ; UInt_t GetNTargets () const;  ; UInt_t GetNVariables () const;  ; void SetCreated (Bool_t c=kTRUE);  ; void SetName (const TString &c);  ; void SetNVariables (UInt_t i);  ; std::vector< TMVA::VariableInfo > & Spectators ();  ; std::vector< TMVA::VariableInfo > & Targets ();  ; std::vector< TMVA::VariableInfo > & Variables ();  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Event * fBackTransformedEvent;  holds the current back-transformed event ;  ; DataSetInfo & fDsi;  ; DataSetInfo * fDsiOutput;  ; VectorOfCharAndInt fGet;  get variables/targets/spectators ;  ; MsgLogger * fLogger;  ! message logger ;  ; VectorOfCharAndInt fPut;  put variables/targets/spectators ;  ; TMVAVersion_t fTMVAVersion;  ; Event * fTransformedEvent;  holds the current transformed event ;  . Private Member Functions; void UpdateNorm (Int_t ivar, Double_t x);  TODO --> adapt to variable,target,spectator selection update min and max of a given variable (target) and a given transformation method. ;  . Private Attributes; Bool_t fCreated;  has been created ;  ; Bool_t fEnabled;  has been enabled ;  ; Bool_t fNormalise;  normalise input variables ;  ; UInt_t fNSpectators;  number of spectators to be transformed ;  ; UInt_t fNTargets;  number of targets to be transformed ;  ; UInt_t fNVariables;  number of variables to be transformed ;  ; UInt_t fNVars;  number of variables ;  ; Bool_t fSortGet;  if true, sort the variables into the order as defined by the user at the var definition if false, sort the variables according to the order given for the var transformation ;  ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:13548,log,logger,13548,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['log'],['logger']
Testability," step = -1); Int_tRunCPUx(Long64_t nevents = -1, Int_t start = -1, Int_t stop = -1); Int_tRunDataSet(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1, Int_t step = 1); Int_tRunDataSetx(const char* dset = ""BenchDataSet"", Int_t start = 1, Int_t stop = -1); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCPUPar(const char* par); voidSetCPUSel(const char* sel); voidSetDataGenPar(const char* par); voidSetDataGenSel(const char* sel); voidSetDataPar(const char* par); voidSetDataSel(const char* sel); voidSetDebug(Bool_t debug = kTRUE); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetHistType(TPBHistType* histtype); voidSetNFilesWrk(Int_t nf = 0); voidSetNHist(Int_t nh); voidSetNTries(Int_t nt); static voidTObject::SetObjectStat(Bool_t stat); Int_tSetOutFile(const char* outfile, Bool_t verbose = kTRUE); voidSetProofDS(TProof* p); voidSetReadType(TPBReadType* readtype); voidSetReleaseCache(Bool_t on = kTRUE); voidSetSelOption(const char* opt); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofBench(const TProofBench&); TProofBench(const char* url, const char* outfile = ""<default>"", const char* proofopt = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofBench.html:6112,Test,TestBit,6112,root/html602/TProofBench.html,https://root.cern,https://root.cern/root/html602/TProofBench.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," step1, int nbin1, int step2, int nbin2, TUnfold::ERegMode regmode); Int_tTUnfold::RegularizeCurvature(int left_bin, int center_bin, int right_bin, Double_t scale_left = 1.0, Double_t scale_right = 1.0); Int_tTUnfold::RegularizeDerivative(int left_bin, int right_bin, Double_t scale = 1.0); voidRegularizeDistribution(TUnfold::ERegMode regmode, TUnfoldDensity::EDensityMode densityMode, const char* distribution, const char* axisSteering); Int_tTUnfold::RegularizeSize(int bin, Double_t scale = 1.0); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTUnfold::ScanLcurve(Int_t nPoint, Double_t tauMin, Double_t tauMax, TGraph** lCurve, TSpline** logTauX = 0, TSpline** logTauY = 0); virtual Int_tScanTau(Int_t nPoint, Double_t tauMin, Double_t tauMax, TSpline** scanResult, Int_t mode = kEScanTauRhoAvg, const char* distribution = 0, const char* projectionMode = 0, TGraph** lCurvePlot = 0, TSpline** logTauXPlot = 0, TSpline** logTauYPlot = 0); voidTUnfold::SetBias(const TH1* bias); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTUnfold::SetConstraint(TUnfold::EConstraint constraint); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTUnfold::SetEpsMatrix(Double_t eps); virtual Int_tTUnfoldSys::SetInput(const TH1* hist_y, Double_t scaleBias = 0.0, Double_t oneOverZeroError = 0.0, const TH2* hist_vyy = 0, const TH2* hist_vyy_inv = 0); static voidTObject::SetObjectStat(Bool_t stat); voidTUnfoldSys::SetTauError(Double_t delta_tau); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidTUnfoldSys::SubtractBackground(const TH1* hist_bgr, const char* name, Double_t scale = 1.0, Double_t scale_error = 0.0); vi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TUnfoldDensity.html:14366,log,logTauX,14366,root/html534/TUnfoldDensity.html,https://root.cern,https://root.cern/root/html534/TUnfoldDensity.html,4,['log'],"['logTauX', 'logTauXPlot', 'logTauY', 'logTauYPlot']"
Testability," stream()Definition ValueChecking.h:82; RooAbsArgCommon abstract base class for objects that represent a value and a ""shape"" in RooFit.Definition RooAbsArg.h:79; RooAbsArg::dependsOnbool dependsOn(const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) constTest whether we depend on (ie, are served by) any object in the specified collection.Definition RooAbsArg.cxx:850; RooAbsArg::recursiveRedirectServersbool recursiveRedirectServers(const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true)Recursively replace all servers with the new servers in newSet.Definition RooAbsArg.cxx:1289; RooAbsArg::namePtrconst TNamed * namePtr() constDe-duplicated pointer to this object's name.Definition RooAbsArg.h:535; RooAbsArg::constR__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg constDefinition RooAbsArg.h:145; RooAbsArg::setShapeDirtyvoid setShapeDirty()Notify that a shape-like property (e.g. binning) has changed.Definition RooAbsArg.h:467; RooAbsArg::setStringAttributevoid setStringAttribute(const Text_t *key, const Text_t *value)Associate string 'value' to this object under key 'key'.Definition RooAbsArg.cxx:254; RooAbsArg::isValueDirtyAndClearbool isValueDirtyAndClear() constDefinition RooAbsArg.h:408; RooAbsArg::_fastbool _fastDefinition RooAbsArg.h:689; RooAbsArg::getParametersRooFit::OwningPtr< RooArgSet > getParameters(const RooAbsData *data, bool stripDisconnected=true) constCreate a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of...Definition RooAbsArg.cxx:541; RooAbsArg::getObservablesRooFit::OwningPtr< RooArgSet > getObservables(const RooArgSet &set, bool valueOnly=true) constGiven a set of possible observables, return the observables that this PDF depends on.Definition RooAbsArg.cxx:698; RooAbsArg::",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:203152,test,testArg,203152,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['test'],['testArg']
Testability," stride width | padding height | paddig; width | activation function; ; - note in this case we are using a filer 3x3 and padding=1 and stride=1 so we get the output dimension of the; conv layer equal to the input; ; - note we use after the first convolutional layer a batch normalization layer. This seems to help significantly the; convergence; ; - For the MaxPool layer:; - MAXPOOL | pool height | pool width | stride height | stride width; ; The RESHAPE layer is needed to flatten the output before the Dense layer; ; ; Note that to run the CNN is required to have CPU or GPU support; ; ***/; ; if (useTMVACNN) {; ; TString inputLayoutString(""InputLayout=1|16|16"");; ; // Batch Layout; TString layoutString(""Layout=CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,""; ""RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"");; ; // Training strategies.; TString trainingString1(""LearningRate=1e-3,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,""; ""MaxEpochs=10,WeightDecay=1e-4,Regularization=None,""; ""Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0"");; ; TString trainingStrategyString(""TrainingStrategy="");; trainingStrategyString +=; trainingString1; // + ""|"" + trainingString2 + ""|"" + trainingString3; for concatenating more training strings; ; // Build full CNN Options.; TString cnnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=None:""; ""WeightInitialization=XAVIER"");; ; cnnOptions.Append("":"");; cnnOptions.Append(inputLayoutString);; cnnOptions.Append("":"");; cnnOptions.Append(layoutString);; cnnOptions.Append("":"");; cnnOptions.Append(trainingStrategyString);; ; //// New DL (CNN); TString cnnMethodName = ""TMVA_CNN_CPU"";; // use GPU if available; #ifdef R__HAS_TMVAGPU; cnnOptions += "":Architecture=GPU"";; cnnMethodName = ""TMVA_CNN_GPU"";; #else; cnnOptions += "":Architecture=CPU"";; cnnMethodName = ""TMVA_CNN_CPU"";; #endif; ; factory.BookMethod(&loader, TMVA::Types::kDL, cnnMethodName, cnnOptions);; }; ; /**; ### Book Convolutional Neural N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:56888,Test,TestRepetitions,56888,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability," string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:30354,test,test,30354,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['test'],['test']
Testability," strong . Enum representing the regularization type applied for a given layer. . EnumeratorkNone ; kL1 ; kL2 . Definition at line 64 of file Functions.h. ◆ MinimizerType. enum TMVA::DNN::MinimizerType. < list all the minimizer types . EnumeratorfSteepest SGD. . Definition at line 320 of file NeuralNet.h. ◆ ModeErrorFunction. enum class TMVA::DNN::ModeErrorFunction. strong . error functions to be chosen from . EnumeratorSUMOFSQUARES ; CROSSENTROPY ; CROSSENTROPY_MUTUALEXCLUSIVE . Definition at line 1038 of file NeuralNet.h. ◆ ModeOutput. enum class TMVA::DNN::ModeOutput. strong . EnumeratorFETCH . Definition at line 1029 of file NeuralNet.h. ◆ ModeOutputValues. enum class TMVA::DNN::ModeOutputValues : int. strong . EnumeratorDIRECT ; SIGMOID ; SOFTMAX ; BATCHNORMALIZATION . Definition at line 178 of file NeuralNet.h. ◆ WeightInitializationStrategy. enum class TMVA::DNN::WeightInitializationStrategy. strong . weight initialization strategies to be chosen from . EnumeratorXAVIER ; TEST ; LAYERSIZE ; XAVIERUNIFORM . Definition at line 1049 of file NeuralNet.h. Function Documentation. ◆ addRegularizationGradients(). template<typename Architecture_t > . void TMVA::DNN::addRegularizationGradients ; (; typename Architecture_t::Matrix_t & ; A, . const typename Architecture_t::Matrix_t & ; W, . typename Architecture_t::Scalar_t ; weightDecay, . ERegularization ; R . ). inline . Add the regularization gradient corresponding to weight matrix W, to the matrix A. ; Definition at line 258 of file Functions.h. ◆ applyFunctions() [1/4]. template<typename ItValue , typename Fnc > . void TMVA::DNN::applyFunctions ; (; ItValue ; itValue, . ItValue ; itValueEnd, . Fnc ; fnc . ). apply the activation functions ; Definition at line 147 of file NeuralNet.icc. ◆ applyFunctions() [2/4]. template<typename ItValue , typename Fnc , typename InvFnc , typename ItGradient > . void TMVA::DNN::applyFunctions ; (; ItValue ; itValue, . ItValue ; itValueEnd, . Fnc ; fnc, . InvFnc ; invFnc, . ItGradient",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html:22566,TEST,TEST,22566,doc/master/namespaceTMVA_1_1DNN.html,https://root.cern,https://root.cern/doc/master/namespaceTMVA_1_1DNN.html,2,['TEST'],['TEST']
Testability," style=0 as style 4000. ; Reimplemented from TAttFill.; Definition at line 6074 of file TPad.cxx. ◆ SetFixedAspectRatio(). void TPad::SetFixedAspectRatio ; (; Bool_t ; fixed = kTRUE). overridevirtual . Fix pad aspect ratio to current value if fixed is true. ; Implements TVirtualPad.; Definition at line 6031 of file TPad.cxx. ◆ SetGLDevice(). virtual void TPad::SetGLDevice ; (; Int_t ; dev). inlinevirtual . Definition at line 366 of file TPad.h. ◆ SetGrid(). void TPad::SetGrid ; (; Int_t ; valuex = 1, . Int_t ; valuey = 1 . ). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 335 of file TPad.h. ◆ SetGridx(). void TPad::SetGridx ; (; Int_t ; value = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 336 of file TPad.h. ◆ SetGridy(). void TPad::SetGridy ; (; Int_t ; value = 1). inlineoverridevirtual . Implements TVirtualPad.; Definition at line 337 of file TPad.h. ◆ SetLogx(). void TPad::SetLogx ; (; Int_t ; value = 1). overridevirtual . Set Lin/Log scale for X. . value = 0 X scale will be linear; value = 1 X scale will be logarithmic (base 10); value > 1 reserved for possible support of base e or other . Implements TVirtualPad.; Definition at line 6086 of file TPad.cxx. ◆ SetLogy(). void TPad::SetLogy ; (; Int_t ; value = 1). overridevirtual . Set Lin/Log scale for Y. . value = 0 Y scale will be linear; value = 1 Y scale will be logarithmic (base 10); value > 1 reserved for possible support of base e or other . Implements TVirtualPad.; Definition at line 6100 of file TPad.cxx. ◆ SetLogz(). void TPad::SetLogz ; (; Int_t ; value = 1). overridevirtual . Set Lin/Log scale for Z. ; Implements TVirtualPad.; Definition at line 6111 of file TPad.cxx. ◆ SetMaxPickDistance(). void TPad::SetMaxPickDistance ; (; Int_t ; maxPick = 5). static . static function to set the maximum Pick Distance fgMaxPickDistance This parameter is used in TPad::Pick to select an object if its DistancetoPrimitive returns a value < fgMaxPickDistance The default val",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPad.html:121804,Log,Log,121804,doc/master/classTPad.html,https://root.cern,https://root.cern/doc/master/classTPad.html,1,['Log'],['Log']
Testability," sub-expression per sub-expression; 1919 Double_t xOrigin = (Double_t)gPad->XtoAbsPixel(fX);; 1920 Double_t yOrigin = (Double_t)gPad->YtoAbsPixel(fY);; 1921 Double_t angle = kPI*spec.fAngle/180.;; 1922 Double_t xx = gPad->AbsPixeltoX(Int_t((x-xOrigin)*TMath::Cos(angle)+(y-yOrigin)*TMath::Sin(angle)+xOrigin));; 1923 Double_t yy = gPad->AbsPixeltoY(Int_t((x-xOrigin)*TMath::Sin(-angle)+(y-yOrigin)*TMath::Cos(angle)+yOrigin));; 1924 gPad->PaintText(xx,yy,text);; 1925 } else {; 1926 GetTextExtent(w,h,text);; 1927 Double_t width = w;; 1928 UInt_t a,d;; 1929 GetTextAscentDescent(a, d, text);; 1930 fs1.Set(width,a,d);; 1931 }; 1932 ; 1933 result = fs1;; 1934 }; 1935 ; 1936 delete[] text;; 1937 ; 1938 return result;; 1939}; 1940 ; 1941////////////////////////////////////////////////////////////////////////////////; 1942/// Make a copy of this object with the new parameters; 1943/// And copy object attributes; 1944 ; 1945TLatex *TLatex::DrawLatex(Double_t x, Double_t y, const char *text); 1946{; 1947 TLatex *newtext = new TLatex(x, y, text);; 1948 TAttText::Copy(*newtext);; 1949 TAttLine::Copy(*newtext);; 1950 newtext->SetBit(kCanDelete);; 1951 if (TestBit(kTextNDC)) newtext->SetNDC();; 1952 newtext->AppendPad();; 1953 return newtext;; 1954}; 1955 ; 1956////////////////////////////////////////////////////////////////////////////////; 1957/// Draw this TLatex with new coordinates in NDC.; 1958 ; 1959TLatex *TLatex::DrawLatexNDC(Double_t x, Double_t y, const char *text); 1960{; 1961 TLatex *newtext = DrawLatex(x, y, text);; 1962 newtext->SetNDC();; 1963 return newtext;; 1964}; 1965 ; 1966 ; 1967////////////////////////////////////////////////////////////////////////////////; 1968/// Draw a poly line in a Latex formula; 1969/// Is scale_width parameter >=1, fill area will be drawn; 1970/// Otherwise line width will be scaled proportional to current font size; 1971/// If not specified - default line width will be used; 1972void TLatex::DrawPolyLine(Int_t npoints, Double_t *xx, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLatex_8cxx_source.html:70712,Test,TestBit,70712,doc/master/TLatex_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLatex_8cxx_source.html,1,['Test'],['TestBit']
Testability," sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tRooAbsIntegrator::printEvalCounter() const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(basic_ostream<char,char_traits<char> >& out, Option_t* option = """"); voidsetAlpha(Double_t alpha); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidsetGenType(RooMCIntegrator::GeneratorType type); virtual Bool_tRooAbsIntegrator::setLimits(Double_t*, Double_t*); virtual Bool_tRooAbsIntegrator::setLimits(Double_t xmin, Double_t xmax); static voidTObject::SetObjectStat(Bool_t stat); voidRooAbsIntegrator::setPrintEvalCounter(Bool_t value); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Bool_tRooAbsIntegrator::setUseIntegrandLimits(Bool_t flag); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); Double_tvegas(RooMCIntegrator::Stage stage, UInt_t calls, UInt_t iterations, Double_t* absError = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMCIntegrator.html:5876,Test,TestBit,5876,root/html528/RooMCIntegrator.html,https://root.cern,https://root.cern/root/html528/RooMCIntegrator.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidprint(); virtual voidTObject::Print(Option_t* option = """") const; Bool_tprocess(const RooCmdArg& arg); Bool_tprocess(const RooLinkedList& argList); Bool_tprocess(const RooCmdArg& arg1, const RooCmdArg& arg2, const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidsetVerbose(Bool_t flag); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidstripCmdList(RooLinkedList& cmdList, const char* cmdsToPurge); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooCmdConfig.html:8415,Test,TestBit,8415,root/html534/RooCmdConfig.html,https://root.cern,https://root.cern/root/html534/RooCmdConfig.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new[](size_t sz, void* vp); TGraphEdge&operator=(const TGraphEdge&); virtual voidPaint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; voidSaveAttributes(ostream&, const char*); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidSavePrimitive(ostream&, Option_t*); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetGVEdge(GVizAgedge_t* gve); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGraphEdge(); TGraphEdge(const TGraphEdge&); TGraphEdge(TGraphNode* n1, TGraphNode* n2); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGraphEdge.html:5254,Test,TestBit,5254,root/html602/TGraphEdge.html,https://root.cern,https://root.cern/root/html602/TGraphEdge.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new[](size_t sz, void* vp); TMultiDimFit&operator=(const TMultiDimFit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = ""ps"") constMENU ; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBinVarX(Int_t nbbinvarx); voidSetBinVarY(Int_t nbbinvary); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetMaxAngle(Double_t angle = 0); voidSetMaxFunctions(Int_t n); voidSetMaxPowers(const Int_t* powers); voidSetMaxStudy(Int_t n); voidSetMaxTerms(Int_t terms); voidSetMinAngle(Double_t angle = 1); voidSetMinRelativeError(Double_t error); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPowerLimit(Double_t limit = 1e-3); virtual voidSetPowers(const Int_t* powers, Int_t terms); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TMultiDimFit.html:20273,Test,TestBit,20273,root/html530/TMultiDimFit.html,https://root.cern,https://root.cern/root/html530/TMultiDimFit.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new[](size_t sz, void* vp); TObject&TObject::operator=(const TObject& rhs); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTMVA::Configurable::ParseOptions(); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; voidTMVA::Configurable::PrintOptions() const; virtual Int_tTObject::Read(const char* name); voidTMVA::Configurable::ReadOptionsFromStream(istream& istr); voidTMVA::Configurable::ReadOptionsFromXML(void* node); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual Double_tRun(vector<Double_t>& pars); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTMVA::Configurable::SetConfigDescription(const char* d); voidTMVA::Configurable::SetConfigName(const char* n); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTMVA::Configurable::SetMsgType(TMVA::EMsgType t); static voidTObject::SetObjectStat(Bool_t stat); voidTMVA::Configurable::SetOptions(const TString& s); voidSetParameters(Int_t cycles); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidTMVA::Configurable::WriteOptionsToStream(ostream& o, const TString& prefix) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__MCFitter.html:5536,Test,TestBit,5536,root/html534/TMVA__MCFitter.html,https://root.cern,https://root.cern/root/html534/TMVA__MCFitter.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new[](size_t sz, void* vp); TProofDrawEntryList&operator=(const TProofDrawEntryList&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawEntryList(); TProofDrawEntryList(const TProofDrawEntryList&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawEntryList.html:5344,Test,TestBit,5344,root/html602/TProofDrawEntryList.html,https://root.cern,https://root.cern/root/html602/TProofDrawEntryList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," sz); void*TObject::operator new[](size_t sz, void* vp); TProofDrawEventList&operator=(const TProofDrawEventList&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tTProofDraw::Process(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawEventList(); TProofDrawEventList(const TProofDrawEventList&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawEventList.html:5344,Test,TestBit,5344,root/html602/TProofDrawEventList.html,https://root.cern,https://root.cern/root/html602/TProofDrawEventList.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttLine;  TAttLine ();  AttLine default constructor. ;  ;  TAttLine (Color_t lcolor, Style_t lstyle, Width_t lwidth);  AttLine normal constructor. ;  ; virtual ~TAttLine ();  AttLine destructor. ;  ; void Copy (TAttLine &attline) const;  Copy this line attributes to a new TAttLine. ;  ; Int_t DistancetoLine (Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2);  Compute distance from point px,py to a line. ;  ; virtual Co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPad.html:19025,Test,TestBit,19025,doc/master/classTVirtualPad.html,https://root.cern,https://root.cern/doc/master/classTVirtualPad.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sz, void* vp); THttpServer&operator=(const THttpServer&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; voidProcessRequests(); virtual Int_tTObject::Read(const char* name); static char*ReadFileContent(const char* filename, Int_t& len); virtual voidTObject::RecursiveRemove(TObject* obj); Bool_tRegister(const char* subfolder, TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetReadOnly(Bool_t readonly); voidSetSniffer(TRootSniffer* sniff); voidSetTimer(Long_t milliSec = 100, Bool_t mode = kTRUE); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTopName(const char* top); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THttpServer(const char* engine = ""civetweb:8080""); THttpServer(const THttpServer&); Bool_tUnregister(TObject* obj); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THttpServer.html:5196,Test,TestBit,5196,root/html602/THttpServer.html,https://root.cern,https://root.cern/root/html602/THttpServer.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); Int_tRemoveDuplicates(); voidRemoveMetaData(const char* meta = 0); voidTObject::ResetBit(UInt_t f); voidResetBitAll(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAnchor(const char* anchor); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetBitAll(UInt_t f); voidSetDefaultMetaData(const char* meta); voidSetDefaultTreeName(const char* treeName); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetList(THashList* list); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; voidSort(Bool_t useindex = kFALSE); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TFileCollection(const char* name = 0, const char* title = 0, const char* file = 0, Int_t nfiles = -1, Int_t firstfile = 1); Int_tUpdate(Long64_t avgsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TFileCollection.html:5836,Test,TestBit,5836,root/html602/TFileCollection.html,https://root.cern,https://root.cern/root/html602/TFileCollection.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRelease(Int_t parNo); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual Int_tSetErrorDef(Double_t up); virtual voidSetFCN(void* fcn); virtual voidSetFCN(void (*)(Int_t&, Double_t*, Double_t&f, Double_t*, Int_t) fcn); virtual voidSetGraphicsMode(Bool_t mode = kTRUE); virtual voidSetMaxIterations(Int_t maxiter = 500); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetObjectFit(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetPrintLevel(Int_t printLevel = 0); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMinuit.html:22725,Test,TestBit,22725,root/html534/TMinuit.html,https://root.cern,https://root.cern/root/html534/TMinuit.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," tcl(Int_t split=0); {; gBenchmark->Start(""tcl"");; tclwrite(split);; tclread();; gBenchmark->Show(""tcl"");; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Long64_tlong long Long64_tDefinition RtypesCore.h:69; TBenchmark.h; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TClonesArray.h; TFile.h; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TH2.h; nentriesint nentriesDefinition THbookFile.cxx:91; TLine.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TTree.h; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; TClonesArray::BypassStreamervoid BypassStreamer(Bool_t bypass=kTRUE)When the kBypassStreamer bit is set, the automatically generated Streamer can call directly TClass::W...Definition TClonesArray.cxx:321; TClonesArray::Clearvoid Clear(Option_t *option="""") overrideClear the clones array.Definition TClonesArray.cxx:420; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::GetY1Double_t GetY1() constDefinition TLine.h:52; TLine::GetX2Double_t GetX2() constDefinition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tcl_8C.html:3448,Benchmark,Benchmark,3448,doc/master/tcl_8C.html,https://root.cern,https://root.cern/doc/master/tcl_8C.html,1,['Benchmark'],['Benchmark']
Testability," template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const LogLikelihoodFCN< DerivFunType, ModelFunType > & ; f). inline . Copy constructor. ; Definition at line 86 of file LogLikelihoodFCN.h. Member Function Documentation. ◆ Clone(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual BaseFunction * ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Clone ; (; ); const. inlinevirtual . clone the function (need to return Base for Windows) ; Definition at line 112 of file LogLikelihoodFCN.h. ◆ DataElement(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual double ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::DataElement ; (; const double * ; x, . unsigned int ; i, . double * ; g, . double * ; h = nullptr, . bool ; fullHessian = false . ); const. inlinevirtual . i-th likelihood contribution and its gradient ; Implements ROOT::Math::BasicFitMethodFunction< DerivFunType >.; Definition at line 121 of file LogLikelihoodFCN.h. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:9409,Log,LogLikelihoodFCN,9409,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,3,['Log'],['LogLikelihoodFCN']
Testability," testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; virtual voidRooAbsArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStringVar.html:9485,test,testArg,9485,root/html526/RooStringVar.html,https://root.cern,https://root.cern/root/html526/RooStringVar.html,1,['test'],['testArg']
Testability," testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; static voidTObject::operator delete(void* ptr); static voidTObject::operator delete(void* ptr, void* vp); static voidTObject::operator delete[](void* ptr); static voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual TStringoperator TString(); virtual RooAbsArg&operator=(const char* newValue); Bool_tRooAbsString::operator==(const char*) const; virtual Bool_tRooAbsString::operator==(const RooAbsArg& other); RooAbsArg::OperModeRooAbsArg::operMode() const; virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidRooAbsArg::Print(Option_t* options = 0) const; virtual voidRooAbsArg::printAddress(ostream& os) const; virtual voidRooAbsArg::printArgs(ostream& os) const; virtual voidRooAbsArg::printClassName(ostream& os) const; voidRooAbsArg::printCompactTree(const char* indent = """", const char* fileName = 0, const char* namePat = 0, RooAbsArg* client = 0); voidRooAbsArg::printCompactTree(ostream& os, const char* indent = """", const char* namePat = 0, RooAbsArg* client = 0); virtual voidRooAbsArg::printCompactTreeHook(ostream& os, const char* ind = """"); voidRooAbsArg::printComponentTree(const char* indent = """", const char* namePat = 0, Int_t nLevel = 999); voidRooAbsArg::printDirty(Bool_t depth = kTRUE) const; virtual voidRooPrintable::printExtras(ostream& os) const; virtual voidRooAbsArg::printMetaArgs(ostream&) const; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStringVar.html:9600,test,testArg,9600,root/html528/RooStringVar.html,https://root.cern,https://root.cern/root/html528/RooStringVar.html,1,['test'],['testArg']
Testability," testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsTestStatistic::offset() const; virtual Double_tRooAbsTestStatistic::offsetCarry() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooAbsOptTestStatistic&operator=(const RooAbsOptTestStatistic&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsOptTestStatistic.html:20818,test,testArg,20818,root/html602/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html602/RooAbsOptTestStatistic.html,2,['test'],['testArg']
Testability," testArg) const; Bool_tRooAbsArg::observableOverlaps(const RooArgSet* depList, const RooAbsArg& testArg) const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Double_tRooAbsTestStatistic::offset() const; virtual Double_tRooAbsTestStatistic::offsetCarry() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); RooDataWeightedAverage&operator=(const RooDataWeightedAverage&); Bool_tRooAbsReal::operator==(Double_t value) const; virtual Bool_tRooAbsReal::operator==(const RooAbsArg& other); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables); virtual voidRooAbsArg::optimizeCacheMode(const RooArgSet& observables, RooArgSet& optNodes, RooLinkedList& processedNodes); Bool_tRooAbsArg::overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; const RooArgSet*RooAbsArg::ownedComponents() const; virtual voidTObject::Paint(Option_t* option = """"); virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, RooLinkedList& cmdList) const; virtual RooPlot*RooAbsReal::plotOn(RooPlot* frame, const RooCmdArg& arg1 = RooCmdArg(), const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg(), const RooCmdArg& arg9 = RooCmdArg(), const RooCmdArg& arg10 = RooCmdArg()) const; virtual list<Double_t>*RooAbsReal::plotSamplingHint(RooAbsRealLValue&, Double_t, Double_t) const; virtual RooPlot*RooAbsReal::plotSliceOn(RooPlot* frame, const RooArgSet& sliceSet, Option_t* drawOptions = ""L"", Double_t scaleFactor = 1.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataWeightedAverage.html:20508,test,testArg,20508,root/html602/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html602/RooDataWeightedAverage.html,2,['test'],['testArg']
Testability," text box with the current parameter values and their errors to the frame. ;  ; void setActiveNormSet (RooArgSet const *normSet) const;  Setter for the _normSet member, which should never be set directly. ;  ; bool traceEvalPdf (double value) const;  Check that passed value is positive and not 'not-a-number'. ;  . Private Attributes; RooFit::UniqueId< RooArgSet >::Value_t _normSetId = RooFit::UniqueId<RooArgSet>::nullval;  ! Unique ID of the currently-active normalization set ;  . Friends; class RooAbsReal;  ; class RooChi2Var;  ; class RooMCStudy;  . Additional Inherited Members;  Public Attributes inherited from RooAbsArg; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit const RooAbsArg &testArg const { return observableOverlaps(dset,testArg);  ; const RooAbsArg &testArg const { return observableOverlaps(depList, testArg);  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooAbsPdf.h>. Inheritance diagram for RooAbsPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ ExtendMode. enum RooAbsPdf::ExtendMode. EnumeratorCanNotBeExtended ; CanBeExtended ; MustBeExtended . Definition at line 212 of file RooAbsPdf.h. Constructor & Destructor Documentation. ◆ RooAbsPdf() [1/4]. RooAbsPdf::RooAbsPdf ; (; ). Default constructor. ; Definition at line 230 of file RooAbsPdf.cxx. ◆ RooAbsPdf() [2/4]. RooAbsPdf::RooAbsPdf ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsPdf.html:79798,test,testArg,79798,doc/master/classRooAbsPdf.html,https://root.cern,https://root.cern/doc/master/classRooAbsPdf.html,4,['test'],['testArg']
Testability," texta label . Definition at line 799 of file NeuralNet.h. ◆ drawSample(). virtual void TMVA::DNN::Settings::drawSample ; (; const std::vector< double > & ; , . const std::vector< double > & ; , . const std::vector< double > & ; , . double ;  . ). inlinevirtual . callback for monitoring and logging ; Definition at line 807 of file NeuralNet.h. ◆ dropFractions(). const std::vector< double > & TMVA::DNN::Settings::dropFractions ; (; ); const. inline . Definition at line 762 of file NeuralNet.h. ◆ dropRepetitions(). size_t TMVA::DNN::Settings::dropRepetitions ; (; ); const. inline . Definition at line 761 of file NeuralNet.h. ◆ endTestCycle(). virtual void TMVA::DNN::Settings::endTestCycle ; (; ). inlinevirtual . callback for monitoring and loggging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 805 of file NeuralNet.h. ◆ endTrainCycle(). virtual void TMVA::DNN::Settings::endTrainCycle ; (; double ; ). inlinevirtual . callback for monitoring and logging ; Reimplemented in TMVA::DNN::ClassificationSettings.; Definition at line 788 of file NeuralNet.h. ◆ exists(). bool TMVA::DNN::Settings::exists ; (; std::string ; histoName). inline . for monitoring ; Definition at line 825 of file NeuralNet.h. ◆ factorWeightDecay(). double TMVA::DNN::Settings::factorWeightDecay ; (; ); const. inline . get the weight-decay factor ; Definition at line 769 of file NeuralNet.h. ◆ hasConverged(). bool TMVA::DNN::Settings::hasConverged ; (; double ; testError). virtual . has this training converged already? ; check for convergence; Definition at line 485 of file NeuralNet.cxx. ◆ learningRate(). double TMVA::DNN::Settings::learningRate ; (; ); const. inline . get the learning rate ; Definition at line 771 of file NeuralNet.h. ◆ maxConvergenceCount(). size_t TMVA::DNN::Settings::maxConvergenceCount ; (; ); const. inline . returns the max convergence count so far ; Definition at line 828 of file NeuralNet.h. ◆ minError(). size_t TMVA::DNN::Settings::minError ; (; ); c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html:8377,log,logging,8377,doc/master/classTMVA_1_1DNN_1_1Settings.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Settings.html,1,['log'],['logging']
Testability," than maximum! leaf: '%s' len: %d max: %d"", GetName(), len, fLeafCount->GetMaximum());; 411 len = fLeafCount->GetMaximum();; 412 }; 413 return len * fLen;; 414 } else {; 415 // -- We are a fixed size thing.; 416 return fLen;; 417 }; 418}; 419 ; 420////////////////////////////////////////////////////////////////////////////////; 421/// Helper routine for TLeafX::SetAddress.; 422///; 423/// The return value is non-zero if we owned the old; 424/// value buffer and must delete it now. The size; 425/// of the value buffer is recalculated and stored,; 426/// and a decision is made whether or not we own the; 427/// new value buffer.; 428 ; 429Int_t TLeaf::ResetAddress(void* addr, bool calledFromDestructor); 430{; 431 // The kNewValue bit records whether or not we own; 432 // the current value buffer or not. If we own it,; 433 // then we are responsible for deleting it.; 434 bool deleteValue = false;; 435 if (TestBit(kNewValue)) {; 436 deleteValue = true;; 437 }; 438 // If we are not being called from a destructor,; 439 // recalculate the value buffer size and decide; 440 // whether or not we own the new value buffer.; 441 if (!calledFromDestructor) {; 442 // -- Recalculate value buffer size and decide ownership of value.; 443 if (fLeafCount) {; 444 // -- Varying length array data member.; 445 fNdata = (fLeafCount->GetMaximum() + 1) * fLen;; 446 } else {; 447 // -- Fixed size data member.; 448 fNdata = fLen;; 449 }; 450 // If we were provided an address, then we do not own; 451 // the value, otherwise we do and must delete it later,; 452 // keep track of this with bit kNewValue.; 453 if (addr) {; 454 ResetBit(kNewValue);; 455 } else {; 456 SetBit(kNewValue);; 457 }; 458 }; 459 return deleteValue;; 460}; 461 ; 462////////////////////////////////////////////////////////////////////////////////; 463/// Set the leaf count of this leaf.; 464 ; 465void TLeaf::SetLeafCount(TLeaf *leaf); 466{; 467 if (IsZombie() && (fLen == -1) && leaf) {; 468 // The constructor noted that it could ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLeaf_8cxx_source.html:14172,Test,TestBit,14172,doc/master/TLeaf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLeaf_8cxx_source.html,1,['Test'],['TestBit']
Testability," that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 377 of file TClonesArray.cxx. ◆ ConstructedAt() [2/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx, . Option_t * ; clear_options . ). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, the function Clear will be called and passed the value of 'clear_options'; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that allocate memory which will be reset (but not deallocated) in their Clear() functions. ; Definition at line 399 of file TClonesArray.cxx. ◆ DeclFileName(). static const char * TClonesArray::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 83 of file TClonesArray.h. ◆ Delete(). void TClonesArray::Delete ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Use this routine when your objects allocate memory (e.g. objects inheriting from TNamed or containing TStrings allocate memory). If not you better use Clear() since if is faster. ; Implements TCollection.; Definition at line 452 of file TClonesArray.cxx. ◆ Expand(). void TC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:35190,Test,Tests,35190,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Test'],['Tests']
Testability," that representation, a selection is an ensemble of ranges defined on the axes. Ranges defined on the same axis are conjugated with OR (an entry must be in one or the other ranges to be selected). Ranges on different axes are are conjugated with AND (an entry must be in all the ranges to be selected). Several selections can be defined with different colors. It is possible to generate an entry list from a given selection and apply it to the tree using the editor (""Apply to tree"" button). Axes:; Options can be defined each axis separately using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis. Candle chart:; TParallelCoord can also be used to display a candle chart. In that mode, every variable is drawn in the same scale. The candle chart can be combined with the parallel coordinates mode, drawing the candle sticks over the axes.; {; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = TFile::Open(""cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; T->Draw(""Age:Grade:Step:Cost:Division:Nation"","""",""para"");; TParallelCoord* para = (TParallelCoord*)gPad->GetListOfPrimitives()->FindObject(""ParaCoord"");; TParallelCoordVar* grade = (TParallelCoordVar*)para->GetVarList()->FindObject(""Grade"");; grade->AddRange(new TParallelCoordRange(grade,11.5,14));; para->AddSelection(""less30"");; para->GetCurrentSelection()->SetLineColor(kViolet);; TParallelCoordVar* age = (TParallelCoordVar*)para->GetVarList()->FindObject(""Age"");; age->AddRange(new TParallelCoordRange(age,21,30));; }; f#define f(i)Definition RSha256.hxx:104; kViolet@ kVioletDefinition Rtypes.h:67; gPad",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:2940,log,logarithm,2940,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['log'],['logarithm']
Testability," that representation, a selection is an ensemble of ranges defined on the axes. Ranges defined on the same axis are conjugated with OR (an entry must be in one or the other ranges to be selected). Ranges on different axes are are conjugated with AND (an entry must be in all the ranges to be selected). Several selections can be defined with different colors. It is possible to generate an entry list from a given selection and apply it to the tree using the editor (""Apply to tree"" button).; Axes:. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis.; Candle chart:. TParallelCoord can also be used to display a candle chart. In that mode, every variable is drawn in the same scale. The candle chart can be combined with the parallel coordinates mode, drawing the candle sticks over the axes. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = TFile::Open(""$ROOTSYS/tutorials/tree/cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; T->Draw(""Age:Grade:Step:Cost:Division:Nation"","""",""para"");; TParallelCoord* para = (TParallelCoord*)gPad->GetListOfPrimitives()->FindObject(""ParaCoord"");; TParallelCoordVar* grade = (TParallelCoordVar*)para->GetVarList()->FindObject(""Grade"");; grade->AddRange(new TParallelCoordRange(grade,11.5,14));; para->AddSelection(""less30"");; para->GetCurrentSelection()->SetLineColor(kViolet);; TParallelCoordVar* age = (TParallelCoordVar*)para->GetVarList()->FindObject(""Age"");; age->AddRange(new TParallelCoordRange(age,21,30));; return c1;; }; Some references:. Alfred Inselbe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TParallelCoord.html:2918,log,logarithm,2918,root/html530/TParallelCoord.html,https://root.cern,https://root.cern/root/html530/TParallelCoord.html,3,['log'],['logarithm']
Testability," that representation, a selection is an ensemble of ranges defined on the axes. Ranges defined on the same axis are conjugated with OR (an entry must be in one or the other ranges to be selected). Ranges on different axes are are conjugated with AND (an entry must be in all the ranges to be selected). Several selections can be defined with different colors. It is possible to generate an entry list from a given selection and apply it to the tree using the editor (""Apply to tree"" button).; Axes:. Options can be defined each axis separatly using the right mouse click. These options can be applied to every axes using the editor. Axis width: If set to 0, the axis is simply a line. If higher, a color histogram is drawn on the axis.; Axis histogram height: If not 0, a usual bar histogram is drawn on the plot. The order in which the variables are drawn is essential to see the clusters. The axes can be dragged to change their position. A zoom is also available. The logarithm scale is also available by right clicking on the axis.; Candle chart:. TParallelCoord can also be used to display a candle chart. In that mode, every variable is drawn in the same scale. The candle chart can be combined with the parallel coordinates mode, drawing the candle sticks over the axes. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"");; TFile *f = TFile::Open(""cernstaff.root"");; TTree *T = (TTree*)f->Get(""T"");; T->Draw(""Age:Grade:Step:Cost:Division:Nation"","""",""para"");; TParallelCoord* para = (TParallelCoord*)gPad->GetListOfPrimitives()->FindObject(""ParaCoord"");; TParallelCoordVar* grade = (TParallelCoordVar*)para->GetVarList()->FindObject(""Grade"");; grade->AddRange(new TParallelCoordRange(grade,11.5,14));; para->AddSelection(""less30"");; para->GetCurrentSelection()->SetLineColor(kViolet);; TParallelCoordVar* age = (TParallelCoordVar*)para->GetVarList()->FindObject(""Age"");; age->AddRange(new TParallelCoordRange(age,21,30));; return c1;; }; Some references:. Alfred Inselberg's Homepage , with Vis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TParallelCoord.html:2918,log,logarithm,2918,root/html602/TParallelCoord.html,https://root.cern,https://root.cern/root/html602/TParallelCoord.html,2,['log'],['logarithm']
Testability," the -n option.; 340 ; 341void TRint::ExecLogon(); 342{; 343 if (NoLogOpt()) return;; 344 ; 345 TString name = "".rootlogon.C"";; 346 TString sname = ""system"";; 347 sname += name;; 348 char *s = gSystem->ConcatFileName(TROOT::GetEtcDir(), sname);; 349 if (!gSystem->AccessPathName(s, kReadPermission)) {; 350 ProcessFile(s);; 351 }; 352 delete [] s;; 353 s = gSystem->ConcatFileName(gSystem->HomeDirectory(), name);; 354 if (!gSystem->AccessPathName(s, kReadPermission)) {; 355 ProcessFile(s);; 356 }; 357 delete [] s;; 358 // avoid executing ~/.rootlogon.C twice; 359 if (strcmp(gSystem->HomeDirectory(), gSystem->WorkingDirectory())) {; 360 if (!gSystem->AccessPathName(name, kReadPermission)); 361 ProcessFile(name);; 362 }; 363 ; 364 // execute also the logon macro specified by ""Rint.Logon""; 365 const char *logon = gEnv->GetValue(""Rint.Logon"", (char*)nullptr);; 366 if (logon) {; 367 char *mac = gSystem->Which(TROOT::GetMacroPath(), logon, kReadPermission);; 368 if (mac); 369 ProcessFile(logon);; 370 delete [] mac;; 371 }; 372}; 373 ; 374////////////////////////////////////////////////////////////////////////////////; 375/// Main application eventloop. First process files given on the command; 376/// line and then go into the main application event loop, unless the -q; 377/// command line option was specified in which case the program terminates.; 378/// When return is true this method returns even when -q was specified.; 379///; 380/// When QuitOpt is true and return is false, terminate the application with; 381/// an error code equal to either the ProcessLine error (if any) or the; 382/// return value of the command casted to a long.; 383 ; 384void TRint::Run(Bool_t retrn); 385{; 386 if (!QuitOpt()) {; 387 // Prompt prompt only if we are expecting / allowing input.; 388 Getlinem(kInit, GetPrompt());; 389 }; 390 ; 391 Longptr_t retval = 0;; 392 Int_t error = 0;; 393 volatile Bool_t needGetlinemInit = kFALSE;; 394 ; 395 if (strlen(WorkingDirectory())) {; 396 // if directory s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:12673,Log,Logon,12673,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,4,"['Log', 'log']","['Logon', 'logon']"
Testability," the actual stage status on selected files. 'process' field:; N, noaction: do nothing on the selected files; P, fullproc: open the selected files and extract the meta information; L, locateonly: only locate the selected files; S, stageonly: issue a stage request for the selected files not yet staged. 'auxiliary' field; V, verbose: notify the actions. Returns 0 on success, -1 if any failure occurs. Int_t ScanDataSet(const char* uri, UInt_t option = kReopen|kDebug); Scans the dataset indicated by <uri> and returns the number of missing files.; Returns -1 if any failure occurs.; For more details, see documentation of; ScanDataSet(TFileCollection *dataset, const char *option). void GetQuota(const char* group, const char* user, const char* dsName, TFileCollection* dataset). Gets quota information from this dataset. void ShowQuota(const char* opt); Display quota information. void PrintUsedSpace(). Prints the quota. void MonitorUsedSpace(TVirtualMonitoringWriter* monitoring). Log info to the monitoring server. Long64_t GetGroupUsed(const char* group). Returns the used space of that group. Long64_t GetGroupQuota(const char* group). returns the quota a group is allowed to have. void UpdateUsedSpace(); updates the used space maps. Int_t RegisterDataSet(const char* uri, TFileCollection* dataSet, const char* opt); Register a dataset, perfoming quota checkings, if needed.; Returns 0 on success, -1 on failure. Int_t NotifyUpdate(const char* group = 0, const char* user = 0, const char* dspath = 0, Long_t mtime = 0, const char* checksum = 0); Save into the <datasetdir>/dataset.list file the name of the last updated; or created or modified dataset; Returns 0 on success, -1 on error. Int_t ClearCache(const char* uri); Clear cached information matching uri. Int_t ShowCache(const char* uri); Show cached information matching uri. TString CreateUri(const char* dsGroup = 0, const char* dsUser = 0, const char* dsName = 0, const char* dsTree = 0); Creates URI for the dataset manger in the fo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDataSetManager.html:13897,Log,Log,13897,root/html534/TDataSetManager.html,https://root.cern,https://root.cern/root/html534/TDataSetManager.html,1,['Log'],['Log']
Testability," the approximation used by Fumili and Levenberg-Marquardt cannot be used. Also the expected error and bin integral options should not be used in this case ; Definition at line 545 of file FitUtil.cxx. ◆ EvaluateLogL(). double ROOT::Fit::FitUtil::EvaluateLogL ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the LogL given a model function and the data at the point x. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluateLogLGradient(). void ROOT::Fit::FitUtil::EvaluateLogLGradient ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . double * ; grad, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential, . unsigned ; nChunks = 0 . ). evaluate the LogL gradient given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation . ◆ EvaluatePdf(). double ROOT::Fit::FitUtil::EvaluatePdf ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:8826,Log,LogL,8826,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['Log'],['LogL']
Testability," the binomial distribution hence the error on f can be estimated (same error as the binomial error for efficiency calculations \( (\sigma = \sqrt{\frac{(eff(1-eff)}{nEvts}}) \) ; Definition at line 219 of file ExpectedErrorPruneTool.cxx. ◆ GetSubTreeError(). Double_t TMVA::ExpectedErrorPruneTool::GetSubTreeError ; (; DecisionTreeNode * ; node); const. private . calculate the expected statistical error on the subtree below ""node"" which is used in the expected error pruning ; Definition at line 193 of file ExpectedErrorPruneTool.cxx. ◆ Log(). MsgLogger & TMVA::ExpectedErrorPruneTool::Log ; (; ); const. inlineprivate . Definition at line 78 of file ExpectedErrorPruneTool.h. ◆ SetPruneStrengthIncrement(). void TMVA::ExpectedErrorPruneTool::SetPruneStrengthIncrement ; (; Double_t ; dalpha). inline . Definition at line 65 of file ExpectedErrorPruneTool.h. Member Data Documentation. ◆ fDeltaPruneStrength. Double_t TMVA::ExpectedErrorPruneTool::fDeltaPruneStrength. private . ! the stepsize for optimizing the pruning strength parameter ; Definition at line 73 of file ExpectedErrorPruneTool.h. ◆ fLogger. MsgLogger* TMVA::ExpectedErrorPruneTool::fLogger. mutableprivate . ! message logger ; Definition at line 77 of file ExpectedErrorPruneTool.h. ◆ fNodePurityLimit. Double_t TMVA::ExpectedErrorPruneTool::fNodePurityLimit. private . ! the purity limit for labelling a terminal node as signal ; Definition at line 74 of file ExpectedErrorPruneTool.h. ◆ fPruneSequence. std::vector<DecisionTreeNode*> TMVA::ExpectedErrorPruneTool::fPruneSequence. private . ! the (optimal) prune sequence ; Definition at line 75 of file ExpectedErrorPruneTool.h. Libraries for TMVA::ExpectedErrorPruneTool:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/ExpectedErrorPruneTool.h; tmva/tmva/src/ExpectedErrorPruneTool.cxx. TMVAExpectedErrorPruneTool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html:5676,log,logger,5676,doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ExpectedErrorPruneTool.html,1,['log'],['logger']
Testability," the cache is clean, return the; 297/// cached value, otherwise recalculate on the fly and refill; 298/// the cache; 299 ; 300double RooAbsReal::getValV(const RooArgSet* nset) const; 301{; 302 if (nset && nset->uniqueId().value() != _lastNormSetId) {; 303 const_cast<RooAbsReal*>(this)->setProxyNormSet(nset);; 304 _lastNormSetId = nset->uniqueId().value();; 305 }; 306 ; 307 if (isValueDirtyAndClear()) {; 308 _value = traceEval(nullptr) ;; 309 // clearValueDirty() ;; 310 }; 311 ; 312 return hideOffset() ? _value + offset() : _value;; 313}; 314 ; 315 ; 316////////////////////////////////////////////////////////////////////////////////; 317/// Calculate current value of object, with error tracing wrapper; 318 ; 319double RooAbsReal::traceEval(const RooArgSet* /*nset*/) const; 320{; 321 double value = evaluate() ;; 322 ; 323 if (TMath::IsNaN(value)) {; 324 logEvalError(""function value is NAN"") ;; 325 }; 326 ; 327 //cxcoutD(Tracing) << ""RooAbsReal::getValF("" << GetName() << "") operMode = "" << _operMode << "" recalculated, new value = "" << value << std::endl ;; 328 ; 329 //Standard tracing code goes here; 330 if (!isValidReal(value)) {; 331 coutW(Tracing) << ""RooAbsReal::traceEval("" << GetName(); 332 << ""): validation failed: "" << value << std::endl ;; 333 }; 334 ; 335 //Call optional subclass tracing code; 336 // traceEvalHook(value) ;; 337 ; 338 return value ;; 339}; 340 ; 341 ; 342 ; 343////////////////////////////////////////////////////////////////////////////////; 344/// Variant of getAnalyticalIntegral that is also passed the normalization set; 345/// that should be applied to the integrand of which the integral is requested.; 346/// For certain operator p.d.f it is useful to overload this function rather; 347/// than analyticalIntegralWN() as the additional normalization information; 348/// may be useful in determining a more efficient decomposition of the; 349/// requested integral.; 350 ; 351Int_t RooAbsReal::getAnalyticalIntegralWN(RooArgSet& allDeps, RooArgSet& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:10832,log,logEvalError,10832,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['log'],['logEvalError']
Testability," the canvas) that was connecting it; 418 // (indirectly) to the list of cleanups.; 419 // Note: The Code in TParallelCoordVar was changed (circa June 2017),; 420 // to no longer have this behavior and thus rely on this code (by moving; 421 // from using Draw to Paint) but the structure might still exist elsewhere; 422 // so we keep this comment here.; 423 ; 424 // To preserve this connection (without introducing one when there was none),; 425 // we re-use fCache to inform RecursiveRemove of the node currently; 426 // being cleared/deleted.; 427 while (fFirst) {; 428 auto tlk = fFirst;; 429 fFirst = fFirst->fNext;; 430 fSize--;; 431 ; 432 ; 433 // Make node available to RecursiveRemove; 434 tlk->fNext.reset();; 435 tlk->fPrev.reset();; 436 fCache = tlk;; 437 ; 438 // delete only heap objects marked OK to clear; 439 auto obj = tlk->GetObject();; 440 if (!nodel && obj) {; 441 if (ROOT::Detail::HasBeenDeleted(obj)) {; 442 Error(""Clear"", ""A list is accessing an object (%p) already deleted (list name = %s)"",; 443 obj, GetName());; 444 } else if (obj->IsOnHeap()) {; 445 if (obj->TestBit(kCanDelete)) {; 446 if (!ROOT::Detail::HasBeenDeleted(obj)) {; 447 TCollection::GarbageCollect(obj);; 448 }; 449 }; 450 }; 451 }; 452 // delete tlk;; 453 }; 454 fFirst.reset();; 455 fLast.reset();; 456 fCache.reset();; 457 fSize = 0;; 458 Changed();; 459}; 460 ; 461////////////////////////////////////////////////////////////////////////////////; 462/// Remove all objects from the list AND delete all heap based objects.; 463/// If option=""slow"" then keep list consistent during delete. This allows; 464/// recursive list operations during the delete (e.g. during the dtor; 465/// of an object in this list one can still access the list to search for; 466/// other not yet deleted objects).; 467 ; 468void TList::Delete(Option_t *option); 469{; 470 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 471 R__COLLECTION_WRITE_GUARD();; 472 ; 473 Bool_t slow = option ? (!strcmp(option, ""slow"") ? kTRUE : ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TList_8cxx_source.html:13654,Test,TestBit,13654,doc/master/TList_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TList_8cxx_source.html,1,['Test'],['TestBit']
Testability," the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiDimFit.html:17021,test,test,17021,doc/master/classTMultiDimFit.html,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html,1,['test'],['test']
Testability," the class's unary functions as a shorthand for the in-built methods. More...;  ; enum  EUserDistribution { kCDF; , kPDF; };  User input distribution option. More...;  . Public Member Functions;  GoFTest (size_t sample1Size, const Double_t *sample1, size_t sample2Size, const Double_t *sample2);  Constructor for 2-samples tests. ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, const IGenFunction &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Constructor for 1-sample tests with a user specified distribution implementing the ROOT::Math::IGenFunction interface. ;  ; template<class Dist > ;  GoFTest (size_t sampleSize, const Double_t *sample, Dist &dist, EUserDistribution userDist=kPDF, Double_t xmin=1, Double_t xmax=0);  Templated constructor for 1-sample tests with a user specified distribution as a functor object implementing double operator()(double x). ;  ;  GoFTest (size_t sampleSize, const Double_t *sample, EDistribution dist=kUndefined, const std::vector< double > &distParams={});  Constructor for 1-sample tests with a specified distribution. ;  ; virtual ~GoFTest ();  ; Double_t AndersonDarling2SamplesTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarling2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 2-Sample Test. ;  ; Double_t AndersonDarlingTest (const Char_t *option=""p"") const;  Anderson-Darling 2-Sample Test. ;  ; void AndersonDarlingTest (Double_t &pvalue, Double_t &testStat) const;  Performs the Anderson-Darling 1-Sample Test. ;  ; Double_t KolmogorovSmirnov2SamplesTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; void KolmogorovSmirnov2SamplesTest (Double_t &pvalue, Double_t &testStat) const;  Kolmogorov-Smirnov 2-Samples Test. ;  ; Double_t KolmogorovSmirnovTest (const Char_t *option=""p"") const;  Kolmogorov-Smirnov 1-Sample Test. ;  ; void KolmogorovSmirnovTest (Double_t &pvalue, Double_t &testStat) con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html:2864,test,tests,2864,doc/master/classROOT_1_1Math_1_1GoFTest.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GoFTest.html,1,['test'],['tests']
Testability," the clipping window, the order of the clipping filter, to include smoothing, to set width of smoothing window and to include the estimation of Compton edges. On successful completion it returns 0. On error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window. Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter. Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the estimation of background will be included. Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window. Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7, kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the quantitative analysis of PIXE spectra in geoscience applications. NIM, B34 (1988), 396-402.; M. Morhac;, J. Kliman, V. Matouoek, M. Veselsky, I. Turzo: Background elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.C:; Example of the estimation of background for number of iterations=6. Original spectrum is shown in black color, estimated background in red color.; ; void Background_incr() {; Int_t i;; const Int_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t source[nbins];; gROOT->ForceStyle();; ; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; ; TString dir = gROOT->GetTutorialDir();; TString file = dir+""/spectrum/TSpectrum.root"";; TFile ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum.html:20879,log,logical,20879,doc/master/classTSpectrum.html,https://root.cern,https://root.cern/doc/master/classTSpectrum.html,1,['log'],['logical']
Testability, the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14421,Test,Test,14421,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found - save the configuration ; : 27 | 24965.1 23625.2 0.0197673 0.00175956 44425.4 0; : 28 Minimum Test error found - save the configuration ; : 28 | 24751.3 23417.4 0.0197715 0.00178318 44473.3 0; : 29 Minimum Test error found - save the configuration ; : 29 | 24538.1 23214.7 0.019691 0.0017711 44643.2 0; : 30 Minimum Test error found - save the configuration ; : 30 | 24332.4 23009.4 0.0197207 0.00177726 44584.5 0; : 31 Minimum Test error found - save the configuration ; : 31 | 24122.8 22810.9 0.0196876 0.00176879 44645.9 0; : 32 Minimum Test error found - save the configuration ; : 32 | 23919.8 22612.5 0.01973 0.00178692 44585.4 0; : 33 Minimum Test error found - save the configuration ; : 33 | 23719.7 22413.7 0.019891 0.00182506 44282.2 0; : 34 Minimum Test error found - save the configuration ; : 34 | 23516.3 22222.5 0.0206631 0.00186547 42558.4 0; : 35 Minimum Test error found - save the configuration ; : 35 | 23322.1 22028.2 0.0200826 0.00177554 43698.9 0; : 36 Minimum Test error found - save the configuration ; : 36 | 23123.9 21840 0.0197735 0.00177073 44437.6 0; : 37 Minimum Test error found - save the configuration ; : 37 | 22932.1 21651.2 0.0197273 0.00177446 44561.1 0; : 38 Minimum Test error found - save the configuration ; : 38 | 22740.7 21464.4 0.0197166 0.00177193 44581.5 0; : 39 Minimum Test error found - save the configuration ; : 39 | 22549.1 21282.9 0.0197213 0.00177445 44576 0; : 40 Minimum Test error found - save the configuration ; : 40 | 22363.6 21100 0.0197729 0.00177445 44448.2 0; : 41 Minimum Test error found - save the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:14755,Test,Test,14755,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 41 | 22176.6 20921.1 0.0197131 0.00176514 44573.2 0; : 42 Minimum Test error found - save the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16648,Test,Test,16648,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 42 | 21994.9 20740.9 0.0197264 0.00176834 44548.1 0; : 43 Minimum Test error found - save the configuration ; : 43 | 21811.7 20564.6 0.0197476 0.00176764 44494 0; : 44 Minimum Test error found - save the configuration ; : 44 | 21631.5 20390.5 0.0198172 0.00177793 44347.7 0; : 45 Minimum Test error found - save the configuration ; : 45 | 21453.9 20217 0.0197313 0.00176795 44535.1 0; : 46 Minimum Test error found - save the configuration ; : 46 | 21277.2 20045.6 0.0197489 0.00176953 44495.5 0; : 47 Minimum Test error found - save the configuration ; : 47 | 21102.5 19876.1 0.0197499 0.00176859 44490.7 0; : 48 Minimum Test error found - save the configuration ; : 48 | 20931.2 19705.9 0.0197403 0.00176149 44496.7 0; : 49 Minimum Test error found - save the configuration ; : 49 | 20758.9 19539.2 0.0199993 0.00178715 43926.8 0; : 50 Minimum Test error found - save the configuration ; : 50 | 20589.8 19373.7 0.0199739 0.00177216 43951.9 0; : 51 Minimum Test error found - save the configuration ; : 51 | 20419.5 19213.6 0.0197688 0.0017747 44459 0; : 52 Minimum Test error found - save the configuration ; : 52 | 20255.7 19051.4 0.0197679 0.00177721 44467.5 0; : 53 Minimum Test error found - save the configuration ; : 53 | 20090.6 18891.7 0.0197461 0.00177488 44515.6 0; : 54 Minimum Test error found - save the configuration ; : 54 | 19926.4 18735.4 0.0197628 0.00177559 44476 0; : 55 Minimum Test error found - save the configuration ; : 55 | 19766 18579 0.0197479 0.00177128 44502.3 0; : 56 Minimum Test error found - save the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:16760,Test,Test,16760,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 56 | 19606.6 18423 0.0198259 0.00178958 44354.9 0; : 57 Minimum Test error found - save the configuration ; : 57 | 19448.2 18266.7 0.0197832 0.00177932 44434.9 0; : 58 Minimum Test error found - save the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found -,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18315,Test,Test,18315,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 58 | 19286.3 18101.7 0.0200637 0.00195508 44177.8 0; : 59 Minimum Test error found - save the configuration ; : 59 | 19133.8 17932.7 0.0198394 0.00178813 44318.1 0; : 60 Minimum Test error found - save the configuration ; : 60 | 18976.4 17813.4 0.0198417 0.00178241 44298.6 0; : 61 Minimum Test error found - save the configuration ; : 61 | 18829.3 17664.6 0.0197742 0.00177192 44438.7 0; : 62 Minimum Test error found - save the configuration ; : 62 | 18675.1 17508.4 0.0197937 0.00177252 44392.2 0; : 63 Minimum Test error found - save the configuration ; : 63 | 18512.9 17340.5 0.019822 0.0017786 44337.4 0; : 64 Minimum Test error found - save the configuration ; : 64 | 18353.5 17179.2 0.0198469 0.00178029 44280.6 0; : 65 Minimum Test error found - save the configuration ; : 65 | 18201.3 17035.2 0.0198777 0.00178599 44219.2 0; : 66 Minimum Test error found - save the configuration ; : 66 | 18048.3 16883.1 0.019869 0.0017844 44236.5 0; : 67 Minimum Test error found - save the configuration ; : 67 | 17898.4 16736.1 0.0198962 0.00180855 44229.1 0; : 68 Minimum Test error found - save the configuration ; : 68 | 17745 16589.7 0.0198886 0.00178724 44195.6 0; : 69 Minimum Test error found - save the configuration ; : 69 | 17598.1 16441.7 0.0198822 0.00177929 44191.7 0; : 70 Minimum Test error found - save the configuration ; : 70 | 17446.3 16297.7 0.0199037 0.00178336 44149.4 0; : 71 Minimum Test error found - save the configuration ; : 71 | 17299.3 16156.1 0.0199217 0.00177946 44096 0; : 72 Minimum Test error found - save the configuration ; : 72 | 17155.5 16013.3 0.0198893 0.00178782 44195.4 0; : 73 Minimum Test error found - save the configuration ; : 73 | 17008.7 15875.5 0.0199043 0.00178745 44157.9 0; : 74 Minimum Test error found - save the configuration ; : 74 | 16868.3 15734.7 0.0199692 0.00179417 44016.4 0; : 75 Minimum Test error found - save the configuration ; : 75 | 16724.2 15597.7 0.0199149 0.00178949 44136.9 0; : 76 Minimum Test error found,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:18537,Test,Test,18537,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 726 | 23.3507 24.439 0.0200878 0.00180894 43766.5 0; : 727 | 23.4129 26.1943 0.0200349 0.00176004 43776.1 1; : 728 Minimum Test error found - save the configuration ; : 728 | 23.0149 24.223 0.0201139 0.00181842 43726.6 0; : 729 Minimum Test error found - save the configuration ; : 729 | 22.6778 23.9945 0.0201044 0.00181062 43730.7 0; : 730 | 22.455 23.9981 0.020057 0.0017578 43717.8 1; : 731 Minimum Test error found - save the configuration ; : 731 | 22.3369 23.5918 0.0200927 0.00181127 43760.4 0; : 732 | 21.8719 23.7484 0.0200451 0.00175548 43740.6 1; : 733 Minimum Test error found - save the configuration ; : 733 | 21.6244 23.3245 0.0201038 0.00181384 43739.9 0; : 734 | 21.7205 24.0895 0.02004 0.0017539 43749.1 1; : 735 Minimum Test error found - save the configuration ; : 735 | 21.2911 23.0542 0.0200889 0.00181051 43767.5 0; : 736 Minimum Test error found - save the configuration ; : 736 | 20.9485 22.9069 0.0201996 0.00182864 43547 0; : 737 Minimum Test error found - save the configuration ; : 737 | 20.4393 22.6213 0.0200735 0.00180745 43797.2 0; : 738 Minimum Test error found - save the configuration ; : 738 | 20.2862 22.4457 0.0201199 0.00181602 43706.6 0; : 739 Minimum Test error found - save the configuration ; : 739 | 20.1208 22.4048 0.0200963 0.00181207 43753.7 0; : 740 Minimum Test error found - save the configuration ; : 740 | 19.913 22.3841 0.0200932 0.00181057 43757.3 0; : 741 Minimum Test error found - save the configuration ; : 741 | 19.6956 22.1693 0.0200949 0.00182186 43780.3 0; : 742 Minimum Test error found - save the configuration ; : 742 | 19.5563 22.0339 0.0201148 0.00182382 43737.3 0; : 743 Minimum Test error found - save the configuration ; : 743 | 19.2633 21.9202 0.0201113 0.00181809 43732 0; : 744 Minimum Test error found - save the configuration ; : 744 | 18.9779 21.4146 0.0200848 0.00181658 43791.8 0; : 745 | 19.0558 21.8309 0.0200351 0.00176335 43783.5 1; : 746 Minimum Test error found - save the configuration ; : 7,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:92586,Test,Test,92586,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 807 | 9.87362 13.4104 0.0202002 0.0018848 43679 0; : 808 | 9.75883 13.5009 0.0202529 0.00175832 43255.9 1; : 809 | 9.54989 13.8103 0.0201225 0.00175709 43560.3 2; : 810 Minimum Test error found - save the configuration ; : 810 | 9.43647 13.1509 0.0201534 0.00182442 43646.8 0; : 811 | 9.40272 13.8504 0.0200559 0.00175676 43717.9 1; : 812 Minimum Test error found - save the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:99910,Test,Test,99910,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 812 | 9.42328 13.0239 0.0202708 0.00183859 43402.3 0; : 813 | 9.26754 13.347 0.0200488 0.00175838 43738.7 1; : 814 | 9.30693 13.2737 0.0200298 0.0017551 43776.4 2; : 815 | 9.2453 13.4411 0.0200383 0.0017608 43769.8 3; : 816 Minimum Test error found - save the configuration ; : 816 | 8.97729 12.8621 0.0200894 0.00181862 43785.8 0; : 817 | 9.05512 13.256 0.0200147 0.0017603 43825 1; : 818 Minimum Test error found - save the configuration ; : 818 | 8.88115 12.6122 0.0201221 0.00182968 43733.9 0; : 819 | 8.6338 13.2547 0.0200872 0.00177159 43678.6 1; : 820 Minimum Test error found - save the configuration ; : 820 | 8.87738 12.3889 0.0200904 0.00182003 43786.8 0; : 821 Minimum Test error found - save the configuration ; : 821 | 8.4572 12.2134 0.0200973 0.00182161 43774.1 0; : 822 | 8.40042 12.784 0.0200174 0.0017606 43819.3 1; : 823 | 8.60218 12.5837 0.0200326 0.00176535 43794.3 2; : 824 | 8.73942 12.9376 0.0204734 0.00180446 42851.9 3; : 825 Minimum Test error found - save the configuration ; : 825 | 8.34428 12.1043 0.0201737 0.00186372 43692 0; : 826 Minimum Test error found - save the configuration ; : 826 | 8.00332 12.0945 0.0202264 0.00188916 43627.1 0; : 827 Minimum Test error found - save the configuration ; : 827 | 7.99254 11.726 0.0202903 0.00182656 43328.1 0; : 828 | 7.97363 11.7656 0.0202489 0.00176045 43270.2 1; : 829 | 7.98909 11.7293 0.0200352 0.00175475 43762.5 2; : 830 | 7.96378 12.2512 0.0200553 0.00175667 43719.1 3; : 831 Minimum Test error found - save the configuration ; : 831 | 8.22376 11.6427 0.0201223 0.00181824 43706.2 0; : 832 Minimum Test error found - save the configuration ; : 832 | 7.83287 11.3952 0.0201042 0.0018127 43736.1 0; : 833 | 7.77712 11.6148 0.0201377 0.00175591 43521.3 1; : 834 Minimum Test error found - save the configuration ; : 834 | 7.55905 11.3034 0.0200924 0.00180566 43747.5 0; : 835 | 7.51796 11.4086 0.0200653 0.00174972 43678.7 1; : 836 | 7.6539 11.6743 0.0201454 0.00175856 43509.3 2; : 837 | 7.98319 1,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:100303,Test,Test,100303,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability, the configuration ; : 9 | 29498.2 28000.3 0.0204359 0.0018446 43030.8 0; : 10 Minimum Test error found - save the configuration ; : 10 | 29182.7 27696.8 0.0202998 0.00181461 43277.8 0; : 11 Minimum Test error found - save the configuration ; : 11 | 28878.3 27413.2 0.0196838 0.00176755 44652.2 0; : 12 Minimum Test error found - save the configuration ; : 12 | 28593.7 27134.7 0.0196593 0.00176089 44696.8 0; : 13 Minimum Test error found - save the configuration ; : 13 | 28310.5 26871.8 0.0196662 0.00176724 44695.4 0; : 14 Minimum Test error found - save the configuration ; : 14 | 28043.7 26610.8 0.019761 0.00176915 44464.7 0; : 15 Minimum Test error found - save the configuration ; : 15 | 27781.4 26354.5 0.0197825 0.0017915 44466.6 0; : 16 Minimum Test error found - save the configuration ; : 16 | 27524.2 26104.3 0.0196926 0.00175551 44600.3 0; : 17 Minimum Test error found - save the configuration ; : 17 | 27271.4 25860.7 0.0197778 0.00177907 44447.7 0; : 18 Minimum Test error found - save the configuration ; : 18 | 27023.6 25622.6 0.0197311 0.00176281 44522.9 0; : 19 Minimum Test error found - save the configuration ; : 19 | 26780.6 25388.8 0.0197339 0.00176163 44513.1 0; : 20 Minimum Test error found - save the configuration ; : 20 | 26542.7 25157.4 0.0198818 0.0018763 44431 0; : 21 Minimum Test error found - save the configuration ; : 21 | 26311 24925.1 0.0199584 0.00175652 43951.6 0; : 22 Minimum Test error found - save the configuration ; : 22 | 26076.9 24700.5 0.0197873 0.00176359 44385.9 0; : 23 Minimum Test error found - save the configuration ; : 23 | 25845.4 24483.8 0.0196702 0.00176161 44671.3 0; : 24 Minimum Test error found - save the configuration ; : 24 | 25624.1 24264.1 0.0196853 0.00176075 44631.5 0; : 25 Minimum Test error found - save the configuration ; : 25 | 25402.4 24046.8 0.0199052 0.00182376 44244.2 0; : 26 Minimum Test error found - save the configuration ; : 26 | 25181.1 23835.2 0.0199605 0.00176778 43973.7 0; : 27 Minimum Test error found ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:13084,Test,Test,13084,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Test'],['Test']
Testability," the data members of the Track class also split into individual buffers. These tests were run on Pentium III CPU with 650 MHz. Event Parameters; File Size; Total Time to Write (MB/sec); Effective Time to Write (MB/sec); Total Time to Read All (MB/sec); Total Time to Read Sample (MB/sec). Comp = 0; Split = 1; 19.75 MB; 6.84 s.(2.8 MB/s); 3.56 s.(5.4 MB/s); 0.79s.(24.2 MB/s); 0.79 s.(24.2 MB/s). Comp = 1; Split = 1; 17.73 MB; 6.44 s.(3.0 MB/s); 4.02 s.(4.8 MB/s); 0.90 s.(21.3 MB/s); 0.90 s.(21.3 MB/s). Comp = 2; Split = 1; 13.78 MB; 11.34s.(1.7 MB/s); 9.51 s.(2.0 MB/s); 2.17 s.(8.8 MB/s); 2.17 s.(8.8 MB/s). The Total Time is the real time in seconds to run the program. Effective time is the real time minus the time spent in non I/O operations (essentially the random number generator). The program Event generates in average 600 tracks per event. Each track has 17 data members. The read benchmark runs in the interactive version of ROOT. The ‘Total Time to Read All’ is the real time reported by the execution of the script &ROOTSYS/test/eventa.; We did not correct this time for the overhead coming from the interpreter itself. The Total time to read sample is the execution time of the script $ROOTSYS/test/eventb. This script loops on all events. For each event, the branch containing the number of tracks is read. In case the number of tracks is less than 585, the full event is read in memory. This test is obviously not possible in non-split mode. In non-split mode, the full event must be read in memory. The times reported in the table correspond to complete I/O operations necessary to deal with machine independent binary files. On Linux, this also includes byte-swapping operations. The ROOT file allows for direct access to any event in the file and direct access to any part of an event when split=1.; Note also that the uncompressed file generated with split=0 is 48.7 Mbytes and only 47.17 Mbytes for the option split=1. The difference in size is due to the object identificat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:649829,test,test,649829,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['test'],['test']
Testability," the dataset.""; 2235 << Endl;; 2236 } else if (nbits > 30) {; 2237 Log() << kERROR << ""Error in Variable Importance: Number of variables is too large for Random mode""; 2238 << Endl;; 2239 }; 2240 }; 2241 return nullptr;; 2242}; 2243 ; 2244////////////////////////////////////////////////////////////////////////////////; 2245 ; 2246TH1F *TMVA::Factory::EvaluateImportanceAll(DataLoader *loader, Types::EMVA theMethod, TString methodTitle,; 2247 const char *theOption); 2248{; 2249 ; 2250 uint64_t x = 0;; 2251 uint64_t y = 0;; 2252 ; 2253 // getting number of variables and variable names from loader; 2254 const int nbits = loader->GetDataSetInfo().GetNVariables();; 2255 std::vector<TString> varNames = loader->GetDataSetInfo().GetListOfVariables();; 2256 ; 2257 if (nbits > 60) {; 2258 Log() << kERROR << ""Number of combinations is too large , is 2^"" << nbits << Endl;; 2259 return nullptr;; 2260 }; 2261 if (nbits > 20) {; 2262 Log() << kWARNING << ""Number of combinations is very large , is 2^"" << nbits << Endl;; 2263 }; 2264 uint64_t range = static_cast<uint64_t>(pow(2, nbits));; 2265 ; 2266 ; 2267 // vector to save importances; 2268 std::vector<Double_t> importances(nbits);; 2269 // vector to save ROC; 2270 std::vector<Double_t> ROC(range);; 2271 ROC[0] = 0.5;; 2272 for (int i = 0; i < nbits; i++); 2273 importances[i] = 0;; 2274 ; 2275 Double_t SROC, SSROC; // computed ROC value; 2276 for (x = 1; x < range; x++) {; 2277 ; 2278 std::bitset<VIBITS> xbitset(x);; 2279 if (x == 0); 2280 continue; // data loader need at least one variable; 2281 ; 2282 // creating loader for seed; 2283 TMVA::DataLoader *seedloader = new TMVA::DataLoader(xbitset.to_string());; 2284 ; 2285 // adding variables from seed; 2286 for (int index = 0; index < nbits; index++) {; 2287 if (xbitset[index]); 2288 seedloader->AddVariable(varNames[index], 'F');; 2289 }; 2290 ; 2291 DataLoaderCopy(seedloader, loader);; 2292 seedloader->PrepareTrainingAndTestTree(loader->GetDataSetInfo().GetCut(""Signal""),; 2293 loa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:95273,Log,Log,95273,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,2,['Log'],['Log']
Testability," the deepest node that geometrically contains P (in our case let us suppose it is B_3). Since a node is just a positioned volume, we can then get a pointer to the volume, medium or material objects related to it. Deepest means that B_3 still contains point P (as well as A_1 and TOP_1), but none of the daughters of volume B does. After finding out the node containing the particle, one can check if the geometry state is different compared to the last located point:; Bool_t *TGeoManager::IsSameLocation(); The algorithm for finding where a point is located in geometry is presented in the figure 17-36.; It always starts by checking if the last computed modeller state is the answer. This optimizes the search when continuously tracking a particle. The main actions performed are:. moving up and down in the logical node tree while updating the current node and its global matrix; converting the global position into the local frame of the current node/volume; checking whether the local position lies within the geometrical shape of the current volume - if this is the case continue the search downwards for the daughters of the current node, otherwise search upwards its containers until the top level is reached.; the number of candidate nodes to be checked at a given level is minimized by an additional optimization structure: voxels. This is effective even in case there is only one daughter of the current volume.; in case the current node is declared as possibly overlapping, the method FindInCluster() is invoked. This method checks all different possibilities within the cluster of overlapping candidates. One of the candidates is prioritized if one of the following conditions id fulfilled (in order):; Is declared as non-overlapping (these are anyway searched first); Has at least one daughter that contains the current point; Was already declared as containing the point at a previous step. Finding the location of a point in the geometry hierarchy. 18.10.2 Finding the Distance to Nex",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1024255,log,logical,1024255,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability," the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TBasket; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBasketSQL.html:14628,Test,TestBit,14628,doc/master/classTBasketSQL.html,https://root.cern,https://root.cern/doc/master/classTBasketSQL.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeySQL.html:12947,Test,TestBit,12947,doc/master/classTKeySQL.html,https://root.cern,https://root.cern/doc/master/classTKeySQL.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKey.html:12930,Test,TestBit,12930,doc/master/classTKey.html,https://root.cern,https://root.cern/doc/master/classTKey.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," the display list. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  indicates that key contains subdirectory ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TKey; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTKeyXML.html:12593,Test,TestBit,12593,doc/master/classTKeyXML.html,https://root.cern,https://root.cern/doc/master/classTKeyXML.html,2,['Test'],"['TestBit', 'TestBits']"
Testability," the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMLPAnalyzer.html:1918,test,test,1918,doc/master/classTMLPAnalyzer.html,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html,1,['test'],['test']
Testability," the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for the control variable, independently for each of the various sources of events, without making use of any a priori knowledge on this variable. The aim is thus to use the knowledge available for the discriminating variables to infer the behaviour of the individual sources of events with respect to the control variable.; TSPlot is optimal if the control variable is uncorrelated with the discriminating variables.; A detail description of the formalism itself, called \(\hbox{$_s$}{\cal P}lot\), is given in [1]. The method; The \(\hbox{$_s$}{\cal P}lot\) technique is developed in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species of events. These species represent various signal components and background components which all together account for the data sample. The different terms of the log-Likelihood are:. \(N\) : the total number of events in the data sample,; \({\rm N}_{\rm s}\) : the number of species of events populating the data sample,; \(N_i\) : the number of events expected on the average for the \(i^{\rm th}\) species,; \({\rm f}_i(y_e)\) : the value of the PDFs of the discriminating variables \(y\) for the \(i^{th}\) species and for event \(e\),; \(x\) : the set of control variables which, by definition, do not appear in the expression of the Likelihood function \({\cal L}\). The extended log-Likelihood reads:. \[; {\cal L}=\sum_{e=1}^{N}\ln \Big\{ \sum_{i=1}^{{\rm N}_{\rm s}}N_i{\rm f}_i(y_e) \Big\} -\sum_{i=1}^{{\rm N}_{\rm s}}N_i \tag{1}; \]. From this expression, after maximization of \({\cal L}\) with respect to the \(N_i\) parameters, a weight can be computed for every event and each species, in order to obtain later the true distribution \(\hbox{M}_i(x)\) of variable \(x\). If \({\rm n}\) is one of the \({\rm N}_{\rm s}\) species present in the d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:2462,log,log-Likelihood,2462,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['log'],['log-Likelihood']
Testability," the drawing routines.; 7081 ; 7082Int_t THistPainter::PaintInit(); 7083{; 7084 ; 7085 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) return 1;; 7086 ; 7087 Int_t i;; 7088 static const char *where = ""PaintInit"";; 7089 Double_t yMARGIN = gStyle->GetHistTopMargin();; 7090 Int_t maximum = 0;; 7091 Int_t minimum = 0;; 7092 if (fH->GetMaximumStored() != -1111) maximum = 1;; 7093 if (fH->GetMinimumStored() != -1111) minimum = 1;; 7094 ; 7095 // Compute X axis parameters; 7096 ; 7097 Int_t last = fXaxis->GetLast();; 7098 Int_t first = fXaxis->GetFirst();; 7099 Hparam.xlowedge = fXaxis->GetBinLowEdge(first);; 7100 Hparam.xbinsize = fXaxis->GetBinWidth(first);; 7101 Hparam.xlast = last;; 7102 Hparam.xfirst = first;; 7103 Hparam.xmin = Hparam.xlowedge;; 7104 Hparam.xmax = fXaxis->GetBinLowEdge(last)+fXaxis->GetBinWidth(last);; 7105 ; 7106 // if log scale in X, replace xmin,max by the log; 7107 if (Hoption.Logx) {; 7108 if (Hparam.xmax<=0) {; 7109 Error(where, ""cannot set X axis to log scale"");; 7110 return 0;; 7111 }; 7112 if (Hparam.xlowedge <=0 ) {; 7113 if (Hoption.Same) {; 7114 TH1* h1 = nullptr;; 7115 TObject *obj;; 7116 TIter next(gPad->GetListOfPrimitives());; 7117 while ((obj = (TObject *)next())) {; 7118 if (obj->InheritsFrom(TH1::Class())) { h1 = (TH1*)(obj) ; break; }; 7119 if (obj->InheritsFrom(THStack::Class())) { h1 = ((THStack*)(obj))->GetHistogram() ; break; }; 7120 if (obj->InheritsFrom(TGraph::Class())) { h1 = ((TGraph*)(obj))->GetHistogram() ; break; }; 7121 if (obj->InheritsFrom(TMultiGraph::Class())) { h1 = ((TMultiGraph*)(obj))->GetHistogram(); break; }; 7122 if (obj->InheritsFrom(TGraph2D::Class())) { h1 = ((TGraph2D*)(obj))->GetHistogram(); break; }; 7123 if (obj->InheritsFrom(TF1::Class())) { h1 = ((TF1*)(obj))->GetHistogram(); break; }; 7124 }; 7125 if (h1) {; 7126 Hparam.xlowedge = h1->GetXaxis()->GetBinLowEdge(h1->GetXaxis()->GetFirst());; 7127 } else {; 7128 Error(where, ""undefined user's coordinates. Cannot use option SAME"");; 7129 r",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:257922,log,log,257922,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['log'],['log']
Testability," the effective number of used points in the LogL evaluation . ◆ EvaluatePdf(). double ROOT::Fit::FitUtil::EvaluatePdf ; (; const IModelFunction & ; func, . const UnBinData & ; data, . const double * ; p, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the LogL given a model function and the BinPoint data. ; If the pointer g is not null evaluate also the gradient of the pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 891 of file FitUtil.cxx. ◆ EvaluatePoissonBinPdf(). double ROOT::Fit::FitUtil::EvaluatePoissonBinPdf ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; x, . unsigned int ; ipoint, . double * ; g = nullptr, . double * ; h = nullptr, . bool ; hasGrad = false, . bool ; fullHessian = false . ). evaluate the pdf contribution to the Poisson LogL given a model function and the BinPoint data. ; evaluate the pdf (Poisson) contribution to the logl (return actually log of pdf) and its gradient (gradient of log(pdf)); If the pointer g is not null evaluate also the gradient of the Poisson pdf. If the function provides parameter derivatives they are used otherwise a simple derivative calculation is used ; Definition at line 1297 of file FitUtil.cxx. ◆ EvaluatePoissonLogL(). double ROOT::Fit::FitUtil::EvaluatePoissonLogL ; (; const IModelFunction & ; func, . const BinData & ; data, . const double * ; p, . int ; iWeight, . bool ; extended, . unsigned int & ; nPoints, . ::ROOT::EExecutionPolicy ; executionPolicy, . unsigned ; nChunks = 0 . ). evaluate the Poisson LogL given a model function and the data at the point p. ; return also nPoints as the effective number of used points in the LogL evaluation By default is extended, pass extend to false if want to be not extended (MultiNomial) . ◆ EvaluatePoissonLogLGradient(). void ROOT::Fit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html:9914,Log,LogL,9914,doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit_1_1FitUtil.html,1,['Log'],['LogL']
Testability," the entire directory to your area. The script hsimple.C displays a histogram as it is being filled, and creates a ROOT file used by the other examples.; To execute it type:; $ cd $ROOTSYS/tutorials; $ root; -------------------------------------------------------------------------; | Welcome to ROOT 6.10/01 http://root.cern.ch |; | (c) 1995-2017, The ROOT Team |; | Built for macosx64 |; | From heads/v6-10-00-patches@v6-10-00-25-g9f78c3a, Jul 03 2017, 11:39:44 |; | Try '.help', '.demo', '.license', '.credits', '.quit'/'.q' |; -------------------------------------------------------------------------. root [0] .x hsimple.C; Now execute demos.C, which brings up the button bar shown on the left. You can click on any button to execute another example. To see the source, open the corresponding source file (for example fit1.C). Once you are done, and want to quit the ROOT session, you can do so by typing .q.; root[] .x demos.C; root[] .q; 20.2 $ROOTSYS/test; The test directory contains a set of examples that represent all areas of the framework. When a new release is cut, the examples in this directory are compiled and run to test the new release’s backward compatibility.; We see these source files:. Makefile; Makefile to build all test programs. hsimple.cxx; Simple test program that creates and saves some histograms. MainEvent.cxx; Simple test program that creates a ROOT Tree object and fills it with some simple structures but also with complete histograms. This program uses the files Event.cxx, EventCint.cxx and Event.h. An example of a procedure to link this program is in bind_Event. Note that the Makefile invokes the rootcling utility to generate the Cling interface EventCint.cxx. Event.cxx; Implementation for classes Event and Track. minexam.cxx; Simple test program for data fitting. tcollex.cxx; Example usage of the ROOT collection classes. tcollbm.cxx; Benchmarks of ROOT collection classes. ctorture.cxx; Test program for the class TComplex. tstring.cxx; Example usage ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1075166,test,test,1075166,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,['test'],['test']
Testability," the environment and can not be reused till a ""name"" is set; again. The solution below will lose the space for the string; in that case, but if this functions is not called thousands; of times that should not be a problem. const char * Getenv(const char* name); Get environment variable. int Exec(const char* shellcmd); Execute a command. FILE * OpenPipe(const char* shellcmd, const char* mode); Open a pipe. int ClosePipe(FILE* pipe); Close the pipe. int GetPid(); Get process id. void Exit(int code, Bool_t mode = kTRUE); Exit the application. void Abort(int code = 0); Abort the application. void StackTrace(); Print a stack trace. void Openlog(const char* name, Int_t options, ELogFacility facility); Open connection to system log daemon. For the use of the options and; facility see the Unix openlog man page. void Syslog(ELogLevel level, const char* mess); Send mess to syslog daemon. Level is the logging level and mess the; message that will be written on the log. void Closelog(); Close connection to system log daemon. Int_t RedirectOutput(const char* name, const char* mode = ""a"", RedirectHandle_t* h = 0); Redirect standard output (stdout, stderr) to the specified file.; If the file argument is 0 the output is set again to stderr, stdout.; The second argument specifies whether the output should be added to the; file (""a"", default) or the file be truncated before (""w"").; This function saves internally the current state into a static structure.; The call can be made reentrant by specifying the opaque structure pointed; by 'h', which is filled with the relevant information. The handle 'h'; obtained on the first call must then be used in any subsequent call,; included ShowOutput, to display the redirected output.; Returns 0 on success, -1 in case of error. Func_t DynFindSymbol(const char* module, const char* entry); dynamic linking of module. int Load(const char* module, const char* entry = """", Bool_t system = kFALSE); Load a shared library. Returns 0 on successful loading, 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:30596,log,log,30596,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,3,['log'],['log']
Testability," the feature set; subsequent changes to the TIOFeatures object do not propagate to the TTree. ; Definition at line 69 of file TIOFeatures.hxx. Public Member Functions;  TIOFeatures ();  ; void Clear (EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOFeatures bits);  Clear a specific IO feature from this set. ;  ; void Clear (Experimental::EIOUnsupportedFeatures bits);  Clear a specific IO feature from this set. ;  ; void Print () const;  Print a human-readable representation of the TIOFeatures to stdout. ;  ; bool Set (const std::string &);  Given a IO feature string, set the corresponding feature. ;  ; bool Set (EIOFeatures bits);  Set a specific IO feature. ;  ; bool Set (Experimental::EIOFeatures bits);  Set a specific IO feature. ;  ; bool Test (EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOFeatures bits) const;  Test to see if a given feature is set. ;  ; bool Test (Experimental::EIOUnsupportedFeatures bits) const;  . Static Public Attributes; static constexpr int kIOFeatureCount = 1;  . Private Member Functions;  TIOFeatures (UChar_t IOBits);  ; UChar_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this versio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:2445,Test,Test,2445,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Test'],['Test']
Testability," the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : InputLayout: ""1|16|16"" [The Layout of the input]; : Layout: ""CONV|10|3|3|1|1|1|1|RELU,BNORM,CONV|10|3|3|1|1|1|1|RELU,MAXPOOL|2|2|1|1,RESHAPE|FLAT,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0.0"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Model: ""sequential""; _________________________________________________________________; Layer (type) Output Shape Param # ; =============================================",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:6782,Test,TestRepetitions,6782,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Test'],['TestRepetitions']
Testability," the model; Double_tfSize; RooStats::TestStatistic*fTestStatpointer to the test statistic that is being sampled; TStringfVarNamename of test statistic; RooWorkspace*fWSa workspace that owns all the components to be used by the calculator. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; ToyMCSamplerOld(TestStatistic &ts). virtual ~ToyMCSamplerOld(). SamplingDistribution* AppendSamplingDistribution(RooArgSet& allParameters, RooStats::SamplingDistribution* last, Int_t additionalMC); Extended interface to append to sampling distribution more samples. SamplingDistribution* GetSamplingDistribution(RooArgSet& allParameters); Main interface to get a SamplingDistribution. RooAbsData* GenerateToyData(RooArgSet& allParameters) const; This method generates a toy dataset for the given parameter point. string MakeName(RooArgSet& ); helper method to create meaningful names for sampling dist. Double_t EvaluateTestStatistic(RooAbsData& data, RooArgSet& allParameters); Main interface to evaluate the test statistic on a dataset. TestStatistic* GetTestStatistic() const; Get the TestStatistic. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void Initialize(RooAbsArg& , RooArgSet& , RooArgSet& ); Common Initialization. void SetNEventsPerToy(const Int_t nevents). void SetExtended(const Bool_t isExtended). void SetData(RooAbsData& data); Set the DataSet, add to the the workspace if not already there. void SetPdf(RooAbsPdf& pdf); Set the Pdf, add to the the workspace if not already there. void SetData(const char* name); specify the name of the dataset in the workspace to be used. {fDataName = name;}. void SetPdf(const char* name); specify the name of the PDF in the workspace to be used. {fPdfName = name;}. void SetPriorNuisance(RooAbsPdf* ); How to randomize the prior. Set to NULL to deactivate randomization. {}. void SetParametersForTestStat(const RooArgSet& nullpoi); specify the values of parameters us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html:4797,test,test,4797,root/html528/RooStats__ToyMCSamplerOld.html,https://root.cern,https://root.cern/root/html528/RooStats__ToyMCSamplerOld.html,3,['test'],['test']
Testability," the names the args in the; supplied argset. The caller of this function is responsible; for deleting the returned argset. The complement of this function; is getObservables(). RooArgSet* getComponents() const; Return a RooArgSet with all component (branch nodes) of the; expression tree headed by this object. Bool_t checkObservables(const RooArgSet* nset) const; Overloadable function in which derived classes can implement; consistency checks of the variables. If this function returns; true, indicating an error, the fitter or generator will abort. Bool_t recursiveCheckObservables(const RooArgSet* nset) const; Recursively call checkObservables on all nodes in the expression tree. Bool_t dependsOn(const RooAbsCollection& serverList, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) any object in the; specified collection. Uses the dependsOn(RooAbsArg&) member function. Bool_t dependsOn(const RooAbsArg& testArg, const RooAbsArg* ignoreArg, Bool_t valueOnly); Test whether we depend on (ie, are served by) the specified object.; Note that RooAbsArg objects are considered equivalent if they have; the same name. Bool_t overlaps(const RooAbsArg& testArg, Bool_t valueOnly = kFALSE) const; Test if any of the nodes of tree are shared with that of the given tree. Bool_t observableOverlaps(const RooAbsData* dset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. Bool_t observableOverlaps(const RooArgSet* nset, const RooAbsArg& testArg); Test if any of the dependents of the arg tree (as determined by getObservables); overlaps with those of the testArg. void setValueDirty(const RooAbsArg* source) const; Mark this object as having changed its value, and propagate this status; change to all of our clients. If the object is not in automatic dirty; state propagation mode, this call has no effect. void setShapeDirty(const RooAbsArg* source) const; Mark ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsArg.html:22934,test,testArg,22934,root/html526/RooAbsArg.html,https://root.cern,https://root.cern/root/html526/RooAbsArg.html,2,"['Test', 'test']","['Test', 'testArg']"
Testability," the notation with 10^N ...Definition TStyle.cxx:1880; TStyle::GetGridWidthWidth_t GetGridWidth() constDefinition TStyle.h:224; TStyle::GetStripDecimalsInt_t GetStripDecimals() constDefinition TStyle.h:268; TStyle::GetExponentOffsetvoid GetExponentOffset(Float_t &xoff, Float_t &yoff, Option_t *axis=""X"") constMethod returns X and Y offset of the axis 10^n notation.Definition TStyle.cxx:1855; TText::SetTextvirtual void SetText(Double_t x, Double_t y, const char *text)Definition TText.h:74; TTimeStamp::MktimeFromUTCstatic time_t MktimeFromUTC(tm_t *tmstruct)Equivalent of standard routine ""mktime"" but using the assumption that tm struct is filled with UTC,...Definition TTimeStamp.cxx:768; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; lTLine lDefinition textangle.C:4. graf2dgrafsrcTGaxis.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:130816,log,logarithm,130816,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['log'],['logarithm']
Testability," the number of nodes, since the same node can be found on different branches. In other words, the number of states corresponds to the number of nodes in the expanded geometry tree. Since unfortunately this expansion from logical to physical hierarchy cannot be stored on regular basis due to the large size of the latter, one cannot directly assign state numbers. If the size of the expansion proves however to be small enough (less than about 50 million objects), a parallel structure storing these state indices is built and stored in memory. In such case each state automatically gets an index that can be retrieved after any state initialization. These indices can prove to be quite useful for being able to keep track of the navigation history and force certain states. Let's illustrate how this works with a simple example:; Suppose we have a simple geometry with a volume B positioned twice inside a container A. Then A is positioned twice in a top container T. The complete list of logical nodes is: T_1, A_1, A_2, B_1, B_2. On the other hand we will have more states than logical nodes:; /T_1- 1 state at level = 0; /T_1/A_1,/T_1/A_2- 2 states at level = 1; /T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2 - 4 states at level = 2; All these states will get automatic numbers, starting with 0 corresponding to the top-level state and ending with an integer corresponding to Ntotal_states-1. The mapping from a given logical node to a state number is generally not possible, as for the node B_1 that appears as current node for 2 different states. The numbering order of states is therefore not important, but it can be used as in the following lines:. gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization; TGeoManager::GetCurrentNodeIdInt_t GetCurrentNodeId() constGet the unique ID of the curre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:76314,log,logical,76314,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability," the number of nodes, since the same node can be found on different branches. In other words, the number of states corresponds to the number of nodes in the expanded geometry tree. Since unfortunately this expansion from logical to physical hierarchy cannot be stored on regular basis due to the large size of the latter, one cannot directly assign state numbers. If the size of the expansion proves however to be small enough (less than about 50 million objects), a parallel structure storing these state indices is built and stored in memory. In such case each state automatically gets an index that can be retrieved after any state initialization. These indices can prove to be quite useful for being able to keep track of the navigation history and force certain states. Let’s illustrate how this works with a simple example:; Suppose we have a simple geometry with a volume B positioned twice inside a container A. Then A is positioned twice in a top container T. The complete list of logical nodes is: T_1, A_1, A_2, B_1, B_2. On the other hand we will have more states than logical nodes:; /T_1- 1 state at level = 0; /T_1/A_1,/T_1/A_2- 2 states at level = 1; /T_1/A_1/B_1,/T_1/A_1/B_2,/T_1/A_2/B_1,/T_1/A_2/B_2 - 4 states at level = 2; All these states will get automatic numbers, starting with 0 corresponding to the top-level state and ending with an integer corresponding to Ntotal_states-1. The mapping from a given logical node to a state number is generally not possible, as for the node B_1 that appears as current node for 2 different states. The numbering order of states is therefore not important, but it can be used as in the following lines:. gGeoManager->InitTrack(pt,dir); // anything to initialize a state; Int_t istate = gGeoManager->GetCurrentNodeId(); // in fact state Id; {; //... code changing the current state; }; gGeoManager->CdNode(istate); // forces state's re-initialization. Current global transformation. This represents the transformation from MARS to the local ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:979432,log,logical,979432,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability," the pads on the canvas.; 9.3.6 Making a Pad Transparent; As we will see in the paragraph “Fill Attributes”, a fill style (type of hatching) may be set for a pad.; root[] pad1->SetFillStyle(istyle); This is done with the SetFillStyle method where istyle is a style number, defined in “Fill Attributes”. A special set of styles allows handling of various levels of transparency. These are styles number 4000 to 4100, 4000 being fully transparent and 4100 fully opaque. So, suppose you have an existing canvas with several pads. You create a new pad (transparent) covering for example the entire canvas. Then you draw your primitives in this pad. The same can be achieved with the graphics editor. For example:; root[] .x tutorials/hist/h1draw.C; root[] TPad *newpad=new TPad(""newpad"",""Transparent pad"",0,0,1,1);; root[] newpad->SetFillStyle(4000);; root[] newpad->Draw();; root[] newpad->cd();; root[] // create some primitives, etc; 9.3.7 Setting the Log Scale; Setting the scale to logarithmic or linear is an attribute of the pad, not the axis or the histogram. The scale is an attribute of the pad because you may want to draw the same histogram in linear scale in one pad and in log scale in another pad. Frequently, we see several histograms on top of each other in the same pad. It would be very inconvenient to set the scale attribute for each histogram in a pad.; Furthermore, if the logic was set in the histogram class (or each object) the scale setting in each Paint method of all objects should be tested.; If you have a pad with a histogram, a right-click on the pad, outside of the histograms frame will convince you. The SetLogx(), SetLogy() and SetLogz() methods are there. As you see, TPad defines log scale for the two directions x and y plus z if you want to draw a 3D representation of some function or histogram.; The way to set log scale in the x direction for the active pad is:; root[] gPad->SetLogx(1); To reset log in the z direction:; root[] gPad->SetLogz(0); If you have a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:316657,Log,Log,316657,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,2,"['Log', 'log']","['Log', 'logarithmic']"
Testability," the record). Option compress is used to specify the compression level:; compress = 0 objects written to this file will not be compressed.; compress = 1 minimal compression level but fast. compress = 9 maximal compression level but slow. Note that the compression level may be changed at any time.; The new compression level will only apply to newly written objects.; The function TFile::Map() shows the compression factor; for each object written to this file.; The function TFile::GetCompressionFactor returns the global; compression factor for this file. In case the file does not exist or is not a valid ROOT file,; it is made a Zombie. One can detect this situation with a code like:; TFile f(""file.root"");; if (f.IsZombie()) {; cout << ""Error opening file"" << endl;; exit(-1);; }. When opening the file, the system checks the validity of this directory.; If something wrong is detected, an automatic Recovery is performed. In; this case, the file is scanned sequentially reading all logical blocks; and attempting to rebuild a correct directory (see TFile::Recover).; One can disable the automatic recovery procedure when reading one; or more files by setting the environment variable ""TFile::Recover 0""; in the system.rootrc file. TFile(const TFile& ); TFile objects can not be copied. ~TFile(); File destructor. void Init(Bool_t create); Initialize a TFile object.; TFile implementations providing asynchronous open functionality need to; override this method to run the appropriate checks before calling this; standard initialization part. See TXNetFile::Init for an example. void Close(Option_t* option = """"); Close a file.; If option == ""R"", all TProcessIDs referenced by this file are deleted.; Calling TFile::Close(""R"") might be necessary in case one reads a long list; of files having TRef, writing some of the referenced objects or TRef; to a new file. If the TRef or referenced objects of the file being closed; will not be referenced again, it is possible to minimize the size; of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFile.html:26201,log,logical,26201,root/html528/TFile.html,https://root.cern,https://root.cern/root/html528/TFile.html,1,['log'],['logical']
Testability," the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Int_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Long64_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, Long_t &value);  Get the value from the specified parameter from the specified collection. ;  ; static Int_t GetParameter (TCollection *c, const char *par, TString &value);  Get the value from the specified parameter from the specified collection. ;  ; static void LogViewer (const char *url=0, Int_t sessionidx=0);  Start the log viewer window usign the plugin manager. ;  ; static TProofMgr * Mgr (const char *url);  Get instance of the effective manager for 'url' Return 0 on failure. ;  ; static TProof * Open (const char *url=0, const char *conffile=0, const char *confdir=0, Int_t loglevel=0);  Start a PROOF session on a specific cluster. ;  ; static void Reset (const char *url, Bool_t hard=kFALSE);  Wrapper around TProofMgr::Reset(...). ;  ; static void ResetEnvVars ();  Clear the list of environment variables passed to proofserv on the master and slaves. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:34176,log,loglevel,34176,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,4,['log'],['loglevel']
Testability," the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. void SetupBasicUsage(). void SetLeftSideTailFraction(Double_t a). MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the Markov chain; By default all the parameters are stored. { fChainParams.removeAll(); fChainParams.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetConditionalObservables(const RooArgSet& set); set the conditional observables which will be used when creating the NLL; so the pdf's will not be normalized on the conditiona",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__MCMCCalculator.html:9382,test,test,9382,root/html534/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__MCMCCalculator.html,3,['test'],['test']
Testability," the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. void SetupBasicUsage(). void SetLeftSideTailFraction(Double_t a). MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetChainParameters(const RooArgSet& set); specify the parameters to store in the Markov chain; By default all the parameters are stored. { fChainParams.removeAll(); fChainParams.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStats__MCMCCalculator.html:9253,test,test,9253,root/html532/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html532/RooStats__MCMCCalculator.html,1,['test'],['test']
Testability," the workspace); RooAbsPdf*fPriorPdfpointer to prior PDF (owned by the workspace); RooStats::ProposalFunction*fPropFuncProposal function for MCMC integration; Double_tfSizesize of the test (eg. specified rate of Type I error); TStringTNamed::fTitleobject title; Bool_tfUseKeyswhether to use kernel estimation to determine interval; Bool_tfUseSparseHistwhether to use sparse histogram (if using hist at all). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MCMCCalculator(). MCMCCalculator(RooAbsData& data, const RooStats::ModelConfig& model). void SetModel(const RooStats::ModelConfig& model); set the model. void SetupBasicUsage(). void SetLeftSideTailFraction(Double_t a). MCMCInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval. MCMCCalculator(); default constructor. virtual ~MCMCCalculator(); {}. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& data); Set the DataSet if not already there. { fData = &data; }. void SetPdf(RooAbsPdf& pdf); Set the Pdf if not already there. { fPdf = &pdf; }. void SetPriorPdf(RooAbsPdf& pdf); Set the Prior Pdf if not already there. { fPriorPdf = &pdf; }. void SetParameters(const RooArgSet& set); specify the parameters of interest in the interval. { fPOI.removeAll(); fPOI.add(set); }. void SetNuisanceParameters(const RooArgSet& set); specify the nuisance parameters (eg. the rest of the parameters). {fNuisParams.removeAll(); fNuisParams.add(set);}. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). {fSize = size;}. void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). {fSize = 1.-cl;}. void SetProposalFunction(RooStats::ProposalFunction& proposalFunction); set the proposal functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__MCMCCalculator.html:9024,test,test,9024,root/html528/RooStats__MCMCCalculator.html,https://root.cern,https://root.cern/root/html528/RooStats__MCMCCalculator.html,2,['test'],['test']
Testability," the; 979 // initialization order is (by default?) is 'wrong' and so we can't; 980 // delete the interpreter now .. because any of the static in the; 981 // interpreter's library have already been deleted.; 982 // On the link line, we must list the most dependent .o file; 983 // and end with the least dependent (LLVM libraries), unfortunately,; 984 // Fedora Core 17+ or Ubuntu 12 will also execute the initialization; 985 // in the same order (hence doing libCore's before LLVM's and; 986 // vice et versa for both the destructor. We worked around the; 987 // initialization order by delay the TROOT creation until first use.; 988 // We can not do the same for destruction as we have no way of knowing; 989 // the last access ...; 990 // So for now, let's avoid delete TCling except in the special build; 991 // checking the completeness of the termination deletion.; 992 ; 993 // TODO: Should we do more cleanup here than just call delete?; 994 // Segfaults rootcling in some cases, debug and uncomment:; 995 //; 996 // delete fInterpreter;; 997 ; 998 // We cannot delete fCleanups because of the logic in atexit which needs it.; 999 SafeDelete(fCleanups);; 1000#endif; 1001 ; 1002#ifdef _MSC_VER; 1003 // usedToIdentifyRootClingByDlSym is available when TROOT is part of rootcling.; 1004 if (dlsym(RTLD_DEFAULT, ""usedToIdentifyRootClingByDlSym"")) {; 1005 // deleting the interpreter makes things crash at exit in some cases; 1006 delete fInterpreter;; 1007 }; 1008#else; 1009 // deleting the interpreter makes things crash at exit in some cases; 1010 delete fInterpreter;; 1011#endif; 1012 ; 1013 // Prints memory stats; 1014 TStorage::PrintStatistics();; 1015 ; 1016 gROOTLocal = nullptr;; 1017 fgRootInit = kFALSE;; 1018 }; 1019}; 1020 ; 1021////////////////////////////////////////////////////////////////////////////////; 1022/// Add a class to the list and map of classes.; 1023/// This routine is deprecated, use TClass::AddClass directly.; 1024 ; 1025void TROOT::AddClass(TClass *cl); 1026",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:39670,log,logic,39670,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['log'],['logic']
Testability," the; status of which will be modified at once.; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). Int_t ModifyWorkerLists(const char* ord, Bool_t add); Modify the worker active/inactive list by making the worker identified by; the ordinal number 'ord' active (add == TRUE) or inactive (add == FALSE).; The string 'ord' can also be a comma-separated list of ordinal numbers the; status of which will be modified at once.; If needed, the request will be forwarded to the master in direct contact; with the worker. The end-master will move the worker from one list to the; other active and rebuild the list of unique active workers.; Use ord = ""*"" to deactivate all active workers.; Return <0 if something went wrong (-2 if at least one worker was not found); or the number of workers with status change (on master; 0 on client). TProof * Open(const char* url = 0, const char* conffile = 0, const char* confdir = 0, Int_t loglevel = 0); Start a PROOF session on a specific cluster. If cluster is 0 (the; default) then the PROOF Session Viewer GUI pops up and 0 is returned.; If cluster is ""lite://"" we start a PROOF-lite session.; If cluster is """" (empty string) then we connect to the cluster specified; by 'Proof.LocalDefault', defaulting to ""lite://"".; If cluster is ""pod://"" (case insensitive), then we connect to a PROOF cluster; managed by PROOF on Demand (PoD, http://pod.gsi.de ).; Via conffile a specific PROOF config file in the confir directory can be specified.; Use loglevel to set the default loging level for debugging.; The appropriate instance of TProofMgr is created, if not; yet existing. The instantiated TProof object is returned.; Use TProof::cd() to switch between PROOF sessions.; For more info on PROOF see the TProof ctor. TProofMgr * Mgr(const char* url); Get instance of the effective manager for 'url'; Return 0 on failure. void Reset(const char* url, Bool_t hard = kFALSE); W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:85964,log,loglevel,85964,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['log'],['loglevel']
Testability," these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t ); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test statistic was constructed with; a range specification on the data, the cloneData argument is ignore and; the data is always cloned. RooAbsData& data(). const RooAbsData& data() const. RooAbsReal& function(); { return *_funcClone ; }. const RooAbsReal& function() const; { return *_funcClone ; }. const char* cacheUniqueSuffix() const; { return Form(""_%lx"", (ULong_t)_dataClone) ; }. Bool_t isDerived() const; Override this to be always true to force calculation of likelihood without parameters. { return kTRUE ; }. void seal(const char* notice = """"); { _sealed = kTRUE ; _sealNotice = notice ; }. Bool_t isSealed() const; { return _sealed ; }. const char* sealNotice() const; { return _sealNotice.Data() ; }. Bool_t allowFunctionCache(); { return kTRUE ; }. RooArgSet requiredExtraObservables() const; { return RooArgSet() ; }. » Last changed: Mon Jul 4 15:21:25 2011 » Last generated: 2011-07-04 15:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsOptTestStatistic.html:38678,test,test,38678,root/html530/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html530/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability," this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooPolynomial.html:36632,test,testArg,36632,doc/master/classRooPolynomial.html,https://root.cern,https://root.cern/doc/master/classRooPolynomial.html,3,"['Test', 'test']","['Test', 'testArg']"
Testability," this case compiler may output the name of the dictionary file; 3738 // and of the fakeMain file while it compiles it. (this would be useless; 3739 // confusing output).; 3740 // We could also the fake main routine to the end of the dictionary file; 3741 // however compilation would fail if a main is already there; 3742 // (like stress.cxx); 3743 // dict.Append("" "").Append(fakeMain);; 3744 TString exec;; 3745 AssignAndDelete( exec, ConcatFileName( build_loc, libname ) );; 3746 exec += ""_ACLiC_exec"";; 3747 testcmd.ReplaceAll(""$SourceFiles"",""-D__ACLIC__ \""$SourceFiles\"""");; 3748 testcmd.ReplaceAll(""$SourceFiles"",dict);; 3749 testcmd.ReplaceAll(""$ObjectFiles"",""\""$ObjectFiles\"""");; 3750 testcmd.ReplaceAll(""$ObjectFiles"",dictObj);; 3751 testcmd.ReplaceAll(""$IncludePath"",includes);; 3752 testcmd.ReplaceAll(""$ExeName"",exec);; 3753 testcmd.ReplaceAll(""$LinkedLibs"",linkLibraries);; 3754 testcmd.ReplaceAll(""$BuildDir"",build_loc);; 3755 if (mode==kDebug); 3756 testcmd.ReplaceAll(""$Opt"",fFlagsDebug);; 3757 else; 3758 testcmd.ReplaceAll(""$Opt"",fFlagsOpt);; 3759 ; 3760#ifdef WIN32; 3761 R__FixLink(testcmd);; 3762 testcmd.ReplaceAll(""-std="", ""-std:"");; 3763#endif; 3764 ; 3765 // ======= Build the library; 3766 if (result) {; 3767 TString cmdAllowUnresolved = cmd;; 3768#ifdef R__MACOSX; 3769 // Allow linking to succeed despite the missing symbols.; 3770 cmdAllowUnresolved.ReplaceAll(""-dynamiclib"", ""-dynamiclib -Wl,-w -Wl,-undefined,dynamic_lookup"");; 3771#endif; 3772 if (verboseLevel > 3 && withInfo) {; 3773 ::Info(""ACLiC"",""compiling the dictionary and script files"");; 3774 if (verboseLevel>4); 3775 ::Info(""ACLiC"", ""%s"", cmdAllowUnresolved.Data());; 3776 }; 3777 Int_t success = ExecAndReport(cmdAllowUnresolved);; 3778 if (!success) {; 3779 if (produceRootmap) {; 3780 gSystem->Unlink(libmapfilename);; 3781 }; 3782 }; 3783 result = success;; 3784 }; 3785 ; 3786 if ( result ) {; 3787 if (linkDepLibraries) {; 3788 // We may have unresolved symbols. Use dyld to resolve the dependent; 378",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:127696,test,testcmd,127696,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['test'],['testcmd']
Testability," this class ; Definition at line 106 of file LogInterval.h. ◆ DeclFileName(). static const char * TMVA::LogInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 106 of file LogInterval.h. ◆ GetElement(). Double_t TMVA::LogInterval::GetElement ; (; Int_t ; bin); const. virtual . calculates the value of the ""number"" bin in a discrete interval. ; Parameters:; Double_t position . Reimplemented from TMVA::Interval.; Definition at line 113 of file LogInterval.cxx. ◆ GetMax(). virtual Double_t TMVA::LogInterval::GetMax ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 93 of file LogInterval.h. ◆ GetMean(). Double_t TMVA::LogInterval::GetMean ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 158 of file LogInterval.cxx. ◆ GetMin(). virtual Double_t TMVA::LogInterval::GetMin ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 92 of file LogInterval.h. ◆ GetNbins(). virtual Int_t TMVA::LogInterval::GetNbins ; (; ); const. inlinevirtual . Reimplemented from TMVA::Interval.; Definition at line 95 of file LogInterval.h. ◆ GetRndm(). Double_t TMVA::LogInterval::GetRndm ; (; TRandom3 & ; rnd); const. virtual . get uniformly distributed number within interval ; Reimplemented from TMVA::Interval.; Definition at line 144 of file LogInterval.cxx. ◆ GetStepSize(). Double_t TMVA::LogInterval::GetStepSize ; (; Int_t ; iBin = 0); const. virtual . returns the step size between the numbers of a ""discrete LogInterval"" ; Reimplemented from TMVA::Interval.; Definition at line 129 of file LogInterval.cxx. ◆ GetWidth(). Double_t TMVA::LogInterval::GetWidth ; (; ); const. virtual . Reimplemented from TMVA::Interval.; Definition at line 151 of file LogInterval.cxx. ◆ IsA(). virtual TClass * TMVA::LogInterval::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::Interval.; Definition",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1LogInterval.html:5271,Log,LogInterval,5271,doc/master/classTMVA_1_1LogInterval.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1LogInterval.html,1,['Log'],['LogInterval']
Testability," this even for training+testing together.; 1594 // what should this have been good for ???; 1595 ; 1596 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""Weight renormalisation mode: \""EqualNumEvents\"": renormalises all event classes ..."" << Endl;; 1597 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" such that the effective (weighted) number of events in each class is the same "" << Endl;; 1598 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" (and equals the number of events (entries) given for class=0 )"" << Endl;; 1599 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... i.e. such that Sum[i=1..N_j]{w_i} = N_classA, j=classA, classB, ..."" << Endl;; 1600 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << ""... (note that N_j is the sum of TRAINING events"" << Endl;; 1601 Log() << kINFO << Form(""Dataset[%s] : "",dsi.GetName()) << "" ..... Testing events are not renormalised nor included in the renormalisation factor!)"" << Endl;; 1602 ; 1603 // normalize to size of first class; 1604 UInt_t referenceClass = 0;; 1605 for (UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls < clsEnd; ++cls ) {; 1606 renormFactor.at(cls) = Float_t(trainingSizePerClass.at(referenceClass))/; 1607 (trainingSumWeightsPerClass.at(cls));; 1608 }; 1609 }; 1610 else {; 1611 Log() << kFATAL << Form(""Dataset[%s] : "",dsi.GetName())<< ""<PrepareForTrainingAndTesting> Unknown NormMode: "" << normMode << Endl;; 1612 }; 1613 ; 1614 // ---------------------------------; 1615 // now apply the normalization factors; 1616 Int_t maxL = dsi.GetClassNameMaxLength();; 1617 for (UInt_t cls = 0, clsEnd = dsi.GetNClasses(); cls<clsEnd; ++cls) {; 1618 Log() << kDEBUG //<< Form(""Dataset[%s] : "",dsi.GetName()); 1619 << ""--> Rescale "" << setiosflags(ios::left) << std::setw(maxL); 1620 << dsi.GetClassInfo(cls)->GetName() << "" event weights by factor: "" << renormFactor.at(cls) << Endl;; 1621 for (EventVector::iterator it = tmpEventVector[Types::kTraining].at(cls).begin(),; 1622 itEn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:74451,Test,Testing,74451,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Test'],['Testing']
Testability," times.; 1854/// Then, Brent's method is applied on the bracketed interval; 1855/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1856/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1857/// of iteration of the Brent algorithm; 1858/// If the flag logx is set the grid search is done in log step size; 1859/// This is done automatically if the log scale is set in the current Pad; 1860///; 1861/// NOTE: see also TF1::GetMaximumX, TF1::GetMinimumX; 1862 ; 1863Double_t TF1::GetX(Double_t fy, Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1864{; 1865 if (xmin >= xmax) {; 1866 xmin = fXmin;; 1867 xmax = fXmax;; 1868 }; 1869 ; 1870 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1871 ; 1872 GFunc g(this, fy);; 1873 ROOT::Math::WrappedFunction<GFunc> wf1(g);; 1874 ROOT::Math::BrentRootFinder brf;; 1875 brf.SetFunction(wf1, xmin, xmax);; 1876 brf.SetNpx(fNpx);; 1877 brf.SetLogScan(logx);; 1878 bool ret = brf.Solve(maxiter, epsilon, epsilon);; 1879 if (!ret) Error(""GetX"",""[%f,%f] is not a valid interval"",xmin,xmax);; 1880 return (ret) ? brf.Root() : TMath::QuietNaN();; 1881}; 1882 ; 1883////////////////////////////////////////////////////////////////////////////////; 1884/// Return the number of degrees of freedom in the fit; 1885/// the fNDF parameter has been previously computed during a fit.; 1886/// The number of degrees of freedom corresponds to the number of points; 1887/// used in the fit minus the number of free parameters.; 1888 ; 1889Int_t TF1::GetNDF() const; 1890{; 1891 Int_t npar = GetNpar();; 1892 if (fNDF == 0 && (fNpfits > npar)) return fNpfits - npar;; 1893 return fNDF;; 1894}; 1895 ; 1896 ; 1897////////////////////////////////////////////////////////////////////////////////; 1898/// Return the number of free parameters; 1899 ; 1900Int_t TF1::GetNumberFreeParameters() const; 1901{; 1902 Int_t ntot = GetNpar();; 1903 Int_t nfree = ntot;; 1904 Double_t al, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:69098,log,logx,69098,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability," title = """")MENU ; voidRooAbsArg::setTransientAttribute(const Text_t* name, Bool_t value = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); voidRooAbsReal::setUnit(const char* unit); virtual voidsetVal(Double_t value); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); virtual Double_tRooAbsRealLValue::volume(const char* rangeName) const; virtual Double_tRooAbsRealLValue::volume(const RooAbsBinning& binning) const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidwriteToStream(ostream& os, Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooErrorVar.html:30480,Test,TestBits,30480,root/html602/RooErrorVar.html,https://root.cern,https://root.cern/root/html602/RooErrorVar.html,6,['Test'],['TestBits']
Testability," to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; Double_t AdaBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaBoost implementation. ;  ; Double_t AdaBoostR2 (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Adaption of the AdaBoost to regression problems (see H.Drucker 1997). ;  ; Double_t AdaCost (std::vector< const TMVA::Event * > &, DecisionTree *dt);  The AdaCost boosting algorithm takes a simple cost Matrix (currently fixed for all events... later could be modified to use individual cost matrices for each events as in the original paper... ;  ; Double_t ApplyPreselectionCuts (const Event *ev);  Apply the preselection cuts before even bothering about any Decision Trees in the GetMVA . ;  ; Double_t Bagging ();  Call it boot-strapping, re-sampling or whatever you like, in the end it is nothing else but applying ""random"" poisson weights to each event. ;  ; void BoostMonitor (Int_t iTree);  Fills the ROCIntegral vs Itree from the testSample for the monitoring plots during the training . ;  ; void DeterminePreselectionCuts (const std::vector< const TMVA::Event * > &eventSample);  Find useful preselection cuts that will be applied before and Decision Tree training. ;  ; void GetBaggedSubSample (std::vector< const TMVA::Event * > &);  Fills fEventSample with fBaggedSampleFraction*NEvents random training events. ;  ; Double_t GetGradBoostMVA (const TMVA::Event *e, UInt_t nTrees);  Returns MVA value: -1 for background, 1 for signal. ;  ; Double_t GetMvaValue (Double_t *err, Double_t *errUpper, UInt_t useNTrees);  Return the MVA value (range [-1;1]) that classifies the event according to the majority vote from the total number of decision trees. ;  ; Double_t GradBoost (std::vector< const TMVA::Event * > &, DecisionTree *dt, UInt_t cls=0);  Calculate the desired response value for each region. ;  ; Double_t GradBoostRegression (std::vector< const TMVA::Event * > &, DecisionTree *dt);  Implementation of M_T",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html:31929,test,testSample,31929,doc/master/classTMVA_1_1MethodBDT.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodBDT.html,1,['test'],['testSample']
Testability," to TFileMerger) Special 'option' values for backward compatibility: """" equivalent to ""M"" ""LOCAL"" equivalent to ""ML"" or ""L"" ; Definition at line 68 of file TProofOutputFile.cxx. ◆ TProofOutputFile() [4/4]. TProofOutputFile::TProofOutputFile ; (; const char * ; path, . ERunType ; type, . UInt_t ; opt = kRemote, . const char * ; dsname = 0 . ). Main constructor. ; Definition at line 40 of file TProofOutputFile.cxx. ◆ ~TProofOutputFile(). TProofOutputFile::~TProofOutputFile ; (; ). override . Main destructor. ; Definition at line 232 of file TProofOutputFile.cxx. Member Function Documentation. ◆ AddFile(). void TProofOutputFile::AddFile ; (; TFileMerger * ; merger, . const char * ; path . ). private . Add file to merger, checking the result. ; Definition at line 467 of file TProofOutputFile.cxx. ◆ AdoptFile(). Int_t TProofOutputFile::AdoptFile ; (; TFile * ; f). Adopt a file already open. ; Return 0 if OK, -1 in case of failure ; Definition at line 274 of file TProofOutputFile.cxx. ◆ AssertDir(). Int_t TProofOutputFile::AssertDir ; (; const char * ; dirpath). static . Assert directory path 'dirpath', with the ownership of the last already existing subpath. ; Return 0 on success, -1 on error ; Definition at line 515 of file TProofOutputFile.cxx. ◆ Class(). static TClass * TProofOutputFile::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofOutputFile::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofOutputFile::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 124 of file TProofOutputFile.h. ◆ DeclFileName(). static const char * TProofOutputFile::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 124 of file TProofOutputFile.h. ◆ GetDir(). const char * TProofOutputFile::GetDir ; (; Bool_t ; raw = kFALSE); const. inline . Definition at line 96 of file TPro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofOutputFile.html:16534,Assert,AssertDir,16534,doc/master/classTProofOutputFile.html,https://root.cern,https://root.cern/doc/master/classTProofOutputFile.html,1,['Assert'],['AssertDir']
Testability," to add histogram files This macro is kept for didactical purposes only: use instead the executable $ROOTSYS/bin/hadd ! ;  importCode.C Example of script showing how to create a ROOT file with subdirectories ;  loopdir.C Example of script to loop on all the objects of a ROOT file directory and print on Postscript all TH1 derived objects ;  mergeSelective.C Merge only part of the content of a set of files ;  readCode.C Example of script showing how to navigate in a ROOT file with sub-directories and read the objects in each sub-directory ;  testMergeCont.C Macro demonstrating the merging of containers ;  ► math;  Bessel.C Show the different kinds of Bessel functions available in ROOT To execute the macro type in: ;  binomial.C tutorial illustrating the use of TMath::Binomial can be run with: ;  ChebyshevPol.C Example of Chebyshev polynomials using new TFormula pre-defined definitions of chebyshev polynomials ;  chi2test.C Example to use chi2 test for comparing two histograms One unweighted histogram is compared with a weighted histogram ;  CrystalBall.C Example of CrystalBall Function and its distribution (pdf and cdf) ;  exampleFunctor.C Tutorial illustrating how creating a TF1 class using functor or class member functions ;  exampleMultiRoot.C Example of using multiroot finder based on GSL algorithm ;  exampleTKDE.C Example of using the TKDE class (kernel density estimator) ;  FeldmanCousins.C Example macro of using the TFeldmanCousins class in root ;  GammaFun.C Example showing the usage of the major special math functions (gamma, beta, erf) in ROOT To execute the macro type in: ;  goftest.C GoFTest tutorial macro ;  kdTreeBinning.C kdTreeBinning tutorial: bin the data in cells of equal content using a kd-tree ;  Legendre.C Example of first few Legendre Polynomials ;  LegendreAssoc.C Example describing the usage of different kinds of Associate Legendre Polynomials To execute the macro type in: ;  limit.C This program demonstrates the computation of 95 % C.L ;  mat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:127393,test,test,127393,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['test'],['test']
Testability," to be included, and thus its `sqrt()`; 66// overloads have been declared.; 67// The trick is to keep sqrt() dependent (on its argument type) by making it; 68// an unqualified name. The `std::` of `std::sqrt()` makes it a qualified; 69// name, so the code here has to use `sqrt()`, not `std::sqrt()`. To still; 70// find `std::sqrt()` we pull `std::sqrt()` into the surrounding namespace.; 71//; 72// We don't want to use 'using namespace std' because it would pollute the including headers.; 73using std::atan2;; 74using std::cos;; 75using std::cosh;; 76using std::exp;; 77using std::floor;; 78using std::log;; 79using std::pow;; 80using std::sin;; 81using std::sinh;; 82using std::sqrt;; 83using std::tan;; 84 ; 85/**; 86 Mathematical constants; 87*/; 88inline double Pi(); 89{; 90 return M_PI;; 91 }; 92 ; 93 /**; 94 declarations for functions which are not implemented by some compilers; 95 */; 96 ; 97 /// log(1+x) with error cancelation when x is small; 98 inline double log1p(double x); 99 {; 100#ifndef HAVE_NO_LOG1P; 101 return ::log1p(x);; 102#else; 103 // if log1p is not in c math library; 104 volatile double y;; 105 y = 1 + x;; 106 return std::log(y) - ((y-1)-x)/y ; /* cancels errors with IEEE arithmetic */; 107#endif; 108}; 109/// exp(x) -1 with error cancellation when x is small; 110inline double expm1( double x) {; 111#ifndef HAVE_NO_EXPM1; 112 return ::expm1(x);; 113#else; 114 // compute using taylor expansion until difference is less than epsilon; 115 // use for values smaller than 0.5 (for larger (exp(x)-1 is fine; 116 if (std::abs(x) < 0.5); 117 {; 118 // taylor series S = x + (1/2!) x^2 + (1/3!) x^3 + ...; 119 ; 120 double i = 1.0;; 121 double sum = x;; 122 double term = x / 1.0;; 123 do {; 124 i++ ;; 125 term *= x/i;; 126 sum += term;; 127 }; 128 while (std::abs(term) > std::abs(sum) * std::numeric_limits<double>::epsilon() ) ;; 129 ; 130 return sum ;; 131 }; 132 else; 133 {; 134 return std::exp(x) - 1;; 135 }; 136#endif; 137}; 138 ; 139 } // end namespace Math;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Math_8h_source.html:2426,log,log,2426,doc/master/Math_8h_source.html,https://root.cern,https://root.cern/doc/master/Math_8h_source.html,3,['log'],['log']
Testability," to calculate upperlimit of a given poi; RooStepFunction Step Function; RooStreamParser Utility class that parses std::iostream data into tokens; RooStringVar String-valued variable; RooStudyManager A general purpose workspace oriented parallelizing study manager; RooStudyPackage A general purpose workspace oriented parallelizing study manager; RooSuperCategory Lvalue product operator for catategory lvalues; RooTFnBinding RooAbsReal binding to ROOT TF[123] functions; RooTFnPdfBinding RooAbsPdf binding to ROOT TF[123] functions; RooTFoamBinding Function binding to RooAbsReal object; RooTObjWrap Container class for Int_t; RooTable Abstract interface for tables; RooThreshEntry Utility class for RooThresholdCategory, holding a threshold/category state pair; RooThresholdCategory Real-to-Category function defined by series of threshold; RooTrace Memory tracer utility for RooFit objects; RooTreeData Dummy class for legacy RooDataSet support; RooTreeDataStore TTree-based Data Storage class; RooTruthModel Truth resolution model (delta function); RooUnblindCPAsymVar CP-Asymmetry unblinding transformation; RooUnblindOffset Offset unblinding transformation; RooUnblindPrecision Precision unblinding transformation; RooUnblindUniform Uniform unblinding transformation; RooUniform Flat PDF in N dimensions; RooUniformBinning Uniform binning specification; RooUnitTest Abstract base class for RooFit/RooStats unit regression tests; RooVectorDataStore STL-vector-based Data Storage class; RooVectorDataStore::CatVector STL-vector-based Data Storage class; RooVectorDataStore::RealFullVector STL-vector-based Data Storage class; RooVectorDataStore::RealVector STL-vector-based Data Storage class; RooVoigtian Voigtian PDF (Gauss (x) BreitWigner); RooWorkspace Persistable project container for (composite) pdfs, functions, variables and datasets; RooWorkspace::CodeRepo Code repository for RooWorkspace; RooWorkspace::WSDir TDirectory representation of RooWorkspace; RooXYChi2Var Chi^2 function of p.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:49080,test,tests,49080,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['test'],['tests']
Testability," to const reference to the model functionDefinition BasicFCN.h:78; ROOT::Fit::LogLikelihoodFCNLogLikelihoodFCN class for likelihood fits.Definition LogLikelihoodFCN.h:40; ROOT::Fit::LogLikelihoodFCN::BaseFunctionBaseObjFunction::BaseFunction BaseFunctionDefinition LogLikelihoodFCN.h:48; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const UnBinData &data, const IModelFunction &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)Constructor from unbin data set and model function (pdf) for object managed by users.Definition LogLikelihoodFCN.h:69; ROOT::Fit::LogLikelihoodFCN::Typevirtual BaseObjFunction::Type_t Type() constget type of fit method functionDefinition LogLikelihoodFCN.h:134; ROOT::Fit::LogLikelihoodFCN::operator=LogLikelihoodFCN & operator=(const LogLikelihoodFCN &rhs)Assignment operator.Definition LogLikelihoodFCN.h:99; ROOT::Fit::LogLikelihoodFCN::DoDerivativevirtual double DoDerivative(const double *x, unsigned int icoord) constDefinition LogLikelihoodFCN.h:161; ROOT::Fit::LogLikelihoodFCN::IModelFunction::ROOT::Math::IParamMultiFunctionTempl< T > IModelFunctionDefinition LogLikelihoodFCN.h:50; ROOT::Fit::LogLikelihoodFCN::fWeightint fWeightflag to indicate if needs to evaluate using weight or weight squared (default weight = 0)Definition LogLikelihoodFCN.h:169; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const LogLikelihoodFCN &f)Copy constructor.Definition LogLikelihoodFCN.h:86; ROOT::Fit::LogLikelihoodFCN::BaseFCNBasicFCN< DerivFunType, ModelFunType, UnBinData > BaseFCNDefinition LogLikelihoodFCN.h:45; ROOT::Fit::LogLikelihoodFCN::TModelFunType::BackendType TDefinition LogLikelihoodFCN.h:44; ROOT::Fit::LogLikelihoodFCN::LogLikelihoodFCNLogLikelihoodFCN(const std::shared_ptr< UnBinData > &data, const std::shared_ptr< IModelFunction > &func, int weight=0, bool extended=false, const ::ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html:9123,Log,LogLikelihoodFCN,9123,doc/master/LogLikelihoodFCN_8h_source.html,https://root.cern,https://root.cern/doc/master/LogLikelihoodFCN_8h_source.html,2,['Log'],['LogLikelihoodFCN']
Testability," to create and edit geometries. The package provides a library of all GUI classes related to geometry. Each editable geometry class TGeoXXX have a correspondent editor TGeoXXXEditor that provides a graphics user interface allowing to edit some (or all) parameters of a geometry object. The editable objects are geometry manager, volumes, nodes, shapes, media, materials and matrices. The interfaces provide also access to specific functionality of geometry objects. The editing mechanism is based on ROOT GED (Graphics Editors) functionality and the library is loaded using the plug-in mechanism.; 18.11.1 Editing a Geometry; There are two different use cases having different ways of invoking the geometry editors. The first one applies when starting with geometry from scratch and using the builder functionality to create new geometry objects. In this case, one should use the sequence:; root[] TGeoManager *geom = new TGeoManager(""MyGeom"",; ""Test builder"");; root[] geom->Edit(Option_t *option="""");; The lines above will create a new TGeoManager class, create an empty canvas and start the editor in the left-sided editor frame attached to the canvas. To open the editor in a separate frame one should provide a non-empty string as option to the Edit() method. The geometry manager editor. 18.11.2 The Geometry Manager Editor; ; The second use case applies when starting to edit an existing geometry. Supposing the geometry was loaded into memory, besides the first method that still applies one can also edit drawn geometry objects. For this, the menu entry View/Editor of the canvas containing for instance a drawn volume must be activated. For starting the volume editor one can click on a volume. The GUI of the TGeoManager class can be started by clicking on the top-right 40x40 pixels corner of the pad with a drawn geometry.; This is the main entry point for editing the geometry or creating new objects. Once the interface is created (using one of the methods described above), several cat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1032914,Test,Test,1032914,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Test'],['Test']
Testability," to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProof.html:60885,log,log,60885,root/html530/TProof.html,https://root.cern,https://root.cern/root/html530/TProof.html,2,['log'],['log']
Testability," to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = 2, TList* workers = 0); Bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProof.html:70137,log,log,70137,root/html534/TProof.html,https://root.cern,https://root.cern/root/html534/TProof.html,1,['log'],['log']
Testability," to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT); Build specifi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:72295,log,log,72295,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['log'],['log']
Testability," to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package 'pack' from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll, Int_t chkveropt = kCheckROOT, TList* workers",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProof.html:72968,log,log,72968,root/html604/TProof.html,https://root.cern,https://root.cern/root/html604/TProof.html,1,['log'],['log']
Testability," to dataset 'dsname'; User is prompt for confirmation, unless kForceClear is ORed with the option. Bool_t Prompt(const char* p); Prompt the question 'p' requiring an answer y,Y,n,N; Return kTRUE is the answer was y or Y, kFALSE in all other cases. void ClearDataProgress(Int_t r, Int_t t); Progress bar for clear data. void ShowCache(Bool_t all = kFALSE); List contents of file cache. If all is true show all caches also on; slaves. If everything is ok all caches are to be the same. void ClearCache(const char* file = 0); Remove file from all file caches. If file is 0 or """" or ""*"", remove all; the files. void SystemCmd(const char* cmd, Int_t fdout); Exec system command 'cmd'. If fdout > -1, append the output to fdout. void ShowPackages(Bool_t all = kFALSE, Bool_t redirlog = kFALSE); List contents of package directory. If all is true show all package; directories also on slaves. If everything is ok all package directories; should be the same. If redir is kTRUE the result is redirected to the log; file (option available for internal actions). void ShowEnabledPackages(Bool_t all = kFALSE); List which packages are enabled. If all is true show enabled packages; for all active slaves. If everything is ok all active slaves should; have the same packages enabled. Int_t ClearPackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t ClearPackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackage(const char* package); Remove a specific package.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackageOnClient(const char* package); Remove a specific package from the client.; Returns 0 in case of success and -1 in case of error. Int_t DisablePackages(); Remove all packages.; Returns 0 in case of success and -1 in case of error. Int_t BuildPackage(const char* package, TProof::EBuildPackageOpt opt = kBuildAll); Build specified package. Executes the PROOF-INF/BU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProof.html:60343,log,log,60343,root/html528/TProof.html,https://root.cern,https://root.cern/root/html528/TProof.html,1,['log'],['log']
Testability," to do so, one must be able to unfold; from the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for; the control variable, independently for each of the various sources of; events, without making use of any a priori knowledge on this; variable. The aim is thus to use the knowledge available for the; discriminating variables to infer the behaviour of the individual; sources of events with respect to the control variable. TSPlot is optimal if the control variable is uncorrelated with the discriminating variables. A detail description of the formalism itself, called ; , is given in [1]. The method. The ; technique is developped in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species; of events. These species represent various signal components and; background components which all together account for the data sample.; The different terms of the log-Likelihood are:. : the total number of events in the data sample,. : the number of species of events populating the data sample,. : the number of events expected on the average for the species,. : the value of the PDFs of the discriminating variables for the species and for event , . : the set of control variables which, by definition, do not appear in the expression of the Likelihood function . The extended log-Likelihood reads:. (1). From this expression, after maximization of with respect to the parameters, a weight can be computed for every event and each species, in order to obtain later the true distribution ; of variable . If is one of the ; species present in the data sample, the weight for this species is defined by:. (2). where . is the covariance matrix resulting from the Likelihood maximization.; This matrix can be used directly from the fit, but this is numerically; less accurate than the direct computation:. (3). The distribution of the control variable  obtained ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSPlot.html:2180,log,log-Likelihood,2180,root/html528/TSPlot.html,https://root.cern,https://root.cern/root/html528/TSPlot.html,4,['log'],['log-Likelihood']
Testability," to do so, one must be able to unfold; from the distribution of the whole data sample.; The TSPlot method allows to reconstruct the distributions for; the control variable, independently for each of the various sources of; events, without making use of any a priori knowledge on this; variable. The aim is thus to use the knowledge available for the; discriminating variables to infer the behaviour of the individual; sources of events with respect to the control variable. TSPlot is optimal if the control variable is uncorrelated with the discriminating variables. A detail description of the formalism itself, called ; , is given in [1]. The method. The ; technique is developped in the above context of a maximum Likelihood method making use of discriminating variables.; One considers a data sample in which are merged several species; of events. These species represent various signal components and; background components which all together account for the data sample.; The different terms of the log-Likelihood are:. : the total number of events in the data sample,. : the number of species of events populating the data sample,. : the number of events expected on the average for the species,. : the value of the PDFs of the discriminating variables for the species and for event ,. : the set of control variables which, by definition, do not appear in the expression of the Likelihood function . The extended log-Likelihood reads:. (1). From this expression, after maximization of with respect to the parameters, a weight can be computed for every event and each species, in order to obtain later the true distribution ; of variable . If is one of the ; species present in the data sample, the weight for this species is defined by:. (2). where . is the covariance matrix resulting from the Likelihood maximization.; This matrix can be used directly from the fit, but this is numerically; less accurate than the direct computation:. (3). The distribution of the control variable  obtained b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSPlot.html:2204,log,log-Likelihood,2204,root/html602/TSPlot.html,https://root.cern,https://root.cern/root/html602/TSPlot.html,2,['log'],['log-Likelihood']
Testability," to draw a TH2Poly as a text plot.](\ref HP20a); 9997 ; 9998void THistPainter::PaintTH2PolyText(Option_t *); 9999{; 10000 ; 10001 TLatex text;; 10002 text.SetTextFont(gStyle->GetTextFont());; 10003 text.SetTextColor(fH->GetMarkerColor());; 10004 text.SetTextSize(0.02*fH->GetMarkerSize());; 10005 ; 10006 Double_t x, y, z, e, angle = 0;; 10007 TString tt, tf;; 10008 tf.Form(""%s%s"",""%"",gStyle->GetPaintTextFormat());; 10009 if (Hoption.Text >= 1000) angle = Hoption.Text%1000;; 10010 Int_t opt = (Int_t)Hoption.Text/1000;; 10011 ; 10012 text.SetTextAlign(22);; 10013 if (Hoption.Text == 1) angle = 0;; 10014 text.SetTextAngle(angle);; 10015 text.TAttText::Modify();; 10016 ; 10017 TH2PolyBin *b;; 10018 ; 10019 TIter next(((TH2Poly*)fH)->GetBins());; 10020 TObject *obj, *p;; 10021 ; 10022 while ((obj=next())) {; 10023 b = (TH2PolyBin*)obj;; 10024 p = b->GetPolygon();; 10025 x = (b->GetXMin()+b->GetXMax())/2;; 10026 if (Hoption.Logx) {; 10027 if (x > 0) x = TMath::Log10(x);; 10028 else continue;; 10029 }; 10030 y = (b->GetYMin()+b->GetYMax())/2;; 10031 if (Hoption.Logy) {; 10032 if (y > 0) y = TMath::Log10(y);; 10033 else continue;; 10034 }; 10035 z = b->GetContent();; 10036 if (z < fH->GetMinimum() || (z == 0 && !Hoption.MinimumZero)) continue;; 10037 if (opt==2) {; 10038 e = fH->GetBinError(b->GetBinNumber());; 10039 tf.Form(""#splitline{%s%s}{#pm %s%s}"",; 10040 ""%"",gStyle->GetPaintTextFormat(),; 10041 ""%"",gStyle->GetPaintTextFormat());; 10042 tt.Form(tf.Data(),z,e);; 10043 } else {; 10044 tt.Form(tf.Data(),z);; 10045 }; 10046 if (opt==3) text.PaintLatex(x,y,angle,0.02*fH->GetMarkerSize(),p->GetName());; 10047 else text.PaintLatex(x,y,angle,0.02*fH->GetMarkerSize(),tt.Data());; 10048 }; 10049 ; 10050 PaintTH2PolyBins(""l"");; 10051}; 10052 ; 10053////////////////////////////////////////////////////////////////////////////////; 10054/// [Control function to draw a 1D/2D histograms with the bin values.](\ref HP15); 10055 ; 10056void THistPainter::PaintText(Option_t *); 10057{; 100",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:360110,Log,Logx,360110,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['Log'],['Logx']
Testability," to generate a ROCCurve instance for a given method.; 742/// Handles the conversion from TMVA ResultSet to a format the ROCCurve class; 743/// understands.; 744///; 745/// \note You own the retured pointer.; 746///; 747 ; 748TMVA::ROCCurve *; 749TMVA::Factory::GetROC(TMVA::DataLoader *loader, TString theMethodName, UInt_t iClass, Types::ETreeType type); 750{; 751 return GetROC((TString)loader->GetName(), theMethodName, iClass, type);; 752}; 753 ; 754////////////////////////////////////////////////////////////////////////////////; 755/// Private method to generate a ROCCurve instance for a given method.; 756/// Handles the conversion from TMVA ResultSet to a format the ROCCurve class; 757/// understands.; 758///; 759/// \note You own the retured pointer.; 760///; 761 ; 762TMVA::ROCCurve *TMVA::Factory::GetROC(TString datasetname, TString theMethodName, UInt_t iClass, Types::ETreeType type); 763{; 764 if (fMethodsMap.find(datasetname) == fMethodsMap.end()) {; 765 Log() << kERROR << Form(""DataSet = %s not found in methods map."", datasetname.Data()) << Endl;; 766 return nullptr;; 767 }; 768 ; 769 if (!this->HasMethod(datasetname, theMethodName)) {; 770 Log() << kERROR << Form(""Method = %s not found with Dataset = %s "", theMethodName.Data(), datasetname.Data()); 771 << Endl;; 772 return nullptr;; 773 }; 774 ; 775 std::set<Types::EAnalysisType> allowedAnalysisTypes = {Types::kClassification, Types::kMulticlass};; 776 if (allowedAnalysisTypes.count(this->fAnalysisType) == 0) {; 777 Log() << kERROR << Form(""Can only generate ROC curves for analysis type kClassification and kMulticlass.""); 778 << Endl;; 779 return nullptr;; 780 }; 781 ; 782 TMVA::MethodBase *method = dynamic_cast<TMVA::MethodBase *>(this->GetMethod(datasetname, theMethodName));; 783 TMVA::DataSet *dataset = method->Data();; 784 dataset->SetCurrentType(type);; 785 TMVA::Results *results = dataset->GetResults(theMethodName, type, this->fAnalysisType);; 786 ; 787 UInt_t nClasses = method->DataInfo().GetNClasses(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:30909,Log,Log,30909,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['Log'],['Log']
Testability," to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". void SetContent(const Double_t* content); -*-*-*-*-*-*Replace bin contents by the contents of array content*-*-*-*. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; see GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); -*-*-*-*-*-*Set the number and values of contour levels*-*-*-*-*-*-*-*-*. By default the number of contour levels is set to 20. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); -*-*-*-*-*-*-*-*-*Set value for one contour level*-*-*-*-*-*-*-*-*-*-*-*. Double_t GetMaximum(Double_t maxval = FLT_MAX) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the maximum value of bins",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:111100,log,log,111100,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,2,['log'],['log']
Testability," to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". void SetContent(const Double_t* content); -*-*-*-*-*-*Replace bin contents by the contents of array content*-*-*-*. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; see GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); Set the number and values of contour levels. By default the number of contour levels is set to 20. The contours values; in the array ""levels"" should be specified in increasing order. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); Set value for one contour level. Double_t GetMaximum(Double_t maxval = FLT_MAX) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the maximum",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH1.html:113682,log,log,113682,root/html532/TH1.html,https://root.cern,https://root.cern/root/html532/TH1.html,2,['log'],['log']
Testability," to have exactly the correct; distribution for binned data.; 2. The user is responsible for seeing to it that the bin widths are; small compared with any physical phenomena of interest.; 3. The effect of binning (if any) is always to make the value of PROB; slightly too big. That is, setting an acceptance criterion of (PROB>0.05; will assure that at most 5% of truly compatible histograms are rejected,; and usually somewhat less."". void SetContent(const Double_t* content); -*-*-*-*-*-*Replace bin contents by the contents of array content*-*-*-*. Int_t GetContour(Double_t* levels = 0); Return contour values into array levels if pointer levels is non zero. The function returns the number of contour levels.; see GetContourLevel to return one contour only. Double_t GetContourLevel(Int_t level) const; Return value of contour number level; see GetContour to return the array of all contour levels. Double_t GetContourLevelPad(Int_t level) const; Return the value of contour number ""level"" in Pad coordinates ie: if the Pad; is in log scale along Z it returns le log of the contour level value.; see GetContour to return the array of all contour levels. void SetBuffer(Int_t buffersize, Option_t* option = """"); set the maximum number of entries to be kept in the buffer. void SetContour(Int_t nlevels, const Double_t* levels = 0); Set the number and values of contour levels. By default the number of contour levels is set to 20. The contours values; in the array ""levels"" should be specify un increasing order. if argument levels = 0 or missing, equidistant contours are computed. void SetContourLevel(Int_t level, Double_t value); Set value for one contour level. Double_t GetMaximum(Double_t maxval = FLT_MAX) const; Return maximum value smaller than maxval of bins in the range,; unless the value has been overridden by TH1::SetMaximum,; in which case it returns that value. (This happens, for example,; when the histogram is drawn and the y or z axis limits are changed. To get the maximum v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH1.html:112876,log,log,112876,root/html530/TH1.html,https://root.cern,https://root.cern/root/html530/TH1.html,2,['log'],['log']
Testability," to listed parameters in likelihood using internal constrains in p.d.f; ExternalConstraints(const RooArgSet& ) -- Include given external constraints to likelihood. Options to control flow of fit procedure. Minimizer(type,algo) -- Choose minimization package and algorithm to use. Default is MINUIT/MIGRAD through the RooMinuit; interface, but others can be specified (through RooMinimizer interface). Type Algorithm; ------ ---------; Minuit migrad, simplex, minimize (=migrad+simplex), migradimproved (=migrad+improve); Minuit2 migrad, simplex, minimize, scan; GSLMultiMin conjugatefr, conjugatepr, bfgs, bfgs2, steepestdescent; GSLSimAn -. InitialHesse(Bool_t flag) -- Flag controls if HESSE before MIGRAD as well, off by default; Optimize(Bool_t flag) -- Activate constant term optimization of test statistic during minimization (on by default); Hesse(Bool_t flag) -- Flag controls if HESSE is run after MIGRAD, on by default; Minos(Bool_t flag) -- Flag controls if MINOS is run after HESSE, on by default; Minos(const RooArgSet& set) -- Only run MINOS on given subset of arguments; Save(Bool_t flag) -- Flac controls if RooFitResult object is produced and returned, off by default; Strategy(Int_t flag) -- Set Minuit strategy (0 through 2, default is 1); FitOptions(const char* optStr) -- Steer fit with classic options string (for backward compatibility). Use of this option; excludes use of any of the new style steering options. SumW2Error(Bool_t flag) -- Apply correaction to errors and covariance matrix using sum-of-weights covariance matrix; to obtain correct error for weighted likelihood fits. If this option is activated the; corrected covariance matrix is calculated as Vcorr = V C-1 V, where V is the original; covariance matrix and C is the inverse of the covariance matrix calculated using the; weights squared. Options to control informational output. Verbose(Bool_t flag) -- Flag controls if verbose output is printed (NLL, parameter changes during fit; Timer(Bool_t flag) -- Time ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:51326,test,test,51326,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,3,['test'],['test']
Testability," to return the image in memory. Tutorials. New tutorial textviewostream.C showing how to use the TGTextViewostream widget. Build, Configuration and Testing Infrastructure. Backport Python3 compatibility of build scripts. New functionalities. Support ARM 64 bits architecture.; Partial support for PPC 64 bits Little Endian architecture.; Add “Optimized” CMAKE_BUILD_TYPE: allow highest level of optimisation of the GCC and Clang compilers (-Ofast).; Support ccache activation with cmake configuration switch.; Support link to jemalloc and tcmalloc allocators.; Careful suppression of known and understood warnings, e.g. coming from external packages. Patch Releases; Release 6.04/02; Platform Support. Added support for Intel icc 15. Build System. Define ROOT_XXX_FLAGS in ROOTConfig.cmake for use by client packages ROOT-7401; Enabled c++14 in CLING when compiling ROOT with c++14 enabled (CMake: -Dcxx14=ON, classic: –enable-cxx14). Dictionary Generation. Uniform style of warnings, use standard ROOT logging facilities rather than cout/cerr.; Do not add as autoparse keys stl classes, stl (nested) containers templated with plain old data or integers. Core. Fixed support for dictionary for class with inlined namespace.; Do not treat Mac OSX’s “cl_kernels” dylinker entry as a library ROOT-7436. TDirectory::TContext. Fixed a thread safety issue in TMVA by updating TDirectory::TContext.; We added a default constructor to TDirectory::TContext which record the current directory and will restore it at destruction time and does not change the current directory.; The constructor for TDirectory::TContext that takes a single TDirectory pointer as an argument was changed to set gDirectory to zero when being passed a null pointer; previously it was interpreting a null pointer as a request to not change the current directory - this behavior is now implement by the default constructor. I/O. Fix the issue described at ROOT-7500 : crash due to change in base class which versioned derived class. Pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v604/release-notes.html:25649,log,logging,25649,doc/v604/release-notes.html,https://root.cern,https://root.cern/doc/v604/release-notes.html,1,['log'],['logging']
Testability," to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code) const; { return fOperOptimized[code] & kTFOperMask; }. void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0). Double_t EvalPar(const Double_t* x, const Double_t* params = 0); {return ((*this).*fOptimal)(x,params);}. Int_t GetNdim() const; {return fNdim;}. Int_t GetNpar() const; {return fNpar;}. Int_t GetNumber() const; {return fNumber;}. Double_t * GetParameters() const; {return fParams;}. void GetParameters(Double_t* params); {for(Int_t i=0;i<fNpar;i++) params[i] = fParams[i];}. Bool_t IsLinear(); {return TestBit(kLinear);}. Bool_t IsNormalized(); {return TestBit(kNormalized);}. void SetNumber(Int_t number); {fNumber = number;}. void Update(); {;}. » Author: Nicolas Brun 19/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TFormula.h 30176 2009-09-15 15:42:11Z pcanal $ » Last generated: 2010-12-10 21:56; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFormula.html:33906,Test,TestBit,33906,root/html528/TFormula.html,https://root.cern,https://root.cern/root/html528/TFormula.html,2,['Test'],['TestBit']
Testability," to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code) const; { return fOperOptimized[code] & kTFOperMask; }. void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0). Double_t EvalPar(const Double_t* x, const Double_t* params = 0); {return ((*this).*fOptimal)(x,params);}. Int_t GetNdim() const; {return fNdim;}. Int_t GetNpar() const; {return fNpar;}. Int_t GetNumber() const; {return fNumber;}. Double_t * GetParameters() const; {return fParams;}. void GetParameters(Double_t* params); {for(Int_t i=0;i<fNpar;i++) params[i] = fParams[i];}. Bool_t IsLinear(); {return TestBit(kLinear);}. Bool_t IsNormalized(); {return TestBit(kNormalized);}. void SetNumber(Int_t number); {fNumber = number;}. void Update(); {;}. » Author: Nicolas Brun 19/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TFormula.h 30176 2009-09-15 15:42:11Z pcanal $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TFormula.html:33975,Test,TestBit,33975,root/html530/TFormula.html,https://root.cern,https://root.cern/root/html530/TFormula.html,2,['Test'],['TestBit']
Testability," to set the maximum value of 3 parameters; -maxop : maximum number of operations; -maxpar : maximum number of parameters; -maxconst : maximum number of constants; None of these parameters cannot be less than 10 (default is 1000); call this function to increase one or all maxima when processing; very complex formula, eg TFormula::SetMaxima(100000,1000,1000000);; If you process many functions with a small number of operations/parameters; you may gain some memory and performance by decreasing these values. Int_t * GetOper() const; { return fOper; }. Short_t GetAction(Int_t code) const; { return fOper[code] >> kTFOperShift; }. Int_t GetActionParam(Int_t code) const; { return fOper[code] & kTFOperMask; }. void SetAction(Int_t code, Int_t value, Int_t param = 0). Int_t * GetOperOptimized() const; { return fOperOptimized; }. Short_t GetActionOptimized(Int_t code) const; { return fOperOptimized[code] >> kTFOperShift; }. Int_t GetActionParamOptimized(Int_t code) const; { return fOperOptimized[code] & kTFOperMask; }. void SetActionOptimized(Int_t code, Int_t value, Int_t param = 0). Double_t EvalPar(const Double_t* x, const Double_t* params = 0); {return ((*this).*fOptimal)(x,params);}. Int_t GetNdim() const; {return fNdim;}. Int_t GetNpar() const; {return fNpar;}. Int_t GetNumber() const; {return fNumber;}. Double_t * GetParameters() const; {return fParams;}. void GetParameters(Double_t* params); {for(Int_t i=0;i<fNpar;i++) params[i] = fParams[i];}. Bool_t IsLinear(); {return TestBit(kLinear);}. Bool_t IsNormalized(); {return TestBit(kNormalized);}. void SetNumber(Int_t number); {fNumber = number;}. void Update(); {;}. » Author: Nicolas Brun 19/08/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TFormula.h 30176 2009-09-15 15:42:11Z pcanal $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TFormula.html:33975,Test,TestBit,33975,root/html532/TFormula.html,https://root.cern,https://root.cern/root/html532/TFormula.html,2,['Test'],['TestBit']
Testability," to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 59 of file RooWrapperPdf.h. ◆ getMaxVal(). Int_t RooWrapperPdf::getMaxVal ; (; const RooArgSet & ; vars); const. inlineoverridevirtual . Get specialised generator. Since the underlying function is not a PDF, this will always return zero. ; Reimplemented from RooAbsReal.; Definition at line 86 of file RooWrapperPdf.h. ◆ IsA(). TClass * RooWrapperPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 117 of file RooWrapperPdf.h. ◆ isBinnedDistribution(). bool RooWrapperPdf::isBinnedDistribution ; (; const RooArgSet & ; ); const. inlineoverridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 97 of file RooWrapperPdf.h. ◆ maxVal(). double RooWrapperPdf::maxVal ; (; Int_t ; code); const. inlineoverridevirtual . Return maximum value for set of observables identified by code assigned in getMaxVal. ; Reimplemented from RooAbsReal.; Definition at line 89 of file RooWrapperPdf.h. ◆ minTrialSamples(). Int_t RooWrapperPdf::minTrialSamples ; (; const RooArgSet & ; arGenObs); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 92 of file RooWrapperPdf.h. ◆ plotSamplingHint(). std::list< double > * RooWrapperPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. inlineoverridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWrapperPdf.html:79755,Test,Tests,79755,doc/master/classRooWrapperPdf.html,https://root.cern,https://root.cern/doc/master/classRooWrapperPdf.html,1,['Test'],['Tests']
Testability," to use Tree friends: ;  treegetval.C Illustrates how to retrieve TTree variables in arrays ;  tv3.C;  tvdemo.C;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  histops.cxx;  histspeedtest.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular expression, often called a pattern, is an expression that describes a set of strings ;  regexp_pme.CClass TPMERegexp - API similar to PME - PCRE Made Easy Tries to be as close as possible to PERL syntax and functionality ;  rootalias.CDefines aliases: ;  rootenv.CProduce a picture of the ROOT environment ;  rootlogoff.CExample of rootlogoff.C ;  rootlogon.CExample of rootlogon.C ;  rootmarks.CPrints a summary of all ROOT benchmarks (must be run before) ;  tasks.CExample of TTasks . ROOT 6.08/07 - Reference Guide Generated on Th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:158575,test,tests,158575,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability," too small. An error message is issued telling to use the option bf().; The number of nodes can be change with n(nodesx, nodesy). Example: h2->Draw(""SPEC n(40,40)"");; Sometimes the displayed region is rather large. When displaying all channels pictures become very dense and complicated. It is very difficult to understand the overall shape of data. ""n(nx,ny)"" allows to change the density of displayed channels. Only the channels coinciding with given nodes are displayed.; The visualization angles can be changed with a(alpha, beta, view). Example: h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");; Alpha defines the angle between bottom horizontal screen line and the displayed space on the right side of the picture and beta on the left side, respectively. One can rotate the 3-d space around vertical axis going through the center of it employing the view parameter. Allowed values are 0, 90, 180 and 270 degrees.; zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() has been set, log scale on Z-axis is set automatically. No need to use the zs() operator. Note that the X and Y axis are always linear.; ci(r,g,b), were r,g and b are floats defines the colors increments. For sophisticated shading (Light, Height and LightHeight Display Modes Groups) the color palette starts from the basic pen color (see pa() function). There is a predefined number of color levels (256). Color in every level is calculated by adding the increments of the r, g, b components to the previous level. Using this function one can change the color increments between two neighbouring color levels. The function does not apply dor the Simple Display Modes Group. The default values are: (1,1,1).; ca(color_algorithm) allows to choose the Color Algorithm. To define the colors one can employ one of the following color algorithms (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches the limit value one can choose either smooth tr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:47131,Log,Log,47131,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Log'],['Log']
Testability," toolbar. void ToggleEditor(); Toggle editor. void ToggleToolTips(); Toggle tooltip display. Bool_t SupportAlpha(); Static function returning ""true"" if transparency is supported.; gPad must exist (otherwise this call has no sense), and; either it's a gl-pad or we are on OS X with --enable-cocoa. void Update(); Update canvas pad buffers. void DisconnectWidget(); Used by friend class TCanvasImp. Bool_t IsGrayscale(); Check whether this canvas is to be drawn in grayscale mode. void SetGrayscale(Bool_t set = kTRUE); Set whether this canvas should be painted in grayscale, and re-paint; it if necessary. void CreatePainter(); Probably, TPadPainter must be placed in a separate ROOT module -; ""padpainter"" (the same as ""histpainter""). But now, it's directly in a; gpad dir, so, in case of default painter, no *.so should be loaded,; no need in plugin managers.; May change in future. TVirtualPadPainter * GetCanvasPainter(); Access and (probably) creation of pad painter. void DeleteCanvasPainter(); assert on IsBatch() == false?. TCanvas(const TCanvas& canvas). TCanvas & operator=(const TCanvas& rhs). void Delete(Option_t* = """"); { MayNotUse(""Delete()""); }. void ForceUpdate(); { fCanvasImp->ForceUpdate(); }. const char * GetDISPLAY() const; {return fDISPLAY.Data();}. TContextMenu * GetContextMenu() const; {return fContextMenu;}. Int_t GetDoubleBuffer() const; {return fDoubleBuffer;}. Int_t GetEvent() const; { return fEvent; }. Int_t GetEventX() const; { return fEventX; }. Int_t GetEventY() const; { return fEventY; }. Color_t GetHighLightColor() const; { return fHighLightColor; }. TVirtualPad * GetPadSave() const; { return fPadSave; }. void ClearPadSave(); { fPadSave = 0; }. TObject * GetSelected() const; {return fSelected;}. TObject * GetClickSelected() const; {return fClickSelected;}. Int_t GetSelectedX() const; {return fSelectedX;}. Int_t GetSelectedY() const; {return fSelectedY;}. Option_t * GetSelectedOpt() const; {return fSelectedOpt.Data();}. TVirtualPad * GetSelectedPad() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCanvas.html:46378,assert,assert,46378,root/html534/TCanvas.html,https://root.cern,https://root.cern/root/html534/TCanvas.html,1,['assert'],['assert']
Testability," top-level p.d.f evaluates to zero"");; 200 ; 201 return -std::numeric_limits<double>::infinity();; 202 }; 203 ; 204 if (TMath::IsNaN(prob)) {; 205 caller->logEvalError(""getLogVal() top-level p.d.f evaluates to NaN"");; 206 ; 207 return prob;; 208 }; 209 ; 210 return std::log(prob);; 211}; 212 ; 213} // namespace; 214 ; 215using std::endl, std::string, std::ostream, std::vector, std::pair, std::make_pair;; 216 ; 217using RooHelpers::getColonSeparatedNameString;; 218 ; 219ClassImp(RooAbsPdf);; 220 ; 221ClassImp(RooAbsPdf::GenSpec);; 222 ; 223 ; 224Int_t RooAbsPdf::_verboseEval = 0;; 225TString RooAbsPdf::_normRangeOverride;; 226 ; 227////////////////////////////////////////////////////////////////////////////////; 228/// Default constructor; 229 ; 230RooAbsPdf::RooAbsPdf() : _normMgr(this, 10) {}; 231 ; 232////////////////////////////////////////////////////////////////////////////////; 233/// Constructor with name and title only; 234 ; 235RooAbsPdf::RooAbsPdf(const char *name, const char *title) :; 236 RooAbsReal(name,title), _normMgr(this,10), _selectComp(true); 237{; 238 resetErrorCounters() ;; 239 setTraceCounter(0) ;; 240}; 241 ; 242 ; 243 ; 244////////////////////////////////////////////////////////////////////////////////; 245/// Constructor with name, title, and plot range; 246 ; 247RooAbsPdf::RooAbsPdf(const char *name, const char *title,; 248 double plotMin, double plotMax) :; 249 RooAbsReal(name,title,plotMin,plotMax), _normMgr(this,10), _selectComp(true); 250{; 251 resetErrorCounters() ;; 252 setTraceCounter(0) ;; 253}; 254 ; 255 ; 256 ; 257////////////////////////////////////////////////////////////////////////////////; 258/// Copy constructor; 259 ; 260RooAbsPdf::RooAbsPdf(const RooAbsPdf& other, const char* name) :; 261 RooAbsReal(other,name),; 262 _normMgr(other._normMgr,this), _selectComp(other._selectComp), _normRange(other._normRange); 263{; 264 resetErrorCounters() ;; 265 setTraceCounter(other._traceCount) ;; 266 ; 267 if (other._specGeneratorConfig)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:8535,log,log,8535,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['log'],['log']
Testability," total sum of squared weights. More...;  ; class  RHistStatTotalSumOfWeights;  Keeps track of the histogram's total sum of weights. More...;  ; class  RHistStatUncertainty;  Histogram statistics to keep track of the Poisson uncertainty per bin. More...;  ; class  RHistView;  A view on a histogram, selecting a range on a subset of dimensions. More...;  ; struct  RHistViewOutOfRange;  ; class  RIndirectDisplayItem;  Extract (reference) only basic attributes from drawable, but not drawable itself. More...;  ; class  RIntegralField;  ; class  RIntegralField< std::int16_t >;  ; class  RIntegralField< std::int32_t >;  ; class  RIntegralField< std::int64_t >;  ; class  RIntegralField< std::int8_t >;  ; class  RIntegralField< std::uint16_t >;  ; class  RIntegralField< std::uint32_t >;  ; class  RIntegralField< std::uint64_t >;  ; class  RIntegralField< std::uint8_t >;  ; class  RInvalidField;  Used in RFieldBase::Check() to record field creation failures. More...;  ; class  RLogChannel;  A log configuration for a channel, e.g. More...;  ; class  RLogDiagCount;  Keep track of emitted errors and warnings. More...;  ; class  RLogEntry;  A diagnostic that can be emitted by the RLogManager. More...;  ; class  RLogHandler;  Abstract RLogHandler base class. More...;  ; struct  RLogLocation;  A diagnostic location, part of an RLogEntry. More...;  ; class  RLogManager;  A RLogHandler that multiplexes diagnostics to different client RLogHandlers and keeps track of the sum of RLogDiagCounts for all channels. More...;  ; class  RLogScopedDiagCount;  Object to count the number of warnings and errors emitted by a section of code, after construction of this type. More...;  ; class  RLogScopedVerbosity;  Change the verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  ; class  RMapField;  Template specializations for C++ std::[unordered_][multi]map. More...;  ; class  RMenuItems;  List of items for object context menu. M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html:16548,log,log,16548,doc/master/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Experimental.html,1,['log'],['log']
Testability," traceEvalPdf(double value) constCheck that passed value is positive and not 'not-a-number'.Definition RooAbsPdf.cxx:384; RooAbsPdf::defaultGeneratorConfigstatic RooNumGenConfig * defaultGeneratorConfig()Returns the default numeric MC generator configuration for all RooAbsReals.Definition RooAbsPdf.cxx:2613; RooAbsPdf::redirectServersHookbool redirectServersHook(const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) overrideThe cache manager.Definition RooAbsPdf.cxx:2768; RooAbsPdf::printValuevoid printValue(std::ostream &os) const overridePrint value of p.d.f, also print normalization integral that was last used, if any.Definition RooAbsPdf.cxx:1081; RooAbsPdf::createNLLImplvirtual std::unique_ptr< RooAbsReal > createNLLImpl(RooAbsData &data, const RooLinkedList &cmdList)Protected implementation of the NLL creation routine.Definition RooAbsPdf.cxx:941; RooAbsPdf::logBatchComputationErrorsvoid logBatchComputationErrors(std::span< const double > &outputs, std::size_t begin) constScan through outputs and fix+log all nans and negative values.Definition RooAbsPdf.cxx:654; RooAbsPdf::genContextvirtual RooAbsGenContext * genContext(const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) constInterface function to create a generator context from a p.d.f.Definition RooAbsPdf.cxx:1127; RooAbsPdf::getLogProbabilitiesvoid getLogProbabilities(std::span< const double > pdfValues, double *output) constDefinition RooAbsPdf.cxx:671; RooAbsPdf::_normRangeOverridestatic TString _normRangeOverrideDefinition RooAbsPdf.h:343; RooAbsPdf::_verboseEvalstatic Int_t _verboseEvalDefinition RooAbsPdf.h:314; RooAbsPdf::extendedTermdouble extendedTerm(double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) constDefinition RooAbsPdf.cxx:730; RooAbsPdf::getGeneratorvirtual Int_t getGenerator(const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:153560,log,logBatchComputationErrorsvoid,153560,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,6,['log'],"['log', 'logBatchComputationErrors', 'logBatchComputationErrorsvoid']"
Testability," tracking geometry. It defines a global pointer gGeoManager in order to be fully accessible from external code. The manager class is the owner of all geometry objects defined in a session; therefore, users must not try to control their deletion. It contains lists of media, materials, transformations, shapes and volumes. A special case is the one of geometrical transformations. When creating a matrix or a translation, this is by default owned by external objects. The manager class becomes owner of all transformations used for positioning volumes. In order to force the ownership for other transformations, one can use TGeoMatrix::RegisterYourself() method. Do not be therefore surprised that some transformations cannot be found by name when creating a composite shape for instance if you did not register them after creation.; Logical nodes (positioned volumes) are created and destroyed by the TGeoVolume class. Physical nodes and their global transformations are subjected to a caching mechanism due to the sometimes very large memory requirements of logical graph expansion. The total number of physical instances of volumes triggers the caching mechanism and the cache manager is a client of TGeoManager. The manager class also controls the drawing/checking package (TGeoPainter client). This is linked with ROOT graphical libraries loaded on demand in order to control visualization actions. Navigation and Tracking; Tracking is the feature allowing the transport of a given particle knowing its kinematics. A state is determined by any combination of the position \(\vec{r}\) and direction \(\vec{n}\) with respect to the world reference frame. The direction \(\vec{n}\) must be a unit vector having as components the director cosines. The full classification of a given state will provide the following information: the deepest physical node containing the position vector, the distance to the closest boundary along the direction vector, the next physical node after propagating the curr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__Geometry.html:64945,log,logical,64945,doc/master/group__Geometry.html,https://root.cern,https://root.cern/doc/master/group__Geometry.html,1,['log'],['logical']
Testability," tracking geometry. It defines a global pointer gGeoManager in order to be fully accessible from external code. The manager class is the owner of all geometry objects defined in a session; therefore, users must not try to control their deletion. It contains lists of media, materials, transformations, shapes and volumes. A special case is the one of geometrical transformations. When creating a matrix or a translation, this is by default owned by external objects. The manager class becomes owner of all transformations used for positioning volumes. In order to force the ownership for other transformations, one can use TGeoMatrix::RegisterYourself() method. Do not be therefore surprised that some transformations cannot be found by name when creating a composite shape for instance if you did not register them after creation.; Logical nodes (positioned volumes) are created and destroyed by the TGeoVolume class. Physical nodes and their global transformations are subjected to a caching mechanism due to the sometimes very large memory requirements of logical graph expansion. The total number of physical instances of volumes triggers the caching mechanism and the cache manager is a client of TGeoManager. The manager class also controls the drawing/checking package (TGeoPainter client). This is linked with ROOT graphical libraries loaded on demand in order to control visualization actions.; 18.5 Navigation and Tracking; Tracking is the feature allowing the transport of a given particle knowing its kinematics. A state is determined by any combination of the position \(\vec{r}\) and direction \(\vec{n}\) with respect to the world reference frame. The direction \(\vec{n}\) must be a unit vector having as components the director cosines. The full classification of a given state will provide the following information: the deepest physical node containing the position vector, the distance to the closest boundary along the direction vector, the next physical node after propagating th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:970011,log,logical,970011,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['log'],['logical']
Testability," tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooHistFunc.html:27012,test,testArg,27012,doc/master/classRooHistFunc.html,https://root.cern,https://root.cern/doc/master/classRooHistFunc.html,6,"['Test', 'test']","['Test', 'testArg']"
Testability," tree"" may have set the variable ""IsTerminal"" to ""arbitrary"" at; any node, hence this tree quality testing will stop there, hence test; the pruned tree (while the full tree is still in place for normal/later use). void CheckEventWithPrunedTree(const TMVA::Event* ) const; pass a single validation event throught a pruned decision tree; on the way down the tree, fill in all the ""intermediate"" information; that would normally be there from training. Double_t GetSumWeights(const TMVA::DecisionTree::EventConstList* validationSample) const; calculate the normalization factor for a pruning validation sample. UInt_t CountLeafNodes(TMVA::Node* n = NULL); return the number of terminal nodes in the sub-tree below Node n. void DescendTree(TMVA::Node* n = NULL); descend a tree to find all its leaf nodes. void PruneNode(TMVA::DecisionTreeNode* node); prune away the subtree below the node. void PruneNodeInPlace(TMVA::DecisionTreeNode* node); prune a node temporaily (without actually deleting its decendants; which allows testing the pruned tree quality for many different; pruning stages without ""touching"" the tree. TMVA::Node* GetNode(ULong_t sequence, UInt_t depth); retrieve node from the tree. Its position (up to a maximal tree depth of 64); is coded as a sequence of left-right moves starting from the root, coded as; 0-1 bit patterns stored in the ""long-integer"" (i.e. 0:left ; 1:right. void GetRandomisedVariables(Bool_t* useVariable, UInt_t* variableMap, UInt_t& nVars). Double_t TrainNodeFast(const TMVA::DecisionTree::EventConstList& eventSample, TMVA::DecisionTreeNode* node); Decide how to split a node using one of the variables that gives; the best separation of signal/background. In order to do this, for each; variable a scan of the different cut values in a grid (grid = fNCuts) is; performed and the resulting separation gains are compared.; in addition to the individual variables, one can also ask for a fisher; discriminant being built out of (some) of the variables and used as",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__DecisionTree.html:12723,test,testing,12723,root/html534/TMVA__DecisionTree.html,https://root.cern,https://root.cern/root/html534/TMVA__DecisionTree.html,1,['test'],['testing']
Testability," ttf );; 374 }; 375 ; 376 //; 377 // the cuts (one per class, if non-existent: formula pointer = 0); 378 //; 379 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform cuts"" << Endl;; 380 for (formIt = fCutFormulas.begin(), formItEnd = fCutFormulas.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 381 fCutFormulas.clear();; 382 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 383 const TCut& tmpCut = dsi.GetClassInfo(clIdx)->GetCut();; 384 const TString tmpCutExp(tmpCut.GetTitle());; 385 ttf = 0;; 386 if (tmpCutExp!="""") {; 387 ttf = new TTreeFormula( Form(""CutClass%i"",clIdx), tmpCutExp, tr );; 388 Bool_t worked = CheckTTreeFormula( ttf, tmpCutExp, hasDollar );; 389 if( !worked ){; 390 Log() << kWARNING << ""Please check class \"""" << dsi.GetClassInfo(clIdx)->GetName(); 391 << ""\"" cut \"""" << dsi.GetClassInfo(clIdx)->GetCut() << Endl;; 392 }; 393 }; 394 fCutFormulas.push_back( ttf );; 395 }; 396 ; 397 //; 398 // the weights (one per class, if non-existent: formula pointer = 0); 399 //; 400 Log() << kDEBUG << Form(""Dataset[%s] : "",dsi.GetName()) << ""transform weights"" << Endl;; 401 for (formIt = fWeightFormula.begin(), formItEnd = fWeightFormula.end(); formIt!=formItEnd; ++formIt) if (*formIt) delete *formIt;; 402 fWeightFormula.clear();; 403 for (UInt_t clIdx=0; clIdx<dsi.GetNClasses(); clIdx++) {; 404 const TString tmpWeight = dsi.GetClassInfo(clIdx)->GetWeight();; 405 ; 406 if (dsi.GetClassInfo(clIdx)->GetName() != tinfo.GetClassName() ) { // if the tree is of another class; 407 fWeightFormula.push_back( 0 );; 408 continue;; 409 }; 410 ; 411 ttf = 0;; 412 if (tmpWeight!="""") {; 413 ttf = new TTreeFormula( ""FormulaWeight"", tmpWeight, tr );; 414 Bool_t worked = CheckTTreeFormula( ttf, tmpWeight, hasDollar );; 415 if( !worked ){; 416 Log() << kWARNING << Form(""Dataset[%s] : "",dsi.GetName()) << ""Please check class \"""" << dsi.GetClassInfo(clIdx)->GetName(); 417 << ""\"" weight \"""" << dsi.GetClassInfo(clIdx)->GetWeight() << Endl;; 418 }; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:16300,Log,Log,16300,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Log'],['Log']
Testability," turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings::cyclevirtual void cycle(double progress, TString text)Definition NeuralNet.h:799; TMVA::DNN::Settings::endTrainCyclevirtual void endTrainCycle(double)callback for monitoring and loggingDefinition NeuralNet.h:788; TMVA::DNN::Settings::dropFractionsconst std::vector< double > & dropFractions() constDefinition NeuralNet.h:762; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x)for monitoringDefinition NeuralNet.h:821; TMVA::DNN::Settings::testSamplevirtual void testSample(double, double, double, double)virtual function to be used for monitoring (callback)Definition NeuralNet.h:781; TMVA::DNN::Settings::plotvoid plot(std::string histoName, std::string options, int pad, EColor color)for monitoringDefinition NeuralNet.h:823; TMVA::DNN::Settings::startTrainCyclevirtual void startTrainCycle()Definition NeuralNet.h:782; TMVA::DNN::Settings::convergenceStepssize_t convergenceSteps() consthow many steps until training is deemed to have convergedDefinition NeuralNet.h:766; TMVA::DNN::Settings::factorWeightDecaydouble factorWeightDecay() constget the weight-decay factorDefinition NeuralNet.h:769; TMVA::DNN::Setti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:67965,log,loggingDefinition,67965,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['log'],['loggingDefinition']
Testability," type of exploding view. void SetNsegments(Int_t nseg = 20); Set number of segments to approximate circles. void SetNmeshPoints(Int_t npoints); Set number of points to be generated on the shape outline when checking for overlaps. void SetCheckedNode(TGeoNode* node); Select a node to be checked for overlaps. All overlaps not involving it will; be ignored. void SetVisLevel(Int_t level = 3); Set default level down to which visualization is performed. void SetTopVisible(Bool_t vis = kTRUE); Set top geometry volume as visible. void SetVisOption(Int_t option = 0); set drawing mode :; option=0 (default) all nodes drawn down to vislevel; option=1 leaves and nodes at vislevel drawn; option=2 path is drawn. Int_t ShapeDistancetoPrimitive(const TGeoShape* shape, Int_t numpoints, Int_t px, Int_t py) const; Returns distance between point px,py on the pad an a shape. void Test(Int_t npoints, Option_t* option); Check time of finding ""Where am I"" for n points. void TestOverlaps(const char* path); --- Geometry overlap checker based on sampling. Bool_t TestVoxels(TGeoVolume* vol); Check voxels efficiency per volume. void UnbombTranslation(const Double_t* tr, Double_t* bombtr); get the new 'unbombed' translation vector according current exploded view mode. Double_t Weight(Double_t precision, Option_t* option = ""v""); Compute weight [kg] of the current volume. TGeoPainter(TGeoManager* manager). void GetBombFactors(Double_t& bombx, Double_t& bomby, Double_t& bombz, Double_t& bombr) const; {bombx=fBombX; bomby=fBombY; bombz=fBombZ; bombr=fBombR;}. Int_t GetBombMode() const; {return fExplodedView;}. TGeoNode * GetCheckedNode(); {return fCheckedNode;}. const char * GetDrawPath() const; {return fVisBranch.Data();}. TGeoVolume * GetTopVolume() const; {return fTopVolume;}. Int_t GetVisLevel() const; {return fVisLevel;}. Int_t GetVisOption() const; {return fVisOption;}. Int_t GetNsegments() const; {return fNsegments;}. Double_t * GetViewBox(); {return &fCheckedBox[0];}. Bool_t IsExplodedView() c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoPainter.html:19931,Test,TestOverlaps,19931,root/html528/TGeoPainter.html,https://root.cern,https://root.cern/root/html528/TGeoPainter.html,6,['Test'],['TestOverlaps']
Testability," type). TString GetTrainingTMVAVersionString() const; calculates the TMVA version string from the training version code on the fly. TString GetTrainingROOTVersionString() const; calculates the ROOT version string from the training version code on the fly. TMVA::MethodBase* GetThisBase(); return a pointer the base class of this method. void ResetThisBase(); reset required for RootFinder. const TMVA::Event* GetEvent(const TMVA::Event* ev) const. const TMVA::Event* GetEvent() const. const TMVA::Event* GetEvent(Long64_t ievt) const. const TMVA::Event* GetEvent(Long64_t ievt, TMVA::Types::ETreeType type) const. const TMVA::Event* GetTrainingEvent(Long64_t ievt) const. const TMVA::Event* GetTestingEvent(Long64_t ievt) const. void Train(). void SetTrainTime(Double_t trainTime); store and retrieve time used for training. { fTrainTime = trainTime; }. Double_t GetTrainTime() const; { return fTrainTime; }. void SetTestTime(Double_t testTime); store and retrieve time used for testing. { fTestTime = testTime; }. Double_t GetTestTime() const; { return fTestTime; }. void Init(); options treatment. void DeclareOptions(). void ProcessOptions(). void Reset(); reset the Method --> As if it was not yet trained, just instantiated; virtual void Reset() = 0;; for the moment, I provide a dummy (that would not work) default, just to make; compilation/running w/o parameter optimisation still possible. {return;}. Double_t GetMvaValue(Double_t* errLower = 0, Double_t* errUpper = 0); classifier response:; some methods may return a per-event error estimate; error calculation is skipped if err==0. const std::vector<Float_t>& GetRegressionValues(); regression response. const std::vector<Float_t>& GetMulticlassValues(); multiclass classification response. const Ranking* CreateRanking(); create ranking. Bool_t MonitorBoost(TMVA::MethodBoost* ); perfrom extra actions during the boosting at different stages. {return kFALSE;}. void AddWeightsXMLTo(void* parent) const; the actual ""weights"". void ReadWeig",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodBase.html:28962,test,testTime,28962,root/html528/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodBase.html,3,['test'],['testTime']
Testability," type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGFrame::SetEditable(Bool_t); virtual voidTGWindow::SetEditDisabled(UInt_t on = kEditDisable); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGFrame::SetLayoutBroken(Bool_t = kTRUE); virtual voidTGWindow::SetMapSubwindows(Bool_t); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPicture(const TGPicture* pic = 0); virtual voidTGFrame::SetSize(const TGDimension& s); voidTGTextLBEntry::SetText(TGString* new_text); virtual voidTGTextLBEntry::SetTitle(const char* text); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TGIconLBEntry(const TGWindow* p = 0, Int_t id = -1, const char* str = 0, const TGPicture* pic = 0, UInt_t w = 0, Style_t s = 0, UInt_t options = kHorizontalFrame, Pixel_t back = GetWhitePixel()); virtual voidTGLBEntry::Toggle(); virtual voidTGFrame::UnmapWindow(); virtual voidUpdate(TGLBEntry* e); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGIconLBEntry.html:13743,Test,TestBit,13743,root/html602/TGIconLBEntry.html,https://root.cern,https://root.cern/root/html602/TGIconLBEntry.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidSetLayoutManager(TGLayoutManager*); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetSelectedItem(TGShutterItem* item); virtual voidSetSelectedItem(const char* name); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGShutter.html:14647,Test,TestBit,14647,root/html528/TGShutter.html,https://root.cern,https://root.cern/root/html528/TGShutter.html,6,['Test'],"['TestBit', 'TestBits']"
Testability," type, UInt_t numberClasses, UInt_t numberTargets);  FDA can handle classification with 2 classes and regression with one regression-target. ;  ; virtual TClass * IsA () const;  ; virtual void ReadWeightsFromStream (std::istream &)=0;  ; void ReadWeightsFromStream (std::istream &istr);  read variable names and min/max NOTE: the latter values are mandatory for the normalisation in the reader application !!! ;  ; virtual void ReadWeightsFromStream (TFile &);  ; void ReadWeightsFromXML (void *wghtnode);  read weights from XML file ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train ();  computes H-matrices for signal and background samples ;  ;  Public Member Functions inherited from TMVA::MethodBase;  MethodBase (const TString &jobName, Types::EMVA methodType, const TString &methodTitle, DataSetInfo &dsi, const TString &theOption="""");  standard constructor ;  ;  MethodBase (Types::EMVA methodType, DataSetInfo &dsi, const TString &weightFile);  constructor used for Testing + Application of the MVA, only (no training), using given WeightFiles ;  ; virtual ~MethodBase ();  destructor ;  ; void AddOutput (Types::ETreeType type, Types::EAnalysisType analysisType);  ; TDirectory * BaseDir () const;  returns the ROOT directory where info/histograms etc of the corresponding MVA method instance are stored ;  ; virtual void CheckSetup ();  check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ;  ; DataSet * Data () const;  ; DataSetInfo & DataInfo () const;  ; virtual void DeclareCompatibilityOptions ();  options that are used ONLY for the READER to ensure backward compatibility they are hence without any effect (the reader is only reading the training options that HAD been used at the training of the .xml weight file at hand ;  ; void DisableWriting (Bool_t setter);  ; Bool_t DoMulticlass () const;  ; Bool_t DoRegression () const;  ; void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html:3013,Test,Testing,3013,doc/master/classTMVA_1_1MethodHMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodHMatrix.html,1,['Test'],['Testing']
Testability," typedef ::ROOT::Math::BasicFitMethodFunction<DerivFunType> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::BaseObjFunction. Definition at line 47 of file LogLikelihoodFCN.h. ◆ IModelFunction. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ::ROOT::Math::IParamMultiFunctionTempl<T> ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::IModelFunction. Definition at line 50 of file LogLikelihoodFCN.h. ◆ T. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:7888,Log,LogLikelihoodFCN,7888,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability," typedef ModelFunType::BackendType ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::T. Definition at line 44 of file LogLikelihoodFCN.h. ◆ Type_t. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . typedef BaseObjFunction::Type_t ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::Type_t. Definition at line 51 of file LogLikelihoodFCN.h. Constructor & Destructor Documentation. ◆ LogLikelihoodFCN() [1/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const std::shared_ptr< UnBinData > & ; data, . const std::shared_ptr< IModelFunction > & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) ; Definition at line 57 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [2/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::LogLikelihoodFCN ; (; const UnBinData & ; data, . const IModelFunction & ; func, . int ; weight = 0, . bool ; extended = false, . const ::ROOT::EExecutionPolicy & ; executionPolicy = ::ROOT::EExecutionPolicy::kSequential . ). inline . Constructor from unbin data set and model function (pdf) for object managed by users. ; Definition at line 69 of file LogLikelihoodFCN.h. ◆ ~LogLikelihoodFCN(). template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . virtual ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >::~LogLikelihoodFCN ; (; ). inlinevirtual . Destructor (no operations) ; Definition at line 81 of file LogLikelihoodFCN.h. ◆ LogLikelihoodFCN() [3/3]. template<class DerivFunType , class ModelFunType = ROOT::Math::IParamMultiFunction> . ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html:8443,Log,LogLikelihoodFCN,8443,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN.html,1,['Log'],['LogLikelihoodFCN']
Testability," uid); voidRooAbsReal::setUnit(const char* unit); voidRooAbsArg::setValueDirty() const; TIterator*RooAbsArg::shapeClientIterator() const; RooFIterRooAbsArg::shapeClientMIterator() const; virtual voidShowMembers(TMemberInspector& insp) const; RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs); RooAbsMoment*RooAbsReal::sigma(RooRealVar& obs, const RooArgSet& nset); virtual Int_tTNamed::Sizeof() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig() const; RooNumGenConfig*RooAbsPdf::specialGeneratorConfig(Bool_t createOnTheFly); RooNumIntConfig*RooAbsReal::specialIntegratorConfig() const; RooNumIntConfig*RooAbsReal::specialIntegratorConfig(Bool_t createOnTheFly); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); const map<string,string>&RooAbsArg::stringAttributes() const; RooAbsPdf*sumPdf(const RooArgSet* nset); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tRooAbsPdf::traceEvalHook(Double_t value) const; Bool_tRooAbsPdf::traceEvalPdf(Double_t value) const; const set<string>&RooAbsArg::transientAttributes() const; voidRooAbsArg::treeNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t doBranch = kTRUE, Bool_t doLeaf = kTRUE, Bool_t valueOnly = kFALSE, Bool_t recurseNonDerived = kFALSE) const; voidRooAbsArg::unRegisterCache(RooAbsCache& cache); virtual voidTObject::UseCurrentStyle(); voiduseHorizontalMorphing(bool val); TIterator*RooAbsArg::valueClientIterator() const; RooFIterRooAbsArg::valueClientMIterator() const; static voidRooAbsArg::verboseDirty(Bool_t flag); static intRooAbsPdf::verboseEval(); static voidRooAbsPdf::verboseEval(Int_t stat); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; voidRooAbsArg::wireAllCaches(); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooMomentMorph.html:31276,Test,TestBits,31276,root/html602/RooMomentMorph.html,https://root.cern,https://root.cern/root/html602/RooMomentMorph.html,2,['Test'],['TestBits']
Testability," underestimate of the closest distance from a point to inner or; outer infinite hyperbolas. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetHypeDimensions(Double_t rin, Double_t stin, Double_t rout, Double_t stout, Double_t dz); Set dimensions of the hyperboloid. void SetDimensions(Double_t* param); Set dimensions of the hyperboloid starting from an array.; param[0] = dz; param[1] = rin; param[2] = stin; param[3] = rout; param[4] = stout. void SetPoints(Double_t* points) const; create tube mesh points. void SetPoints(Float_t* points) const; create tube mesh points. void GetMeshNumbers(Int_t& nvert, Int_t& nsegs, Int_t& npols) const; Returns numbers of vertices, segments and polygons composing the shape mesh. Int_t GetNmeshVertices() const; Return number of vertices of the mesh representation. void Sizeof3D() const; fill size of this 3-D object; TVirtualGeoPainter *painter = gGeoManager->GetGeomPainter();; if (!painter) return;; Int_t n = gGeoManager->GetNsegments();; Int_t numPoints = n*4;; Int_t numSegs = n*8;; Int_t numPolys = n*4;; painter->AddSize3D(numPoints, numSegs, numPolys);. const TBuffer3D & GetBuffer3D(Int_t reqSections, Bool_t localFrame) const; Fills a static 3D buffer and returns a reference. TGeoHype(); constructors. Int_t GetByteCount() const; {return 64;}. Bool_t GetPointsOnSegments(Int_t , Double_t* ) const; {return kFALSE;}. Double_t GetStIn() const; {return fStIn;}. Double_t GetStOut() const; {return fStOut;}. Bool_t HasInner() const; {return !TestShapeBit(kGeoRSeg);}. Bool_t IsCylType() const; {return kTRUE;}. » Author: Mihaela Gheata 20/11/04 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoHype.h 24879 2008-07-18 08:04:40Z brun $ » Last generated: 2010-09-23 20:09; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoHype.html:18171,Test,TestShapeBit,18171,root/html528/TGeoHype.html,https://root.cern,https://root.cern/root/html528/TGeoHype.html,1,['Test'],['TestShapeBit']
Testability," unsigned int i=0; i<fDim; i++ ); 559 {; 560 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 561 ; 562 fCoordErrors[i][ fNPoints ] = ex[i];; 563 }; 564 // in this case we store the y error and not the inverse; 565 fDataError[ fNPoints ] = eval;; 566 ; 567 FitData::Add( x );; 568 fSumContent += val;; 569 if (val != 0 || eval != 1.0) fSumError2 += eval*eval;; 570 if (!fIsWeighted); 571 if (val != 0 && std::abs( eval*eval/val - 1.0) > 1.E-12) fIsWeighted = true;; 572 }; 573 ; 574 /**; 575 add multi-dim coordinate data with both error in coordinates and value; 576 */; 577 void BinData::Add( const double* x, double val, const double* ex, double elval, double ehval ); 578 {; 579 assert( kAsymError == fErrorType );; 580 ; 581 assert( !fData.empty() && fDataPtr );; 582 assert( !fDataErrorHigh.empty() && fDataErrorHighPtr );; 583 assert( !fDataErrorLow.empty() && fDataErrorLowPtr );; 584 assert( fDataError.empty() && !fDataErrorPtr );; 585 assert( fCoordErrors.size() == fDim );; 586 assert( fCoordErrorsPtr.size() == fDim );; 587 ; 588 fData[ fNPoints ] = val;; 589 ; 590 for( unsigned int i=0; i<fDim; i++ ); 591 {; 592 assert( &fCoordErrors[i].front() == fCoordErrorsPtr[i] );; 593 ; 594 fCoordErrors[i][ fNPoints ] = ex[i];; 595 }; 596 ; 597 fDataErrorLow[ fNPoints ] = elval;; 598 fDataErrorHigh[ fNPoints ] = ehval;; 599 ; 600 FitData::Add( x );; 601 fSumContent += val;; 602 if (val != 0 || elval != 1.0 || ehval != 1.0 ); 603 fSumError2 += (elval+ehval)*(elval+ehval)/4;; 604 }; 605 ; 606 ; 607 /**; 608 add the bin width data, a pointer to an array with the bin upper edge information.; 609 This is needed when fitting with integral or Bin volume normalization options; 610 The information is added for the previously inserted point.; 611 BinData::Add must be called before; 612 */; 613 void BinData::AddBinUpEdge( const double* xup ); 614 {; 615 if ( fBinEdge.empty() ); 616 InitBinEdge();; 617 ; 618 assert( fBinEdge.size() == fDim );; 619 ; 620 for ( unsigned int i=0; i<fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:18237,assert,assert,18237,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['assert'],['assert']
Testability," unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NCalls() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NDim() const; virtual unsigned intNFitPoints() const; virtual unsigned intROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::NPoints() const; doubleROOT::Math::IBaseFunctionMultiDim::operator()(const double* x) const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::ResetNCalls(); virtual ROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::Type_tType() const; virtual voidROOT::Math::BasicFitMethodFunction<ROOT::Math::IGradientFunctionMultiDim>::UpdateNCalls() const. private:. virtual doubleDoDerivative(const double* x, unsigned int icoord) const; virtual doubleDoEval(const double* x) const; ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&); ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>&operator=(const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>& rhs). Data Members; public:. enum ROOT::Math::BasicFitMethodFunction::Type_t { kUndefined; kLeastSquare; kLogLikelihood; };. private:. const ROOT::Fit::UnBinData&fData; const ROOT::Fit::LogLikelihoodFCN<ROOT::Math::IGradientFunctionMultiDim>::IModelFunction&fFunc; vector<double>fGradfor derivatives; unsigned intfNEffPointsnumber of effective points used in the fit . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BaseFunction * Clone() const; clone the function (need to return Base for Windows). { return new LogLikelihoodFCN(fData,fFunc); }. unsigned int NFitPoints() const; using BaseObjFunction::operator();; effective points used in the fit. { return fNEffPoints; }. double DataElement(const double* x, unsigned int i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html:2647,Log,LogLikelihoodFCN,2647,root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__LogLikelihoodFCN_-p0Math__IGradientFunctionMultiDim_.html,5,['Log'],['LogLikelihoodFCN']
Testability," unweighted histograms and two weighted histograms [2] as well as usual Pearson's \( \chi^{2} \) test for comparison two usual (unweighted) histograms.; Overview:; Comparison of two histograms expect hypotheses that two histograms represent identical distributions. To make a decision p-value should be calculated. The hypotheses of identity is rejected if the p-value is lower then some significance level. Traditionally significance levels 0.1, 0.05 and 0.01 are used. The comparison procedure should include an analysis of the residuals which is often helpful in identifying the bins of histograms responsible for a significant overall \( \chi^{2} \) value. Residuals are the difference between bin contents and expected bin contents. Most convenient for analysis are the normalized residuals. If hypotheses of identity are valid then normalized residuals are approximately independent and identically distributed random variables having N(0,1) distribution. Analysis of residuals expect test of above mentioned properties of residuals. Notice that indirectly the analysis of residuals increase the power of \( \chi^{2} \) test.; Methods of comparison:; \( \chi^{2} \) test for comparison two (unweighted) histograms: Let us consider two histograms with the same binning and the number of bins equal to r. Let us denote the number of events in the ith bin in the first histogram as ni and as mi in the second one. The total number of events in the first histogram is equal to: ; \[; N = \sum_{i=1}^{r} n_{i}; \]. and ; \[; M = \sum_{i=1}^{r} m_{i}; \]. in the second histogram. The hypothesis of identity (homogeneity) [3] is that the two histograms represent random values with identical distributions. It is equivalent that there exist r constants p1,...,pr, such that ; \[; \sum_{i=1}^{r} p_{i}=1; \]. and the probability of belonging to the ith bin for some measured value in both experiments is equal to pi. The number of events in the ith bin is a random variable with a distribution approxi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:88294,test,test,88294,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['test'],['test']
Testability," updateSubBranches = kFALSE); virtual voidTBranch::SetFile(TFile* file = 0); virtual voidTBranch::SetFile(const char* filename); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTBranch::SetFirstEntry(Long64_t entry); virtual Bool_tTBranch::SetMakeClass(Bool_t decomposeObj = kTRUE); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidTBranch::SetObject(void* objadd); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTBranch::SetOffset(Int_t offset = 0); virtual voidTBranch::SetStatus(Bool_t status = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTBranch::SetTree(TTree* tree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBranch::SetupAddresses(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; THbookBranch(); THbookBranch(const THbookBranch&); THbookBranch(TTree* tree, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1); THbookBranch(TBranch* branch, const char* name, void* address, const char* leaflist, Int_t basketsize = 32000, Int_t compress = -1); virtual voidTBranch::UpdateAddress(); virtual voidTBranch::UpdateFile(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THbookBranch.html:8893,Test,TestBit,8893,root/html602/THbookBranch.html,https://root.cern,https://root.cern/root/html602/THbookBranch.html,4,['Test'],"['TestBit', 'TestBits']"
Testability," use if ConfidenceBelt should be saved to a TFile; RooAbsData&fDatadata set ; Bool_tfDoProfileConstructioninstead of full construction over nuisance parametrs, do profile; Bool_tfFluctuateDatatell ToyMCSampler to fluctuate number of entries in dataset; RooStats::ModelConfig&fModel; Int_tfNbinsnumber of samples per variable; RooAbsData*fPOIToTestvalue of POI points to perform the construction; RooAbsData*fPointsToTestpoints to perform the construction; Bool_tfSaveBeltToFilecontrols use if ConfidenceBelt should be saved to a TFile; Double_tfSizesize of the test (eg. specified rate of Type I error); RooStats::ToyMCSampler*fTestStatSamplerthe test statistic sampler. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); standard constructor. ~FeldmanCousins(); destructor; if(fOwnsWorkspace && fWS) delete fWS;. void SetModel(const RooStats::ModelConfig& ); set the model. TestStatSampler* GetTestStatSampler() const. void CreateTestStatSampler() const; specify the Test Statistic and create a ToyMC test statistic sampler. void CreateParameterPoints() const; specify the parameter points to perform the construction.; allow ability to profile on some nuisance paramters. PointSetInterval* GetInterval() const; Main interface to get a RooStats::ConfInterval.; It constructs a RooStats::PointSetInterval. FeldmanCousins(RooAbsData& data, RooStats::ModelConfig& model); FeldmanCousins();; Common constructor. Double_t Size() const; Get the size of the test (eg. rate of Type I error). {return fSize;}. Double_t ConfidenceLevel() const; Get the Confidence level for the test. {return 1.-fSize;}. void SetData(RooAbsData& ); Set the DataSet. void SetPdf(RooAbsPdf& ); Set the Pdf. void SetParameters(const RooArgSet& ); specify the parameters of interest in the interval. void SetNuisanceParameters(const RooArgSet& ); specify the nuisance parameters (eg. the rest of the parameters). void SetParame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__FeldmanCousins.html:4302,Test,TestStatSampler,4302,root/html530/RooStats__FeldmanCousins.html,https://root.cern,https://root.cern/root/html530/RooStats__FeldmanCousins.html,3,['Test'],['TestStatSampler']
Testability," used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-03-14 16:49; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionLogView.html:22448,log,log,22448,root/html534/TSessionLogView.html,https://root.cern,https://root.cern/root/html534/TSessionLogView.html,1,['log'],['log']
Testability," used for z <= 1; 676///; 677/// This function was translated by Rene Brun from PROBKL in CERNLIB.; 678 ; 679Double_t TMath::KolmogorovProb(Double_t z); 680{; 681 Double_t fj[4] = {-2,-8,-18,-32}, r[4];; 682 const Double_t w = 2.50662827;; 683 // c1 - -pi**2/8, c2 = 9*c1, c3 = 25*c1; 684 const Double_t c1 = -1.2337005501361697;; 685 const Double_t c2 = -11.103304951225528;; 686 const Double_t c3 = -30.842513753404244;; 687 ; 688 Double_t u = TMath::Abs(z);; 689 Double_t p;; 690 if (u < 0.2) {; 691 p = 1;; 692 } else if (u < 0.755) {; 693 Double_t v = 1./(u*u);; 694 p = 1 - w*(TMath::Exp(c1*v) + TMath::Exp(c2*v) + TMath::Exp(c3*v))/u;; 695 } else if (u < 6.8116) {; 696 r[1] = 0;; 697 r[2] = 0;; 698 r[3] = 0;; 699 Double_t v = u*u;; 700 Int_t maxj = TMath::Max(1,TMath::Nint(3./u));; 701 for (Int_t j=0; j<maxj;j++) {; 702 r[j] = TMath::Exp(fj[j]*v);; 703 }; 704 p = 2*(r[0] - r[1] +r[2] - r[3]);; 705 } else {; 706 p = 0;; 707 }; 708 return p;; 709 }; 710 ; 711////////////////////////////////////////////////////////////////////////////////; 712/// Statistical test whether two one-dimensional sets of points are compatible; 713/// with coming from the same parent distribution, using the Kolmogorov test.; 714/// That is, it is used to compare two experimental distributions of unbinned data.; 715///; 716/// ### Input:; 717/// a,b: One-dimensional arrays of length na, nb, respectively.; 718/// The elements of a and b must be given in ascending order.; 719/// option is a character string to specify options; 720/// ""D"" Put out a line of ""Debug"" printout; 721/// ""M"" Return the Maximum Kolmogorov distance instead of prob; 722///; 723/// ### Output:; 724/// The returned value prob is a calculated confidence level which gives a; 725/// statistical test for compatibility of a and b.; 726/// Values of prob close to zero are taken as indicating a small probability; 727/// of compatibility. For two point sets drawn randomly from the same parent; 728/// distribution, the value of prob s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMath_8cxx_source.html:22863,test,test,22863,doc/master/TMath_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMath_8cxx_source.html,2,['test'],['test']
Testability," used to perform additional iterations of the generator before returning the random numbers. For example, when SkipNumber = 2, the generator will have two extra iterations that will be discarder. MIXMAX with N = 240. This is a new version of the generator (version 2.0beta) described in the 2016 paper (3rd reference), with special number \(s=487013230256099140\), \(m=2^{51}+1\) and having a period of \(10^{4389}\).; MIXMAX with N = 17, from the 2.0 beta version with \(s=0\) and \(m=2^{36}+1\). The period of the generator is \(10^{294}\).; MIXMAX with N = 256 from the 1.0 version. The period is (for SkipNumber=0) \(10^{4682}\). For this generator we recommend in ROOT using a default value of `SkipNumber=2, while for the previous two generators skipping is not needed. This table describes the properties of the MIXMAX generators. MIXMAX is a genuine 61 bit generator on the Galois field GF[p], where \(p=2^{61}-1\) is the Mersenne prime number. The MIXMAX generators with these parameters pass all of the BigCrush tests in the TestU01 suite. Dimension Entropy Decorrelation Time Iteration Time Relaxation Time Period q . N \(~h(T)\) \(\tau_0 = {1\over h(T) 2N }\) t \(\tau ={1\over h(T) \ln {1\over \delta v_0}}\) \(\log_{10} (q)\) . 256 194 0.000012 1 95.00 4682 (full period is not confirmed) . 8 220 0.00028 1 1.54 129 . 17 374 0.000079 1 1.92 294 . 240 8679 0.00000024 1 1.17 4389 . The entropy \(h(T)\), decorrelation time \(\tau_0\) decorrelation time, relaxation time \(\tau\) and period of the MIXMAX generator, expressed in units of the iteration time \(t\), which is normalised to 1. Clearly \(\tau_0~ < t ~< \tau\).; The References for MIXMAX are:. G.K.Savvidy and N.G.Ter-Arutyunian, On the Monte Carlo simulation of physical systems, J.Comput.Phys. 97, 566 (1991); Preprint EPI-865-16-86, Yerevan, Jan. 1986; K.Savvidy, The MIXMAX random number generator, Computer Physics Communications 196 (2015), pp 161–165 http://dx.doi.org/10.1016/j.cpc.2015.06.003; K.Savvidy and G.Savvidy,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html:2201,test,tests,2201,doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,1,['test'],['tests']
Testability," user (e.g. p-art), cd to the bare repository with cd /cvs/projects/<project> and then remove the tag with git tag -d <tag>.; Back in your working directory, tag correctly and then push tags.; Now, you must alert all your developers that, if they have pulled the erroneous tag to their local repository, they will need to remove the tag from their local repository with git -d <tag> and then re-pull from the repository. Otherwise, deleted tags will keep re-appearing in the remote repository and/or users will be unable to pull or push to the remote. Undo the last commit:. Undo the commit:; git reset --soft HEAD^. Do stuff.; Recommit:; git commit -a -m <message> -c ORIG_HEAD. Note that the -c ORIG_HEAD clause causes git to use the meta-data from the previous HEAD (author, etc) with the exception of the commit message. Changing the -c to -C and omitting the -m option will cause git to reuse the commit message too. Recover deleted (committed files). Get a list of all commits with deleted files:; git log --diff-filter=D --summary | less. Find your file and note the SHA1 hash for that commit.; Recover it:; git checkout <commit>^ -- file. Stage selected changes within a file. git add --patch ; Follow the on-screen directions. Tig: a simple and colored text-mode interface for Git; Tig is a command line tool that wraps many Git browse operations (like log, diff, show, status) in a colored text-mode interface based on ncurses. Tig has been written by Jonas Fonseca.; See the full Tig manual for a detailed description.; Obtaining Tig; Tig is available as package from many Linux distributions. On Debian/Ubuntu it is available with the package name tig from the default repositories.; On RHEL-based systems it is available from the additional repository RepoForge.; On OS X it is easily installed via Homebrew:; brew install tig. Tig pager mode; Many git commands can be piped into tig. When tig is invoked this way, it is in pager mode: output will be colored according to the input format",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/git-tips-and-tricks.html:15786,log,log,15786,d/git-tips-and-tricks.html,https://root.cern,https://root.cern/d/git-tips-and-tricks.html,1,['log'],['log']
Testability," user could perform operations on a symmetric matrix that violate the symmetry. No checking is done. For instance, the following code violates the symmetry.; TMatrixDSym A(5);; A.UnitMatrix();; TMatrixDRow(A,1)[0] = 1;; TMatrixDRow(A,1)[2] = 1;; 14.5.2 View Examples; Inserting row i1into rowi2 of matrix \(A\) can easily accomplished through:; TMatrixDRow(A,i1) = TMatrixDRow(A,i2); Which more readable than:; const Int_t ncols = A.GetNcols();; Double_t *start = A.GetMatrixArray();; Double_t *rp1 = start+i*ncols;; const Double_t *rp2 = start+j*ncols;; while (rp1 < start+ncols) *rp1++ = *rp2++;; Check that the columns of a Haar -matrix of order order are indeed orthogonal:; const TMatrixD haar = THaarMatrixD(order);; TVectorD colj(1<<order);; TVectorD coll(1<<order);; for (Int_t j = haar.GetColLwb(); j <= haar.GetColUpb(); j++) {; colj = TMatrixDColumn_const(haar,j);; Assert(TMath::Abs(colj*colj-1.0) <= 1.0e-15);. for (Int_t l = j+1; l <= haar.GetColUpb(); l++) {; coll = TMatrixDColumn_const(haar,l);; Assert(TMath::Abs(colj*coll) <= 1.0e-15);; }; }; Multiplying part of a matrix with another part of that matrix (they can overlap); TMatrixDSub(m,1,3,1,3) *= m.GetSub(5,7,5,7);; 14.6 Matrix Decompositions; The linear algebra package offers several classes to assist in matrix decompositions. Each of the decomposition methods performs a set of matrix transformations to facilitate solving a system of linear equations, the formation of inverses as well as the estimation of determinants and condition numbers. More specifically the classes TDecompLU, TDecompBK, TDecompChol, TDecompQRH and TDecompSVD give a simple and consistent interface to the LU, Bunch-Kaufman, Cholesky, QR and SVD decompositions. All of these classes are derived from the base class TDecompBase of which the important methods are listed in next table:. Method; Action. Bool_t Decompose(); perform the matrix decomposition. Double_t Condition(); calculate ||A||1 ||A-1||1, see “Condition number”. void Det(Double_t &d",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:788219,Assert,Assert,788219,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Assert'],['Assert']
Testability," user inserts target in data set info. TMVA::DataSetInfo& DefaultDataSetInfo(); default creation. void SetInputVariables(vector<TString>* theVariables); fill input variables in data set. void SetSignalWeightExpression(const TString& variable). void SetBackgroundWeightExpression(const TString& variable). void SetWeightExpression(const TString& variable, const TString& className = """"); Log() << kWarning << DefaultDataSetInfo().GetNClasses() /*fClasses.size()*/ << Endl;. void SetCut(const TString& cut, const TString& className = """"). void SetCut(const TCut& cut, const TString& className = """"). void AddCut(const TString& cut, const TString& className = """"). void AddCut(const TCut& cut, const TString& className = """"). void PrepareTrainingAndTestTree(const TCut& cut, Int_t NsigTrain, Int_t NbkgTrain, Int_t NsigTest, Int_t NbkgTest, const TString& otherOpt = ""SplitMode=Random:!V""); prepare the training and test trees. void PrepareTrainingAndTestTree(const TCut& cut, Int_t Ntrain, Int_t Ntest = -1); prepare the training and test trees; kept for backward compatibility. void PrepareTrainingAndTestTree(const TCut& cut, const TString& splitOpt); prepare the training and test trees; -> same cuts for signal and background. void PrepareTrainingAndTestTree(TCut sigcut, TCut bkgcut, const TString& splitOpt); prepare the training and test trees. TMVA::MethodBase* BookMethod(TString theMethodName, TString methodTitle, TString theOption = """"); Book a classifier or regression method. TMVA::MethodBase* BookMethod(TMVA::Types::EMVA theMethod, TString methodTitle, TString theOption = """"); books MVA method; the option configuration string is custom for each MVA; the TString field ""theNameAppendix"" serves to define (and distinguish); several instances of a given MVA, eg, when one wants to compare the; performance of various configurations. TMVA::IMethod* GetMethod(const TString& title) const; returns pointer to MVA that corresponds to given method title. void WriteDataInformation(); put corr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Factory.html:18182,test,test,18182,root/html528/TMVA__Factory.html,https://root.cern,https://root.cern/root/html528/TMVA__Factory.html,4,['test'],['test']
Testability," va_list va) const; voidTMVA::Configurable::EnableLooseOptions(Bool_t b = kTRUE); TMVA::BinarySearchTree*GetBinaryTree() const; virtual voidGetHelpMessage() const; const TString&TMVA::MethodBase::GetInternalVarName(Int_t ivar) const; Double_tGetNormalizedDistance(const TMVA::Event& base_event, const TMVA::BinarySearchTreeNode& sample_event, Double_t* dim_normalization); const TString&TMVA::MethodBase::GetOriginalVarName(Int_t ivar) const; const TString&TMVA::Configurable::GetReferenceFile() const; static TMVA::MethodBase*TMVA::MethodBase::GetThisBase(); const TString&TMVA::MethodBase::GetWeightFileDir() const; Bool_tTMVA::MethodBase::HasTrainingTree() const; Bool_tTMVA::MethodBase::Help() const; Bool_tTMVA::MethodBase::IgnoreEventsWithNegWeightsInTraining() const; Bool_tTMVA::MethodBase::IsConstructedFromWeightFile() const; Bool_tTMVA::MethodBase::IsNormalised() const; Double_tKernelNormalization(Double_t pdf); Double_tLanczosFilter(Int_t level, Double_t x); TMVA::MsgLogger&TMVA::Configurable::Log() const; Bool_tTMVA::Configurable::LooseOptionCheckingEnabled() const; virtual voidMakeClassSpecific(ostream&, const TString&) const; virtual voidTMVA::MethodBase::MakeClassSpecificHeader(ostream&, const TString& = """") const; voidTObject::MakeZombie(); voidTMVA::MethodBase::NoErrorCalc(Double_t*const err, Double_t*const errUpper); Double_tNormSinc(Double_t x); voidTMVA::Configurable::ResetSetFlag(); voidRKernelEstimate(const TMVA::Event&, vector<const TMVA::BinarySearchTreeNode*>&, TMVA::Volume&, vector<Float_t>* pdfSum); voidTMVA::MethodBase::SetNormalised(Bool_t norm); voidTMVA::MethodBase::SetWeightFileDir(TString fileDir); voidTMVA::MethodBase::SetWeightFileName(TString); voidTMVA::MethodBase::Statistics(TMVA::Types::ETreeType treeType, const TString& theVarName, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&, Double_t&); Bool_tTMVA::MethodBase::TxtWeightsOnly() const; Bool_tTMVA::MethodBase::Verbose() const; voidTMVA::Configurable::WriteOptionsReferenceToFile().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodPDERS.html:16321,Log,Log,16321,root/html602/TMVA__MethodPDERS.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodPDERS.html,2,['Log'],['Log']
Testability," val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void ValueSet(Long_t val); Emit ValueSet(Long_t) signal. This signal is emitted when the; number entry value is changed. The val has the following meaning:; val % 100 is the step size; val % 10000 / 100 != 0 indicates log step; val / 10000 != 0 indicates button down. void SavePrimitive(ostream& out, Option_t* = """"); Save a number entry widget as a C++ statement(s) on output stream out. void SetNumber(Double_t val). void SetIntNumber(Long_t val). void SetTime(Int_t hour, Int_t min, Int_t sec). void SetDate(Int_t year, Int_t month, Int_t day). void SetHexNumber(ULong_t val). void SetText(const char* text, Bool_t emit = kTRUE). Double_t GetNumber() const. Long_t GetIntNumber() const. void GetTime(Int_t& hour, Int_t& min, Int_t& sec) const. void GetDate(Int_t& year, Int_t& month, Int_t& day) const. ULong_t GetHexNumber() const. void IncreaseNumber(TGNumberFormat::EStepSize step = kNSSSmall, Int_t sign = 1, Bool_t logstep = kFALSE). void SetLimits(TGNumberFormat::ELimit limits = TGNumberFormat::kNELNoLimits, Double_t min = 0, Double_t max = 1). EStyle GetNumStyle() const; Get the numerical style. EAttribute GetNumAttr() const; Get the numerical attribute. ELimit GetNumLimits() const; Get the numerialc limit attribute. Double_t GetNumMin() const; Get the lower limit. Double_t GetNumMax() const; Get the upper limit. Bool_t IsLogStep() const; Is log step enabled?. Bool_t IsEditable() const; { return kFALSE; }. TGNumberEntry(const TGNumberEntry& ). TGNumberEntry& operator=(const TGNumberEntry& ). void SetFormat(TGNumberFormat::EStyle style, TGNumberFormat::EAttribute attr = TGNumberFormat::kNEAAnyNumber); Set the numerical format. void SetNumStyle(TGNumberFormat::EStyle style). void SetNumAttr(TGNumberFormat::EAttribute attr = kNEAAnyNumber). void SetNumLimits(TGNumberFormat::ELimit limits = kNELNoLimits). void SetLimitValues(Double_t min = 0, Double_t max = 1). TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGNumberEntry.html:27204,log,logstep,27204,root/html528/TGNumberEntry.html,https://root.cern,https://root.cern/root/html528/TGNumberEntry.html,6,['log'],['logstep']
Testability," value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t * fFixPositionX;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionX1;  [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional ;  ; Bool_t * fFixPositionY1;  [fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional ;  ; Bool_t fFixRo;  logical value of correlation coefficient, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaX;  logical value of sigma x parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSigmaY;  logical value of sigma y parameter, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSx;  logical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSxy;  logical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixSy;  logical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTx;  logical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTxy;  logical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit). ;  ; Bool_t fFixTy;  logical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ;  ; Int_t fNPeaks;  number of peaks present in fit, input parameter, it should be > 0 ;  ; Int_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:27827,log,logical,27827,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability," value speeds the algorithm up many times.; 1687/// Then, Brent's method is applied on the bracketed interval; 1688/// epsilon (default = 1.E-10) controls the relative accuracy (if |x| > 1 ); 1689/// and absolute (if |x| < 1) and maxiter (default = 100) controls the maximum number; 1690/// of iteration of the Brent algorithm; 1691/// If the flag logx is set the grid search is done in log step size; 1692/// This is done automatically if the log scale is set in the current Pad; 1693///; 1694/// NOTE: see also TF1::GetMaximumX and TF1::GetX; 1695 ; 1696Double_t TF1::GetMinimum(Double_t xmin, Double_t xmax, Double_t epsilon, Int_t maxiter, Bool_t logx) const; 1697{; 1698 if (xmin >= xmax) {; 1699 xmin = fXmin;; 1700 xmax = fXmax;; 1701 }; 1702 ; 1703 if (!logx && gPad != nullptr) logx = gPad->GetLogx();; 1704 ; 1705 ROOT::Math::BrentMinimizer1D bm;; 1706 ROOT::Math::WrappedFunction<const TF1 &> wf1(*this);; 1707 bm.SetFunction(wf1, xmin, xmax);; 1708 bm.SetNpx(fNpx);; 1709 bm.SetLogScan(logx);; 1710 bm.Minimize(maxiter, epsilon, epsilon);; 1711 Double_t x;; 1712 x = bm.FValMinimum();; 1713 ; 1714 return x;; 1715}; 1716 ; 1717////////////////////////////////////////////////////////////////////////////////; 1718/// Find the minimum of a function of whatever dimension.; 1719/// While GetMinimum works only for 1D function , GetMinimumNDim works for all dimensions; 1720/// since it uses the minimizer interface; 1721/// vector x at beginning will contained the initial point, on exit will contain the result; 1722 ; 1723Double_t TF1::GetMinMaxNDim(Double_t *x , bool findmax, Double_t epsilon, Int_t maxiter) const; 1724{; 1725 R__ASSERT(x != nullptr);; 1726 ; 1727 int ndim = GetNdim();; 1728 if (ndim == 0) {; 1729 Error(""GetMinimumNDim"", ""Function of dimension 0 - return Eval(x)"");; 1730 return (const_cast<TF1 &>(*this))(x);; 1731 }; 1732 ; 1733 // create minimizer class; 1734 const char *minimName = ROOT::Math::MinimizerOptions::DefaultMinimizerType().c_str();; 1735 const char *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:62469,log,logx,62469,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['log'],['logx']
Testability," value which are consistent with the actual observation, at a given confidence level. Figure 3 ; The \(\hbox {$_s$}{\cal P}lots\) (signal on top, background on bottom) obtained for \({m_{\rm ES}}\) are represented as dots with error bars. They are obtained from a fit using only information from \(\Delta E\) and \({\cal F}\); Choosing \({m_{\rm ES}}\) and \(\Delta E\) as discriminating variables to determine \(N_1\) and \(N_2\) through a maximum Likelihood fit, one builds, for the control variable \({\cal F}\) which is unknown to the fit, the two \(\hbox {$_s$}{\cal P}lots\) for signal and background shown in Fig. 4. In the \(\hbox{$_s$}{\cal P}lot\) for signal one observes that error bars are the largest in the \(x\) regions where the background is the largest. Figure 4 ; The \(\hbox {$_s$}{\cal P}lots\) (signal on top, background on bottom) obtained for \({\cal F}\) are represented as dots with error bars. They are obtained from a fit using only information from \({m_{\rm ES}}\) and \(\Delta E\); The results above can be obtained by running the tutorial TestSPlot.C ; Definition at line 21 of file TSPlot.h. Public Member Functions;  TSPlot ();  default constructor (used by I/O only) ;  ;  TSPlot (Int_t nx, Int_t ny, Int_t ne, Int_t ns, TTree *tree);  Normal TSPlot constructor. ;  ;  ~TSPlot () override;  Destructor. ;  ; void Browse (TBrowser *b) override;  To browse the histograms. ;  ; void FillSWeightsHists (Int_t nbins=50);  The order of histograms in the array: ;  ; void FillXvarHists (Int_t nbins=100);  Fills the histograms of x variables (not weighted) with nbins. ;  ; void FillYpdfHists (Int_t nbins=100);  Fills the histograms of pdf-s of y variables with binning nbins. ;  ; void FillYvarHists (Int_t nbins=100);  Fill the histograms of y variables. ;  ; Int_t GetNevents ();  ; Int_t GetNspecies ();  ; void GetSWeights (Double_t *weights);  Returns the matrix of sweights. ;  ; void GetSWeights (TMatrixD &weights);  Returns the matrix of sweights. ;  ; TH1D * G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSPlot.html:11316,Test,TestSPlot,11316,doc/master/classTSPlot.html,https://root.cern,https://root.cern/doc/master/classTSPlot.html,1,['Test'],['TestSPlot']
Testability," value"", 10, 0., 1000.);  // Set up reading from the TTree TTreeReader reader(tree); TTreeReaderArray<float> jetEt(reader, ""jet.ET""); TTreeReaderArray<float> muPt(reader, ""jet.lead_mu.pT""); TTreeReaderArray<float> tag(reader, ""jet.tag"");  // Fill the histograms while (reader.Next()) { for (int iJet = 0; iJet < jetEt.size(); ++iJet) { hMuPtTag->Fill(muPt[iJet], tag[iJet]); hJetEtTag->Fill(jetEt[iJet], tag[iJet]); } }  someOtherFunction();  // Store the result. Ideally using file->Write() but very few people do that. hMuPtTag->Write(); hJetEtTag->Write();  delete file; // but not the histograms!}; Here are the problems:. Constructing the TFile, ""RECRAETE"" is misspelled.; The axis titles of hMuPtJetET are inverted.; The number of muonPtBins is wrong.; The histogram hJetEtTag is filled with weights of *tag; that might be a leftover y coordinate.; You get two copies of the histogram in the file, one for histogram->Write(), one because the histogram is already associated with the file and will be written on file destruction.; The call to someOtherFunction() might change gDirectory and thus hMuPtJetET might not be written to jetmuontag.root. To track these problems down you'd have to spend your time debugging them. Instead, the new interfaces will simply not allow this to happen: no debugging needed!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/root-7.html:5993,test,tests,5993,d/root-7.html,https://root.cern,https://root.cern/d/root-7.html,2,"['Benchmark', 'test']","['Benchmarks', 'tests']"
Testability," value, limiting the number; of future error messages for this pdf to 'resetValue'. void setTraceCounter(Int_t value, Bool_t allNodes = kFALSE); Reset trace counter to given value, limiting the; number of future trace messages for this pdf to 'value'. Double_t getLogVal(const RooArgSet* set = 0) const; Return the log of the current value with given normalization; An error message is printed if the argument of the log is negative. Double_t extendedTerm(UInt_t observedEvents, const RooArgSet* nset = 0) const; Returned the extended likelihood term (Nexpect - Nobserved*log(NExpected); of this PDF for the given number of observed events. For successfull operation the PDF implementation must indicate; it is extendable by overloading canBeExtended() and must; implemented the expectedEvents() function. RooAbsReal* createNLL(RooAbsData& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); Construct representation of -log(L) of PDFwith given dataset. If dataset is unbinned, an unbinned likelihood is constructed. If the dataset; is binned, a binned likelihood is constructed. The following named arguments are supported. ConditionalObservables(const RooArgSet& set) -- Do not normalize PDF over listed observables; Extended(Bool_t flag) -- Add extended likelihood term, off by default; Range(const char* name) -- Fit only data inside range with given name; Range(Double_t lo, Double_t hi) -- Fit only data inside given range. A range named ""fit"" is created on the fly on all observables.; Multiple comma separated range names can be specified.; SumCoefRange(const char* name) -- Set the range in which to interpret the coefficients of RooAddPdf components; NumCPU(int num) -- Parallelize NLL calculation on num CPUs; Optimize(Bool_t flag) -- Activate con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:46901,log,log,46901,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['log'],['log']
Testability," valueTGraph; kMustCleanup enum valueTObject; kNoContextMenu enum valueTObject; kNoStats enum valueTGraph; kNotDeleted enum valueTObject; kNotEditable enum valueTGraph; kObjInCanvas enum valueTObject; kOnlyPrepStep enum valueTObjectprotected; kOverwrite enum valueTObject; kResetHisto enum valueTGraph; kSingleKey enum valueTObject; kWriteDelete enum valueTObject; kZombie enum valueTObject; LeastSquareFit(Int_t m, Double_t *a, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; LeastSquareLinearFit(Int_t n, Double_t &a0, Double_t &a1, Int_t &ifail, Double_t xmin=0, Double_t xmax=0)TGraphvirtual; ls(Option_t *option="""") const overrideTNamedvirtual; MakeFunctionQuantiles()TGraphQQprotected; MakeQuantiles()TGraphQQprotected; MakeZombie()TObjectinlineprotected; MayNotUse(const char *method) constTObject; Merge(TCollection *list)TGraphvirtual; TAttLine::Modify()TAttLinevirtual; TAttFill::Modify()TAttFillvirtual; TAttMarker::Modify()TAttMarkervirtual; MovePoints(Double_t dx, Double_t dy, Bool_t logx=kFALSE, Bool_t logy=kFALSE)TGraphvirtual; Notify()TObjectvirtual; Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constTObject; operator delete(void *ptr)TObject; operator delete(void *ptr, void *vp)TObject; operator delete[](void *ptr)TObject; operator delete[](void *ptr, void *vp)TObject; operator new(size_t sz)TObjectinline; operator new(size_t sz, void *vp)TObjectinline; operator new[](size_t sz)TObjectinline; operator new[](size_t sz, void *vp)TObjectinline; operator=(const TGraph &)TGraph; TNamed::operator=(const TNamed &rhs)TNamed; TObject::operator=(const TObject &rhs)TObjectinline; Paint(Option_t *chopt="""") overrideTGraphvirtual; PaintGraph(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintGrapHist(Int_t npoints, const Double_t *x, const Double_t *y, Option_t *chopt)TGraph; PaintStats(TF1 *fit)TGraphvirtual; Pop()TObjectvirtual; Print(Option_t *chopt="""") const overrideTGraphvirtual; Quartiles()TGraphQQprotected;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphQQ-members.html:9315,log,logx,9315,doc/master/classTGraphQQ-members.html,https://root.cern,https://root.cern/doc/master/classTGraphQQ-members.html,1,['log'],['logx']
Testability," values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 99 of file TSpectrum2Fit.h. ◆ fFixAmpX1. Bool_t* TSpectrum2Fit::fFixAmpX1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional ; Definition at line 100 of file TSpectrum2Fit.h. ◆ fFixAmpY1. Bool_t* TSpectrum2Fit::fFixAmpY1. protected . [fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional ; Definition at line 101 of file TSpectrum2Fit.h. ◆ fFixAx. Bool_t TSpectrum2Fit::fFixAx. protected . logical value of ax parameter, which allows to fix the parameter (not to fit). ; Definition at line 114 of file TSpectrum2Fit.h. ◆ fFixAy. Bool_t TSpectrum2Fit::fFixAy. protected . logical value of ay parameter, which allows to fix the parameter (not to fit). ; Definition at line 115 of file TSpectrum2Fit.h. ◆ fFixBx. Bool_t TSpectrum2Fit::fFixBx. protected . logical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit). ; Definition at line 111 of file TSpectrum2Fit.h. ◆ fFixBy. Bool_t TSpectrum2Fit::fFixBy. protected . logical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit). ; Definition at line 112 of file TSpectrum2Fit.h. ◆ fFixPositionX. Bool_t* TSpectrum2Fit::fFixPositionX. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional ; Definition at line 95 of file TSpectrum2Fit.h. ◆ fFixPositionX1. Bool_t* TSpectrum2Fit::fFixPositionX1. protected . [fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Fit.html:84017,log,logical,84017,doc/master/classTSpectrum2Fit.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Fit.html,1,['log'],['logical']
Testability," values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Fit.html:48382,log,logical,48382,root/html528/TSpectrum2Fit.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Fit.html,6,['log'],['logical']
Testability," values,; void * mem = 0 ) const;. * DataMemberAt will return the nth data member of the type; * @param nth the nth data member; * @return nth data member. Type DynamicType(const Reflex::Object& obj) const. * DynamicType is used to discover the dynamic type (useful in; * case of polymorphism); * @param mem is the memory address of the object to checked; * @return the actual class of the object. Member FunctionMemberAt(size_t nth, Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. * FunctionMemberAt will return the nth function member of the type; * @param nth function member; * @return reflection information of nth function member. void GenerateDict(Reflex::DictionaryGenerator& generator) const. * GenerateDict will produce the dictionary information of this type; * @param generator a reference to the dictionary generator instance. bool HasBase(const Reflex::Type& cl) const. * HasBase will check whether this class has a base class given; * as argument; * @param cl the base-class to check for; * @return the Base info if it is found, an empty base otherwise (can be tested for bool). bool IsEquivalentTo(const Reflex::Type& typ, unsigned int modifiers_mask = 0) const. * IsEquivalentTo returns true if the two types are equivalent; * @param type to compare to; * @modifiers_mask do not compare the listed modifiers; * @return true if two types are equivalent. Member MemberAt(size_t nth, Reflex::EMEMBERQUERY inh = INHERITEDMEMBERS_DEFAULT) const. * MemberAt will return the nth member of the type; * @param nth member; * @return reflection information nth member. MemberTemplate MemberTemplateAt(size_t nth) const. * MemberTemplateAt will return the nth member template of this type; * @param nth member template; * @return nth member template. std::string Name(unsigned int mod = 0) const. * Name returns the name of the type; * @param mod qualifiers can be or'ed; * FINAL - resolve typedefs; * SCOPED - fully scoped name; * QUALIFIED - cv, reference qualification; * @return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Reflex__Type.html:15275,test,tested,15275,root/html526/Reflex__Type.html,https://root.cern,https://root.cern/root/html526/Reflex__Type.html,5,['test'],['tested']
Testability," values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends on any of the observables; as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; with a dataset the observables are guaranteed to change with every call, thus there is no point; in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t ); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setData(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the test ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:36514,test,test,36514,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,2,['test'],['test']
Testability," values. Bool_t redirectServersHook(const RooAbsCollection& newServerList, Bool_t mustReplaceAll, Bool_t nameChange, Bool_t isRecursive); Catch server redirect calls and forward to internal clone of function. void printCompactTreeHook(ostream& os, const char* indent = """"); Catch print hook function and forward to function clone. void constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); Driver function to propagate constant term optimizations in test statistic.; If code Activate is sent, constant term optimization will be executed.; If code Deacivate is sent, any existing constant term optimizations will; be abanoned. If codes ConfigChange or ValueChange are sent, any existing; constant term optimizations will be redone. void optimizeCaching(); This method changes the value caching logic for all nodes that depends on any of the observables; as defined by the given dataset. When evaluating a test statistic constructed from the RooAbsReal; with a dataset the observables are guaranteed to change with every call, thus there is no point; in tracking these changes which result in a net overhead. Thus for observable-dependent nodes,; the evaluation mechanism is changed from being dependent on a 'valueDirty' flag to guaranteed evaluation.; On the dataset side, the observables objects are modified to no longer send valueDirty messages; to their client. void optimizeConstantTerms(Bool_t ); Driver function to activate global constant term optimization.; If activated constant terms are found and cached with the dataset; The operation mode of cached nodes is set to AClean meaning that; their getVal() call will never result in an evaluate call.; Finally the branches in the dataset that correspond to observables; that are exclusively used in constant terms are disabled as; they serve no more purpose. Bool_t setDataSlave(RooAbsData& data, Bool_t cloneData = kTRUE); Change dataset that is used to given one. If cloneData is kTRUE, a clone of; in the input dataset is made. If the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooAbsOptTestStatistic.html:37586,test,test,37586,root/html530/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html530/RooAbsOptTestStatistic.html,1,['test'],['test']
Testability," var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; TFHandler_DL_CPU : Variable Mean RMS [ Min Max ]; : -----------------------------------------------------------; : var1: 0.077270 0.29534 [ -1.1155 1.0914 ]; : var2: 0.068045 0.27981 [ -1.0016 1.0000 ]; : var3: 0.027548 0.24565 [ -0.80459 0.85902 ]; : var4: -0.034157 0.25816 [ -1.0000 0.83435 ]; : -----------------------------------------------------------; : ; : 1-vs-rest performance metrics per class; : -------------------------------------------------------------------------------------------------------; : ; : Considers the listed class as signal and the other classes; : as background, reporting the resulting binary performance.; : A score of 0.820 (0.850) means 0.820 was acheived on the; : test set and 0.850 on the training set.; : ; : Dataset MVA Method ROC AUC Sig eff@B=0.01 Sig eff@B=0.10 Sig eff@B=0.30 ; : Name: / Class: test (train) test (train) test (train) test (train) ; : ; : dataset BDTG ; : ------------------------------; : Signal 0.968 (0.978) 0.508 (0.605) 0.914 (0.945) 0.990 (0.996) ; : bg0 0.910 (0.931) 0.256 (0.288) 0.737 (0.791) 0.922 (0.956) ; : bg1 0.947 (0.954) 0.437 (0.511) 0.833 (0.856) 0.971 (0.971) ; : bg2 0.978 (0.982) 0.585 (0.678) 0.951 (0.956) 0.999 (0.996) ; : ; : dataset MLP ; : ------------------------------; : Signal 0.970 (0.975) 0.596 (0.632) 0.933 (0.938) 0.988 (0.993) ; : bg0 0.929 (0.934) 0.303 (0.298) 0.787 (0.793) 0.949 (0.961) ; : bg1 0.962 (0.967) 0.467 (0.553) 0.881 (0.906) 0.985 (0.992) ; : bg2 0.975 (0.979) 0.629 (0.699) 0.929 (0.940) 0.998 (0.998) ; : ; : dataset PDEFoam ; : ------------------------------; : Signal 0.916 (0.928) 0.294 (0.382) 0.744 (0.782) 0.932 (0.952) ; : bg0 0.837 (0.848) 0.109 (0.147) 0.519 (0.543) 0.833 (0.851) ; : bg1 0.890 (0.902) 0.190 (0.226) 0.606 (0.646) 0.923 (0.929) ; : bg2 0.967 (0.972) 0.510 (0.527) 0.900 (0.926) 0.993 (0.998) ; : ; : dataset DL_CPU ; : --------------------------",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C.html:24071,test,test,24071,doc/master/TMVAMulticlass_8C.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C.html,4,['test'],['test']
Testability," variable. void NoErrorCalc(Double_t*const err, Double_t*const errUpper). Double_t GetMvaValue(const TMVA::Event*const ev, Double_t* err = 0, Double_t* errUpper = 0). Bool_t IsSignalLike(); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation); for a quick determination if an event would be selected as signal or background. Bool_t IsSignalLike(Double_t mvaVal); uses a pre-set cut on the MVA output (SetSignalReferenceCut and SetSignalReferenceCutOrientation); for a quick determination if an event with this mva output value would tbe selected as signal or background. void AddClassifierOutput(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void AddClassifierOutputProb(TMVA::Types::ETreeType type); prepare tree branch with the method's discriminating variable. void TestRegression(Double_t& bias, Double_t& biasT, Double_t& dev, Double_t& devT, Double_t& rms, Double_t& rmsT, Double_t& mInf, Double_t& mInfT, Double_t& corr, TMVA::Types::ETreeType type); calculate <sum-of-deviation-squared> of regression output versus ""true"" value from test sample. bias = average deviation; dev = average absolute deviation; rms = rms of deviation. void TestMulticlass(); test multiclass classification. void TestClassification(); initialization. void WriteStateToStream(ostream& tf) const; general method used in writing the header of the weight files where; the used variables, variable transformation type etc. is specified. void AddInfoItem(void* gi, const TString& name, const TString& value) const; xml writing. void AddOutput(TMVA::Types::ETreeType type, TMVA::Types::EAnalysisType analysisType). void WriteStateToXML(void* parent) const; general method used in writing the header of the weight files where; the used variables, variable transformation type etc. is specified. void ReadStateFromStream(TFile& rf); write reference MVA distributions (and other information); to a ROOT type weight file. void WriteSt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodBase.html:25258,Test,TestRegression,25258,root/html602/TMVA__MethodBase.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodBase.html,4,"['Test', 'test']","['TestRegression', 'test']"
Testability," variables (image); /// use new method (from ROOT 6.20 to add a variable array for all image data); loader.AddVariablesArray(""vars"", imgSize);; ; // Set individual event weights (the variables must exist in the original TTree); // for signal : factory->SetSignalWeightExpression (""weight1*weight2"");; // for background: factory->SetBackgroundWeightExpression(""weight1*weight2"");; // loader.SetBackgroundWeightExpression( ""weight"" );; ; // Apply additional cuts on the signal and background samples (can be different); TCut mycuts = """"; // for example: TCut mycuts = ""abs(var1)<0.5 && abs(var2-0.5)<1"";; TCut mycutb = """"; // for example: TCut mycutb = ""abs(var1)<0.5"";; ; // Tell the factory how to use the training and testing events; //; // If no numbers of events are given, half of the events in the tree are used; // for training, and the other half for testing:; // loader.PrepareTrainingAndTestTree( mycut, ""SplitMode=random:!V"" );; // It is possible also to specify the number of training and testing events,; // note we disable the computation of the correlation matrix of the input variables; ; int nTrainSig = 0.8 * nEventsSig;; int nTrainBkg = 0.8 * nEventsBkg;; ; // build the string options for DataLoader::PrepareTrainingAndTestTree; TString prepareOptions = TString::Format(; ""nTrain_Signal=%d:nTrain_Background=%d:SplitMode=Random:SplitSeed=100:NormMode=NumEvents:!V:!CalcCorrelations"",; nTrainSig, nTrainBkg);; ; loader.PrepareTrainingAndTestTree(mycuts, mycutb, prepareOptions);; ; /***; ; DataSetInfo : [dataset] : Added class ""Signal""; : Add Tree sig_tree of type Signal with 10000 events; DataSetInfo : [dataset] : Added class ""Background""; : Add Tree bkg_tree of type Background with 10000 events; ; ; ; **/; ; /****; # Booking Methods; ; Here we book the TMVA methods. We book a Boosted Decision Tree method (BDT); ; **/; ; // Boosted Decision Trees; if (useTMVABDT) {; factory.BookMethod(&loader, TMVA::Types::kBDT, ""BDT"",; ""!V:NTrees=200:MinNodeSize=2.5%:MaxDepth=2:BoostType",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:52856,test,testing,52856,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['test'],['testing']
Testability," variables already used in fisher criterium are not anymore analysed individually for node splitting ;  ; Bool_t fUseFisherCuts;  use multivariate splits using the Fisher criterium ;  ; Int_t fUseNvars;  the number of variables used in randomised trees; ;  ; Bool_t fUsePoissonNvars;  use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ;  ; Bool_t fUseSearchTree;  cut scan done with binary trees or simple event loop. ;  ; std::vector< Double_t > fVariableImportance;  the relative importance of the different variables ;  . Static Private Attributes; static const Int_t fgDebugLevel = 0;  debug level determining some printout/control plots etc. ;  ; static const Int_t fgRandomSeed = 0;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/DecisionTree.h>. Inheritance diagram for TMVA::DecisionTree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EventConstList. typedef std::vector<const TMVA::Event*> TMVA::DecisionTree::EventConstList. Definition at line 74 of file DecisionTree.h. ◆ EventList. typedef std::vector<TMVA::Event*> TMVA::DecisionTree::EventList. Definition at line 73 of file DecisionTree.h. Member Enumeration Documentation. ◆ EPruneMethod. enum TMVA::DecisionTree::EPruneMethod. EnumeratorkExpectedErrorPruning ; kCostComplexityPruning ; kNoPruning . Definition at line 139 of file DecisionTree.h. Constructor & Destructor Documentation. ◆ Decis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:12548,Log,Log,12548,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,1,['Log'],['Log']
Testability," variables for all the relative overall uncertainties we expect; range is set using defined macro (see top of the page); string range=""[0,-1,1]"";. void MakeTotalExpected(RooWorkspace* proto, string totName, string , string , int lowBin, int highBin, vector<std::string>& syst_x_expectedPrefixNames, vector<std::string>& normByNames); for ith bin calculate totN_i = lumi * sum_j expected_j * syst_j. void AddPoissonTerms(RooWorkspace* proto, string prefix, string obsPrefix, string expPrefix, int lowBin, int highBin, vector<std::string>& likelihoodTermNames). Relate observables to expected for each bin; later modify variable named expPrefix_i to be product of terms. void SetObsToExpected(RooWorkspace* proto, string obsPrefix, string expPrefix, int lowBin, int highBin). set observed to expected. void Customize(RooWorkspace* proto, const char* pdfNameChar, map<std::string,std::string> renameMap). void EditSyst(RooWorkspace* proto, const char* pdfNameChar, map<std::string,double> gammaSyst, map<std::string,double> uniformSyst, map<std::string,double> logNormSyst); cout << ""in edit, gammamap.size = "" << gammaSyst.size() << "", unimap.size = "" << uniformSyst.size() << endl;. void PrintCovarianceMatrix(RooFitResult* result, RooArgSet* params, string filename); FILE * pFile;. RooWorkspace* MakeSingleChannelModel(vector<RooStats::HistFactory::EstimateSummary> summary, vector<std::string> systToFix, bool doRatio = false). RooWorkspace* MakeCombinedModel(vector<std::string> , vector<RooWorkspace*> ). void FitModel(RooWorkspace* , string , string , string , bool = false). void FormatFrameForLikelihood(RooPlot* frame, string XTitle = std::string(""#sigma / #sigma_{SM}""), string YTitle = std::string(""-log likelihood"")). TDirectory * Makedirs(TDirectory* file, vector<std::string> names). TDirectory * Mkdir(TDirectory* file, string name). » Author: Kyle Cranmer, Akira Shibata » Copyright (C) 1995-2008, Rene Brun and Fons Rademakers. *; » Last changed: root/roostats:$Id: cranmer $ » Last g",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html:10475,log,logNormSyst,10475,root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,https://root.cern,https://root.cern/root/html534/RooStats__HistFactory__HistoToWorkspaceFactory.html,1,['log'],['logNormSyst']
Testability," vector in-place. Translation is NOT applied. void RotateIP(Float_t* v) const; Rotate vector in-place. Translation is NOT applied. TVector3 Rotate(const TVector3& v) const; Rotate vector and return the rotated vector. Translation is NOT applied. Double_t Norm3Column(Int_t col); Norm 3-vector in column col. Double_t Orto3Column(Int_t col, Int_t ref); Orto-norm 3-vector in column col with respect to column ref. void OrtoNorm3(); Orto-norm columns 1 to 3. Double_t Invert(); Invert matrix.; Copied from ROOT's TMatrixFCramerInv. void Streamer(TBuffer& ); Stream an object of class TEveTrans. void Print(Option_t* option = """") const; Print in reasonable format. void SetFrom(Double_t* carr); Initialize from array. void SetFrom(const TGeoMatrix& mat); Initialize from TGeoMatrix. void SetGeoHMatrix(TGeoHMatrix& mat); Set TGeoHMatrix mat. void SetBuffer3D(TBuffer3D& buff); Fill transformation part TBuffer3D core section. Bool_t IsScale(Double_t low = 0.9, Double_t high = 1.1) const; Test if the transformation is a scale.; To be used by ROOT TGLObject descendants that potentially need to; use GL_NORMALIZE.; The low/high limits are expected to be squares of acutal limits. Ideally this should be done by the TGLViewer [but is not]. virtual ~TEveTrans(); {}. TEveTrans& operator=(const TEveTrans& t); { SetTrans(t); return *this; }. void operator*=(const TEveTrans& t); { MultRight(t); }. Double_t* Array(); Element access. Double_t* ArrX(). Double_t* ArrY(). Double_t* ArrZ(). Double_t* ArrT(). Double_t operator[](Int_t i) const; { return fM[i]; }. Double_t& operator[](Int_t i); { return fM[i]; }. Double_t CM(Int_t i, Int_t j) const; { return fM[4*j + i]; }. Double_t& CM(Int_t i, Int_t j); { return fM[4*j + i]; }. Double_t operator()(Int_t i, Int_t j) const; { return fM[4*j + i - 5]; }. Double_t& operator()(Int_t i, Int_t j); { return fM[4*j + i - 5]; }. Bool_t GetUseTrans() const; { return fUseTrans; }. void SetUseTrans(Bool_t v); { fUseTrans = v; }. void SetEditRotation(Bool_t x); { f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrans.html:15867,Test,Test,15867,root/html534/TEveTrans.html,https://root.cern,https://root.cern/root/html534/TEveTrans.html,1,['Test'],['Test']
Testability," verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooDataWeightedAverage(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t showProgress = kFALSE, Bool_t verbose = kTRUE); Constructor of data weighted average of given p.d.f over given data. If nCPU>1 the calculation is parallelized; over multuple processes. If showProgress is true a progress indicator printing a single dot for each evaluation; is shown. If interleave is true, the dataset split over multiple processes is done with an interleave pattern; rather than a bulk-split pattern. RooDataWeightedAverage(const RooDataWeightedAverage& other, const char* name = 0); Copy constructor. ~RooDataWeightedAverage(); Destructor. Double_t globalNormalization() const; Return global normalization term by which raw (combined) test statistic should; be defined to obtain final test statistic. For a data weighted avarage this; the the sum of all weights. Double_t evaluatePartition(Int_t firstEvent, Int_t lastEvent, Int_t stepSize) const; Calculate the data weighted average for events [firstEVent,lastEvent] with step size stepSize. RooDataWeightedAverage(); Constructors, assignment etc. TObject* clone(const char* newname) const; { return new RooDataWeightedAverage(*this,newname); }. RooAbsTestStatistic* create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); Virtual constructor. » Last changed: Thu Sep 23 19:59:27 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooDataWeightedAverage.html:36859,test,test,36859,root/html528/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html528/RooDataWeightedAverage.html,2,['test'],['test']
Testability," verbosity level (global or specific to the RLogChannel passed to the constructor) for the lifetime of this object. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  ; namespace  ROOT::Experimental::Detail;  ; namespace  ROOT::Experimental::Internal;  . Macros; #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__;  ; #define R__LOG_TO_CHANNEL(SEVERITY, CHANNEL);  ; LogMacros; Macros to log diagnostics.; R__LOG_INFO(ROOT::Experimental::HistLog()) << ""all we know is "" << 42;; ; RLogScopedVerbosity verbose(kDebug + 5);; const int decreasedInfoLevel = 5;; R__LOG_DEBUG(ROOT::WebGUILog(), decreasedInfoLevel) << ""nitty-gritty details"";; R__LOG_DEBUG#define R__LOG_DEBUG(DEBUGLEVEL,...)Definition RLogger.hxx:365; R__LOG_INFO#define R__LOG_INFO(...)Definition RLogger.hxx:364; ROOT::Experimental::HistLogRLogChannel & HistLog()Log channel for Hist diagnostics.Definition RAxis.cxx:25; ROOT::WebGUILogROOT::Experimental::RLogChannel & WebGUILog()Log channel for WebGUI diagnostics.Definition RWebDisplayArgs.cxx:24; ; #define R__LOG_DEBUG(DEBUGLEVEL, ...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kDebug + DEBUGLEVEL, __VA_ARGS__);  ; #define R__LOG_ERROR(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__);  ; #define R__LOG_FATAL(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal, __VA_ARGS__);  ; #define R__LOG_INFO(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__);  ; #define R__LOG_WARNING(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kWarning, __VA_ARGS__);  . Enumerations; enum class  ROOT::Experimental::ELogLevel : unsigned char { ;   ROOT::Experimental::kUnset; , ROOT::Experimental::kFatal; , ROOT::Experimental::kError; , ROOT::Experimental::kWarning; , ;   ROOT::Experimental::kInfo; , ROOT::Experimental::kDebug.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:2852,Log,Log,2852,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['Log'],['Log']
Testability," version number; TProof::EQueryModeTProof::fQueryModedefault query mode; TList*TProof::fRunningDSetsTemporary datasets used for async running; TProofMgr::EServTypeTProof::fServTypetype of server: proofd, XrdProofd; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TList*TProof::fSlaveslist of all slave servers as in config file; TStringTNamed::fTitleobject title; Long64_tTProof::fTotalBytesnumber of bytes to be analyzed; TUrlTProof::fUrlUrl of the master; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static TSemaphore*TProof::fgSemaphoresemaphore to control no of parallel startup threads. private:. TStringfCacheDirDirectory containing cache of user files; TProofLockPath*fCacheLockCache dir locker; TStringfDataSetDirDirectory containing info about known data sets; TDataSetManager*fDataSetManagerDataset manager; Bool_tfForkStartupStartup N-1 workers forking the first worker; Int_tfNWorkersNumber of workers; TQueryResultManager*fQMgrQuery-result manager; TStringfQueryDirDirectory containing query results and status; TProofLockPath*fQueryLockQuery dir locker; TStringfSandboxPROOF sandbox root dir; TServerSocket*fServSockServer socket to accept call backs; TStringfSockPathUNIX socket path for communication with workers; static Int_tfgWrksMaxMax number of workers. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofLite(const char* masterurl, const char* conffile = kPROOF_ConfFile, const char* confdir = kPROOF_ConfDir, Int_t loglevel = 0, const char* alias = 0, TProofMgr* mgr = 0); Create a PROOF environment. Starting PROOF involves either connecting; to a master server, which in turn will start a set of slave servers, or; directly starting as master server (if master = """"). Masterurl is of; the form: [proof[s]://]host[:port]. Conffile is the name of the config; file describing the remote PROOF cluster (this argument alows you to; describe different cluster configuration",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofLite.html:24511,sandbox,sandbox,24511,root/html528/TProofLite.html,https://root.cern,https://root.cern/root/html528/TProofLite.html,1,['sandbox'],['sandbox']
Testability," version of a dynamic particle class created by event generators ;  CTPrincipalPrincipal Components Analysis (PCA) ;  CTProcessEventTimer;  CTProcessIDA TProcessID identifies a ROOT job in a unique way in time and space ;  CTProcessUUIDThis class is a specialized TProcessID managing the list of UUIDs ;  CTProfileProfile Historam ;  CTProfile2DProfile2D histograms are used to display the mean value of Z and its RMS for each cell in X,Y ;  CTProfile3DProfile3D histograms are used to display the mean value of T and its RMS for each cell in X,Y,Z ;  CTProfileHelper;  ►CTProofThis class controls a Parallel ROOT Facility, PROOF, cluster ;  CMD5Mod_t;  CTProofBenchSteering class for PROOF benchmarks ;  CTProofBenchDataSetHandle operations on datasets used by ProofBench ;  CTProofBenchRunAbstract base class for PROOF benchmark runs ;  CTProofBenchRunCPUCPU-intensive PROOF benchmark test generates events and fill 1, 2, or 3-D histograms ;  CTProofBenchRunDataReadI/O-intensive PROOF benchmark test reads in event files distributed on the cluster ;  CTProofChain;  CTProofCondor;  CTProofDebug;  CTProofDesc;  CTProofDrawImplement Tree drawing using PROOF ;  CTProofDrawEntryList;  CTProofDrawEventList;  CTProofDrawGraph;  CTProofDrawHist;  ►CTProofDrawListOfGraphs;  CPoint3D_t;  ►CTProofDrawListOfPolyMarkers3D;  CPoint4D_t;  CTProofDrawPolyMarker3D;  CTProofDrawProfile;  CTProofDrawProfile2D;  CTProofInputHandler;  CTProofInterruptHandler;  CTProofLimitsFinderClass to find axis limits and synchronize them between workers ;  CTProofLiteThis class starts a PROOF session on the local machine: no daemons, client and master merged, communications via UNIX-like sockets ;  CTProofLockPath;  CTProofLockPathGuard;  CTProofLogImplementation of the PROOF session log handler ;  CTProofLogElem;  CTProofMergePrg;  CTProofMgrThe PROOF manager interacts with the PROOF server coordinator to create or destroy a PROOF session, attach to or detach from existing one, and to monitor any client activity",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:177531,test,test,177531,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['test'],['test']
Testability," versus time.Definition TGeoElement.cxx:1612; TGeoElementRN::RatioTGeoBatemanSol * Ratio() constDefinition TGeoElement.h:188; Another method allows to create the evolution of a given radioactive material/mixture at a given moment in time:; TGeoMaterial::DecayMaterial(Double_t time, Double_t precision=0.001); TGeoMaterial::DecayMaterialvirtual TGeoMaterial * DecayMaterial(Double_t time, Double_t precision=0.001)Create the material representing the decay product of this material at a given time.Definition TGeoMaterial.cxx:671; The method will create the mixture that result from the decay of a initial material/mixture at TIME, while all resulting elements having a fractional weight less than PRECISION are excluded. ; void DrawPopulation(TObjArray *vect, TCanvas *can, Double_t tmin=0.,; Double_t tmax=0., Bool_t logx=kFALSE);; ; void RadioNuclides(); {; TGeoManager *geom = new TGeoManager("""","""");; TGeoElementTable *table = gGeoManager->GetElementTable();; TGeoElementRN *c14 = table->GetElementRN(14,6);; TGeoElementRN *el1 = table->GetElementRN(53,20);; TGeoElementRN *el2 = table->GetElementRN(78,38);; // Radioactive material; TGeoMaterial *mat = new TGeoMaterial(""C14"", c14, 1.3);; printf(""___________________________________________________________\n"");; printf(""Radioactive material:\n"");; mat->Print();; Double_t time = 1.5e11; // seconds; TGeoMaterial *decaymat = mat->DecayMaterial(time);; printf(""Radioactive material evolution after %g years:\n"", time/3.1536e7);; decaymat->Print();; //Radioactive mixture; TGeoMixture *mix = new TGeoMixture(""mix"", 2, 7.3);; mix->AddElement(el1, 0.35);; mix->AddElement(el2, 0.65);; printf(""___________________________________________________________\n"");; printf(""Radioactive mixture:\n"");; mix->Print();; time = 1000.;; decaymat = mix->DecayMaterial(time);; printf(""Radioactive mixture evolution after %g seconds:\n"", time);; decaymat->Print();; TObjArray *vect = new TObjArray();; TCanvas *c1 = new TCanvas(""c1"",""C14 decay"", 800,600);; c1->Set",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RadioNuclides_8C.html:4377,log,logx,4377,doc/master/RadioNuclides_8C.html,https://root.cern,https://root.cern/doc/master/RadioNuclides_8C.html,1,['log'],['logx']
Testability," view window :; l,L - left; h,H - right; u,U - down; i,I - up. void ZoomIn(); Zoom in. void ZoomOut(); Zoom out. void Streamer(TBuffer& ); Stream an object of class TView3D. void Centered(); {Centered3DImages();}. void Front(); {FrontView();}. void ShowAxis(); {ToggleRulers(); }. void Side(); {SideView();}. void Top(); {TopView();}. void ZoomMove(); {ToggleZoom();}. void Zoom(); {ZoomView();}. void UnZoom(); {UnzoomView();}. Double_t GetDview() const; {return fDview;}. Double_t GetDproj() const; {return fDproj;}. Bool_t GetAutoRange(); {return fAutoRange;}. Double_t GetLatitude(); {return fLatitude;}. Double_t GetLongitude(); {return fLongitude;}. Double_t GetPsi(); {return fPsi;}. Double_t * GetRmax(); {return fRmax;}. Double_t * GetRmin(); {return fRmin;}. TSeqCollection * GetOutline(); {return fOutline; }. Double_t * GetTback(); {return fTback;}. Double_t * GetTN(); {return fTN;}. Double_t * GetTnorm(); {return fTnorm;}. Int_t GetSystem(); {return fSystem;}. Double_t GetWindowWidth() const; {return 0.5*(fUVcoord[1]-fUVcoord[0]);}. Double_t GetWindowHeight() const; {return 0.5*(fUVcoord[3]-fUVcoord[2]);}. Bool_t IsPerspective() const; {return TestBit(kPerspective);}. Bool_t IsViewChanged() const; {return fChanged;}. void SetAutoRange(Bool_t autorange = kTRUE); {fAutoRange=autorange;}. void SetDview(Double_t dview); {fDview=dview;}. void SetDproj(Double_t dproj); {fDproj=dproj;}. void SetLatitude(Double_t latitude); {fLatitude = latitude;}. void SetLongitude(Double_t longitude); {fLongitude = longitude;}. void SetPsi(Double_t psi); {fPsi = psi;}. void SetSystem(Int_t system); {fSystem = system;}. void SetViewChanged(Bool_t flag = kTRUE); {fChanged = flag;}. » Author: Rene Brun 19/02/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-15 16:40; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TView3D.html:23442,Test,TestBit,23442,root/html534/TView3D.html,https://root.cern,https://root.cern/root/html534/TView3D.html,1,['Test'],['TestBit']
Testability," view window :; l,L - left; h,H - right; u,U - down; i,I - up. void ZoomIn(); Zoom in. void ZoomOut(); Zoom out. void Streamer(TBuffer& ); Stream an object of class TView3D. void Centered(); {Centered3DImages();}. void Front(); {FrontView();}. void ShowAxis(); {ToggleRulers(); }. void Side(); {SideView();}. void Top(); {TopView();}. void ZoomMove(); {ToggleZoom();}. void Zoom(); {ZoomView();}. void UnZoom(); {UnzoomView();}. Double_t GetDview() const; {return fDview;}. Double_t GetDproj() const; {return fDproj;}. Bool_t GetAutoRange(); {return fAutoRange;}. Double_t GetLatitude(); {return fLatitude;}. Double_t GetLongitude(); {return fLongitude;}. Double_t GetPsi(); {return fPsi;}. Double_t * GetRmax(); {return fRmax;}. Double_t * GetRmin(); {return fRmin;}. TSeqCollection * GetOutline(); {return fOutline; }. Double_t * GetTback(); {return fTback;}. Double_t * GetTN(); {return fTN;}. Double_t * GetTnorm(); {return fTnorm;}. Int_t GetSystem(); {return fSystem;}. Double_t GetWindowWidth() const; {return 0.5*(fUVcoord[1]-fUVcoord[0]);}. Double_t GetWindowHeight() const; {return 0.5*(fUVcoord[3]-fUVcoord[2]);}. Bool_t IsPerspective() const; {return TestBit(kPerspective);}. Bool_t IsViewChanged() const; {return fChanged;}. void SetAutoRange(Bool_t autorange = kTRUE); {fAutoRange=autorange;}. void SetDview(Double_t dview); {fDview=dview;}. void SetDproj(Double_t dproj); {fDproj=dproj;}. void SetLatitude(Double_t latitude); {fLatitude = latitude;}. void SetLongitude(Double_t longitude); {fLongitude = longitude;}. void SetPsi(Double_t psi); {fPsi = psi;}. void SetSystem(Int_t system); {fSystem = system;}. void SetViewChanged(Bool_t flag = kTRUE); {fChanged = flag;}. » Author: Rene Brun 19/02/2007 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TView3D.html:24990,Test,TestBit,24990,root/html604/TView3D.html,https://root.cern,https://root.cern/root/html604/TView3D.html,1,['Test'],['TestBit']
