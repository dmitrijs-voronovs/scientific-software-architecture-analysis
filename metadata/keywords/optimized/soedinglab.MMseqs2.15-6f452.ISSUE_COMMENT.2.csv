quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Performance,"It seems like you accidentally defeated a speed-up mechanism by setting `-s 0.5`. ; By setting `-s` <= `--orf-filter-s` it deactivates this optimization.; In this mode, we first do a very low sensitivity search to see if an extracted ORF can find anything at all in the target database, thus we can reject a lot of fragments that won't be able to contribute at all later. You can try setting `--orf-filter-s 1` instead and leave the default sensitivity.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/422#issuecomment-795337964:140,optimiz,optimization,140,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/422#issuecomment-795337964,1,['optimiz'],['optimization']
Performance,It would help if you could provide a log file. So I can see which module is slow. . The database does not stay necessarily memory. The OS can reuse the memory. The memory just got memory mapped by mmseqs2 (depending on the --db-load-mode).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-507070096:228,load,load-mode,228,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-507070096,1,['load'],['load-mode']
Performance,"It's related with the cluster evaluation and representative selection we are using. We need to find a compromise between speed and I/O bottlenecks. Now we were using `createsudb` to query the DB and get DBs for each cluster and distribute it in the HPC cluster to perform our validation, but it takes a long time, the original DB is ~250M proteins. It is faster when we have the files in the scratch partition of each node and the files partitioned in folders. This is the fastest way we found so far, from `createseqfiledb`:; ```; mawk '{if ($0 ~ /^\x0/ || NR == 1){gsub(""\x0"","""",$0); print ""#""$0; print $0}else{print $0}}' DB_clu_fa | csplit -z --suppress-matched -s -f cluster_ -b ""%01d.fa"" - '^#/' {*}; ```; After we split the ~32M files in folders with 100K files in each. All of this done in a fast SSD partition. Do you have any suggestions?. Thanks",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343725229:135,bottleneck,bottlenecks,135,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343725229,2,"['bottleneck', 'perform']","['bottlenecks', 'perform']"
Performance,"Just got a hang here:; ...; [===============================================================> ] 98.28% 35.40[===============================================================> ] 98.28% 35.41[================================================================>] 99.28% 35.77[=================================================================] 100.00% 36.03K 3s 736ms; Time for merging to aln_swapped: 0h 0m 0s 23ms; 103611 alignments calculated; 72095 sequence pairs passed the thresholds (0.695824 of overall calculated); 2.001194 hits per query sequence; Time for processing: 0h 0m 3s 787ms; swapresults /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/DBPROFILE/targetannotation_profile /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/DBPROFILE/query /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/DBPROFILE/tmp/7458066464536510288/aln_swapped /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/DBPROFILE/results_aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 10000 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 16 --compressed 0 --db-load-mode 0 -v 3",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-869012776:1186,load,load-mode,1186,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-869012776,1,['load'],['load-mode']
Performance,"KRHGR3W5473P5ESTPA5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODY4UNEA#issuecomment-507070096>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMYW6UIXY2PZFDTSZDP5ESTPANCNFSM4H333Q6Q>. createdb test_reads/S1E3-S3_assembled_kneaddata.fastq mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Max sequence length 	65535; Split seq. by length 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. Assuming DNA database, forcing parameter --dont-split-seq-by-len true; Converting sequences; [	1 Mio. sequences processed; 	2 Mio. sequences processed; 	3 Mio. sequences processed; 	4 Mio. sequences processed; 	5 Mio. sequences processed. Time for merging files: 0h 0m 4s 846ms; Time for merging files: 0h 0m 35s 669ms; Time for merging files: 0h 0m 1s 887ms; Time for processing: 0h 1m 53s 245ms; search mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB tmp --db-load-mode 3 --threads 2 --max-seqs 25 -s 1 -a -e 1e-5 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Add backtrace 	true; Alignment mode 	2; E-value threshold 	1e-05; Seq. id. threshold 	0; Min. alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Realign hits 	false; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	3; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	2; Compressed 	0; Verbosity 	3; Seed substitution matrix 	VTML80.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max results per query 	25; Previous max results per query 	; Split database 	0; Split mode 	2; ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:2203,load,load-mode,2203,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['load'],['load-mode']
Performance,"L80.out; Estimated memory consumption 372556 MB; Target database size: 134985288 type: Aminoacid; Query database size: 12189231 type: Aminoacid; Process prefiltering step 1 of 1. k-mer similarity threshold: 174; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 12189231; Target db start 1 to 134985288; [] 5h 25m 52s 523ms. 5.520466 k-mers per position; 7748 DB matches per sequence; 0 overflows; 11 sequences passed prefiltering per query sequence; 8 median result list length; 2084890 sequences with 0 size result lists. Time for prefiltering scores calculation: 5h 25m 59s 596ms; Time for merging files: 0h 0m 17s 47ms; Time for processing: 5h 28m 30s 18ms; align tmp/15531098257495296432/q_orfs_aa /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/search/pref_0 tmp/15531098257495296432/aln --sub-mat blosum62.out -a 1 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 3 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 2 --compressed 0 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Compute score, coverage and sequence identity; Query database size: 12189231 type: Aminoacid; Target database size: 134985288 type: Aminoacid; Calculation of alignments; [] 3h 56m 20s 209ms; Time for merging files: 0h 0m 13s 891ms. 138555514 alignments calculated.; 54047267 sequence pairs passed the thresholds (0.390077 of overall calculated).; 4.434018 hits per query sequence.; Time for processing: 3h 56m 39s 222ms; offsetalignment mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/aln mmseqs-test-megan-out-280619/mmseqs-S",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:6351,load,load-mode,6351,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['load'],['load-mode']
Performance,"LLMGAG_27929269397/taxonomy/tmp/. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Verbosity 	3; Sensitivity 	6; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	1; Start sensitivity 	1; Search steps 	3; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Remove Temporary Files 	false; LCA Ranks 	phylum:superphylum:subkingdom:kingdom:superkingdom; Blacklisted Taxa 	12908,28384; LCA Mode 	2; Remove Temporary Files 	false; Sets the MPI runner. Program call:; search /tmp/global2/n",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032:1409,perform,performs,1409,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032,1,['perform'],['performs']
Performance,"Linclust is just not super well optimized to exploit MPI very well since it clusters up to the max of 2^32 sequences in a day or so on our servers. A lot of time is probably also spent on IO operations, which are necessary for MPI to workand are not needed in the non-MPI version. I would recommend only to try out the MPI version when you get to datasets of a few hundred million to billions of sequences. Or in case you run `easy-cluster` as martin said, `easy-cluster` runs Linclust as a preclustering step and then runs the way more compute intensive `prefilter` and `align` algorithms. These can profit a lot from MPI.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/331#issuecomment-665657349:32,optimiz,optimized,32,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/331#issuecomment-665657349,1,['optimiz'],['optimized']
Performance,MMseqs2 is optimized to process multiple queries at once. So it would make sense to package your search into a big fasta file. If you'd like to perform fast single queries against large databases then our [MMseqs2-App](https://github.com/soedinglab/MMseqs2-App) (server) might be a good solution. This keeps the index of the target database in memory.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/523#issuecomment-1027633776:11,optimiz,optimized,11,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/523#issuecomment-1027633776,2,"['optimiz', 'perform']","['optimized', 'perform']"
Performance,"Not personally. But we have used the server on two completely differently spec-ed servers and the performance is okay both time:. * 1x AMD Epyc 7713P / 2TB RAM / Debian 11 / AVX2 build (occasional fallback server); * 8x Intel Xeon E7-8891 v2 / 4TB RAM / CentOS / SSE41 build (main server). As you can see the two systems are very different. However, we never tried to run on top of any virtualization. That seems to be the only really different variable. (The RAM on both systems is overkill, but these are the servers we have). Could you try to run a SSE41 build and not an AVX2 build? I wonder if the virtualization is intercepting some AVX2 instruction and making everything slow. You can compile MMseqs2 with:; ```; cmake -DHAVE_SSE4_1=1 .......; make ......; ````",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1510719536:98,perform,performance,98,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1510719536,1,['perform'],['performance']
Performance,"Okay I am not sure how to reproduce the issue. It doesn't crash here. ; Does it crash consistently? . Can you please repeat only the linclust call with the same tmp files:; ```; mmseqs linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461591707:824,load,load-mode,824,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461591707,1,['load'],['load-mode']
Performance,Okay maybe that's not the issue since cmake claims to have found the various SIMD instruction sets to work:; ```; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396924050:117,Perform,Performing,117,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396924050,14,['Perform'],['Performing']
Performance,"Okay, I did some looking and found that our cluster is capable of also running openmpi instead of mvapich2. Unsurpisingly, after loading this and recompiling the program, it works as you said. Thank you!. Fyi if you all are looking to debug for the mvapich2 system, this is the error that comes after running those commands on this system (happy to test any issues/fixes here if it's useful to you):; ```; (gdb) bt; #0 0x00007ffff7186abc in MPID_Abort () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #1 0x00007ffff71419db in MPIR_Handle_fatal_error () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #2 0x00007ffff7141b59 in MPIR_Err_return_comm () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #3 0x00007ffff70fa699 in PMPI_Init () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #4 0x0000000000479714 in MMseqsMPI::init(int, char const**) (); #5 0x00000000005d44a1 in kmermatcher(int, char const**, Command const&) (); #6 0x000000000046f2f9 in runCommand(Command*, int, char const**) (); #7 0x000000000045af9b in main (); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461685569:129,load,loading,129,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461685569,1,['load'],['loading']
Performance,"Please run only the `rescorediagonal` module in GDB or it won't be able to catch the crash:; ```; gdb --args mmseqs rescorediagonal /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/input_step_redundancy /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/input_step_redundancy /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_filter2 /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_rescore2 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 1 --wrapped-scoring 0 --filter-hits 1 -e 0.001 -c 0.9 -a 0; --cov-mode 1 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 96 --compressed 0 -v 3; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649893743:705,load,load-mode,705,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649893743,1,['load'],['load-mode']
Performance,"Process prefiltering step 1 of 1. k-mer similarity threshold: 118; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 2271004; Target db start 1 to 13003941; [=================================================================] 2.27M 43m 26s 530ms. 3262.541404 k-mers per position; 476704 DB matches per sequence; 0 overflows; 0 sequences passed prefiltering per query sequence; 1 median result list length; 18145 sequences with 0 size result lists; Time for merging to pref_2: 0h 0m 0s 779ms; Time for processing: 0h 46m 49s 482ms; align tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_1 /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/search/pref_2 tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_2 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 40 --compressed 0 -v 3 . Compute score, coverage and sequence identity; Query database size: 2271004 type: Aminoacid; Target database size: 13003941 type: Aminoacid; Calculation of alignments; [=================================================================] 2.27M 3s 348ms; Time for merging to aln_2: 0h 0m 0s 785ms. 2252859 alignments calculated.; 16146 sequence pairs passed the thresholds (0.007167 of overall calculated).; 0.007110 hits per query sequence.; Time for processing: 0h 0m 5s 939ms; mergedbs tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa tmp/9700814981231218113/search_tmp/10627605686170015473/aln tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_2 --compressed 0 -v 3 . Merging the results to tm",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:13704,load,load-mode,13704,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['load'],['load-mode']
Performance,"Process prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 124; Target db start 1 to 124; [=================================================================] 100.00% 124 0s 29ms. 0.916862 k-mers per position; 1 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step0: 0h 0m 0s 1ms; Time for processing: 0h 0m 1s 849ms; align tmp//7897776346521331899/input_step_redundancy tmp//7897776346521331899/input_step_redundancy tmp//7897776346521331899/pref_step0 tmp//7897776346521331899/aln_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 124 type: Aminoacid; Target database size: 124 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 124 0s 23ms; Time for merging to aln_step0: 0h 0m 0s 1ms; 124 alignments calculated; 124 sequence pairs passed the thresholds (1.000000 of overall calculated); 1.000000 hits per query sequence; Time for processing: 0h 0m 0s 72ms; clust tmp//7897776346521331899/input_step_redundancy tmp//7897776346521331899/aln_step0 tmp//7897776346521331899/clu_step0 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:13533,load,load-mode,13533,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['load'],['load-mode']
Performance,"Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Chain overlapping alignments 	0; Search type 	0; Number search iterations 	1; Start sensitivity 	4; Search steps 	1; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Force restart using the latest tmp 	false; Remove Temporary Files 	false; LCA Ranks 	kingdom:phylum:class:order:family:genus:species; Blacklisted Taxa 	12908,28384; LCA Mode 	3; Match sequences by their ID 	false; Remove Temporary Files 	false; Sets the MPI runner. Program call:; search clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus tmp_part-14/8093924424180559474/first tmp_part-14/8093924424180559474/tmp_hsp1 --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 --compressed 0 -v 3 --seed-sub-mat VTML80.out -s 5.7 -k 0 --k-score 2147483647 --alph-size 21 --max-seqs 200 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --spaced-kmer-mode 1 --rescore-mode 0 --filter-hits 0 --sort-results 0 --global-alignment 0 --mask-profile 1 --e-profile 0.001 --wg 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --omit-consensus 0 --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --add-orf-stop 0 --chain-alignments 0 --search-type 0 --num-iterations 1 --start-sens 4 --se",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:4029,load,load-mode,4029,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['load'],['load-mode']
Performance,SIMDe ARM64 performance seems to be problematic. There is still some minor difference in the PROFILE regression test (AUC: 0.36739**6** vs 0.36739**8**). However the runtime is over 2x slower (14min vs 31min). I think we might want to keep sse2neon at least in the short term until SIMDe can catch. I guess PPCLE will be similar (the work for that was still incomplete though). HEAD: https://travis-ci.org/github/soedinglab/MMseqs2/jobs/687741954; PR: https://travis-ci.org/github/soedinglab/MMseqs2/jobs/688351766,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630190990:12,perform,performance,12,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630190990,1,['perform'],['performance']
Performance,"Shared libraries are usually loaded in many popular scripting languages (i.e. Julia, Python, R); https://docs.julialang.org/en/release-0.6/manual/calling-c-and-fortran-code/; https://docs.python.org/3/library/ctypes.html; https://www.rdocumentation.org/packages/base/versions/3.4.3/topics/dyn.load. I could call externally command line tool, but library could more elegant.; Basically I would like to obtain BLAST-like bit-scores in all-vs-all comparisons between multiple fasta files with protein sequences.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/81#issuecomment-381913569:29,load,loaded,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/81#issuecomment-381913569,2,['load'],"['load', 'loaded']"
Performance,So what's going on is that you created an index with `createindex` that was not aware of how large it may become. So it was created to use as much memory as possible. You would have to call `createindex` also with `--split-memory-limit`. This split indices work but have unexpected performance pitfalls: You need to have the index on a fast IO system so you can import each split into memory fast enough. Since the index is larger than the input sequences it can be faster to just recompute the index on the fly instead of reading in an existing one.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/338#issuecomment-664995019:282,perform,performance,282,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/338#issuecomment-664995019,1,['perform'],['performance']
Performance,"Sorry I didn't update the documentation. The `_taxonomy` file is something new, it contains all the `.dmp` files in a binary format that is instantly loadable (no more 5-7s delay every time the taxonomy database is used).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771793382:150,load,loadable,150,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771793382,1,['load'],['loadable']
Performance,"Sorry I was traveling. I don't see anything out of the ordinary in your screenshot. ; I still don't really have an idea whats going on. I repeated the UniRef search with your query on the MSA server:; ```; Command being timed: ""mmseqs search mmseq_in_db uniref30_2202_db mmseq_in_res mmseq_in_tmp --threads 1 --num-iterations 3 --db-load-mode 2 -a -s 8 -e 0.1 --max-seqs 10000""; User time (seconds): 13.10; System time (seconds): 21.13; Percent of CPU this job got: 99%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:34.23; Average shared text size (kbytes): 0; Average unshared data size (kbytes): 0; Average stack size (kbytes): 0; Average total size (kbytes): 0; Maximum resident set size (kbytes): 19188072; Average resident set size (kbytes): 0; Major (requiring I/O) page faults: 0; Minor (reclaiming a frame) page faults: 9091215; Voluntary context switches: 57; Involuntary context switches: 503; Swaps: 0; File system inputs: 0; File system outputs: 8888; Socket messages sent: 0; Socket messages received: 0; Signals delivered: 0; Page size (bytes): 4096; Exit status: 0; ```. One thing we do differently since we still have enough spare CPU capacity on the server is enable some limited multithreading and parallel processing. We use `--threads 2`, which will hide quite a bit of overhead in your use-case:; ```; User time (seconds): 12.32; System time (seconds): 20.86; Percent of CPU this job got: 132%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:25.12; ```. And we also start the env-db and template search in parallel to the expand-align steps. ; (`path.colabfold.parallelstages` parameter in the API server). This will hide quite a bit of latency. However, the initial search is still a lot faster for us despite worse CPU/RAM specs. . Can you check if `vmtouch` has actually but everything into RAM? `htop` should look something like this:; ```; root 20 0 605G 605G 605G S 0.0 15.0 6:22.98 /home/steineggerlab/miniforge3/bin/vmtouch -f -t -l -m 4000 colabfold_envdb_202108.idx pd",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1407974953:333,load,load-mode,333,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1407974953,1,['load'],['load-mode']
Performance,"Sorry for hijacking the issue again. kClust, the predecessor of MMseqs2, has a utility called kClust_mkAln (https://github.com/soedinglab/kClust). kClust_mkAln calls either clustalo or kalign to perform multiple sequence alignment (i.e. all-against-all, not all-against-representative) within each cluster. Is it possible to do similar thing in MMseqs2?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/60#issuecomment-376538177:195,perform,perform,195,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/60#issuecomment-376538177,1,['perform'],['perform']
Performance,"Sorry for the delay to answer. Thank you for giving some help to avoir the problem. I give you the output with `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; ```; #0 DBReader<unsigned int>::sortIndex (this=this@entry=0x7ffe5bd0a970, isSortedById=isSortedById@entry=false) at /path/to/MMseqs2/src/commons/DBReader.cpp:249; #1 0x00000000004fbc6b in DBReader<unsigned int>::open (this=this@entry=0x7ffe5bd0a970, accessType=accessType@entry=0) at /path/to/MMseqs2/src/commons/MemoryTracker.h:13; #2 0x00000000005c1c81 in indexdb (argc=<optimized out>, argv=<optimized out>, command=...) at /path/to//MMseqs2/src/util/indexdb.cpp:64; #3 0x0000000000471e20 in runCommand (p=0x2394310, argc=argc@entry=36, argv=argv@entry=0x7ffe5bd0af48) at /path/to/MMseqs2/src/commons/Application.cpp:40; #4 0x0000000000460455 in main (argc=38, argv=0x7ffe5bd0af38) at /path/to/MMseqs2/src/commons/Application.cpp:203; ```; As you said it is a issue with the max size, the size is greater than 4294967295 (unsigned int), so it becomes an infinite loop. Do you have see a solution in a long term goal about this problem?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-968758784:522,optimiz,optimized,522,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-968758784,2,['optimiz'],['optimized']
Performance,"Sure, these are the commands used for performing protein to protein search with a modified substitution matrix (changed the score for X). `mmseqs createdb TestDB_Subject.fa testRun/targetDB; `; `mmseqs createdb TestQuery.fa testRun/queryDB; `; `mmseqs createindex --mask 0 testRun/targetDB testRun/tmp --comp-bias-corr 0 --seed-sub-mat PAM10_modified.out`. `mmseqs search testRun/queryDB testRun/targetDB testRun/resultDB testRun/tmp --comp-bias-corr 0 --mask 0 --sub-mat PAM10_modified.out -a`. `mmseqs convertalis testRun/queryDB testRun/targetDB testRun/resultDB testRun/resultDB.m8 --sub-mat PAM10_modified.out`. The result matrix <img width=""1137"" alt=""ResultTable"" src=""https://user-images.githubusercontent.com/3918230/59648222-e42df700-91b0-11e9-92f1-3aaf27cc2e58.png"">. [TestDB_Subject.txt](https://github.com/soedinglab/MMseqs2/files/3299493/TestDB_Subject.txt); [TestQuery.txt](https://github.com/soedinglab/MMseqs2/files/3299494/TestQuery.txt); [PAM10_modified.txt](https://github.com/soedinglab/MMseqs2/files/3299495/PAM10_modified.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-502917178:38,perform,performing,38,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-502917178,1,['perform'],['performing']
Performance,"Thank you - --max-seqs really works. For now I wanted to make the alignments to include more sequences,; especially near threshold, than they did. Increasing the number of; sequences made the change. Now I can play with inclusion thresholds. niedz., 1 kwi 2018 o 15:57 użytkownik Martin Steinegger <; notifications@github.com> napisał:. > The parameter --max-seqs was always available but there was a stopped; > mmseqs from printing out the parameter. The printout problem should be; > resolved now.; >; > How do you benchmark the performance?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/APQmI4PjSUD8eJYrs1QQNM6xcDq8Rm8Bks5tkNzAgaJpZM4TCzs3>; > .; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-378337962:531,perform,performance,531,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-378337962,1,['perform'],['performance']
Performance,"Thank you for sharing your example. However I can also not reproduce the error. In your example there is only one alignment to a sequence, which `lca` classifies as `30551	species	Staphylococcus pseudintermedius`. I am running out of ideas how to help. ```; lca gtdb_54kDB top1 /Users/mad/Downloads/top_results/lca. MMseqs Version: 	0a1348be78bd84137bdb373ba32e0e8c054b3e1c; Compressed 	0; LCA ranks; Blacklisted taxa 	12908,28384; Show taxon lineage	false; Threads 	12; Verbosity 	3. Loading NCBI taxonomy; Loading nodes file ... Done, got 36283 nodes; Loading merged file ... Done, added 0 merged nodes.; Loading names file ... Done; Making matrix ... Done; Init RMQ ...Done; Computing LCA; [=================================================================] 100.00% 100 0s 2ms. Taxonomy for 0 entries not found out of 1; Time for merging to lca: 0h 0m 0s 1ms; Time for processing: 0h 0m 17s 334ms; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-571332537:485,Load,Loading,485,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-571332537,4,['Load'],['Loading']
Performance,"Thank you for the answer!. I tried this command (so because I already have this prepared DB). ```; mmseqs nrtotaxmapping /media/tertiary/database_nr/prot.accession2taxid nr_20210908_mmseqDB tax.tsv --threads 6 ; nrtotaxmapping /media/tertiary/database_nr/prot.accession2taxid nr_20210908_mmseqDB tax.tsv --threads 6; ```. But I catched the error . ```; MMseqs Version: 13.45111; Threads 6; Verbosity 3. Loading NCBI taxonomy1ms; names.dmp, nodes.dmp, merged.dmp from NCBI taxdump could not be found!; ```. And now I am trying this one :D . `mmseqs databases NR NR_tax_mmseqs tmp`. For now last databases module works, hope, everything will be alright!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/490#issuecomment-923020460:403,Load,Loading,403,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/490#issuecomment-923020460,1,['Load'],['Loading']
Performance,"Thank you for the fast response and suggestion for a temporary fix. Although, the `--retry*` flags for both curl and wget don't appear to apply for SSL-related connection errors, so neither will retry in this situation. I think it's necessary to perform the retries at the outer-scope—i.e., try the download and check for the file locally.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/706#issuecomment-1557764725:246,perform,perform,246,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/706#issuecomment-1557764725,1,['perform'],['perform']
Performance,"Thank you for the help, I missed the part about the index being fully loaded in the memory (instead I read in the article that a db used multiple times should be indexed, which sounds broader than the niche use case you describe). . As #519 mentions, what is the difference between `concat` and `merge` ? I guess a sequence present in both `DB` will be search only once and reported with both `qset` with `merge` and twice in `concat` ? That would a huge advantage for my work as I have replicates. Also, is there a way to determine how big the index will be ? I suppose it depends on the `max-seq-len` parameter ?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1734289077:70,load,loaded,70,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1734289077,1,['load'],['loaded']
Performance,"Thank you for the log. . If you use `--start-sens 1 --sens-steps 3 -s 6` then MMseqs2 performs three searches with the sensitivity `-s 1`, `-s 3.5` and `-s 6` while in each step previously successful aligned sequences are left out. From your log I can see that the most sensitive search `-s 6` took `46m 49s 482ms` while not resulting in a much deeper annotation. Only 16146 extra ORFs sequences got annotated while the searches with `-s 1` and `-s 3.5` annotated already 277629. Searching with `-s 6` is also more sensitive compare to DIAMOND (see https://github.com/soedinglab/MMseqs2/wiki#set-sensitivity--s-parameter). The respective sensitivity should be DIAMONDS `--more-sensitive`. . My recommendation would be to search the following way:. time mmseqs easy-search MOMZ_moomz1_200m.fna /d/Databases/Kegg/sram/mmseqs/ke; gg mmseqs_results2.m8 tmp -s 3.5 --max-accept 1 --max-rejected 5 . This should roughly take 6-7 minutes.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535275835:86,perform,performs,86,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535275835,1,['perform'],['performs']
Performance,Thank you for the workflow. I'll try that. For now as I explore the software a little bit (I'm amazed with its speed and scalability) I cluster smaller database. A part of my workflow is generating profiles for pdb_05_rep database based on nr70_rep database:; ```; mmseqs search pdb_05_rep nr70_rep pdb_05_res tmp --num-iterations 3 ; mmseqs result2profile pdb_05_rep nr70_rep pdb_05_res pdb_05_profile; ```; The second command however blasts my bash with these warnings:. > Warning in /opt/install/MMseq2/src/alignment/MsaFilter.cpp:244: filter:; > Filtering removed all sequences in alignment. Inserting back first sequence. Is that OK? Or something went wrong with the procedure?. And further I run:; ```; mmseqs search pdb_05_profile pdb_05_rep pdb_05_pp_res tmp --threads 110 -e 0.05; mmseqs clust pdb_05_profile pdb_05_pp_res pdb_05_pp_clu --threads 110 --cluster-mode 1 --similarity-type 1; ```; and the second procedure outputs many warnings like:. > ERROR: Sequence !; > ERROR: Sequence 19899 does not contain any sequence for key 933920594 does not contain any sequence for key 21608!; > ERROR: Sequence 20595 does not contain any sequence for key 21655!; > ERROR: Sequence 20596 does not contain any sequence for key 21670!; > ERROR: Sequence 2059723896 does not contain any sequence for key !; > ERROR: Sequence 23698 does not contain any sequence for key 7521!; > ERROR: Sequence 23699 does not contain any sequence for key 7526!; > does not contain any sequence for key 21683!. to give only few.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-368807680:121,scalab,scalability,121,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-368807680,1,['scalab'],['scalability']
Performance,"Thank you for your reply; my target sequences are some CDS sequences download from NCBI, and query sequences are some sequences fragment of 300bp; here are some partial sequences of the target and query file.; [https://gist.github.com/hwy7/cd5486d2a61c3b6bfe990a3ada669318](url); Please let me know if you need any more information or if there are specific analyses you would like to perform with this data.; Thanks",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/747#issuecomment-1706780853:384,perform,perform,384,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/747#issuecomment-1706780853,1,['perform'],['perform']
Performance,"Thanks @martin-steinegger for the clarification!. Regarding issue 1, would a solution be to not perform cascaded clustering using `--single-step-clustering`? I'm actually looking to perform hierarchical neighbour-joining clustering of the sequences using steps of decreasing similarity thresholds, so perhaps cascaded clustering is not necessary. Also, does this mean that the result from `mmseqs createtsv` in my current setup is incorrect for nucleotide sequences?. Regarding issue 2, what would be a (hack) solution to get the alignments? Creating a database from the cluster representatives and mapping the cluster members to that database manually using `mmseqs align`?. I followed the example you give in the [FAQ](https://github.com/soedinglab/mmseqs2/wiki#how-to-add-sequence-identities-and-other-alignment-information-to-a-clustering-result), so please indicate that this does not lead to good results in case of nucleotide sequences.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/268#issuecomment-580648087:96,perform,perform,96,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/268#issuecomment-580648087,2,['perform'],['perform']
Performance,"Thanks @milot-mirdita! After reinstalling the updated version from git, that error is gone. But I got a new one says:. ```; majoritylca /scratch/ref/hecatomb_databases/virus_uniprot/targetDB ./results/contigs/mmseqs_aa_out/taxonomyResult ./results/contigs/mmseqs_aa_out/lcaDB --tax-lineage 1 --lca-ranks superkingdom,phylum,class,order,family,genus,species . MMseqs Version: 6672bbc9de55e89b011c8a055982a2644d31a467; Majority threshold 0.5; Vote mode 1; LCA ranks superkingdom,phylum,class,order,family,genus,species; Taxon blacklist 12908,28384; Column with taxonomic lineage 1; Compressed 0; Threads 24; Verbosity 3. Loading NCBI taxonomy; Loading nodes file ... Done, got 2227973 nodes; Loading merged file ... Done, added 56613 merged nodes.; Loading names file ... Done; Init RMQ ...Done; Computing LCA; [====taxonid: 1046081 does not match a legal taxonomy node.; ================================taxonid: 1046081 does not match a legal taxonomy node.; ===============taxonid: 1046081 does not match a legal taxonomy node.; =============. ```. So..do you have any suggestion on this one?. Thank you!!; Leran",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/387#issuecomment-759664504:619,Load,Loading,619,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/387#issuecomment-759664504,4,['Load'],['Loading']
Performance,"Thanks Milot, the --split 1 workaround has worked, specifiying it at index creation time and search time, although it complains about not having enough memory, it finishes:. ```; Initialising data structures...; Using 64 threads. Use index /junk/databases/mmseqs/nr.sk7; Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Query database: mmseq-testDB(size=2467); Target database: /junk/databases/mmseqs/nr(size=121935717); Use kmer size 7 and split 1 using split mode 0; Needed memory (699399167230 byte) of total memory (541058265088 byte); WARNING: MMseqs processes needs more main memory than available.Increase the size o f --split or set it to 0 to automatic optimize target database split.; WARNING: Split has to be computed by createindex if precomputed index is used.; Substitution matrices...; Time for init: 0 h 0 m 23s; ```; The index file size is around 300GB, so it's asking more than double.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301116501:709,optimiz,optimize,709,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301116501,1,['optimiz'],['optimize']
Performance,"Thanks a lot for the help, @milot-mirdita . Build PROFILEDB and search with this was successful.; final steps:; > mmseqs search PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile tmp --threads 10 -a -c 0.8 --cov-mode 2 --add-self-matches ; > mmseqs convertalis PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile pbp.found_with_profile.tsv . At this point, everything okay. ; The step below also was performed nicely without errors. ; > mmseqs extractalignedregion PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile pbp.found_with_profile.ALIGNEDREGION . The crash happens here:; > mmseqs convert2fasta pbp.found_with_profile.ALIGNEDREGIONS pbp.found_with_profile.ALIGNEDREGIONS.fa . With this message:; ```; Program call:; convert2fasta pbp.found_with_profile.ALIGNEDREGIONS pbp.found_with_profile.ALIGNEDREGIONS.fa . MMseqs Version: 	7-4e23d; Use ffindex header	false; Verbosity 	3. Could not open data file pbp.found_with_profile.ALIGNEDREGIONS!; ```. But I realised maybe I did everything wrong. . What I want, actually, is the MSA for each cluster with only aligned regions. ; Also, I want the MSA of aligned regions from a search result. The deal is: I have 501 queries single domain, I would to use this against a 17M sequences DB, since the matches probably have at least 1 region contains the same domain as the query, I would like the MSA or even a sequence DB itself contain **only the regions of the match**. ; Extracting only the region of the matches allow me to infer more accurate alignments and phylogeny. Also allow me build specifics models. . Could you provide me a simple workflow to this task?. Thanks in advance.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458988413:431,perform,performed,431,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458988413,1,['perform'],['performed']
Performance,"Thanks a lot for the help, Milot!; Here is the gdb outputs:. $ gdb --args mmseqs swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3; GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1; Copyright (C) 2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs...(no debugging symbols found)...done.; (gdb) r; Starting program: /ebio/abt6_projects8/1001g_plus/code/Programs/miniconda3/envs/MMseqs2/bin/mmseqs swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-exte",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840:598,load,load-mode,598,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840,1,['load'],['load-mode']
Performance,"Thanks a lot for the log!. The prefilter takes 15 minutes, while the alignment runs for 4.5 hours. I think your `--max-seqs` is way to high since in average only 4000 hits are accepted by the alignment. You could reduce `--max-seqs` to 100.000 without losing many, if any at all, hits. . Another tweak is using the property of the prefilter results, that they are already well sorted and distinguish well between homologs and non-homologs. It is possible to reduce the run time without losing many, if any, hits of the alignment by using the `--max-rejected` parameter. It stops aligning after `N` consecutive rejected alignments (alignments that do not fulfill the alignment criteria). You could try `--max-rejected 10.` . Another tweak would be to increase the `--min-ungapped-score`. I have never really optimized this parameter. It could lead to a huge gains in speed for the alignment by rejecting prefilter hits more strictly. Try `--min-ungapped-score 30`. You mentioned in an email that you also tested DIAMOND and it was less sensitive. Could you please give us your comparison results?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408840948:807,optimiz,optimized,807,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408840948,1,['optimiz'],['optimized']
Performance,"Thanks for the fast feedback!; Here are the requested info about our architecture. I'll try the two suggestions (no indexing, and indexing without the --split) as soon as our machine is free again (a big cd-hit is swapping like crazy)... ```; $ uname -a . Linux bioinfo 4.4.0-38-generic #57-Ubuntu SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux. $ cat /proc/cpuinfo. processor : 23; vendor_id : GenuineIntel; cpu family : 6; model : 62; model name : Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz; stepping : 4; microcode : 0x416; cpu MHz : 1228.906; cache size : 15360 KB; physical id : 1; siblings : 12; core id : 5; cpu cores : 6; apicid : 43; initial apicid : 43; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm ida arat pln pts; bugs :; bogomips : 5189.25; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-250500053:562,cache,cache,562,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-250500053,1,['cache'],['cache']
Performance,"Thanks for the hint. I'll try that. I'm using redundancy reduced database - pdb_05 is PDB Seqres database clustered with e-value 0.05, and the profiles are generated for pdb_05 sequences on nr70 database, which is nr clustered to 70% sequence identity. As to computer - yes, I'm using 120 cores single machine (it has four Xeons E7-4890 v2). The software; scales up amazingly. Now I'm computing 6it profiles for 31M sequences and; that will be accomplished in few days (prefiltering scores calculation took 65 h 52 m 33s). I see that when calculating S-W alignments the soft crunches the data using all given threads but after finishing million of sequences (or leaning towards finishing that million) it runs gradually on less and lass cores (perhaps some cores were given more time consuming alignments so the program might estimate times and balance threads more efficiently, but this is very minor and would be noticed for users working on big databases only), which might be a speed bottleneck for big dataset such as nr database processed on big machines. In few days I'll start tests also with MPI run, so that mmseqs2 will be ran; on 1600 CPUs on cluster (here I wish the software had used GPUs as the cluster I'm using has additionally some Firepros to use - I write it smiling as MMseqs2 is light years ahead of cd-hit, which I was using to date). I'll give you a feedback on the speed soon then.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733:988,bottleneck,bottleneck,988,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733,1,['bottleneck'],['bottleneck']
Performance,"Thanks for the pointer. I did not look at biocontainers before, cool to see that MMseqs2 is on there. As far as I can tell, biocontainer are optimized for application shipping aka. they only include the absolute bare minimum required for that application. In fact the containers built by biocontainer seem to be based on busybox, which makes it hard to extend them. Since my goal right now is to build a container that includes MMseqs2 + additional tooling, biocontainers is not an ideal solution for me. The only way I could use it is if I manage to extract the compiled MMseqs files from the container and include that into another one. However that might be rather fragile and complex. . An easier solution could be to add a Dockerfile recipe to biocontainers which will then build the docker image and push it to dockerhub (at least that is how I interpret it). ; Another potentially easy solution would be to use [github's container registry](https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-container-registry) to publish containers directly there.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/541#issuecomment-1052123411:141,optimiz,optimized,141,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/541#issuecomment-1052123411,1,['optimiz'],['optimized']
Performance,"Thanks for the quick and detailed feedback! Partial answer:; 1) awk, zlib, bzip2, and omp are included in the FreeBSD base, so no package dependency needed.; 2) Generally, FreeBSD ports respect the user's env regarding build options and of course the binary package has to be pessimistic about hardware. I'll check on the baseline assumptions and what clang -O2 emits, though. I was also thinking of adding a package message suggesting that it be built from source with more agressive optimizations to get better performance. That's trivial to do with FreeBSD ports. I wanted to sneak the commit in before the quarterly branch coming next week so it's at least available in the next quarterly package set, I haven't put much effort into perfecting it yet. With your feedback I should be able to make some good improvements by then.; 3) Do you actually plan to continue support for 32-bit platforms? It's disabled for many bioinformatics ports already.; I'll look into the rest of your comments ASAP.; BTW, this is the first time in my lengthy career I've ported a C++/cmake project to any platform and got a build with zero warnings on the first try. Somebody on your end is doing some good work. ;-)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867992680:485,optimiz,optimizations,485,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867992680,2,"['optimiz', 'perform']","['optimizations', 'performance']"
Performance,"Thanks for the quick response!. This is what I get with the gdb:. ```; gdb --args mmseqs convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3; GNU gdb (Ubuntu 8.1.1-0ubuntu1) 8.1.1; Copyright (C) 2018 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs...done.; (gdb) r; Starting program: mmseqs convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; convertalis /tmp//2989869989197200687/query /db",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628:492,load,load-mode,492,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628,1,['load'],['load-mode']
Performance,"Thanks for the suggestion. I'll do that for future runs to avoid the huge logfiles. Re: my original problem, I want to mention that I am using a Perl script (which parallel::forkmanager) to fork separate jobs for each sample in my list and then run each sample separately. I tried running mmseqs search with ""--threads 10"" using this same script, but I noticed that the intermediate steps in the command (extractorfs, align etc) all just used one process per sample. I am still trying to figure out if it is because of the parallel script or something to do with mmseqs itself. If I run the same search command on the terminal with ""--threads 10"" it goes fast. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Thursday, July 11, 2019 12:55:59 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). @milot-mirdita<https://github.com/milot-mirdita> noticed that the interactive progress bar could be a problem, in your case it produced at 13GB output. You can turn of the interactive progress bar by setting the environment variable to TTY=0. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOM5JCFUYB7FDWEK7TP65JY7A5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODZXE5VI#issuecomment-510545621>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMTYNMFATMDFBRTPR3P65JY7ANCNFSM4H333Q6Q>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405:943,load,loading,943,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405,1,['load'],['loading']
Performance,"Thanks for your detailed reply!. > I am not super familiar with transcriptomics datasets. Depending on the length of your queries you might want to turn of the early ORF filter (--orf-filter 0) as it can sometimes reject too many ORFs if the sequences are short. I'll try the `--orf-filter 0` option as you suggested. Yes, of course in the case of a transcriptome the ORFs are often short if the assembler is not able to resolve all the isoforms properly. > Generally our nucl-nucl searching capabilities are less developed than than anything-prot. In the taxonomy assignment, nucl-nucl still uses top-hit taxon assignment instead of LCA. We haven't gotten around to thoroughly benchmark the nucl-nucl homology search and publish it (it does work quite well in the preliminary tests). I run a nucl-nucl taxonomy assignment (against NT) and it performed well I think. I did not systematically check, but I did some cross-checks with blastn and it reported the exact same hits. Assuming blast to be the ""gold-standard"" I was quite impressed by the performance of your tool, because it was so much faster. > Also building a taxonomy database for the NT is painful and the database might get extremely large (haven't tried it in a while though). I just did that and it worked. According to your instructions in the Wiki. I'll let you know in case I have something interesting to report.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824596494:843,perform,performed,843,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824596494,2,['perform'],"['performance', 'performed']"
Performance,"Thanks for your prompt replies!. mmseqs search -s 4 --threads 64 -e 100000 --comp-bias-corr 0 --mask 0 $SCRATCHDIR/queryT.mmsq $SCRATCHDIR/queryT.mmsq $SCRATCHDIR/queryT.mmsq.outDB $SCRATCHDIR > $SCRATCHDIR/test.log. File $SCRATCHDIR/queryT.mmsq has 10000 lines, which I guess should confirm it has 10000 sequences. . prefilter /scratch/orakov/tmp/queryT.mmsq /scratch/orakov/tmp/queryT.mmsq /scratch/orakov/tmp/9822650028334564073/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 0 --diag-score 1 --exact-kmer-matching 0 --mask 0 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 64 --compressed 0 -v 3 -s 4.0 . Query database size: 313 type: Aminoacid; Estimated memory consumption: 979M; Target database size: 313 type: Aminoacid; Index table k-mer threshold: 127 at k-mer size 6 ; Index table: counting k-mers; [=================================================================] 313 0s 11ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 313 0s 11ms; Index statistics; Entries: 99064; DB size: 488 MB; Avg k-mer size: 0.001548; Top 10 k-mers; GQQVAR 4; QRAALA 3; LSGRVA 3; LGEIVD 3; RELAEE 3; LAAAVG 3; SGQQAI 3; RAVSFK 3; AIGSGK 3; ALGSGK 3; Time for index table init: 0h 0m 0s 582ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 127; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 313; Target db start 1 to 313; [=================================================================] 313 0s 95ms. 46.584655 k-mers per position; 349 DB matches per sequence; 0 overflows; 0 queries produce too much hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593615497:844,load,load-mode,844,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593615497,1,['load'],['load-mode']
Performance,"Thanks for your reply.; I was using the PSSM format to better understand the content of the `profile` file and how it was related to the `_seq` and `_consensus` files. I couldn't see any similarity between the first entry in the PSSM file and either of the first entries in the `_seq` or `_consensus` files, hence my confusion. Perhaps an option to have some reference to the original sequence alignment would be useful for clarity. You mentioned that everything is now stored inside the binary profile. I am working with a particularly large profile (9.1 GB). Do you have any recommendations for optimizing the `mmseqs search` function with this profile as a target?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458971789:597,optimiz,optimizing,597,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458971789,1,['optimiz'],['optimizing']
Performance,"Thanks you! The change makes sense, however, we have actually modified this part. We check here if a sequence is broken across multiple lines or if its a single line sequence. This enables some different optimizations later in MMseqs2.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/756#issuecomment-1731163883:204,optimiz,optimizations,204,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/756#issuecomment-1731163883,1,['optimiz'],['optimizations']
Performance,"Thanks! This is the output:. Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 8; On-line CPU(s) list: 0-7; Thread(s) per core: 1; Core(s) per socket: 4; Socket(s): 2; NUMA node(s): 2; Vendor ID: AuthenticAMD; CPU family: 16; Model: 4; Model name: Quad-Core AMD Opteron(tm) Processor 2380; Stepping: 2; CPU MHz: 800.000; BogoMIPS: 4987.57; Virtualization: AMD-V; L1d cache: 64K; L1i cache: 64K; L2 cache: 512K; L3 cache: 6144K; NUMA node0 CPU(s): 0-3; NUMA node1 CPU(s): 4-7. Serghei",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/90#issuecomment-392934656:406,cache,cache,406,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/90#issuecomment-392934656,4,['cache'],['cache']
Performance,That's most likely a different issue. We have a problem if we estimate RAM usage wrong. When that happens performance usually tanks pretty hard. Martin did some improvements recently to lessen this problem but apparently its still a problem. . What are the system specs where you are running this clustering on?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/324#issuecomment-650853144:106,perform,performance,106,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/324#issuecomment-650853144,1,['perform'],['performance']
Performance,"Thats one possibility, however the issue is quite a bit more complicated to solve generally. First, `getTotalSystemMemory` is not used everywhere, only a few modules have a splitting logic. There is also the issue that we read input databases completely into memory if they will have random accesses. That is also currently not tracked through `getTotalSystemMemory`. You can disable that for a few tools with `--no-preload`, but then you pay a large IO cost. Then there is the issue that letting MMseqs2 share the memory bus among unrelated processes is probably also not the best idea. The prefilter benefits a lot from high-bandwidth, low latency access to its index structure.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463:642,latency,latency,642,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463,1,['latency'],['latency']
Performance,The `--orf-filter 0` parameter disabled an important speed optimization. With the parameter enabled it should run quite a bit faster.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/577#issuecomment-1184027710:59,optimiz,optimization,59,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/577#issuecomment-1184027710,1,['optimiz'],['optimization']
Performance,The answer is differs based on the way how you performed the clustering. Could you please provide the commands?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/247#issuecomment-559392245:47,perform,performed,47,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/247#issuecomment-559392245,1,['perform'],['performed']
Performance,"The next step would be to try a MMseqs2 build instrumented with ASan. Sadly ASan doesn't support static builds so you would have to compile MMseqs2 yourself:. ```; git clone https://github.com/soedinglab/MMseqs2.git; cd MMseqs2;; mkdir build; cd build; cmake -DHAVE_SANITIZER=1 -DCMAKE_BUILD_TYPE=ASan ..; make -j $(nproc --all); ```. The new binary in `src/mmseqs` would then hopefully be able to tell what is going wrong:. ```; Path-To-Where-You-Git-Clone/MMseqs2/build/src/mmseqs result2profile /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_target/mmseqs_tax.db.idx /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/06/TMP/14652724320229658153/tmp_hsp1/11598483508011826746/aln_0 /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/06/TMP/14652724320229658153/tmp_hsp1/11598483508011826746/profile_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 1e-05 --mask-profile 1 --e-profile 0.1 --comp-bias-corr 1 --wg 0 --allow-deletion 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --pca 0 --pcb 1.5 --db-load-mode 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 8 --compressed 0 -v 3; ````",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814313609:1138,load,load-mode,1138,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814313609,1,['load'],['load-mode']
Performance,The parameter `--max-seqs` was always available but there was a stopped mmseqs from printing out the parameter. The printout problem should be resolved now. . How do you benchmark the performance?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647:184,perform,performance,184,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647,1,['perform'],['performance']
Performance,"The parameter was wrongly named. In release 11 it's now called `--shuffle` and 0 means no shuffling and 1 shuffling is enabled. However I would recommend not changing them. They are an internal optimization to help MMseqs2 not lose sensitivity in one specific case. If a machine does not have enough RAM (or if MPI is used) the target database is split and processed into multiple chunks. If one chunk is too redundant/similar/biased then `--max-seqs` can explode within this one chunk and we might lose good hits. By more or less randomly assigning sequences to any chunk we can prevent this. This parameter does not affect the order of the results in the result file (i.e. the `.m8` file). This will still pretty much random, as each query is processed by a different thread and the order of results written is thus not deterministic. If you want a sorted result file I would recommend to use `sort`:; `sort -s -k1,1 result.m8 > result_sorted.m8`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/313#issuecomment-632646531:194,optimiz,optimization,194,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/313#issuecomment-632646531,1,['optimiz'],['optimization']
Performance,"The sequence A0A011 is a single query right?; MMseqs2 does not parallelize over single queries, it only parallelizes over query sets. So what jackhmmer does in 14 minutes on 28 cores, MMseqs2 does on a single core. You can improve the speed by making sure the index is forced into the OS' page cache (e.g. using `mmseqs touch index_db` or using https://github.com/hoytech/vmtouch, the pages cached with `touch` can be evicted again, while `vmtouch` the index forced to remain in RAM).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/165#issuecomment-463179694:294,cache,cache,294,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/165#issuecomment-463179694,2,['cache'],"['cache', 'cached']"
Performance,"The server probably ran out of memory. I would recommend to not run `createindex` unless you 100% know you need a precomputed index. ; There are a few use-cases for precomputed indices. There revolve around running very small query sets repeatedly (e.g. a fast server with `--split 1` and forcing the DB to stay in RAM with a tool like vmtouch). For most purposes its faster to compute an index on the fly and not store a precomputed index on disk. On the fly computation is usually not much slower (most of the time probably faster) than loading the precomputed version from disk anyway. If you really want to create the precomputed index, read on here:; The issue is probably that MMseqs2's estimate for how much memory it is allowed to use for the index creation was wrong. You can overwrite the amount of memory with the `--split-memory-limit` parameter. This should be about 70% of total system RAM. Alternatively you can set the number of splits to create directly (`--split N`) though this is more tricky to get right.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/588#issuecomment-1210227210:539,load,loading,539,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/588#issuecomment-1210227210,1,['load'],['loading']
Performance,"They function and mean the same in nucleotide space. . > On Dec 9, 2021, at 18:59, Florian Plaza Oñate ***@***.***> wrote:; > ; > ﻿; > Hello,; > ; > I would like to perform clustering of a large nucleotide sequence with the easy-clust .; > However, it is not clear for me whether the ""--min-seq-id"" and ""-c"" parameters refer to alignments in nucleotide space or alignments in amino-acid space after sequence translation.; > ; > Thanks,; > Florian; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or unsubscribe.; > Triage notifications on the go with GitHub Mobile for iOS or Android.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/512#issuecomment-989770755:165,perform,perform,165,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/512#issuecomment-989770755,1,['perform'],['perform']
Performance,"This is a performance optimization to not spend a lot of time merging files that are only intended for consumption by other mmseqs modules. If you want human readable output please either call `converalis` after `search`. Or alternatively use the `easy-search` workflow, which abstracts away all of this by taking FASTA as input and retuning BLAST-tab like output.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/802#issuecomment-1897701032:10,perform,performance,10,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/802#issuecomment-1897701032,2,"['optimiz', 'perform']","['optimization', 'performance']"
Performance,"This is for the clu70 machine running 998c50a:; ```; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>); at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, command=..., returnAlnRes=<optimized out>); at /home/vsts/work/1/s/src/util/result2profile.cpp:140; #7 0x0000000000427a67 in runCommand (p=0x1e903c0, argc=argc@entry=6, argv=argv@entry=0x7fff44ebc578); at /home/vsts/work/1/s/src/commons/Application.cpp:47; #8 0x000000000040e7d6 in main (argc=8, argv=0x7fff44ebc568) at /home/vsts/work/1/s/src/commons/Application.cpp:203; ```. This is the for clu90 machine running 15.6f452; ```; #0 futex_wait (val=0, addr=0x5f8465e1c2c4) at ../../../libgomp/config/linux/x86/futex.h:97; #1 do_wait (addr=addr@entry=0x5f8465e1c2c4, val=val@entry=0); at ../../../libgomp/config/linux/wait.h:67; #2 0x00007f7069056753 in gomp_team_barrier_wait_end (bar=0x5f8465e1c2c0, state=0); at ../../../libgomp/config/linux/bar.c:112; #3 0x00007f7069055daa in gomp_work_share_end () at ../../../libgomp/work.c:254; #4 0x00005f846452c867 in result2profile(int, char const**, Command const&, bool) [clone ._omp_fn.0]; (); #5 0x00007f706904f583 in GOMP_parallel (; fn=0x5f846452bc00 <result2profile(int, char const**, Command const&, bool) [clone ._omp_fn.0]>,; data=0x7",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134805988:357,optimiz,optimized,357,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134805988,6,['optimiz'],['optimized']
Performance,"This seems pretty puzzling, we are running on an older CPU model and nothing else seems out of order. MPI won't help and will only add additional latency. MMseqs2 can be used in target split mode without MPI, but we don't do this either. . Doing additional splits will also only add latency (1 split with enough RAM to fit the whole .idx file and some spare is ideal). RAM disks should also not help, in the worst case they might even be harmful. The index is already fully memory mapped and resident in the OS page cache due to vmtouch. Maybe the KVM virtualization has some of issue? We are running bare metal. Running only the MMseqs2 prefilter with perf might help debugging the performance issue. I can write more detailed instructions later if needed.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396913559:146,latency,latency,146,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396913559,4,"['cache', 'latency', 'perform']","['cache', 'latency', 'performance']"
Performance,"This should work:; ```; wget https://ftp.ncbi.nih.gov/pub/mmdb/cdd/fasta.tar.gz; mmseqs tar2db fasta.tar.gz cddmsa; sed 's|\.FASTA||g' cddmsa.lookup > cddmsa.lookup_tmp; mv -f cddmsa.lookup_tmp cddmsa.lookup; mmseqs apply cddmsa cddmsa_wo_cons -- awk '/^>/ { i++ } i > 1 { print; }'; awk 'BEGIN { printf(""%c%c%c%c"",11,0,0,0); exit; }' > cddmsa_wo_cons.dbtype; ln -s cddmsa.lookup cddmsa_wo_cons.lookup; mmseqs msa2profile cddmsa_wo_cons cdd --match-mode 1. mmseqs easy-search QUERY.fasta cdd res.m8 tmp; ```. Could you try out if this performs approximately how you expect it to? If this works well I can add it to the `databases` workflow. (I fixed a few things shortly after I posted this.)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/410#issuecomment-776177415:535,perform,performs,535,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/410#issuecomment-776177415,1,['perform'],['performs']
Performance,"Time for merging to pref_0_tmp_15_tmp: 0h 0m 0s 20ms; Merging 16 target splits to pref_0; Preparing offsets for merging: 0h 0m 0s 53ms; [=================================================================] 1.08K 0s 37ms; Time for merging to pref_0: 0h 0m 0s 23ms; Time for merging target splits: 0h 0m 0s 174ms; Time for merging to pref_0_tmp: 0h 0m 0s 45ms; Time for processing: 0h 6m 46s 299ms; lcaalign /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_target/mmseqs_tax.db.idx /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/06/TMP/14652724320229658153/tmp_hsp1/11598483508011826746/pref_0 /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/06/TMP/14652724320229658153/tmp_hsp1/11598483508011826746/aln_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 1 --alignment-mode 1 --alignment-output-mode 0 --wrapped-scoring 0 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 5 --max-accept 30 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 1 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 8 --compressed 0 -v 3. Index version: 16; Generated by: 13.45111; ScoreMatrix: VTML80.out; Compute score and coverage; Query database size: 1075 type: Aminoacid; Target database size: 41195879 type: Aminoacid; [=================================================================] 1.08K 0s 508ms; Time for merging to aln_0: 0h 0m 0s 8ms; 19048 alignments calculated; 15817 sequence pairs passed the thresholds (0.830376 of overall calculated); 14.713489 hits per query sequence; Time for processing: 0h 0m 54s 194ms; result2profile /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_target/mmseqs_tax.db.idx /ebio/abt3_",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-813242194:16005,load,load-mode,16005,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-813242194,1,['load'],['load-mode']
Performance,"UPDATE: Index is huge:. ```; total 3.8T; -rwxrwx--- 1 guelou01 nogroup 447G Aug 18 19:33 NCBI_ALL_DB; -rwxrwx--- 1 guelou01 nogroup 4 Aug 18 19:34 NCBI_ALL_DB.dbtype; -rwxrwx--- 1 guelou01 nogroup 954M Aug 18 18:11 NCBI_ALL_DB_h; -rwxrwx--- 1 guelou01 nogroup 4 Aug 18 18:11 NCBI_ALL_DB_h.dbtype; -rwxrwx--- 1 guelou01 nogroup 195M Aug 18 19:34 NCBI_ALL_DB_h.index; -rwxrwx--- 1 guelou01 nogroup 80K Sep 14 14:31 NCBI_ALL_DB.idx.0; -rwxrwx--- 1 guelou01 nogroup 895G Sep 14 14:31 NCBI_ALL_DB.idx.1; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.2; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.3; -rwxrwx--- 1 guelou01 nogroup 623G Sep 14 14:31 NCBI_ALL_DB.idx.4; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.5; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.6; -rwxrwx--- 1 guelou01 nogroup 4 Sep 14 14:31 NCBI_ALL_DB.idx.dbtype; -rwxrwx--- 1 guelou01 nogroup 1.1K Sep 14 14:31 NCBI_ALL_DB.idx.index; -rwxrwx--- 1 guelou01 nogroup 236M Aug 18 19:34 NCBI_ALL_DB.index; -rwxrwx--- 1 guelou01 nogroup 257M Aug 18 19:34 NCBI_ALL_DB.lookup; -rwxrwx--- 1 guelou01 nogroup 17 Aug 18 18:10 NCBI_ALL_DB.source; ```; And when starting the search the following message is confusing:; ```; Process needs more than 641G main memory.; Increase the size of --split or set it to 0 to automatically optimize target database split.; Computed index is too large. Avoid using the index.; ```; Adding `--split X` does not have any effect, but does not cause any error. The search now runs for several days with a low CPU usage, only few threads on `idx` files.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1731850063:1355,optimiz,optimize,1355,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1731850063,1,['optimiz'],['optimize']
Performance,"WP 36792]; [New LWP 36793]; [New LWP 36794]; [New LWP 36795]; [New LWP 36796]; [New LWP 36797]; [New LWP 36798]; [New LWP 36799]; [New LWP 36800]; [New LWP 36801]; [New LWP 36802]; [New LWP 36803]; [New LWP 36804]; [New LWP 36805]; [New LWP 36806]; [New LWP 36807]; [New LWP 36808]; [New LWP 36809]; [New LWP 36810]; [New LWP 36811]; [New LWP 36812]; [New LWP 36813]; [New LWP 36814]; [New LWP 36815]; [New LWP 36816]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; --Type <RET> for more, q to quit, c to continue without paging--RET; 0x00005623f9de6504 in CacheFriendlyOperations<512u>::hashIndexEntry(unsigned short, IndexEntryLocal*, unsigned long, CounterResult*) (); (gdb) bt; #0 0x00005623f9de6504 in CacheFriendlyOperations<512u>::hashIndexEntry(unsigned short, IndexEntryLocal*, unsigned long, CounterResult*) (); #1 0x00005623f9de68e5 in CacheFriendlyOperations<512u>::findDuplicates(IndexEntryLocal**, CounterResult*, unsigned long, unsigned short, unsigned short, bool) (); #2 0x00005623f9c42be0 in QueryMatcher::match(Sequence*, float*) (); #3 0x00005623f9c4393d in QueryMatcher::matchQuery(Sequence*, unsigned int) (); #4 0x00005623f9c2e113 in Prefiltering::runSplit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool) [clone ._omp_fn.1] (); #5 0x00007fdb5f003cff in GOMP_parallel () from /usr/lib/x86_64-linux-gnu/libgomp.so.1; #6 0x00005623f9c337f4 in Prefiltering::runSplit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool) (); #7 0x00005623f9c352ae in Prefiltering::runSplits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<ch",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-616635868:1012,Cache,CacheFriendlyOperations,1012,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-616635868,3,['Cache'],['CacheFriendlyOperations']
Performance,We do the second version. We load an index and then process all queries against the split.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/527#issuecomment-1027632690:29,load,load,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/527#issuecomment-1027632690,1,['load'],['load']
Performance,"We recently made cascaded the default, since it performs better and has fewer potential runtime pitfalls. Also please note that switch parameters such as `--single-step-clustering` do not take an argument.; With `--single-step-clustering false` you would run a single step clustering. I'll update the documentation. Sorry about that!. Edit: The missing version number probably means, that you downloaded the ZIP instead of checking out the repository. The compile script cannot figure out the git commit that was used, without the .git folder.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/65#issuecomment-367299944:48,perform,performs,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/65#issuecomment-367299944,1,['perform'],['performs']
Performance,"Whoops, we were missing the --use-fasta-header for result2flat. I pushed a new version that has it. . Sorry for the confusion with the parameters. It's sadly quite a difficult problem, we need the parameters for all kinds of niche use cases, but they also add a lot of complexity and mental load to end users. Any ideas on how to improve the situation for end users are very welcome!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-248261005:291,load,load,291,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-248261005,1,['load'],['load']
Performance,"Without the CMakeLists patch, I get the following on aarch64:; cc: error: the clang compiler does not support '-march=native'; At any rate, when restricting an upstream build system, it's generally better to use a blunt-force patch. A more finessed approach like -DMMSEQS_ARCH can be fragile. Suppose you decide to change the name of the variable between now and the next release. This patch is then silently rendered inert. If I overlook the change, which is easy to do, the builds introduce agressive optimizations into the binary package, causing illegal instruction dumps for users with lower-end hardware than the build cluster. The static patch, on the otherhand, will break on a variable name chnage so I'll be alerted that it needs attention. For wget and curl, are you referring to createtaxdb.sh and databases.sh? Are these supposed to be installed? The cmake build system only installs mmseqs and bash-conmpletion.sh. Rather than add another dependency, I would add FreeBSD's native fetch command as the final fallback option as follows:. ```; --- data/workflow/databases.sh.orig 2021-06-25 01:34:08 UTC; +++ data/workflow/databases.sh; @@ -27,6 +27,8 @@ STRATEGY=""""; if hasCommand aria2c; then STRATEGY=""$STRATEGY ARIA""; fi; if hasCommand curl; then STRATEGY=""$STRATEGY CURL""; fi; if hasCommand wget; then STRATEGY=""$STRATEGY WGET""; fi; +# Part of FreeBSD base, need not be installed separately; +if hasCommand fetch; then STRATEGY=""$STRATEGY FETCH""; fi; if [ ""$STRATEGY"" = """" ]; then; fail ""No download tool found in PATH. Please install aria2c, curl or wget.""; fi; @@ -47,6 +49,9 @@ downloadFile() {; ;;; WGET); wget -O ""$OUTPUT"" ""$URL"" && return 0; + ;;; + FETCH); + fetch -o ""$OUTPUT"" ""$URL"" && return 0; ;;; esac; done; ```; Most bioinformaticians will have curl and/or wget installed anyway (both are included in the biostar-tools metapoirt), so it won't come into play, but we try to minimize unnecessary requirements. I haven't been able to find a specify CPU feature requirement f",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555:503,optimiz,optimizations,503,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555,1,['optimiz'],['optimizations']
Performance,"XXXXX 2; XXXXXX 1; Time for index table init: 0h 0m 1s 308ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 416; Target db start 1 to 416; [=================================================================] 416 0s 20ms. 0.116417 k-mers per position; 0 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; Time for processing: 0h 0m 2s 35ms; align DB_clustered/tmp/17526443716087640986/input_step_redundancy DB_clustered/tmp/17526443716087640986/input_step_redundancy DB_clustered/tmp/17526443716087640986/pref_step0 DB_clustered/tmp/17526443716087640986/aln_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 416 type: Aminoacid; Target database size: 416 type: Aminoacid; Calculation of alignments; [=================================================================] 416 0s 60ms; Time for merging to aln_step0: 0h 0m 0s 1ms. 464 alignments calculated.; 437 sequence pairs passed the thresholds (0.941810 of overall calculated).; 1.050481 hits per query sequence.; Time for processing: 0h 0m 0s 117ms; clust DB_clustered/tmp/17526443716087640986/input_step_redundancy DB_clustered/tmp/17526443716087640986/aln_step0 DB_clustered/tmp/17526443716087640986/clu_step0 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [===========================================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:13195,load,load-mode,13195,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['load'],['load-mode']
Performance,"Yeah, trying to pre-compute the index for colabfold proved to be unrealistic. Thanks for the suggestion. My goal was to perform a 6-frame translation search using ColabFold as the target database. But profiles use too much memory (more distinct k-mers?) and the consensus sequences probably won't be sensitive enough (I need to benchmark). Unless I'm doing something wrong. Out of curiosity, is the profile-profile search documented somewhere? From what I understand it builds a profile by expanding the alignment in the first iteration and then uses this profile as query. But because ColabFold doesn't include a profile database, I wonder what are the target profiles in the subsequent iterations.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/627#issuecomment-1289892479:120,perform,perform,120,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/627#issuecomment-1289892479,1,['perform'],['perform']
Performance,Yes I also made this observation. The HT cores hurt the perfilter performance of mmseqs.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301228255:66,perform,performance,66,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301228255,1,['perform'],['performance']
Performance,"Yes, I've tried recompiling several times as well, and receive the same error after successful compilation. When running the command you gave, I get the following error:. Command: ; ```; ~/data/dir/mmseqs2/build-mpi/bin/mmseqs linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0; ```. Output:; ```; linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat aa:blosum62.out,nucl:nucleotide.out -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-le",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364:866,load,load-mode,866,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364,1,['load'],['load-mode']
Performance,"Yes, if the `_mapping` file is empty than it could not map any identifier. It can handle the mapping of Uniprot sequences automatically. Deprecated identifier can not be mapped. `createtaxdb` performs the following code to retrieves the mmseqs identifiers to tax. id mapping. . URL=""ftp://ftp.expasy.org/databases/uniprot/current_release/knowledgebase/idmapping/idmapping.dat.gz""; wget -nv -O - ""$URL"" | zcat | awk '$2 == ""NCBI_TaxID"" {print $1""\t""$3 }' > taxidmapping; awk 'NR == FNR { f[$1] = $2; next } $2 in f { print $1""\t""f[$2] }' taxidmapping DB.lookup > DB_mapping. It would make sense if createtaxdb would print statistics.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/222#issuecomment-516466642:192,perform,performs,192,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/222#issuecomment-516466642,1,['perform'],['performs']
Performance,"Yes, this is indeed a counter intuitive behavior. The reason is that cascaded clustering has a big effect on the runtime. Linclust performs the following steps: ; (1) `kmermatcher`<- assign sequences to cluster centroids ; (2) `rescorediagonal` <- using some fast ungapped alignment between centroids and members ; (3) `clust` <- clusters the sequences that already passed the alignment criteria and remove them from the remaining set ; (4) `rescorediagonal` <- remove hits that have a low chance to fulfil the alignment criteria ; (5) `align` <- align the remaining hits with Gotoh-Smith-Waterman . The more sequences that Linclust filters at an early stage (3) the faster the algorithm runs since the slowest part is the Gotoh-Smith-Waterman algorithm.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-695797950:131,perform,performs,131,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-695797950,1,['perform'],['performs']
Performance,"Yes, you are indeed right. I clarified with @martin-steinegger, he benchmarked the profile inclusion E-value and saw that the higher inclusion threshold was improving performance. The performance would get worse with inclusion E-values higher than 0.01 though. Your understanding in your second paragraph is right.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/675#issuecomment-1459443612:167,perform,performance,167,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/675#issuecomment-1459443612,2,['perform'],['performance']
Performance,You are running a very old version of MMseqs2. Please update to the latest version. Especially cluster updating had multiple severe issues before the latest release. It was also spending 35h in the very simple module `result2repseq`. I think I fixed the performance issue in the latest commit cc7d7da30ec779d6a2e886438f8295f59e2192f1. You'll find statically compiled binaries here in about one hour: https://mmseqs.com/latest. Cluster updating also doesn't interact very nicely with the `easy-` workflows yet. I'd recommend to stick to the basic commands as shown in the user guide.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441:254,perform,performance,254,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441,1,['perform'],['performance']
Performance,You can add the `--createdb-mode 0` parameter as a workaround. . Edit: A space saving optimization is going wrong: The check for the optimization to work correctly depends on `--dbtype` not being set. The check should not depend on this parameter as its unrelated. Leaving out `--dbtype` should also fix the problem.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/674#issuecomment-1457464790:86,optimiz,optimization,86,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/674#issuecomment-1457464790,2,['optimiz'],['optimization']
Performance,You can not use the fasta header identifier. The `createsubdb` uses the internal numeric identifer given by `createdb`. ; I think it would be a great if MMseqs2 could support reciprocal best hit searches. Would you be willing to share you script? Here is the way I would script it. mmseqs search seqDbA seqDbB alnRes tmp ; # extract top hit; mmseqs filterdb alnRes alnResFilter --extract-lines 1; # transpose the result A->B changes to B->A; mmseqs swapdb alnResFilter alnResFilterSwaped ; # extract subset of detected sequences from seqDbB; mmseqs createsubdb alnResFilterSwaped.index seqDbB seqDbBSubdb ; mmseqs createsubdb alnResFilterSwaped.index seqDbB_h seqDbBSubdb_h; # perform second search ; mmseqs search seqDbBSubdb seqDbA alnRes tmp ; ... TODO check if detected from search A -> B and B-> A are the same,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462116242:677,perform,perform,677,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462116242,1,['perform'],['perform']
Performance,"You can set the `MMSEQS_FORCE_MERGE` environment variable (e.g. `export MMSEQS_FORCE_MERGE=1`). The split databases are, however, an IO optimization and not related to memory. Merging after every module invocation can slow MMseqs2 down considerably.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/644#issuecomment-1336320279:136,optimiz,optimization,136,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/644#issuecomment-1336320279,1,['optimiz'],['optimization']
Performance,"You could copy the macOS sdk from the other computer and use something like in the following link to not use the broken sdk:; https://stackoverflow.com/questions/10165335/can-cmake-specify-the-base-sdk-on-mac-os-x. sysctl.h is a System Header, any Compiler will have to load that and would not be able to provide its own.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/182#issuecomment-477720341:270,load,load,270,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/182#issuecomment-477720341,1,['load'],['load']
Performance,"[bioseq@compute-0-294 ~]$ lscpu; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 24; On-line CPU(s) list: 0-23; Thread(s) per core: 1; Core(s) per socket: 12; Socket(s): 2; NUMA node(s): 4; Vendor ID: AuthenticAMD; CPU family: 16; Model: 9; Model name: AMD Opteron(tm) Processor 6172; Stepping: 1; CPU MHz: 800.000; CPU max MHz: 2100.0000; CPU min MHz: 800.0000; BogoMIPS: 4200.23; Virtualization: AMD-V; L1d cache: 64K; L1i cache: 64K; L2 cache: 512K; L3 cache: 5118K; NUMA node0 CPU(s): 0-5; NUMA node1 CPU(s): 6-11; NUMA node2 CPU(s): 18-23; NUMA node3 CPU(s): 12-17; Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc art rep_good nopl nonstop_tsc extd_apicid amd_dcm pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt nodeid_msr hw_pstate npt lbrv svm_lock nrip_save pausefilter",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-641389444:450,cache,cache,450,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-641389444,4,['cache'],['cache']
Performance,"_part-14/8093924424180559474/round2 --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 --compressed 0 -v 3. Init data structures...; Touch data file /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus ... Done.; Compute score and coverage.; Query database type: Aminoacid; Target database type: Aminoacid; Calculation of Smith-Waterman alignments.; ...Time for merging files: 0h 0m 0s 78ms. All sequences processed. 2760008 alignments calculated.; 2676553 sequence pairs passed the thresholds (0.969763 of overall calculated).; 84.362 hits per query sequence.; Time for processing: 0h 0m 15s 472ms; Program call:; mergedbs tmp_part-14/8093924424180559474/top1 tmp_part-14/8093924424180559474/merged tmp_part-14/8093924424180559474/top1 tmp_part-14/8093924424180559474/round2. Merging the results to tmp_part-14/8093924424180559474/merged; Done; Time for merging files: 0h 0m 0s 11ms; Time for processing: 0h 0m 0s 354ms; Program call:; filterdb tmp_part-14/8093924424180559474/merged tmp_part-14/8093924424180559474/2b_ali --beats-first --filter-column 4 --comparison-operator le. Filter by numerical comparison to first row.; ....Time for merging files: 0h 0m 0s 229ms; Time for processing: 0h 0m 0s 732ms; Program call:; lca /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus tmp_part-14/8093924424180559474/2b_ali clusters_rep-seqs.part-14_tax_db --compressed 0 --lca-ranks kingdom:phylum:class:order:family:genus:species --blacklist 12908,28384 --threads 24 -v 3. Loading NCBI taxonomy...; Computing LCA...; Segmentation fault; Error: Lca died; ```. I'm going to try this again with Release 8.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:17857,Load,Loading,17857,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['Load'],['Loading']
Performance,_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus ... Done.; Alignment database: tmp_part-14/8093924424180559474/top1; Start writing file to tmp_part-14/8093924424180559474/aligned; ....Time for merging files: 0h 0m 0s 186ms; Time for processing: 0h 0m 3s 851ms; Program call:; createsubdb tmp_part-14/8093924424180559474/aligned tmp_part-14/8093924424180559474/first tmp_part-14/8093924424180559474/first_sub. Start writing to database tmp_part-14/8093924424180559474/first_sub; Time for merging files: 0h 0m 0s 7ms; Time for processing: 0h 0m 0s 279ms; Program call:; align tmp_part-14/8093924424180559474/aligned /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus tmp_part-14/8093924424180559474/first_sub tmp_part-14/8093924424180559474/round2 --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 --compressed 0 -v 3. Init data structures...; Touch data file /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus ... Done.; Compute score and coverage.; Query database type: Aminoacid; Target database type: Aminoacid; Calculation of Smith-Waterman alignments.; ...Time for merging files: 0h 0m 0s 78ms. All sequences processed. 2760008 alignments calculated.; 2676553 sequence pairs passed the thresholds (0.969763 of overall calculated).; 84.362 hits per query sequence.; Time for processing: 0h 0m 15s 472ms; Program call:; mergedbs tmp_part-14/8093924424180559474/top1 tmp_part-14/8093924424180559474/merged tmp_part-14/8093924424180559474/top1 tmp_part-14/8093924424180559474/round2. Merging the results to tmp_part-14/8093924424180559474/merged; Do,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:16282,load,load-mode,16282,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['load'],['load-mode']
Performance,"`--db-load-mode` won't help in this case. The parameter handles loading of precomputed indices of (search) databases. Normally, we don't use precomputed indices for clustering. Ideally the `tmp` folder should be on a local drive, that's the only optimization you can reasonably do.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/559#issuecomment-1173306933:6,load,load-mode,6,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/559#issuecomment-1173306933,3,"['load', 'optimiz']","['load-mode', 'loading', 'optimization']"
Performance,`convert2fasta` takes a sequence database as input. You can create a subset of the input database that contains only the cluster representatives with `createsubdb` afterwards you can call `convert2fasta`:. ```; mmseqs createdb input.fas DB --dbtype 2; mmseqs cluster DB clusterRes tmp --min-seq-id 0.95 -c 0.8 --cov-mode 1; mmseqs createsubdb clusterRes.index DB DB_rep; mmseqs convert2fasta DB_rep DB_rep.fasta; ```. Sidenote: I don't recommend putting the output of the clustering in `/dev/shm`. It's probably bad for performance.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/673#issuecomment-1445350808:520,perform,performance,520,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/673#issuecomment-1445350808,1,['perform'],['performance']
Performance,"abfold_data/uniref30_2302_db outdir/res_exp --expansion-mode 0 -e inf --expand-filter-clusters 1 --max-seq-id 0.95 --db-load-mode 1 --threads 4. mmseqs align outdir/prof_res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp outdir/res_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter UniRef results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign outdir/res_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --threads 4 --max-seq-id 1.0 --filter-min-enable 100. # Convert UniRef results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign_filter outdir/uniref.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Environmental search; mmseqs search outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env outdir/tmp/env --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Expand and align environmental results; mmseqs expandaln outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --threads 4. mmseqs align outdir/tmp/env/latest/profile_1 /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp outdir/res_env_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter environmental results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign outdir/res_env_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --max-seq-id 1.0 --threads 4 --filter-min-enable 100. # Convert environmental results to MSA; mmseqs result2msa qu",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:1915,load,load-mode,1915,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,"accept 1000 --threads 4 --alt-ali 10 -a. # Filter UniRef results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign outdir/res_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --threads 4 --max-seq-id 1.0 --filter-min-enable 100. # Convert UniRef results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign_filter outdir/uniref.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Environmental search; mmseqs search outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env outdir/tmp/env --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Expand and align environmental results; mmseqs expandaln outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --threads 4. mmseqs align outdir/tmp/env/latest/profile_1 /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp outdir/res_env_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter environmental results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign outdir/res_env_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --max-seq-id 1.0 --threads 4 --filter-min-enable 100. # Convert environmental results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign_filter outdir/env.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Merge results; mmse",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:2253,load,load-mode,2253,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,"ace-limit 0 --remove-tmp-files 0. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Verbosity 	3; Sensitivity 	6; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	1; Start sensitivity 	1; Search steps 	3; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Remove Temporary Files 	false. Program call:; align /tmp/global2/nyoungblut/LLMGAG_27929269397/linclust/genes_db /ebio/abt3_projects/databases_no-backup/uniclust/uniclust90_2018_08_db /tmp/global2/nyoungblut/LLMGAG_27929269397",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032:4785,perform,performs,4785,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032,1,['perform'],['performs']
Performance,"an optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short projects always lean heavily on the distro. As for bugs, you can always strongly suggest that bug reports and issues be filed against your own project-compiled binaries and test against those binaries first when tracking bugs.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1248,optimiz,optimize,1248,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,5,['optimiz'],"['optimizations', 'optimize', 'optimized']"
Performance,"arts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Overlap between sequences 	0; Sequence split mode 	1; Header split mode 	0; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Prefilter mode 	0; Exhaustive search mode 	false; Filter results during exhaustive search	0; Strand selection 	1; LCA search mode 	false; Disk space limit 	0; MPI runner; Force restart with latest tmp 	false; Remove temporary files 	false. extractorfs KLEB_PO07_megahitDB tmp/6964202514022042695/orfs_aa --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-; mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --translate 1 --use-all-table-starts 0 --id-offset 0 --create-; lookup 0 --threads 32 --compressed 0 -v 3. [=================================================================] 24.08K 1s 376ms; Time for merging to orfs_aa_h: 0h 0m 0s 504ms; Time for merging to orfs_aa: 0h 0m 0s 706ms; Time for processing: 0h 0m 6s 520ms; prefilter tmp/6964202514022042695/orfs_aa /home/sdwork/scratch/metagenomics/uniref_db/uniref90 tmp/6964202514022042695/orfs_pref --sub-mat 'aa:blosum62.out,; nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 2 -k 0 --target-search-mode 0 --k-score seq:2147483647,prof:2147483647 --alph-siz; e aa:21,nucl:5 --max-seq-len 65535 --max-seqs 1 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale; 1 --diag-score 0 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 3 --add-self-matches 0 --spaced-kmer-mode 1 --db-; load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 32 --compressed 0 -v 3. Query database size: 627284 type: Aminoacid; Estimated memory consumption: 717G; Target database size: 187136236 type: Aminoacid; Index table k-mer threshold: 163 at k-mer size 7; Index table: counting k-mers; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2081682741:4162,load,load-mode,4162,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2081682741,1,['load'],['load-mode']
Performance,"at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 1 (LWP 7869 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, command=..., returnAlnRes=<optimized out>) at /home/vsts/work/1/s/src/util/result2profile.cpp:140; #7 0x0000000000427a67 in runCommand (p=0x1e903c0, argc=argc@entry=6, argv=argv@entry=0x7fff44ebc578) at /home/vsts/work/1/s/src/commons/Application.cpp:47; #8 0x000000000040e7d6 in main (argc=8, argv=0x7fff44ebc568) at /home/vsts/work/1/s/src/commons/Application.cpp:203; ```; For the clu90 job:; ```; (gdb) thread apply all bt. Thread 32 (Thread 0x7f6e65ffe640 (LWP 135852) ""mmseqs""):; #0 futex_wait (val=0, addr=0x5f8465e1c2c4) at ../../../libgomp/config/linux/x86/futex.h:97; #1 do_wait (addr=addr@entry=0x5f8465e1c2c4, val=val@entry=0) at ../../../libgomp/config/linux/wait.h:67; #2 0x00007f7069056753 in gomp_team_barrier_wait_end (bar=0x5f8465e1c2c0, state=0) at ../../../libgomp/config/linux/bar.c:112; #3 0x00007f7069055daa in gomp_work_share_end () at ../../../libgomp/work.c:254; #4 0x00005f846452c867 in result2profile(int, char const**, Command const&, bool) [clone ._omp_fn.0] (); #5 0x00007f70690546d9 in gomp_thread_start (xdata=<optimis",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:29953,optimiz,optimized,29953,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"c 0.8 -a 0 --cov-mode 0 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. Can not find any score per column for coverage 0.800000 and sequence identity 0.000000. No hit will be filtered.; [=================================================================] 276 0s 20ms; Time for merging to pref_rescore2: 0h 0m 0s 3ms; Time for processing: 0h 0m 0s 52ms; align tmpfiles//13298481167543164943/linclust/10229649346622198404/input_step_redundancy tmpfiles//13298481167543164943/linclust/10229649346622198404/input_step_redundancy tmpfiles//13298481167543164943/linclust/10229649346622198404/pref_rescore2 tmpfiles//13298481167543164943/linclust/10229649346622198404/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 276 type: Aminoacid; Target database size: 276 type: Aminoacid; Calculation of alignments; [=================================================================] 276 0s 26ms; Time for merging to aln: 0h 0m 0s 1ms. 276 alignments calculated.; 276 sequence pairs passed the thresholds (1.000000 of overall calculated).; 1.000000 hits per query sequence.; Time for processing: 0h 0m 0s 82ms; clust tmpfiles//13298481167543164943/linclust/10229649346622198404/input_step_redundancy tmpfiles//13298481167543164943/linclust/10229649346622198404/aln tmpfiles//13298481167543164943/linclust/10229649346622198404/clust --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Connected Component",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:8472,load,load-mode,8472,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,"c10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:12640,optimiz,optimized,12640,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,2,['optimiz'],['optimized']
Performance,"cess prefiltering step 1 of 1. k-mer similarity threshold: 131; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 237; Target db start 1 to 237; [=================================================================] 237 0s 19ms. 20.483280 k-mers per position; 6 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step1: 0h 0m 0s 4ms; Time for processing: 0h 0m 1s 707ms; align tmpfiles//13298481167543164943/input_step1 tmpfiles//13298481167543164943/input_step1 tmpfiles//13298481167543164943/pref_step1 tmpfiles//13298481167543164943/aln_step1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 237 type: Aminoacid; Target database size: 237 type: Aminoacid; Calculation of alignments; [=================================================================] 237 0s 50ms; Time for merging to aln_step1: 0h 0m 0s 3ms. 306 alignments calculated.; 271 sequence pairs passed the thresholds (0.885621 of overall calculated).; 1.143460 hits per query sequence.; Time for processing: 0h 0m 0s 99ms; clust tmpfiles//13298481167543164943/input_step1 tmpfiles//13298481167543164943/aln_step1 tmpfiles//13298481167543164943/clu_step1 --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Connected Component; [=================================================================] 237 0s 4ms; So",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:17412,load,load-mode,17412,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 9 (LWP 7909 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:21262,optimiz,optimized,21262,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:20332,optimiz,optimized,20332,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:19402,optimiz,optimized,19402,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:18472,optimiz,optimized,18472,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:17542,optimiz,optimized,17542,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:16612,optimiz,optimized,16612,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:15682,optimiz,optimized,15682,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:14752,optimiz,optimized,14752,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:13822,optimiz,optimized,13822,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSe",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:10933,optimiz,optimized,10933,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:10003,optimiz,optimized,10003,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:9073,optimiz,optimized,9073,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:8143,optimiz,optimized,8143,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:7213,optimiz,optimized,7213,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:6283,optimiz,optimized,6283,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:5353,optimiz,optimized,5353,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:3426,optimiz,optimized,3426,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:2496,optimiz,optimized,2496,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 31 (LWP 7931 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:1566,optimiz,optimized,1566,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"cid; Target database size: 41195879 type: Aminoacid; Calculation of alignments; [=================================================================] 7.00K 0s 8ms; Time for merging to aln_0: 0h 0m 0s 9ms. 0 alignments calculated.; 0 sequence pairs passed the thresholds (-nan of overall calculated).; 0.000000 hits per query sequence.; Time for processing: 0h 0m 3s 593ms; align /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search_TMP17/874358861699530798/profile_0 /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/mmseqs_search_db/db /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search_TMP17/874358861699530798/pref_1 /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search_TMP17/874358861699530798/aln_tmp_1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 1 --alignment-mode 2 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 1 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 8 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 7002 type: Profile; Target database size: 41195879 type: Aminoacid; Calculation of alignments; [=================================================================] 7.00K 0s 20ms; Time for merging to aln_tmp_1: 0h 0m 0s 10ms. 0 alignments calculated.; 0 sequence pairs passed the thresholds (-nan of overall calculated).; 0.000000 hits per query sequence.; Time for processing: 0h 0m 4s 529ms; mergedbs /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search_TMP17/874358861699530798/profile_0 /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search/hits_seqs17_db /ebio/abt3_scratch/nyoungblut/Struo2_255873462447/UniRef50_clst0.9/mmseqs_search_TMP17/874358861",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/372#issuecomment-726110203:2014,load,load-mode,2014,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/372#issuecomment-726110203,1,['load'],['load-mode']
Performance,"clu_not_accepted_swap: 0h 0m 0s 1ms; Time for processing: 0h 0m 0s 70ms; createsubdb tmpfiles//13298481167543164943/clu_not_accepted_swap DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/seq_wrong_assigned -v 3. Time for merging to seq_wrong_assigned: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 1ms; createsubdb tmpfiles//13298481167543164943/clu DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/seq_seeds -v 3. Time for merging to seq_seeds: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 1ms; prefilter tmpfiles//13298481167543164943/seq_wrong_assigned tmpfiles//13298481167543164943/seq_seeds.merged tmpfiles//13298481167543164943/seq_wrong_assigned_pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -s 6 -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 20 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 16 --compressed 0 -v 3. Query database size: 10 type: Aminoacid; Estimated memory consumption: 977M; Target database size: 210 type: Aminoacid; Index table k-mer threshold: 109 at k-mer size 6; Index table: counting k-mers; [=================================================================] 210 0s 30ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 210 0s 6ms; Index statistics; Entries: 1284; DB size: 488 MB; Avg k-mer size: 0.000020; Top 10 k-mers; XXXXXX 3; XXXXXX 3; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; Time for index table init: 0h 0m 0s 989ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 109; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 10; Target db start 1 to 210; [===========================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:27842,load,load-mode,27842,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,commons/NucleotideMatrix.cpp.o; [ 48%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Orf.cpp.o; [ 48%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Parameters.cpp.o; [ 49%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/ProfileStates.cpp.o; [ 49%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/LibraryReader.cpp.o; [ 50%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Sequence.cpp.o; [ 50%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/SequenceWeights.cpp.o; [ 50%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/SubstitutionMatrix.cpp.o; [ 51%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/tantan.cpp.o; [ 51%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/UniprotKB.cpp.o; [ 51%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Util.cpp.o; [ 52%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/CacheFriendlyOperations.cpp.o; [ 52%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/ExtendedSubstitutionMatrix.cpp.o; [ 53%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Indexer.cpp.o; [ 53%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/IndexBuilder.cpp.o; [ 53%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/KmerGenerator.cpp.o; [ 54%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Main.cpp.o; [ 54%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Prefiltering.cpp.o; [ 54%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/PrefilteringIndexReader.cpp.o; [ 55%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/QueryMatcher.cpp.o; [ 55%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/ReducedMatrix.cpp.o; [ 56%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/SequenceLookup.cpp.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:15363,Cache,CacheFriendlyOperations,15363,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,1,['Cache'],['CacheFriendlyOperations']
Performance,"configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs/bin/mmseqs...done.; (gdb) r; Starting program: mmseqs/bin/mmseqs swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3 . MMseqs Version: 	113e3212c137d026e297c7540e1fcd039f6812b1; Substitution matrix	nucl:nucleotide.out,aa:blosum62.out; E-value threshold 	3.40282e+38; Split memory limit 	0; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Threads 	256; Compressed 	0; Preload mode 	0; Verbosity 	3. [New Thread 0x7fac59656700 (LWP 38112)]",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762432473:1959,load,load-mode,1959,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762432473,1,['load'],['load-mode']
Performance,d-kmer-mode 1 --threads 4 -v 3 -s 7 . MMseqs Version: 	e2c8166b292d5e65271887cf4af568f32b346dd2; Sub Matrix 	blosum62.out; Sensitivity 	7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	32000; Profile 	false; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Coverage threshold 	0; Compositional bias 	0; Diagonal Scoring 	1; Mask Residues 	0; Minimum Diagonal score 	15; Include identical Seq. Id.	false; Spaced Kmer 	1; Threads 	4; Verbosity 	3. Initialising data structures...; Using 4 threads. Use index DB.sk6; Index version: 774909490; KmerSize: 6; AlphabetSize: 21; Skip: 0; Split: 0; Type: 1; Spaced: 1; Query database: DB(size=105589); Target database: DB(size=105589); Use kmer size 6 and split 1 using split mode 0; Needed memory (1603741184 byte) of total memory (8340369408 byte); Substitution matrices...; Time for init: 0 h 0 m 1s. Process prefiltering step 0 of 1. Index version: 774909490; KmerSize: 6; AlphabetSize: 21; Skip: 0; Split: 0; Type: 1; Spaced: 1; Cache database ; Read IndexTable ... Done; k-mer similarity threshold: 77; k-mer match probability: 0. Starting prefiltering scores calculation (step 0 of 1); Query db start 0 to 105589; Target db start 0 to 105589; ........WARNING: Sequence (dbKey=82431) contains only ATGC. It might be a nucleotide sequence.; ..WARNING: Sequence (dbKey=102237) contains only ATGC. It might be a nucleotide sequence.; WARNING: Sequence (dbKey=105031) contains only ATGC. It might be a nucleotide sequence.; WARNING: Sequence (dbKey=105125) contains only ATGC. It might be a nucleotide sequence.; WARNING: Sequence (dbKey=105583) contains only ATGC. It might be a nucleotide sequence. 3678 k-mers per position.; 308639 DB matches per sequence.; 60 Overflows .; 356 sequences passed prefiltering per query sequence (ATTENTION: max. 300 best scoring sequences were written to the output prefiltering database).; Median result list size: 333; 0 sequences with 0 size result lists. Time fo,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275642021:3980,Cache,Cache,3980,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275642021,1,['Cache'],['Cache']
Performance,"d::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:4171,optimiz,optimized,4171,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,2,['optimiz'],['optimized']
Performance,"de.out,aa:blosum62.out --rescore-mode 1 --wrapped-scoring 0 --filter-hits 1 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [===============================================================] 417 0s 10ms; ==Time for merging to pref_rescore2: 0h 0m 0s 5ms; Time for processing: 0h 0m 0s 52ms; align DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/input_step_redundancy DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/input_step_redundancy DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref_rescore2 DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 417 type: Aminoacid; Target database size: 417 type: Aminoacid; Calculation of alignments; [=================================================================] 417 0s 37ms; Time for merging to aln: 0h 0m 0s 2ms. 615 alignments calculated.; 418 sequence pairs passed the thresholds (0.679675 of overall calculated).; 1.002398 hits per query sequence.; Time for processing: 0h 0m 0s 81ms; clust DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/input_step_redundancy DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/aln DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/clust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: S",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:8406,load,load-mode,8406,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['load'],['load-mode']
Performance,"e for processing: 0h 0m 0s 0ms; mvdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge_new tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge -v 3 . Time for processing: 0h 0m 0s 0ms; createsubdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/order_1 tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_0 tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_1 -v 3 --subdb-mode 1 . Time for merging to input_1: 0h 0m 0s 267ms; Time for processing: 0h 0m 0s 790ms; prefilter tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_1 /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/search/pref_2 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 1 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 40 --compressed 0 -v 3 -s 6.0 . Query database size: 2271004 type: Aminoacid; Estimated memory consumption: 68G; Target database size: 13003941 type: Aminoacid; Index table k-mer threshold: 118 at k-mer size 7 ; Index table: counting k-mers; [=================================================================] 13.00M 1m 31s 294ms; Index table: Masked residues: 71357266; Index table: fill; [=================================================================] 13.00M 1m 21s 848ms; Index statistics; Entries: 5094244039; DB size: 38915 MB; Avg k-mer size: 3.979878; Top 10 k-mers; SGQQRIA	74997; GPGGKLL	59639; GQQVARA	45640; GGQRVAR	38490; GKTLRAG	27665; LLGPGKT	25908; ALGSGKS	22863; GGRRVAR	21815; GRFVVEV	21110; AIGSGKS	20435; Time for index table init: 0h 3m 15s 901ms; Process prefiltering step 1 of 1. k-mer similarity ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:11802,load,load-mode,11802,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['load'],['load-mode']
Performance,"e free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs...done.; (gdb) r; Starting program: mmseqs convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3 . MMseqs Version: 	1f302134aa1c6c7c4e2b9da272fd26af33860780; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Alignment format 	0; Format alignment output	query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen; Translation table 	1; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628:1769,load,load-mode,1769,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628,1,['load'],['load-mode']
Performance,"ed the point about data size, though I do have a number of TB to work with. . Re. batching, is there a built in module to chunk up the query db or should I manually split my fasta and make seperate DBs? I assume `splitdb`?. Here is my current list of commands in hard coded format:. ```; # UniRef search ; mmseqs search queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res outdir/tmp --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Move profile; mmseqs mvdb outdir/tmp/latest/profile_1 outdir/prof_res; mmseqs lndb queryDB_h outdir/prof_res_h. # Expand and align UniRef results; mmseqs expandaln queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp --expansion-mode 0 -e inf --expand-filter-clusters 1 --max-seq-id 0.95 --db-load-mode 1 --threads 4. mmseqs align outdir/prof_res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp outdir/res_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter UniRef results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign outdir/res_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --threads 4 --max-seq-id 1.0 --filter-min-enable 100. # Convert UniRef results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign_filter outdir/uniref.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Environmental search; mmseqs search outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env outdir/tmp/env --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Expand and align environmental results; mmseqs expandaln outdir/prof_res /datasets/Uni",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:1109,load,load-mode,1109,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,"edundancy --threads 50 --compressed 0 -v 3 . Filtering using file(s); [=================================================================] 764.94M 2m 3s 835ms; Time for merging to pref_filter2: 0h 26m 51s 419ms; Time for processing: 0h 44m 18s 340ms; align /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref_filter2 /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 2 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.95 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.9 --cov-mode 1 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 50 --compressed 0 -v 3 . Compute score and coverage; Query database size: 764944220 type: Nucleotide; Target database size: 764944220 type: Nucleotide; Calculation of alignments; [=================================================================] 764.94M 23m 36s 275ms; Time for merging to aln: 0h 32m 14s 887ms. 781315288 alignments calculated.; 765501793 sequence pairs passed the thresholds (0.979760 of overall calculated).; 1.000729 hits per query sequence.; Time for processing: 1h 9m 13s 720ms; clust /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/aln /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:15065,load,load-mode,15065,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['load'],['load-mode']
Performance,"eload --max-seqs 1000 --num-iterations 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Add backtrace 	true; Alignment mode 	2; E-value threshold 	0.001; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	1000; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	true; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	48; Verbosity 	3; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern 	; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.1; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	3; Start sensitivity 	4; Search steps 	1; Run a seq-profile search in slice mode 	0; Sets the MPI runner 	; Remove Temporary Files 	false. Tmp tmpC folder does not exist or is not a directory.; Created dir tmpC; Program call:; prefilter geneC.db genes.db tmpC/10139724895635470572/pref_0 --sub-mat blosum62.out -s 5.7 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 -",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461782109:1085,perform,performs,1085,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461782109,1,['perform'],['performs']
Performance,"eload --max-seqs 1000 --num-iterations 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Add backtrace 	true; Alignment mode 	2; E-value threshold 	0.001; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	1000; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	true; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	56; Verbosity 	3; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern 	; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.1; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	3; Start sensitivity 	4; Search steps 	1; Run a seq-profile search in slice mode 	0; Sets the MPI runner 	; Remove Temporary Files 	false. Program call:; prefilter geneC.db genes.db tmpC/13630618462368123119/pref_0 --sub-mat blosum62.out -s 5.7 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 1000 --offset-result 0 --split 0 --split-mode 2 --split-memory-",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461782109:125424,perform,performs,125424,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461782109,1,['perform'],['performs']
Performance,"en 32000 --max-seqs 20 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 20 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --rescore-mode 0 . MMseqs Version: 	GITDIR-NOTFOUND; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	32000; Max. results per query 	20; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	20; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db tmp/425628692068579862/linclust/13628666274102407548/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 20 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 32000 --hash-shift 5 --split-memory-limit 0 --threads 10 -v 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	20; Mask Residues 	0; Coverage Mode 	0; K-mer size 	0; Coverage threshold 	0.8; Max. sequence length	32000; Shift hash 	5; Split Memory Limit 	0; Threads 	10; Verbosity 	3. Alphabet size: 13 k-mer size: 10; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X ; Checking requirements; Needed memory (795683200 byte) of total memory (365681560780 byte); Process file into 1 parts; Generate k-mers list 0; .......................................................",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:94913,perform,performs,94913,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['perform'],['performs']
Performance,"enerate k-mers list for 1 split; [=================================================================] 773.45M 1h 49m 32s 108ms. Adjusted k-mer length 18; Sort kmer 0h 0m 4s 610ms; Sort by rep. sequence 0h 0m 0s 325ms; Time for fill: 0h 0m 4s 175ms; Time for merging to pref: 0h 0m 0s 16ms; Time for processing: 2h 3m 42s 6ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.9 -a 0 --cov-mode 1 --min-seq-id 0.95 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 100 --compressed 0 -v 3 . [=================================================================] 773.45M 13m 49s 19ms; Time for merging to pref_rescore1: 0h 25m 43s 735ms; Time for processing: 0h 53m 14s 579ms; clust /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref_rescore1 /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pre_clust --cluster-mode 2 --max-iterations 1000 --similarity-type 2 --threads 100 --compressed 0 -v 3 . Clustering mode: Greedy; Total time: 0h 0m 42s 573ms. Size of the sequence database: 773451991; Size of the alignment database: 773451991; Number of clusters: 764944038. Writing results 0h 2m 46s 588ms; Time for merging to pre_clust: 0h 0m 0s 16ms; Time for processing: 0h 12m 8s 93ms; createsubdb /hwfssz1/",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:2535,load,load-mode,2535,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['load'],['load-mode']
Performance,"ength 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	36; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/clu/ folder does not exist or is not a directory.; Created dir /tmp/clu/; Set cluster settings automatic to s=6; Set cluster mode SET COVER.; Set cluster iterations to 3; Program call:; panproteome.db /tmp/clu//9559457551393989073/clu_redundancy /tmp/clu//9559457551393989073/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 36 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	36; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-v",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:21260,perform,performs,21260,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['perform'],['performs']
Performance,"ep1 $TMPPATH/clu_uniclust50. STEP=2; INPUT=$TMPPATH/input_step2; # cluster down to 30%; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_uniclust30"" ${CLUSTER2_PAR}; mmseqs mergeclusters ""${SEQUENCE_DB}"" $OUTDIR/uniclust30_$RELEASE \; ""$TMPPATH/clu_frag"" ""$TMPPATH/clu_redundancy"" $TMPPATH/clu_step0 $TMPPATH/clu_step1 $TMPPATH/clu_uniclust30; ```. However, I experience another error in step 2 `cluster`. ; ```; linclust /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/clu_redundancy /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust --cluster-mode 0 --max-iter; ations 1000 --similarity-type 2 --threads 6 --compressed 0 -v 3 --sub-mat 'aa:blosum62.out,nucl:nucle; otide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-i; d 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-c; orr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0; --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --sco; re-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 -; -gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21; --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-pr; ob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --; ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-re; use 0 ; ; kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 -",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:6044,load,load-mode,6044,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['load'],['load-mode']
Performance,"er position; 0 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 0 sequences passed prefiltering per query sequence; 0 median result list length; 2 sequences with 0 size result lists; Time for merging to seq_wrong_assigned_pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 1s 582ms; swapdb tmp//7897776346521331899/seq_wrong_assigned_pref tmp//7897776346521331899/seq_wrong_assigned_pref_swaped --threads 16 --compressed 0 -v 3. [=================================================================] 100.00% 2 0s 2ms; Computing offsets.; [=================================================================] 100.00% 2 0s 4ms. Reading results.; [=================================================================] 100.00% 2 0s 3ms. Output database: tmp//7897776346521331899/seq_wrong_assigned_pref_swaped; [=================================================================] 100.00% 1 eta -. Time for merging to seq_wrong_assigned_pref_swaped: 0h 0m 0s 1ms; Time for processing: 0h 0m 0s 110ms; 47 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 126 type: Aminoacid; Target database size: 2 type: Aminoacid; Calculation of alignments; Time for merging to seq_wrong_assigned_pref_swaped_aln: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 7ms; filterdb tmp//7897776346521331899/seq_wrong_assigned_pref_swaped_aln tmp//7897776346521331899/seq_wrong_assigned_pref_swaped_aln_ocol --trim-to-one-column --threads 16 --compressed 0 -v 3. Filtering using regular expression; mergedbs tmp//7897776346521331899/seq_seeds.merged tmp//7897776346521331899/clu_accepted_plus_wrong tmp//7897776346521331899/clu_accepted tmp//7897776346521331899/seq_wrong_assigned_pref_swaped_aln_ocol --merge-stop-empty 0 --compressed 0 -v 3. Merging t",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:30163,load,load-mode,30163,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['load'],['load-mode']
Performance,"er-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 303 0s 20ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 92ms; rescorediagonal DB_in DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref tmp//10798751672030653963/linclust/5052420726377277994/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [=================================================================] 100.00% 303 0s 28ms; Time for merging to pref_rescore1: 0h 0m 0s 3ms===============> ] 94.37% 286 eta 0s; Time for processing: 0h 0m 0s 69ms; clust DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref_rescore1 tmp//10798751672030653963/linclust/5052420726377277994/pre_clust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [=================================================================] 100.00% 303 0s 10ms; Sort entries; Find missing connections; Found 29 new connections.; Reconstruct initial order; [=================================================================] 100.00% 303 0s 9ms; Add missing connections; [=================================================================] 100.00% 303 0s 1ms. Time for read in: 0h 0m 0s 96ms; Total time: 0h 0m 0s 125ms. Size of the sequ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:4851,load,load-mode,4851,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['load'],['load-mode']
Performance,"erage 	0; Select N most diverse seqs 	1000; Omit consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Search iterations 	1; Start sensitivity 	4; Search steps 	1; Slice search mode 	false; Strand selection 	1; Disk space limit 	0; MPI runner 	; Force restart with latest tmp 	false; Remove temporary files 	false. align /tmp/56067190/queryT.fa.mmsq /tmp/56067190/queryT.fa.mmsq /scratch/jobs/56067190/14902988131097346952/pref_0 /tmp/56067190/queryT.fa.mmsq.outDB --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 2 --wrapped-scoring 0 -e 100000 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --zdrop 40 --threads 64 --compressed 0 -v 3 . Compute score and coverage; Query database size: 10000 type: Aminoacid; Target database size: 10000 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 130 0s 27ms ; Time for merging to queryT.fa.mmsq.outDB: 0h 0m 0s 0ms. 1711 alignments calculated.; 1711 sequence pairs passed the thresholds (1.000000 of overall calculated).; 13.161538 hits per query sequence.; Time for processing: 0h 0m 0s 119ms; convertalis /tmp/56067190/queryT.fa.mmsq /tmp/56067190/queryT.fa.mmsq /tmp/56067190/queryT.fa.mmsq.outDB /tmp/56067190/queryT.fa.mmsq.m8 . MMseqs Version: 	ca58693979f95537016a0454affcfd529dbde24d; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Alignment format 	0; Format alignment ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-593953276:5017,load,load-mode,5017,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-593953276,1,['load'],['load-mode']
Performance,"erage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign false; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 1.000000; Set cluster mode SET COVER; Set cluster iterations to 1; linclust DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/clu_redundancy DB_clustered/tmp/17526443716087640986/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_i",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:2391,load,load-mode,2391,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['load'],['load-mode']
Performance,"eredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step_redundancy -v 3 --subdb-mode 1. Time for merging to input_step_redundancy: 0h 0m 0s 1ms; Time for processing: 0h 0m 0s 4ms; prefilter /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step_redundancy /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step_redundancy /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/pref_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -s 1 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 0 --diag-score 0 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 0 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 12 --compressed 0 -v 3. Query database size: 6 type: Aminoacid; Estimated memory consumption: 977M; Target database size: 6 type: Aminoacid; Index table k-mer threshold: 154 at k-mer size 6; Index table: counting k-mers; [=================================================================] 6 0s 1ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 6 0s 0ms; Index statistics; Entries: 237; DB size: 488 MB; Avg k-mer size: 0.000004; Top 10 k-mers; LHNWEA	1; NCKEQA	1; VLRCRA	1; VTFMDC	1; RAHQKC	1; KRKVLC	1; ESKRNC	1; KRHLRC	1; GKKFSC	1; HYKKSC	1; Time for index table init: 0h 0m 0s 897ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 6; Target db start 1 to 6; [=======================================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:19006,load,load-mode,19006,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['load'],['load-mode']
Performance,"ess prefiltering step 1 of 1. k-mer similarity threshold: 109; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 218; Target db start 1 to 218; [=================================================================] 218 0s 55ms. 193.314206 k-mers per position; 8 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step2: 0h 0m 0s 4ms; Time for processing: 0h 0m 1s 763ms; align tmpfiles//13298481167543164943/input_step2 tmpfiles//13298481167543164943/input_step2 tmpfiles//13298481167543164943/pref_step2 tmpfiles//13298481167543164943/aln_step2 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 218 type: Aminoacid; Target database size: 218 type: Aminoacid; Calculation of alignments; [=================================================================] 218 0s 82ms; Time for merging to aln_step2: 0h 0m 0s 2ms. 358 alignments calculated.; 247 sequence pairs passed the thresholds (0.689944 of overall calculated).; 1.133028 hits per query sequence.; Time for processing: 0h 0m 0s 123ms; clust tmpfiles//13298481167543164943/input_step2 tmpfiles//13298481167543164943/aln_step2 tmpfiles//13298481167543164943/clu_step2 --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Connected Component; [=================================================================] 218 0s 9ms; S",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:21491,load,load-mode,21491,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,"ess prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 276; Target db start 1 to 276; [=================================================================] 100.00% 276 0s 19ms. 1.394095 k-mers per position; 5 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step0: 0h 0m 0s 3ms; Time for processing: 0h 0m 1s 477ms; align tmp//10798751672030653963/input_step_redundancy tmp//10798751672030653963/input_step_redundancy tmp//10798751672030653963/pref_step0 tmp//10798751672030653963/aln_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 276 type: Aminoacid; Target database size: 276 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 276 0s 44ms; Time for merging to aln_step0: 0h 0m 0s 7ms; 415 alignments calculated; 408 sequence pairs passed the thresholds (0.983133 of overall calculated); 1.478261 hits per query sequence; Time for processing: 0h 0m 0s 89ms; clust tmp//10798751672030653963/input_step_redundancy tmp//10798751672030653963/aln_step0 tmp//10798751672030653963/clu_step0 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [=============================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:13380,load,load-mode,13380,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['load'],['load-mode']
Performance,est HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2/build-mpi; ```. Output of following `make`:; ```; Scanning dependencies of target microtar; [ 1%] Building C object lib/microtar/CMakeFile,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:2427,Perform,Performing,2427,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,2,['Perform'],['Performing']
Performance,"etSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:12892,optimiz,optimized,12892,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"fasta; /home/username/project/my_local_DB; result_query_20230412_142303. createdb result_query_20230412_142303/query.fas result_query_20230412_142303/qdb --shuffle 0. search result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB result_query_20230412_142303/res result_query_20230412_142303/tmp --threads 96 --num-iterations 3 --db-load-mode 2 -a -s 8 -e 0.1 --max-seqs 10000. prefilter result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 8 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 10000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 96 --compressed 0 -v 3. align result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_0 result_query_20230412_142303/tmp/18292001434761310910/aln_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 1 --alignment-mode 2 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.1 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 1 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --threads 96 --compressed 0 -v 3. result",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:2470,load,load-mode,2470,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --translate 1 --use-all-table-starts 0 --id-offset 0 --create-lookup 0 --threads 128 --compressed 0 -v 3. [=================================================================] 100.00% 10 0s 71ms; Time for merging to orfs_aa_h: 0h 0m 0s 759ms; Time for merging to orfs_aa: 0h 0m 0s 726ms; Time for processing: 0h 0m 3s 54ms; prefilter tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aa MicroEuk100.eukaryota_odb10.idx tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_pref --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 2 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 1 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 0 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 3 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 128 --compressed 0 -v 3. Index version: 16; Generated by: 14.7e284; ScoreMatrix: VTML80.out; Query database size: 2310 type: Aminoacid; Estimated memory consumption: 7G; Target database size: 713072 type: Aminoacid; Process prefiltering step 1 of 1. k-mer similarity threshold: 145; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 2310; Target db start 1 to 713072; [=================================================================] 100.00% 2.31K 0s 200ms. 8.191356 k-mers per position; 1212 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 0 sequences passed prefiltering per query sequence; 0 median result list length; 2301 sequences with 0 size result lists; Time for merging to orfs_pref: 0h 0m 0s 457ms; Time for processing: 0h 0m 1s 487ms; rescorediagonal tmp//15404483323509150572/taxonomy_tmp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640:5303,load,load-mode,5303,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640,1,['load'],['load-mode']
Performance,"g start mode 2; Contig end mode 2; Orf start mode 1; Forward Frames 1,2,3; Reverse Frames 1,2,3; Translation Table 1; Use all table starts false; Offset of numeric ids 0; Add Orf Stop false; Number search iterations 1; Start sensitivity 4; Search steps 1; Run a seq-profile search in slice mode false; Strand selection 1; Disk space limit 0; Sets the MPI runner mpirun --pernode; Force restart using the latest tmp false; Remove Temporary Files false. [node218.cluster:134942] mca: base: component_find: unable to open /usr/mpi/gcc/openmpi-1.6.5/lib/openmpi/mca_mtl_psm: libpsm_infinipath.so.1: cannot open shared object file: No such file or directory (ignored); MPI Init...; Rank: 0 Size: 1; Program call:; prefilter query_dbs/1000562_0 mmseqs_dir/profile/Tenericutes_profile tmp/14349913440832127037/pref --sub-mat blosum62.out -s 5.7 -k 5 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 8 --compressed 0 -v 3 . MMseqs Version: da6c1a5a7be5d82719f796b85ce9cbacf9f2162c-MPI; Sub Matrix blosum62.out; Sensitivity 5.7; K-mer size 5; K-score 2147483647; Alphabet size 21; Max. sequence length 65535; Max. results per query 300; Offset result 0; Split DB 0; Split mode 2; Split Memory Limit 0; Coverage threshold 0; Coverage Mode 0; Compositional bias 1; Diagonal Scoring 1; Exact k-mer matching 0; Mask Residues 1; Minimum Diagonal score 15; Include identical Seq. Id. false; Spaced Kmer 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern ; Local temporary path ; Threads 8; Compressed 0; Verbosity 3. Initialising data structures...; Using 8 threads.; Could not find precomputed index. Compute index.; Touch data file mmseqs_dir/profile/Tenericutes_profile ... Done.; Substitution matrice",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/164#issuecomment-463134521:3041,load,load-mode,3041,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/164#issuecomment-463134521,1,['load'],['load-mode']
Performance,"g step 2; [=================================================================] 100.00% 276 0s 36ms; Write merged clustering; [=================================================================] 100.00% 303 0s 53ms; Time for merging to clu_redundancy: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 67ms; createsubdb tmp//10798751672030653963/clu_redundancy DB_in tmp//10798751672030653963/input_step_redundancy -v 3 --subdb-mode 1. Time for merging to input_step_redundancy: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 1ms; prefilter tmp//10798751672030653963/input_step_redundancy tmp//10798751672030653963/input_step_redundancy tmp//10798751672030653963/pref_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -s 1 -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 20 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 0 --diag-score 0 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 0 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 16 --compressed 0 -v 3. Query database size: 276 type: Aminoacid; Estimated memory consumption: 978M; Target database size: 276 type: Aminoacid; Index table k-mer threshold: 154 at k-mer size 6; Index table: counting k-mers; [=================================================================] 100.00% 276 0s 30ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 100.00% 276 0s 3ms; Index statistics; Entries: 1187; DB size: 488 MB; Avg k-mer size: 0.000019; Top 10 k-mers; XXXXXX 7; XXXXXX 4; XXXXXX 4; XXXXXX 4; XXXXXX 4; XXXXXX 3; XXXXXX 3; XXXXXX 3; XXXXXX 3; XXXXXX 3; Time for index table init: 0h 0m 0s 848ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 276; Target db start 1 to 276; [=========================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:11597,load,load-mode,11597,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['load'],['load-mode']
Performance,"get database size: 69220 type: Nucleotide; Calculation of alignments; [=================================================================] 15.29M 2h 10m 35s 557ms; Time for merging to aln: 0h 0m 13s 903ms; 12490036390 alignments calculated; 12287580750 sequence pairs passed the thresholds (0.983791 of overall calculated); 803.726868 hits per query sequence; Time for processing: 2h 10m 56s 695ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref -v 3 . Time for processing: 0h 0m 8s 279ms; swapresults /tmp/tmp_MMSeq2/17595625152138277869/search_tmp/17414849138893322762/target_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 1.79769e+308 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3 . Computing offsets.; [=================================================================] 15.29M 2m 38s 69ms. Reading results.; [=================================================================] 15.29M 13m 33s 98ms. Output database: /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_swap; [=================================================================] 69.22K 37m 16s 381ms. Time for merging to aln_swap: 0h 0m 1s 553ms; Time for processing: 0h 54m 56s 451ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln -v 3 . Time for processing: 0h 0m 9s 464ms; mergedbs /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_merged_new /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_merged /tmp/tmp_MMSeq2//175956251521382",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:16392,load,load-mode,16392,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['load'],['load-mode']
Performance,"gth 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:1750,perform,performs,1750,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['perform'],['performs']
Performance,"horse 0.743 311 79 0 1 311 3 314 4.03E-153 476; cand_290.fasta OR51V23_orang 0.750 303 75 0 9 312 10 313 1.43E-152 475. Blast Results:; [lvzvia@molgen3 test]$ grep 'cand_290' ../macaque_test/blast/macaque_test_vs_all.txt|grep '51V'; cand_290.fasta OR51V1B_dog 90.00 310 31 0 3 312 4 313 0.0 562; cand_290.fasta OR51V1B_cow 88.10 311 37 0 2 312 3 313 0.0 558; cand_290.fasta OR51V25_horse 88.39 310 36 0 2 311 3 312 0.0 556; cand_290.fasta OR51V27_horse 80.81 297 57 0 15 311 18 314 2e-176 488; cand_290.fasta OR51V20_dog 74.84 306 77 0 7 312 8 313 4e-172 478; cand_290.fasta OR51V22_cow 76.92 299 69 0 13 311 14 312 1e-171 476; cand_290.fasta OR51V21_dog 76.14 306 73 0 4 309 5 310 1e-171 476; cand_290.fasta OR51V1_cow 77.23 303 69 0 9 311 10 312 2e-171 475; cand_290.fasta OR51V1_horse 77.89 303 67 0 9 311 10 312 3e-171 475; cand_290.fasta OR51V19P_dog 74.51 306 78 0 7 312 8 313 3e-169 470; cand_290.fasta OR51V18P_dog 74.51 306 78 0 7 312 8 313 3e-169 470; cand_290.fasta OR51V1_chimp 76.85 311 72 0 2 312 10 320 2e-167 466; cand_290.fasta OR51V1_orang 75.00 312 78 0 1 312 7 318 5e-167 465; cand_290.fasta OR51V22_dog 78.79 297 63 0 15 311 16 312 9e-167 464. From: Martin Steinegger <notifications@github.com>; Sent: יום ב 12 אוקטובר 2020 10:46; To: soedinglab/MMseqs2 <MMseqs2@noreply.github.com>; Cc: Tsviya Olender <tsviya.olender@weizmann.ac.il>; Mention <mention@noreply.github.com>; Subject: Re: [soedinglab/MMseqs2] mmseqs vs blastp (#357). @TsviyaOlender<https://github.com/TsviyaOlender> Could you please provide a minimal example that we can reproduce this issue?; --search-type 2 performs a translated search, which is similar to blastx. To just perform a amino acid search use --search-type 1. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-706941832>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/ADIHHAXFIMDTZHVYBW4U6O3SKKX2PANCNFSM4SIM43YQ>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678:3140,perform,performs,3140,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678,2,['perform'],"['perform', 'performs']"
Performance,"hread 0x7f7418e00700 (LWP 184984)]; [New Thread 0x7f74185ff700 (LWP 184985)]; [New Thread 0x7f7417dfe700 (LWP 184986)]; [New Thread 0x7f74175fd700 (LWP 184987)]; Computing offsets.; [=================================================================] 100.00% 15.11M 19m 14s 460ms ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc. Thread 1 ""mmseqs"" received signal SIGABRT, Aborted.; __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; 51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt ; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; #1 0x00007ffff7438921 in __GI_abort () at abort.c:79; #2 0x00007ffff7ef6892 in __gnu_cxx::__verbose_terminate_handler () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x00007ffff7ef4f69 in __cxxabiv1::__terminate (handler=<optimized out>) at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #4 0x00007ffff7ef4fab in std::terminate () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #5 0x00007ffff7ef5194 in __cxxabiv1::__cxa_throw (obj=0x555555ae5950, tinfo=0x7ffff7fad300 <typeinfo for std::bad_alloc>, dest=0x7ffff7ef3c64 <std::bad_alloc::~bad_alloc()>); at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_throw.cc:95; #6 0x00007ffff7ef556a in operator new (sz=610460681573) at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/build/build-cc-gcc-final/x86_64-conda-linux-gnu/libstdc++-v3/include/bits/exception.h:63; #7 0x000055555581a6b7 in doswap(Parameters&, bo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840:36445,optimiz,optimized,36445,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840,1,['optimiz'],['optimized']
Performance,"ign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 3 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 2 --compressed 0 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Compute score, coverage and sequence identity; Query database size: 12189231 type: Aminoacid; Target database size: 134985288 type: Aminoacid; Calculation of alignments; [] 3h 56m 20s 209ms; Time for merging files: 0h 0m 13s 891ms. 138555514 alignments calculated.; 54047267 sequence pairs passed the thresholds (0.390077 of overall calculated).; 4.434018 hits per query sequence.; Time for processing: 3h 56m 39s 222ms; offsetalignment mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/aln mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB --chain-alignments 0 --merge-query 1 --search-type 0 --threads 2 --compressed 0 --db-load-mode 3 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 1s 475ms; Writing results to: mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB; [] 5h 36m 42s 260ms. Time for merging files: 0h 0m 5s 864ms; Time for processing: 5h 37m 8s 744ms; convertalis mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3-s1.m8 --db-load-mode 3 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Alignment format 	0; Format alignment output	query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits; Translation table 	1; Gap open cost 	11; Gap extension cost 	1; Databa",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:7345,load,load-mode,7345,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['load'],['load-mode']
Performance,"ignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Min. alignment length 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Compressed 	0; Verbosity 	3; Seed Substitution Matrix 	VTML80.out; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. results per query 	200; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Mask lower case residues 	0; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Chain overlapping alignments 	0; Search type 	0; Number search iterations 	1; Start sensitivity 	4; Search steps 	1; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Force restart using the latest tmp 	false; Remove Temporary Files 	false; LCA Ranks 	kingdom:phylum:class:order:family:genus:species; Blacklisted Taxa 	12908,28384; LCA Mode 	3;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:2432,perform,performs,2432,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['perform'],['performs']
Performance,"ile 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical comparison operator 	; Numerical comparison value 	0; Sort entries 	0; Include identical Seq. Id. 	false; join to DB 	; Swap fields of search results 	; Replace transitively 	. Filtering with a filter files.; ..Time for merging files: 0 h 0 m 0 s; Rescore diagonals.; Program call:; /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_filter2 /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_rescore2 --rescore-mode 1 --sub-mat blosum62.out --filter-hits -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0 --threads 36 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0; Include identical Seq. Id. 	false; Threads 	36; Verbosity 	3. Query file: /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy; Target file: /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy; Could not find any score per column for cov=0.8 seq.id=0; No hit will be filtered.; Prefilter database: /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_filter2; Result database: /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_rescore2; ..Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 0s; Program call:; /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy /tmp/clu//9559457551393989073/linclust/16641318581476709947/input_step_redundancy /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_rescore2 /tmp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:29184,perform,performs,29184,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['perform'],['performs']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 2 (LWP 7870 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 1 (LWP 7869 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, c",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:28960,optimiz,optimized,28960,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 3 (LWP 7871 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 2 (LWP 7870 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:28031,optimiz,optimized,28031,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 4 (LWP 7872 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 3 (LWP 7871 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:27102,optimiz,optimized,27102,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 5 (LWP 7905 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 4 (LWP 7872 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:26173,optimiz,optimized,26173,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 6 (LWP 7906 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 5 (LWP 7905 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:25244,optimiz,optimized,25244,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 7 (LWP 7907 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 6 (LWP 7906 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:24315,optimiz,optimized,24315,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 8 (LWP 7908 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 7 (LWP 7907 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:23386,optimiz,optimized,23386,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 9 (LWP 7909 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 8 (LWP 7908 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:22457,optimiz,optimized,22457,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"ils.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs...(no debugging symbols found)...done.; (gdb) r; Starting program: /ebio/abt6_projects8/1001g_plus/code/Programs/miniconda3/envs/MMseqs2/bin/mmseqs swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; swapresults /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/target_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/query_seqs_split /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln /tmp/tmp_MMSeq2/13348632313875676683/search_tmp/10253871789027801475/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 3.40282e+38 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3 . MMseqs Version: 	12.113e3; Substitution matrix	nucl:nucleotide.out,aa:blosum62.out; E-value threshold 	3.40282e+38; Split memory limit 	0; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Threads 	256; Compressed 	0; Preload mode 	0; Verbosity 	3. [New Thread 0x7fac58648700 (LWP 183880)]; [New Thread 0x7fac57e47700 (L",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840:2050,load,load-mode,2050,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840,1,['load'],['load-mode']
Performance,in-ungapped-score 15 --spaced-kmer-mode 1 --threads 4 -v 3 -s 7 . MMseqs Version: 	e5e41af867c566f3fffe479d30bfaa10de77517c; Sub Matrix 	blosum62.out; Sensitivity 	7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	32000; Profile 	false; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Coverage threshold 	0; Compositional bias 	1; Diagonal Scoring 	1; Minimum Diagonal score 	15; Include identical Seq. Id.	false; Spaced Kmer 	1; Threads 	4; Verbosity 	3. Initialising data structures...; Using 4 threads. Use index DB.sk6; Index version: 774909490; KmerSize: 6; AlphabetSize: 21; Skip: 0; Split: 0; Type: 1; Spaced: 1; Query database: DB(size=3); Target database: DB(size=3); Use kmer size 6 and split 1 using split mode 0; Needed memory (1381014708 byte) of total memory (8340369408 byte); Substitution matrices...; Time for init: 0 h 0 m 1s. Process prefiltering step 0 of 1. Index version: 774909490; KmerSize: 6; AlphabetSize: 21; Skip: 0; Split: 0; Type: 1; Spaced: 1; Cache database ; Read IndexTable ... Done; k-mer similarity threshold: 77; k-mer match probability: 0. Starting prefiltering scores calculation (step 0 of 1); Query db start 0 to 3; Target db start 0 to 3. 6 k-mers per position.; 0 DB matches per sequence.; 0 Overflows .; 1 sequences passed prefiltering per query sequence.; Median result list size: 1; 0 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 0 m 0s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 0 m 6s; Program call:; DB DB /.../tmp/pref_7 /.../tmp/aln_7 --sub-mat blosum62.out -a --alignment-mode 0 -e 0.001 --min-seq-id 0 -c 0 --max-seq-len 32000 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --threads 4 -v 3 . MMseqs Version: 	e5e41af867c566f3fffe479d30bfaa10de77517c; Sub Matrix 	blosum62.out; Add backtrace 	true; Alignment mode 	0; E-value threshold 	0.001; Seq. Id Threshold 	0; Coverage threshol,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275107869:3770,Cache,Cache,3770,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275107869,1,['Cache'],['Cache']
Performance,"in/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Cluster mode 0; Max depth connected component 1000; Similarity type 2; Threads 64; Verbosity 3; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 2; E-value threshold 0.001; Seq. Id Threshold 0.9; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0.8; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; No preload false; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Alphabet size 21; Kmer per sequence 21; Mask Residues 0; K-mer size 0; Shift hash 5; Split Memory Limit 0; Include only extendable false; Skip sequence with n repeating k-mers 0; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Remove Temporary Files false; Sets the MPI runner. Set cluster mode SET COVER.; Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp/13736030087838361561/pref /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp/13736030087838361561/pref_rescore1 --sub-mat blosum62.out --rescore-mode 0 -e 0.001 -c 0.8 --cov-mode 0 --min-seq-id 0.9 --seq-id-mode 0 --sort-results 0 --threads 64 -v 3. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Sub Matrix blosum62.out; Rescore mode 0; Remove hits by seq.id",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120:3667,perform,performs,3667,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120,1,['perform'],['performs']
Performance,index table init: 0h 36m 49s 783ms; k-mer similarity threshold: 122; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 40624; Target db start 1 to 119988216; [=================================================================] 100.00% 40.62K 15m 11s 627ms. 2741.257489 k-mers per position; 7347947 DB matches per sequence; 0 overflows; 199 sequences passed prefiltering per query sequence; 200 median result list length; 0 sequences with 0 size result lists. Time for prefiltering scores calculation: 0h 15m 16s 157ms; Time for merging files: 0h 0m 0s 63ms; Time for processing: 0h 53m 6s 0ms; align clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/mmseqs2_8.fac81/uniclust90_2018_08_db tmp_part-14/17957680840564044329/tmp_hsp1/2842639954524457022/pref_0 tmp_part-14/17957680840564044329/first --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 --compressed 0 -v 3. Compute score and coverage; Query database size: 40624 type: Aminoacid; Target database size: 119988216 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 40.62K 1m 1s 328ms; Time for merging files: 0h 0m 0s 46ms. 8122882 alignments calculated.; 4578438 sequence pairs passed the thresholds (0.563647 of overall calculated).; 112.702789 hits per query sequence.; Time for processing: 0h 1m 18s 442ms; filterdb tmp_part-14/17957680840564044329/first tmp_part-14/17957680840564044329/top1 --extract-lines 1. Filtering by extracting the first 1 lines.; [=================================================================] 100.00% 40.62K 0s 978ms; Time for merging files: 0h 0m 0s 210ms; Time for processing: 0h 0m 1s 489m,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587:6775,load,load-mode,6775,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587,1,['load'],['load-mode']
Performance,"ing file 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical comparison operator 	; Numerical comparison value 	0; Sort entries 	0; Include identical Seq. Id. 	false; join to DB 	; Swap fields of search results 	; Replace transitively 	. Filtering with a filter files.; ...Time for merging files: 0 h 0 m 0 s; Rescore diagonals.; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 --rescore-mode 1 --sub-mat blosum62.out --filter-hits -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Target file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2; ...Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 0s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 /tmp/test/9465698490903227639/linclust/831108043510341376/aln --sub-mat blosum62.out --alignment-mo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:9642,perform,performs,9642,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['perform'],['performs']
Performance,"ing prefiltering scores calculation (step 1 of 1); Query db start 1 to 239; Target db start 1 to 239; [=================================================================] 100.00% 239 0s 20ms; [================================================================>] 99.58% 238 eta 0s; 20.876247 k-mers per position; 6 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step1: 0h 0m 0s 2ms; Time for processing: 0h 0m 1s 824ms; align tmp//10798751672030653963/input_step1 tmp//10798751672030653963/input_step1 tmp//10798751672030653963/pref_step1 tmp//10798751672030653963/aln_step1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 239 type: Aminoacid; Target database size: 239 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 239 0s 46ms; Time for merging to aln_step1: 0h 0m 0s 11ms; 308 alignments calculated; 270 sequence pairs passed the thresholds (0.876623 of overall calculated); 1.129707 hits per query sequence; Time for processing: 0h 0m 0s 78ms; clust tmp//10798751672030653963/input_step1 tmp//10798751672030653963/aln_step1 tmp//10798751672030653963/clu_step1 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [======================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:17577,load,load-mode,17577,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['load'],['load-mode']
Performance,ing works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2/build-mpi; ```. Output of following `make`:; ```; Scanning dependencies of target microtar; [ 1%] Building C object lib/microtar/CMakeFiles/microtar.dir/microtar.c.o; Linking C static library libmicrotar.a; [ 1%] Built target microtar; Scanning dependencies of target cacode; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lubksb.cpp.o; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/ludcmp.cpp.o; [ 3%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/nrutil.cpp.o; [ 3%] Built target cacode; Scanning dependencies of target alp; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogprob.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_random.cpp.o; [ 4%] Bui,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:2999,Perform,Performing,2999,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,4,['Perform'],['Performing']
Performance,"init: 0h 0m 0s 985ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 109; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 221; Target db start 1 to 221; [=================================================================] 100.00% 221 0s 31ms. 190.836300 k-mers per position; 8 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step2: 0h 0m 0s 4ms; Time for processing: 0h 0m 1s 644ms; align tmp//538598962955004214/input_step2 tmp//538598962955004214/input_step2 tmp//538598962955004214/pref_step2 tmp//538598962955004214/aln_step2 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 221 type: Aminoacid; Target database size: 221 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 221 0s 47ms; Time for merging to aln_step2: 0h 0m 0s 5ms; 364 alignments calculated; 254 sequence pairs passed the thresholds (0.697802 of overall calculated); 1.149321 hits per query sequence; Time for processing: 0h 0m 0s 94ms; clust tmp//538598962955004214/input_step2 tmp//538598962955004214/aln_step2 tmp//538598962955004214/clu_step2 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [=============================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:21493,load,load-mode,21493,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['load'],['load-mode']
Performance,"int*, int, size_t, size_t)’: --param max-inline-insns-single limit reached [-Winline]; inline float CSProfile::computeContextScore(float ** context_weights,; ^; /galaxy/home/ksahlin/prefix/source/MMseqs2/src/commons/CSProfile.cpp:304:118: warning: called from here [-Winline]; float contextScore = computeContextScore(ctxLib->context_weights[k], seq->int_sequence, seq->L, i, center);; ^; [ 39%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/LibraryReader.cpp.o; [ 39%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Sequence.cpp.o; [ 40%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/SubstitutionMatrix.cpp.o; [ 40%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/tantan.cpp.o; [ 40%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/UniprotKB.cpp.o; [ 41%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/commons/Util.cpp.o; [ 41%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/CacheFriendlyOperations.cpp.o; [ 42%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/ExtendedSubstitutionMatrix.cpp.o; [ 42%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Indexer.cpp.o; [ 42%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/IndexBuilder.cpp.o; [ 43%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/KmerGenerator.cpp.o; [ 43%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Main.cpp.o; [ 44%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/Prefiltering.cpp.o; [ 44%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/PrefilteringIndexReader.cpp.o; [ 45%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/QueryMatcher.cpp.o; [ 45%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/ReducedMatrix.cpp.o; [ 45%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/prefiltering/SequenceLookup.cpp.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:11695,Cache,CacheFriendlyOperations,11695,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,1,['Cache'],['CacheFriendlyOperations']
Performance,ir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:1767,Perform,Performing,1767,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,10,['Perform'],['Performing']
Performance,"ix blosum62.out; Add backtrace false; Alignment mode 2; E-value threshold 0.001; Seq. Id Threshold 0; Min. alignment length 0; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0; Coverage Mode 0; Max. sequence length 65535; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Gap open cost 11; Gap extension cost 1; Threads 10; Compressed 0; Verbosity 3; Seed Substitution Matrix VTML80.out; Sensitivity 7.5; K-mer size 6; K-score 2147483647; Alphabet size 21; Max. results per query 300; Offset result 0; Split DB 0; Split mode 2; Split Memory Limit 0; Diagonal Scoring 1; Exact k-mer matching 0; Mask Residues 1; Mask lower case residues 0; Minimum Diagonal score 15; Spaced Kmer 1; Spaced k-mer pattern ; Local temporary path ; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Mask profile 1; Profile e-value threshold 0.1; Use global sequence weighting false; Filter MSA 1; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 1000; Omit Consensus false; Min codons in orf 30; Max codons in length 32734; Max orf gaps 2147483647; Contig start mode 2; Contig end mode 2; Orf start mode 1; Forward Frames 1,2,3; Reverse Frames 1,2,3; Translation Table 1; Use all table starts false; Offset of numeric ids 0; Add Orf Stop false; Chain overlapping alignments 0; Search type 0; Number search iterations 1; Start sensitivity 4; Search steps 1; Run a seq-profile search in slice mode false; Strand selection 1; Disk space limit 0; Sets the MPI runner ; Force restart using the latest tmp false; Remove Temporary Files false. Program call:; prefilter pbps.neighbors.DB pfam_profile.idx tmp/6822607060114486044/pref --sub-mat blosum62.out --seed-sub-mat VTML80.ou",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132:1208,perform,performs,1208,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132,1,['perform'],['performs']
Performance,"k 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	36; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 36 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	36; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process fi",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:22915,perform,performs,22915,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['perform'],['performs']
Performance,"k profile 1; Profile E-value threshold 0.1; Global sequence weighting false; Allow deletions false; Filter MSA 1; Maximum seq. id. threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select N most diverse seqs 1000; Min codons in orf 30; Max codons in length 32734; Max orf gaps 2147483647; Contig start mode 2; Contig end mode 2; Orf start mode 1; Forward frames 1,2,3; Reverse frames 1,2,3; Translation table 1; Translate orf 0; Use all table starts true; Offset of numeric ids 0; Create lookup 0; Add orf stop false; Overlap between sequences 0; Sequence split mode 1; Header split mode 0; Chain overlapping alignments 0; Merge query 1; Search type 0; Search iterations 1; Start sensitivity 4; Search steps 1; Exhaustive search mode false; Filter results during exhaustive search 0; Strand selection 1; LCA search mode false; Disk space limit 0; MPI runner ; Force restart with latest tmp false; Remove temporary files false. prefilter query_db/db /fsx/scratch/mmseqs/mmseqs-nf/d3d8e6be-a51b-4707-b105-d650f029c7be/MMSEQS/BLAST_DB_SEARCH/mmseqs_search/340477856621524793/t_orfs_aa /fsx/scratch/mmseqs/mmseqs-nf/d3d8e6be-a51b-4707-b105-d650f029c7be/MMSEQS/BLAST_DB_SEARCH/mmseqs_search/340477856621524793/search/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 589824T -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 96 --compressed 1 -v 3 -s 6.0 . Query database size: 727664 type: Aminoacid; Estimated memory consumption: 60T; Target database size: 13319670203 type: Aminoacid; Index table k-mer threshold: 118 at k-mer size 7 ; Index table: counting k-mers; Error: Prefilter died; Error: Search step died; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/438#issuecomment-1176243510:3646,load,load-mode,3646,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/438#issuecomment-1176243510,1,['load'],['load-mode']
Performance,"le.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:13158,optimiz,optimized,13158,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 9 (LWP 7909 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:47",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:21528,optimiz,optimized,21528,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:20598,optimiz,optimized,20598,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:19668,optimiz,optimized,19668,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:18738,optimiz,optimized,18738,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:17808,optimiz,optimized,17808,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:16878,optimiz,optimized,16878,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:15948,optimiz,optimized,15948,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:15018,optimiz,optimized,15018,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:14088,optimiz,optimized,14088,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:11199,optimiz,optimized,11199,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:10269,optimiz,optimized,10269,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:9339,optimiz,optimized,9339,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:8409,optimiz,optimized,8409,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:7479,optimiz,optimized,7479,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:6549,optimiz,optimized,6549,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:5619,optimiz,optimized,5619,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x000000000",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:3692,optimiz,optimized,3692,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:2762,optimiz,optimized,2762,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"le.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 31 (LWP 7931 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:1832,optimiz,optimized,1832,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"lion sequences and used in different projects already. As it seems, It may not be good idea to use db files from easy-cluster output. Do you think it is useful to create a new db (EBdb) out of easy-cluster output of the previous run, using rep_seq.fasta, and use EBdb as a template to compare newer sequences I want to cluster and finally update the EBdb to EBdb_new?. Intikhab. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 08 September 2020 12:42; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). You are running a very old version of MMseqs2. Please update to the latest version. Especially cluster updating had multiple severe issues before the latest release. It was also spending 35h in the very simple module result2repseq. I think I fixed the performance issue in the latest commit cc7d7da<https://github.com/soedinglab/MMseqs2/commit/cc7d7da30ec779d6a2e886438f8295f59e2192f1>. You'll find statically compiled binaries here in about one hour: https://mmseqs.com/latest. Cluster updating also doesn't interact very nicely with the easy- workflows yet. I'd recommend to stick to the basic commands as shown in the user guide. -; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AAV63EW3N5Z32FV3JA5T3JDSEX37XANCNFSM4Q7W6YLA>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688772337:1614,perform,performance,1614,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688772337,1,['perform'],['performance']
Performance,"list for 1 split; [=================================================================] 773.45M 3m 43s 762ms. Adjusted k-mer length 18; Sort kmer 0h 0m 8s 851ms; Sort by rep. sequence 0h 0m 0s 535ms; Merge splits ... Time for fill: 0h 0m 8s 279ms; Time for merging to pref: 0h 0m 0s 18ms; Time for processing: 2h 8m 37s 699ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.9 -a 0 --cov-mode 1 --min-seq-id 0.95 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 50 --compressed 0 -v 3 . [=================================================================] 773.45M 16m 6s 276ms; Time for merging to pref_rescore1: 0h 37m 19s 763ms; Time for processing: 1h 10m 8s 990ms; clust /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref_rescore1 /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pre_clust --cluster-mode 2 --max-iterations 1000 --similarity-type 2 --threads 50 --compressed 0 -v 3 . Clustering mode: Greedy; Total time: 0h 1m 16s 664ms. Size of the sequence database: 773451991; Size of the alignment database: 773451991; Number of clusters: 764944220. Writing results 0h 3m 47s 47ms; Time for merging to pre_clust: 0h 0m 0s 32ms; Time for processing: 0h 15m 54s 367ms; createsubdb /hwfssz1/S",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:11693,load,load-mode,11693,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['load'],['load-mode']
Performance,"mat 'aa:VTML80.out,nucl:nucleotide.out' -s 8 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 10000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 96 --compressed 0 -v 3. align result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_0 result_query_20230412_142303/tmp/18292001434761310910/aln_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 1 --alignment-mode 2 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.1 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 1 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --threads 96 --compressed 0 -v 3. result2profile result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/aln_0 result_query_20230412_142303/tmp/18292001434761310910/profile_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -e 0.1 --mask-profile 1 --e-profile 0.1 --comp-bias-corr 1 --comp-bias-corr-scale 1 --wg 0 --allow-deletion 0 --filter-msa 1 --filter-min-enable 0 --max-seq-id 0.9 --qid '0.0' --qsc -20 --cov 0 --diff 1000 --pseudo-cnt-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --db-load-mode 2 --gap-open aa:11,nucl:5 --ga",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:3145,load,load-mode,3145,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"mat alignment output 	query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits; Database output 	false; Overlap threshold 	0; Database type 	0; Shuffle input database 	true; Createdb mode 	0; Write lookup file 	0; Greedy best hits 	false. createdb query.fasta tmp/5560041094345909208/query --dbtype 0 --shuffle 1 --createdb-mode 0 --write-lookup 0 --id-offset 0 --compressed 0 -v 3 . Converting sequences; [; Time for merging to query_h: 0h 0m 0s 23ms; Time for merging to query: 0h 0m 0s 22ms; Database type: Aminoacid; Time for processing: 0h 0m 0s 105ms; Create directory tmp/5560041094345909208/search_tmp; search tmp/5560041094345909208/query targetDB_split/targetDB_split_0_32 tmp/5560041094345909208/result tmp/5560041094345909208/search_tmp --alignment-mode 3 -s 7 --remove-tmp-files 1 . prefilter tmp/5560041094345909208/query targetDB_split/targetDB_split_0_32 tmp/5560041094345909208/search_tmp/4325254035791307643/pref_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -k 0 --target-search-mode 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 32 --compressed 0 -v 3 -s 7.0 . Query database size: 14 type: Aminoacid; Estimated memory consumption: 23G; Target database size: 6263739 type: Aminoacid; Index table k-mer threshold: 100 at k-mer size 6 ; Index table: counting k-mers; [=================================================================] 6.26M 33s 798ms; Index table: Masked residues: 16716549; Index table: fill; [=================================================================; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899655257:4255,load,load-mode,4255,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899655257,1,['load'],['load-mode']
Performance,"mp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref_count.tsv --stat linecount --tsv --threads 256 --compressed 0 -v 3 . [=================================================================] 280.71K 0s 74ms; Time for merging to pref_count.tsv: 0h 0m 0s 77ms; Time for processing: 0h 0m 0s 753ms; align /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/profileDB /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 5.25861e-07 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 10000 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 256 --compressed 0 -v 3 . Compute score, coverage and sequence identity; Query database size: 280714 type: Nucleotide; Target database size: 69220 type: Nucleotide; Calculation of alignments; [=================================================================] 280.71K 3m 53s 720ms; Time for merging to aln: 0h 0m 0s 84ms; 356937745 alignments calculated; 350790208 sequence pairs passed the thresholds (0.982777 of overall calculated); 1249.635620 hits per query sequence; Time for processing: 0h 3m 57s 914ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref -v 3 . Time for processing: 0h 0m 0s 432ms; swapresults /tmp/tmp_MMSeq2/17595625152138277869/search_tmp/17414849138893322762/target_",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:9348,load,load-mode,9348,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['load'],['load-mode']
Performance,"ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 146; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 2328975; Target db start 1 to 13003941; [=================================================================] 2.33M 2m 23s 577ms. 183.593905 k-mers per position; 20689 DB matches per sequence; 0 overflows; 0 sequences passed prefiltering per query sequence; 1 median result list length; 54469 sequences with 0 size result lists; Time for merging to pref_1: 0h 0m 0s 793ms; Time for processing: 0h 5m 46s 599ms; align tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_0 /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/search/pref_1 tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 40 --compressed 0 -v 3 . Compute score, coverage and sequence identity; Query database size: 2328975 type: Aminoacid; Target database size: 13003941 type: Aminoacid; Calculation of alignments; [=================================================================] 2.33M 3s 448ms; Time for merging to aln_1: 0h 0m 0s 794ms. 2274506 alignments calculated.; 57971 sequence pairs passed the thresholds (0.025487 of overall calculated).; 0.024891 hits per query sequence.; Time for processing: 0h 0m 6s 29ms; mergedbs tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge_new tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_0 tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_1 --compressed 0 -v 3 . Merging the r",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:9491,load,load-mode,9491,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['load'],['load-mode']
Performance,"ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 276; Target db start 1 to 276; [=================================================================] 100.00% 276 0s 31ms. 1.374916 k-mers per position; 5 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step0: 0h 0m 0s 2ms; Time for processing: 0h 0m 1s 665ms; align tmp//538598962955004214/input_step_redundancy tmp//538598962955004214/input_step_redundancy tmp//538598962955004214/pref_step0 tmp//538598962955004214/aln_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 276 type: Aminoacid; Target database size: 276 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 276 0s 77ms; Time for merging to aln_step0: 0h 0m 0s 9ms; 413 alignments calculated; 406 sequence pairs passed the thresholds (0.983051 of overall calculated); 1.471014 hits per query sequence; Time for processing: 0h 0m 0s 121ms; clust tmp//538598962955004214/input_step_redundancy tmp//538598962955004214/aln_step0 tmp//538598962955004214/clu_step0 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [==================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:13265,load,load-mode,13265,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['load'],['load-mode']
Performance,"n environmental results; mmseqs expandaln outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --threads 4. mmseqs align outdir/tmp/env/latest/profile_1 /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp outdir/res_env_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter environmental results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign outdir/res_env_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --max-seq-id 1.0 --threads 4 --filter-min-enable 100. # Convert environmental results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign_filter outdir/env.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Merge results; mmseqs mergedbs queryDB outdir/final.a3m outdir/uniref.a3m outdir/env.a3m. # Unpack results; mmseqs unpackdb outdir/final.a3m outdir --unpack-name-mode 0 --unpack-suffix .a3m; ```; As it stands, I am not converting from DB to a3m until after the filter (with diff =256) so maybe MSA sizes will be okay? Any thoughts?. What I changed from colabfold default, but plan to ""search"" over for MSA quality and run time: ; e_value (for search) -> 1e-4; max_seqs (for search) -> 25; max_accept (for alignment); diff -> (filter) 256. Thanks again. EDIT: Since I am doing an iterative search, would we expect an indexed and in memory target DB to speed up search? I am gathering no based on other conversations given that my use case is large batches and not single queries?. EDIT2: Re. the purpose - correct, I have no need to run structure prediction. The MSAs are going into MSATransfor",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:2981,load,load-mode,2981,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,"n length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	1; Start sensitivity 	1; Search steps 	3; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Remove Temporary Files 	false. Program call:; align /tmp/global2/nyoungblut/LLMGAG_27929269397/linclust/genes_db /ebio/abt3_projects/databases_no-backup/uniclust/uniclust90_2018_08_db /tmp/global2/nyoungblut/LLMGAG_27929269397/taxonomy/tmp//15538800487586745695/tmp_hsp1/17220669400861690567/pref_1.000 /tmp/global2/nyoungblut/LLMGAG_27929269397/taxonomy/tmp//15538800487586745695/tmp_hsp1/17220669400861690567/aln_1.000 --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 -v 3. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id.	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Verbosity 	3. Init data structures...; Compute score and coverage.; Touch data file /tmp/global2/nyoungblut/LLMGAG_27929269397/linclust/genes_db ... Done.; Touch data file /ebio/abt3_projects/databases_no-backup/uniclust/uniclust90_2018_08_db ... Done.; Query data",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032:6254,load,load-mode,6254,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032,1,['load'],['load-mode']
Performance,"nment 0 --mask-profile 1 --e-profile 0.001 --wg 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --omit-consensus 0 --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --add-orf-stop 0 --chain-alignments 0 --search-type 0 --num-iterations 1 --start-sens 4 --sens-steps 1 --slice-search 0 --strand 1 --disk-space-limit 0 --force-reuse 0 --remove-tmp-files 0. Program call:; prefilter clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus tmp_part-14/8093924424180559474/tmp_hsp1/12507882511714639255/pref_0 --sub-mat blosum62.out --seed-sub-mat VTML80.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 200 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 24 --compressed 0 -v 3 -s 5.7. Initialising data structures...; Using 24 threads.; Substitution matrices...; Substitution matrices...; Could not find precomputed index. Compute index.; Touch data file /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus ... Done.; Use kmer size 7 and split 1 using Target split mode.; Needed memory (83288349429 byte) of total memory (973956888576 byte); Target database: /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus(Size: 22555708); Query database type: Aminoacid; Target database type: Aminoacid; Time for init: 0h 0m 14s 497ms; Query database: clusters_rep-seqs_db_14_30(size=40624); Process prefiltering step 1 of 1. Index table k-mer threshold: 122; Index table:",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:5614,load,load-mode,5614,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['load'],['load-mode']
Performance,"nsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:4423,optimiz,optimized,4423,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"o ""word""...; Reading symbols from mmseqs...done.; (gdb) r; Starting program: mmseqs convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --translation-table 1 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --db-output 0 --db-load-mode 0 --search-type 3 --threads 16 --compressed 0 -v 3 . MMseqs Version: 	1f302134aa1c6c7c4e2b9da272fd26af33860780; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Alignment format 	0; Format alignment output	query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen; Translation table 	1; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Database output 	false; Preload mode 	0; Search type 	3; Threads 	16; Compressed 	0; Verbosity 	3. [New Thread 0x155554aca700 (LWP 28907)]; [New Thread 0x1555548c9700 (LWP 28908)]; [New Thread 0x1555546c8700 (LWP 28909)]; [New Thread 0x1554ea593700 (LWP 28921)]; [New Thread 0x1554ea392700 (LWP 28922)]; [New Thread 0x1554ea191700 (LWP 28923)]; [New Thread 0x1554e9f90700 (LWP 28924)]; [New Thread 0x15549ceb2700 (LWP 28925)]; [New Thread 0x15549ccb1700 (LWP 28926)]; [New Thread 0x15549cab0700 (LWP 28927)]; [New Thread 0x15549c8a",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628:2357,load,load-mode,2357,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628,1,['load'],['load-mode']
Performance,"oduce too much hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step1: 0h 0m 0s 25ms; Time for processing: 0h 0m 1s 533ms; align /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/pref_step1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/aln_step1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --zdrop 40 --threads 12 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 6 type: Aminoacid; Target database size: 6 type: Aminoacid; Calculation of alignments; [=================================================================] 6 0s 1ms; Time for merging to aln_step1: 0h 0m 0s 4ms. 6 alignments calculated.; 6 sequence pairs passed the thresholds (1.000000 of overall calculated).; 1.000000 hits per query sequence.; Time for processing: 0h 0m 0s 17ms; clust /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/aln_step1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/clu_s",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:26188,load,load-mode,26188,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['load'],['load-mode']
Performance,"op 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust artificial2/DB_artificial tmp//7897776346521331899/clu_redundancy tmp//7897776346521331899/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:2647,load,load-mode,2647,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['load'],['load-mode']
Performance,"otide.out,aa:blosum62.out -e 1e-05 --mask-profile 1 --e-profile 0.1 --comp-bias-corr 1 --wg 0 --allow-deletion 0 \; > --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --pca 0 --pcb 1.5 --db-load-mode 0 --gap-open nucl:5,aa:11 \; > --gap-extend nucl:2,aa:1 --threads 8 --compressed 0 -v 3; result2profile /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/09/seqs_db /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_target/mmseqs_tax.db /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/09/TMP/1355100225373504351/tmp_hsp1/9650299475897910544/aln_0 /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/09/TMP/1355100225373504351/tmp_hsp1/9650299475897910544/profile_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 1e-05 --mask-profile 1 --e-profile 0.1 --comp-bias-corr 1 --wg 0 --allow-deletion 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --pca 0 --pcb 1.5 --db-load-mode 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 8 --compressed 0 -v 3. MMseqs Version: 	a6cab565c98376623e82c3a04d186219d4c2f10c; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; E-value threshold 	1e-05; Mask profile 	1; Profile E-value threshold 	1e-05; Compositional bias 	1; Global sequence weighting 	false; Allow deletions 	false; Filter MSA 	1; Maximum seq. id. threshold	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs	1000; Pseudo count a 	0; Pseudo count b 	1.5; Preload mode 	0; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Threads 	8; Compressed 	0; Verbosity 	3. Query database size: 1151 type: Aminoacid; Target database size: 41195879 type: Aminoacid; ================================================================= ] 46.43% 535 eta 0s; ==71239==ERROR: AddressSanitizer: heap-buffer-overflow on address 0x61a0000233e0 at pc 0x55c61d242cd7 bp 0x7fc0f27db1b0 sp 0x7fc0f27db1a0; WRITE of size 1 at 0x61a0000233e0 thread T3;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814682245:1485,load,load-mode,1485,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814682245,1,['load'],['load-mode']
Performance,"ould I remove the whole github repo for a clean installation or is this compilation error something that was introduced in the commit?; See log below. ```; [ksahlin@desmond build]$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 4.9.2; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Source Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Project Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Compiler is GNU ; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Using CPU native flags for SSE optimization: -march=native; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.1 extensions, using flags: -march=native -msse4.1 -mfpmath=sse; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB work",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:915,Perform,Performing,915,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,21,"['Perform', 'optimiz']","['Performing', 'optimization']"
Performance,"ov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 136 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 136 0s 41ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 149ms; rescorediagonal artificial2/DB_artificial artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref tmp//7897776346521331899/linclust/17269245559208916342/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [=================================================================] 100.00% 136 0s 18ms; Time for merging to pref_rescore1: 0h 0m 0s 6ms; Time for processing: 0h 0m 0s 48ms; clust artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref_rescore1 tmp//7897776346521331899/linclust/17269245559208916342/pre_clust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [=================================================================] 100.00% 136 0s 1ms; Sort entries; Find missing connections; Found 9 new connections.; Reconstruct initial order; [=================================================================] 100.00% 136 0s 2ms; Add missing connections; [=================================================================] 100.00% 136 0s 0ms. Time for read in: 0h 0m 0s 30ms; Total time: 0h 0m 0s 33ms. Size of the sequence database: 136;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:4969,load,load-mode,4969,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['load'],['load-mode']
Performance,"p/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref_count.tsv --stat linecount --tsv --threads 256 --compressed 0 -v 3 . [=================================================================] 15.29M 1s 717ms; Time for merging to pref_count.tsv: 0h 0m 4s 684ms; Time for processing: 0h 0m 14s 46ms; align /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/profileDB /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 5.25861e-07 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 10000 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 256 --compressed 0 -v 3 . Compute score, coverage and sequence identity; Query database size: 15288254 type: Nucleotide; Target database size: 69220 type: Nucleotide; Calculation of alignments; [=================================================================] 15.29M 2h 10m 35s 557ms; Time for merging to aln: 0h 0m 13s 903ms; 12490036390 alignments calculated; 12287580750 sequence pairs passed the thresholds (0.983791 of overall calculated); 803.726868 hits per query sequence; Time for processing: 2h 10m 56s 695ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref -v 3 . Time for processing: 0h 0m 8s 279ms; swapresults /tmp/tmp_MMSeq2/17595625152138277869/search_tmp/17414849138893322",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:15035,load,load-mode,15035,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['load'],['load-mode']
Performance,"p/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref_count.tsv --stat linecount --tsv --threads 256 --compressed 0 -v 3 . [=================================================================] 23.55M 2s 494ms; Time for merging to pref_count.tsv: 0h 0m 8s 27ms; Time for processing: 0h 0m 21s 772ms; align /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/profileDB /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 5.25861e-07 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 10000 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 256 --compressed 0 -v 3 . Compute score, coverage and sequence identity; Query database size: 23551830 type: Nucleotide; Target database size: 69220 type: Nucleotide; Calculation of alignments; [===============================Can not write to data file /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln.200; Can not write to data file /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln.166; free(): corrupted unsorted chunks; Can not write to data file /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln.241; Can not write to data file /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln.167; Can not write to ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:21695,load,load-mode,21695,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['load'],['load-mode']
Performance,"p/9700814981231218113/search_tmp/10627605686170015473/search/input_2 -v 3 . Time for processing: 0h 0m 0s 0ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge -v 3 . Time for processing: 0h 0m 0s 11ms; offsetalignment tmp/9700814981231218113/query tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa /d/Databases/Kegg/sram/mmseqs/kegg /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/aln tmp/9700814981231218113/result --chain-alignments 0 --merge-query 1 --search-type 0 --threads 40 --compressed 0 --db-load-mode 0 -v 3 . Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 0s 93ms; Writing results to: tmp/9700814981231218113/result; [=================================================================] 516.30K 0s 162ms. Time for merging to result: 0h 0m 0s 158ms; Time for processing: 0h 0m 1s 659ms; Remove temporary files; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa . Time for processing: 0h 0m 0s 45ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/t_orfs_aa . Time for processing: 0h 0m 0s 0ms; convertalis tmp/9700814981231218113/query /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/result test.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits --translation-table 1 --gap-open 11 --gap-extend 1 --db-output 0 --db-load-mode 0 --search-type 0 --threads 40 --compressed 0 -v 3 . [=================================================================] 516.30K 0s 84ms; Time for merging to test.m8: 0h 0m 0s 181ms; Time for processing: 0h 0m 2s 227ms; Removing temporary files; rmdb tmp/9700814981231218113/result . Time for processing: 0h 0m 0s 8ms; rmdb tmp/9700814981231218113/query . Time for processing: 0h 0m 0s 38ms; rmdb tmp/9700814981231218113/query_h . Time for processing: 0h 0m 0s 3ms",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:17249,load,load-mode,17249,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['load'],['load-mode']
Performance,"p:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 1 (LWP 7869 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, command=..., returnAlnRes=<optimized out>) at /home/vsts/work/1/s/src/util/result2profile.cpp:140; #7 0x0000000000427a67 in runCommand (p=0x1e903c0, argc=argc@entry=6, argv=argv@entry=0x7fff44ebc578) at /home/vsts/work/1/s/src/commons/Application.cpp:47; #8 0x000000000040e7d6 in main (argc=8, argv=0x7fff44ebc568) at /home/vsts/work/1/s/src/commons/Application.cpp:203; ```; For the clu90 job:; ```; (gdb) thread apply all bt. Thread 32 (Thread 0x7f6e65ffe640 (LWP 135852) ""mmseqs""):; #0 futex_wait (val=0, addr=0x5f8465e1c2c4) at ../../../libgomp/config/linux/x86/futex.h:97; #1 do_wait (addr=addr@entry=0x5f8465e1c2c4, val=val@entry=0) at ../../../libgomp/config/linux/wait.h:67; #2 0x00007f7069056753 in gomp_team_barrier_wait_end (bar=0x5f8465e1c2c0, state=0) at ../../../libgomp/config/linux/bar.c:112; #3 0x00007f7069055daa in gomp_work_share_end () at ../../../libgomp/work.c:254; #4 0x00005f846452c867 in result2profile(int, ch",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:29888,optimiz,optimized,29888,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,2,['optimiz'],['optimized']
Performance,"pen aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0; ```. Output:; ```; linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat aa:blosum62.out,nucl:nucleotide.out -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0. MMseqs Version: 	6b9388469a41935813f5d207d6d149767feb4c42-MPI; Cluster mode 	0; Max connected component depth 	1000; Similarity type 	2; Threads 	24; Compressed 	0; Verbosity 	3; Weight file name; Cluster Weight threshold 	0.9; Substitution matrix 	aa:blosum62.out,nucl:nucleotide.out; Add backtrace 	false; Alignment mode 	3; Align",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364:2129,load,load-mode,2129,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364,1,['load'],['load-mode']
Performance,"perate DBs? I assume `splitdb`?. Here is my current list of commands in hard coded format:. ```; # UniRef search ; mmseqs search queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res outdir/tmp --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Move profile; mmseqs mvdb outdir/tmp/latest/profile_1 outdir/prof_res; mmseqs lndb queryDB_h outdir/prof_res_h. # Expand and align UniRef results; mmseqs expandaln queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp --expansion-mode 0 -e inf --expand-filter-clusters 1 --max-seq-id 0.95 --db-load-mode 1 --threads 4. mmseqs align outdir/prof_res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp outdir/res_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter UniRef results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign outdir/res_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --threads 4 --max-seq-id 1.0 --filter-min-enable 100. # Convert UniRef results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign_filter outdir/uniref.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Environmental search; mmseqs search outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env outdir/tmp/env --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Expand and align environmental results; mmseqs expandaln outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --th",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:1337,load,load-mode,1337,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,phabetSize: 21; Masked: 0; Spaced: 1; KmerScore: 90; SequenceType: Profile; SourcSeqType: Profile; Headers1: 1; Headers2: 0; ScoreMatrix: VTML80.out; Result database: tmp/6822607060114486044/pref; Computing offsets.; ................................................................................................... 1 Mio. sequences processed; ....................................; Reading results.; ................................................................................................... 1 Mio. sequences processed; ....................................; Output database: tmp/6822607060114486044/pref_swapped; .; Time for merging files: 0h 0m 0s 23ms; Time for processing: 0h 0m 46s 63ms; Program call:; align pfam_profile.idx pbps.neighbors.DB tmp/6822607060114486044/pref_swapped tmp/6822607060114486044/aln_swapped --sub-mat blosum62.out -a 0 --alignment-mode 2 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 10 --compressed 0 -v 3 . Init data structures...; Touch data file pbps.neighbors.DB ... Done.; Use index pfam_profile.idx; Index version: 15; Generated by: 8-fac81; MaxSeqLength: 65535; KmerSize: 6; CompBiasCorr: 1; AlphabetSize: 21; Masked: 0; Spaced: 1; KmerScore: 90; SequenceType: Profile; SourcSeqType: Profile; Headers1: 1; Headers2: 0; ScoreMatrix: VTML80.out; Compute score and coverage.; Query database type: Profile; Target database type: Aminoacid; Calculation of Smith-Waterman alignments.; .Time for merging files: 0h 0m 0s 23ms. All sequences processed. 390452377 alignments calculated.; 1899900 sequence pairs passed the thresholds (0.00486589 of overall calculated).; 106.904 hits per query sequence.; Time for processing: 0h 32m 50s 752ms; Program call:; swapresults pfam_profile.idx pbps.neighbors.DB tmp/682,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132:5458,load,load-mode,5458,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132,1,['load'],['load-mode']
Performance,"prefiltering step 1 of 1. k-mer similarity threshold: 145; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 2310; Target db start 1 to 713072; [=================================================================] 100.00% 2.31K 0s 200ms. 8.191356 k-mers per position; 1212 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 0 sequences passed prefiltering per query sequence; 0 median result list length; 2301 sequences with 0 size result lists; Time for merging to orfs_pref: 0h 0m 0s 457ms; Time for processing: 0h 0m 1s 487ms; rescorediagonal tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aa MicroEuk100.eukaryota_odb10.idx tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_pref tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aln --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --rescore-mode 2 --wrapped-scoring 0 --filter-hits 0 -e 100 -c 0 -a 0 --cov-mode 0 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 128 --compressed 0 -v 3. Index version: 16; Generated by: 14.7e284; ScoreMatrix: VTML80.out; [=================================================================] 100.00% 2.31K 0s 3ms; Time for merging to orfs_aln: 0h 0m 0s 469ms; Time for processing: 0h 0m 1s 239ms; createsubdb tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aln.list tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aa tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_filter --subdb-mode 1 --id-mode 0 -v 3. Time for merging to orfs_filter: 0h 0m 0s 6ms; Time for processing: 0h 0m 0s 35ms; rmdb tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_filter_h -v 3. Time for processing: 0h 0m 0s 5ms; createsubdb tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aln.list tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_aa_h tmp//15404483323509150572/taxonomy",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640:6693,load,load-mode,6693,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640,1,['load'],['load-mode']
Performance,"qs Version: da6c1a5a7be5d82719f796b85ce9cbacf9f2162c-MPI; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 2; E-value threshold 0.001; Seq. Id Threshold 0; Min. alignment length 0; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Gap open cost 11; Gap extension cost 1; Threads 8; Compressed 0; Verbosity 3; Sensitivity 5.7; K-mer size 5; K-score 2147483647; Alphabet size 21; Offset result 0; Split DB 0; Split mode 2; Split Memory Limit 0; Diagonal Scoring 1; Exact k-mer matching 0; Mask Residues 1; Minimum Diagonal score 15; Spaced Kmer 1; Spaced k-mer pattern ; Local temporary path ; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Mask profile 1; Profile e-value threshold 0.1; Use global sequence weighting false; Filter MSA 1; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 1000; Omit Consensus false; Min codons in orf 30; Max codons in length 32734; Max orf gaps 2147483647; Contig start mode 2; Contig end mode 2; Orf start mode 1; Forward Frames 1,2,3; Reverse Frames 1,2,3; Translation Table 1; Use all table starts false; Offset of numeric ids 0; Add Orf Stop false; Number search iterations 1; Start sensitivity 4; Search steps 1; Run a seq-profile search in slice mode false; Strand selection 1; Disk space limit 0; Sets the MPI runner mpirun --pernode; Force restart using the latest tmp false; Remove Temporary Files false. [node218.cluster:134942] mca: base: component_find: unable to open /usr/mpi/gcc/openmpi-1.6.5/lib/openmpi/mca_mtl_psm: libpsm_infinipath.so.1: cannot open shared objec",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/164#issuecomment-463134521:1509,perform,performs,1509,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/164#issuecomment-463134521,1,['perform'],['performs']
Performance,"r/prof_res; mmseqs lndb queryDB_h outdir/prof_res_h. # Expand and align UniRef results; mmseqs expandaln queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp --expansion-mode 0 -e inf --expand-filter-clusters 1 --max-seq-id 0.95 --db-load-mode 1 --threads 4. mmseqs align outdir/prof_res /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp outdir/res_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter UniRef results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign outdir/res_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --threads 4 --max-seq-id 1.0 --filter-min-enable 100. # Convert UniRef results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/uniref30_2302_db outdir/res_exp_realign_filter outdir/uniref.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Environmental search; mmseqs search outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env outdir/tmp/env --num-iterations 3 --db-load-mode 1 -a -e 0.0001 --max-seqs 25 --prefilter-mode 0 -s 1 --threads 4. # Expand and align environmental results; mmseqs expandaln outdir/prof_res /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --threads 4. mmseqs align outdir/tmp/env/latest/profile_1 /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp outdir/res_env_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter environmental results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_r",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:1614,load,load-mode,1614,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['load'],['load-mode']
Performance,"r> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:11570,optimiz,optimized,11570,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"read for database data file=mmseqstest_nucl.fasta_QDB_h, database index=; ```. All the previous steps seem to work correctly (createdb, createindex, search) and have contents inside their files. For example, running head on the _QDB_h and _TDB_h files return the below result (both _h files are identical since my query is the nucleotide version of the prot sequence). ```; evm.model.utg902.1.8.5abb479e; evm.model.utg902.1.9.5abb479e; evm.model.utg902.1.10.5abb479e; evm.model.utg1004.80; evm.model.utg8847.1_evm.model.utg8847.2.3.5abb479e; evm.model.utg8847.1_evm.model.utg8847.2; evm.model.utg8847.1_evm.model.utg8847.2.5.5abb479e; evm.model.utg1937.4; evm.model.utg12562.19; ```. Head of the mmseqstest_nucl.fasta_QDB_h_index file == . ```; 1 0 32; 2 32 32; 3 64 33; 4 97 23; 5 120 53; 6 173 42; 7 215 53; 8 268 22; 9 290 24; ```. The _SDB file has this as its head. ```; 2 585 0.986 1.536E-193 1248 2085 1044 0 279 281; 1 514 0.877 2.516E-168 1248 2085 1044 0 280 282; 3 497 0.852 1.632E-162 1248 2085 1044 0 280 282; 7 365 1.000 2.704E-120 1075 1579 507 0 168 170; 6 316 0.883 2.496E-103 1075 1579 507 0 170 172; 5 306 0.857 1.240E-99 1075 1579 507 0 170 172; 3 591 0.993 2.689E-197 1081 1921 843 0 280 282; 1 520 0.886 7.407E-172 1081 1921 843 0 280 282; 2 493 0.845 2.708E-162 1081 1921 843 0 279 281; 1 591 0.993 2.689E-197 1081 1921 843 0 280 282; ```. The reason I was performing this test was to see how nucleotide -> protein searches worked and to see if the little wrapper script I made to automate MMS2 searches needed any modifications. I figured I'd try using the protein DB as both query and target which resulted in search and convertalis working perfectly. Thus, I think the issue me and @CHEN-Zhihan are having is occurring when performing a nucleotide -> protein search (based off his query file being named ""read.fasta"" I expect that it is a nucleotide sequence) and seems to be limited to the convertalis step since search looks fine to me. Does this sound right to you?. Zac.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-377736994:2812,perform,performing,2812,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-377736994,2,['perform'],['performing']
Performance,"rg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:4",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:12228,optimiz,optimized,12228,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"roduce too much hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step2: 0h 0m 0s 3ms; Time for processing: 0h 0m 1s 474ms; align /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step2 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step2 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/pref_step2 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/aln_step2 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --zdrop 40 --threads 12 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 6 type: Aminoacid; Target database size: 6 type: Aminoacid; Calculation of alignments; [=================================================================] 6 0s 1ms; Time for merging to aln_step2: 0h 0m 0s 3ms. 6 alignments calculated.; 6 sequence pairs passed the thresholds (1.000000 of overall calculated).; 1.000000 hits per query sequence.; Time for processing: 0h 0m 0s 15ms; clust /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/input_step2 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/aln_step2 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/clu_s",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:31239,load,load-mode,31239,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['load'],['load-mode']
Performance,"rt-results 0 --global-alignment 0 --mask-profile 1 --e-profile 0.001 --wg 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --omit-consensus 0 --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --add-orf-stop 0 --chain-alignments 0 --merge-query 1 --search-type 0 --num-iterations 1 --start-sens 4 --sens-steps 1 --slice-search 0 --strand 1 --disk-space-limit 0 --force-reuse 0 --remove-tmp-files 0. prefilter clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/mmseqs2_8.fac81/uniclust90_2018_08_db tmp_part-14/17957680840564044329/tmp_hsp1/2842639954524457022/pref_0 --sub-mat blosum62.out --seed-sub-mat VTML80.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 200 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 24 --compressed 0 -v 3 -s 5.7. Using 24 threads.; Estimated memory consumption 413414 MB; Target database size: 119988216 type: Aminoacid; Query database size: 40624 type: Aminoacid; Process prefiltering step 1 of 1. Index table k-mer threshold: 122 at k-mer size 7; Index table: counting k-mers; [=================================================================] 100.00% 119.99M 14m 40s 186ms; Index table: Masked residues: 372860390; Index table: fill; [=================================================================] 100.00% 119.99M 20m 55s 996ms; Index statistics; Entries: 38076912867; DB size: 227643 MB; Avg k-mer size: 29.747588; Top 10 k-mers; SGQQRIA	281769; GPGGKLL	259328; GQQVARA	172987; YTGTGKG	166889; GGQRVAR	143134; LLGPGKT	113836; LSGQQAI	94348; GGRRVAR	94149; ALGSGKS	92540; GRFVVEV	90006; Time for ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587:4806,load,load-mode,4806,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587,1,['load'],['load-mode']
Performance,"rubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Cluster mode 0; Max depth connected component 1000; Similarity type 2; Threads 8; Verbosity 3; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 3; E-value threshold 0.001; Seq. Id Threshold 0; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0.8; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; No preload false; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Alphabet size 21; Kmer per sequence 21; Mask Residues 1; K-mer size 0; Shift hash 5; Split Memory Limit 0; Include only extendable false; Skip sequence with n repeating k-mers 0; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Remove Temporary Files false; Sets the MPI runner. Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/ccs/ENSEMBL/1000000/ccs.fasta /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input --max-seq-len 65535 --dont-split-seq-by-len --dont-shuffle --id-offset 0 -v 3. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Max. sequence length 65535; Split Seq. by len false; Do not shuffle input database false; Offset of numeric ids 0; Verbosity 3. ...................................................................................................Time for merging files: 0h 0m 1s 611ms; Time for merging files: 0h 0m 1s 458ms; Time for processing: 0h 1m 30s 586ms; Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/pre",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120:1537,perform,performs,1537,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120,1,['perform'],['performs']
Performance,"rw-r--r-- 1 gnii0001 pc77 0 Jan 27 16:54 GTDB.index; -rw-r--r-- 1 gnii0001 pc77 0 Jan 27 17:33 GTDB_mapping; -rw-r--r-- 1 gnii0001 pc77 0 Jan 27 16:54 GTDB.source; -rw-r--r-- 1 gnii0001 pc77 25771406 Jan 27 17:33 GTDB_taxonomy. # slurm error; awk: cmd. line:1: fatal: cannot open file `/home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/GTDB.lookup' for reading: No such file or directory. # slurm standard output:; ....; Download Results:; gid |stat|avg speed |path/URI; ======+====+===========+=======================================================; 94ce2b|OK | 88MiB/s|/home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/bac120_taxonomy.tsv. Status Legend:; (OK):download completed. 01/27 17:33:08 [NOTICE] Downloading 1 item(s). 01/27 17:33:09 [NOTICE] Download complete: /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/ar53_taxonomy.tsv. Download Results:; gid |stat|avg speed |path/URI; ======+====+===========+=======================================================; 13f000|OK | 6.3MiB/s|/home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/ar53_taxonomy.tsv. Status Legend:; (OK):download completed.; Create directory /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/taxdb; createtaxdb /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/GTDB /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/taxdb --ncbi-tax-dump /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/taxonomy --tax-mapping-file /home/gnii0001/pc77/scratch_nobackup/Database/mmseqs_formatted/tmp/13846894499670505008/taxonomy/mapping_genomes --tax-mapping-mode 1 --threads 128 -v 3 . Loading nodes file ... Done, got 113318 nodes; Loading merged file ... Done, added 0 merged nodes.; Loading names file ... Done; Init RMQ ...Done; Error: createtaxdb died; ```. Any tips? Thanks.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/758#issuecomment-1913045806:2381,Load,Loading,2381,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/758#issuecomment-1913045806,3,['Load'],['Loading']
Performance,"s --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --threads 2 --compressed 0 -v 3 . [] 4h 52m 19s 671ms; Time for merging files: 0h 0m 12s 453ms; Time for merging files: 0h 0m 37s 79ms; Time for processing: 4h 53m 13s 946ms; translatenucs tmp/15531098257495296432/q_orfs tmp/15531098257495296432/q_orfs_aa --translation-table 1 --add-orf-stop 0 -v 3 --compressed 0 --threads 2 . [] 4h 49m 49s 475ms; Time for merging files: 0h 0m 13s 279ms; Time for processing: 4h 50m 4s 882ms; prefilter tmp/15531098257495296432/q_orfs_aa /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/search/pref_0 --sub-mat blosum62.out --seed-sub-mat VTML80.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 25 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 3 --pca 1 --pcb 1.5 --threads 2 --compressed 0 -v 3 -s 1.0 . Using 2 threads.; Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Estimated memory consumption 372556 MB; Target database size: 134985288 type: Aminoacid; Query database size: 12189231 type: Aminoacid; Process prefiltering step 1 of 1. k-mer similarity threshold: 174; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 12189231; Target db start 1 to 134985288; [] 5h 25m 52s 523ms. 5.520466 k-mers per position; 7748 DB matches per sequence; 0 overflows; 11 sequences passed prefiltering per query sequence; 8 median result list length; 2084890 sequences with 0 size result lists. Time for prefiltering scores calculation: 5h 25m 59s 596ms; Time for merging files: 0h 0m 17s 47ms; Time for processing: 5h 28m 30s 1",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:5064,load,load-mode,5064,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['load'],['load-mode']
Performance,"s 66ms; connected component mode; Total time: 0h 0m 0s 90ms. Size of the sequence database: 276; Size of the alignment database: 276; Number of clusters: 237. Writing results 0h 0m 0s 0ms; Time for merging to clu_step0: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 96ms; createsubdb tmpfiles//13298481167543164943/clu_step0 tmpfiles//13298481167543164943/input_step_redundancy tmpfiles//13298481167543164943/input_step1 -v 3 --subdb-mode 1. Time for merging to input_step1: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 1ms; prefilter tmpfiles//13298481167543164943/input_step1 tmpfiles//13298481167543164943/input_step1 tmpfiles//13298481167543164943/pref_step1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -s 3.5 -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 20 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 16 --compressed 0 -v 3. Query database size: 237 type: Aminoacid; Estimated memory consumption: 977M; Target database size: 237 type: Aminoacid; Index table k-mer threshold: 131 at k-mer size 6; Index table: counting k-mers; [=================================================================] 237 0s 39ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 237 0s 9ms; Index statistics; Entries: 1403; DB size: 488 MB; Avg k-mer size: 0.000022; Top 10 k-mers; XXXXXX 3; XXXXXX 3; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; XXXXXX 2; Time for index table init: 0h 0m 1s 25ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 131; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 237; Target db start 1 to 237; [==========================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:15641,load,load-mode,15641,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,"s; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/pref_1 -v 3 . Time for processing: 0h 0m 0s 15ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_1 -v 3 . Time for processing: 0h 0m 0s 7ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_1 -v 3 . Time for processing: 0h 0m 0s 11ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/pref_2 -v 3 . Time for processing: 0h 0m 0s 24ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_2 -v 3 . Time for processing: 0h 0m 0s 11ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/input_2 -v 3 . Time for processing: 0h 0m 0s 0ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge -v 3 . Time for processing: 0h 0m 0s 11ms; offsetalignment tmp/9700814981231218113/query tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa /d/Databases/Kegg/sram/mmseqs/kegg /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/aln tmp/9700814981231218113/result --chain-alignments 0 --merge-query 1 --search-type 0 --threads 40 --compressed 0 --db-load-mode 0 -v 3 . Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 0s 93ms; Writing results to: tmp/9700814981231218113/result; [=================================================================] 516.30K 0s 162ms. Time for merging to result: 0h 0m 0s 158ms; Time for processing: 0h 0m 1s 659ms; Remove temporary files; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa . Time for processing: 0h 0m 0s 45ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/t_orfs_aa . Time for processing: 0h 0m 0s 0ms; convertalis tmp/9700814981231218113/query /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/result test.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,pident,alnlen",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:16314,load,load-mode,16314,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['load'],['load-mode']
Performance,"search_tmp/16020913209305565279/q_orfs_aa --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --translate 1 --use-all-table-starts 0 --id-offset 0 --create-lookup 0 --threads 12 --compressed 1 -v 3 . [=================================================================] 100.00% 10.00K 0s 19ms ; Time for merging to q_orfs_aa_h: 0h 0m 0s 0ms; Time for merging to q_orfs_aa: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 27ms; prefilter tmp1/15089590555632328148/search_tmp/16020913209305565279/q_orfs_aa pfama_20230914/pfam-a-full tmp1/15089590555632328148/search_tmp/16020913209305565279/search/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -s 5.7 -k 5 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 12 --compressed 1 -v 3 . Query database size: 0 type: Aminoacid; Estimated memory consumption: 557M; Target database size: 19482 type: Profile; Index table k-mer threshold: 90 at k-mer size 5 ; Index table: counting k-mers; [=================================================================] 100.00% 19.48K 4s 492ms ; Index table: Masked residues: 0; Index table: fill; [=================================================================] 100.00% 19.48K 11s 88ms ; Index statistics; Entries: 454766207; DB size: 2633 MB; Avg k-mer size: 111.350382; Top 10 k-mers; RRRRR 1414; QQQQQ 1135; RRRRQ 985; SPPPP 965; QRRRR 962; PPPPS 953; RQRRR 940; RRRQR 927; RHRRR 914; RKRRR 902; Time for index table init: 0h 0m 16s 838ms; Time for processing: 0h 0m 17s 228ms; swapresults tmp1/15089590555632328148/search_tmp/160209132093",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/754#issuecomment-1725129947:4494,load,load-mode,4494,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/754#issuecomment-1725129947,1,['load'],['load-mode']
Performance,"split; [=================================================================] 6 0s 1ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 22ms; rescorediagonal /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 12 --compressed 0 -v 3. [=================================================================] 6 0s 3ms; Time for merging to pref_rescore1: 0h 0m 0s 7ms; Time for processing: 0h 0m 0s 23ms; clust /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref_rescore1 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pre_clust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 12 --compressed 0 -v 3. Clustering mode: Set Cover; [=================================================================] 6 0s 0ms; Sort entries; Find missing connections; Found 0 new connections.; Reconstruct initial order; [========================================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:9732,load,load-mode,9732,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['load'],['load-mode']
Performance,"std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:11896,optimiz,optimized,11896,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['optimiz'],['optimized']
Performance,"stive search	0; Strand selection 	1; LCA search mode 	false; Disk space limit 	0; MPI runner 	; Force restart with latest tmp 	false; Remove temporary files 	false. Accel. 2bLCA cannot be used with nucl-nucl taxonomy, using top-hit instead; search /data/ct/test/testdb /data/ct/datenbank/silva_mmseqs/silva /data/ct/tmp/17728638439372299279/first /data/ct/tmp/17728638439372299279/tmp_hsp1 --alignment-mode 1 -e 1 --max-rejected 5 --max-accept 30 -s 2 --spaced-kmer-mode 1 --min-length 30 --max-length 32734 --orf-start-mode 1 . prefilter /data/ct/tmp/17728638439372299279/tmp_hsp1/7295210961924303337/query_seqs_split /data/ct/datenbank/silva_mmseqs/silva.idx /data/ct/tmp/17728638439372299279/tmp_hsp1/7295210961924303337/search/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 15 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 10000 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 1 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 256 --compressed 0 -v 3 -s 2.0 . Index version: 16; Generated by: b1704ccc17f3814a1d640a83c6aa925bb0406809; ScoreMatrix: nucleotide.out; Query database size: 8000 type: Nucleotide; Estimated memory consumption: 18G; Target database size: 510984 type: Nucleotide; Process prefiltering step 1 of 1. k-mer similarity threshold: 0; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 8000; Target db start 1 to 510984; ^C===============> ] 25.00% 2.00K eta 5m 1s . **Runs of Intel computer**; [kabru@bwp-cfdmain test]$ mmseqs taxonomy testdb ~/datenbank/silvadb testx_result tmp; taxonomy testdb /home/kabru/datenbank/silvadb testx_result tmp . MMseqs Version: 	b1704ccc17f3814a1d640a83c6aa925bb0406809; ORF filter 	1; ORF filter e-value 	100; ORF filter sensitivity 	2; LCA mode 	3; Taxonomy outp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:3882,load,load-mode,3882,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,1,['load'],['load-mode']
Performance,"t nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust DB_in tmp//10798751672030653963/clu_redundancy tmp//10798751672030653963/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:2610,load,load-mode,2610,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['load'],['load-mode']
Performance,"t: 0h 0m 0s 908ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 131; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 124; Target db start 1 to 124; [=================================================================] 100.00% 124 0s 24ms. 15.668402 k-mers per position; 1 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step1: 0h 0m 0s 4ms; Time for processing: 0h 0m 1s 591ms; align tmp//7897776346521331899/input_step1 tmp//7897776346521331899/input_step1 tmp//7897776346521331899/pref_step1 tmp//7897776346521331899/aln_step1 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 124 type: Aminoacid; Target database size: 124 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 124 0s 26ms; Time for merging to aln_step1: 0h 0m 0s 3ms=================> ] 91.87% 114 eta 0s; 124 alignments calculated; 124 sequence pairs passed the thresholds (1.000000 of overall calculated); 1.000000 hits per query sequence; Time for processing: 0h 0m 0s 62ms; clust tmp//7897776346521331899/input_step1 tmp//7897776346521331899/aln_step1 tmp//7897776346521331899/clu_step1 --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [====",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:17626,load,load-mode,17626,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['load'],['load-mode']
Performance,"tep 1 of 1. k-mer similarity threshold: 154; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 276; Target db start 1 to 276; [================================================================] =276 0s 28ms. 1.374916 k-mers per position; 5 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_step0: 0h 0m 0s 5ms; Time for processing: 0h 0m 1s 852ms; align tmpfiles//13298481167543164943/input_step_redundancy tmpfiles//13298481167543164943/input_step_redundancy tmpfiles//13298481167543164943/pref_step0 tmpfiles//13298481167543164943/aln_step0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 16 --compressed 0 -v 3. Compute score, coverage and sequence identity; Query database size: 276 type: Aminoacid; Target database size: 276 type: Aminoacid; Calculation of alignments; [=================================================================] 276 0s 39ms; Time for merging to aln_step0: 0h 0m 0s 2ms. 413 alignments calculated.; 406 sequence pairs passed the thresholds (0.983051 of overall calculated).; 1.471014 hits per query sequence.; Time for processing: 0h 0m 0s 82ms; clust tmpfiles//13298481167543164943/input_step_redundancy tmpfiles//13298481167543164943/aln_step0 tmpfiles//13298481167543164943/clu_step0 --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Connected Component; [=================================================================] 276 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:13314,load,load-mode,13314,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['load'],['load-mode']
Performance,"tide; Target database size: 69220 type: Nucleotide; Calculation of alignments; [=================================================================] 280.71K 3m 53s 720ms; Time for merging to aln: 0h 0m 0s 84ms; 356937745 alignments calculated; 350790208 sequence pairs passed the thresholds (0.982777 of overall calculated); 1249.635620 hits per query sequence; Time for processing: 0h 3m 57s 914ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/pref -v 3 . Time for processing: 0h 0m 0s 432ms; swapresults /tmp/tmp_MMSeq2/17595625152138277869/search_tmp/17414849138893322762/target_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/query_seqs_split /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_swap --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 1.79769e+308 --split-memory-limit 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 256 --compressed 0 --db-load-mode 0 -v 3 . Computing offsets.; [=================================================================] 280.71K 0s 514ms. Reading results.; [=================================================================] 280.71K 1s 567ms. Output database: /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_swap; [=================================================================] 69.22K 3s 841ms. Time for merging to aln_swap: 0h 0m 0s 23ms; Time for processing: 0h 0m 12s 313ms; rmdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln -v 3 . Time for processing: 0h 0m 11s 128ms; mvdb /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_swap /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/aln_merged -v 3 . Time for processing: 0h 0m 0s 176ms; prefilter /tmp/tmp_MMSeq2//17595625152138277869/search_tmp/17414849138893322762/search/profileDB",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:10694,load,load-mode,10694,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['load'],['load-mode']
Performance,"tmp-files 0 --alignment-mode 4. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	4; E-value threshold 	0.001; Seq. Id Threshold 	0.9; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	2; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Verbosity 	3; Sensitivity 	2; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	0; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	2; Remove hits by seq.id. and coverage 	false; Sort results 	1; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.1; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	1; Max codons in length 	2147483647; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Number search iterations 	1; Start sensitivity 	4; Search steps 	1; Run a seq-profile search in slice mode 	false; Strand selection 	1; Disk space limit 	0; Sets the MPI runner; Remove Temporary Files 	false. Program call:; extractorfs /tmp/global2/nyoungblut/LLMGA_27929269397/map/R1-R2_db /tmp/global2/nyoungblut/LLMGA_27929269397/map/tmp//3961034198315058036/2495337974437510140/q_orfs --min-length ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/144#issuecomment-448559651:3868,perform,performs,3868,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/144#issuecomment-448559651,1,['perform'],['performs']
Performance,"tractdbs result_query_20230412_142303/tmp/18292001434761310910/pref_tmp_1 result_query_20230412_142303/tmp/18292001434761310910/aln_0 result_query_20230412_142303/tmp/18292001434761310910/pref_1 --threads 96 --e-profile 0.1 -e 0.1 --compressed 0 -v 3. subtractdbs result_query_20230412_142303/tmp/18292001434761310910/pref_tmp_1 result_query_20230412_142303/tmp/18292001434761310910/aln_0 result_query_20230412_142303/tmp/18292001434761310910/pref_1 --threads 96 --e-profile 0.1 -e 0.1 --compressed 0 -v 3. align result_query_20230412_142303/tmp/18292001434761310910/profile_0 /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_1 result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_1 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 1 --alignment-mode 2 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.1 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --threads 96 --compressed 0 -v 3. mergedbs result_query_20230412_142303/tmp/18292001434761310910/profile_0 result_query_20230412_142303/tmp/18292001434761310910/aln_1 result_query_20230412_142303/tmp/18292001434761310910/aln_0 result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_1. rmdb result_query_20230412_142303/tmp/18292001434761310910/aln_0. rmdb result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_1. result2profile result_query_20230412_142303/tmp/18292001434761310910/profile_0 /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/aln_1 result_query_20230412_142303/tmp/182",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:5215,load,load-mode,5215,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"tractdbs result_query_20230412_142303/tmp/18292001434761310910/pref_tmp_2 result_query_20230412_142303/tmp/18292001434761310910/aln_1 result_query_20230412_142303/tmp/18292001434761310910/pref_2 --threads 96 --e-profile 0.1 -e 0.1 --compressed 0 -v 3. subtractdbs result_query_20230412_142303/tmp/18292001434761310910/pref_tmp_2 result_query_20230412_142303/tmp/18292001434761310910/aln_1 result_query_20230412_142303/tmp/18292001434761310910/pref_2 --threads 96 --e-profile 0.1 -e 0.1 --compressed 0 -v 3. align result_query_20230412_142303/tmp/18292001434761310910/profile_1 /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_2 result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_2 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 1 --alignment-mode 2 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.1 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --threads 96 --compressed 0 -v 3. mergedbs result_query_20230412_142303/tmp/18292001434761310910/profile_1 result_query_20230412_142303/res result_query_20230412_142303/tmp/18292001434761310910/aln_1 result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_2. rmdb result_query_20230412_142303/tmp/18292001434761310910/aln_1. rmdb result_query_20230412_142303/tmp/18292001434761310910/aln_tmp_2. expandaln result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/res /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/res_exp --db-load-mode 2 --threads 96 --expansio",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:8499,load,load-mode,8499,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"um seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 1000; Omit Consensus false; Min codons in orf 30; Max codons in length 32734; Max orf gaps 2147483647; Contig start mode 2; Contig end mode 2; Orf start mode 1; Forward Frames 1,2,3; Reverse Frames 1,2,3; Translation Table 1; Use all table starts false; Offset of numeric ids 0; Add Orf Stop false; Chain overlapping alignments 0; Search type 0; Number search iterations 1; Start sensitivity 4; Search steps 1; Run a seq-profile search in slice mode false; Strand selection 1; Disk space limit 0; Sets the MPI runner ; Force restart using the latest tmp false; Remove Temporary Files false. Program call:; prefilter pbps.neighbors.DB pfam_profile.idx tmp/6822607060114486044/pref --sub-mat blosum62.out --seed-sub-mat VTML80.out -s 7.5 -k 6 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 10 --compressed 0 -v 3 . Initialising data structures...; Using 10 threads.; Substitution matrices...; Substitution matrices...; Use index pfam_profile.idx; Index version: 15; Generated by: 8-fac81; MaxSeqLength: 65535; KmerSize: 6; CompBiasCorr: 1; AlphabetSize: 21; Masked: 0; Spaced: 1; KmerScore: 90; SequenceType: Profile; SourcSeqType: Profile; Headers1: 1; Headers2: 0; ScoreMatrix: VTML80.out; Use kmer size 6 and split 1 using Target split mode.; Needed memory (1064365435 byte) of total memory (181308646195 byte); Target database: pfam_profile.idx(Size: 17772); Query database type: Aminoacid; Target database type: Profile; Time for init: 0h 4m 18s 41ms; Query database: pbps.neighbors.DB(size=1364570); Process prefiltering step 1 of 1. k-mer similarity threshold: 90; k-mer match probability: 0. Star",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132:2550,load,load-mode,2550,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483627132,1,['load'],['load-mode']
Performance,"unately no. Also, sorry for don't ask before. So I did this way: ; 1- Download the MMseqs2 Version: aa14ce37feb5eda7231af20259d8f2b659162236 ; 2- Compile as [described here](https://github.com/soedinglab/MMseqs2/#compile-from-source) but changing `cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..` by `cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=. ..` ; 3- Run all steps below:; > mmseqs createdb tcdb_query.nr.fa tcdb_query.nr.db 2>&1 >> log ; > mmseqs createdb all.fa all.db 2>&1 >> log; ; > mmseqs search tcdb_query.nr.db all.db tcdb_result.db tmp --threads 40 -s 7.5 --num-iterations 3 -a --max-seqs 17702628 -c 0.8 --add-self-matches 2>&1 >> log . 4- After crash:; > gdb --args mmseqs align tcdb_query.nr.db all.db tmp/1072319213335698383/pref_0 tmp/1072319213335698383/aln_0 --sub-mat blosum62.out -a 1 --alignment-mode 2 -e 0.1 --min-seq-id 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 17702628 --comp-bias-corr 1 --realign 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 1 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 40 -v 3 . return:; ```; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/acpguedes/source/MMseqs2/build/bin/mmseqs...done.; (gdb) bt; No stack.; ```. Important note:; I send the STDOUT and STDERR to log file but there are one message that was printed on the screen and not on log file: ; `scoreIdentical has different length L: scoreIdentical has different length L:",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510:1073,load,load-mode,1073,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510,1,['load'],['load-mode']
Performance,"undancy --threads 100 --compressed 0 -v 3 . Filtering using file(s); [=================================================================] 764.94M 1m 44s 691ms; Time for merging to pref_filter2: 0h 20m 18s 697ms; Time for processing: 0h 33m 25s 677ms; align /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref_filter2 /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/aln --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 2 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.95 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.9 --cov-mode 1 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --threads 100 --compressed 0 -v 3 . Compute score and coverage; Query database size: 764944038 type: Nucleotide; Target database size: 764944038 type: Nucleotide; Calculation of alignments; [=================================================================] 764.94M 11m 10s 977ms; Time for merging to aln: 0h 22m 11s 346ms. 781259144 alignments calculated.; 765501715 sequence pairs passed the thresholds (0.979831 of overall calculated).; 1.000729 hits per query sequence.; Time for processing: 0h 49m 18s 712ms; clust /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/input_step_redundancy /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/aln /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/prote",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:5910,load,load-mode,5910,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['load'],['load-mode']
Performance,"use a blunt-force patch. A more finessed approach like -DMMSEQS_ARCH can be fragile. Suppose you decide to change the name of the variable between now and the next release. This patch is then silently rendered inert. If I overlook the change, which is easy to do, the builds introduce agressive optimizations into the binary package, causing illegal instruction dumps for users with lower-end hardware than the build cluster. The static patch, on the otherhand, will break on a variable name chnage so I'll be alerted that it needs attention. For wget and curl, are you referring to createtaxdb.sh and databases.sh? Are these supposed to be installed? The cmake build system only installs mmseqs and bash-conmpletion.sh. Rather than add another dependency, I would add FreeBSD's native fetch command as the final fallback option as follows:. ```; --- data/workflow/databases.sh.orig 2021-06-25 01:34:08 UTC; +++ data/workflow/databases.sh; @@ -27,6 +27,8 @@ STRATEGY=""""; if hasCommand aria2c; then STRATEGY=""$STRATEGY ARIA""; fi; if hasCommand curl; then STRATEGY=""$STRATEGY CURL""; fi; if hasCommand wget; then STRATEGY=""$STRATEGY WGET""; fi; +# Part of FreeBSD base, need not be installed separately; +if hasCommand fetch; then STRATEGY=""$STRATEGY FETCH""; fi; if [ ""$STRATEGY"" = """" ]; then; fail ""No download tool found in PATH. Please install aria2c, curl or wget.""; fi; @@ -47,6 +49,9 @@ downloadFile() {; ;;; WGET); wget -O ""$OUTPUT"" ""$URL"" && return 0; + ;;; + FETCH); + fetch -o ""$OUTPUT"" ""$URL"" && return 0; ;;; esac; done; ```; Most bioinformaticians will have curl and/or wget installed anyway (both are included in the biostar-tools metapoirt), so it won't come into play, but we try to minimize unnecessary requirements. I haven't been able to find a specify CPU feature requirement for FreeBSD, but I think SSE2 is safe to assume for amd64, but I also added a pkg-message suggesting an optimized build from source. How much performance gain do you typically see from SSE4 or AVX?. Thanks...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555:2104,optimiz,optimized,2104,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555,2,"['optimiz', 'perform']","['optimized', 'performance']"
Performance,"v-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 1951 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 1.95K 0s 41ms; Sort kmer 0h 0m 0s 1ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 156ms; rescorediagonal DB_in/shuffle_in DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [==============================================================] ===1.95K 0s 40ms; Time for merging to pref_rescore1: 0h 0m 0s 3ms; Time for processing: 0h 0m 0s 71ms; clust DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref_rescore1 DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pre_clust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3. Clustering mode: Set Cover; [=================================================================] 1.95K 0s 9ms; Sort entries; Find missing connections; Found 1534 new connections.; Reconstruct initial order; [=================================================================] 1.95K 0s 10ms; Add missing connections; [=================================================================] 1.95K 0s 0ms. Time for read in: 0h 0m 0s 95ms; Total time: 0h 0m 0s 137ms. Size of the sequence database: 1951; Si",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:4656,load,load-mode,4656,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['load'],['load-mode']
Performance,"value threshold 	0.001; Seq. Id Threshold 	0.9; Seq. Id. Mode 	0; Sort results 	1; In substitution scoring mode, performs global alignment along the diagonal	false; Min codons in orf 	1; Max codons in length 	2147483647; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Add Orf Stop 	false; Start sensitivity 	4; Search steps 	1; Sets the MPI runner; Remove Temporary Files 	false. Program call:; search /tmp/global2/nyoungblut/LLMGA_27929269397/map/R1-R2_db /tmp/global2/nyoungblut/LLMGA_27929269397/linclust/genes_db /tmp/global2/nyoungblut/LLMGA_27929269397/map/R1-R2_v_genes_db /tmp/global2/nyoungblut/LLMGA_27929269397/map/tmp//3961034198315058036 --sub-mat blosum62.out -s 2 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 2 --comp-bias-corr 0 --diag-score 1 --exact-kmer-matching 0 --mask 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 24 -v 3 --rescore-mode 2 --filter-hits 0 -e 0.001 --min-seq-id 0.9 --seq-id-mode 0 --sort-results 1 --global-alignment 0 --min-length 1 --max-length 2147483647 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 0 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --add-orf-stop 0 --start-sens 4 --sens-steps 1 --remove-tmp-files 0 --alignment-mode 4. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	4; E-value threshold 	0.001; Seq. Id Threshold 	0.9; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	2; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Inclu",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/144#issuecomment-448559651:2436,load,load-mode,2436,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/144#issuecomment-448559651,1,['load'],['load-mode']
Performance,"version: 16; Generated by: 67949d702dbfc6e5d54fdd0f14a9ab6740f11c32; ScoreMatrix: VTML80.out; Invalid database read for database data file=/home/username/project/my_local_DB/target_DB.idx, database index=/home/username/project/my_local_DB/target_DB.idx.index; getData: local id (4294967295) >= db size (22); Traceback (most recent call last):; File ""/home/username/project/colabfold_batch/colabfold-conda/bin/colabfold_search"", line 8, in <module>; sys.exit(main()); File ""/home/username/project/colabfold_batch/colabfold-conda/lib/python3.7/site-packages/colabfold/mmseqs/search.py"", line 444, in main; threads=args.threads,; File ""/home/username/project/colabfold_batch/colabfold-conda/lib/python3.7/site-packages/colabfold/mmseqs/search.py"", line 86, in mmseqs_search_monomer; run_mmseqs(mmseqs, [""expandaln"", base.joinpath(""qdb""), dbbase.joinpath(f""{uniref_db}{dbSuffix1}""), base.joinpath(""res""), dbbase.joinpath(f""{uniref_db}{dbSuffix2}""), base.joinpath(""res_exp""), ""--db-load-mode"", str(db_load_mode), ""--threads"", str(threads)] + expand_param). File ""/home/username/project/colabfold_batch/colabfold-conda/lib/python3.7/site-packages/colabfold/mmseqs/search.py"", line 23, in run_mmseqs; subprocess.check_call([mmseqs] + params); File ""/home/username/project/colabfold_batch/colabfold-conda/lib/python3.7/subprocess.py"", line 363, in check_call; raise CalledProcessError(retcode, cmd). subprocess.CalledProcessError: Command '[PosixPath('mmseqs'), 'expandaln', PosixPath('result_query_20230412_142303/qdb'), PosixPath('/home/username/project/my_local_DB/target_DB.idx'), PosixPath('result_query_20230412_142303/res'), PosixPath('/home/username/project/my_local_DB/target_DB.idx'), PosixPath('result_query_20230412_142303/res_exp'), '--db-load-mode', '2', '--threads', '96', '--expansion-mode', '0', '-e', '1.7976931348623157e+308', '--expand-filter-clusters', '1', '--max-seq-id', '0.95']' returned non-zero exit status 1. ```. `target_DB` is a brand new database; I have not added nor deleted r",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:11309,load,load-mode,11309,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"xdb target_DB target_DB --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -k 0 --alph-size aa:21,nucl:5 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-seq-len 65535 --max-seqs 300 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --spaced-kmer-mode 1 -s 7.5 --k-score seq:0,prof:0 --check-compatible 0 --search-type 0 --split 0 --split-memory-limit 0 -v 3 --threads 96; ```. Then I ran `colabfold_search`. Output is below. ```; CUDA_VISIBLE_DEVICES='0' colabfold_search; -s '8'; --db1 'target_DB'; --use-templates '0'; --db2 ''; --use-env '0'; --db3 ''; --filter '1'; --mmseqs 'mmseqs'; --expand-eval '1.7e+308'; --align-eval '10'; --diff '3000'; --qsc '-20.0'; --max-accept '1000000'; --db-load-mode '2'; --threads '96'; query.fasta; /home/username/project/my_local_DB; result_query_20230412_142303. createdb result_query_20230412_142303/query.fas result_query_20230412_142303/qdb --shuffle 0. search result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB result_query_20230412_142303/res result_query_20230412_142303/tmp --threads 96 --num-iterations 3 --db-load-mode 2 -a -s 8 -e 0.1 --max-seqs 10000. prefilter result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 8 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 10000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 96 --compressed 0 -v 3. align result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tm",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:1795,load,load-mode,1795,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Performance,"y db start 1 to 9; Target db start 1 to 713072; [=================================================================] 100.00% 9 0s 6ms. 10.636821 k-mers per position; 10265 DB matches per sequence; 0 overflows; 0 queries produce too many hits (truncated result); 66 sequences passed prefiltering per query sequence; 36 median result list length; 0 sequences with 0 size result lists; Time for merging to pref_0: 0h 0m 0s 38ms; Time for processing: 0h 0m 0s 251ms; lcaalign tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/orfs_filter MicroEuk100.eukaryota_odb10.idx tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/tmp_taxonomy/7007534916548188170/tmp_hsp1/11550195074827057389/pref_0 tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/tmp_taxonomy/7007534916548188170/first --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 0 --alignment-mode 1 --alignment-output-mode 0 --wrapped-scoring 0 -e 1 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 5 --max-accept 30 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --threads 128 --compressed 0 -v 3. Index version: 16; Generated by: 14.7e284; ScoreMatrix: VTML80.out; Compute score only; Query database size: 9 type: Aminoacid; Target database size: 713072 type: Aminoacid; [=================================================================] 100.00% 9 0s 44ms; Time for merging to first: 0h 0m 0s 37ms; 128 alignments calculated; 88 sequence pairs passed the thresholds (0.687500 of overall calculated); 9.777778 hits per query sequence; Time for processing: 0h 0m 0s 189ms; rmdb tmp//15404483323509150572/taxonomy_tmp/7054630145456894787/tmp_taxonomy/7007534916548188170/tmp_hsp1/115501",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640:11198,load,load-mode,11198,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872491640,1,['load'],['load-mode']
Performance,y4mvibdqrlghr/bin/c++; -- Check for working CXX compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Source Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Project Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK -,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:1072,Perform,Performing,1072,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,14,['Perform'],['Performing']
Performance,"y_local_DB/target_DB.idx.index; getData: local id (4294967295) >= db size (22); ```. I created `target_DB` from `target.fasta` which has 142 records in it:. ```; pwd; # /home/username/project/my_local_DB. mmseqs createdb target.fasta target_DB; mmseqs createindex target_DB tmp_createindex --threads 96. indexdb target_DB target_DB --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -k 0 --alph-size aa:21,nucl:5 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-seq-len 65535 --max-seqs 300 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --spaced-kmer-mode 1 -s 7.5 --k-score seq:0,prof:0 --check-compatible 0 --search-type 0 --split 0 --split-memory-limit 0 -v 3 --threads 96; ```. Then I ran `colabfold_search`. Output is below. ```; CUDA_VISIBLE_DEVICES='0' colabfold_search; -s '8'; --db1 'target_DB'; --use-templates '0'; --db2 ''; --use-env '0'; --db3 ''; --filter '1'; --mmseqs 'mmseqs'; --expand-eval '1.7e+308'; --align-eval '10'; --diff '3000'; --qsc '-20.0'; --max-accept '1000000'; --db-load-mode '2'; --threads '96'; query.fasta; /home/username/project/my_local_DB; result_query_20230412_142303. createdb result_query_20230412_142303/query.fas result_query_20230412_142303/qdb --shuffle 0. search result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB result_query_20230412_142303/res result_query_20230412_142303/tmp --threads 96 --num-iterations 3 --db-load-mode 2 -a -s 8 -e 0.1 --max-seqs 10000. prefilter result_query_20230412_142303/qdb /home/username/project/my_local_DB/target_DB.idx result_query_20230412_142303/tmp/18292001434761310910/pref_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 8 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 10000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856:1403,load,load-mode,1403,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1507273856,2,['load'],['load-mode']
Safety," 184969)]; [New Thread 0x7f741fe0e700 (LWP 184970)]; [New Thread 0x7f741f60d700 (LWP 184971)]; [New Thread 0x7f741ee0c700 (LWP 184972)]; [New Thread 0x7f741e60b700 (LWP 184973)]; [New Thread 0x7f741de0a700 (LWP 184974)]; [New Thread 0x7f741d609700 (LWP 184975)]; [New Thread 0x7f741ce08700 (LWP 184976)]; [New Thread 0x7f741c607700 (LWP 184977)]; [New Thread 0x7f741be06700 (LWP 184978)]; [New Thread 0x7f741b605700 (LWP 184979)]; [New Thread 0x7f741ae04700 (LWP 184980)]; [New Thread 0x7f741a603700 (LWP 184981)]; [New Thread 0x7f7419e02700 (LWP 184982)]; [New Thread 0x7f7419601700 (LWP 184983)]; [New Thread 0x7f7418e00700 (LWP 184984)]; [New Thread 0x7f74185ff700 (LWP 184985)]; [New Thread 0x7f7417dfe700 (LWP 184986)]; [New Thread 0x7f74175fd700 (LWP 184987)]; Computing offsets.; [=================================================================] 100.00% 15.11M 19m 14s 460ms ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc. Thread 1 ""mmseqs"" received signal SIGABRT, Aborted.; __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; 51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt ; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; #1 0x00007ffff7438921 in __GI_abort () at abort.c:79; #2 0x00007ffff7ef6892 in __gnu_cxx::__verbose_terminate_handler () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x00007ffff7ef4f69 in __cxxabiv1::__terminate (handler=<optimized out>) at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #4 0x00007ffff7ef4fab in std::terminate () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #5 0x00007ffff7ef5194 in __cx",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840:35873,Abort,Aborted,35873,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840,1,['Abort'],['Aborted']
Safety," CXX=""$(brew --prefix)/bin/gcc-6"" cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 6.2.0; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/gcc-6; -- Check for working CXX compiler: /usr/local/bin/gcc-6 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Sourcedir /Users/moorer/Downloads/mmseqs2; -- Projectdir /Users/moorer/Downloads/mmseqs2; -- Compiler is GNU; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Failed; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.2 extensions, using flags: -msse4.2 -mfpmath=sse; -- Could NOT find GTest (missing: GTEST_LIBRARY GTEST_INCLUDE_DIR GTEST_MAIN_LIBRARY); -- Co",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-265028472:658,Detect,Detecting,658,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-265028472,4,['Detect'],['Detecting']
Safety," size 7 and split 1 using split mode 0; Needed memory (139010009596 byte) of total memory (67278442496 byte); WARNING: MMseqs processes needs more main memory than available.Increase the size of --split or set it to 0 to automatic optimize target database split.; WARNING: Split has to be computed by createindex if precomputed index is used.; Substitution matrices...; Time for init: 0 h 0 m 12s. Process prefiltering step 0 of 1. tmp/pref_1_tmp_0.0: File exists; Program call:; subseq_Mms.1 uniref90.mms tmp/pref_1 tmp/aln_1 --sub-mat blosum62.out -a --alignment-mode 0 -e 1e-10 --min-seq-id 0 -c 0 --max-seq-len 32000 --max-seqs 100000 --comp-bias-corr 1 --max-rejected 2147483647 --threads 8 -v 3 . MMseqs Version: c5615b34c686b1cf0f200670be8bc6cba76d90f9; Sub Matrix blosum62.out; Add backtrace true; Alignment mode 0; E-value threshold 1e-10; Seq. Id Threshold 0; Coverage threshold 0; Max. sequence length 32000; Max. results per query 100000; Compositional bias 1; Profile false; Realign hit false; Max Reject 2147483647; Detect fragments false; Include identical Seq. Id. false; Threads 8; Verbosity 3. Init data structures...; Compute score, coverage and sequence id.; Using 8 threads.; Could not open data file tmp/pref_1!; mv: impossible d'évaluer « tmp/aln_1 »: Aucun fichier ou dossier de ce type; ```; - Local indexing on 64GB node with explicit --split 6:. ```; $mmseqs createindex uniref90.mms uniref90.mms.sk7 tmp --split 6 --threads 12; Program call:; uniref90.mms uniref90.mms.sk7 tmp --split 6 --threads 12 . MMseqs Version: c5615b34c686b1cf0f200670be8bc6cba76d90f9; Sub Matrix blosum62.out; K-mer size 0; Alphabet size 21; Max. sequence length 32000; Split DB 6; Spaced Kmer 1; Threads 12; Verbosity 3. Substitution matrices...; Use kmer size 7 and split 6 using split mode; Index table: counting k-mers...; .WARNING: Sequence (dbKey=10870) contains only ATGC. It might be a nucleotide sequence.; .................................................................................",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349:4404,Detect,Detect,4404,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349,1,['Detect'],['Detect']
Safety," system messages (there is a floating point exception in tmp/blastp.sh : line 60, leading I guess to files missing tmp/pref_4 and tmp/aln_4):. ```; $mmseqs search tara_test.faa uniref90/uniref90.mms test1_uniref90 tmp --threads 24 -a > ; mmseqs_search_tara_1.out; tmp/blastp.sh : ligne 60 : 31911 Exception en point flottant (core dumped) $RUNNER $MMSEQS prefilter ""$INPUT"" ""$TARGET_DB_PREF"" ""$TMP_PATH/pref_$SENS"" $PREFILTER_PAR -s $SENS; Could not open data file /home/hingamp.p/tmp/pref_4!; mv: impossible d'évaluer '/home/hingamp.p/tmp/aln_4': Aucun fichier ou dossier de ce type. $more mmseqs_search_tara_1.out; Program call:; tara_test.faa uniref90/uniref90.mms test1_uniref90 tmp --threads 24 -a . MMseqs Version: e3588acbec735d8aa3158f7bdf38870bebc7d6df; Sub Matrix blosum62.out; Add backtrace true; Alignment mode 0; E-value threshold 0.001; Seq. Id Threshold 0; Coverage threshold 0; Max. sequence length 32000; Max. results per query 300; Compositional bias 1; Profile false; Realign hit false; Max Reject 2147483647; Detect fragments false; Include identical Seq. Id. false; Threads 24; Verbosity 3; Sensitivity 4; K-mer size 0; K-score 2147483647; Alphabet size 21; Offset result 0; Split DB 0; Split mode 2; Diagonal Scoring 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; Number search iterations 1; Start sensitivity 4; sensitivity step size 1; Sets the MPI runner . /home/hingamp.p; /home/hingamp.p; Program call:; tara_test.faa uniref90/uniref90.mms /home/hingamp.p/tmp/pref_4 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 30; 0 --offset-result 0 --split 0 --split-mode 2 --comp-bias-corr 1 --diag-score 1 --min-ungapped-score 30 --spaced-kmer-mode 1 --threads 24 -v 3 -s 4 . MMseqs Ver",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251310375:1297,Detect,Detect,1297,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251310375,1,['Detect'],['Detect']
Safety,"...................................... 5 Mio. sequences processed; ................................................................................................... 6 Mio. sequences processed; ................................................................................................... 7 Mio. sequences processed; ................................................................................................... 8 Mio. sequences processed; ................................................................................................... 9 Mio. sequences processed; ..................................; Index table: removing duplicate entries...; Index table init done. DB statistic; Entries: 3630865490; DB Size: 36193901268 (byte); Avg Kmer Size: 2.01593; Top 10 Kmers; XXXXXXL 328142; XXXXXXP 320052; PXXXXXX 301922; LXXXXXX 241818; RXXXXXX 240178; SXXXXXX 235598; TXXXXXX 219310; KXXXXXX 203132; QXXXXXX 188408; VXXXXXX 176435; Min Kmer Size: 0; Empty list: 1073051111. Time for index table init: 0 h 5 m 36s. k-mer similarity threshold: 115; k-mer match probability: 0. Starting prefiltering scores calculation (step 0 of 4); Query db start 0 to 0; Target db start 0 to 9343283; Program call:; tara_test.faa uniref90/uniref90.mms /home/hingamp.p/tmp/pref_4 /home/hingamp.p/tmp/aln_4 --sub-mat blosum62.out -a --alignment-mode 0 -e 0.001 --min-seq-id 0 -c; 0 --max-seq-len 32000 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --threads 24 -v 3 . MMseqs Version: e3588acbec735d8aa3158f7bdf38870bebc7d6df; Sub Matrix blosum62.out; Add backtrace true; Alignment mode 0; E-value threshold 0.001; Seq. Id Threshold 0; Coverage threshold 0; Max. sequence length 32000; Max. results per query 300; Compositional bias 1; Profile false; Realign hit false; Max Reject 2147483647; Detect fragments false; Include identical Seq. Id. false; Threads 24; Verbosity 3. MPI Init...; Rank: 0 Size: 1; Init data structures...; Compute score, coverage and sequence id.; Using 24 threads. ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251310375:6970,Detect,Detect,6970,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251310375,1,['Detect'],['Detect']
Safety,"1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 24 --compressed 0 -v 3. Compute score and coverage; Query database size: 31979 type: Aminoacid; Target database size: 119988216 type: Aminoacid; Calculation of alignments; [=================================================================] 100.00% 31.98K 20s 768ms; Time for merging files: 0h 0m 0s 85ms. 4578438 alignments calculated.; 4551951 sequence pairs passed the thresholds (0.994215 of overall calculated).; 142.341873 hits per query sequence.; Time for processing: 0h 0m 36s 82ms; mergedbs tmp_part-14/17957680840564044329/top1 tmp_part-14/17957680840564044329/merged tmp_part-14/17957680840564044329/top1 tmp_part-14/17957680840564044329/round2. Merging the results to tmp_part-14/17957680840564044329/merged; Time for merging files: 0h 0m 0s 11ms; Time for processing: 0h 0m 0s 699ms; filterdb tmp_part-14/17957680840564044329/merged tmp_part-14/17957680840564044329/2b_ali --beats-first --filter-column 4 --comparison-operator le. Filter by numerical comparison to first row.; [=================================================================] 100.00% 40.62K 0s 991ms; Time for merging files: 0h 0m 0s 235ms; Time for processing: 0h 0m 1s 633ms; lca /ebio/abt3_projects/databases_no-backup/uniclust/mmseqs2_8.fac81/uniclust90_2018_08_db tmp_part-14/17957680840564044329/2b_ali clusters_rep-seqs.part-14_tax_db --compressed 0 --lca-ranks kingdom:phylum:class:order:family:genus:species --blacklist 12908,28384 --tax-lineage 0 --threads 24 -v 3. Loading NCBI taxonomy; Loading nodes file ... Done, got 2043406 nodes; Loading merged file ... Done, added 52532 merged nodes.; Loading names file ... Done; Making matrix ... Done; Init RMQ ...Done; Computing LCA; terminate called after throwing an instance of 'std::out_of_range'] 0.11% 0.46 eta 1h 20m 23s; terminate called recursively; Aborted; Error: Lca died; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587:10644,Abort,Aborted,10644,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587,1,['Abort'],['Aborted']
Safety,"23-1:104230] Failing at address: 0x14758c03a9e9; [cpu-23-1:104233] *** Process received signal ***; [cpu-23-1:104233] Signal: Bus error (7); [cpu-23-1:104233] Signal code: Non-existant physical address (2); [cpu-23-1:104233] Failing at address: 0x151209f6d9c4; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun noticed that process rank 89 with PID 0 on node cpu-23-1 exited on signal 7 (Bus error).; --------------------------------------------------------------------------. And this one a couple more times:. --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; slurmstepd: error: *** JOB 1369194 ON cpu-25-49 CANCELLED AT 2021-05-17T19:07:03 DUE TO NODE FAILURE, SEE SLURMCTLD LOG FOR DETAILS ***; --------------------------------------------------------------------------; mpirun noticed that process rank 65 with PID 0 on node cpu-25-49 exited on signal 9 (Killed).; --------------------------------------------------------------------------. Now I'm trying to run the job using the script you also include in your manual . mmseqs createdb ""${QUERYFASTA}"" ""${QUERYDB}""; mmseqs splitdb ""${QUERYDB}"" ""${QUERYDB}_split"" --split $SPLITS. for file in $(ls ""${QUERYDB}_split""_*_$SPLITS); do; mmseqs createsubdb ""${file}.index"" ""${QUERYDB}_h"" ""${file}_h""; done. split=0; for file in $(ls ""${QUERYDB}_split""_*_$SPLITS); do; RUNNER=""mpirun -np 128 -p nocona"" bsub mmseqs cluster ""${file}"" chiropteraDB aln_${split} tmp --cov-mode 1 -c 0.9 --threads 128; ((split++)); ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604:1450,abort,aborted,1450,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604,1,['abort'],['aborted']
Safety,"25 million MSAs is quite considerable. Following is a brain dump of some things to consider. Sorry it’s not super organized. You can scale down sensitivity. `-s 6` might be sufficient and much faster than the default. You can consider searching only against the uniref and omitting the colabfold db. I think a batch size of 50k-100k queries is probably going to work to be sufficient. I have also recently tweaked the setup_databases.sh script to not store the databases in a compressed form, this will increase RAM use but avoid constant decompression. However, I’ve not commited this change yet. Storage space is likely going to be one of the bigger issues, since 25M MSA will be quite large. You might want to extract the mmseqs shell commands from the colabfold_search python script (https://github.com/sokrypton/ColabFold/blob/main/colabfold/mmseqs/search.py) so you have an easier time tweaking them. One option might be to run all searches in batches, but not run the final result2msa and unpackdb steps yet, as they are comparatively cheap and the filesize increases a lot from the internal result format to the MSA a3m format. You can also run another mmseqs module here (filterdb --extract-lines) to return only a maximum number hits to be converted to a MSA. Currently, colabfold_search materializes each MSA as an individual file to the file system (through the unpackdb) call. We have been meaning to make colabfold_batch work directly with the internal database format. I assume you don’t actually want to ran 25M structure predictions and instead want to run something else that is faster. You might want to implement something that reads from the MMseqs2 databases directly, this will save a lot of filesystem headache.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2427904599:524,avoid,avoid,524,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2427904599,2,"['avoid', 'predict']","['avoid', 'predictions']"
Safety,"4-linux-gnu/libasan.so.4+0x37d2f); #1 0x7fc0f70d7f5f (/usr/lib/x86_64-linux-gnu/libgomp.so.1+0x16f5f); #2 0x7fc0f70ceed9 in GOMP_parallel (/usr/lib/x86_64-linux-gnu/libgomp.so.1+0xded9); #3 0x7ffc996a2d2f (<unknown module>). SUMMARY: AddressSanitizer: heap-buffer-overflow /ebio/abt3_projects/software/dev/ll_pipelines/llcds/tmp/mmseqs_taxonomy/MMseqs2/src/alignment/MultipleAlignment.cpp:168 in MultipleAlignment::updateGapsInSequenceSet(char**, unsigned long, std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > > const&, std::vector<Matcher::result_t, std::allocator<Matcher::result_t> > const&, unsigned int*, bool); Shadow bytes around the buggy address:; 0x0c347fffc620: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc630: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc640: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc660: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; =>0x0c347fffc670: 00 00 00 00 00 00 00 00 00 00 00 00[fa]fa fa fa; 0x0c347fffc680: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa; 0x0c347fffc690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc6a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc6b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; 0x0c347fffc6c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00; Shadow byte legend (one shadow byte represents 8 application bytes):; Addressable: 00; Partially addressable: 01 02 03 04 05 06 07; Heap left redzone: fa; Freed heap region: fd; Stack left redzone: f1; Stack mid redzone: f2; Stack right redzone: f3; Stack after return: f5; Stack use after scope: f8; Global redzone: f9; Global init order: f6; Poisoned by user: f7; Container overflow: fc; Array cookie: ac; Intra object redzone: bb; ASan internal: fe; Left alloca redzone: ca; Right alloca redzone: cb; ==71239==ABORTING; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814682245:7418,ABORT,ABORTING,7418,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-814682245,1,['ABORT'],['ABORTING']
Safety,"700 (LWP 39216)]; [New Thread 0x7f7424de8700 (LWP 39217)]; [New Thread 0x7f74245e7700 (LWP 39218)]; [New Thread 0x7f7423de6700 (LWP 39219)]; [New Thread 0x7f74235e5700 (LWP 39220)]; [New Thread 0x7f7422de4700 (LWP 39221)]; [New Thread 0x7f74225e3700 (LWP 39222)]; [New Thread 0x7f7421de2700 (LWP 39223)]; [New Thread 0x7f74215e1700 (LWP 39224)]; [New Thread 0x7f7420de0700 (LWP 39225)]; [New Thread 0x7f74205df700 (LWP 39226)]; [New Thread 0x7f741fdde700 (LWP 39227)]; [New Thread 0x7f741f5dd700 (LWP 39228)]; [New Thread 0x7f741eddc700 (LWP 39229)]; [New Thread 0x7f741e5db700 (LWP 39230)]; [New Thread 0x7f741ddda700 (LWP 39231)]; [New Thread 0x7f741d5d9700 (LWP 39232)]; [New Thread 0x7f741cdd8700 (LWP 39233)]; [New Thread 0x7f741c5d7700 (LWP 39234)]; [New Thread 0x7f741bdd6700 (LWP 39235)]; [New Thread 0x7f741b5d5700 (LWP 39236)]; [New Thread 0x7f741add4700 (LWP 39237)]; [New Thread 0x7f741a5d3700 (LWP 39238)]; [New Thread 0x7f7419dd2700 (LWP 39239)]; Computing offsets.; [=================================================================] 100.00% 15.11M 19m 10s 206ms ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc. Thread 1 ""mmseqs"" received signal SIGABRT, Aborted.; 0x0000000000853207 in raise (); (gdb) bt; #0 0x0000000000853207 in raise (); #1 0x0000000000853421 in abort (); #2 0x00000000007b7505 in __gnu_cxx::__verbose_terminate_handler() (); #3 0x000000000071f7a6 in __cxxabiv1::__terminate(void (*)()) (); #4 0x000000000071f7f1 in std::terminate() (); #5 0x000000000071d9e4 in __cxa_throw (); #6 0x000000000071f97c in operator new(unsigned long) (); #7 0x00000000005f7e0b in doswap (par=..., isGeneralMode=false) at /home/vsts/work/1/s/src/util/swapresults.cpp:170; #8 0x00000000004122db in runCommand (p=0xd63aa0, argc=argc@entry=22, argv=argv@entry=0x7fffffffde28) at /home/vsts/work/1/s/src/commons/Application.cpp:38; #9 0x00000000004016fa in main (argc=24, argv=0x7fffffffde18) at /home/vsts/work/1/s/src/commons/Application.cpp:196",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762432473:35055,Abort,Aborted,35055,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762432473,2,"['Abort', 'abort']","['Aborted', 'abort']"
Safety,"8c9700 (LWP 28908)]; [New Thread 0x1555546c8700 (LWP 28909)]; [New Thread 0x1554ea593700 (LWP 28921)]; [New Thread 0x1554ea392700 (LWP 28922)]; [New Thread 0x1554ea191700 (LWP 28923)]; [New Thread 0x1554e9f90700 (LWP 28924)]; [New Thread 0x15549ceb2700 (LWP 28925)]; [New Thread 0x15549ccb1700 (LWP 28926)]; [New Thread 0x15549cab0700 (LWP 28927)]; [New Thread 0x15549c8af700 (LWP 28928)]; [New Thread 0x15549c6ae700 (LWP 28929)]; [New Thread 0x1554996f9700 (LWP 28930)]; [New Thread 0x1554994f8700 (LWP 28931)]; [New Thread 0x1554992f7700 (LWP 28932)]; terminate called after throwing an instance of 'std::bad_alloc' ] 3.00% 15.44K eta 2h 43m 11s ; what(): std::bad_alloc. Thread 14 ""mmseqs"" received signal SIGABRT, Aborted.; [Switching to Thread 0x1554996f9700 (LWP 28930)]; 0x000000000086fbd7 in raise (); (gdb) bt; #0 0x000000000086fbd7 in raise (); #1 0x000000000086fdf1 in abort (); #2 0x00000000007d3e15 in __gnu_cxx::__verbose_terminate_handler() (); #3 0x000000000073c0b6 in __cxxabiv1::__terminate(void (*)()) (); #4 0x000000000073c101 in std::terminate() (); #5 0x000000000073a2f4 in __cxa_throw (); #6 0x000000000073c28c in operator new(unsigned long) (); #7 0x000000000078720a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (); #8 0x00000000007887eb in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (); #9 0x0000000000550fc6 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__str=..., this=0x1554996f8520) at /usr/include/c++/7/bits/basic_string.h:1212; #10 convertalignments (argc=<optimized out>, argv=<optimized out>, command=...) at /home/vsts/work/1/s/src/util/convertalignments.cpp:495; #11 0x0000000000848be6 in gomp_thread_start (); #12 0x000000000085a66b in start_thread (arg=0x1554996f9700) at pthread_create.c:463; #13 0x00000000008f609f in clone (); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628:3792,abort,abort,3792,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628,1,['abort'],['abort']
Safety,"> I think I encountered same question like you, and my HPC node similar with yours, it kept running almost 17h and no progress, I'm wondering that when you set the param `--db-load-mode 3` then rerun it, how long could you detect the output?; > ; > Any anwser would be helpful! Thanks!. Hard to give a number. `--db-load-mode 2` will halt indefinitely. `--db-load-mode 3` at least can give results.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-2422791910:223,detect,detect,223,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-2422791910,1,['detect'],['detect']
Safety,"> Instead I took a look at what instructions are missing for SSE2 support . I think more those are required for not-X86 ?. I've force pushed to this branch [with a newer SIMDe version](https://github.com/nemequ/simde/compare/0a0cdd20c9ac4f0cd787f60cca30c0aa1e71b6c1...aa6c5739159ca2a862b50258ad8f61afed4ca94f) including the following fixes:. https://github.com/nemequ/simde/commit/9d29f2b56ff3a93e4f13ab2075fe043ca10b7e7e common: prefer __builtin_isnan over std::isnan ; https://github.com/nemequ/simde/commit/c0af7afcc8290fba98803febb503015c2cf5a4d7 avx2: fix -Wconversion warning when assigning int to int16_t; https://github.com/nemequ/simde/commit/6791c8f891a4153a8736b7b7cdbc6f4bda7e31f8 Switch some C-style casts to use HEDLEY_STATIC_CAST.; https://github.com/nemequ/simde/commit/dbf8394561e699cb11a75a2e26d1efa121f11c79 mmx, sse, sse2: get rid of compound literals; https://github.com/nemequ/simde/commit/7185559a4df6cfb00d4730b9edb7bdb7ac3967b8 common: add -Wc++98-compat-pedantic to list of disabled warnings ; https://github.com/nemequ/simde/commit/f11544f282376cd06f53e694e9d5fd51b640e67d avx: fix aliasing issue in simde_mm_maskload_pd; https://github.com/nemequ/simde/commit/e314ce18967350aec8e899eb2acae59b95e07660 math: fix detection of __builtin_* functions; https://github.com/nemequ/simde/commit/bdf27512d41d583278ae5efee02a636d139fd806 test: disable -Wreserved-id-macro in µnit header. ; https://github.com/nemequ/simde/commit/aa6c5739159ca2a862b50258ad8f61afed4ca94f sse2, sse4.1, avx2: add some additional casts to vector types . So hopefully the result is less daunting!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-629985459:1239,detect,detection,1239,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-629985459,1,['detect'],['detection']
Safety,"> Thanks a lot for your contribution and finding about this edge case.; > ; > We try to avoid Modern C++ features, could you please implement this without `auto`, lambdas and std::replace. I think `FileUtil` might be an appropriate place for this function.; > ; > The `SSTR(key)` branch is always numeric and doesn't require a call to `path_substitution`. Thank you for your review. These C++ 11 features will be removed in a couple of days. I will push next request before this Friday.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/467#issuecomment-873693087:88,avoid,avoid,88,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/467#issuecomment-873693087,1,['avoid'],['avoid']
Safety,> The current issues seem to be:. I think if the issues are related to SIMDe on x86 CPU. We can avoid some of the issues by enabling SIMDe only on non-x86 CPU architectures like this for now. https://github.com/lh3/minimap2/blob/master/ksw2_extd2_sse.c. ```; #ifdef __SSE2__; #ifdef USE_SIMDE; #include <simde/x86/sse2.h>; #else; #include <emmintrin.h>; #endif; ...; #ifdef __SSE4_1__; #ifdef USE_SIMDE; #include <simde/x86/sse4.1.h>; #else; #include <smmintrin.h>; #endif; #endif; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-627354222:96,avoid,avoid,96,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-627354222,1,['avoid'],['avoid']
Safety,"> We also use an SSSE3 instruction in some important place (iirc), so should we also enable that explicitly?. Yes we should probably have a `HAVE_SSE3` option for that as well. > I don't really like it a lot that with this change -DHAVE_AVX2 -DHAVE_ARM8 would be a possible but nonsensical combination. Well yes, but if the user sets nonsensical flags it is not that big of a problem if the outcome is (expected) nonsense. Is there an easy way we can avoid this?. > BTW Debian uses -DNATIVE_ARCH=0 (https://salsa.debian.org/med-team/mmseqs2/-/blob/master/debian/rules) and compiles multiple SIMD levels and adds a SIMD dispatcher (https://salsa.debian.org/med-team/mmseqs2/-/blob/master/debian/bin/simd-dispatch), if that is in any way useful for you. In Gentoo this is controlled by `CPU_FLAGS_X86` variable at build time. In general we don't use dispatchers for this because there isn't really a point if things are built exactly according to the users set preference. The problem here is that the user preference is not respected because the flags are treated as mutually exclusive.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/533#issuecomment-1038288605:451,avoid,avoid,451,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/533#issuecomment-1038288605,1,['avoid'],['avoid']
Safety,"> `mmseqs extractalignedregion test/S29DEC19 db/nt test/tophitaln test/tophitseq`; > ; > MMseqs Version: 12.113e3; > Compressed 0; > Extract mode 2; > Preload mode 0; > Threads 40; > Verbosity 3; > ; > Can not write to data file test/tophitseq.14 ] 0.00% 1 eta -. I tried to reproduce the above error on a different target database to see if its something to do with the sequences and got the same error with the following additional error messages. Just thought reporting it might help to figure out what's wrong. `free(): corrupted unsorted chunks`; `Aborted (core dumped)`. @milot-mirdita or @martin-steinegger do you have any idea what's going on? Any help is appreciated. . Thanks,; Manu",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/368#issuecomment-716374568:553,Abort,Aborted,553,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/368#issuecomment-716374568,1,['Abort'],['Aborted']
Safety,"?Dear Milot,. I restarted the clustering to make a new DB, EarthMicrobiomeDB20200910, that includes previous representative DNA gene sequences (~800 million) and recently obtained redundant sequences (around 12 million), using the following command:. mmseqs cluster EarthICEmetagenomesDB EarthICEmetagenomesDB_clu EarthICEmetagenomesDB.tmp --min-seq-id 0.95 --cov-mode 2 -c 0.8 --max-seq-len 132768 --threads 32 >EarthICEmetagenomesDB_clu.log 2>&1 &. It is running since September 10, attached is the log, what do you think how long it will take to finish?. ?Many Thanks,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Intikhab S. Alam; Sent: 10 September 2020 00:45; To: soedinglab/MMseqs2; soedinglab/MMseqs2; Cc: Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). Dear Milot,. I provided all result files from previous easy-linclust of 3 billion sequences. As I understand, if you use the rep_seq based new database, the update of additional sequence will not place newer sequences to any existing clusters, is this right?. The only option seems to add newer redundant sequences to previous version of redundant sequences, create a database and start a fresh linclust session. You mentioned new versions of mmseq is now much faster, I will give it a go but do you think is there a way to extract the cluster db of my previous run where I used easy-linclust?. Please provide some useful advice as these are computationally heavy tasks. Best,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscie",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180:180,redund,redundant,180,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180,1,['redund'],['redundant']
Safety,"@adriaaula If you used the file I shared, the predicted ORFs have been dereplicated using MMseqs2 by tax_id, @martin-steinegger I will post the workflow we use when I am back from vacation.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570608627:46,predict,predicted,46,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570608627,1,['predict'],['predicted']
Safety,"@fstrozzi thank you for providing this file. I was only able to detect four sequences that could not find themselves by searching the subset against itself,. ```; mmseqs search missed_exact_matches_mmseqs2 missed_exact_matches_mmseqs2_second aln_s4 tmp -s 4 --max-seqs 4000; ```. The sequences are:; (1) `LINRKREKKERKKERKKERKKERKKERKKERKKERKKGRKKERKKERKKERKKERKKERKKERKKERKKERKKERKKEKRKEETKEGRKEGRKRKKEKRKKQANKQIE`; (2) `MAVGTGVAVADGTAVGVGLGVGIGVSLGVAVGVGTRVGARVAVGAEVGVGARVGGTAVGLGAAVAVGVGSGVMVGVGCP`; (3) `TTTPTTTPSTTTLTKTPTTTTTATTTPTTTTPSTTTPTTTTTTTTKPTTITPTATTPTTTTPTTTPTTTTPTTTSLTTTTPTRTKQPTTTPTKTPSTTTPTTTPKTTPSTTTPTTTTPTTTTPTTTTPTTTTPTTTIPTKTTTTAPTTTTSTTTTPTTTPSTTTPTTTTPTTTTPITTTPTTTPTTTTPTTTPSTTTPTTTTHTTTTHTTTTPTKTTPTTTTPTTTTPTTTIPTKTTTTAPTTTTSTTTTPTTTPSTTTPTTTTPTTTTPTTTTPTTTPTTTSTTTPSTTRLTTTTPSTTTPTTTTPTTTSPTTTTSTTTPTTTTPTTTPTTTPTTTPTTTTPTTTPSTTTLTKTPTTTTPATTTTTTTTPSTTTPTTTTTITTKPTTITPTATTPTTTIPTTTTPTSTTPTTTKPTTTTPTTTTPITIIPITSTPTTLTPTTTTSTTTKPTTTHSTNTPTTTTP`; (4) `MLTKSRQIISS`. Sequence (1) could not find a hit mostly because of the low complexity repeat of the pattern ""KKER""; `LINRKREKKERKKERKKERKKERKKERKKERKKERKKGRKKERKKERKKERKKERKKERKKERKKERKKERKKERKKEKRKEETKEGRKEGRKRKKEKRKKQANKQIE`. Tantan masks nearly the whole sequence:; `; LINRKREXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXIE; `. The compositional bias correction of MMseqs2 further punishes this hit. If you turn off masking and composition bias correction this hit will be found (`--mask 0 --comp-bias-corr 0`). ; We apply these strict criteria to avoid high scoring false positives. . Masking and low composition bias correction are also the reason for (1), (2), (3) to miss the self-hits. . Sequence (4) does not fulfill the e-value criteria, probably because of its length.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394397871:64,detect,detect,64,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394397871,2,"['avoid', 'detect']","['avoid', 'detect']"
Safety,"@kad-ecoli thank you for reporting this issues. . Yes, the issues is related to https://github.com/soedinglab/MMseqs2/issues/88. I do not find solution 1. very elegant since we do need more CPU time, IO and hard disk space.; If you do not mind this slight overhead than you could just run clusthash (see https://github.com/soedinglab/MMseqs2/wiki#how-to-redundancy-filter-sequences-with-identical-length-and-100-length-overlap). . I will think about a more elegant solution for this problem.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-406959901:354,redund,redundancy-filter-sequences-with-identical-length-and-,354,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-406959901,1,['redund'],['redundancy-filter-sequences-with-identical-length-and-']
Safety,"@martin-steinegger I am encountering a similar error when using a custom database to generate the MSA to be used by Colabfold for structure prediction. . `Invalid database read for database data file=/media/data/Databases/database_50_db.idx, database index=/media/data/Databases/database_50_db.idx.index; getData: local id (4294967295) >= db size (50); Traceback (most recent call last):; File ""/media/data/tools/ColabFold/colabfold/mmseqs/search.py"", line 487, in <module>; main(); File ""/media/data/tools/ColabFold/colabfold/mmseqs/search.py"", line 427, in main; mmseqs_search_monomer(; File ""/media/data/tools/ColabFold/colabfold/mmseqs/search.py"", line 108, in mmseqs_search_monomer; run_mmseqs(mmseqs, [""expandaln"", base.joinpath(""prof_res""), dbbase.joinpath(f""{metagenomic_db}{dbSuffix1}""), base.joinpath(""res_env""), dbbase.joinpath(f""{metagenomic_db}{dbSuffix2}""), base.joinpath(""res_env_exp""), ""-e"", str(expand_eval), ""--expansion-mode"", ""0"", ""--db-load-mode"", str(db_load_mode), ""--threads"", str(threads)]); File ""/media/data/tools/ColabFold/colabfold/mmseqs/search.py"", line 23, in run_mmseqs; subprocess.check_call([mmseqs] + params); File ""/media/data/tools/ColabFold/localcolabfold/colabfold-conda/lib/python3.10/subprocess.py"", line 369, in check_call; raise CalledProcessError(retcode, cmd); subprocess.CalledProcessError: Command '[PosixPath('mmseqs'), 'expandaln', PosixPath('test_msa/prof_res'), PosixPath('/media/data/Databases/database_50_db.idx'), PosixPath('test_msa/res_env'), PosixPath('/media/data/Databases/database_50_db.idx'), PosixPath('test_msa/res_env_exp'), '-e', 'inf', '--expansion-mode', '0', '--db-load-mode', '0', '--threads', '96']' returned non-zero exit status 1.` . I have replaced the third metagenomic database with a custom database, any suggestions on how I could fix this issue would be highly appreciated.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1706126605:140,predict,prediction,140,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1706126605,1,['predict'],['prediction']
Safety,"@martin-steinegger Thank you very much. You are absolutely right, it took now 7 minutes as you correctly predicted.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535569679:105,predict,predicted,105,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535569679,1,['predict'],['predicted']
Safety,"@martin-steinegger Thanks for the answer!; Intuitively, I've already tried running your latest suggested command:; `mmseqs convertalis aDB bDB alignDB alnRes.txt --search-type 3 --format-output ""qseq,tseq,query,target,raw,bits,qaln,taln"" --gap-open 3 --gap-extend 0`. However, no output file is generated (in this case, `alnRes.txt`) when the gap options are passed to convertalis. As for the warning, I am quickly testing things on my PC, but the usually I will run this for bigger datasets on a Linux machine. I will test on Linux as well to see if there is any difference. EDIT - On Linux:; `5316 Aborted (core dumped) mmseqs convertalis seqsDB revDB alignDB alnRes.txt --search-type 3 --format-output ""query,target,raw"" --gap-open 3 --gap-extend 1`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481:600,Abort,Aborted,600,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481,1,['Abort'],['Aborted']
Safety,"@nick-youngblut I am sorry about the multi output. The main reason for them is to avoid IO. Slow IO system can take hours/days to merge tera bytes of data and MMseqs2 modular architecture require multiple IO steps unlike other aligners. The IO step is especially critical if the search was performed using many threads since the merging runs single threaded. ; However, every module should create a `.dbtype` file at the end, which can be used to check if the module finished successfully. . The `clusterupdate` is one of the modules that needs ground up rebuild. Too much of its logic is done in Bash steps that do not verify the consistency correctly. . I am a bit confused why your `clusterupdate` uses `extractorfs`. What is your exact setup? Do you try to update protein clusters using genomes?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664790179:82,avoid,avoid,82,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664790179,1,['avoid'],['avoid']
Safety,"@ppflrs I have rebuilt the metaclust database by adding new identifier and reclustering everything. Every protein source should be now labeled with uniq identifier which can be used to traced the protein to the JGI, OM-RGC, Uniprot or NCBI. ; The new release is available here https://metaclust.mmseqs.com/2018_06/ ; ; The identifier looks like this now. >RifCSPlowO2_12_1023861.scaffolds.fasta_scaffold367679_1 # 24 # 428 # -1 # ID=367679_1;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.435. `RifCSPlowO2_12` identifies the JGI project. The project can be accessed the following way (you need an JGI account): . https://genome.jgi.doe.gov/portal/pages/dynamicOrganismDownload.jsf?organism=RifCSPlowO2_12. Within the project the contig is contained in the file `1023861.scaffolds.fasta` at fasta record `scaffold367679_1`. . The rest of the header contains the prodigal prediction information. . I have also added a file metaclust_50_cluster.fasta.gz which contains all cluster member in a fasta like fromat https://github.com/soedinglab/MMseqs2/wiki#cluster-fasta-like-format.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/87#issuecomment-399853855:891,predict,prediction,891,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/87#issuecomment-399853855,1,['predict'],['prediction']
Safety,"@zkstewart it will be a bit harder to support iterative searches with multiple hits detection. I will see if it is possible the next days. . The easiest solution, currently working solution is to first perform an iterative search followed by a profiles sequence search using the alternative alignment mode. This should be sensitive and include alternative alignments. mmseqs search qDB tDB resDB tmp ... --num-iterations 3; mmseqs result2profile qDB tDB resDB qProfDB; mmseqs search qProfDB tDB resDB tmp --alt-ali 5",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-416247457:84,detect,detection,84,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-416247457,1,['detect'],['detection']
Safety,"After I fix the above mentioned bug, my output is like this:; $ mmseqs search queryDB targetDB resultDB tmp --use-index. Program call:; queryDB targetDB resultDB tmp --use-index . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Split DB 0; Split mode 2; Search mode 2; Diagonal Scoring 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/z",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:362,Detect,Detect,362,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['Detect'],['Detect']
Safety,"Because we don't develop the .sh script anymore and it's not up-to-date. The development is happening in the python version now. If you want to use the server - with fast response times, like our has - you need a server with ~1TB permanently committed RAM. Anything less will not work.; `colabfold_search` does not have this issue, however, it has slightly different performance pitfalls to look out for. Single query searches will remain slow, with `colabfold_search`. Our proposed workflow is to gather a few hundred to thousands of queries. Do the MSA generation stage with `colabfold_search` and then batch predict them with `colabfold_batch`. Edit: the python `colabfold_search` is also pip-installed together with `colabfold_batch`. If you installed with localcolabfold (recommended) or with pip. You will have both available.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495427497:611,predict,predict,611,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495427497,1,['predict'],['predict']
Safety,"Can you check how much swap spaces is being used (`free -h`). I guess the automatic memory limit detection is going wrong somehow. Do you set memory limits in the cluster environments? Can you restart without/higher memory limits? I am not sure if SemiBin exposes MMseqs2 options to users, but you could set `--split-memory-Limit` so it processes the GTDB in smaller chunks. You would set this parameter to about 70-80% of total allowed RAM.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894187795:97,detect,detection,97,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894187795,1,['detect'],['detection']
Safety,"Can you run `createindex` with manually passing it `--split 8` to recreate the index with more subsets?; Right now it probably has a very small RAM safety margin and could crash with a larger query sequence set. The warnings seem to be quite weird and buggy, we have to take a look at that. By the way, if you want a set of stickers (see https://twitter.com/thesteinegger/status/1201076220957315074), send me your address to milot at mirdita de.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/278#issuecomment-590570666:148,safe,safety,148,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/278#issuecomment-590570666,1,['safe'],['safety']
Safety,Can you set some breakpoints and run again:; ```; b exit; b _exit; b _Exit; b abort; r; ... wait until crash/exit ...; bt; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591447563:78,abort,abort,78,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591447563,1,['abort'],['abort']
Safety,"Careful about the parameters though, they are not quite the same for the two tools, if I remember correctly. I would recommend to install `libopenmpi-dev` (or your OS equivalent) and rebuild the HH-suite, it will detect the presence of MPI and build cstranslate_mpi, ffindex_apply_mpi, hhblits_mpi etc.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/83#issuecomment-383552461:213,detect,detect,213,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/83#issuecomment-383552461,1,['detect'],['detect']
Safety,Commit 14014cd0ec50049f796f153ea8a72164ff4b8b45 should be stable and safe to use. Could you please test if the instability was resolved on your dataset?. You will find precompiled binaries [here](http://mmseqs.com/archive/14014cd0ec50049f796f153ea8a72164ff4b8b45) (once the CI builds them).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-593713722:69,safe,safe,69,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-593713722,1,['safe'],['safe']
Safety,"Could you give us a short description of what you want to achieve?. We do not support using MMseqs2 as a shared library, especially since we use exit() for aborting in error conditions. You probably don't want your libraries to kill your application.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/81#issuecomment-381911141:156,abort,aborting,156,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/81#issuecomment-381911141,1,['abort'],['aborting']
Safety,"Could you please upload some of those 500 sequences that did not find themselves?. There are primarily three reasons why they couldn't be found:. - The sequences might be locally biased, and the compositional bias correction will then get rid of them (`--comp-bias-corr 0` to disable this behavior) ; - The masking might mask out all the low complexity regions and basically mask out the whole sequence and won't be able to find anything (`--mask 0`); - The sequence identity approximation might not be good enough for the self-match, add the `-a` parameter to compute the full backtrace including the exact sequence identity. Other options you can use for trying to recover self-matches are `--exact-kmer-matching 1`, which will disable the similar k-mer generator and only use the exact k-mer for searching.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-393926958:667,recover,recover,667,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-393926958,1,['recover'],['recover']
Safety,"Dear Milot,. I provided all result files from previous easy-linclust of 3 billion sequences. As I understand, if you use the rep_seq based new database, the update of additional sequence will not place newer sequences to any existing clusters, is this right?. The only option seems to add newer redundant sequences to previous version of redundant sequences, create a database and start a fresh linclust session. You mentioned new versions of mmseq is now much faster, I will give it a go but do you think is there a way to extract the cluster db of my previous run where I used easy-linclust?. Please provide some useful advice as these are computationally heavy tasks. Best,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 08 September 2020 18:53; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). I think it's probably salvageable. I'll need to look over your output in detail. Another question: This was clustered using easy-linclust not using easy-cluster right? Cluster update currently will try to use the normal clustering for the sequences that cannot be assigned to an existing cluster. This will also likely be very slow (probably slower than clustering anew using linclust). We will have to build support for updating with linclust. -; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688971058",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-689838616:295,redund,redundant,295,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-689838616,2,['redund'],['redundant']
Safety,"Dear all I think I fixed the strategy I was trying... . After looking at older issues I tried the following:. ```; mmseqs createdb genome.ffn ./NUC/collection_db --dbtype 2; mmseqs cluster --threads 7 ./NUC/collection_db ./NUC/collection_clu XOXO; mmseqs createsubdb ./NUC/collection_clu.index ./NUC/collection_db ./NUC/collection_rep; mmseqs createindex ./NUC/collection_rep xxxxx --search-type 3 # this is the addition I made; mmseqs map sample_db ./NUC/collection_rep ./NUC/mapped XXX --threads 7; mmseqs convertalis sample_db ./NUC/collection_db ./NUC/mapped nuc_results.tsv; ```. Looking at the results for 2 proteins/predictions the number of hits seem similar. Best,. Andrés",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/507#issuecomment-981968527:623,predict,predictions,623,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/507#issuecomment-981968527,1,['predict'],['predictions']
Safety,"Debian patch works is that on distros such as Debian (and Fedora and Gentoo) the system zstd library can optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short projects always lean heavily on the distro. As for bugs, you can always strongly suggest that bug reports and issues be file",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1210,risk,risk,1210,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,1,['risk'],['risk']
Safety,"For Unexpected Behavior 2 & 3. There is a sequence length limitation in MMseqs2. With spaced 6-mer it needs at least 13 residues to detect a hit, w/o spacing just 12. You could try to run them with -k 5. . What is the use case for this small sequences?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275110965:132,detect,detect,132,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275110965,1,['detect'],['detect']
Safety,"Hello @milot-mirdita and @martin-steinegger . ; Sorry if it took me some time to extra testing. As Milot was suggesting the problem happens when `createindex` and `search` are not set to use the Matrix.; Following I am showing the results alignments of a proteome against itself, using different combinations of of VTML80 and blosum62 for `createindex` and `search`. . | Pair | createindex | search | count | seconds |; | ------ | ------ | ------ | ------ | ------ |; | a-a | blosum62 | blosum62 | 10205 | 17.11 |; | a-a | VTML80 | blosum62 | 13962 | 91.36 |; | a-a | VTML80 | VTML80 | 14268 | 98.56 |; | a-a | blosum62 | VTML80 | 10709 | 16.5 |; | a-a | VTML40 | VTML40 | 14032 | 105.10 |. # Same alignments without indexing. | Pair | createindex | search | count | seconds |; | ------ | ------ | ------ | ------ | ------ |; | a-a | none | VTML80 | 14268 | 69.96 |; | a-a | none | blosum62 | 10205 | 13.66 |. As you can see from the second line, the results are same as in the first line of the fist table (in which only blosum62 was used). . I guess this solves the issue, and I am happy we found the problem :) ; Nevertheless, it would be very useful to have some kind of warning or even better, error message to avoid such things to happen (unless it is not the user's decision, in which case a ""--force-submat"" parameter might be handy). . Also, as I understand, among the `BLOSUM` matrixes only `blosum62` can be set at present, while different VTML matrixes can be set. . Could you please point me to somewhere I can see which MATRIXES can be used? ; Most matrixes files are under the `data` directory, but many did not work in my tests.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-674686756:1216,avoid,avoid,1216,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-674686756,1,['avoid'],['avoid']
Safety,Here is my initial clustering update:; `mmseqs clusterupdate Uniprot_Unreviewed_Zmays /home/ec2-user/MMSeqs2/Uniprot_Unreviewed_Zmays_Tomato_Dmagna_kmer20_results/Uniprot_Unreviewed_Zmays_Tomato_Dmagna Uniprot_Unreviewed_Zmays_clu Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWMAPDB Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWCLUST_clu ./tmp`. And the tsv generation:; `mmseqs createtsv ./Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWMAPDB Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWMAPDB Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWCLUST_clu Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWCLUST_clu.tsv`. tsv error message:; ```; MMseqs Version: f3b88f27def72ac5392131b98e079930f3b087c7; first sequence as respresentative false; Target column 0; Add Full Header false. Query file is ./Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWMAPDB; Target file is Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWMAPDB; Data file is Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWCLUST_clu; Start writing file to Uniprot_Unreviewed_Zmays_updated_Tomato_Daphnia_NEWCLUST_clu.tsv; terminate called after throwing an instance of 'std::logic_error'; what(): basic_string::_S_construct null not valid; Aborted; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/103#issuecomment-404865556:1236,Abort,Aborted,1236,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/103#issuecomment-404865556,1,['Abort'],['Aborted']
Safety,"Hi . thanks for reporting this issues. Could you please provide the output of MMseqs2 and the how you called it?. I tried to reproduce Unexpected Behavior 1 by using this workflow. ```; mmseqs createdb test.fasta test; mmseqs search test test res /tmp/res/ -a; mmseqs convertalis test test res res.tsv; ```. The output is . ```. 0000_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0000_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0000_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; ```. Unexpected Behavior 3:; There is a sequence length limitation in MMseqs2. With 6-mer spaced it needs at least 13 residues to detect a hit, w/o spacing just 12.; I can run this example 3 without any error message.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275014229:918,detect,detect,918,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275014229,1,['detect'],['detect']
Safety,"Hi @martin-steinegger . Thanks for the notice. I got a different error; ```; Reading context library for pseudocounts from context_data.lib ...; Reading context library for pseudocounts from context_data.lib ...; Reading context library for pseudocounts from context_data.lib ...; Reading context library for pseudocounts from context_data.lib ...; Reading abstract state alphabet from cs219.lib ...; Reading abstract state alphabet from cs219.lib ...; Reading abstract state alphabet from cs219.lib ...; Reading abstract state alphabet from cs219.lib ...; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun noticed that process rank 0 with PID 0 on node haldane exited on signal 11 (Segmentation fault).; --------------------------------------------------------------------------. ```. It failed in the last step. ```; mpirun -np 4 cstranslate -i subset.MSA_ca3m.ffdata -o subset.MSA_cs219 -A /home/linuxbrew/anaconda3/data/cs219.lib -D /home/linuxbrew/anaconda3/data/context_data.lib -x 0.4 -c 4 -I ca3m; ```. The complete steps I used are described in this script. ```; #!/usr/bin/env bash. ## define files and parameters here; ## sequence file name like ""NAME.fa"" use only the base name NAME and the script will add the ""*.fa"" grob; BASE=""subset""; HH_CONTEXT_DATA=""/home/linuxbrew/anaconda3/data/context_data.lib""; HH_LIB=""/home/linuxbrew/anaconda3/data/cs219.lib""; THREADS=4; SENSITIVITY=7.5; IDENTITY=0; COVERAGE=0.8; EVALUE=0.00001. CLU_MODE=1. FILE=""${BASE}.fa""; MMSEQDB=""${BASE}DB""; MMSEQPREF=""${BASE}PREFILTER""; MMSEQALN=""${BASE}ALN""; MMSEQCLU=""${BASE}CLU""; MMSEQMSA=""${BASE}MSA""; FILELOG=""job.log"". echo '#:: CREATEDB' &>> ${FILELOG} ;; mmseqs createdb ${FILE} ${MMSEQDB} &>> ${FI",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-492826081:749,abort,aborted,749,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-492826081,1,['abort'],['aborted']
Safety,"Hi @milot-mirdita . I was needing more than one hit per query. Actually, I was trying to find domains/regions with a high score but since I have a lot of multidomain proteins I need all high score local alignments. So I remove redundancy at 30% of identity, searched all against all, I have removed self-matches and choose hits with very low e-value. I preferred to do this externally to MMSeqs. Now I'm clustering these regions. . Anyway, I did test those commands anyway. ```; mmseqs filterdb pbps.neighbors.rep30.ALN pbps.neighbors.rep30.ALN.top1 --extract-lines 1; mmseqs extractalignedregion id_0.3cov_0.8evalue_0.001/pbps.neighbors.db id_0.3cov_0.8evalue_0.001/pbps.neighbors.db pbps.neighbors.rep30.ALN.top1 pbps.neighbors.rep30.ALN.SEQ --threads 40; mmseqs cluster pbps.neighbors.rep30.ALN.SEQ pbps.neighbors.rep30.ALN.SEQ.CLU -c 0 -e 1e-10 --threads 40 --max-seqs 300 --kmer-per-seq 80 -s 7.5 -a; mmseqs createtsv pbps.neighbors.rep30.ALN.SEQ pbps.neighbors.rep30.ALN.SEQ.CLU pbps.neighbors.rep30.ALN.SEQ.CLU.tsv; ```. Also, I did use coordinates of matches in target and extract with any other sequence manipulation tool. ```; mmseqs createdb pbps.neighbors.regions.fa pbps.neighbors.regions.DB; mmseqs cluster pbps.neighbors.regions.DB pbps.neighbors.regions.CLU /tmp/ --threads 40 -c 0.8 --min-seq-id 0.8; mmseqs createtsv pbps.neighbors.regions.DB pbps.neighbors.regions.CLU pbps.neighbors.regions.CLU.tsv --threads 40; mmseqs result2repseq pbps.neighbors.regions.DB pbps.neighbors.regions.CLU pbps.neighbors.regions.CLU.REP ; ln -s pbps.neighbors.regions.DB_h pbps.neighbors.regions.CLU.REP_h ; ln -s pbps.neighbors.regions.DB_h.index pbps.neighbors.regions.CLU.REP_h.index ; mmseqs cluster pbps.neighbors.regions.CLU.REP pbps.neighbors.regions.CLU.REP.CLU tmp -c 0 -e 1e-10 --threads 40 --max-seqs 300 --kmer-per-seq 80 -s 7.5 -a ; mmseqs createtsv pbps.neighbors.regions.CLU.REP pbps.neighbors.regions.CLU.REP.CLU pbps.neighbors.regions.CLU.REP.CLU.tsv --threads 40 ; mmseqs createseqf",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499589040:227,redund,redundancy,227,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499589040,1,['redund'],['redundancy']
Safety,"Hi @milot-mirdita, thanks! I updated the mmseqs to the latest version and set the --split-memory-limit parameter to 250G, this time I didn't get that error, but it threw me another error:. ```. Not enough memory to process at once need to split; [=================================================================tmp/2319642838547372155/clu_tmp/15550839581876067830/linclust.sh: line 26: 344 Killed $RUNNER ""$MMSEQS"" kmermatcher ""$INPUT"" ""${TMP_PATH}/pref"" ${KMERMATCHER_PAR}; Error: kmermatcher died; Error: Search died; finished; slurmstepd: error: Detected 1 oom-kill event(s) in step 30119673.batch cgroup. Some of your processes may have been killed by the cgroup out-of-memory handler. ```; The command I'm using is like this:. `mmseqs easy-linclust ${sample}_R2.fastq.gz $OUT tmp -c 0.95 --split-memory-limit 250G`. Could you give me some help on that?. Thanks so much!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/427#issuecomment-805847611:550,Detect,Detected,550,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/427#issuecomment-805847611,1,['Detect'],['Detected']
Safety,"Hi Martin; ffindex_apply is awesome, I've been playing around and it is quite straight forward to plug it in our pipeline avoiding the generation of the files. Just for reference, a quick example on how to perform a MSA for each cluster with >= 10 members:; ```; #!/bin/bash. SEQS=$(perl -ne 'print $_' ""${1}""); if [ ""$(echo ""${SEQS}"" | grep -c '>')"" -ge 10 ]; then; echo ""Num seqs: $(echo ""${SEQS}"" | grep -c '>')""; REP=""$(echo ""${SEQS}"" | head -n 1 | cut -f 2 -d '|')""; ALN=cluster_""$(grep -n ""${REP}"" DB_clu_wide.tsv | cut -f1 -d ':')"".aln; famsa-1.2.1-osx <(echo ""${SEQS}"") ""${ALN}""; fi; ```; and we run it like:; ```; ffindex_apply DB_db_fa DB_db_fa.index -- bash aln.sh; ```. Many thanks!; Antonio",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343730359:122,avoid,avoiding,122,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343730359,1,['avoid'],['avoiding']
Safety,"Hi there, was wondering if this feature is in process of development? If so, any idea on timeline?; From doing a comparison analysis between mmseqs and taxonomic binning tool with frameshift-aware alignment (DIAMOND+MEGAN), we saw significantly improved results with this frameshift feature. Ex. In a metagenomic sample, 9 out of 10 organisms were correctly identified to species level with frameshift-corrected alignment, whereas mmseqs could only identify 6 out of 10 organisms to species level. Another feature that MEGAN provides (that would be very useful in mmseqs) is that it exports frameshift-corrected contigs, which is advantageous in performance improvement of downstream tools (ie. AMR detection).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/417#issuecomment-805219866:699,detect,detection,699,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/417#issuecomment-805219866,1,['detect'],['detection']
Safety,"Hi, sorry for bringing up an old thread, but I came across this when looking for how to remove identical sequences, and tried following the steps mentioned above by @martin-steinegger, and am surprised with the results tbh... Not sure if this is an issue, but please could you be so kind as to confirm that the above/below options still do as intended in this thread? (If you'd prefer I open a new issue and link back to this one, please let me know 🙂) . Essentially I've got three proteomes from the same species, and I'd like to remove identical redundant proteins and fragments, keeping the longest protein only, discarding any fragments that are a subsequence of anything else. This is what I understand is effectively the method followed to create the UniRef100 database, but I'd like to do it just for these three proteomes... **Protein counts for source files**; ```; $ for f in *.fasta; do echo -n ""$f "" ; grep '^>' $f | wc -l ; done; proteome-1.fasta 23885; proteome-2.fasta 23758; proteome-3.fasta 28118; proteomes-appended.fasta 75761; ```. **Create database**; `$ mmseqs createdb proteomes-appended.fasta db`. **Remove redundant proteins** (using options mentioned above in https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-411727699); `$ mmseqs cluster db db_clu tmp --min-seq-id 1.0 -c 0.9 --cov-mode 1`. Do these options still perform a bidirectional search, removing only redundant proteins with 100% identity? Any fragments of longer proteins should be removed. However `-c 0.9` doesn't seem correct.... **Export consensus sequences to fasta file**; ```; $ mmseqs result2repseq db db_clu db_clu_rep; $ mmseqs result2flat db db db_clu_rep db_clu_rep.fasta --use-fasta-header; ```. **How many sequences?**; ```; $ grep '^>' db_clu_rep.fasta | wc -l; 58339; ```. So this has removed 17422 sequences, but tbh I was expecting to have an end result closer to ~30k proteins. Please can you confirm if I have done as I intended?. Best,; Alex",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-1105387969:548,redund,redundant,548,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-1105387969,3,['redund'],['redundant']
Safety,"Hi,. I see that in the Cluster module of MMseqs2, there is a function that converts sequence identity to a corresponding sensitivity value:; `. float setAutomaticThreshold(float seqId) {; float sens;; if (seqId <= 0.3) {; sens = 6;; } else if (seqId > 0.8) {; sens = 1.0;; } else {; sens = 1.0 + (1.0 * (0.7 - seqId) * 10);; }; return sens; }. `. So if you call it with seqId = 0.4, it would return `-s` as 4. But there are some caveats to this:; 1. This function is used for clustering, where the meaning of a slightly wrong `-s` value is slightly worse clustering, but not loss of information (as all the input will be clustered, no matter what `-s` value is selected). This is not the case here and a too low `-s` might cause losing hits.; 2. The function is not based on thorough benchmarking, it is more a ""rule of thumb"". Therefore, we recommend you:; 1. Easy: select a slightly higher `-s` than the seqId you are interested in, to be on the safe side; 2. Involved: keep an eye on the results and see if big things get lost.; 3. More involved: benchmark for your purposes. For example, create a dataset of homologous pairs at 40% id of taxa relevant for your study and see how many can be recovered using various `-s`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1849056333:948,safe,safe,948,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1849056333,2,"['recover', 'safe']","['recovered', 'safe']"
Safety,"Hi,; I think the following error is related to this issue as well. When searching against Uniref90 on 31e1fddc9b9368570bb39be3051232d4e64f7ae9 I am getting the following error:; ```; *** Error in `*** Error in `mmseqs*** ; Error in `mmseqs': free(): invalid pointer: 0x0000000000ccb6d8 ***; *** Error in `tmp8/4822298374491924264/blastp.sh: line 86: 6866 Aborted ; $RUNNER $MMSEQS prefilter ""$INPUT"" ""$TARGET"" ""$TMP_PATH/pref_$SENS"" $PREFILTER_PAR -s $SENS; Error: Prefilter died; ```; Many thanks; Antonio",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/55#issuecomment-357820039:355,Abort,Aborted,355,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/55#issuecomment-357820039,1,['Abort'],['Aborted']
Safety,"How does the truncated length make it into the index file though?; In https://github.com/soedinglab/MMseqs2/blob/master/src/prefiltering/PrefilteringIndexReader.cpp#L247, things look 64-bit safe.; Calls https://github.com/soedinglab/MMseqs2/blob/master/src/commons/DBWriter.cpp#L403, which eventually calls https://github.com/soedinglab/MMseqs2/blob/master/src/commons/DBWriter.cpp#L379 where the length is computed from offsets.; And eventually formatted to text as a 64-bit integer https://github.com/soedinglab/MMseqs2/blob/master/src/commons/DBWriter.cpp#L415.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/868#issuecomment-2260217457:190,safe,safe,190,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/868#issuecomment-2260217457,1,['safe'],['safe']
Safety,"I am having a very similar error:. **Current behaviour**; After submitting a `mmseqs taxonomy` run, this sub command is being executed (and dies):. ```; aggregatetaxweights mmseqs_database/database tmp1/14824571404584235274/orfs_h_swapped tmp1/14824571404584235274/orfs_tax tmp1/14824571404584235274/orfs_tax_aln SWH_IN_taxonomy/SWH_IN --lca-ranks kingdom,phylum,class,order,family,genus,species --tax-lineage 1 --compressed 1 --threads 12 -v 3; ```. **MMseqs output**. ```; Missing key 0 in tax result; tmp1/14824571404584235274/taxpercontig.sh: line 85: 206297 Aborted (core dumped) ""$MMSEQS"" aggregatetaxweights ""${TAX_SEQ_DB}"" ""${TMP_PATH}/orfs_h_swapped"" ""${TMP_PATH}/orfs_tax"" ""${TMP_PATH}/orfs_tax_aln"" ""${RESULTS}"" ${AGGREGATETAX_PAR}; Error: aggregatetaxweights died; ```. **Environment**. - singularity container of mmseqs2 version 15.6f452 (build pl5321h6a68c12_0); - HPC (Linux + slurm); - 950 GB RAM. **Comment**; I know that for mmseqs taxonomy classification with GTDB at least 900 GB RAM are needed, so I am not surprised that your process died @AstrobioMike. And since I seem to have a very similar error (if not the same) maybe even my 950 GB RAM are not enough, I wonder...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/806#issuecomment-2377150051:563,Abort,Aborted,563,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/806#issuecomment-2377150051,1,['Abort'],['Aborted']
Safety,"I am having the same issue when trying to cluster a catalog of bacterial proteins, namely [UHGP](https://www.ebi.ac.uk/metagenomics/genome-catalogues/human-gut-v2-0). . I have noticed that when I align assembled bacterial proteins from my dataset to UHGP reresentative sequences of clusters at 90% amino acid identity, some of them align to over 1200 representative sequences with identity over 90% and almost 100% coverage. The UHGP clusters were generated with `linclust`, so I attempted to cluster de-duplicated sequences from this catalogue with the `easy-cluster` workflow, hoping to improve the results. However, while there is an improvement, the situation is still far from ideal. ## Input data; 95,303,635 non-redundant proteins from UHGP v2.0 ([FTP link](http://ftp.ebi.ac.uk/pub/databases/metagenomics/mgnify_genomes/human-gut/v2.0/protein_catalogue/uhgp-100.tar.gz)). ## Expected behavior; Each protein from my assemblies will align to zero or one representative sequence with identity > 90% and coverage > 90%. Due to heuristics, I would not be surprised if there were a couple of such proteins, but with one standing out in terms of identity %. ## Current behavior. Some of the proteins align to many (more than 100) representative sequences with pident over 90%. ### Default easy-cluster. ```mmseqs easy-cluster uhgp-100/uhgp-100.faa easy-cluster/uhgp90 tmp --cov-mode 1 -c 0.8 --kmer-per-seq 80 --min-seq-id 0.9 ```. A single protein aligns up to 147 representative sequences with average pident of 97%. ### Cluster reassign. ```mmseqs easy-cluster uhgp-100/uhgp-100.faa cluster-reassign/uhgp90 tmp --cov-mode 1 -c 0.8 --kmer-per-seq 80 --min-seq-id 0.9 --cluster-reassign```. A single protein aligns up to 164 representative sequences with average pident of 97%. ### Single-step clustering. ```mmseqs easy-cluster uhgp-100/uhgp-100.faa single-step-clustering/uhgp90 tmp --cov-mode 1 -c 0.8 --kmer-per-seq 80 --min-seq-id 0.9 --single-step-clustering```. A single protein aligns up to ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1322374871:719,redund,redundant,719,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1322374871,1,['redund'],['redundant']
Safety,"I assume the message comes from alignments that find --max-seqs similiar sequences. So the filter would remove all sequences but then add back the query sequence. I would recommend to work on a redundancy reduced database. E.g. Uniclust90 (uniclust.mmseqs.com). I forgot, you need to add the flat --add-self-matches to your search. . mmseqs search pdb_05_profile pdb_05_rep pdb_05_pp_res tmp --threads 110 -e 0.05 --add-self-matches; mmseqs clust pdb_05_profile pdb_05_pp_res pdb_05_pp_clu --threads 110 --cluster-mode 1 --similarity-type 1. Do you use MMseqs2 on a computer with 110 core?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369616060:194,redund,redundancy,194,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369616060,1,['redund'],['redundancy']
Safety,"I don't know your exact use-case and if this is actually important for you, I am just warning you that how you are currently using MMseqs2, might be a bit problematic with this specific target database. The results you are already getting with your current usage might already by completely fine for your current use-case. I will just explain what you could do if you might want more ""complete"" results. Furthermore, this is unrelated to the stability problem (that one should now be solved). The very redundant target database you are using is a bit of a weak point in MMseqs2. ; The MMseqs2 prefiltering module reports all the best double-consecutive-kmer matches either down to the `--min-ungapped-score` threshold or as many as `--max-seqs` allows. The `--min-ungapped-score` criterion removes many hits that could never reach a good E-value anyway. . The `--max-seqs` parameters prevents a explosion of disk space while accepting the risk of losing some redundant hits. This is not that much of a problem since we normally search against the representatives of a clustered database, which are sufficiently dissimilar to not enter this case. Now you have a target database with many very similar sequence and will run into this case. The effect is that a good (maybe even the best) hit in the target database might not be found, since its outside the limit given by `--max-seqs`. We have a different search mode that accepts some inefficiency, while dealing with correctly with very redundant database and you can access this mode by passing the `--slice-search` parameter to either `easy-search` or `search`.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597651917:502,redund,redundant,502,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597651917,4,"['redund', 'risk']","['redundant', 'risk']"
Safety,"I figure out that I have a lot of file as `subsetMSA_ca3m.ffdata.{NUMBER}`, but only `subsetMSA_ca3m.ffdata.0` has data. ; So I remove all other files and rename `subsetMSA_ca3m.ffdata.0` to `subsetMSA_ca3m.ffdata`. I got other error.; command: ; `cstranslate -i subsetMSA_ca3m.ffdata -o subsetMSA_cs219 -A /home/linuxbrew/anaconda3/data/cs219.lib -D /home/linuxbrew/anaconda3/data/context_data.lib -x 0.3 -c 4 -I ca3m`; error:; ```; Reading context library for pseudocounts from context_data.lib ...; Reading abstract state alphabet from cs219.lib ...; malloc(): memory corruption; Aborted (core dumped); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484672522:583,Abort,Aborted,583,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484672522,1,['Abort'],['Aborted']
Safety,I had this same issue when trying to use mmseqs2. Are you sure it's safe to simply rename these files?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-435239641:68,safe,safe,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-435239641,1,['safe'],['safe']
Safety,"I have problems constructing a redundant database that reproduces this issue. Something is odd with this part of the output:; ```; 320.495474 k-mers per position; 1748306 DB matches per sequence; 674 overflows; ```. Can you share some approximate composition/construction of the database so I can try to make something from public data?. I improve the reliability of your own search, I would recommend to cluster your database at a high seq.id./coverage to collapse some of the redundancy. This will speed up the search and probably also not go into the possibly problematic code branch I suspect is causing the issue.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-592526278:31,redund,redundant,31,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-592526278,2,['redund'],"['redundancy', 'redundant']"
Safety,I manually removed the redundancies before entering into mmseqs and it worked again. I suspect there is something off about the redundancy filter in mmseqs.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384874532:23,redund,redundancies,23,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384874532,2,['redund'],"['redundancies', 'redundancy']"
Safety,I might have a solution to accept sequences until 2^16. This should avoid this annoying few cases (e.g. Titin). I will implement this in the next days.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/89#issuecomment-393070760:68,avoid,avoid,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/89#issuecomment-393070760,1,['avoid'],['avoid']
Safety,"I searched with your example query.fasta (101mA, 10mhA) against the target.fasta (A0A021WW32, A0A021WZA4). MMseqs2 can not detect any alignments. I aligned these sequences with smith waterman and the sequence identity is <= 20%. Is this intended? Maybe you want to use profiles? . Please don't use the parameter --include-id if the query database and target database do not contain the same identifier. The --include-id is just important for clustering. The option --max-seq-id 1.0 is just needed if you try to compute profiles and you don't use profiles in this example. . Could you provide the whole dataset please? So we can test this behavior? I tried to reproduce it with some fasta files on my computer but I was not able to. . Thanks a lot for your feedback.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090:123,detect,detect,123,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090,1,['detect'],['detect']
Safety,"I think I encountered same question like you, and my HPC node similar with yours, it kept running almost 17h and no progress, I'm wondering that when you set the param `--db-load-mode 3` then rerun it, how long could you detect the output?. Any anwser would be helpful! Thanks!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-1814045055:221,detect,detect,221,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-1814045055,1,['detect'],['detect']
Safety,I think the issue here is that the detection of NA/prot goes wrong at indexing time. So what is also needed is the equivalent to `--dbtype 2` but for indexing.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1276522464:35,detect,detection,35,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1276522464,1,['detect'],['detection']
Safety,"I think this sequence broke the nucl-prot detection heuristic:; ```; >5DO4_3; GGGAAXAAAGXUGAAGUXXUUAXXX; ```. MMseqs2 assumes that the unknown residue for nucleotides is `N` and not `X`. The heuristic for differing between the two is as follows:. * check the first 10 sequences if they are all nucleotide sequences; * check every 100th sequence; * check that all of these are at least 90% composed of `ATGCUN`. if all of these are nucleotide sequences, declare the database to be a nucleotide database. You can disable the heuristic and fix the database to be a nucleotide db by passing `--dbtype 2` to `easy-search` (in this case the `search` entry in the `.params` file.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1275782810:42,detect,detection,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1275782810,1,['detect'],['detection']
Safety,"I tried to reconstruct the command that probably crashed. Could you run it again inside a debugger to recover the backtrace? I have no clue what could have gone wrong so early in the command invocation (the running module had no output at all before it crashed).; 1) Run the following command; ```; gdb --args mmseqs rescorediagonal /export/tmp/MERC/4233864688410091672/input_step_redundancy /export/tmp/MERC/4233864688410091672/input_step_redundancy /export/tmp/MERC/4233864688410091672/clu_tmp/16445679162920043634/pref_filter2 /export/tmp/MERC/4233864688410091672/clu_tmp/16445679162920043634/pref_rescore2 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 1 --wrapped-scoring 0 --filter-hits 1 -e 0.001 -c 0.9 -a 0 --cov-mode 1 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 96 --compressed 0 -v 3; ```; 2) wait for a command prompt; 3) press `r` for run and then enter; 4) wait for the crash; 5) press `bt` for backtrace and then enter; 6) copy the output and paste it here. Thanks a lot for reporting the issue.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649841049:102,recover,recover,102,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649841049,1,['recover'],['recover']
Safety,"I used a sequenceDB file, not an alignmentDB file, because I expected it to work like ""cluster"". **Edit:** Actually... I'm not sure if I understand anything anymore! :D Clusthash **does** seem to expect a sequenceDB. I still struggle a bit with understanding the output of the cluster modules. What I actually want to do, is to use ""clusthash"" to reduce the redundancy of the PDB. The hope is, that this will reduce the number of chains enough, so I can create a somewhat useful visualization of the distance graph.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263835793:358,redund,redundancy,358,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263835793,1,['redund'],['redundancy']
Safety,"I used the following command: . ```; zcat source_taxonomy.tsv.gz | cut -f1,5,6,7,8,9,10 | taxonkit create-taxdump -A 1 -O taxdump/; ```. My file looks like this: . ```; (base) zcat source_taxonomy.tsv.gz | cut -f1,5,6,7,8,9,10 | head; id_source	class	order	family	genus	species	strain; Aalte1	Dothideomycetes	Pleosporales	Pleosporaceae	Alternaria	Alternaria alternata; Aaoar1	Dothideomycetes	Pleosporales		Aaosphaeria	Aaosphaeria arxii; Abobi1	Agaricomycetes	Polyporales	Podoscyphaceae	Abortiporus	Abortiporus biennis; Abobie1	Agaricomycetes	Polyporales	Podoscyphaceae	Abortiporus	Abortiporus biennis; Abscae1	Mucoromycetes	Mucorales	Cunninghamellaceae	Absidia	Absidia caerulea; Absrep1	Mucoromycetes	Mucorales	Cunninghamellaceae	Absidia	Absidia repens; Acain1	Exobasidiomycetes	Exobasidiales	Cryptobasidiaceae	Acaromyces	Acaromyces ingoldii; acanthamoeba_castellanii_str_neff_gca_000313135		Longamoebia	Acanthamoebidae	Acanthamoeba	Acanthamoeba castellanii	Acanthamoeba castellanii str. Neff; Acastr1	Lecanoromycetes	Acarosporales	Acarosporaceae	Acarospora	Acarospora strigata; ```. However, further down in the file there are certain taxonomic fields that are missing. . Once I created my taxdump files. I used the following to convert my MMSEQS sequence database to a taxonomy database: . ```; mmseqs createtaxdb MicroEuk100.eukaryota_odb10 tmp/ --ncbi-tax-dump taxdump/ --tax-mapping-file taxdump/taxid.map; mmseqs createindex MicroEuk100.eukaryota_odb10 tmp/; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872504249:486,Abort,Abortiporus,486,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1872504249,4,['Abort'],['Abortiporus']
Safety,"I want to do multiple things.; First I want to reduce the redundancy of the DB by filtering out exact duplicates. ""Hashclust"" seems to detect exact duplicates after reducing the alphabet, which might be even better for my use case.; Later, I want to compare different clustering methods, including the ones provided by MMseqs. If I understand the module correctly, ""hashclust"" creates an alignmentDB that includes all exact matches between sequences that have had their alphabet reduced. This alignmentDB can then be used by ""clust"" to cluster the sequences. If I use sequence identity in ""clust"", which can only be 1 or 0 (not listed) when I use ""hashclust"" the resulting clusters should contain only said reduced-alphabet-exact-matches. Is that correct?. **Edit:** It seems that after using ""mmseqs createseqfiledb DB clu clu_seq"" every header in clu_seq containing a cluster representing sequence ID starts with a null byte. I used that to create a fasta file that only contains non-redundant (with regard to ""clusthash"") sequences.; I hope that what I got is what I think I got.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263872227:58,redund,redundancy,58,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263872227,3,"['detect', 'redund']","['detect', 'redundancy', 'redundant']"
Safety,"I was looking for a command/option to merge the raw alignments or taxonomy files once they have been computed on different input sequence sets against the same database (and the use the convertalis or taxonomyreport commands on the merged output). Some of those alignments were already calculated, and I wondered if it was possible to avoid running again those into a merged input file on search/taxonomy commands. I really appreciate your suggestions and those by Martin and I will take into account for future searches with MMseq2. Thanks again for your help... Josep F. > However, you can bundle more queries into one run by giving more input fasta/q files to `createdb`:; > ; > ```; > mmseqs createdb fasta1.fa fasta2.fa target; > mmseqs search query target aln tmp; > ```; > ; > Now you can additionally give the `qset` column to `convertalis` to resolve from which input fasta file each search result came from.; > ; > ```; > mmseqs convertalis query target aln aln.m8 --format-output qset,query,target,etc...; > ```; > ; > You will get an output similar to this:; > ; > ```; > fasta1.fa q1 t5 ...; > fasta1.fa q2 t7 ...; > fasta2.fa q6 t1 ...; > ...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/267#issuecomment-580775351:335,avoid,avoid,335,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/267#issuecomment-580775351,1,['avoid'],['avoid']
Safety,"I was looking for the same info (coming from the colab fold paper). I havent tried running it yet. I believe that given your query db (sequences of a complex), the target db (e.g. uniref), the alignments (sequences vs. uniref) pairaln will create pairings that satisfy the conditions:. - paired sequences must come from the same species; - each query must have a hit within a species; - 50% of query sequence needs to be covered in the alignment. The paragraph from the paper:. > MSA pairing for complex prediction. A paired MSA helps AlphaFold2 to predict complexes more accurately only if orthologous genes are paired with each other. We followed a similar strategy as Bryant et al.22 to pair sequences according to their taxonomic identifier. For the pairing we search each distinct sequence of a complex against the UniRef100 using the same procedure as described in section 2.2.1. We return only hits that cover all complex proteins within one species and pair only the best hit (smallest E-value) with an alignment that covers the query to at least 50%. The pairing is implemented in the new MMseqs2 module pairaln.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/628#issuecomment-1448271839:504,predict,prediction,504,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/628#issuecomment-1448271839,2,['predict'],"['predict', 'prediction']"
Safety,"I was trying to avoid MPI so far... Mostly because I run mmseqs as part of a nextflow pipeline, and I'm not even sure if it is possible to use MPI from there, because nextflow usually takes care of the parallelization.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/376#issuecomment-734387106:16,avoid,avoid,16,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/376#issuecomment-734387106,1,['avoid'],['avoid']
Safety,I would still try to avoid placing the temp directory on NFS. Maybe that would help in the future.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/423#issuecomment-797846442:21,avoid,avoid,21,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/423#issuecomment-797846442,1,['avoid'],['avoid']
Safety,"I'm also getting this error. What's the current workaround? . ```bash; Reading LCA results; [=================================================================] 100.00% 3.34M 0s 428ms . Found 34 different taxa for 3340500 different reads.; terminate called after throwing an instance of 'std::out_of_range'; what(): _Map_base::at; /tmp/6531700399628113911/easy-taxonomy.sh: line 39: 138605 Aborted (core dumped) ""$MMSEQS"" taxonomyreport ""${TARGET}"" ""${TMP_PATH}/result_lca"" ""${RESULTS}_report"" ${THREADS_PAR}; Error: taxonomyreport died; ```. EDIT: Same error, new microbe:. <details><summary>Ending error here:</summary>. ```bash; Loading NCBI taxonomy; Loading nodes file ... Done, got 2213844 nodes; Loading merged file ... Done, added 56043 merged nodes.; Loading names file ... Done; Making matrix ... Done; Init RMQ ...Done; Reading LCA results; [=================================================================] 100.00% 2.27K 0s 0ms . Found 2 different taxa for 2272 different reads.; terminate called after throwing an instance of 'std::out_of_range'; what(): _Map_base::at; /tmp/16886106523447294388/easy-taxonomy.sh: line 39: 11990 Aborted ""$MMSEQS"" taxonomyreport ""${TARGET}"" ""${TMP_PATH}/result_lca"" ""${RESULTS}_report"" ${THREADS_PAR}; Error: taxonomyreport died; ```; </details>",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-577254067:389,Abort,Aborted,389,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-577254067,2,['Abort'],['Aborted']
Safety,"If you provide me the mmseqs command call for your search an the log of the run then I can tell you why MMseqs2 is not much faster and what parameter you can tweak to be faster. My assumption is that you waste a lot of time on alignments that do not have to be computed since the chance of being homologous is not high. . The warning ""Sequence XXX produces too many hits. Results might be truncated"" indicates that their are too many high scoring diagonal (> target database size / 2). Is your database highly redundant?. MMseqs2 produces in default only one smith-waterman alignment per sequence. You can increase the alignments with` --alt-ali`. If you want just the best hit than you could use `filterdb` to reduce just extract the first line of each query result. Also if you are just interested at the top hit than you can speed up MMseqs2 quite a lot by using an iterative search. See https://github.com/soedinglab/mmseqs2/wiki#how-to-find-the-best-hit-the-fastest-way . In my example MMseqs2 was able to detect the sequence pair you mentioned. I search sequence `10141.SETX` (query) against sequence `6334.TSP_11650` (target) and both could be detect by MMseqs2. . The command I used was . mmseqs search query target aln tmp -a -s 7.5",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407433121:510,redund,redundant,510,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407433121,3,"['detect', 'redund']","['detect', 'redundant']"
Safety,"In order to identify the best settings I have changed the search conditions. Now looking for a set of ~11K peptides (8-15 mers) against the human proteome. All the peptides are known to occur at least once in the target database. . My findings over the last week:; 1. not running `createindex` helps; 2. In order to find 8-mer peptides the `--spaced-kmer-pattern 110111 -k 5` or any other with 1 non-informative positions works. When increasing the number of non-informative positions or using 6-mers, numbers of detected 8-mer peptides drop dramatically. Changing the non-informative position leads to different peptides not being found. ; 3. Masking and compositional bias correction at 0 helps; 4. `--exact-kmer-matching` increases the numbers of detected peptides, alternatively I was able to reach similar numbers of detected peptides by running an iterative search with a lot of iterative searches which was slower. ; 5. `mmseqs search` was producing false-positive mappings, fixed by using `map`. These I have identified manually. . As a result, the current command looks like this:; ```; mmseqs map --comp-bias-corr 0 --mask 0 -e inf --max-seqs 300 --exact-kmer-matching 1 \; --spaced-kmer-pattern 110111 -k 5 -a 1 --min-seq-id 1 \; IP_nonspliced_DB/IP_nonspliced_DB proteome_DB/proteome_DB result_DB/result_DB tmp; ```. This yields 98-99% of the peptides mapped to the proteome. ; When using the translated genome database which is the actual target I see ~90% peptides mapped.; 100% true positive mapping without mismatches is my main goal when using mmseqs, because in the experiment context it is very important to find peptides even if they are mapped only to a single location and all the other locations for multi-mappers. . Can this result be improved to 100% or is this the limit in your opinion?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/391#issuecomment-767698082:513,detect,detected,513,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/391#issuecomment-767698082,3,['detect'],['detected']
Safety,"Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Intikhab S. Alam; Sent: 10 September 2020 00:45; To: soedinglab/MMseqs2; soedinglab/MMseqs2; Cc: Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). Dear Milot,. I provided all result files from previous easy-linclust of 3 billion sequences. As I understand, if you use the rep_seq based new database, the update of additional sequence will not place newer sequences to any existing clusters, is this right?. The only option seems to add newer redundant sequences to previous version of redundant sequences, create a database and start a fresh linclust session. You mentioned new versions of mmseq is now much faster, I will give it a go but do you think is there a way to extract the cluster db of my previous run where I used easy-linclust?. Please provide some useful advice as these are computationally heavy tasks. Best,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 08 September 2020 18:53; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180:1545,redund,redundant,1545,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180,2,['redund'],['redundant']
Safety,"It's a new week and we serve new (RNA) data. Now it's working again for our production data. However, the example above is still broken. Is there some auto-detect step that determine the database type from the provided sequences? The only thing that changed is the sequence file.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1261228576:156,detect,detect,156,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/611#issuecomment-1261228576,1,['detect'],['detect']
Safety,"MMSeqs2 considers only hits with two k-mers on a diagonal. In default MMSeqs2 uses spaced k-mers of length 13 (mask: 11010110011). This means that we can only find hits of at least 14 length. It is possible to turn off spaced k-mers `--spaced-kmer-mode 0`, this makes it possible to detect 8 residue long sequences. You could also define your own more compact spaced pattern using `--spaced-kmer-pattern`. Another option is to decrease the k-mer length using `-k`. Changing the substitution matrix also helps to detect shorter sequences. You might want to look into the publication ""Selecting the Right Similarity-Scoring Matrix"" from Pearson et al (https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3848038/)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/125#issuecomment-581274532:283,detect,detect,283,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/125#issuecomment-581274532,2,['detect'],['detect']
Safety,MMseqs can create asymetric sequence alignemnts. . For example 1: composition bias correction is just applied on the query not on the target sequence. There for the alignment can differ. ; For example 2: It can also happen that seq_A detects seq_B but seq_B does not detect seq_A at the prefilter stage.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275378500:234,detect,detects,234,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275378500,2,['detect'],"['detect', 'detects']"
Safety,"MMseqs2 can now compute alternative alignments. MMseqs2 only produces the best scoring alignment by default. However it is possible to create alternative alignments using the parameter `--alt-ali`. It adjust the number of alternative alignments that should be computed. We report only alternative hits that fulfill the alignment criteria: coverage `-c`, sequence identity `--min-seq-id`, max accept `--max-accept`, and e-value `-e`. Suppose we have two sequences:; (1) query sequence with domains A, B and C; (2) target sequence with homologous domains B' and A' C' . MMseqs2 will first align the highest scoring domain B and B'. For the next `--alt-ali` iteration we mask region B' in the target and align again. Now the alignment detects A and A'. Then we mask region B' and A' in the target and align again. resulting in an alignment of C and C'. I will add the support to switch the masking between target and query in future.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-393068844:732,detect,detects,732,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-393068844,1,['detect'],['detects']
Safety,Maybe we should add a do not hash flags to the parameters to avoid this.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461806077:61,avoid,avoid,61,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461806077,1,['avoid'],['avoid']
Safety,"My assumption is that the long sequences dominates the run time. Linclust was built for short sequences < 100kb and is slow when you try to align genomes against each other. . One trick that might speed up the process would be to use bi-directional coverage `--cov-mode 0`. This coverage mode rejects all sequences that cannot fulfil the coverage criteria, which hopefully avoids most of the long running alignments.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-706849886:373,avoid,avoids,373,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-706849886,1,['avoid'],['avoids']
Safety,"My point of view is that of a computational biologist who is both an end-user and developer of software that includes mmseqs as a dependency. As a developer myself, I view end users who are sophisticated enough to say things about builds as a fairly precious resource. So let me make my point one more time before I accept your decision and move on. . While I admit there are things that suck about semantic versioning, it has two outstanding qualities: (1) it has a controlled syntax that is widely used, and (2) it's easy to determine whether software that follow the pattern is older, newer, or equal to a reference version that someone else tested. Among the three recipes shown above and the binaries available for download, it seems that there are 3 different versioning schemes in use that will show up as the output of ""mmseqs version"" (12.11e3, 12-11e3, and the full SHA1). If I add my software (which uses VERSION_OVERRIDE=12.0 internally for compatibility with python semantic versioning), that's a 4th. My install code can't easily determine if a binary of unknown provenance is lower, equal, or higher than the recommended version. Neither can any downstream users without the sophistication to look at your repository's version tags. Using semantic versioning as a standard (that can be overridden by packagers or users if needed) would avoid this issue. To finish with something nice, your build system is well-done and build are smooth on the various linux and macos BigSur platforms I've tested it on. Feel free to close this issue after reading.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-767031559:1351,avoid,avoid,1351,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-767031559,1,['avoid'],['avoid']
Safety,"No, I just saw an ad on Stack Overflow and was randomly looking for something I could improve. It’s not my project, so it’s not for me to judge, but just out of curiosity: why not use unique_ptr instead of manual memory management whenever ownership is clear? It’s safer, shorter (no delete) and has zero overhead. I get that you don’t want to use more questionable C++ features like inheritance, RTTI or exceptions, but zero-cost static GC is the most useful thing you can pick up in C++ coming from C. And range-based for just makes code more readable and thus easier to support. Iterators are out of place there, they’re from a [lower abstraction level](https://www.fluentcpp.com/2016/12/15/respect-levels-of-abstraction/) than the surrounding code. I’ll pass, but thanks :)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/255#issuecomment-563504356:265,safe,safer,265,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/255#issuecomment-563504356,1,['safe'],['safer']
Safety,"No, currently query/target always parses the accession:; ```; { ""uc"", 2, 0}, // Uniclust; { ""cl|"", 3, 1},; { ""sp|"", 3, 1}, // Swiss prot; { ""tr|"", 3, 1}, // trembl; { ""gb|"", 3, 1}, // GenBank; { ""ref|"", 4, 1}, // NCBI Reference Sequence; { ""pdb|"", 4, 1}, // Brookhaven Protein Data Bank; { ""bbs|"", 4, 1}, // GenInfo Backbone Id; { ""lcl|"", 4, 1}, // Local Sequence identifier; { ""pir||"", 5, 1}, // NBRF PIR; { ""prf||"", 5, 1}, // Protein Research Foundation; { ""gnl|"", 4, 2}, // General database identifier; { ""pat|"", 4, 2}, // Patents; { ""gi|"", 3, 3} // NCBI GI; ```. These are the header formats that get parsed, you can try to avoid these prefices. It wouldn't be to hard to add an option to avoid parsing, but we have out hands quite full currently.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871240398:628,avoid,avoid,628,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871240398,2,['avoid'],['avoid']
Safety,"Ok thank you for your time, I was really helpful. . About the index _number added at each queries' names, have you an idea to avoid a such adding? because I have to get the fasta sequences after this process and for that I need the exact scaffold's name, without an index added.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773727:126,avoid,avoid,126,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773727,1,['avoid'],['avoid']
Safety,"Okay, the standard output is here https://gist.github.com/bastian-wur/1b978870a88c3ead69f51e77e65b4696 ; You can see that ""sequence pairs passed the thresholds"" is different for all 3 of them. Maybe of importance, not sure: The used database is pretty redundant. Not sure if there are many identical matches in there, but many which are pretty close to each other.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590294564:252,redund,redundant,252,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590294564,1,['redund'],['redundant']
Safety,Output of cmake call:; ```; -- The CXX compiler identification is GNU 10.3.0; -- The C compiler identification is GNU 10.3.0; -- Check for working CXX compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/c++; -- Check for working CXX compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Source Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Project Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:444,Detect,Detecting,444,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,2,['Detect'],['Detecting']
Safety,Sorry for the late answer @ksteczk. ; What do you mean by PSI-BLAST distances? . The following workflow is a profile consensus clustering. As a first step I would remove redundancy from your set: ; ; mmseqs linclust NR NR_95_90_clu /tmp -c 0.95 --min-seq-id 0.95; mmseqs createsubdb NR_95_90_clu NR NR_95_90_repseq. Create profiles by iterative search:. mmseqs search NR_95_90_repseq NR_95_90_repseq NR_res /tmp --num-iterations 3 ; mmseqs result2profile NR_95_90_repseq NR_95_90_repseq NR_res NR_profile. Cluster profiles: . mmseqs search NR_profile NR_consensus NR_pp_res /tmp # Add your cluster criteria here; mmseqs clust NR_profile NR_pp_res NR_pp_clu,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-367905853:170,redund,redundancy,170,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-367905853,1,['redund'],['redundancy']
Safety,"Thank you for sharing the data. There are two problems, which avoids the sequences to be clustered together (1) sensitivity issue of Linclust and (2) result size issue of the all against all clustering algorithm. Either of the following two solutions solves the problem:. 1.) You can increase the sensitivity of Linclust by adjusting `--kmer-per-seq`. I would recommend to set it to 80.; 2.) You can increase `--max-seqs` to reduce the truncation of clusters. The default is 30. You could increase it to 300 e.g. . I did cluster your data using `mmseqs cluster panproteome/panproteome.db clu_linclust3 tmp --kmer-per-seq 80 --min-seq-id 0.8`. Both sequences (GCF_001249795.1_3002_8_6_genomic_02902, GCF_001259475.1_4370_2_2_genomic_00977) got clustered.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-392657600:62,avoid,avoids,62,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-392657600,1,['avoid'],['avoids']
Safety,Thank you for the example. The issue is that `YP_009345691` is at 40% sequence identity. You need to increase the sensitivity to find the hit (see https://github.com/soedinglab/MMseqs2/wiki#set-sensitivity--s-parameter). E.g. `-s 6.5` can detect the hit. mmseqs easy-search loci.fna db.faa aln tmp -s 6.5,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/264#issuecomment-574384604:239,detect,detect,239,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/264#issuecomment-574384604,1,['detect'],['detect']
Safety,"Thank you for the prompt reply!; Ok I see. ; The idea is to run colabfold_search/colabfold_batch with a bunch or proteins at the same time. I've been using the API server but some of my jobs encountered ratelimits. To avoid this issue, I decided to build the databases and search against them locally. Sincerely,; Ilyes",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/583#issuecomment-1200976095:218,avoid,avoid,218,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/583#issuecomment-1200976095,1,['avoid'],['avoid']
Safety,Thank you for the very prompt response! Your correction of course solved my problem. I don't see the dual purpose of createtsv as a deficiency at all; I simply missed the the distinction between the command formats. Perhaps adding to the clustering format documentation a line that notes the different createtsv input formats for dual purposes would help avoid confusion.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/319#issuecomment-645040050:355,avoid,avoid,355,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/319#issuecomment-645040050,1,['avoid'],['avoid']
Safety,Thank you for your detailed report. The problems seems like a missing `clust` call. You can see an example how to use `clusthash` here https://github.com/soedinglab/MMseqs2/wiki#how-to-redundancy-filter-sequences-with-identical-length-and-100-length-overlap. So to make your example work you would need to add a `clust` call after `clusthash` . mmseqs createdb test.fasta test.mmseqsdb; mmseqs clusthash test.mmseqsdb test.clusthashdb --min-seq-id 0.99 ; mmseqs clust test.mmseqsdb test.clusthashdb test.clust; mmseqs createseqfiledb test.mmseqsdb test.clust test.clust_clusters,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/77#issuecomment-376401650:185,redund,redundancy-filter-sequences-with-identical-length-and-,185,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/77#issuecomment-376401650,1,['redund'],['redundancy-filter-sequences-with-identical-length-and-']
Safety,"Thank you for your reply. ; From my understanding, the cascading clustering with the `--cluster-reassign` flag means that it will reassign the clusters so that there are no violations within the cluster. ; I did a sanity check, to make sure that neither of the centroids has a percentage of identity over 70%. So I searched the centroids database against itself, with `mmseqs search` and checked for `pident` > 50% . In general, I want to train an NLP model. So, I want to ensure that there is zero overlapping between training, validation and test sets. So, I clustered my dataset with 50% of identity and each cluster was assigned to one of the 3 sets.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834:214,sanity check,sanity check,214,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834,1,['sanity check'],['sanity check']
Safety,"Thanks a lot for offering your help, we will check how to make this a project. It's really kind of you. I have tried indexing with --max-seq-len 30000 but the search then run into error:; mmseqs createindex Ath /tmp/ --search-type 3 --max-seq-len 30000; mmseqs search Ath Ath AthDB /tmp --search-type 3 --max-seq-len 30000; Writing results to: AthDB; terminate called after throwing an instance of 'std::logic_error' ] 0.00% 1 eta -; what(): basic_string::_M_construct null not valid; /tmp/16276944363020795345/blastn.sh: line 66: 15898 Aborted ""$MMSEQS"" offsetalignment ""$1"" ""${QUERY}"" ""$2"" ""${TARGET}"" ""$4/aln"" ""$3"" ${OFFSETALIGNMENT_PAR}; Error: Offset step died. Ath, being the genome database (query and target)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/388#issuecomment-747471744:537,Abort,Aborted,537,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/388#issuecomment-747471744,1,['Abort'],['Aborted']
Safety,"Thanks a lot for your contribution and finding about this edge case. We try to avoid Modern C++ features, could you please implement this without `auto`, lambdas and std::replace. I think `FileUtil` might be an appropriate place for this function. The `SSTR(key)` branch is always numeric and doesn't require a call to `path_substitution`.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/467#issuecomment-873103775:79,avoid,avoid,79,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/467#issuecomment-873103775,1,['avoid'],['avoid']
Safety,"Thanks a lot for your work!. I looked though this repository and found these things that might need to be slightly tweaked.; In https://github.com/outpaddling/freebsd-ports-wip/blob/master/mmseqs2/Makefile:; * Do you need an explicit dependency on zlib, bzip2, libomp?; * Please add awk (might be not needed if its installed by default) and wget or curl as a dependency; * Perl is only a build time dependency (if xxd from vim is not available). I am not sure what to think of the arch patch, if you don't set any of the `-DHAVE_*` parameters, they are not used anyway and the automatic detection can be disabled by setting `-DMMSEQS_ARCH="" ""` or something like that. I would suggest to drop that patch. Does FreeBSD not have any baseline requirements (i.e. Debian has SSE2 as baseline)? I would be happy if at very least SSE2 would be enabled by default on x86_64. `-march` also doesn't work very well on some non `x86` architectures, some require `-mcpu` to work correctly. Are 32-bit builds disabled? MMseqs2 currently produces incorrect results on 32-bit systems (see #418, we will probably eventually deal with this to support webassembly fully). Would it be possible to run the small subset of test pipeline, that is part of the release on Github (i.e.: https://github.com/soedinglab/MMseqs2/releases/download/13-45111/MMseqs2-Regression.zip)? This would ensure that MMseqs2 on FreeBSD produces correct results. I was looking for a free CI service that supports *BSD previously, but couldn't find any.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867840850:587,detect,detection,587,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867840850,1,['detect'],['detection']
Safety,"Thanks for the hint. I'll try that. I'm using redundancy reduced database - pdb_05 is PDB Seqres database clustered with e-value 0.05, and the profiles are generated for pdb_05 sequences on nr70 database, which is nr clustered to 70% sequence identity. As to computer - yes, I'm using 120 cores single machine (it has four Xeons E7-4890 v2). The software; scales up amazingly. Now I'm computing 6it profiles for 31M sequences and; that will be accomplished in few days (prefiltering scores calculation took 65 h 52 m 33s). I see that when calculating S-W alignments the soft crunches the data using all given threads but after finishing million of sequences (or leaning towards finishing that million) it runs gradually on less and lass cores (perhaps some cores were given more time consuming alignments so the program might estimate times and balance threads more efficiently, but this is very minor and would be noticed for users working on big databases only), which might be a speed bottleneck for big dataset such as nr database processed on big machines. In few days I'll start tests also with MPI run, so that mmseqs2 will be ran; on 1600 CPUs on cluster (here I wish the software had used GPUs as the cluster I'm using has additionally some Firepros to use - I write it smiling as MMseqs2 is light years ahead of cd-hit, which I was using to date). I'll give you a feedback on the speed soon then.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733:46,redund,redundancy,46,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733,1,['redund'],['redundancy']
Safety,"Thanks for the quick response!; For some cases, I do get a result for nucl-nucl alignment (used later to produce m8 file, as described [here](https://github.com/soedinglab/mmseqs2/wiki#how-to-add-sequence-identities-and-other-alignment-information-to-a-clustering-result)), do you think it would be risky/buggy to use such results? ; Would the best way to compute the alignments among cluster members is to run mmseqs search command for each representative sequence against its cluster members (as a DB)? Would it be better to externally compute the Smith-Waterman alignment for each representative and cluster member?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/462#issuecomment-868462603:299,risk,risky,299,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/462#issuecomment-868462603,1,['risk'],['risky']
Safety,"Thanks for the suggestion. I'll do that for future runs to avoid the huge logfiles. Re: my original problem, I want to mention that I am using a Perl script (which parallel::forkmanager) to fork separate jobs for each sample in my list and then run each sample separately. I tried running mmseqs search with ""--threads 10"" using this same script, but I noticed that the intermediate steps in the command (extractorfs, align etc) all just used one process per sample. I am still trying to figure out if it is because of the parallel script or something to do with mmseqs itself. If I run the same search command on the terminal with ""--threads 10"" it goes fast. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Thursday, July 11, 2019 12:55:59 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). @milot-mirdita<https://github.com/milot-mirdita> noticed that the interactive progress bar could be a problem, in your case it produced at 13GB output. You can turn of the interactive progress bar by setting the environment variable to TTY=0. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOM5JCFUYB7FDWEK7TP65JY7A5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODZXE5VI#issuecomment-510545621>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMTYNMFATMDFBRTPR3P65JY7ANCNFSM4H333Q6Q>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405:59,avoid,avoid,59,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405,1,['avoid'],['avoid']
Safety,"Thanks for your answer, this is an interesting problem for many machine learning applications to avoid homology leakage. Here biology is not so important (for me at least). We want to be as fair as possible in this case.; ; So, if I understand correctly, this will do some prefiltering and then give back sparse similarity values which is indeed something that can be used for this purpose. Is this still the recommended way to do this, from the [user guide](https://mmseqs.com/latest/userguide.pdf)?. ````; fake_pref qdb tdb allvsallpref; mmseqs align qdb tdb allvsallpref allvsallaln; mmseqs convertalis qdb tdb allvsallaln allvsall.m8; ````. Thank you!; Sincerly,; P.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-2136930199:97,avoid,avoid,97,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-2136930199,1,['avoid'],['avoid']
Safety,"Thanks for your quick response! I wanted to make sure this was an uncommon error before escalating this to our HPC IT. They ended up upgrading the kernel on the node I was using, and the job finished successfully. It looked like some processes still entered D status but there wasn't an NFS timeout like before. This is all a little over my head, but the issue seems to be related to `kernel earlier than kernel-3.10.0-327.42.1.el7`, and the I/O from the analysis. Maybe that can help someone else if they run into issues running `easy-taxonomy` on HPC. I'll go ahead and close this issue now.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/423#issuecomment-797818932:291,timeout,timeout,291,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/423#issuecomment-797818932,1,['timeout'],['timeout']
Safety,"Thats a bit of a usability trap on our side. `createsubdb` will only create a new subset database for the sequence db, but not for the header db (`_h` suffix). . You can either also create that:; ```; mmseqs createsubdb tcdb_found.clu90 tcdb_found.db_h tcdb_found90.db_h; ```. Or save some space by creating symlinks:; ```; ln -s tcdb_found.db_h tcdb_found90.db_h; ln -s tcdb_found.db_h.index tcdb_found90.db_h.index; ```. Or pass the database with all entries to `result2flat`:; ```; mmseqs result2flat tcdb_found.db tcdb_found.db tcdb_found.clu70rep tcdb_found70.fa --use-fasta-header; ```. Either of these will work. We'll think of something to avoid this trap.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/102#issuecomment-403321117:648,avoid,avoid,648,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/102#issuecomment-403321117,1,['avoid'],['avoid']
Safety,The PSSMCalculator computes the profiles: https://github.com/soedinglab/MMseqs2/blob/25fc2108e0da107de5da157d68e5e7d8274a69ea/src/alignment/PSSMCalculator.cpp#L153. It works well for our purposes (homology detection). I don't know if it will work for your purposes.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2140477022:206,detect,detection,206,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2140477022,1,['detect'],['detection']
Safety,The issues occurs because the first 10 sequences look like DNA so we assume that the database is a nucleotide database. I changed the sampling strategy. So your sample is now detected as protein database.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/76#issuecomment-376079422:175,detect,detected,175,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/76#issuecomment-376079422,1,['detect'],['detected']
Safety,The only way currently is to use `translatenucs` to do a translation of your nucleotide sequence databases to amino acids and proceed from there. (Of course this has its own drawbacks and there is no way to detect frame shifts.). Hopefully we can get a master student in the future that implements a nucleotide prefilter.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/26#issuecomment-286151213:207,detect,detect,207,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/26#issuecomment-286151213,1,['detect'],['detect']
Safety,"The parameter was wrongly named. In release 11 it's now called `--shuffle` and 0 means no shuffling and 1 shuffling is enabled. However I would recommend not changing them. They are an internal optimization to help MMseqs2 not lose sensitivity in one specific case. If a machine does not have enough RAM (or if MPI is used) the target database is split and processed into multiple chunks. If one chunk is too redundant/similar/biased then `--max-seqs` can explode within this one chunk and we might lose good hits. By more or less randomly assigning sequences to any chunk we can prevent this. This parameter does not affect the order of the results in the result file (i.e. the `.m8` file). This will still pretty much random, as each query is processed by a different thread and the order of results written is thus not deterministic. If you want a sorted result file I would recommend to use `sort`:; `sort -s -k1,1 result.m8 > result_sorted.m8`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/313#issuecomment-632646531:409,redund,redundant,409,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/313#issuecomment-632646531,1,['redund'],['redundant']
Safety,"The positions refer to the original sequences, in this case the query positions refer to nucleotide positions and the target positions refer to amino acid positions. The alignment happens on the amino-acid level, after the alignment we recover the original positions with the `offsetalignment` module within the `search` workflow.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/570#issuecomment-1173282206:236,recover,recover,236,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/570#issuecomment-1173282206,1,['recover'],['recover']
Safety,"The trap is likely the sequence identity estimation (see https://github.com/soedinglab/MMseqs2/wiki#how-does-mmseqs2-compute-the-sequence-identity). Adding `-a` or `--alignment-mode 3` fixes the issue. `easy-search` better detects when exact sequence identity is required, `search` does the sequence identity estimation by default and try to detect it.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/842#issuecomment-2093919240:223,detect,detects,223,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/842#issuecomment-2093919240,2,['detect'],"['detect', 'detects']"
Safety,These are my commands. ```; mmseqs createdb all.fasta all.mmseq; mmseqs linclust all.mmseq all.cluster tmpDir --threads 20 -e 1e-6 --min-seq-id 0.8 --coverage 0.8; mmseqs createtsv all.mmseq all.mmseq all.cluster all.cluster.tsv; mmseqs result2repseq all.mmseq all.cluster all.representatives; mmseqs result2flat all.mmseq all.mmseq all.representatives all.representatives.fasta --use-fasta-header; ```. I select set of clusters using `all.cluster.tsv` and the point is to recover only the clusters that i want.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/247#issuecomment-559394438:473,recover,recover,473,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/247#issuecomment-559394438,1,['recover'],['recover']
Safety,This is not a bug but a feature. I always want to write this. We do not merge intermediate files anymore to safe IO time. We internally handle the indexing of this multiple files. A file can be empty if a thread did not write any result e.g. this happens if the input database was very small or no homologous sequences was found.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/191#issuecomment-484998016:108,safe,safe,108,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/191#issuecomment-484998016,1,['safe'],['safe']
Safety,Trying out NEWMAPDB (soft link) in the following format; `mmseqs createtsv NEWMAPDB NEWMAPDB NEWCLUST NEWCLUST.tsv`. I receive the following error:; Start writing file to NEWCLUST_clu.tsv; terminate called after throwing an instance of 'std::logic_error'; what(): basic_string::_S_construct null not valid; Aborted,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/103#issuecomment-404861986:307,Abort,Aborted,307,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/103#issuecomment-404861986,1,['Abort'],['Aborted']
Safety,"UPDATE: Index is huge:. ```; total 3.8T; -rwxrwx--- 1 guelou01 nogroup 447G Aug 18 19:33 NCBI_ALL_DB; -rwxrwx--- 1 guelou01 nogroup 4 Aug 18 19:34 NCBI_ALL_DB.dbtype; -rwxrwx--- 1 guelou01 nogroup 954M Aug 18 18:11 NCBI_ALL_DB_h; -rwxrwx--- 1 guelou01 nogroup 4 Aug 18 18:11 NCBI_ALL_DB_h.dbtype; -rwxrwx--- 1 guelou01 nogroup 195M Aug 18 19:34 NCBI_ALL_DB_h.index; -rwxrwx--- 1 guelou01 nogroup 80K Sep 14 14:31 NCBI_ALL_DB.idx.0; -rwxrwx--- 1 guelou01 nogroup 895G Sep 14 14:31 NCBI_ALL_DB.idx.1; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.2; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.3; -rwxrwx--- 1 guelou01 nogroup 623G Sep 14 14:31 NCBI_ALL_DB.idx.4; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.5; -rwxrwx--- 1 guelou01 nogroup 622G Sep 14 14:31 NCBI_ALL_DB.idx.6; -rwxrwx--- 1 guelou01 nogroup 4 Sep 14 14:31 NCBI_ALL_DB.idx.dbtype; -rwxrwx--- 1 guelou01 nogroup 1.1K Sep 14 14:31 NCBI_ALL_DB.idx.index; -rwxrwx--- 1 guelou01 nogroup 236M Aug 18 19:34 NCBI_ALL_DB.index; -rwxrwx--- 1 guelou01 nogroup 257M Aug 18 19:34 NCBI_ALL_DB.lookup; -rwxrwx--- 1 guelou01 nogroup 17 Aug 18 18:10 NCBI_ALL_DB.source; ```; And when starting the search the following message is confusing:; ```; Process needs more than 641G main memory.; Increase the size of --split or set it to 0 to automatically optimize target database split.; Computed index is too large. Avoid using the index.; ```; Adding `--split X` does not have any effect, but does not cause any error. The search now runs for several days with a low CPU usage, only few threads on `idx` files.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1731850063:1417,Avoid,Avoid,1417,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1731850063,1,['Avoid'],['Avoid']
Safety,We do have templates already implemented. I guess it wouldn’t be too hard to avoid the extra 6 byte.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/873#issuecomment-2314224992:77,avoid,avoid,77,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/873#issuecomment-2314224992,1,['avoid'],['avoid']
Safety,"What exactly do you need? The MSA or the sequence detected in the uniprot? For the second you can just use the `mmseqs convertalis queryDB db/uniprot resultDB resultDB.m8 --format-output query,target,tseq` here the last value should be the detected target sequence from the uniprot.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/590#issuecomment-1277811370:50,detect,detected,50,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/590#issuecomment-1277811370,2,['detect'],['detected']
Safety,"When I got to run this job using mpirun I got this error: . [cpu-23-1:104192] *** Process received signal ***; [cpu-23-1:104192] Signal: Bus error (7); [cpu-23-1:104192] Signal code: Non-existant physical address (2); [cpu-23-1:104192] Failing at address: 0x148bd2954aee; [cpu-23-1:104230] *** Process received signal ***; [cpu-23-1:104230] Signal: Bus error (7); [cpu-23-1:104230] Signal code: Non-existant physical address (2); [cpu-23-1:104230] Failing at address: 0x14758c03a9e9; [cpu-23-1:104233] *** Process received signal ***; [cpu-23-1:104233] Signal: Bus error (7); [cpu-23-1:104233] Signal code: Non-existant physical address (2); [cpu-23-1:104233] Failing at address: 0x151209f6d9c4; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun noticed that process rank 89 with PID 0 on node cpu-23-1 exited on signal 7 (Bus error).; --------------------------------------------------------------------------. And this one a couple more times:. --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; slurmstepd: error: *** JOB 1369194 ON cpu-25-49 CANCELLED AT 2021-05-17T19:07:03 DUE TO NODE FAILURE, SEE SLURMCTLD LOG FOR DETAILS ***; --------------------------------------------------------------------------; mpirun noticed that process rank 65 with PID 0 on node cpu-25-49 exited on signal 9 (Killed).; --------------------------------------------------------------------------. Now I'm trying to run the job using the script you also include in your manual . ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604:888,abort,aborted,888,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604,1,['abort'],['aborted']
Safety,"With the database you sent, by sampling 100 sequences at random from my gene catalog i cannot obtain the taxonomy. . If I do `mmseqs taxonomy gtdb_54kDB gtdb_54kDB /tmp/tax /tmp/tmp ` it doesn't throw an error at all. . But if I take this [subsetDB.zip](https://github.com/soedinglab/MMseqs2/files/4019604/subsetDB.zip) of my query FASTA and run a taxonomic analysis with:. ```; mmseqs taxonomy --search-type 1 --threads 2 \; --lca-ranks species:genus:family:order:class:phylum:superkingdom \; subsetDB \; gtdb_54kDB taxresdb /tmp/; ```. I get a `terminate called recursively` error. . Can you run it properly? Sorry for the waste of time. . For the DB building I did the typical act of not saving properly the steps. I try to replicate it tomorrow and I send it right away. But basically I had obtained the names.dmp and nodes.dmp and from the main fasta having all the predicted coding sequences with the names as `>{orf}_{genomeid}` I generated the mapping file.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570605791:871,predict,predicted,871,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570605791,1,['predict'],['predicted']
Safety,XX object lib/alp/CMakeFiles/alp.dir/sls_alp_sim.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_pvalues.cpp.o; [ 4%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogproblim.cpp.o; [ 4%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alignment_evaluer.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp_regression.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_localmaxstatutil.cpp.o; [ 6%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_basic.cpp.o; [ 6%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp_data.cpp.o; [ 7%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_ioutil.cpp.o; [ 7%] Built target alp; Scanning dependencies of target ksw2; make[2]: Warning: File 'lib/ksw2/CMakeFiles/ksw2.dir/depend.make' has modification time 0.00049 s in the future; [ 7%] Building CXX object lib/ksw2/CMakeFiles/ksw2.dir/ksw2_extz2_sse.cpp.o; make[2]: warning: Clock skew detected. Your build may be incomplete.; [ 7%] Built target ksw2; Scanning dependencies of target generated; [ 8%] Generating ../generated/easysearch.sh.h; [ 8%] Generating ../generated/easycluster.sh.h; [ 9%] Generating ../generated/blastp.sh.h; [ 9%] Generating ../generated/blastpgp.sh.h; [ 9%] Generating ../generated/map.sh.h; [ 10%] Generating ../generated/linclust.sh.h; [ 10%] Generating ../generated/clustering.sh.h; [ 11%] Generating ../generated/cascaded_clustering.sh.h; [ 11%] Generating ../generated/update_clustering.sh.h; [ 11%] Generating ../generated/searchtargetprofile.sh.h; [ 12%] Generating ../generated/createindex.sh.h; [ 12%] Generating ../generated/translated_search.sh.h; [ 13%] Generating ../generated/taxonomy.sh.h; [ 13%] Generating ../generated/multihitdb.sh.h; [ 14%] Generating ../generated/multihitsearch.sh.h; [ 14%] Generating ../generated/summarizeresultsbyset.sh.h; [ 14%] Generating ../generated/nucleotide.out.h; [ 15%] Generating ../generated/blosu,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:4527,detect,detected,4527,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,1,['detect'],['detected']
Safety,"Ya, sure. We were comparing the results from MMSeqs to BLASTP. The query sequences were coming from a cnidarian, and while BLAST was consistently returning Hydra sequences as the top matches (as expected), in many cases these Hydra sequences were not being returned at all by MMSeqs. It was still finding a bunch of high quality matches, but not the predicted 'best hits'. I though it might have something to do with the indexing step. But that was just a guess, because I have only been messing around with MMSeqs for the past few days. Repeatedly recreating the database from scratch didn't seem to make a difference.; The GitHub version that I compiled, on the other hand, returned matches this morning much more in line with what I would expect. The top hits jive with what BLAST is returning. I'll have our student do a more thorough comparison, but superficially it looks great.; And fast! Once the index was in place, I don't think it took 20 minutes to query NR with 86K sequences. The same set, split across 50 blastp jobs, 2 cores each, has been running for over two days already.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278688912:350,predict,predicted,350,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278688912,1,['predict'],['predicted']
Safety,You can not use the fasta header identifier. The `createsubdb` uses the internal numeric identifer given by `createdb`. ; I think it would be a great if MMseqs2 could support reciprocal best hit searches. Would you be willing to share you script? Here is the way I would script it. mmseqs search seqDbA seqDbB alnRes tmp ; # extract top hit; mmseqs filterdb alnRes alnResFilter --extract-lines 1; # transpose the result A->B changes to B->A; mmseqs swapdb alnResFilter alnResFilterSwaped ; # extract subset of detected sequences from seqDbB; mmseqs createsubdb alnResFilterSwaped.index seqDbB seqDbBSubdb ; mmseqs createsubdb alnResFilterSwaped.index seqDbB_h seqDbBSubdb_h; # perform second search ; mmseqs search seqDbBSubdb seqDbA alnRes tmp ; ... TODO check if detected from search A -> B and B-> A are the same,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462116242:510,detect,detected,510,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462116242,2,['detect'],['detected']
Safety,You set very high thresholds for coverage and sequence identity. Additional sensitivity in the clustering won't be able to combine many sequences due to the thresholds anyway. Linclust has a problem with long sequences where comparing one long sequence with another (short or long) sequence can return no common 20 (default `-m`) k-mers just by chance since one sequence is very long and it becomes unlikely to find the same k-mers. `--kmer-per-seq-scale` scales the number of `-m` k-mers up with sequence length to avoid this pitfall. Martin enable the parameter yesterday by default for nucleotide clustering.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-617174684:516,avoid,avoid,516,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-617174684,1,['avoid'],['avoid']
Safety,"You want the best hit even at the risk of a false positive best hit?; For that you should add a few more parameters:; ```; mmseqs search ... -e 100000 --comp-bias-corr 0 --mask 0; ```. At this point you might want to use coverage (`-c`) or `--min-aln-len` to filter the results, since you will also get super short hits.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-591741005:34,risk,risk,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-591741005,1,['risk'],['risk']
Safety,"_0 /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax/06/TMP/14652724320229658153/tmp_hsp1/11598483508011826746/profile_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out -e 1e-05 --mask-profile 1 --e-profile 0.1 --comp-bias-corr 1 --wg 0 --allow-deletion 0 --filter-msa 1 --max-seq-id 0.9 --qid 0 --qsc -20 --cov 0 --diff 1000 --pca 0 --pcb 1.5 --db-load-mode 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --threads 8 --compressed 0 -v 3. Index version: 16; Generated by: 13.45111; ScoreMatrix: VTML80.out; Query database size: 1075 type: Aminoacid; Target database size: 41195879 type: Aminoacid; [========================================Segmentation fault; Error: Create profile died; Error: First search died; ```. Note that sometimes when I re-run the command, I instead get the error:. ```; Index version: 16; Generated by: 13.45111; ScoreMatrix: VTML80.out; Query database size: 1075 type: Aminoacid; Target database size: 41195879 type: Aminoacid; [=======================================================]; free(): invalid next size (normal); Aborted; Error: Create profile died; Error: First search died; ```. System memory should not be the cause; I've got ~800 Gb free. . Maybe I'm missing a ""hidden"" input file (ie., one of the files associated with the main input files, which are generally no mentioned in any of the docs). The input files that are present:. * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db.dbtype; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db.index; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db_h; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db_h.dbtype; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_query/06/seqs_db_h.index; * /ebio/abt3_scratch/nyoungblut/LLCDS_126702996474/mmseqs_tax_target/mmseqs_tax.db; * /ebio/abt3_scratch",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-813242194:18062,Abort,Aborted,18062,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/432#issuecomment-813242194,1,['Abort'],['Aborted']
Safety,_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /galaxy/home/ksahlin/prefix/source/MMseqs2/build; [ksahlin@desmond build]$ make; Scanning dependencies of target cacode; make[2]: Warning: File 'lib/cacode/CMakeFiles/cacode.dir/depend.make' has modification time 0.00048 s in the future; [ 0%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lubksb.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/ludcmp.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/nrutil.cpp.o; make[2]: warning: Clock skew detected. Your build may be incomplete.; [ 1%] Built target cacode; Scanning dependencies of target alp; [ 1%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogprob.cpp.o; [ 1%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_random.cpp.o; [ 2%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogprobproto.cpp.o; [ 2%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_localmaxstat.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_localmaxstatmatrix.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp_sim.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_pvalues.cpp.o; [ 4%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogproblim.cpp.o; [ 4%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alignment_evaluer.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp_regression.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles/alp.dir/sls_alp.cpp.o; [ 5%] Building CXX object lib/alp/CMakeFiles,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:3006,detect,detected,3006,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,1,['detect'],['detected']
Safety,"`colabfold_search` as well as `colabfold_batch` supports batch complex predictions. Just provide a fasta or csv fle with your complex sequences. Following is a `example.fasta`:; ```; >1; PIAQIHILEGRSDEQKETLIREVSEAISRSLDAPLTSVRVIITEMAKGHFGIGGELASK:PIAQIHILEGRSDEQKETLIREVSEAISRSLDAPLTSVRVIITEMAKGHFGIGGELASK; >2 ; PIAQIHILEGRSDEQKE:PIAQIHILEGRSDEQKETLIREVSEAISRSLDAPLTSVRVIITEMAKGHFGIGGELASK; ```. You can search the databases, build the MSAs and predict the complex structures using the following commands: ; ```; colabfold_search example.fasta db msas; colabfold_batch msas predictions; ```; Please update your local MMseqs2 to the newest version (see [MMseqs2 repository](mmseqs.com)).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/521#issuecomment-1053599990:71,predict,predictions,71,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/521#issuecomment-1053599990,3,['predict'],"['predict', 'predictions']"
Safety,"ad 0x7f741ce08700 (LWP 184976)]; [New Thread 0x7f741c607700 (LWP 184977)]; [New Thread 0x7f741be06700 (LWP 184978)]; [New Thread 0x7f741b605700 (LWP 184979)]; [New Thread 0x7f741ae04700 (LWP 184980)]; [New Thread 0x7f741a603700 (LWP 184981)]; [New Thread 0x7f7419e02700 (LWP 184982)]; [New Thread 0x7f7419601700 (LWP 184983)]; [New Thread 0x7f7418e00700 (LWP 184984)]; [New Thread 0x7f74185ff700 (LWP 184985)]; [New Thread 0x7f7417dfe700 (LWP 184986)]; [New Thread 0x7f74175fd700 (LWP 184987)]; Computing offsets.; [=================================================================] 100.00% 15.11M 19m 14s 460ms ; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc. Thread 1 ""mmseqs"" received signal SIGABRT, Aborted.; __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; 51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.; (gdb) bt ; #0 __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51; #1 0x00007ffff7438921 in __GI_abort () at abort.c:79; #2 0x00007ffff7ef6892 in __gnu_cxx::__verbose_terminate_handler () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/vterminate.cc:95; #3 0x00007ffff7ef4f69 in __cxxabiv1::__terminate (handler=<optimized out>) at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:48; #4 0x00007ffff7ef4fab in std::terminate () at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc++-v3/libsupc++/eh_terminate.cc:58; #5 0x00007ffff7ef5194 in __cxxabiv1::__cxa_throw (obj=0x555555ae5950, tinfo=0x7ffff7fad300 <typeinfo for std::bad_alloc>, dest=0x7ffff7ef3c64 <std::bad_alloc::~bad_alloc()>); at /home/conda/feedstock_root/build_artifacts/ctng-compilers_1601682258120/work/.build/x86_64-conda-linux-gnu/src/gcc/libstdc+",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840:36148,abort,abort,36148,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-762394840,1,['abort'],['abort']
Safety,filter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3. Init data structures...; Compute score only.; Using 32 threads.; Calculation of Smith-Waterman alignments.; Time for merging files: 0 h 0 m 0 s. All sequences processed. 6287 alignments calculated.; 6203 sequence pairs passed the thresholds (0.986639 of overall calculated).; 25.2154 hits per query sequence.; Time for alignments calculation: 0 h 0 m 1s; - checkReturnCode 'Alignment died'; - '[' 0 -ne 0 ']'; - '[' 4 -gt 4 ']'; - NEXTINPUT=/home/zcx/Program/MMseqs/2.0/test/tmp/input_step4; - '[' 4 -lt 4 ']'; - let SENS=SENS+SENS_STEP_SIZE; - INPUT=/home/zcx/Program/MMseqs/2.0/test/tmp/input_step4; - '[' 5 -le 4 ']'; - mv -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 resultDB; - mv -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:5180,Detect,Detect,5180,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['Detect'],['Detect']
Safety,"id 0.3 --comp-bias-corr 1 ${ALIGNMENT_COMMON}""; CLUSTER_FRAG_PAR=""--cluster-mode 2""; CLUSTER0_PAR=""--cluster-mode 2""; CLUSTER1_PAR=""--cluster-mode 0""; CLUSTER2_PAR=""--cluster-mode 0""; SEARCH_PAR=""$COMMON --profile --k-score 100""; CSTRANSLATE_PAR=""-x 0.3 -c 4 -A $HHLIB/data/cs219.lib -D $HHLIB/data/context_data.lib -I ca3m -f -b"". SEQUENCE_DB=""$OUTDIR/uniprot_db"". export OMP_PROC_BIND=false; mmseqs createdb ""$INPUT"" ""${SEQUENCE_DB}"". STEP=""_FRAG""; INPUT=""${SEQUENCE_DB}""; $RUNNER mmseqs prefilter ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ${PREFILTER_FRAG_PAR}; mmseqs rescorediagonal ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ""$TMPPATH/aln_step$STEP"" --min-seq-id 0.9 -c 0.95 --cov-mode 1; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_frag"" ${CLUSTER_FRAG_PAR}; awk '{ print $1 }' ""$TMPPATH/clu_frag.index"" > ""$TMPPATH/order_frag""; mmseqs createsubdb ""$TMPPATH/order_frag"" $INPUT ""$TMPPATH/input_step_redundancy"". # filter redundancy; INPUT=""$TMPPATH/input_step_redundancy""; mmseqs clusthash $INPUT ""$TMPPATH/aln_redundancy"" --min-seq-id 0.9; mmseqs cluster $INPUT ""$TMPPATH/aln_redundancy"" ""$TMPPATH/clu_redundancy"" ${CLUSTER_FRAG_PAR}; awk '{ print $1 }' ""$TMPPATH/clu_redundancy.index"" > ""$TMPPATH/order_redundancy""; mmseqs createsubdb ""$TMPPATH/order_redundancy"" $INPUT ""$TMPPATH/input_step0"". # go down to 90%; STEP=0; INPUT=""$TMPPATH/input_step0""; # Remove the fragments from the prefilter, in order not to recompute prefilter; mmseqs createsubdb ""$TMPPATH/order_redundancy"" ""$TMPPATH/pref_step_FRAG"" ""$TMPPATH/pref_step_FRAG_filtered""; mmseqs filterdb ""$TMPPATH/pref_step_FRAG_filtered"" ""$TMPPATH/pref_step$STEP"" --filter-file ""$TMPPATH/order_redundancy""; $RUNNER mmseqs align ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ""$TMPPATH/aln_step$STEP"" ${ALIGNMENT0_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER0_PAR}; awk '{ print $1 }' ""$TMPPATH/clu_step$STEP.index"" > ""$TMPPATH/order_step$STEP""; mmseqs createsubdb ""$TMPPATH/order_s",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:2407,redund,redundancy,2407,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['redund'],['redundancy']
Safety,"l the `clust` module which implements the actual clustering algorithm, not the whole `cluster` workflow with the searches etc:; ```; mmseqs cluster $INPUT ""$TMPPATH/aln_redundancy"" ""$TMPPATH/clu_redundancy"" ${CLUSTER_FRAG_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER0_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER1_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_uniclust50"" ""$TMPPATH/clu_uniclust50"" ${CLUSTER2_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_uniclust30"" ${CLUSTER2_PAR}; ```; should be . ```; mmseqs clust $INPUT ""$TMPPATH/aln_redundancy"" ""$TMPPATH/clu_redundancy"" ${CLUSTER_FRAG_PAR}; mmseqs clust $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER0_PAR}; mmseqs clust $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER1_PAR}; mmseqs clust $INPUT ""$TMPPATH/aln_uniclust50"" ""$TMPPATH/clu_uniclust50"" ${CLUSTER2_PAR}; mmseqs clust $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_uniclust30"" ${CLUSTER2_PAR}; ```. For a 70% clustering you can adapt the 50% clustering strategy:. ```; # cluster down to 70%; mmseqs filterdb ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/aln_uniclust70"" \; --filter-column 3 --filter-regex '(0\.[7-9][0-9]{2}|1\.000)'; mmseqs cluster $INPUT ""$TMPPATH/aln_uniclust70"" ""$TMPPATH/clu_uniclust70"" ${CLUSTER2_PAR}; mmseqs mergeclusters ""${SEQUENCE_DB}"" $OUTDIR/uniclust70_$RELEASE \; ""$TMPPATH/clu_frag"" ""$TMPPATH/clu_redundancy"" $TMPPATH/clu_step0 $TMPPATH/clu_step1 $TMPPATH/clu_uniclust70; ```. The idea here is to go directly from 90 to 30 to avoid any possible transitivity issues. In the MMseqs2 cascaded clustering you can get representative->member hits below the given thresholds after putting clusters from previous clustering steps together. You can reconstruct the 50 (and a 70) clustering from the 30% alignments, and that's what it does (it does it with a roundabout regex, because we didn't have expression filters back then).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1590461067:1809,avoid,avoid,1809,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1590461067,1,['avoid'],['avoid']
Safety,"ld_data/colabfold_envdb_202108_db outdir/res_env /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp -e inf --expansion-mode 0 --db-load-mode 1 --threads 4. mmseqs align outdir/tmp/env/latest/profile_1 /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp outdir/res_env_exp_realign --db-load-mode 1 -e 10 --max-accept 1000 --threads 4 --alt-ali 10 -a. # Filter environmental results; mmseqs filterresult queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign outdir/res_env_exp_realign_filter --db-load-mode 1 --qid 0 --qsc 0.8 --diff 0 --max-seq-id 1.0 --threads 4 --filter-min-enable 100. # Convert environmental results to MSA; mmseqs result2msa queryDB /datasets/UniprotKB/colabfold_data/colabfold_envdb_202108_db outdir/res_env_exp_realign_filter outdir/env.a3m --msa-format-mode 6 --db-load-mode 1 --threads 4 --filter-msa 1 --filter-min-enable 1000 --diff 256 --qid 0.0,0.2,0.4,0.6,0.8,1.0 --qsc 0 --max-seq-id 0.95. # Merge results; mmseqs mergedbs queryDB outdir/final.a3m outdir/uniref.a3m outdir/env.a3m. # Unpack results; mmseqs unpackdb outdir/final.a3m outdir --unpack-name-mode 0 --unpack-suffix .a3m; ```; As it stands, I am not converting from DB to a3m until after the filter (with diff =256) so maybe MSA sizes will be okay? Any thoughts?. What I changed from colabfold default, but plan to ""search"" over for MSA quality and run time: ; e_value (for search) -> 1e-4; max_seqs (for search) -> 25; max_accept (for alignment); diff -> (filter) 256. Thanks again. EDIT: Since I am doing an iterative search, would we expect an indexed and in memory target DB to speed up search? I am gathering no based on other conversations given that my use case is large batches and not single queries?. EDIT2: Re. the purpose - correct, I have no need to run structure prediction. The MSAs are going into MSATransformer, so there is no point for them to be extremely large or contain remote fragments.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326:3961,predict,prediction,3961,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/897#issuecomment-2429598326,1,['predict'],['prediction']
Safety,"ocally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; while True:; error_count = 0; try:; res = requests.get(f'{host_url}/ticket/{ID}', timeout=6.02); except requests.exceptions.Timeout:; logger.warning(""Timeout while fetching status from MSA server. Retrying...""); continue; except Exception as e:; error_count += 1; logger.warning(f""Error while fetching result from MSA server. Retrying... ({error_count}/5)""); logger.warning(f""Error: {e}""); time.sleep(5); if error_count > 5:; raise; continue; break; try:; out = res.json(); except ValueError:; logger.error(f""Server didn't reply with json: {res.text}""); out = {""status"":""ERROR""}; return out. test_pairing(); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:2205,timeout,timeout,2205,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,3,"['Timeout', 'timeout']","['Timeout', 'timeout']"
Safety,"ould I remove the whole github repo for a clean installation or is this compilation error something that was introduced in the commit?; See log below. ```; [ksahlin@desmond build]$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 4.9.2; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Source Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Project Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Compiler is GNU ; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Using CPU native flags for SSE optimization: -march=native; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.1 extensions, using flags: -march=native -msse4.1 -mfpmath=sse; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB work",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:583,Detect,Detecting,583,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,4,['Detect'],['Detecting']
Safety,"qs/test-nr-50m; ++ abspath tmp; ++ '[' -d tmp ']'; ++ cd tmp; ++ pwd; + TMP_PATH=/home/dabia/bench/mmseqs/tmp; + SENS=5; + '[' 5 -le 5 ']'; + notExists /home/dabia/bench/mmseqs/tmp/pref_5; + '[' '!' -f /home/dabia/bench/mmseqs/tmp/pref_5 ']'; + /ngs/software/mmseqs/mmseqs-MPI prefilter /home/dabia/bench/mmseqs/mmseq-testDB /junk/databases/mmseqs/test-nr-50m /home/dabia/bench/mmseqs/tmp/pref_5 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 -c 0 --comp-bias-corr 1 --diag-score 1 --mask 1 --min-ungapped-score 15 --spaced-kmer-mode 1 --threads 8 -v 3 -s 5; ```. It doesn't crash, but don't get any further. The process is using just 1 core.; Increasing --np to 4, results in 4 instances of mmseqs with 8 threads, that crashes with error:. ```; -------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code.. Per user-direction, the job has been aborted.; -------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[33336,1],0]; Exit code: 255; --------------------------------------------------------------------------. ```; And this is the core assignment:; ```; MCW rank 2 bound to socket 2[core 16[hwt 0-1]], socket 2[core 17[hwt 0-1]], socket 2[core 18[hwt 0-1]], socket 2[core 19[hwt 0-1]], socket 2[core 20[hwt 0-1]], socket 2[core 21[hwt 0-1]], socket 2[core 22[hwt 0-1]], socket 2[core 23[hwt 0-1]]: [../../../../../../../..][../../../../../../../..][BB/BB/BB/BB/BB/BB/BB/BB][../../../../../../../..]; MCW rank 3 bound to socket 3[core 24[hwt 0-1]], socket 3[core 25[hwt 0-1]], socket 3[core 26[hwt 0-1]], socket 3[core 27[hwt 0-1]], socket 3[core 28[hwt 0-1]], socket 3[core 29[hwt 0-1]]",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:5518,abort,aborted,5518,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,1,['abort'],['aborted']
Safety,rated/blosum75.out.h; [ 19%] Generating ../generated/blosum80.out.h; [ 20%] Generating ../generated/blosum85.out.h; [ 20%] Generating ../generated/blosum90.out.h; [ 21%] Generating ../generated/blosum95.out.h; [ 21%] Generating ../generated/blosum100.out.h; [ 21%] Generating ../generated/CovSeqidQscPercMinDiag.out.h; [ 22%] Generating ../generated/CovSeqidQscPercMinDiagTargetCov.out.h; [ 22%] Generating ../generated/ExpOpt3_8_polished.cs32.lib.h; [ 23%] Generating ../generated/Library255_may17.lib.h; [ 23%] Generating ../generated/K4000.crf.h; [ 23%] Generating ../generated/libPure_blosum62_255.lib.h; [ 24%] Generating ../generated/libPure_blosum62_32.lib.h; [ 24%] Built target generated; Scanning dependencies of target version; make[2]: Warning: File 'src/version/CMakeFiles/version.dir/depend.make' has modification time 0.00026 s in the future; [ 24%] Building CXX object src/version/CMakeFiles/version.dir/Version.cpp.o; [ 25%] Linking CXX static library libversion.a; make[2]: warning: Clock skew detected. Your build may be incomplete.; [ 25%] Built target version; Scanning dependencies of target mmseqs-framework; [ 26%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/Alignment.cpp.o; [ 26%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/CompressedA3M.cpp.o; [ 26%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/Main.cpp.o; [ 27%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/Matcher.cpp.o; [ 27%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/MsaFilter.cpp.o; [ 28%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/MultipleAlignment.cpp.o; [ 28%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/PSSMCalculator.cpp.o; [ 28%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/StripedSmithWaterman.cpp.o; [ 29%] Building CXX object src/CMakeFiles/mmseqs-framework.dir/alignment/BandedNucleotideAligner.cpp.o; [ 29%] Building CXX obje,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:6987,detect,detected,6987,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,1,['detect'],['detected']
Safety,s than the 64GB RAM of the machine I'm indexing on). But this indexing fails with the second output provided below? In fact the indexing fails also without the --split option (see third output below). All tests have been carried out using a compiled mmseqs cloned from a fresh git clone. The work directory has 76TB of free space. I'm really at a loss as to what the `Could not write to data file /` error message might indicate?; - Searching with the oversized index:. ```; -bash-4.2$ mmseqs search subseq_Mms.1 uniref90.mms toto.mms tmp/ --max-seqs 100000 --threads 8 -a true -e 1E-10 -s 1 ; Program call:; subseq_Mms.1 uniref90.mms toto.mms tmp/ --max-seqs 100000 --threads 8 -a true -e 1E-10 -s 1 . MMseqs Version: c5615b34c686b1cf0f200670be8bc6cba76d90f9; Sub Matrix blosum62.out; Add backtrace true; Alignment mode 0; E-value threshold 1e-10; Seq. Id Threshold 0; Coverage threshold 0; Max. sequence length 32000; Max. results per query 100000; Compositional bias 1; Profile false; Realign hit false; Max Reject 2147483647; Detect fragments false; Include identical Seq. Id. false; Threads 8; Verbosity 3; Sensitivity 1; K-mer size 0; K-score 2147483647; Alphabet size 21; Offset result 0; Split DB 0; Split mode 2; Diagonal Scoring 1; Minimum Diagonal score 15; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; Number search iterations 1; Start sensitivity 4; sensitivity step size 1; Sets the MPI runner . /home/hingamp.p; /home/hingamp.p; Program call:; subseq_Mms.1 uniref90.mms tmp/pref_1 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 100000 --offset-result 0 --split 0 --split-mode 2 --comp-bias-corr 1 --diag-score 1 --min-ungapped-score 15 --spaced-kmer-mode 1 --threads 8 -v 3 -s 1 . MMseqs Version: c5615b34c686b1cf0f2,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349:1763,Detect,Detect,1763,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349,1,['Detect'],['Detect']
Safety,"smatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen; Translation table 	1; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Database output 	false; Preload mode 	0; Search type 	3; Threads 	16; Compressed 	0; Verbosity 	3. [New Thread 0x155554aca700 (LWP 28907)]; [New Thread 0x1555548c9700 (LWP 28908)]; [New Thread 0x1555546c8700 (LWP 28909)]; [New Thread 0x1554ea593700 (LWP 28921)]; [New Thread 0x1554ea392700 (LWP 28922)]; [New Thread 0x1554ea191700 (LWP 28923)]; [New Thread 0x1554e9f90700 (LWP 28924)]; [New Thread 0x15549ceb2700 (LWP 28925)]; [New Thread 0x15549ccb1700 (LWP 28926)]; [New Thread 0x15549cab0700 (LWP 28927)]; [New Thread 0x15549c8af700 (LWP 28928)]; [New Thread 0x15549c6ae700 (LWP 28929)]; [New Thread 0x1554996f9700 (LWP 28930)]; [New Thread 0x1554994f8700 (LWP 28931)]; [New Thread 0x1554992f7700 (LWP 28932)]; terminate called after throwing an instance of 'std::bad_alloc' ] 3.00% 15.44K eta 2h 43m 11s ; what(): std::bad_alloc. Thread 14 ""mmseqs"" received signal SIGABRT, Aborted.; [Switching to Thread 0x1554996f9700 (LWP 28930)]; 0x000000000086fbd7 in raise (); (gdb) bt; #0 0x000000000086fbd7 in raise (); #1 0x000000000086fdf1 in abort (); #2 0x00000000007d3e15 in __gnu_cxx::__verbose_terminate_handler() (); #3 0x000000000073c0b6 in __cxxabiv1::__terminate(void (*)()) (); #4 0x000000000073c101 in std::terminate() (); #5 0x000000000073a2f4 in __cxa_throw (); #6 0x000000000073c28c in operator new(unsigned long) (); #7 0x000000000078720a in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_mutate(unsigned long, unsigned long, char const*, unsigned long) (); #8 0x00000000007887eb in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::_M_append(char const*, unsigned long) (); #9 0x0000000000550fc6 in std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::append (__str=..., this=0x1554996f8520) at /usr/include/c++/7/bits/basic_string.h:1212; #10 convert",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628:3630,Abort,Aborted,3630,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878350628,1,['Abort'],['Aborted']
Safety,"step_FRAG_filtered""; mmseqs filterdb ""$TMPPATH/pref_step_FRAG_filtered"" ""$TMPPATH/pref_step$STEP"" --filter-file ""$TMPPATH/order_redundancy""; $RUNNER mmseqs align ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ""$TMPPATH/aln_step$STEP"" ${ALIGNMENT0_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER0_PAR}; awk '{ print $1 }' ""$TMPPATH/clu_step$STEP.index"" > ""$TMPPATH/order_step$STEP""; mmseqs createsubdb ""$TMPPATH/order_step$STEP"" $INPUT ""$TMPPATH/input_step1"". # go down to 90% (this step is needed to create big clusters); STEP=1; INPUT=""$TMPPATH/input_step1""; $RUNNER mmseqs prefilter ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ${PREFILTER1_PAR}; $RUNNER mmseqs align ""$INPUT"" ""$INPUT"" ""$TMPPATH/pref_step$STEP"" ""$TMPPATH/aln_step$STEP"" ${ALIGNMENT1_PAR}; mmseqs cluster $INPUT ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/clu_step$STEP"" ${CLUSTER1_PAR}. # create database unicluster 90% (we need to merge redundancy, step_0 and step_1); mmseqs mergeclusters ""${SEQUENCE_DB}"" $OUTDIR/uniclust90_$RELEASE \; ""$TMPPATH/clu_frag"" ""$TMPPATH/clu_redundancy"" $TMPPATH/clu_step0 $TMPPATH/clu_step1. awk '{ print $1 }' ""$TMPPATH/clu_step$STEP.index"" > ""$TMPPATH/order_step$STEP""; mmseqs createsubdb ""$TMPPATH/order_step$STEP"" $INPUT ""$TMPPATH/input_step2"". # now we cluster down to 30% sequence id to produce a 30% and 50% clustering; STEP=2; INPUT=$TMPPATH/input_step2; $RUNNER mmseqs prefilter $INPUT $INPUT ""$TMPPATH/pref_step$STEP"" ${PREFILTER2_PAR}; $RUNNER mmseqs align $INPUT $INPUT ""$TMPPATH/pref_step$STEP"" ""$TMPPATH/aln_step$STEP"" ${ALIGNMENT2_PAR}. # cluster down to 50%; mmseqs filterdb ""$TMPPATH/aln_step$STEP"" ""$TMPPATH/aln_uniclust50"" \; --filter-column 3 --filter-regex '(0\.[5-9][0-9]{2}|1\.000)'; mmseqs cluster $INPUT ""$TMPPATH/aln_uniclust50"" ""$TMPPATH/clu_uniclust50"" ${CLUSTER2_PAR}; mmseqs mergeclusters ""${SEQUENCE_DB}"" $OUTDIR/uniclust50_$RELEASE \; ""$TMPPATH/clu_frag"" ""$TMPPATH/clu_redundancy"" $TMPPATH/clu_step0 $TMPPATH/clu_step1 $TMPPATH/clu_uniclust5",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:3940,redund,redundancy,3940,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['redund'],['redundancy']
Safety,"system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; while True:; error_count = 0; try:; res = requests.get(f'{host_url}/ticket/{ID}', timeout=6.02); except requests.exceptions.Timeout:; logger.warning(""Timeout while fetching status from MSA server. Retrying...""); continue; except Exception as e:; error_count += 1; logger.warning(f""Error while fetching result from MSA server. Retrying... ({error_count}/5)""); logger.warning(f""Error: {e}""); time.sleep(5); if error_count > 5:; raise; continue; break; try:; out = res.json(); except ValueError:; logger",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1654,timeout,timeout,1654,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,1,['timeout'],['timeout']
Safety,"thanks @genomewalker,; So, once we have identified the names of the clusters to extract, what would be a safe way to get the numeric ids of those clusters so we can used them in createsubdb?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/27#issuecomment-297678822:105,safe,safe,105,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/27#issuecomment-297678822,1,['safe'],['safe']
Safety,trying to remove any hidden characters from the msa may not be solving the problem as it still cannot be used with `reformat.pl` or `addss.pl` (no secondary structure prediction after addss.pl),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/846#issuecomment-2130089532:167,predict,prediction,167,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/846#issuecomment-2130089532,1,['predict'],['prediction']
Safety,"use a blunt-force patch. A more finessed approach like -DMMSEQS_ARCH can be fragile. Suppose you decide to change the name of the variable between now and the next release. This patch is then silently rendered inert. If I overlook the change, which is easy to do, the builds introduce agressive optimizations into the binary package, causing illegal instruction dumps for users with lower-end hardware than the build cluster. The static patch, on the otherhand, will break on a variable name chnage so I'll be alerted that it needs attention. For wget and curl, are you referring to createtaxdb.sh and databases.sh? Are these supposed to be installed? The cmake build system only installs mmseqs and bash-conmpletion.sh. Rather than add another dependency, I would add FreeBSD's native fetch command as the final fallback option as follows:. ```; --- data/workflow/databases.sh.orig 2021-06-25 01:34:08 UTC; +++ data/workflow/databases.sh; @@ -27,6 +27,8 @@ STRATEGY=""""; if hasCommand aria2c; then STRATEGY=""$STRATEGY ARIA""; fi; if hasCommand curl; then STRATEGY=""$STRATEGY CURL""; fi; if hasCommand wget; then STRATEGY=""$STRATEGY WGET""; fi; +# Part of FreeBSD base, need not be installed separately; +if hasCommand fetch; then STRATEGY=""$STRATEGY FETCH""; fi; if [ ""$STRATEGY"" = """" ]; then; fail ""No download tool found in PATH. Please install aria2c, curl or wget.""; fi; @@ -47,6 +49,9 @@ downloadFile() {; ;;; WGET); wget -O ""$OUTPUT"" ""$URL"" && return 0; + ;;; + FETCH); + fetch -o ""$OUTPUT"" ""$URL"" && return 0; ;;; esac; done; ```; Most bioinformaticians will have curl and/or wget installed anyway (both are included in the biostar-tools metapoirt), so it won't come into play, but we try to minimize unnecessary requirements. I haven't been able to find a specify CPU feature requirement for FreeBSD, but I think SSE2 is safe to assume for amd64, but I also added a pkg-message suggesting an optimized build from source. How much performance gain do you typically see from SSE4 or AVX?. Thanks...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555:2033,safe,safe,2033,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868449555,1,['safe'],['safe']
Safety,"xists /home/dabia/bench/mmseqs/tmp/pref_5; + '[' '!' -f /home/dabia/bench/mmseqs/tmp/pref_5 ']'; + /ngs/software/mmseqs/mmseqs-MPI prefilter /home/dabia/bench/mmseqs/mmseq-testDB /junk/databases/mmseqs/test-nr-50m /home/dabia/bench/mmseqs/tmp/pref_5 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 -c 0 --comp-bias-corr 1 --diag-score 1 --mask 1 --min-ungapped-score 15 --spaced-kmer-mode 1 --threads 8 -v 3 -s 5; ```. It doesn't crash, but don't get any further. The process is using just 1 core.; Increasing --np to 4, results in 4 instances of mmseqs with 8 threads, that crashes with error:. ```; -------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code.. Per user-direction, the job has been aborted.; -------------------------------------------------------; --------------------------------------------------------------------------; mpirun detected that one or more processes exited with non-zero status, thus causing; the job to be terminated. The first process to do so was:. Process name: [[33336,1],0]; Exit code: 255; --------------------------------------------------------------------------. ```; And this is the core assignment:; ```; MCW rank 2 bound to socket 2[core 16[hwt 0-1]], socket 2[core 17[hwt 0-1]], socket 2[core 18[hwt 0-1]], socket 2[core 19[hwt 0-1]], socket 2[core 20[hwt 0-1]], socket 2[core 21[hwt 0-1]], socket 2[core 22[hwt 0-1]], socket 2[core 23[hwt 0-1]]: [../../../../../../../..][../../../../../../../..][BB/BB/BB/BB/BB/BB/BB/BB][../../../../../../../..]; MCW rank 3 bound to socket 3[core 24[hwt 0-1]], socket 3[core 25[hwt 0-1]], socket 3[core 26[hwt 0-1]], socket 3[core 27[hwt 0-1]], socket 3[core 28[hwt 0-1]], socket 3[core 29[hwt 0-1]], socket 3[core 30[hwt 0-1]], socket 3[core 31[hwt 0-1]]: [../../../../../../../..][../../../../../../../..][../../../../../../../..][BB/BB/BB/BB/",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:5668,detect,detected,5668,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,1,['detect'],['detected']
Safety,y4mvibdqrlghr/bin/c++; -- Check for working CXX compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Source Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Project Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK -,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:834,Detect,Detecting,834,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,2,['Detect'],['Detecting']
Security," 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/clu/ folder does not exist or is not a directory.; Created dir /tmp/clu/; Set cluster settings automatic to s=6; Set cluster mode SET COVER.; Set cluster iterations to 3; Program call:; panproteome.db /tmp/clu//9559457551393989073/clu_redundancy /tmp/clu//9559457551393989073/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 36 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	36; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:21952,hash,hash-shift,21952,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash-shift']
Security," --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 136 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 136 0s 41ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 149ms; rescorediagonal artificial2/DB_artificial artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref tmp//7897776346521331899/linclust/17269245559208916342/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [=============================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:3997,hash,hash-shift,3997,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['hash'],['hash-shift']
Security," 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 303 0s 51ms; Sort kmer 0h 0m 0s 3ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 182ms; rescorediagonal DB_in/fa",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:3243,hash,hash-shift,3243,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['hash'],['hash-shift']
Security," 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 -c 0.8 --cov-mode 0 --max-seq-len 32000 --max-seqs 20 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 20 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --rescore-mode 0 . MMseqs Version: 	GITDIR-NOTFOUND; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	32000; Max. results per query 	20; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	20; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db tmp/425628692068579862/linclust/13628666274102407548/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 20 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 32000 --hash-shift 5 --split-memory-limit 0 --threads 10 -v 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	20; Mask Residues 	0; Coverage Mode 	0; K-mer size 	0; Coverage threshold 	0.8; Max. sequence length	32000; Shift hash 	5; Split Memory Limit 	0; Threads 	10; Verbosity 	3. Alphabet size: 13 k-mer size: 10; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X ; Checking requirements; Needed memory (7",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:94790,hash,hash,94790,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['hash'],['hash']
Security,")>(begin=0x00000008012ffc40, end=0x00000008013647d0, comp=(mmseqs`DBReader<unsigned int>::Index::compareByOffset(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&) at DBReader.h:84), num_threads=4)(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&), int) at ips4o.hpp:128:9; frame #18: 0x000000000040d66a mmseqs`void ips4o::parallel::sort<DBReader<unsigned int>::Index*, bool (*)(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&)>(begin=0x00000008012ffc40, end=0x00000008013647d0, comp=(mmseqs`DBReader<unsigned int>::Index::compareByOffset(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&) at DBReader.h:84))(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&)) at ips4o.hpp:137:5; frame #19: 0x00000000003ef124 mmseqs`DBReader<unsigned int>::sortIndex(this=0x00007fffffffc718, isSortedById=true) at DBReader.cpp:403:9; frame #20: 0x000000000044adae mmseqs`DBReader<unsigned int>::open(this=0x00007fffffffc718, accessType=8) at DBReader.cpp:185:9; frame #21: 0x000000000059f427 mmseqs`doswap(par=0x000000080121f1c0, isGeneralMode=true) at swapresults.cpp:49:22; frame #22: 0x00000000005a1f2e mmseqs`swapdb(argc=8, argv=0x00007fffffffd2c8, command=0x0000000801269b00) at swapresults.cpp:353:12; frame #23: 0x000000000038a19f mmseqs`runCommand(p=0x0000000801269b00, argc=8, argv=0x00007fffffffd2c8) at Application.cpp:38:18; frame #24: 0x000000000038b416 mmseqs`main(argc=10, argv=0x00007fffffffd2b8) at Application.cpp:196:9; frame #25: 0x0000000000389280 mmseqs`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1_c.c:75:7; (lldb) ; * thread #1, name = 'mmseqs'; * frame #0: 0x0000000800bea528 libc.so.7`__sys__umtx_op + 8; frame #1: 0x0000000000803044 mmseqs`__atomic_fetch_sub_16 [inlined] lock(l=0x000000000080c2e0) at atomic.c:72:5; frame #2: 0x000000000080301e mmseqs`__atomic_fetch_sub_16(ptr=0x00000008013723b0, val=1180591620717411303424, model=<unavailable>) a",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870068758:7989,access,accessType,7989,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870068758,1,['access'],['accessType']
Security,"--alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	10; Verbosity 	3. Database type: Aminoacid; V ->",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:3212,hash,hash,3212,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"-ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 303 0s 51ms; Sort kmer 0h 0m 0s 3ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 182ms; rescorediagonal DB_in/fasta_in_db_HC DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref tmpfiles//13298481167543164943/linclust/10229649346622198404/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [===================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:3725,hash,hash-shift,3725,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['hash'],['hash-shift']
Security,"-threads 8 /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/ccs/ENSEMBL/1000000/ccs.fasta /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_out /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Cluster mode 0; Max depth connected component 1000; Similarity type 2; Threads 8; Verbosity 3; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 3; E-value threshold 0.001; Seq. Id Threshold 0; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0.8; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; No preload false; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Alphabet size 21; Kmer per sequence 21; Mask Residues 1; K-mer size 0; Shift hash 5; Split Memory Limit 0; Include only extendable false; Skip sequence with n repeating k-mers 0; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Remove Temporary Files false; Sets the MPI runner. Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/ccs/ENSEMBL/1000000/ccs.fasta /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input --max-seq-len 65535 --dont-split-seq-by-len --dont-shuffle --id-offset 0 -v 3. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Max. sequence length 65535; Split Seq. by len false; Do not shuffle input database false; Offset of numeric ids 0; Verbosity 3. ...................................................................................................Time for merging files: 0h 0m 1s 611ms; Time for merging files: 0h 0m 1s 458ms; Time for processing: 0h 1m 30s ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120:1330,hash,hash,1330,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120,1,['hash'],['hash']
Security,".001; Seq. Id Threshold 	0.8; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	20; Shift hash 	5; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db tmp/425628692068579862/clu_redundancy tmp/425628692068579862/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 -c 0.8 --cov-mode 0 --max-seq-len 32000 --max-seqs 20 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 20 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --rescore-mode 0 . MMseqs Version: 	GITDIR-NOTFOUND; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	32000; Max. results per query 	20; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	20; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db tmp/425628692068579862/linclust/1362866627410240754",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:94098,hash,hash-shift,94098,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['hash'],['hash-shift']
Security,".5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 36 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	36; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; .............; Time for fill: 0 h 0 m 2s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 3s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 2s; Time for fill: 0 h 0 m 0s; Time for merging files: 0 h 0 m 0 s; Time for processing: 0 h 0 m 9s; Rescore diagonals.; Program call:; panproteome.db panproteome.db /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref_rescore1 --rescore-mode 0 --sub-mat blosum62.out -c 0.8 -e 0.001 --cov-mod",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:23583,hash,hash,23583,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	36; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 36 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	36; Verbosity 	3. Database type: Aminoacid; V -> I",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:22718,hash,hash,22718,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"00; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	32000; Max. results per query 	20; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	20; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db tmp/425628692068579862/linclust/13628666274102407548/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 20 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 32000 --hash-shift 5 --split-memory-limit 0 --threads 10 -v 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	20; Mask Residues 	0; Coverage Mode 	0; K-mer size 	0; Coverage threshold 	0.8; Max. sequence length	32000; Shift hash 	5; Split Memory Limit 	0; Threads 	10; Verbosity 	3. Alphabet size: 13 k-mer size: 10; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X ; Checking requirements; Needed memory (795683200 byte) of total memory (365681560780 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; ...................................................................................................	2 Mio. sequences processed; ................................................; Time for fill: 0 h 0 m 14s; Done.; Sort kmer ... Done.; Time ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:95236,hash,hash-shift,95236,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['hash'],['hash-shift']
Security,"05.1 NZ_CP009512.1_8; RS_GCF_000970205.1 NZ_CP009512.1_9; RS_GCF_000970205.1 NZ_CP009512.1_10; ```. You can then do a JOIN operation between the `gtdb.lookup` table, the `genome_orf_mapping.tsv` table, and the `gtdb.source` table to link the genome IDs in `gtdb.source` to `gtdb.lookup`. Save an output file with the same format as `gdtb.lookup` but with the genome IDs from `gtdb.source`. Use this new file to replace the old `gtdb.lookup`. Here is some rough python/pandas code to do this (note this is slow and uses ~100 GB of RAM):. ```python; import pandas as pd. lookup_data = pd.read_csv('gtdb.lookup', sep='\t', header=None); lookup_data.columns = ['gene-id','gene-name','genome-id']. source_data = pd.read_csv('gtdb.source', sep='\t', header=None); source_data.columns = ['genome-id','genome-name']. genome_orf_mapping = pd.read_csv('genome_orf_mapping.tsv', sep='\t', header=None); genome_orf_mapping.columns = ['genome-name','gene-name']. # Perform the JOIN; lookup_data_corrected = lookup_data.rename(columns={'genome-id':'genome-id-old'})\; .merge(genome_orf_mapping, on='gene-name', how='left', validate='m:1')\; .merge(source_data, on='genome-name', how='left', validate='m:1'). lookup_data_gene_corrected.drop(columns=['genome-id-old','genome-name'])\; .to_csv('gtdb.lookup.corrected', sep='\t', header=None, index=False); # Replace gtdb.lookup with this newly saved file; ```. After making this fix, I could run `mmseqs createtaxdb` and get a taxdb that seemed to work fine with the `mmseqs easy-taxonomy` pipeline, matching my expected results (as mentioned under ""Consequences"" above). Maybe because I corrected `gdtb.lookup` before making the taxdb, I didn't need to edit any other mapping files as mentioned by @mlcoleman . I can't guarantee this workaround is 100% correct because I do not understand all the database files generated by mmseqs. However, the workaround seems to do the trick for my data for the time being. Hope this helps before a longer-term solution is ready.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/729#issuecomment-1691160625:7114,validat,validate,7114,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/729#issuecomment-1691160625,2,['validat'],['validate']
Security,"1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat aa:blosum62.out,nucl:nucleotide.out -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0. MMseqs Version: 	6b9388469a41935813f5d207d6d149767feb4c42-MPI; Cluster mode 	0; Max connected component depth 	1000; Similarity type 	2; Threads 	24; Compressed 	0; Verbosity 	3; Weight file name; Cluster Weight threshold 	0.9; Substitution matrix 	aa:blosum62.out,nucl:nucleotide.out; Add backtrace 	false; Alignment mode 	3; Alignment mode 	0; Allow wrapped scoring 	false; E-value threshold 	0.001; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Compositional bias 	1; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	substitution:1.100,context:1.400; Pseudo count b 	substitution:4.100,context:5.800; Score bias 	0; Realign hits 	false; Realign score bias 	-0.2; Realign max seqs 	214748",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364:2561,hash,hash-shift,2561,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364,1,['hash'],['hash-shift']
Security,"47d0)(DBReader<unsigned int>::Index*, DBReader<unsigned int>::Index*) at parallel.hpp:189:9; frame #17: 0x000000000043dfd2 mmseqs`void ips4o::parallel::sort<ips4o::Config<true, 16l, 16l, 2048l, long, 4096ul, 5l, 8, 4l, 20, 7>, DBReader<unsigned int>::Index*, bool (*)(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&)>(begin=0x00000008012ffc40, end=0x00000008013647d0, comp=(mmseqs`DBReader<unsigned int>::Index::compareByOffset(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&) at DBReader.h:84), num_threads=4)(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&), int) at ips4o.hpp:128:9; frame #18: 0x000000000040d66a mmseqs`void ips4o::parallel::sort<DBReader<unsigned int>::Index*, bool (*)(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&)>(begin=0x00000008012ffc40, end=0x00000008013647d0, comp=(mmseqs`DBReader<unsigned int>::Index::compareByOffset(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&) at DBReader.h:84))(DBReader<unsigned int>::Index const&, DBReader<unsigned int>::Index const&)) at ips4o.hpp:137:5; frame #19: 0x00000000003ef124 mmseqs`DBReader<unsigned int>::sortIndex(this=0x00007fffffffc718, isSortedById=true) at DBReader.cpp:403:9; frame #20: 0x000000000044adae mmseqs`DBReader<unsigned int>::open(this=0x00007fffffffc718, accessType=8) at DBReader.cpp:185:9; frame #21: 0x000000000059f427 mmseqs`doswap(par=0x000000080121f1c0, isGeneralMode=true) at swapresults.cpp:49:22; frame #22: 0x00000000005a1f2e mmseqs`swapdb(argc=8, argv=0x00007fffffffd2c8, command=0x0000000801269b00) at swapresults.cpp:353:12; frame #23: 0x000000000038a19f mmseqs`runCommand(p=0x0000000801269b00, argc=8, argv=0x00007fffffffd2c8) at Application.cpp:38:18; frame #24: 0x000000000038b416 mmseqs`main(argc=10, argv=0x00007fffffffd2b8) at Application.cpp:196:9; frame #25: 0x0000000000389280 mmseqs`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1_c.c:75:7; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870068758:15819,access,accessType,15819,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870068758,1,['access'],['accessType']
Security,"67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust DB_in tmp//10798751672030653963/clu_redundancy tmp//10798751672030653963/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-k",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:2944,hash,hash-shift,2944,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['hash'],['hash-shift']
Security,"7fffffffbb88, begin=0x0000000802a7fe80, end=0x0000000802ba0f70)(std::__1::pair<unsigned int, unsigned long>*, std::__1::pair<unsigned int, unsigned long>*) at parallel.hpp:189:9; frame #19: 0x000000000042c776 mmseqs`void ips4o::parallel::sort<ips4o::Config<true, 16l, 16l, 2048l, long, 4096ul, 5l, 8, 4l, 20, 7>, std::__1::pair<unsigned int, unsigned long>*, DBReader<unsigned int>::comparePairByOffset>(begin=0x0000000802a7fe80, end=0x0000000802ba0f70, comp=comparePairByOffset @ 0x00007fffffffbbf0, num_threads=32) at ips4o.hpp:128:9; frame #20: 0x00000000003ee74f mmseqs`void ips4o::parallel::sort<std::__1::pair<unsigned int, unsigned long>*, DBReader<unsigned int>::comparePairByOffset>(begin=0x0000000802a7fe80, end=0x0000000802ba0f70, comp=comparePairByOffset @ 0x00007fffffffbc40) at ips4o.hpp:137:5; frame #21: 0x00000000003eaab7 mmseqs`DBReader<unsigned int>::sortIndex(this=0x00007fffffffd2b0, isSortedById=true) at DBReader.cpp:367:9; frame #22: 0x00000000003efebe mmseqs`DBReader<unsigned int>::open(this=0x00007fffffffd2b0, accessType=2) at DBReader.cpp:185:9; frame #23: 0x0000000000639482 mmseqs`offsetalignment(argc=20, argv=0x00007fffffffd8a8, command=0x0000000800f5a220) at offsetalignment.cpp:261:12; frame #24: 0x000000000038731f mmseqs`runCommand(p=0x0000000800f5a220, argc=20, argv=0x00007fffffffd8a8) at Application.cpp:38:18; frame #25: 0x0000000000388596 mmseqs`main(argc=22, argv=0x00007fffffffd898) at Application.cpp:196:9; frame #26: 0x0000000000386400 mmseqs`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1.c:76:7; (lldb) ; * thread #1, name = 'mmseqs'; * frame #0: 0x000000080086f68c libthr.so.3`___lldb_unnamed_symbol190$$libthr.so.3 + 92; frame #1: 0x000000080086ccab libthr.so.3`___lldb_unnamed_symbol159$$libthr.so.3 + 491; frame #2: 0x000000080092ea3e libomp.so`___lldb_unnamed_symbol30$$libomp.so + 302; frame #3: 0x000000080096faaa libomp.so`___lldb_unnamed_symbol400$$libomp.so + 698; frame #4: 0x000000080096dd5c libomp.so`___lldb_unnamed_symbol392$$l",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870067769:5775,access,accessType,5775,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870067769,1,['access'],['accessType']
Security,"85237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0; ```. Output:; ```; linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat aa:blosum62.out,nucl:nucleotide.out -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364:1298,hash,hash-shift,1298,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364,1,['hash'],['hash-shift']
Security,"; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	10; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; .............; Time for fill: 0 h 0 m 2s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 7s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 4s; Time for fill: 0 h 0 m 0s; Time for merging files: 0 h 0 m 0 s; Time for processing: 0 h 0 m 14s; Rescore diagonals.; Program call:; panproteome.db panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1 --rescore-mode 0 --sub-mat blosum62.out -c 0.8 -e 0.001 --cov-mode 0",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:4079,hash,hash,4079,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"> Bitteschön :) Was the RAM inserted only at the bank belong to a single socket? (So all memory access of socket 2 went through socket 1 or vise versa?). When we put all 8 RAMs next to CPU0 or CPU1, the speed has been improved very well.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-826566571:96,access,access,96,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-826566571,1,['access'],['access']
Security,"> Sorry, not sure if I follow. Am I supposed to do any differently from what I described above to filter NR by taxonomy info?. I think that what they are saying is that one should download the `accession2taxid` files from NCBI. Then you can somehow run `mmseqs nrtotaxmapping` to create the mapping. . >Maybe related to this issue: I'm having a similar issue with creating a NT taxonomy db so I found this thread. I think that the createtaxdb does not complete in my case despite not printing any errors/warnings. It just eats a lot of RAM and then seemingly finishes, however, the nt_mapping is empty. EDIT: I solved _my_ problem with nt_mapping being empty. The problem was that I was using the `accession` column instead of the `accession.version` column from the `nucl_gb.accession2taxid` file I had downloaded from NCBI as input for `mmseqs createtaxdb`. mmseqs then produced an empty mapping since it tried matching `accession` numbers I provided with `accession.version` obtained from the nt database and of course couldn't find any matches to make the taxid mapping.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/824#issuecomment-2213485010:698,access,accession,698,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/824#issuecomment-2213485010,4,['access'],['accession']
Security,"?Dear Milot,. I attached the log file here with this email, please check if you can access it. Many Thanks,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 28 September 2020 14:48; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). Ah sorry I had forgotten about your previous message, too many different projects are going on!. Could you check the log-file upload again, I don't see a log. -; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699957190>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AAV63ERYGGXCIXN2ZXRHM3LSIBZXBANCNFSM4Q7W6YLA>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699966117:84,access,access,84,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699966117,1,['access'],['access']
Security,"@crisdarbellay no, sorry. I don't have access to a ""bare metal"" server to test this with, but my guess is that Milot guess that it has to do with virtualization is correct. Are you running it with KVM or not?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-2090417247:39,access,access,39,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-2090417247,1,['access'],['access']
Security,@ksahlin I try to cluster also a huge set of sequences > 100 mio. proteins but it does not have any problems. Do you use nucleotide sequences? Is it possible to get access to them? . Update: I have now also clustered 115 mio. nucleotide sequences and it did not crash. . Could you also try to delete the `linclust_tmpdir` and rerun it?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418178571:165,access,access,165,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418178571,1,['access'],['access']
Security,"@martin-steinegger ; ```; * thread #5, stop reason = EXC_BAD_ACCESS (code=1, address=0x5a7684002); frame #0: 0x0000000100169b58 mmseqs`CacheFriendlyOperations<2u>::findDuplicates(this=0x0000600000c08090, output=0x00000005a72a2336, outputSize=580749, computeTotalScore=true) at CacheFriendlyOperations.cpp:229:50; 226 	 const unsigned int element = tmpElementBuffer[n].id;; 227 	 const unsigned int hashBinElement = element >> (MASK_0_5_BIT);; 228 	 output[doubleElementCount].id = element;; -> 229 	 output[doubleElementCount].count = duplicateBitArray[hashBinElement];; 230 	 output[doubleElementCount].diagonal = tmpElementBuffer[n].diagonal;; 231. (lldb) p hashBinElement; (const unsigned int) 742456; (lldb) p duplicateBitArray; (unsigned char *) 0x00000005b8008000 """"; (lldb) p doubleElementCount; (size_t) 581514; (lldb) p duplicateBitArray; (unsigned char *) 0x00000005b8008000 """"; (lldb) p output[doubleElementCount]; error: Couldn't apply expression side effects : Couldn't dematerialize a result variable: couldn't read its memory; (lldb) p output; (CounterResult *) 0x00000005a72a2336; (lldb) p duplicateBitArray[hashBinElement]; (unsigned char) '\x01'; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/822#issuecomment-1999011060:398,hash,hashBinElement,398,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/822#issuecomment-1999011060,4,['hash'],['hashBinElement']
Security,"@milot-mirdita Hi Milot, how is it going with this topic of global alignment? . My workflow for protein clustering like below:; 1. blastp for local alignment, find similar sequence pairs;; 2. needle for global alignment access similarity for blastp pairs;; 3. mcl to cluster the needle result. According to my experience, only a local alignment could be not enough to have clusters.; I'm not clear about the clustering function in mmseqs2, is it enough to substitute my whole workflow?. Hope to see your comment. Cheers,. **WANG**",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696168186:220,access,access,220,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696168186,1,['access'],['access']
Security,"@ppflrs I have rebuilt the metaclust database by adding new identifier and reclustering everything. Every protein source should be now labeled with uniq identifier which can be used to traced the protein to the JGI, OM-RGC, Uniprot or NCBI. ; The new release is available here https://metaclust.mmseqs.com/2018_06/ ; ; The identifier looks like this now. >RifCSPlowO2_12_1023861.scaffolds.fasta_scaffold367679_1 # 24 # 428 # -1 # ID=367679_1;partial=00;start_type=ATG;rbs_motif=None;rbs_spacer=None;gc_cont=0.435. `RifCSPlowO2_12` identifies the JGI project. The project can be accessed the following way (you need an JGI account): . https://genome.jgi.doe.gov/portal/pages/dynamicOrganismDownload.jsf?organism=RifCSPlowO2_12. Within the project the contig is contained in the file `1023861.scaffolds.fasta` at fasta record `scaffold367679_1`. . The rest of the header contains the prodigal prediction information. . I have also added a file metaclust_50_cluster.fasta.gz which contains all cluster member in a fasta like fromat https://github.com/soedinglab/MMseqs2/wiki#cluster-fasta-like-format.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/87#issuecomment-399853855:578,access,accessed,578,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/87#issuecomment-399853855,1,['access'],['accessed']
Security,"A quick comment, in case it should help other users in a similar situation: it took me a while to understand why the performance of mmseqs2 search speed was at least an order of magnitude slower on our compute cluster than it was on a single server. It turns out the UniRef90 target DB index file with sufficient split (16) to accommodate the modest node RAM (32GB) was over 200GB in size and therefore too large to fit on the limited node local disks, so it stayed on the network shared disk bay (nonetheless with reasonable Infiniband 40Gb/s connection to the nodes). With such a configuration the mmseqs2 search jobs on the nodes were endlessly I/O bound, using a ~20% fraction of a core instead of the 16 cores available. As soon as I deleted the target DB index files (_sk7_), the mmseqs2 search jobs distributed on the cluster nodes performed again really well!; So in a nutshell, I would recommend not using pre-indexed DB files on a compute cluster when these large files can't reside on a local disk, and instead use on the fly indexing which of course induces a significant overhead, but orders of magnitude less significant than the actual index file access on shared network storage. And of course this on the fly indexing overhead becomes less important as the query DB gets larger :) With large query DBs, I'm very impressed by the speed of (non MPI) distributed mmeseqs on our modest cluster (whilst providing excellent sensitivity of course)!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252239392:1162,access,access,1162,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252239392,1,['access'],['access']
Security,Bitteschön :) Was the RAM inserted only at the bank belong to a single socket? (So all memory access of socket 2 went through socket 1 or vise versa?),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824888140:94,access,access,94,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824888140,1,['access'],['access']
Security,"Can you check how much swap spaces is being used (`free -h`). I guess the automatic memory limit detection is going wrong somehow. Do you set memory limits in the cluster environments? Can you restart without/higher memory limits? I am not sure if SemiBin exposes MMseqs2 options to users, but you could set `--split-memory-Limit` so it processes the GTDB in smaller chunks. You would set this parameter to about 70-80% of total allowed RAM.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894187795:256,expose,exposes,256,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894187795,1,['expose'],['exposes']
Security,"Cns is not the sequence but the profile consensus sequence. The easiest way to match them together should be to use the non db output mode (`profile2pssm --db-output 0`) and match them to the original sequence based on the database key (first column in the db `.lookup` file, second is the accession).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2132325500:290,access,accession,290,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2132325500,1,['access'],['accession']
Security,"Could this have anything to do with NUMA topology? Are your servers NUMA-less? Considering that all our high-mem nodes have multiple NUMA nodes, with at most ~370G per NUMA node, I'm thinking sub-optimal memory access might be the cause.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1402329661:211,access,access,211,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1402329661,1,['access'],['access']
Security,"Currently, everything is tailored to the NCBI taxonomy format (taxdump). For GTDB we transform their taxonomy to a names/nodes.dmp format). If your taxonomy is NCBI based, then you can just use their taxdump. Additionally, you need a mapping file pointing from a database accession to a taxid. For this create a TSV files that contains the same names as you can find in the `.lookup` (usually the first word of the FASTA header) and a second column with the taxid. You can give both of these to `createtaxdb` with the `--tax-mapping-file` and `--ncbi-tax-dump` and it will create the MMseqs2 taxonomy files.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1815727170:272,access,accession,272,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/779#issuecomment-1815727170,1,['access'],['accession']
Security,Do you try to cluster the database or just to reduce sequences that have exactly the same lenght? Hashclust can just reduce sequences of the same lenght while the clustering can reduce sequence of different lenght.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263867708:98,Hash,Hashclust,98,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263867708,1,['Hash'],['Hashclust']
Security,Essentially you need:; * three FASTA files with headers with unique accessions and the amino acid sequences.; * one TSV files that goes from accession to numeric taxonomy id; * combined *.dmp files. With all of that you can call:. ```; mmseqs createdb gtdb.fasta virus.fasta euks.fasta seqdb; mmseqs createtaxdb seqdb tmp --tax-mapping-file accession_to_taxid.tsv --ncbi-tax-dump path-to-dmp-files-dir/; ```. `seqdb` will then be a normal taxonomy database. for the tsv files you have to check that the second column (containing the accessions) in the `seqdb.lookup` file that is created after calling `createdb` matches the accessions in the first column in your tsv file.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/849#issuecomment-2167640009:68,access,accessions,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/849#issuecomment-2167640009,4,['access'],"['accession', 'accessions']"
Security,"Having problems with this currently. Normal output from mmseqs cluster is. > MMseqs Version: 	8c0c7fb86ce154b236d6fe294811de3b09850fba; > Sub Matrix 	blosum62.out; > Alphabet size 	13; > Seq. Id Threshold 	0.8; > Kmer per sequence 	20; > Mask Residues 	0; > Coverage Mode 	0; > K-mer size 	10; > Coverage threshold 	0.8; > Max. sequence length 	32000; > Shift hash 	5; > Split Memory Limit 	0; > Include only extendable	false; > Threads 	20; > Verbosity 	3; > ; > Database type: Aminoacid; > V -> I; > M -> L; > Q -> E; > T -> S; > R -> K; > Y -> F; > S -> A; > N -> D; > Reduced amino acid alphabet:; > A C D E F G H I K L P W X ; > ; > Needed memory (4160 byte) of total memory (243728993894 byte); > Process file into 1 parts; > Generate k-mers list 0; > ; > Time for fill: 0 h 0 m 0s; > Done.; > Sort kmer ... Done.; > Time for sort: 0 h 0 m 0s; > Sort by rep. sequence ... Done; > Time for sort: 0 h 0 m 0s; > Time for fill: 0 h 0 m 0s; > Time for merging files: 0 h 0 m 0 s; > Time for processing: 0 h 0 m 0s; > Rescore diagonals. However, I get the following error when there are some identical sequences:. > MMseqs Version: 	8c0c7fb86ce154b236d6fe294811de3b09850fba; > Sub Matrix 	blosum62.out; > Alphabet size 	13; > Seq. Id Threshold 	0.8; > Kmer per sequence 	20; > Mask Residues 	0; > Coverage Mode 	0; > K-mer size 	10; > Coverage threshold 	0.8; > Max. sequence length 	32000; > Shift hash 	5; > Split Memory Limit 	0; > Include only extendable	false; > Threads 	20; > Verbosity 	3; > ; > Database type: Aminoacid; > V -> I; > M -> L; > Q -> E; > T -> S; > R -> K; > Y -> F; > S -> A; > N -> D; > Reduced amino acid alphabet:; > A C D E F G H I K L P W X ; > ; > Needed memory (3200 byte) of total memory (243728993894 byte); > Process file into 1 parts; > Generate k-mers list 0; > ; > Time for fill: 0 h 0 m 0s; > Done.; > Sort kmer ... Done.; > Time for sort: 0 h 0 m 0s; > Sort by rep. sequence ... Done; > Time for sort: 0 h 0 m 0s; > ~/tmp/2230240821590219627/linclust/109119296912",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384867282:360,hash,hash,360,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384867282,1,['hash'],['hash']
Security,"Hello again,. I've been revisiting `mmseqs` again for taxonomic assignment, and unwittingly ran into this problem again before finding my own Github issue (the circle of life!). I was just wondering whether by now there is any advice on creating a taxdb when RAM is limited? I;m working with a pre-clustered version of the NR database that is currently not available directly through `mmseqs databases`. After the standard `createdb` command, I ran the following:. ```; mmseqs createtaxdb nr_clustered_mmseqs ~/TMP --ncbi-tax-dump ~/.taxonkit/ --tax-mapping-file /data/clustered_nr/clustered_nr_taxmapping.tsv; ```. I get output as per the OP in this issue, until the process dies with:. ```; [truncated]; Loading names file ... Done; Init RMQ ...Done; Killed; ```. I can see that the problem was most likely the RAM being exhausted (I received exit status 137). My workstation has 64GB of RAM, and accessing a server with more RAM for the creation of this database is not likely to be feasible. Thanks. p.s. in case you've missed it for any reason, I would also like to point out that the current automated download of the NR/NT fasta files from NCBI using `mmseqs databases` might not work as desired moving forwards. As noted at https://ftp.ncbi.nlm.nih.gov/blast/db/FASTA/README.txt:. ```; In April 2024, the BLAST FASTA files in this directory will no longer be; available. You can easily generate FASTA files yourself from the formatted; BLAST databases by using the BLAST utility blastdbcmd that comes with the; standalone BLAST programs. See NCBI Insights for more details; https://ncbiinsights.ncbi.nlm.nih.gov/2024/01/25/blast-fasta-unavailable-on-ftp/; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/811#issuecomment-2199281561:899,access,accessing,899,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/811#issuecomment-2199281561,1,['access'],['accessing']
Security,"Hi @silvainp @milot-mirdita @martin-steinegger !. I came across this old issue while googling because I encountered pretty much the same problem and this didn't seem to have been resolved yet. I can confirm that I got very similar outputs to @silvainp in a clustering problem I've been working on. The issue persisted with the most recent release (15) of mmseqs2. After some I found that there was a (silent) issue in my input FAA files: they were corrupted due to a few binary characters that were accidentally introduced in an upstream step. **Once I manually cleared all binary characters, clustering worked as intended**. This may have been the issue here as well, although ofc hard to tell from a distance. What's important imo is that the `createdb` step did _not_ catch these and threw no error/warning. @milot-mirdita I don't want to tinker with the code for a pull request, but I'd suggest building in a check to validate the input fasta files in the db-building step. Best regards,. Sebastian",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/710#issuecomment-2425959129:922,validat,validate,922,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/710#issuecomment-2425959129,1,['validat'],['validate']
Security,"Hi Ann,. Thank you for suggesting that. I know that using --cov-mode 3 paired with -c 0.99 is quite strict. When we relaxed it, we were finding 'false positive' clusters, where the cluster head/representatives (the largest sequence in the cluster) had novel enough genetic information in it, that we would have preferred it to be it's own cluster (with a solitary member). That being said, in my grid search, I have only explored varying -c values with a constant --cov-mode 3. The sequence pairs that I am finding that should be clustered together (and aren't) have nearly identical lengths (+-1) with a few mismatches (<10). It is my understanding that those should have been clustered regardless of the value of --cov-mode, even with the stringent -c 0.99. To give you another example, even when I use a very lenient clustering criterion (please note the values of min-seq-id, -c) - ; --kmer-per-seq-scale 0 --min-seq-id 0.80 --cov-mode 3 -c 0.80 --cluster-mode 1 --spaced-kmer-mode 0 -k 10 --threads 16 --adjust-kmer-len 0 --ignore-multi-kmer 0. I still find representative sequence pairs that have a levenshtein distance of 1 between them. Although now, I find very few such pairs (8 / 1378 all-v-all alignment of representative sequences with a levenshtein distance of < 10). I understand these could be edge cases, but I find them interesting, and I want to learn what linclust is doing by focussing on these 8 alone. (Making a long post even longer!) I'm validating linclust clusters by generating an all-v-all levenshtein distance matrix of representative clusters. And an all-v-all levenshtein distance matrix of all members within a cluster. Because my understanding of linclust is not great, I'm treating it as a black box that I intend to understand.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923071989:1463,validat,validating,1463,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923071989,1,['validat'],['validating']
Security,"Hi Joseph,. The parameter has to be a float in the range [0,1]. Sorry that the validation regex didn't give out a warning. We'll fix that asap.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-305590286:79,validat,validation,79,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-305590286,1,['validat'],['validation']
Security,"Hi Martin,; That's a great point, thanks. I've got a few pieces of information:. * We run asan with [non-default flags](https://github.com/google/sanitizers/wiki/AddressSanitizerFlags#run-time-flags) `--check_initialization_order=true` and `--strict_init_order=true`. * We realised that point 3 from my list ('initialisation order fiasco') is specific to how we build stuff, so that shouldn't be an issue for you or other users. . * We're not quite sure why we got the ODR violation flagged, while you didn't. Best wishes",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/661#issuecomment-1408612949:146,sanitiz,sanitizers,146,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/661#issuecomment-1408612949,1,['sanitiz'],['sanitizers']
Security,"I am not 100% sure what you want, from here there are multiple ways you can go for downstream processing:. * You can use `unpackdb` to split a database into separate files; * You can use `createsubdb` to get only a smaller subset based on a list of database keys ; * You can use `view` to extract a single entry. For `createsubdb` and `view` you need to give the internal database identifiers (keys). You can get those from the `seqdumpDB.lookup` file. You can grep for your FASTA accession in the second column and take the number from the first column for `view`'s `--id-list` parameter or `createsubdbs` first input file. `unpackdb` will name the files based on this internal identifier, if no `.lookup` file is present. You can copy/symlink the `.lookup` file from the `seqdumpDB` to the `DB_clu_seq` to get better names, as these share the same database keys:; ```; ln -s seqdumpDB.lookup DB_clu_seq.lookup; mmseqs unpackdb DB_clu_seq unpackdir; ````",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/429#issuecomment-811947501:481,access,accession,481,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/429#issuecomment-811947501,1,['access'],['accession']
Security,I am unable to access the uniclust page (page not found). Would you mind sharing another link?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1553508828:15,access,access,15,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1553508828,1,['access'],['access']
Security,"I don't know your exact use-case and if this is actually important for you, I am just warning you that how you are currently using MMseqs2, might be a bit problematic with this specific target database. The results you are already getting with your current usage might already by completely fine for your current use-case. I will just explain what you could do if you might want more ""complete"" results. Furthermore, this is unrelated to the stability problem (that one should now be solved). The very redundant target database you are using is a bit of a weak point in MMseqs2. ; The MMseqs2 prefiltering module reports all the best double-consecutive-kmer matches either down to the `--min-ungapped-score` threshold or as many as `--max-seqs` allows. The `--min-ungapped-score` criterion removes many hits that could never reach a good E-value anyway. . The `--max-seqs` parameters prevents a explosion of disk space while accepting the risk of losing some redundant hits. This is not that much of a problem since we normally search against the representatives of a clustered database, which are sufficiently dissimilar to not enter this case. Now you have a target database with many very similar sequence and will run into this case. The effect is that a good (maybe even the best) hit in the target database might not be found, since its outside the limit given by `--max-seqs`. We have a different search mode that accepts some inefficiency, while dealing with correctly with very redundant database and you can access this mode by passing the `--slice-search` parameter to either `easy-search` or `search`.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597651917:1518,access,access,1518,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597651917,1,['access'],['access']
Security,"I encountered the `orf filter prefilter died` issue today. I suspect it might be due to insufficient memory available to the program, even though there was no indication of memory shortage. According to the MMseqs2 documentation, the program should automatically analyze the available memory and split the data accordingly to meet memory requirements. However, I suspect the program did not correctly identify the maximum memory I allocated for my task submitted to HPC (via `qsub`), and it may have mistakenly considered the total available memory in HPC as the memory accessible for the current task. I resolved this issue by adding the parameter `--split-memory-limit 80G`. Hope this helps you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/556#issuecomment-1882560536:570,access,accessible,570,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/556#issuecomment-1882560536,1,['access'],['accessible']
Security,I hope it will help you.; ```; (gdb) bt; Python Exception <class 'gdb.MemoryError'> Cannot access memory at address 0x7fff53ed22c8: ; #0 0x00000000004dfe25 in DBReader<unsigned int>::sortIndex(bool) (); Backtrace stopped: Cannot access memory at address 0x7fff53ed22c8; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-800279909:91,access,access,91,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-800279909,2,['access'],['access']
Security,"I improved `createsubdb` and `view` in 14a3dce2ae6319caf671e81d91a41c1292401285 to also directly parse FASTA accessions if a `.lookup` file is present, if the `--id-mode 1` parameter is given.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/429#issuecomment-811982749:109,access,accessions,109,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/429#issuecomment-811982749,1,['access'],['accessions']
Security,"I just hit this as well. The error message doesn't make the formatting problem obvious, but after finding this thread it was a quick and easy fix to manually correct the fasta lines that start with `> ` to begin with `>`. If writing the logic to handle parsing both `> ` & `>` is more trouble than it is worth, revising the error message to indicate that the user may only need to fix the spacing issue and then try again would be very helpful! The file that caused the issue for me was downloaded from a small database maintained by an individual research lab, so I assume the issue was because the fasta file was likely manually updated at some point rather than machine-generated. That's just a suggestion though - I was able to find this thread and solution within easily enough and there seem to be a handful of existing fasta validator tools that could also help users identify the root cause of their issue without internalizing that logic into this suite of tools as well. P.S. thanks for MMSeqs!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/446#issuecomment-2192800896:832,validat,validator,832,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/446#issuecomment-2192800896,1,['validat'],['validator']
Security,"I see. So when the documentation says ; > The result database of searching sequences against a seqTaxDB is referred to as `taxonomyResult`. ""searching"" does not refer to `mmseqs search` but rather the process that `mmseqs taxonomy` uses?. Here is the work-around I used previously to see the taxonomy of my search results. Does this look pretty normal to you, or is there a better way to do this? There seems to be no good way to go from an alignment database (search result) to a sequence database which can then can be used in the `taxonomy` workflow. . 1. get all the accession IDs of all my hits in `resultDB` with `convertalis`; 2. use `blastdbcmd` to get a fasta file containing sequences of all my hits; 3. then use `easy-taxonomy` to renerate a Kraken style report",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771860702:571,access,accession,571,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771860702,1,['access'],['accession']
Security,I submitted a fix to the ResFinder team here:; https://bitbucket.org/genomicepidemiology/resfinder_db/pull-requests/9. MMseqs2 assumes FASTA accessions start directly after the `>` without any whitespace.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/622#issuecomment-1281772629:141,access,accessions,141,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/622#issuecomment-1281772629,1,['access'],['accessions']
Security,I think this error can happen if there is a space (or possible other whitespace) after the `>` and before the accession.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/763#issuecomment-1759866280:110,access,accession,110,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/763#issuecomment-1759866280,1,['access'],['accession']
Security,"I think you need to specify `/tmp/global2/hashkenazy/sample.fa.mmseqdb.gz` twice, as it's both the query and target database for `createtsv`. Sorry this is a bit confusing when used together with the clustering workflows :/",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860641251:42,hash,hashkenazy,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860641251,1,['hash'],['hashkenazy']
Security,"I want to do multiple things.; First I want to reduce the redundancy of the DB by filtering out exact duplicates. ""Hashclust"" seems to detect exact duplicates after reducing the alphabet, which might be even better for my use case.; Later, I want to compare different clustering methods, including the ones provided by MMseqs. If I understand the module correctly, ""hashclust"" creates an alignmentDB that includes all exact matches between sequences that have had their alphabet reduced. This alignmentDB can then be used by ""clust"" to cluster the sequences. If I use sequence identity in ""clust"", which can only be 1 or 0 (not listed) when I use ""hashclust"" the resulting clusters should contain only said reduced-alphabet-exact-matches. Is that correct?. **Edit:** It seems that after using ""mmseqs createseqfiledb DB clu clu_seq"" every header in clu_seq containing a cluster representing sequence ID starts with a null byte. I used that to create a fasta file that only contains non-redundant (with regard to ""clusthash"") sequences.; I hope that what I got is what I think I got.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263872227:115,Hash,Hashclust,115,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-263872227,3,"['Hash', 'hash']","['Hashclust', 'hashclust']"
Security,I've seen Issue 666 and have access to a supercomputing facility. Should I submit a job-script allocating GPUs to this instead of performing it in PuTTy on my computer alone?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/668#issuecomment-1434645218:29,access,access,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/668#issuecomment-1434645218,1,['access'],['access']
Security,"I've tried this:; ```; gdb --args ~/git/MMseqs2/build/bin/mmseqs kmermatcher tmp/14020823439690622662/input tmp/14020823439690622662/clu_tmp/13817195423418140833/linclust/5869534598694216613/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 1 --kmer-per-seq 21 --mask 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --include-only-extendable 0 --skip-n-repeat-kmer 0 --threads 6 -v 3; ```; and this is what I'm getting:; ```; Thread 1 ""mmseqs"" received signal SIGSEGV, Segmentation fault.; 0x00007ffff68c1c01 in __GI___libc_free (mem=0x7ffff3152010) at malloc.c:3123; 3123	malloc.c: No such file or directory.; (gdb) bt; #0 0x00007ffff68c1c01 in __GI___libc_free (mem=0x7ffff3152010) at malloc.c:3123; #1 0x000055555569ea2c in DBReader<unsigned int>::close (this=0x7fffffffdd90) at /home/jose/git/MMseqs2/src/commons/DBReader.cpp:353; #2 0x000055555572f571 in kmermatcher (argc=32, argv=0x7fffffffe1b8, command=...) at /home/jose/git/MMseqs2/src/linclust/kmermatcher.cpp:479; #3 0x0000555555692a63 in runCommand (p=..., argc=32, argv=0x7fffffffe1b8) at /home/jose/git/MMseqs2/src/commons/Application.cpp:62; #4 0x000055555569328d in main (argc=34, argv=0x7fffffffe1a8) at /home/jose/git/MMseqs2/src/commons/Application.cpp:135; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441416213:323,hash,hash-shift,323,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441416213,1,['hash'],['hash-shift']
Security,Is it possible to provide an md5 check sum for for bfd database? I want to check the integrity of my tarball download for bfd_metaclust_clu_complete_id30_c90_final_seq.sorted_opt.tar.gz .; Thank you.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/24#issuecomment-525803520:85,integrity,integrity,85,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/24#issuecomment-525803520,1,['integrity'],['integrity']
Security,"It is a format issue. The output of alignall technically is not a valid alignment database. Therefore it can not be converted by `convertalis`. The first two columns contain the identifier for the alignment of A against B. convertalis can just handle a single identifier. We will validate this in the near future. . Here is a script how to generate the desired result: . mmseqs createdb test_proteins.faa db ; mmseqs cluster db clu /tmp/tmpd9nk3khu --max-seqs 1000 --threads 40 --min-seq-id 0.3 -e 0.000010 -c 0.7 ; mmseqs alignall db clu alignDb --alignment-mode 3 ; mmseqs createtsv db db alignDb alignDb.tsv; OFS=""\t"" awk 'FNR==NR{a[$1]=$2;next}{$3=a[$3]; print}' targetDB.lookup alignallDB.tsv > alignallDB_newid.tsv",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/194#issuecomment-486888091:280,validat,validate,280,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/194#issuecomment-486888091,1,['validat'],['validate']
Security,"It told me to request permissions to access the file, which I did.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/230#issuecomment-538983056:37,access,access,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/230#issuecomment-538983056,1,['access'],['access']
Security,"It's not well (ehm at all) explained, sorry about that. . If the input database is a precomputed index (created by `createindex`), this parameter allows to access the different sequences stored there. If we index a nucleotide sequences for use in a translated search we need to store both the nucleotide sequence and the translated amino acid sequence. This parameter allows to access these.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/263#issuecomment-573955468:156,access,access,156,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/263#issuecomment-573955468,2,['access'],['access']
Security,"It's related with the cluster evaluation and representative selection we are using. We need to find a compromise between speed and I/O bottlenecks. Now we were using `createsudb` to query the DB and get DBs for each cluster and distribute it in the HPC cluster to perform our validation, but it takes a long time, the original DB is ~250M proteins. It is faster when we have the files in the scratch partition of each node and the files partitioned in folders. This is the fastest way we found so far, from `createseqfiledb`:; ```; mawk '{if ($0 ~ /^\x0/ || NR == 1){gsub(""\x0"","""",$0); print ""#""$0; print $0}else{print $0}}' DB_clu_fa | csplit -z --suppress-matched -s -f cluster_ -b ""%01d.fa"" - '^#/' {*}; ```; After we split the ~32M files in folders with 100K files in each. All of this done in a fast SSD partition. Do you have any suggestions?. Thanks",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343725229:276,validat,validation,276,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/50#issuecomment-343725229,1,['validat'],['validation']
Security,"MMseqs2 does something more sensible with `,` in `--taxon-list`. No idea what to do about the validation step though. We could add a regex to check for only sensible operators and numbers?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/320#issuecomment-665664188:94,validat,validation,94,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/320#issuecomment-665664188,1,['validat'],['validation']
Security,Maybe we should add a do not hash flags to the parameters to avoid this.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461806077:29,hash,hash,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461806077,1,['hash'],['hash']
Security,Merged the validation regexes (we will still have to improve their errors in the future).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-307105278:11,validat,validation,11,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-307105278,1,['validat'],['validation']
Security,"No, currently query/target always parses the accession:; ```; { ""uc"", 2, 0}, // Uniclust; { ""cl|"", 3, 1},; { ""sp|"", 3, 1}, // Swiss prot; { ""tr|"", 3, 1}, // trembl; { ""gb|"", 3, 1}, // GenBank; { ""ref|"", 4, 1}, // NCBI Reference Sequence; { ""pdb|"", 4, 1}, // Brookhaven Protein Data Bank; { ""bbs|"", 4, 1}, // GenInfo Backbone Id; { ""lcl|"", 4, 1}, // Local Sequence identifier; { ""pir||"", 5, 1}, // NBRF PIR; { ""prf||"", 5, 1}, // Protein Research Foundation; { ""gnl|"", 4, 2}, // General database identifier; { ""pat|"", 4, 2}, // Patents; { ""gi|"", 3, 3} // NCBI GI; ```. These are the header formats that get parsed, you can try to avoid these prefices. It wouldn't be to hard to add an option to avoid parsing, but we have out hands quite full currently.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871240398:45,access,accession,45,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871240398,1,['access'],['accession']
Security,Nucleotide cluster results can currently not be converted into MSAs since we miss a seeding point to start the alignment (see https://github.com/soedinglab/MMseqs2/issues/268). Using `result2dnamsa` only works for searches. We will change the input validator.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/364#issuecomment-711474276:249,validat,validator,249,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/364#issuecomment-711474276,1,['validat'],['validator']
Security,"Nucleotide matrices are currently hardcoded. Most of the infrastructure is in place to make it changeable, a little bit of work is still left however to expose that. We will look into making it adjustable.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-498778108:153,expose,expose,153,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-498778108,1,['expose'],['expose']
Security,"Okay I am not sure how to reproduce the issue. It doesn't crash here. ; Does it crash consistently? . Can you please repeat only the linclust call with the same tmp files:; ```; mmseqs linclust tmp2/6664721939282577716/input tmp2/6664721939282577716/clu_tmp/1194185237556116514/clu_redundancy tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 24 --compressed 0 -v 3 --cluster-weight-threshold 0.9 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 --gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461591707:1256,hash,hash-shift,1256,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461591707,1,['hash'],['hash-shift']
Security,"Okay we found the issue. The problem occurs because of : in the --lca-ranks parameter. The seperator should be ;. The description is wrong in our mmseqs help text. So it should be `--lca-ranks ""species;genus;family;order;class;phylum;superkingdom""`. . Thank you so much for your help to find it. But we have just noticed that ';' make some issues as parameter. If you would write `--lca-ranks species;genus;family;order;class;phylum;superkingdom` than bash will only interpret until `--lca-ranks species`. Luckily this change was not yet part of any release. So we will change it to `,` and add a proper validation of the input parameter. . Also I did not receive a mail for the stickers. My mail add is themartinsteinegger gmail com 🙂",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-571346393:604,validat,validation,604,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-571346393,1,['validat'],['validation']
Security,"Regarding the first question:; - `_consensus` is the consensus sequence generated by taking the highest scoring amino acid in each profile position; - `_seed` contains the representative (= first) sequence of each alignment. The files are not really necessary anymore, since both of these sequences are now also stored inside the (binary) profile format. We didn't add separate modules to extract these sequences from profiles yet, so we didn't remove the databases. Second question: Num corresponds to the database key (.index) of each entry. We could add an option to parse the accession from the corresponding sequence header. Would that be useful?; The module was requested from a user to have a human readable output of our binary profile format. We currently use `profile2pssm` mostly as a debugging tool. What are you using it for?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458945116:580,access,accession,580,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458945116,1,['access'],['accession']
Security,"Seq. Id Threshold 	0.8; > Kmer per sequence 	20; > Mask Residues 	0; > Coverage Mode 	0; > K-mer size 	10; > Coverage threshold 	0.8; > Max. sequence length 	32000; > Shift hash 	5; > Split Memory Limit 	0; > Include only extendable	false; > Threads 	20; > Verbosity 	3; > ; > Database type: Aminoacid; > V -> I; > M -> L; > Q -> E; > T -> S; > R -> K; > Y -> F; > S -> A; > N -> D; > Reduced amino acid alphabet:; > A C D E F G H I K L P W X ; > ; > Needed memory (4160 byte) of total memory (243728993894 byte); > Process file into 1 parts; > Generate k-mers list 0; > ; > Time for fill: 0 h 0 m 0s; > Done.; > Sort kmer ... Done.; > Time for sort: 0 h 0 m 0s; > Sort by rep. sequence ... Done; > Time for sort: 0 h 0 m 0s; > Time for fill: 0 h 0 m 0s; > Time for merging files: 0 h 0 m 0 s; > Time for processing: 0 h 0 m 0s; > Rescore diagonals. However, I get the following error when there are some identical sequences:. > MMseqs Version: 	8c0c7fb86ce154b236d6fe294811de3b09850fba; > Sub Matrix 	blosum62.out; > Alphabet size 	13; > Seq. Id Threshold 	0.8; > Kmer per sequence 	20; > Mask Residues 	0; > Coverage Mode 	0; > K-mer size 	10; > Coverage threshold 	0.8; > Max. sequence length 	32000; > Shift hash 	5; > Split Memory Limit 	0; > Include only extendable	false; > Threads 	20; > Verbosity 	3; > ; > Database type: Aminoacid; > V -> I; > M -> L; > Q -> E; > T -> S; > R -> K; > Y -> F; > S -> A; > N -> D; > Reduced amino acid alphabet:; > A C D E F G H I K L P W X ; > ; > Needed memory (3200 byte) of total memory (243728993894 byte); > Process file into 1 parts; > Generate k-mers list 0; > ; > Time for fill: 0 h 0 m 0s; > Done.; > Sort kmer ... Done.; > Time for sort: 0 h 0 m 0s; > Sort by rep. sequence ... Done; > Time for sort: 0 h 0 m 0s; > ~/tmp/2230240821590219627/linclust/10911929691229894817/linclust.sh: line 18: 28296 Segmentation fault (core dumped) $MMSEQS kmermatcher ""$INPUT"" ""$3/pref"" ${KMERMATCHER_PAR}; > Rescore diagonals. Has anyone seen this before? Thanks!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384867282:1399,hash,hash,1399,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/4#issuecomment-384867282,1,['hash'],['hash']
Security,"So I figured out the puzzle. All parameters have to match, even ones that MMseqs2 resolves automatically such as thread count. The first run was with 48, the other with 56 threads. If you resubmit the job, such that it runs on the 48 thread machine again it should continue from the point it stopped correctly. @martin-steinegger: should we make a list of parameters to always exclude from hashing (threads, verbosity, ...)?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461789947:390,hash,hashing,390,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/160#issuecomment-461789947,1,['hash'],['hashing']
Security,So far so good. The program is running smoothly and the kmermatcher step is ended without errors. . ```; kmermatcher data/02_geneclust/plass_assembly_noclust /mnt/lustre/scratch/aauladell/9518450204626139512/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.95 --kmer-per-seq 21 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-m; ode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --include-only-extendable 0 --skip-n-repeat-kmer 0 --threads 48 --compressed 0 -v 3. Database size: 823952135 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Estimated memory consumption 263893 MB; Generate k-mers list for 1 split; [=================================================================] 823.95M 37m 20s 931ms; Sort kmer 0h 11m 29s 726ms; Sort by rep. sequence 0h 2m 46s 392ms; Time for fill: 0h 3m 48s 1ms; Time for merging files: 0h 4m 55s 350ms; Time for processing: 1h 13m 27s 843ms; ```. Thanks!,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-499063090:385,hash,hash-shift,385,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-499063090,1,['hash'],['hash-shift']
Security,"So the workflow scripts don't need to be accessible at runtime? I wasn't sure what you meant by ""compiled in"". Thanks...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868487428:41,access,accessible,41,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868487428,1,['access'],['accessible']
Security,"So using ""hashclust"" is already a bit advanced. You need to do two things in order to cluster with hashclust. First call hashclust and define your target sequence identity with --min-seq-id. As a second step you have to input the result database in the ""clust"" module. The result is your clustering.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-264629192:10,hash,hashclust,10,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/6#issuecomment-264629192,3,['hash'],['hashclust']
Security,"Something is wrong with the input FASTA headers. This is not necessarily a problem for the clustering itself, however the result files might be not very useful if you cant distinguish cluster members. It might be an issue with a space between the leading `>` in the FASTA header and the actual accession. MMseqs2 expects there to not be any whitespace.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/804#issuecomment-1899530817:294,access,accession,294,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/804#issuecomment-1899530817,1,['access'],['accession']
Security,"Sorry for the delay to answer. Thank you for giving some help to avoir the problem. I give you the output with `-DCMAKE_BUILD_TYPE=RelWithDebInfo`; ```; #0 DBReader<unsigned int>::sortIndex (this=this@entry=0x7ffe5bd0a970, isSortedById=isSortedById@entry=false) at /path/to/MMseqs2/src/commons/DBReader.cpp:249; #1 0x00000000004fbc6b in DBReader<unsigned int>::open (this=this@entry=0x7ffe5bd0a970, accessType=accessType@entry=0) at /path/to/MMseqs2/src/commons/MemoryTracker.h:13; #2 0x00000000005c1c81 in indexdb (argc=<optimized out>, argv=<optimized out>, command=...) at /path/to//MMseqs2/src/util/indexdb.cpp:64; #3 0x0000000000471e20 in runCommand (p=0x2394310, argc=argc@entry=36, argv=argv@entry=0x7ffe5bd0af48) at /path/to/MMseqs2/src/commons/Application.cpp:40; #4 0x0000000000460455 in main (argc=38, argv=0x7ffe5bd0af38) at /path/to/MMseqs2/src/commons/Application.cpp:203; ```; As you said it is a issue with the max size, the size is greater than 4294967295 (unsigned int), so it becomes an infinite loop. Do you have see a solution in a long term goal about this problem?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-968758784:399,access,accessType,399,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/426#issuecomment-968758784,2,['access'],['accessType']
Security,Sorry for the late answer. Milot and I have some deadlines approaching soon. . I could not reproduce the error. The error indicates that MMseqs2 tries to access an out of range offset in the data file `/tmp/global2/nyoungblut/LLMGAG_27929269397/clusters_rep-seqs_db_3_1`. Could you please check the size of this file? Is there any entry in the second column of `/tmp/global2/nyoungblut/LLMGAG_27929269397/clusters_rep-seqs_db_3_1.index` that is greater than the data file size?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-472642101:154,access,access,154,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-472642101,1,['access'],['access']
Security,"Thank for your report. I copied a wrong file to the Metaclust 2018_01 release. It should be fixed now.; Information on the current release can be found in the latest version of the preprint: https://www.biorxiv.org/content/early/2018/01/05/104034.full.pdf+html. The input set size of the Metaclust did not increase since the first release. The data should be seen as proof of concept for Linclust. We can not commit to such a data intensive procedure at this point. It took weeks to download the full datasets used in this study. We believe that a sequence database based on metagenomic sequences should be offered rather by institutions that have direct access to huge amounts of metagenomic data (e.g. EMBL, NCBI, JGI, Argonne National Lab, ...).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/54#issuecomment-357018695:655,access,access,655,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/54#issuecomment-357018695,1,['access'],['access']
Security,Thank you for the file. I can not reproduce the bug. ; Could you compile mmseqs2 with debug flags and send me the back trace? . cmake -DCMAKE_BUILD_TYPE=Debug ..; make -j 6; gdb --args mmseqs kmermatcher tmp/16988974474605539078/input tmp/16988974474605539078/clu_tmp/2433631712707271207/linclust/8168197228582123863/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 1 --kmer-per-seq 21 --mask 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --include-only-extendable 0 --skip-n-repeat-kmer 0 --threads 6 -v 3. After GDB started type `r` an after it crashed `bt`.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441411023:449,hash,hash-shift,449,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441411023,1,['hash'],['hash-shift']
Security,"Thank you for your reply. ; From my understanding, the cascading clustering with the `--cluster-reassign` flag means that it will reassign the clusters so that there are no violations within the cluster. ; I did a sanity check, to make sure that neither of the centroids has a percentage of identity over 70%. So I searched the centroids database against itself, with `mmseqs search` and checked for `pident` > 50% . In general, I want to train an NLP model. So, I want to ensure that there is zero overlapping between training, validation and test sets. So, I clustered my dataset with 50% of identity and each cluster was assigned to one of the 3 sets.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834:529,validat,validation,529,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834,1,['validat'],['validation']
Security,"Thank you this bug report. The problem is that our `DBReader` searches first for the extension `.[0-9]` if it exists then it knows that it is a multi-part database. In your case your single part database is not seen by the `DBReader` since you have leftover files from your pervious search that uses the same output file name. I currently do not have a solution for this issue. I will discuss this later with @milot-mirdita. For your suggestion to provide a guide for output per module, I totally agree we need this. We might be able to generate something from your command declaration in `MMseqsBase.cpp` since we already define input and output types to validate the user input.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/336#issuecomment-664795094:656,validat,validate,656,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/336#issuecomment-664795094,1,['validat'],['validate']
Security,"Thanks a lot @AndrazMarinc and @milot-mirdita . It worked. Also I found another solution, the file ""prot.accession2taxid"" download from NCBI needs modification. Only two columns (accession.version and taxid) are needed to run createtaxdb.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/856#issuecomment-2222568096:179,access,accession,179,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/856#issuecomment-2222568096,1,['access'],['accession']
Security,"Thanks for the bug report. ```; case '\n':; if (inHeader) {; inHeader = false;; } else {; if (seqLength > maxSeqLength) {; maxSeqLength = seqLength;; }; seqLength = 0;; }; break;; default:; if (!inHeader) {; seqLength++;; }; break;; ```. These lines in util/msa2profile.cpp are wrong, i'll see if I can fix the issue tomorrow. . (Side remark, databases from ffindex_build calls are somewhat dangerous for mmseqs modules that do random accesses (msa2profile only does linear access). Please sort the index file numerically first (LC_ALL=C sort -n DB.index > DB.index_sorted && mv -f DB.index_sorted DB.index)).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344434177:435,access,accesses,435,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344434177,2,['access'],"['access', 'accesses']"
Security,Thanks for the quick response!. Here is sample of the data together with the commands I have run and the logs. I hope I have not missed anything:. ```; mmseqs createdb --compressed 1 /tmp/global2/hashkenazy/sample.fa /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz > /tmp/global2/hashkenazy/sample.fa.mmseqdb.std 2>&1. mmseqs linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/hahskenazy/ 1> /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.std 2>&1. mmseqs createtsv /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.tsv > /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.tsv.std 2>&1; ```. [MMSEQ_linclust_example.tar.gz](https://github.com/soedinglab/MMseqs2/files/6647982/MMSEQ_linclust_example.tar.gz). Thanks for the help!; Haim,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860615959:196,hash,hashkenazy,196,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860615959,11,['hash'],['hashkenazy']
Security,That is the full log. The command that I ran was:. ```; mmseqs linclust --threads 24 --min-seq-id 0.90 -c 0.9 --kmer-per-seq 50 /tmp/global/nyoungblut/genes_db /tmp/global/nyoungblut/clusters_db /tmp/global/nyoungblut/linclust_tmp/ 2>> linclust.log 1>&2; ```. Note: I shorted the paths to make the command easier to read. My conda env:. ```; # Name Version Build Channel; _libgcc_mutex 0.1 main; bzip2 1.0.8 h516909a_1 conda-forge; ca-certificates 2019.9.11 hecc5488_0 conda-forge; curl 7.65.3 hf8cf82a_0 conda-forge; gawk 5.0.1 h516909a_0 conda-forge; htslib 1.9 h4da6232_3 bioconda; krb5 1.16.3 h05b26f9_1001 conda-forge; libcurl 7.65.3 hda55be3_0 conda-forge; libdeflate 1.2 h516909a_1 bioconda; libedit 3.1.20170329 hf8c457e_1001 conda-forge; libgcc-ng 9.1.0 hdf63c60_0; libssh2 1.8.2 h22169c7_2 conda-forge; libstdcxx-ng 9.1.0 hdf63c60_0; llvm-openmp 8.0.1 hc9558a2_0 conda-forge; mmseqs2 10.6d92c h2d02072_0 bioconda; ncurses 6.1 hf484d3e_1002 conda-forge; openmp 8.0.1 0 conda-forge; openssl 1.1.1c h516909a_0 conda-forge; pigz 2.3.4 0 conda-forge; plass 2.c7e35 h21aa3a5_1 bioconda; samtools 1.9 h10a08f8_12 bioconda; seqtk 1.3 hed695b0_2 bioconda; tk 8.6.9 hed695b0_1003 conda-forge; xz 5.2.4 h14c3975_1001 conda-forge; zlib 1.2.11 h516909a_1006 conda-forge; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537579859:435,certificate,certificates,435,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537579859,1,['certificate'],['certificates']
Security,"Thats one possibility, however the issue is quite a bit more complicated to solve generally. First, `getTotalSystemMemory` is not used everywhere, only a few modules have a splitting logic. There is also the issue that we read input databases completely into memory if they will have random accesses. That is also currently not tracked through `getTotalSystemMemory`. You can disable that for a few tools with `--no-preload`, but then you pay a large IO cost. Then there is the issue that letting MMseqs2 share the memory bus among unrelated processes is probably also not the best idea. The prefilter benefits a lot from high-bandwidth, low latency access to its index structure.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463:291,access,accesses,291,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463,2,['access'],"['access', 'accesses']"
Security,"The `taxonomy` workflow is usable for your use case, but still under construction to make it user friendly. Building taxonomy databases is still not straightforward, however, this will change in the next few weeks. . We have only tested taxonomic annotations based on the UniProt KB (for which it should be pretty easy to build a database following the instructions on the [wiki](https://github.com/soedinglab/MMseqs2/wiki#prerequisites)). If you generate a mapping between a NCBI accession and its NCBI taxonomy identifier, you should be able to build an MMseqs2 taxonomy database, but we haven't done that yet ourselves. Also the `taxonomy` workflow requires to run [two additional searches](https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment-using-mmseqs-taxonomy). The second search is quite an expensive operation, since it requires high sensitivity searches against a large database.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299:481,access,accession,481,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299,1,['access'],['accession']
Security,"The version of MMseqs2 is: MMseqs2 Version: 12.113e3. CD-HIT command is: ; `cd-hit -i all_protein_final_95_rep.fasta.1 -c 0.95 -aS 0.9 -d 200 -M 0 -T 40 -g 0 -l 30 -o all_protein_final_95_rep_95_1.fasta`. log of default linclust is; kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . Database size: 773451991 type: Nucleotide. Generate k-mers list for 1 split; [=================================================================] 773.45M 1h 49m 32s 108ms. Adjusted k-mer length 18; Sort kmer 0h 0m 4s 610ms; Sort by rep. sequence 0h 0m 0s 325ms; Time for fill: 0h 0m 4s 175ms; Time for merging to pref: 0h 0m 0s 16ms; Time for processing: 2h 3m 42s 6ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N01",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:730,hash,hash-shift,730,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['hash'],['hash-shift']
Security,"There are a few accession formats (uniprot, gi, ...) that use pipes and we parse out the meaningful part of the accession.; You can override the default output format to `--format-output qheader,theader,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits` (normally `query,target,...`). To add the whole header, this might cause other issue with whitespace though.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871227927:16,access,accession,16,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/793#issuecomment-1871227927,2,['access'],['accession']
Security,"This is possible but a bit tricky:. Please make one FASTA file containing all sequence entries. Then call `createdb`; ```; mmseqs createdb YOUR_FASTA_FILE.fasta db; ```. Then take a look at the `db.lookup` file it generated.; You will find entries in the format:. ```; numeric_key accession set_id; ...; ```. The first two columns are important, you can ignore the last. You will need to make a new TSV file, of the keys of the two matching accessions. In your example, you should see something like the following in the `db.lookup`.; ```; 0 S10CNODE_1.fasta; 1 S10CNODE_2.fasta; 2 S10CNODE_3.fasta; 3 S10CNODE_4.fasta; 4 S10CNODE_5.fasta; 5 S1CNODE_25.fasta; 6 S2CNODE_8.fasta ; 7 S5CNODE_11.fasta ; 8 S3CNODE_7.fasta; 9 S6CNODE_10.fasta; ```. The new tsv file you need to create should look like this:; ```; 0 5; 1 6; 2 7; 3 8; 4 9; ...; ```. Next sort this file according to the first column:; ```; sort -k1,1n NEW_TSV_FILE.tsv > NEW_TSV_FILE_sort.tsv ; ```. Now you can pass this file to `tsv2db` and compute the alignments and generate a normal MMseqs2 m8 output:; ```; # 6 is a clustering database, which only requires a target key and nothing else; mmseqs tsv2db NEW_TSV_FILE_sort.tsv clu_db --output-dbtype 6; mmseqs align db db clu_db aln_db -a; mmseqs convertalis db db aln_db aln.m8; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/813#issuecomment-1944401542:281,access,accession,281,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/813#issuecomment-1944401542,2,['access'],"['accession', 'accessions']"
Security,"This is quite confusing. For whatever reason your system's `tar` doesn't use the default `--wildcards` option. It seems to be having `--no-wildcards` set as the default mode. I don't have access to RHEL, but in the centos 7.9 docker image this doesn't seem to happen. You can probably get around this issue by doing:. ```; TAR_OPTIONS=""--wildcards"" mmseqs databases Resfinder db/rf tmp; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/494#issuecomment-939160321:188,access,access,188,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/494#issuecomment-939160321,1,['access'],['access']
Security,"This looks about right. The `.lookup` contains mmseqs database key, accession, set id. The set id is referenced in the `.source` file. There you will find a list of set id and filename (the filename that was given to `createdb`). How does the corresponding `_mapping` entry look?; I would expect it to look like this (mmseqs database key tab taxonomy id):; ```; >grep 1046081 targetDB_mapping; 1046081\t2560625; ```. (Sorry for the slow answers, was a quite busy start into the new year.)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/387#issuecomment-762299994:68,access,accession,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/387#issuecomment-762299994,1,['access'],['accession']
Security,"WP 36792]; [New LWP 36793]; [New LWP 36794]; [New LWP 36795]; [New LWP 36796]; [New LWP 36797]; [New LWP 36798]; [New LWP 36799]; [New LWP 36800]; [New LWP 36801]; [New LWP 36802]; [New LWP 36803]; [New LWP 36804]; [New LWP 36805]; [New LWP 36806]; [New LWP 36807]; [New LWP 36808]; [New LWP 36809]; [New LWP 36810]; [New LWP 36811]; [New LWP 36812]; [New LWP 36813]; [New LWP 36814]; [New LWP 36815]; [New LWP 36816]; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; --Type <RET> for more, q to quit, c to continue without paging--RET; 0x00005623f9de6504 in CacheFriendlyOperations<512u>::hashIndexEntry(unsigned short, IndexEntryLocal*, unsigned long, CounterResult*) (); (gdb) bt; #0 0x00005623f9de6504 in CacheFriendlyOperations<512u>::hashIndexEntry(unsigned short, IndexEntryLocal*, unsigned long, CounterResult*) (); #1 0x00005623f9de68e5 in CacheFriendlyOperations<512u>::findDuplicates(IndexEntryLocal**, CounterResult*, unsigned long, unsigned short, unsigned short, bool) (); #2 0x00005623f9c42be0 in QueryMatcher::match(Sequence*, float*) (); #3 0x00005623f9c4393d in QueryMatcher::matchQuery(Sequence*, unsigned int) (); #4 0x00005623f9c2e113 in Prefiltering::runSplit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool) [clone ._omp_fn.1] (); #5 0x00007fdb5f003cff in GOMP_parallel () from /usr/lib/x86_64-linux-gnu/libgomp.so.1; #6 0x00005623f9c337f4 in Prefiltering::runSplit(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, unsigned long, bool) (); #7 0x00005623f9c352ae in Prefiltering::runSplits(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<ch",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-616635868:1043,hash,hashIndexEntry,1043,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-616635868,2,['hash'],['hashIndexEntry']
Security,"We do not currently have a very easy way to limit memory. For the prefilter (main module for normal sequences searches) you can specify an appropriate `--split` value, that will then reduce the required memory to (I think there is an error in the user guide, have to double check, but this should be the correct formula):. ```; (7 byte * N * L) / #splits + 8 byte * 21^k; ```. We have two more very memory intense modules:`swapresults` and `kmermatcher`. These are very important for profile searches and linclust. Their splitting logic is however not exposed to the command line interface yet. The clustering module also can use a lot of memory, but if you stay with the default cascaded clustering that should not become an issue. A hack to limit how much memory `swapresults`, `kmermatcher` and `prefilter` will use, would be to manually edit `size_t Util::getTotalSystemMemory()` in `commons/Util.cpp`. We will discuss what we can do about this limiting memory issue internally and get back to you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065:552,expose,exposed,552,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065,1,['expose'],['exposed']
Security,"We do not have any code in mmseqs2 that writes this core dump file. This is a feature of Linux. Core dumps can be deactivated in Linux using ulimit -c 0 (see https://linux-audit.com/understand-and-configure-core-dumps-work-on-linux/). . Normally a core dump occurs because the software crashes. Did you see that MMseqs2 ended with a seg. fault? . If you want a set of stickers though (see https://twitter.com/thesteinegger/status/1201076220957315074), sent me your address via mail.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/257#issuecomment-565100808:172,audit,audit,172,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/257#issuecomment-565100808,1,['audit'],['audit']
Security,"We give each sequence an internal identifier and cluster based on these. The accession coming from FASTA headers is only printed out when formatting plain text results (i.e. with `convertalis` or `createtsv`). So it doesn't affect the clustering, but makes downstream processing more difficult. I would recommend to add some suffix to each accession in the input FASTA with e.g. `awk`:; ```; awk '/^>/ { cnt++; $1=$1""_""cnt } { print; }' input.fasta > input_suffix.fasta; mmseqs easy-search input_suffix.fasta targetDB result.m8 tmp; ```; Or with current git MMseqs2 you can pipe the `awk` input directly to MMseqs2:; ```; awk '/^>/ { cnt++; $1=$1""_""cnt } { print; }' input.fasta | mmseqs easy-search stdin targetDB result.m8 tmp; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/270#issuecomment-582873060:77,access,accession,77,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/270#issuecomment-582873060,2,['access'],['accession']
Security,"We have decided against semantic versioning a while ago. Getting consensus on a versioning scheme was kind of difficult, I don't want to reopen that can of worms. Generally we decide every few months that we have a new release and increment the version number by one. Additionally we add a short git hash to the string. You should use the CMake `-DVERSION_OVERRIDE` parameter to override the version string when you package MMseqs2 (see ; https://github.com/soedinglab/MMseqs2/wiki#customizing-compilation-through-cmake for cmake flags, if you are packaging MMseqs2 for a Linux distribution you might want to pay close attention to how Debian dealt with multi-arch and different SIMD levels of x64). I've linked bioconda, homebrew and debian below if you want to see packaging is dealt with in other places:; https://github.com/bioconda/bioconda-recipes/blob/master/recipes/mmseqs2/build.sh; https://github.com/Homebrew/homebrew-core/tree/master/Formula/mmseqs2.rb; https://salsa.debian.org/med-team/mmseqs2/-/blob/master/debian/rules#L34",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-764877090:300,hash,hash,300,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-764877090,1,['hash'],['hash']
Security,We just created the first release after vNatBiotech. The version numbering system is: running number followed by the five first characters of the release commit hash. (e.g. 1-c7a89).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/46#issuecomment-340253375:161,hash,hash,161,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/46#issuecomment-340253375,1,['hash'],['hash']
Security,"We validate that (most) float parameters have a leading zero (or other number in-front of the `.`) if they are given in non-scientific notation, or alternatively in scientific-notation. A similar issue was reported here:; https://github.com/soedinglab/MMseqs2/issues/640. I guess we could relax the validation step.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/682#issuecomment-1473648571:3,validat,validate,3,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/682#issuecomment-1473648571,2,['validat'],"['validate', 'validation']"
Security,"We were a bit busy with a paper submission, sorry for the delay. This behavior is kind of okay and expected.; The procedure to map an NR entry to a taxonomic label is a bit involved since NCBI's NR, accession2taxid and taxdump don't match very well and it's difficult to bring them into a consistent state. This message happens when we can parse a taxonomic identifier looking the accession up in one of the accession2taxid files, but the taxonomic identifier is not contained in the taxdump anymore. In this case we either try to take the taxonomic identifier of the next sequence that was clustered into this entry or leave this entry unannotated (thus it cannot contribute to LCA computation despite being findable through searching). For nearly all sequences the mapping procedure works correctly (331375261 vs 331433500). The remaining 50K entries are however kind of tricky and we don't have a good solution yet to get a taxonomic identifier automatically for those.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/381#issuecomment-744417949:381,access,accession,381,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/381#issuecomment-744417949,1,['access'],['accession']
Security,"Yes perhaps I am using `taxonomyreport` in an unusual way. . I wanted to cluster sequences of all the proteins with a domain from the NCBI domain database so I got a list of accession numbers of all the proteins containing that domain, made a fasta file with them (using `blastdbcmd`), then created a taxidmapping for those sequences. Using the fasta file and the taxidmapping, I made a seqTaxDB (`createtaxdb` with `--tax-mapping-file` option). . I then ran `cluster` on the database, and then `taxonomyreport` on the cluster database which worked great. I wanted to compare the taxonomic distribution of the clustered sequences to the original set of sequences so I tried `taxonomyreport seqTaxDB seqTaxDB report`. Perhaps there is a better way to do what I am trying to do?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/408#issuecomment-774697002:174,access,accession,174,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/408#issuecomment-774697002,1,['access'],['accession']
Security,"`createtaxdb` does a somewhat inefficient procedure of downloading the rather large idmapping file from uniprot and using that for mapping to taxids. I would recommend to use the `databases` workflow, which doesn't need the idmapping. And then creating a subset of the database with a combination of the `createsubdb` module and the `db.lookup` file. The `.lookup` file has a mapping of internal database identifiers to accessions. So you can make a list of database identifiers you want to keep and then call `createsubdb`:. ```; mmseqs createsubdb subset.tsv swissprot swissprot_subset; ```. Alternatively if you want specific taxa in your database you can use the `filtertaxseqdb` module:. ```; mmseqs filtertaxseqdb swissprot swissprot_human --taxon-list 9606; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/346#issuecomment-687244044:420,access,accessions,420,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/346#issuecomment-687244044,1,['access'],['accessions']
Security,"`dbtype` is a recent development that is going to help a lot with usability with some planned enhancements, such as automatic validation of input database types (which is a huge usability pitfall currently). `tsv2db` needs a flag to specify what the output dbtype is supposed to be. I'll add that soon. The requirement for the indexed database format (the file itself and the corresponding `.index` files) exist since the beginning of mmseqs' development. There is no other feasible solution to fast linear and random access in millions or billions of entries that we are currently handling. . How can we improve the user experience with regards to workflow management systems in your view?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-458961987:126,validat,validation,126,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-458961987,2,"['access', 'validat']","['access', 'validation']"
Security,"able 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 303 0s 29ms; Sort kmer 0h 0m 0s 2ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 160ms; rescorediagonal ../DB_in/fasta_in_db_HC ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref tmp//538598962955004214/linclust/16628284907041385511/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [===================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:3770,hash,hash-shift,3770,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['hash'],['hash-shift']
Security,"alse; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	20; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db tmp/425628692068579862/linclust/13628666274102407548/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 20 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 32000 --hash-shift 5 --split-memory-limit 0 --threads 10 -v 3 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	20; Mask Residues 	0; Coverage Mode 	0; K-mer size 	0; Coverage threshold 	0.8; Max. sequence length	32000; Shift hash 	5; Split Memory Limit 	0; Threads 	10; Verbosity 	3. Alphabet size: 13 k-mer size: 10; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X ; Checking requirements; Needed memory (795683200 byte) of total memory (365681560780 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; ...................................................................................................	2 Mio. sequences processed; ................................................; Time for fill: 0 h 0 m 14s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 4s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 2s; Time for fill: 0 h 0 m 0s; Time for merging files: 0 h 0 m 2 s; Time for processing: 0 h 0 m 23s; Rescore diagonals.; Program call:; panproteome.db panproteome.db tmp/425628692068579862/linclust/13628666274102",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:95528,hash,hash,95528,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['hash'],['hash']
Security,"an optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short projects always lean heavily on the distro. As for bugs, you can always strongly suggest that bug reports and issues be filed against your own project-compiled binaries and test against those binaries first when tracking bugs.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1514,access,access,1514,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,2,"['access', 'hash']","['access', 'hashing']"
Security,"angjin/01_gene_cat/protein_cat/all_protein_final_95_rep /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep.fasta . MMseqs Version:	12.113e3; Use header DB	false; Verbosity 	3. Start writing file to /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep.fasta; Time for processing: 0h 54m 42s 51ms. log of linclust with `--kmer-per-seq to 80`. kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 600G --include-only-extendable 0 --ignore-multi-kmer 0 --threads 50 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 600G --include-only-extendable 0 --ignore-multi-kmer 0 --threads 50 --compressed 0 -v 3 . Database size: 773451991 type: Nucleotide. Not enough memory to process at once need to split; [=================================================================] 773.45M 1h 49m 44s 916ms; Process file into 1 parts; Generate k-mers list for 1 split; [====================================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:9698,hash,hash-shift,9698,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['hash'],['hash-shift']
Security,"anshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . Database size: 773451991 type: Nucleotide. Generate k-mers list for 1 split; [=================================================================] 773.45M 1h 49m 32s 108ms. Adjusted k-mer length 18; Sort kmer 0h 0m 4s 610ms; Sort by rep. sequence 0h 0m 0s 325ms; Time for fill: 0h 0m 4s 175ms; Time for merging to pref: 0h 0m 0s 16ms; Time for processing: 2h 3m 42s 6ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:1351,hash,hash-shift,1351,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['hash'],['hash-shift']
Security,"as-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 303 0s 29ms; Sort kmer 0h 0m 0s 2ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 160ms; rescorediagonal ../D",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:3292,hash,hash-shift,3292,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['hash'],['hash-shift']
Security,"ax-seqs300_2.db /tmp/test --kmer-per-seq 80 --max-seqs 300 --min-seq-id 0.8 -c 0.8 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	4; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:1576,hash,hash,1576,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Cluster mode 0; Max depth connected component 1000; Similarity type 2; Threads 64; Verbosity 3; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 2; E-value threshold 0.001; Seq. Id Threshold 0.9; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0.8; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; No preload false; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Alphabet size 21; Kmer per sequence 21; Mask Residues 0; K-mer size 0; Shift hash 5; Split Memory Limit 0; Include only extendable false; Skip sequence with n repeating k-mers 0; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Remove Temporary Files false; Sets the MPI runner. Set cluster mode SET COVER.; Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp/13736030087838361561/pref /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/clu_tmp/13736030087838361561/pref_rescore1 --sub-mat blosum62.out --rescore-mode 0 -e 0.001 -c 0.8",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120:3460,hash,hash,3460,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120,1,['hash'],['hash']
Security,"c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 1951 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 1.95K 0s 41ms; Sort kmer 0h 0m 0s 1ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 156ms; rescorediagonal D",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:3197,hash,hash-shift,3197,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['hash'],['hash-shift']
Security,"corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 136 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 136 0s 41ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 149ms; rescorediagonal a",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:3516,hash,hash-shift,3516,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['hash'],['hash-shift']
Security,"de only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 1.000000; Set cluster mode SET COVER; Set cluster iterations to 1; linclust DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/clu_redundancy DB_clustered/tmp/17526443716087640986/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-li",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:2657,hash,hash-shift,2657,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['hash'],['hash-shift']
Security,"e-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 -; -gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21; --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-pr; ob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --; ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-re; use 0 ; ; kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-mem; ory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 6 --compressed 0 -v 3 . kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-; prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-mem; ory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 6 --compressed 0 -v 3 . Invalid non-numeric value for environment variable MMSEQS_CALL_DEPTH!; Error: kmermatcher died; Error: linclust died; ```. My knowledge of mmseqs and its output format is limited and any help would be much appreciated. I also wonder why there does not seem to be any file/flag directing the output of uniclust50 to uniclust30, which might not make it hierarchical. If I wan",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:7093,hash,hash-shift,7093,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['hash'],['hash-shift']
Security,"e/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index; 31mInvalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index. [... a lot of output ...]. 31mSize of data: 363542; mRequested offset: 412570; Requested offset: 399738; 31mRequested offset: 367758; Requested offset: 408364; 31mRequested offset: 386682; 39mRequested offset: 393723; mRequested offset: 403458; Requested offset: 381782; 39mRequested offset: 413970; mRequested offset: 406964; m31Requested offset: 398528; Requested offset: 367053; mRequested offset: 415370; Error: result2repseq died; ```. conda env:. ```; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 0_gnu conda-forge; bzip2 1.0.8 h516909a_2 conda-forge; ca-certificates 2020.6.20 hecda079_0 conda-forge; certifi 2020.6.20 py38h32f6830_0 conda-forge; fasta-splitter 0.2.6 0 bioconda; gawk 5.1.0 h516909a_0 conda-forge; gettext 0.19.8.1 hc5be6a0_1002 conda-forge; ld_impl_linux-64 2.34 h53a641e_7 conda-forge; libblas 3.8.0 17_openblas conda-forge; libcblas 3.8.0 17_openblas conda-forge; libffi 3.2.1 he1b5a44_1007 conda-forge; libgcc-ng 9.2.0 h24d8f2e_2 conda-forge; libgfortran-ng 7.5.0 hdf63c60_6 conda-forge; libgomp 9.2.0 h24d8f2e_2 conda-forge; libidn2 2.3.0 h516909a_0 conda-forge; liblapack 3.8.0 17_openblas conda-forge; libopenblas 0.3.10 pthreads_hb3c22a3_3 conda-forge; libstdcxx-ng 9.2.0 hdf63c60_2 conda-forge; libunistring 0.9.10 h14c3975_0 conda-forge; llvm-openmp 8.0.1 hc9558a2_0 conda-forge; mmseqs2 11.e1a1c h2d02072_0 bioconda; ncurses 6.2 he1b5a44_1 conda-forge; numpy 1.19.0 py38h8854b6b_0 conda-forge; openmp 8.0.1 0 conda-forge; openssl 1.1.1g h516909a_0 conda-forge; perl 5.26.2 h516909a_1006 conda-forge; perl-constant 1.33 pl",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914:2640,certificate,certificates,2640,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914,1,['certificate'],['certificates']
Security,"eq-id 0.90 --kmer-per-seq 40 -c 0.9. MMseqs Version: 290668474611312a94a868bf041b38c8618f5ef6; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Threads 160; Compressed 0; Verbosity 3; Substitution matrix nucl:nucleotide.out,aa:blosum62.out; Add backtrace false; Alignment mode 2; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0.9; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Coverage threshold 0.9; Coverage mode 0; Max sequence length 65535; Compositional bias 1; Realign hits false; Max reject 2147483647; Max accept 2147483647; Include identical seq. id. false; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Gap open cost 11; Gap extension cost 1; Zdrop 40; Alphabet size nucl:5,aa:21; k-mers per sequence 40; Spaced k-mers 0; Spaced k-mer pattern; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Mask residues 0; Mask lower case residues 0; k-mer length 0; Shift hash 67; Split memory limit 0; Include only extendable false; Skip repeating k-mers false; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Remove temporary files false; Force restart with latest tmp false; MPI runner. Set cluster mode SET COVER.; kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-mul; ti-kmer 0 --threads 160 --compressed 0 -v 3. kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311:1406,hash,hash,1406,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311,1,['hash'],['hash']
Security,"hold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/clu//9559457551393989073/linclust/16641318581476709947/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 36 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	36; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; .............; Time for fill: 0 h 0 m 2s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 3s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 2s; Tim",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:23243,hash,hash-shift,23243,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash-shift']
Security,"ilarity-type 2 --threads 6 --compressed 0 -v 3 --sub-mat 'aa:blosum62.out,nucl:nucle; otide.out' -a 0 --alignment-mode 3 --alignment-output-mode 0 --wrapped-scoring 0 -e 0.001 --min-seq-i; d 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-c; orr 1 --comp-bias-corr-scale 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0; --db-load-mode 0 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --sco; re-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --corr-score-weight 0 -; -gap-open aa:11,nucl:5 --gap-extend aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21; --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-pr; ob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --; ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-re; use 0 ; ; kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-mem; ory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 6 --compressed 0 -v 3 . kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-; prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:6483,hash,hash-shift,6483,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['hash'],['hash-shift']
Security,"ld 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	10; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; .............; Time for fill: 0 h 0 m 2s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 7s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 4s; T",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:3737,hash,hash-shift,3737,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash-shift']
Security,"lower case residues 0; Minimum diagonal score 15; Include identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0.9; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Realign hits false; Max reject 2147483647; Max accept 2147483647; Score bias 0; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign false; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 1.000000; Set cluster mode SET COVER; Set cluster iterations to 1; linclust DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/clu_redundancy DB_clustered/tmp/17526443716087640986/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 0 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extend",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:1700,hash,hash,1700,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['hash'],['hash']
Security,"ly extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust ../DB_in/fasta_in_db_HC tmp//538598962955004214/clu_redundancy tmp//538598962955004214/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher ../DB_in/fasta_in_db_HC tmp//538598962955004214/linclust/16628284907041385511/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:2760,hash,hash-shift,2760,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['hash'],['hash-shift']
Security,"mory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 303 0s 20ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 92ms; rescorediagonal DB_in DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref tmp//10798751672030653963/linclust/5052420726377277994/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [=================================================================] 100",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:3920,hash,hash-shift,3920,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['hash'],['hash-shift']
Security,"multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 1951 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 1.95K 0s 41ms; Sort kmer 0h 0m 0s 1ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 156ms; rescorediagonal DB_in/shuffle_in DB_in/shuffle_in DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref DB_clustered/tmp/17526443716087640986/linclust/4509971647793470292/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 -e 0.001 -c 0.8 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 16 --compressed 0 -v 3. [============================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093:3683,hash,hash-shift,3683,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/398#issuecomment-767060093,1,['hash'],['hash-shift']
Security,"n 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in tmp//10798751672030653963/linclust/5052420726377277994/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. Database size: 303 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 303 0s 20ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 0ms; Time for processing: 0h 0m 0s 92ms; rescorediagonal DB_in DB_in tmp//10798",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:3459,hash,hash-shift,3459,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['hash'],['hash-shift']
Security,"nclude identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Max reject 2147483647; Max accept 2147483647; Score bias 0; Realign hits false; Realign score bias -0.2; Realign max seqs 2147483647; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust ../DB_in/fasta_in_db_HC tmp//538598962955004214/clu_redundancy tmp//538598962955004214/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-e",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853:1798,hash,hash,1798,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773234853,1,['hash'],['hash']
Security,"nclude identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Max reject 2147483647; Max accept 2147483647; Score bias 0; Realign hits false; Realign score bias -0.2; Realign max seqs 2147483647; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust DB_in tmp//10798751672030653963/clu_redundancy tmp//10798751672030653963/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:1996,hash,hash,1996,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['hash'],['hash']
Security,"nclude identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Max reject 2147483647; Max accept 2147483647; Score bias 0; Realign hits false; Realign score bias -0.2; Realign max seqs 2147483647; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust artificial2/DB_artificial tmp//7897776346521331899/clu_redundancy tmp//7897776346521331899/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-on",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:2015,hash,hash,2015,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['hash'],['hash']
Security,"nd aa:1,nucl:2 --zdrop 40 --alph-size aa:13,nucl:5 --kmer-per-seq 21; --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-pr; ob 0.9 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --; ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-re; use 0 ; ; kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-mem; ory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 6 --compressed 0 -v 3 . kmermatcher /home/outdir/2023_06/tmp/input_step2 /home/outdir/2023_06/tmp/clu_uniclust30/13156544047496927710/linclust/2296487886038157831/pref --; sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --alph-size aa:13,nucl:5 --min-seq-id 0 --kmer-per-seq ; 21 --spaced-kmer-mode 1 --kmer-per-seq-scale aa:0.000,nucl:0.200 --adjust-kmer-len 0 --mask 0 --mask-; prob 0.9 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-mem; ory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 6 --compressed 0 -v 3 . Invalid non-numeric value for environment variable MMSEQS_CALL_DEPTH!; Error: kmermatcher died; Error: linclust died; ```. My knowledge of mmseqs and its output format is limited and any help would be much appreciated. I also wonder why there does not seem to be any file/flag directing the output of uniclust50 to uniclust30, which might not make it hierarchical. If I want to also implement a ""uniclust70"" -> uniclust50 -> uniclust30, which line(s) should I look for? Let me know if I have missed anything.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536:7646,hash,hash-shift,7646,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/700#issuecomment-1589819536,1,['hash'],['hash-shift']
Security,"pdate/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size 13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale 0 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 12 --compressed 0 -v 3. kmermatcher /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size 13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale 0 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 12 --compressed 0 -v 3. Database size: 6 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 6 0s 1ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0m 0s 0ms; Time for fill: 0h 0m 0s 0ms; Time for merging to pref: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 22ms; rescorediagonal /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/84504",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:8430,hash,hash-shift,8430,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['hash'],['hash-shift']
Security,"q. id. false; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Gap open cost 11; Gap extension cost 1; Zdrop 40; Alphabet size nucl:5,aa:21; k-mers per sequence 40; Spaced k-mers 0; Spaced k-mer pattern; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Mask residues 0; Mask lower case residues 0; k-mer length 0; Shift hash 67; Split memory limit 0; Include only extendable false; Skip repeating k-mers false; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Remove temporary files false; Force restart with latest tmp false; MPI runner. Set cluster mode SET COVER.; kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-mul; ti-kmer 0 --threads 160 --compressed 0 -v 3. kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-mul; ti-kmer 0 --threads 160 --compressed 0 -v 3. Database size: 2830651961 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 2.83B 2h 28m 50s 478ms. Sort kmer 1h 11m 10s 680ms; Time for fill: 0h 14m 35s 645ms; Time for merging to pref: 0h 31m 17s 620ms; Time for processing: 5h 43m 57s 88ms; rescorediagonal inDB inDB tmp/18375844090983922724/pref tmp/183758",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311:1993,hash,hash-shift,1993,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311,1,['hash'],['hash-shift']
Security,"qs 300`. ```; Program call:; panproteome.db panproteome.db_clu /tmp/clu/ --kmer-per-seq 80 --max-seqs 300 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	4; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	36; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/clu/ folder does not exist or is not a directory.; Created dir /tmp/clu/; Set cluster settings automatic to s=6; Set cluster mode SET COVER.; Set cluster iterations to 3; Program call:; panproteome.db /tmp/clu//9559457551393989073/clu_redundancy /tmp/clu//9559457551393989073/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 36 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-l",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:21086,hash,hash,21086,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash']
Security,"shangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 600G --include-only-extendable 0 --ignore-multi-kmer 0 --threads 50 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 600G --include-only-extendable 0 --ignore-multi-kmer 0 --threads 50 --compressed 0 -v 3 . Database size: 773451991 type: Nucleotide. Not enough memory to process at once need to split; [=================================================================] 773.45M 1h 49m 44s 916ms; Process file into 1 parts; Generate k-mers list for 1 split; [=================================================================] 773.45M 3m 43s 762ms. Adjusted k-mer length 18; Sort kmer 0h 0m 8s 851ms; Sort by rep. sequence 0h 0m 0s 535ms; Merge splits ... Time for fill: 0h 0m 8s 279ms; Time for merging to pref: 0h 0m 0s 18ms; Time for processing: 2h 8m 37s 699ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref /hwfssz1/ST_DIVERSITY/P18",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:10320,hash,hash-shift,10320,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['hash'],['hash-shift']
Security,"sk lower case residues 0; Minimum diagonal score 15; Include identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Realign hits false; Max reject 2147483647; Max accept 2147483647; Score bias 0; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 1; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash 67; Include only extendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Connected component clustering produces less clusters in a single step clustering.; Please use --single-step-clusterSet cluster iterations to 3; linclust DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/clu_redundancy tmpfiles//13298481167543164943/linclust --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:1674,hash,hash,1674,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['hash'],['hash']
Security,"sorry, reopening in case you want to close with a commit to update the validation regex.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-305596238:71,validat,validation,71,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/33#issuecomment-305596238,1,['validat'],['validation']
Security,"t 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 1 --force-reuse 0. MMseqs Version: 	6b9388469a41935813f5d207d6d149767feb4c42-MPI; Cluster mode 	0; Max connected component depth 	1000; Similarity type 	2; Threads 	24; Compressed 	0; Verbosity 	3; Weight file name; Cluster Weight threshold 	0.9; Substitution matrix 	aa:blosum62.out,nucl:nucleotide.out; Add backtrace 	false; Alignment mode 	3; Alignment mode 	0; Allow wrapped scoring 	false; E-value threshold 	0.001; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0.8; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Compositional bias 	1; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	substitution:1.100,context:1.400; Pseudo count b 	substitution:4.100,context:5.800; Score bias 	0; Realign hits 	false; Realign score bias 	-0.2; Realign max seqs 	2147483647; Correlation score weight 	0; Gap open cost 	aa:11,nucl:5; Gap extension cost 	aa:1,nucl:2; Zdrop 	40; Alphabet size 	aa:13,nucl:5; k-mers per sequence 	21; Spaced k-mers 	1; Spaced k-mer pattern; Scale k-mers per sequence 	aa:0.000,nucl:0.200; Adjust k-mer length 	false; Mask residues 	0; Mask residues probability 	0.9; Mask lower case residues 	0; k-mer length 	0; Shift hash 	67; Split memory limit 	0; Include only extendable 	false; Skip repeating k-mers 	false; Rescore mode 	0; Remove hits by seq. id. and coverage	false; Sort results 	0; Remove temporary files 	true; Force restart with latest tmp 	false; MPI runner. [][error_sighandler] Caught error: Segmentation fault (signal 11); tmp2/6664721939282577716/clu_tmp/1194185237556116514/linclust/18444629910076322402/linclust.sh: line 26: 63437 Segmentation fault $RUNNER ""$MMSEQS"" kmermatcher ""$INPUT"" ""${TMP_PATH}/pref"" ${KMERMATCHER_PAR}; Error: kmermatcher died; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364:4014,hash,hash,4014,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461610364,1,['hash'],['hash']
Security,"t>::comparePairByOffset, ips4o::Config<true, 16l, 16l, 2048l, long, 4096ul, 5l, 8, 4l, 20, 7>, ips4o::OpenMPThreadPool>&&, int) at thread_pool.hpp:94:1; frame #18: 0x000000000042cb21 mmseqs`ips4o::ParallelSorter<ips4o::ExtendedConfig<std::__1::pair<unsigned int, unsigned long>*, DBReader<unsigned int>::comparePairByOffset, ips4o::Config<true, 16l, 16l, 2048l, long, 4096ul, 5l, 8, 4l, 20, 7>, ips4o::OpenMPThreadPool> >::operator(this=0x00007fffffffbb88, begin=0x0000000802a7fe80, end=0x0000000802ba0f70)(std::__1::pair<unsigned int, unsigned long>*, std::__1::pair<unsigned int, unsigned long>*) at parallel.hpp:189:9; frame #19: 0x000000000042c776 mmseqs`void ips4o::parallel::sort<ips4o::Config<true, 16l, 16l, 2048l, long, 4096ul, 5l, 8, 4l, 20, 7>, std::__1::pair<unsigned int, unsigned long>*, DBReader<unsigned int>::comparePairByOffset>(begin=0x0000000802a7fe80, end=0x0000000802ba0f70, comp=comparePairByOffset @ 0x00007fffffffbbf0, num_threads=32) at ips4o.hpp:128:9; frame #20: 0x00000000003ee74f mmseqs`void ips4o::parallel::sort<std::__1::pair<unsigned int, unsigned long>*, DBReader<unsigned int>::comparePairByOffset>(begin=0x0000000802a7fe80, end=0x0000000802ba0f70, comp=comparePairByOffset @ 0x00007fffffffbc40) at ips4o.hpp:137:5; frame #21: 0x00000000003eaab7 mmseqs`DBReader<unsigned int>::sortIndex(this=0x00007fffffffd2b0, isSortedById=true) at DBReader.cpp:367:9; frame #22: 0x00000000003efebe mmseqs`DBReader<unsigned int>::open(this=0x00007fffffffd2b0, accessType=2) at DBReader.cpp:185:9; frame #23: 0x0000000000639482 mmseqs`offsetalignment(argc=20, argv=0x00007fffffffd8a8, command=0x0000000800f5a220) at offsetalignment.cpp:261:12; frame #24: 0x000000000038731f mmseqs`runCommand(p=0x0000000800f5a220, argc=20, argv=0x00007fffffffd8a8) at Application.cpp:38:18; frame #25: 0x0000000000388596 mmseqs`main(argc=22, argv=0x00007fffffffd898) at Application.cpp:196:9; frame #26: 0x0000000000386400 mmseqs`_start(ap=<unavailable>, cleanup=<unavailable>) at crt1.c:76:7. ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870067769:11417,access,accessType,11417,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870067769,1,['access'],['accessType']
Security,"tch/nyoungblut/Struo2_122419461619/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately -v 3 --subdb-mode 1. Time for merging to toBeClusteredSeparately: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 114ms; ===================================================; ===== Cluster separately the alone sequences ======; ===================================================; kmermatcher /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size 13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale 0 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 12 --compressed 0 -v 3. kmermatcher /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/toBeClusteredSeparately /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/cluster/3119053913462861916/linclust/8450400992607156393/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size 13 --min-seq-id 0.9 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale 0 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 12 --compressed 0 -v 3. Database size: 6 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 6 0s 1ms; Sort kmer 0h 0m 0s 0ms; Sort by rep. sequence 0h 0",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:7803,hash,hash-shift,7803,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['hash'],['hash-shift']
Security,"teome.db file. mkdir tmp; mmseqs cluster panproteome.db families.db tmp --min-seq-id 0.8 -c 0.8 --threads 10. ```; Program call:; panproteome.db families.db tmp --min-seq-id 0.8 -c 0.8 --threads 10 . MMseqs Version: 	GITDIR-NOTFOUND; Sub Matrix 	blosum62.out; Sensitivity 	4; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	32000; Max. results per query 	20; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	20; Shift hash 	5; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db tmp/425628692068579862/clu_redundancy tmp/425628692068579862/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 -c 0.8 --cov-mode 0 --max-seq-len 32000 --max-seqs 20 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 20 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --rescore-mode 0 . MMseqs Version: 	GITDIR-NOTFOUND; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub M",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251:93414,hash,hash,93414,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391976251,1,['hash'],['hash']
Security,"ting k-mers false; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Remove temporary files false; Force restart with latest tmp false; MPI runner. Set cluster mode SET COVER.; kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-mul; ti-kmer 0 --threads 160 --compressed 0 -v 3. kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-mul; ti-kmer 0 --threads 160 --compressed 0 -v 3. Database size: 2830651961 type: Aminoacid; Reduced amino acid alphabet: (A S T) (C) (D B N) (E Q Z) (F Y) (G) (H) (I V) (K R) (L J M) (P) (W) (X). Generate k-mers list for 1 split; [=================================================================] 100.00% 2.83B 2h 28m 50s 478ms. Sort kmer 1h 11m 10s 680ms; Time for fill: 0h 14m 35s 645ms; Time for merging to pref: 0h 31m 17s 620ms; Time for processing: 5h 43m 57s 88ms; rescorediagonal inDB inDB tmp/18375844090983922724/pref tmp/18375844090983922724/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --wrapped-scoring 0 --filter-hits 0 ; -e 0.001 -c 0.9 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 160 --compressed 0 -v 3. [=================================================================] 100.00% 2.83B 1h 11m 50s 841ms. [================================",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311:2429,hash,hash-shift,2429,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311,1,['hash'],['hash-shift']
Security,"true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	fal",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:2444,hash,hash-shift,2444,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['hash'],['hash-shift']
Security,"ty to -s 6.000000; Connected component clustering produces less clusters in a single step clustering.; Please use --single-step-clusterSet cluster iterations to 3; linclust DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/clu_redundancy tmpfiles//13298481167543164943/linclust --cluster-mode 1 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher DB_in/fasta_in_db_HC tmpfiles//13298481167543164943/linclust/10229649346622198404/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412:2707,hash,hash-shift,2707,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771572412,1,['hash'],['hash-shift']
Security,"xtendable false; Skip repeating k-mers false. Set cluster sensitivity to -s 6.000000; Set cluster iterations to 3; linclust artificial2/DB_artificial tmp//7897776346521331899/clu_redundancy tmp//7897776346521331899/linclust --cluster-mode 0 --max-iterations 1000 --similarity-type 2 --threads 16 --compressed 0 -v 3 --sub-mat nucl:nucleotide.out,aa:blosum62.out -a 0 --alignment-mode 3 --wrapped-scoring 0 -e 0.001 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --realign 0 --realign-score-bias -0.2 --realign-max-seqs 2147483647 --gap-open nucl:5,aa:11 --gap-extend nucl:2,aa:1 --zdrop 40 --alph-size nucl:5,aa:13 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 -k 0 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --rescore-mode 0 --filter-hits 0 --sort-results 0 --remove-tmp-files 0 --force-reuse 0. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --include-only-extendable 0 --ignore-multi-kmer 0 --threads 16 --compressed 0 -v 3. kmermatcher artificial2/DB_artificial tmp//7897776346521331899/linclust/17269245559208916342/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0 --kmer-per-seq 21 --spaced-kmer-mode 1 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 0 --in",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998:2981,hash,hash-shift,2981,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775778998,1,['hash'],['hash-shift']
Testability,"	; Remove Temporary Files 	false; ```. And this the stderr:. ```; MCW rank 0 bound to socket 0[core 0[hwt 0-1]], socket 0[core 1[hwt 0-1]], socket 0[core 2[hwt 0-1]], socket 0[core 3[hwt 0-1]], socket 0[core 4[hwt 0-1]], socket 0[core 5[hwt 0-1]], socket 0[core 6[hwt 0-1]], socket 0[core 7[hwt 0-1]]: [BB/BB/BB/BB/BB/BB/BB/BB][../../../../../../../..][../../../../../../../..][../../../../../../../..]; + '[' -z /ngs/software/mmseqs/mmseqs-MPI ']'; + '[' 4 -ne 4 ']'; + '[' '!' -f mmseq-testDB ']'; + '[' '!' -f /junk/databases/mmseqs/test-nr-50m ']'; + '[' -f test-nr50-th32-MPI ']'; + '[' '!' -d tmp ']'; + export OMP_PROC_BIND=TRUE; + OMP_PROC_BIND=TRUE; ++ abspath mmseq-testDB; ++ '[' -d mmseq-testDB ']'; ++ '[' -f mmseq-testDB ']'; ++ [[ mmseq-testDB == */* ]]; +++ pwd; ++ echo /home/dabia/bench/mmseqs/mmseq-testDB; + INPUT=/home/dabia/bench/mmseqs/mmseq-testDB; ++ abspath /junk/databases/mmseqs/test-nr-50m; ++ '[' -d /junk/databases/mmseqs/test-nr-50m ']'; ++ '[' -f /junk/databases/mmseqs/test-nr-50m ']'; ++ [[ /junk/databases/mmseqs/test-nr-50m == */* ]]; +++ cd /junk/databases/mmseqs; +++ pwd; ++ echo /junk/databases/mmseqs/test-nr-50m; + TARGET=/junk/databases/mmseqs/test-nr-50m; ++ abspath tmp; ++ '[' -d tmp ']'; ++ cd tmp; ++ pwd; + TMP_PATH=/home/dabia/bench/mmseqs/tmp; + SENS=5; + '[' 5 -le 5 ']'; + notExists /home/dabia/bench/mmseqs/tmp/pref_5; + '[' '!' -f /home/dabia/bench/mmseqs/tmp/pref_5 ']'; + /ngs/software/mmseqs/mmseqs-MPI prefilter /home/dabia/bench/mmseqs/mmseq-testDB /junk/databases/mmseqs/test-nr-50m /home/dabia/bench/mmseqs/tmp/pref_5 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 -c 0 --comp-bias-corr 1 --diag-score 1 --mask 1 --min-ungapped-score 15 --spaced-kmer-mode 1 --threads 8 -v 3 -s 5; ```. It doesn't crash, but don't get any further. The process is using just 1 core.; Increasing --np to 4, results in 4 instances of mmseqs with 8 threads, that c",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:3806,test,testDB,3806,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,17,['test'],"['test-', 'test-nr-', 'testDB']"
Testability,"	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id.	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Init data structures...; Compute score, coverage and sequence id.; Using 10 threads.; Query database type: Aminoacid; Target database type: Aminoacid; Calculation of Smith-Waterman alignments.; ..Time for merging files: 0 h 0 m 0 s. All sequences processed. 669036 alignments calculated.; 643006 sequence pairs passed the thresholds (0.961093 of overall calculated).; 23.1447 hits per query sequence.; Time for alignments calculation: 0 h 1 m 58s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/aln_step0 /tmp/test/9465698490903227639/clu_step0 --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ..; Sort entries. Find missing connections. Found 0 new connections. Reconstruct initial order.; ..; Add missing connections.; ..; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 27782; Size of the alignment database: 27782; Number of clusters: 22311; Program call:; panproteome.db /tmp/test/9465698490903227639/clu /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/clu_step0 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:17709,test,test,17709,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,3,['test'],['test']
Testability," (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expecte",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2271,TEST,TEST,2271,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability," --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	0; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: panproteome.db; Target file: panproteome.db; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1; ...................................................................................................	1 Mio. sequences processed; .............Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 3s; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1 /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...................................................................................................	1 Mio. sequences processed; .............; Sort entries. Find missing connections. Found 1770113 new connections. Reconstruct initial order.; ...................................................................................................	1 Mio. sequences processed; .............; Add missing connections.; ...................................................................................................	1 Mio. sequences processed; .............; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for cluste",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:6044,test,test,6044,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,2,['test'],['test']
Testability, 0 m 0s. Size of the sequence database: 1132486; Size of the alignment database: 1132486; Number of clusters: 32435; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Filter column 	1; Column to take 	-1; Filter regex 	^.*$; Positive filter 	true; Filter file 	/tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy; Beats first 	false; Mapping file 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical comparison operator 	; Numerical comparison value 	0; Sort entries 	0; Include identical Seq. Id. 	false; join to DB 	; Swap fields of search results 	; Replace transitively 	. Filtering with a filter files.; ...Time for merging files: 0 h 0 m 0 s; Rescore diagonals.; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/t,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:8048,test,test,8048,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability," 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expec",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1437,TEST,TEST,1437,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability," CXX=""$(brew --prefix)/bin/gcc-6"" cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 6.2.0; -- Checking whether CXX compiler has -isysroot; -- Checking whether CXX compiler has -isysroot - yes; -- Checking whether CXX compiler supports OSX deployment target flag; -- Checking whether CXX compiler supports OSX deployment target flag - yes; -- Check for working CXX compiler: /usr/local/bin/gcc-6; -- Check for working CXX compiler: /usr/local/bin/gcc-6 -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Sourcedir /Users/moorer/Downloads/mmseqs2; -- Projectdir /Users/moorer/Downloads/mmseqs2; -- Compiler is GNU; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Failed; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.2 extensions, using flags: -msse4.2 -mfpmath=sse; -- Could NOT find GTest (missing: GTEST_LIBRARY GTEST_INCLUDE_DIR GTEST_MAIN_LIBRARY); -- Co",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-265028472:975,Test,Test,975,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-265028472,22,['Test'],['Test']
Testability," GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1676,TEST,TEST,1676,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability, Substitution matrices...; Time for init: 0 h 0 m 3s. Process prefiltering step 0 of 1. Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Copy 1650981 Entries (9905886 byte); Setup Sizes ; Read IndexTable ... Done; k-mer similarity threshold: 115; k-mer match probability: 0. qStarting prefiltering scores calculation (step 0 of 1); Query db start 0 to 246; Target db start 0 to 10000. 736 k-mers per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucl,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4323,test,test,4323,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability, Verbosity 3; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Split DB 0; Split mode 2; Search mode 2; Diagonal Scoring 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1596,test,test,1596,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability," `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.9; ```. ...another reason why the multi-file output of mmseqs commands produces headaches. Why aren't the multi-output files generated when using multiple threads (as the example above) just automatically merged back into one database file instead of leaving many `cluster_db.<#>` files?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1521,test,tests,1521,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,8,['test'],['tests']
Testability," different one, but I'm getting a similar error when using a different taxonomy database:. ```; Loading NCBI taxonomy...; Computing LCA...; Segmentation fault; Error: Lca died; ```. The database creation was (using version 8.fac81):. ```; ## downloading uniclust db; wget http://gwdu111.gwdg.de/~compbiol/uniclust/2018_08/uniclust50_2018_08.tar.gz; uncomp uniclust50_2018_08.tar.gz; mv uniclust50_2018_08/uniclust50_2018_08_consensus.fasta . ## creating seq db; mmseqs createdb --dbtype 1 uniclust50_2018_08_consensus.fasta uniclust50_2018_08_consensus. ## creating tax db; mmseqs createtaxdb uniclust50_2018_08_consensus tmp; ```. The taxonomy classify command (using version 8.fac81):. ```; mmseqs taxonomy -e 1e-5 --max-seqs 200 --lca-ranks ""kingdom:phylum:class:order:family:genus:species"" --threads 24 clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus clusters_rep-seqs.part-14_tax_db tmp_part-14; ```. The run log w/ error:. ```; Program call:; taxonomy -e 1e-5 --max-seqs 200 --lca-ranks kingdom:phylum:class:order:family:genus:species --threads 24 clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/uniclust50/mmseqs2_8.fac81/uniclust50_2018_08_consensus clusters_rep-seqs.part-14_tax_db tmp_part-14. MMseqs Version: 	8.fac81; Substitution Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Min. alignment length 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Compressed 	0; Verbosity 	3; Seed Substitution Matrix 	VTML80.out; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; M",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943:1043,log,log,1043,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-516032943,1,['log'],['log']
Testability, global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Max. sequence length 32000; Profile false; Nucleoti,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1819,test,test,1819,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability, threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Max. sequence length 32000; Profile false; Nucleotide false; Max. results per query 300; Split DB 0; Split mod,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1878,test,test,1878,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Max. sequence length 32000; Profile false; Nucleotide false; Max. results per query 300; Split DB 0; Split mode 2; Search mode 2; Compositional bias 1; Diagonal Scoring 1; Minimum Diagonal score 30; Include identical Seq. Id. false; Spaced Kmer 1; Threads 32; Verbosity 3. Initialising data structures...; Using 32 threads. Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Query database: queryDB(size=246); Target database: targetDB.sk7(size=10000); Needed memory (14434761936 byte) of total memory (2704,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:2322,test,test,2322,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"(using`mmseqs2 8.fac81 hf3e9acd_1 bioconda`), and it appears that some tests failed. The end of the test output:. ```; Tmp resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp folder does not exist or is not a directory.; Created dir resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp; Program call:; extractorfs resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/targetannotation_nucl resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp/4434917762398107271/orfs --min-length 30 --max-length 98202 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --threads 80 --compressed 0 -v 3. No datafile could be found for resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/targetannotation_nucl_h!; Error: extractorfs died; Command exited with non-zero status 1; 40.25user 1.33system 0:02.64elapsed 1570%CPU (0avgtext+0avgdata 178744maxresident)k; 154744inputs+244552outputs (605major+33470minor)pagefaults 0swaps. LINSEARCH_NUCLNUCL_TARNS_SEARCH; TEST FAILED (NO REPORT). DBPROFILE_INDEX; TEST FAILED (NO REPORT). NUCLPROTTAX_SEARCH; TEST FAILED (NO REPORT). PROTNUCL_SEARCH; TEST FAILED (NO REPORT). EASY_LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. EASY_CLUSTER; TEST SUCCESS; GOOD; Expected: 15682; Actual: 15682. CLUSTER; TEST SUCCESS; GOOD; Expected: 15682; Actual: 15682. NUCLNUCL_TRANS_SEARCH; TEST FAILED (NO REPORT). NUCLNUCL_SEARCH; TEST FAILED (NO REPORT). NUCLPROT_SEARCH; TEST FAILED (NO REPORT). DBPROFILE; TEST SUCCESS; GOOD; Expected: 0.142; Actual: 0.182019. SLICEPROFILE; TEST SUCCESS; GOOD; Expected: 0.140; Actual: 0.147729. EASY_PROFILE; TEST SUCCESS; GOOD; Expected: 0.334; Actual: 0.338768. PROFILE; TEST FAILED; BAD; Expected: 0.367; Actual: 0.324652. EASY_SEARCH; TEST SUCCESS; GOOD; Expected: 0.235; Actual: 0.238355. SEARCH; TEST SUCCESS; GOOD; Expected: 0.235; Actual: 0.238355; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488073098:1119,TEST,TEST,1119,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488073098,17,['TEST'],['TEST']
Testability,"); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2207,TEST,TEST,2207,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.1 extensions, using flags: -march=native -msse4.1 -mfpmath=sse; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /galaxy/home/ksahlin/prefix/source/MMseqs2/build; [ksahlin@desmond build]$ make; Scanning dependencies of target cacode; make[2]: Warning: File 'lib/cacode/CMakeFiles/cacode.dir/depend.make' has modification time 0.00048 s in the future; [ 0%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lubksb.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/ludcmp.cpp.o; [ 1%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/nrutil.cpp.o; make[2]: warning: Clock skew detected. Your build may be incomplete.; [ 1%] Built target cacode; Scanning dependencies of target alp; [ 1%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogprob.cpp.o; [ 1%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_random.cpp.o; [ 2%] Building CX",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:1985,Test,Test,1985,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,6,['Test'],['Test']
Testability,"-matching 0 --mask 1 --min-ungapped-score 0 --spaced-kmer-mode 1 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	0; Diagonal Scoring 	0; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	0; Include identical Seq. Id.	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Initialising data structures...; Using 10 threads.; Could not find precomputed index. Compute index.; Substitution matrices...; Use kmer size 6 and split 1 using Target split mode.; Needed memory (1094599205 byte) of total memory (365681509171 byte); Target database: /tmp/test/9465698490903227639/input_step_redundancy(Size: 27782); Query database type: Aminoacid; Target database type: Aminoacid; Time for init: 0 h 0 m 1s. Query database: /tmp/test/9465698490903227639/input_step_redundancy(size=27782); Process prefiltering step 1 of 1. Index table: counting k-mers...; ..; Index table: Masked residues: 266508; Index table: fill...; ..; Index table: removing duplicate entries...; Index table init done. DB statistic; Entries: 1182627; DB Size: 519095762 (byte); Avg Kmer Size: 0.0184785; Top 10 Kmers; 	YTGTPK		230; 	PGFVVC		201; 	TNMHCE		201; 	GSPYYE		201; 	ISYEFH		201; 	FMHLRK		201; 	KKEEWK		201; 	WKREKP		201; 	MTTCKQ		201; 	IFTFHT		201; Min Kmer Size: 0; Empty list: 63346238. Time for index table init: 0h 0m 0s. 	k-mers per position = 1.5412, k-mer match probability: 7.54641e-14; k-mer similarity threshold: 130; k-mer match probability: 7.54641e-14. Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 27782; Target db start 1 to 27782; ..; 1 k-mers per position.;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:14931,test,test,14931,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"-min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Target file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2; ...Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 0s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 /tmp/test/9465698490903227639/linclust/831108043510341376/aln --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 2147483647 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	2147483647; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id.	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Init data structures...;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:10328,test,test,10328,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,.................................................................................................	1 Mio. sequences processed; .............; Add missing connections.; ...................................................................................................	1 Mio. sequences processed; .............; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 1132486; Size of the alignment database: 1132486; Number of clusters: 32435; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Filter column 	1; Column to take 	-1; Filter regex 	^.*$; Positive filter 	true; Filter file 	/tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy; Beats first 	false; Mapping file 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical compar,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:7611,test,test,7611,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,".3 colabfold_envdb_202108_db.idx.4 colabfold_envdb_202108_db.idx.5 colabfold_envdb_202108_db.idx.6 colabfold_envdb_202108_db.idx.7 pdb70_220313.idx uniref30_2202_db.idx. how to reproduce ""ticket/pair"" error in local mmseqs msa server.; 1. follow the instructions in https://github.com/sokrypton/ColabFold/tree/main/MsaServer; The only difference in my process with that in the ColabFold instructions: I did not use vmtouch to keep the precomputed database index file within system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; while True:; error_count ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1153,log,logging,1153,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,1,['log'],['logging']
Testability,.; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 32435; Size of the alignment database: 32435; Number of clusters: 27782; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/clu /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust /tmp/test/9465698490903227639/linclust/831108043510341376/clust . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; Program call:; /tmp/test/9465698490903227639/clu_redundancy panproteome.db /tmp/test/9465698490903227639/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/pref_step0 --sub-mat blosum62.out -s 1 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 0 --diag-score 0 --exact-kmer-matching 0 --mask 1 --min-ungapped-score 0 --spaced-kmer-mode 1 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	0; Diagonal Scoring 	0; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	0; Include identical Seq. Id.	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:13479,test,test,13479,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,"/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Filter column 	1; Column to take 	-1; Filter regex 	^.*$; Positive filter 	true; Filter file 	/tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy; Beats first 	false; Mapping file 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical comparison operator 	; Numerical comparison value 	0; Sort entries 	0; Include identical Seq. Id. 	false; join to DB 	; Swap fields of search results 	; Replace transitively 	. Filtering with a filter files.; ...Time for merging files: 0 h 0 m 0 s; Rescore diagonals.; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 --rescore-mode 1 --sub-mat blosum62.out --filter-hits -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Target file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pr",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:9049,test,test,9049,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,/lib/libmpi.so.12 (0x00002b805113f000); 	libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00002b8051423000); 	libm.so.6 => /lib64/libm.so.6 (0x00002b805172c000); 	libgomp.so.1 => /lib64/libgomp.so.1 (0x00002b8051a2e000); 	libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00002b8051c54000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00002b8051e6a000); 	libc.so.6 => /lib64/libc.so.6 (0x00002b8052086000); 	libopen-rte.so.12 => /usr/lib64/openmpi/lib/libopen-rte.so.12 (0x00002b8052447000); 	libopen-pal.so.13 => /usr/lib64/openmpi/lib/libopen-pal.so.13 (0x00002b80526c4000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00002b8052968000); 	librt.so.1 => /lib64/librt.so.1 (0x00002b8052b6c000); 	libutil.so.1 => /lib64/libutil.so.1 (0x00002b8052d74000); 	libhwloc.so.5 => /lib64/libhwloc.so.5 (0x00002b8052f77000); 	/lib64/ld-linux-x86-64.so.2 (0x00002b8050d02000); 	libnuma.so.1 => /lib64/libnuma.so.1 (0x00002b80531b1000); 	libltdl.so.7 => /lib64/libltdl.so.7 (0x00002b80533bd000); Program call:; mmseq-testDB /junk/databases/mmseqs/test-nr-50m test-nr50-th32-MPI tmp --threads 8 . MMseqs Version: 	259cecbe2dcb0826f139bab3787daa03e83717bc; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	0; E-value threshold 	0.001; Seq. Id Threshold 	0; Coverage threshold 	0; Target Coverage threshold 	0; Max. sequence length 	32000; Max. results per query 	300; Compositional bias 	1; Query queryProfile 	false; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Threads 	8; Verbosity 	3; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Target queryProfile 	false; Offset result 	0; Split DB 	0; Split mode 	2; Diagonal Scoring 	1; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Selec,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:2135,test,testDB,2135,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,3,['test'],"['test-', 'test-nr-', 'testDB']"
Testability,"0 h 0 m 7s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 4s; Time for fill: 0 h 0 m 0s; Time for merging files: 0 h 0 m 0 s; Time for processing: 0 h 0 m 14s; Rescore diagonals.; Program call:; panproteome.db panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1 --rescore-mode 0 --sub-mat blosum62.out -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	0; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: panproteome.db; Target file: panproteome.db; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1; ...................................................................................................	1 Mio. sequences processed; .............Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 3s; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1 /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...................................................................................................	1 Mio. sequences processed; .............; Sort entries. Find missing c",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:5632,test,test,5632,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,2,['test'],['test']
Testability,0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; E,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1766,TEST,TEST,1766,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"098257495296432/search/pref_0 tmp/15531098257495296432/aln --sub-mat blosum62.out -a 1 --alignment-mode 2 -e 1e-05 --min-seq-id 0 --min-aln-len 0 --seq-id-mode 0 --alt-ali 0 -c 0 --cov-mode 0 --max-seq-len 65535 --comp-bias-corr 1 --realign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 3 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 2 --compressed 0 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Compute score, coverage and sequence identity; Query database size: 12189231 type: Aminoacid; Target database size: 134985288 type: Aminoacid; Calculation of alignments; [] 3h 56m 20s 209ms; Time for merging files: 0h 0m 13s 891ms. 138555514 alignments calculated.; 54047267 sequence pairs passed the thresholds (0.390077 of overall calculated).; 4.434018 hits per query sequence.; Time for processing: 3h 56m 39s 222ms; offsetalignment mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/aln mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB --chain-alignments 0 --merge-query 1 --search-type 0 --threads 2 --compressed 0 --db-load-mode 3 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 1s 475ms; Writing results to: mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB; [] 5h 36m 42s 260ms. Time for merging files: 0h 0m 5s 864ms; Time for processing: 5h 37m 8s 744ms; convertalis mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3-s1.m8 --db-load-mode 3 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd6",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:7003,test,test-megan-out-,7003,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['test'],['test-megan-out-']
Testability,"0h 31m 29s 407ms; createsubdb /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95 /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep . MMseqs Version:	12.113e3; Subdb mode	0; Verbosity 	3. Time for merging to all_protein_final_95_rep: 0h 0m 0s 11ms; Time for processing: 0h 10m 41s 827ms; convert2fasta /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep.fasta . MMseqs Version:	12.113e3; Use header DB	false; Verbosity 	3. Start writing file to /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_final_95_rep.fasta; Time for processing: 0h 54m 42s 51ms. log of linclust with `--kmer-per-seq to 80`. kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 600G --include-only-extendable 0 --ignore-multi-kmer 0 --threads 50 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/14045843375066908893/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 80 --spaced-kmer-mo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:9156,log,log,9156,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['log'],['log']
Testability,"1) I am looking through the code and seeing some bugs in how coverage works within the alignment for taxonomy.; Ignoring if this makes sense or not, its definitely broken code-wise. . It also would not be super well defined which coverage to compute, since we do multiple alignments with the 2bLCA procedure. What is currently implemented (however broken) is that it would try to compute the coverage between the extracted subfragment of the database against the other database hits. https://github.com/soedinglab/MMseqs2/wiki#the-concept-of-lca In the figure here this would be the coverage of the pink hit 1 fragment versus Hit 2, 3 and 4. I am not sure which coverage would make the most sense to compute and in any case would require us to run new benchmarks. 2) You need to pass `--tax-output-mode 2` to also compute and store the alignments. They will be placed at `taxresults.database_aln` in your case. 3) easy-taxonomy and taxonomy behave the same, the only difference is that the former takes FASTA input while the later only takes MMseqs2 databases. The main algorithmic difference depends on the input type though. With nucleotide input it will use the contig taxonomy procedure described in the MMseqs2 taxonomy paper, this includes the fast ORF-prefiltering and the taxonomy majority voting. The ORF-prefiltering can be overaggressive for short-reads, our previous recommendation was to disable the ORF-prefiltering with `--orf-filter 0` if you give it short read input. We are currently developing a better fix in #832 currently that should not require messing with this parameter. For protein input, the ORF-filtering and majority voting does not happen.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/750#issuecomment-2063529866:752,benchmark,benchmarks,752,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/750#issuecomment-2063529866,1,['benchmark'],['benchmarks']
Testability,1.) I have not yet tested it properly but I think it should be possible to change the substitution matrix and add characters. However the seeding stage (k-mer double diagonal matching) only works with an alphabet of 20. ; 2.) We do not provide a pattern search engine,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-493079585:19,test,tested,19,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-493079585,1,['test'],['tested']
Testability,"1:104233] Failing at address: 0x151209f6d9c4; --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; --------------------------------------------------------------------------; mpirun noticed that process rank 89 with PID 0 on node cpu-23-1 exited on signal 7 (Bus error).; --------------------------------------------------------------------------. And this one a couple more times:. --------------------------------------------------------------------------; Primary job terminated normally, but 1 process returned; a non-zero exit code. Per user-direction, the job has been aborted.; --------------------------------------------------------------------------; slurmstepd: error: *** JOB 1369194 ON cpu-25-49 CANCELLED AT 2021-05-17T19:07:03 DUE TO NODE FAILURE, SEE SLURMCTLD LOG FOR DETAILS ***; --------------------------------------------------------------------------; mpirun noticed that process rank 65 with PID 0 on node cpu-25-49 exited on signal 9 (Killed).; --------------------------------------------------------------------------. Now I'm trying to run the job using the script you also include in your manual . mmseqs createdb ""${QUERYFASTA}"" ""${QUERYDB}""; mmseqs splitdb ""${QUERYDB}"" ""${QUERYDB}_split"" --split $SPLITS. for file in $(ls ""${QUERYDB}_split""_*_$SPLITS); do; mmseqs createsubdb ""${file}.index"" ""${QUERYDB}_h"" ""${file}_h""; done. split=0; for file in $(ls ""${QUERYDB}_split""_*_$SPLITS); do; RUNNER=""mpirun -np 128 -p nocona"" bsub mmseqs cluster ""${file}"" chiropteraDB aln_${split} tmp --cov-mode 1 -c 0.9 --threads 128; ((split++)); done. So far I don't have a result out of it because the job is waiting for resources, I just added the -p nocona argument because I got an error stating that the job couldn't be batched if I didn't mention the part",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604:1652,LOG,LOG,1652,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843668604,1,['LOG'],['LOG']
Testability,"2108_db.idx.2 colabfold_envdb_202108_db.idx.3 colabfold_envdb_202108_db.idx.4 colabfold_envdb_202108_db.idx.5 colabfold_envdb_202108_db.idx.6 colabfold_envdb_202108_db.idx.7 pdb70_220313.idx uniref30_2202_db.idx. how to reproduce ""ticket/pair"" error in local mmseqs msa server.; 1. follow the instructions in https://github.com/sokrypton/ColabFold/tree/main/MsaServer; The only difference in my process with that in the ColabFold instructions: I did not use vmtouch to keep the precomputed database index file within system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1097,log,logger,1097,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,2,['log'],"['logger', 'logging']"
Testability,"259d8f2b659162236 ; 2- Compile as [described here](https://github.com/soedinglab/MMseqs2/#compile-from-source) but changing `cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..` by `cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=. ..` ; 3- Run all steps below:; > mmseqs createdb tcdb_query.nr.fa tcdb_query.nr.db 2>&1 >> log ; > mmseqs createdb all.fa all.db 2>&1 >> log; ; > mmseqs search tcdb_query.nr.db all.db tcdb_result.db tmp --threads 40 -s 7.5 --num-iterations 3 -a --max-seqs 17702628 -c 0.8 --add-self-matches 2>&1 >> log . 4- After crash:; > gdb --args mmseqs align tcdb_query.nr.db all.db tmp/1072319213335698383/pref_0 tmp/1072319213335698383/aln_0 --sub-mat blosum62.out -a 1 --alignment-mode 2 -e 0.1 --min-seq-id 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 17702628 --comp-bias-corr 1 --realign 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 1 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 40 -v 3 . return:; ```; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/acpguedes/source/MMseqs2/build/bin/mmseqs...done.; (gdb) bt; No stack.; ```. Important note:; I send the STDOUT and STDERR to log file but there are one message that was printed on the screen and not on log file: ; `scoreIdentical has different length L: scoreIdentical has different length L: 604154 query_length: 126; query_length: 626`. I can send you the entire directory but it is too large to upload on github.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510:1839,log,log,1839,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510,2,['log'],['log']
Testability,"38353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 23s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1277,TEST,TEST,1277,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,483647; Alphabet size 21; Split DB 0; Split mode 2; Search mode 2; Diagonal Scoring 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1660,test,test,1660,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"53; Actual: 0.238353. EASY_SEARCH (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 23s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1199,TEST,TEST,1199,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"62.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	0; Diagonal Scoring 	0; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	0; Include identical Seq. Id.	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Initialising data structures...; Using 10 threads.; Could not find precomputed index. Compute index.; Substitution matrices...; Use kmer size 6 and split 1 using Target split mode.; Needed memory (1094599205 byte) of total memory (365681509171 byte); Target database: /tmp/test/9465698490903227639/input_step_redundancy(Size: 27782); Query database type: Aminoacid; Target database type: Aminoacid; Time for init: 0 h 0 m 1s. Query database: /tmp/test/9465698490903227639/input_step_redundancy(size=27782); Process prefiltering step 1 of 1. Index table: counting k-mers...; ..; Index table: Masked residues: 266508; Index table: fill...; ..; Index table: removing duplicate entries...; Index table init done. DB statistic; Entries: 1182627; DB Size: 519095762 (byte); Avg Kmer Size: 0.0184785; Top 10 Kmers; 	YTGTPK		230; 	PGFVVC		201; 	TNMHCE		201; 	GSPYYE		201; 	ISYEFH		201; 	FMHLRK		201; 	KKEEWK		201; 	WKREKP		201; 	MTTCKQ		201; 	IFTFHT		201; Min Kmer Size: 0; Empty list: 63346238. Time for index table init: 0h 0m 0s. 	k-mers per position = 1.5412, k-mer match probability: 7.54641e-14; k-mer similarity threshold: 130; k-mer match probability: 7.54641e-14. Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 27782; Target db start 1 to 27782; ..; 1 k-mers per position.; 1604 DB matches per sequence.; 0 Overflows.; 27 sequences passed prefiltering per query sequence.; Median result list size: 2; 0 sequences with 0 size result lists. Time for prefi",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:15105,test,test,15105,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"7510948275416679/newSeqs --use-seq-id 0 --threads 12 --compressed 0 -v 3. Time for processing: 0h 0m 0s 96ms; ===================================================; === Update the new sequences with the old keys ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; createsubdb /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/newSeqs /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/NEWDB.newSeqs -v 3 --subdb-mode 1. Time for merging to NEWDB.newSeqs: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 117ms; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/OLDDB.repSeq. [=================================================================] 34.26K 0s 16ms; Time for merging to OLDDB.repSeq: 0h 0m 0s 253ms; Time for processing: 0h 0m 0s 470ms; ===================================================; ======== Search the new sequences against =========; ========= previous (rep seq of) clusters ==========; ===================================================; prefilter /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/NEWDB.newSeqs /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/OLDDB.repSeq /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/search/9308835922661050105/pref_0 --sub-mat nucl:nucleotide.out,aa:blo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:1667,test,tests,1667,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,2,['test'],['tests']
Testability,": 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 0s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 9s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 14s); TEST SUCCESS; GOOD; Expected: 512,256,128,64,32; Actual: 512,256,128,64,32",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:2510,TEST,TEST,2510,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,11,['TEST'],['TEST']
Testability,"; (gdb) r; Starting program: /home/disque2To/home/romain/logiciel/MMseqs2/build/bin/mmseqs createdb dpann_cpr.faa dpann_cpr_mmseq_db/; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; Program call:; createdb dpann_cpr.faa dpann_cpr_mmseq_db/ . MMseqs Version: 	a951e4dede7e9b52e514119d083ff4ca80ad1565; Max. sequence length 	65535; Split Seq. by len 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. ...................................................................................................	1 Mio. sequences processed; ...................................................................................................	2 Mio. sequences processed; .........................................................Time for merging files: 0h 0m 1s 184ms. Program received signal SIGSEGV, Segmentation fault.; __GI___fileno (fp=0x0) at fileno.c:35; 35	fileno.c: Aucun fichier ou dossier de ce type.; (gdb) bt; #0 __GI___fileno (fp=0x0) at fileno.c:35; #1 0x000000000058a276 in Concat::concatFiles (files=0x1187530, n=32, outFile=0x0); at /home/romain/logiciel/MMseqs2/src/commons/Concat.h:113; #2 0x0000000000588e40 in DBWriter::mergeResults (outFileName=0x117feb0 ""dpann_cpr_mmseq_db/"", ; outFileNameIndex=0x11818e0 ""dpann_cpr_mmseq_db/.index"", dataFileNames=0x1186100, indexFileNames=0x1186320, fileCount=32, ; lexicographicOrder=false) at /home/romain/logiciel/MMseqs2/src/commons/DBWriter.cpp:543; #3 0x0000000000586e74 in DBWriter::close (this=0x7fffffff57e0) at /home/romain/logiciel/MMseqs2/src/commons/DBWriter.cpp:239; #4 0x0000000000619954 in createdb(int, char const**, Command const&) (); #5 0x0000000000555b7f in runCommand (p=..., argc=2, argv=0x7fffffffdc78) at /home/romain/logiciel/MMseqs2/src/commons/Application.cpp:62; #6 0x000000000055634a in main (argc=4, argv=0x7fffffffdc68) at /home/romain/logiciel/MMseqs2/src/commons/Application.cpp:135",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/141#issuecomment-445211494:2084,log,logiciel,2084,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/141#issuecomment-445211494,5,['log'],['logiciel']
Testability,"; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUC",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1429,TEST,TEST,1429,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,; Needed memory (14434761936 byte) of total memory (270462795776 byte); Substitution matrices...; Time for init: 0 h 0 m 3s. Process prefiltering step 0 of 1. Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Copy 1650981 Entries (9905886 byte); Setup Sizes ; Read IndexTable ... Done; k-mer similarity threshold: 115; k-mer match probability: 0. qStarting prefiltering scores calculation (step 0 of 1); Query db start 0 to 246; Target db start 0 to 10000. 736 k-mers per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4265,test,test,4265,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"> Could you post the full log of the two runs? That would make it easier to say what might be going wrong. Thank you!; **runs of EPYC 7742**; (base) ct@test:~$ ~/mmseqs/bin/mmseqs taxonomy /data/ct/test/testdb /data/ct/datenbank/silva_mmseqs/silva /data/ct/test/test1213 /data/ct/tmp ; taxonomy /data/ct/test/testdb /data/ct/datenbank/silva_mmseqs/silva /data/ct/test/test1213 /data/ct/tmp . MMseqs Version: 	b1704ccc17f3814a1d640a83c6aa925bb0406809; ORF filter 	1; ORF filter e-value 	100; ORF filter sensitivity 	2; LCA mode 	3; Taxonomy output mode 	0; Majority threshold 	0.5; Vote mode 	1; LCA ranks 	; Column with taxonomic lineage 	0; Compressed 	0; Threads 	256; Verbosity 	3; Taxon blacklist 	12908:unclassified sequences,28384:other sequences; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Add backtrace 	false; Alignment mode 	1; Alignment mode 	0; Allow wrapped scoring 	false; E-value threshold 	1; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Max reject 	5; Max accept 	30; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Realign hits 	false; Realign score bias 	-0.2; Realign max seqs 	2147483647; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Zdrop 	40; Seed substitution matrix 	nucl:nucleotide.out,aa:VTML80.out; Sensitivity 	2; k-mer length 	0; k-score 	2147483647; Alphabet size 	nucl:5,aa:21; Max results per query 	300; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	true; Exact k-mer matching 	0; Mask residues 	1; Mask lower case residues 	0; Minimum diagonal score 	15; Spaced k-mers 	1; Spaced k-mer pattern 	; Local temporary path 	; Rescore mode 	0; Remove hits by seq. id. and coverage 	false; Sort results 	0; Mask profile 	1; Profile E-value threshold 	0.001; Global sequence weighting 	false; Allow deletions 	fals",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:26,log,log,26,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,8,"['log', 'test']","['log', 'test', 'testdb']"
Testability,"> Could you tell something about your input (and target database/search settings)?; > ; > We generally have had good experience with our own two socket Epic 7742 systems. One thing where the Epyc system is at a disadvantage is currently on IO. We write one output file per thread and these have to be merged in some steps. With 256 merges this can take quite a bit of time, in this case the Intel system would be slower in computing but as it has less threads it might be faster in merging and might thus win overall. Thank you very much for your reply.; Because I just want to test the new computer, I just entered these. The input file is very small. ""mmseqs taxonomy /data/testdb /data/datenbank/silvadb /data/testdb_result /data/tmp"". For my old computer (2Intel Xeon Silver 4210, Mem: 64G, Swap: 2G) it only takes 4 minutes, but this new computer takes 10 minutes. I have tried adding the following commands ""--threads 10; --threads 20; --threads 40; --threads 128; --threads 256"". But it takes at least 10 minutes. When --threads is greater than 100, the computer can no longer perform any other operations. (Memory usage never exceeds 20G.); After reading some information, we have a few unsure questions. Does the memory frequency (2933 or 3200) affect the operation of the program? We are now using 8 pieces of memory. If you add 8 pieces, can the current problem be improved?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823518160:578,test,test,578,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823518160,2,['test'],"['test', 'testdb']"
Testability,"> Do you notice that the system is swapping a lot? 1GB RAM per thread is also very little. Our systems usually have 8 to 16 GB RAM per thread. Thank you very much for your reply. Due to our current work, only 40G memory was used at the highest time. I believe your suggestions may be important to our next project.; I didn’t find any changes in swapping. When I noticed it was always 0. During the test，memory usage never exceeds 20G. But the calculation speed is very slow. And when the thread is greater than 100, other operations cannot be performed.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823522549:398,test,test,398,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823522549,1,['test'],['test']
Testability,"> Instead I took a look at what instructions are missing for SSE2 support . I think more those are required for not-X86 ?. I've force pushed to this branch [with a newer SIMDe version](https://github.com/nemequ/simde/compare/0a0cdd20c9ac4f0cd787f60cca30c0aa1e71b6c1...aa6c5739159ca2a862b50258ad8f61afed4ca94f) including the following fixes:. https://github.com/nemequ/simde/commit/9d29f2b56ff3a93e4f13ab2075fe043ca10b7e7e common: prefer __builtin_isnan over std::isnan ; https://github.com/nemequ/simde/commit/c0af7afcc8290fba98803febb503015c2cf5a4d7 avx2: fix -Wconversion warning when assigning int to int16_t; https://github.com/nemequ/simde/commit/6791c8f891a4153a8736b7b7cdbc6f4bda7e31f8 Switch some C-style casts to use HEDLEY_STATIC_CAST.; https://github.com/nemequ/simde/commit/dbf8394561e699cb11a75a2e26d1efa121f11c79 mmx, sse, sse2: get rid of compound literals; https://github.com/nemequ/simde/commit/7185559a4df6cfb00d4730b9edb7bdb7ac3967b8 common: add -Wc++98-compat-pedantic to list of disabled warnings ; https://github.com/nemequ/simde/commit/f11544f282376cd06f53e694e9d5fd51b640e67d avx: fix aliasing issue in simde_mm_maskload_pd; https://github.com/nemequ/simde/commit/e314ce18967350aec8e899eb2acae59b95e07660 math: fix detection of __builtin_* functions; https://github.com/nemequ/simde/commit/bdf27512d41d583278ae5efee02a636d139fd806 test: disable -Wreserved-id-macro in µnit header. ; https://github.com/nemequ/simde/commit/aa6c5739159ca2a862b50258ad8f61afed4ca94f sse2, sse4.1, avx2: add some additional casts to vector types . So hopefully the result is less daunting!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-629985459:1355,test,test,1355,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-629985459,1,['test'],['test']
Testability,"> You can use https://gist.github.com to post the log.; > ; > Alternatively, the call to MMseqs2 alone would already help with diagnosing the issue.; ============================================================; Thank you very much for your reply.; I just solved the bug very fortunatelly; The method is to install mpich ; ============================; Download hydra-3.3.1(https://www.mpich.org/downloads/); ./configure --prefix=$DIR/mpich; make; make install; add the mpirun in the end of your .bashrc; =============================; Best wishes",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/213#issuecomment-506283448:50,log,log,50,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/213#issuecomment-506283448,1,['log'],['log']
Testability,"> ```; > mmseqs databases UniProtKB uniprot tmp; > ```; > ; > should download the latest uniprot and set it up correctly for use with MMseqs2 including taxonomy information. Thanks for this - we ran this command and obtained main database files containing `uniprot_h`, `uniprot.index` etc. However we probably still need some help to understand the next steps to assign taxonomy IDs to alignments. Following https://github.com/sokrypton/ColabFold/issues/216, here is what we tried:; ```; mmseqs convertalis test/qdb uniprot test/res_exp test/res_exp_realign.m8 --format-output query,target,taxid,taxname,taxlineage,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,cigar; ```; and it raised the following error:; ```; Loading NCBI taxonomy; names.dmp, nodes.dmp, merged.dmp from NCBI taxdump could not be found!; ```; Is there something that we are missing here? Thanks!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/871#issuecomment-2293140070:507,test,test,507,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/871#issuecomment-2293140070,3,['test'],['test']
Testability,"> `mmseqs extractalignedregion test/S29DEC19 db/nt test/tophitaln test/tophitseq`; > ; > MMseqs Version: 12.113e3; > Compressed 0; > Extract mode 2; > Preload mode 0; > Threads 40; > Verbosity 3; > ; > Can not write to data file test/tophitseq.14 ] 0.00% 1 eta -. I tried to reproduce the above error on a different target database to see if its something to do with the sequences and got the same error with the following additional error messages. Just thought reporting it might help to figure out what's wrong. `free(): corrupted unsorted chunks`; `Aborted (core dumped)`. @milot-mirdita or @martin-steinegger do you have any idea what's going on? Any help is appreciated. . Thanks,; Manu",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/368#issuecomment-716374568:31,test,test,31,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/368#issuecomment-716374568,4,['test'],['test']
Testability,">@colinbrislawn I have tested linclust with ONT reads. It should be possible to cluster them. However, we needed to tweak the parameters used for the banded alignment to account for the high error rate. Awesome!. >How do you want to use MMseqs2?. Existing Qiime 2 plugins offer several options for clustering and classifying short RNA sequences... but no plugins support clustering or classifying long, noisy sequences, or proteins of any kind. I think an MMseqs2 plugin could bring a ton of functionality to Qiime 2. A method for taxonomic classification of ONT reads would help @splaisan and others.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/235#issuecomment-579894942:23,test,tested,23,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/235#issuecomment-579894942,1,['test'],['tested']
Testability,"?Dear Milot,. I attached the log file here with this email, please check if you can access it. Many Thanks,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 28 September 2020 14:48; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). Ah sorry I had forgotten about your previous message, too many different projects are going on!. Could you check the log-file upload again, I don't see a log. -; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699957190>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AAV63ERYGGXCIXN2ZXRHM3LSIBZXBANCNFSM4Q7W6YLA>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699966117:29,log,log,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699966117,3,['log'],"['log', 'log-file']"
Testability,"?Dear Milot,. I restarted the clustering to make a new DB, EarthMicrobiomeDB20200910, that includes previous representative DNA gene sequences (~800 million) and recently obtained redundant sequences (around 12 million), using the following command:. mmseqs cluster EarthICEmetagenomesDB EarthICEmetagenomesDB_clu EarthICEmetagenomesDB.tmp --min-seq-id 0.95 --cov-mode 2 -c 0.8 --max-seq-len 132768 --threads 32 >EarthICEmetagenomesDB_clu.log 2>&1 &. It is running since September 10, attached is the log, what do you think how long it will take to finish?. ?Many Thanks,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Intikhab S. Alam; Sent: 10 September 2020 00:45; To: soedinglab/MMseqs2; soedinglab/MMseqs2; Cc: Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). Dear Milot,. I provided all result files from previous easy-linclust of 3 billion sequences. As I understand, if you use the rep_seq based new database, the update of additional sequence will not place newer sequences to any existing clusters, is this right?. The only option seems to add newer redundant sequences to previous version of redundant sequences, create a database and start a fresh linclust session. You mentioned new versions of mmseq is now much faster, I will give it a go but do you think is there a way to extract the cluster db of my previous run where I used easy-linclust?. Please provide some useful advice as these are computationally heavy tasks. Best,. IA. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscie",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180:439,log,log,439,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699923180,2,['log'],['log']
Testability,@ChiaraVanni I have tested the slice-search/iterative-search using the most recent version of mmseqs but I can not reproduce the error. Maybe it was solved in the mean time. Would you mind testing it again please?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-581268504:20,test,tested,20,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-581268504,2,['test'],"['tested', 'testing']"
Testability,@ChongLC interesting case. Thank you for the detailed analysis. The issue seems to occur because our default parameters are not sensitive enough to match S6 to S4. Following is a command that clusters the sequences correctly. We should consider using `--exact-kmer-matching 1` as default for high similarities in MMseqs2. ; `mmseqs easy-cluster /tmp/test.fas test_clu tmp -c 1.0 --cov-mode 1 --min-seq-id 1.0 --exact-kmer-matching 1`; Alternative increasing `-s` also works.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/601#issuecomment-1236084956:350,test,test,350,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/601#issuecomment-1236084956,1,['test'],['test']
Testability,@ShangjinTan using your parameter (90% covered at 95% sequence identity) I would assume that linclust performs just slightly worse than CD-HIT. It is very odd at that `--kmer-per-seq to 80` does produce exactly the same. ; What version of MMseqs2 do you use? What parameter do you use for CD-HIT? Could you please post the log of default linclust and the `--kmer-per-seq to 80` run?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-712785542:323,log,log,323,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-712785542,1,['log'],['log']
Testability,@UriNeri the log is only written to stdout. We do not store a copy of the log in the temp directory. So you probably need to rerun the whole job. If you use the same tmp folder and command then it will just perform the last step.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570949442:13,log,log,13,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570949442,2,['log'],['log']
Testability,@altaetran this is indeed not right. Could you please provide the whole log and command call?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625661317:72,log,log,72,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625661317,1,['log'],['log']
Testability,"@colinbrislawn I have tested `linclust` with ONT reads. It should be possible to cluster them. However, we needed to tweak the parameters used for the banded alignment to account for the high error rate. . How do you want to use MMseqs2?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/235#issuecomment-579879522:22,test,tested,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/235#issuecomment-579879522,1,['test'],['tested']
Testability,"@crisdarbellay no, sorry. I don't have access to a ""bare metal"" server to test this with, but my guess is that Milot guess that it has to do with virtualization is correct. Are you running it with KVM or not?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-2090417247:74,test,test,74,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-2090417247,1,['test'],['test']
Testability,"@davidbuterez I check your search log and the alignment steps used the gap open and extend parameters. So the alignment should be computerd with gap open 3 and gap extend 0 (see `searchout.txt`). I am not sure if -e inf actually works, I never used this. align ... \ --gap-open 3 --gap-extend 0 ... However the computation of the raw score in convertalis uses the gap open 11 and gap extend 1 to recompute the raw score from the bit score. . mmseqs convertalis aDB bDB alignDB alnRes.txt --search-type 3 --format-output ""qseq,tseq,query,target,raw,bits,qaln,taln"" --gap-open 3 --gap-extend 0 . Just a warning. You use two quite experimental features of mmseqs2, (1) Windows and (2) nucleotide searches.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491342159:34,log,log,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491342159,1,['log'],['log']
Testability,@dhwanidesai so you perform millions of read searches against the refseq database at once right? Could you please provide an output log of your run? It would help me to understand whats the bottleneck in your analysis.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-506363220:132,log,log,132,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-506363220,1,['log'],['log']
Testability,"@ggautreau I have changed the linclust algorithm. Now the similar sequences should be clustered. I have tested it on your panproteome dataset, the old linclust created ~16k cluster the new version only ~14k. Could you please try the newest version and check if you still encounter any problem?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-408640530:104,test,tested,104,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-408640530,1,['test'],['tested']
Testability,@kad-ecoli Thank you for testing it. The static build should be always up to date. MMseqs2 always reports the commit id. Could you check if its the most recent commit. If yes than could you please provide an example so that I can reproduce your issuse?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-410094909:25,test,testing,25,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/104#issuecomment-410094909,1,['test'],['testing']
Testability,@ksahlin oh you were super fast in testing it. I have fixed this issue. ; Sorry for the inconvenience.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418146288:35,test,testing,35,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418146288,1,['test'],['testing']
Testability,"@liuxianghui thank you for asking this question! . ```; cd-hit-est -i $CLUSTERS.IN -c 0.95 -T $MC_CPU -M 0 -G 0 -aS 0.9 -g 1 -r 1 -d 0 -o $CLUSTERS.OUT > $CLUSTERS.log; ```. CD-HIT computes in default global sequence identity, while MMseqs2 computes local. Therefore it is not possible to mimic exactly the same behaviour. But since you turn of the the global sequence identity computation, you can get fairly close to CD-HIT's criteria. Here is my suggested parameter mapping. ```; -c 0.95 -> --min-seq-id 0.95 ; -T $MC_CPU -> --threads $MC_CPU; -G 0 -> MMseqs2 uses local alignments is the default, there is no way to make alignments global; -aS 0.9 -> --cov-mode 1 -c 0.9; -g 1 -> it is not possible with MMseqs2 using greedy incremental clustering (needed for --cov-mode 1). However, setcover assigns sequence to the best matching representative in default. ; -r 1 -> MMseqs2 in default considers forward and reverse strand; ```. Final command: . ```; mmseqs easy-cluster in.fa clu tmp --min-seq-id 0.95 --cov-mode 1 -c 0.9 --threads $MC_CPU; ```. I have also added a guide how parameters of CD-HIT and MMseqs2 are related in the documentation https://github.com/soedinglab/MMseqs2/wiki#how-do-parameters-of-cd-hit-relate-to-mmseqs2",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/317#issuecomment-643981473:164,log,log,164,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/317#issuecomment-643981473,1,['log'],['log']
Testability,"@martin-steinegger ; I didn't delete the ./tmp/ folder, is the full log in there? or do you mean the stdout ? ; About the input, please email me : uri dot neri at gmail dot com; Thanks !",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570898956:68,log,log,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570898956,1,['log'],['log']
Testability,"@martin-steinegger ; Thanks!; I couldn't find out the header info from the manual, so it is very helpful.; I'd like to reflect structural differences especially in their motifs, on visualization.; It seems like 'fident' or '-log(evalue)' will be indicators for such criteria.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/377#issuecomment-1088497268:225,log,log,225,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/377#issuecomment-1088497268,1,['log'],['log']
Testability,"@martin-steinegger I have tested by passing the same `-s` when creating the indexes, following are the results: . >Using same `-s` as `search` in `createindex` . | Alignment | count | seconds |; | ----------- | ----------- | ----------- |; | a*-a* | 10107 | 23.81 |; | b*-b* | 23206 | 42.43 |; | a*-b* | 8155 | 26.46 |; | b*-a* | 8390 | 37.12 |. They are just slightly different. > If you index a database with MMseqs2 then all k-mers are stored if no sensitivity -s is provided to createindex ; ; Actually I thought that could have been the problem. . In the early versions of MMseqs I had noticed the difference when running without the indexed DBs, but it was not that much, and the only side-effect was a slight increase in the overall execution time (maybe 10~20% slower).; Nevertheless, now it runs faster and matches less, which is caused from what you explained about I guess. . > Do you have a small example that I could use the reproduce this issue? . Yes, get the 2 small proteomes I used from the following link ; https://send.firefox.com/download/8d4ac7f72e90671b/#ioryCshD4vIZCAPxd30CCw. I will do another couple of tests to see if I can increase the accuracy when no indexing is performed. . `UPDATE`; @martin-steinegger I think just found the problem... ; When running `search` without selecting the matrix for pre-filtering the number of hits, as well as the running times, go back to what expect. The differences are caused in this case by the use of the default VTML in the prefiltering step. As you can see from the following table, the results are much more reasonable. >Without `--seed-sub-mat nucl:nucleotide.out,aa:blosum62.ou` in `search` . | Alignment | count | seconds |; | ----------- | ----------- | ----------- |; | a-a | 10209 | 29.87 |; | b-b | 23523 | 52.05 |; | a-b | 8281 | 32.13 |; | b-a | 8533 | 45.62 |; ; I confirm this is only happening when using blosum62 in the `prefilter` step",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-644526537:26,test,tested,26,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-644526537,2,['test'],"['tested', 'tests']"
Testability,"@martin-steinegger I tried to run a test. ; I had some weirdo results.; ```; mmseqs createdb nr.fa nr.DB; mmseqs createdb t.fa t.DB; mmseqs search t.DB nr.DB OUT tmp --split-memory-limit 126000000 --threads 20 2>&1 > log.search; mmseqs convertalis t.DB nr.DB OUT OUT.tsv; ```; Where the `nr.fa` is a NCBI's nr protein db (~188M sequences) and `t.fa` contains only one sequence which is also present on nr. . The result is short, so follow below:; ```; query target pident alnlen mismatch gapopen qstart qend tstart tend evalue bits; XP_642131.1 XP_642131.1 0.925 169 13 0 1 169 1 169 3.582E-100 329; XP_642131.1 XP_636625.1 0.400 151 86 0 7 157 8 152 5.899E-23 107; XP_642131.1 XP_003286525.1 0.369 148 85 0 7 154 8 142 1.340E-18 94; XP_642131.1 XP_003295036.1 0.328 159 99 0 7 165 8 155 1.304E-15 85; XP_642131.1 XP_003288531.1 0.318 165 104 0 5 169 9 162 3.328E-15 84; XP_642131.1 XP_003294617.1 0.322 149 93 0 7 155 11 148 4.892E-13 78; XP_642131.1 XP_647316.1 0.311 151 95 0 10 160 17 155 4.325E-12 75; XP_642131.1 XP_003290192.1 0.285 169 115 0 1 169 1 162 2.048E-11 73; XP_642131.1 XP_004357246.1 0.293 148 95 0 10 157 6 141 2.152E-09 67; XP_642131.1 KYQ91294.1 0.295 145 94 0 11 155 12 145 2.934E-09 67; XP_642131.1 XP_004362076.1 0.276 147 98 0 12 158 576 712 3.024E-07 61; XP_642131.1 XP_020436152.1 0.275 147 98 0 7 153 7 142 4.115E-07 61; XP_642131.1 XP_642849.1 0.374 78 45 0 94 166 5 82 2.591E-04 52; ```. Somehow the query didn't align correctly with it self. ; Do you have any idea what is happens? . [Attached the log file of the search](https://github.com/soedinglab/MMseqs2/files/2850868/log.search.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/161#issuecomment-462300592:36,test,test,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/161#issuecomment-462300592,4,"['log', 'test']","['log', 'test']"
Testability,"@martin-steinegger OK. Here I am pasting that text:; easy-search MOMZ_moomz1_200m.fna /d/Databases/Kegg/sram/mmseqs/kegg test.m8 tmp --start-sens 1 --sens-steps 3 -s 6 --strand 2 --max-seqs 1 . MMseqs Version: 	4404fe0a78cf6684e1e701e523789d8e6c1bfbe5; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. id. threshold 	0; Min. alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Realign hits 	false; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	40; Compressed 	0; Verbosity 	3; Seed substitution matrix 	nucl:nucleotide.out,aa:VTML80.out; Sensitivity 	6; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max results per query 	1; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	true; Exact k-mer matching 	0; Mask residues 	1; Mask lower case residues 	0; Minimum diagonal score 	15; Spaced k-mers 	1; Spaced k-mer pattern 	; Local temporary path 	; Rescore mode 	0; Remove hits by seq. id. and coverage 	false; Sort results 	0; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum seq. id. threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Omit consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Number search iterations 	1; Start sensiti",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:121,test,test,121,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,1,['test'],['test']
Testability,"@martin-steinegger Thanks for providing the help.; What I am looking for is: I have 2M sequences containing from ~100 species. For each of 2M sequence, I want to find out ALL the hits/similar sequences within the given threshold, such as evalue 0.01, NOT the best hit. ; I tested the following approach: ; First I build the targetDB using 2M sequence. Then I created the index. Then for each query species (~20K sequence), I created the queryDB, then I use MMseqs search with the parameters --max-seqs num_DB_Seq, -s 7.5 -e 0.01. The program call is:; ~/db_mmseqs/10141 ~/db_mmseqs/AllDB ~/db_mmseqs/tmp/8799019798690856849/pref_7.5 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 2264996 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 ; --min-ungapped-score 15 --spaced-kmer-mode 1 --pca 1 --pcb 1.5 --threads 64 -v 3 -s 7.5 . How long do you think it takes for 64 cores to get the results for 2M vs. 2M sequences with all the possible hits?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407667120:273,test,tested,273,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407667120,1,['test'],['tested']
Testability,"@martin-steinegger Thanks for the answer!; Intuitively, I've already tried running your latest suggested command:; `mmseqs convertalis aDB bDB alignDB alnRes.txt --search-type 3 --format-output ""qseq,tseq,query,target,raw,bits,qaln,taln"" --gap-open 3 --gap-extend 0`. However, no output file is generated (in this case, `alnRes.txt`) when the gap options are passed to convertalis. As for the warning, I am quickly testing things on my PC, but the usually I will run this for bigger datasets on a Linux machine. I will test on Linux as well to see if there is any difference. EDIT - On Linux:; `5316 Aborted (core dumped) mmseqs convertalis seqsDB revDB alignDB alnRes.txt --search-type 3 --format-output ""query,target,raw"" --gap-open 3 --gap-extend 1`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481:415,test,testing,415,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481,2,['test'],"['test', 'testing']"
Testability,@martin-steinegger You are welcome; they were found by the automated Debian package quality tests,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/359#issuecomment-706567191:92,test,tests,92,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/359#issuecomment-706567191,1,['test'],['tests']
Testability,@martin-steinegger great! We will test it and let you know if we encounter any problems. Many thanks!,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/60#issuecomment-382682984:34,test,test,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/60#issuecomment-382682984,1,['test'],['test']
Testability,"@martin-steinegger sorry for the delay. I ran the regression (using`mmseqs2 8.fac81 hf3e9acd_1 bioconda`), and it appears that some tests failed. The end of the test output:. ```; Tmp resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp folder does not exist or is not a directory.; Created dir resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp; Program call:; extractorfs resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/targetannotation_nucl resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/tmp/4434917762398107271/orfs --min-length 30 --max-length 98202 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --threads 80 --compressed 0 -v 3. No datafile could be found for resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/targetannotation_nucl_h!; Error: extractorfs died; Command exited with non-zero status 1; 40.25user 1.33system 0:02.64elapsed 1570%CPU (0avgtext+0avgdata 178744maxresident)k; 154744inputs+244552outputs (605major+33470minor)pagefaults 0swaps. LINSEARCH_NUCLNUCL_TARNS_SEARCH; TEST FAILED (NO REPORT). DBPROFILE_INDEX; TEST FAILED (NO REPORT). NUCLPROTTAX_SEARCH; TEST FAILED (NO REPORT). PROTNUCL_SEARCH; TEST FAILED (NO REPORT). EASY_LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. EASY_CLUSTER; TEST SUCCESS; GOOD; Expected: 15682; Actual: 15682. CLUSTER; TEST SUCCESS; GOOD; Expected: 15682; Actual: 15682. NUCLNUCL_TRANS_SEARCH; TEST FAILED (NO REPORT). NUCLNUCL_SEARCH; TEST FAILED (NO REPORT). NUCLPROT_SEARCH; TEST FAILED (NO REPORT). DBPROFILE; TEST SUCCESS; GOOD; Expected: 0.142; Actual: 0.182019. SLICEPROFILE; TEST SUCCESS; GOOD; Expected: 0.140; Actual: 0.147729. EASY_PROFILE; TEST SUCCESS; GOOD; Expected: 0.334; Actual: 0.338768. PROFILE; TEST FAILED; BAD; Expected: 0.367; Actual: 0.324652. EASY_SEARCH; TEST SUCCESS; GOOD; Expected: 0.235; Actual: 0.238355. SEARCH",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488073098:132,test,tests,132,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488073098,2,['test'],"['test', 'tests']"
Testability,"@milot-mirdita Below is the log file from one of the runs. Looks like it's running out of memory, before the job dies. ; <img width=""1438"" alt=""image"" src=""https://user-images.githubusercontent.com/9979661/191375197-838700eb-51d2-4d9c-9be1-efa1c4b9e9a9.png"">. [chunk00_clustering_stdout.log](https://github.com/soedinglab/MMseqs2/files/9611572/chunk00_clustering_stdout.log). And here is the job efficiency report from SLURM; ```; Job ID: 359779; Cluster: aion; User/Group: sbusi/clusterusers; State: OUT_OF_MEMORY (exit code 0); Nodes: 1; Cores per node: 128; CPU Utilized: 10:13:07; CPU Efficiency: 1.00% of 42-16:44:48 core-walltime; Job Wall-clock time: 08:00:21; Memory Utilized: 206.26 GB; Memory Efficiency: 92.08% of 224.00 GB; ```. Do you think merely providing more cores will do the trick or is there something else that I'm missing?. Thank you!. *UPDATE*: Tried the run with more cores, but across 6 nodes - didn't really expect it to work given your last comment, but was worth the shot; ```; Job ID: 360184; Cluster: aion; User/Group: sbusi/clusterusers; State: OUT_OF_MEMORY (exit code 0); Nodes: 6; Cores per node: 128; CPU Utilized: 09:26:34; CPU Efficiency: 0.23% of 172-18:08:00 core-walltime; Job Wall-clock time: 05:23:55; Memory Utilized: 1.21 TB (estimated maximum); Memory Efficiency: 92.41% of 1.31 TB (1.75 GB/core); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/608#issuecomment-1252977214:28,log,log,28,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/608#issuecomment-1252977214,3,['log'],['log']
Testability,"@milot-mirdita I also got indexing error. OS: elementary OS 6; Tool: MMseqs2 13.45111; Source: Conda. Indexed data: chrY sequence taken from the reference human genome. Command:; `mmseqs createindex chrY tmp --search-type 3`. Error log:; ```; createindex chrY tmp --search-type 3 . MMseqs Version: 	13.45111; Seed substitution matrix 	nucl:nucleotide.out,aa:VTML80.out; k-mer length 	0; Alphabet size 	nucl:5,aa:21; Compositional bias 	1; Max sequence length 	65535; Max results per query 	300; Mask residues 	1; Mask lower case residues 	0; Spaced k-mers 	1; Spaced k-mer pattern 	; Sensitivity 	7.5; k-score 	0; Check compatible 	0; Search type 	3; Split database 	0; Split memory limit 	0; Verbosity 	3; Threads 	8; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Compressed 	0; Add orf stop 	false; Overlap between sequences	0; Sequence split mode 	1; Header split mode 	0; Strand selection 	1; Remove temporary files 	false. createindex chrY tmp --search-type 3 . MMseqs Version: 	13.45111; Seed substitution matrix 	nucl:nucleotide.out,aa:VTML80.out; k-mer length 	15; Alphabet size 	nucl:5,aa:21; Compositional bias 	1; Max sequence length 	10000; Max results per query 	300; Mask residues 	1; Mask lower case residues 	0; Spaced k-mers 	1; Spaced k-mer pattern 	; Sensitivity 	7.5; k-score 	0; Check compatible 	0; Search type 	3; Split database 	0; Split memory limit 	0; Verbosity 	3; Threads 	8; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1; Reverse frames 	; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Compressed 	0; Add orf stop 	false; Overlap between seq",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-981845082:232,log,log,232,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-981845082,1,['log'],['log']
Testability,"@milot-mirdita Thanks for the quick response and for the data type fix! I tested the latest master branch, and the `gtdb.lookup` file seems to be correct now after running `mmseqs databases gtdb results tmp`. Taxonomy results look as expected when running `mmseqs easy-taxonomy` using this updated GTDB database. (I did not test the awk code you included, but thanks for writing this.). I think it's OK to close this issue now. Thanks again.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/729#issuecomment-1695134383:74,test,tested,74,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/729#issuecomment-1695134383,2,['test'],"['test', 'tested']"
Testability,"@milot-mirdita Your fix works for the artificial set, but unfortunately, not for my own set. I guess the artificial set has very little similarity between sequences, which should explain the differences in behaviour:. ~ See newest comment below for log with reproducible data ~. `mmseqs cluster DB_in DB_clu tmp/ --cluster-reassign 1 --cluster-mode 0 --cov-mode 0`. Create directory tmp/; cluster DB_in DB_clu tmp/ --cluster-reassign 1 --cluster-mode 0 --cov-mode 0. MMseqs Version: 9290a2b529da9763992bde2e6e0f95c61b003123; Substitution matrix nucl:nucleotide.out,aa:blosum62.out; Seed substitution matrix nucl:nucleotide.out,aa:VTML80.out; Sensitivity 4; k-mer length 0; k-score 2147483647; Alphabet size nucl:5,aa:21; Max sequence length 65535; Max results per query 20; Split database 0; Split mode 2; Split memory limit 0; Coverage threshold 0.8; Coverage mode 0; Compositional bias 1; Diagonal scoring true; Exact k-mer matching 0; Mask residues 1; Mask lower case residues 0; Minimum diagonal score 15; Include identical seq. id. false; Spaced k-mers 1; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Spaced k-mer pattern; Local temporary path; Threads 16; Compressed 0; Verbosity 3; Add backtrace false; Alignment mode 3; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Max reject 2147483647; Max accept 2147483647; Score bias 0; Realign hits false; Realign score bias -0.2; Realign max seqs 2147483647; Gap open cost nucl:5,aa:11; Gap extension cost nucl:2,aa:1; Zdrop 40; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Single step clustering false; Cascaded clustering steps 3; Cluster reassign true; Remove temporary files false; Force restart with latest tmp false; MPI runner; k-mers per sequence 21; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Shift hash ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472:249,log,log,249,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-775767472,1,['log'],['log']
Testability,@milot-mirdita things are not getting much more logical:. `mmseqs cluster ../DB_in/fasta_in_db_HC DB_clu tmp/ --mask 0 -k 5 --spaced-kmer-pattern 110111 --cov-mode 0 --cluster-mode 0 --cluster-reassign 1`. output:; `User-specified k-mer pattern is not consistent with stated k-mer size`,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773242753:48,log,logical,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-773242753,1,['log'],['logical']
Testability,@mooreryan could you please add the log?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282223903:36,log,log,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282223903,1,['log'],['log']
Testability,"@nick-youngblut I am sorry about the multi output. The main reason for them is to avoid IO. Slow IO system can take hours/days to merge tera bytes of data and MMseqs2 modular architecture require multiple IO steps unlike other aligners. The IO step is especially critical if the search was performed using many threads since the merging runs single threaded. ; However, every module should create a `.dbtype` file at the end, which can be used to check if the module finished successfully. . The `clusterupdate` is one of the modules that needs ground up rebuild. Too much of its logic is done in Bash steps that do not verify the consistency correctly. . I am a bit confused why your `clusterupdate` uses `extractorfs`. What is your exact setup? Do you try to update protein clusters using genomes?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664790179:580,log,logic,580,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664790179,1,['log'],['logic']
Testability,@nick-youngblut I can not see the log. Maybe it did not upload?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537596457:34,log,log,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537596457,1,['log'],['log']
Testability,"@nick-youngblut I have added a taxonomy regression test to our test suite. I could not reproduce your error. But we found a critical error, caused by multi threading ,in one modules involved in the 2bLCA search. This issues should be fixed in the main branch. Could you try to run the regression? . git clone https://bitbucket.org/martin_steinegger/mmseqs-benchmark; cd mmseqs-benchmark; ./run_regression.sh mmseqs resultFolder",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-484996995:51,test,test,51,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-484996995,4,"['benchmark', 'test']","['benchmark', 'test']"
Testability,@nick-youngblut interesting. I never tested --alignment-mode 4 with sam. Thank you for pointing it out!,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/143#issuecomment-482873381:37,test,tested,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/143#issuecomment-482873381,1,['test'],['tested']
Testability,@s-devos could you please provide the log of the clustering?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771502389:38,log,log,38,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-771502389,1,['log'],['log']
Testability,"@salvoc81 thank you for sharing this results. Very interesting! ; If you index a database with MMseqs2 then all k-mers are stored if no sensitivity `-s` is provided to `createindex`. However, if you search without an index then only k-mers above a certain `blosom62` threshold, defined by `-s`, are indexed. But it might be possible that these rejected k-mers might can be useful since compositional bias correction (`--comp-bias-corr`) can produce results with lower score than the reject k-mers. In our benchmarks this had no measurable effect. You could test if this is the causes of the disparity by providing the same `-s` as used for the search to `createindex`. Do you have a small example that I could use the reproduce this issue?. Some remark: MMseqs2 ignores indexes on the query site.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-644486973:505,benchmark,benchmarks,505,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-644486973,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,@yiming-gcm were you able to test any of my recommendations to improve the speed of mmseqs?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-418137022:29,test,test,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-418137022,1,['test'],['test']
Testability,@zkstewart could you test it?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-427927682:21,test,test,21,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-427927682,1,['test'],['test']
Testability,@zsram I can not see the uploaded log. Can you past it in a gist https://gist.github.com/?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535228222:34,log,log,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535228222,1,['log'],['log']
Testability,ARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expec,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1757,TEST,TEST,1757,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"Actually you might have a different issue. Please modify the shebang in data/blastp.sh so it says:; ```; #!/bin/bash -ex; ```; instead of `-e`.; Afterwards run cmake, make and post the whole log please. Also make sure to run the search command with an empty tmp folder",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309501710:191,log,log,191,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309501710,1,['log'],['log']
Testability,"Adding taxonomy support for the NT is on my todo list, but it is a bit more involved and I haven't had time for it yet. If you are using the assembly files with their original file names you could use something like this (didn't test it, only collected what I think might work from previous fragments i've written):; ```; ls -1 assemblies \; | awk 'match($1, /^(([A-Z]{3})_([0-9]{3})([0-9]{3})([0-9]{3})\.[0-9]+_.+?)_genomic/, a) { print ""https://ftp.ncbi.nlm.nih.gov/genomes/all/""a[2]""/""a[3]""/""a[4]""/""a[5]""/""a[1]""/""a[1]""_assembly_stats.txt""; }' > assembly_urls.tsv; mkdir tmp; cd tmp; aria2c --input-file=../assembly_urls.tsv; for i in *; do awk '/^# Taxid:/ { gsub(/_assembly_stats.txt/, """", FILENAME); print FILENAME""\t""$3; exit; }' $i; done > ../assembly_taxid_mapping.tsv; cd ..; mmseqs createdb assemblies/* refseqdb; mmseqs createtaxdb refseqdb tmp --tax-mapping-file assembly_taxid_mapping.tsv --tax-mapping-mode 1; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/412#issuecomment-779229734:229,test,test,229,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/412#issuecomment-779229734,1,['test'],['test']
Testability,After testing few strategies I zipped all the commands along with logs for you to have a look after which commands and in which moments the errors occurred. I also attach those with comments to show how the clustering went and with what time efficiency. I understand that I should patch the source and run the software again in the suspected steps to printout the problems?. [logs.zip](https://github.com/soedinglab/MMseqs2/files/1815637/logs.zip),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/72#issuecomment-373386179:6,test,testing,6,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/72#issuecomment-373386179,4,"['log', 'test']","['logs', 'testing']"
Testability,Ah good that there is no seg. fault anymore. Could you attach the log output?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-484315440:66,log,log,66,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-484315440,1,['log'],['log']
Testability,"Ah sorry I had forgotten about your previous message, too many different projects are going on!. Could you check the log-file upload again, I don't see a log.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699957190:117,log,log-file,117,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-699957190,2,['log'],"['log', 'log-file']"
Testability,"Ah that makes sense, sorry.; You need to copy the call to the prefilter module from the output log and only run that in GDB. E.g. from what you posted above from createindex, you would look for a line starting with prefilter and copy that full line:; ```; Time for processing: 0h 23m 17s 335ms; indexdb ./tmp/11929725182862116610/nucl_split_seq ./MMseqs2DB/MMseqs2DB --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 15 --alph-size 21 --comp-bias-corr 1 --max-seq-len 10000 --max-seqs 300 --mask 1 --mask-lower-case 0 --spaced-kmer-mode 1 -s 7.5 --k-score 0 --check-compatible 0 --search-type 3 --split 0 --split-memory-limit 0 --threads 48 -v 3 ; =>; gdb --args mmseqs indexdb ....; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591468961:95,log,log,95,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591468961,1,['log'],['log']
Testability,"Ah the nucl-nucl test are very likely to fail as they include statically compiled binaries for samtools (for linux, windows and macos). I would need to add a statically compiled binary for freebsd too. `SLICEPROFILE` is odd however. The `posix_madvice` error is annoying but can be ignored. I don't see anything special in the freebsd man page that would indicate that this might fail/behave differently. . I am downloading a VM and I'll take a look at these issues.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868528400:17,test,test,17,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868528400,1,['test'],['test']
Testability,"Ah yes, the bioconda version has some known issues. We added quite a lot of testing this recent days and fixed many issues. Could you please try the most recent version? We will make a new release soon.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488123531:76,test,testing,76,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488123531,1,['test'],['testing']
Testability,"All tests pass on my PowerEdge 32-ht system with MMSEQS_NUM_THREADS=16. . Also, I had forgotten that this machine has vmem limits, so I was actually running with about 1G/thread before. Exceprt from build:. [ 3% 10/228] /usr/bin/c++ -I/usr/local/include -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/tinyexpr -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/microtar -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/simde -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/simd -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/gzstream -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/alp -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/cacode -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/ksw2 -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/xxhash -I/usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/ips4o -O2 -pipe -msse2 -fstack-protector-strong -fno-strict-aliasing -O2 -pipe -msse2 -fstack-protector-strong -fno-strict-aliasing -fsigned-char -D_WITH_GETLINE -std=c++1y -stdlib=libc++ -MD -MT lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o -MF lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o.d -o lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o -c /usr/ports/wip/mmseqs2/work/MMseqs2-13-45111/lib/cacode/lambda_calculator.cpp. ... [100% 228/228] : && /usr/bin/c++ -O2 -pipe -msse2 -fstack-protector-strong -fno-strict-aliasing -O2 -pipe -msse2 -fstack-protector-strong -fno-strict-aliasing -lpthread -fstack-protector-strong -fsigned-char -D_WITH_GETLINE -std=c++1y -stdlib=libc++ -pedantic -Wall -Wextra -Wdisabled-optimization -fno-exceptions -fopenmp=libomp src/CMakeFiles/mmseqs.dir/mmseqs.cpp.o -o src/mmseqs src/libmmseqs-framework.a src/version/libversion.a lib/tinyexpr/libtinyexpr.a -lm /usr/local/lib/libzstd.a lib/microtar/libmicrotar.a -lz -lbz2 -lomp && :",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-869007866:4,test,tests,4,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-869007866,1,['test'],['tests']
Testability,"And FYI, SLICEPROFILE succeeded on my 4-core Phenom workstation. The failure occurred on a 16C/32T PowerEdge server. Full output from another run with ```|& tee log``` attached. [log.gz](https://github.com/soedinglab/MMseqs2/files/6717081/log.gz)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868563538:161,log,log,161,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868563538,3,['log'],['log']
Testability,Awesome! @ChiaraVanni will test it and will we back to you in case we find any problem. Many thanks!,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/316#issuecomment-665665007:27,test,test,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/316#issuecomment-665665007,1,['test'],['test']
Testability,"Awesome! I pulled down the new commit, removed the old build directory and followed the installation instructions in the readme but run into an error ( cmake 3.7.1 and g++ v4.9). Should I remove the whole github repo for a clean installation or is this compilation error something that was introduced in the commit?; See log below. ```; [ksahlin@desmond build]$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 4.9.2; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Source Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Project Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Compiler is GNU ; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Using CPU native flags for SSE optimization: -march=native; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.1 extensions, using flags: -march=native -msse4.1 -mfpmath=sse; -- Found ZLIB; -- Performing Test HAVE_ZLIB_C",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:321,log,log,321,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,1,['log'],['log']
Testability,"CCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNU",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1507,TEST,TEST,1507,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,Can you please check again that the log file is uploaded?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/609#issuecomment-1275786723:36,log,log,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/609#issuecomment-1275786723,1,['log'],['log']
Testability,Can you post the full log and call to MMseqs2 please?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593591780:22,log,log,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593591780,1,['log'],['log']
Testability,"Can you try the newest MMseqs2 release? 7 is really ancient. MMseqs2 is however really not well tested for clustering whole genomes/long contigs. You might have more luck in running only linclust and not the whole clustering workflow. > PS: Y'all are ANGELS for keeping up with all the users and issues listed for mmseqs. Seriously grateful, hoping you have ample funding to keep the devs happy... 🥲",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/632#issuecomment-1293776287:96,test,tested,96,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/632#issuecomment-1293776287,1,['test'],['tested']
Testability,"Can you try to run it on a single node (without MPI, etc). Issues in MPI support might have gone unnoticed since we switched to 128 core machines. Yes, i mean `mmseqs (easy-)cluster` with normal clustering. That one should also successfully finish eventually on a single of these compute nodes. Can you please post the full log output? Maybe something else went wrong.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/608#issuecomment-1252077861:324,log,log,324,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/608#issuecomment-1252077861,1,['log'],['log']
Testability,"Can you use the `MMSEQS_ARCH` cmake flag to fix the mips build? I could add a flag like HAVE_ARM8 for MIPS. However, I am not sure we want to add code that is not regularly tested by continuous integration.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/358#issuecomment-707829562:173,test,tested,173,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/358#issuecomment-707829562,1,['test'],['tested']
Testability,"Changes in mmseqs-benchmark regression to test taxonomyreport:; ```sh; # Create taxreport; ""${MMSEQS}"" taxonomyreport -v 3 ""$TARGETDB"" ""$RESULTS/results_aln"" ""$RESULTS/results_aln_taxreport"". # Check numbers in taxreport; R_BACTERIA=$(grep 'superkingdom.*Bacteria' ""$RESULTS/results_aln_taxreport"" | cut -f 2); R_VIRUS=$(grep 'superkingdom.*Virus' ""$RESULTS/results_aln_taxreport"" | cut -f 2); R_EUKARYOTA=$(grep 'superkingdom.*Eukaryota' ""$RESULTS/results_aln_taxreport"" | cut -f 2). TARGET=""from filtertaxdb: 2524 259 2713; from taxonomyreport: 2524 259 2713""; ACTUAL=""from filtertaxdb: $BACTERIA $VIRUS $EUKARYOTA; from taxonomyreport: $R_BACTERIA $R_VIRUS $R_EUKARYOTA""; awk -v actual=""$ACTUAL"" -v target=""$TARGET"" 'BEGIN { print (actual == target) ? ""GOOD"" : ""BAD""; \; print ""Expected: "", target; \; print ""Actual: "", actual; }' > ""${RESULTS}/report""; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/197#issuecomment-487191923:18,benchmark,benchmark,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/197#issuecomment-487191923,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"Clust -> /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db; ```. ...and the symlink doesn't point to a file, since my original cluster database was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.9; ```. ...another reason why the multi-file output of mmseqs commands produces headaches. Why",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1260,test,tests,1260,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,1,['test'],['tests']
Testability,"Commands to reproduce follow. First commands on the whole database (these will run OK):; mmseqs createindex db tmp. Now, split the same database, make sub-databases out of the splits and try createindex on any of the splits. This will sometimes work but most of the time will get stucked, as described. The commands:. mmseqs splitdb db db_p --split 2; mmseqs createsubdb db_p_0_2.index db_h db_p_0_2_h. These commands run smoothly and without reporting any problems. The last one is repeated for each split, as per the manual.; The problematic is then:. mmseqs createindex db_p_0_2 tmp. db can be any amino acid database, the number of splits does not matter.; The log is for db==uniref90 and 4 splits. In interactive mode I can see that there is a summary of time taken to fill the index printed after the last ""="", not sure why it is not wisible in the log. But no more lines and no progress beyond this step.; HTH; j131",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/314#issuecomment-633213113:665,log,log,665,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/314#issuecomment-633213113,2,['log'],['log']
Testability,Commit 14014cd0ec50049f796f153ea8a72164ff4b8b45 should be stable and safe to use. Could you please test if the instability was resolved on your dataset?. You will find precompiled binaries [here](http://mmseqs.com/archive/14014cd0ec50049f796f153ea8a72164ff4b8b45) (once the CI builds them).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-593713722:99,test,test,99,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-593713722,1,['test'],['test']
Testability,Could you also provide the log please? The `--max-seqs num_DB_Seq` slows down the search.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408819810:27,log,log,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408819810,1,['log'],['log']
Testability,Could you please add the log of this search?. One thing that might happen is that your database has no taxonomical information for this sequences. Could you check if the identifier of this viruses has a mapping in the `_mapping` file?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/241#issuecomment-556843463:25,log,log,25,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/241#issuecomment-556843463,1,['log'],['log']
Testability,Could you please post the full long until it hands?. generally mmseqs is not very good at small number of queries. We have built various optimizations to deal with that (e.g. for ColabFold) but they come with very different trade-offs. let’s see what the log says first before further recommendations.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899556332:255,log,log,255,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899556332,1,['log'],['log']
Testability,Could you please provide a log of your clustering run?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/218#issuecomment-508142185:27,log,log,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/218#issuecomment-508142185,1,['log'],['log']
Testability,Could you please provide the full log? Is it possible to provide your input?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570895614:34,log,log,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/261#issuecomment-570895614,1,['log'],['log']
Testability,Could you please provide the log? Thanks a lot.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535153285:29,log,log,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535153285,1,['log'],['log']
Testability,Could you post the full log of the MPI run when you get the chance? Did using `-c` work for the other issue?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843139013:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843139013,1,['log'],['log']
Testability,Could you post the full log of the two runs? That would make it easier to say what might be going wrong.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823623149:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823623149,1,['log'],['log']
Testability,Could you post the full log output of MMseqs2?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/385#issuecomment-744418706:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/385#issuecomment-744418706,1,['log'],['log']
Testability,Could you post the full log please?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-468335271:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-468335271,1,['log'],['log']
Testability,Could you post the full log please? This error invalid read error usually means some step before went wrong.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537566846:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537566846,1,['log'],['log']
Testability,"Could you post the full log? MMseqs2 should be okay with far less memory than you gave it, sounds like you ran into another bug somehow.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452239805:24,log,log,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452239805,1,['log'],['log']
Testability,"Could you post the log and the machine specs? It should work up to UINT_MAX without issue, however RAM overhead just for holding the entries also increases linearly and might become an issue at this point.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-624785799:19,log,log,19,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-624785799,1,['log'],['log']
Testability,Could you post the log of MMseqs please and how you called it? Did you recompute the index?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275630519:19,log,log,19,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275630519,1,['log'],['log']
Testability,Could you post the whole log?. It looks like the prefilter step failed for some reason and the next step is now complaining about that.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/11#issuecomment-274582541:25,log,log,25,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/11#issuecomment-274582541,1,['log'],['log']
Testability,"Could you post the whole output log please?. What happens if you run it with only the --cascaded parameter (no e, max-seqs, similarity-type).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/28#issuecomment-298669687:32,log,log,32,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/28#issuecomment-298669687,1,['log'],['log']
Testability,"Could you provide the call and log and if possible also a backtrace (see https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441411023) of the `convertalis` crash? For the pairwise alignments the `--format-output` parameter needs to include `qaln,taln`. Search databases should work directly (please provide the log so we can see what went wrong). For cluster databases you have to align the result clustering with the `align -a` module and parameter to generate the alignment information and backtrace and then call `convertalis`. Can you post how `pbp.found_with_profile.ALIGNEDREGIONS` was generated. I am not sure what might be going wrong with that call. Also I am not very sure what exactly want. I thought you want MSAs? `convertalis` will only give you pairwise alignments between the query and all hits. It won't give you an MSA at all.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458957293:31,log,log,31,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458957293,2,['log'],['log']
Testability,"Could you provide the calls how you generated the matrix, and how you called MMseqs2? . Alternative substitution matrices are not well tested, so we might have to work more on that code branch.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/293#issuecomment-604468047:135,test,tested,135,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/293#issuecomment-604468047,1,['test'],['tested']
Testability,Could you rebase ontop of 67d61013628911d8fce01a5aed6380f2a3de7f23? I think that should solve some of the weird log length issues with travis.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-627221446:112,log,log,112,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-627221446,1,['log'],['log']
Testability,"Could you run something like this to check if the sequence database is in someway unusual:. ```; awk 'BEGIN { min = 2^32; } $3 < min { min = $3 }; $3 > max { max = $3 } { sum = sum + $3; n = n + 1; } END { print sum/n,min,max; }' ${output}/plass_assembly_noclust.index; ```. We might have an issue with our split logic for databases larger than the available system memory. . Edit: Do the same for the offset column too please:; ```; awk 'BEGIN { min = 2^32; } $2 < min { min = $2 }; $2 > max { max = $2 } { sum = sum + $2; n = n + 1; } END { print sum/n,min,max; }' ${output}/plass_assembly_noclust.index; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-497691622:313,log,logic,313,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-497691622,1,['log'],['logic']
Testability,"Could you send me the intermediate/result files? These do not contain neither sequences nor identifiers.; ```; THREADS=1; mmseqs easy-search /home/bastian/data/benchmark/Dyadobacter_sp__SG02_1855291.fasta /home/bastian/data/benchmark/DF_PP_full100.fa.fixed.mmseqsdb /home/bastian/data/benchmark/mmseqs_test_again/Dyadobacter_sp__SG02_1855291_vs_DF_PP_full100.fa.fixed.1core.mmseqsresult ""/home/bastian/data/benchmark/mmseqs_test_again/tmp${THREADS}/"" --remove-tmp-files false --threads ""${THREADS}""; tar czvf ""mmseqs-intermediate-threads${THREADS}.tar.gz"" /home/bastian/data/benchmark/mmseqs_test_again/tmp${THREADS}/latest/result* /home/bastian/data/benchmark/mmseqs_test_again/tmp${THREADS}/latest/search_tmp ; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590323885:160,benchmark,benchmark,160,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590323885,6,['benchmark'],['benchmark']
Testability,Could you upload a few contigs? I am confused where it's actually crashing in the log it's crashing in `summarizealis` and in the snippet in `addtaxonomy`. It would be great to have something to reproduce the issue locally.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-830090610:82,log,log,82,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-830090610,1,['log'],['log']
Testability,D (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_D,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1969,TEST,TEST,1969,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"D; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1206,TEST,TEST,1206,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"Dear Martin,. thanks! Have checked out the latest code and it works fine :). Best,; Thomas. > Am 23.02.2017 um 05:29 schrieb Martin Steinegger <notifications@github.com>:; > ; > Dear Thomas,; > ; > I fixed the issues with diag-score 0 and rolled back to the original clustering workflow. Could you please test if the issues is solved? Thanks a lot.; > ; > Best regards,; > Martin; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-282488689:305,test,test,305,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-282488689,1,['test'],['test']
Testability,"Dear Milot,. thanks for the quick reply. It helps me a lot, and I will for the moment prevent the less tested options. Will stick to BL62 for the moment, and will play with the options you've mentioned. Best wishes,; Thomas. > Am 14.02.2017 um 19:11 schrieb Milot Mirdita <notifications@github.com>:; > ; > Hi Thomas,; > ; > Just a heads-up: Martin, who should be able to help you, is on vacation until next week.; > ; > About the sub-mat parameter: Everything except blosum62 is pretty untested. Also supplying a custom score matrix won't work yet, since we rely on some pretrained hard-coded values (BlastScoreUtils.cpp).; > ; > You should probably only tweak the -s, -c and --min-seq-id (and maybe --min-ungapped-score) parameters.; > ; > Best regards,; > Milot; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-279972920:103,test,tested,103,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-279972920,1,['test'],['tested']
Testability,"Dear Thomas, . I fixed the issues with diag-score 0 and rolled back to the original clustering workflow. Could you please test if the issues is solved? Thanks a lot. I opened a seperate issues for the sub. mat. problem. https://github.com/soedinglab/mmseqs2/issues/20 . Best regards,; Martin",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-281891658:122,test,test,122,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/15#issuecomment-281891658,1,['test'],['test']
Testability,Do you still have the full log?. Could you show the first few lines of these files:. ```; head -n 3 tmpP/10678025033020444421/clu_tmp/1344998481088077811/input_step_redundancy*; head -n 3 tmpP/10678025033020444421/clu_tmp/1344998481088077811/pref_rescore2*; head -n 3 tmpP/10678025033020444421/clu_tmp/1344998481088077811/aln*; ```. That's a very weird error. It seems to be crashing in calculating E-values. That would only be possible if it's fed some corrupted input.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/265#issuecomment-574644066:27,log,log,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/265#issuecomment-574644066,1,['log'],['log']
Testability,Does the issue also happen in the newest release?; Could you capture the full log of the different runs and upload those?. Sending us the data via email or similar is also not possible?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590249182:78,log,log,78,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590249182,1,['log'],['log']
Testability,"Does this mean that for a sequence of 2kbp, it would take 400 k-mers, and for a sequence of 20kbp, it would take 4000 k-mers if I set --kmer-per-seq-scale 0.2? My sequences have an average length of about 20kbp, so theoretically, --kmer-per-seq-scale 0.2 might yield results similar to or better than --kmer-per-seq 2000? However, when I tested --kmer-per-seq-scale with values of 0.2, 1, and 20, I found that the number of clusters did not significantly differ from running Linclust with default parameter. The number of clusters was roughly twice as many as when using --kmer-per-seq 2000. As an example, I examined the largest cluster (containing 19,000 sequences) obtained using --kmer-per-seq 2000 . I inspected the length distribution of sequences within this cluster. The cumulative total sequences counts of the top four sequence lengths was 14,000, as follows [seq count, seq length]: ; 1274 4413.0, ; 2985 4411.0, ; 3397 5350.0, ; 7109 4409.0. ; I think most of these sequences should be highly similar, indicating that this clustering is relatively accurate.; I took some individual examples from this cluster to examine the results of --kmer-per-seq-scale and found that some nearly identical sequences (same length, 99% identity) were not clustered together when using --kmer-per-seq-scale. Meanwhile the largest cluster of --kmer-per-seq-scale 1 contains only 6341 seqs.; As a side note, I set the threshold to 95% identity and 85% coverage. . Overall, from my test results, I'm uncertain if there are issues with --kmer-per-seq-scale. Setting it doesn't seem to increase clustering sensitivity as expected. However, perhaps this is because I don't fully understand its principle, so I'm hoping to consult you on this matter. > There is not that much downside to increasing the kmer-per-seq to 2000. It will slow down linclust somewhat, but for only 2M entries it shouldn't really matter.; > ; > You might want to use `--kmer-per-seq-scale` though. This parameter adds additional k-mers ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/831#issuecomment-2033788917:338,test,tested,338,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/831#issuecomment-2033788917,1,['test'],['tested']
Testability,"Everything should be here: ; https://bitbucket.org/martin_steinegger/mmseqs-benchmark; http://gwdu111.gwdg.de/~compbiol/mmseqs2/mmseqs2-benchmark.tar.gz. However, most scripts are also kind of outdated, parameters changed etc. So getting them to run with the latest MMseqs2 version might be a bit of work. We run a far smaller set of tests on every commit:; https://github.com/soedinglab/mmseqs2-regression; These scripts here originated from the above mentioned repository and might be useful to get commands to run again with the latest MMseqs2.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/296#issuecomment-607941034:76,benchmark,benchmark,76,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/296#issuecomment-607941034,3,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARC",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1590,TEST,TEST,1590,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,Fixed the issue and changed the regression test from 2 iterations to 3 (https://bitbucket.org/martin_steinegger/mmseqs-benchmark/commits/7d99a2e8a4f6f7ba7d61a17a176535b01b0df490),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/185#issuecomment-481996311:43,test,test,43,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/185#issuecomment-481996311,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Getrlimit RLIMIT_MEMLOCK does not behave how I expected. ; I changed the code back. ; Can you test it again?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/9#issuecomment-273217375:94,test,test,94,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/9#issuecomment-273217375,1,['test'],['test']
Testability,"GitHub Markdown turns them into a quote. . Everything regarding this file is alright though. That's a new feature to reduce IO that confused me. ; Not sure what else might be going wrong here though. Could you try the latest git version? Also if you rerun, could you save the full log? I am a bit at a loss on how to recreate the issue.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/265#issuecomment-574721053:281,log,log,281,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/265#issuecomment-574721053,1,['log'],['log']
Testability,"Good morning Milot. Thanks a lot for your response. I got pssms by performing the following command:; - ls -l; rw-r--r-- 1 1693345 Jul 28 09:24 out.mm_msa; rw-r--r-- 1 4 Jul 28 09:24 out.mm_msa.dbtype; rw-r--r-- 1 29 Jul 28 09:24 out.mm_msa.index. - mmseqs msa2profile out.mm_msa prof; - mmseqs profile2pssm prof pssm. It's extremely fast. The pssm format is as follows:; Pos	Cns	A	C	D	E	F	G	H	I	K	L	M	N	P	Q	R	S	T	V	W	Y; 0	S	5	-1	-2	-3	0	-1	-2	-2	-2	-3	-1	-1	-1	-3	-1	6	0	0	-2	-1; 1	L	0	-1	-2	-3	0	-2	-1	-2	-2	4	8	-1	-1	-3	-2	-2	-1	0	-2	-1; 2	E	1	-1	0	4	0	1	-2	-2	2	-3	-1	2	-1	-2	-2	0	-4	-1	-2	-1. Are the numbers log-values? I have to have them normalized between 0 and 1. Any hint is welcome. Kind regards,",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/580#issuecomment-1197737818:614,log,log-values,614,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/580#issuecomment-1197737818,1,['log'],['log-values']
Testability,Got this error today on r4.4xlarge and [fusion](https://seqera.io/fusion/) via Nextflow on AWS Batch. Maybe it's a filesystem thing. [command.log](https://github.com/soedinglab/MMseqs2/files/13994933/command.log); [command.sh.txt](https://github.com/soedinglab/MMseqs2/files/13994938/command.sh.txt),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1901172701:142,log,log,142,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-1901172701,2,['log'],['log']
Testability,"Great. Now I actually understand what the difference is between i: and o: ; 👍 . Just a quick question: I mostly use default settings like -k 0 which sets kmer to optimum (although I must admit I have no idea what the mathematical basis of this feature is). And it works fine, the algorithm seems to use kmer=6. Why does it use 6, and not 7? What would happen if I use 7? Would it be more sensitive and slower? I'm a veterinarian, the nature biotech paper is mostly elvish to me. Will try to toy around and benchmark some more. Thanks for the help. Nicolaas",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/169#issuecomment-470895176:506,benchmark,benchmark,506,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/169#issuecomment-470895176,1,['benchmark'],['benchmark']
Testability,"H (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 13s); TEST SUCCESS; GOOD; Expected: 512,256,128,64,32; Actual: 512,256,128,64,32. In what little output didn't scroll away, I see a couple of messages like this:. posix_madvise returned an error /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/NOMPI_SLICE_TECH/DSL_17K_SPLIT_MODE_1/tmpFolder/4754201167969432722/pref",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2679,TEST,TEST,2679,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,9,['TEST'],['TEST']
Testability,"Happy to run any additional tests you might have in mind or provide any further info. ""Running only the MMseqs2 prefilter with perf might help debugging the performance issue."" . Happy to take your code if provided, but I assume just copying out the first prefilter command printed in the log would do? E.g. `prefilter out/qdb_multi /scratch-cbe/users/juraj.ahel/db_copy/uniref30_2202_db.idx out/tmp/13555276572390281633/pref_0 --sub-mat 'aa:blosum62.out,nucl:nucleotide.out' --seed-sub-mat 'aa:VTML80.out,nucl:nucleotide.out' -s 8 -k 0 --k-score seq:2147483647,prof:2147483647 --alph-size aa:21,nucl:5 --max-seq-len 65535 --max-seqs 10000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --comp-bias-corr-scale 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-prob 0.9 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 2 --pca substitution:1.100,context:1.400 --pcb substitution:4.100,context:5.800 --threads 2 --compressed 0 -v 3; `. If it would be about lack of SIMD support, could I somehow see it in the runtime, whether with existing compilation or some flag that makes it crash in absence of AVX2?. I just remembered the compilation was done on the login node of the cluster, possibly there is an issue with the compute nodes. Will try and rerun cmake there.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397194638:28,test,tests,28,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397194638,3,"['log', 'test']","['log', 'login', 'tests']"
Testability,"Hello @martin-steinegger and @milot-mirdita . Sorry if I could not test before...; I have tried today to convert the HMM (Pfam 32) to profiles but I think some files are missing.; The symlink to pfam_hmm.ffdata is missing, and pfam_hmm_db.index is missing. I am not sure how to create the pfam_hmm_db.index file",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/130#issuecomment-496763908:67,test,test,67,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/130#issuecomment-496763908,1,['test'],['test']
Testability,"Hello @milot-mirdita and @martin-steinegger . ; Sorry if it took me some time to extra testing. As Milot was suggesting the problem happens when `createindex` and `search` are not set to use the Matrix.; Following I am showing the results alignments of a proteome against itself, using different combinations of of VTML80 and blosum62 for `createindex` and `search`. . | Pair | createindex | search | count | seconds |; | ------ | ------ | ------ | ------ | ------ |; | a-a | blosum62 | blosum62 | 10205 | 17.11 |; | a-a | VTML80 | blosum62 | 13962 | 91.36 |; | a-a | VTML80 | VTML80 | 14268 | 98.56 |; | a-a | blosum62 | VTML80 | 10709 | 16.5 |; | a-a | VTML40 | VTML40 | 14032 | 105.10 |. # Same alignments without indexing. | Pair | createindex | search | count | seconds |; | ------ | ------ | ------ | ------ | ------ |; | a-a | none | VTML80 | 14268 | 69.96 |; | a-a | none | blosum62 | 10205 | 13.66 |. As you can see from the second line, the results are same as in the first line of the fist table (in which only blosum62 was used). . I guess this solves the issue, and I am happy we found the problem :) ; Nevertheless, it would be very useful to have some kind of warning or even better, error message to avoid such things to happen (unless it is not the user's decision, in which case a ""--force-submat"" parameter might be handy). . Also, as I understand, among the `BLOSUM` matrixes only `blosum62` can be set at present, while different VTML matrixes can be set. . Could you please point me to somewhere I can see which MATRIXES can be used? ; Most matrixes files are under the `data` directory, but many did not work in my tests.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-674686756:87,test,testing,87,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/318#issuecomment-674686756,2,['test'],"['testing', 'tests']"
Testability,"Hello @milot-mirdita and sorry for my late reply.; It seems MMseqs gets slower when using preindexed databases on AMD, although it was unexpected.; I will try to post the logs in a few week, ad the Intel machine is being completely used by other colleagues.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-894054280:171,log,logs,171,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-894054280,1,['log'],['logs']
Testability,"Hello Milot, thanks a lot for the very fast reply.; That would maybe explain why it worked when splitting the sequences.; Just to confirm, should I test using latest commit?; 'Allocate correct amount of memory for DBReader::serialize'",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/109#issuecomment-410698450:148,test,test,148,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/109#issuecomment-410698450,1,['test'],['test']
Testability,"Hello,. Just to report that this issue keeps happening with short sequences in version `14-7e284`. Here is the log file section:; ```; Query database size: 1 type: Aminoacid; Estimated memory consumption: 977M; Target database size: 1 type: Aminoacid; Index table k-mer threshold: 154 at k-mer size 6 ; Index table: counting k-mers; [=================================================================] 1 0s 5ms; Index table: Masked residues: 52; No k-mer could be extracted for the database OG29842_tmp/9235789383789574915/clu_tmp/8036944701986152555/input_step_redundancy.; ```. I do not know if it has been addressed previously, but I have the feeling it's due to short sequences, mine are 55-60 AAs long.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/149#issuecomment-1781102918:111,log,log,111,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/149#issuecomment-1781102918,1,['log'],['log']
Testability,"Hello,; I cannot reproduce the issue sadly. However I also don't have the NR available right now. Could you please compile MMseqs again in debug mode:; ``; cmake -DHAVE_MPI=0 -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=. ..; ``; (Also paste the cmake log please). And run only the crashing prefilter with a debugger:; ``; gdb --args PATH/TO/DEBUG/bin/mmseqs prefilter mmseq-testDB /junk/databases/mmseqs/nr /root/tmp/blast/tmp/pref_4 --sub-mat blosum62.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 -c 0 --comp-bias-corr 1 --diag-score 1 --mask 1 --min-ungapped-score 15 --spaced-kmer-mode 1 --threads 64 -v 3 -s 4 ; ``. Then type run to start mmseqs and when it crashes type bt for a backtrace. Please paste the backtrace here. Edit: I am downloading the NR and will try to reproduce the issue using that too.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301061921:255,log,log,255,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301061921,2,"['log', 'test']","['log', 'testDB']"
Testability,"Hello,; I get the same error when trying the clustering of DNA sequences extracted from prokka annotation (.ffn). the command is : . $ mmseqs easy-cluster pacbio_assembly_protein_DNA_dereplicated.ffn clusterPacbio temp --min-seq-id 0.9. The error messages are after this step : ; ""; [=================================================================] 100.00% 245.49K 0s 110ms ; Add missing connections; [=================================================================] 100.00% 245.49K 0s 7ms . Time for read in: 0h 0m 0s 279ms; there must be an error: 138172 deleted from 117856 that now is empty, but not assigned to a cluster; there must be an error: 139364 deleted from 144033 that now is empty, but not assigned to a cluster; there must be an error: 119199 deleted from 119499 that now is empty, but not assigned to a cluster; there must be an error: 119078 deleted from 137716 that now is empty, but not assigned to a cluster; there must be an error: 120853 deleted from 137082 that now is empty, but not assigned to a cluster; there must be an error: 17414 deleted from 150027 that now is empty, but not assigned to a cluster; there must be an error: 119826 deleted from 117153 that now is empty, but not assigned to a cluster; there must be an error: 117154 deleted from 119723 that now is empty, but not assigned to a cluster; "". and before Clestering step 1. Those these errors affects the quality of the clustering ? . Thanks for your time. Aline. MMseqs Version: 5b03cdff7a91206bfd5db82b5b2f23bd6c8f0813. Complete log : [log_pacbio_error.txt](https://github.com/soedinglab/MMseqs2/files/5829621/log_pacbio_error.txt). The compressed 'pacbio_assembly_protein_DNA_dereplicated.ffn' input file can be found here https://enacshare.epfl.ch/dqTYpbvUuJiCnsktFWyfN",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/363#issuecomment-762165673:1527,log,log,1527,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/363#issuecomment-762165673,1,['log'],['log']
Testability,"Here are the exact statistics of the sequences that I am trying to cluster to help understand what's going on. - Number of Nucleotide Sequences: **60,621,169**; - Sum of the Lengths of all Sequences: **326,476,863,573 bp**; - Length of the Shortest Sequence: **6 bp** ; - Length of the Longest Sequence: **99,791,824 bp**; - Average Length of Sequences: **5,385 bp**; - Median Length of Sequences: **1,154 bp**; - 25% of Sequences are below: **579 bp**; - 75% of Sequences are below: **2,304 bp**; - N50 of Sequences: **2,879,031 bp**. And here is the log file of `mmseqs easy-linclust` after 3000 CPU hours. [log.txt](https://github.com/soedinglab/MMseqs2/files/5362803/log.txt). What parameters of `mmseqs easy-linclust` would be best to cluster such a distribution of sequences at 99% identity?. Thanks for your time.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-706843430:552,log,log,552,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-706843430,3,['log'],['log']
Testability,Here is the [full file](https://drive.google.com/file/d/1SI5ODslZeELYWcRsuL58XT5v_UOArwdr/view?usp=sharing). . I tested by subselecting sequences out of that file. . For instance the crash happens with this file:; ```; head -90000 test.fasta > test-90000.fasta; ```; whilst it doesn't happen with this other file:; ```; head -89000 test.fasta > test-89000.fasta; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441409687:113,test,tested,113,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/136#issuecomment-441409687,5,['test'],"['test', 'test-', 'tested']"
Testability,"Here's a log from one of the 10 batch jobs: [mmseqs_taxonomy.log](https://github.com/soedinglab/MMseqs2/files/2916694/mmseqs_taxonomy.log). I was using the following paramters: ` -e 1e-5 --max-seqs 200 --lca-ranks ""kingdom:phylum:class:order:family:genus:species"" --split 4 --threads 12`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-468417493:9,log,log,9,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/168#issuecomment-468417493,3,['log'],['log']
Testability,"Hi . thanks for reporting this issues. Could you please provide the output of MMseqs2 and the how you called it?. I tried to reproduce Unexpected Behavior 1 by using this workflow. ```; mmseqs createdb test.fasta test; mmseqs search test test res /tmp/res/ -a; mmseqs convertalis test test res res.tsv; ```. The output is . ```. 0000_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0000_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0000_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0001_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0002_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0000_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; 0002_A 0001_A 1.000 25 26 0 1 26 1 26 9.85E-14 54; ```. Unexpected Behavior 3:; There is a sequence length limitation in MMseqs2. With 6-mer spaced it needs at least 13 residues to detect a hit, w/o spacing just 12.; I can run this example 3 without any error message.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275014229:202,test,test,202,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275014229,6,['test'],['test']
Testability,"Hi @martin-steinegger , sorry for late response. Well, I agree with you about gap costs and diversity of the profiles, but it is just to attend more flexibility of options, for example, commonly blast has fixed gap costs if the user really wants to use same gap costs it's possible. . Well, I did not do anything so hard to benchmark, I'm send you the script I did, I also may send you the database, query and results, but I think the parameters I used is enough. [scripts.zip](https://github.com/soedinglab/MMseqs2/files/2249981/scripts.zip). If you want all analysis just tell me and I send ASAP.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-409606023:324,benchmark,benchmark,324,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-409606023,1,['benchmark'],['benchmark']
Testability,"Hi @martin-steinegger , thanks! Let me know if you need additional test sets, just in case. Cheers",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394613434:67,test,test,67,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394613434,1,['test'],['test']
Testability,"Hi @martin-steinegger ,; many thanks for this update. From our first tests we see a clear improvement in this scenario and we are now able to find more exact matches with MMSeqs2 than before and even compared to Diamond.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-395755566:69,test,tests,69,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-395755566,1,['test'],['tests']
Testability,"Hi @milot-mirdita ,; thanks for the reply, we are still testing the different options, for the moment we have seen a small improvement adding these parameters (e.g. we are able to find exact matches for 10-15 more sequences). . I have put online the almost 500 sequences for which we completely miss the exact match against themselves. You can download the Fasta file from here: https://www.dropbox.com/s/jf88389zuj2nddn/missed_exact_matches_mmseqs2.fasta.gz?dl=0. These are part of the UniRef90 2018_04 release.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394364168:56,test,testing,56,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-394364168,1,['test'],['testing']
Testability,"Hi @milot-mirdita . I was needing more than one hit per query. Actually, I was trying to find domains/regions with a high score but since I have a lot of multidomain proteins I need all high score local alignments. So I remove redundancy at 30% of identity, searched all against all, I have removed self-matches and choose hits with very low e-value. I preferred to do this externally to MMSeqs. Now I'm clustering these regions. . Anyway, I did test those commands anyway. ```; mmseqs filterdb pbps.neighbors.rep30.ALN pbps.neighbors.rep30.ALN.top1 --extract-lines 1; mmseqs extractalignedregion id_0.3cov_0.8evalue_0.001/pbps.neighbors.db id_0.3cov_0.8evalue_0.001/pbps.neighbors.db pbps.neighbors.rep30.ALN.top1 pbps.neighbors.rep30.ALN.SEQ --threads 40; mmseqs cluster pbps.neighbors.rep30.ALN.SEQ pbps.neighbors.rep30.ALN.SEQ.CLU -c 0 -e 1e-10 --threads 40 --max-seqs 300 --kmer-per-seq 80 -s 7.5 -a; mmseqs createtsv pbps.neighbors.rep30.ALN.SEQ pbps.neighbors.rep30.ALN.SEQ.CLU pbps.neighbors.rep30.ALN.SEQ.CLU.tsv; ```. Also, I did use coordinates of matches in target and extract with any other sequence manipulation tool. ```; mmseqs createdb pbps.neighbors.regions.fa pbps.neighbors.regions.DB; mmseqs cluster pbps.neighbors.regions.DB pbps.neighbors.regions.CLU /tmp/ --threads 40 -c 0.8 --min-seq-id 0.8; mmseqs createtsv pbps.neighbors.regions.DB pbps.neighbors.regions.CLU pbps.neighbors.regions.CLU.tsv --threads 40; mmseqs result2repseq pbps.neighbors.regions.DB pbps.neighbors.regions.CLU pbps.neighbors.regions.CLU.REP ; ln -s pbps.neighbors.regions.DB_h pbps.neighbors.regions.CLU.REP_h ; ln -s pbps.neighbors.regions.DB_h.index pbps.neighbors.regions.CLU.REP_h.index ; mmseqs cluster pbps.neighbors.regions.CLU.REP pbps.neighbors.regions.CLU.REP.CLU tmp -c 0 -e 1e-10 --threads 40 --max-seqs 300 --kmer-per-seq 80 -s 7.5 -a ; mmseqs createtsv pbps.neighbors.regions.CLU.REP pbps.neighbors.regions.CLU.REP.CLU pbps.neighbors.regions.CLU.REP.CLU.tsv --threads 40 ; mmseqs createseqf",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499589040:446,test,test,446,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499589040,1,['test'],['test']
Testability,Hi @milot-mirdita and @martin-steinegger thanks for the answers! Just for the records we had already previously tested this step also on instances having 2 local NVMe disks mounted in RAID 0 and the performance was similar. We will keep this requirement in mind and try to run the ```createdb``` step on a larger disk array whenever possible.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/124#issuecomment-426712115:112,test,tested,112,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/124#issuecomment-426712115,1,['test'],['tested']
Testability,"Hi @salvoc81, could you post a full log of both runs (on both AMD and Intel)? I am not sure how to tackle this.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-879736667:36,log,log,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-879736667,1,['log'],['log']
Testability,"Hi Ivan,; I see the mistake, please use the `--filter-msa` parameter as a workaround. I will take a closer look at the issue either tomorrow or next week. You could also change line 349 in result2profile.cpp to:. ```; if (par.filterMsa == false || res.keep[i + 1]) {; ```. that should also fix it. Didn't test it however.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/36#issuecomment-311753617:305,test,test,305,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/36#issuecomment-311753617,1,['test'],['test']
Testability,"Hi Jaime,. I added this feature to my dev branch. I will merge it into the main branch as soon as my branch is tested and stable. Best,. Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/21#issuecomment-282720604:111,test,tested,111,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/21#issuecomment-282720604,1,['test'],['tested']
Testability,"Hi Martin, I've uploaded a log file; Thanks and best regards,; ---sram. On Wed, Sep 25, 2019 at 3:31 PM Martin Steinegger <notifications@github.com>; wrote:. > Could you please provide the log? Thanks a lot.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/soedinglab/MMseqs2/issues/231?email_source=notifications&email_token=AK464H2SUC6W7QLCGBNFZYTQLOVBDA5CNFSM4I2QI5W2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD7S4VBI#issuecomment-535153285>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AK464H3GZ5NC2367YT3Y5Z3QLOVBDANCNFSM4I2QI5WQ>; > .; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535220997:27,log,log,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535220997,2,['log'],['log']
Testability,"Hi Martin,. Here is a logfile for one of the samples that I ran. I had to remove all the ""="" signs printed in it (as indicator of progress) because otherwise it increased the file size to ~13GB. Please let me know if I am using mmseqs correctly or if there is some other trick to speed it up... regards,. Dhwani. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Sunday, June 30, 2019 6:46:32 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). It would help if you could provide a log file. So I can see which module is slow. The database does not stay necessarily memory. The OS can reuse the memory. The memory just got memory mapped by mmseqs2 (depending on the --db-load-mode). —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOQNQW6KRHGR3W5473P5ESTPA5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODY4UNEA#issuecomment-507070096>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMYW6UIXY2PZFDTSZDP5ESTPANCNFSM4H333Q6Q>. createdb test_reads/S1E3-S3_assembled_kneaddata.fastq mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Max sequence length 	65535; Split seq. by length 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. Assuming DNA database, forcing parameter --dont-split-seq-by-len true; Converting sequences; [	1 Mio. sequences processed; 	2 Mio. sequences processed; 	3 Mio. sequences processed; 	4 Mio. sequences processed; 	5 Mio. sequences processed. Time for merging files: 0h 0m 4s 846ms; Time for merging files: 0h 0m 35s 669ms; Time for merging files: 0h 0m 1s 887ms; T",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:22,log,logfile,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,2,['log'],"['log', 'logfile']"
Testability,"Hi Martin,. I just redo the experiment and the result is the same.; I am using static mmseqs with SSE4 with version 9827e74c1e12875f9201302fc8693565c4a973de. Attached is the running log. <pre><code>; Program call:; read.query nr.mmseqs resultDB result.m8 . MMseqs Version: 	9827e74c1e12875f9201302fc8693565c4a973de; Alignment Format	0; No preload 	false; Early exit 	false; Database Output 	false; Threads 	24; Verbosity 	3. Query Header file: read.query_h; Target Header file: nr.mmseqs_h; Alignment database: resultDB; Start writing file to result.m8; Invalid database read for database data file=Invalid database read for database data file=read.query_h, database index=read.query_h, database index=read.query_h.index; getData: local id (4294967295) >= db size (1293676); read.query_h.index; getData: local id (4294967295) >= db size (1293676); </code></pre>. For the infile and queryfile, I am sorry that I may not be able to provide them. But I have performed the experiment with the same settings and commands successfully on another machine with 64GB. But it failed on a machine with 192GB. Not sure whether that matters. Thanks.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-367360921:182,log,log,182,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-367360921,1,['log'],['log']
Testability,"Hi Martin,. Yes. I have a set of query files, each with around 10-15 million reads and a database which has ~130 million sequences. The index file generated by the createindex step is about ~ 400GB in size. The computer I am running this on has around 1.5 TB of RAM so reading this index into memory should not be an issue. However, when I run the search with and without the --db-load-mode 3 option (i have also tried --db-load-mode 2), it does not make any difference to the run time. In both cases it takes around 8-9 hours to run through all samples. My question is, am I doing the loading into memory correctly? Are there any other options I should be using to speed this up?. I ran the steps thru a script for automating it, so I do not have the logfiles for the run (I wrote it to /dev/null). I can re-run it to generate the logfiles, but it would take some time. regards,. Dhwani. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Thursday, June 27, 2019 11:12:08 AM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). @dhwanidesai<https://github.com/dhwanidesai> so you perform millions of read searches against the refseq database at once right? Could you please provide an output log of your run? It would help me to understand whats the bottleneck in your analysis. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDNCCSMRV4UUFPSIJATP4TDDRA5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODYXH2VA#issuecomment-506363220>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMDQO3HG6TKBCVH5STP4TDDRANCNFSM4H333Q6Q>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-506719911:752,log,logfiles,752,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-506719911,3,['log'],"['log', 'logfiles']"
Testability,"Hi Martin,; I use MMseqs2 Version: 8f44a3195116bd6932f559805a86b93b0e41da71-MPI; I ran a test on subdb of 5 clusters and it worked perfectly (without MPI). I then tried to run on a large dataset with MPI on IBM Platform LSF, it seems like it is finished but did not merge back the files, is there a way to do it manually?. Also, what whould be the best way to check that it is really done? (I counted nulls and got the amount of clusters I used and looked at the last cluster printed out and it looks fine...)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/113#issuecomment-419714475:89,test,test,89,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/113#issuecomment-419714475,1,['test'],['test']
Testability,"Hi Martin,; I'm still having the same issue. ### Expected Behavior; MMSEQS2 should return some hits when setting -c in iterative searches (profile vs sequence db). ### Current Behavior; MMSEQS2 returns 0 hits when setting `--cov-mode 0` and a coverage threshold higher than `-c 0.2`. Using different coverage modalities (`--cov-mode 1` or `--cov-mode 2`) works fine. ### Steps to Reproduce (for bugs); mmseqs createdb QUERY.fasta queryDB; mmseqs createdb DB.fasta targetDB; mmseqs search queryDB queryDB query_aln tmp --num-iterations 3 --threads 8 -e 1e-05 ; mmseqs result2profile queryDB queryDB query_aln query_profile; mmseqs search query_profile targetDB resultsDB tmp --num-iterations 2 -e 1e-5 -c 0.4. ### MMseqs Output (for bugs); LOG file: mmseqs_171018.log; here https://gist.github.com/ChiaraVanni/817d1fef14aaefce1de6c090e1652f3c. ### Your Environment; Include as many relevant details about the environment you experienced the bug in. Git commit used (The string after ""MMseqs Version:"" when you execute MMseqs without any parameters): **6f1beb2116a7bddad13d1eea994dbdfce303fd79**; Which MMseqs version was used (Statically-compiled, self-compiled, Homebrew, etc.): self-compiled; For self-compiled and Homebrew: Compiler and Cmake versions used and their invocation: cmake version 3.10.12 and gcc version 5.4.0; Server specifications (especially CPU support for AVX2/SSE and amount of system memory): Running in a machine with 80 cores and 2Tb; Operating system and version: Linux 4.9.0-8-amd64 x86_64, Debian GNU/Linux 9",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-430679224:739,LOG,LOG,739,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-430679224,2,"['LOG', 'log']","['LOG', 'log']"
Testability,"Hi Martin,; Sorry for the delay, I have finally tested it and it works like a charm! Thank you very much. Simone",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/175#issuecomment-495530220:48,test,tested,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/175#issuecomment-495530220,1,['test'],['tested']
Testability,Hi Martin; maybe this is related to this issue but we have seen similar behavior when we are running more than one mmseqs2 instance per cluster node in an array job for example. We also tried to run them in `/dev/shm` instead of the local scratch but we observed the same slow searches. I will ask @ChiaraVanni to send some logs. Thanks; Antonio,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-509361453:324,log,logs,324,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-509361453,1,['log'],['logs']
Testability,"Hi Martin; now seems to work, the `result_db` contains the hits, but in the log MMSEQS2 still report:; ```; All sequences processed. 0 alignments calculated.; 0 sequence pairs passed the thresholds (-nan of overall calculated).; 0 hits per query sequence.; Time for processing: 0h 0m 1s 872ms; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-428531488:76,log,log,76,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/121#issuecomment-428531488,1,['log'],['log']
Testability,Hi Martin; thank you very much for the quick fix! We will test it now. Cheers; Antonio,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/199#issuecomment-488556931:58,test,test,58,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/199#issuecomment-488556931,1,['test'],['test']
Testability,"Hi Milot, thanks for your fast response. The option --pernode is deprecated in openmpi-1.10.3, the recommended option is: ppr:n:node. > -npernode, --npernode <#pernode>; > On each node, launch this many processes. (deprecated in favor of --map-by ppr:n:node) ; ; I'm using machines with 4 sockets and 8 cores+HT per CPU. To keep it simple I'm trying to make it run in just one of them. Following Hristo Iliev comments in https://stackoverflow.com/questions/28216897/syntax-of-the-map-by-option-in-openmpi-mpirun-v1-8 , this is my mpicmd:. ```; #!/bin/bash; mpirun --np 1 --report-bindings --map-by ppr:1:socket:pe=8 --bind-to core ""$@""; ```; And this is my launch script:. ```; #!/bin/bash; rm -rf tmp; mkdir tmp; ldd /ngs/software/mmseqs/mmseqs-MPI; ./mpicmd /ngs/software/mmseqs/mmseqs-MPI search mmseq-testDB /junk/databases/mmseqs/test-nr-50m test-nr50-th32-MPI tmp --threads 8; ```. This should run 1 instance of mmseqs with 8 threads assigned to 1 socket.; This is the std output:; ```; 	linux-vdso.so.1 => (0x00007ffe4cf8f000); 	libmpi_cxx.so.1 => /usr/lib64/openmpi/lib/libmpi_cxx.so.1 (0x00002b8050f24000); 	libmpi.so.12 => /usr/lib64/openmpi/lib/libmpi.so.12 (0x00002b805113f000); 	libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00002b8051423000); 	libm.so.6 => /lib64/libm.so.6 (0x00002b805172c000); 	libgomp.so.1 => /lib64/libgomp.so.1 (0x00002b8051a2e000); 	libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00002b8051c54000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00002b8051e6a000); 	libc.so.6 => /lib64/libc.so.6 (0x00002b8052086000); 	libopen-rte.so.12 => /usr/lib64/openmpi/lib/libopen-rte.so.12 (0x00002b8052447000); 	libopen-pal.so.13 => /usr/lib64/openmpi/lib/libopen-pal.so.13 (0x00002b80526c4000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00002b8052968000); 	librt.so.1 => /lib64/librt.so.1 (0x00002b8052b6c000); 	libutil.so.1 => /lib64/libutil.so.1 (0x00002b8052d74000); 	libhwloc.so.5 => /lib64/libhwloc.so.5 (0x00002b8052f77000); 	/lib64/ld-linux-x86-64.so.2 (0x00002b8050d02000); 	libn",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:805,test,testDB,805,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,3,['test'],"['test-', 'test-nr-', 'testDB']"
Testability,"Hi Milot,. I just tested it, and it works nicely. . Thanks a lot!!. Stijn",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/360#issuecomment-706502242:18,test,tested,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/360#issuecomment-706502242,1,['test'],['tested']
Testability,"Hi Milot,; This is the log:. ```; MPI Init...; Rank: 0 Size: 1; Program call:; all_genomes.genes.db all_genomes.genes.db all_genomes.genes.clu4.db all_genomes.genes.clu4.profile.db . MMseqs Version: 	9f344f3d6765a1131f22794d9a6fd9fcd8ca2cdf; Sub Matrix 	blosum62.out; Profile e-value threshold 	0.001; Compositional bias 	1; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Pseudo count a 	0; Pseudo count b 	1.5; Omit Consensus 	false; No preload 	false; Early exit 	false; Threads 	56; Verbosity 	3. Compute split from 0 to 6159847; Start computing profiles.; Query database type: Aminoacid; Target database type: Aminoacid; ..............................................................................................................................................................	2 Mio. sequences processed; ...	1 Mio. sequences processed; ............................	4 Mio. sequences processed; ............................................................	3 Mio. sequences processed; .....................................................................	5 Mio. sequences processed; .............................	6 Mio. sequences processed; ......................................................................................................................................................................................................................................................................Time for merging files: 0 h 0 m 21 s Time for merging files: 0 h 13 m 43 s. Done.; Time for merging files: 0 h 0 m 1 s; Time for merging files: 0 h 0 m 1 s; Time for processing: 2 h 53 m 18s; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-372102321:23,log,log,23,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-372102321,1,['log'],['log']
Testability,"Hi Ryan, . Could you please delete and recreate the tmp folder for linclust, run it again and post the log?; It seems like there was already some broken output from a run before there and that is now masking the issue. We will try to improve the tmp folder handling in the future, sorry about that. Best regards,; Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282401035:103,log,log,103,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282401035,1,['log'],['log']
Testability,"Hi Ryan,. I updated the readme, it looks like you are using clang, which won't support OpenMP:. > Please install and use gcc from Homebrew, if you want to compile MMseqs2 on MacOS. The default MacOS clang compiler does not support OpenMP and MMseqs2 will not be able to run multithreaded. Use the following cmake call:; > ; > CXX=""$(brew --prefix)/bin/gcc-6"" cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. .. Not sure about the verbosity issue. Can you post the whole log?. Edit: Also please do not use the same folder (**.**) for the tmp folder, make a separate empty one.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-264623760:479,log,log,479,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/7#issuecomment-264623760,1,['log'],['log']
Testability,"Hi Silas,; Thanks for your interest in this feature. We are working on this module. Everything is technically implemented, but the tests show that the sensitivity is not yet good enough. We will keep you updated in the next weeks about the progress on this. Cheers,; Clovis.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/95#issuecomment-396214009:131,test,tests,131,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/95#issuecomment-396214009,1,['test'],['tests']
Testability,Hi! I didn't test search anymore. Now I'm using only clustering with MMSeqs 2. But I've done several searches before with this result and didn't do anything with mmseqs installation. My version is 1-c7a89.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/67#issuecomment-371223988:13,test,test,13,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/67#issuecomment-371223988,1,['test'],['test']
Testability,"Hi, ; thanks for the quick response!. I use the latest mmseqs package (15.6f452).; I attach my:; * my 2 fasta files; * the script easy_rbh.py which simply runs ""easy-rbh"", its command line output and the m8 output file (which contains 590 pairs).; * the script my_rbh.py which runs mmseqs createdb+rbh+convertails, its command line output and the m8 output file (which contains 489 pairs). [easy_rbh.log](https://github.com/soedinglab/MMseqs2/files/13336021/easy_rbh.log); [easy_rbh.m8.txt](https://github.com/soedinglab/MMseqs2/files/13336022/easy_rbh.m8.txt); [easy_rbh.py.txt](https://github.com/soedinglab/MMseqs2/files/13336023/easy_rbh.py.txt); [my_rbh.log](https://github.com/soedinglab/MMseqs2/files/13336024/my_rbh.log); [my_rbh.m8.txt](https://github.com/soedinglab/MMseqs2/files/13336025/my_rbh.m8.txt); [my_rbh.py.txt](https://github.com/soedinglab/MMseqs2/files/13336026/my_rbh.py.txt); [UP000000425_122586_protein.fasta.txt](https://github.com/soedinglab/MMseqs2/files/13336156/UP000000425_122586_protein.fasta.txt); [UP000000429_85962_protein.fasta.txt](https://github.com/soedinglab/MMseqs2/files/13336158/UP000000429_85962_protein.fasta.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1808330167:400,log,log,400,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1808330167,4,['log'],['log']
Testability,"Hi, Did you find a solution for this? I am after a similar output as I am keen for more taxnomy information and looking to filter the results based a on a taxID. However I am getting the same error as well. Any suggestions would be appreciated. ```; mmseqs convertalis T25_hifi_norm $NR_DB T25_hifi_norm_results test; convertalis T25_hifi_norm ncbi_nr T25_hifi_norm_results test. MMseqs Version: 	13.45111; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Alignment format 	0; Format alignment output	query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits; Translation table 	1; Gap open cost 	nucl:5,aa:11; Gap extension cost 	nucl:2,aa:1; Database output 	false; Preload mode 	0; Search type 	0; Threads 	4; Compressed 	0; Verbosity 	3. Input database ""T25_hifi_norm_results"" has the wrong type (Taxonomy); Allowed input:; - Alignment; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/491#issuecomment-1644795307:312,test,test,312,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/491#issuecomment-1644795307,2,['test'],['test']
Testability,"Hi, I rerun the search with this command line:; `mmseqs easy-search query.fasta individual.fna.tar.gz result.m8 tmp --cov-mode 0 -c 0.7 -e 0.00001 --split-memory-limit 60G`. This turned into another error:; `/scratch/yw/tmp/753367603623873521/search_tmp/4970649135515174898/translated_search.sh: line 45: 7447 Killed ""$MMSEQS"" extractorfs ""$2"" ""${TMP_PATH}/t_orfs_aa"" ${ORF_PAR}`. And in the log file, this search gave lots of warnings that the sequence is invalid:; ```; Invalid sequence with index 1463370!; =Error: extract target orfs step died; Error: Search died; ```. Could you please tell me what might be the cause? Thank you!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/366#issuecomment-714505555:392,log,log,392,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/366#issuecomment-714505555,1,['log'],['log']
Testability,"Hi, thanks for the quick response! Currently I'm not running any MP, and simply calling mmseqs directly after exporting the bin directory to my path.; When testing the MP mode, I used `srun --ntasks-per-node 1`, and recieved a similar error, however running it without any MP made me think the problem is likely upstream of this.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461538513:156,test,testing,156,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461538513,1,['test'],['testing']
Testability,"Hi,. After update to last version of mmseqs and hhsuite, I tried again.; I wrote this script inspired in [this tutorial](https://github.com/soedinglab/MMseqs2/wiki#how-to-create-a-hhblits-database). ```; #!/usr/bin/env bash. BASE=""subset""; FILE=""${BASE}.fa""; MMSEQDB=""${BASE}DB""; MMSEQPREF=""${BASE}PREFILTER""; MMSEQALN=""${BASE}ALN""; MMSEQCLU=""${BASE}CLU""; MMSEQMSA=""${BASE}MSA""; FILELOG=""job.log"". echo '#:: CREATEDB' &>> ${FILELOG} ;; mmseqs createdb ${FILE} ${MMSEQDB} &>> ${FILELOG}. echo '#:: PREFILTER' &>> ${FILELOG} ;; mmseqs prefilter ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} -s 7.5 &>> ${FILELOG}. echo '#:: ALING' &>> ${FILELOG} ;; mmseqs align ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} ${MMSEQALN} -e 0.00001 &>> ${FILELOG}. echo '#:: CLUST' &>> ${FILELOG} ;; mmseqs clust ${MMSEQDB} ${MMSEQALN} ${MMSEQCLU} &> ${FILELOG} &>> ${FILELOG}. echo '#:: RESULT2MSA' &>> ${FILELOG} ;; mmseqs result2msa ${MMSEQDB} ${MMSEQDB} ${MMSEQCLU} ${MMSEQMSA} --compress &>> ${FILELOG}. echo '#:: CREATE LINKS' &>> ${FILELOG} ;; ln -s ${MMSEQDB}_h ${MMSEQMSA}_header.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}_h.index ${MMSEQMSA}_header.ffindex &>> ${FILELOG}; ln -s ${MMSEQDB} ${MMSEQMSA}_sequence.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}.index ${MMSEQMSA}_sequence.ffindex &>> ${FILELOG}. echo '#:: BUILD HHBLITS COMPATIBLE' &>> ${FILELOG} ;; cstranslate -i ${MMSEQMSA} -o ${MMSEQMSA}_cs219 \; -A /home/linuxbrew/anaconda3/data/cs219.lib \; -D /home/linuxbrew/anaconda3/data/context_data.lib \; -x 0.3 -c 4 -I ca3m &>> ${FILELOG}; ```; It only fails on cstranslate with this error:; ```; ERROR: Unable to read input file 'subsetMSA'!; Reading context library for pseudocounts from context_data.lib ...; Reading abstract state alphabet from cs219.lib ...; ```. I'm attaching the the [sequence](https://github.com/soedinglab/MMseqs2/files/3095328/subset.fa.txt), [commands file (source)](https://github.com/soedinglab/MMseqs2/files/3095327/source.sh.txt) and [log file](https://github.com/soedinglab/MMseqs2/files/3095326/job",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484587503:392,log,log,392,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484587503,1,['log'],['log']
Testability,"Hi,. I see that in the Cluster module of MMseqs2, there is a function that converts sequence identity to a corresponding sensitivity value:; `. float setAutomaticThreshold(float seqId) {; float sens;; if (seqId <= 0.3) {; sens = 6;; } else if (seqId > 0.8) {; sens = 1.0;; } else {; sens = 1.0 + (1.0 * (0.7 - seqId) * 10);; }; return sens; }. `. So if you call it with seqId = 0.4, it would return `-s` as 4. But there are some caveats to this:; 1. This function is used for clustering, where the meaning of a slightly wrong `-s` value is slightly worse clustering, but not loss of information (as all the input will be clustered, no matter what `-s` value is selected). This is not the case here and a too low `-s` might cause losing hits.; 2. The function is not based on thorough benchmarking, it is more a ""rule of thumb"". Therefore, we recommend you:; 1. Easy: select a slightly higher `-s` than the seqId you are interested in, to be on the safe side; 2. Involved: keep an eye on the results and see if big things get lost.; 3. More involved: benchmark for your purposes. For example, create a dataset of homologous pairs at 40% id of taxa relevant for your study and see how many can be recovered using various `-s`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1849056333:784,benchmark,benchmarking,784,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1849056333,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"Hi,. So last night I deleted the folder which contained the package and compiled; it again without using any comes environment, and I didn't have any issues,; however the issue still persists. I was doing small tests using an; interactive sessions using 4 cores, and the jobs always were killed with; signal 9. For what I found in the internet that happens when I run out of; memory, will that be the case?. Francisco. On Tue, May 18, 2021, 6:46 AM Milot Mirdita ***@***.***>; wrote:. > Do you have more details what went wrong with the MPI build? We didn't; > have any recent issues with it.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843100327>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AMXRGM7YLDLFT2TOJ5NVU73TOJHRFANCNFSM45B6ZNIQ>; > .; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843135326:211,test,tests,211,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-843135326,1,['test'],['tests']
Testability,"Hi,. There is nothing logically wrong with your script, however there are a couple of parameters whose default value is different from the value set by the easy-rbh workflow. One of them is the sensitivity/speed tradeoff `-s`, which is set by the easy-rbh to 5.7 (highly sensitive) but defaults to 4 when calling the rbh module directly. When I re-ran your rbh command as follows:; ```mmseqs rbh UP000000425_122586_protein UP000000429_85962_protein alnOffseted.db tmp -s 5.7```; I could get it to produce 590 results, as in the easy-rbh workflow. So what should you do now?; Try to examine the results using different sensitivity values (maybe even lower than 4). If lower sensitivities cover your need (e.g., in cases of close homologs), then you can use this parameter to speed up your code even more. Another thing:; I see that the easy-rbh also differs from two consecutive calls to createdb, followed by a call to rbh because of the `shuffle` parameter. In this specific case, changing this parameter (w/out changing `max-seq`) does not have an effect (i.e., I could get the number of results to change only through `-s`), but maybe @milot-mirdita has some good advice on how to set this parameter in the case of DYI-rbh. Milot, in the easy-rbh, it seems like the parameter setting is having a hard time as it gives the following warnings:. > Shuffle database cannot be combined with --createdb-mode 0; > We recompute with --shuffle 0; > Converting sequences; > Multiline fasta can not be combined with --createdb-mode 0; > We recompute with --createdb-mode 1. Maybe it is worth checking.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1819653848:22,log,logically,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1819653848,1,['log'],['logically']
Testability,"Hi,; Thanks for your quick response.; I've attached cmake.log and make.log . This is the output while running under gdb:; ```; Use index /junk/databases/mmseqs/nr.sk7; Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 0; Type: 1; Spaced: 1; Query database: mmseq-testDB(size=2467); Target database: /junk/databases/mmseqs/nr(size=121935717); Use kmer size 7 and split 0 using split mode 0. Program received signal SIGFPE, Arithmetic exception.; 0x000000000052c00c in Prefiltering::estimateMemoryConsumption (split=0, dbSize=121935717, resSize=44976760168, maxHitsPerQuery=300, alphabetSize=21, kmerSize=7, threads=64); at /root/MMseqs2/src/prefiltering/Prefiltering.cpp:910; 910	 size_t dbSizeSplit = (dbSize) / split;; ```. And this is the backtrace:; ```; #0 0x000000000052c00c in Prefiltering::estimateMemoryConsumption (split=0, dbSize=121935717, resSize=44976760168, maxHitsPerQuery=300, alphabetSize=21, kmerSize=7, threads=64); at /root/MMseqs2/src/prefiltering/Prefiltering.cpp:910; #1 0x000000000052785c in Prefiltering::Prefiltering (this=0x857d90, queryDB=""mmseq-testDB"", queryDBIndex=""mmseq-testDB.index"", targetDB=""/junk/databases/mmseqs/nr"", ; targetDBIndex=""/junk/databases/mmseqs/nr.index"", outDB=""/root/tmp/blast/tmp/pref_4"", outDBIndex=""/root/tmp/blast/tmp/pref_4.index"", par=...) at /root/MMseqs2/src/prefiltering/Prefiltering.cpp:154; #2 0x000000000052679e in prefilter (argc=39, argv=0x7fffffffdff8, command=...) at /root/MMseqs2/src/prefiltering/Main.cpp:38; #3 0x00000000004bf4e0 in runCommand (p=..., argc=39, argv=0x7fffffffdff8) at /root/MMseqs2/src/mmseqs.cpp:330; #4 0x00000000004bf82c in main (argc=41, argv=0x7fffffffdfe8) at /root/MMseqs2/src/mmseqs.cpp:381. ```. [make.log.txt](https://github.com/soedinglab/MMseqs2/files/996247/make.log.txt); [cmake.log.txt](https://github.com/soedinglab/MMseqs2/files/996248/cmake.log.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301075155:58,log,log,58,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301075155,9,"['log', 'test']","['log', 'testDB']"
Testability,"Hi; Kindly see the following example:; I am attaching the fasta files, the sequences contains ‘*’ stop codons as some of the sequences are pseudogenes, however the similarity that mmseqs misses is with intact genes.; The sequence cand_290 (file: macaque_oct20_input.fa.F) shares 90% sequence identity over 290 aa with OR51V1B_dog (file: all_ORs_pep_12Oct15.fa.F).; MMseqs didn’t find this similarity. I have tried several parameters. Commands:; mmseqs createdb macaque_oct20_input.fa.F macaqueDB; mmseqs createindex macaqueDB tmp; mmseqs createdb all_ORs_pep_12Oct15.fa.F all_ORsDB; mmseqs createindex all_ORsDB tmp; mmseqs search macaqueDB ../macaque_oct20/libs/all_ORs_pep_12Oct15.DB resultDB \; tmp --alignment-mode 3 --mask 0 --comp-bias-corr 0; mmseqs convertalis macaqueDB hordeDB resultDB resultFinal.txt. Result:; [lvzvia@molgen3 test]$ grep 'cand_290' finalResult.txt |grep '51V'; cand_290.fasta OR51V25_horse 0.884 309 35 0 2 311 3 312 6.26E-185 567; cand_290.fasta OR51V1_chimp 0.768 310 71 0 2 312 10 320 1.76E-159 495; cand_290.fasta OR51V1_dog 0.761 309 73 0 1 310 1 310 1.92E-159 494; cand_290.fasta OR51V22_cow 0.763 307 72 0 4 311 5 312 5.68E-159 494; cand_290.fasta OR51V28_horse 0.756 306 74 0 3 309 4 310 2.69E-158 491; cand_290.fasta OR51V21_dog 0.761 309 73 0 1 309 1 310 1.47E-156 486; cand_290.fasta OR51V19P_dog 0.750 303 75 0 9 312 10 313 5.17E-155 482; cand_290.fasta OR51V1_orang 0.750 311 77 0 1 312 7 318 1.09E-153 479; cand_290.fasta OR51V1D_cow 0.740 310 80 0 1 311 2 312 3.54E-153 477; cand_290.fasta OR51V30P_horse 0.743 311 79 0 1 311 3 314 4.03E-153 476; cand_290.fasta OR51V23_orang 0.750 303 75 0 9 312 10 313 1.43E-152 475. Blast Results:; [lvzvia@molgen3 test]$ grep 'cand_290' ../macaque_test/blast/macaque_test_vs_all.txt|grep '51V'; cand_290.fasta OR51V1B_dog 90.00 310 31 0 3 312 4 313 0.0 562; cand_290.fasta OR51V1B_cow 88.10 311 37 0 2 312 3 313 0.0 558; cand_290.fasta OR51V25_horse 88.39 310 36 0 2 311 3 312 0.0 556; cand_290.fasta OR51V27_horse 80.81",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678:838,test,test,838,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678,1,['test'],['test']
Testability,"How did you do the searches? How did you create the `swissprot_human` subset?. I am surprised you are getting results at all for your test 2). The default parameters of MMseqs2 are set in such a way that you should not be able to find anything shorter than 11. The default k-mer size of 6 uses 4 non-informative spaced positions and we require a double consecutive k-mer match, meaning 11 should be the shortest.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/827#issuecomment-2021988973:134,test,test,134,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/827#issuecomment-2021988973,1,['test'],['test']
Testability,"I am currently doing a benchmark on clustering algorithms, where I find that Greedy Set Cover would also hugely benefit from this option. This is in line with the guidelines, describing `--cluster-reassign` as the one solution for the cascaded clustering caveat; without this option, there is no certainty that clustering criteria remain fulfilled over multiple cascade steps due to changing representatives.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-776539284:23,benchmark,benchmark,23,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-776539284,1,['benchmark'],['benchmark']
Testability,"I am not finding the numbers now, but I had tested the effect of multiprocessing, both by giving it between 1 and 64 cpus (with fixed 2 threads per cpu), and by giving between 1 and 8 threads on a single cpu. Neither had a notable difference with this two-sequence input. With somewhat larger batches (e.g. 60) I could see it speeding up, but with diminishing returns as Nproc > Nseq/2 or so. Parallel processing of the uniref and envdb we intend to do, as you say. Also reusing the uniref30 search (your app does it once for the MSA/monomer step and then again for the pair step, if I'm not mistaken). Thank you for the info about the NUMA setup, I'll drop that line of exploration then. For RAM - I had checked with vmtouch -v [file] and it was claiming to have all pages resident in RAM. Can't double check now with htop as all the high mem nodes are heavily used at the moment, but I can't imagine it would be reporting something different. The timing is very consistent with vmtouch, and an order of magnitude slower than when reading from disk for us.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1410382572:44,test,tested,44,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1410382572,1,['test'],['tested']
Testability,"I am still not 100% sure why the shared zstd works in debian. We use the zstd function `ZSTD_findDecompressedSize` that should only be available if `ZSTD_STATIC_LINKING_ONLY` is set and therefore zstd is linked statically. ; I just spent a few minutes trying to figure out how debian defeats this check, but didn't find where they do that. As we can't make sure that every native libzstd package does something similar, it's probably more appropriate to have distributions patch that themselves if they are confident it will work out fine. If `ZSTD_findDecompressedSize` becomes part of the stable zstd api, then we can provide as `USE_SYSTEM_ZSTD` option. Regarding xxhash I am very uncomfortable to encourage anyone to provide their own library. xxhash is a central part of the linclust algorithm and we have extensive tests to make sure that linclust produces exactly the same results on every platform/distribution/architecture. I think scientific reproducibility outweighs other concerns for our software.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777511188:821,test,tests,821,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777511188,1,['test'],['tests']
Testability,"I appear to be getting a similar error: . ```; $ mmseqs clusterupdate --min-seq-id 0.9 -c 0.8 ../tests/output_n10/genes/cluster/genes_db /ebio/abt3_scratch/nyoungblut/user_genes/genes_db ../tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/cluster_updated/clusters_db.0 /ebio/abt3_scratch/nyoungblut/cluster_update; clusterupdate --min-seq-id 0.9 -c 0.8 ../tests/output_n10/genes/cluster/genes_db /ebio/abt3_scratch/nyoungblut/user_genes/genes_db ../tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/cluster_updated/clusters_db.0 /ebio/abt3_scratch/nyoungblut/cluster_update. MMseqs Version: 	11.e1a1c; Seq. id. threshold 	0.9; Coverage threshold 	0.8. ===================================================; === Update the new sequences with the old keys ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/7316799743718053916/OLDDB.repSeq. Invalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index; 31mInvalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/g",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914:97,test,tests,97,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914,4,['test'],['tests']
Testability,"I assume you are running the avx2 version from the static build? If so could you run your test with the SSE4_1 version please?. We are setting up automated regression tests for every commit currently and it seems to have uncovered a regression in the avx2 version. But we observed the regression only in the profile search, not in normal sequences searches.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278741015:90,test,test,90,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278741015,2,['test'],"['test', 'tests']"
Testability,I consider this issue closed. Please open a new issue if you expirience further problems. ; Thanks a lot for you feedback and for benchmarking MMseqs2.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-253720564:130,benchmark,benchmarking,130,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-253720564,1,['benchmark'],['benchmarking']
Testability,"I found the issue, our split logic is indeed faulty and corrupting unrelated memory. ; We'll discuss the issue and try to resolve it.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-497726790:29,log,logic,29,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-497726790,1,['log'],['logic']
Testability,"I get the helpfulness of the multi-output, but it really does make integrating mmseqs in a snakemake pipeline a pain. It would be helpful to know which files are actually the input and output of each subcommand, but I get that it would be a large change to the script help docs, and if you were to change the implementation, you'd have to change all of the docs. . I don't know why `clusterupdate` is using `extractorfs` either. For my test, I'm just taking some full-length gene AA sequences (generated by prodigal from a set of genomes), and trying to update those with a few more full-length gene AA sequences. I'll double check my code.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664823477:436,test,test,436,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-664823477,1,['test'],['test']
Testability,"I get the same type of error when using the parallel MPI version with ""RUNNER=mpirun -np 8"" . I only encountered this error while testing. I ideally would like to use a cluster configuration but will not be able to if this error persists.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/284#issuecomment-594847367:130,test,testing,130,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/284#issuecomment-594847367,1,['test'],['testing']
Testability,"I got a similar error with itsmisterbrown that **the LCA step dies due to a segmentation fault**. Here is my command line. And I also attached my log and error files.; [out.txt](https://github.com/soedinglab/MMseqs2/files/13608231/out.txt); [err.txt](https://github.com/soedinglab/MMseqs2/files/13608232/err.txt). ```; mmseqs easy-taxonomy \; test.fasta nr.smag.mmetsp.gvog.faaDB \; DB_NR.SMAG.DB_tax_result_test \; tmp \; --orf-filter 0 \; --threads 16 \; --lca-ranks superkingdom,phylum,class,order,family,genus \; --split-memory-limit 500G; ```. Please help me to find out what wrong with my command.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/703#issuecomment-1846457170:146,log,log,146,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/703#issuecomment-1846457170,2,"['log', 'test']","['log', 'test']"
Testability,I guess that `2> linclust.log 1>&2` didn't actually capture all of the output. I rerun the command. There's the log: [mmseqs_linclust.log](https://github.com/soedinglab/MMseqs2/files/3682884/mmseqs_linclust.log),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537631799:26,log,log,26,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537631799,4,['log'],['log']
Testability,"I guess we could remove the arm subfolder, however it's already part of the git history anyway, so it doesn't change that much anymore. It would be nice to have a repo similar to `simde-no-tests`, but I don't want these to become a maintenance burden for you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/389#issuecomment-756104658:189,test,tests,189,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/389#issuecomment-756104658,1,['test'],['tests']
Testability,I have never tested MMseqs2 with such long sequences. You could try to increase `--max-seq-len`. What is your use case? Do you want to assign shorter fragments to longer contigs?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/183#issuecomment-479130015:13,test,tested,13,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/183#issuecomment-479130015,1,['test'],['tested']
Testability,"I have run into a new issue: the UniRef90 indexing and searching having been tested on a 132GB RAM server, I tested the searching on a 64GB RAM node typical of our cluster. My first attempt consisted (retrospectively naively) in using the UniRef90 indexes created (without any --split option) on the 132GB server, which caused a crash after a useful warning `MMseqs processes needs more main memory than available.Increase the size of --split` as seen below in the first output. I therefore attempted to index the database on the 64GB RAM node directly with no explicit --split option, or by specifying`--split 6` (an explicit split is useful to index the database taking into account the fact that some of the cluster nodes have less than the 64GB RAM of the machine I'm indexing on). But this indexing fails with the second output provided below? In fact the indexing fails also without the --split option (see third output below). All tests have been carried out using a compiled mmseqs cloned from a fresh git clone. The work directory has 76TB of free space. I'm really at a loss as to what the `Could not write to data file /` error message might indicate?; - Searching with the oversized index:. ```; -bash-4.2$ mmseqs search subseq_Mms.1 uniref90.mms toto.mms tmp/ --max-seqs 100000 --threads 8 -a true -e 1E-10 -s 1 ; Program call:; subseq_Mms.1 uniref90.mms toto.mms tmp/ --max-seqs 100000 --threads 8 -a true -e 1E-10 -s 1 . MMseqs Version: c5615b34c686b1cf0f200670be8bc6cba76d90f9; Sub Matrix blosum62.out; Add backtrace true; Alignment mode 0; E-value threshold 1e-10; Seq. Id Threshold 0; Coverage threshold 0; Max. sequence length 32000; Max. results per query 100000; Compositional bias 1; Profile false; Realign hit false; Max Reject 2147483647; Detect fragments false; Include identical Seq. Id. false; Threads 8; Verbosity 3; Sensitivity 1; K-mer size 0; K-score 2147483647; Alphabet size 21; Offset result 0; Split DB 0; Split mode 2; Diagonal Scoring 1; Minimum Diagonal score 15;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349:77,test,tested,77,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251733349,3,['test'],"['tested', 'tests']"
Testability,"I have the same issue with annotating a benchmarking dataset, but out of 56k contigs it annotates only ~300.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/386#issuecomment-744325996:40,benchmark,benchmarking,40,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/386#issuecomment-744325996,1,['benchmark'],['benchmarking']
Testability,"I hope it would be still very useful to have an option to override `getTotalSystemMemory`. I understand there might be modules that does not have a splitting logic (either it is not implemented yet, or it simply does not make sense) a many other aspects (like the preloading). But I see these as use cases where you simply MUST HAVE enough memory to be able to do the computations (on a system with little physical memory this would lead to swapping). On the other hand, the option to override `getTotalSystemMemory` would allow me to fake the total system memory to keep reasonable memory/computation length trade-off on grid computing architecture with job scheduler.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359804827:158,log,logic,158,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359804827,1,['log'],['logic']
Testability,I just commited a possible fix. Could you please test if the crash still happens?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/37#issuecomment-312148125:49,test,test,49,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/37#issuecomment-312148125,1,['test'],['test']
Testability,"I just finished testing it with all the datasets (66) and experiences no crash.; Thanks a lot Milot, that was a blazing fast fix.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/109#issuecomment-410724211:16,test,testing,16,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/109#issuecomment-410724211,1,['test'],['testing']
Testability,"I just hit this as well. The error message doesn't make the formatting problem obvious, but after finding this thread it was a quick and easy fix to manually correct the fasta lines that start with `> ` to begin with `>`. If writing the logic to handle parsing both `> ` & `>` is more trouble than it is worth, revising the error message to indicate that the user may only need to fix the spacing issue and then try again would be very helpful! The file that caused the issue for me was downloaded from a small database maintained by an individual research lab, so I assume the issue was because the fasta file was likely manually updated at some point rather than machine-generated. That's just a suggestion though - I was able to find this thread and solution within easily enough and there seem to be a handful of existing fasta validator tools that could also help users identify the root cause of their issue without internalizing that logic into this suite of tools as well. P.S. thanks for MMSeqs!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/446#issuecomment-2192800896:237,log,logic,237,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/446#issuecomment-2192800896,2,['log'],['logic']
Testability,I missed a few places where it could still spawn threads and deadlock.; I've added a regression test for the future.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/207#issuecomment-496719690:96,test,test,96,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/207#issuecomment-496719690,1,['test'],['test']
Testability,"I re-ran from the very beginning (because it seems the temp files were auto-removed, e.g., `input_step_redundancy`). However, there is no backtrace output.; ```; Time for merging to pref_filter1: 0h 0m 45s 203ms; Time for processing: 0h 1m 56s 417ms; filterdb /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_filter1 /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_filter2 --filter-file /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/order_redundancy --threads 96 --compressed 0 -v 3. Filtering using file(s); [=================================================================] 100.00% 245.75M 2m 6s 123ms; Time for merging to pref_filter2: 0h 2m 13s 365ms; Time for processing: 0h 6m 17s 259ms; rescorediagonal /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/input_step_redundancy /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/input_step_redundancy /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_filter2 /export/tmp/MERC-gdb/7812673630337556672/clu_tmp/7630568140984029289/pref_rescore2 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 1 --wrapped-scoring 0 --filter-hits 1 -e 0.001 -c 0.9 -a 0; --cov-mode 1 --min-seq-id 0.5 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --db-load-mode 0 --threads 96 --compressed 0 -v 3. Segmentation fault (core dumped) ] 0.00% 1 eta -; Error: Ungapped alignment step died; Error: Search died; [Inferior 1 (process 161684) exited with code 01]; (gdb) bt; No stack.; ```; Let me know if there is something else I can test.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649892972:1633,test,test,1633,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/323#issuecomment-649892972,1,['test'],['test']
Testability,"I searched with your example query.fasta (101mA, 10mhA) against the target.fasta (A0A021WW32, A0A021WZA4). MMseqs2 can not detect any alignments. I aligned these sequences with smith waterman and the sequence identity is <= 20%. Is this intended? Maybe you want to use profiles? . Please don't use the parameter --include-id if the query database and target database do not contain the same identifier. The --include-id is just important for clustering. The option --max-seq-id 1.0 is just needed if you try to compute profiles and you don't use profiles in this example. . Could you provide the whole dataset please? So we can test this behavior? I tried to reproduce it with some fasta files on my computer but I was not able to. . Thanks a lot for your feedback.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090:628,test,test,628,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090,1,['test'],['test']
Testability,"I seem to be getting the same error when running `linclust`, but the error seems to occur during the `rescorediagonal` step. The log from my run:. ```; rescorediagonal /tmp/inclust/genes_db /tmp/genes_db /tmp/linclust_tmp/12839115596035141496/pref /tmp/linclust_tmp/12839115596035141496/pref_rescore1 --sub-mat nucl:nucleotide.out,aa:blosum62.out --rescore-mode 0 --filter-hits 0 -e 0.001 -c 0.9 -a 0 --cov-mode 0 --min-seq-id 0.9 --min-aln-len 0 --seq-id-mode 0 --add-self-matches 0 --sort-results 0 --global-alignment 0 --db-load-mode 0 --threads 24 --compressed 0 -v 3. [Invalid database read for database data file=/tmp/linclust/genes_db, database index=/tmp/linclust/genes_db.index; getData: local id (4294967295) >= db size (1084240); Invalid database read for database data file=/tmp/linclust/genes_db, database index=/tmp/linclust/genes_db.index; getData: local id (4294967295) >= db size (1084240); Invalid database read for database data file=/tmp/linclust/genes_db, database index=/tmp/linclust/genes_db.index; getData: local id (4294967295) >= db size (1084240); Invalid database read for database data file=/tmp/linclust/genes_db, database index=/tmp/linclust/genes_db.index; getData: local id (4294967295) >= db size (1084240); Invalid database read for database data file=/tmp/linclust/genes_db, database index=/tmp/linclust/genes_db.index; getData: local id (4294967295) >= db size (1084240); Error: Rescore with hamming distance step died; ```. My linclust job is the following:. ```; mmseqs linclust --threads 24 --min-seq-id 0.90 -c 0.9 --kmer-per-seq 50 /tmp/linclust/genes_db /tmp/linclust/clusters_db /tmp/linclust_tmp/; ```. I'm using `mmseqs2 9.d36de h76f5088_0 bioconda`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-524198971:129,log,log,129,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-524198971,1,['log'],['log']
Testability,"I should also mention that I did not get the hanging issue when I reduced sensitivity to 4. Unfortunately, I need higher sensitivity for this particular search! Here is the log:. ```; easy-search -s 7 query.fasta targetDB_split/targetDB_split_0_32 results/0.m8 tmp . MMseqs Version: 	15.6f452; Substitution matrix 	aa:blosum62.out,nucl:nucleotide.out; Add backtrace 	false; Alignment mode 	3; Alignment mode 	0; Allow wrapped scoring 	false; E-value threshold 	0.001; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Compositional bias 	1; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	substitution:1.100,context:1.400; Pseudo count b 	substitution:4.100,context:5.800; Score bias 	0; Realign hits 	false; Realign score bias 	-0.2; Realign max seqs 	2147483647; Correlation score weight 	0; Gap open cost 	aa:11,nucl:5; Gap extension cost 	aa:1,nucl:2; Zdrop 	40; Threads 	32; Compressed 	0; Verbosity 	3; Seed substitution matrix 	aa:VTML80.out,nucl:nucleotide.out; Sensitivity 	7; k-mer length 	0; Target search mode 	0; k-score 	seq:2147483647,prof:2147483647; Alphabet size 	aa:21,nucl:5; Max results per query 	300; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	true; Exact k-mer matching 	0; Mask residues 	1; Mask residues probability 	0.9; Mask lower case residues 	0; Minimum diagonal score 	15; Selected taxa 	; Spaced k-mers 	1; Spaced k-mer pattern 	; Local temporary path 	; Rescore mode 	0; Remove hits by seq. id. and coverage 	false; Sort results 	0; Mask profile 	1; Profile E-value threshold 	0.001; Global sequence weighting 	false; Allow deletions 	false; Filter MSA 	1; Use filter only at N seqs 	0; Maximum seq. id. threshold 	0.9; Minimum seq. id. 	0.0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Pse",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899655257:173,log,log,173,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/805#issuecomment-1899655257,1,['log'],['log']
Testability,"I still cannot make it report at least one score per query after solving issue #283.; Here is the log. search -s 4 --threads 64 -e 100000 --comp-bias-corr 0 --mask 0 /tmp/56067190/queryT.fa.mmsq /tmp/56067190/queryT.fa.mmsq /tmp/56067190/queryT.fa.mmsq.outDB /scratch/jobs/56067190 . MMseqs Version: 	ca58693979f95537016a0454affcfd529dbde24d; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Add backtrace 	false; Alignment mode 	2; Allow wrapped scoring 	false; E-value threshold 	100000; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	0; Realign hits 	false; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; zdrop 	40; Threads 	64; Compressed 	0; Verbosity 	3; Seed substitution matrix 	nucl:nucleotide.out,aa:VTML80.out; Sensitivity 	4; k-mer length 	0; k-score 	2147483647; Alphabet size 	nucl:5,aa:21; Max results per query 	300; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	true; Exact k-mer matching 	0; Mask residues 	0; Mask lower case residues 	0; Minimum diagonal score 	15; Spaced k-mers 	1; Spaced k-mer pattern 	; Local temporary path 	; Rescore mode 	0; Remove hits by seq. id. and coverage	false; Sort results 	0; Mask profile 	1; Profile e-value threshold 	0.1; Global sequence weighting 	false; Allow deletions 	false; Filter MSA 	1; Maximum seq. id. threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Omit consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-593953276:98,log,log,98,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/281#issuecomment-593953276,1,['log'],['log']
Testability,"I think we kept default sensitivity. I assume that sensitivity won't help a lot for short sequence search. The sensitivity parameter controls the number of similar k-mers generated for the double-consecutive-kmer-matching in the prefilter. I assume that using too dissimilar k-mers would result in low scores and e-values. Those would then be rejected anyway.; My assumption might be wrong though, I'd appreciate if you could report what you learn. . I don't think ` --exact-kmer-matching` would be useful as that would disable the similar k-mer generation completely. . `--comp-bias-corr 0` and `--mask 0` might be useful though. We suppress false positives homologes with these parameters. However, we didn't benchmark on super short sequences. They might be doing nothing (as both algorithms use a window-approach), they might work correctly or they might be suppressing true useful hits.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728957193:711,benchmark,benchmark,711,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728957193,1,['benchmark'],['benchmark']
Testability,"I tried re-making both sequence databases via `mmseqs createdb`, and I now get a longer output, but it still dies with a `No datafile could be found` error. . <details>; <summary>The entire output</summary>. ```; diffseqdbs /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/all_genes/genes_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/removedSeqs /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/mappingSeqs /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/newSeqs --use-seq-id 0 --threads 12 --compressed 0 -v 3. Time for processing: 0h 0m 0s 96ms; ===================================================; === Update the new sequences with the old keys ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; createsubdb /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/newSeqs /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/NEWDB.newSeqs -v 3 --subdb-mode 1. Time for merging to NEWDB.newSeqs: 0h 0m 0s 2ms; Time for processing: 0h 0m 0s 117ms; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/OLDDB.repSeq. [=================================================================] 34.26K 0s 16ms; Time for merging to OLDDB.r",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167:264,test,tests,264,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663145167,1,['test'],['tests']
Testability,"I tried to cluster sequences with the header you mentioned but can not reproduce the issue. ; Is it possible for you to share the file, exact command line and log? Thank you so much.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-859674497:159,log,log,159,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-859674497,1,['log'],['log']
Testability,"I used the following command, where `queryDB` is a sequence database created using a fasta file with 25 sequences. ; ```; mmseqs search test/query/queryDB ../nrDB resultDB tmp --num-iterations 3 --start-sens 1 --sens-steps 3 -s 7; ```; Only three files were created as the result:; ```; 1.5M Jan 30 11:52 resultDB; 4 Jan 30 11:52 resultDB.dbtype; 392 Jan 30 11:52 resultDB.index; ```; If I do `head -n 5 resultDB` I get the following:; ```; 329161555 773 1.00 2.658E-249 0 382 383 0 382 383 383M; 121000224 437 0.538 5.873E-133 0 382 383 0 389 390 217M7D166M; 187343874 431 0.520 6.546E-131 0 382 383 0 389 390 217M7D166M; 190748379 428 0.517 5.905E-130 0 382 383 0 389 390 217M7D166M; 100067444 424 0.513 1.872E-128 0 382 383 0 392 393 219M8D80M2D84M; ```; If I do `head -n resultDB.index` I get the following:; ```; 0 0 46663; 1 46663 71880; 2 118543 58035; 3 176578 50784; 4 227362 80826; ```. I also tried searching against my `nrDB` using a profileDB, and similarly got only those three files (`resultDB`, `resultDB.dbtype`, and `resultDB.index`) as the result. Here is the command I used there:; ```; mmseqs search ../profileDB /home/scratch60/new_ndDB/nrDB resultDB tmp --start-sens 1 --sens-steps 3 -s 7 -e 0.005 -a 1; ````. I see that makes sense about `taxDB`!. Edit: also I don't know if I mentioned that I am using `MMseqs2 Version: 6672bbc9de55e89b011c8a055982a2644d31a467` which was acquired and installed in mid-January. I am running it on my university's computer cluster (Red Hat Enterprise Linux Server 7.7 (Maipo)) which I ssh into.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771814053:136,test,test,136,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771814053,1,['test'],['test']
Testability,"I was able to try testing this again with commit https://github.com/soedinglab/MMseqs2/commit/38ab523ae7c321bc673be8b1ed8f61d44aaf054b using the command; ```; mmseqs gff2db hits.gff3 seqdb orfsdb; ```; and I get the following warnings:; ```; No feature types given. All features will be extracted; Not enough GFF files are provided. Some results might be omitted; ```; It runs, but then segfaults after a few minutes. The head of the GFF3 file I am using is; ```; ##gff-version 3.1.26; E003084_000873 MMseqs2 CDS 126862 127041 . + 0 .; E003084_000885 MMseqs2 CDS 7237 7320 . + 0 .; E003084_000873 MMseqs2 CDS 126862 127041 . + 0 .; E003084_000885 MMseqs2 CDS 7237 7320 . + 0 .; E003084_000290 MMseqs2 CDS 216412 216618 . - 0 .; E003084_000290 MMseqs2 CDS 216412 216618 . - 0 .; E003084_000762 MMseqs2 CDS 2639 2845 . + 0 .; E003084_000381 MMseqs2 CDS 224646 225113 . + 0 .; E003084_000226 MMseqs2 CDS 1259 1411 . + 0 .; ```; which I generate from the output of `convertalis` after doing a translated search. Is this not the format I should be using? I was trying to create a minimal file based off of [this spec](https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/464#issuecomment-907555049:18,test,testing,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/464#issuecomment-907555049,1,['test'],['testing']
Testability,I'll second the idea that being able to scan identity levels is useful. Log steps in (1-identity) is generally the right step spacing. Log-log plots of the deltas in cluster sizes make a very informative plot with peaks at any genome duplication events.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/409#issuecomment-776990567:72,Log,Log,72,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/409#issuecomment-776990567,2,['Log'],"['Log', 'Log-log']"
Testability,I'm happy to hear that MMseqs2 performs well in your Benchmark. You can adjust the sensitivity/speed of with the -s parameter. MMseqs2 expected that the computer that creates the index to have the same amount of memory as the computer that performs the search. If you don't want to precompute an index than you can call the search command without precomputed index. A non-persistent index is than created on the fly. The command createindex should be $mmseqs createindex uniref90.mms --split 6 --threads 12; instead of $mmseqs createindex uniref90.mms uniref90.mms.sk7 tmp --split 6 --threads 12.; Why did you call it this way? Is this somewhere in the documentation?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251862327:53,Benchmark,Benchmark,53,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251862327,1,['Benchmark'],['Benchmark']
Testability,"I'm pasting below the whole script I'm trying to run right now:. #!/bin/bash; #SBATCH --job-name=chiro_mt; #SBATCH --output=%x.%j.out; #SBATCH --error=%x.%j.err; #SBATCH --partition=nocona; #SBATCH --nodes=2; #SBATCH --ntasks=256; #SBATCH --reservation=benchmark. module --ignore-cache load gcc/10.2.0 openmpi/4.0.4 . INPUTDIR=~/input; MMSEQ=~/MMseqs2/bin; SPLITS=3; QUERYFASTA=all_species.fasta; QUERYDB=DB. cd $INPUTDIR. mmseqs createdb ""${QUERYFASTA}"" ""${QUERYDB}""; mmseqs splitdb ""${QUERYDB}"" ""${QUERYDB}_split"" --split $SPLITS. for file in $(ls ""$INPUTDIR/${QUERYDB}_split""_*_$SPLITS); do; mmseqs createsubdb ""${file}.index"" ""${QUERYDB}_h"" ""${file}_h""; done. split=0; for file in $(ls ""$INPUTDIR/${QUERYDB}_split""_*_$SPLITS); do; RUNNER=""mpirun -np 128"" bsub mmseqs cluster ""${file}"" DB aln_${split} tmp --cov-mode 1 -c 0.9 --threads 128; ((split++)); done. So far what I understand is that the MPI version is used to run MMseqs2 on multiple servers but to run it in multiple cores, will the ""simple"" version work? I think that for the kind of job I'm doing right now, being able to run it on 128 cores on a single node will be enough, or is the workflow the same for what I pasted above? Thanks a lot.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-844277969:253,benchmark,benchmark,253,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-844277969,1,['benchmark'],['benchmark']
Testability,"I'm sorry for the delays in replying due to concomitant teaching duties...; I fixed my two mistakes (specifying the fasta file instead of the query DB, and recompiled without MPI which I probably don't really require) and the search runs perfectly! First tests suggest that indeed mmseqs2 sensitivity is far greater that ghostx or Rapsearch2 with equivalent or even better speed (I have to make more tests to measure speed on our cluster the nodes of which have less RAM than the server I used to build the UniRef90 DB and run the first searches).; Many thanks again for your most helpful advice, I'm mighty happy to have pursued this through :)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251679077:255,test,tests,255,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-251679077,2,['test'],['tests']
Testability,"I'm trying to do more precise comparisons against both control the parameters of both to same results size, inclusion e-value for profile composition, etc... (closer the parameters you use in benchmark). I think, in next versions you could include controls to calculate score in smith-waterman step, this way the user can control gap-opening and extension and others parameters and also others compositional bias correction. But I made it work with high sensitivity compared to psiblast. . I can report further. . so, how can I track in which iteration some sequence were matched? I wondering like to retrieve sequences by iteration and also the model per iteration. Thanks",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-407158691:192,benchmark,benchmark,192,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-407158691,1,['benchmark'],['benchmark']
Testability,"If I compile with GCC 10 (just make USE_GCC=yes in FreeBSD ports), it does not hang with only SSE. I'd hate to add such a heavy dependency to the port, though, so it would be good to figure out what's going wrong with clang 10. The PowerEdge has 32 hyperthreads and 64G RAM. Is 2G/thread not enough for SLICEPROFILE? If not, how can I limit the number of threads in the regression tests? It doesn't seem to respect OMP_NUM_THREADS=16. I still see CPU spike to > 3000%. I'll test your patches later. Thanks...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868837240:381,test,tests,381,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868837240,2,['test'],"['test', 'tests']"
Testability,If you clustered a clustered database then you increase your initial search radius by `x^2`. E.g. your --min-seq-id is then 0.95^2 = 0.9025. Maybe this might explain this effect? . Nucleotide cluster is internally tested and it seems to perform well compared to CD-HIT. We did not write a paper about it but really should.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/420#issuecomment-789791198:214,test,tested,214,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/420#issuecomment-789791198,1,['test'],['tested']
Testability,"If you provide me the mmseqs command call for your search an the log of the run then I can tell you why MMseqs2 is not much faster and what parameter you can tweak to be faster. My assumption is that you waste a lot of time on alignments that do not have to be computed since the chance of being homologous is not high. . The warning ""Sequence XXX produces too many hits. Results might be truncated"" indicates that their are too many high scoring diagonal (> target database size / 2). Is your database highly redundant?. MMseqs2 produces in default only one smith-waterman alignment per sequence. You can increase the alignments with` --alt-ali`. If you want just the best hit than you could use `filterdb` to reduce just extract the first line of each query result. Also if you are just interested at the top hit than you can speed up MMseqs2 quite a lot by using an iterative search. See https://github.com/soedinglab/mmseqs2/wiki#how-to-find-the-best-hit-the-fastest-way . In my example MMseqs2 was able to detect the sequence pair you mentioned. I search sequence `10141.SETX` (query) against sequence `6334.TSP_11650` (target) and both could be detect by MMseqs2. . The command I used was . mmseqs search query target aln tmp -a -s 7.5",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407433121:65,log,log,65,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-407433121,1,['log'],['log']
Testability,"If you still have the query/target hydra sequences, could you upload them or give us a list? Then we can include that in the regression benchmark to make sure that this issue doesn't happen again. Best regards,; Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278872328:136,benchmark,benchmark,136,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/16#issuecomment-278872328,1,['benchmark'],['benchmark']
Testability,"In this case with 512GB of RAM, and NR with it's current size (~69GB of raw sequences), --split 2 and 32 threads is what gives best performance results. Reducing the number of database chunks doesn't allow to keep the index file in cache when 'mmseqs search' is running, what forces reading from the file system, increasing the sys CPU time and degrading performance. Using 62 threads (32 real cores plus 32 from HT), looks like that puts too much pressure on available memory bandwith and hurts performance too (in my tests, it goes from 4' to 4'30'')",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301212554:519,test,tests,519,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301212554,1,['test'],['tests']
Testability,"Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Compute score, coverage and sequence identity; Query database size: 12189231 type: Aminoacid; Target database size: 134985288 type: Aminoacid; Calculation of alignments; [] 3h 56m 20s 209ms; Time for merging files: 0h 0m 13s 891ms. 138555514 alignments calculated.; 54047267 sequence pairs passed the thresholds (0.390077 of overall calculated).; 4.434018 hits per query sequence.; Time for processing: 3h 56m 39s 222ms; offsetalignment mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/aln mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB --chain-alignments 0 --merge-query 1 --search-type 0 --threads 2 --compressed 0 --db-load-mode 3 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 1s 475ms; Writing results to: mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB; [] 5h 36m 42s 260ms. Time for merging files: 0h 0m 5s 864ms; Time for processing: 5h 37m 8s 744ms; convertalis mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3-s1.m8 --db-load-mode 3 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Alignment format 	0; Format alignment output	query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits; Translation table 	1; Gap open cost 	11; Gap extension cost 	1; Database output 	false; Preload mode 	3; Search type 	0; Threads 	80; Compressed 	0; Verbosity 	3. [] 4h 58m 11s 48ms; Time for merging files: 0h 1m 34s 339ms; Time for processing: 5h 2m 23s 933ms",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:7604,test,test-megan-out-,7604,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,4,['test'],['test-megan-out-']
Testability,It appears like some of the CI tests are not passing. Am I missing something or are parts of the CI pipeline broken? Can someone help me on that?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/647#issuecomment-1347358706:31,test,tests,31,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/647#issuecomment-1347358706,1,['test'],['tests']
Testability,"It didn't cause a crash ! . So now I had the same log error: ; ```; data/04_taxgenes/contigs_tax/14073767031253215106/easy-taxonomy.sh: line 55: 19300 Segmentation fault ""$MMSEQS"" addtaxonomy ""${TARGET}"" ""${TMP_PATH}/result_aln_swapped_sum"" ""${TMP_PATH}/result_aln_swapped_sum_tax"" ${ADDTAXONOMY_PAR}; ```. In output: ; ```; Time for merging to result_aln_swapped_sum: 0h 0m 48s 61ms; Time for processing: 0h 1m 27s 597ms; Error: filterdb died; ```. But doing the `gdb` run in our master node it worked without any problem. . In my cluster we work through module installation for the programs, but I wanted to try out beforehand a local copy of the bin without being properly compiled in the system. Could that be the problem?. (I am basically running `mmseqs2` executing the script as follows: `./scripts/mmseqs_latest/mmseqs/bin/mmseqs <opts>`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-831942921:50,log,log,50,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-831942921,1,['log'],['log']
Testability,"It doesn't look like the MSAs for the KOFAM profiles are available for download, we can't create profiles for MMseqs2 without the original MSAs. I don't have specific recommendations for replacing HMMER. Generally, a high sensitivity search against the pfam profiles should work pretty well. As these are different algorithms, MMseqs2 will never 100% match HMMER or the other way around, so it depends on your application if this is good enough or not. The searching against the Pfam profiles with `--exhaustive-search` will use a different search mode that might be more sensitive since it internally swaps Pfam database to the query side and can generate similar k-mers based on the Pfam profiles, but we never thoroughly tested this.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/771#issuecomment-1785450124:724,test,tested,724,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/771#issuecomment-1785450124,1,['test'],['tested']
Testability,It is possible to benchmark out software with our regression benchmark. It can be downloaded here https://bitbucket.org/martin_steinegger/mmseqs-benchmark,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283914103:18,benchmark,benchmark,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283914103,3,['benchmark'],['benchmark']
Testability,"It is very long so I prefer to give to you all the log in a file. You can find the search step from line 723 or below, but I prefer to give to you everything. ; ```; prefilter /env/cns/bigtmp2/PANFAM/PipelineProteome//CLUST/PANFAM80/panfam_subDB /env/cns/bigtmp2/PANFAM/PipelineProteome//CLUST/PANFAM80/panfam_subDB /env/cns/bigtmp2/PANFAM/PipelineProteome//ALIGN/635041581728617992/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 1000 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 0 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 36 --compressed 0 -v 3 -s 7.0 . Query database size: 12187255 type: Aminoacid; Estimated memory consumption: 42G; Target database size: 12187255 type: Aminoacid; Index table k-mer threshold: 100 at k-mer size 6 ; Index table: counting k-mers; [=================================================================] 12.19M 26s 362ms; Index table: Masked residues: 43826477; Index table: fill; [=================================================================] 12.19M 38s 306ms; Index statistics; Entries: 3083105370; DB size: 18129 MB; Avg k-mer size: 48.173521; Top 10 k-mers; GPGGTL	40332; GQQVAR	22194; GEGGVV	20313; NAIAAG	18525; YTGTPK	18522; ALAIAR	16978; GFVAVR	15587; GPGGTT	14728; GEGGTL	13758; LAMHRT	13125; Time for index table init: 0h 1m 7s 827ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 100; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 12187255; Target db start 1 to 12187255; [======; ```; [pipeline.log](https://github.com/soedinglab/MMseqs2/files/5856223/pipeline.log); Thanks",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765417034:51,log,log,51,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765417034,3,['log'],['log']
Testability,It would help if you could provide a log file. So I can see which module is slow. . The database does not stay necessarily memory. The OS can reuse the memory. The memory just got memory mapped by mmseqs2 (depending on the --db-load-mode).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-507070096:37,log,log,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-507070096,1,['log'],['log']
Testability,"KRHGR3W5473P5ESTPA5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODY4UNEA#issuecomment-507070096>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMYW6UIXY2PZFDTSZDP5ESTPANCNFSM4H333Q6Q>. createdb test_reads/S1E3-S3_assembled_kneaddata.fastq mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Max sequence length 	65535; Split seq. by length 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. Assuming DNA database, forcing parameter --dont-split-seq-by-len true; Converting sequences; [	1 Mio. sequences processed; 	2 Mio. sequences processed; 	3 Mio. sequences processed; 	4 Mio. sequences processed; 	5 Mio. sequences processed. Time for merging files: 0h 0m 4s 846ms; Time for merging files: 0h 0m 35s 669ms; Time for merging files: 0h 0m 1s 887ms; Time for processing: 0h 1m 53s 245ms; search mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB tmp --db-load-mode 3 --threads 2 --max-seqs 25 -s 1 -a -e 1e-5 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Add backtrace 	true; Alignment mode 	2; E-value threshold 	1e-05; Seq. id. threshold 	0; Min. alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Realign hits 	false; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	3; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	2; Compressed 	0; Verbosity 	3; Seed substitution matrix 	VTML80.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max results per query 	25; Previous max results per query 	; Split database 	0; Split mode 	2; ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:2052,test,test-megan-out-,2052,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,2,['test'],['test-megan-out-']
Testability,"LUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 0s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 9s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 14s); TEST SUCCESS; GOOD; Exp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:2423,TEST,TEST,2423,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"Let me see later if I can install the latest release (currently I have it via conda, no clue if that's updated yet).; I don't think I can send the data to you. The database includes unpublished data from various collaboration partners, so not really an option :/. I'll make another run and capture the output, the log is not a problem luckily.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590271725:314,log,log,314,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-590271725,1,['log'],['log']
Testability,"MMseqs2 could until recently not handle sequences longer than 32768 residues and split longer sequences into multiple entries (with incrementing suffices _0, _1, ...). Recently (use the latest git version), MMseqs2 learned to handle longer sequences.; By default, it will handle up to 65k residue. . By passing `--dont-split-seq-by-len` or `--max-seq-len` with a higher value to `createdb` it should also be able to handle those. Though, this is only a few weeks old and not very heavily battle tested yet. Hope that helps,; Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/97#issuecomment-397043815:495,test,tested,495,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/97#issuecomment-397043815,1,['test'],['tested']
Testability,"MMseqs2 does implement its own profile scoring with its own pseudo-count logic. Therefore, it should not be compared with Psi-blast profiles.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2136654678:73,log,logic,73,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/847#issuecomment-2136654678,1,['log'],['logic']
Testability,"Maybe I'm tired but i it is very strange because when i used mmseqs2 using:. `mmseqs cluster panproteome.db families_kmer-per-seq80_max-seqs300_2.db /tmp/test --kmer-per-seq 80 --max-seqs 300 --min-seq-id 0.8 -c 0.8 --threads 10`. It produces the following output:; ```; mmseqs cluster panproteome.db families_kmer-per-seq80_max-seqs300_2.db /tmp/test --kmer-per-seq 80 --max-seqs 300 --min-seq-id 0.8 -c 0.8 --threads 10; Program call:; panproteome.db families_kmer-per-seq80_max-seqs300_2.db /tmp/test --kmer-per-seq 80 --max-seqs 300 --min-seq-id 0.8 -c 0.8 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	4; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:154,test,test,154,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,3,['test'],['test']
Testability,"Milot mentioned already ALP. You can find the relevant logic for the E-value computation in `src/alignment/EvalueComputation.h`. E.g. our precomputed values for BLOSUM62 are here. ; The first two values are lambda and k.; ```. {""blosum62.out"", 11, 1, true, {0.27359865037097330642, 0.044620920658722244834,; 1.5938724404943873658, -19.959867650284412122,; 1.5938724404943873658, -19.959867650284412122,; 30.455610143099914211, -622.28684628915891608,; 30.455610143099914211, -622.28684628915891608,; 29.602444874818868215, -601.81087985041381216}},; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/731#issuecomment-1634249517:55,log,logic,55,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/731#issuecomment-1634249517,1,['log'],['logic']
Testability,"My point of view is that of a computational biologist who is both an end-user and developer of software that includes mmseqs as a dependency. As a developer myself, I view end users who are sophisticated enough to say things about builds as a fairly precious resource. So let me make my point one more time before I accept your decision and move on. . While I admit there are things that suck about semantic versioning, it has two outstanding qualities: (1) it has a controlled syntax that is widely used, and (2) it's easy to determine whether software that follow the pattern is older, newer, or equal to a reference version that someone else tested. Among the three recipes shown above and the binaries available for download, it seems that there are 3 different versioning schemes in use that will show up as the output of ""mmseqs version"" (12.11e3, 12-11e3, and the full SHA1). If I add my software (which uses VERSION_OVERRIDE=12.0 internally for compatibility with python semantic versioning), that's a 4th. My install code can't easily determine if a binary of unknown provenance is lower, equal, or higher than the recommended version. Neither can any downstream users without the sophistication to look at your repository's version tags. Using semantic versioning as a standard (that can be overridden by packagers or users if needed) would avoid this issue. To finish with something nice, your build system is well-done and build are smooth on the various linux and macos BigSur platforms I've tested it on. Feel free to close this issue after reading.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-767031559:645,test,tested,645,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/396#issuecomment-767031559,2,['test'],['tested']
Testability,"No cpu, disk, or network activity. Deadlock?. Built with -march=native, it seems to mostly work:. SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 23s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filterta",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1039,TEST,TEST,1039,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"No worries! Always a good exercise to figure things out myself. I'm sure you're very busy and this was a problem of my own making by not using the intended workflow. I did try to use the `databases` workflow initially but unfortunately the login nodes that have connection to the internet on the cluster I am using don't have the resources to deal with the size of the databases I wanted to use. In the future I'll look to find a better workaround. With `metabuli` I just downloaded the pre-built database. I don't know if the resources for this are available but perhaps it would be worthwhile to do a similar thing here? Either way, thanks again for providing this excellent resource and good luck with CASP16! :)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2094347095:240,log,login,240,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2094347095,1,['log'],['login']
Testability,"No, I expected more than 566 million of total FASTQ entries. I just clear the log .. but anything else written to sterr just the number of sequences processed.; I am in VirtualBox Ubuntu 16.04 and have 10Go of RAM.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459381114:78,log,log,78,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459381114,1,['log'],['log']
Testability,"OK, I cloned from the master branch (MMseqs2 Version: d990a0fb4bba9193b8aadc699a614303a57792f2) and re-ran the tests. During the testing, the following warning/error kept appearing: `No datafile could be found for resultFolder/NUCLPROTTAX_SEARCH/query_nucl_h!`. Here's the tail of the output:. ```; No datafile could be found for resultFolder/LINSEARCH_NUCLNUCL_TARNS_SEARCH/targetannotation_nucl_h!; Error: extractorfs died; Command exited with non-zero status 1; 37.62user 1.04system 0:02.30elapsed 1676%CPU (0avgtext+0avgdata 57204maxresident)k; 156904inputs+244464outputs (603major+36363minor)pagefaults 0swaps. LINSEARCH_NUCLNUCL_TARNS_SEARCH; TEST FAILED (NO REPORT). DBPROFILE_INDEX; TEST SUCCESS; GOOD; Expected: 0.142; Actual: 0.197554. NUCLPROTTAX_SEARCH; TEST FAILED (NO REPORT). PROTNUCL_SEARCH; TEST FAILED (NO REPORT). EASY_LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. LINCLUST; TEST SUCCESS; GOOD; Expected: 26523; Actual: 26523. EASY_CLUSTER; TEST FAILED; BAD; Expected: 15682; Actual: 15675. CLUSTER; TEST FAILED; BAD; Expected: 15682; Actual: 15675. NUCLNUCL_TRANS_SEARCH; TEST FAILED (NO REPORT). NUCLNUCL_SEARCH; TEST FAILED (NO REPORT). NUCLPROT_SEARCH; TEST FAILED (NO REPORT). DBPROFILE; TEST SUCCESS; GOOD; Expected: 0.142; Actual: 0.182019. SLICEPROFILE; TEST SUCCESS; GOOD; Expected: 0.140; Actual: 0.147729. EASY_PROFILE; TEST SUCCESS; GOOD; Expected: 0.334; Actual: 0.338757. PROFILE; TEST SUCCESS; GOOD; Expected: 0.367; Actual: 0.367423. EASY_SEARCH; TEST SUCCESS; GOOD; Expected: 0.235; Actual: 0.238355. SEARCH; TEST SUCCESS; GOOD; Expected: 0.235; Actual: 0.238355; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488222298:111,test,tests,111,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-488222298,19,"['TEST', 'test']","['TEST', 'testing', 'tests']"
Testability,"OOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD;",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1350,TEST,TEST,1350,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"Oh, great to hear that you could find parameters! I would be interested how you benchmark and what kind of parameters you used in the end. What do you mean by controls? It would be easy to include gap open and extend costs to MMseqs2. But I think it would make more sense if the gap costs depends on the diversity of the profiles. More diverse profiles need lower gap open and extend costs compared to less divers once. So one global parameters might not fit all profiles equally. This is still an open point. We do not explicitly encode the iterations in the results. But we append hits after each iteration to the previous results. So you could recognize iteration changes by comparing the e-value to previous hits. A lower e-values compared to the previous hits indicates a new iteration.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-407427261:80,benchmark,benchmark,80,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-407427261,1,['benchmark'],['benchmark']
Testability,"Okay I will try to change the temporary directory. I will see to install the avx2 binary too. Thanks for your help, I will test all this.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/382#issuecomment-741817483:123,test,test,123,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/382#issuecomment-741817483,1,['test'],['test']
Testability,Okay maybe that's not the issue since cmake claims to have found the various SIMD instruction sets to work:; ```; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396924050:128,Test,Test,128,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1396924050,14,['Test'],['Test']
Testability,"Okay this is indeed a size problem. In my test, individual database entries are quickly ballooning to multiple gigabytes. I guess we should truncate the `query` field to like at most 1024 bytes or something like that. . You can either manipulate the header database to have a whitespace character somewhere near the beginning (the `query` field will show everything up to the first whitespace), with something like that; ```; mmseqs apply /tmp//2989869989197200687/query_h /tmp//2989869989197200687/query_h_new --threads 1 -- cut -d'.' -f1; mv -f /tmp//2989869989197200687/query_h_new /tmp//2989869989197200687/query_h; mv -f /tmp//2989869989197200687/query_h_new.index /tmp//2989869989197200687/query_h.index; ```. Or you can drop the `query` field and add the dbkey instead:; ```; mmseqs convertalis /tmp//2989869989197200687/query /db/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 /tmp//2989869989197200687/result /tmp/rep_vs_NT_Jan2021.mmseq2.m8db --format-output target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen --db-output 1 --search-type 3 ; mmseqs prefixid /tmp/rep_vs_NT_Jan2021.mmseq2.m8db /tmp/rep_vs_NT_Jan2021.mmseq2.m8 --tsv; ```. Combined with the `query.lookup` you can still map each of the database keys to a header.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-879089524:42,test,test,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-879089524,1,['test'],['test']
Testability,"Okay, I did some looking and found that our cluster is capable of also running openmpi instead of mvapich2. Unsurpisingly, after loading this and recompiling the program, it works as you said. Thank you!. Fyi if you all are looking to debug for the mvapich2 system, this is the error that comes after running those commands on this system (happy to test any issues/fixes here if it's useful to you):; ```; (gdb) bt; #0 0x00007ffff7186abc in MPID_Abort () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #1 0x00007ffff71419db in MPIR_Handle_fatal_error () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #2 0x00007ffff7141b59 in MPIR_Err_return_comm () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #3 0x00007ffff70fa699 in PMPI_Init () from /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so.12; #4 0x0000000000479714 in MMseqsMPI::init(int, char const**) (); #5 0x00000000005d44a1 in kmermatcher(int, char const**, Command const&) (); #6 0x000000000046f2f9 in runCommand(Command*, int, char const**) (); #7 0x000000000045af9b in main (); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461685569:349,test,test,349,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461685569,1,['test'],['test']
Testability,Okay. I didn't realize that. I assumed from the wiki page with `createsubdb` grabbing from the index could be equivalent to the fasta file headers. Your way is about what I was doing but with some intermediate python code for extra filtering. First I filter out all hits in the forward search which didn't meet a set bitscore threshold. Could I do this easily with `filterdb`? Next if a query sequence had multiple best hits with the same bitscore in the forward search then I retained all those target sequences for the reverse search. It's an edge case but could be important with our annotation pipeline. On my tests on real data we do see query sequences with multiple best hits when bitscores are less than ~90. Your script is a great first try though. Really clears up how to use the `filterdb` and `createsubdb` commands for me.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462214865:614,test,tests,614,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462214865,1,['test'],['tests']
Testability,Once finish...sure. I forget to put the log out in 1> ...my mistake.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-484315979:40,log,log,40,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-484315979,1,['log'],['log']
Testability,Opened one: #773 . Also compiled and tested downloading PDB database and it works fine. @milot-mirdita,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/772#issuecomment-1796590369:37,test,tested,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/772#issuecomment-1796590369,1,['test'],['tested']
Testability,SIMDe ARM64 performance seems to be problematic. There is still some minor difference in the PROFILE regression test (AUC: 0.36739**6** vs 0.36739**8**). However the runtime is over 2x slower (14min vs 31min). I think we might want to keep sse2neon at least in the short term until SIMDe can catch. I guess PPCLE will be similar (the work for that was still incomplete though). HEAD: https://travis-ci.org/github/soedinglab/MMseqs2/jobs/687741954; PR: https://travis-ci.org/github/soedinglab/MMseqs2/jobs/688351766,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630190990:112,test,test,112,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630190990,1,['test'],['test']
Testability,"ST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 26",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1581,TEST,TEST,1581,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"ST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1284,TEST,TEST,1284,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"Seed substitution matrix 	VTML80.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max results per query 	25; Previous max results per query 	; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	1; Exact k-mer matching 	0; Mask residues 	1; Mask lower case residues 	0; Minimum diagonal score 	15; Spaced k-mers 	1; Spaced k-mer pattern 	; Local temporary path 	; Rescore mode 	0; Remove hits by seq. id. and coverage 	false; Sort results 	0; Global diagonal rescoring 	false; Mask profile 	1; Profile e-value threshold 	0.1; Use global sequence weighting 	false; Filter MSA 	1; Maximum seq. id. threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Omit consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames extractorfs mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs --min-length 30 --max-length 32734 --max-gaps 2147483647 --contig-start-mode 2 --contig-end-mode 2 --orf-start-mode 1 --forward-frames 1,2,3 --reverse-frames 1,2,3 --translation-table 1 --use-all-table-starts 0 --id-offset 0 --threads 2 --compressed 0 -v 3 . [] 4h 52m 19s 671ms; Time for merging files: 0h 0m 12s 453ms; Time for merging files: 0h 0m 37s 79ms; Time for processing: 4h 53m 13s 946ms; translatenucs tmp/15531098257495296432/q_orfs tmp/15531098257495296432/q_orfs_aa --translation-table 1 --add-orf-stop 0 -v 3 --compressed 0 --threads 2 . [] 4h 49m 49s 475ms; Time for merging files: 0h 0m 13s 279ms; Time for processing: 4h 50m 4s 882ms; prefilter tmp/15531098257495296432/q_orfs_aa /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/search/pref_0 --sub-mat blosum62.out --seed-sub-mat VTML80.out -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 25 --split 0 --split-mode 2",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:3852,test,test-megan-out-,3852,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['test'],['test-megan-out-']
Testability,"So i fixed this error (https://github.com/soedinglab/MMseqs2/commit/d9744e3c28dadd2cc8c03c8c5c8179400d8fb55a + https://github.com/soedinglab/MMseqs2/commit/852f04de365a377b0d24b8382b51c281933d8250). I ran the regression test and there are a lot of failures. I guess some are related to https://github.com/soedinglab/MMseqs2/issues/253 as nucleotide 13-mers (or even worse by default 15-mers) require more than 4GB RAM. But other failures are way worse:; The sensitivity changes slightly in many tests, meaning 32-bit MMseqs2 produces different than 64-bit MMseqs2. This is pretty bad and would require to go through every module invocation separately to track where differences first happen and then find the root cause. This would be very time consuming and for an architecture where you can barely search against any realistically sized database.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/418#issuecomment-786279748:220,test,test,220,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/418#issuecomment-786279748,2,['test'],"['test', 'tests']"
Testability,So the `_N` suffix comes already form your FASTA files? ; If thats the case: We already have a feature request in #82 for being able to adapt the parsing logic for FASTA headers. However none had time to work on that yet. We will keep that in mind for the future.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462779388:154,log,logic,154,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462779388,1,['log'],['logic']
Testability,"Something is going wrong before the prefiltering stage already, could you recreate `$SCRATCHDIR` completely? Also please specify a scratch directory that does not contain anything (e.g. query, target, results, logs).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593660260:210,log,logs,210,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593660260,1,['log'],['logs']
Testability,"Something went wrong in the first `kmermatcher` step that produced an invalid database. Now every time you rerun the job it will take the previous result in the `tmp` folder and try to run it through `rescorediagonal` to compute the alignment. Can you clear out the `tmp` folder, rerun the job and post the log? Can't learn much from the `rescorediagonal` call sadly.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537695295:307,log,log,307,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537695295,1,['log'],['log']
Testability,Sorry for bothering again. I thought that in order to provide a reproducible example here are more details: ; I assembled a genome with shovill like this ` shovill --outdir assembly --R1 SRR4213076_1.fastq.gz --R2 SRR4213076_2.fastq.gz`; [Here are the fastq files](https://www.ebi.ac.uk/ena/browser/view/SRR4213076?show=reads); I used prokka to annotate this genome and used 2 toy examples with just 3 sequences. ; [Here are the assembly and the genome.faa genome.fna files [just 3 sequences in each file]; ](https://drive.google.com/drive/folders/1iaLnhPWb859QnTMO-ZwSgHwm_J-mPiuQ?usp=sharing). I tried this routine either using nucleotides or amino acids. . ```; mmseqs createdb SRR* sample_db; mmseqs createdb genome.faa collection_db; # mmmseqs createdb genome.ffn collection_db # alternatively using nucleotides; mseqs cluster collection_db collection_clu TemPoral; mmseqs createsubdb collection_clu.index collection_db collection_rep; mmseqs map sample_db collection_rep sample_map tempora --threads 7; mmseqs convertalis sample_db collection_db sample_map result.tsv; mmseqs summarizealis sample_map sample_map_summary; mmseqs createtsv sample_db collection_db sample_map_summary sample_map_summary.tsv; ```. This works fine with amino acids but [as shown in the log included in the post above] it doesn't work when using directly nucleotides or the ffn file. I chose MMseqs2 due to its speed and the scale of the task in our case. I thought it would be better to build the catalog of genes with nucleotides so for the search I though searching nuc against nuc. Can you help me with this? Thanks in advance,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/507#issuecomment-978222623:1270,log,log,1270,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/507#issuecomment-978222623,1,['log'],['log']
Testability,"Sorry for the confusion, you have to use g++ in the CXX call. I fixed the readme. Try this call and upload the log if anything goes wrong:; CXX=""$(brew --prefix)/bin/g++-6"" cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; make VERBOSE=1",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/8#issuecomment-265689036:111,log,log,111,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/8#issuecomment-265689036,1,['log'],['log']
Testability,Sorry for the delay. I was dealing with some private stuff :/. I would drop 32-bit support. Even with the patch it doesn't pass the integration tests and tracking down why would be very low priority as we require a >4GB address space for everything except small databases anyway.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/418#issuecomment-794112505:144,test,tests,144,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/418#issuecomment-794112505,1,['test'],['tests']
Testability,"Sorry, I missed this `if` statement completely. I see why it passed the regression test.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/756#issuecomment-1731335551:83,test,test,83,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/756#issuecomment-1731335551,1,['test'],['test']
Testability,"Sorry, as mentioned, I am having some time issues right now.; I checked the search in the reverse way, it's also identical. I don't understand what you want me to test right now. I can't find the --slice-search parameter anywhere, or maybe I'm looking wrong. If you could clarify, then I'll test this too.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597641644:163,test,test,163,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-597641644,2,['test'],['test']
Testability,"Sure, here are the log and err files from linclust. The same problem also occurs when using cluster as well. [linclust.err.txt](https://github.com/soedinglab/mmseqs2/files/800241/linclust.err.txt); [linclust.out.txt](https://github.com/soedinglab/mmseqs2/files/800242/linclust.out.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282376866:19,log,log,19,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/10#issuecomment-282376866,1,['log'],['log']
Testability,"Sure, sorry.; MMseq2 is version '44bde75f0e9f4d0ffc60970bee13347fe89bcb96'. Is running on a Dell computer with 64 cores, in a 5TB partition of HDD and 1Tb of RAM, and with Ubuntu 18.04 LTS.; I don't find any log file so I attach you the log of the running prior to the fault ( 1>log.txt); Hope that help, thanks!! ; [log.txt](https://github.com/soedinglab/MMseqs2/files/3076480/log.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482841608:208,log,log,208,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482841608,5,['log'],['log']
Testability,"Sure, these are the commands used for performing protein to protein search with a modified substitution matrix (changed the score for X). `mmseqs createdb TestDB_Subject.fa testRun/targetDB; `; `mmseqs createdb TestQuery.fa testRun/queryDB; `; `mmseqs createindex --mask 0 testRun/targetDB testRun/tmp --comp-bias-corr 0 --seed-sub-mat PAM10_modified.out`. `mmseqs search testRun/queryDB testRun/targetDB testRun/resultDB testRun/tmp --comp-bias-corr 0 --mask 0 --sub-mat PAM10_modified.out -a`. `mmseqs convertalis testRun/queryDB testRun/targetDB testRun/resultDB testRun/resultDB.m8 --sub-mat PAM10_modified.out`. The result matrix <img width=""1137"" alt=""ResultTable"" src=""https://user-images.githubusercontent.com/3918230/59648222-e42df700-91b0-11e9-92f1-3aaf27cc2e58.png"">. [TestDB_Subject.txt](https://github.com/soedinglab/MMseqs2/files/3299493/TestDB_Subject.txt); [TestQuery.txt](https://github.com/soedinglab/MMseqs2/files/3299494/TestQuery.txt); [PAM10_modified.txt](https://github.com/soedinglab/MMseqs2/files/3299495/PAM10_modified.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-502917178:173,test,testRun,173,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-502917178,15,"['Test', 'test']","['TestQuery', 'testRun']"
Testability,"T (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 13s); TEST SUCCESS; GOOD; Exp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2346,TEST,TEST,2346,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,T SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 0s); TEST SUCCESS; GOO,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:2216,TEST,TEST,2216,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1357,TEST,TEST,1357,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 13s); TEST SUCCESS; GOOD; Expected: 512,256,128,64,32; Actual: 512,256,128,64,32. In what little output didn't scroll away, I see a couple of messages like this:. posix_madvise returned an error /home/bacon/MMseqs2-Regression-2b20d2ba3533b6fd5343b78398b4df4d1c2e8f87/Temp/N",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2545,TEST,TEST,2545,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"Tested the mmseqs master branch after the PR was merged, and the download works now! Thanks @apcamargo Note that issue #729 persists, so taxonomy will not work properly with the GTDB database. However, I will go ahead and close this specific issue for now.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/740#issuecomment-1692737339:0,Test,Tested,0,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/740#issuecomment-1692737339,1,['Test'],['Tested']
Testability,"Thank you - --max-seqs really works. For now I wanted to make the alignments to include more sequences,; especially near threshold, than they did. Increasing the number of; sequences made the change. Now I can play with inclusion thresholds. niedz., 1 kwi 2018 o 15:57 użytkownik Martin Steinegger <; notifications@github.com> napisał:. > The parameter --max-seqs was always available but there was a stopped; > mmseqs from printing out the parameter. The printout problem should be; > resolved now.; >; > How do you benchmark the performance?; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/APQmI4PjSUD8eJYrs1QQNM6xcDq8Rm8Bks5tkNzAgaJpZM4TCzs3>; > .; >",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-378337962:517,benchmark,benchmark,517,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-378337962,1,['benchmark'],['benchmark']
Testability,"Thank you both! I was testing on a small dataset, with few singleton clusters, and applying clustalo resulted in an error for such clusters (can't align 1 seq). The problem is that this stops the entire workflow, and no output was produced. Also, can the apply command split the output by cluster?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-558543321:22,test,testing,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-558543321,1,['test'],['testing']
Testability,"Thank you for getting back! We will try to use the latest release. ; Meanwhile, we are testing whether increasing `--max-seqs` will help. Do you think this could be one possibility/ direction to try?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/291#issuecomment-604150179:87,test,testing,87,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/291#issuecomment-604150179,1,['test'],['testing']
Testability,Thank you for reporting it. Could you please provide the log and commands to reproduce the issue?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/314#issuecomment-633199244:57,log,log,57,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/314#issuecomment-633199244,1,['log'],['log']
Testability,Thank you for reporting this and sorry for the inconvenience. This bug got introduced by me. I have reworked the way how MMseqs2 infers the search type since more and more modes have been added and we had some bugs. Currently we have over 32 search possibilities but our test suite does not cover all possibilities. I added a test for your case protein/index profile search.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/195#issuecomment-485948069:271,test,test,271,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/195#issuecomment-485948069,2,['test'],['test']
Testability,Thank you for reporting this issue. @milot-mirdita We need to add the iterative profile search to our regression test. The issue should be fixed now.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/79#issuecomment-380742156:113,test,test,113,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/79#issuecomment-380742156,1,['test'],['test']
Testability,"Thank you for reporting this. Could you please provide more information like version of MMseqs2, output log, platform, computer specification?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482773439:104,log,log,104,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482773439,1,['log'],['log']
Testability,"Thank you for reporting this. Could you please provide the full log? It could be possible that the PFAM profiles need too much memory (30GB might be not enough). . If you want a set of stickers though (see https://twitter.com/thesteinegger/status/1201076220957315074), sent me your address via mail.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/259#issuecomment-567127873:64,log,log,64,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/259#issuecomment-567127873,1,['log'],['log']
Testability,"Thank you for the log. . If you use `--start-sens 1 --sens-steps 3 -s 6` then MMseqs2 performs three searches with the sensitivity `-s 1`, `-s 3.5` and `-s 6` while in each step previously successful aligned sequences are left out. From your log I can see that the most sensitive search `-s 6` took `46m 49s 482ms` while not resulting in a much deeper annotation. Only 16146 extra ORFs sequences got annotated while the searches with `-s 1` and `-s 3.5` annotated already 277629. Searching with `-s 6` is also more sensitive compare to DIAMOND (see https://github.com/soedinglab/MMseqs2/wiki#set-sensitivity--s-parameter). The respective sensitivity should be DIAMONDS `--more-sensitive`. . My recommendation would be to search the following way:. time mmseqs easy-search MOMZ_moomz1_200m.fna /d/Databases/Kegg/sram/mmseqs/ke; gg mmseqs_results2.m8 tmp -s 3.5 --max-accept 1 --max-rejected 5 . This should roughly take 6-7 minutes.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535275835:18,log,log,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535275835,2,['log'],['log']
Testability,"Thank you for the quick response, I will test this soon and post the results when it is done",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/422#issuecomment-795339376:41,test,test,41,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/422#issuecomment-795339376,1,['test'],['test']
Testability,"Thank you for the suggestion. I tried it and here is the log file:; ```; taxonomyreport ../nrDB resultDB report.html --report-mode 1. MMseqs Version: 6672bbc9de55e89b011c8a055982a2644d31a467; Report mode 1; Threads 20; Verbosity 3. Input database ""resultDB"" has the wrong type (Alignment); Allowed input:; - Taxonomy; ```. Edit: also the usage for `taxonomyreport` says the following:; ```; usage: mmseqs taxonomyreport <i:targetDB> <i:taxDB> <o:taxonomyReport> [options]; ```; So according to this, I believe that nrDB should go second?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771805923:57,log,log,57,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771805923,1,['log'],['log']
Testability,Thank you for trying MMseqs2. . Your referenced article is the MMseqs1 paper. Please read the MMseqs2 [article](https://www.nature.com/articles/nbt.3988). The benchmark used to evaluate MMseqs2 is freely available [here](https://bitbucket.org/martin_steinegger/mmseqs-benchmark). . How did you compare the sensitivity of MMseqs2 against PSI-BLAST? We measured the sensitivity up to the first false positive. Our benchmark penalizes high scoring FPs.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-406958840:159,benchmark,benchmark,159,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/106#issuecomment-406958840,3,['benchmark'],['benchmark']
Testability,"Thank you for your answer. I understand, yes, I agree would be good to see clustered searches in MMseqs2. Is there any benchmark with diamond tool? Maybe I could not see it. Best,; Ugur",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/678#issuecomment-1467712910:119,benchmark,benchmark,119,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/678#issuecomment-1467712910,1,['benchmark'],['benchmark']
Testability,Thank you for your detailed report. The problems seems like a missing `clust` call. You can see an example how to use `clusthash` here https://github.com/soedinglab/MMseqs2/wiki#how-to-redundancy-filter-sequences-with-identical-length-and-100-length-overlap. So to make your example work you would need to add a `clust` call after `clusthash` . mmseqs createdb test.fasta test.mmseqsdb; mmseqs clusthash test.mmseqsdb test.clusthashdb --min-seq-id 0.99 ; mmseqs clust test.mmseqsdb test.clusthashdb test.clust; mmseqs createseqfiledb test.mmseqsdb test.clust test.clust_clusters,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/77#issuecomment-376401650:361,test,test,361,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/77#issuecomment-376401650,10,['test'],['test']
Testability,"Thank you for your reply. ; From my understanding, the cascading clustering with the `--cluster-reassign` flag means that it will reassign the clusters so that there are no violations within the cluster. ; I did a sanity check, to make sure that neither of the centroids has a percentage of identity over 70%. So I searched the centroids database against itself, with `mmseqs search` and checked for `pident` > 50% . In general, I want to train an NLP model. So, I want to ensure that there is zero overlapping between training, validation and test sets. So, I clustered my dataset with 50% of identity and each cluster was assigned to one of the 3 sets.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834:544,test,test,544,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/612#issuecomment-1259475834,1,['test'],['test']
Testability,"Thank you! ; I could not find any error in the `_mapping`, `_nodes.dmp` and `_names.dmp` files. So I assume the database is fine. I have build a small test case but I was not able to reproduce the error. Could you try to search against the database ([gtdbSmallDb.zip](https://github.com/soedinglab/MMseqs2/files/4018390/gtdbSmallDb.zip)) and see if the error occurs?. mmseqs taxonomy gtdb_54kDB gtdb_54kDB /tmp/tax /tmp/tmp . It would be amazing if you could share your script to build the gtdb.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570490407:151,test,test,151,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570490407,1,['test'],['test']
Testability,Thank you! I will test it as soon as it is released.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/175#issuecomment-477950097:18,test,test,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/175#issuecomment-477950097,1,['test'],['test']
Testability,"Thank you! Sorry it was premature of me to make a PR without understanding the issue, and I can see I am breaking something. However, I haven't yet got your workaround to work (I get the same ""Invalid"" messages, even after running with `--identifier-field 0 ` flag), I think this is because my stockholm header is only 2 lines (no AC or ID fields)? If these are compulsory fields then the problem is not yours but with the way I generate the stockholm alignment via Biopython? If so, then let me know I can fix this in Biopython. My input file looks like this generated from a fasta MSA:. ```; $ head -n 3 TEST.sth; # STOCKHOLM 1.0; #=GF SQ 19; db-CARD.1.1.3_geneId-AAA22081.1_desc-cat_annot-ARO3002670_taxaName-Agrobacterium.tumefaciens.str..C58_taxaId-176299 MENYFESPFRGITLDKQVKSPNLVVGKYSYYSGYYHGHSFEDCARYLLPDE-GADRLVIGSFCSIGSGAAFIMAGNQGHRNEWISTFPFFFMPEVPEFENAANGYLPAGDTVIGNDVWIGSEAIIMPGITVGDGAVIGTRALVTKDVEPYAIVGGNPAKTIRKRFDDDSIALLLEMKWWGWPAERLKAAMPLMTSGNVAALYRFWRSDSL----------; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/96#issuecomment-396652988:606,TEST,TEST,606,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/96#issuecomment-396652988,1,['TEST'],['TEST']
Testability,"Thank you, I overlooked that part of the docs. I tested with the `-a` flag and it works, but what does the `-a` flag described as ""add backtrace string (convert to alignments with mmseqs convertalis utility)"" do?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/200#issuecomment-490908697:49,test,tested,49,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/200#issuecomment-490908697,1,['test'],['tested']
Testability,"Thank you, is that `--msa-mode` or `--msa-type` sorry? Even with `--msa-type 2` I still got an error originally about a missing index file, my original command was: `mmseqs msa2profile test.fa test.profile --match-mode 1 --msa-type 2`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/94#issuecomment-395384699:185,test,test,185,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/94#issuecomment-395384699,2,['test'],['test']
Testability,Thanks Martin. I'll hopefully get around to testing it in a short while and will let you know if I have any difficulties (not that I expect to).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-417898873:44,test,testing,44,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/86#issuecomment-417898873,1,['test'],['testing']
Testability,"Thanks Milot, the --split 1 workaround has worked, specifiying it at index creation time and search time, although it complains about not having enough memory, it finishes:. ```; Initialising data structures...; Using 64 threads. Use index /junk/databases/mmseqs/nr.sk7; Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Query database: mmseq-testDB(size=2467); Target database: /junk/databases/mmseqs/nr(size=121935717); Use kmer size 7 and split 1 using split mode 0; Needed memory (699399167230 byte) of total memory (541058265088 byte); WARNING: MMseqs processes needs more main memory than available.Increase the size o f --split or set it to 0 to automatic optimize target database split.; WARNING: Split has to be computed by createindex if precomputed index is used.; Substitution matrices...; Time for init: 0 h 0 m 23s; ```; The index file size is around 300GB, so it's asking more than double.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301116501:389,test,testDB,389,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/31#issuecomment-301116501,1,['test'],['testDB']
Testability,"Thanks a lot for the log!. The prefilter takes 15 minutes, while the alignment runs for 4.5 hours. I think your `--max-seqs` is way to high since in average only 4000 hits are accepted by the alignment. You could reduce `--max-seqs` to 100.000 without losing many, if any at all, hits. . Another tweak is using the property of the prefilter results, that they are already well sorted and distinguish well between homologs and non-homologs. It is possible to reduce the run time without losing many, if any, hits of the alignment by using the `--max-rejected` parameter. It stops aligning after `N` consecutive rejected alignments (alignments that do not fulfill the alignment criteria). You could try `--max-rejected 10.` . Another tweak would be to increase the `--min-ungapped-score`. I have never really optimized this parameter. It could lead to a huge gains in speed for the alignment by rejecting prefilter hits more strictly. Try `--min-ungapped-score 30`. You mentioned in an email that you also tested DIAMOND and it was less sensitive. Could you please give us your comparison results?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408840948:21,log,log,21,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408840948,2,"['log', 'test']","['log', 'tested']"
Testability,"Thanks a lot for your work!. I looked though this repository and found these things that might need to be slightly tweaked.; In https://github.com/outpaddling/freebsd-ports-wip/blob/master/mmseqs2/Makefile:; * Do you need an explicit dependency on zlib, bzip2, libomp?; * Please add awk (might be not needed if its installed by default) and wget or curl as a dependency; * Perl is only a build time dependency (if xxd from vim is not available). I am not sure what to think of the arch patch, if you don't set any of the `-DHAVE_*` parameters, they are not used anyway and the automatic detection can be disabled by setting `-DMMSEQS_ARCH="" ""` or something like that. I would suggest to drop that patch. Does FreeBSD not have any baseline requirements (i.e. Debian has SSE2 as baseline)? I would be happy if at very least SSE2 would be enabled by default on x86_64. `-march` also doesn't work very well on some non `x86` architectures, some require `-mcpu` to work correctly. Are 32-bit builds disabled? MMseqs2 currently produces incorrect results on 32-bit systems (see #418, we will probably eventually deal with this to support webassembly fully). Would it be possible to run the small subset of test pipeline, that is part of the release on Github (i.e.: https://github.com/soedinglab/MMseqs2/releases/download/13-45111/MMseqs2-Regression.zip)? This would ensure that MMseqs2 on FreeBSD produces correct results. I was looking for a free CI service that supports *BSD previously, but couldn't find any.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867840850:1200,test,test,1200,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867840850,1,['test'],['test']
Testability,"Thanks a lot! I would suggest to temporarily remove `-DENABLE_WERROR=1` from the cmake calls in Azure and Travis. I'll try to look at your changes in more detail later. I tried the debian binaries on Friday. x64 worked fine, however the ARM build failed in the regression test. I ran it inside QEMU during the night. I hope Travis and the other changes I had done based on sse2neon will be helpful to solve the test failure.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-626641482:272,test,test,272,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-626641482,2,['test'],['test']
Testability,"Thanks for the hint. I'll try that. I'm using redundancy reduced database - pdb_05 is PDB Seqres database clustered with e-value 0.05, and the profiles are generated for pdb_05 sequences on nr70 database, which is nr clustered to 70% sequence identity. As to computer - yes, I'm using 120 cores single machine (it has four Xeons E7-4890 v2). The software; scales up amazingly. Now I'm computing 6it profiles for 31M sequences and; that will be accomplished in few days (prefiltering scores calculation took 65 h 52 m 33s). I see that when calculating S-W alignments the soft crunches the data using all given threads but after finishing million of sequences (or leaning towards finishing that million) it runs gradually on less and lass cores (perhaps some cores were given more time consuming alignments so the program might estimate times and balance threads more efficiently, but this is very minor and would be noticed for users working on big databases only), which might be a speed bottleneck for big dataset such as nr database processed on big machines. In few days I'll start tests also with MPI run, so that mmseqs2 will be ran; on 1600 CPUs on cluster (here I wish the software had used GPUs as the cluster I'm using has additionally some Firepros to use - I write it smiling as MMseqs2 is light years ahead of cd-hit, which I was using to date). I'll give you a feedback on the speed soon then.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733:1085,test,tests,1085,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733,1,['test'],['tests']
Testability,"Thanks for the inputs Martin. Would you be referring to the substitution matrix here https://github.com/soedinglab/MMseqs2/blob/master/src/commons/SubstitutionMatrix.cpp, so if i were to test this, would this be changing the break statements for the degenerate characters in the above script? If not, Can you recommend a way to change the substitution matrix?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-494218357:187,test,test,187,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/204#issuecomment-494218357,1,['test'],['test']
Testability,"Thanks for the quick reply. I was attempting to write an mmseqs package definition for GNU Guix, where the idea is to run tests for the same reasons that the usual `make check` is run, to tests that the software works in the particular environment it is being run in.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283927730:122,test,tests,122,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283927730,2,['test'],['tests']
Testability,"Thanks for the quick response! Here's the whole log:. ```; Program call:; taxonomy -e 1e-5 --start-sens 1 -s 6 --sens-steps 3 --lca-ranks phylum:superphylum:subkingdom:kingdom:superkingdom --threads 24 /tmp/global2/nyoungblut/LLMGAG_27929269397/linclust/genes_db /ebio/abt3_projects/databases_no-backup/uniclust/uniclust90_2018_08_db /tmp/global2/nyoungblut/LLMGAG_27929269397/taxonomy/genes_tax_db /tmp/global2/nyoungblut/LLMGAG_27929269397/taxonomy/tmp/. MMseqs Version: 	7.4e23d; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. Id Threshold 	0; Seq. Id. Mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	1; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Verbosity 	3; Sensitivity 	6; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Spaced Kmer 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; Sort results 	0; In substitution scoring mode, performs global alignment along the diagonal	false; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum sequence identity threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select n most diverse seqs 	1000; Omit Consensus 	false; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	0; Forward Frames 	1,2,3; Reverse Frames 	1,2,3; Translation Table 	1; Use all table starts 	false; Offset of numeric ids 	0; Ad",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032:48,log,log,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452242032,1,['log'],['log']
Testability,Thanks for the quick response!. Here is sample of the data together with the commands I have run and the logs. I hope I have not missed anything:. ```; mmseqs createdb --compressed 1 /tmp/global2/hashkenazy/sample.fa /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz > /tmp/global2/hashkenazy/sample.fa.mmseqdb.std 2>&1. mmseqs linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/hahskenazy/ 1> /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.std 2>&1. mmseqs createtsv /tmp/global2/hashkenazy/sample.fa.mmseqdb.gz /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.tsv > /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust /tmp/global2/hashkenazy/sample.fa.mmseqdb.linclust.tsv.std 2>&1; ```. [MMSEQ_linclust_example.tar.gz](https://github.com/soedinglab/MMseqs2/files/6647982/MMSEQ_linclust_example.tar.gz). Thanks for the help!; Haim,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860615959:105,log,logs,105,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/459#issuecomment-860615959,1,['log'],['logs']
Testability,"Thanks for the response!. I had already done this via docker, which compiles all 3 versions (AVX2, SSE42, SSE2) - AVX2 was definitely the fastest of the three, and all three were behaving the same as the native build. I don't think it's likely I'd see a different results if not using a container. Do you know if running mmseqs with docker on your machine makes it drastically slower? Given that it's the ""same speed"" in my tests, it's hard to imagine that the docker adds anything of relevance in the equation. I fully agree with you that the hardware can't be the source of the discrepancy here.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1511207961:424,test,tests,424,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1511207961,1,['test'],['tests']
Testability,"Thanks for the suggestion. I'll do that for future runs to avoid the huge logfiles. Re: my original problem, I want to mention that I am using a Perl script (which parallel::forkmanager) to fork separate jobs for each sample in my list and then run each sample separately. I tried running mmseqs search with ""--threads 10"" using this same script, but I noticed that the intermediate steps in the command (extractorfs, align etc) all just used one process per sample. I am still trying to figure out if it is because of the parallel script or something to do with mmseqs itself. If I run the same search command on the terminal with ""--threads 10"" it goes fast. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Thursday, July 11, 2019 12:55:59 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). @milot-mirdita<https://github.com/milot-mirdita> noticed that the interactive progress bar could be a problem, in your case it produced at 13GB output. You can turn of the interactive progress bar by setting the environment variable to TTY=0. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOM5JCFUYB7FDWEK7TP65JY7A5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODZXE5VI#issuecomment-510545621>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMTYNMFATMDFBRTPR3P65JY7ANCNFSM4H333Q6Q>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405:74,log,logfiles,74,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405,1,['log'],['logfiles']
Testability,Thanks for this detailed analysis. I have fixed the issues with commit ae4c7344d0174b54ba65646fc35fa91751209a6e and created a regression test for the update workflow.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/199#issuecomment-488556226:137,test,test,137,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/199#issuecomment-488556226,1,['test'],['test']
Testability,"Thanks for your answer!. One more question, I just noticed the line in the log file saying ""WARNING: combining cluster mode 0 in combination with coverage mode 2 can produce wrong results."" in the log. What's the reason for this warning?. You can find the log file here: . https://www.dropbox.com/s/skdw24yg3333fzr/clustering.log?dl=0. Thanks again!. Álvaro",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/218#issuecomment-509226325:75,log,log,75,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/218#issuecomment-509226325,4,['log'],['log']
Testability,"Thanks for your detailed reply!. > I am not super familiar with transcriptomics datasets. Depending on the length of your queries you might want to turn of the early ORF filter (--orf-filter 0) as it can sometimes reject too many ORFs if the sequences are short. I'll try the `--orf-filter 0` option as you suggested. Yes, of course in the case of a transcriptome the ORFs are often short if the assembler is not able to resolve all the isoforms properly. > Generally our nucl-nucl searching capabilities are less developed than than anything-prot. In the taxonomy assignment, nucl-nucl still uses top-hit taxon assignment instead of LCA. We haven't gotten around to thoroughly benchmark the nucl-nucl homology search and publish it (it does work quite well in the preliminary tests). I run a nucl-nucl taxonomy assignment (against NT) and it performed well I think. I did not systematically check, but I did some cross-checks with blastn and it reported the exact same hits. Assuming blast to be the ""gold-standard"" I was quite impressed by the performance of your tool, because it was so much faster. > Also building a taxonomy database for the NT is painful and the database might get extremely large (haven't tried it in a while though). I just did that and it worked. According to your instructions in the Wiki. I'll let you know in case I have something interesting to report.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824596494:678,benchmark,benchmark,678,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824596494,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"Thanks for your prompt replies!. mmseqs search -s 4 --threads 64 -e 100000 --comp-bias-corr 0 --mask 0 $SCRATCHDIR/queryT.mmsq $SCRATCHDIR/queryT.mmsq $SCRATCHDIR/queryT.mmsq.outDB $SCRATCHDIR > $SCRATCHDIR/test.log. File $SCRATCHDIR/queryT.mmsq has 10000 lines, which I guess should confirm it has 10000 sequences. . prefilter /scratch/orakov/tmp/queryT.mmsq /scratch/orakov/tmp/queryT.mmsq /scratch/orakov/tmp/9822650028334564073/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 0 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 65535 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 0 --diag-score 1 --exact-kmer-matching 0 --mask 0 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 64 --compressed 0 -v 3 -s 4.0 . Query database size: 313 type: Aminoacid; Estimated memory consumption: 979M; Target database size: 313 type: Aminoacid; Index table k-mer threshold: 127 at k-mer size 6 ; Index table: counting k-mers; [=================================================================] 313 0s 11ms; Index table: Masked residues: 0; Index table: fill; [=================================================================] 313 0s 11ms; Index statistics; Entries: 99064; DB size: 488 MB; Avg k-mer size: 0.001548; Top 10 k-mers; GQQVAR 4; QRAALA 3; LSGRVA 3; LGEIVD 3; RELAEE 3; LAAAVG 3; SGQQAI 3; RAVSFK 3; AIGSGK 3; ALGSGK 3; Time for index table init: 0h 0m 0s 582ms; Process prefiltering step 1 of 1. k-mer similarity threshold: 127; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 313; Target db start 1 to 313; [=================================================================] 313 0s 95ms. 46.584655 k-mers per position; 349 DB matches per sequence; 0 overflows; 0 queries produce too much hits (truncated result); 1 sequences passed prefiltering per query sequence; 1 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593615497:207,test,test,207,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/283#issuecomment-593615497,2,"['log', 'test']","['log', 'test']"
Testability,Thanks for your reply. The command looks fine. Could you add the log of the run? What kind of mmseqs version do you use (static or self compiled)? Would it be possible to provide the infile and queryfile to reproduce the issue?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-366713681:65,log,log,65,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-366713681,1,['log'],['log']
Testability,Thanks this is very helpful -- the regression testing is awesome,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/296#issuecomment-607943844:46,test,testing,46,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/296#issuecomment-607943844,1,['test'],['testing']
Testability,"Thanks! Just tested it and seems to work fine now. Regarding the consensus building, we already have HMM (HMMER3) profiles for those MSAs. Reading MMseqs2 help there is **convertprofiledb** that seems to be able to convert the HMM from HMMER3 to the MMeqs2 format. Do you recommend it? Or better I go through **hhconsensus** and use **msa2profile**?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344550169:13,test,tested,13,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344550169,1,['test'],['tested']
Testability,"Thanks!. So I'm currently testing linclust on some simulated data (I'm working on clustering a specific type of sequences: Iso-Seq reads). linclust ran fine for 100,000 and 500,000 reads, but died for 1,000,000 reads with the error below. I'm submitting the job on a node with 512Gb and 32 cores (but running with --threads 8). . ```; Program call:; --threads 8 /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/ccs/ENSEMBL/1000000/ccs.fasta /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_out /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>. MMseqs Version: 016429915362d184505627148d07f11c9ccc1aeb; Cluster mode 0; Max depth connected component 1000; Similarity type 2; Threads 8; Verbosity 3; Sub Matrix blosum62.out; Add backtrace false; Alignment mode 3; E-value threshold 0.001; Seq. Id Threshold 0; Seq. Id. Mode 0; Alternative alignments 0; Coverage threshold 0.8; Coverage Mode 0; Max. sequence length 65535; Max. results per query 300; Compositional bias 1; Realign hit false; Max Reject 2147483647; Max Accept 2147483647; Include identical Seq. Id. false; No preload false; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Alphabet size 21; Kmer per sequence 21; Mask Residues 1; K-mer size 0; Shift hash 5; Split Memory Limit 0; Include only extendable false; Skip sequence with n repeating k-mers 0; Rescore mode 0; Remove hits by seq.id. and coverage false; Sort results 0; In substitution scoring mode, performs global alignment along the diagonal false; Remove Temporary Files false; Sets the MPI runner. Program call:; /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/ccs/ENSEMBL/1000000/ccs.fasta /nfs/brubeck.bx.psu.edu/scratch6/ksahlin/preclust_eval/cluster/linclust/ENSEMBL/1000000/linclust_tmpdir<200b>/12158280734806148968/input --max-seq-len 65535 --dont-split-seq-by-len --dont-shuffle --id-offset 0 -v 3. MMseqs Version: 016429915362d184505627148d07f",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120:26,test,testing,26,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418161120,1,['test'],['testing']
Testability,"Thanks. 180 G available. I was cheating here and just testing on a shared node. I was also just running mmseqs myself from the command line (but SemiBin does the same). Do you mean larger chunks, so it runs quicker, rather than smaller chunks?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894191657:54,test,testing,54,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/479#issuecomment-894191657,1,['test'],['testing']
Testability,That is the full log. The command that I ran was:. ```; mmseqs linclust --threads 24 --min-seq-id 0.90 -c 0.9 --kmer-per-seq 50 /tmp/global/nyoungblut/genes_db /tmp/global/nyoungblut/clusters_db /tmp/global/nyoungblut/linclust_tmp/ 2>> linclust.log 1>&2; ```. Note: I shorted the paths to make the command easier to read. My conda env:. ```; # Name Version Build Channel; _libgcc_mutex 0.1 main; bzip2 1.0.8 h516909a_1 conda-forge; ca-certificates 2019.9.11 hecc5488_0 conda-forge; curl 7.65.3 hf8cf82a_0 conda-forge; gawk 5.0.1 h516909a_0 conda-forge; htslib 1.9 h4da6232_3 bioconda; krb5 1.16.3 h05b26f9_1001 conda-forge; libcurl 7.65.3 hda55be3_0 conda-forge; libdeflate 1.2 h516909a_1 bioconda; libedit 3.1.20170329 hf8c457e_1001 conda-forge; libgcc-ng 9.1.0 hdf63c60_0; libssh2 1.8.2 h22169c7_2 conda-forge; libstdcxx-ng 9.1.0 hdf63c60_0; llvm-openmp 8.0.1 hc9558a2_0 conda-forge; mmseqs2 10.6d92c h2d02072_0 bioconda; ncurses 6.1 hf484d3e_1002 conda-forge; openmp 8.0.1 0 conda-forge; openssl 1.1.1c h516909a_0 conda-forge; pigz 2.3.4 0 conda-forge; plass 2.c7e35 h21aa3a5_1 bioconda; samtools 1.9 h10a08f8_12 bioconda; seqtk 1.3 hed695b0_2 bioconda; tk 8.6.9 hed695b0_1003 conda-forge; xz 5.2.4 h14c3975_1001 conda-forge; zlib 1.2.11 h516909a_1006 conda-forge; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537579859:17,log,log,17,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537579859,2,['log'],['log']
Testability,"That's with the RelWithDebInfo-compiled version, on the login node without vmtouch, where the workload took 600 s. On the compute node with vmtouch, it's 10 seconds, same goes for the release-compiled version, so indeed does not seem to make a difference.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397329321:56,log,login,56,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397329321,1,['log'],['login']
Testability,Thats definitely wrong. Is about 362 million the expected number of total FASTQ entries? Could you post the whole log? Was there anything written to stderr?. How much RAM does your machine have?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459368596:114,log,log,114,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459368596,1,['log'],['log']
Testability,"Thats one possibility, however the issue is quite a bit more complicated to solve generally. First, `getTotalSystemMemory` is not used everywhere, only a few modules have a splitting logic. There is also the issue that we read input databases completely into memory if they will have random accesses. That is also currently not tracked through `getTotalSystemMemory`. You can disable that for a few tools with `--no-preload`, but then you pay a large IO cost. Then there is the issue that letting MMseqs2 share the memory bus among unrelated processes is probably also not the best idea. The prefilter benefits a lot from high-bandwidth, low latency access to its index structure.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463:183,log,logic,183,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359795463,1,['log'],['logic']
Testability,"The PDB and UniProtKB/Swiss-Prot are pretty small, if you want a smaller database you could use the `examples/DB.fasta` file, which is a subset of Uniprot we generated or benchmarking some time ago.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/407#issuecomment-774496377:171,benchmark,benchmarking,171,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/407#issuecomment-774496377,1,['benchmark'],['benchmarking']
Testability,"The `No datafile could be found` error seems to be caused by the fact that the data file in question is a symlink:. ```; lrwxrwxrwx 1 nyoungblut abt3 82 Jul 23 19:44 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/updatedClust -> /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db; ```. ...and the symlink doesn't point to a file, since my original cluster database was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebi",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:308,test,tests,308,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,6,['test'],['tests']
Testability,The `_tmp_0` indicates that something went wrong (the merge was unsuccessful). Could you post the log?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-371482052:98,log,log,98,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-371482052,1,['log'],['log']
Testability,"The `profile2pssm` module creates a PSSM file in the following format:. <pre>; Query profile of sequence <strong>ID</strong>; Pos <strong>TAB</strong> Cns <strong>TAB</strong> A <strong>TAB</strong> C <strong>TAB</strong> D...; 0 <strong>TAB</strong> M <strong>TAB</strong> -2 <strong>TAB</strong> -1 <strong>TAB</strong> -5...; 1 <strong>TAB</strong> A <strong>TAB</strong> 5 <strong>TAB</strong> -1 <strong>TAB</strong> -3...; ...; Query profile of sequence <strong>Next-ID</strong>; Pos <strong>TAB</strong> Cns <strong>TAB</strong> A <strong>TAB</strong> C <strong>TAB</strong> D...; 0 <strong>TAB</strong> M <strong>TAB</strong> -2 <strong>TAB</strong> -1 <strong>TAB</strong> -5...; ...; </pre>; (spaces added for legibility, everything is tab separated). I just tried to generate a logo with seq2logo, which worked after messing with the alphabet header slightly, so you have to post process the resulting file.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/99#issuecomment-399935153:789,log,logo,789,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/99#issuecomment-399935153,1,['log'],['logo']
Testability,"The `taxonomy` workflow is usable for your use case, but still under construction to make it user friendly. Building taxonomy databases is still not straightforward, however, this will change in the next few weeks. . We have only tested taxonomic annotations based on the UniProt KB (for which it should be pretty easy to build a database following the instructions on the [wiki](https://github.com/soedinglab/MMseqs2/wiki#prerequisites)). If you generate a mapping between a NCBI accession and its NCBI taxonomy identifier, you should be able to build an MMseqs2 taxonomy database, but we haven't done that yet ourselves. Also the `taxonomy` workflow requires to run [two additional searches](https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment-using-mmseqs-taxonomy). The second search is quite an expensive operation, since it requires high sensitivity searches against a large database.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299:230,test,tested,230,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299,1,['test'],['tested']
Testability,"The `unpackdb` command gives me the same output as the byte offset reading approach I was doing. Seems I re-invented that command without knowing it. However, when I run the `unpackdb` command I get a file per query with its alignments in the internal mmseqs2 format, I then want to convert this to the a3m+alignment format with `result2msa --msa-format-mode 6`, but I still get the same error as above, that the file produced by the `unpackdb` command has the wrong type. I don't really understand why this is the case, since previously when I tested the pipeline with a single sequence queryDB this `result2msa` method worked just fine. Similarly, I am able to run the `result2msa` command on the file which I unpack, but then not on the unpacked files. . Is there another command for converting this internal format MSA to the a3m+alignment format (equivalent to result2msa --msa-format-mode 6)?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/850#issuecomment-2180483781:545,test,tested,545,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/850#issuecomment-2180483781,1,['test'],['tested']
Testability,The clustering might need slightly more memory with an increased `--max-seq-len`. But There should be no problem on your computer with the memory. Sequences longer than 2^16 are not yet well tested but clustering should work without any further issues .,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482896333:191,test,tested,191,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/187#issuecomment-482896333,1,['test'],['tested']
Testability,"The database is not large enough to use 300GB of RAM (See https://github.com/soedinglab/MMseqs2/wiki#memory-consumption). So it would be expected to use far less. However, if MMseqs2 was only uses 30GB of 300GB, then that would be weird. Could you post the full log?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765403000:262,log,log,262,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765403000,1,['log'],['log']
Testability,The error is happening in the call for ksw_extz2_sse in BandedNucleotideAligner::align. I have made a few tests with increasing number of sequences in the database. I tested up to 50 000 sequences and it went fine. I have also done a test including the longer sequence and about 5000 other sequences and it went fine.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/297#issuecomment-612083536:106,test,tests,106,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/297#issuecomment-612083536,3,['test'],"['test', 'tested', 'tests']"
Testability,"The error occurs with version 9.d36de, but not 8.fac81. Here's the entire log:. ```; $ mmseqs taxonomy -e 1e-5 --max-seqs 200 --lca-ranks ""kingdom:phylum:class:order:family:genus:species"" --threads 24 clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/mmseqs2_8.fac81/uniclust90_2018_08_db clusters_rep-seqs.part-14_tax_db tmp_part-14; taxonomy -e 1e-5 --max-seqs 200 --lca-ranks kingdom:phylum:class:order:family:genus:species --threads 24 clusters_rep-seqs_db_14_30 /ebio/abt3_projects/databases_no-backup/uniclust/mmseqs2_8.fac81/uniclust90_2018_08_db clusters_rep-seqs.part-14_tax_db tmp_part-14. MMseqs Version: 	9.d36de; Substitution matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	2; E-value threshold 	1e-05; Seq. id. threshold 	0; Min. alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Realign hits 	false; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Gap open cost 	11; Gap extension cost 	1; Threads 	24; Compressed 	0; Verbosity 	3; Seed substitution matrix 	VTML80.out; Sensitivity 	5.7; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max results per query 	200; Previous max results per query; Split database 	0; Split mode 	2; Split memory limit 	0; Diagonal scoring 	1; Exact k-mer matching 	0; Mask residues 	1; Mask lower case residues 	0; Minimum diagonal score 	15; Spaced k-mers 	1; Spaced k-mer pattern; Local temporary path; Rescore mode 	0; Remove hits by seq. id. and coverage 	false; Sort results 	0; Global diagonal rescoring 	false; Mask profile 	1; Profile e-value threshold 	0.001; Use global sequence weighting 	false; Filter MSA 	1; Maximum seq. id. threshold 	0.9; Minimum seq. id. 	0; Minimum score per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Omit consensus 	false; Min codons",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587:74,log,log,74,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515936587,1,['log'],['log']
Testability,"The file used here is [DB.fasta](https://github.com/soedinglab/MMseqs2/blob/master/examples/DB.fasta) , I simply renamed to exp.fa as I was testing in a directory with other similarly named files.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461567909:140,test,testing,140,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461567909,1,['test'],['testing']
Testability,"The first two issues should be handled as of commit cbb542af98095210bad8399cda02b67487d0bdde.; The third issue is a bit trickier. here's why:; The sliced search workflow (searchslicedtargetprofile.sh) is where the available disk (regular tmp folder) is taken into account to determine the number of profiles to process (the information is passed to it from search). `--local-temp` is a parameter, which is relevant only in MPI mode. Assuming all MPI nodes have the same available disk in their `--local-tmp` (does this even hold?), then the way to take it into account is to set the disk limit in the sliced search workflow as the minimum between the regular tmp folder (on the master node) and the available disk space on the master's `--local-temp` times the number of MPI nodes. However, the number of MPI nodes is determined through quite a complicated logic in the Prefilter constructor, which is called from within the sliced search workflow **after** it calculates the disk space limit. An exit with error could be added from within Prefilter (asking to re-run the program with `--disk-space-limit` equal to local-size x Nnodes) but it is not very elegant as the run already started by then.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/192#issuecomment-631535791:857,log,logic,857,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/192#issuecomment-631535791,1,['log'],['logic']
Testability,The parameter `--max-seqs` was always available but there was a stopped mmseqs from printing out the parameter. The printout problem should be resolved now. . How do you benchmark the performance?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647:170,benchmark,benchmark,170,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/78#issuecomment-377788647,1,['benchmark'],['benchmark']
Testability,"The plass `mergereads` module would merge all pairs that can be merged and leave all unmerged `pairs` alone to be classified separately. If you don't want that, then you have to build some custom post processing logic on the result tsv flies.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/436#issuecomment-815864315:212,log,logic,212,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/436#issuecomment-815864315,1,['log'],['logic']
Testability,"The ppc64le build now only fails one regression test, the same as arm64 https://travis-ci.org/github/soedinglab/MMseqs2/jobs/688790571#L11062. > PROFILE (Time: 259s); TEST FAILED; BAD; Expected: 0.367398; Actual: 0.367396. Without this PR the ppc64le build fails 25 regression tests: https://travis-ci.org/github/soedinglab/MMseqs2/jobs/688479773#L10132",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630944351:48,test,test,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/309#issuecomment-630944351,3,"['TEST', 'test']","['TEST', 'test', 'tests']"
Testability,The problem should be solved by adding `-s 2`. There are two problems leading to this issues. (1) Linclust does not cluster this sequences because it finds a longer sequences containing your sequence which does not fulfill the sequence identity threshold. (2) The prefilters setting is not sensitive enough. It does not extract any k-mer from your sequence. This should not happen. I will try to find a reasonable work around for this. Thank you for reporting this issues!. `mmseqs cluster panproteome.db families_kmer-per-seq80_max-seqs300_2.db /tmp/test --kmer-per-seq 80 --max-seqs 300 --min-seq-id 0.8 -c 0.8 --threads 10 -s 2`,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401979992:551,test,test,551,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401979992,1,['test'],['test']
Testability,"The regression test finished without errors, however the binary could not be uploaded. Maybe its a problem with the PR. I merged the commit into the master. ; So MMseqs2 is one step closer to be a great taxonomy classification tool. Thanks a lot!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/197#issuecomment-487700932:15,test,test,15,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/197#issuecomment-487700932,1,['test'],['test']
Testability,The split logic also got a face lift so splitting manually should not be required anymore.; Please do update if you encounter problems.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/198#issuecomment-513161913:10,log,logic,10,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/198#issuecomment-513161913,1,['log'],['logic']
Testability,"The static binaries take about one hour to build (running the tests take some time).; GCC 9 would be completely sufficient to compile, we support (and check for) down to GCC 4.9 and clang 5.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771983647:62,test,tests,62,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771983647,1,['test'],['tests']
Testability,The tests will be compiled after calling the cmake && make. They do not behave like unit tests. ; We use them to debug certain parts of our code. How do you want to use them?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283910194:4,test,tests,4,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-283910194,2,['test'],['tests']
Testability,"The version of MMseqs2 is: MMseqs2 Version: 12.113e3. CD-HIT command is: ; `cd-hit -i all_protein_final_95_rep.fasta.1 -c 0.95 -aS 0.9 -d 200 -M 0 -T 40 -g 0 -l 30 -o all_protein_final_95_rep_95_1.fasta`. log of default linclust is; kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . kmermatcher /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/tmp/10916148350968526968/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.95 --kmer-per-seq 21 --spaced-kmer-mode 0 --kmer-per-seq-scale nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 1 -k 0 -c 0.9 --max-seq-len 65535 --hash-shift 67 --split-memory-limit 1T --include-only-extendable 0 --ignore-multi-kmer 0 --threads 100 --compressed 0 -v 3 . Database size: 773451991 type: Nucleotide. Generate k-mers list for 1 split; [=================================================================] 773.45M 1h 49m 32s 108ms. Adjusted k-mer length 18; Sort kmer 0h 0m 4s 610ms; Sort by rep. sequence 0h 0m 0s 325ms; Time for fill: 0h 0m 4s 175ms; Time for merging to pref: 0h 0m 0s 16ms; Time for processing: 2h 3m 42s 6ms; rescorediagonal /hwfssz1/ST_DIVERSITY/P18Z10200N0197_temp/USER/tanshangjin/01_gene_cat/protein_cat/all_protein_merge_95.db /hwfssz1/ST_DIVERSITY/P18Z10200N01",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153:205,log,log,205,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/365#issuecomment-713411153,1,['log'],['log']
Testability,Things todo: ; 1.) find XSD to single file CPP converter (maybe https://www.codesynthesis.com/products/xsd/); 2.) find BLAST XSD (maybe https://github.com/lindenb/xsd-sandbox/blob/master/schemas/bio/ncbi/blast.xsd); 3.) add converter `convertalis`,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-406567630:167,sandbox,sandbox,167,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-406567630,1,['sandbox'],['sandbox']
Testability,"This works great for my test case! Currently reclustering my larger dataset with the --cluster-reassign flag and hopeful that this will fix my problem. Thank you, marking this issue closed.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/276#issuecomment-587122737:24,test,test,24,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/276#issuecomment-587122737,1,['test'],['test']
Testability,Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (T,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2104,TEST,TEST,2104,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Overlap between sequences 	0; Sequence split mode 	1; Header split mode 	0; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Search iterations 	1; Start sensitivity 	4; Search steps 	1; Exhaustive search mode 	false; Filter results during exhaustive search	0; Strand selection 	1; LCA search mode 	false; Disk space limit 	0; MPI runner 	; Force restart with latest tmp 	false; Remove temporary files 	false. Accel. 2bLCA cannot be used with nucl-nucl taxonomy, using top-hit instead; Create directory tmp/14943602774421092333/tmp_hsp1; search testdb /home/kabru/datenbank/silvadb tmp/14943602774421092333/first tmp/14943602774421092333/tmp_hsp1 --alignment-mode 1 -e 1 --max-rejected 5 --max-accept 30 -s 2 --spaced-kmer-mode 1 --min-length 30 --max-length 32734 --orf-start-mode 1 . extractframes testdb tmp/14943602774421092333/tmp_hsp1/7440312624435503015/query_seqs --forward-frames 1 --reverse-frames 1 --create-lookup 0 --threads 72 --compressed 0 -v 3 . [> ] 1.35% 55 e[> ] 1.28% 52 e[> ] 1.10% 45 e[> ] 1.08% 44 e[> ] 1.23% 50 e[=> ] 1.55% 63 e[> ] 1.03% 42 e[> ] 1.13% 46 e[=> ] 1.80% 73 e[=> ] 1.88% 76 e[=> ] 2.80% 113 [=> ] 2.83% 114 [> ] 1.15% 47 e[> ] 1.38% 56 e[=> ] 3.05% 123 [=> ] 3.08% 124 [> ] 1.48% 60 e[=> ] 1.60% 65 e[==> ] 3.28% 132 [=> ] 1.78% 72 e[=> ] 1.58% 64 e[==> ] 3.50% 141 [==> ] 3.55% 143 [==> ] 3.65% 147 [==> ] 3.70% 149 [==> ] 3.83% 154 [==> ] 3.88% 156 [=> ] 1.68% 68 e[> ] 1.50% 61 e[==> ] 4.08% 164 [==> ] 4.10% 165 [=> ] 1.95% 79 e[> ] 1.33% 54 e[==> ] 4.33% 174 [=> ] 1.98% 80 e[==> ] 4.50% 181 [==> ] 4.55% 183 [==> ] 4.53% 182 [=> ] 1.65% 67 e[=> ] 2.33% 94 e[=> ] 2.23% 90 e[===> ] 4.78% 192 [===> ] 4.80% 193 [=> ] 2.45% 99 e[=> ] 2.50% 101 [=> ] 2.40% 97 e[=> ] 2.60% 105 [=> ] 2.58% 104 [===> ] 4.95% 199 [=> ] 2.65% 107 [===> ] 5.00% 201 [=> ] 2.70% 109 [===> ] 5.15% 207 [===> ] 5.18% 208 [===> ] 5.20% 209 [=> ] 2.68% 108 ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:7487,test,testdb,7487,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,1,['test'],['testdb']
Testability,"Trying with the `easy-taxonomy` workflow got me further, but after two rounds of prefiltering I ended up getting:. ```; Error: Lca died; Error: taxonomy died; Error: Search died; ```. Full MMseqs2 output logfile is [here](https://gist.github.com/sean-workman/1d8f5068894c76dfc021cd9db2f5a29a). The `gdb` output says:. ```; Core was generated by `mmseqs lca /home/sdwork/scratch/metagenomics/uniref_db/uniref90 ez_tmp/88137780'.; Program terminated with signal SIGBUS, Bus error.; #0 0x00002adfa621cbf4 in ?? () from /cvmfs/soft.computecanada.ca/gentoo/2023/x86-64-v3/usr/lib64/libc.so.6; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2081727903:204,log,logfile,204,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/838#issuecomment-2081727903,1,['log'],['logfile']
Testability,"Unexpected behavior 3:; I actually filter out sequences below a length of 20 and was reporting that just for completeness and because there was no prior warning. This is not a real problem in my case, though. Unexpected behavior 2:; Are you sure this is related to unexpected behavior 3?. This results in 3 rows:; ```; >0000_A; SEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETEST; >0001_A; SEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETEST; >0002_A; SEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETESTSEQUENCETEST; ```. And this in 9 rows:; ```; >0000_A; TESTSEQUENCE; >0001_A; TESTSEQUENCE; >0002_A; TESTSEQUENCE; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275116668:572,TEST,TESTSEQUENCE,572,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/12#issuecomment-275116668,3,['TEST'],['TESTSEQUENCE']
Testability,"Unfortunately no. Also, sorry for don't ask before. So I did this way: ; 1- Download the MMseqs2 Version: aa14ce37feb5eda7231af20259d8f2b659162236 ; 2- Compile as [described here](https://github.com/soedinglab/MMseqs2/#compile-from-source) but changing `cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..` by `cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=. ..` ; 3- Run all steps below:; > mmseqs createdb tcdb_query.nr.fa tcdb_query.nr.db 2>&1 >> log ; > mmseqs createdb all.fa all.db 2>&1 >> log; ; > mmseqs search tcdb_query.nr.db all.db tcdb_result.db tmp --threads 40 -s 7.5 --num-iterations 3 -a --max-seqs 17702628 -c 0.8 --add-self-matches 2>&1 >> log . 4- After crash:; > gdb --args mmseqs align tcdb_query.nr.db all.db tmp/1072319213335698383/pref_0 tmp/1072319213335698383/aln_0 --sub-mat blosum62.out -a 1 --alignment-mode 2 -e 0.1 --min-seq-id 0 --seq-id-mode 0 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 17702628 --comp-bias-corr 1 --realign 1 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 1 --db-load-mode 0 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 40 -v 3 . return:; ```; GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-114.el7; Copyright (C) 2013 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-redhat-linux-gnu"".; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>...; Reading symbols from /home/acpguedes/source/MMseqs2/build/bin/mmseqs...done.; (gdb) bt; No stack.; ```. Important note:; I send the STDOUT and STDERR to log file but there are one message that was printed on the screen and not on log file: ; `scoreIdentical has different length L: scoreIdentical has different leng",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510:467,log,log,467,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/134#issuecomment-455599510,3,['log'],['log']
Testability,"Using the HMMER3 hmms is probably a bad idea, they already include pseudocounts, which will negatively affect the sensitivity of MMseqs2. . I am currently evaluating all those tools again, but I don't have a clear recommendation yet. . If your first sequence in the alignment is not a real query, then your two options are to use `hhconsensus` + `msa2profile` or `hhconsensus` + `hhmake -nocontxt -diff 1000` (way slower) + `convertprofiledb`. `msa2profile` is the newer tool as not as well tested as `convertprofiledb`. The testing we already did indicates that it is working well though.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344565989:491,test,tested,491,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344565989,2,['test'],"['tested', 'testing']"
Testability,We did not change the format of the taxonomical database. It should be compatible. Also the error you show here happens while closing the database I think. Could you please provide the whole log? Does the error also occur with the newest version of mmseqs?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515720900:191,log,log,191,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/221#issuecomment-515720900,1,['log'],['log']
Testability,"We do not currently have a very easy way to limit memory. For the prefilter (main module for normal sequences searches) you can specify an appropriate `--split` value, that will then reduce the required memory to (I think there is an error in the user guide, have to double check, but this should be the correct formula):. ```; (7 byte * N * L) / #splits + 8 byte * 21^k; ```. We have two more very memory intense modules:`swapresults` and `kmermatcher`. These are very important for profile searches and linclust. Their splitting logic is however not exposed to the command line interface yet. The clustering module also can use a lot of memory, but if you stay with the default cascaded clustering that should not become an issue. A hack to limit how much memory `swapresults`, `kmermatcher` and `prefilter` will use, would be to manually edit `size_t Util::getTotalSystemMemory()` in `commons/Util.cpp`. We will discuss what we can do about this limiting memory issue internally and get back to you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065:531,log,logic,531,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065,1,['log'],['logic']
Testability,"We have a script to convert a substitution matrix into the right format for MMseqs2:; https://github.com/soedinglab/MMseqs2/blob/master/util/format_substitution_matrix.R. This should work in theory, but its not well tested. I think one issue is that the matrix needs to be invertible.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/637#issuecomment-1314984192:216,test,tested,216,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/637#issuecomment-1314984192,1,['test'],['tested']
Testability,"We have done some testing on finding very short proteins in our SpacePHARER manuscript (https://github.com/soedinglab/spacepharer, https://www.biorxiv.org/content/10.1101/2020.05.15.090266v1). The parameters we have found to work well are as follows:; `-k 6 --spaced-kmer-pattern 11011101 --seed-sub-mat VTML40.out --gap-open 16 --gap-extend 2 --min-length 9`. We'll eventually add a short fragment search mode to MMseqs2 itself in the form of setting presets or something like that.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728166556:18,test,testing,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728166556,1,['test'],['testing']
Testability,We integrated the MMseqs2 regression test into the git repository. See:; https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide#regression-test,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-539000656:37,test,test,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-539000656,2,['test'],['test']
Testability,We now use the VTML80 in all prefiltering calls and Blosum62 during the actual alignments.; This results in a small speedup and a slight sensitivity increase in our benchmarks. You can change both matrices with the `--sub-mat` and `--seed-sub-mat` parameters (pass along the path of one of the other matrices in the data subfolder).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483632213:165,benchmark,benchmarks,165,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/189#issuecomment-483632213,1,['benchmark'],['benchmarks']
Testability,We ran the following command:; ```; mmseqs easy-cluster orig_seqs.fasta 80ANI_cluster_nospace tmp --spaced-kmer-mode 0 --min-seq-id 0.8 --cov-mode 1 -c 0.8; ```. And it looks fine. Could you please post the whole log of the new run?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/858#issuecomment-2210375133:213,log,log,213,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/858#issuecomment-2210375133,1,['log'],['log']
Testability,"What exactly are you doing there? Is this a nucl-nucl or nucl-protein search? MMseqs2 will usually take characters until the first whitespace in the FASTA header as the identifier (if it does not recognize the format, it has a separate parsing logic for e.g. Uniprot format etc). I'd suggest you write a simple `awk` script that trims the suffix.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773916:244,log,logic,244,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773916,1,['log'],['logic']
Testability,"What info would you need?; I just heard from a colleague that you must know the DB, it's the CAZy internal database. We want to replace the blast search for the initial step of our curation with something faster, so that's why we testing mmseqs right now.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-592530791:230,test,testing,230,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/277#issuecomment-592530791,1,['test'],['testing']
Testability,"What parameters did you use (the log doesn't show the call to `mmseqs (easy-)cluster`)? What MMseqs2 version/commit is this (please compile from a git checkout if you compile from source, not by downloading the tar.gz/zip)?. It seems like you are using the single step clustering, that should be much slower than the cascaded clustering.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765448075:33,log,log,33,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/397#issuecomment-765448075,1,['log'],['log']
Testability,When I run your example I just end up with a single cluster. . ```; GCF_001249795.1_3002_8_6_genomic_02902 GCF_001249795.1_3002_8_6_genomic_02902; GCF_001249795.1_3002_8_6_genomic_02902 GCF_001259475.1_4370_2_2_genomic_00977; ```. Also the log you posted indicates that there is just one cluster. ```; Size of the sequence database: 1; Size of the alignment database: 1; Number of clusters: 1; ```. Could you please post your TSV output?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391775959:240,log,log,240,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-391775959,1,['log'],['log']
Testability,"When built with just sse2 or sse3, I'm seeing hangs. No cpu, disk, or network activity. Deadlock?. Built with -march=native, it seems to mostly work:. SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 23s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: fr",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:171,TEST,TEST,171,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,11,['TEST'],['TEST']
Testability,"With your patches and building with GCC + SSE3 only, all tests pass except for SLICEPROFILE:. SEARCH (Time: 16s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 20s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Exp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:57,test,tests,57,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,12,"['TEST', 'test']","['TEST', 'tests']"
Testability,"Yeah, trying to pre-compute the index for colabfold proved to be unrealistic. Thanks for the suggestion. My goal was to perform a 6-frame translation search using ColabFold as the target database. But profiles use too much memory (more distinct k-mers?) and the consensus sequences probably won't be sensitive enough (I need to benchmark). Unless I'm doing something wrong. Out of curiosity, is the profile-profile search documented somewhere? From what I understand it builds a profile by expanding the alignment in the first iteration and then uses this profile as query. But because ColabFold doesn't include a profile database, I wonder what are the target profiles in the subsequent iterations.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/627#issuecomment-1289892479:328,benchmark,benchmark,328,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/627#issuecomment-1289892479,1,['benchmark'],['benchmark']
Testability,"Yes, could you please upload the whole log as file. I need to see the exact runtimes of the prefilter and alignment in order to reason about it.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408828471:39,log,log,39,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408828471,1,['log'],['log']
Testability,"Yes, please test the most recent version on the master branch. We fixed a LCA bug. . We will release version 11 of mmseqs2 by the end of the week.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-579539048:12,test,test,12,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-579539048,1,['test'],['test']
Testability,"Yes, we have. It failed when prefiltering the `NEWDB.newSeqs` against `OLDDB.repSeq` step. We didn't modify anything but `--local-tmp` and a fresh `tmp` folder. We are updating a clustering result. Here is the [log](https://gist.github.com/genomewalker/5080c53898f03f388e3e8f58c132c800)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/198#issuecomment-488063001:211,log,log,211,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/198#issuecomment-488063001,1,['log'],['log']
Testability,"Yes, you are indeed right. I clarified with @martin-steinegger, he benchmarked the profile inclusion E-value and saw that the higher inclusion threshold was improving performance. The performance would get worse with inclusion E-values higher than 0.01 though. Your understanding in your second paragraph is right.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/675#issuecomment-1459443612:67,benchmark,benchmarked,67,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/675#issuecomment-1459443612,1,['benchmark'],['benchmarked']
Testability,"You can also run GDB non-interactively (if thats the issue):; ```; COMMAND='mmseqs addtaxonomy ""data/databases/gtdb"" ""data/04_taxgenes/contigs_tax/latest/result_aln_swapped_sum"" ""data/04_taxgenes/contigs_tax/latest/result_aln_swapped_sum_tax"" --tax-lineage 0 --lca-ranks species,genus,family,order,class,phylum,superkingdom --pick-id-from 1 --compressed 0 --threads 48 -v 3'; gdb -batch -ex ""run"" -ex ""bt"" --args ${COMMAND} 2>&1 > output.log; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-832082425:438,log,log,438,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/447#issuecomment-832082425,1,['log'],['log']
Testability,You can download the precompiled static binary that contains the fix (and latest git changes) at https://mmseqs.com/latest in about an hour when all tests pass through successfully.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/586#issuecomment-1208964068:149,test,tests,149,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/586#issuecomment-1208964068,1,['test'],['tests']
Testability,"You can use https://gist.github.com to post the log. . Alternatively, the call to MMseqs2 alone would already help with diagnosing the issue.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/213#issuecomment-506278783:48,log,log,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/213#issuecomment-506278783,1,['log'],['log']
Testability,You could try to compare it with the single step clustering `--single-step-clustering`. But the regular Linclust + cascaded clustering workflow is much faster. ; For benchmarking you could do this two things: ; (1) Just hardcode your sensitivities levels in `src/workflows/Cluster.cpp` line 195 for now.; (2) Remove the linclust call in `data/cascaded_clustering.sh`. But we might add this feature the next days.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/409#issuecomment-775057492:166,benchmark,benchmarking,166,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/409#issuecomment-775057492,1,['benchmark'],['benchmarking']
Testability,You have to supply a sequence database (e.g. `test/query/queryDB`) for the first parameter of the `taxonomy`. That sentence is also not very precise. You cannot use `taxonomyreport` directly with a search result. Either you use the `taxonomy` workflow or one of the the `lca` approach I mentioned if you are sure that you want to include every single homologous hit found into the taxonomic label (usually not a good idea).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771853116:46,test,test,46,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771853116,1,['test'],['test']
Testability,You mean a whole profile database right? How many entries are contained in that database?. You should be able to follow the same advice as for the Pfam database:; https://github.com/soedinglab/MMseqs2/wiki#how-to-create-a-target-profile-database-from-pfam. `-k 5` will trade of a bit of sensitivity for much smaller memory requirements. You can index the profile database for faster repeated searches. This should scale well for a couple hundred thousand profiles. For searches against millions of profiles we will hopefully have a different solution soon. There is still some benchmarking to do before its ready for prime time.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458974265:577,benchmark,benchmarking,577,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-458974265,1,['benchmark'],['benchmarking']
Testability,"Your initial idea is sound. The only problem is that `extractalignedregion` does not really support it since it was built for one very specific purpose and should be generalized. I started working on that though I don't quite have time to finish it up. I have an idea for a hack though:; ```; mmseqs prefixid aln aln.tsv --tsv; awk '{ $1 = NR++; print $0; }' aln.tsv > aln_new.tsv; mmseqs tsv2db aln_new.tsv aln_new --output-dbtype 5; mmseqs extractalignedregion query target aln_new target_new --threads 1; awk '{ print $2; }' aln.tsv > target_ids.tsv; mmseqs createsubdb target_ids.tsv target_h target_new_h; sort -k2,2 target_new_h.index | awk '{ $1 = NR++; print $0; }' > target_new_h.index_new; mv -f target_new_h.index_new target_new_h.index; mmseqs cluster target_new clu tmp; ```; I wrote this down without testing, but this should create a valid domain sequence database from the alignment result. If you are interested in actually fixing the `extractalignedregion` module in the MMseqs2 codebase then I could also try guiding you through that.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499599504:815,test,testing,815,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499599504,1,['test'],['testing']
Testability,[mmseqs.log](https://github.com/soedinglab/MMseqs2/files/2240955/mmseqs.log),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408835507:8,log,log,8,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/107#issuecomment-408835507,2,['log'],['log']
Testability,"[prot.txt](https://github.com/soedinglab/MMseqs2/files/1844193/prot.txt). here is one smaller version with 10,000 sequences, i tested , same problem.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/76#issuecomment-375857330:127,test,tested,127,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/76#issuecomment-375857330,1,['test'],['tested']
Testability,"`--allow-deletion` is still quite experimental and not well tested. For this use case, I would recommend you to create unaligned FASTA clusters with `createseqfiledb` and then align those with an established MSA aligner (such as ClustalO). The `apply` module might help in calling the aligner on each cluster. This is basically the workflow for creating the Uniclust30 alignments that are then turned into HMM profiles for usage in HH-suite. `result2msa` should be used for its center-star alignments based on a representative sequence.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/167#issuecomment-465147059:60,test,tested,60,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/167#issuecomment-465147059,1,['test'],['tested']
Testability,"`-s 1` is usually not that useful. We just published a benchmark of the profile search with the MMseqs2 Webserver:; https://academic.oup.com/bioinformatics/advance-article/doi/10.1093/bioinformatics/bty1057/5280135. Around `-s 6` would be the preferred sensitivity level, though that might have too steep memory requirements for 1.2M profiles. We will have a different kind of profile search soon with different trade-offs for larger databases.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-459396451:55,benchmark,benchmark,55,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/156#issuecomment-459396451,1,['benchmark'],['benchmark']
Testability,"`Could not allocate foundDiagonals memory in QueryMatcher` is the only error message that I received. . I was running this in a `snakemake` pipeline, which tried the run with progressively more memory (240, 480, 720 GB), and each time, I got the error: `Could not allocate foundDiagonals memory in QueryMatcher`, and the log file looked the same (less dots at the end of the log file when less memory was used)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452249730:321,log,log,321,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452249730,2,['log'],['log']
Testability,"abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/updatedClust -> /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db; ```. ...and the symlink doesn't point to a file, since my original cluster database was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.9; ```.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1173,test,tests,1173,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,1,['test'],['tests']
Testability,al: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FIL,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1978,TEST,TEST,1978,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"alse; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo cou",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:2017,test,test,2017,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,2,['test'],['test']
Testability,"an optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short projects always lean heavily on the distro. As for bugs, you can always strongly suggest that bug reports and issues be filed against your own project-compiled binaries and test against those binaries first when tracking bugs.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1239,test,test,1239,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,2,['test'],['test']
Testability,art 0 to 246; Target db start 0 to 10000. 736 k-mers per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3. Init data structures...; Compute score only.; Using 32 threads.; Calculation of Smith-Waterman alignments.; Time for merging files: 0 h 0 m 0 s. All sequences processed. 6287 alignments calculated.; 6203 sequence pairs passed the thresholds (0.986639 of overall calculated).; 25.2154 hits per que,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4733,test,test,4733,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"cy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Filter column 	1; Column to take 	-1; Filter regex 	^.*$; Positive filter 	true; Filter file 	/tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy; Beats first 	false; Mapping file 	; Threads 	36; Verbosity 	3; trim the results to one column	false; Extract n lines 	0; Numerical comparison operator 	; Numerical comparison value 	0; Sort entries 	0; Include identical Seq. Id. 	false; join to DB 	; Swap fields of search results 	; Replace transitively 	. Filtering with a filter files.; ...Time for merging files: 0 h 0 m 0 s; Rescore diagonals.; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 --rescore-mode 1 --sub-mat blosum62.out --filter-hits -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diago",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:8558,test,test,8558,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"d: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 0s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 9s)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:2315,TEST,TEST,2315,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"debug back trace:. >gdb -r --args mmseqs createdb dpann_cpr.faa dpann_cpr_mmseq_db/; GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1; Copyright (C) 2016 Free Software Foundation, Inc.; License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>; This is free software: you are free to change and redistribute it.; There is NO WARRANTY, to the extent permitted by law. Type ""show copying""; and ""show warranty"" for details.; This GDB was configured as ""x86_64-linux-gnu"".; Type ""show configuration"" for configuration details.; For bug reporting instructions, please see:; <http://www.gnu.org/software/gdb/bugs/>.; Find the GDB manual and other documentation resources online at:; <http://www.gnu.org/software/gdb/documentation/>.; For help, type ""help"".; Type ""apropos word"" to search for commands related to ""word""...; Reading symbols from mmseqs...expanding to full symbols...done.; (gdb) r; Starting program: /home/disque2To/home/romain/logiciel/MMseqs2/build/bin/mmseqs createdb dpann_cpr.faa dpann_cpr_mmseq_db/; [Thread debugging using libthread_db enabled]; Using host libthread_db library ""/lib/x86_64-linux-gnu/libthread_db.so.1"".; Program call:; createdb dpann_cpr.faa dpann_cpr_mmseq_db/ . MMseqs Version: 	a951e4dede7e9b52e514119d083ff4ca80ad1565; Max. sequence length 	65535; Split Seq. by len 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. ...................................................................................................	1 Mio. sequences processed; ...................................................................................................	2 Mio. sequences processed; .........................................................Time for merging files: 0h 0m 1s 184ms. Program received signal SIGSEGV, Segmentation fault.; __GI___fileno (fp=0x0) at fileno.c:35; 35	fileno.c: Aucun fichier ou dossier de ce type.; (gdb) bt; #0 __GI___fileno (fp=0x0) at fileno.c:35; #1 0x00000000005",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/141#issuecomment-445211494:953,log,logiciel,953,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/141#issuecomment-445211494,1,['log'],['logiciel']
Testability,"e 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Cover",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:1811,test,test,1811,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"ed: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 5s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 1s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 7s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0856974; Actual: 0.0856974. FILTERTAXSEQDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0,1,2 0,1,2,3,4,5 3,4,5 ; Actual: 0,1,2 0,1,2,3,4,5 3,4,5 . NOMPI_TARGET_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 500; Actual: 500. NOMPI_SLICE_TECH (Time: 13s); TEST SUCCESS; GOOD; Expected: 512,256,128,64,32; Actual: 512,256,128,64,32. In what little output didn't scroll away, I see a couple of messag",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:2433,TEST,TEST,2433,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,"eems to mostly work:. SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 23s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 37s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expec",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1117,TEST,TEST,1117,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,ent database...; done.; Clustering mode: Set Cover; ...................................................................................................	1 Mio. sequences processed; .............; Sort entries. Find missing connections. Found 1770113 new connections. Reconstruct initial order.; ...................................................................................................	1 Mio. sequences processed; .............; Add missing connections.; ...................................................................................................	1 Mio. sequences processed; .............; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 1132486; Size of the alignment database: 1132486; Number of clusters: 32435; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Filter colu,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:7436,test,test,7436,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"ent mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	2147483647; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id.	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Init data structures...; Compute score, coverage and sequence id.; Using 10 threads.; Query database type: Aminoacid; Target database type: Aminoacid; Calculation of Smith-Waterman alignments.; ...Time for merging files: 0 h 0 m 0 s. All sequences processed. 46389 alignments calculated.; 39919 sequence pairs passed the thresholds (0.860527 of overall calculated).; 1.23074 hits per query sequence.; Time for alignments calculation: 0 h 0 m 1s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/aln /tmp/test/9465698490903227639/linclust/831108043510341376/clust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...; Sort entries. Find missing connections. Found 7484 new connections. Reconstruct initial order.; ...; Add missing connections.; ...; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 32435; Size of the alignment database: 32435; Number of clusters: 27782; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/clu /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust /tmp/test/946569849",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:11873,test,test,11873,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,3,['test'],['test']
Testability,er mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...................................................................................................	1 Mio. sequences processed; .............; Sort entries. Find missing connections. Found 1770113 new connections. Reconstruct initial order.; ...................................................................................................	1 Mio. sequences processed; .............; Add missing connections.; ...................................................................................................	1 Mio. sequences processed; .............; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 1132486; Size of the alignment database: 1132486; Number of clusters: 32435; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/order_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter1 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 --filter-file ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:7346,test,test,7346,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"es_db ../tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/cluster_updated/clusters_db.0 /ebio/abt3_scratch/nyoungblut/cluster_update; clusterupdate --min-seq-id 0.9 -c 0.8 ../tests/output_n10/genes/cluster/genes_db /ebio/abt3_scratch/nyoungblut/user_genes/genes_db ../tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/cluster_updated/genes_db /ebio/abt3_scratch/nyoungblut/cluster_updated/clusters_db.0 /ebio/abt3_scratch/nyoungblut/cluster_update. MMseqs Version: 	11.e1a1c; Seq. id. threshold 	0.9; Coverage threshold 	0.8. ===================================================; === Update the new sequences with the old keys ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/7316799743718053916/OLDDB.repSeq. Invalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index; 31mInvalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index. [... a lot of output ...]. 31mSize of data: 363542; mRequested offset: 412570; Requested offset: 399738; 31mRequested offset: 367758; Requested offs",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914:1340,test,tests,1340,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914,2,['test'],['tests']
Testability,est HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2/build-mpi; ```. Output of following `make`:; ```; Scanning dependencies of target microtar; [ 1%] Building C object lib/microtar/CMakeFile,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:2438,Test,Test,2438,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,2,['Test'],['Test']
Testability,false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Split DB 0; Split mode 2; Search mode 2; Diagonal Scoring 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --s,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1545,test,test,1545,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,filtering step 0 of 1. Index version: 774909490; KmerSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Copy 1650981 Entries (9905886 byte); Setup Sizes ; Read IndexTable ... Done; k-mer similarity threshold: 115; k-mer match probability: 0. qStarting prefiltering scores calculation (step 0 of 1); Query db start 0 to 246; Target db start 0 to 10000. 736 k-mers per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit fal,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4408,test,test,4408,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,finished testing,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/880#issuecomment-2319821146:9,test,testing,9,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/880#issuecomment-2319821146,1,['test'],['testing']
Testability,"fold_envdb_202108_db.idx.1 colabfold_envdb_202108_db.idx.2 colabfold_envdb_202108_db.idx.3 colabfold_envdb_202108_db.idx.4 colabfold_envdb_202108_db.idx.5 colabfold_envdb_202108_db.idx.6 colabfold_envdb_202108_db.idx.7 pdb70_220313.idx uniref30_2202_db.idx. how to reproduce ""ticket/pair"" error in local mmseqs msa server.; 1. follow the instructions in https://github.com/sokrypton/ColabFold/tree/main/MsaServer; The only difference in my process with that in the ColabFold instructions: I did not use vmtouch to keep the precomputed database index file within system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1025,log,log,1025,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,3,"['log', 'test']","['log', 'logging', 'test']"
Testability,"fold_envdb_202108_db.idx.3 colabfold_envdb_202108_db.idx.4 colabfold_envdb_202108_db.idx.5 colabfold_envdb_202108_db.idx.6 colabfold_envdb_202108_db.idx.7 pdb70_220313.idx uniref30_2202_db.idx. how to reproduce ""ticket/pair"" error in local mmseqs msa server.; 1. follow the instructions in https://github.com/sokrypton/ColabFold/tree/main/MsaServer; The only difference in my process with that in the ColabFold instructions: I did not use vmtouch to keep the precomputed database index file within system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; wh",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1127,log,logging,1127,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,1,['log'],['logging']
Testability,"g building against shared system libraries gives better modularity and a better end-user experience. The way that the Debian patch works is that on distros such as Debian (and Fedora and Gentoo) the system zstd library can optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short project",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1036,test,tested,1036,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,1,['test'],['tested']
Testability,"github.com>; Sent: Sunday, June 30, 2019 6:46:32 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). It would help if you could provide a log file. So I can see which module is slow. The database does not stay necessarily memory. The OS can reuse the memory. The memory just got memory mapped by mmseqs2 (depending on the --db-load-mode). —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOQNQW6KRHGR3W5473P5ESTPA5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODY4UNEA#issuecomment-507070096>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMYW6UIXY2PZFDTSZDP5ESTPANCNFSM4H333Q6Q>. createdb test_reads/S1E3-S3_assembled_kneaddata.fastq mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Max sequence length 	65535; Split seq. by length 	true; Database type 	0; Do not shuffle input database	true; Offset of numeric ids 	0; Compressed 	0; Verbosity 	3. Assuming DNA database, forcing parameter --dont-split-seq-by-len true; Converting sequences; [	1 Mio. sequences processed; 	2 Mio. sequences processed; 	3 Mio. sequences processed; 	4 Mio. sequences processed; 	5 Mio. sequences processed. Time for merging files: 0h 0m 4s 846ms; Time for merging files: 0h 0m 35s 669ms; Time for merging files: 0h 0m 1s 887ms; Time for processing: 0h 1m 53s 245ms; search mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB tmp --db-load-mode 3 --threads 2 --max-seqs 25 -s 1 -a -e 1e-5 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Add backtrace 	true; Alignment mo",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:1370,test,test-megan-out-,1370,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['test'],['test-megan-out-']
Testability,hey ! I am struggling using mmseqs map for the same issue. I tried what you @milot-mirdita suggested but apparently I am doing something wrong.; ```; mmseqs map queryDB resultDB tmp -e 10 --min-seq-id 0.1 . mmseqs filterdb resultDB bestResultDB --extract-lines 20 . mmseqs createsubdb bestResultDB queryDB queryDB_sub; rm -f -- queryDB_sub_h*; mmseqs createsubdb bestResultDB queryDB queryDB_sub_h. awk '{ print $1 }' bestResultDB.[0-9]* | sort -u > subset.list; mmseqs createsubdb subset.list queryDB queryDB_sub. mmseqs convert2fasta mmseqs convert2fasta queryDB_sub test.fasta. ```; In the fasta file I have 20 sequences but it is the same one repeated. ; Thanks a lot !,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/392#issuecomment-1693133548:569,test,test,569,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/392#issuecomment-1693133548,1,['test'],['test']
Testability,"hi @martin-steinegger. only for tests.... I would need the same filtering options, cascading clustering, and parseable outputs.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/22#issuecomment-369842506:32,test,tests,32,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/22#issuecomment-369842506,1,['test'],['tests']
Testability,"hreads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; ```; And then :; `mmseqs createtsv panproteome.db panproteome.db families_kmer-per-seq80_max-seqs300_2.db families_kmer-per-seq80_max-seqs300_2.tsv --first-seq-as-repr true`. ```; Program call:; panproteome.db panproteome.db families_kmer-per-seq80_max-seqs300_2.db families_kmer-per-seq80_max-seqs300_2.tsv --first-seq-as-repr true . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; first sequence as respresentative	true. Query file is panproteome.db; Data file is families_kmer-per-seq80_max-seqs300_2.db; Start writing file to families_kmer-per-seq80_max-seqs300_2.tsv; Done. ```; Then i obtain :. `grep ""GCF_002025345.1_ASM202534v1_genomic_04754"" families_kmer-per-seq80_max-seqs300_2.tsv`. ```; GCF_002025345.1_ASM202534v1_genomic_04754	GCF_002025345.1_ASM202534v1_genomic_04754; ```; But if i use MMseqs2 by remplacing /tmp/test by /tmp/clu and families_kmer-per-seq80_max-seqs300_2.db by panproteome.db_clu it produces the same result as you. `mmseqs cluster panproteome.db panproteome.db_clu /tmp/clu/ --kmer-per-seq 80 --max-seqs 300`. ```; Program call:; panproteome.db panproteome.db_clu /tmp/clu/ --kmer-per-seq 80 --max-seqs 300 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	4; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Coverage threshold 	0.8; Coverage Mode 	0; Compositional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	36; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Thresho",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:19774,test,test,19774,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"ign 0 --max-rejected 2147483647 --max-accept 2147483647 --add-self-matches 0 --db-load-mode 3 --pca 1 --pcb 1.5 --score-bias 0 --gap-open 11 --gap-extend 1 --threads 2 --compressed 0 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Compute score, coverage and sequence identity; Query database size: 12189231 type: Aminoacid; Target database size: 134985288 type: Aminoacid; Calculation of alignments; [] 3h 56m 20s 209ms; Time for merging files: 0h 0m 13s 891ms. 138555514 alignments calculated.; 54047267 sequence pairs passed the thresholds (0.390077 of overall calculated).; 4.434018 hits per query sequence.; Time for processing: 3h 56m 39s 222ms; offsetalignment mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB tmp/15531098257495296432/q_orfs /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx /home/dhwani/databases/mmseqsRefSeqCompleteDB.idx tmp/15531098257495296432/aln mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB --chain-alignments 0 --merge-query 1 --search-type 0 --threads 2 --compressed 0 --db-load-mode 3 -v 3 . Index version: 15; Generated by: 73ce3b88754987122b4fc5e69a721beeecd677d0; ScoreMatrix: VTML80.out; Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 1s 475ms; Writing results to: mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB; [] 5h 36m 42s 260ms. Time for merging files: 0h 0m 5s 864ms; Time for processing: 5h 37m 8s 744ms; convertalis mmseqs-test-megan-out-280619/mmseqs-S1E3-S3queryDB /home/dhwani/databases/mmseqsRefSeqCompleteDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3resultDB mmseqs-test-megan-out-280619/mmseqs-S1E3-S3-s1.m8 --db-load-mode 3 . MMseqs Version: 	73ce3b88754987122b4fc5e69a721beeecd677d0; Substitution matrix 	blosum62.out; Alignment format 	0; Format alignment output	query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits; Translation table 	1; Gap open cost 	11; Gap extension cost 	1; Databa",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485:7215,test,test-megan-out-,7215,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-508085485,1,['test'],['test-megan-out-']
Testability,"ile in question is a symlink:. ```; lrwxrwxrwx 1 nyoungblut abt3 82 Jul 23 19:44 /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/11607510948275416679/updatedClust -> /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db; ```. ...and the symlink doesn't point to a file, since my original cluster database was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /eb",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1086,test,tests,1086,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,1,['test'],['tests']
Testability,"ime for alignments calculation: 0 h 1 m 58s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/aln_step0 /tmp/test/9465698490903227639/clu_step0 --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ..; Sort entries. Find missing connections. Found 0 new connections. Reconstruct initial order.; ..; Add missing connections.; ..; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 27782; Size of the alignment database: 27782; Number of clusters: 22311; Program call:; panproteome.db /tmp/test/9465698490903227639/clu /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/clu_step0 . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; ```; And then :; `mmseqs createtsv panproteome.db panproteome.db families_kmer-per-seq80_max-seqs300_2.db families_kmer-per-seq80_max-seqs300_2.tsv --first-seq-as-repr true`. ```; Program call:; panproteome.db panproteome.db families_kmer-per-seq80_max-seqs300_2.db families_kmer-per-seq80_max-seqs300_2.tsv --first-seq-as-repr true . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; first sequence as respresentative	true. Query file is panproteome.db; Data file is families_kmer-per-seq80_max-seqs300_2.db; Start writing file to families_kmer-per-seq80_max-seqs300_2.tsv; Done. ```; Then i obtain :. `grep ""GCF_002025345.1_ASM202534v1_genomic_04754"" families_kmer-per-seq80_max-seqs300_2.tsv`. ```; G",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:18591,test,test,18591,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,3,['test'],['test']
Testability,"ime: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1516,TEST,TEST,1516,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,ing 1; Minimum Diagonal score 30; Spaced Kmer 1; Profile e-value threshold 0.001; Use global sequence weighting false; Maximum sequence identity threshold 0.9; Minimum seq. id. 0; Minimum score per column -20; Minimum coverage 0; Select n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Sensitivity 4; K-mer size 7; K-s,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1707,test,test,1707,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,ing works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP; -- Configuring done; -- Generating done; -- Build files have been written to: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2/build-mpi; ```. Output of following `make`:; ```; Scanning dependencies of target microtar; [ 1%] Building C object lib/microtar/CMakeFiles/microtar.dir/microtar.c.o; Linking C static library libmicrotar.a; [ 1%] Built target microtar; Scanning dependencies of target cacode; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lambda_calculator.cpp.o; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/lubksb.cpp.o; [ 2%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/ludcmp.cpp.o; [ 3%] Building CXX object lib/cacode/CMakeFiles/cacode.dir/nrutil.cpp.o; [ 3%] Built target cacode; Scanning dependencies of target alp; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_dynprogprob.cpp.o; [ 3%] Building CXX object lib/alp/CMakeFiles/alp.dir/njn_random.cpp.o; [ 4%] Bui,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:3010,Test,Test,3010,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,4,['Test'],['Test']
Testability,input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/aln /tmp/test/9465698490903227639/linclust/831108043510341376/clust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component	1000; Similarity type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...; Sort entries. Find missing connections. Found 7484 new connections. Reconstruct initial order.; ...; Add missing connections.; ...; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 32435; Size of the alignment database: 32435; Number of clusters: 27782; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/clu /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust /tmp/test/9465698490903227639/linclust/831108043510341376/clust . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; Program call:; /tmp/test/9465698490903227639/clu_redundancy panproteome.db /tmp/test/9465698490903227639/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/pref_step0 --sub-mat blosum62.out -s 1 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:12835,test,test,12835,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,3,['test'],['test']
Testability,ir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so; -- Looking for BZ2_bzCompressInit in /usr/lib64/libbz2.so - found; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB works; -- Found MPI_C: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI_CXX: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpicxx.so;/usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-10.3.0/mvapich2-2.3.6-ouywalrqjnakjlhjxgunwqssb3iongrc/lib/libmpi.so; -- Found MPI; -- Try OpenMP C flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:1778,Test,Test,1778,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,10,['Test'],['Test']
Testability,"ize 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	10; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio. sequences processed; .............; Time for fill: 0 h 0 m 2s; Done.; Sort kmer ... Done.; Time for sort: 0 h 0 m 7s; Sort by rep. sequence ... Done; Time for sort: 0 h 0 m 4s; Time for fill: 0 h 0 m 0s; Time for merging files: 0 h 0 m 0 s; Time for processing: 0 h 0 m 14s; Rescore diagonals.; Program call:; panproteome.db panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1 --rescore-mode 0 --sub-mat blosum62.out -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	0; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: panproteome.db; Target file: panproteome.db; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore1; ...................................................................................................	1 Mio. sequences processed; .............Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 3s; P",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:4931,test,test,4931,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,2,['test'],['test']
Testability,lect n most diverse seqs 100; Pseudo count a 1; Pseudo count b 1.5; First sequence as respresentative false; Number search iterations 1; Start sensitivity 4; Sensitivity step size 1; Use index true; Sets the MPI runner ; - '[' -z /home/zcx/Program/MMseqs/2.0 ']'; - '[' 4 -ne 4 ']'; - '[' '!' -f queryDB ']'; - '[' '!' -f targetDB ']'; - '[' -f resultDB ']'; - '[' '!' -d tmp ']'; - export OMP_PROC_BIND=TRUE; - OMP_PROC_BIND=TRUE; ++ dirname queryDB; - cd .; ++ basename queryDB; - QUERY_FILE=queryDB; ++ pwd; - ABS_QUERY=/home/zcx/Program/MMseqs/2.0/test/queryDB; - cd -; /home/zcx/Program/MMseqs/2.0/test; - cd tmp; ++ pwd; - TMP_PATH=/home/zcx/Program/MMseqs/2.0/test/tmp; - cd -; /home/zcx/Program/MMseqs/2.0/test; - INPUT=queryDB; - TARGET=targetDB; - SENS=4; - '[' 4 -le 4 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 ']'; - mmseqs prefilter queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4; Program call:; queryDB targetDB.sk7 /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out -k 7 --k-score 2147483647 --alph-size 21 --max-seq-len 32000 --max-seqs 300 --split 0 --split-mode 2 --search-mode 2 --comp-bias-corr 1 --diag-score 1 --min-diag-score 30 --spaced-kmer-mode 1 --threads 32 -v 3 -s 4 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Sensitivity 4; K-mer size 7; K-score 2147483647; Alphabet size 21; Max. sequence length 32000; Profile false; Nucleotide false; Max. results per query 300; Split DB 0; Split mode 2; Search mode 2; Compositional bias 1; Diagonal Scoring 1; Minimum Diagonal score 30;,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:1968,test,test,1968,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,ltDB \; tmp --alignment-mode 3 --mask 0 --comp-bias-corr 0; mmseqs convertalis macaqueDB hordeDB resultDB resultFinal.txt. Result:; [lvzvia@molgen3 test]$ grep 'cand_290' finalResult.txt |grep '51V'; cand_290.fasta OR51V25_horse 0.884 309 35 0 2 311 3 312 6.26E-185 567; cand_290.fasta OR51V1_chimp 0.768 310 71 0 2 312 10 320 1.76E-159 495; cand_290.fasta OR51V1_dog 0.761 309 73 0 1 310 1 310 1.92E-159 494; cand_290.fasta OR51V22_cow 0.763 307 72 0 4 311 5 312 5.68E-159 494; cand_290.fasta OR51V28_horse 0.756 306 74 0 3 309 4 310 2.69E-158 491; cand_290.fasta OR51V21_dog 0.761 309 73 0 1 309 1 310 1.47E-156 486; cand_290.fasta OR51V19P_dog 0.750 303 75 0 9 312 10 313 5.17E-155 482; cand_290.fasta OR51V1_orang 0.750 311 77 0 1 312 7 318 1.09E-153 479; cand_290.fasta OR51V1D_cow 0.740 310 80 0 1 311 2 312 3.54E-153 477; cand_290.fasta OR51V30P_horse 0.743 311 79 0 1 311 3 314 4.03E-153 476; cand_290.fasta OR51V23_orang 0.750 303 75 0 9 312 10 313 1.43E-152 475. Blast Results:; [lvzvia@molgen3 test]$ grep 'cand_290' ../macaque_test/blast/macaque_test_vs_all.txt|grep '51V'; cand_290.fasta OR51V1B_dog 90.00 310 31 0 3 312 4 313 0.0 562; cand_290.fasta OR51V1B_cow 88.10 311 37 0 2 312 3 313 0.0 558; cand_290.fasta OR51V25_horse 88.39 310 36 0 2 311 3 312 0.0 556; cand_290.fasta OR51V27_horse 80.81 297 57 0 15 311 18 314 2e-176 488; cand_290.fasta OR51V20_dog 74.84 306 77 0 7 312 8 313 4e-172 478; cand_290.fasta OR51V22_cow 76.92 299 69 0 13 311 14 312 1e-171 476; cand_290.fasta OR51V21_dog 76.14 306 73 0 4 309 5 310 1e-171 476; cand_290.fasta OR51V1_cow 77.23 303 69 0 9 311 10 312 2e-171 475; cand_290.fasta OR51V1_horse 77.89 303 67 0 9 311 10 312 3e-171 475; cand_290.fasta OR51V19P_dog 74.51 306 78 0 7 312 8 313 3e-169 470; cand_290.fasta OR51V18P_dog 74.51 306 78 0 7 312 8 313 3e-169 470; cand_290.fasta OR51V1_chimp 76.85 311 72 0 2 312 10 320 2e-167 466; cand_290.fasta OR51V1_orang 75.00 312 78 0 1 312 7 318 5e-167 465; cand_290.fasta OR51V22_dog 78.79 297 63 0 15 311 16,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678:1695,test,test,1695,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/357#issuecomment-707026678,1,['test'],['test']
Testability,"lumn 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Overlap between sequences 	0; Sequence split mode 	1; Header split mode 	0; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Search iterations 	1; Start sensitivity 	4; Search steps 	1; Exhaustive search mode 	false; Filter results during exhaustive search	0; Strand selection 	1; LCA search mode 	false; Disk space limit 	0; MPI runner 	; Force restart with latest tmp 	false; Remove temporary files 	false. Accel. 2bLCA cannot be used with nucl-nucl taxonomy, using top-hit instead; Create directory tmp/14943602774421092333/tmp_hsp1; search testdb /home/kabru/datenbank/silvadb tmp/14943602774421092333/first tmp/14943602774421092333/tmp_hsp1 --alignment-mode 1 -e 1 --max-rejected 5 --max-accept 30 -s 2 --spaced-kmer-mode 1 --min-length 30 --max-length 32734 --orf-start-mode 1 . extractframes testdb tmp/14943602774421092333/tmp_hsp1/7440312624435503015/query_seqs --forward-frames 1 --reverse-frames 1 --create-lookup 0 --threads 72 --compressed 0 -v 3 . [> ] 1.35% 55 e[> ] 1.28% 52 e[> ] 1.10% 45 e[> ] 1.08% 44 e[> ] 1.23% 50 e[=> ] 1.55% 63 e[> ] 1.03% 42 e[> ] 1.13% 46 e[=> ] 1.80% 73 e[=> ] 1.88% 76 e[=> ] 2.80% 113 [=> ] 2.83% 114 [> ] 1.15% 47 e[> ] 1.38% 56 e[=> ] 3.05% 123 [=> ] 3.08% 124 [> ] 1.48% 60 e[=> ] 1.60% 65 e[==> ] 3.28% 132 [=> ] 1.78% 72 e[=> ] 1.58% 64 e[==> ] 3.50% 141 [==> ] 3.55% 143 [==> ] 3.65% 147 [==> ] 3.70% 149 [==> ] 3.83% 154 [==> ] 3.88% 156 [=> ] 1.68% 68 e[> ] 1.50% 61 e[==> ] 4.08% 164 [==> ] 4.10% 165 [=> ] 1.95% 79 e[> ] 1.33% 54 e[==> ] 4.33% 174 [=> ] 1.98% 80 e[==> ] 4.50% 181 [==> ] 4.55% 183 [==> ] 4.53% 182 [=> ] 1.65% 67 e[=> ] 2.33% 9",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:7232,test,testdb,7232,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,1,['test'],['testdb']
Testability,me: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.0620599; Actual: 0.0620599. LINSEARCH_NUCLNUCL_SEARCH (Time: 35s); TEST SUCCESS; GOOD; Expected: 0.108522; Actual: 0.108522. EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 49s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 99s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (Time: 0s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. RBH (Time: 4s); TEST SUCCESS; GOOD; Expected: 10; Actual: 10. APPLY (Time: 2s); TEST SUCCESS; GOOD; Expected: 2570583; Actual: 2570583. INDEX_COMPATIBLE (Time: 6s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. FILTERDB (Time: 1s); TEST SUCCESS; GOOD; Expected: 0; Actual: 0. PREF_DB_LOAD_MODE (Time: 18s); TEST SUCC,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:2113,TEST,TEST,2113,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,merSize: 7; AlphabetSize: 21; Skip: 0; Split: 1; Type: 1; Spaced: 1; Copy 1650981 Entries (9905886 byte); Setup Sizes ; Read IndexTable ... Done; k-mer similarity threshold: 115; k-mer match probability: 0. qStarting prefiltering scores calculation (step 0 of 1); Query db start 0 to 246; Target db start 0 to 10000. 736 k-mers per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3. Init data structures,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4453,test,test,4453,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"n alnDB_reassign -a --threads 24 --comp-bias-corr 0 -e 9007199254740992; mmseqs convertalis protfamDB protfamDB alnDB_reassign aln_to_clustreps.m8; awk '$4<50{print}' aln_to_clustreps.m8 | sort -nk4,4 | head; ```. ```; 45656_3631 1137799_3214 0.950 20 1 0 79 98 423 442 2.607E-05 51; 45656_3631 217204_6534 0.809 21 4 0 79 99 695 715 1.266E-04 49; 45656_3631 2571105_3757 0.761 21 5 0 79 99 695 715 3.266E-04 48; 45656_3631 668_9026 0.761 21 5 0 79 99 714 734 1.155E-03 46; 489_1270 489_2691 1.000 21 0 0 1 21 1 21 3.857E-05 50; 33968_38 33968_2958 0.833 24 4 0 92 115 128 151 2.956E-04 48; 1550024_4392 1608583_1648 0.720 25 7 0 6 30 7 31 2.660E-04 48; 2527978_7844 2527978_861 0.920 25 2 0 1 25 1 25 1.690E-05 52; 45656_3631 191863_3100 0.880 25 3 0 75 99 282 306 8.777E-08 58; 1128665_3036 709876_1980 0.653 26 9 0 43 68 211 236 2.419E-03 45; ```. For example, in the first row of output above, the alignment length is 20 residues for a query sequence that is 100 residues long. My clustering parameters (-c 0.5 --cov-mode 2) should prevent a target sequence w/ alignment length <50 residues from joining this cluster, right?. On a related note, I noted this line in my clustering output log:; ```; Combining cluster mode 0 in combination with coverage mode 2 can produce wrong results.; Please use --cov-mode 2; ```; And found this comment from a previous issue:; `The cluster mode 0 (set cover) requires a bi-directional coverage criteria. If it is used with unidirectional coverage than it pick representative sequences that do not fulfill the clustering criteria anymore.`; `Originally posted by @martin-steinegger in` https://github.com/soedinglab/MMseqs2/issues/218#issuecomment-580978693. It seems like my choice of parameters is at fault, and that I would probably have clusters that more closely obey the criteria if I used cov-mode 0 and cluster-mode 0 (set cover, query AND target coverage), or cov-mode 1 and cluster-mode 2 (CD-hit-like, target coverage). Am I understanding correctly?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/585#issuecomment-1220229129:1613,log,log,1613,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/585#issuecomment-1220229129,1,['log'],['log']
Testability,"n noticed that process rank 0 with PID 0 on node haldane exited on signal 11 (Segmentation fault).; --------------------------------------------------------------------------. ```. It failed in the last step. ```; mpirun -np 4 cstranslate -i subset.MSA_ca3m.ffdata -o subset.MSA_cs219 -A /home/linuxbrew/anaconda3/data/cs219.lib -D /home/linuxbrew/anaconda3/data/context_data.lib -x 0.4 -c 4 -I ca3m; ```. The complete steps I used are described in this script. ```; #!/usr/bin/env bash. ## define files and parameters here; ## sequence file name like ""NAME.fa"" use only the base name NAME and the script will add the ""*.fa"" grob; BASE=""subset""; HH_CONTEXT_DATA=""/home/linuxbrew/anaconda3/data/context_data.lib""; HH_LIB=""/home/linuxbrew/anaconda3/data/cs219.lib""; THREADS=4; SENSITIVITY=7.5; IDENTITY=0; COVERAGE=0.8; EVALUE=0.00001. CLU_MODE=1. FILE=""${BASE}.fa""; MMSEQDB=""${BASE}DB""; MMSEQPREF=""${BASE}PREFILTER""; MMSEQALN=""${BASE}ALN""; MMSEQCLU=""${BASE}CLU""; MMSEQMSA=""${BASE}MSA""; FILELOG=""job.log"". echo '#:: CREATEDB' &>> ${FILELOG} ;; mmseqs createdb ${FILE} ${MMSEQDB} &>> ${FILELOG}. echo '#:: PREFILTER' &>> ${FILELOG} ;; mmseqs prefilter ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} -s ${SENSITIVITY} --threads ${THREADS} &>> ${FILELOG}. echo '#:: ALING' &>> ${FILELOG} ;; mmseqs align ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} ${MMSEQALN} -e ${EVALUE} \; --min-seq-id ${IDENTITY} -c ${COVERAGE} --threads ${THREADS} &>> ${FILELOG}; echo '#:: CLUST' &>> ${FILELOG} ;; mmseqs clust ${MMSEQDB} ${MMSEQALN} ${MMSEQCLU} --cluster-mode ${CLU_MODE} --threads ${THREADS} &> ${FILELOG} &>> ${FILELOG}. echo '#:: RESULT2MSA' &>> ${FILELOG} ;; mmseqs result2msa ${MMSEQDB} ${MMSEQDB} ${MMSEQCLU} ${MMSEQMSA} --compress --threads ${THREADS} &>> ${FILELOG}. echo '#:: CREATE LINKS' &>> ${FILELOG} ;; ln -s ${MMSEQDB}_h ${MMSEQMSA}_header.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}_h.index ${MMSEQMSA}_header.ffindex &>> ${FILELOG}; ln -s ${MMSEQDB} ${MMSEQMSA}_sequence.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}.index ${MMSE",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-492826081:1914,log,log,1914,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-492826081,1,['log'],['log']
Testability,"nscriptome as the query? For example taking into account the rather short contigs and splicing. I am not super familiar with transcriptomics datasets. Depending on the length of your queries you might want to turn of the early ORF filter (`--orf-filter 0`) as it can sometimes reject too many ORFs if the sequences are short. We also have a different project that deals with contamination: https://github.com/martin-steinegger/conterminator; Though that tool is currently only for all-vs-all genome contamination annotations. But Martin was planning to build a scan mode for one-vs-RefSeq/GenBank. > Second question: There are no genome assemblies form closely related species available. What are your thoughts regarding nucl-nucl search VS translated_nucl-prot search in this case?. Generally our nucl-nucl searching capabilities are less developed than than anything-prot. In the taxonomy assignment, nucl-nucl still uses top-hit taxon assignment instead of LCA. We haven't gotten around to thoroughly benchmark the nucl-nucl homology search and publish it (it does work quite well in the preliminary tests). And nucl-nucl homology search is limited to around ~80% sequence identity (which is usually more than enough for taxonomy though). Also building a taxonomy database for the NT is painful and the database might get extremely large (haven't tried it in a while though). I'd be quite interested in what you find out in your experiments with it though. We do plan to develop this part further. > Third questions: In case I do a translated_nucl-prot search how do I deal with the fact that my queries are both from Euk. and Prok. origin? I mean regarding translation table. Would you worry about this?. By default, we extract fragments from any codon to a stop codon and repeat the procedure. So the translation table matters a bit less (only affected by alternative stop codons). And since we only do local alignments, the over-extended start will get chopped off through the alignment anyway.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824083071:1082,benchmark,benchmark,1082,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/444#issuecomment-824083071,2,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"ocally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; while True:; error_count = 0; try:; res = requests.get(f'{host_url}/ticket/{ID}', timeout=6.02); except requests.exceptions.Timeout:; logger.warning(""Timeout while fetching status from MSA server. Retrying...""); continue; except Exception as e:; error_count += 1; logger.warning(f""Error while fetching result from MSA server. Retrying... ({error_count}/5)""); logger.warning(f""Error: {e}""); time.sleep(5); if error_count > 5:; raise; continue; break; try:; out = res.json(); except ValueError:; logger.error(f""Server didn't reply with json: {res.text}""); out = {""status"":""ERROR""}; return out. test_pairing(); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1881,log,logger,1881,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,5,['log'],['logger']
Testability,"otide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 15 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 10000 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 1 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 256 --compressed 0 -v 3 -s 2.0 . Index version: 16; Generated by: b1704ccc17f3814a1d640a83c6aa925bb0406809; ScoreMatrix: nucleotide.out; Query database size: 8000 type: Nucleotide; Estimated memory consumption: 18G; Target database size: 510984 type: Nucleotide; Process prefiltering step 1 of 1. k-mer similarity threshold: 0; Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 8000; Target db start 1 to 510984; ^C===============> ] 25.00% 2.00K eta 5m 1s . **Runs of Intel computer**; [kabru@bwp-cfdmain test]$ mmseqs taxonomy testdb ~/datenbank/silvadb testx_result tmp; taxonomy testdb /home/kabru/datenbank/silvadb testx_result tmp . MMseqs Version: 	b1704ccc17f3814a1d640a83c6aa925bb0406809; ORF filter 	1; ORF filter e-value 	100; ORF filter sensitivity 	2; LCA mode 	3; Taxonomy output mode 	0; Majority threshold 	0.5; Vote mode 	1; LCA ranks 	; Column with taxonomic lineage 	0; Compressed 	0; Threads 	72; Verbosity 	3; Taxon blacklist 	12908:unclassified sequences,28384:other sequences; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Add backtrace 	false; Alignment mode 	1; Alignment mode 	0; Allow wrapped scoring 	false; E-value threshold 	1; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Max reject 	5; Max accept 	30; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Realign hits 	false; Realign score bias 	-0.2; Realign ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:4454,test,test,4454,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,3,['test'],"['test', 'testdb']"
Testability,"ould I remove the whole github repo for a clean installation or is this compilation error something that was introduced in the commit?; See log below. ```; [ksahlin@desmond build]$ cmake -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_INSTALL_PREFIX=. ..; -- The CXX compiler identification is GNU 4.9.2; -- Check for working CXX compiler: /usr/bin/c++; -- Check for working CXX compiler: /usr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Source Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Project Directory: /galaxy/home/ksahlin/prefix/source/MMseqs2; -- Compiler is GNU ; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Using CPU native flags for SSE optimization: -march=native; -- Performing Test HAVE_MM_MALLOC; -- Performing Test HAVE_MM_MALLOC - Success; -- Performing Test HAVE_POSIX_MEMALIGN; -- Performing Test HAVE_POSIX_MEMALIGN - Success; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Failed; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Failed; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- Found SSE4.1 extensions, using flags: -march=native -msse4.1 -mfpmath=sse; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK - Success; -- ZLIB works; -- Found BZLIB; -- Performing Test HAVE_BZLIB_CHECK; -- Performing Test HAVE_BZLIB_CHECK - Success; -- BZLIB work",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145:926,Test,Test,926,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418140145,20,['Test'],['Test']
Testability,"ov/genomes/genbank/vertebrate_other/Neoceratodus_forsteri/latest_assembly_versions/GCA_016271365.1_neoFor_v3/GCA_016271365.1_neoFor_v3_genomic.fna.gz; 001396	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Grammatotria_lemairii/latest_assembly_versions/GCA_015107535.1_JDD8.scf/GCA_015107535.1_JDD8.scf_genomic.fna.gz; 001524	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Cetomimus_sp._NI1144/latest_assembly_versions/GCA_900660305.1_Opsanus_beta_assembly/GCA_900660305.1_Opsanus_beta_assembly_genomic.fna.gz; 001652	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Neolamprologus_hecqui/latest_assembly_versions/GCA_015103515.1_Bel14.scf/GCA_015103515.1_Bel14.scf_genomic.fna.gz; 001780	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Larimichthys_polyactis/latest_assembly_versions/GCA_010119295.1_ASM1011929v1/GCA_010119295.1_ASM1011929v1_genomic.fna.gz; 001908	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Periophthalmodon_schlosseri/latest_assembly_versions/GCA_000787095.1_PS.fa/GCA_000787095.1_PS.fa_genomic.fna.gz; 002036	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Tropheus_sp._brichardi_kipili_AB-2019/latest_assembly_versions/GCA_015110695.1_LGA5.scf/GCA_015110695.1_LGA5.scf_genomic.fna.gz; 002164	https://ftp.ncbi.nlm.nih.gov/genomes/genbank/vertebrate_other/Argyrosomus_japonicus/latest_assembly_versions/GCA_015710095.1_ASM1571009v1/GCA_015710095.1_ASM1571009v1_genomic.fna.gz; ```; You can put that list in a file and pass it to this script as an argument. The script is mostly to change the identifiers. ```; #!/usr/bin/env bash. while read -r fid link; do; wget -O - ""${link}"" |\; gzip -dc |\; awk -v""id=${fid}"" -F'>' 'NF > 1{printf "">E%06d_%06d"", id, i++} NF == 1'; done < ""${1}"" | mmseqs createdb stdin seqdb --dbtype 2; ```; I imagine for testing purposes making the database with just a couple files would work. I am using MMseqs2 with singularity so that might be a confounding factor.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/464#issuecomment-908476824:5057,test,testing,5057,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/464#issuecomment-908476824,1,['test'],['testing']
Testability,"p, it would take 4000 k-mers if I set --kmer-per-seq-scale 0.2? My sequences have an average length of about 20kbp, so theoretically, --kmer-per-seq-scale 0.2 might yield results similar to or better than --kmer-per-seq 2000? However, when I tested --kmer-per-seq-scale with values of 0.2, 1, and 20, I found that the number of clusters did not significantly differ from running Linclust with default parameter. The number of clusters was roughly twice as many as when using --kmer-per-seq 2000. As an example, I examined the largest cluster (containing 19,000 sequences) obtained using --kmer-per-seq 2000 . I inspected the length distribution of sequences within this cluster. The cumulative total sequences counts of the top four sequence lengths was 14,000, as follows [seq count, seq length]: ; 1274 4413.0, ; 2985 4411.0, ; 3397 5350.0, ; 7109 4409.0. ; I think most of these sequences should be highly similar, indicating that this clustering is relatively accurate.; I took some individual examples from this cluster to examine the results of --kmer-per-seq-scale and found that some nearly identical sequences (same length, 99% identity) were not clustered together when using --kmer-per-seq-scale. Meanwhile the largest cluster of --kmer-per-seq-scale 1 contains only 6341 seqs.; As a side note, I set the threshold to 95% identity and 85% coverage. . Overall, from my test results, I'm uncertain if there are issues with --kmer-per-seq-scale. Setting it doesn't seem to increase clustering sensitivity as expected. However, perhaps this is because I don't fully understand its principle, so I'm hoping to consult you on this matter. > There is not that much downside to increasing the kmer-per-seq to 2000. It will slow down linclust somewhat, but for only 2M entries it shouldn't really matter.; > ; > You might want to use `--kmer-per-seq-scale` though. This parameter adds additional k-mers linearly based on the sequence length. By default, this is set to 0.2 for nucleotide sequences.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/831#issuecomment-2033788917:1475,test,test,1475,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/831#issuecomment-2033788917,1,['test'],['test']
Testability,"p/9700814981231218113/search_tmp/10627605686170015473/search/input_2 -v 3 . Time for processing: 0h 0m 0s 0ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/search/aln_merge -v 3 . Time for processing: 0h 0m 0s 11ms; offsetalignment tmp/9700814981231218113/query tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa /d/Databases/Kegg/sram/mmseqs/kegg /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/search_tmp/10627605686170015473/aln tmp/9700814981231218113/result --chain-alignments 0 --merge-query 1 --search-type 0 --threads 40 --compressed 0 --db-load-mode 0 -v 3 . Computing ORF lookup; Computing contig offsets; Computing contig lookup; Time for contig lookup: 0h 0m 0s 93ms; Writing results to: tmp/9700814981231218113/result; [=================================================================] 516.30K 0s 162ms. Time for merging to result: 0h 0m 0s 158ms; Time for processing: 0h 0m 1s 659ms; Remove temporary files; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/q_orfs_aa . Time for processing: 0h 0m 0s 45ms; rmdb tmp/9700814981231218113/search_tmp/10627605686170015473/t_orfs_aa . Time for processing: 0h 0m 0s 0ms; convertalis tmp/9700814981231218113/query /d/Databases/Kegg/sram/mmseqs/kegg tmp/9700814981231218113/result test.m8 --sub-mat nucl:nucleotide.out,aa:blosum62.out --format-mode 0 --format-output query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits --translation-table 1 --gap-open 11 --gap-extend 1 --db-output 0 --db-load-mode 0 --search-type 0 --threads 40 --compressed 0 -v 3 . [=================================================================] 516.30K 0s 84ms; Time for merging to test.m8: 0h 0m 0s 181ms; Time for processing: 0h 0m 2s 227ms; Removing temporary files; rmdb tmp/9700814981231218113/result . Time for processing: 0h 0m 0s 8ms; rmdb tmp/9700814981231218113/query . Time for processing: 0h 0m 0s 38ms; rmdb tmp/9700814981231218113/query_h . Time for processing: 0h 0m 0s 3ms",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491:17013,test,test,17013,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/231#issuecomment-535253491,2,['test'],['test']
Testability,"pected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 20s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Exp",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1124,TEST,TEST,1124,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,pening alignment database...; done.; Clustering mode: Set Cover; ...; Sort entries. Find missing connections. Found 7484 new connections. Reconstruct initial order.; ...; Add missing connections.; ...; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 32435; Size of the alignment database: 32435; Number of clusters: 27782; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/clu /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust /tmp/test/9465698490903227639/linclust/831108043510341376/clust . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; Program call:; /tmp/test/9465698490903227639/clu_redundancy panproteome.db /tmp/test/9465698490903227639/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/pref_step0 --sub-mat blosum62.out -s 1 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 0 --diag-score 0 --exact-kmer-matching 0 --mask 1 --min-ungapped-score 0 --spaced-kmer-mode 1 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset result 	0; Split DB 	0; Split mode 	2; Split Memory Limit 	0; Covera,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:13332,test,test,13332,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"per column 	-20; Minimum coverage 	0; Select N most diverse seqs 	1000; Min codons in orf 	30; Max codons in length 	32734; Max orf gaps 	2147483647; Contig start mode 	2; Contig end mode 	2; Orf start mode 	1; Forward frames 	1,2,3; Reverse frames 	1,2,3; Translation table 	1; Translate orf 	0; Use all table starts 	false; Offset of numeric ids 	0; Create lookup 	0; Add orf stop 	false; Overlap between sequences 	0; Sequence split mode 	1; Header split mode 	0; Chain overlapping alignments 	0; Merge query 	1; Search type 	0; Search iterations 	1; Start sensitivity 	4; Search steps 	1; Exhaustive search mode 	false; Filter results during exhaustive search	0; Strand selection 	1; LCA search mode 	false; Disk space limit 	0; MPI runner 	; Force restart with latest tmp 	false; Remove temporary files 	false. Accel. 2bLCA cannot be used with nucl-nucl taxonomy, using top-hit instead; search /data/ct/test/testdb /data/ct/datenbank/silva_mmseqs/silva /data/ct/tmp/17728638439372299279/first /data/ct/tmp/17728638439372299279/tmp_hsp1 --alignment-mode 1 -e 1 --max-rejected 5 --max-accept 30 -s 2 --spaced-kmer-mode 1 --min-length 30 --max-length 32734 --orf-start-mode 1 . prefilter /data/ct/tmp/17728638439372299279/tmp_hsp1/7295210961924303337/query_seqs_split /data/ct/datenbank/silva_mmseqs/silva.idx /data/ct/tmp/17728638439372299279/tmp_hsp1/7295210961924303337/search/pref_0 --sub-mat nucl:nucleotide.out,aa:blosum62.out --seed-sub-mat nucl:nucleotide.out,aa:VTML80.out -k 15 --k-score 2147483647 --alph-size nucl:5,aa:21 --max-seq-len 10000 --max-seqs 300 --split 0 --split-mode 2 --split-memory-limit 0 -c 0 --cov-mode 0 --comp-bias-corr 1 --diag-score 1 --exact-kmer-matching 1 --mask 1 --mask-lower-case 0 --min-ungapped-score 15 --add-self-matches 0 --spaced-kmer-mode 1 --db-load-mode 0 --pca 1 --pcb 1.5 --threads 256 --compressed 0 -v 3 -s 2.0 . Index version: 16; Generated by: b1704ccc17f3814a1d640a83c6aa925bb0406809; ScoreMatrix: nucleotide.out; Query database size: 8000 typ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129:2995,test,test,2995,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-823834129,2,['test'],"['test', 'testdb']"
Testability,"perf is not available on the high mem node on which I'm running the real workload, but is oddly available on the login node. Would that output be helpful?. ```; + 51.95% 32.34% mmseqs_perf libc-2.17.so [.] __memcpy_ssse3_back; + 45.94% 29.54% mmseqs_perf mmseqs [.] QueryMatcher::match; + 35.99% 35.99% mmseqs_perf [unknown] [k] 0xffffffffa55bb7c0; 0.63% 0.58% mmseqs_perf mmseqs [.] KmerGenerator::calculateArrayProduct; + 0.56% 0.56% mmseqs_perf mmseqs [.] memcpy@plt; 0.22% 0.22% mmseqs_perf ld-2.17.so [.] do_lookup_x; 0.20% 0.20% mmseqs_perf libc-2.17.so [.] __memset_sse2; 0.20% 0.00% mmseqs_perf [unknown] [.] 0x0000000000000030; 0.15% 0.00% mmseqs_perf [unknown] [.] 0000000000000000; 0.14% 0.14% mmseqs_perf libc-2.17.so [.] _IO_file_underflow@@GLIBC_2.2.5; 0.13% 0.13% mmseqs_perf ld-2.17.so [.] _dl_lookup_symbol_x; 0.13% 0.00% mmseqs_perf ld-2.17.so [.] _dl_sysdep_start; 0.13% 0.00% mmseqs_perf ld-2.17.so [.] dl_main; 0.13% 0.00% mmseqs_perf ld-2.17.so [.] _dl_relocate_object; 0.06% 0.06% mmseqs_perf [unknown] [k] 0xffffffffa55c6280; ```. [perf.data.txt](https://github.com/soedinglab/MMseqs2/files/10458945/perf.data.txt). I will see if I can get perf on the real node if needed.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397300351:113,log,login,113,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/658#issuecomment-1397300351,1,['log'],['login']
Testability,"positional bias 	1; Diagonal Scoring 	1; Exact k-mer matching 	0; Mask Residues 	1; Minimum Diagonal score 	15; Include identical Seq. Id. 	false; Spaced Kmer 	1; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Cluster mode 	0; Max depth connected component 	1000; Similarity type 	2; Single step clustering 	true; Cascaded clustering steps 	3; Remove Temporary Files 	false; Sets the MPI runner 	; Kmer per sequence 	80; Shift hash 	5; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false. Tmp /tmp/test folder does not exist or is not a directory.; Created dir /tmp/test; Set cluster settings automatic to s=1; Set cluster mode SET COVER.; Set cluster iterations to 1; Program call:; panproteome.db /tmp/test/9465698490903227639/clu_redundancy /tmp/test/9465698490903227639/linclust --cluster-mode 0 -v 3 --max-iterations 1000 --similarity-type 2 --threads 10 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --alph-size 13 --kmer-per-seq 80 --mask 0 -k 0 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --rescore-mode 0 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Cluster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. res",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:1879,test,test,1879,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"ram call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2 /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 --rescore-mode 1 --sub-mat blosum62.out --filter-hits -c 0.8 -e 0.001 --cov-mode 0 --min-seq-id 0.8 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Rescore mode 	1; Sub Matrix 	blosum62.out; Remove hits by seq.id. and coverage 	true; In substitution scoring mode, performs global alignment along the diagonal	false; Coverage threshold 	0.8; E-value threshold 	0.001; Coverage Mode 	0; Seq. Id Threshold 	0.8; Include identical Seq. Id. 	false; Threads 	10; Verbosity 	3. Query file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Target file: /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy; Prefilter database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_filter2; Result database: /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2; ...Done.; Time for merging files: 0 h 0 m 0 s; Time for diagonal calculation: 0 h 0 m 0s; Program call:; /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/input_step_redundancy /tmp/test/9465698490903227639/linclust/831108043510341376/pref_rescore2 /tmp/test/9465698490903227639/linclust/831108043510341376/aln --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 2147483647 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshol",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:9866,test,test,9866,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,"read for database data file=mmseqstest_nucl.fasta_QDB_h, database index=; ```. All the previous steps seem to work correctly (createdb, createindex, search) and have contents inside their files. For example, running head on the _QDB_h and _TDB_h files return the below result (both _h files are identical since my query is the nucleotide version of the prot sequence). ```; evm.model.utg902.1.8.5abb479e; evm.model.utg902.1.9.5abb479e; evm.model.utg902.1.10.5abb479e; evm.model.utg1004.80; evm.model.utg8847.1_evm.model.utg8847.2.3.5abb479e; evm.model.utg8847.1_evm.model.utg8847.2; evm.model.utg8847.1_evm.model.utg8847.2.5.5abb479e; evm.model.utg1937.4; evm.model.utg12562.19; ```. Head of the mmseqstest_nucl.fasta_QDB_h_index file == . ```; 1 0 32; 2 32 32; 3 64 33; 4 97 23; 5 120 53; 6 173 42; 7 215 53; 8 268 22; 9 290 24; ```. The _SDB file has this as its head. ```; 2 585 0.986 1.536E-193 1248 2085 1044 0 279 281; 1 514 0.877 2.516E-168 1248 2085 1044 0 280 282; 3 497 0.852 1.632E-162 1248 2085 1044 0 280 282; 7 365 1.000 2.704E-120 1075 1579 507 0 168 170; 6 316 0.883 2.496E-103 1075 1579 507 0 170 172; 5 306 0.857 1.240E-99 1075 1579 507 0 170 172; 3 591 0.993 2.689E-197 1081 1921 843 0 280 282; 1 520 0.886 7.407E-172 1081 1921 843 0 280 282; 2 493 0.845 2.708E-162 1081 1921 843 0 279 281; 1 591 0.993 2.689E-197 1081 1921 843 0 280 282; ```. The reason I was performing this test was to see how nucleotide -> protein searches worked and to see if the little wrapper script I made to automate MMS2 searches needed any modifications. I figured I'd try using the protein DB as both query and target which resulted in search and convertalis working perfectly. Thus, I think the issue me and @CHEN-Zhihan are having is occurring when performing a nucleotide -> protein search (based off his query file being named ""read.fasta"" I expect that it is a nucleotide sequence) and seems to be limited to the convertalis step since search looks fine to me. Does this sound right to you?. Zac.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-377736994:2828,test,test,2828,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/64#issuecomment-377736994,1,['test'],['test']
Testability,rs per position.; 448 DB matches per sequence.; 553 Double diagonal matches per sequence.; 0 Overflows .; 25 sequences passed prefiltering per query sequence.; Median result list size: 21; 5 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 2 m 8s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 2 m 22s; - checkReturnCode 'Prefilter died'; - '[' 0 -ne 0 ']'; - notExists /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4; - '[' '!' -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 ']'; - mmseqs alignment queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3. Init data structures...; Compute score only.; Using 32 threads.; Calculation of Smith-Waterman alignments.; Time for merging files: 0 h 0 m 0 s. All sequences processed. 6287 alignments calculated.; 6203 sequence pairs passed the thresholds (0.986639 of overall calculated).; 25.2154 hits per query sequence.; Time for alignments calculation: 0 ,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:4778,test,test,4778,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,1,['test'],['test']
Testability,"s ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/7316799743718053916/OLDDB.repSeq. Invalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index; 31mInvalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index. [... a lot of output ...]. 31mSize of data: 363542; mRequested offset: 412570; Requested offset: 399738; 31mRequested offset: 367758; Requested offset: 408364; 31mRequested offset: 386682; 39mRequested offset: 393723; mRequested offset: 403458; Requested offset: 381782; 39mRequested offset: 413970; mRequested offset: 406964; m31Requested offset: 398528; Requested offset: 367053; mRequested offset: 415370; Error: result2repseq died; ```. conda env:. ```; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 0_gnu conda-forge; bzip2 1.0.8 h516909a_2 conda-forge; ca-certificates 2020.6.20 hecda079_0 conda-forge; certifi 2020.6.20 py38h32f6830_0 conda-forge; fasta-splitter 0.2.6 0 bioconda; gawk 5.1.0 h516909a_0 conda-forge; gettext 0.19.8.1 hc5be6a0_1002 conda-forge; ld_impl_linux-64 2.34 h53a641e_7 conda-forge; libblas 3.8.0 17_",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914:1884,test,tests,1884,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914,2,['test'],['tests']
Testability,"s/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3; Program call:; queryDB targetDB /home/zcx/Program/MMseqs/2.0/test/tmp/pref_4 /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 --sub-mat /home/zcx/Program/MMseqs/2.0/data/blosum62.out --alignment-mode 0 -e 0.001 -c 0 --comp-bias-corr 1 --min-seq-id 0 --max-seq-len 32000 --max-seqs 300 --max-rejected 2147483647 --threads 32 -v 3 . MMseqs Version: ef19bf40b8f6f5151d5ecbab42cfcb903facb907; Sub Matrix /home/zcx/Program/MMseqs/2.0/data/blosum62.out; Alignment mode 0; E-value threshold 0.001; Coverage threshold 0; Detect fragments false; Compositional bias 1; Seq. Id Threshold 0; Max. sequence length 32000; Max. results per query 300; Max Reject 2147483647; Include identical Seq. Id. false; Nucleotide false; Profile false; Add backtrace false; Realign hit false; Threads 32; Verbosity 3. Init data structures...; Compute score only.; Using 32 threads.; Calculation of Smith-Waterman alignments.; Time for merging files: 0 h 0 m 0 s. All sequences processed. 6287 alignments calculated.; 6203 sequence pairs passed the thresholds (0.986639 of overall calculated).; 25.2154 hits per query sequence.; Time for alignments calculation: 0 h 0 m 1s; - checkReturnCode 'Alignment died'; - '[' 0 -ne 0 ']'; - '[' 4 -gt 4 ']'; - NEXTINPUT=/home/zcx/Program/MMseqs/2.0/test/tmp/input_step4; - '[' 4 -lt 4 ']'; - let SENS=SENS+SENS_STEP_SIZE; - INPUT=/home/zcx/Program/MMseqs/2.0/test/tmp/input_step4; - '[' 5 -le 4 ']'; - mv -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4 resultDB; - mv -f /home/zcx/Program/MMseqs/2.0/test/tmp/aln_4.index resultDB.index; - checkReturnCode 'Could not move result to resultDB'; - '[' 0 -ne 0 ']'; - '[' -n '' ']'. Why was there an 'Could not move result to resultDB' error code even though the ""resultDB"" and ""resultDB.index"" file was correctly generated?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304:5928,test,test,5928,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-235778304,4,['test'],['test']
Testability,"s_db; ```. ...and the symlink doesn't point to a file, since my original cluster database was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.9; ```. ...another reason why the multi-file output of mmseqs commands produces headaches. Why aren't the multi-output files generated when using multiple threads (as the example ab",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1347,test,tests,1347,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,1,['test'],['tests']
Testability,"se was generated via `mmseqs linclust --threads 18`, which produced cluster database files with `.<#>` extensions:. ```; # used 18 threads for `mmseqs linclust`, which produced: ; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.0; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.1; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.10; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.11; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.12; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.13; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.14; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.15; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.16; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.17; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.2; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.3; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.4; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.5; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.6; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.7; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.8; /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.9; ```. ...another reason why the multi-file output of mmseqs commands produces headaches. Why aren't the multi-output files generated when using multiple threads (as the example above) just automatically merged back into one database file instead of leaving many `clu",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319:1434,test,tests,1434,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/333#issuecomment-663148319,1,['test'],['tests']
Testability,"ster mode 	0; Verbosity 	3; Max depth connected component 	1000; Similarity type 	2; Threads 	10; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id. 	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Alphabet size 	13; Kmer per sequence 	80; Mask Residues 	0; K-mer size 	0; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers 	0; Rescore mode 	0; Remove hits by seq.id. and coverage 	false; In substitution scoring mode, performs global alignment along the diagonal	false; Remove Temporary Files 	false; Sets the MPI runner 	. Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/pref --sub-mat blosum62.out --alph-size 13 --min-seq-id 0.8 --kmer-per-seq 80 --mask 0 --cov-mode 0 -k 0 -c 0.8 --max-seq-len 65535 --hash-shift 5 --split-memory-limit 0 --skip-n-repeat-kmer 0 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Alphabet size 	13; Seq. Id Threshold 	0.8; Kmer per sequence 	80; Mask Residues 	0; Coverage Mode 	0; K-mer size 	10; Coverage threshold 	0.8; Max. sequence length 	65535; Shift hash 	5; Split Memory Limit 	0; Include only extendable 	false; Skip sequence with n repeating k-mers	0; Threads 	10; Verbosity 	3. Database type: Aminoacid; V -> I; M -> L; Q -> E; T -> S; R -> K; Y -> F; S -> A; N -> D; Reduced amino acid alphabet:; A C D E F G H I K L P W X . Needed memory (1384664272 byte) of total memory (365681509171 byte); Process file into 1 parts; Generate k-mers list 0; ...................................................................................................	1 Mio.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:3550,test,test,3550,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"sters_db.0 /ebio/abt3_scratch/nyoungblut/cluster_update. MMseqs Version: 	11.e1a1c; Seq. id. threshold 	0.9; Coverage threshold 	0.8. ===================================================; === Update the new sequences with the old keys ====; ===================================================; ===================================================; ====== Filter out the new from old sequences ======; ===================================================; ===================================================; ======= Extract representative sequences ==========; ===================================================; result2repseq /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/genes_db /ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db /ebio/abt3_scratch/nyoungblut/Struo2_122419461619/cluster_update/7316799743718053916/OLDDB.repSeq. Invalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index; 31mInvalid database read for database data file=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db, database index=/ebio/abt3_projects/software/dev/Struo2/tests/output_n10/genes/cluster/clusters_db.index. [... a lot of output ...]. 31mSize of data: 363542; mRequested offset: 412570; Requested offset: 399738; 31mRequested offset: 367758; Requested offset: 408364; 31mRequested offset: 386682; 39mRequested offset: 393723; mRequested offset: 403458; Requested offset: 381782; 39mRequested offset: 413970; mRequested offset: 406964; m31Requested offset: 398528; Requested offset: 367053; mRequested offset: 415370; Error: result2repseq died; ```. conda env:. ```; # Name Version Build Channel; _libgcc_mutex 0.1 conda_forge conda-forge; _openmp_mutex 4.5 0_gnu conda-forge; bzip2 1.0.8 h516909a_2 conda-forge; ca-certificates 2020.6.20 hecda079_0 c",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914:1647,test,tests,1647,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/272#issuecomment-662482914,2,['test'],['tests']
Testability,"table init done. DB statistic; Entries: 1182627; DB Size: 519095762 (byte); Avg Kmer Size: 0.0184785; Top 10 Kmers; 	YTGTPK		230; 	PGFVVC		201; 	TNMHCE		201; 	GSPYYE		201; 	ISYEFH		201; 	FMHLRK		201; 	KKEEWK		201; 	WKREKP		201; 	MTTCKQ		201; 	IFTFHT		201; Min Kmer Size: 0; Empty list: 63346238. Time for index table init: 0h 0m 0s. 	k-mers per position = 1.5412, k-mer match probability: 7.54641e-14; k-mer similarity threshold: 130; k-mer match probability: 7.54641e-14. Starting prefiltering scores calculation (step 1 of 1); Query db start 1 to 27782; Target db start 1 to 27782; ..; 1 k-mers per position.; 1604 DB matches per sequence.; 0 Overflows.; 27 sequences passed prefiltering per query sequence.; Median result list size: 2; 0 sequences with 0 size result lists. Time for prefiltering scores calculation: 0 h 0 m 1s; Time for merging files: 0 h 0 m 0 s. Overall time for prefiltering run: 0 h 0 m 2s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/pref_step0 /tmp/test/9465698490903227639/aln_step0 --sub-mat blosum62.out --alignment-mode 3 -e 0.001 --min-seq-id 0.8 --alt-ali 0 -c 0.8 --cov-mode 0 --max-seq-len 65535 --max-seqs 300 --comp-bias-corr 0 --max-rejected 2147483647 --max-accept 2147483647 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Add backtrace 	false; Alignment mode 	3; E-value threshold 	0.001; Seq. Id Threshold 	0.8; Alternative alignments 	0; Coverage threshold 	0.8; Coverage Mode 	0; Max. sequence length 	65535; Max. results per query 	300; Compositional bias 	0; Realign hit 	false; Max Reject 	2147483647; Max Accept 	2147483647; Include identical Seq. Id.	false; No preload 	false; Early exit 	false; Pseudo count a 	1; Pseudo count b 	1.5; Threads 	10; Verbosity 	3. Init data structures...; Compute score, coverage and sequence id.; Using 10 threads.; Query database type: Ami",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:16285,test,test,16285,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,4,['test'],['test']
Testability,"ted: 0.182017; Actual: 0.182017. EXPAND (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 21s); TEST FAILED (NO REPORT). NUCLNUCL_TRANS_SEARCH (Time: 14s); TEST FAILED (NO REPORT). CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 14s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 12s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 8s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 4s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 27s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 26s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filtertaxdb: 3626 680 1425;. DBPROFILE_INDEX (Time: 50s); TEST SUCCESS; GOOD; Expected: 0.197552; Actual: 0.197552. LINSEARCH_NUCLNUCL_TARNS_SEARCH (Time: 15s); TEST FAILED (NO REPORT). LINSEARCH_NUCLNUCL_SEARCH (Time: 20s); TEST FAILED (NO REPORT). EASY_LINSEARCH_NUCLNUCL_SEARCH_SPLIT (Time: 29s); TEST SUCCESS; GOOD; Expected: 0.108903; Actual: 0.108903. LINCLUST_UPDATE (Time: 19s); TEST SUCCESS; GOOD; Expected: 32132 24732 32132; Actual: 32132 24732 32132. EASYNUCLNUCLTAX_SEARCH (Time: 55s); TEST SUCCESS; GOOD; Expected: from taxonomyreport: 2607 243 2624; Actual: from taxonomyreport: 2607 243 2624. EXTRACTORFS (",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790:1667,TEST,TEST,1667,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868511790,1,['TEST'],['TEST']
Testability,thanks @martin-steinegger ; it seems that we cannot use cluster names to extract them. This is a test to reproduce:. ```; mmseqs createdb examples/DB.fasta DB.db; mmseqs cluster DB.db DB_clu temp/ --threads 20 -c 0.0 --cascaded -s 7 --cluster-mode 2; mmseqs createtsv DB.db DB.db DB_clu DB_clu.tsv; cut -f1 DB_clu.tsv|head -n5 > requested_clusters; mmseqs createsubdb requested_clusters DB_clu DB_clu_filtered. Start writing to file DB_clu_filtered; Key A7YWM6 not found in database; Key C4KHV1 not found in database; Key C4KHV1 not found in database; Key C4KHV1 not found in database; Key C4KHV1 not found in database; Time for merging files: 0 h 0 m 0 s; ```,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/27#issuecomment-297672438:97,test,test,97,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/27#issuecomment-297672438,1,['test'],['test']
Testability,"thanks very much for @milot-mirdita . Could you explain more on my questions, thanks in advance!!!; 1. the python version ""colabfold_search"" is the file ""colabfold/mmseqs/search.py"", yes?. 2. colabfold_search.sh is mostly for Batch searches. The difference of between Batch searches and single query searches.; Batch searches: input a few hundred to thousands of sequences **as one input set**, and get the only 1 msa sequences set. ; single query searches: input 1 sequence or 2 sequences as a pair as one input set, and get the only 1 msa sequences set.; **If we run multiple ""single query searches"" in parallel or in batch, this is not batch searches, yes?**. 3. when I run mmseqs msa server locally, it succees for ticket/msa, but failed for ""ticket/pair"".; could you check the mmseqs log file and give me instructions?; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11145675/log-mmseqs-msa-server.log). Input taxonomy database ""/mnt/sdc/colabfold_db/uniref30_2202_db.idx"" is missing files:; - /mnt/sdc/colabfold_db/uniref30_2202_db.idx_mapping; - /mnt/sdc/colabfold_db/uniref30_2202_db.idx_nodes.dmp; - /mnt/sdc/colabfold_db/uniref30_2202_db.idx_names.dmp; ...; 2023/04/04 12:29:49 Execution Error: open /home/qcdong/codes/ColabFold/MsaServer/jobs/3m6olJuvf_TV0UTKJxnGu3V3YnMxyHkkj915xg/pair.a3m: no such file or directory",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495469670:789,log,log,789,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495469670,5,['log'],"['log', 'log-mmseqs-msa-server']"
Testability,"the created idx files: colabfold_envdb_202108_db.idx.0 colabfold_envdb_202108_db.idx.1 colabfold_envdb_202108_db.idx.2 colabfold_envdb_202108_db.idx.3 colabfold_envdb_202108_db.idx.4 colabfold_envdb_202108_db.idx.5 colabfold_envdb_202108_db.idx.6 colabfold_envdb_202108_db.idx.7 pdb70_220313.idx uniref30_2202_db.idx. how to reproduce ""ticket/pair"" error in local mmseqs msa server.; 1. follow the instructions in https://github.com/sokrypton/ColabFold/tree/main/MsaServer; The only difference in my process with that in the ColabFold instructions: I did not use vmtouch to keep the precomputed database index file within system memory, because I only have max 256GB RAM.; 2. run MsaServer/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_s",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:906,log,log,906,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,4,['log'],"['log', 'log-mmseqs-msa-server']"
Testability,"the whole log overwhelms my system, but I captured most of the information that occurs before this bug:. ```; clusterer:/mnt/cluster/filt_80_2020-04-19/combined12$ time /custom_install/installations/mmseqs-nonmpi/MMseqs2/build/bin/mmseqs linclust inDB linClu90DB tmp --min-seq-id 0.90 --kme; r-per-seq 40 -c 0.9; Tmp tmp folder does not exist or is not a directory.; Create dir tmp; linclust inDB linClu90DB tmp --min-seq-id 0.90 --kmer-per-seq 40 -c 0.9. MMseqs Version: 290668474611312a94a868bf041b38c8618f5ef6; Cluster mode 0; Max connected component depth 1000; Similarity type 2; Threads 160; Compressed 0; Verbosity 3; Substitution matrix nucl:nucleotide.out,aa:blosum62.out; Add backtrace false; Alignment mode 2; Allow wrapped scoring false; E-value threshold 0.001; Seq. id. threshold 0.9; Min alignment length 0; Seq. id. mode 0; Alternative alignments 0; Coverage threshold 0.9; Coverage mode 0; Max sequence length 65535; Compositional bias 1; Realign hits false; Max reject 2147483647; Max accept 2147483647; Include identical seq. id. false; Preload mode 0; Pseudo count a 1; Pseudo count b 1.5; Score bias 0; Gap open cost 11; Gap extension cost 1; Zdrop 40; Alphabet size nucl:5,aa:21; k-mers per sequence 40; Spaced k-mers 0; Spaced k-mer pattern; Scale k-mers per sequence nucl:0.200,aa:0.000; Adjust k-mer length false; Mask residues 0; Mask lower case residues 0; k-mer length 0; Shift hash 67; Split memory limit 0; Include only extendable false; Skip repeating k-mers false; Rescore mode 0; Remove hits by seq. id. and coverage false; Sort results 0; Remove temporary files false; Force restart with latest tmp false; MPI runner. Set cluster mode SET COVER.; kmermatcher inDB tmp/18375844090983922724/pref --sub-mat nucl:nucleotide.out,aa:blosum62.out --alph-size nucl:5,aa:13 --min-seq-id 0.9 --kmer-per-seq 40 --spaced-kmer-mode 0 --kmer-per-seq-scale; nucl:0.200,aa:0.000 --adjust-kmer-len 0 --mask 0 --mask-lower-case 0 --cov-mode 0 -k 0 -c 0.9 --max-seq-len 65535 --hash-shi",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311:10,log,log,10,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/303#issuecomment-625917311,1,['log'],['log']
Testability,"ts pass except for SLICEPROFILE:. SEARCH (Time: 16s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH (Time: 20s); TEST SUCCESS; GOOD; Expected: 0.238353; Actual: 0.238353. EASY_SEARCH_INDEX_SPLIT (Time: 21s); TEST SUCCESS; GOOD; Expected: 0.118265; Actual: 0.118265. PROFILE (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.367396; Actual: 0.367396. EASY_PROFILE (Time: 42s); TEST SUCCESS; GOOD; Expected: 0.33876; Actual: 0.338768. SLICEPROFILE (Time: 22s); TEST FAILED (NO REPORT). DBPROFILE (Time: 17s); TEST SUCCESS; GOOD; Expected: 0.182017; Actual: 0.182017. EXPAND (Time: 52s); TEST SUCCESS; GOOD; Expected: 0.16614, 0.171723, 0.222982; Actual: 0.16614, 0.224627, 0.222982. NUCLPROT_SEARCH (Time: 12s); TEST SUCCESS; GOOD; Expected: 0.238076; Actual: 0.238076. NUCLNUCL_SEARCH (Time: 31s); TEST SUCCESS; GOOD; Expected: 0.192043; Actual: 0.192043. NUCLNUCL_TRANS_SEARCH (Time: 18s); TEST SUCCESS; GOOD; Expected: 0.11646; Actual: 0.11646. CLUSTER (Time: 17s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_CLUSTER (Time: 19s); TEST SUCCESS; GOOD; Expected: 15722; Actual: 15722. EASY_NUCL_CLUSTER (Time: 3s); TEST SUCCESS; GOOD; Expected: 106; Actual: 106. CLUSTER_REASSIGN (Time: 14s); TEST SUCCESS; GOOD; Expected: 17403; Actual: 17403. LINCLUST (Time: 7s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. LINCLUST_SPLIT (Time: 10s); TEST SUCCESS; GOOD; Expected: 26491; Actual: 26491. EASY_LINCLUST (Time: 12s); TEST SUCCESS; GOOD; Expected: 26493; Actual: 26493. CLUSTHASH (Time: 0s); TEST SUCCESS; GOOD; Expected: 5; Actual Prot: 5 Nucl: 5. PROTNUCL_SEARCH (Time: 28s); TEST SUCCESS; GOOD; Expected: 0.237504; Actual: 0.237504. NUCLPROTTAX_SEARCH (Time: 13s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265; Actual: from filtertaxdb: 1023 181 1265; from taxonomyreport: 1023 181 1265. EASYNUCLPROTSEARCH_TAX (Time: 25s); TEST SUCCESS; GOOD; Expected: from filtertaxdb: 3626 680 1425;; Actual: from filter",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663:1046,TEST,TEST,1046,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-868877663,1,['TEST'],['TEST']
Testability,"tutorial](https://github.com/soedinglab/MMseqs2/wiki#how-to-create-a-hhblits-database). ```; #!/usr/bin/env bash. BASE=""subset""; FILE=""${BASE}.fa""; MMSEQDB=""${BASE}DB""; MMSEQPREF=""${BASE}PREFILTER""; MMSEQALN=""${BASE}ALN""; MMSEQCLU=""${BASE}CLU""; MMSEQMSA=""${BASE}MSA""; FILELOG=""job.log"". echo '#:: CREATEDB' &>> ${FILELOG} ;; mmseqs createdb ${FILE} ${MMSEQDB} &>> ${FILELOG}. echo '#:: PREFILTER' &>> ${FILELOG} ;; mmseqs prefilter ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} -s 7.5 &>> ${FILELOG}. echo '#:: ALING' &>> ${FILELOG} ;; mmseqs align ${MMSEQDB} ${MMSEQDB} ${MMSEQPREF} ${MMSEQALN} -e 0.00001 &>> ${FILELOG}. echo '#:: CLUST' &>> ${FILELOG} ;; mmseqs clust ${MMSEQDB} ${MMSEQALN} ${MMSEQCLU} &> ${FILELOG} &>> ${FILELOG}. echo '#:: RESULT2MSA' &>> ${FILELOG} ;; mmseqs result2msa ${MMSEQDB} ${MMSEQDB} ${MMSEQCLU} ${MMSEQMSA} --compress &>> ${FILELOG}. echo '#:: CREATE LINKS' &>> ${FILELOG} ;; ln -s ${MMSEQDB}_h ${MMSEQMSA}_header.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}_h.index ${MMSEQMSA}_header.ffindex &>> ${FILELOG}; ln -s ${MMSEQDB} ${MMSEQMSA}_sequence.ffdata &>> ${FILELOG}; ln -s ${MMSEQDB}.index ${MMSEQMSA}_sequence.ffindex &>> ${FILELOG}. echo '#:: BUILD HHBLITS COMPATIBLE' &>> ${FILELOG} ;; cstranslate -i ${MMSEQMSA} -o ${MMSEQMSA}_cs219 \; -A /home/linuxbrew/anaconda3/data/cs219.lib \; -D /home/linuxbrew/anaconda3/data/context_data.lib \; -x 0.3 -c 4 -I ca3m &>> ${FILELOG}; ```; It only fails on cstranslate with this error:; ```; ERROR: Unable to read input file 'subsetMSA'!; Reading context library for pseudocounts from context_data.lib ...; Reading abstract state alphabet from cs219.lib ...; ```. I'm attaching the the [sequence](https://github.com/soedinglab/MMseqs2/files/3095328/subset.fa.txt), [commands file (source)](https://github.com/soedinglab/MMseqs2/files/3095327/source.sh.txt) and [log file](https://github.com/soedinglab/MMseqs2/files/3095326/job.log.txt). Added "".txt"" to upload easily. I really appreciate any help to debug this error. Thanks in advance.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484587503:1936,log,log,1936,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/174#issuecomment-484587503,2,['log'],['log']
Testability,ty type 	2; Threads 	10. Init...; Opening sequence database...; Opening alignment database...; done.; Clustering mode: Set Cover; ...; Sort entries. Find missing connections. Found 7484 new connections. Reconstruct initial order.; ...; Add missing connections.; ...; Time for Read in: 0 m 0s. Writing results...; ...done.; Time for clustering: 0 m 0s; Time for merging files: 0 h 0 m 0 s; Total time: 0 m 0s. Size of the sequence database: 32435; Size of the alignment database: 32435; Number of clusters: 27782; Program call:; panproteome.db /tmp/test/9465698490903227639/linclust/831108043510341376/clu /tmp/test/9465698490903227639/linclust/831108043510341376/pre_clust /tmp/test/9465698490903227639/linclust/831108043510341376/clust . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Threads 	36; Merge by DB	false. List amount 1132486; Clustering step 1...; Clustering step 2...; Writing the results...; Time for merging files: 0 h 0 m 0 s; ...done.; Program call:; /tmp/test/9465698490903227639/clu_redundancy panproteome.db /tmp/test/9465698490903227639/input_step_redundancy . MMseqs Version:	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Verbosity	3. Start writing to file /tmp/test/9465698490903227639/input_step_redundancy; Time for merging files: 0 h 0 m 0 s; Program call:; /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/input_step_redundancy /tmp/test/9465698490903227639/pref_step0 --sub-mat blosum62.out -s 1 -k 0 --k-score 2147483647 --alph-size 21 --max-seq-len 65535 --max-seqs 300 --offset-result 0 --split 0 --split-mode 2 --split-memory-limit 0 -c 0.8 --cov-mode 0 --comp-bias-corr 0 --diag-score 0 --exact-kmer-matching 0 --mask 1 --min-ungapped-score 0 --spaced-kmer-mode 1 --pca 1 --pcb 1.5 --threads 10 -v 3 . MMseqs Version: 	dfb5e6eb53ee034f02cc08d15513fb5ccce7cce7; Sub Matrix 	blosum62.out; Sensitivity 	1; K-mer size 	0; K-score 	2147483647; Alphabet size 	21; Max. sequence length 	65535; Max. results per query 	300; Offset res,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700:13272,test,test,13272,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/88#issuecomment-401138700,1,['test'],['test']
Testability,"ver/setup-and-start-local.sh to compile mmseqs locally.; now, mmseqs server successfully runs. at http://127.0.0.1:8888/; the same codes run sucessfully for online api ""https://api.colabfold.com""; 3, local mmseqs server log with error; [log-mmseqs-msa-server.log](https://github.com/soedinglab/MMseqs2/files/11146747/log-mmseqs-msa-server.log); 4, test codes; ```; import logging; import requests; import time. logger = logging.getLogger(); logging.basicConfig(level=logging.INFO, format='%(asctime)s %(filename)s %(lineno)d: %(message)s',; datefmt='%m-%d %H:%M:%S'); host_url = 'http://127.0.0.1:8888'. def test_pairing():; """""" """"""; query = '>101\nVNPTVFFDIAVDGEPLGRVSFELFADKVPKTAENFRALSTGEKGFGYKGSCFHRIIPGFMCQGGDFTRHNGTGGKSIYGEKFEDENFILKHTGPGILSMANAGPNTNGSQFFICTAKTEWLDGKHVVFGKVKEGMNIVEAMERFGSRNGKTSKKITIADCGQLE\n>102\nHAGPIA\n'; mode = ''; submission_endpoint = 'ticket/pair'; res = requests.post(f'{host_url}/{submission_endpoint}', data={'q':query,'mode': mode}, timeout=6.02); out = res.json(); logger.info('%s', out). # wait for job to finish; max_seconds = 15000; ID, TIME = out[""id""], 0; while out[""status""] in [""UNKNOWN"", ""RUNNING"", ""PENDING"", ""ERROR""]:; t = 5 + random.randint(0, 5); logger.error(f""Sleeping for {t}s. Reason: {out['status']}""); time.sleep(t); out = status(ID); TIME += t; if TIME > max_seconds and out[""status""] != ""COMPLETE"":; # something failed on the server side, need to resubmit; break. def status(ID):; while True:; error_count = 0; try:; res = requests.get(f'{host_url}/ticket/{ID}', timeout=6.02); except requests.exceptions.Timeout:; logger.warning(""Timeout while fetching status from MSA server. Retrying...""); continue; except Exception as e:; error_count += 1; logger.warning(f""Error while fetching result from MSA server. Retrying... ({error_count}/5)""); logger.warning(f""Error: {e}""); time.sleep(5); if error_count > 5:; raise; continue; break; try:; out = res.json(); except ValueError:; logger.error(f""Server didn't reply with json: {res.text}""); out = {""st",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476:1687,log,logger,1687,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/690#issuecomment-1495470476,1,['log'],['logger']
Testability,y4mvibdqrlghr/bin/c++; -- Check for working CXX compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/c++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc; -- Check for working C compiler: /usr/local/pace-apps/spack/packages/linux-rhel7-x86_64/gcc-4.8.5/gcc-10.3.0-o57x6h2gubo7bzh7evmy4mvibdqrlghr/bin/gcc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Source Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Project Directory: /storage/home/hcoda1/6/rridley3/data/dir/mmseqs2; -- Compiler is GNU; -- Performing Test HAVE_AVX2_EXTENSIONS; -- Performing Test HAVE_AVX2_EXTENSIONS - Success; -- Performing Test HAVE_AVX_EXTENSIONS; -- Performing Test HAVE_AVX_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_2_EXTENSIONS; -- Performing Test HAVE_SSE4_2_EXTENSIONS - Success; -- Performing Test HAVE_SSE4_1_EXTENSIONS; -- Performing Test HAVE_SSE4_1_EXTENSIONS - Success; -- Performing Test HAVE_SSE3_EXTENSIONS; -- Performing Test HAVE_SSE3_EXTENSIONS - Success; -- Performing Test HAVE_SSE2_EXTENSIONS; -- Performing Test HAVE_SSE2_EXTENSIONS - Success; -- Performing Test HAVE_SSE_EXTENSIONS; -- Performing Test HAVE_SSE_EXTENSIONS - Success; -- ZSTD VERSION 1.3.8; -- ShellCheck disabled; -- Performing Test HAVE_POSIX_FADVISE; -- Performing Test HAVE_POSIX_FADVISE - Success; -- Performing Test HAVE_POSIX_MADVISE; -- Performing Test HAVE_POSIX_MADVISE - Success; -- Performing Test ATOMIC_LIBRARY_NATIVE; -- Performing Test ATOMIC_LIBRARY_NATIVE - Failed; -- Performing Test ATOMIC_LIBRARY_LIB; -- Performing Test ATOMIC_LIBRARY_LIB - Success; -- Found Atomic: atomic; -- IPS4O sorting works; -- Found ZLIB; -- Performing Test HAVE_ZLIB_CHECK; -- Performing Test HAVE_ZLIB_CHECK -,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791:1083,Test,Test,1083,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461630791,14,['Test'],['Test']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 1 (LWP 7869 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, command=..., returnAlnRes=<optimized out>) at /home/vsts/work/1/s/src/util/result2profile.cpp:140; #7 0x0000000000427a67 in runCommand (p=0x1e903c0, argc=argc@entry=6, argv=argv@entry=0x7fff44ebc578) at /home/vsts/work/1/s/src/commons/Application.cpp:47; #8 0x000000000040e7d6 in main (argc=8, argv=0x7fff44ebc568) at /home/vsts/work/1/s/src/commons/Application.cpp:203; ```; For the clu90 job:; ```; (gdb) thread apply all bt. Thread 32 (Thread 0x7f6e65ffe640 (LWP 135852) ""mmseqs""):; #0 futex_wait (val=0, addr=0x5f8465e1c2c4) at ../../../libgomp/config/linux/x86/futex.h:97; #1 do_wait (addr=addr@entry=0x5f8465e1c2c4, val=val@entry=0",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:29610,clear,clear,29610,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 2 (LWP 7870 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 1 (LWP 7869 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:28681,clear,clear,28681,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 3 (LWP 7871 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 2 (LWP 7870 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:27752,clear,clear,27752,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 4 (LWP 7872 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 3 (LWP 7871 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:26823,clear,clear,26823,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 5 (LWP 7905 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 4 (LWP 7872 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:25894,clear,clear,25894,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 6 (LWP 7906 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 5 (LWP 7905 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:24965,clear,clear,24965,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 7 (LWP 7907 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 6 (LWP 7906 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:24036,clear,clear,24036,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 8 (LWP 7908 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 7 (LWP 7907 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:23107,clear,clear,23107,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability," char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 9 (LWP 7909 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 8 (LWP 7908 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:22178,clear,clear,22178,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"10.6d92c is the latest release, however we have been working on the next release. The `databases` module will be included in the next release. If you want to try it out already please refer to the install static or compile from source sections of the user guide:. For Linux:; https://github.com/soedinglab/MMseqs2/wiki#install-static-linux-version; https://github.com/soedinglab/MMseqs2/wiki#compile-from-source-under-linux; For macOS:; https://github.com/soedinglab/MMseqs2/wiki#install-static-macos-version",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/271#issuecomment-584059103:256,guid,guide,256,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/271#issuecomment-584059103,1,['guid'],['guide']
Usability,"> I read the wiki and [User Guide](http://mmseqs.com/latest/userguide.pdf). Although there are examples about `--db-load-mode 2`, none mentions or explains `--db-load-mode 3`. This code explains: ; https://github.com/soedinglab/MMseqs2/blob/87e7103d289029dc3345f85ea9a4c4c6d6416e46/src/prefiltering/PrefilteringIndexReader.cpp#L385. Basically `--db-load-mode 3` is the combination of `--db-load-mode 2` and `vmtouch`, meaning `mmseq` will mmap and put the necessary data in the memory.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-2422790519:28,Guid,Guide,28,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-2422790519,1,['Guid'],['Guide']
Usability,> The output is kind of mangled. Could you execute both runs with empty `tmp` directories and redirect the whole output to a file please? You might also want to set the `TTY=0` environment variable to disable the progress bar (not sure why it broke so badly in your output.; > See: https://github.com/soedinglab/MMseqs2/wiki#environment-variables-used-by-mmseqs2. Thank you very much!; Thank you for your help. Our problem has been resolved. The order of memory insertion has been changed.; Dankschön!,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824574374:213,progress bar,progress bar,213,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824574374,1,['progress bar'],['progress bar']
Usability,"> The point is that `result2msa` create an MSA per each cluster, and even the MSA is in binary format you can visualize the result with a simple `less` but you can't use for other pourpouse. Is there any way, may be using `apply`, to export this binary-MSA output to flat-text? Because I can see the result and It's exactly that I want. I've found a solution. We can use linux `strings` function to convert the binary-MSA to flat-text.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-559387067:138,simpl,simple,138,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-559387067,1,['simpl'],['simple']
Usability,@LittletreeZou Unfortunately without a progress bar I wasn't sure how much longer it needed to finish. I killed it after it ran for ~30 hours.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/726#issuecomment-1856024215:39,progress bar,progress bar,39,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/726#issuecomment-1856024215,1,['progress bar'],['progress bar']
Usability,"@adriaaula Would it be possible to send me the `top1` input (including `.[0-9]`, `.index` `.dbtype`) of the LCA module? So that I do not need to download the full sequences of gtdb. You can find it by looking at the input parameter for the LCA call. The call should look similar to this:. lca gtdb_54kDB tmp/3061363735539572485/top1 taxresdb --compressed 0 --blacklist 12908,28384 --tax-lineage 0 --threads 12 -v 3. @genomewalker thank you a lot! I would add it to the user guide. I am sure many user would profit from it",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570666774:474,guid,guide,474,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/256#issuecomment-570666774,1,['guid'],['guide']
Usability,@fbreitwieser wrote a guide how to turn a NCBI BLAST database into a mmseqs taxonomy datebase. https://github.com/soedinglab/MMseqs2/wiki#create-a-sequence-database-with-taxonomic-information-from-an-existing-blast-database,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-491492666:22,guid,guide,22,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-491492666,1,['guid'],['guide']
Usability,@hochshi the relevant repository for our server is here https://github.com/soedinglab/MMseqs2-App ; Their is a small guide how to set up a server.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/522#issuecomment-1006319042:117,guid,guide,117,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/522#issuecomment-1006319042,1,['guid'],['guide']
Usability,"@ksahlin Thank you for the feedback :) ; Yes, the first column is the identifier of the representative ""centre"" sequence and the second column contains the identifier of a member of the cluster. See also https://github.com/soedinglab/mmseqs2/wiki#clustering-format",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418155122:27,feedback,feedback,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/111#issuecomment-418155122,1,['feedback'],['feedback']
Usability,"@liuxianghui thank you for asking this question! . ```; cd-hit-est -i $CLUSTERS.IN -c 0.95 -T $MC_CPU -M 0 -G 0 -aS 0.9 -g 1 -r 1 -d 0 -o $CLUSTERS.OUT > $CLUSTERS.log; ```. CD-HIT computes in default global sequence identity, while MMseqs2 computes local. Therefore it is not possible to mimic exactly the same behaviour. But since you turn of the the global sequence identity computation, you can get fairly close to CD-HIT's criteria. Here is my suggested parameter mapping. ```; -c 0.95 -> --min-seq-id 0.95 ; -T $MC_CPU -> --threads $MC_CPU; -G 0 -> MMseqs2 uses local alignments is the default, there is no way to make alignments global; -aS 0.9 -> --cov-mode 1 -c 0.9; -g 1 -> it is not possible with MMseqs2 using greedy incremental clustering (needed for --cov-mode 1). However, setcover assigns sequence to the best matching representative in default. ; -r 1 -> MMseqs2 in default considers forward and reverse strand; ```. Final command: . ```; mmseqs easy-cluster in.fa clu tmp --min-seq-id 0.95 --cov-mode 1 -c 0.9 --threads $MC_CPU; ```. I have also added a guide how parameters of CD-HIT and MMseqs2 are related in the documentation https://github.com/soedinglab/MMseqs2/wiki#how-do-parameters-of-cd-hit-relate-to-mmseqs2",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/317#issuecomment-643981473:1072,guid,guide,1072,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/317#issuecomment-643981473,1,['guid'],['guide']
Usability,"@martin-steinegger Thanks for the answer!; Intuitively, I've already tried running your latest suggested command:; `mmseqs convertalis aDB bDB alignDB alnRes.txt --search-type 3 --format-output ""qseq,tseq,query,target,raw,bits,qaln,taln"" --gap-open 3 --gap-extend 0`. However, no output file is generated (in this case, `alnRes.txt`) when the gap options are passed to convertalis. As for the warning, I am quickly testing things on my PC, but the usually I will run this for bigger datasets on a Linux machine. I will test on Linux as well to see if there is any difference. EDIT - On Linux:; `5316 Aborted (core dumped) mmseqs convertalis seqsDB revDB alignDB alnRes.txt --search-type 3 --format-output ""query,target,raw"" --gap-open 3 --gap-extend 1`",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481:43,Intuit,Intuitively,43,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/201#issuecomment-491344481,1,['Intuit'],['Intuitively']
Usability,"@milot-mirdita Hi Milot, how is it going with this topic of global alignment? . My workflow for protein clustering like below:; 1. blastp for local alignment, find similar sequence pairs;; 2. needle for global alignment access similarity for blastp pairs;; 3. mcl to cluster the needle result. According to my experience, only a local alignment could be not enough to have clusters.; I'm not clear about the clustering function in mmseqs2, is it enough to substitute my whole workflow?. Hope to see your comment. Cheers,. **WANG**",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696168186:392,clear,clear,392,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696168186,1,['clear'],['clear']
Usability,@milot-mirdita Thanks so much for this clarification. I noticed this page before just wasn't clear to me how it impacted my scores. Fixed my issue. I'm interested in linclust's workflow so I'm running through linclust's prefiltering and alignment step! I'd like to see the alignmentDB before the greedy set cover algo.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/861#issuecomment-2212557728:93,clear,clear,93,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/861#issuecomment-2212557728,1,['clear'],['clear']
Usability,"@milot-mirdita noticed that the interactive progress bar could be a problem, in your case it produced at 13GB output. You can turn of the interactive progress bar by setting the environment variable to TTY=0.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-510545621:44,progress bar,progress bar,44,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-510545621,2,['progress bar'],['progress bar']
Usability,"@milot-mirdita — Thank you for the reply. . > The --global-alignment parameter is really badly named and does something unrelated for normal searches. We really should remove it. Ah ok, that's good to know. > Either opal or parasail might serve as the base for the implementation. If you are interested in contributing this feature we could help guide you through. Thank you for the references and the offer to assist me in contributing. Currently my language comfortability extends only to Python and Rust, so it'd be a stretch for me at the moment. I don't want to close this issue in the case you want to keep it open to consider down the line, but I consider it addressed. Thanks again!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-518761178:346,guid,guide,346,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-518761178,1,['guid'],['guide']
Usability,@nick-youngblut we check the compatibility of the input database in each module. I hope this reduces usability problems.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-513131346:101,usab,usability,101,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-513131346,1,['usab'],['usability']
Usability,And what about if I use **clust** independently when clustering using profiles? The following part of my workflow:; making profiles; ```; mmseqs search nr30_db nr70_db nr30_res tmp --num-iterations 3 --e-profile 0.001 -e 0.001 --threads 116; mmseqs result2profile nr30_db nr70_db nr30_res nr30_prof_db tmp --threads 110; ```; and then searching; ```; mmseqs search nr30_prof_db nr30_prof_db_consensus nr30_pp_res_0_05_cov tmp --threads 110 -e 0.05 --add-self-matches -c 0.8 --cov-mode 1; mmseqs clust nr30_prof_db nr30_pp_res_0_05_cov nr30_pp_clu_0_05_cov --threads 110 --cluster-mode 1 --similarity-type 1; ```; produces erroneous huge cluster along with many others. But I suspect it connects too many entries into that one big cluster (encompassing 4.5M sequences out of 10M). So therefore my question is how to control cov-mode within **clust** as it has not explicit option. Would that be through the **search** - I provided respective options to the above **search** but that doesn't solve the big cluster problem... Of course if the covering options applied to the **search** itself apply also to subsequent clustering it will be clear to me then that my data (in this case nr database) clusters transitively in too broad manner.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/73#issuecomment-375620783:1137,clear,clear,1137,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/73#issuecomment-375620783,1,['clear'],['clear']
Usability,"Are you using the `easy-search`? You can use the `--format-output` parameter to print any/all of the following fields `qseq,tseq,qheader,theader,qaln,Talk `. Then you can reformat the resulting tsv with some simple script into a fasta file.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/356#issuecomment-705441447:208,simpl,simple,208,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/356#issuecomment-705441447,1,['simpl'],['simple']
Usability,Are your profiles in the MMseqs2 clusters format? If yes than you can update the cluster database by following the next steps. (0) search the profiles against the set of new proteins.; (1) use `swapresults` to get mapping of protein to profile.; (2) use `filterdb ... --extract-lines 1` to extract the top hit for each protein. ; (3) trim only the first column since the cluster format just has only the sequence identifier. This can be done with `fliterdb ... --trim-to-one-column`.; (4) swap again to get a profile (cluster) to protein mapping `swapresults`.; (5) use `mergedbs` to combine your old database with your new database. This is really hardcore mmseqs internal knowledge. We will offer a MMseqs2 tutorial at the ECCB18 if you want to learn more about its internals.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/108#issuecomment-408477910:747,learn,learn,747,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/108#issuecomment-408477910,1,['learn'],['learn']
Usability,"Based on your previous suggestion, I simply downloaded the PDB using Foldseek via the following command; `foldseek databases PDB pdb tmp `. Then I used mmseqs to filter for the tax I wanted. ; `mmseqs filtertaxseqdb pdb pdb_human --taxon-list 9606`. Were you suggesting something different from this? ; Thanks!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/821#issuecomment-1999758919:37,simpl,simply,37,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/821#issuecomment-1999758919,1,['simpl'],['simply']
Usability,"Computing the idx with 8 threads takes ~1 hour. Transferring the large index is much faster. My previous jobs that created the idx on the fly took ~2 hours, but with the pre-computed idx, the jobs take ~30 minutes. . Is there any why to homogenize the splits so that they are all approx. the same size. . To be clear, ~29G of h_vmem per thread (using 8 threads) is needed to run the `mmseqs search` jobs, but the largest split idx file is 70G.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/338#issuecomment-741769461:311,clear,clear,311,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/338#issuecomment-741769461,1,['clear'],['clear']
Usability,"Do you also have the previous steps? Alternatively, clear the temp directory and rerun the command. At this point the profiles already contain over 7k entries for some reason (`7.00K 0s 8ms`).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/372#issuecomment-726118628:52,clear,clear,52,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/372#issuecomment-726118628,1,['clear'],['clear']
Usability,"Exactly, you can also use the precompiled binaries at https://mmseqs.com/latest/. I've also added links to the corresponding user guide commits for older releases:; https://github.com/soedinglab/MMseqs2/wiki",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/248#issuecomment-559496490:130,guid,guide,130,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/248#issuecomment-559496490,1,['guid'],['guide']
Usability,"For the clu70:; ```; (gdb) thread apply all bt. Thread 32 (LWP 7932 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 31 (LWP 7931 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:623,clear,clear,623,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"Hi @martin-steinegger ,; many thanks for this update. From our first tests we see a clear improvement in this scenario and we are now able to find more exact matches with MMSeqs2 than before and even compared to Diamond.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-395755566:84,clear,clear,84,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/91#issuecomment-395755566,1,['clear'],['clear']
Usability,"Hi @milot-mirdita, thanks for the quick reply!. I am not creating a new substitution matrix. I am using the default parameters. Increasing the k-mer size seems intuitive, I'll try that. I am doing this for multiple alphabet reduction schemes to see the amount of reduction in dataset size. Should I keep the k-mer size of 11 across the alphabets or scale it based on the alphabet size? (e.g. longer k-mers for smaller alphabets).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/781#issuecomment-1819072155:160,intuit,intuitive,160,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/781#issuecomment-1819072155,1,['intuit'],['intuitive']
Usability,"Hi @silvainp @milot-mirdita @martin-steinegger !. I came across this old issue while googling because I encountered pretty much the same problem and this didn't seem to have been resolved yet. I can confirm that I got very similar outputs to @silvainp in a clustering problem I've been working on. The issue persisted with the most recent release (15) of mmseqs2. After some I found that there was a (silent) issue in my input FAA files: they were corrupted due to a few binary characters that were accidentally introduced in an upstream step. **Once I manually cleared all binary characters, clustering worked as intended**. This may have been the issue here as well, although ofc hard to tell from a distance. What's important imo is that the `createdb` step did _not_ catch these and threw no error/warning. @milot-mirdita I don't want to tinker with the code for a pull request, but I'd suggest building in a check to validate the input fasta files in the db-building step. Best regards,. Sebastian",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/710#issuecomment-2425959129:562,clear,cleared,562,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/710#issuecomment-2425959129,1,['clear'],['cleared']
Usability,"Hi Andres,. thanks a lot for your feedback. It is possible to restart modules in MMseqs2 e.g. prefilter, align, clust, ... (see https://github.com/soedinglab/mmseqs2/wiki#how-to-restart-a-search-or-clustering-workflow) but merging can not be restarted. However there is a way using ffindex_build (https://github.com/soedinglab/ffindex_soedinglab). The following steps should create a new database (you need to adjust the 7 so it matches the amount of ""index.[0-9]+"" files in the folder). . ```; for i in {1..7}; do; ffindex_build -a aln.{0,index.0} -d aln.$i -i aln.index.$i;; done; ffindex_build -as aln.{0,index.0}; mv aln.0 aln; mv aln.index.0 aln.index; ```. Another option: MMseqs2 reports per default 300 alignment. You could just rerun the alignment with `--max-accept` to decrease the hard disk space needed. you can read more about disk space requirements at (https://github.com/soedinglab/mmseqs2/wiki#alignment-module).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/30#issuecomment-300689028:34,feedback,feedback,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/30#issuecomment-300689028,1,['feedback'],['feedback']
Usability,"Hi Ann,. Thank you for guiding me so far. I did a bit of digging around in the temporary files. I'll call the two close sequences with one mismatch between them seqA and seqB. What I found was that they were both found within a larger cluster in the pref database with seqC (cluster head). seqC is about 20% different to both seqA and seqB, but their ungapped alignment scores may not reflect that. In the pref.tsv (createtsv pref); seqC seqB 5 0; seqC seqB 5 0. In the pref_rescore1.index file (pref_rescore1.1 - pref_rescore1.16 are in binary format, and I wasn't sure if that is the one you are referring to), I only see two rows that contain seqA and seqB. seqA seqA 100 0; seqB seqB 100 0. After the pipeline finishes, all three sequences seqA-C end up being separate clusters. Also, I'm using 10000 unique sequences in the input, so should one expect 10000-choose-2 pairs in the pref database? The total number of rows in the pref database is 69737, which is 0.13% of the total number of pairs. I had run linclust with these parameters in this run-; -e 1 --min-seq-id 0.99 --cov-mode 3 -c 0.99 --kmer-per-seq 100 --kmer-per-seq-scale 0 -k 15 --cluster-mode 1 --max-iterations 50000 --seq-id-mode 2 --threads 16 --remove-tmp-files 0",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923572541:23,guid,guiding,23,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923572541,1,['guid'],['guiding']
Usability,"Hi Ann,. Thank you for suggesting that. I know that using --cov-mode 3 paired with -c 0.99 is quite strict. When we relaxed it, we were finding 'false positive' clusters, where the cluster head/representatives (the largest sequence in the cluster) had novel enough genetic information in it, that we would have preferred it to be it's own cluster (with a solitary member). That being said, in my grid search, I have only explored varying -c values with a constant --cov-mode 3. The sequence pairs that I am finding that should be clustered together (and aren't) have nearly identical lengths (+-1) with a few mismatches (<10). It is my understanding that those should have been clustered regardless of the value of --cov-mode, even with the stringent -c 0.99. To give you another example, even when I use a very lenient clustering criterion (please note the values of min-seq-id, -c) - ; --kmer-per-seq-scale 0 --min-seq-id 0.80 --cov-mode 3 -c 0.80 --cluster-mode 1 --spaced-kmer-mode 0 -k 10 --threads 16 --adjust-kmer-len 0 --ignore-multi-kmer 0. I still find representative sequence pairs that have a levenshtein distance of 1 between them. Although now, I find very few such pairs (8 / 1378 all-v-all alignment of representative sequences with a levenshtein distance of < 10). I understand these could be edge cases, but I find them interesting, and I want to learn what linclust is doing by focussing on these 8 alone. (Making a long post even longer!) I'm validating linclust clusters by generating an all-v-all levenshtein distance matrix of representative clusters. And an all-v-all levenshtein distance matrix of all members within a cluster. Because my understanding of linclust is not great, I'm treating it as a black box that I intend to understand.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923071989:1365,learn,learn,1365,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/489#issuecomment-923071989,1,['learn'],['learn']
Usability,"Hi Antonio,. You can do something like this:. ```; mmseqs cluster db clu tmp; mmseqs align db db clu aln -a; mmseqs createtsv db db aln aln.tsv; ```. The `-a` parameter computes the whole backtrace, you can also use `--alignment-mode 3`, but that computes the backtrace anyway since it needs it for the seq. id. ; `--alignment-mode` 1 and 2 only approximate the sequence identity. Thank you for the feedback! We will add this to the FAQ and also discuss if it make sense to provide the same output also for Uniclust in future releases.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/13#issuecomment-276091695:399,feedback,feedback,399,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/13#issuecomment-276091695,1,['feedback'],['feedback']
Usability,"Hi Hannes,. Thank you for your feedback. . Sorry to have overlooked the SeqAn license terms for your code. We have replaced the genetic code tables from SeqAn with code from NCBI in the `translatenucs` tool. We have used no other code from SeqAn. . Thanks for the note on the license terms of `smith_waterman_sse2.cpp`. We changed the licence agreement to MIT since the code originated from https://github.com/mengyao/Complete-Striped-Smith-Waterman-Library . If you see any other problems we would be glad to know. Thank you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/5#issuecomment-255291908:31,feedback,feedback,31,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/5#issuecomment-255291908,1,['feedback'],['feedback']
Usability,"Hi Joel,. You are running into several usability traps of MMseqs2, that we are currently thinking about how to solve. 1) The prefiltering will stop after --max-seqs sequences. Without any further filtering cut-offs (e.g. --min-ungapped-score) the prefiltering might miss the best hits. Raise the value for this parameter to something like 10000. 2) The default alignment mode uses a sequence identity estimation based on the score per column:; https://github.com/soedinglab/MMseqs2/wiki#how-is-mmseqs-computing-the-sequence-identity. The real sequence identity is not computed in this case. You can pass either pass --alignment-mode 3 or -a to compute the real sequence identity (and the full backtrace in the case of -a). Without the real sequence identity, it is very difficult to distinguish between a 99% and a 100% match. 3) Very short query sequences might not be able to gather enough statistical significance to pass the alignment. Raise the e-value cut-off (-e) for that. 4) Both masking (--mask) and composition bias correction (--comp-bias-corr) can cause a hit to not recognize itself. . Best regards,. Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/48#issuecomment-342108067:39,usab,usability,39,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/48#issuecomment-342108067,1,['usab'],['usability']
Usability,"Hi Milot, thanks for your fast response. The option --pernode is deprecated in openmpi-1.10.3, the recommended option is: ppr:n:node. > -npernode, --npernode <#pernode>; > On each node, launch this many processes. (deprecated in favor of --map-by ppr:n:node) ; ; I'm using machines with 4 sockets and 8 cores+HT per CPU. To keep it simple I'm trying to make it run in just one of them. Following Hristo Iliev comments in https://stackoverflow.com/questions/28216897/syntax-of-the-map-by-option-in-openmpi-mpirun-v1-8 , this is my mpicmd:. ```; #!/bin/bash; mpirun --np 1 --report-bindings --map-by ppr:1:socket:pe=8 --bind-to core ""$@""; ```; And this is my launch script:. ```; #!/bin/bash; rm -rf tmp; mkdir tmp; ldd /ngs/software/mmseqs/mmseqs-MPI; ./mpicmd /ngs/software/mmseqs/mmseqs-MPI search mmseq-testDB /junk/databases/mmseqs/test-nr-50m test-nr50-th32-MPI tmp --threads 8; ```. This should run 1 instance of mmseqs with 8 threads assigned to 1 socket.; This is the std output:; ```; 	linux-vdso.so.1 => (0x00007ffe4cf8f000); 	libmpi_cxx.so.1 => /usr/lib64/openmpi/lib/libmpi_cxx.so.1 (0x00002b8050f24000); 	libmpi.so.12 => /usr/lib64/openmpi/lib/libmpi.so.12 (0x00002b805113f000); 	libstdc++.so.6 => /lib64/libstdc++.so.6 (0x00002b8051423000); 	libm.so.6 => /lib64/libm.so.6 (0x00002b805172c000); 	libgomp.so.1 => /lib64/libgomp.so.1 (0x00002b8051a2e000); 	libgcc_s.so.1 => /lib64/libgcc_s.so.1 (0x00002b8051c54000); 	libpthread.so.0 => /lib64/libpthread.so.0 (0x00002b8051e6a000); 	libc.so.6 => /lib64/libc.so.6 (0x00002b8052086000); 	libopen-rte.so.12 => /usr/lib64/openmpi/lib/libopen-rte.so.12 (0x00002b8052447000); 	libopen-pal.so.13 => /usr/lib64/openmpi/lib/libopen-pal.so.13 (0x00002b80526c4000); 	libdl.so.2 => /lib64/libdl.so.2 (0x00002b8052968000); 	librt.so.1 => /lib64/librt.so.1 (0x00002b8052b6c000); 	libutil.so.1 => /lib64/libutil.so.1 (0x00002b8052d74000); 	libhwloc.so.5 => /lib64/libhwloc.so.5 (0x00002b8052f77000); 	/lib64/ld-linux-x86-64.so.2 (0x00002b8050d02000); 	libn",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230:332,simpl,simple,332,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/34#issuecomment-309699230,1,['simpl'],['simple']
Usability,"Hi There,. I'm having problems trying to install fix #309. https://github.com/soedinglab/MMseqs2/pull/309. When trying to checkout the fix code I get an error.; https://github.com/soedinglab/MMseqs2/pull/309/commits/bff2883f04c9afa8af78cf259c0c1a9f3f719fd1; It appear that this commit is not part of the mmeseq main branch. . see below:. # git clone https://github.com/soedinglab/MMseqs2.git; Cloning into 'MMseqs2'...; remote: Enumerating objects: 284, done.; remote: Counting objects: 100% (284/284), done.; remote: Compressing objects: 100% (206/206), done.; remote: Total 34346 (delta 175), reused 143 (delta 78), pack-reused 34062; Receiving objects: 100% (34346/34346), 27.68 MiB | 13.72 MiB/s, done.; Resolving deltas: 100% (26632/26632), done.; Checking out files: 100% (968/968), done. # git checkout bff2883f04c9afa8af78cf259c0c1a9f3f719fd1; fatal: Not a git repository (or any parent up to mount point /powerapps); Stopping at filesystem boundary (GIT_DISCOVERY_ACROSS_FILESYSTEM not set). I also tried to download the SIMD as a sub module.; https://github.com/simd-everywhere/simde; And integrated it with mmeseq with no success. Can you please share a guide on how to install mmesq2 from source with this fix. Your help is much appreciated. Thanks. BR,; Eyal.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-649299464:1165,guid,guide,1165,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-649299464,1,['guid'],['guide']
Usability,"Hi, ; thanks for the quick response!. I use the latest mmseqs package (15.6f452).; I attach my:; * my 2 fasta files; * the script easy_rbh.py which simply runs ""easy-rbh"", its command line output and the m8 output file (which contains 590 pairs).; * the script my_rbh.py which runs mmseqs createdb+rbh+convertails, its command line output and the m8 output file (which contains 489 pairs). [easy_rbh.log](https://github.com/soedinglab/MMseqs2/files/13336021/easy_rbh.log); [easy_rbh.m8.txt](https://github.com/soedinglab/MMseqs2/files/13336022/easy_rbh.m8.txt); [easy_rbh.py.txt](https://github.com/soedinglab/MMseqs2/files/13336023/easy_rbh.py.txt); [my_rbh.log](https://github.com/soedinglab/MMseqs2/files/13336024/my_rbh.log); [my_rbh.m8.txt](https://github.com/soedinglab/MMseqs2/files/13336025/my_rbh.m8.txt); [my_rbh.py.txt](https://github.com/soedinglab/MMseqs2/files/13336026/my_rbh.py.txt); [UP000000425_122586_protein.fasta.txt](https://github.com/soedinglab/MMseqs2/files/13336156/UP000000425_122586_protein.fasta.txt); [UP000000429_85962_protein.fasta.txt](https://github.com/soedinglab/MMseqs2/files/13336158/UP000000429_85962_protein.fasta.txt)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1808330167:148,simpl,simply,148,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/777#issuecomment-1808330167,1,['simpl'],['simply']
Usability,"Hi, thanks for the quick response! Currently I'm not running any MP, and simply calling mmseqs directly after exporting the bin directory to my path.; When testing the MP mode, I used `srun --ntasks-per-node 1`, and recieved a similar error, however running it without any MP made me think the problem is likely upstream of this.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461538513:73,simpl,simply,73,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461538513,1,['simpl'],['simply']
Usability,"Hi,; I had used the explicit 'split' size, because I intended to create the index on a different machine than the one where the index would be used (which have less RAM). But because I'm now indexing on the fly, I no longer need to fiddle with the 'split' option :) Clearly a local SSD on each node would be ideal, but with index files as large as 200GB per database, this would require either deleting the index file after each job (therefore transferring the index file before each job, too much network traffic) or installing giant SSDs?...",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252569542:266,Clear,Clearly,266,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252569542,1,['Clear'],['Clearly']
Usability,"Hi,; I tried it before, but I found I obtain a clustering TSV file when I used easy workflows for clustering. The TSV file are similiar with the CD-HIT's CLSTR formatted file. I maybe not read the user guide prudentially. By the way, are clustering output results obvious different beween easy workflows and clustering workflows used to clustering the proteins?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/219#issuecomment-512651559:202,guid,guide,202,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/219#issuecomment-512651559,1,['guid'],['guide']
Usability,"I am currently doing a benchmark on clustering algorithms, where I find that Greedy Set Cover would also hugely benefit from this option. This is in line with the guidelines, describing `--cluster-reassign` as the one solution for the cascaded clustering caveat; without this option, there is no certainty that clustering criteria remain fulfilled over multiple cascade steps due to changing representatives.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-776539284:163,guid,guidelines,163,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/400#issuecomment-776539284,1,['guid'],['guidelines']
Usability,"I can't reproduce asan errors (on a simple search at least, the `run_search.sh` script in our regression). With neither gcc-12 nor clang-15. . I enabled the following asan options:; ```; ASAN_OPTIONS=abort_on_error=1:strict_string_checks=1:detect_stack_use_after_return=1:check_initialization_order=1:strict_init_order=1; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/661#issuecomment-1408982829:36,simpl,simple,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/661#issuecomment-1408982829,1,['simpl'],['simple']
Usability,I consider this issue closed. Please open a new issue if you expirience further problems. ; Thanks a lot for you feedback and for benchmarking MMseqs2.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-253720564:113,feedback,feedback,113,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-253720564,1,['feedback'],['feedback']
Usability,"I could use your help again. I am trying to replace hmmer in my work follow with mmseqs, but I am not getting the same results.; I am trying to replace:. ```BASH; hmmsearch --domtblout vogdb_output vogdb_loc query_faa; ```. With some form of:; ```BASH; mmseqs search query_db vogdb_profile vogdb_output tmp_dir -k 5 -s 7.5; # then convertalis; ```. However, when I match output on qId I see that before filtering I have 300 records that are in hmmer output and not in mmseqs output. After filtering the number jumps to 699. There are also some mmseqs hits that are not matched in hmmer about 129, but I am not as worried about extra information. In the end there are 1247 hmmer hits and only 749 mmseqs hits after filtering. . To be clear there are 1533 mmseqs hits before filtering but the 300 hits that were in the filtered hmmer hits are not in the unfiltered mmseqs hits. Any Ideas you have will be much appreciated.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/440#issuecomment-824909985:733,clear,clear,733,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/440#issuecomment-824909985,1,['clear'],['clear']
Usability,"I guess the issue is that the default substitution matrix name and the substitution matrix name that actually gets written into the index is different (see also https://github.com/soedinglab/MMseqs2/issues/204). I have an idea for a hack, but this is a bit tricky to fix with regards to good UX.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/215#issuecomment-507754165:292,UX,UX,292,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/215#issuecomment-507754165,1,['UX'],['UX']
Usability,I had this same issue when trying to use mmseqs2. Are you sure it's safe to simply rename these files?,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-435239641:76,simpl,simply,76,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-435239641,1,['simpl'],['simply']
Usability,"I have found a [wrapper script](https://github.com/soedinglab/MMseqs2/issues/196#issuecomment-485953970) that works in another issue. Alternatively, I also came up with a simple solution:; ```; #!/bin/bash. external-tool <(cat); ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/536#issuecomment-1041133822:171,simpl,simple,171,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/536#issuecomment-1041133822,1,['simpl'],['simple']
Usability,"I hope it would be still very useful to have an option to override `getTotalSystemMemory`. I understand there might be modules that does not have a splitting logic (either it is not implemented yet, or it simply does not make sense) a many other aspects (like the preloading). But I see these as use cases where you simply MUST HAVE enough memory to be able to do the computations (on a system with little physical memory this would lead to swapping). On the other hand, the option to override `getTotalSystemMemory` would allow me to fake the total system memory to keep reasonable memory/computation length trade-off on grid computing architecture with job scheduler.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359804827:205,simpl,simply,205,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359804827,2,['simpl'],['simply']
Usability,"I improved the wiki documentation on how to produce a correct MPI build:; https://github.com/soedinglab/MMseqs2/wiki#how-to-run-mmseqs2-on-multiple-servers-using-mpi. You have to pass the `-DHAVE_MPI=1` parameter during `cmake` invocation or MPI support will not be enabled. We should make this clearer somehow and let MMseqs2 fail more gracefully if called with MPI without having been built with MPI support. If you want a set of stickers (see https://twitter.com/thesteinegger/status/1201076220957315074), send me your address to milot at mirdita de.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/287#issuecomment-597886353:295,clear,clearer,295,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/287#issuecomment-597886353,1,['clear'],['clearer']
Usability,"I just learned that `mmseqs cluster` and `mmseqs clust` were different things, which solved the issue. Apologies for the confusion.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/844#issuecomment-2096686643:7,learn,learned,7,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/844#issuecomment-2096686643,1,['learn'],['learned']
Usability,I moved the feature request to the GitHub project tracker to consider it for the future. If someone is willing to work on this we would be very happy to help guide through the development.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-551237343:158,guid,guide,158,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-551237343,1,['guid'],['guide']
Usability,"I read the wiki and [User Guide](http://mmseqs.com/latest/userguide.pdf).; Although there are examples about `--db-load-mode 2`, none mentions or explains `--db-load-mode 3`.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-995048027:26,Guid,Guide,26,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/517#issuecomment-995048027,1,['Guid'],['Guide']
Usability,"I searched with your example query.fasta (101mA, 10mhA) against the target.fasta (A0A021WW32, A0A021WZA4). MMseqs2 can not detect any alignments. I aligned these sequences with smith waterman and the sequence identity is <= 20%. Is this intended? Maybe you want to use profiles? . Please don't use the parameter --include-id if the query database and target database do not contain the same identifier. The --include-id is just important for clustering. The option --max-seq-id 1.0 is just needed if you try to compute profiles and you don't use profiles in this example. . Could you provide the whole dataset please? So we can test this behavior? I tried to reproduce it with some fasta files on my computer but I was not able to. . Thanks a lot for your feedback.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090:756,feedback,feedback,756,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-247860090,1,['feedback'],['feedback']
Usability,"I think we kept default sensitivity. I assume that sensitivity won't help a lot for short sequence search. The sensitivity parameter controls the number of similar k-mers generated for the double-consecutive-kmer-matching in the prefilter. I assume that using too dissimilar k-mers would result in low scores and e-values. Those would then be rejected anyway.; My assumption might be wrong though, I'd appreciate if you could report what you learn. . I don't think ` --exact-kmer-matching` would be useful as that would disable the similar k-mer generation completely. . `--comp-bias-corr 0` and `--mask 0` might be useful though. We suppress false positives homologes with these parameters. However, we didn't benchmark on super short sequences. They might be doing nothing (as both algorithms use a window-approach), they might work correctly or they might be suppressing true useful hits.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728957193:442,learn,learn,442,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/373#issuecomment-728957193,1,['learn'],['learn']
Usability,"I think you are nearly there, you just have to swap the order or `nrDB` and `resultDB` then it should work. The difference between a taxonomy result and a taxonomy sequence database is not quite clear in the output of MMseqs2, we should improve that.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771803529:195,clear,clear,195,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/401#issuecomment-771803529,1,['clear'],['clear']
Usability,I was sure I was missing something quite simple.; Thanks a lot for your quick reply and have a nice week-end (despite the circumstances).,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/288#issuecomment-598867813:41,simpl,simple,41,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/288#issuecomment-598867813,1,['simpl'],['simple']
Usability,"I would recommend to install MMseqs2 on Windows through WSL2. See the official [WSL guide](https://docs.microsoft.com/en-us/windows/wsl/install) for install instructions. The mingw MMseqs2 version for Windows suffers from relatively poor memory performance in some modules. We tried to improve that, however its still slower than the Linux version. I am not sure what your exact issue is. You might have to try to start MMseqs2 (`mmseqs.bat`) for the first time as administrator, so all links are setup correctly. Subsequent calls should then work without admin rights.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/574#issuecomment-1173277178:84,guid,guide,84,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/574#issuecomment-1173277178,1,['guid'],['guide']
Usability,"I'm already grateful for your attempt!. Let me try to simplify the problem. What I am actually looking for is not all perfectly correct alignment characteristics for a cluster, but rather an estimation of the similarity percentage between the cluster representative and the cluster member, and a start and stop position of the cluster members relative to the cluster representative. Just so I have an idea of how strong the similarity ""edge"" is and where the ""query"" fits on the ""reference"". Would those simplifications make the problem tractable?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/268#issuecomment-581773317:54,simpl,simplify,54,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/268#issuecomment-581773317,2,['simpl'],"['simplifications', 'simplify']"
Usability,"I'm pasting below the whole script I'm trying to run right now:. #!/bin/bash; #SBATCH --job-name=chiro_mt; #SBATCH --output=%x.%j.out; #SBATCH --error=%x.%j.err; #SBATCH --partition=nocona; #SBATCH --nodes=2; #SBATCH --ntasks=256; #SBATCH --reservation=benchmark. module --ignore-cache load gcc/10.2.0 openmpi/4.0.4 . INPUTDIR=~/input; MMSEQ=~/MMseqs2/bin; SPLITS=3; QUERYFASTA=all_species.fasta; QUERYDB=DB. cd $INPUTDIR. mmseqs createdb ""${QUERYFASTA}"" ""${QUERYDB}""; mmseqs splitdb ""${QUERYDB}"" ""${QUERYDB}_split"" --split $SPLITS. for file in $(ls ""$INPUTDIR/${QUERYDB}_split""_*_$SPLITS); do; mmseqs createsubdb ""${file}.index"" ""${QUERYDB}_h"" ""${file}_h""; done. split=0; for file in $(ls ""$INPUTDIR/${QUERYDB}_split""_*_$SPLITS); do; RUNNER=""mpirun -np 128"" bsub mmseqs cluster ""${file}"" DB aln_${split} tmp --cov-mode 1 -c 0.9 --threads 128; ((split++)); done. So far what I understand is that the MPI version is used to run MMseqs2 on multiple servers but to run it in multiple cores, will the ""simple"" version work? I think that for the kind of job I'm doing right now, being able to run it on 128 cores on a single node will be enough, or is the workflow the same for what I pasted above? Thanks a lot.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-844277969:998,simpl,simple,998,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-844277969,1,['simpl'],['simple']
Usability,"I've found that GenBank allows me to download complete bacterial genome assembly fasta files, which I built into a database using 'createdb'. I downloaded a total of 19084 complete genomes and in my database.source file, I see 19084 rows in the file. When I look in the database.index file I have 38630 rows (as I understand it, createdb will break up long sequences into multiple entries to help processing speed). When I run a 'mmseqs search' function for my one query gene against this entire target database of bacterial genomes using a '--max-seqs' value of 40000 (well above the 38630 entries in my database index) and a '-s' value of 7.0 for full pre-filtering sensitivity, my final index statistics tell me that only 18615 alignments were calculated and that only 13173 sequences pairs passed the alignment threshold. . Is it true that a '-s' value of 7.0 applies a list of similar K-mers with only 7 entries for each K-mer during pre-filtering, or is the value 7.0 scaled differently? I ask because a float value seems weird for what would seem to be an integer parameter.. Also, I noticed that in my .m8 result file, none of my alignments have any gaps present. Is this normal? Is it advisable/possible to modify the Smith-Waterman alignment parameters to include gaps in my alignment algorithm to ensure that I'm not screening out a large number of false-negatives?. Also, is it possible to remove repeat rows (2 or more rows corresponding to the same original bacterial target genome) from my result .m8 file in order to determine the final number of bacterial genomes in the total original set (19084 genomes) that aligned successfully to my gene? (basically undoing the breaking up of sequences into multiple entries during 'createdb'). Thank you for all of your help!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/341#issuecomment-670978160:1672,undo,undoing,1672,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/341#issuecomment-670978160,1,['undo'],['undoing']
Usability,"In the user guide there is an example how to turn a SILVA taxonomy into a mmseqs taxonomy database. I think you can use a similar approach for this. Check out ""Create a sequence database with taxonomic information for SILVA"" in the wiki https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment-using-mmseqs-taxonomy",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/244#issuecomment-556828115:12,guid,guide,12,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/244#issuecomment-556828115,1,['guid'],['guide']
Usability,"MMseqs2 could until recently not handle sequences longer than 32768 residues and split longer sequences into multiple entries (with incrementing suffices _0, _1, ...). Recently (use the latest git version), MMseqs2 learned to handle longer sequences.; By default, it will handle up to 65k residue. . By passing `--dont-split-seq-by-len` or `--max-seq-len` with a higher value to `createdb` it should also be able to handle those. Though, this is only a few weeks old and not very heavily battle tested yet. Hope that helps,; Milot",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/97#issuecomment-397043815:215,learn,learned,215,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/97#issuecomment-397043815,1,['learn'],['learned']
Usability,"MMseqs2 uses internally a cascaded workflow. This means it will first cluster with a low sensitivity and get step by step higher ( see https://github.com/soedinglab/MMseqs2/wiki#cascaded-clustering). But there is also a way to recluster clustered databases again to create a hierarchy. Please check out the guide at https://github.com/soedinglab/MMseqs2/wiki#how-to-manually-cascade-cluster. The structure of the clustering (`clust_stepN` files) would look like this . Seq.DB. Clustering Result 1 Clustering Result 2; ID1 ID3 -> ID2, ID7. ID3 -> ID5; ID2 ID5 -> ID1 ID9; ID3 ID9 -> ID8, ID6 ID4; ID4 ID4; ID5; ID6; ID7; ID8; ID9. All entries on the left side of `->` are the keys in the `.index` file. While the right side is in the data file. I do now know how you want to use the hierarchy. If you give us more information, maybe we can help you how to use the tools to achieve it. You could also use profiles to cluster more senstive. See issue https://github.com/soedinglab/MMseqs2/issues/66.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-369612859:307,guid,guide,307,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/68#issuecomment-369612859,1,['guid'],['guide']
Usability,"Much simpler I think. I just wanted to make sure that my very long sequences (2e4 - 2e9 nts) are clustered completely and that `mmseqs linclust` doesn't remove very long sequences. The `--max-seq-length` makes it seem like it would throw out any sequence longer than that which would be the majority in my case, but it looks like this is not the case.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/499#issuecomment-957982550:5,simpl,simpler,5,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/499#issuecomment-957982550,1,['simpl'],['simpler']
Usability,No feedback. I assume its fixed now.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-238199054:3,feedback,feedback,3,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/1#issuecomment-238199054,1,['feedback'],['feedback']
Usability,No problem. I know that the errors are not very clear. We'll try to improve that. :),MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/11#issuecomment-274594720:48,clear,clear,48,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/11#issuecomment-274594720,1,['clear'],['clear']
Usability,"No, I expected more than 566 million of total FASTQ entries. I just clear the log .. but anything else written to sterr just the number of sequences processed.; I am in VirtualBox Ubuntu 16.04 and have 10Go of RAM.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459381114:68,clear,clear,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/157#issuecomment-459381114,1,['clear'],['clear']
Usability,"No, I just saw an ad on Stack Overflow and was randomly looking for something I could improve. It’s not my project, so it’s not for me to judge, but just out of curiosity: why not use unique_ptr instead of manual memory management whenever ownership is clear? It’s safer, shorter (no delete) and has zero overhead. I get that you don’t want to use more questionable C++ features like inheritance, RTTI or exceptions, but zero-cost static GC is the most useful thing you can pick up in C++ coming from C. And range-based for just makes code more readable and thus easier to support. Iterators are out of place there, they’re from a [lower abstraction level](https://www.fluentcpp.com/2016/12/15/respect-levels-of-abstraction/) than the surrounding code. I’ll pass, but thanks :)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/pull/255#issuecomment-563504356:253,clear,clear,253,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/pull/255#issuecomment-563504356,1,['clear'],['clear']
Usability,"None that I know of, also the input fasta is a concatenated output of two linclust runs (merged the two *.clu_rep_seq.fasta with a simple `cat`)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591541137:131,simpl,simple,131,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/280#issuecomment-591541137,1,['simpl'],['simple']
Usability,"OK, maybe I over simplified the question because I was actually counting merged hits with a minimum size of 520 nt (empirical, a bit less than RT size).; I indeed get 37061 hits with mmseqs, 34268 remain after merging overlaping hits, and 1099 merged hits pass the size filter.; With blast+, I get 8159 hits, 6262 merged, and 2947 merged hits pass the size filter.; So yes, I get more raw hits with mmseqs but they are short :(; Sorry for misleading at first !",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/454#issuecomment-843192525:17,simpl,simplified,17,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/454#issuecomment-843192525,1,['simpl'],['simplified']
Usability,"Ok, good to know. Thanks a lot for explaining and also for being so responsive to all my questions, much appreciated.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-617736180:68,responsiv,responsive,68,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/301#issuecomment-617736180,1,['responsiv'],['responsive']
Usability,"Okay, so the option is actually available and should be usable, but we have a bug in the parameter list display and its not shown. I will look into it.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/75#issuecomment-375242026:56,usab,usable,56,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/75#issuecomment-375242026,1,['usab'],['usable']
Usability,Okay. I didn't realize that. I assumed from the wiki page with `createsubdb` grabbing from the index could be equivalent to the fasta file headers. Your way is about what I was doing but with some intermediate python code for extra filtering. First I filter out all hits in the forward search which didn't meet a set bitscore threshold. Could I do this easily with `filterdb`? Next if a query sequence had multiple best hits with the same bitscore in the forward search then I retained all those target sequences for the reverse search. It's an edge case but could be important with our annotation pipeline. On my tests on real data we do see query sequences with multiple best hits when bitscores are less than ~90. Your script is a great first try though. Really clears up how to use the `filterdb` and `createsubdb` commands for me.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462214865:765,clear,clears,765,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/162#issuecomment-462214865,1,['clear'],['clears']
Usability,"Same here, has tracked it down to this command:. mmseqs tar2db /localscratch/users/latest/gtdb.tar.gz /localscratch/users/latest/tardb --tar-include faa$. The problem comes with the regular expresion used in the option --tar-include, I cannot find why, but if you set it with the $ at the end, it doesn't works. If you remove it it works but obviously it is going to accept more files than desired. . I have tried with different regular expressions, scaping the $, quoting it, etc... no one works, it seems like the tar2db is silently failing when you use there any regular expression, but works when you use a simple string.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/561#issuecomment-1120775763:611,simpl,simple,611,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/561#issuecomment-1120775763,1,['simpl'],['simple']
Usability,"Seems like all threads finished except one that is stuck computing the largest (or one of the largest) cluster(s). The main time is being spent in computing context specific pseudo counts, which was implemented a couple versions ago. You can force the simpler pseudo count computation with `--pseudo-cnt-mode 0`. This will result in a slight decrease of profile diversity, though be much faster.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134889688:252,simpl,simpler,252,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134889688,1,['simpl'],['simpler']
Usability,"Something went wrong in the first `kmermatcher` step that produced an invalid database. Now every time you rerun the job it will take the previous result in the `tmp` folder and try to run it through `rescorediagonal` to compute the alignment. Can you clear out the `tmp` folder, rerun the job and post the log? Can't learn much from the `rescorediagonal` call sadly.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537695295:252,clear,clear,252,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/208#issuecomment-537695295,2,"['clear', 'learn']","['clear', 'learn']"
Usability,"Sorry @juefish, your comment get lost among all the closed issues. I outlined some steps in what we need for the XML output below. ## Compilation; Compilation instructions can be found in the wiki:; https://github.com/soedinglab/MMseqs2/wiki#compile-from-source-under-linux. We have also started writing a developer guide with some hints at how we want the code base to look:; https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide. ## Output Type; We also need a new output type `FORMAT_ALIGNMENT_BLAST_XML` here:; https://github.com/soedinglab/MMseqs2/blob/master/src/commons/Parameters.h#L102. ## Implementing XML output; The `convertalis` module responsible for taking in an MMseqs2 alignment result and reformatting it into something that user requested lies here:; https://github.com/soedinglab/MMseqs2/blob/master/src/util/convertalignments.cpp. You can take inspiration from the easier `FORMAT_ALIGNMENT_BLAST_WITH_LEN` case starting in line 606, or the never finished `FORMAT_ALIGNMENT_GFF` case starting in line 661. ## Ensuring XML is valid; We do not want to link a full XML library for MMseqs2. The XML documents should be built by appending strings. To ensure that the document is valid, we have to make sure all dynamic XML arguments are escaped. We have a `std::string escapeAttribute(const std::string& data)` function in:; https://github.com/soedinglab/MMseqs2/blob/master/src/taxonomy/taxonomyreport.cpp. This should be moved to either the `Util` class or a new `XmlUtil` class:; https://github.com/soedinglab/MMseqs2/blob/master/src/taxonomy/taxonomyreport.cpp. We also need a class to escape content inside a XML tag. ## Turning the MMseqs2 database into a single XML document; This will be more tricky. When we pass `--db-output false` to `convertalis` it will create a text-only flat file, without null bytes between output. However to ensure that we have the correct XML prelude and end tag, we don't have a very clean solution. But let's think about that once the ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-559259551:316,guid,guide,316,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/93#issuecomment-559259551,2,"['Guid', 'guid']","['Guide', 'guide']"
Usability,"Sorry for not making the memory limit clear: snakemake is just running qsub jobs for me, and it's just setting different amounts of memory (eg., `qsub -l h_vmem=720G`). . I'll try `--split-memory-limit` and see if it fixes the problem",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452272685:38,clear,clear,38,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/147#issuecomment-452272685,1,['clear'],['clear']
Usability,"TL; DR: Enabling building against shared system libraries gives better modularity and a better end-user experience. The way that the Debian patch works is that on distros such as Debian (and Fedora and Gentoo) the system zstd library can optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development an",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:99,user experience,user experience,99,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,1,['user experience'],['user experience']
Usability,"Thank you for answering so quickly! I have 1,032,373,897 entries in the input database. And setting the memory to 70G worked perfectly. It's now running. I will also look into setting cod-mode to 1. I am running the clustering with several iterations (100%, 95%, 70% .. etc). So doing it with 100% identity will not be my final result. Thank you for the very helpful advice. One thing I noticed is that, without using the split-memory-limit option the database size was 330.652 MB so the program was splitting the database into 3 files, where it probably should have been splitting it into 4 so no file would be greater than 100G. Could this be a simple error of rounding down instead of rounding up?. Thanks again.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/238#issuecomment-549176665:647,simpl,simple,647,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/238#issuecomment-549176665,1,['simpl'],['simple']
Usability,"Thank you for the feedback! I have rewrote the cluster criteria section . (2) a minimum coverage (option -c [0,1], which is defined by the number of aligned residue pairs divided by either the maximum of the length of query/centre and target/non-centre sequences alnRes/max(qLen,tLen) (default mode, --cov-mode 0), or by the length of the target/non-centre sequence alnRes/tLen (--cov-mode 1), or by the length of the query/centre alnRes/qLen (--cov-mode 2);",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/73#issuecomment-375544123:18,feedback,feedback,18,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/73#issuecomment-375544123,1,['feedback'],['feedback']
Usability,Thank you for the very prompt response! Your correction of course solved my problem. I don't see the dual purpose of createtsv as a deficiency at all; I simply missed the the distinction between the command formats. Perhaps adding to the clustering format documentation a line that notes the different createtsv input formats for dual purposes would help avoid confusion.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/319#issuecomment-645040050:153,simpl,simply,153,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/319#issuecomment-645040050,1,['simpl'],['simply']
Usability,Thank you for this question. We have currently not documented this format. Here is the format definition: . ```; (1) Target identifier ; (2) Number of sequences aligning to target; (3) Unique coverage of target uniqueAlignedResidues / totalLength; (4) Target coverage alignedResidues / totalLength; (5) Average sequence identity; ```. I will also added it the user guide.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/390#issuecomment-755029635:365,guid,guide,365,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/390#issuecomment-755029635,1,['guid'],['guide']
Usability,"Thank you for your quick reply. My apologies, I'm not sure how to check the version? I believe I had compiled from source under Linux back in February 25, 2021. Do you recommend that I delete my current installation and re-install everything? (Or is there a way to easily update mmseq2? I can't seem to find such information in the user guide.). One thing that makes me hesitant about deleting everything is that I had downloaded Swiss-Prot using `mmseqs databases` back in February 2021 and I'm not sure if I can download the same dataset again since Swiss-Prot has been updated since then. Thanks again!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/503#issuecomment-965821558:337,guid,guide,337,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/503#issuecomment-965821558,1,['guid'],['guide']
Usability,"Thank you this bug report. The problem is that our `DBReader` searches first for the extension `.[0-9]` if it exists then it knows that it is a multi-part database. In your case your single part database is not seen by the `DBReader` since you have leftover files from your pervious search that uses the same output file name. I currently do not have a solution for this issue. I will discuss this later with @milot-mirdita. For your suggestion to provide a guide for output per module, I totally agree we need this. We might be able to generate something from your command declaration in `MMseqsBase.cpp` since we already define input and output types to validate the user input.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/336#issuecomment-664795094:458,guid,guide,458,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/336#issuecomment-664795094,1,['guid'],['guide']
Usability,Thanks @martin-steinegger ! Sorry I missed that in the docs. A possible usability improvement could be not outputting identity values in `-a false` case.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/116#issuecomment-422870199:72,usab,usability,72,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/116#issuecomment-422870199,1,['usab'],['usability']
Usability,"Thanks Milot!; Indeed it seems that running it with `--format-output fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen` was ended successfully.; Trying to run the `p queryId` after the `bt` when it crashed resulted in the following error:; `(gdb) p queryId; No symbol ""queryId"" in current context.`. I see now that the names of a few of my query IDs are complex/long... So I guess this could be the issue... What would be the best strategy to continue? change the names to something simple like s1, s2, s3, etc., and rerun? Or any other idea? . Thanks!; Haim",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878453492:505,simpl,simple,505,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/471#issuecomment-878453492,1,['simpl'],['simple']
Usability,"Thanks a lot for the help, @milot-mirdita . Build PROFILEDB and search with this was successful.; final steps:; > mmseqs search PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile tmp --threads 10 -a -c 0.8 --cov-mode 2 --add-self-matches ; > mmseqs convertalis PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile pbp.found_with_profile.tsv . At this point, everything okay. ; The step below also was performed nicely without errors. ; > mmseqs extractalignedregion PROFILEDB /databases/fadb/freeze/all.mmseqs pbp.found_with_profile pbp.found_with_profile.ALIGNEDREGION . The crash happens here:; > mmseqs convert2fasta pbp.found_with_profile.ALIGNEDREGIONS pbp.found_with_profile.ALIGNEDREGIONS.fa . With this message:; ```; Program call:; convert2fasta pbp.found_with_profile.ALIGNEDREGIONS pbp.found_with_profile.ALIGNEDREGIONS.fa . MMseqs Version: 	7-4e23d; Use ffindex header	false; Verbosity 	3. Could not open data file pbp.found_with_profile.ALIGNEDREGIONS!; ```. But I realised maybe I did everything wrong. . What I want, actually, is the MSA for each cluster with only aligned regions. ; Also, I want the MSA of aligned regions from a search result. The deal is: I have 501 queries single domain, I would to use this against a 17M sequences DB, since the matches probably have at least 1 region contains the same domain as the query, I would like the MSA or even a sequence DB itself contain **only the regions of the match**. ; Extracting only the region of the matches allow me to infer more accurate alignments and phylogeny. Also allow me build specifics models. . Could you provide me a simple workflow to this task?. Thanks in advance.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458988413:1633,simpl,simple,1633,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/153#issuecomment-458988413,1,['simpl'],['simple']
Usability,"Thanks a lot for your help, Milot! I am sorry for the late response!; I think the newer release made a progress and it seems swapresults does not give the std::bad_alloc error anymore (see the stdout printout below). However now I'm facing a problem with disk-space usage, it seems my run fills up ~1.2 TB and fails since I have no disk space left. Is there any suggestion of how to reduce the needed disk-space? From your guide I understand that reducing `--max-seqs` and `--max-accept` could be the way to go but I was not sure whether indeed this is the correct direction and what would be reasonable values to use. What I actually need, is only the best hit(s) for my queries. I would be thankful for any advice ;-) . My command: ; `Programs/MMSeqs2/mmseqs/bin/mmseqs easy-search --slice-search --search-type 3 --format-output ""query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen"" A2p515F2F4F6.fastq_filtered.fa /tmp/MMSeq_tests/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 MMSeqs2_vs_NT/A2p515F2F4F6_vs_NT_Jan2021.mmseq2.m8 /tmp/tmp_MMSeq2/ 1> A2p515F2F4F6_vs_NT_Jan2021.mmseq2.std 2>&1`. The stdout:; ```; easy-search --slice-search --search-type 3 --format-output query,target,fident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qlen A2p515F2F4F6.fastq_filtered.fa /tmp/MMSeq_tests/nt_MMSeq2_Jan2021/nt_MMSeq2_Jan2021 MMSeqs2_vs_NT/A2p515F2F4F6_vs_NT_Jan2021.mmseq2.m8 /tmp/tmp_MMSeq2/ . MMseqs Version: 	1f302134aa1c6c7c4e2b9da272fd26af33860780; Substitution matrix 	nucl:nucleotide.out,aa:blosum62.out; Add backtrace 	false; Alignment mode 	3; Allow wrapped scoring 	false; E-value threshold 	0.001; Seq. id. threshold 	0; Min alignment length 	0; Seq. id. mode 	0; Alternative alignments 	0; Coverage threshold 	0; Coverage mode 	0; Max sequence length 	65535; Compositional bias 	1; Max reject 	2147483647; Max accept 	2147483647; Include identical seq. id. 	false; Preload mode 	0; Pseudo count a 	1; Pseudo count b 	1.5; Score bias 	0; Realign hits ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476:423,guid,guide,423,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/394#issuecomment-782439476,1,['guid'],['guide']
Usability,"Thanks a lot! I started updating the user guide. That output of the formatalignment should be equivalent to BLAST with the -m 8 parameter. . An excerpt from the upcoming updated documentation:; The file is formatted as a tab-separated lists with 12 columns: (1,2) identifiers for query and target, (3) sequence identity, (4) alignment length, (5) number of mismatches, (6) number of gap openings (7-8, 9-10) match start and end-position in query and in target, (11) E-value, and (12) bit score. --format-mode 1 should work correctly if you execute the search with the --add-backtrace parameter. --format-mode 2 is not implemented yet. Hopefully we can fix this soon and also add warnings if --format-mode 1 is used without backtraces. Edit: Which MMseqs1 tool do you mean?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-244817012:42,guid,guide,42,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-244817012,1,['guid'],['guide']
Usability,"Thanks a lot. Also, I'd like to know if profile generated from search output (simple search, seqs against seqs) can include HSP from some same sequence in different profiles.; I mean, if some protein has 2 domains and two different queries matches with each domain (query 1 -> domain 1; query 2 -> domain 2), the two profiles generated at the end will include the same protein?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/151#issuecomment-455180294:78,simpl,simple,78,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/151#issuecomment-455180294,1,['simpl'],['simple']
Usability,"Thanks for the answer, find below the results. # Result of bt. `#0 0x00000000006c9ef3 in IndexTable::sortDBSeqLists (); #1 0x00007efc5116705f in GOMP_parallel () from /env/ig/soft/ig/gcc-7.3.0/el6-x86_64-generic/lib64/libgomp.so.1; #2 0x00000000006c5935 in IndexBuilder::fillDatabase(IndexTable*, SequenceLookup**, SequenceLookup**, BaseMatrix&, Sequence*, DBReader<unsigned int>*, unsigned long, unsigned long, int, bool, bool) (); #3 0x00000000004e0049 in Prefiltering::getIndexTable (); #4 0x00000000004ebdcd in Prefiltering::Prefiltering(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int, int, Parameters const&) (); #5 0x00000000004df035 in prefilter(int, char const**, Command const&) (); #6 0x00000000004587f0 in runCommand(Command*, int, char const**) (); #7 0x000000000044a1f0 in main ()`. # Result of ps. `Warning: bad syntax, perhaps a bogus '-'? See /usr/share/doc/procps-3.2.8/FAQ; jarnoux 96787 99.4 0.7 5468368 2884544 ? Rl Dec07 993:48 mmseqs prefilter /dev/shm/U5yXKTXUDw/FRAG/panfam_frag_subDB /dev/shm/U5yXKTXUDw/FRAG/panfam_frag_subDB /dev/shm/U5yXKTXUDw/CLUST/PanFam8080/panfam_pref --max-seqs 300 -c 0.8 --comp-bias-corr 1 -s 2 --split-memory-limit 250G --threads 32; jarnoux 150328 0.0 0.0 103360 920 pts/0 S+ 10:14 0:00 grep mmseqs`. # Others. I try to simplify like this prefilter+align = search and prefilter+align+clust=cluster. It's look working for the time.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/382#issuecomment-740497921:1583,simpl,simplify,1583,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/382#issuecomment-740497921,1,['simpl'],['simplify']
Usability,"Thanks for the fast feedback!; Here are the requested info about our architecture. I'll try the two suggestions (no indexing, and indexing without the --split) as soon as our machine is free again (a big cd-hit is swapping like crazy)... ```; $ uname -a . Linux bioinfo 4.4.0-38-generic #57-Ubuntu SMP Tue Sep 6 15:42:33 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux. $ cat /proc/cpuinfo. processor : 23; vendor_id : GenuineIntel; cpu family : 6; model : 62; model name : Intel(R) Xeon(R) CPU E5-2630 v2 @ 2.60GHz; stepping : 4; microcode : 0x416; cpu MHz : 1228.906; cache size : 15360 KB; physical id : 1; siblings : 12; core id : 5; cpu cores : 6; apicid : 43; initial apicid : 43; fpu : yes; fpu_exception : yes; cpuid level : 13; wp : yes; flags : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm epb tpr_shadow vnmi flexpriority ept vpid fsgsbase smep erms xsaveopt dtherm ida arat pln pts; bugs :; bogomips : 5189.25; clflush size : 64; cache_alignment : 64; address sizes : 46 bits physical, 48 bits virtual; power management:; ```",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-250500053:20,feedback,feedback,20,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-250500053,1,['feedback'],['feedback']
Usability,"Thanks for the hint. I'll try that. I'm using redundancy reduced database - pdb_05 is PDB Seqres database clustered with e-value 0.05, and the profiles are generated for pdb_05 sequences on nr70 database, which is nr clustered to 70% sequence identity. As to computer - yes, I'm using 120 cores single machine (it has four Xeons E7-4890 v2). The software; scales up amazingly. Now I'm computing 6it profiles for 31M sequences and; that will be accomplished in few days (prefiltering scores calculation took 65 h 52 m 33s). I see that when calculating S-W alignments the soft crunches the data using all given threads but after finishing million of sequences (or leaning towards finishing that million) it runs gradually on less and lass cores (perhaps some cores were given more time consuming alignments so the program might estimate times and balance threads more efficiently, but this is very minor and would be noticed for users working on big databases only), which might be a speed bottleneck for big dataset such as nr database processed on big machines. In few days I'll start tests also with MPI run, so that mmseqs2 will be ran; on 1600 CPUs on cluster (here I wish the software had used GPUs as the cluster I'm using has additionally some Firepros to use - I write it smiling as MMseqs2 is light years ahead of cd-hit, which I was using to date). I'll give you a feedback on the speed soon then.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733:1374,feedback,feedback,1374,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/66#issuecomment-369633733,1,['feedback'],['feedback']
Usability,"Thanks for the quick and detailed feedback! Partial answer:; 1) awk, zlib, bzip2, and omp are included in the FreeBSD base, so no package dependency needed.; 2) Generally, FreeBSD ports respect the user's env regarding build options and of course the binary package has to be pessimistic about hardware. I'll check on the baseline assumptions and what clang -O2 emits, though. I was also thinking of adding a package message suggesting that it be built from source with more agressive optimizations to get better performance. That's trivial to do with FreeBSD ports. I wanted to sneak the commit in before the quarterly branch coming next week so it's at least available in the next quarterly package set, I haven't put much effort into perfecting it yet. With your feedback I should be able to make some good improvements by then.; 3) Do you actually plan to continue support for 32-bit platforms? It's disabled for many bioinformatics ports already.; I'll look into the rest of your comments ASAP.; BTW, this is the first time in my lengthy career I've ported a C++/cmake project to any platform and got a build with zero warnings on the first try. Somebody on your end is doing some good work. ;-)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867992680:34,feedback,feedback,34,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-867992680,2,['feedback'],['feedback']
Usability,"Thanks for the suggestion. I'll do that for future runs to avoid the huge logfiles. Re: my original problem, I want to mention that I am using a Perl script (which parallel::forkmanager) to fork separate jobs for each sample in my list and then run each sample separately. I tried running mmseqs search with ""--threads 10"" using this same script, but I noticed that the intermediate steps in the command (extractorfs, align etc) all just used one process per sample. I am still trying to figure out if it is because of the parallel script or something to do with mmseqs itself. If I run the same search command on the terminal with ""--threads 10"" it goes fast. ________________________________; From: Martin Steinegger <notifications@github.com>; Sent: Thursday, July 11, 2019 12:55:59 PM; To: soedinglab/MMseqs2; Cc: Dhwani Desai; Mention; Subject: Re: [soedinglab/MMseqs2] Speed up mmseqs for large database and multiple large query sets by loading target into memory (#214). @milot-mirdita<https://github.com/milot-mirdita> noticed that the interactive progress bar could be a problem, in your case it produced at 13GB output. You can turn of the interactive progress bar by setting the environment variable to TTY=0. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/214?email_source=notifications&email_token=ABYZBDOM5JCFUYB7FDWEK7TP65JY7A5CNFSM4H333Q62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODZXE5VI#issuecomment-510545621>, or mute the thread<https://github.com/notifications/unsubscribe-auth/ABYZBDMTYNMFATMDFBRTPR3P65JY7ANCNFSM4H333Q6Q>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405:1056,progress bar,progress bar,1056,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/214#issuecomment-539001405,2,['progress bar'],['progress bar']
Usability,"Thanks for your answer, this is an interesting problem for many machine learning applications to avoid homology leakage. Here biology is not so important (for me at least). We want to be as fair as possible in this case.; ; So, if I understand correctly, this will do some prefiltering and then give back sparse similarity values which is indeed something that can be used for this purpose. Is this still the recommended way to do this, from the [user guide](https://mmseqs.com/latest/userguide.pdf)?. ````; fake_pref qdb tdb allvsallpref; mmseqs align qdb tdb allvsallpref allvsallaln; mmseqs convertalis qdb tdb allvsallaln allvsall.m8; ````. Thank you!; Sincerly,; P.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-2136930199:72,learn,learning,72,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-2136930199,2,"['guid', 'learn']","['guide', 'learning']"
Usability,"Thanks milot-mirdita!. I will take a closer look, but think I may have come up with a solution using bbtools gi2taxid to encode the taxonomy IDs in the fasta headers:. A simple for-do loop script like this:. `for i in *.fna.gz; do; 	F=`basename $i .fna.gz`;. gi2taxid.sh in=${i} out=${F}_taxID.fna.gz \; 	server=t \; 	taxpath=${TAXPATH} \; 	-Xmx64g \; 	pigz=6 unpigz=t bgzip=t preferbgzip=t zl=9;. done;`. This isn't exactly full taxonomy support, but I am then able to pull the taxIDs from either the tophit or lca reports and can analyze them downstream using something like taxonkit (https://bioinf.shenwei.me/taxonkit/). Not as optimal as built in taxonomy support within mmseqs2 and running LCA will be an additional challenge, but it is a partial and useful solution for us. Thanks! Look forward to seeing full NT taxonomy support!",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/412#issuecomment-780925754:170,simpl,simple,170,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/412#issuecomment-780925754,1,['simpl'],['simple']
Usability,Thanks you a lot for analyzing this behaviour. I never ran into this problem since our nodes have 128GB. The best stragety is to keep the index on a local SSD drive if possible. I will add this information to the user guide. However I think the most user will use it like you did since its the most comfortable solution. ; I will think about a away how MMseqs2 can automatically decide whats the best strategy. . Why do you split the database 8 times? MMseqs2 should automatically decide on the best amount of splits if you don't specifiy the `--split` parameter. . If you are more interested in MMseqs2 than you can check out our paper at the biorxiv http://www.biorxiv.org/content/early/2016/10/07/079681.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252406841:218,guid,guide,218,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/3#issuecomment-252406841,1,['guid'],['guide']
Usability,"Thanks, that clears it up.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/45#issuecomment-330902698:13,clear,clears,13,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/45#issuecomment-330902698,1,['clear'],['clears']
Usability,"That is interesting. In that case, I mistakingly drew lines between this option and the explanation on sequence identity computations in the guidelines (Header ""**How does MMseqs2 compute the sequence identity**""). But now I understand that these distance metrics are hardcoded based on which coverage mode is selected. . > ""... and there it allows to switch to picking the cluster representative either by the highest sequence identity or alternatively by alignment score."". I am not sure how that works. the highest sequence identity or alignment score compared to what? Since set cover determines the representatives by the number of edges, is the sequence identity/alignment score for ties?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/414#issuecomment-782179653:141,guid,guidelines,141,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/414#issuecomment-782179653,1,['guid'],['guidelines']
Usability,"That seems to have done it. Nice work!. I'm still not clear on why it was working on your FreeBSD VM or why it works with GCC. From what I can tell, CMPXCHG16B was only lacking on VERY early AMD64 architectures. My hardware is old, but not that old.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870653723:54,clear,clear,54,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/460#issuecomment-870653723,1,['clear'],['clear']
Usability,That usability-pitfall is on our side. Sorry :/,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/762#issuecomment-1791835361:5,usab,usability-pitfall,5,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/762#issuecomment-1791835361,1,['usab'],['usability-pitfall']
Usability,"Thats a bit of a usability trap on our side. `createsubdb` will only create a new subset database for the sequence db, but not for the header db (`_h` suffix). . You can either also create that:; ```; mmseqs createsubdb tcdb_found.clu90 tcdb_found.db_h tcdb_found90.db_h; ```. Or save some space by creating symlinks:; ```; ln -s tcdb_found.db_h tcdb_found90.db_h; ln -s tcdb_found.db_h.index tcdb_found90.db_h.index; ```. Or pass the database with all entries to `result2flat`:; ```; mmseqs result2flat tcdb_found.db tcdb_found.db tcdb_found.clu70rep tcdb_found70.fa --use-fasta-header; ```. Either of these will work. We'll think of something to avoid this trap.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/102#issuecomment-403321117:17,usab,usability,17,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/102#issuecomment-403321117,1,['usab'],['usability']
Usability,"The `--remove-tmp-files` will clear out the `tmp` folder after execution. However, during workflow execution, we do need to keep a lot of files around.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/237#issuecomment-549172339:30,clear,clear,30,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/237#issuecomment-549172339,1,['clear'],['clear']
Usability,"The `taxonomy` workflow is usable for your use case, but still under construction to make it user friendly. Building taxonomy databases is still not straightforward, however, this will change in the next few weeks. . We have only tested taxonomic annotations based on the UniProt KB (for which it should be pretty easy to build a database following the instructions on the [wiki](https://github.com/soedinglab/MMseqs2/wiki#prerequisites)). If you generate a mapping between a NCBI accession and its NCBI taxonomy identifier, you should be able to build an MMseqs2 taxonomy database, but we haven't done that yet ourselves. Also the `taxonomy` workflow requires to run [two additional searches](https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment-using-mmseqs-taxonomy). The second search is quite an expensive operation, since it requires high sensitivity searches against a large database.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299:27,usab,usable,27,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/166#issuecomment-465149299,1,['usab'],['usable']
Usability,"The file used here is [DB.fasta](https://github.com/soedinglab/MMseqs2/blob/master/examples/DB.fasta) , I simply renamed to exp.fa as I was testing in a directory with other similarly named files.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461567909:106,simpl,simply,106,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/679#issuecomment-1461567909,1,['simpl'],['simply']
Usability,The output is kind of mangled. Could you execute both runs with empty `tmp` directories and redirect the whole output to a file please? You might also want to set the `TTY=0` environment variable to disable the progress bar (not sure why it broke so badly in your output.; See: https://github.com/soedinglab/MMseqs2/wiki#environment-variables-used-by-mmseqs2,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824035474:211,progress bar,progress bar,211,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/441#issuecomment-824035474,1,['progress bar'],['progress bar']
Usability,"The point is that `result2msa` create an MSA per each cluster, and even the MSA is in binary format you can visualize the result with a simple `less` but you can't use for other pourpouse. Is there any way, may be using `apply`, to export this binary-MSA output to flat-text? Because I can see the result and It's exactly that I want.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-558554682:136,simpl,simple,136,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/246#issuecomment-558554682,1,['simpl'],['simple']
Usability,"The wiki entry needs a bit work. I recommend using the precomputed index only for very specific cases. You also will likely neither need merge nor concat, they are both for combining two databases in different ways (concat sticks all the entries of one database after the entries of the other one; merge combines database entries). . In your case you should just pass multiple FASTA files to `createdb`. `mmseqs createdb FASTA1.fa FASTA2.fa ... FASTN.fa db`. This will create a `.source` file with:; ```; 1 FASTA1.fa; 2 FASTA2.fa; ...; ```. And these values are the `qsetid` and `qset` (or `tsetid`, `tset`) respectively. Regarding approximate size, you can look up the memory consumption entries in the wiki/user-guide. It more depends on avg length, than max-length.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1734762067:714,guid,guide,714,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/748#issuecomment-1734762067,1,['guid'],['guide']
Usability,"They function and mean the same in nucleotide space. . > On Dec 9, 2021, at 18:59, Florian Plaza Oñate ***@***.***> wrote:; > ; > ﻿; > Hello,; > ; > I would like to perform clustering of a large nucleotide sequence with the easy-clust .; > However, it is not clear for me whether the ""--min-seq-id"" and ""-c"" parameters refer to alignments in nucleotide space or alignments in amino-acid space after sequence translation.; > ; > Thanks,; > Florian; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or unsubscribe.; > Triage notifications on the go with GitHub Mobile for iOS or Android.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/512#issuecomment-989770755:259,clear,clear,259,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/512#issuecomment-989770755,1,['clear'],['clear']
Usability,"This is a bit of a problem of confusing documentation. `convertalis` is never called in the taxonomy workflow. You can instead pass the parameter `--tax-output-mode 1` to get only an alignment result and then call `lca` and `convertalis` separately:. ```; mmseqs taxonomy $OUT/seqtable_queryDB $DB $OUT/taxonomyResult tmp_aa -a --start-sens 1 --sens-steps 3 -s 7 --search-type 2 --tax-output-mode 1; mmseqs convertalis $OUT/seqtable_queryDB $DB $OUT/taxonomyResult $OUT/aln.m8 --format-output ""query,target,pident,alnlen,mismatch,gapopen,qstart,qend,tstart,tend,evalue,bits,qaln,taln""; mmseqs lca $OUT/seqtable_queryDB $DB $OUT/taxonomyResult $out/lcaDB --tax-lineage true --lca-ranks ""superkingdom:phylum:class:order:genus:species""; mmseqs createtsv $OUT/seqtable_queryDB $out/lcaDB $OUT/lca.tsv; ```. We'll think how to make this clearer or how to allow to add alignment information to a taxonomy result.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/226#issuecomment-526769228:832,clear,clearer,832,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/226#issuecomment-526769228,1,['clear'],['clearer']
Usability,"This is for the clu70 machine running 998c50a:; ```; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>); at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008a28f6 in GOMP_parallel (); #6 0x000000000065bbd3 in result2profile (argc=<optimized out>, argv=<optimized out>, command=..., returnAlnRes=<optimized out>); at /home/vsts/work/1/s/src/util/result2profile.cpp:140; #7 0x0000000000427a67 in runCommand (p=0x1e903c0, argc=argc@entry=6, argv=argv@entry=0x7fff44ebc578); at /home/vsts/work/1/s/src/commons/Application.cpp:47; #8 0x000000000040e7d6 in main (argc=8, argv=0x7fff44ebc568) at /home/vsts/work/1/s/src/commons/Application.cpp:203; ```. This is the for clu90 machine running 15.6f452; ```; #0 futex_wait (val=0, addr=0x5f8465e1c2c4) at ../../../libgomp/config/linux/x86/futex.h:97; #1 do_wait (addr=addr@entry=0x5f8465e1c2c4, val=val@entry=0); at ../../../libgomp/config/linux/wait.h:67; #2 0x00007f7069056753 in gomp_team_barrier_wait_end (bar=0x5f8465e1c2c0, state=0); at ../../../libgomp/config/linux/bar.c:112; #3 0x00007f7069055daa in gomp_work_share_end () at ../../../libgomp/work.c:254; #4 0x00005f846452c867 in result2profile(int, char const**, Command const&, bool) [clone ._omp_fn.0]; (); #5 0x00007f706904f583 in GOMP_parallel (; fn=0x5f846452bc00 <result2profile(int, char const**, Command const&, bool) [clone ._omp_fn.0]>,; data=0x7",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134805988:597,clear,clear,597,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134805988,1,['clear'],['clear']
Usability,"To be clear, as far as I can tell, `mmseqs taxonomy` is completely unusable due to this bug. I'm surprised others have not commented on this earlier. I've reproduced this error multiple times, so it's not stochastic.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-484228558:6,clear,clear,6,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/188#issuecomment-484228558,1,['clear'],['clear']
Usability,"To utilize the taxonomy features in MMseqs2/Foldseek, you must first label the sequences in your database with taxonomy IDs. You can find detailed instructions on how to do this in our user guide wiki: https://github.com/soedinglab/MMseqs2/wiki#taxonomy-assignment. I recommend posting this question on the FoldSeek GitHub page. :)",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/683#issuecomment-1474073582:190,guid,guide,190,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/683#issuecomment-1474073582,1,['guid'],['guide']
Usability,"Using the HMMER3 hmms is probably a bad idea, they already include pseudocounts, which will negatively affect the sensitivity of MMseqs2. . I am currently evaluating all those tools again, but I don't have a clear recommendation yet. . If your first sequence in the alignment is not a real query, then your two options are to use `hhconsensus` + `msa2profile` or `hhconsensus` + `hhmake -nocontxt -diff 1000` (way slower) + `convertprofiledb`. `msa2profile` is the newer tool as not as well tested as `convertprofiledb`. The testing we already did indicates that it is working well though.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344565989:208,clear,clear,208,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/51#issuecomment-344565989,1,['clear'],['clear']
Usability,"We currently don't support global alignments. It should be not too difficult to integrate a fast NW implementation as a separate MMseqs2 module. However, since none of us is working with global alignments, this would be a very low priority feature. The `--global-alignment` parameter is really badly named and does something unrelated for normal searches. We really should remove it. Either [opal](https://github.com/Martinsos/opal) or [parasail](https://github.com/jeffdaily/parasail) might serve as the base for the implementation. If you are interested in contributing this feature we could help guide you through.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-518442291:599,guid,guide,599,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-518442291,1,['guid'],['guide']
Usability,"We did tag a commit id for the Nature Biotech publication through [Zenodo](https://zenodo.org/record/840208). We had many important improvements since then though, on speed, user experience and also new modules.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/46#issuecomment-339923168:174,user experience,user experience,174,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/46#issuecomment-339923168,1,['user experience'],['user experience']
Usability,"We do not currently have a very easy way to limit memory. For the prefilter (main module for normal sequences searches) you can specify an appropriate `--split` value, that will then reduce the required memory to (I think there is an error in the user guide, have to double check, but this should be the correct formula):. ```; (7 byte * N * L) / #splits + 8 byte * 21^k; ```. We have two more very memory intense modules:`swapresults` and `kmermatcher`. These are very important for profile searches and linclust. Their splitting logic is however not exposed to the command line interface yet. The clustering module also can use a lot of memory, but if you stay with the default cascaded clustering that should not become an issue. A hack to limit how much memory `swapresults`, `kmermatcher` and `prefilter` will use, would be to manually edit `size_t Util::getTotalSystemMemory()` in `commons/Util.cpp`. We will discuss what we can do about this limiting memory issue internally and get back to you.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065:252,guid,guide,252,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/58#issuecomment-359788065,1,['guid'],['guide']
Usability,"We don't have any need internally at the moment for global alignments, so we don't really plan on implementing real global alignments. We would be happy for external contributions or guiding someone through the implementation though. What exactly is the purpose of global protein alignments in your case? Generally we would solve this problem through a high bi-directional coverage cut-off (See https://github.com/soedinglab/MMseqs2/wiki#how-to-set-the-right-alignment-coverage-to-cluster).",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696187082:183,guid,guiding,183,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/223#issuecomment-696187082,1,['guid'],['guiding']
Usability,"We don't implement any clustering like that, as its usually biologically not very meaningful. You can compute a sparse all-vs-all search and cluster based on scores with whatever clustering algorithm you prefer that, e.g. scikit-learn implements. You might want to increase `--num-seqs` in this case though, to report more than the top-300 alignments.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-1903314008:229,learn,learn,229,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/801#issuecomment-1903314008,1,['learn'],['learn']
Usability,"We finished the SIMDe integration yesterday. Please use the main MMseqs2 git. I am happy for any feedback since this is fresh from the oven, but please make a new issue.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-649410251:97,feedback,feedback,97,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-649410251,1,['feedback'],['feedback']
Usability,We integrated the MMseqs2 regression test into the git repository. See:; https://github.com/soedinglab/MMseqs2/wiki/MMseqs2-Developer-Guide#regression-test,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-539000656:134,Guid,Guide,134,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/25#issuecomment-539000656,1,['Guid'],['Guide']
Usability,"What exactly are you doing there? Is this a nucl-nucl or nucl-protein search? MMseqs2 will usually take characters until the first whitespace in the FASTA header as the identifier (if it does not recognize the format, it has a separate parsing logic for e.g. Uniprot format etc). I'd suggest you write a simple `awk` script that trims the suffix.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773916:304,simpl,simple,304,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/163#issuecomment-462773916,1,['simpl'],['simple']
Usability,Yes! This module is quite special and therefore creates usability issues. Sorry for the inconvenience.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/194#issuecomment-486890444:56,usab,usability,56,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/194#issuecomment-486890444,1,['usab'],['usability']
Usability,"Yes, the TSV file can take quite some space. We often thought about binary based formats but decided to not do this for the sake of usability. The problem with hdf is that it can not be processed in parallel.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/524#issuecomment-1027631944:132,usab,usability,132,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/524#issuecomment-1027631944,1,['usab'],['usability']
Usability,"Yes, this exactly the definition. I should write this more clearly in the documentation.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/245#issuecomment-558095189:59,clear,clearly,59,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/245#issuecomment-558095189,1,['clear'],['clearly']
Usability,"Yes, this is a limitation of MMseqs. We split sequences by default after 32000 residues (in the Uniclust database, even after 14000). Sequences that were split will get suffices _0 to _N for N-1 splits. I will have to make that clearer in the documentation.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-248667513:228,clear,clearer,228,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/2#issuecomment-248667513,1,['clear'],['clearer']
Usability,"Yes, this is indeed a counter intuitive behavior. The reason is that cascaded clustering has a big effect on the runtime. Linclust performs the following steps: ; (1) `kmermatcher`<- assign sequences to cluster centroids ; (2) `rescorediagonal` <- using some fast ungapped alignment between centroids and members ; (3) `clust` <- clusters the sequences that already passed the alignment criteria and remove them from the remaining set ; (4) `rescorediagonal` <- remove hits that have a low chance to fulfil the alignment criteria ; (5) `align` <- align the remaining hits with Gotoh-Smith-Waterman . The more sequences that Linclust filters at an early stage (3) the faster the algorithm runs since the slowest part is the Gotoh-Smith-Waterman algorithm.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-695797950:30,intuit,intuitive,30,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/351#issuecomment-695797950,1,['intuit'],['intuitive']
Usability,You are running a very old version of MMseqs2. Please update to the latest version. Especially cluster updating had multiple severe issues before the latest release. It was also spending 35h in the very simple module `result2repseq`. I think I fixed the performance issue in the latest commit cc7d7da30ec779d6a2e886438f8295f59e2192f1. You'll find statically compiled binaries here in about one hour: https://mmseqs.com/latest. Cluster updating also doesn't interact very nicely with the `easy-` workflows yet. I'd recommend to stick to the basic commands as shown in the user guide.,MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441:203,simpl,simple,203,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"You should read the SLURM documentation for the difference between `--ntasks` and `--cpus-per-task`. Generally you should only run 1 task per MPI node (or just 1 task in the simple case). And the set `--cpus-per-task` to the number of cores the node has. If you run more than 1 task per machine, MMseqs2 and SLURM will interact badly. The parallelization approach we use is called a Hybrid OpenMP/MPI approach.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-849696337:174,simpl,simple,174,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/455#issuecomment-849696337,1,['simpl'],['simple']
Usability,"Your initial idea is sound. The only problem is that `extractalignedregion` does not really support it since it was built for one very specific purpose and should be generalized. I started working on that though I don't quite have time to finish it up. I have an idea for a hack though:; ```; mmseqs prefixid aln aln.tsv --tsv; awk '{ $1 = NR++; print $0; }' aln.tsv > aln_new.tsv; mmseqs tsv2db aln_new.tsv aln_new --output-dbtype 5; mmseqs extractalignedregion query target aln_new target_new --threads 1; awk '{ print $2; }' aln.tsv > target_ids.tsv; mmseqs createsubdb target_ids.tsv target_h target_new_h; sort -k2,2 target_new_h.index | awk '{ $1 = NR++; print $0; }' > target_new_h.index_new; mv -f target_new_h.index_new target_new_h.index; mmseqs cluster target_new clu tmp; ```; I wrote this down without testing, but this should create a valid domain sequence database from the alignment result. If you are interested in actually fixing the `extractalignedregion` module in the MMseqs2 codebase then I could also try guiding you through that.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499599504:1028,guid,guiding,1028,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/210#issuecomment-499599504,1,['guid'],['guiding']
Usability,"[bioseq@compute-0-294 ~]$ lscpu; Architecture: x86_64; CPU op-mode(s): 32-bit, 64-bit; Byte Order: Little Endian; CPU(s): 24; On-line CPU(s) list: 0-23; Thread(s) per core: 1; Core(s) per socket: 12; Socket(s): 2; NUMA node(s): 4; Vendor ID: AuthenticAMD; CPU family: 16; Model: 9; Model name: AMD Opteron(tm) Processor 6172; Stepping: 1; CPU MHz: 800.000; CPU max MHz: 2100.0000; CPU min MHz: 800.0000; BogoMIPS: 4200.23; Virtualization: AMD-V; L1d cache: 64K; L1i cache: 64K; L2 cache: 512K; L3 cache: 5118K; NUMA node0 CPU(s): 0-5; NUMA node1 CPU(s): 6-11; NUMA node2 CPU(s): 18-23; NUMA node3 CPU(s): 12-17; Flags: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx mmxext fxsr_opt pdpe1gb rdtscp lm 3dnowext 3dnow constant_tsc art rep_good nopl nonstop_tsc extd_apicid amd_dcm pni monitor cx16 popcnt lahf_lm cmp_legacy svm extapic cr8_legacy abm sse4a misalignsse 3dnowprefetch osvw ibs skinit wdt nodeid_msr hw_pstate npt lbrv svm_lock nrip_save pausefilter",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-641389444:1014,pause,pausefilter,1014,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/310#issuecomment-641389444,1,['pause'],['pausefilter']
Usability,"`dbtype` is a recent development that is going to help a lot with usability with some planned enhancements, such as automatic validation of input database types (which is a huge usability pitfall currently). `tsv2db` needs a flag to specify what the output dbtype is supposed to be. I'll add that soon. The requirement for the indexed database format (the file itself and the corresponding `.index` files) exist since the beginning of mmseqs' development. There is no other feasible solution to fast linear and random access in millions or billions of entries that we are currently handling. . How can we improve the user experience with regards to workflow management systems in your view?",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-458961987:66,usab,usability,66,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/155#issuecomment-458961987,3,"['usab', 'user experience']","['usability', 'user experience']"
Usability,"an optionally be built/packaged/installed both static and shared. Packages that can be built shared get built shared and will get marked for updating when the shared library updates to an incompatible version. Packages like MMseqs that will only build static require the static package/flag and should, in principle, get updated any time the static library gets updated. The latter mechanism is not as reliable and requires more rebuilds, which is why distros prefer that executables can be built with shared libraries. This request I'm making to you now is part of the acceptance QC for that the distro gateway person will check off. If upstream (you) says that building shared is a WONTFIX, then I'll probably just put up my hands and move on. I understand your point about xxhash being pinned to a tested version. But it's a better practice to have the package pinned to a specific, internal version by default, but enable packagers to use the system version at their own risk. Why? Because you can't test and optimize the library and compiler flags for all the architectures out there and also because fixes and optimizations show up all the time. A highly-optimized distro such as Clear Linux may have optimizations and bug fixes that neither you nor a packager like me has access to at your release time. This is especially true for unusual architectures (e.g., AVX512) and for common-but-new architectures (e.g., Zen3 or M1), and especially for widely-used libraries like those for hashing and compression that make heavy use of SIMD optimizations. . Putting on my computational biologist hat for a moment, when one is doing a long-running project where reproducibility is key, I'll put the binaries in a container with all dependencies pinned. Development and short projects always lean heavily on the distro. As for bugs, you can always strongly suggest that bug reports and issues be filed against your own project-compiled binaries and test against those binaries first when tracking bugs.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463:1421,Clear,Clear,1421,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/411#issuecomment-777671463,1,['Clear'],['Clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 9 (LWP 7909 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized o",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:21249,clear,clear,21249,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 10 (LWP 7910 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:20319,clear,clear,20319,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 11 (LWP 7911 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:19389,clear,clear,19389,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 12 (LWP 7912 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:18459,clear,clear,18459,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 13 (LWP 7913 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:17529,clear,clear,17529,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 14 (LWP 7914 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:16599,clear,clear,16599,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 15 (LWP 7915 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:15669,clear,clear,15669,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 16 (LWP 7916 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:14739,clear,clear,14739,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 17 (LWP 7917 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:13809,clear,clear,13809,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 20 (LWP 7920 ""mmseqs""):; #0 MathUtil::NormalizeTo1 (def_array=0x0, length=20, array=0x7ecabcfc9220) at /home/vsts/work/1/s/src/commons/MathUtil.h:248; #1 PSSMCalculator::computeContextSpecificWeights (this=this@entry=0x7f1ffd7dbc10, matchWeight=0x7ee3e2190040, wg=0x7ee412750010, Neff_M=<optimized out>, queryLength=queryLength@entry=8032918, setSize=setSize@entry=1, X=0x7f20081f9a70) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:533; #2 0x00000000006c9cd5 in PSSMCalculator::computePSSMFromMSA (this=this@entry=0x7f1ffd7dbc10, setSize=setSize@entry=1, queryLength=8032918, msaSe",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:10920,clear,clear,10920,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 21 (LWP 7921 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:9990,clear,clear,9990,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 22 (LWP 7922 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:9060,clear,clear,9060,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 23 (LWP 7923 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:8130,clear,clear,8130,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 24 (LWP 7924 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:7200,clear,clear,7200,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 25 (LWP 7925 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:6270,clear,clear,6270,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 26 (LWP 7926 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:5340,clear,clear,5340,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:3413,clear,clear,3413,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 29 (LWP 7929 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:2483,clear,clear,2483,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 31 (LWP 7931 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 30 (LWP 7930 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:1553,clear,clear,1553,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"etSize@entry=1, queryLength=8032918, msaSeqs=0x7f20081f9a70, wg=<optimized out>, scoreBias=scoreBias@entry=0) at /home/vsts/work/1/s/src/alignment/PSSMCalculator.cpp:163; #3 0x000000000065834b in _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:263; #4 0x00000000008ab97e in gomp_thread_start (); #5 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #6 0x0000000000964ff3 in clone (). Thread 19 (LWP 7919 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 18 (LWP 7918 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:12879,clear,clear,12879,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"lion sequences and used in different projects already. As it seems, It may not be good idea to use db files from easy-cluster output. Do you think it is useful to create a new db (EBdb) out of easy-cluster output of the previous run, using rep_seq.fasta, and use EBdb as a template to compare newer sequences I want to cluster and finally update the EBdb to EBdb_new?. Intikhab. --; --; Intikhab Alam, PhD. Research Scientist; Computational Bioscience Research Centre (CBRC), Building #3, Office #4328; 4700 King Abdullah University of Science and Technology (KAUST); Thuwal 23955-6900, KSA; W: http://www.kaust.edu.sa<https://webmail.kaust.edu.sa/owa/redir.aspx?C=wkduJ0ChSE-OkyUQwL9vutDH6L5Gg9EImiJ7GyYOxcPLuActd9iwo85DHDgQZup2zR1MyXCk7as.&URL=http%3a%2f%2fwww.kaust.edu.sa>; T +966 (0) 2 808-2423 F +966 (2) 802 0127; ________________________________; From: Milot Mirdita <notifications@github.com>; Sent: 08 September 2020 12:42; To: soedinglab/MMseqs2; Cc: Intikhab S. Alam; Author; Subject: Re: [soedinglab/MMseqs2] updating a near complete mmseq clustered db (#348). You are running a very old version of MMseqs2. Please update to the latest version. Especially cluster updating had multiple severe issues before the latest release. It was also spending 35h in the very simple module result2repseq. I think I fixed the performance issue in the latest commit cc7d7da<https://github.com/soedinglab/MMseqs2/commit/cc7d7da30ec779d6a2e886438f8295f59e2192f1>. You'll find statically compiled binaries here in about one hour: https://mmseqs.com/latest. Cluster updating also doesn't interact very nicely with the easy- workflows yet. I'd recommend to stick to the basic commands as shown in the user guide. -; You are receiving this because you authored the thread.; Reply to this email directly, view it on GitHub<https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688751441>, or unsubscribe<https://github.com/notifications/unsubscribe-auth/AAV63EW3N5Z32FV3JA5T3JDSEX37XANCNFSM4Q7W6YLA>.",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688772337:1565,simpl,simple,1565,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/348#issuecomment-688772337,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"niref90_cleaned_DB_v5 result/taxonomyResult_prokka_${task_id}/taxonomyResult_${task_id}_prokka result/taxonomyResult_prokka_${task_id}_cleanDB_report_v5; # to krona; mmseqs taxonomyreport mmseq2DB/uniref90_cleaned_DB_v5 result/taxonomyResult_prokka_${task_id}/taxonomyResult_${task_id}_prokka result/taxonomyResult_${task_id}_prokka_cleanDB_v5.html --report-mode 1; ``` . Part of the report shows:; ```commandline; 0.0989	1	0	genus	2903100	 Mariniplasma; 0.0989	1	1	species	2735436	 Mariniplasma anaerobium; 0.0989	1	0	class	1912503	 Candidatus Izimaplasma; 0.0989	1	0	order	2975519	 Candidatus Izemoplasmatales; 0.0989	1	0	family	2975520	 Candidatus Izemoplasmataceae; 0.0989	1	0	genus	2975521	 Xianfuyuplasma; 0.0989	1	1	species	2782163	 Xianfuyuplasma coldseepsis; ```; In theory the ""Candidatus"" should be removed by filter. (just in case, I have checked other Candidatus exist in DB is already removed); ; I search if the ""Candidatus Izimaplasma"" is in uniref90.fsa, but there is not. ; (And the taxon id for this specie is not exist in uniref90.fsa). And then I search the same word in ""uniref90_cleaned_DB_v5_h"" :; ```bash; grep ""Candidatus Izimaplasma"" uniref90_cleaned_DB_v5_h --text | head -n 5; UniRef90_A0A2A1ZTN3 Uncharacterized protein n=1 Tax=Candidatus Izimaplasma sp. ZiA1 TaxID=2024899 RepID=A0A2A1ZTN3_9BACT; UniRef90_A0A2A1ZRW6 Cadmium-translocating P-type ATPase n=1 Tax=Candidatus Izimaplasma sp. ZiA1 TaxID=2024899 RepID=A0A2A1ZRW6_9BACT; UniRef90_A0A2A1ZNE5 ATP-dependent RecD-like DNA helicase n=1 Tax=Candidatus Izimaplasma sp. ZiA1 TaxID=2024899 RepID=A0A2A1ZNE5_9BACT; UniRef90_A0A094INE2 Peptidase family S41 n=1 Tax=Candidatus Izimaplasma sp. HR2 TaxID=1541960 RepID=A0A094INE2_9BACT; UniRef90_A0A094KYW2 Internalin-A n=1 Tax=Candidatus Izimaplasma sp. HR2 TaxID=1541960 RepID=A0A094KYW2_9BACT; ```; I suppose that something happens when I use the createtaxdb to create the targetDB, but I'm not sure about what it is... ; I hope my description is clear for you. Thanks,",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/676#issuecomment-1458067706:2980,clear,clear,2980,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/676#issuecomment-1458067706,1,['clear'],['clear']
Usability,"nsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; --Type <RET> for more, q to quit, c to continue without paging--c; #7 0x0000000000964ff3 in clone (). Thread 28 (LWP 7928 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1496; #4 _Z14result2profileiPPKcRK7Commandb._omp_fn.0(void) () at /home/vsts/work/1/s/src/util/result2profile.cpp:280; #5 0x00000000008ab97e in gomp_thread_start (); #6 0x00000000008befc9 in start_thread (arg=<optimized out>) at pthread_create.c:477; #7 0x0000000000964ff3 in clone (). Thread 27 (LWP 7927 ""mmseqs""):; #0 0x00000000008ae21c in gomp_team_barrier_wait_end (); #1 0x00000000008ad719 in gomp_work_share_end (); #2 0x0000000000657e72 in std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::_M_erase_at_end (this=<optimized out>, __pos=<optimized out>) at /usr/include/c++/9/bits/stl_vector.h:1795; #3 std::vector<std::vector<unsigned char, std::allocator<unsigned char> >, std::allocator<std::vector<unsigned char, std::allocator<unsigned char> > > >::clear (this=<optimized ",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608:4410,clear,clear,4410,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/848#issuecomment-2134846608,1,['clear'],['clear']
Usability,"the counting k-mers shows the usual progress bar, fails after that. the progress bar seems tad faster than it should be, so I think the k-mers get discarded after creation",MatchSource.ISSUE_COMMENT,soedinglab,MMseqs2,15-6f452,https://github.com/soedinglab/MMseqs2/issues/293#issuecomment-604517220:36,progress bar,progress bar,36,https://github.com/soedinglab/mmseqs2/wiki,https://github.com/soedinglab/MMseqs2/issues/293#issuecomment-604517220,2,['progress bar'],['progress bar']
