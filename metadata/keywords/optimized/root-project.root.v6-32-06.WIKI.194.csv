quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Usability,"3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""G"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""TANH|50,TANH|50,TANH|50,LINEAR"" [Layout of the network.]; : ErrorStrategy: ""SUMOFSQUARES"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIERUNIFORM"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; DNN_CPU : [datasetreg] : Create Transformation ""G"" with events from all classes.; : ; : Transformation, Variable selection : ; : Input : var",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:3791,Learn,LearningRate,3791,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Learn'],['LearningRate']
Usability,"3., 3.);; h->SetDirectory(0);; h->FillRandom(""gaus"", 1000);; return h;; }. TProcPool pool;; auto hist = pool.MapReduce(CreateAndFillHists, 10, PoolUtils::ReduceObjects);; hist->DrawClone();; }; Tutorials illustrating other usages of the new class TProcPool are available under tutorials/multicore.; Language Bindings; Notebooks; We provided integration of ROOT with the Jupyter technology, integrating ROOT with Python Notebooks and providing a ROOT Kernel like functionality - de facto an enhanced C++ web based shell. Tab completion, output and graphics inlining have been added. These functionalities are automatically available upon import of the ROOT module in a Notebook or at startup of a ROOT prompt kernel. We made it easier to use ROOT notebooks locally, by providing a ‘root –notebook’ command option to start a local notebook server customised with all the ROOT features.; New tutorials and code examples have been provided. The simplest example showing the integration of ROOT with the notebook technology can be found here and many more snippets here.; Support for capturing large outputs (stderr/stdout) coming from C++ libraries has been added.; JavaScript ROOT. support registered in THttpServer commands with arguments.; provide workaround for websites using require.js and older jquery-ui; support custom requests to remote objects, demonstrated in httptextlog.C tutorial; rewrite draw.htm (page for individual object drawing) to support all custom features as main gui does; See also the JSRoot 3.9 examples page and the JSRoot 3.9 release notes. Class Reference Guide; The ROOT reference guide is moving to the Doxygen system. Doxygen is the de-facto standard for code documentation. It offers many nice features we are now exploring and trying to get the best of them. Having MathJax rendered math formula is one of them. The documentation can be structured in a more logical way using groups. Still there is a lot to do but big progresses have been done. We developed also a Dox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v606/release-notes.html:22116,simpl,simplest,22116,doc/v606/release-notes.html,https://root.cern,https://root.cern/doc/v606/release-notes.html,1,['simpl'],['simplest']
Usability,"3.9 Locking the Pad; You can make the TPad non-editable. Then no new objects can be added, and the existing objects and the pad can not be changed with the mouse or programmatically. By default the TPad is editable.; TPad::SetEditable(kFALSE); 9.4 Graphical Objects; In this paragraph, we describe the various simple 2D graphical objects defined in ROOT. Usually, one defines these objects with their constructor and draws them with their Draw() method. Therefore, the examples will be very brief. Most graphical objects have line and fill attributes (color, width) that will be described in “Graphical objects attributes”. If the user wants more information, the class names are given and they may refer to the online developer documentation. This is especially true for functions and methods that set and get internal values of the objects described here. By default 2D graphical objects are created in User Coordinates with (0, 0) in the lower left corner.; 9.4.1 Lines, Arrows and Polylines; The simplest graphical object is a line. It is implemented in the TLine class. The line constructor is:; TLine(Double_t x1,Double_t y1,Double_t x2,Double_t y2); The arguments x1, y1, x2, y2 are the coordinates of the first and second point. It can be used:; root[] l = new TLine(0.2,0.2,0.8,0.3); root[] l->Draw(); The arrow constructor is:; TArrow(Double_t x1, Double_t y1,; Double_t x2, Double_t y2,; Float_t arrowsize, Option_t *option); It defines an arrow between points x1,y1 and x2,y2. The arrow size is in percentage of the pad height. The option parameter has the following meanings:; “>”; “<|”; “<”; “|>”; “<>”; “<|>”; Once an arrow is drawn on the screen, one can:. click on one of the edges and move this edge.; click on any other arrow part to move the entire arrow. Different arrow formats. If FillColor is 0, an open triangle is drawn; else a full triangle is filled with the set fill color. If ar is an arrow object, fill color is set with:; ar.SetFillColor(icolor);; Where icolor is the c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:319737,simpl,simplest,319737,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simplest']
Usability,"30 if (line1[0].GetX()) gVirtualX->DrawPolyLine(2,line1);; 11331 if (nbins>1 && line1[0].GetX()) {; 11332 gVirtualX->DrawPolyLine(2,line2);; 11333 gVirtualX->DrawPolyLine(2,line3);; 11334 gVirtualX->DrawPolyLine(2,line4);; 11335 gVirtualX->DrawPolyLine(5,endface1);; 11336 gVirtualX->DrawPolyLine(5,endface2);; 11337 }; 11338 xx[0] = xaxis->GetBinCenter(binx);; 11339 xx[1] = yaxis->GetBinCenter(biny);; 11340 xx[2] = zaxis->GetXmin();; 11341 view->WCtoNDC(xx,u);; 11342 line1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11343 line1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11344 xx[2] = zaxis->GetXmax();; 11345 view->WCtoNDC(xx,u);; 11346 line1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11347 line1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11348 gVirtualX->DrawPolyLine(2,line1);; 11349 if (nbins>1) {; 11350 xx[2] = zaxis->GetXmin();; 11351 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11352 xx[0] = xaxis->GetBinCenter(binx);; 11353 view->WCtoNDC(xx,u);; 11354 line2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11355 line2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11356 xx[2] = zaxis->GetXmax();; 11357 view->WCtoNDC(xx,u);; 11358 line2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11359 line2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11360 ; 11361 xx[2] = zaxis->GetXmin();; 11362 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11363 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11364 view->WCtoNDC(xx,u);; 11365 line3[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11366 line3[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11367 xx[2] = zaxis->GetXmax();; 11368 view->WCtoNDC(xx,u);; 11369 line3[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11370 line3[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11371 ; 11372 xx[2] = zaxis->GetXmin();; 11373 xx[1] = yaxis->GetBinCenter(biny);; 11374 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11375 view->WCtoNDC(xx,u);; 11376 line4[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11377 line4[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11378 xx[2] = zaxis->GetXmax();; 11379 view->WCtoN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:411830,ux,uxmin,411830,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"30 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,rect2);; 11765 }; 11766 c->Clear();; 11767 c->cd();; 11768 TH2 *hp = (TH2*)h3->Project3D(""yz"");; 11769 xaxis->SetRange(first,last);; 11770 if (hp) {; 11771 hp->SetFillColor(38);; 11772 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYZ of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11773 else hp->SetTitle(TString::Format(""ProjectionYZ, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11774 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11775 hp->SetYTitle(fH->GetYax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:428254,ux,uxmin,428254,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"3065///; 3066/// See the THistPainter class for a description of all the drawing options.; 3067 ; 3068void TH1::Draw(Option_t *option); 3069{; 3070 TString opt1 = option; opt1.ToLower();; 3071 TString opt2 = option;; 3072 Int_t index = opt1.Index(""same"");; 3073 ; 3074 // Check if the string ""same"" is part of a TCutg name.; 3075 if (index>=0) {; 3076 Int_t indb = opt1.Index(""["");; 3077 if (indb>=0) {; 3078 Int_t indk = opt1.Index(""]"");; 3079 if (index>indb && index<indk) index = -1;; 3080 }; 3081 }; 3082 ; 3083 // If there is no pad or an empty pad the ""same"" option is ignored.; 3084 if (gPad) {; 3085 if (!gPad->IsEditable()) gROOT->MakeDefCanvas();; 3086 if (index>=0) {; 3087 if (gPad->GetX1() == 0 && gPad->GetX2() == 1 &&; 3088 gPad->GetY1() == 0 && gPad->GetY2() == 1 &&; 3089 gPad->GetListOfPrimitives()->GetSize()==0) opt2.Remove(index,4);; 3090 } else {; 3091 //the following statement is necessary in case one attempts to draw; 3092 //a temporary histogram already in the current pad; 3093 if (TestBit(kCanDelete)) gPad->Remove(this);; 3094 gPad->Clear();; 3095 }; 3096 gPad->IncrementPaletteColor(1, opt1);; 3097 } else {; 3098 if (index>=0) opt2.Remove(index,4);; 3099 }; 3100 ; 3101 AppendPad(opt2.Data());; 3102}; 3103 ; 3104////////////////////////////////////////////////////////////////////////////////; 3105/// Copy this histogram and Draw in the current pad.; 3106///; 3107/// Once the histogram is drawn into the pad, any further modification; 3108/// using graphics input will be made on the copy of the histogram,; 3109/// and not to the original object.; 3110/// By default a postfix ""_copy"" is added to the histogram name. Pass an empty postfix in case; 3111/// you want to draw a histogram with the same name; 3112///; 3113/// See Draw for the list of options; 3114 ; 3115TH1 *TH1::DrawCopy(Option_t *option, const char * name_postfix) const; 3116{; 3117 TString opt = option;; 3118 opt.ToLower();; 3119 if (gPad && !opt.Contains(""same"")) gPad->Clear();; 3120 TString ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:123206,Clear,Clear,123206,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['Clear'],['Clear']
Usability,"31 - menu with histogram drawing options;; 32 - user commands may be executed within the viewer and the current command; 33 can be echoed;; 34 - current 'Draw' event loop is reflected by a progress bar and may be; 35 interrupted by the user;; 36 - all widgets have self-explaining tool tips and/or context menus;; 37 - expressions/leaves can be dragged to a 'scan box' and scanned by; 38 double-clicking this item. The result can be redirected to an ASCII file;; 39 ; 40### The layout has the following items:; 41 ; 42 - a menu bar with entries : File, Edit, Run, Options and Help;; 43 - a toolbar in the upper part where you can issue user commands, change; 44 the drawing option and the histogram name, three check buttons Hist, Rec; 45 and Scan.HIST toggles histogram drawing mode, REC enables recording of the; 46 last command issued and SCAN enables redirecting of TTree::Scan command in; 47 an ASCII file (see -Scanning expressions-);; 48 - a button bar in the lower part with : buttons DRAW/STOP that issue histogram; 49 drawing and stop the current command respectively, two text widgets where; 50 input and output event lists can be specified, a message box and a RESET; 51 button on the right that clear edited expression content (see Editing...); 52 - a tree-type list on the main left panel where you can select among trees or; 53 branches. The tree/branch will be detailed in the right panel.; 54 Mapped trees are provided with context menus, activated by right-clicking;; 55 - a view-type list on the right panel. The first column contain X, Y and; 56 Z expression items, an optional cut and ten optional editable expressions.; 57 Expressions and leaf-type items can be dragged or deleted. A right click on; 58 the list-box or item activates context menus.; 59 ; 60### Opening a new tree and saving a session :; 61 ; 62 To open a new tree in the viewer use `<File/Open tree file>` menu; 63The content of the file (keys) will be listed. Use `<SetTreeName>` function; 64from the context me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeViewer_8cxx_source.html:2874,clear,clear,2874,doc/master/TTreeViewer_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeViewer_8cxx_source.html,1,['clear'],['clear']
Usability,"32 auto &shape_descr = MakeShapeDescr(shape);; 1933 ; 1934 res->ri = shape_descr.rndr_info(); // temporary pointer, can be used preserved for short time; 1935 }; 1936 }; 1937 ; 1938 return res;; 1939}; 1940 ; 1941/////////////////////////////////////////////////////////////////////////////////; 1942/// Select top node by path; 1943/// Used by the client to change active node; 1944/// Returns true if selected node was changed; 1945 ; 1946bool RGeomDescription::SelectTop(const std::vector<std::string> &path); 1947{; 1948 TLockGuard lock(fMutex);; 1949 ; 1950 RGeomBrowserIter iter(*this);; 1951 ; 1952 if (!iter.Navigate(path)); 1953 return false;; 1954 ; 1955 auto stack = MakeStackByIds(iter.CurrentIds());; 1956 if (stack == fSelectedStack); 1957 return false;; 1958 ; 1959 fSelectedStack = stack;; 1960 ; 1961 ClearDrawData();; 1962 ; 1963 return true;; 1964}; 1965 ; 1966/////////////////////////////////////////////////////////////////////////////////; 1967/// Set visibility of physical node by path; 1968/// It overrules TGeo visibility flags - but only for specific physical node; 1969 ; 1970bool RGeomDescription::SetPhysNodeVisibility(const std::vector<std::string> &path, bool on); 1971{; 1972 TLockGuard lock(fMutex);; 1973 ; 1974 RGeomBrowserIter giter(*this);; 1975 ; 1976 if (!giter.Navigate(path)); 1977 return false;; 1978 ; 1979 auto stack = MakeStackByIds(giter.CurrentIds());; 1980 ; 1981 auto nodeid = giter.GetNodeId();; 1982 ; 1983 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++) {; 1984 auto res = compare_stacks(iter->stack, stack);; 1985 ; 1986 if (res == 0) {; 1987 bool changed = iter->visible != on;; 1988 if (changed) {; 1989 iter->visible = on;; 1990 ClearDrawData();; 1991 ; 1992 // no need for custom settings if match with description; 1993 if ((fDesc[nodeid].vis > 0) == on); 1994 fVisibility.erase(iter);; 1995 }; 1996 ; 1997 return changed;; 1998 }; 1999 ; 2000 if (res > 0) {; 2001 fVisibility.emplace(iter, stack, on);; 2002 ClearDr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:59378,Clear,ClearDrawData,59378,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDrawData']
Usability,"32.cxx. ◆ CheckEvent(). Bool_t TGWin32::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TGWin32::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 1596 of file TGWin32.cxx. ◆ CloseWindow1(). void TGWin32::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 1604 of f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57650,Clear,ClearWindow,57650,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['ClearWindow']
Usability,"32.exe; #Unix.*.Print.Command: a2ps -P%p --landscape --columns=2 --margin=30 -rf8.0 %f; Print.Printer: 32-rb20-hp; Print.Directory: .; Print.FileType: pdf; Default histogram binnings used by TTree::Draw() method.; Hist.Binning.1D.x: 100; Hist.Binning.2D.x: 40; Hist.Binning.2D.y: 40; Hist.Binning.2D.Prof: 100; Hist.Binning.3D.x: 20; Hist.Binning.3D.y: 20; Hist.Binning.3D.z: 20; Hist.Binning.3D.Profx: 100; Hist.Binning.3D.Profy: 100; Default statistics names used for parameters in TPaveStats:; Hist.Stats.Entries Entries; Hist.Stats.Mean Mean; Hist.Stats.MeanX Mean x; Hist.Stats.MeanY Mean y; Hist.Stats.RMS RMS; Hist.Stats.RMSX RMS x; Hist.Stats.RMSY RMS y; Hist.Stats.Underflow Underflow; Hist.Stats.Overflow Overflow; Hist.Stats.Integral Integral; Hist.Stats.Skewness Skewness; Hist.Stats.SkewnessX Skewness x; Hist.Stats.SkewnessY Skewness y; Hist.Stats.Kurtosis Kurtosis; Hist.Stats.KurtosisX Kurtosis x; Hist.Stats.KurtosisY Kurtosis y; 28.6.2 THtml Specific Settings; See the reference guide documentation of THtml class at https://root.cern/doc/master/classTHtml.html for more details.; XHTML content charset (see http://www.w3.org/TR/2002/REC-xhtml1-20020801, default: ISO-8859-1) is set by:; Root.Html.Charset:; Stem of a search engine for the documentation, where %s is replaced by the term entered in the search text box (example: http://www.google.com/search?q=%s+site%3Aroot.cern.ch%2Froot%2Fhtml, default is """"); Root.Html.Search:; Link to the site’s search engine (default: """", example: http://root.cern.ch/root/Search.phtml); Root.Html.SearchEngine:; String to prepend to TClass::GetImplFileName() names containing directories when looking for source files (default: """", example: ../root); Root.Html.SourcePrefix:; Link stem to ViewCVS entry for classes, where a class name is assumed to match a file name (default: """", example: http://root.cern.ch/viewcvs).; Root.Html.ViewCVS:; Stem of the CERN XWho system (default: http://consult.cern.ch/xwho/people?); Root.Html.XWho:; If se",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1258160,guid,guide,1258160,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guide']
Usability,"3268 // Copy MakeClass status.; 3269 newtree->SetMakeClass(fMakeClass);; 3270 ; 3271 // Copy branch addresses.; 3272 CopyAddresses(newtree);; 3273 ; 3274 //; 3275 // Copy entries if requested.; 3276 //; 3277 ; 3278 if (nentries != 0) {; 3279 if (fastClone && (nentries < 0)) {; 3280 if ( newtree->CopyEntries( this, -1, option, false ) < 0 ) {; 3281 // There was a problem!; 3282 Error(""CloneTTree"", ""TTree has not been cloned\n"");; 3283 delete newtree;; 3284 newtree = nullptr;; 3285 return nullptr;; 3286 }; 3287 } else {; 3288 newtree->CopyEntries( this, nentries, option, false );; 3289 }; 3290 }; 3291 ; 3292 return newtree;; 3293}; 3294 ; 3295////////////////////////////////////////////////////////////////////////////////; 3296/// Set branch addresses of passed tree equal to ours.; 3297/// If undo is true, reset the branch addresses instead of copying them.; 3298/// This ensures 'separation' of a cloned tree from its original.; 3299 ; 3300void TTree::CopyAddresses(TTree* tree, bool undo); 3301{; 3302 // Copy branch addresses starting from branches.; 3303 TObjArray* branches = GetListOfBranches();; 3304 Int_t nbranches = branches->GetEntriesFast();; 3305 for (Int_t i = 0; i < nbranches; ++i) {; 3306 TBranch* branch = (TBranch*) branches->UncheckedAt(i);; 3307 if (branch->TestBit(kDoNotProcess)) {; 3308 continue;; 3309 }; 3310 if (undo) {; 3311 TBranch* br = tree->GetBranch(branch->GetName());; 3312 tree->ResetBranchAddress(br);; 3313 } else {; 3314 char* addr = branch->GetAddress();; 3315 if (!addr) {; 3316 if (branch->IsA() == TBranch::Class()) {; 3317 // If the branch was created using a leaflist, the branch itself may not have; 3318 // an address but the leaf might already.; 3319 TLeaf *firstleaf = (TLeaf*)branch->GetListOfLeaves()->At(0);; 3320 if (!firstleaf || firstleaf->GetValuePointer()) {; 3321 // Either there is no leaf (and thus no point in copying the address); 3322 // or the leaf has an address but we can not copy it via the branche; 3323 // this will be c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:130661,undo,undo,130661,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['undo'],['undo']
Usability,"32VirtualXProxy.cxx:44; namechar name[80]Definition TGX11.cxx:110; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TAttFill::GetFillColorvirtual Color_t GetFillColor() constReturn the fill area color.Definition TAttFill.h:30; TAttFill::Copyvoid Copy(TAttFill &attfill) constCopy this fill attributes to a new TAttFill.Definition TAttFill.cxx:207; TAttFill::GetFillStylevirtual Style_t GetFillStyle() constReturn the fill area style.Definition TAttFill.h:31; TAttFill::Modifyvirtual void Modify()Change current fill area attributes if necessary.Definition TAttFill.cxx:216; TAttFill::fFillStyleStyle_t fFillStyleFill area style.Definition TAttFill.h:23; TAttFill::~TAttFillvirtual ~TAttFill()AttFill destructor.Definition TAttFill.cxx:200; TAttFill::fFillColorColor_t fFillColorFill area color.Definition TAttFill.h:22; TAttFill::TAttFillTAttFill()AttFill default constructor.Definition TAttFill.cxx:179; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttFill::SetFillColorAlphavirtual void SetFillColorAlpha(Color_t fcolor, Float_t falpha)Set a transparent fill color.Definition TAttFill.cxx:265; TAttFill::SetFillAttributesvirtual void SetFillAttributes()Invoke the DialogCanvas Fill attributes.Definition TAttFill.cxx:254; TAttFill::ResetAttFillvirtual void ResetAttFill(Option_t *option="""")Reset this fill attributes to default values.Definition TAttFill.cxx:230; TAttFill::IsTransparentvirtual Bool_t IsTransparent() constDefinition TAttFill.h:44; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttFill::SaveFillAttributesvirtual void SaveFillAttributes(std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001)Save fill attributes as C++ statement(s) on output stream out.Definition TAttFill.cxx:239; bool. corebaseincTAttFill.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttFill_8h_source.html:6166,Guid,Guide,6166,doc/master/TAttFill_8h_source.html,https://root.cern,https://root.cern/doc/master/TAttFill_8h_source.html,1,['Guid'],['Guide']
Usability,"332 ; 333 ; 334 /**; 335 fit using user provided FCN with Minuit-like interface; 336 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 337 For the options same consideration as in the previous method; 338 */; 339 typedef void (* MinuitFCN_t )(int &npar, double *gin, double &f, double *u, int flag);; 340 bool FitFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 341 ; 342 /**; 343 set objective function using user provided FCN with Minuit-like interface; 344 If npar = 0 it is assumed that the parameters are specified in the parameter settings created before; 345 For the options same consideration as in the previous method; 346 */; 347 bool SetFCN( MinuitFCN_t fcn, int npar = 0, const double *params = nullptr, unsigned int dataSize = 0, int fitType = 0);; 348 ; 349 /**; 350 Perform a fit with the previously set FCN function. Require SetFCN before; 351 */; 352 bool FitFCN();; 353 ; 354 /**; 355 Perform a simple FCN evaluation. FitResult will be modified and contain the value of the FCN; 356 */; 357 bool EvalFCN();; 358 ; 359 ; 360 ; 361 /**; 362 Set the fitted function (model function) from a parametric function interface; 363 */; 364 void SetFunction(const IModelFunction & func, bool useGradient = false);; 365 ; 366 /**; 367 Set the fitted function (model function) from a vectorized parametric function interface; 368 */; 369#ifdef R__HAS_VECCORE; 370 template <class NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 371 void SetFunction(const IModelFunction_v &func, bool useGradient = false);; 372 ; 373 template <class NotCompileIfScalarBackend = std::enable_if<!(std::is_same<double, ROOT::Double_v>::value)>>; 374 void SetFunction(const IGradModelFunction_v &func, bool useGradient = true);; 375#endif; 376 /**; 377 Set the fitted function from a parametric 1D function interface; 378 */; 379 void SetFunction(const IM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:14570,simpl,simple,14570,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['simpl'],['simple']
Usability,"34 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafElement::Class()); // STL or user-defined class; 176 if (isLeafList && isClass); 177 return R__FAIL(""unsupported: classes in leaf list, branch "" + std::string(b->GetName()));; 178 if (isLeafList && ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6192,clear,clear,6192,doc/master/RNTupleImporter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html,1,['clear'],['clear']
Usability,"34 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,rect2);; 11765 }; 11766 c->Clear();; 11767 c->cd();; 11768 TH2 *hp = (TH2*)h3->Project3D(""yz"");; 11769 xaxis->SetRange(first,last);; 11770 if (hp) {; 11771 hp->SetFillColor(38);; 11772 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYZ of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11773 else hp->SetTitle(TString::Format(""ProjectionYZ, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11774 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11775 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11776 hp->SetZTitle(""Number of Entries"");; 11777 hp->Draw(fShowOption.Data());; 11778 }; 11779 }; 11780 break;; 11781 ; 11782 case 9:; 11783 // ""zy"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:428423,ux,uxmin,428423,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"35_0[nx] = {0.75, -3.30, -0.92, 0.10, 0.08, -1.69, -1.29, -2.37};; float d_35_1[nx] = {1.01, -3.02, -0.65, 0.37, 0.34, -1.42, -1.02, -2.10};. TCanvas *cbh = new TCanvas(""cbh"",""cbh"",400,600);; cbh->SetGrid();. gStyle->SetHistMinimumZero();. TH1F *h1bh = new TH1F(""h1bh"",""Option HBAR centered on 0"",nx,0,nx);; h1bh->SetFillColor(4);; h1bh->SetBarWidth(0.4);; h1bh->SetBarOffset(0.1);; h1bh->SetStats(0);; h1bh->SetMinimum(-5);; h1bh->SetMaximum(5);. for (i=1; i<=nx; i++) {; h1bh->Fill(os_X[i-1], d_35_0[i-1]);; h1bh->GetXaxis()->SetBinLabel(i,os_X[i-1]);; }. h1bh->Draw(""hbar"");. TH1F *h2bh = new TH1F(""h2bh"",""h2bh"",nx,0,nx);; h2bh->SetFillColor(38);; h2bh->SetBarWidth(0.4);; h2bh->SetBarOffset(0.5);; h2bh->SetStats(0);; for (i=1;i<=nx;i++) h2bh->Fill(os_X[i-1], d_35_1[i-1]);. h2bh->Draw(""hbar same"");. return cbh;; }; TH2Poly Drawing; TH2Poly can be drawn as a color plot (option COL).; TH2Poly bins can have any shapes. The bins are defined as graphs. The; following macro is a very simple example showing how to book a TH2Poly and draw; it. Picture; Source. {; TCanvas *ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; TH2Poly *h2p = new TH2Poly();; h2p->SetName(""h2poly_name"");; h2p->SetTitle(""h2poly_title"");; Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 4.7, 3.5};; h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(4, x3, y3);; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; Double_t fx[] = {0.1, -0.5, -0.7, 1};; Double_t fy[] = {0.01, -0.5, -0.5, 3};; Double_t fw[] = {3, 1, 1, 1.5};; h2p->FillN(4, fx, fy, fw);; gStyle->SetPalette(1);; h2p->Draw(""col"");; return ch2p1;; }; Rectangular bins are a frequent case. The method AddBinBox allows; to define them more easily like shown in the following example. Picture; Source. //This tutorial illustrates how to create an histogram with p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/THistPainter.html:54527,simpl,simple,54527,root/html528/THistPainter.html,https://root.cern,https://root.cern/root/html528/THistPainter.html,1,['simpl'],['simple']
Usability,"35_RDFFromPandas.py;   Read data from Pandas Data Frame into RDataFrame. ;  ;  df036_missingBranches.C;   ;  ;  df036_missingBranches.py;  ;  df037_TTreeEventMatching.C;   ;  ;  df037_TTreeEventMatching.py;  ;  df101_h1Analysis.C;   Show how to express ROOT's standard H1 analysis with RDataFrame. ;  ;  df102_NanoAODDimuonAnalysis.C;   Show how NanoAOD files can be processed with RDataFrame. ;  ;  df102_NanoAODDimuonAnalysis.py;   Show how NanoAOD files can be processed with RDataFrame. ;  ;  df103_NanoAODHiggsAnalysis.C;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ;  df103_NanoAODHiggsAnalysis.py;   An example of complex analysis with RDataFrame: reconstructing the Higgs boson. ;  ;  df103_NanoAODHiggsAnalysis_python.h;  Header file with functions needed to execute the Python version of the NanoAOD Higgs tutorial. ;  ;  df104_HiggsToTwoPhotons.py;   The Higgs to two photons analysis from the ATLAS Open Data 2020 release, with RDataFrame. ;  ;  df105_WBosonAnalysis.py;   The W boson mass analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ;  df106_HiggsToFourLeptons.C;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ;  df106_HiggsToFourLeptons.py;   The Higgs to four lepton analysis from the ATLAS Open Data release of 2020, with RDataFrame. ;  ;  df107_SingleTopAnalysis.py;   A single top analysis using the ATLAS Open Data release of 2020, with RDataFrame. ;  ;  distrdf001_spark_connection.py;   Configure a Spark connection and fill two histograms distributedly. ;  ;  distrdf002_dask_connection.py;   Configure a Dask connection and fill two histograms distributedly. ;  ;  distrdf003_live_visualization.py;   Configure a Dask connection and visualize the filling of a 1D and 2D histograms distributedly. ;  ;  distrdf004_dask_lxbatch.py;  . tutorialsdataframe. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html:6496,Guid,Guide,6496,doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,https://root.cern,https://root.cern/doc/master/dir_a1b0d055c02f6056ea201bfa3ee242a7.html,1,['Guid'],['Guide']
Usability,"360/// If this branch is a branch count, return the set of collection size for; 361/// the entry range requested; 362/// start: first entry to read and return information about; 363/// len: number of entries to read.; 364const TLeaf::Counts_t *TLeaf::GetLeafCountValues(Long64_t start, Long64_t len); 365{; 366 if (len <= 0 || !IsRange()); 367 return nullptr;; 368 ; 369 if (fLeafCountValues) {; 370 if (fLeafCountValues->fStartEntry == start && len < (Long64_t)fLeafCountValues->fValues.size()); 371 {; 372 return &fLeafCountValues->fValues;; 373 }; 374 if (start >= fLeafCountValues->fStartEntry &&; 375 (start+len) <= (Long64_t)(fLeafCountValues->fStartEntry + fLeafCountValues->fValues.size())); 376 {; 377 auto &values(fLeafCountValues->fValues);; 378 values.erase(values.begin(), values.begin() + start-fLeafCountValues->fStartEntry);; 379 return &values;; 380 }; 381 } else {; 382 fLeafCountValues = new LeafCountValues();; 383 }; 384 ; 385 ; 386 fLeafCountValues->fValues.clear();; 387 fLeafCountValues->fValues.reserve(len);; 388 fLeafCountValues->fStartEntry = start;; 389 ; 390 auto branch = GetBranch();; 391 Long64_t orig_leaf_entry = branch->GetReadEntry();; 392 for (Long64_t idx = 0; idx < len; ++idx) {; 393 branch->GetEntry(start + idx);; 394 auto size = static_cast<Int_t>(GetValue());; 395 fLeafCountValues->fValues.push_back( size );; 396 }; 397 branch->GetEntry(orig_leaf_entry);; 398 return &(fLeafCountValues->fValues);; 399}; 400 ; 401////////////////////////////////////////////////////////////////////////////////; 402/// Return the number of effective elements of this leaf, for the current entry.; 403 ; 404Int_t TLeaf::GetLen() const; 405{; 406 if (fLeafCount) {; 407 // -- We are a varying length array.; 408 Int_t len = Int_t(fLeafCount->GetValue());; 409 if (len > fLeafCount->GetMaximum()) {; 410 Error(""GetLen"", ""Leaf counter is greater than maximum! leaf: '%s' len: %d max: %d"", GetName(), len, fLeafCount->GetMaximum());; 411 len = fLeafCount->GetMaximum();; 412 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TLeaf_8cxx_source.html:12366,clear,clear,12366,doc/master/TLeaf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TLeaf_8cxx_source.html,1,['clear'],['clear']
Usability,"375 of file TGWin32.cxx. ◆ ChangeWindowAttributes(). void TGWin32::ChangeWindowAttributes ; (; Window_t ; id, . SetWindowAttributes_t * ; attr . ). overridevirtual . Change window attributes. ; Reimplemented from TVirtualX.; Definition at line 6330 of file TGWin32.cxx. ◆ CheckEvent(). Bool_t TGWin32::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 5804 of file TGWin32.cxx. ◆ Class(). static TClass * TGWin32::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGWin32::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGWin32::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGWin32.h. ◆ ClearArea(). void TGWin32::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the bakcground color. ; Reimplemented from TVirtualX.; Definition at line 6398 of file TGWin32.cxx. ◆ ClearWindow() [1/2]. void TGWin32::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 1569 of file TGWin32.cxx. ◆ ClearWindow() [2/2]. void TGWin32::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 6728 of file TGWin32.cxx. ◆ CloseDisplay(). void TGWin32::CloseDisplay ; (; ). overridevirtual . close display (terminate server/gMainThread thread) ; Reimplemented from TVirtualX.; Definition at line 899 of file TGWin32.cxx. ◆ ClosePixmap(). void TGWin32::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 1588 of file TGWin32.cxx. ◆ CloseWindow(). void TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32.html:57392,Clear,ClearArea,57392,doc/master/classTGWin32.html,https://root.cern,https://root.cern/doc/master/classTGWin32.html,1,['Clear'],['ClearArea']
Usability,"38 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,rect2);; 11765 }; 11766 c->Clear();; 11767 c->cd();; 11768 TH2 *hp = (TH2*)h3->Project3D(""yz"");; 11769 xaxis->SetRange(first,last);; 11770 if (hp) {; 11771 hp->SetFillColor(38);; 11772 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYZ of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx)));; 11773 else hp->SetTitle(TString::Format(""ProjectionYZ, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11774 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11775 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11776 hp->SetZTitle(""Number of Entries"");; 11777 hp->Draw(fShowOption.Data());; 11778 }; 11779 }; 11780 break;; 11781 ; 11782 case 9:; 11783 // ""zy""; 11784 {; 11785 Int_t first = xaxis->GetFirst();; 11786 Int_t last = xaxis->GetLast();; 11787 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11788 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:428592,ux,uxmin,428592,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,39 of file TBranchProxyClassDescriptor.h. ◆ fContainerName. TString ROOT::Internal::TBranchProxyClassDescriptor::fContainerName. private . Definition at line 34 of file TBranchProxyClassDescriptor.h. ◆ fInfo. TVirtualStreamerInfo* ROOT::Internal::TBranchProxyClassDescriptor::fInfo. private . Definition at line 41 of file TBranchProxyClassDescriptor.h. ◆ fIsClones. ELocation ROOT::Internal::TBranchProxyClassDescriptor::fIsClones. private . Definition at line 33 of file TBranchProxyClassDescriptor.h. ◆ fIsLeafList. bool ROOT::Internal::TBranchProxyClassDescriptor::fIsLeafList. private . Definition at line 35 of file TBranchProxyClassDescriptor.h. ◆ fListOfBaseProxies. TList ROOT::Internal::TBranchProxyClassDescriptor::fListOfBaseProxies. private . Definition at line 32 of file TBranchProxyClassDescriptor.h. ◆ fListOfSubProxies. TList ROOT::Internal::TBranchProxyClassDescriptor::fListOfSubProxies. private . Definition at line 31 of file TBranchProxyClassDescriptor.h. ◆ fMaxDatamemberType. UInt_t ROOT::Internal::TBranchProxyClassDescriptor::fMaxDatamemberType. private . Definition at line 43 of file TBranchProxyClassDescriptor.h. ◆ fRawSymbol. TString ROOT::Internal::TBranchProxyClassDescriptor::fRawSymbol. private . Definition at line 38 of file TBranchProxyClassDescriptor.h. ◆ fSplitLevel. UInt_t ROOT::Internal::TBranchProxyClassDescriptor::fSplitLevel. private . Definition at line 36 of file TBranchProxyClassDescriptor.h. ◆ fSubBranchPrefix. TString ROOT::Internal::TBranchProxyClassDescriptor::fSubBranchPrefix. private . Definition at line 40 of file TBranchProxyClassDescriptor.h. Libraries for ROOT::Internal::TBranchProxyClassDescriptor:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/TBranchProxyClassDescriptor.h; tree/treeplayer/src/TBranchProxyClassDescriptor.cxx. ROOTInternalTBranchProxyClassDescriptor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:22164,Guid,Guide,22164,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,1,['Guid'],['Guide']
Usability,"398 // points to permit zooming on the full range.; 1399 rwxmin = uxmin;; 1400 rwxmax = uxmax;; 1401 npt = 100;; 1402 if (theNpoints > npt) npt = theNpoints;; 1403 TH1F *h = new TH1F(TString::Format(""%s_h"",GetName()),GetTitle(),npt,rwxmin,rwxmax);; 1404 theGraph->SetHistogram(h);; 1405 if (!theGraph->GetHistogram()) return;; 1406 theGraph->GetHistogram()->SetMinimum(rwymin);; 1407 theGraph->GetHistogram()->SetMaximum(rwymax);; 1408 theGraph->GetHistogram()->GetYaxis()->SetLimits(rwymin,rwymax);; 1409 theGraph->GetHistogram()->SetBit(TH1::kNoStats);; 1410 theGraph->GetHistogram()->SetDirectory(nullptr);; 1411 theGraph->GetHistogram()->Sumw2(kFALSE);; 1412 theGraph->GetHistogram()->Paint(chopth); // Draw histogram axis, title and grid; 1413 } else {; 1414 if (gPad->GetLogy()) {; 1415 theGraph->GetHistogram()->SetMinimum(rwymin);; 1416 theGraph->GetHistogram()->SetMaximum(rwymax);; 1417 theGraph->GetHistogram()->GetYaxis()->SetLimits(rwymin,rwymax);; 1418 }; 1419 theGraph->GetHistogram()->Sumw2(kFALSE);; 1420 theGraph->GetHistogram()->Paint(chopth); // Draw histogram axis, title and grid; 1421 }; 1422 }; 1423 ; 1424 // Set Clipping option; 1425 gPad->SetBit(TGraph::kClipFrame, theGraph->TestBit(TGraph::kClipFrame));; 1426 ; 1427 rwxmin = gPad->GetUxmin();; 1428 rwxmax = gPad->GetUxmax();; 1429 rwymin = gPad->GetUymin();; 1430 rwymax = gPad->GetUymax();; 1431 uxmin = gPad->PadtoX(rwxmin);; 1432 uxmax = gPad->PadtoX(rwxmax);; 1433 if (theGraph->GetHistogram() && !theGraph->InheritsFrom(""TGraphPolar"")) {; 1434 maximum = theGraph->GetHistogram()->GetMaximum();; 1435 minimum = theGraph->GetHistogram()->GetMinimum();; 1436 } else {; 1437 maximum = gPad->PadtoY(rwymax);; 1438 minimum = gPad->PadtoY(rwymin);; 1439 }; 1440 ; 1441 // Set attributes; 1442 theGraph->TAttLine::Modify();; 1443 theGraph->TAttFill::Modify();; 1444 theGraph->TAttMarker::Modify();; 1445 ; 1446 // Draw the graph with a polyline or a fill area; 1447 gxwork.resize(2*npoints+10);; 1448 gywork.resize(2*npoint",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:51685,ux,uxmin,51685,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin']"
Usability,"3C, TH3S, TH3I, TH3L, TH3F, TH3D, TProfile, TProfile2D, TProfile3D, TH2Poly, and TH1K.; Definition at line 2671 of file TH1.cxx. ◆ DeclFileName(). static const char * TH1::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 444 of file TH1.h. ◆ DirectoryAutoAdd(). void TH1::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Perform the automatic addition of the histogram to the given directory. ; Note this function is called in place when the semantic requires this object to be added to a directory (I.e. when being read from a TKey or being Cloned) ; Definition at line 2801 of file TH1.cxx. ◆ DistancetoPrimitive(). Int_t TH1::DistancetoPrimitive ; (; Int_t ; px, . Int_t ; py . ). overridevirtual . Compute distance from point px,py to a line. ; Compute the closest distance of approach from point px,py to elements of a histogram. The distance is computed in pixels units.; Algorithm:; Currently, this simple model computes the distance from the mouse to the histogram contour only. ; Reimplemented from TObject.; Definition at line 2823 of file TH1.cxx. ◆ Divide() [1/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1). virtual . Divide this histogram by h1. ; this = this/h1 if errors are defined (see TH1::Sumw2), errors are also recalculated. Note that if h1 has Sumw2 set, Sumw2 is automatically called for this if not already set. The resulting errors are calculated assuming uncorrelated histograms. See the other TH1::Divide that gives the possibility to optionally compute binomial errors.; IMPORTANT NOTE: If you intend to use the errors of this histogram later you should call Sumw2 before making this operation. This is particularly important if you fit the histogram after TH1::Scale; The function return kFALSE if the divide operation failed ; Reimplemented in TProfile, TProfile2D, and TProfile3D.; Definition at line 2908 of file TH1.cxx. ◆ Divide() [2/3]. Bool_t TH1::Divide ; (; const TH1 * ; h1, . const TH1 * ; h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTH1.html:104781,simpl,simple,104781,doc/master/classTH1.html,https://root.cern,https://root.cern/doc/master/classTH1.html,1,['simpl'],['simple']
Usability,"3D ; (; const TBuffer3D & ; ). privatedelete . ◆ TBuffer3D() [2/2]. TBuffer3D::TBuffer3D ; (; Int_t ; type, . UInt_t ; reqPnts = 0, . UInt_t ; reqPntsCapacity = 0, . UInt_t ; reqSegs = 0, . UInt_t ; reqSegsCapacity = 0, . UInt_t ; reqPols = 0, . UInt_t ; reqPolsCapacity = 0 . ). Destructor. ; Construct from supplied shape type and raw sizes ; Definition at line 222 of file TBuffer3D.cxx. ◆ ~TBuffer3D(). TBuffer3D::~TBuffer3D ; (; ). virtual . Destructor. ; Definition at line 235 of file TBuffer3D.cxx. Member Function Documentation. ◆ Class(). static TClass * TBuffer3D::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBuffer3D::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBuffer3D::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 122 of file TBuffer3D.h. ◆ ClearSectionsValid(). void TBuffer3D::ClearSectionsValid ; (; ). Clear any sections marked valid. ; Definition at line 287 of file TBuffer3D.cxx. ◆ DecCSLevel(). UInt_t TBuffer3D::DecCSLevel ; (; ). static . Decrement CS level. ; Definition at line 513 of file TBuffer3D.cxx. ◆ DeclFileName(). static const char * TBuffer3D::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TBuffer3D.h. ◆ GetCSLevel(). UInt_t TBuffer3D::GetCSLevel ; (; ). static . Return CS level. ; Definition at line 497 of file TBuffer3D.cxx. ◆ GetSections(). UInt_t TBuffer3D::GetSections ; (; UInt_t ; mask); const. inline . Definition at line 68 of file TBuffer3D.h. ◆ IncCSLevel(). void TBuffer3D::IncCSLevel ; (; ). static . Increment CS level. ; Definition at line 505 of file TBuffer3D.cxx. ◆ Init(). void TBuffer3D::Init ; (; ). private . Initialise buffer. ; Definition at line 245 of file TBuffer3D.cxx. ◆ IsA(). TClass * TBuffer3D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBuffer3D.html:22731,Clear,Clear,22731,doc/master/classTBuffer3D.html,https://root.cern,https://root.cern/doc/master/classTBuffer3D.html,1,['Clear'],['Clear']
Usability,"3D::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint this object. Only direct rendering is supported. ; Reimplemented from TObject.; Definition at line 36 of file TEvePlot3D.cxx. ◆ SetLogX(). void TEvePlot3D::SetLogX ; (; Bool_t ; l). inline . Definition at line 45 of file TEvePlot3D.h. ◆ SetLogXYZ(). void TEvePlot3D::SetLogXYZ ; (; Bool_t ; lx, . Bool_t ; ly, . Bool_t ; lz . ). inline . Definition at line 43 of file TEvePlot3D.h. ◆ SetLogY(). void TEvePlot3D::SetLogY ; (; Bool_t ; l). inline . Definition at line 46 of file TEvePlot3D.h. ◆ SetLogZ(). void TEvePlot3D::SetLogZ ; (; Bool_t ; l). inline . Definition at line 47 of file TEvePlot3D.h. ◆ SetPlot(). void TEvePlot3D::SetPlot ; (; TObject * ; obj, . const TString & ; opt . ). inline . Definition at line 38 of file TEvePlot3D.h. ◆ Streamer(). void TEvePlot3D::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEvePlot3D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TEvePlot3D.h. Friends And Related Symbol Documentation. ◆ TEvePlot3DGL. friend class TEvePlot3DGL. friend . Definition at line 20 of file TEvePlot3D.h. Member Data Documentation. ◆ fLogX. Bool_t TEvePlot3D::fLogX. protected . Definition at line 30 of file TEvePlot3D.h. ◆ fLogY. Bool_t TEvePlot3D::fLogY. protected . Definition at line 31 of file TEvePlot3D.h. ◆ fLogZ. Bool_t TEvePlot3D::fLogZ. protected . Definition at line 32 of file TEvePlot3D.h. ◆ fPlot. TObject* TEvePlot3D::fPlot. protected . Definition at line 27 of file TEvePlot3D.h. ◆ fPlotOption. TString TEvePlot3D::fPlotOption. protected . Definition at line 28 of file TEvePlot3D.h. Libraries for TEvePlot3D:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEvePlot3D.h; graf3d/eve/src/TEvePlot3D.cxx. TEvePlot3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePlot3D.html:37316,Guid,Guide,37316,doc/master/classTEvePlot3D.html,https://root.cern,https://root.cern/doc/master/classTEvePlot3D.html,1,['Guid'],['Guide']
Usability,"4 TransactionDeclSet.insert(*DI);; 6795 ((TCling*)gCling)->HandleNewDecl(*DI, false, modifiedTClasses);; 6796 }; 6797 }; 6798 }; 6799 ; 6800 // The above might trigger more decls to be deserialized.; 6801 // Thus the iteration over the deserialized decls must be last.; 6802 for (cling::Transaction::const_iterator I = T.deserialized_decls_begin(),; 6803 E = T.deserialized_decls_end(); I != E; ++I) {; 6804 for (DeclGroupRef::const_iterator DI = I->m_DGR.begin(),; 6805 DE = I->m_DGR.end(); DI != DE; ++DI); 6806 if (TransactionDeclSet.find(*DI) == TransactionDeclSet.end()) {; 6807 //FIXME: HandleNewDecl should take DeclGroupRef; 6808 ((TCling*)gCling)->HandleNewDecl(*DI, /*isDeserialized*/true,; 6809 modifiedTClasses);; 6810 }; 6811 }; 6812 ; 6813 ; 6814 // When fully building the reflection info in TClass, a deserialization; 6815 // could be triggered, which may result in request for building the; 6816 // reflection info for the same TClass. This in turn will clear the caches; 6817 // for the TClass in-flight and cause null ptr derefs.; 6818 // FIXME: This is a quick fix, solving most of the issues. The actual; 6819 // question is: Shouldn't TClass provide a lock mechanism on update or lock; 6820 // itself until the update is done.; 6821 //; 6822 std::vector<TClass*> modifiedTClassesDiff(modifiedTClasses.size());; 6823 std::vector<TClass*>::iterator it;; 6824 it = set_difference(modifiedTClasses.begin(), modifiedTClasses.end(),; 6825 ((TCling*)gCling)->GetModTClasses().begin(),; 6826 ((TCling*)gCling)->GetModTClasses().end(),; 6827 modifiedTClassesDiff.begin());; 6828 modifiedTClassesDiff.resize(it - modifiedTClassesDiff.begin());; 6829 ; 6830 // Lock the TClass for updates; 6831 ((TCling*)gCling)->GetModTClasses().insert(modifiedTClassesDiff.begin(),; 6832 modifiedTClassesDiff.end());; 6833 for (std::vector<TClass*>::const_iterator I = modifiedTClassesDiff.begin(),; 6834 E = modifiedTClassesDiff.end(); I != E; ++I) {; 6835 // Make sure the TClass has not been deleted.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:266093,clear,clear,266093,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"4 fCollect = info.fCollectFunc;; 655 fCreateEnv.call = info.fCreateEnv;; 656 ; 657 if (cl) {; 658 fName = cl->GetName();; 659 }; 660 CheckFunctions();; 661 ; 662 fValue = 0;; 663 fKey = 0;; 664 fVal = 0;; 665 fPointers = false;; 666 fSTL_type = ROOT::kNotSTL;; 667 ; 668 Env_t e;; 669 if ( info.fIterSize > sizeof(e.fIterator) ) {; 670 Fatal(""TGenCollectionProxy"",; 671 ""%s %s are too large:%ld bytes. Maximum is:%ld bytes"",; 672 ""Iterators for collection"",; 673 fClass->GetName(),; 674 (Long_t)info.fIterSize,; 675 (Long_t)sizeof(e.fIterator));; 676 }; 677 fReadMemberWise = new TObjArray(TCollection::kInitCapacity,-1);; 678 fConversionReadMemberWise = 0;; 679 fWriteMemberWise = 0;; 680 fFunctionCreateIterators = info.fCreateIterators;; 681 fFunctionCopyIterator = info.fCopyIterator;; 682 fFunctionNextIterator = info.fNext;; 683 fFunctionDeleteIterator = info.fDeleteSingleIterator;; 684 fFunctionDeleteTwoIterators = info.fDeleteTwoIterators;; 685}; 686 ; 687namespace {; 688 template <class vec>; 689 void clearVector(vec& v); 690 {; 691 // Clear out the proxies.; 692 ; 693 for(typename vec::iterator i=v.begin(); i != v.end(); ++i) {; 694 typename vec::value_type e = *i;; 695 if ( e ) {; 696 delete e;; 697 }; 698 }; 699 v.clear();; 700 }; 701}; 702////////////////////////////////////////////////////////////////////////////////; 703/// Standard destructor; 704 ; 705TGenCollectionProxy::~TGenCollectionProxy(); 706{; 707 clearVector(fProxyList);; 708 clearVector(fProxyKept);; 709 clearVector(fStaged);; 710 ; 711 if ( fValue.load() ) delete fValue.load();; 712 if ( fVal ) delete fVal;; 713 if ( fKey ) delete fKey;; 714 ; 715 delete fReadMemberWise;; 716 if (fConversionReadMemberWise) {; 717 std::map<std::string, TObjArray*>::iterator it;; 718 std::map<std::string, TObjArray*>::iterator end = fConversionReadMemberWise->end();; 719 for( it = fConversionReadMemberWise->begin(); it != end; ++it ) {; 720 delete it->second;; 721 }; 722 delete fConversionReadMemberWise;; 723 fConversi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:21137,clear,clearVector,21137,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,2,"['Clear', 'clear']","['Clear', 'clearVector']"
Usability,"4); legend1.AddEntry(""learned"", ""learned (SBI)"", ""L""); legend1.AddEntry(""gauss"", ""true NLL"", ""L""); legend1.AddEntry(""morphed"", ""moment morphing"", ""L""); legend1.Draw(); ; if single_canvas:; c.cd(2); ROOT.gPad.SetLeftMargin(0.15); frame2.GetYaxis().SetTitleOffset(1.8); else:; c.SaveAs(""rf617_plot_1.png""); c = ROOT.TCanvas("""", """", 600, 600); ; frame2.Draw(); ; legend2 = ROOT.TLegend(0.53, 0.73, 0.87, 0.87); legend2.SetFillColor(ROOT.kWhite); legend2.SetLineColor(ROOT.kWhite); legend2.SetTextSize(0.04); legend2.AddEntry(""learned_ratio"", ""learned (SBI)"", ""L""); legend2.AddEntry(""exact"", ""true ratio"", ""L""); legend2.Draw(); ; if not single_canvas:; c.SaveAs(""rf617_plot_2.png""); ; ; # Use ROOT's minimizer to compute the minimum and display the results; for nll in [nll_gauss, nllr_learned, nll_morph]:; minimizer = ROOT.RooMinimizer(nll); minimizer.setErrorLevel(0.5); minimizer.setPrintLevel(-1); minimizer.minimize(""Minuit2""); result = minimizer.save(); result.Print(); ; import sys; ; # Hack to bypass ClearProxiedObjects(); del sys.modules[""libROOTPythonizations""]; lenOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t UChar_t lenDefinition TGWin32VirtualXProxy.cxx:249; ; RooFitResult: minimized FCN value: 36418.9, estimated distance to minimum: 1.43276e-06; cova",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:11876,Clear,ClearProxiedObjects,11876,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,1,['Clear'],['ClearProxiedObjects']
Usability,"4/*************************************************************************; 5 * Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; 6 * All rights reserved. *; 7 * *; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12/** \class TObjArray; 13\ingroup Containers; 14An array of TObjects. The array expands automatically when; 15objects are added (shrinking can be done by hand using Expand(),; 16how nice to have meaningful names -:)).; 17Use operator[] to have ""real"" array behaviour.; 18 ; 19Note on ownership and copy:; 20By default the TObjArray does not own the objects it points to and; 21will not delete them unless explicitly asked (via a call to the; 22Delete member function). To assign ownership of the content to; 23the array, call:; 24~~~ {.cpp}; 25 myarr->SetOwner(kTRUE);; 26~~~; 27When the array owns its content a call to Clear or the deletion of; 28the array itself will lead to the deletion of its contents.; 29 ; 30You can either make a shallow copy of the array:; 31~~~ {.cpp}; 32 otherarr = new TObjArray(*myarr);; 33 *otherarr = *myarr;; 34~~~; 35in which case ownership (if any) is not transfered but the other; 36array points to the same object as the original array. Note that; 37if the content of either array is deleted the other array is not; 38notified in any way (i.e. still points to the now deleted objects).; 39 ; 40You can also make a deep copy of the array:; 41~~~ {.cpp}; 42 otherarr = (TObjArray*)myarr->Clone();; 43~~~; 44in which case the array and the content are both duplicated (i.e.; 45otherarr and myarr do not point to the same objects). If myarr; 46is set to the be the owner of its content, otherarr will also be; 47set to the owner of its own content.; 48*/; 49 ; 50#include ""TObjArray.h""; 51#include ""TError.h""; 52#include ""TROOT.h""; 53#include ""TBuffer.h""; 54#include ""TVirtualMutex.h""; 55",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:1248,Clear,Clear,1248,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['Clear'],['Clear']
Usability,"4// b = new A();; 55//; 56// Here is one way to connect two of these objects together:; 57//; 58// a->Connect(""SetValue(Int_t)"", ""A"", b, ""SetValue(Int_t)"");; 59//; 60// Calling a->SetValue(79) will make a emit a signal, which b; 61// will receive, i.e. b->SetValue(79) is invoked. b will in; 62// turn emit the same signal, which nobody receives, since no; 63// slot has been connected to it, so it disappears into hyperspace.; 64//; 65 ; 66#define RQ_OBJECT1(sender_class)\; 67private:\; 68TQObjSender fQObject;\; 69public:\; 70TList *GetListOfSignals() const {return fQObject.GetListOfSignals();}\; 71Bool_t Connect(const char *sig,const char *cl,void *rcvr,const char *slt)\; 72{fQObject.SetSender(this);fQObject.SetSenderClassName(sender_class);return fQObject.Connect(sig,cl,rcvr,slt);}\; 73Bool_t Disconnect(const char *sig=nullptr,void *rcvr=nullptr,const char *slt=nullptr){return fQObject.Disconnect(sig,rcvr,slt);}\; 74void HighPriority(const char *signal_name,const char *slot_name=nullptr){fQObject.HighPriority(signal_name,slot_name);}\; 75void LowPriority(const char *signal_name,const char *slot_name=nullptr){fQObject.LowPriority(signal_name,slot_name);}\; 76template <typename... T> void EmitVA(const char *signal_name, Int_t nargs, const T&... params) \; 77{ fQObject.EmitVA(signal_name,nargs,params...); } \; 78void Emit(const char *signal){EmitVA(signal, /*nargs*/0);} \; 79template <typename T> void Emit(const char *signal, const T& arg) { EmitVA(signal, /*nargs*/ 1, arg); } \; 80 ; 81#define RQ_OBJECT2(sender_class)\; 82void Destroyed(){Emit(""Destroyed()"");}\; 83void ChangedBy(const char *method){Emit(""ChangedBy(char*)"",method);}\; 84void Message(const char *msg){Emit(""Message(char*)"",msg);}\; 85private:; 86 ; 87#define RQ_OBJECT(sender_class)\; 88 RQ_OBJECT1(sender_class)\; 89 RQ_OBJECT2(sender_class); 90 ; 91#endif; TQObject.h; Varargs.h. corebaseincRQ_OBJECT.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RQ__OBJECT_8h_source.html:3528,Guid,Guide,3528,doc/master/RQ__OBJECT_8h_source.html,https://root.cern,https://root.cern/doc/master/RQ__OBJECT_8h_source.html,1,['Guid'],['Guide']
Usability,"40 fRealTime = fWatch->RealTime();; 341 fCpuTime = fWatch->CpuTime();; 342 if (fUnzipInputSize); 343 fCompress = ((double)fUnzipObjSize) / fUnzipInputSize;; 344 Int_t npoints = fGraphIO->GetN();; 345 if (!npoints) return;; 346 Double_t iomax = TMath::MaxElement(npoints,fGraphIO->GetY());; 347 fRealNorm = iomax/fRealTime;; 348 fGraphTime->GetY()[0] = fRealNorm*fGraphTime->GetEY()[0];; 349 // we normalize the fGraphTime such that it can be drawn on top of fGraphIO; 350 for (Int_t i=1;i<npoints;i++) {; 351 fGraphTime->GetY()[i] = fGraphTime->GetY()[i-1] +fRealNorm*fGraphTime->GetEY()[i];; 352 fGraphTime->GetEY()[i] = 0;; 353 }; 354}; 355 ; 356////////////////////////////////////////////////////////////////////////////////; 357/// Update the fBranchIndexCache collection to match the current TTree given; 358/// the ordered list of branch names.; 359 ; 360void TTreePerfStats::UpdateBranchIndices(TObjArray *branches); 361{; 362 fBranchIndexCache.clear();; 363 ; 364 for (int i = 0; i < branches->GetEntries(); ++i) {; 365 fBranchIndexCache.emplace((TBranch*)(branches->UncheckedAt(i)), i);; 366 }; 367}; 368 ; 369////////////////////////////////////////////////////////////////////////////////; 370/// Return the BasketInfo corresponding to the given branch and basket.; 371 ; 372TTreePerfStats::BasketInfo &TTreePerfStats::GetBasketInfo(TBranch *br, size_t basketNumber); 373{; 374 static BasketInfo fallback;; 375 ; 376 // First find the branch index.; 377 TFile *file = fTree->GetCurrentFile();; 378 if (!file); 379 return fallback;; 380 ; 381 TTreeCache *cache = dynamic_cast<TTreeCache *>(file->GetCacheRead(fTree));; 382 if (!cache); 383 return fallback;; 384 ; 385 Int_t index = -1;; 386 auto iter = fBranchIndexCache.find(br);; 387 if (iter == fBranchIndexCache.end()) {; 388 auto branches = cache->GetCachedBranches();; 389 for (Int_t i = 0; i < branches->GetEntries(); ++i) {; 390 if (br == branches->UncheckedAt(i)) {; 391 index = i;; 392 break;; 393 }; 394 }; 395 if (index < 0); 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html:12580,clear,clear,12580,doc/master/TTreePerfStats_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreePerfStats_8cxx_source.html,1,['clear'],['clear']
Usability,"400 }; 401 ; 402 vect.resize(16);; 403 vect[0] = rotate[0];; 404 vect[4] = rotate[1];; 405 vect[8] = rotate[2];; 406 vect[12] = trans[0];; 407 vect[1] = rotate[3];; 408 vect[5] = rotate[4];; 409 vect[9] = rotate[5];; 410 vect[13] = trans[1];; 411 vect[2] = rotate[6];; 412 vect[6] = rotate[7];; 413 vect[10] = rotate[8];; 414 vect[14] = trans[2];; 415 vect[3] = 0;; 416 vect[7] = 0;; 417 vect[11] = 0;; 418 vect[15] = 1;; 419}; 420 ; 421/////////////////////////////////////////////////////////////////////; 422/// Collect information about geometry hierarchy into flat list; 423/// like it done in JSROOT ClonedNodes.createClones; 424 ; 425void RGeomDescription::Build(TGeoManager *mgr, const std::string &volname); 426{; 427 ClearDescription();; 428 if (!mgr); 429 return;; 430 ; 431 TLockGuard lock(fMutex);; 432 ; 433 // by top node visibility always enabled and harm logic; 434 // later visibility can be controlled by other means; 435 // mgr->GetTopNode()->GetVolume()->SetVisibility(kFALSE);; 436 ; 437 int maxnodes = mgr->GetMaxVisNodes();; 438 ; 439 SetNSegments(mgr->GetNsegments());; 440 SetVisLevel(mgr->GetVisLevel());; 441 SetMaxVisNodes(maxnodes);; 442 SetMaxVisFaces((maxnodes > 5000 ? 5000 : (maxnodes < 1000 ? 1000 : maxnodes)) * 100);; 443 ; 444 auto topnode = mgr->GetTopNode();; 445 ; 446 BuildDescription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:10917,Clear,ClearDescription,10917,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearDescription']
Usability,"407 const Int_t kMAXLEVELS = 10;; 1408 TClass *clevel[kMAXLEVELS], *cl, *cll;; 1409 TBaseClass *base, *cinherit;; 1410 TText *ptext = nullptr;; 1411 TString opt=option;; 1412 Double_t x,y,dy,y1,v1,v2,dv;; 1413 Int_t nd,nf,nc,nkd,nkf,i,j;; 1414 TPaveText *pt;; 1415 Int_t maxlev = 4;; 1416 if (opt.Contains(""2"")) maxlev = 2;; 1417 if (opt.Contains(""3"")) maxlev = 3;; 1418 if (opt.Contains(""5"")) maxlev = 5;; 1419 if (opt.Contains(""6"")) maxlev = 6;; 1420 if (opt.Contains(""7"")) maxlev = 7;; 1421 ; 1422 // Clear and Set Pad range; 1423 Double_t xpad = 20.5;; 1424 Double_t ypad = 27.5;; 1425 Clear();; 1426 Range(0,0,xpad,ypad);; 1427 ; 1428 // Find number of levels; 1429 Int_t nlevel = 0;; 1430 TClass *obj = (TClass*)classobj;; 1431 clevel[nlevel] = obj;; 1432 TList *lbase = obj->GetListOfBases();; 1433 while(lbase) {; 1434 base = (TBaseClass*)lbase->First();; 1435 if (!base) break;; 1436 if (!base->GetClassPointer()) break;; 1437 nlevel++;; 1438 clevel[nlevel] = base->GetClassPointer();; 1439 lbase = clevel[nlevel]->GetListOfBases();; 1440 if (nlevel >= maxlev-1) break;; 1441 }; 1442 Int_t maxelem = 0;; 1443 Int_t ncdraw = 0;; 1444 Int_t ilevel, nelem;; 1445 for (ilevel=nlevel;ilevel>=0;ilevel--) {; 1446 cl = clevel[ilevel];; 1447 nelem = cl->GetNdata() + cl->GetNmethods();; 1448 if (nelem > maxelem) maxelem = nelem;; 1449 nc = (nelem/50) + 1;; 1450 ncdraw += nc;; 1451 }; 1452 ; 1453 Double_t tsizcm = 0.40;; 1454 Double_t x1 = 0.25;; 1455 Double_t x2 = 0;; 1456 Double_t dx = 3.5;; 1457 if (ncdraw > 4) {; 1458 dx = dx - 0.42*Double_t(ncdraw-5);; 1459 if (dx < 1.3) dx = 1.3;; 1460 tsizcm = tsizcm - 0.03*Double_t(ncdraw-5);; 1461 if (tsizcm < 0.27) tsizcm = 0.27;; 1462 }; 1463 Double_t tsiz = 1.2*tsizcm/ypad;; 1464 ; 1465 // Now loop on levels; 1466 for (ilevel=nlevel;ilevel>=0;ilevel--) {; 1467 cl = clevel[ilevel];; 1468 nelem = cl->GetNdata() + cl->GetNmethods();; 1469 if (nelem > maxelem) maxelem = nelem;; 1470 nc = (nelem/50) + 1;; 1471 dy = 0.45;; 1472 if (ilevel < nlevel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:44781,Clear,Clear,44781,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Clear'],['Clear']
Usability,"40PoissonUNURAN(100) 62.000 256.000 69.000 78.000; 141~~~~; 142 ; 143Note that the time to generate a number from an arbitrary TF1 function; 144using TF1::GetRandom or using TUnuran is independent of the complexity of the function.; 145 ; 146TH1::FillRandom(TH1 *) or TH1::FillRandom(const char *tf1name); 147can be used to fill an histogram (1-d, 2-d, 3-d from an existing histogram; 148or from an existing function.; 149 ; 150Note this interesting feature when working with objects.; 151 You can use several TRandom objects, each with their ""independent""; 152 random sequence. For example, one can imagine; 153~~~~; 154 TRandom *eventGenerator = new TRandom();; 155 TRandom *tracking = new TRandom();; 156~~~~; 157 `eventGenerator` can be used to generate the event kinematics.; 158 tracking can be used to track the generated particles with random numbers; 159 independent from eventGenerator.; 160 This very interesting feature gives the possibility to work with simple; 161 and very fast random number generators without worrying about; 162 random number periodicity as it was the case with Fortran.; 163 One can use TRandom::SetSeed to modify the seed of one generator.; 164 ; 165A TRandom object may be written to a Root file; 166 ; 167- as part of another object; 168- or with its own key (example: `gRandom->Write(""Random"")` ) ;; 169 ; 170*/; 171 ; 172#include ""TROOT.h""; 173#include ""TMath.h""; 174#include ""TRandom.h""; 175#include ""TRandom3.h""; 176#include ""TSystem.h""; 177#include ""TDirectory.h""; 178#include ""Math/QuantFuncMathCore.h""; 179#include ""TUUID.h""; 180#include ""TError.h""; 181 ; 182ClassImp(TRandom);; 183 ; 184////////////////////////////////////////////////////////////////////////////////; 185/// Default constructor. For seed see SetSeed().; 186 ; 187TRandom::TRandom(UInt_t seed): TNamed(""Random"",""Default Random number generator""); 188{; 189 SetSeed(seed);; 190}; 191 ; 192////////////////////////////////////////////////////////////////////////////////; 193/// Default de",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom_8cxx_source.html:9831,simpl,simple,9831,doc/master/TRandom_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom_8cxx_source.html,1,['simpl'],['simple']
Usability,"41; , kBoolOptimize = 142; , kStringConst = 143; , kVariable = 144; , ;   kFunctionCall = 145; , kData = 146; , kUnary = 147; , kBinary = 148; , ;   kThree = 149; , kDefinedVariable = 150; , kDefinedString = 151; , kPlusD = 152; , ;   kPlusDD = 153; , kMultD = 154; , kMultDD = 155; , kBoolOptimizeOr = 156; , ;   kBoolOptimizeAnd = 157; , kBoolSet = 158; , kFDM = 159; , kFD0 = 160; , ;   kFD1 = 161; , kFD2 = 162; , kFD3 = 163. };  ; typedef Double_t(TObject::* TFuncG) (const Double_t *, const Double_t *) const;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . Protected Member Functions; virtual Bool_t CheckOperands (Int_t leftoperand, Int_t rightoperartion, Int_t &err);  Check whether the operands at 'leftoper' and 'oper-1' are compatible with the operation at 'oper'. ;  ; virtual Bool_t CheckOperands (Int_t operation, Int_t &err);  Check whether the operand at 'oper-1' is compatible with the operation at 'oper'. ;  ; void ClearFormula (Option_t *option="""");  Resets the objects. ;  ; virtual void Convert (UInt_t fromVersion);  ; Double_t EvalParFast (const Double_t *x, const Double_t *params);  Evaluate this formula. ;  ; Double_t EvalPrimitive (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive0 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive1 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive2 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive3 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Double_t EvalPrimitive4 (const Double_t *x, const Double_t *params);  Evaluate primitive formula. ;  ; Short_t GetAction (Int_t code) const;  ; Short_t GetActionOptimized (Int_t code) const;  ; Int_t GetActionParam (Int_t code) const;  ; Int_t GetActionParamOptimized (Int_t code) const;  ; Int_t * GetOper",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:20392,Clear,ClearFormula,20392,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Clear'],['ClearFormula']
Usability,"42 ; 43 // Create a new RNTupleImporter object.; 44 auto importer = RNTupleImporter::Create(kTreeFileName, kTreeName, kNTupleFileName);; 45 ; 46 // Begin importing.; 47 importer->Import();; 48 ; 49 // Inspect the schema of the written RNTuple.; 50 auto file = std::unique_ptr<TFile>(TFile::Open(kNTupleFileName));; 51 if (!file || file->IsZombie()) {; 52 std::cerr << ""cannot open "" << kNTupleFileName << std::endl;; 53 return;; 54 }; 55 auto ntpl = std::unique_ptr<ROOT::RNTuple>(file->Get<ROOT::RNTuple>(""Events""));; 56 auto reader = RNTupleReader::Open(*ntpl);; 57 reader->PrintInfo();; 58 ; 59 ROOT::RDataFrame df(""Events"", kNTupleFileName);; 60 df.Histo1D({""Jet_pt"", ""Jet_pt"", 100, 0, 0}, ""Jet_pt"")->DrawCopy();; 61}; RNTupleDS.hxx; RNTupleImporter.hxx; RNTupleReader.hxx; RPageStorageFile.hxx; TFile.h; TROOT.h; TSystem.h; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; ROOT::Experimental::RNTupleImporterConverts a TTree into an RNTuple.Definition RNTupleImporter.hxx:103; ROOT::Experimental::RNTupleReaderAn RNTuple that is used to read data from storage.Definition RNTupleReader.hxx:71; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RNTupleRepresentation of an RNTuple data set in a ROOT file.Definition RNTuple.hxx:69; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TSystem::Unlinkvirtual int Unlink(const char *name)Unlink, i.e.Definition TSystem.cxx:1381; ROOT::EnableImplicitMTvoid EnableImplicitMT(UInt_t numthreads=0)Enable ROOT's implicit multi-threading for all objects and methods that provide an internal paralleli...Definition TROOT.cxx:539. tutorialsv7ntuplentpl008_import.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntpl008__import_8C_source.html:3572,Guid,Guide,3572,doc/master/ntpl008__import_8C_source.html,https://root.cern,https://root.cern/doc/master/ntpl008__import_8C_source.html,1,['Guid'],['Guide']
Usability,"42 SetMaxVisFaces((maxnodes > 5000 ? 5000 : (maxnodes < 1000 ? 1000 : maxnodes)) * 100);; 443 ; 444 auto topnode = mgr->GetTopNode();; 445 ; 446 BuildDescription(topnode, topnode->GetVolume());; 447 ; 448 if (!volname.empty()) {; 449 auto vol = mgr->GetVolume(volname.c_str());; 450 RGeomBrowserIter iter(*this);; 451 if (vol && (vol != topnode->GetVolume()) && iter.Navigate(vol)); 452 fSelectedStack = MakeStackByIds(iter.CurrentIds());; 453 }; 454}; 455 ; 456/////////////////////////////////////////////////////////////////////; 457/// Collect information about geometry from single volume; 458/// like it done in JSROOT ClonedNodes.createClones; 459 ; 460void RGeomDescription::Build(TGeoVolume *vol); 461{; 462 ClearDescription();; 463 if (!vol); 464 return;; 465 ; 466 TLockGuard lock(fMutex);; 467 ; 468 fDrawVolume = vol;; 469 ; 470 fSelectedStack.clear();; 471 ; 472 BuildDescription(nullptr, fDrawVolume);; 473}; 474 ; 475/////////////////////////////////////////////////////////////////////; 476/// Clear geometry description; 477 ; 478void RGeomDescription::ClearDescription(); 479{; 480 TLockGuard lock(fMutex);; 481 ; 482 fDesc.clear();; 483 fNodes.clear();; 484 fSortMap.clear();; 485 ClearDrawData();; 486 fDrawIdCut = 0;; 487 fDrawVolume = nullptr;; 488 fSelectedStack.clear();; 489}; 490 ; 491/////////////////////////////////////////////////////////////////////; 492/// Build geometry description; 493 ; 494void RGeomDescription::BuildDescription(TGeoNode *topnode, TGeoVolume *topvolume); 495{; 496 // vector to remember numbers; 497 std::vector<int> numbers;; 498 int offset = 1000000000;; 499 ; 500 // try to build flat list of all nodes; 501 TGeoNode *snode = topnode;; 502 TGeoIterator iter(topvolume);; 503 do {; 504 if (!snode) {; 505 numbers.emplace_back(offset);; 506 fNodes.emplace_back(nullptr);; 507 } else if (snode->GetNumber() >= offset) {; 508 // artificial offset already applied, used as identifier; 509 iter.Skip(); // no need to look inside; 510 } else {; 511 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:12212,clear,clear,12212,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,6,"['Clear', 'clear']","['Clear', 'ClearDescription', 'clear']"
Usability,"423{; 3424 TString comd = command;; 3425 mnhelp(comd);; 3426}; 3427 ; 3428////////////////////////////////////////////////////////////////////////////////; 3429/// HELP routine for MINUIT interactive commands; 3430///; 3431/// - COMD ='*' or """" prints a global help for all commands; 3432/// - COMD =Command_name: print detailed help for one command.; 3433/// Note that at least 3 characters must be given for the command; 3434/// name.; 3435///; 3436/// Author: Rene Brun; 3437/// comments extracted from the MINUIT documentation file.; 3438 ; 3439void TMinuit::mnhelp(TString comd); 3440{; 3441//______________________________________________________________________________; 3442//; 3443// Global HELP: Summary of all commands; 3444//; 3445 comd.ToUpper();; 3446 if( comd.Length() == 0 || comd[0] == '*' || comd[0] == '?' || comd[0] == 0 || comd==""HELP"" ) {; 3447 Printf("" ==>List of MINUIT Interactive commands:"");; 3448 Printf("" CLEar Reset all parameter names and values undefined"");; 3449 Printf("" CONtour Make contour map of the user function"");; 3450 Printf("" EXIT Exit from Interactive Minuit"");; 3451 Printf("" FIX Cause parameter(s) to remain constant"");; 3452 Printf("" HESse Calculate the Hessian or error matrix."");; 3453 Printf("" IMPROVE Search for a new minimum around current minimum"");; 3454 Printf("" MIGrad Minimize by the method of Migrad"");; 3455 Printf("" MINImize MIGRAD + SIMPLEX method if Migrad fails"");; 3456 Printf("" MINOs Exact (non-linear) parameter error analysis"");; 3457 Printf("" MNContour Calculate one MINOS function contour"");; 3458 Printf("" PARameter Define or redefine new parameters and values"");; 3459 Printf("" RELease Make previously FIXed parameters variable again"");; 3460 Printf("" REStore Release last parameter fixed"");; 3461 Printf("" SAVe Save current parameter values on a file"");; 3462 Printf("" SCAn Scan the user function by varying parameters"");; 3463 Printf("" SEEk Minimize by the method of Monte Carlo"");; 3464 Printf("" SET Set various MINUIT constan",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:108325,CLEar,CLEar,108325,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['CLEar'],['CLEar']
Usability,"438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50799,clear,clearValueDirty,50799,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearValueDirty']
Usability,"44 else {; 745 Error(""TFormula"",""Syntax error in building the lambda expression %s"", fFormula.Data() );; 746 fnew.fReadyToExecute = false;; 747 }; 748 }; 749 ; 750 // use copy-constructor of TMethodCall; 751 // if c++-14 could use std::make_unique; 752 TMethodCall *m = (fMethod) ? new TMethodCall(*fMethod) : nullptr;; 753 fnew.fMethod.reset(m);; 754 ; 755 fnew.fFuncPtr = fFuncPtr;; 756 fnew.fGradGenerationInput = fGradGenerationInput;; 757 fnew.fHessGenerationInput = fHessGenerationInput;; 758 fnew.fGradFuncPtr = fGradFuncPtr;; 759 fnew.fHessFuncPtr = fHessFuncPtr;; 760 ; 761}; 762 ; 763////////////////////////////////////////////////////////////////////////////////; 764/// Clear the formula setting expression to empty and reset the variables and; 765/// parameters containers.; 766 ; 767void TFormula::Clear(Option_t * ); 768{; 769 fNdim = 0;; 770 fNpar = 0;; 771 fNumber = 0;; 772 fFormula = """";; 773 fClingName = """";; 774 ; 775 fMethod.reset();; 776 ; 777 fClingVariables.clear();; 778 fClingParameters.clear();; 779 fReadyToExecute = false;; 780 fClingInitialized = false;; 781 fAllParametersSetted = false;; 782 fFuncs.clear();; 783 fVars.clear();; 784 fParams.clear();; 785 fConsts.clear();; 786 fFunctionsShortcuts.clear();; 787 ; 788 // delete linear parts; 789 int nLinParts = fLinearParts.size();; 790 if (nLinParts > 0) {; 791 for (int i = 0; i < nLinParts; ++i) delete fLinearParts[i];; 792 }; 793 fLinearParts.clear();; 794 ; 795}; 796 ; 797// Returns nullptr on failure.; 798static std::unique_ptr<TMethodCall>; 799prepareMethod(bool HasParameters, bool HasVariables, const char* FuncName,; 800 bool IsVectorized, bool AddCladArrayRef = false) {; 801 std::unique_ptr<TMethodCall>; 802 Method = std::make_unique<TMethodCall>();; 803 ; 804 TString prototypeArguments = """";; 805 if (HasVariables || HasParameters) {; 806 if (IsVectorized); 807 prototypeArguments.Append(""ROOT::Double_v*"");; 808 else; 809 prototypeArguments.Append(""Double_t*"");; 810 }; 811 auto AddDoublePtrParam ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:28368,clear,clear,28368,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"4635 if (gridx) gPad->SetGridx(0);; 4636 if (gridy) gPad->SetGridy(0);; 4637 PaintAxis(kFALSE);; 4638 if (gridx) gPad->SetGridx(1);; 4639 if (gridy) gPad->SetGridy(1);; 4640 ; 4641 PaintTitle(); // Draw histogram title; 4642 ; 4643 // Draw box with histogram statistics and/or fit parameters; 4644paintstat:; 4645 if ((Hoption.Same%10) != 1 && !fH->TestBit(TH1::kNoStats)) { // bit set via TH1::SetStats; 4646 TIter next(fFunctions);; 4647 TObject *obj = nullptr;; 4648 while ((obj = next())) {; 4649 if (obj->InheritsFrom(TF1::Class())) break;; 4650 obj = nullptr;; 4651 }; 4652 ; 4653 //Stat is painted twice (first, it will be in canvas' list of primitives),; 4654 //second, it will be here, this is not required on iOS.; 4655 //Condition is ALWAYS true on a platform different from iOS.; 4656 if (!gPad->PadInSelectionMode() && !gPad->PadInHighlightMode()); 4657 PaintStat(gStyle->GetOptStat(),(TF1*)obj);; 4658 }; 4659 fH->SetMinimum(minsav);; 4660 gCurrentHist = oldhist;; 4661 fXbuf.clear();; 4662 fYbuf.clear();; 4663}; 4664 ; 4665////////////////////////////////////////////////////////////////////////////////; 4666/// [Control function to draw a table as an arrow plot](\ref HP12); 4667 ; 4668void THistPainter::PaintArrows(Option_t *); 4669{; 4670 Double_t xk, xstep, yk, ystep;; 4671 Double_t dx, dy, x1, x2, y1, y2, xc, yc, dxn, dyn;; 4672 Int_t ncx = Hparam.xlast - Hparam.xfirst + 1;; 4673 Int_t ncy = Hparam.ylast - Hparam.yfirst + 1;; 4674 Double_t xrg = gPad->GetUxmin();; 4675 Double_t yrg = gPad->GetUymin();; 4676 Double_t xln = gPad->GetUxmax() - xrg;; 4677 Double_t yln = gPad->GetUymax() - yrg;; 4678 Double_t cx = (xln/Double_t(ncx))/2.;; 4679 Double_t cy = (yln/Double_t(ncy))/2.;; 4680 Double_t dn = 1.E-30;; 4681 ; 4682 auto arrow = new TArrow();; 4683 arrow->SetAngle(30);; 4684 arrow->SetFillStyle(1001);; 4685 arrow->SetFillColor(fH->GetLineColor());; 4686 arrow->SetLineColor(fH->GetLineColor());; 4687 arrow->SetLineWidth(fH->GetLineWidth());; 4688 ; 4689 // Initiali",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:176101,clear,clear,176101,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"47 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.868652; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.659892 0.620582 0.589558 0.0469541 20523.3 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.604286 0.594787 0.586926 0.0471912 20632.4 0; : 3 | 0.58117 0.603906 0.587335 0.047007 20609.7 1; : 4 Minimum Test error found - save the configuration ; : 4 | 0.57382 0.588714 0.592175 0.0469679 20425.3 0; : 5 | 0.569519 0.59535 0.590168 0.0468081 20494.7 1; : 6 | 0.567869 0.590023 0.589038 0.0469022 20541 2; : 7 Minimum Test error found - save the configuration ; : 7 | 0.561012 0.586993 0.590467 0.0471223 20495.3 0; : 8 | 0.559195 0.590522 0.590271 0.0471869 20505.1 1; : 9 | 0.558998 0.588766 0.598449 0.0469787 20193.3 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:23943,Learn,Learning,23943,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Learn'],['Learning']
Usability,"47 [ -3.2797 5.7307 ]; : m_wbb: 0.0042343 0.99744 [ -3.2803 5.7307 ]; : m_wwbb: 0.0046014 0.99948 [ -3.2802 5.7307 ]; : -----------------------------------------------------------; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 5 Input = ( 1, 1, 7 ) Batch size = 128 Loss function = C; Layer 0 DENSE Layer: ( Input = 7 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 128 , 64 ) Activation Function = Tanh; Layer 4 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 128 , 1 ) Activation Function = Identity; : Using 11200 events for training and 2800 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 1.171; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.66619 0.628056 0.587341 0.0468945 20605.2 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.605139 0.593298 0.586597 0.0468674 20632.5 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.581823 0.587355 0.586416 0.0468644 20639.4 0; : 4 | 0.575813 0.593823 0.586862 0.0466947 20615.8 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.572257 0.578309 0.587324 0.0469531 20608.1 0; : 6 | 0.567347 0.582461 0.586969 0.0467966 20615.6 1; : 7 Minimum Test error found - save the configuration ; : 7 | 0.564553 0.577241 0.588162 0.0470086 20578.3 0; : 8 | 0.56278 0.582039 0.588324 0.0468355 20565",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html:24006,Learn,Learning,24006,doc/master/TMVA__Higgs__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8C.html,1,['Learn'],['Learning']
Usability,"47 typedef PositionVector2D< Polar2D<double>, DefaultCoordinateSystemTag > Polar2DPoint;; 48 typedef Polar2DPoint Polar2DPointD;; 49 ; 50 /**; 51 2D Point based on the polar coordinates rho, theta, phi in single precision.; 52 */; 53 typedef PositionVector2D< Polar2D<float>, DefaultCoordinateSystemTag > Polar2DPointF;; 54 ; 55 ; 56 ; 57 } // end namespace Math; 58 ; 59} // end namespace ROOT; 60 ; 61 ; 62#endif /* ROOT_Math_Point2Dfwd */; ROOT::Math::DefaultCoordinateSystemTagDefaultCoordinateSystemTag Default tag for identifying any coordinate system.Definition CoordinateSystemTags.h:38; ROOT::Math::PositionVector2DClass describing a generic position vector (point) in 2 dimensions.Definition PositionVector2D.h:50; MathNamespace for new Math classes and functions.; ROOT::Math::XYPointFPositionVector2D< Cartesian2D< float >, DefaultCoordinateSystemTag > XYPointF2D Point based on the cartesian coordinates x,y,z in single precisionDefinition Point2Dfwd.h:41; ROOT::Math::XYPointPositionVector2D< Cartesian2D< double >, DefaultCoordinateSystemTag > XYPoint2D Point based on the cartesian coordinates x,y,z in double precisionDefinition Point2Dfwd.h:35; ROOT::Math::Polar2DPointDPolar2DPoint Polar2DPointDDefinition Point2Dfwd.h:48; ROOT::Math::Polar2DPointFPositionVector2D< Polar2D< float >, DefaultCoordinateSystemTag > Polar2DPointF2D Point based on the polar coordinates rho, theta, phi in single precision.Definition Point2Dfwd.h:53; ROOT::Math::XYPointDXYPoint XYPointDDefinition Point2Dfwd.h:36; ROOT::Math::Polar2DPointPositionVector2D< Polar2D< double >, DefaultCoordinateSystemTag > Polar2DPoint2D Point based on the polar coordinates rho, theta, phi in double precision.Definition Point2Dfwd.h:47; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathgenvectorincMathPoint2Dfwd.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Point2Dfwd_8h_source.html:3430,Guid,Guide,3430,doc/master/Point2Dfwd_8h_source.html,https://root.cern,https://root.cern/doc/master/Point2Dfwd_8h_source.html,1,['Guid'],['Guide']
Usability,"4731 +/- 0.946564 ; p1 = -4.81581 +/- 0.26533 ; ; #include <TH1.h>; #include <TF1.h>; #include <TROOT.h>; ; bool reject;; double fline(double *x, double *par); {; if (reject && x[0] > 2.5 && x[0] < 3.5) {; TF1::RejectPoint();; return 0;; }; return par[0] + par[1]*x[0];; }; ; void fitExclude() {; //Create a source function; TF1 *f1 = new TF1(""f1"",""[0] +[1]*x +gaus(2)"",0,5);; f1->SetParameters(6,-1,5,3,0.2);; // create and fill histogram according to the source function; TH1F *h = new TH1F(""h"",""background + signal"",100,0,5);; h->FillRandom(""f1"",2000);; TF1 *fl = new TF1(""fl"",fline,0,5,2);; fl->SetParameters(2,-1);; //fit only the linear background excluding the signal area; reject = true;; h->Fit(fl,""0"");; reject = false;; //store 2 separate functions for visualization; TF1 *fleft = new TF1(""fleft"",fline,0,2.5,2);; fleft->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fleft);; gROOT->GetListOfFunctions()->Remove(fleft);; TF1 *fright = new TF1(""fright"",fline,3.5,5,2);; fright->SetParameters(fl->GetParameters());; h->GetListOfFunctions()->Add(fright);; gROOT->GetListOfFunctions()->Remove(fright);; h->Draw();; }; ; h#define h(i)Definition RSha256.hxx:106; TF1.h; TH1.h; TROOT.h; gROOT#define gROOTDefinition TROOT.h:406; TF11-Dim function classDefinition TF1.h:233; TF1::RejectPointstatic void RejectPoint(Bool_t reject=kTRUE)Static function to set the global flag to reject points the fgRejectPoint global flag is tested by al...Definition TF1.cxx:3683; TF1::GetParametersvirtual Double_t * GetParameters() constDefinition TF1.h:548; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; xDouble_t x[n]Definition legend1.C:17; f1TF1 * f1Definition legend1.C:11; AuthorRene Brun ; Definition in file fitExclude.C. tutorialsfitfitExclude.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitExclude_8C.html:2329,Guid,Guide,2329,doc/master/fitExclude_8C.html,https://root.cern,https://root.cern/doc/master/fitExclude_8C.html,1,['Guid'],['Guide']
Usability,"48 etype == kTObject || etype == kTString || etype == kTNamed) {; 5049 // A data member is destroyed, but not deleted.; 5050 cle->Destructor(eaddr, kTRUE);; 5051 }; 5052 ; 5053 if (etype == kSTL) {; 5054 // A data member is destroyed, but not deleted.; 5055 TVirtualCollectionProxy *pr = cle->GetCollectionProxy();; 5056 if (!pr) {; 5057 if (strcmp(ele->GetName(),""This"")==0) {; 5058 // missing information, avoid infinite loop; 5059 // by doing nothing ....; 5060 } else {; 5061 cle->Destructor(eaddr, kTRUE);; 5062 }; 5063 } else {; 5064 if (ele->TestBit(TStreamerElement::kDoNotDelete)) {; 5065 TVirtualCollectionProxy::TPushPop env(cle->GetCollectionProxy(), eaddr); // used for both this 'clear' and the 'clear' inside destructor.; 5066 cle->GetCollectionProxy()->Clear(); // empty the collection without deleting the pointer; 5067 pr->Destructor(eaddr, kTRUE);; 5068 } else {; 5069 pr->Destructor(eaddr, kTRUE);; 5070 }; 5071 }; 5072 }; 5073 ; 5074 if (etype == kObject + kOffsetL || etype == kAny + kOffsetL ||; 5075 etype == kTObject + kOffsetL || etype == kTString + kOffsetL ||; 5076 etype == kTNamed + kOffsetL || etype == kSTL + kOffsetL) {; 5077 // For a data member which is an array of objects, we; 5078 // destroy the objects, but do not delete them.; 5079 Int_t len = ele->GetArrayLength();; 5080 Int_t size = cle->Size();; 5081 char* r = eaddr + (size * (len - 1));; 5082 for (Int_t j = len - 1; j >= 0; --j, r -= size) {; 5083 cle->Destructor(r, kTRUE);; 5084 }; 5085 }; 5086 } // iter over elements; 5087 ; 5088 if (!dtorOnly) {; 5089 delete[] p;; 5090 }; 5091}; 5092 ; 5093////////////////////////////////////////////////////////////////////////////////; 5094/// Emulated destructor for this class.; 5095///; 5096/// An emulated object is destroyed at address p.; 5097/// Destruct each of the datamembers in the same order; 5098/// as the implicit destructor would.; 5099 ; 5100void TStreamerInfo::Destructor(void* obj, Bool_t dtorOnly); 5101{; 5102 // Do nothing if passed a null",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:202025,Clear,Clear,202025,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"48);; hpx[j]->Draw();; }; ; // Fill histograms randomly; gRandom->SetSeed(12345);; Float_t px, py, pz;; const Int_t kUPDATE = 10;; for (Int_t i = 0; i <= 300; i++) {; gRandom->Rannor(px,py);; for (Int_t j = 0; j < 3; j++); hpx[j]->Fill(px);; if (i && (i % kUPDATE) == 0); canvasRefresh(c1);; }; ; for (Int_t j = 0; j < 3; j++); hpx[j]->Fit(""gaus"");; ; canvasRefresh(c1);; }; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; kUPDATE@ kUPDATEDefinition TFitParametersDialog.cxx:46; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1KTH1K class supports the nearest K Neighbours method, widely used in cluster analysis.Definition TH1K.h:26; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; c1return c1Definition legend1.C:41; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; AuthorVictor Perevovchikov ; Definition in file hksimple.C. tutorialshisthksimple.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hksimple_8C.html:2822,Guid,Guide,2822,doc/master/hksimple_8C.html,https://root.cern,https://root.cern/doc/master/hksimple_8C.html,1,['Guid'],['Guide']
Usability,"480; TGeoManager::MakeBoxTGeoVolume * MakeBox(const char *name, TGeoMedium *medium, Double_t dx, Double_t dy, Double_t dz)Make in one step a volume pointing to a box shape with given medium.Definition TGeoManager.cxx:3169; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; TGeoVolume::GetShapeTGeoShape * GetShape() constDefinition TGeoVolume.h:190; rootgeomTGeoNode * rootgeom()Definition eveGeoBrowser.C:47; AuthorAndrei Gheata ; Definition in file rootgeom.C. tutorialsgeomrootgeom.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rootgeom_8C.html:8250,Guid,Guide,8250,doc/master/rootgeom_8C.html,https://root.cern,https://root.cern/doc/master/rootgeom_8C.html,1,['Guid'],['Guide']
Usability,"485; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; TTree::SetBranchStatusvirtual void SetBranchStatus(const char *bname, bool status=true, UInt_t *found=nullptr)Set branch status to Process or DoNotProcess.Definition TTree.cxx:8534; TTree::GetEntryvirtual Int_t GetEntry(Long64_t entry, Int_t getall=0)Read all branches of entry and return total number of bytes read.Definition TTree.cxx:5638; TTree::GetCurrentFileTFile * GetCurrentFile() constReturn pointer to the current file.Definition TTree.cxx:5479; TTree::GetDirectoryTDirectory * GetDirectory() constDefinition TTree.h:462; TTree::GetEntriesvirtual Long64_t GetEntries() constDefinition TTree.h:463; TTree::GetTreevirtual TTree * GetTree() constDefinition TTree.h:557; TTree::LoadTreevirtual Long64_t LoadTree(Long64_t entry)Set current entry.Definition TTree.cxx:6473; TTree::ResetBranchAddressesvirtual void ResetBranchAddresses()Tell all of our branches to drop their current objects and allocate new ones.Definition TTree.cxx:8075; TVectorT< Double_t >; bool; double; int; unsigned int; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; TMVA::LargestCommonDividerInt_t LargestCommonDivider(Int_t a, Int_t b)Definition DataSetFactory.cxx:80; TMVA::EndlMsgLogger & Endl(MsgLogger &ml)Definition MsgLogger.h:148; TMath::IsNaNBool_t IsNaN(Double_t x)Definition TMath.h:892; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::FiniteInt_t Finite(Double_t x)Check if it is finite with a mask in order to be consistent in presence of fast math.Definition TMath.h:770; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699; whatstatic const char * whatDefinition stlLoader.cc:5; vecDefinition civetweb.c:1855; Types.h. tmvatmvasrcDataSetFactory.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataSetFactory_8cxx_source.html:96884,Guid,Guide,96884,doc/master/DataSetFactory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataSetFactory_8cxx_source.html,1,['Guid'],['Guide']
Usability,"49 of file TSpectrumFit.h. ◆ fSigmaCalc. Double_t TSpectrumFit::fSigmaCalc. protected . calculated value of sigma parameter ; Definition at line 39 of file TSpectrumFit.h. ◆ fSigmaErr. Double_t TSpectrumFit::fSigmaErr. protected . error value of sigma parameter ; Definition at line 40 of file TSpectrumFit.h. ◆ fSigmaInit. Double_t TSpectrumFit::fSigmaInit. protected . initial value of sigma parameter ; Definition at line 38 of file TSpectrumFit.h. ◆ fSInit. Double_t TSpectrumFit::fSInit. protected . initial value of s parameter (relative amplitude of step), for details see html manual and references ; Definition at line 47 of file TSpectrumFit.h. ◆ fStatisticType. Int_t TSpectrumFit::fStatisticType. protected . type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood ; Definition at line 24 of file TSpectrumFit.h. ◆ fTCalc. Double_t TSpectrumFit::fTCalc. protected . calculated value of t parameter ; Definition at line 42 of file TSpectrumFit.h. ◆ fTErr. Double_t TSpectrumFit::fTErr. protected . error value of t parameter ; Definition at line 43 of file TSpectrumFit.h. ◆ fTInit. Double_t TSpectrumFit::fTInit. protected . initial value of t parameter (relative amplitude of tail), for details see html manual and references ; Definition at line 41 of file TSpectrumFit.h. ◆ fXmax. Int_t TSpectrumFit::fXmax. protected . last fitted channel ; Definition at line 23 of file TSpectrumFit.h. ◆ fXmin. Int_t TSpectrumFit::fXmin. protected . first fitted channel ; Definition at line 22 of file TSpectrumFit.h. Libraries for TSpectrumFit:. [legend]; The documentation for this class was generated from the following files:; hist/spectrum/inc/TSpectrumFit.h; hist/spectrum/src/TSpectrumFit.cxx. TSpectrumFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrumFit.html:57925,Guid,Guide,57925,doc/master/classTSpectrumFit.html,https://root.cern,https://root.cern/doc/master/classTSpectrumFit.html,1,['Guid'],['Guide']
Usability,"49 xx[0] = xaxis->GetXmax();; 11450 view->WCtoNDC(xx,u);; 11451 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11452 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11453 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 11480 view->WCtoNDC(xx,u);; 11481 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11482 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11483 gVirtualX->DrawPolyLine(5,rect2);; 11484 }; 11485 ; 11486 c->Clear();; 11487 c->cd();; 11488 TH2 *hp = (TH2*)h3->Project3D(""xy"");; 11489 zaxis->SetRange(first,last);; 11490 if (hp) {; 11491 hp->SetFillColor(38);; 11492 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXY of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11493 else hp->SetTitle(TString::Format(""ProjectionXY, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11494 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11495 hp->SetYTitle(fH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:416674,ux,uxmin,416674,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,4931.9 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 18947.1 will supersede previous event count of 11104.6 for normalization of PDF projections; [#1] INFO:Plotting -- RooPlot::updateFitRangeNorm: New event count of 30765.5 will supersede previous event count of 18947.1 for normalization of PDF projections; [#0] PROGRESS:Caching -- creating cache from getCache function for 0xa7ee9d0; [#0] PROGRESS:Caching -- current storage has size 3; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_SM_NPsq0_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq1_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq2_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#0] PROGRESS:Caching -- creating cache from getCache function for 0xa8c24c0; [#0] PROGRESS:Caching -- current storage has size 3; [#0] PROGRESS:ObjectHandling -- observable: pTV; [#0] PROGRESS:ObjectHandling -- binWidth: binWidth_pTV; ; [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_SM_NPsq0_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq1_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); [#1] INFO:NumericIntegration -- RooRealIntegral::init(w_cHq3_NPsq2_morphfunc_Int[cHq3]) using numeric integrator RooIntegrator1D to calculate Int(cHq3); DateJanuary 2022 ; AuthorRahul Balasubramanian ; Definition in file rf711_lagrangianmorph.py. tutorialsroofitrf711_lagrangianmorph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html:9272,Guid,Guide,9272,doc/master/rf711__lagrangianmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf711__lagrangianmorph_8py.html,1,['Guid'],['Guide']
Usability,"4: abnormal termination (e.g., MIGRAD not converged); 2656/// - 9: reserved; 2657/// - 10: END command; 2658/// - 11: EXIT or STOP command; 2659/// - 12: RETURN command; 2660///; 2661/// see also; 2662/// [the possible list of all Minuit commands](https://root.cern/sites/d35c7d8c.web.cern.ch/files/minuit.pdf).; 2663 ; 2664void TMinuit::mnexcm(const char *command, Double_t *plist, Int_t llist, Int_t &ierflg); 2665{; 2666 /* Initialized data */; 2667 ; 2668 TString comand = command;; 2669 static const char *const cname[40] = {; 2670 ""MINImize "",; 2671 ""SEEk "",; 2672 ""SIMplex "",; 2673 ""MIGrad "",; 2674 ""MINOs "",; 2675 ""SET xxx "",; 2676 ""SHOw xxx "",; 2677 ""TOP of pag"",; 2678 ""FIX "",; 2679 ""REStore "",; 2680 ""RELease "",; 2681 ""SCAn "",; 2682 ""CONtour "",; 2683 ""HESse "",; 2684 ""SAVe "",; 2685 ""IMProve "",; 2686 ""CALl fcn "",; 2687 ""STAndard "",; 2688 ""END "",; 2689 ""EXIt "",; 2690 ""RETurn "",; 2691 ""CLEar "",; 2692 ""HELP "",; 2693 ""MNContour "",; 2694 ""STOp "",; 2695 ""JUMp "",; 2696 "" "",; 2697 "" "",; 2698 "" "",; 2699 "" "",; 2700 "" "",; 2701 "" "",; 2702 "" "",; 2703 ""COVARIANCE"",; 2704 ""PRINTOUT "",; 2705 ""GRADIENT "",; 2706 ""MATOUT "",; 2707 ""ERROR DEF "",; 2708 ""LIMITS "",; 2709 ""PUNCH ""};; 2710 ; 2711 Int_t nntot = 40;; 2712 ; 2713 /* Local variables */; 2714 Double_t step, xptu[101], yptu[101], f, rno;; 2715 Int_t icol, kcol, ierr, iint, iext, lnow, nptu, i, iflag, ierrf;; 2716 Int_t ilist, nparx, izero, nf, lk, it, iw, inonde, nsuper;; 2717 Int_t it2, ke1, ke2, nowprt, kll, krl;; 2718 TString chwhy, c26, cvblnk, cneway, comd;; 2719 TString ctemp;; 2720 Bool_t lfreed, ltofix, lfixed;; 2721 ; 2722// alphabetical order of command names!; 2723 ; 2724 /* Function Body */; 2725 ; 2726 lk = comand.Length();; 2727 if (lk > 20) lk = 20;; 2728 fCword = comand;; 2729 fCword.ToUpper();; 2730// Copy the first MAXP arguments into WORD7, making; 2731// sure that WORD7(1)=0 if LLIST=0; 2732 for (iw = 1; iw <= fMaxpar; ++iw) {; 2733 fWord7[iw-1] = 0;; 2734 if (iw <= llist) fWord7[iw-1] = plist[iw-1];; 2735 }; 273",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:87460,SIMpl,SIMplex,87460,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,"['CLEar', 'SIMpl']","['CLEar', 'SIMplex']"
Usability,"4;; 1583 dy = 0.35;; 1584 }; 1585 }; 1586 } while (cll);; 1587 }; 1588 Update();; 1589}; 1590 ; 1591////////////////////////////////////////////////////////////////////////////////; 1592/// Function called to draw a crosshair in the canvas; 1593///; 1594/// Example:; 1595/// ~~~ {.cpp}; 1596/// Root > TFile f(""hsimple.root"");; 1597/// Root > hpxpy.Draw();; 1598/// Root > c1.SetCrosshair();; 1599/// ~~~; 1600/// When moving the mouse in the canvas, a crosshair is drawn; 1601///; 1602/// - if the canvas fCrosshair = 1 , the crosshair spans the full canvas; 1603/// - if the canvas fCrosshair > 1 , the crosshair spans only the pad; 1604 ; 1605void TPad::DrawCrosshair(); 1606{; 1607 if (!gPad || (gPad->GetEvent() == kMouseEnter)) return;; 1608 ; 1609 TPad *cpad = (TPad*)gPad;; 1610 TCanvas *canvas = cpad->GetCanvas();; 1611 canvas->FeedbackMode(kTRUE);; 1612 ; 1613 //erase old position and draw a line at current position; 1614 Int_t pxmin,pxmax,pymin,pymax,px,py;; 1615#ifndef R__HAS_COCOA; 1616 Int_t pxold = fCrosshairPos%10000;; 1617 Int_t pyold = fCrosshairPos/10000;; 1618#endif // R__HAS_COCOA; 1619 px = cpad->GetEventX();; 1620 py = cpad->GetEventY()+1;; 1621 if (canvas->GetCrosshair() > 1) { //crosshair only in the current pad; 1622 pxmin = cpad->XtoAbsPixel(fX1);; 1623 pxmax = cpad->XtoAbsPixel(fX2);; 1624 pymin = cpad->YtoAbsPixel(fY1);; 1625 pymax = cpad->YtoAbsPixel(fY2);; 1626 } else { //default; crosshair spans the full canvas; 1627 pxmin = 0;; 1628 pxmax = canvas->GetWw();; 1629 pymin = 0;; 1630 pymax = cpad->GetWh();; 1631 }; 1632#ifndef R__HAS_COCOA; 1633 // Not needed, no XOR with Cocoa.; 1634 if(pxold) gVirtualX->DrawLine(pxold,pymin,pxold,pymax);; 1635 if(pyold) gVirtualX->DrawLine(pxmin,pyold,pxmax,pyold);; 1636#endif // R__HAS_COCOA; 1637 if (cpad->GetEvent() == kButton1Down ||; 1638 cpad->GetEvent() == kButton1Up ||; 1639 cpad->GetEvent() == kMouseLeave) {; 1640 fCrosshairPos = 0;; 1641 return;; 1642 }; 1643 gVirtualX->DrawLine(px,pymin,px,pymax);; 164",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:50441,Feedback,FeedbackMode,50441,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['Feedback'],['FeedbackMode']
Usability,"4_t bytesRead);  ; void IncCPUTime (Double_t procTime);  ; void IncEntries (Long64_t entries=1);  ; void IncProcTime (Double_t procTime);  ; void IncReadCalls (Long64_t readCalls);  ; TClass * IsA () const override;  ; TProofProgressStatus & operator+= (const TProofProgressStatus &st);  '+=' operator ;  ; TProofProgressStatus operator- (TProofProgressStatus &st);  '-' operator ;  ; TProofProgressStatus & operator-= (const TProofProgressStatus &st);  '-=' operator ;  ; void Print (Option_t *option="""") const override;  Dump the content. ;  ; void Reset ();  ; void SetBytesRead (Long64_t bytesRead);  ; void SetCPUTime (Double_t procTime);  ; void SetEntries (Long64_t entries);  ; void SetLastEntries (Long64_t entries);  ; void SetLastProcTime (Double_t procTime);  ; void SetLastUpdate (Double_t updtTime=0);  Update time stamp either with the passed value (if > 0) or with the current time. ;  ; void SetLearnTime (Double_t learnTime);  ; void SetProcTime (Double_t procTime);  ; void SetReadCalls (Long64_t readCalls);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofProgressStatus.html:2723,learn,learnTime,2723,doc/master/classTProofProgressStatus.html,https://root.cern,https://root.cern/doc/master/classTProofProgressStatus.html,1,['learn'],['learnTime']
Usability,"5 ; 2126 fInterpreter = CreateInterpreter(gInterpreterLib, interpArgs);; 2127 ; 2128 fCleanups->Add(fInterpreter);; 2129 fInterpreter->SetBit(kMustCleanup);; 2130 ; 2131 fgRootInit = kTRUE;; 2132 ; 2133 // initialize gClassTable is not already done; 2134 if (!gClassTable); 2135 new TClassTable;; 2136 ; 2137 // Initialize all registered dictionaries.; 2138 for (std::vector<ModuleHeaderInfo_t>::const_iterator; 2139 li = GetModuleHeaderInfoBuffer().begin(),; 2140 le = GetModuleHeaderInfoBuffer().end(); li != le; ++li) {; 2141 // process buffered module registrations; 2142 fInterpreter->RegisterModule(li->fModuleName,; 2143 li->fHeaders,; 2144 li->fIncludePaths,; 2145 li->fPayloadCode,; 2146 li->fFwdDeclCode,; 2147 li->fTriggerFunc,; 2148 li->fFwdNargsToKeepColl,; 2149 li->fClassesHeaders,; 2150 kTRUE /*lateRegistration*/,; 2151 li->fHasCxxModule);; 2152 }; 2153 GetModuleHeaderInfoBuffer().clear();; 2154 ; 2155 fInterpreter->Initialize();; 2156}; 2157 ; 2158////////////////////////////////////////////////////////////////////////////////; 2159/// Helper function used by TClass::GetClass().; 2160/// This function attempts to load the dictionary for 'classname'; 2161/// either from the TClassTable or from the list of generator.; 2162/// If silent is 'true', do not warn about missing dictionary for the class.; 2163/// (typically used for class that are used only for transient members); 2164///; 2165/// The 'requestedname' is expected to be already normalized.; 2166 ; 2167TClass *TROOT::LoadClass(const char *requestedname, Bool_t silent) const; 2168{; 2169 return TClass::LoadClass(requestedname, silent);; 2170}; 2171 ; 2172////////////////////////////////////////////////////////////////////////////////; 2173/// Check if class ""classname"" is known to the interpreter (in fact,; 2174/// this check is not needed anymore, so classname is ignored). If; 2175/// not it will load library ""libname"". If the library couldn't be found with original; 2176/// libname and if the name was no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:82177,clear,clear,82177,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['clear'],['clear']
Usability,"5 if (!closed) {; 5056 if (x[0] != x[npoints-1] || y[0] != y[npoints-1]) goto L40;; 5057 if (x[npoints-2] == x[npoints-1] && y[npoints-2] == y[npoints-1]) goto L40;; 5058 if (x[0] == x[1] && y[0] == y[1]) goto L40;; 5059 }; 5060 flgic = kFALSE;; 5061 flgis = kTRUE;; 5062 ; 5063 // flgic is true if the curve is open and false if it is closed.; 5064 // flgis is true in the main loop, but is false if there is; 5065 // a deviation from the main loop.; 5066 ; 5067 km = npoints - 1;; 5068 ; 5069 // Calculate direction cosines at P(1) using P(N-1),P(1),P(2).; 5070 ; 5071 goto L100;; 5072L40:; 5073 flgic = kTRUE;; 5074 flgis = kFALSE;; 5075 ; 5076 // Skip excessive consecutive equal points.; 5077 ; 5078L50:; 5079 if (k >= npoints) {; 5080 finished = 1; // Prepare to clear out remaining short vectors before returning; 5081 if (npt > 1) goto L310;; 5082 goto L390;; 5083 }; 5084 k++;; 5085 if (x[k-1] == x[k-2] && y[k-1] == y[k-2]) goto L50;; 5086L60:; 5087 km = k-1;; 5088 if (k > npoints) {; 5089 finished = 1; // Prepare to clear out remaining short vectors before returning; 5090 if (npt > 1) goto L310;; 5091 goto L390;; 5092 }; 5093 if (k < npoints) goto L90;; 5094 if (!flgic) { kp = 2; goto L130;}; 5095 ; 5096L80:; 5097 if (flgis) goto L150;; 5098 ; 5099 // Draw a straight line from P(k-1) to P(k).; 5100 ; 5101 finished = -1;; 5102 goto L170;; 5103 ; 5104 // Test whether P(k) is a cusp.; 5105 ; 5106L90:; 5107 if (x[k-1] == x[k] && y[k-1] == y[k]) goto L80;; 5108L100:; 5109 kp = k+1;; 5110 goto L130;; 5111 ; 5112 // Branch if the next section of the curve begins at a cusp.; 5113 ; 5114L110:; 5115 if (!flgis) goto L50;; 5116 ; 5117 // Carry forward the direction cosines from the previous arc.; 5118 ; 5119L120:; 5120 co = ct;; 5121 so = st;; 5122 k++;; 5123 goto L60;; 5124 ; 5125 // Calculate the direction cosines at P(k). If k=1 then; 5126 // N-1 is used for k-1. If k=N then 2 is used for k+1.; 5127 // direction cosines at P(k) obtained from P(k-1),P(k),P(k+1).; 5128 ; 5129L130",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:177801,clear,clear,177801,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['clear'],['clear']
Usability,"5,0.139,0.17,5);; f5->SetParameters(1000000,.25,2000,.1454,.001);; hdmd->Fit(""f5"",""lr"");. //create the canvas for tau d0; gStyle->SetOptFit(0);; gStyle->SetOptStat(1100);; TCanvas *c2 = new TCanvas(""c2"",""tauD0"",100,100,800,600);; c2->SetGrid();; c2->SetBottomMargin(0.15);. // Project slices of 2-d histogram h2 along X ,; // then fit each slice with function f2 and make a; // histogram for each fit parameter.; // Note that the generated histograms are added; // to the list of objects in the current directory. TF1 *f2 = new TF1(""f2"",fdm2,0.139,0.17,2);; f2->SetParameters(10000,10);; h2->FitSlicesX(f2,0,0,1,""qln"");; TH1D *h2_1 = (TH1D*)gDirectory->Get(""h2_1"");; h2_1->GetXaxis()->SetTitle(""#tau[ps]"");; h2_1->SetMarkerStyle(21);; h2_1->Draw();; c2->Update();; TLine *line = new TLine(0,0,0,c2->GetUymax());; line->Draw();. // save the event list to a Root file if one was produced; if (fillList) {; TFile efile(""elist.root"",""recreate"");; elist->Write();; }; }; 22 Networking; In this chapter, you will learn how to send data over the network using the ROOT socket classes.; 22.1 Setting-up a Connection; On the serverside, we create a TServerSocket to wait for a connection request over the network. If the request is accepted, it returns a full-duplex socket. Once the connection is accepted, we can communicate to the client that we are ready to go by sending the string “go”, and we can close the server socket.; { // server; TServerSocket *ss = new TServerSocket(9090,kTRUE);; TSocket *socket = ss->Accept();; socket->Send(""go"");; ss->Close();; }; On the clientside, we create a socket and ask the socket to receive input.; { // client; TSocket *socket = new TSocket(""localhost"",9090);; Char str[32];; socket->Recv(str,32);; }; 22.2 Sending Objects over the Network; We have just established a connection and you just saw how to send and receive a string with the example “go”. Now let’s send a histogram.; To send an object (in our case on the client side) it has to derive from TObject cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1097303,learn,learn,1097303,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['learn'],['learn']
Usability,"50130 124559; TDecayChannel Class describing a particle decay channel; TDecompBK Matrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictionary ABC defining interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size boxes, boxes of different sizes, or arbitrary sexto-epipeds); each primitive can be ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/ClassIndex.html:56428,feedback,feedback,56428,root/html528/ClassIndex.html,https://root.cern,https://root.cern/root/html528/ClassIndex.html,2,['feedback'],['feedback']
Usability,"51 ; 152 TCollection() : fName(), fSize(0) { }; 153 ; 154 virtual void PrintCollectionHeader(Option_t* option) const;; 155 virtual const char* GetCollectionEntryName(TObject* entry) const;; 156 virtual void PrintCollectionEntry(TObject* entry, Option_t* option, Int_t recurse) const;; 157 ; 158public:; 159 enum { kInitCapacity = 16, kInitHashTableCapacity = 17 };; 160 ; 161 virtual ~TCollection();; 162 virtual void Add(TObject *obj) = 0;; 163 void AddVector(TObject *obj1, ...);; 164 virtual void AddAll(const TCollection *col);; 165 Bool_t AssertClass(TClass *cl) const;; 166 void Browse(TBrowser *b) override;; 167 Int_t Capacity() const { return fSize; }; 168 void Clear(Option_t *option="""") override = 0;; 169 TObject *Clone(const char *newname="""") const override;; 170 Int_t Compare(const TObject *obj) const override;; 171 Bool_t Contains(const char *name) const { return FindObject(name) != nullptr; }; 172 Bool_t Contains(const TObject *obj) const { return FindObject(obj) != nullptr; }; 173 void Delete(Option_t *option="""") override = 0;; 174 void Draw(Option_t *option="""") override;; 175 void Dump() const override;; 176 TObject *FindObject(const char *name) const override;; 177 TObject *operator()(const char *name) const;; 178 TObject *FindObject(const TObject *obj) const override;; 179 virtual Int_t GetEntries() const { return GetSize(); }; 180 const char *GetName() const override;; 181 virtual TObject **GetObjectRef(const TObject *obj) const = 0;; 182 /// Return the *capacity* of the collection, i.e. the current total amount of space that has been allocated so far.; 183 /// Same as `Capacity`. Use `GetEntries` to get the number of elements currently in the collection.; 184 virtual Int_t GetSize() const { return fSize; }; 185 virtual Int_t GrowBy(Int_t delta) const;; 186 ULong_t Hash() const override { return fName.Hash(); }; 187 Bool_t IsArgNull(const char *where, const TObject *obj) const;; 188 virtual Bool_t IsEmpty() const { return GetSize() <= 0; }; 189 Bool_t IsF",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollection_8h_source.html:5771,Clear,Clear,5771,doc/master/TCollection_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollection_8h_source.html,1,['Clear'],['Clear']
Usability,51 of file KDTree.h. ◆ IsFrozen(). template<class _DataPoint > . Bool_t ROOT::Math::KDTree< _DataPoint >::IsFrozen ; (; ); const. inline . Definition at line 352 of file KDTree.h. ◆ Last() [1/2]. template<class _DataPoint > . KDTree< _DataPoint >::iterator ROOT::Math::KDTree< _DataPoint >::Last. inline . Definition at line 334 of file KDTree.icc. ◆ Last() [2/2]. template<class _DataPoint > . const KDTree< _DataPoint >::iterator ROOT::Math::KDTree< _DataPoint >::Last. inline . Definition at line 350 of file KDTree.icc. ◆ operator=(). template<class _DataPoint > . KDTree< point_type > & ROOT::Math::KDTree< _DataPoint >::operator= ; (; const KDTree< point_type > & ; ). inlineprivate . Definition at line 363 of file KDTree.h. ◆ Print(). template<class _DataPoint > . void ROOT::Math::KDTree< _DataPoint >::Print ; (; ). inline . Definition at line 355 of file KDTree.h. ◆ Reset(). template<class _DataPoint > . void ROOT::Math::KDTree< _DataPoint >::Reset. Definition at line 366 of file KDTree.icc. ◆ SetOwner(). template<class _DataPoint > . void ROOT::Math::KDTree< _DataPoint >::SetOwner ; (; Bool_t ; bIsOwner = true). Definition at line 391 of file KDTree.icc. ◆ SetSplitOption(). template<class _DataPoint > . void ROOT::Math::KDTree< _DataPoint >::SetSplitOption ; (; eSplitOption ; opt). Definition at line 410 of file KDTree.icc. Member Data Documentation. ◆ fBucketSize. template<class _DataPoint > . Double_t ROOT::Math::KDTree< _DataPoint >::fBucketSize. private . Definition at line 366 of file KDTree.h. ◆ fHead. template<class _DataPoint > . BaseNode* ROOT::Math::KDTree< _DataPoint >::fHead. private . Definition at line 365 of file KDTree.h. ◆ fIsFrozen. template<class _DataPoint > . Bool_t ROOT::Math::KDTree< _DataPoint >::fIsFrozen. private . Definition at line 367 of file KDTree.h. math/mathcore/inc/Math/KDTree.h; math/mathcore/inc/Math/KDTree.icc. ROOTMathKDTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1KDTree.html:8619,Guid,Guide,8619,doc/master/classROOT_1_1Math_1_1KDTree.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1KDTree.html,1,['Guid'],['Guide']
Usability,52 of file GSLSimAnMinimizer.cxx. Member Function Documentation. ◆ DoSetMinimOptions(). void ROOT::Math::GSLSimAnMinimizer::DoSetMinimOptions ; (; const GSLSimAnParams & ; params). protected . Set the Minimizer options from the simulated annealing parameters. ; Definition at line 148 of file GSLSimAnMinimizer.cxx. ◆ DoSetSimAnParameters(). void ROOT::Math::GSLSimAnMinimizer::DoSetSimAnParameters ; (; const MinimizerOptions & ; opt). protected . set minimizer option parameters from stored ROOT::Math::MinimizerOptions (fOpt) ; Definition at line 164 of file GSLSimAnMinimizer.cxx. ◆ Minimize(). bool ROOT::Math::GSLSimAnMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Reimplemented from ROOT::Math::BasicMinimizer.; Definition at line 56 of file GSLSimAnMinimizer.cxx. ◆ MinimizerParameters(). const GSLSimAnParams & ROOT::Math::GSLSimAnMinimizer::MinimizerParameters ; (; ); const. inline . Get current minimizer option parameters. ; Definition at line 95 of file GSLSimAnMinimizer.h. ◆ NCalls(). unsigned int ROOT::Math::GSLSimAnMinimizer::NCalls ; (; ); const. overridevirtual . number of calls ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 138 of file GSLSimAnMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GSLSimAnMinimizer::SetParameters ; (; const GSLSimAnParams & ; params). inline . set new minimizer option parameters using directly the GSLSimAnParams structure ; Definition at line 98 of file GSLSimAnMinimizer.h. Member Data Documentation. ◆ fSolver. ROOT::Math::GSLSimAnnealing ROOT::Math::GSLSimAnMinimizer::fSolver. private . Definition at line 112 of file GSLSimAnMinimizer.h. Libraries for ROOT::Math::GSLSimAnMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLSimAnMinimizer.h; math/mathmore/src/GSLSimAnMinimizer.cxx. ROOTMathGSLSimAnMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html:15281,Guid,Guide,15281,doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLSimAnMinimizer.html,1,['Guid'],['Guide']
Usability,"52; ROOT::Math::MixMaxEngine::operator()double operator()()generate a double random number (faster interface)Definition MixMaxEngine.h:138; ROOT::Math::MixMaxEngine::Rndm_impldouble Rndm_impl()implementation function to generate the random numberDefinition MixMaxEngine.icc:92; ROOT::Math::MixMaxEngine::Namestatic const char * Name()get name of the generatorDefinition MixMaxEngine.icc:157; ROOT::Math::MixMaxEngine::fRngMixMaxEngineImpl< N > * fRngmixmax internal engine classDefinition MixMaxEngine.h:170; ROOT::Math::MixMaxEngine::RndmArrayvoid RndmArray(int n, double *array)generate an array of random numbersDefinition MixMaxEngine.icc:123; ROOT::Math::MixMaxEngine::SetStatevoid SetState(const std::vector< StateInt_t > &state)set the full initial generator stateDefinition MixMaxEngine.icc:130; ROOT::Math::MixMaxEngine::Sizestatic int Size()Get the size of the generator.Definition MixMaxEngine.icc:147; ROOT::Math::MixMaxEngine::Result_tuint64_t Result_tDefinition MixMaxEngine.h:114; ROOT::Math::MixMaxEngine::MaxIntstatic uint64_t MaxInt()maximum integer that can be generated. For MIXMAX is 2^61-1Definition MixMaxEngine.icc:111; ROOT::Math::MixMaxEngine::MinIntstatic uint64_t MinInt()minimum integer that can be generated. For MIXMAX is 0Definition MixMaxEngine.icc:117; ROOT::Math::TRandomEngineDefinition TRandomEngine.h:19; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::MixMaxEngine256MixMaxEngine< 256, 2 > MixMaxEngine256Definition MixMaxEngine.h:175; ROOT::Math::MixMaxEngine240MixMaxEngine< 240, 0 > MixMaxEngine240Definition MixMaxEngine.h:174; ROOT::Math::MixMaxEngine17MixMaxEngine< 17, 0 > MixMaxEngine17Definition MixMaxEngine.h:176; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathMixMaxEngine.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MixMaxEngine_8h_source.html:10101,Guid,Guide,10101,doc/master/MixMaxEngine_8h_source.html,https://root.cern,https://root.cern/doc/master/MixMaxEngine_8h_source.html,1,['Guid'],['Guide']
Usability,"53 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 11480 view->WCtoNDC(xx,u);; 11481 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11482 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11483 gVirtualX->DrawPolyLine(5,rect2);; 11484 }; 11485 ; 11486 c->Clear();; 11487 c->cd();; 11488 TH2 *hp = (TH2*)h3->Project3D(""xy"");; 11489 zaxis->SetRange(first,last);; 11490 if (hp) {; 11491 hp->SetFillColor(38);; 11492 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXY of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11493 else hp->SetTitle(TString::Format(""ProjectionXY, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11494 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11495 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11496 hp->SetZTitle(""Number of Entries"");; 11497 hp->Draw(fShowOption.Data());; 11498 }; 11499 }; 11500 break;; 11501 ; 11502 case 5:; 11503 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:416843,ux,uxmin,416843,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"54 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd ).c_str(),kTRUE);; 2675 }; 2676 void SetComment(const char *title) {; 2677 const char *left = strstr(title,""["");; 2678 if (left) {; 2679 const char *right = strstr(left,""]"");; 2680 if (right) {; 2681 ++left;; 2682 fComment.Append(left,right-left);; 2683 }; 2684 }; 2685 }; 2686 void Clear() {; 2687 fName.Clear();; 2688 fClassName.Clear();; 2689 fComment.Clear();; 2690 }; 2691 /* Hide this not yet used implementation to suppress warnings message; 2692 from icc 11; 2693 Bool_t operator==(const TMemberInfo &other) {; 2694 return fName==other.fName; 2695 && fClassName == other.fClassName; 2696 && fComment == other.fComment;; 2697 }; 2698 */; 2699 Bool_t operator!=(const TMemberInfo &other) {; 2700 if (fName != other.fName) return kTRUE;; 2701 if (fDataType < TStreamerInfo::kObject) {; 2702 // For simple type, let compare the data type; 2703 if (fDataType != other.fDataType) {; 2704 if ( (fDataType == 4 && other.fDataType == 16); 2705 || (fDataType == 16 && other.fDataType == 4) ) {; 2706 // long and 'long long' have the same file format; 2707 } else if ( (fDataType == 14 && other.fDataType == 17); 2708 || (fDataType == 17 && other.fDataType == 14) ) {; 2709 // unsigned long and 'unsigned long long' have the same file format; 2710 } else if ( (fDataType == 3 && other.fDataType == 6); 2711 ||(fDataType == 6 && other.fDataType ==",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:106923,Clear,Clear,106923,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,558 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerObjectAnyPointer::GetSize ; (; ); const. overridevirtual . Returns size of objectpointer in bytes. ; Reimplemented from TStreamerElement.; Definition at line 1574 of file TStreamerElement.cxx. ◆ Init(). void TStreamerObjectAnyPointer::Init ; (; TVirtualStreamerInfo * ; obj = nullptr). overridevirtual . Setup the element. ; Reimplemented from TStreamerElement.; Definition at line 1547 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerObjectAnyPointer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TStreamerElement.; Definition at line 369 of file TStreamerElement.h. ◆ IsaPointer(). Bool_t TStreamerObjectAnyPointer::IsaPointer ; (; ); const. inlineoverridevirtual . Reimplemented from TStreamerElement.; Definition at line 366 of file TStreamerElement.h. ◆ operator=(). TStreamerObjectAnyPointer & TStreamerObjectAnyPointer::operator= ; (; const TStreamerObjectAnyPointer & ; ). privatedelete . ◆ SetArrayDim(). void TStreamerObjectAnyPointer::SetArrayDim ; (; Int_t ; dim). overridevirtual . Set number of array dimensions. ; Reimplemented from TStreamerElement.; Definition at line 1583 of file TStreamerElement.cxx. ◆ Streamer(). void TStreamerObjectAnyPointer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerObjectAnyPointer. ; Reimplemented from TStreamerElement.; Definition at line 1593 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerObjectAnyPointer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 369 of file TStreamerElement.h. Libraries for TStreamerObjectAnyPointer:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerObjectAnyPointer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:34 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html:20636,Guid,Guide,20636,doc/master/classTStreamerObjectAnyPointer.html,https://root.cern,https://root.cern/doc/master/classTStreamerObjectAnyPointer.html,1,['Guid'],['Guide']
Usability,"57 of file TGLWidget.cxx. ◆ SetEventHandler(). void TGLWidget::SetEventHandler ; (; TGEventHandler * ; eh). Set event-handler. All events are passed to this object. ; Definition at line 558 of file TGLWidget.cxx. ◆ SetFormat(). void TGLWidget::SetFormat ; (; ). Set pixel format. ; Empty version for X11. ; Definition at line 542 of file TGLWidget.cxx. ◆ Streamer(). void TGLWidget::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGFrame. ◆ StreamerNVirtual(). void TGLWidget::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file TGLWidget.h. ◆ SwapBuffers(). void TGLWidget::SwapBuffers ; (; ). overridevirtual . Swap buffers. ; Implements TGLPaintDevice.; Definition at line 217 of file TGLWidget.cxx. Friends And Related Symbol Documentation. ◆ TGLContext. friend class TGLContext. friend . Definition at line 29 of file TGLWidget.h. Member Data Documentation. ◆ fEventHandler. TGEventHandler* TGLWidget::fEventHandler. private . Definition at line 43 of file TGLWidget.h. ◆ fFromInit. Bool_t TGLWidget::fFromInit. private . Definition at line 39 of file TGLWidget.h. ◆ fGLContext. TGLContext* TGLWidget::fGLContext. private . Definition at line 32 of file TGLWidget.h. ◆ fGLFormat. TGLFormat TGLWidget::fGLFormat. private . Definition at line 37 of file TGLWidget.h. ◆ fInnerData. std::pair<void *, void *> TGLWidget::fInnerData. private . Definition at line 34 of file TGLWidget.h. ◆ fValidContexts. std::set<TGLContext *> TGLWidget::fValidContexts. private . Definition at line 41 of file TGLWidget.h. ◆ fWindowIndex. Int_t TGLWidget::fWindowIndex. private . Definition at line 35 of file TGLWidget.h. Libraries for TGLWidget:. [legend]; The documentation for this class was generated from the following files:; graf3d/gl/inc/TGLWidget.h; graf3d/gl/src/TGLWidget.cxx. TGLWidget. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLWidget.html:39425,Guid,Guide,39425,doc/master/classTGLWidget.html,https://root.cern,https://root.cern/doc/master/classTGLWidget.html,1,['Guid'],['Guide']
Usability,"57 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 11480 view->WCtoNDC(xx,u);; 11481 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11482 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11483 gVirtualX->DrawPolyLine(5,rect2);; 11484 }; 11485 ; 11486 c->Clear();; 11487 c->cd();; 11488 TH2 *hp = (TH2*)h3->Project3D(""xy"");; 11489 zaxis->SetRange(first,last);; 11490 if (hp) {; 11491 hp->SetFillColor(38);; 11492 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXY of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz)));; 11493 else hp->SetTitle(TString::Format(""ProjectionXY, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11494 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11495 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11496 hp->SetZTitle(""Number of Entries"");; 11497 hp->Draw(fShowOption.Data());; 11498 }; 11499 }; 11500 break;; 11501 ; 11502 case 5:; 11503 // ""yx""; 11504 {; 11505 Int_t first = zaxis->GetFirst();; 11506 Int_t last = zaxis->GetLast();; 11507 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:417012,ux,uxmin,417012,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"576 // process new version with new TFormula class which is contained in TF1; 3577 //printf(""reading TF1....- version %d..\n"",v);; 3578 ; 3579 if (v > 7) {; 3580 // new classes with new TFormula; 3581 // need to register the objects; 3582 b.ReadClassBuffer(TF1::Class(), this, v, R__s, R__c);; 3583 if (!TestBit(kNotGlobal)) {; 3584 R__LOCKGUARD(gROOTMutex);; 3585 gROOT->GetListOfFunctions()->Add(this);; 3586 }; 3587 return;; 3588 } else {; 3589 ROOT::v5::TF1Data fold;; 3590 //printf(""Reading TF1 as v5::TF1Data- version %d \n"",v);; 3591 fold.Streamer(b, v, R__s, R__c, TF1::Class());; 3592 // convert old TF1 to new one; 3593 ((TF1v5Convert *)this)->Convert(fold);; 3594 }; 3595 }; 3596 ; 3597 // Writing; 3598 else {; 3599 Int_t saved = 0;; 3600 // save not-formula functions as array of points; 3601 if (fType > 0 && fSave.empty() && fType != EFType::kCompositionFcn) {; 3602 saved = 1;; 3603 Save(fXmin, fXmax, 0, 0, 0, 0);; 3604 }; 3605 b.WriteClassBuffer(TF1::Class(), this);; 3606 ; 3607 // clear vector contents; 3608 if (saved) {; 3609 fSave.clear();; 3610 }; 3611 }; 3612}; 3613 ; 3614 ; 3615////////////////////////////////////////////////////////////////////////////////; 3616/// Called by functions such as SetRange, SetNpx, SetParameters; 3617/// to force the deletion of the associated histogram or Integral; 3618 ; 3619void TF1::Update(); 3620{; 3621 if (fHistogram) {; 3622 TString XAxisTitle = fHistogram->GetXaxis()->GetTitle();; 3623 TString YAxisTitle = fHistogram->GetYaxis()->GetTitle();; 3624 Int_t XLabCol = fHistogram->GetXaxis()->GetLabelColor();; 3625 Int_t YLabCol = fHistogram->GetYaxis()->GetLabelColor();; 3626 Int_t XLabFont = fHistogram->GetXaxis()->GetLabelFont();; 3627 Int_t YLabFont = fHistogram->GetYaxis()->GetLabelFont();; 3628 Float_t XLabOffset = fHistogram->GetXaxis()->GetLabelOffset();; 3629 Float_t YLabOffset = fHistogram->GetYaxis()->GetLabelOffset();; 3630 Float_t XLabSize = fHistogram->GetXaxis()->GetLabelSize();; 3631 Float_t YLabSize = fHistog",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:137351,clear,clear,137351,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['clear'],['clear']
Usability,"579 // of which generate a filled TBuffer3D. Therefore we can't pass up a; 1580 // single buffer to here. So as a special case the TGeoCompositeShape; 1581 // performs it's own painting & negotiation with the viewer.; 1582 else {; 1583 const TGeoCompositeShape *composite = static_cast<const TGeoCompositeShape *>(&shape);; 1584 ; 1585 // We need the addDaughters flag returned from the viewer from paint; 1586 // so can't use the normal TObject::Paint(); 1587 // TGeoHMatrix *matrix = (TGeoHMatrix*)TGeoShape::GetTransform();; 1588 // if (viewer->PreferLocalFrame()) matrix->Clear();; 1589 addDaughters = composite->PaintComposite(option);; 1590 }; 1591 ; 1592 return addDaughters;; 1593}; 1594 ; 1595////////////////////////////////////////////////////////////////////////////////; 1596/// Paint an overlap.; 1597 ; 1598void TGeoPainter::PaintShape(TGeoShape *shape, Option_t *option); 1599{; 1600 TGeoShape::SetTransform(fGlobal);; 1601 fGlobal->Clear();; 1602 fGeoManager->SetPaintVolume(nullptr);; 1603 PaintShape(*shape, option);; 1604}; 1605 ; 1606////////////////////////////////////////////////////////////////////////////////; 1607/// Paints a physical node associated with a path.; 1608 ; 1609void TGeoPainter::PaintPhysicalNode(TGeoPhysicalNode *node, Option_t *option); 1610{; 1611 if (!node->IsVisible()); 1612 return;; 1613 Int_t level = node->GetLevel();; 1614 Int_t i, col, wid, sty;; 1615 TGeoShape *shape;; 1616 TGeoShape::SetTransform(fGlobal);; 1617 TGeoHMatrix *matrix = fGlobal;; 1618 TGeoVolume *vcrt;; 1619 if (!node->IsVisibleFull()) {; 1620 // Paint only last node in the branch; 1621 vcrt = node->GetVolume();; 1622 if (!strstr(option, ""range"")); 1623 ((TAttLine *)vcrt)->Modify();; 1624 shape = vcrt->GetShape();; 1625 *matrix = node->GetMatrix();; 1626 fGeoManager->SetMatrixReflection(matrix->IsReflection());; 1627 fGeoManager->SetPaintVolume(vcrt);; 1628 if (!node->IsVolAttributes() && !strstr(option, ""range"")) {; 1629 col = vcrt->GetLineColor();; 1630 wid = vcrt->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:51936,Clear,Clear,51936,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Clear'],['Clear']
Usability,"58 if(bin % (xbins*ybins) == 0) {; 1059 zbin++;; 1060 zvar->setVal(zaxis->GetBinCenter(zbin));; 1061 }; 1062 // fall through to next case...; 1063 case 2:; 1064 if(bin % xbins == 0) {; 1065 ybin= (ybin%ybins) + 1;; 1066 yvar->setVal(yaxis->GetBinCenter(ybin));; 1067 }; 1068 // fall through to next case...; 1069 case 1:; 1070 xbin= (xbin%xbins) + 1;; 1071 xvar->setVal(xaxis->GetBinCenter(xbin));; 1072 break;; 1073 default:; 1074 coutE(InputArguments) << ""RooAbsReal::fillHistogram: Internal Error!"" << std::endl;; 1075 break;; 1076 }; 1077 ; 1078 double result= scaleFactor*projected->getVal();; 1079 if (RooAbsReal::numEvalErrors()>0) {; 1080 coutW(Plotting) << ""WARNING: Function evaluation error(s) at coordinates [x]="" << xvar->getVal() ;; 1081 if (hdim==2) ccoutW(Plotting) << "" [y]="" << yvar->getVal() ;; 1082 if (hdim==3) ccoutW(Plotting) << "" [z]="" << zvar->getVal() ;; 1083 ccoutW(Plotting) << std::endl ;; 1084 // RooAbsReal::printEvalErrors(ccoutW(Plotting),10) ;; 1085 result = 0 ;; 1086 }; 1087 RooAbsReal::clearEvalErrorLog() ;; 1088 ; 1089 hist->SetBinContent(hist->GetBin(xbin,ybin,zbin),result);; 1090 if (setError) {; 1091 hist->SetBinError(hist->GetBin(xbin,ybin,zbin),sqrt(result)) ;; 1092 }; 1093 ; 1094 //cout << ""bin "" << bin << "" -> ("" << xbin << "","" << ybin << "","" << zbin << "") = "" << result << std::endl;; 1095 }; 1096 RooAbsReal::setEvalErrorLoggingMode(RooAbsReal::PrintErrors) ;; 1097 ; 1098 // cleanup; 1099 delete cloneSet;; 1100 ; 1101 return hist;; 1102}; 1103 ; 1104 ; 1105 ; 1106////////////////////////////////////////////////////////////////////////////////; 1107/// Fill a RooDataHist with values sampled from this function at the; 1108/// bin centers. If extendedMode is true, the p.d.f. values is multiplied; 1109/// by the number of expected events in each bin; 1110///; 1111/// An optional scaling by a given scaleFactor can be performed.; 1112/// Returns a pointer to the input RooDataHist, or zero; 1113/// in case of an error.; 1114///; 1115/// If cor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:44092,clear,clearEvalErrorLog,44092,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clearEvalErrorLog']
Usability,58 of file TApplication.h. ◆ fArgv. char** TApplication::fArgv. private . Definition at line 59 of file TApplication.h. ◆ fExitOnException. EExitOnException TApplication::fExitOnException. private . Definition at line 71 of file TApplication.h. ◆ fFiles. TObjArray* TApplication::fFiles. private . Definition at line 66 of file TApplication.h. ◆ fgApplications. TList * TApplication::fgApplications = nullptr. staticprotected . Definition at line 82 of file TApplication.h. ◆ fgGraphInit. Bool_t TApplication::fgGraphInit = kFALSE. staticprivate . Definition at line 74 of file TApplication.h. ◆ fgGraphNeeded. Bool_t TApplication::fgGraphNeeded = kFALSE. staticprivate . Definition at line 73 of file TApplication.h. ◆ fIdleCommand. TString TApplication::fIdleCommand. private . Definition at line 68 of file TApplication.h. ◆ fIdleTimer. TTimer* TApplication::fIdleTimer. private . Definition at line 69 of file TApplication.h. ◆ fIsRunning. std::atomic<bool> TApplication::fIsRunning. private . Window system specific application implementation. ; Definition at line 61 of file TApplication.h. ◆ fNoLog. Bool_t TApplication::fNoLog. private . Definition at line 63 of file TApplication.h. ◆ fNoLogo. Bool_t TApplication::fNoLogo. private . Definition at line 64 of file TApplication.h. ◆ fQuit. Bool_t TApplication::fQuit. private . Definition at line 65 of file TApplication.h. ◆ fReturnFromRun. Bool_t TApplication::fReturnFromRun. private . Definition at line 62 of file TApplication.h. ◆ fSigHandler. TSignalHandler* TApplication::fSigHandler. private . Definition at line 70 of file TApplication.h. ◆ fWorkDir. TString TApplication::fWorkDir. private . Definition at line 67 of file TApplication.h. Libraries for TApplication:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TApplication.h; core/base/src/TApplication.cxx. TApplication. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTApplication.html:41895,Guid,Guide,41895,doc/master/classTApplication.html,https://root.cern,https://root.cern/doc/master/classTApplication.html,1,['Guid'],['Guide']
Usability,"5945 GetInfoImp();; 5946 ; 5947 if (!cl) {; 5948 return;; 5949 }; 5950 ; 5951 if (!mother->GetAddress()) {; 5952 // -- Our top-level branch has no address.; 5953 bool motherStatus = mother->TestBit(kDoNotProcess);; 5954 mother->ResetBit(kDoNotProcess);; 5955 // Note: This will allocate an object.; 5956 mother->SetAddress(nullptr);; 5957 mother->SetBit(kDoNotProcess, motherStatus);; 5958 }; 5959}; 5960 ; 5961////////////////////////////////////////////////////////////////////////////////; 5962/// Stream an object of class TBranchElement.; 5963 ; 5964void TBranchElement::Streamer(TBuffer& R__b); 5965{; 5966 if (R__b.IsReading()) {; 5967 R__b.ReadClassBuffer(TBranchElement::Class(), this);; 5968 fParentClass.SetName(fParentName);; 5969 fBranchClass.SetName(fClassName);; 5970 fTargetClass.SetName(fClassName);; 5971 fClonesClass.SetName(fClonesName);; 5972 // The fAddress and fObject data members are not persistent,; 5973 // therefore we do not own anything.; 5974 // Also clear the bit possibly set by the schema evolution.; 5975 ResetBit(kDeleteObject|kCache|kOwnOnfileObj|kAddressSet|kDecomposedObj);; 5976 // Fixup a case where the TLeafElement was missing; 5977 if ((fType == 0) && (fLeaves.GetEntriesFast() == 0)) {; 5978 TLeaf* leaf = new TLeafElement(this, GetTitle(), fID, fStreamerType);; 5979 leaf->SetTitle(GetTitle());; 5980 fNleaves = 1;; 5981 fLeaves.Add(leaf);; 5982 fTree->GetListOfLeaves()->Add(leaf);; 5983 }; 5984 ; 5985 // SetReadLeavesPtr();; 5986 }; 5987 else {; 5988 TDirectory* dirsav = fDirectory;; 5989 fDirectory = nullptr; // to avoid recursive calls; 5990 {; 5991 // Save class version.; 5992 Int_t classVersion = fClassVersion;; 5993 // Record only positive 'version number'; 5994 if (fClassVersion < 0) {; 5995 fClassVersion = -fClassVersion;; 5996 }; 5997 // TODO: Should we clear the kDeleteObject bit before writing?; 5998 // If we did we would have to remember the old value and; 5999 // put it back, we wouldn't want to forget that we owned; 6000 // some",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:223783,clear,clear,223783,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['clear'],['clear']
Usability,"5] = 4 ;; ; buffer.SetSectionsValid(TBuffer3D::kRaw);; }; ; return buffer;; }; ; class SBPyramid : public Shape; {; public:; SBPyramid(Int_t color, Double_t d, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ);; ~SBPyramid() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fDX, fDY, fDZ; // Base half lengths dX,dY; // Pyr. height dZ; ; ClassDefOverride(SBPyramid,0);; };; ; ClassImp(SBPyramid);; ; SBPyramid::SBPyramid(Int_t color, Double_t x, Double_t y, Double_t z,; Double_t dX, Double_t dY, Double_t dZ) :; Shape(color,x,y,z),; fDX(dX), fDY(dY), fDZ(dZ); {}; ; TBuffer3D & SBPyramid::GetBuffer3D(UInt_t reqSections); {; static TBuffer3D buffer(TBuffer3DTypes::kGeneric);; ; // Complete kCore section; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t halfLength[3] = { fDX, fDY, fDZ/2.0 };; Double_t origin[3] = { fX , fY, fZ + halfLength[2]};; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // No kShapeSpecific section; ; // Complete kRawSizes section; if (reqSections & TBuffer3D::kRawSizes) {; buffer.SetRawSizes(5, 3*5, 8, 3*8, 5, 6 + 4*5);; buffer.SetSectionsValid(TBuffer3D::kRawSizes);; }; // Complete kRaw section; if (reqSections & TBuffer3D::kRaw) {; // Points (5); // 3 components: x,y,z; buffer.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:9924,simpl,simple,9924,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['simpl'],['simple']
Usability,"6 ; 1447More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1448(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1449 ; 1450\anchor rdf-from-spec; 1451### Creating an RDataFrame from a dataset specification file; 1452 ; 1453RDataFrame can be created using a dataset specification JSON file: ; 1454 ; 1455~~~{.python}; 1456import ROOT; 1457 ; 1458df = ROOT.RDF.Experimental.FromSpec(""spec.json""); 1459~~~; 1460 ; 1461The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; 1462their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; 1463required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1464sample in the ""metadata"" key.; 1465 ; 1466A simple example for the formatting of the specification in the JSON file is the following:; 1467 ; 1468~~~{.cpp}; 1469{; 1470 ""samples"": {; 1471 ""sampleA"": {; 1472 ""trees"": [""tree1"", ""tree2""],; 1473 ""files"": [""file1.root"", ""file2.root""],; 1474 ""metadata"": {; 1475 ""lumi"": 10000.0, ; 1476 ""xsec"": 1.0,; 1477 ""sample_category"" = ""data""; 1478 }; 1479 },; 1480 ""sampleB"": {; 1481 ""trees"": [""tree3"", ""tree4""],; 1482 ""files"": [""file3.root"", ""file4.root""],; 1483 ""metadata"": {; 1484 ""lumi"": 0.5, ; 1485 ""xsec"": 1.5,; 1486 ""sample_category"" = ""MC_background""; 1487 }; 1488 }; 1489 }; 1490}; 1491~~~; 1492 ; 1493The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1494For example, to access luminosity information (stored as a double):; 1495 ; 1496~~~{.python}; 1497df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1498~~~; 1499 ; 1500or sample_category information (stored as a string):; 1501 ; 1502~~~{.python}; 1503df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:84088,simpl,simple,84088,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"6 ; 1487More information (e.g. start and end of each multi-thread task) is printed using `ELogLevel.kDebug` and even more; 1488(e.g. a full dump of the generated code that RDataFrame just-in-time-compiles) using `ELogLevel.kDebug+10`.; 1489 ; 1490\anchor rdf-from-spec; 1491### Creating an RDataFrame from a dataset specification file; 1492 ; 1493RDataFrame can be created using a dataset specification JSON file: ; 1494 ; 1495~~~{.python}; 1496import ROOT; 1497 ; 1498df = ROOT.RDF.Experimental.FromSpec(""spec.json""); 1499~~~; 1500 ; 1501The input dataset specification JSON file needs to be provided by the user and it describes all necessary samples and; 1502their associated metadata information. The main required key is the ""samples"" (at least one sample is needed) and the; 1503required sub-keys for each sample are ""trees"" and ""files"". Additionally, one can specify a metadata dictionary for each; 1504sample in the ""metadata"" key.; 1505 ; 1506A simple example for the formatting of the specification in the JSON file is the following:; 1507 ; 1508~~~{.cpp}; 1509{; 1510 ""samples"": {; 1511 ""sampleA"": {; 1512 ""trees"": [""tree1"", ""tree2""],; 1513 ""files"": [""file1.root"", ""file2.root""],; 1514 ""metadata"": {; 1515 ""lumi"": 10000.0, ; 1516 ""xsec"": 1.0,; 1517 ""sample_category"" = ""data""; 1518 }; 1519 },; 1520 ""sampleB"": {; 1521 ""trees"": [""tree3"", ""tree4""],; 1522 ""files"": [""file3.root"", ""file4.root""],; 1523 ""metadata"": {; 1524 ""lumi"": 0.5, ; 1525 ""xsec"": 1.5,; 1526 ""sample_category"" = ""MC_background""; 1527 }; 1528 }; 1529 }; 1530}; 1531~~~; 1532 ; 1533The metadata information from the specification file can be then accessed using the DefinePerSample function.; 1534For example, to access luminosity information (stored as a double):; 1535 ; 1536~~~{.python}; 1537df.DefinePerSample(""lumi"", 'rdfsampleinfo_.GetD(""lumi"")'); 1538~~~; 1539 ; 1540or sample_category information (stored as a string):; 1541 ; 1542~~~{.python}; 1543df.DefinePerSample(""sample_category"", 'rdfsampleinfo_.GetS(""sample_ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDataFrame_8cxx_source.html:85768,simpl,simple,85768,doc/master/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDataFrame_8cxx_source.html,1,['simpl'],['simple']
Usability,"6 ; 777 ; 778 ; 779 ; 780 ; 781 virtual void testSample (double /*error*/, double /*output*/, double /*target*/, double /*weight*/) {} ///< virtual function to be used for monitoring (callback); 782 virtual void startTrainCycle () ///< callback for monitoring and logging; 783 {; 784 m_convergenceCount = 0;; 785 m_maxConvergenceCount= 0;; 786 m_minError = 1e10;; 787 }; 788 virtual void endTrainCycle (double /*error*/) {} ///< callback for monitoring and logging; 789 ; 790 virtual void setProgressLimits (double minProgress = 0, double maxProgress = 100) ///< for monitoring and logging (set the current ""progress"" limits for the display of the progress) \param minProgress minimum value \param maxProgress maximum value; 791 {; 792 m_minProgress = minProgress;; 793 m_maxProgress = maxProgress;; 794 }; 795 virtual void startTraining () ///< start drawing the progress bar; 796 {; 797 m_timer.DrawProgressBar (Int_t(m_minProgress));; 798 }; 799 virtual void cycle (double progress, TString text) ///< advance on the progress bar \param progress the new value \param text a label; 800 {; 801 m_timer.DrawProgressBar (Int_t(m_minProgress+(m_maxProgress-m_minProgress)*(progress/100.0)), text);; 802 }; 803 ; 804 virtual void startTestCycle () {} ///< callback for monitoring and loggging; 805 virtual void endTestCycle () {} ///< callback for monitoring and loggging; 806 virtual void testIteration () {} ///< callback for monitoring and loggging; 807 virtual void drawSample (const std::vector<double>& /*input*/, const std::vector<double>& /* output */, const std::vector<double>& /* target */, double /* patternWeight */) {} ///< callback for monitoring and logging; 808 ; 809 virtual void computeResult (const Net& /* net */, std::vector<double>& /* weights */) {} ///< callback for monitoring and logging; 810 ; 811 virtual bool hasConverged (double testError); ///< has this training converged already?; 812 ; 813 EnumRegularization regularization () const { return m_regularization; } ///< s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:29271,progress bar,progress bar,29271,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,1,['progress bar'],['progress bar']
Usability,"6 else Error(where, ""Y must have N+1 values with option N"");; 2127 return;; 2128 }; 2129 gywork[npt-1] = y[i-1] + 0.5*(y[i]-y[i-1]);; 2130 }; 2131 gxwork[npt-1] = x[i-1];; 2132 ComputeLogs(npt, optionZ);; 2133 if ((gxworkl[npt] < uxmin) || (gxworkl[npt] > uxmax)) {; 2134 if (npt > 2) {; 2135 ComputeLogs(npt, optionZ);; 2136 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2137 }; 2138 gxwork[0] = gxwork[npt-1];; 2139 gywork[0] = gywork[npt-1];; 2140 npt = 1;; 2141 continue;; 2142 }; 2143 if (npt >= fgMaxPointsPerLine) {; 2144 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2145 Smooth(theGraph, fgMaxPointsPerLine,gxworkl.data(),gyworkl.data(),drawtype);; 2146 gxwork[0] = gxwork[npt-1];; 2147 gywork[0] = gywork[npt-1];; 2148 npt = 1;; 2149 }; 2150 } //endfor (i=first; i<=last;i++); 2151 if (npt > 1) {; 2152 ComputeLogs(npt, optionZ);; 2153 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2154 }; 2155 }; 2156 }; 2157 ; 2158 // Draw the histogram with a simple line; 2159 ; 2160 if (optionLine) {; 2161 gPad->SetBit(TGraph::kClipFrame);; 2162 wminstep = wmin + 0.5*delta;; 2163 Axis_t ax1,ax2,ay1,ay2;; 2164 gPad->GetRangeAxis(ax1,ay1,ax2,ay2);; 2165 ; 2166 if (!optionRot) {; 2167 npt = 0;; 2168 for (i=first; i<=last;i++) {; 2169 npt++;; 2170 if (!optionBins) {; 2171 gxwork[npt-1] = wmin+(i-first)*delta+0.5*delta;; 2172 } else {; 2173 xi1 = x[i]; xi = x[i-1];; 2174 if (xi1 < xi) {; 2175 if (i != last) Error(where, ""X must be in increasing order"");; 2176 else Error(where, ""X must have N+1 values with option N"");; 2177 return;; 2178 }; 2179 gxwork[npt-1] = x[i-1] + 0.5*(x[i]-x[i-1]);; 2180 }; 2181 if (gxwork[npt-1] < uxmin || gxwork[npt-1] > uxmax) { npt--; continue;}; 2182 gywork[npt-1] = y[i-1];; 2183 gywork[npt] = y[i-1]; //new; 2184 if ((gywork[npt-1] < rwymin) || ((gywork[npt-1] > rwymax) && !optionFill2)) {; 2185 if (npt > 2) {; 2186 ComputeLogs(npt, optionZ);; 2187 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data());; 2188 }; 2189 gxwork[0] = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:78722,simpl,simple,78722,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"6 of file TControlBar.h. ◆ SetOrientation() [1/2]. void TControlBar::SetOrientation ; (; const char * ; o). Set control bar orientation. ; Definition at line 285 of file TControlBar.cxx. ◆ SetOrientation() [2/2]. void TControlBar::SetOrientation ; (; Int_t ; o). Set control bar orientation. ; Definition at line 303 of file TControlBar.cxx. ◆ SetTextColor(). void TControlBar::SetTextColor ; (; const char * ; colorName). Sets text color for control bar buttons, e.g.: ; root > .x tutorials/demos.C; root > bar->SetTextColor(""red""). Definition at line 242 of file TControlBar.cxx. ◆ Show(). void TControlBar::Show ; (; ). Show control bar. ; Definition at line 317 of file TControlBar.cxx. ◆ Streamer(). void TControlBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TControlBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 72 of file TControlBar.h. Friends And Related Symbol Documentation. ◆ TControlBarImp. friend class TControlBarImp. friend . Definition at line 28 of file TControlBar.h. Member Data Documentation. ◆ fButtons. TList* TControlBar::fButtons {nullptr}. protected . list of buttons ; Definition at line 38 of file TControlBar.h. ◆ fControlBarImp. TControlBarImp* TControlBar::fControlBarImp {nullptr}. protected . system specific implementation ; Definition at line 36 of file TControlBar.h. ◆ fNoroc. Int_t TControlBar::fNoroc {1}. protected . number of rows or columns ; Definition at line 39 of file TControlBar.h. ◆ fOrientation. Int_t TControlBar::fOrientation {0}. protected . orientation ; Definition at line 37 of file TControlBar.h. Libraries for TControlBar:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TControlBar.h; graf2d/gpad/src/TControlBar.cxx. TControlBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTControlBar.html:24239,Guid,Guide,24239,doc/master/classTControlBar.html,https://root.cern,https://root.cern/doc/master/classTControlBar.html,1,['Guid'],['Guide']
Usability,6 of file TProofBenchRunDataRead.h. ◆ fProfile_perfstat_evtmax. TProfile* TProofBenchRunDataRead::fProfile_perfstat_evtmax. private . Definition at line 68 of file TProofBenchRunDataRead.h. ◆ fProfile_perfstat_IO. TProfile* TProofBenchRunDataRead::fProfile_perfstat_IO. private . Definition at line 72 of file TProofBenchRunDataRead.h. ◆ fProfile_perfstat_IOmax. TProfile* TProofBenchRunDataRead::fProfile_perfstat_IOmax. private . Definition at line 74 of file TProofBenchRunDataRead.h. ◆ fProfile_queryresult_event. TProfile* TProofBenchRunDataRead::fProfile_queryresult_event. private . Definition at line 70 of file TProofBenchRunDataRead.h. ◆ fProfile_queryresult_IO. TProfile* TProofBenchRunDataRead::fProfile_queryresult_IO. private . Definition at line 76 of file TProofBenchRunDataRead.h. ◆ fProfLegend_evt. TLegend* TProofBenchRunDataRead::fProfLegend_evt. private . Definition at line 80 of file TProofBenchRunDataRead.h. ◆ fProfLegend_mb. TLegend* TProofBenchRunDataRead::fProfLegend_mb. private . Definition at line 82 of file TProofBenchRunDataRead.h. ◆ fProof. TProof* TProofBenchRunDataRead::fProof. private . Definition at line 47 of file TProofBenchRunDataRead.h. ◆ fReadType. TPBReadType* TProofBenchRunDataRead::fReadType. private . Definition at line 49 of file TProofBenchRunDataRead.h. ◆ fReleaseCache. Bool_t TProofBenchRunDataRead::fReleaseCache. private . Definition at line 59 of file TProofBenchRunDataRead.h. ◆ fStart. Int_t TProofBenchRunDataRead::fStart. private . Definition at line 54 of file TProofBenchRunDataRead.h. ◆ fStep. Int_t TProofBenchRunDataRead::fStep. private . Definition at line 56 of file TProofBenchRunDataRead.h. ◆ fStop. Int_t TProofBenchRunDataRead::fStop. private . Definition at line 55 of file TProofBenchRunDataRead.h. proof/proofbench/inc/TProofBenchRunDataRead.h; proof/proofbench/src/TProofBenchRunDataRead.cxx. TProofBenchRunDataRead. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunDataRead.html:25903,Guid,Guide,25903,doc/master/classTProofBenchRunDataRead.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunDataRead.html,1,['Guid'],['Guide']
Usability,"6 }; 257 ; 258 // We are done; 259 return stdselec;; 260}; 261 ; 262////////////////////////////////////////////////////////////////////////////////; 263/// Imports the content of 'output' in the internal output list. Existing content; 264/// in the output list is discarded (unless found also in 'output').; 265/// In particular, if 'output' is nullptr or empty, reset the internal list.; 266/// On return, the content of 'output' is cleared to avoid double deletion issues.; 267/// (The caller is responsible of 'output' as container: its content is transferred; 268/// under the selector ownership).; 269 ; 270void TSelector::ImportOutput(TList *output) {; 271 ; 272 // Reset the list, if required; 273 if (!output || output->GetSize() <= 0) {; 274 fOutput->Delete();; 275 return;; 276 }; 277 ; 278 TObject *o;; 279 ; 280 // Remove from new list objects already existing locally; 281 TIter nxexo(fOutput);; 282 while ((o = nxexo())) {; 283 if (output->FindObject(o)) output->Remove(o);; 284 }; 285 ; 286 // Transfer remaining objects; 287 TIter nxo(output);; 288 while ((o = nxo())) {; 289 fOutput->Add(o);; 290 }; 291 ; 292 // Cleanup original list; 293 output->SetOwner(false);; 294 output->Clear(""nodelete"");; 295 ; 296 // Done; 297 return;; 298}; 299 ; 300////////////////////////////////////////////////////////////////////////////////; 301/// This method is called before processing entry. It is the user's responsibility to read; 302/// the corresponding entry in memory (may be just a partial read).; 303/// The function returns true if the entry must be processed,; 304/// false otherwise. This method is obsolete, use Process().; 305///; 306/// WARNING when a selector is used with a TChain:; 307/// in the Process, ProcessCut, ProcessFill function, you must use; 308/// the pointer to the current Tree to call GetEntry(entry).; 309/// entry is always the local entry number in the current tree.; 310/// Assuming that fChain is the pointer to the TChain being processed,; 311/// use fCha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSelector_8cxx_source.html:11305,Clear,Clear,11305,doc/master/TSelector_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSelector_8cxx_source.html,1,['Clear'],['Clear']
Usability,"60 degrees to phi2. ; Definition at line 27 of file TCONS.h. Public Member Functions;  TCONS ();  CONS shape default constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2, Float_t phi1, Float_t phi2);  CONS shape normal constructor. ;  ;  TCONS (const char *name, const char *title, const char *material, Float_t rmax1, Float_t dz, Float_t phi1, Float_t phi2, Float_t rmax2=0);  CONS shape normal constructor. ;  ;  ~TCONS () override;  CONS shape default destructor. ;  ; virtual Float_t GetRmax2 () const;  ; virtual Float_t GetRmin2 () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBS;  TTUBS ();  TUBS shape default constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape ""simplified"" constructor. ;  ;  TTUBS (const char *name, const char *title, const char *material, Float_t rmin, Float_t rmax, Float_t dz, Float_t phi1, Float_t phi2);  TUBS shape normal constructor. ;  ;  ~TTUBS () override;  TUBS shape default destructor. ;  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Compute distance from point px,py to a TUBE. ;  ; const TBuffer3D & GetBuffer3D (Int_t reqSections) const override;  Get buffer 3d. ;  ; virtual Float_t GetPhi1 () const;  ; virtual Float_t GetPhi2 () const;  ; TClass * IsA () const override;  ; void Sizeof3D () const override;  Return total X3D needed by TNode::ls (when called with option ""x"") ;  ; void Streamer (TBuffer &) override;  Stream an object of class TTUBE. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TTUBE;  TTUBE ();  TUBE shape default constructor. ;  ;  TTUBE (const char *name, const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONS.html:1840,simpl,simplified,1840,doc/master/classTCONS.html,https://root.cern,https://root.cern/doc/master/classTCONS.html,1,['simpl'],['simplified']
Usability,"60 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,rect2);; 11695 }; 11696 c->Clear();; 11697 c->cd();; 11698 TH2 *hp = (TH2*)h3->Project3D(""zx"");; 11699 yaxis->SetRange(first,last);; 11700 if (hp) {; 11701 hp->SetFillColor(38);; 11702 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZX of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11703 else hp->SetTitle(TString::Format(""ProjectionZX, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11704 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11705 hp->SetYTitle(fH->GetZax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:425361,ux,uxmin,425361,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"61 of file TArrayD.cxx. ◆ operator[]() [1/2]. Double_t & TArrayD::operator[] ; (; Int_t ; i). inline . Definition at line 85 of file TArrayD.h. ◆ operator[]() [2/2]. Double_t TArrayD::operator[] ; (; Int_t ; i); const. inline . Definition at line 92 of file TArrayD.h. ◆ Reset() [1/2]. void TArrayD::Reset ; (; ). inline . Definition at line 47 of file TArrayD.h. ◆ Reset() [2/2]. void TArrayD::Reset ; (; Double_t ; val). inline . Definition at line 48 of file TArrayD.h. ◆ Set() [1/2]. void TArrayD::Set ; (; Int_t ; n). overridevirtual . Set size of this array to n doubles. ; A new array is created, the old contents copied to the new array, then the old array is deleted. This function should not be called if the array was declared via Adopt. ; Implements TArray.; Definition at line 106 of file TArrayD.cxx. ◆ Set() [2/2]. void TArrayD::Set ; (; Int_t ; n, . const Double_t * ; array . ). Set size of this array to n doubles and set the contents This function should not be called if the array was declared via Adopt. ; Definition at line 133 of file TArrayD.cxx. ◆ SetAt(). void TArrayD::SetAt ; (; Double_t ; v, . Int_t ; i . ). inlineoverridevirtual . Implements TArray.; Definition at line 51 of file TArrayD.h. ◆ Streamer(). void TArrayD::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a TArrayD object. ; Reimplemented from TArray.; Reimplemented in TH1D, TH2D, TH3D, TProfile, TProfile2D, and TProfile3D.; Definition at line 149 of file TArrayD.cxx. ◆ StreamerNVirtual(). void TArrayD::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TArrayD.h. Member Data Documentation. ◆ fArray. Double_t* TArrayD::fArray. Definition at line 30 of file TArrayD.h. Libraries for TArrayD:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TArrayD.h; core/cont/src/TArrayD.cxx. TArrayD. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:14 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTArrayD.html:7990,Guid,Guide,7990,doc/master/classTArrayD.html,https://root.cern,https://root.cern/doc/master/classTArrayD.html,1,['Guid'],['Guide']
Usability,"61/**; 262 Param Functor class for Multidimensional functions.; 263 It is used to wrap in a very simple and convenient way; 264 any other C++ callable object (implementation double operator( const double *, const double * ) ); 265 or a member function with the correct signature,; 266 like Foo::EvalPar(const double *, const double *); 267 ; 268 @ingroup ParamFunc; 269 ; 270 */; 271 ; 272 ; 273template<class T>; 274class ParamFunctorTempl {; 275 ; 276 ; 277public:; 278 ; 279 typedef T EvalType;; 280 typedef ParamFunctionBase<T> Impl;; 281 ; 282 ; 283 /**; 284 Default constructor; 285 */; 286 ParamFunctorTempl () : fImpl(nullptr) {}; 287 ; 288 ; 289 /**; 290 construct from a pointer to member function (multi-dim type); 291 */; 292 template <class PtrObj, typename MemFn>; 293 ParamFunctorTempl(const PtrObj& p, MemFn memFn); 294 : fImpl(new ParamMemFunHandler<ParamFunctorTempl<T>, PtrObj, MemFn>(p, memFn)); 295 {}; 296 ; 297 ; 298 ; 299 /**; 300 construct from another generic Functor of multi-dimension; 301 */; 302 template <typename Func>; 303 explicit ParamFunctorTempl( const Func & f) :; 304 fImpl(new ParamFunctorHandler<ParamFunctorTempl<T>,Func>(f) ); 305 {}; 306 ; 307 ; 308 ; 309 // specialization used in TF1; 310 typedef T (* FreeFunc ) (T * , double *);; 311 ParamFunctorTempl(FreeFunc f) :; 312 fImpl(new ParamFunctorHandler<ParamFunctorTempl<T>,FreeFunc>(f) ); 313 {; 314 }; 315 ; 316 // specialization used in TF1; 317 ParamFunctorTempl(const std::function<T(const T *f, const Double_t *param)> &func) :; 318 fImpl(new ParamFunctorHandler<ParamFunctorTempl<T>, const std::function<T(const T *f, const Double_t *param)>>(func)); 319 {; 320 }; 321 ; 322 /**; 323 Destructor (no operations); 324 */; 325 virtual ~ParamFunctorTempl () {; 326 if (fImpl) delete fImpl;; 327 }; 328 ; 329 /**; 330 Copy constructor; 331 */; 332 ParamFunctorTempl(const ParamFunctorTempl & rhs) :; 333 fImpl(nullptr); 334 {; 335// if (rhs.fImpl.get() != 0); 336// fImpl = std::unique_ptr<Impl>( (rhs.f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ParamFunctor_8h_source.html:7582,simpl,simple,7582,doc/master/ParamFunctor_8h_source.html,https://root.cern,https://root.cern/doc/master/ParamFunctor_8h_source.html,1,['simpl'],['simple']
Usability,"611 T::size,; 612 T::resize,; 613 T::clear,; 614 T::first,; 615 T::next,; 616 T::construct,; 617 T::destruct,; 618 T::feed,; 619 T::collect,; 620 T::Env_t::Create);; 621 }; 622 ; 623 };; 624 ; 625 // This specialization is chosen if T is a vector<bool, A>, irrespective of the nature; 626 // of the allocator A represents.; 627 template <class A> struct TCollectionProxyInfo::Type<std::vector<Bool_t, A>>; 628 : public TCollectionProxyInfo::Address<typename std::vector<Bool_t, A>::const_reference>; 629 {; 630 typedef std::vector<Bool_t, A> Cont_t;; 631 typedef typename Cont_t::iterator Iter_t;; 632 typedef typename Cont_t::value_type Value_t;; 633 typedef Environ<Iter_t> Env_t;; 634 typedef Env_t *PEnv_t;; 635 typedef Cont_t *PCont_t;; 636 typedef Value_t *PValue_t;; 637 ; 638 virtual ~Type() {}; 639 ; 640 static inline PCont_t object(void* ptr) {; 641 return PCont_t(PEnv_t(ptr)->fObject);; 642 }; 643 static void* size(void* env) {; 644 PEnv_t e = PEnv_t(env);; 645 e->fSize = PCont_t(e->fObject)->size();; 646 return &e->fSize;; 647 }; 648 static void* clear(void* env) {; 649 object(env)->clear();; 650 return nullptr;; 651 }; 652 static void* first(void* env) {; 653 PEnv_t e = PEnv_t(env);; 654 PCont_t c = PCont_t(e->fObject);; 655#if 0; 656 // Assume iterators do not need destruction; 657 ::new(e->buff) Iter_t(c->begin());; 658#endif; 659 e->fIterator = c->begin();; 660 e->fSize = c->size();; 661 return nullptr;; 662 }; 663 static void* next(void* env) {; 664 PEnv_t e = PEnv_t(env);; 665 PCont_t c = PCont_t(e->fObject);; 666 for (; e->fIdx > 0 && e->iter() != c->end(); ++(e->iter()), --e->fIdx){ }; 667 // TODO: Need to find something for going backwards....; 668 return nullptr;; 669 }; 670 static void* construct(void*,size_t) {; 671 // Nothing to construct.; 672 return nullptr;; 673 }; 674 static void* collect(void *coll, void *array) {; 675 PCont_t c = PCont_t(coll);; 676 PValue_t m = PValue_t(array); // 'start' is a buffer outside the container.; 677 for (Iter_t i=c->",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:22451,clear,clear,22451,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,2,['clear'],['clear']
Usability,"615 ; 2616void TStreamerInfo::Clear(Option_t *option); 2617{; 2618 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 2648 if (fWriteText) fWriteText->fActions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd ).c_str(),kTRUE);; 2675 }; 2676 void SetComment(const char *title) {; 2677 const char *left = strstr(title,""["");; 2678 if (left) {; 2679 const char *right = strstr(left,""]"");; 2680 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:105735,clear,clear,105735,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"63 of file DeepNet.h. ◆ Loss() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Loss ; (; Tensor_t & ; input, . const Matrix_t & ; groundTruth, . const Matrix_t & ; weights, . bool ; inTraining = false, . bool ; includeRegularization = true . ). Function for evaluating the loss, based on the propagation of the given input. ; Definition at line 1279 of file DeepNet.h. ◆ Prediction() [1/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . EOutputFunction ; f . ); const. Prediction based on activations stored in the last layer. ; Definition at line 1303 of file DeepNet.h. ◆ Prediction() [2/2]. template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Prediction ; (; Matrix_t & ; predictions, . Tensor_t & ; input, . EOutputFunction ; f . ). Prediction for the given inputs, based on what network learned. ; Definition at line 1311 of file DeepNet.h. ◆ Print(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::Print. Print the Deep Net Info. ; Definition at line 1321 of file DeepNet.h. ◆ RegularizationTerm(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::RegularizationTerm. Function for computing the regularizaton term to be added to the loss function . Definition at line 1289 of file DeepNet.h. ◆ ResetTraining(). template<typename Architecture_t , typename Layer_t > . auto TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::ResetTraining. Function that reset some training flags after looping all the events but not the weights. ; Definition at line 886 of file DeepNet.h. ◆ SetBatchDepth(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>> . void TMVA::DNN::TDeepNet< Architecture_t, Layer_t >::SetBatchDept",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html:25005,learn,learned,25005,doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDeepNet.html,1,['learn'],['learned']
Usability,"64 x 64 channels, with marks; (red circles) and blue grid.; References:; [1] Morh�č M., Kliman J., Matou�ek V., Turzo I.,; Sophisticated visualization algorithms for analysis of multidimensional; experimental nuclear data, Acta Physica Slovaca 54 (2004) 385.; [2] D. Hearn, M. P. Baker: Computer Graphics, Prentice Hall International,; Inc. 1994.; Script:. Example to draw source spectrum (class TSpectrum2Painter).; To execute this example, do; root > .x VisA.C; #include ""TSpectrum2Painter.h""; void VisA() {; �� TFile *f = new TFile(""TSpectrum2.root"");; �� TH2F *graph=(TH2F*) f->Get(""graph2;1"");; �� TCanvas *Graph2 = new TCanvas(""Graph2"",""Illustration of 2D graphics"",10,10,1000,700);; �� graph->Draw(""SPEC"");; }. void SetDisplayMode(Int_t modeGroup, Int_t displayMode); Sets display group mode and display mode:; -modeGroup - the following group modes can be set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; -displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. void SetPenAttr(Int_t color, Int_t style, Int_t width); Sets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void SetNodes(Int_t nodesx, Int_t nodesy); Sets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void SetAngles(Int_t alpha, Int_t beta, Int_t view); Sets angles of the view:; -alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degree",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:27945,simpl,simple,27945,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['simpl'],['simple']
Usability,"64 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,rect2);; 11695 }; 11696 c->Clear();; 11697 c->cd();; 11698 TH2 *hp = (TH2*)h3->Project3D(""zx"");; 11699 yaxis->SetRange(first,last);; 11700 if (hp) {; 11701 hp->SetFillColor(38);; 11702 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZX of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11703 else hp->SetTitle(TString::Format(""ProjectionZX, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11704 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11705 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11706 hp->SetZTitle(""Number of Entries"");; 11707 hp->Draw(fShowOption.Data());; 11708 }; 11709 }; 11710 break;; 11711 ; 11712 case 8:; 11713 // ""yz"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:425530,ux,uxmin,425530,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"64_t nbytes)TTreePerfStatsinlinevirtual; SetCompress(Double_t cx)TTreePerfStatsinlinevirtual; SetCpuTime(Double_t cptime)TTreePerfStatsinlinevirtual; SetDiskTime(Double_t t)TTreePerfStatsinlinevirtual; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetFile(TFile *newfile) overrideTTreePerfStatsinlineprotectedvirtual; SetGraphIO(TGraphErrors *gr)TTreePerfStatsinlinevirtual; SetGraphTime(TGraphErrors *gr)TTreePerfStatsinlinevirtual; SetHostInfo(const char *info)TTreePerfStatsinlinevirtual; SetLoaded(TBranch *b, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetLoaded(size_t bi, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetLoadedMiss(TBranch *b, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetLoadedMiss(size_t bi, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetMissed(TBranch *b, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetMissed(size_t bi, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetName(const char *name)TTreePerfStatsinlinevirtual; SetNleaves(Int_t nleaves)TTreePerfStatsinlinevirtual; SetNumEvents(Long64_t) overrideTTreePerfStatsinlinevirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetReadaheadSize(Int_t nbytes)TTreePerfStatsinlinevirtual; SetReadCalls(Int_t ncalls)TTreePerfStatsinlinevirtual; SetRealNorm(Double_t rnorm)TTreePerfStatsinlinevirtual; SetRealTime(Double_t rtime)TTreePerfStatsinlinevirtual; SetTreeCacheSize(Int_t nbytes)TTreePerfStatsinlinevirtual; SetUniqueID(UInt_t uid)TObjectvirtual; SetUnzipTime(Double_t uztime)TTreePerfStatsinlinevirtual; SetUsed(TBranch *b, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SetUsed(size_t bi, size_t basketNumber) overrideTTreePerfStatsinlinevirtual; SimpleEvent(EEventType) overrideTTreePerfStatsinlinevirtual; Streamer(TBuffer &) overrideTTreePerfStatsvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TTreePerfStatsinline; SysError(const char *method, const char *msgfmt,.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreePerfStats-members.html:9313,Simpl,SimpleEvent,9313,doc/master/classTTreePerfStats-members.html,https://root.cern,https://root.cern/doc/master/classTTreePerfStats-members.html,1,['Simpl'],['SimpleEvent']
Usability,"64_t pos, Double_t start, Int_t complen, Int_t objlen)=0;  ; virtual void UpdateBranchIndices (TObjArray *branches)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPerfStats.html:3928,Clear,Clear,3928,doc/master/classTVirtualPerfStats.html,https://root.cern,https://root.cern/doc/master/classTVirtualPerfStats.html,1,['Clear'],['Clear']
Usability,"64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetFile(TFile* file, TFile::ECacheAction action = TFile::kDisconnect); Overload to make sure that the object specific. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void SetLearnPrefill(TTreeCache::EPrefillType type = kNoPrefill); Set whether the learning period is started with a prefilling of the; cache and which type of prefilling is used.; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches.; The default prefilling behavior can be controlled by setting; TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree); Update pointer to current Tree and recompute pointers to the branches in the cache. void Learn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCache.html:25377,learn,learning,25377,root/html534/TTreeCache.html,https://root.cern,https://root.cern/root/html534/TTreeCache.html,1,['learn'],['learning']
Usability,"65 //====process old versions before automatic schema evolution; 966 Int_t nlevels;; 967 TF1::Streamer(R__b);; 968 if (R__v < 3) {; 969 Float_t ymin,ymax;; 970 R__b >> ymin; fYmin = ymin;; 971 R__b >> ymax; fYmax = ymax;; 972 } else {; 973 R__b >> fYmin;; 974 R__b >> fYmax;; 975 }; 976 R__b >> fNpy;; 977 R__b >> nlevels;; 978 if (R__v < 3) {; 979 Float_t *contour = nullptr;; 980 Int_t n = R__b.ReadArray(contour);; 981 fContour.Set(n);; 982 for (Int_t i=0;i<n;i++) fContour.fArray[i] = contour[i];; 983 delete [] contour;; 984 } else {; 985 fContour.Streamer(R__b);; 986 }; 987 R__b.CheckByteCount(R__s, R__c, TF2::IsA());; 988 //====end of old versions; 989 ; 990 } else {; 991 Int_t saved = 0;; 992 if (fType != EFType::kFormula && fSave.empty()) { saved = 1; Save(fXmin,fXmax,fYmin,fYmax,0,0);}; 993 ; 994 R__b.WriteClassBuffer(TF2::Class(),this);; 995 ; 996 if (saved) {fSave.clear(); }; 997 }; 998}; 999 ; 1000////////////////////////////////////////////////////////////////////////////////; 1001/// Return x^nx * y^ny moment of a 2d function in range [ax,bx],[ay,by]; 1002/// \author Gene Van Buren <gene@bnl.gov>; 1003 ; 1004Double_t TF2::Moment2(Double_t nx, Double_t ax, Double_t bx, Double_t ny, Double_t ay, Double_t by, Double_t epsilon); 1005{; 1006 Double_t norm = Integral(ax,bx,ay,by,epsilon);; 1007 if (norm == 0) {; 1008 Error(""Moment2"", ""Integral zero over range"");; 1009 return 0;; 1010 }; 1011 ; 1012 // define integrand function as a lambda : g(x,y)= x^(nx) * y^(ny) * f(x,y); 1013 auto integrand = [&](double *x, double *) {; 1014 return std::pow(x[0], nx) * std::pow(x[1], ny) * this->EvalPar(x, nullptr);; 1015 };; 1016 // compute integral of g(x,y); 1017 TF2 fnc(""TF2_ExpValHelper"",integrand,ax,bx,ay,by,0);; 1018 // set same points as current function to get correct max points when computing the integral; 1019 fnc.fNpx = fNpx;; 1020 fnc.fNpy = fNpy;; 1021 return fnc.Integral(ax,bx,ay,by,epsilon)/norm;; 1022}; 1023 ; 1024///////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:34499,clear,clear,34499,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,1,['clear'],['clear']
Usability,"657 . ). virtual . read attributes from XML ; Definition at line 144 of file BinaryTree.cxx. ◆ SetRoot(). void TMVA::BinaryTree::SetRoot ; (; Node * ; r). inline . Definition at line 80 of file BinaryTree.h. ◆ SetTotalTreeDepth() [1/2]. void TMVA::BinaryTree::SetTotalTreeDepth ; (; Int_t ; depth). inline . Definition at line 95 of file BinaryTree.h. ◆ SetTotalTreeDepth() [2/2]. void TMVA::BinaryTree::SetTotalTreeDepth ; (; Node * ; n = nullptr). descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ; Definition at line 213 of file BinaryTree.cxx. ◆ Streamer(). virtual void TMVA::BinaryTree::Streamer ; (; TBuffer & ; ). virtual . Reimplemented in TMVA::BinarySearchTree, and TMVA::DecisionTree. ◆ StreamerNVirtual(). void TMVA::BinaryTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 122 of file BinaryTree.h. Friends And Related Symbol Documentation. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; os, . const BinaryTree & ; tree . ). friend . ◆ operator>>. std::istream & operator>> ; (; std::istream & ; istr, . BinaryTree & ; tree . ). friend . Member Data Documentation. ◆ fDepth. UInt_t TMVA::BinaryTree::fDepth. protected . maximal depth in tree reached ; Definition at line 118 of file BinaryTree.h. ◆ fNNodes. UInt_t TMVA::BinaryTree::fNNodes. protected . total number of nodes in the tree (counted) ; Definition at line 117 of file BinaryTree.h. ◆ fRoot. Node* TMVA::BinaryTree::fRoot. protected . the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ; Definition at line 110 of file BinaryTree.h. Libraries for TMVA::BinaryTree:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BinaryTree.h; tmva/tmva/src/BinaryTree.cxx. TMVABinaryTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html:8566,Guid,Guide,8566,doc/master/classTMVA_1_1BinaryTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinaryTree.html,1,['Guid'],['Guide']
Usability,"65; TAttLine::~TAttLinevirtual ~TAttLine()AttLine destructor.Definition TAttLine.cxx:170; TAttLine::TAttLineTAttLine()AttLine default constructor.Definition TAttLine.cxx:143; TAttLine::GetLineStylevirtual Style_t GetLineStyle() constReturn the line style.Definition TAttLine.h:34; TAttLine::Modifyvirtual void Modify()Change current line attributes if necessary.Definition TAttLine.cxx:247; TAttLine::fLineStyleStyle_t fLineStyleLine style.Definition TAttLine.h:22; TAttLine::Copyvoid Copy(TAttLine &attline) constCopy this line attributes to a new TAttLine.Definition TAttLine.cxx:177; TAttLine::fLineColorColor_t fLineColorLine color.Definition TAttLine.h:21; TAttLine::DistancetoLineInt_t DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)Compute distance from point px,py to a line.Definition TAttLine.cxx:211; TAttLine::SaveLineAttributesvirtual void SaveLineAttributes(std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1, Int_t widdef=1)Save line attributes as C++ statement(s) on output stream out.Definition TAttLine.cxx:275; TColor::SaveColorstatic Bool_t SaveColor(std::ostream &out, Int_t ci)Save a color with index > 228 as a C++ statement(s) on output stream out.Definition TColor.cxx:2543; TColor::GetColorTransparentstatic Int_t GetColorTransparent(Int_t color, Float_t a)Static function: Returns the transparent color number corresponding to n.Definition TColor.cxx:2174; TVirtualPadEditor::UpdateLineAttributesstatic void UpdateLineAttributes(Int_t col, Int_t sty, Int_t width)Update line attributes via the pad editor.Definition TVirtualPadEditor.cxx:152; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v@ vDefinition rootcling_impl.cxx:3699. corebasesrcTAttLine.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:05 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAttLine_8cxx_source.html:14278,Guid,Guide,14278,doc/master/TAttLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAttLine_8cxx_source.html,1,['Guid'],['Guide']
Usability,"67 of file GiniIndexWithLaplace.h. ◆ ~GiniIndexWithLaplace(). virtual TMVA::GiniIndexWithLaplace::~GiniIndexWithLaplace ; (; ). inlinevirtual . Definition at line 70 of file GiniIndexWithLaplace.h. Member Function Documentation. ◆ Class(). static TClass * TMVA::GiniIndexWithLaplace::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::GiniIndexWithLaplace::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::GiniIndexWithLaplace::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 77 of file GiniIndexWithLaplace.h. ◆ DeclFileName(). static const char * TMVA::GiniIndexWithLaplace::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 77 of file GiniIndexWithLaplace.h. ◆ GetSeparationIndex(). Double_t TMVA::GiniIndexWithLaplace::GetSeparationIndex ; (; const Double_t ; s, . const Double_t ; b . ). virtual . Implements TMVA::SeparationBase.; Definition at line 82 of file GiniIndexWithLaplace.cxx. ◆ IsA(). virtual TClass * TMVA::GiniIndexWithLaplace::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::SeparationBase.; Definition at line 77 of file GiniIndexWithLaplace.h. ◆ Streamer(). virtual void TMVA::GiniIndexWithLaplace::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::SeparationBase. ◆ StreamerNVirtual(). void TMVA::GiniIndexWithLaplace::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 77 of file GiniIndexWithLaplace.h. Libraries for TMVA::GiniIndexWithLaplace:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/GiniIndexWithLaplace.h; tmva/tmva/src/GiniIndexWithLaplace.cxx. TMVAGiniIndexWithLaplace. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html:5116,Guid,Guide,5116,doc/master/classTMVA_1_1GiniIndexWithLaplace.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1GiniIndexWithLaplace.html,1,['Guid'],['Guide']
Usability,"679 if (fLogLike) {; 1680 fNumericDerivatives = kTRUE;; 1681 nx = fNED2;; 1682 k1 -= 2;; 1683 }; 1684 ; 1685 for (i=0;i<nx;i++){; 1686 ki += 1+i;; 1687 x[i] = fEXDA[ki];; 1688 }; 1689 // Double_t y = ARITHM(df,x);; 1690 Double_t y = EvalTFN(df,x);; 1691 if(fNumericDerivatives) Derivatives(df,x);; 1692 Double_t sig=1.;; 1693 if(fLogLike) { // Likelihood method; 1694 if(y>0.) {; 1695 fS = fS - log(y);; 1696 y = -y;; 1697 sig= y;; 1698 } else { //; 1699 delete [] x;; 1700 delete [] df;; 1701 fS = 1e10;; 1702 return -1; // indflg[0] = 1;; 1703 }; 1704 } else { // Chi2 method; 1705 sig = fEXDA[k2]; // sigma of experimental point; 1706 y = y - fEXDA[k1-1]; // f(x_i) - F_i; 1707 fS = fS + (y*y/(sig*sig))*.5; // simple chi2/2; 1708 }; 1709 Int_t n = 0;; 1710 for (i=0;i<fNpar;i++) {; 1711 if (fPL0[i]>0){; 1712 df[n] = df[i]/sig; // left only non-fixed param derivatives div by Sig; 1713 fGr[i] += df[n]*(y/sig);; 1714 n++;; 1715 }; 1716 }; 1717 l = 0;; 1718 for (i=0;i<n;i++); 1719 for (j=0;j<=i;j++); 1720 fZ[l++] += df[i]*df[j];; 1721 k2 += fNED2;; 1722 }; 1723 ; 1724 delete[] df;; 1725 delete[] x;; 1726 return 1;; 1727}; 1728 ; 1729 ; 1730////////////////////////////////////////////////////////////////////////////////; 1731/// Minimization function for H1s using a Chisquare method.; 1732/// Default method (function evaluated at center of bin); 1733/// for each point the cache contains the following info; 1734/// - 1D : bc,e,xc (bin content, error, x of center of bin); 1735/// - 2D : bc,e,xc,yc; 1736/// - 3D : bc,e,xc,yc,zc; 1737 ; 1738void TFumili::FitChisquare(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag); 1739{; 1740 Foption_t fitOption = GetFitOption();; 1741 if (fitOption.Integral) {; 1742 FitChisquareI(npar,gin,f,u,flag);; 1743 return;; 1744 }; 1745 Double_t cu,eu,fu,fsum;; 1746 Double_t x[3];; 1747 Double_t *zik=nullptr;; 1748 Double_t *pl0=nullptr;; 1749 ; 1750 TH1 *hfit = (TH1*)GetObjectFit();; 1751 TF1 *f1 = (TF1*)GetUserFunc();; 1752 Int_t nd = h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:48926,simpl,simple,48926,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,1,['simpl'],['simple']
Usability,"68 Error(""HandleTermInput()"", ""%s caught: %s"", demangledType, e.what());; 669 free(demangledType_c);; 670 }; 671 catch (...) {; 672 // enable again intput handler; 673 if (!added) fInputHandler->Activate();; 674 Error(""HandleTermInput()"", ""Exception caught!"");; 675 }; 676 ; 677 // `ProcessLineNr()` only prepends a `#line` directive if the previous; 678 // input line was not terminated by a '\' (backslash-newline).; 679 // Thus, to match source locations included in cling diagnostics, we only; 680 // increment `fNcmd` if the next call to `ProcessLineNr()` will issue; 681 // a new `#line`.; 682 if (!fBackslashContinue && !sline.IsNull()); 683 fNcmd++;; 684 ; 685 if (gROOT->Timer()) timer.Print(""u"");; 686 ; 687 // enable again intput handler; 688 fInputHandler->Activate();; 689 ; 690 if (!sline.BeginsWith("".reset"")); 691 gCling->EndOfLineAction();; 692 ; 693 gTabCom->ClearAll();; 694 Getlinem(kInit, GetPrompt());; 695 }; 696 return kTRUE;; 697}; 698 ; 699////////////////////////////////////////////////////////////////////////////////; 700/// Handle signals (kSigBus, kSigSegmentationViolation,; 701/// kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; 702/// Specific TApplication implementations may want something different here.; 703 ; 704void TRint::HandleException(Int_t sig); 705{; 706 fCaughtSignal = sig;; 707 if (TROOT::Initialized()) {; 708 if (gException) {; 709 Getlinem(kCleanUp, nullptr);; 710 Getlinem(kInit, ""Root > "");; 711 }; 712 }; 713 TApplication::HandleException(sig);; 714}; 715 ; 716////////////////////////////////////////////////////////////////////////////////; 717/// Terminate the application. Reset the terminal to sane mode and call; 718/// the logoff macro defined via Rint.Logoff environment variable.; 719/// @note The function does not return, unless the class has; 720/// been told to return from Run(), by a call to SetReturnFromRun().; 721 ; 722void TRint::Terminate(Int_t status); 723{; 724 Getlinem(kCleanUp, nullptr);; 725 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRint_8cxx_source.html:23764,Clear,ClearAll,23764,doc/master/TRint_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRint_8cxx_source.html,1,['Clear'],['ClearAll']
Usability,"68 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,rect2);; 11695 }; 11696 c->Clear();; 11697 c->cd();; 11698 TH2 *hp = (TH2*)h3->Project3D(""zx"");; 11699 yaxis->SetRange(first,last);; 11700 if (hp) {; 11701 hp->SetFillColor(38);; 11702 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZX of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11703 else hp->SetTitle(TString::Format(""ProjectionZX, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11704 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11705 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11706 hp->SetZTitle(""Number of Entries"");; 11707 hp->Draw(fShowOption.Data());; 11708 }; 11709 }; 11710 break;; 11711 ; 11712 case 8:; 11713 // ""yz""; 11714 {; 11715 Int_t first = xaxis->GetFirst();; 11716 Int_t last = xaxis->GetLast();; 11717 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11718 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:425699,ux,uxmin,425699,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"6; TDataType::SizeInt_t Size() constGet size of basic typedef'ed type.Definition TDataType.cxx:375; TExMap::Expandvoid Expand(Int_t newsize)Expand the TExMap.Definition TExMap.cxx:279; TExMap::GetSizeInt_t GetSize() constDefinition TExMap.h:71; TExMap::Addvoid Add(ULong64_t hash, Long64_t key, Long64_t value)Add an (key,value) pair to the table. The key should be unique.Definition TExMap.cxx:88; TExMap::GetValueLong64_t GetValue(ULong64_t hash, Long64_t key)Return the value belonging to specified key and hash value.Definition TExMap.cxx:174; TExMap::CapacityInt_t Capacity() constDefinition TExMap.h:69; TExMap::Deletevoid Delete(Option_t *opt="""") overrideDelete all entries stored in the TExMap.Definition TExMap.cxx:164; THnBaseMultidimensional histogram base.Definition THnBase.h:43; THnBase::fEntriesDouble_t fEntriesNumber of entries, spread over chunks.Definition THnBase.h:48; THnBase::GetNdimensionsInt_t GetNdimensions() constDefinition THnBase.h:140; THnBase::ResetBasevoid ResetBase(Option_t *option="""")Clear the histogram.Definition THnBase.cxx:1327; THnBase::GetCalculateErrorsBool_t GetCalculateErrors() constDefinition THnBase.h:141; THnBase::fTsumw2Double_t fTsumw2Total sum of weights squared; -1 if no errors are calculated.Definition THnBase.h:50; THnBase::GetAxisTAxis * GetAxis(Int_t dim) constDefinition THnBase.h:130; THnBase::fNdimensionsInt_t fNdimensionsNumber of dimensions.Definition THnBase.h:45; THnSparseArrayChunkTHnSparseArrayChunk is used internally by THnSparse.Definition THnSparse_Internal.h:30; THnSparseArrayChunk::MatchesBool_t Matches(Int_t idx, const Char_t *idxbuf) constCheck whether bin at idx batches idxbuf.Definition THnSparse_Internal.h:63; THnSparseArrayChunk::~THnSparseArrayChunk~THnSparseArrayChunk() overrideDestructor.Definition THnSparse.cxx:440; THnSparseArrayChunk::fSumw2TArrayD * fSumw2Bin errors.Definition THnSparse_Internal.h:49; THnSparseArrayChunk::THnSparseArrayChunkTHnSparseArrayChunk()Definition THnSparse_Internal.h:37; THnS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THnSparse_8cxx_source.html:40715,Clear,Clear,40715,doc/master/THnSparse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THnSparse_8cxx_source.html,1,['Clear'],['Clear']
Usability,"6} // namespace TMVA; CudaMatrix.h; CUDACHECK#define CUDACHECK(ans)Definition CudaMatrix.h:34; Device.h; Bool_tbool Bool_tDefinition RtypesCore.h:63; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; indexOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t indexDefinition TGWin32VirtualXProxy.cxx:168; TMVA::DNN::TCudaDeviceBufferTCudaDeviceBuffer.Definition CudaBuffers.h:101; TMVA::DNN::TCudaMatrixTCudaMatrix Class.Definition CudaMatrix.h:103; TMVA::DNN::TCudaMatrix::fElementBufferTCudaDeviceBuffer< AFloat > fElementBufferDefinition CudaMatrix.h:119; TMVA::DNN::TCudaMatrix::TCudaMatrixTCudaMatrix()Definition CudaMatrix.cu:57; TMVA::DNN::TCudaMatrix::InitializeCudavoid InitializeCuda()Initializes all shared devices resource and makes sure that a sufficient number of curand states are ...Definition CudaMatrix.cu:103; TMVA::DNN::TCudaMatrix::fNRowssize_t fNRowsDefinition CudaMatrix.h:117; TMVA::DNN::TCudaMatrix::fNColssize_t fNColsDefinition CudaMatrix.h:118; TMVA::DNN::TCudaMatrix::InitializeCurandStatesvoid InitializeCurandStates()Definition CudaMatrix.cu:140; TMVA::DNN::TDevice::BlockDims2Dstatic dim3 BlockDims2D()Definition Device.h:55; TMVA::DNN::TDevice::GridDims2Dstatic dim3 GridDims2D(int nrows, int ncols)Definition Device.h:74; TMVA::DNN::TDevice::NThreadsstatic int NThreads(const AMatrix &A)Definition Device.h:101; TMatrixTTMatrixT.Definition TMatrixT.h:40; double; nconst Int_t nDefinition legend1.C:16; TMVA::DNN::CurandInitializationKernel__global__ void CurandInitializationKernel(unsigned long long seed, curandState_t *state)Definition CudaMatrix.cu:26; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; mTMarker mDefinition textangle.C:8. tmvatmvasrcDNNArchitecturesCudaCudaMatrix.cu. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/CudaMatrix_8cu_source.html:8071,Guid,Guide,8071,doc/master/CudaMatrix_8cu_source.html,https://root.cern,https://root.cern/doc/master/CudaMatrix_8cu_source.html,1,['Guid'],['Guide']
Usability,"7 case ROOT::kSTLunorderedset:; 1198 case ROOT::kSTLmultiset:; 1199 case ROOT::kSTLunorderedmultiset:; 1200 case ROOT::kSTLmap:; 1201 case ROOT::kSTLunorderedmap:; 1202 case ROOT::kSTLmultimap:; 1203 case ROOT::kSTLunorderedmultimap:{; 1204 if ( (fProperties & kNeedDelete) ); 1205 Clear(""force"");; 1206 else; 1207 fClear.invoke(fEnv);; 1208 // Commit no longer use the environment and thus no longer decrease; 1209 // the count. Consequently we no longer should increase it here.; 1210 // ++fEnv->fRefCount;; 1211 fEnv->fSize = n;; 1212 ; 1213 TStaging *s;; 1214 if (fStaged.empty()) {; 1215 s = new TStaging(n,fValDiff);; 1216 } else {; 1217 s = fStaged.back();; 1218 fStaged.pop_back();; 1219 s->Resize(n);; 1220 }; 1221 fConstruct(s->GetContent(),s->GetSize());; 1222 ; 1223 s->SetTarget(fEnv->fObject);; 1224 ; 1225 fEnv->fTemp = s->GetContent();; 1226 fEnv->fUseTemp = kTRUE;; 1227 fEnv->fStart = fEnv->fTemp;; 1228 ; 1229 return s;; 1230 }; 1231 case ROOT::kSTLvector:; 1232 case ROOT::kSTLlist:; 1233 case ROOT::kSTLforwardlist:; 1234 case ROOT::kSTLdeque:; 1235 case ROOT::kROOTRVec:; 1236 if( (fProperties & kNeedDelete) ) {; 1237 Clear(""force"");; 1238 }; 1239 fEnv->fSize = n;; 1240 fResize(fEnv->fObject,n);; 1241 return fEnv->fObject;; 1242 ; 1243 case ROOT::kSTLbitset: {; 1244 TStaging *s;; 1245 if (fStaged.empty()) {; 1246 s = new TStaging(n,fValDiff);; 1247 } else {; 1248 s = fStaged.back();; 1249 fStaged.pop_back();; 1250 s->Resize(n);; 1251 }; 1252 s->SetTarget(fEnv->fObject);; 1253 ; 1254 fEnv->fTemp = s->GetContent();; 1255 fEnv->fUseTemp = kTRUE;; 1256 fEnv->fStart = fEnv->fTemp;; 1257 ; 1258 return s;; 1259 }; 1260 }; 1261 }; 1262 return 0;; 1263}; 1264 ; 1265////////////////////////////////////////////////////////////////////////////////; 1266/// Insert data into the container where data is a C-style array of the actual type contained in the collection; 1267/// of the given size. For associative container (map, etc.), the data type is the pair<key,value>.; 1268 ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:39970,Clear,Clear,39970,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"7 gCurrentHist = oldhist;; 4528 fXbuf.clear();; 4529 fYbuf.clear();; 4530 return;; 4531 }; 4532 TView *view = gPad->GetView();; 4533 if (view) {; 4534 if (!Hoption.Lego && !Hoption.Surf && !Hoption.Tri) {; 4535 delete view;; 4536 gPad->SetView(nullptr);; 4537 }; 4538 }; 4539 if (fH->GetDimension() > 1 || Hoption.Lego || Hoption.Surf) {; 4540 // In case of 1D histogram, Z axis becomes Y axis.; 4541 Int_t logysav=0, logzsav=0;; 4542 if (fH->GetDimension() == 1) {; 4543 logysav = Hoption.Logy;; 4544 logzsav = Hoption.Logz;; 4545 Hoption.Logz = 0;; 4546 if (Hoption.Logy) {; 4547 Hoption.Logz = 1;; 4548 Hoption.Logy = 0;; 4549 }; 4550 }; 4551 PaintTable(option);; 4552 if (Hoption.Func) {; 4553 Hoption_t hoptsave = Hoption;; 4554 Hparam_t hparsave = Hparam;; 4555 PaintFunction(option);; 4556 SetHistogram(hsave);; 4557 Hoption = hoptsave;; 4558 Hparam = hparsave;; 4559 }; 4560 fH->SetMinimum(minsav);; 4561 gCurrentHist = oldhist;; 4562 fXbuf.clear();; 4563 fYbuf.clear();; 4564 if (fH->GetDimension() == 1) {; 4565 Hoption.Logy = logysav;; 4566 Hoption.Logz = logzsav;; 4567 }; 4568 return;; 4569 }; 4570 ; 4571 if (Hoption.Bar >= 20) {; 4572 PaintBarH(option);; 4573 fXbuf.clear();; 4574 fYbuf.clear();; 4575 return;; 4576 }; 4577 ; 4578 gPad->RangeAxisChanged(); //emit RangeAxisChanged() signal to sync axes; 4579 // fill Hparam structure with histo parameters; 4580 if (!PaintInit()) {; 4581 fXbuf.clear();; 4582 fYbuf.clear();; 4583 return;; 4584 }; 4585 ; 4586 // Picture surround (if new page) and page number (if requested).; 4587 // Histogram surround (if not option ""Same"").; 4588 PaintFrame();; 4589 ; 4590 // Paint histogram axis only; 4591 Bool_t gridx = gPad->GetGridx();; 4592 Bool_t gridy = gPad->GetGridy();; 4593 if (Hoption.Axis > 0) {; 4594 if (Hoption.Axis > 1) PaintAxis(kTRUE); //axis with grid; 4595 else {; 4596 if (gridx) gPad->SetGridx(0);; 4597 if (gridy) gPad->SetGridy(0);; 4598 PaintAxis(kFALSE);; 4599 if (gridx) gPad->SetGridx(1);; 4600 if (gridy) gPad->SetGri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:173180,clear,clear,173180,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"7 of file TProfile3D.h. ◆ GetBinSumw2() [1/2]. virtual TArrayD * TProfile3D::GetBinSumw2 ; (; ). inlinevirtual . Definition at line 120 of file TProfile3D.h. ◆ GetBinSumw2() [2/2]. virtual const TArrayD * TProfile3D::GetBinSumw2 ; (; ); const. inlinevirtual . Definition at line 121 of file TProfile3D.h. ◆ GetErrorOption(). Option_t * TProfile3D::GetErrorOption ; (; ); const. Return option to compute profile2D errors. ; Definition at line 753 of file TProfile3D.cxx. ◆ GetStats(). void TProfile3D::GetStats ; (; Double_t * ; stats); const. overridevirtual . fill the array stats from the contents of this profile. ; The array stats must be correctly dimensioned in the calling program. stats[0] = sumw; stats[1] = sumw2; stats[2] = sumwx; stats[3] = sumwx2; stats[4] = sumwy; stats[5] = sumwy2; stats[6] = sumwxy; stats[7] = sumwz; stats[8] = sumwz2; stats[9] = sumwxz; stats[10]= sumwyz; stats[11]= sumwt; stats[12]= sumwt2. If no axis-subrange is specified (via TAxis::SetRange), the array stats is simply a copy of the statistics quantities computed at filling time. If a sub-range is specified, the function recomputes these quantities from the bin contents in the current axis range. ; Reimplemented from TH3.; Definition at line 785 of file TProfile3D.cxx. ◆ GetTmax(). virtual Double_t TProfile3D::GetTmax ; (; ); const. inlinevirtual . Definition at line 125 of file TProfile3D.h. ◆ GetTmin(). virtual Double_t TProfile3D::GetTmin ; (; ); const. inlinevirtual . Definition at line 124 of file TProfile3D.h. ◆ GetW(). Double_t * TProfile3D::GetW ; (; ). inlineprivate . Definition at line 75 of file TProfile3D.h. ◆ GetW2(). Double_t * TProfile3D::GetW2 ; (; ). inlineprivate . Definition at line 76 of file TProfile3D.h. ◆ IsA(). TClass * TProfile3D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TH3D.; Definition at line 150 of file TProfile3D.h. ◆ LabelsDeflate(). void TProfile3D::LabelsDeflate ; (; Option_t * ; axis = ""X""). o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D.html:91165,simpl,simply,91165,doc/master/classTProfile3D.html,https://root.cern,https://root.cern/doc/master/classTProfile3D.html,1,['simpl'],['simply']
Usability,"715, 0.125 , 0.11111111, 0.1 ],; dtype=float32)}; ; Read-out of the filtered RDataFrame:; {'x': ndarray([6, 7, 8, 9], dtype=int32), 'y': ndarray([0.14285715, 0.125 , 0.11111111, 0.1 ], dtype=float32)}; ; Read-out of the filtered RDataFrame with the columns option:; {'x': ndarray([6, 7, 8, 9], dtype=int32)}; ; Read-out of the filtered RDataFrame with the exclude option:; {'y': ndarray([0.14285715, 0.125 , 0.11111111, 0.1 ], dtype=float32)}; ; Read-out of C++ objects:; [<cppyy.gbl.CustomObject object at 0xe484480>; <cppyy.gbl.CustomObject object at 0xe484484>; <cppyy.gbl.CustomObject object at 0xe484488>; <cppyy.gbl.CustomObject object at 0xe48448c>; <cppyy.gbl.CustomObject object at 0xe484490>; <cppyy.gbl.CustomObject object at 0xe484494>; <cppyy.gbl.CustomObject object at 0xe484498>; <cppyy.gbl.CustomObject object at 0xe48449c>; <cppyy.gbl.CustomObject object at 0xe4844a0>; <cppyy.gbl.CustomObject object at 0xe4844a4>]; ; Access to all methods and data members of the C++ object:; Object: <cppyy.gbl.CustomObject object at 0xe484480>; Access data member: custom_object.x = 42; ; Content of the ROOT.RDataFrame as pandas.DataFrame:; custom_object x y; 0 <cppyy.gbl.CustomObject object at 0xe484480> 0 1.000000; 1 <cppyy.gbl.CustomObject object at 0xe484484> 1 0.500000; 2 <cppyy.gbl.CustomObject object at 0xe484488> 2 0.333333; 3 <cppyy.gbl.CustomObject object at 0xe48448c> 3 0.250000; 4 <cppyy.gbl.CustomObject object at 0xe484490> 4 0.200000; 5 <cppyy.gbl.CustomObject object at 0xe484494> 5 0.166667; 6 <cppyy.gbl.CustomObject object at 0xe484498> 6 0.142857; 7 <cppyy.gbl.CustomObject object at 0xe48449c> 7 0.125000; 8 <cppyy.gbl.CustomObject object at 0xe4844a0> 8 0.111111; 9 <cppyy.gbl.CustomObject object at 0xe4844a4> 9 0.100000; ; DateDecember 2018 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df026_AsNumpyArrays.py. tutorialsdataframedf026_AsNumpyArrays.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html:5912,Guid,Guide,5912,doc/master/df026__AsNumpyArrays_8py.html,https://root.cern,https://root.cern/doc/master/df026__AsNumpyArrays_8py.html,1,['Guid'],['Guide']
Usability,"72 explicit RVecImpl(unsigned N) : ROOT::Internal::VecOps::SmallVectorTemplateBase<T>(N) {}; 573 ; 574public:; 575 RVecImpl(const RVecImpl &) = delete;; 576 ; 577 ~RVecImpl(); 578 {; 579 // Subclass has already destructed this vector's elements.; 580 // If this wasn't grown from the inline copy, deallocate the old space.; 581 if (!this->isSmall() && this->Owns()); 582 free(this->begin());; 583 }; 584 ; 585 // also give up adopted memory if applicable; 586 void clear(); 587 {; 588 if (this->Owns()) {; 589 this->destroy_range(this->begin(), this->end());; 590 this->fSize = 0;; 591 } else {; 592 this->resetToSmall();; 593 }; 594 }; 595 ; 596 void resize(size_type N); 597 {; 598 if (N < this->size()) {; 599 if (this->Owns()); 600 this->destroy_range(this->begin() + N, this->end());; 601 this->set_size(N);; 602 } else if (N > this->size()) {; 603 if (this->capacity() < N); 604 this->grow(N);; 605 for (auto I = this->end(), E = this->begin() + N; I != E; ++I); 606 new (&*I) T();; 607 this->set_size(N);; 608 }; 609 }; 610 ; 611 void resize(size_type N, const T &NV); 612 {; 613 if (N < this->size()) {; 614 if (this->Owns()); 615 this->destroy_range(this->begin() + N, this->end());; 616 this->set_size(N);; 617 } else if (N > this->size()) {; 618 if (this->capacity() < N); 619 this->grow(N);; 620 std::uninitialized_fill(this->end(), this->begin() + N, NV);; 621 this->set_size(N);; 622 }; 623 }; 624 ; 625 void reserve(size_type N); 626 {; 627 if (this->capacity() < N); 628 this->grow(N);; 629 }; 630 ; 631 void pop_back_n(size_type NumItems); 632 {; 633 if (this->size() < NumItems) {; 634 throw std::runtime_error(""Popping back more elements than those available."");; 635 }; 636 if (this->Owns()); 637 this->destroy_range(this->end() - NumItems, this->end());; 638 this->set_size(this->size() - NumItems);; 639 }; 640 ; 641 R__RVEC_NODISCARD T pop_back_val(); 642 {; 643 T Result = ::std::move(this->back());; 644 this->pop_back();; 645 return Result;; 646 }; 647 ; 648 void swap(RVecI",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:21639,clear,clear,21639,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['clear'],['clear']
Usability,"74 of file gifencode.c. ◆ char_out() [1/2]. static void char_out ; (; ). static . ◆ char_out() [2/2]. static void char_out ; (; int ; c). static . Definition at line 281 of file gifencode.c. ◆ GIFencode(). long GIFencode ; (; int ; Width, . int ; Height, . int ; Ncol, . R ; , . G ; , . B ; , . ScLine ; , . void * ; get_scline, . pb ;  . ). Definition at line 63 of file gifencode.c. ◆ output() [1/2]. static void output ; (; ). static . ◆ output() [2/2]. static void output ; (; int ; code). static . Definition at line 226 of file gifencode.c. ◆ put_short() [1/2]. static void put_short ; (; ). static . ◆ put_short() [2/2]. static void put_short ; (; int ; word). static . Definition at line 301 of file gifencode.c. Variable Documentation. ◆ a_count. int a_count. static . Definition at line 209 of file gifencode.c. ◆ accum. char accum[256]. static . Definition at line 210 of file gifencode.c. ◆ BitsPixel. int BitsPixel. static . Definition at line 25 of file gifencode.c. ◆ ClearCode. int ClearCode. static . Definition at line 29 of file gifencode.c. ◆ CodeTab. int CodeTab[5003]. static . Definition at line 23 of file gifencode.c. ◆ cur_accum. unsigned long cur_accum. static . Definition at line 207 of file gifencode.c. ◆ cur_bits. int cur_bits. static . Definition at line 208 of file gifencode.c. ◆ CurCodeSize. int CurCodeSize. static . Definition at line 27 of file gifencode.c. ◆ CurMaxCode. int CurMaxCode. static . Definition at line 28 of file gifencode.c. ◆ EOFCode. int EOFCode. static . Definition at line 30 of file gifencode.c. ◆ FreeCode. int FreeCode. static . Definition at line 31 of file gifencode.c. ◆ HashTab. long HashTab[5003]. static . Definition at line 22 of file gifencode.c. ◆ IniCodeSize. int IniCodeSize. static . Definition at line 26 of file gifencode.c. ◆ masks. unsigned long masks[]. static . Initial value:= { 0x0000,; 0x0001, 0x0003, 0x0007, 0x000F,; 0x001F, 0x003F, 0x007F, 0x00FF,; 0x01FF, 0x03FF, 0x07FF, 0x0FFF,; 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html:3443,Clear,ClearCode,3443,doc/master/win32gdk_2src_2gifencode_8c.html,https://root.cern,https://root.cern/doc/master/win32gdk_2src_2gifencode_8c.html,2,['Clear'],['ClearCode']
Usability,"753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 447 of file TGX11.cxx. ◆ CloseWindow1(). void TGX11::CloseWindow1 ; (; ). private . Delete current window. ; Definition at line 461 of file TGX11.cxx. ◆ CollectImageColors(). void TGX11::CollectImageColors ; (; ULong_t ; pixel, . ULong_t *& ; orgcolors, . Int_t & ; ncolors, . Int_t & ; maxcolors . ). private . Collect in orgcolors all different original image colors. ; Defini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:58452,Clear,ClearWindow,58452,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['ClearWindow']
Usability,"76 *((char**) fAddress) = nullptr;; 4677 }; 4678 ResetBit(kDeleteObject);; 4679 if (fType == 3) {; 4680 // -- We are a TClonesArray master branch.; 4681 TClonesArray::Class()->Destructor(fObject);; 4682 fObject = nullptr;; 4683 if ((fStreamerType == TVirtualStreamerInfo::kObjectp) ||; 4684 (fStreamerType == TVirtualStreamerInfo::kObjectP)) {; 4685 // -- We are a pointer to a TClonesArray.; 4686 // We must zero the pointer in the object.; 4687 *((char**) fAddress) = nullptr;; 4688 }; 4689 } else if (fType == 4) {; 4690 // -- We are an STL container master branch.; 4691 TVirtualCollectionProxy* proxy = GetCollectionProxy();; 4692 ; 4693 if (!proxy) {; 4694 Warning(""ReleaseObject"", ""Cannot delete allocated STL container because I do not have a proxy! branch: %s"", GetName());; 4695 fObject = nullptr;; 4696 } else {; 4697 bool needDelete = proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete;; 4698 if (needDelete && fID >= 0) {; 4699 TVirtualStreamerInfo* si = GetInfoImp();; 4700 TStreamerElement* se = (TStreamerElement*) si->GetElement(fID);; 4701 needDelete = !se->TestBit(TStreamerElement::kDoNotDelete);; 4702 }; 4703 if (needDelete) {; 4704 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4705 proxy->Clear(""force"");; 4706 }; 4707 proxy->Destructor(fObject);; 4708 fObject = nullptr;; 4709 }; 4710 if (fStreamerType == TVirtualStreamerInfo::kSTLp) {; 4711 // -- We are a pointer to an STL container.; 4712 // We must zero the pointer in the object.; 4713 *((char**) fAddress) = nullptr;; 4714 }; 4715 } else {; 4716 // We are *not* a TClonesArray master branch and we are *not* an STL container master branch.; 4717 TClass* cl = fBranchClass.GetClass();; 4718 if (!cl) {; 4719 Warning(""ReleaseObject"", ""Cannot delete allocated object because I cannot instantiate a TClass object for its class! branch: '%s' class: '%s'"", GetName(), fBranchClass.GetClassName());; 4720 fObject = nullptr;; 4721 } else {; 4722 TVirtualCollectionProxy* proxy = cl->GetCollectionProxy();;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:174472,Clear,Clear,174472,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['Clear'],['Clear']
Usability,"77 const char* fPayloadCode; // Additional code to be given to cling at library load; 278 const char* fFwdDeclCode; // Additional code to let cling know about selected classes and functions; 279 const char** fIncludePaths; // 0-terminated array of header files; 280 void (*fTriggerFunc)(); // Pointer to the dict initialization used to find the library name; 281 const char** fClassesHeaders; // 0-terminated list of classes and related header files; 282 const TROOT::FwdDeclArgsToKeepCollection_t fFwdNargsToKeepColl; // Collection of; 283 // pairs of template fwd decls and number of; 284 bool fHasCxxModule; // Whether this module has a C++ module alongside it.; 285 };; 286 ; 287 std::vector<ModuleHeaderInfo_t>& GetModuleHeaderInfoBuffer() {; 288 static std::vector<ModuleHeaderInfo_t> moduleHeaderInfoBuffer;; 289 return moduleHeaderInfoBuffer;; 290 }; 291}; 292 ; 293Int_t TROOT::fgDirLevel = 0;; 294Bool_t TROOT::fgRootInit = kFALSE;; 295 ; 296static void at_exit_of_TROOT() {; 297 if (ROOT::Internal::gROOTLocal); 298 ROOT::Internal::gROOTLocal->~TROOT();; 299}; 300 ; 301// This local static object initializes the ROOT system; 302namespace ROOT {; 303namespace Internal {; 304 class TROOTAllocator {; 305 // Simple wrapper to separate, time-wise, the call to the; 306 // TROOT destructor and the actual free-ing of the memory.; 307 //; 308 // Since the interpreter implementation (currently TCling) is; 309 // loaded via dlopen by libCore, the destruction of its global; 310 // variable (i.e. in particular clang's) is scheduled before; 311 // those in libCore so we need to schedule the call to the TROOT; 312 // destructor before that *but* we want to make sure the memory; 313 // stay around until libCore itself is unloaded so that code; 314 // using gROOT can 'properly' check for validity.; 315 //; 316 // The order of loading for is:; 317 // libCore.so; 318 // libRint.so; 319 // ... anything other library hard linked to the executable ...; 320 // ... for example libEvent; 321 // l",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TROOT_8cxx_source.html:10073,Simpl,Simple,10073,doc/master/TROOT_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TROOT_8cxx_source.html,2,['Simpl'],['Simple']
Usability,"78, ""#sqrt{s} = 13 TeV, 10 fb^{-1}""); ; # Save the plot; c.SaveAs(""df104_HiggsToTwoPhotons.png""); print(""Saved figure to df104_HiggsToTwoPhotons.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::RDF::RunGraphsunsigned int RunGraphs(std::vector< RResultHandle > handles)Trigger the event loop of multiple RDataFrames concurrently.Definition RDFHelpers.cxx:66; ROOT::RDF::TH1DModelA struct which stores the parameters of a TH1D.Definition HistoModels.hxx:30; ****************************************; Minimizer is Minuit2 / Migrad; Chi2 = 19.9699; NDf = 26; Edm = 2.09182e-08; NCalls = 161; p0 = 94325 +/- 72.0525 ; p1 = -1777.22 +/- 0.778155 ; p2 = 11.5606 +/- 0.00536059 ; p3 = -0.0256281 +/- 2.66824e-05 ; p4 = 119.1 (fixed); p5 = 125 (fixed); p6 = 2.39 (fixed); Saved figure to df104_HiggsToTwoPhotons.png; DateFebruary 2020 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df104_HiggsToTwoPhotons.py. tutorialsdataframedf104_HiggsToTwoPhotons.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html:9380,Guid,Guide,9380,doc/master/df104__HiggsToTwoPhotons_8py.html,https://root.cern,https://root.cern/doc/master/df104__HiggsToTwoPhotons_8py.html,1,['Guid'],['Guide']
Usability,"785 Double_t w = GetBinContent(binx,biny,binz);; 7786 np+=w;; 7787 sum+=w*(x-mean)*(x-mean)*(x-mean)*(x-mean);; 7788 }; 7789 }; 7790 }; 7791 sum/=(np*stddev4);; 7792 return sum-3;; 7793 ; 7794 } else if (axis > 10 && axis <= 13) {; 7795 //compute standard error of skewness; 7796 // assume parent normal distribution use formula from Kendall-Stuart, Vol 1 pag 243, second edition; 7797 Double_t neff = GetEffectiveEntries();; 7798 return ( neff > 0 ? TMath::Sqrt(24./neff ) : 0. );; 7799 }; 7800 else {; 7801 Error(""GetKurtosis"", ""illegal value of parameter"");; 7802 return 0;; 7803 }; 7804}; 7805 ; 7806////////////////////////////////////////////////////////////////////////////////; 7807/// fill the array stats from the contents of this histogram; 7808/// The array stats must be correctly dimensioned in the calling program.; 7809///; 7810/// ~~~ {.cpp}; 7811/// stats[0] = sumw; 7812/// stats[1] = sumw2; 7813/// stats[2] = sumwx; 7814/// stats[3] = sumwx2; 7815/// ~~~; 7816///; 7817/// If no axis-subrange is specified (via TAxis::SetRange), the array stats; 7818/// is simply a copy of the statistics quantities computed at filling time.; 7819/// If a sub-range is specified, the function recomputes these quantities; 7820/// from the bin contents in the current axis range.; 7821///; 7822/// IMPORTANT NOTE: This means that the returned statistics are context-dependent.; 7823/// If TAxis::kAxisRange, the returned statistics are dependent on the binning;; 7824/// otherwise, they are a copy of the histogram statistics computed at fill time,; 7825/// which are unbinned by default (calling TH1::ResetStats forces them to use; 7826/// binned statistics). You can reset TAxis::kAxisRange using TAxis::SetRange(0, 0).; 7827///; 7828/// Note that the mean value/StdDev is computed using the bins in the currently; 7829/// defined range (see TAxis::SetRange). By default the range includes; 7830/// all bins from 1 to nbins included, excluding underflows and overflows.; 7831/// To force the un",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:306192,simpl,simply,306192,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['simpl'],['simply']
Usability,"7; ROOT::RWebWindowsManager::fLaunchTmoutfloat fLaunchTmout! timeout in seconds to start browser process, default 30sDefinition RWebWindowsManager.hxx:49; ROOT::RWebWindowsManager::GetUrlstd::string GetUrl(RWebWindow &win, bool remote=false, std::string *produced_key=nullptr)Provide URL address to access specified window from inside or from remote.Definition RWebWindowsManager.cxx:600; ROOT::RWebWindowsManager::Unregistervoid Unregister(RWebWindow &win)Release all references to specified window Called from RWebWindow destructor.Definition RWebWindowsManager.cxx:591; ROOT::RWebWindowsManager::IsLoopbackModestatic bool IsLoopbackMode()Returns true if loopback mode used by THttpServer for web widgets.Definition RWebWindowsManager.cxx:146; ROOT::RWebWindowsManager::CreateWindowstd::shared_ptr< RWebWindow > CreateWindow()Creates new window To show window, RWebWindow::Show() have to be called.Definition RWebWindowsManager.cxx:536; TExecTExec is a utility class that can be used to execute a C++ command when some event happens in a pad.Definition TExec.h:26; THttpServerOnline http server for arbitrary ROOT application.Definition THttpServer.h:31; THttpWSHandlerClass for user-side handling of websocket with THttpServer.Definition THttpWSHandler.h:25; bool; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::WebWindowShowCallback_tstd::function< bool(RWebWindow &, const RWebDisplayArgs &)> WebWindowShowCallback_tfunction signature for catching show calls of arbitrary RWebWindow if returns true,...Definition RWebWindowsManager.hxx:34; ROOT::WebWindowWaitFunc_tstd::function< int(double)> WebWindowWaitFunc_tfunction signature for waiting call-backs Such callback used when calling thread need to waits for so...Definition RWebWindow.hxx:46. guiwebdisplayincROOTRWebWindowsManager.hxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindowsManager_8hxx_source.html:12946,Guid,Guide,12946,doc/v632/RWebWindowsManager_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindowsManager_8hxx_source.html,1,['Guid'],['Guide']
Usability,"7; TMVA::Types::kMaxAnalysisType@ kMaxAnalysisTypeDefinition Types.h:131; TMVA::Types::kRegression@ kRegressionDefinition Types.h:128; TMVA::Types::fLoggerMsgLogger * fLogger! message loggerDefinition Types.h:181; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kMaxTreeType@ kMaxTreeTypealso used as temporary storage for trees not yet assigned for testing;training...Definition Types.h:145; TMVA::Types::kTrainingOriginal@ kTrainingOriginalever neededDefinition Types.h:147; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kValidation@ kValidationthese are placeholders... currently not used, but could be moved ""forward"" ifDefinition Types.h:146; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::Types::LogMsgLogger & Log() constDefinition Types.h:182; TMVA::Types::TypesTypes()constructorDefinition Types.cxx:56; TMVA::VITypeVITypeDefinition Types.h:69; TMVA::kRandom@ kRandomDefinition Types.h:69; TMVA::kAll@ kAllDefinition Types.h:69; TMVA::kShort@ kShortDefinition Types.h:69; TMVA::EMsgTypeEMsgTypeDefinition Types.h:55; TMVA::kSILENT@ kSILENTDefinition Types.h:62; TMVA::kDEBUG@ kDEBUGDefinition Types.h:56; TMVA::kVERBOSE@ kVERBOSEDefinition Types.h:57; TMVA::kHEADER@ kHEADERDefinition Types.h:63; TMVA::kERROR@ kERRORDefinition Types.h:60; TMVA::kINFO@ kINFODefinition Types.h:58; TMVA::kWARNING@ kWARNINGDefinition Types.h:59; TMVA::kFATAL@ kFATALDefinition Types.h:61; TMVA::HistTypeHistTypeDefinition Types.h:66; TMVA::kRarityType@ kRarityTypeDefinition Types.h:66; TMVA::kCompareType@ kCompareTypeDefinition Types.h:66; TMVA::kProbaType@ kProbaTypeDefinition Types.h:66; TMVA::kMVAType@ kMVATypeDefinition Types.h:66; TMVA::TMVAVersion_tUInt_t TMVAVersion_tDefinition Types.h:49; TStringBasic string class.Definition TString.h:139; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22. tmvatmvaincTMVATypes.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html:11138,Guid,Guide,11138,doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2inc_2TMVA_2Types_8h_source.html,1,['Guid'],['Guide']
Usability,"7; xDouble_t x[n]Definition legend1.C:17; rf408_RDataFrameToRooFitDefinition rf408_RDataFrameToRooFit.py:1; ; ; RooDataSet::dataset[x,y] = 2000000 entries; ( 4.997, -0.304, ) weight= 1.000; ( 4.472, 0.910, ) weight= 1.000; ( 4.575, 0.830, ) weight= 1.000; ( 0.400, 0.776, ) weight= 1.000; ( 2.599, -0.232, ) weight= 1.000; ( -1.844, 1.575, ) weight= 1.000; ( 0.197, 0.853, ) weight= 1.000; ( -1.077, -0.721, ) weight= 1.000; ( -4.697, -3.165, ) weight= 1.000; ( 4.437, -1.208, ) weight= 1.000; ( 3.983, -0.146, ) weight= 1.000; ( -0.014, -1.447, ) weight= 1.000; ( -3.177, -2.704, ) weight= 1.000; ( -4.371, -0.363, ) weight= 1.000; ( 2.254, -0.499, ) weight= 1.000; ( 2.139, 6.533, ) weight= 1.000; ( 1.993, 6.991, ) weight= 1.000; ( -3.708, 7.781, ) weight= 1.000; ( -4.168, 1.284, ) weight= 1.000; ( -4.177, 4.650, ) weight= 1.000; mean(x) = 0.001 sigma(x) = 2.886; mean(y) = 1.000 sigma(y) = 3.000; ; RooDataHist::datahist[x,y] = 200 bins (2000000.000 weights); ( -4.500, -47.500, ) weight= 0.000; ( -4.500, -42.500, ) weight= 0.000; ( -4.500, -37.500, ) weight= 0.000; ( -4.500, -32.500, ) weight= 0.000; ( -4.500, -27.500, ) weight= 0.000; ( -4.500, -22.500, ) weight= 0.000; ( -4.500, -17.500, ) weight= 0.000; ( -4.500, -12.500, ) weight= 24.000; ( -4.500, -7.500, ) weight= 4537.000; ( -4.500, -2.500, ) weight= 69653.000; ( -4.500, 2.500, ) weight=107838.000; ( -4.500, 7.500, ) weight= 17790.000; ( -4.500, 12.500, ) weight= 292.000; ( -4.500, 17.500, ) weight= 0.000; ( -4.500, 22.500, ) weight= 0.000; ( -4.500, 27.500, ) weight= 0.000; ( -4.500, 32.500, ) weight= 0.000; ( -4.500, 37.500, ) weight= 0.000; ( -4.500, 42.500, ) weight= 0.000; ( -4.500, 47.500, ) weight= 0.000; mean(x) = 0.001 sigma(x) = 2.872; mean(y) = 0.999 sigma(y) = 3.329; DateMar 2021 ; AuthorStephan Hageboeck (CERN) ; Definition in file rf408_RDataFrameToRooFit.C. tutorialsroofitrf408_RDataFrameToRooFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf408__RDataFrameToRooFit_8C.html:7968,Guid,Guide,7968,doc/master/rf408__RDataFrameToRooFit_8C.html,https://root.cern,https://root.cern/doc/master/rf408__RDataFrameToRooFit_8C.html,1,['Guid'],['Guide']
Usability,"7}; 1678 ; 1679/////////////////////////////////////////////////////////////////////////////////; 1680/// Produce list of node ids for given stack; 1681/// If found nodes preselected - use their ids; 1682 ; 1683std::vector<int> RGeomDescription::MakeIdsByStack(const std::vector<int> &stack); 1684{; 1685 TLockGuard lock(fMutex);; 1686 ; 1687 std::vector<int> ids;; 1688 ; 1689 ids.emplace_back(0);; 1690 int nodeid = 0;; 1691 bool failure = false;; 1692 ; 1693 for (auto s : stack) {; 1694 auto &chlds = fDesc[nodeid].chlds;; 1695 if (s >= (int)chlds.size()) {; 1696 failure = true;; 1697 break;; 1698 }; 1699 ; 1700 ids.emplace_back(chlds[s]);; 1701 ; 1702 nodeid = chlds[s];; 1703 }; 1704 ; 1705 if (failure) {; 1706 printf(""Fail to convert stack into list of nodes\n"");; 1707 ids.clear();; 1708 }; 1709 ; 1710 return ids;; 1711}; 1712 ; 1713/////////////////////////////////////////////////////////////////////////////////; 1714/// Returns path string for provided stack; 1715 ; 1716std::vector<std::string> RGeomDescription::MakePathByStack(const std::vector<int> &stack); 1717{; 1718 TLockGuard lock(fMutex);; 1719 ; 1720 std::vector<std::string> path;; 1721 ; 1722 auto ids = MakeIdsByStack(stack);; 1723 path.reserve(ids.size());; 1724for (auto &id : ids); 1725 path.emplace_back(fDesc[id].name);; 1726 ; 1727 return path;; 1728}; 1729 ; 1730/////////////////////////////////////////////////////////////////////////////////; 1731/// Return string with only part of nodes description which were modified; 1732/// Checks also volume; 1733 ; 1734std::string RGeomDescription::ProduceModifyReply(int nodeid); 1735{; 1736 TLockGuard lock(fMutex);; 1737 ; 1738 std::vector<RGeomNodeBase *> nodes;; 1739 auto vol = GetVolume(nodeid);; 1740 ; 1741 // we take not only single node, but all there same volume is referenced; 1742 // nodes.push_back(&fDesc[nodeid]);; 1743 ; 1744 int id = 0;; 1745 for (auto &desc : fDesc); 1746 if (GetVolume(id++) == vol); 1747 nodes.emplace_back(&desc);; 1748 ; 1749 re",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:51689,clear,clear,51689,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['clear'],['clear']
Usability,"8 Int_t *lenchar = new Int_t[nvar];; 669 Int_t *boolflag = new Int_t[nvar];; 670 Int_t *lenbool = new Int_t[nvar];; 671 UChar_t *boolarr = new UChar_t[10000];; 672 ; 673 chtag_out[nvar*nchar]=0;; 674 for (i=0;i<80;i++)chtitl[i]=0;; 675#ifndef WIN32; 676 hgiven(id,chtitl,nvar,chtag_out,rmin[0],rmax[0],80,nchar);; 677#else; 678 hgiven(id,chtitl,80,nvar,chtag_out,nchar,rmin[0],rmax[0]);; 679#endif; 680 ; 681 Int_t bufpos = 0;; 682 //Int_t isachar = 0;; 683 //Int_t isabool = 0;; 684 char fullname[64];; 685 char name[32];; 686 char block[32];; 687 char oldblock[32];; 688 strlcpy(oldblock,""OLDBLOCK"",32);; 689 Int_t oldischar = -1;; 690 for (i=80;i>0;i--) {if (chtitl[i] == ' ') chtitl[i] = 0; }; 691 THbookTree *tree = new THbookTree(idname,id);; 692 tree->SetHbookFile(this);; 693 tree->SetType(1);; 694 ; 695 char *bigbuf = tree->MakeX(500000);; 696 ; 697#ifndef WIN32; 698 hbnam(id,PASSCHAR("" ""),bigbuf[0],PASSCHAR(""$CLEAR""),0,1,6);; 699#else; 700 hbnam(id,PASSCHAR("" ""),bigbuf[0],PASSCHAR(""$CLEAR""),0);; 701#endif; 702 ; 703 UInt_t varNumber = 0;; 704 Int_t golower = 1;; 705 Int_t nbits = 0;; 706 for(i=0; i<nvar;i++) {; 707 memset(name,' ',sizeof(name));; 708 name[sizeof(name)-1] = 0;; 709 memset(block,' ',sizeof(block));; 710 block[sizeof(block)-1] = 0;; 711 memset(fullname,' ',sizeof(fullname));; 712 fullname[sizeof(fullname)-1]=0;; 713#ifndef WIN32; 714 hntvar2(id,i+1,PASSCHAR(name),PASSCHAR(fullname),PASSCHAR(block),nsub,itype,isize,nbits,ielem,32,64,32);; 715#else; 716 hntvar2(id,i+1,PASSCHAR(name),PASSCHAR(fullname),PASSCHAR(block),nsub,itype,isize,nbits,ielem);; 717#endif; 718 TString hbookName = name;; 719 ; 720 for (j=30;j>0;j--) {; 721 if(golower) name[j] = tolower(name[j]);; 722 if (name[j] == ' ') name[j] = 0;; 723 }; 724 if (golower == 2) name[0] = tolower(name[0]);; 725 ; 726 for (j=62;j>0;j--) {; 727 if(golower && fullname[j-1] != '[') fullname[j] = tolower(fullname[j]);; 728 // convert also character after [, if golower == 2; 729 if (golower == 2) fullname[j] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THbookFile_8cxx_source.html:21604,CLEAR,CLEAR,21604,doc/master/THbookFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THbookFile_8cxx_source.html,1,['CLEAR'],['CLEAR']
Usability,"8 break;; 159 }; 160 break;; 161 ; 162 case 1: // comment; 163 break;; 164 ; 165 case 2: // name; 166 switch (c) {; 167 case ' ':; 168 case '\t':; 169 case ':':; 170 state = 3;; 171 break;; 172 case '(':; 173 state = 7;; 174 break;; 175 default:; 176 break;; 177 }; 178 break;; 179 ; 180 case 3: // ws before value; 181 if (c != ' ' && c != '\t'); 182 state = 4;; 183 break;; 184 ; 185 case 4: // value; 186 break;; 187 ; 188 case 5: // type; 189 if (c == ')'); 190 state = 6;; 191 break;; 192 ; 193 case 6: // optional ':'; 194 state = (c == ':') ? 3 : 4;; 195 break;; 196 ; 197 case 7:; 198 state = (c == ')') ? 6 : 5;; 199 break;; 200 ; 201 }; 202 switch (state) {; 203 case 2:; 204 name.Append(c);; 205 break;; 206 case 4:; 207 value.Append(c);; 208 break;; 209 case 5:; 210 type.Append(c);; 211 break;; 212 }; 213 if (state != 4); 214 Char(c);; 215 }; 216 // In case EOF is reach before '\n'; 217 if (name.Length() > 0) {; 218 KeyValue(name, value, type);; 219 name.Clear();; 220 value.Clear();; 221 type.Clear();; 222 }; 223}; 224 ; 225/** \class TReadEnvParser; 226*/; 227 ; 228class TReadEnvParser : public TEnvParser {; 229 ; 230private:; 231 EEnvLevel fLevel;; 232 ; 233public:; 234 TReadEnvParser(TEnv *e, FILE *f, EEnvLevel l) : TEnvParser(e, f), fLevel(l) {}; 235 void KeyValue(const TString &name, const TString &value, const TString &type) override; 236 { fEnv->SetValue(name, value, fLevel, type); }; 237};; 238 ; 239/** \class TWriteEnvParser; 240*/; 241 ; 242class TWriteEnvParser : public TEnvParser {; 243 ; 244private:; 245 FILE *fOfp;; 246 ; 247public:; 248 TWriteEnvParser(TEnv *e, FILE *f, FILE *of) : TEnvParser(e, f), fOfp(of) {}; 249 void KeyValue(const TString &name, const TString &value, const TString &type) override;; 250 void Char(Int_t c) override { fputc(c, fOfp); }; 251};; 252 ; 253////////////////////////////////////////////////////////////////////////////////; 254/// Write resources out to a new file.; 255 ; 256void TWriteEnvParser::KeyValue(const TString &na",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:5791,Clear,Clear,5791,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Clear'],['Clear']
Usability,"8 of file GX11Gui.cxx. ◆ CheckEvent(). Bool_t TGX11::CheckEvent ; (; Window_t ; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 1753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 447 of file TGX11.cxx. ◆ Close",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:58108,Clear,ClearPixmap,58108,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['ClearPixmap']
Usability,"8 of file TEventList.cxx. ◆ TEventList() [3/3]. TEventList::TEventList ; (; const TEventList & ; list). Copy constructor. ; Definition at line 94 of file TEventList.cxx. ◆ ~TEventList(). TEventList::~TEventList ; (; ). override . Default destructor for a EventList. ; Definition at line 109 of file TEventList.cxx. Member Function Documentation. ◆ Add(). void TEventList::Add ; (; const TEventList * ; alist). virtual . Merge contents of alist with this list. ; Both alist and this list are assumed to be sorted prior to this call ; Definition at line 121 of file TEventList.cxx. ◆ Class(). static TClass * TEventList::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TEventList::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEventList::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 77 of file TEventList.h. ◆ Clear(). void TEventList::Clear ; (; Option_t * ; option = """"). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 47 of file TEventList.h. ◆ Contains(). bool TEventList::Contains ; (; Long64_t ; entry). virtual . Return TRUE if list contains entry. ; Definition at line 167 of file TEventList.cxx. ◆ ContainsRange(). bool TEventList::ContainsRange ; (; Long64_t ; entrymin, . Long64_t ; entrymax . ). virtual . Return TRUE if list contains entries from entrymin to entrymax included. ; Definition at line 176 of file TEventList.cxx. ◆ DeclFileName(). static const char * TEventList::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 77 of file TEventList.h. ◆ DirectoryAutoAdd(). void TEventList::DirectoryAutoAdd ; (; TDirectory * ; dir). virtual . Called by TKey and others to automatically add us to a directory when we are read from a file. ; Definition at line 188 of file TEventList.cxx. ◆ Enter(). void TEventList::Enter ; (; Long64_t ; entry)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:17135,Clear,Clear,17135,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Clear'],['Clear']
Usability,"8 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendage = nullptr, . const char * ; fullName = nullptr . ); const. private . [private] ; Definition at line 1415 of file TTabCom.cxx. ◆ DeclFileName(). static const char * TTabCom::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TTabCom.h. ◆ DetermineClass(). TString TTabCo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:10496,Clear,ClearSysIncFiles,10496,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearSysIncFiles']
Usability,"8/// Returns 0 in case list cannot be obtained or in case of error.; 2119 ; 2120const char *TSystem::GetLinkedLibraries(); 2121{; 2122 return nullptr;; 2123}; 2124 ; 2125////////////////////////////////////////////////////////////////////////////////; 2126/// Return a space separated list of loaded shared libraries.; 2127/// Regexp is a wildcard expression, see TRegexp::MakeWildcard.; 2128/// This list is of a format suitable for a linker, i.e it may contain; 2129/// -Lpathname and/or -lNameOfLib.; 2130/// Option can be any of:; 2131/// - S: shared libraries loaded at the start of the executable, because; 2132/// they were specified on the link line.; 2133/// - D: shared libraries dynamically loaded after the start of the program.; 2134/// - L: this option is ignored, and available for backward compatibility.; 2135 ; 2136const char *TSystem::GetLibraries(const char *regexp, const char *options,; 2137 Bool_t isRegexp); 2138{; 2139 fListLibs.Clear();; 2140 ; 2141 TString libs;; 2142 TString opt(options);; 2143 Bool_t so2dylib = (opt.First('L') != kNPOS);; 2144 if (so2dylib); 2145 opt.ReplaceAll(""L"", """");; 2146 ; 2147 if (opt.IsNull() || opt.First('D') != kNPOS); 2148 libs += gInterpreter->GetSharedLibs();; 2149 ; 2150 // Cint currently register all libraries that; 2151 // are loaded and have a dictionary in them, this; 2152 // includes all the libraries that are included; 2153 // in the list of (hard) linked libraries.; 2154 ; 2155 TString slinked;; 2156 const char *linked;; 2157 if ((linked = GetLinkedLibraries())) {; 2158 if (fLinkedLibs != LINKEDLIBS) {; 2159 // This is not the default value, we need to keep the custom part.; 2160 TString custom = fLinkedLibs;; 2161 custom.ReplaceAll(LINKEDLIBS,linked);; 2162 if (custom == fLinkedLibs) {; 2163 // no replacement done, let's append linked; 2164 slinked.Append(linked);; 2165 slinked.Append("" "");; 2166 }; 2167 slinked.Append(custom);; 2168 } else {; 2169 slinked.Append(linked);; 2170 }; 2171 } else {; 2172 slinked.Appen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:69587,Clear,Clear,69587,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['Clear'],['Clear']
Usability,"80, Double_t phimin=0, Double_t phimax=360)Make in one step a volume pointing to a sphere shape with given medium.Definition TGeoManager.cxx:3186; TGeoManager::SetTopVolumevoid SetTopVolume(TGeoVolume *vol)Set the top volume and corresponding node as starting point of the geometry.Definition TGeoManager.cxx:3655; TGeoManager::SetTopVisiblevoid SetTopVisible(Bool_t vis=kTRUE)make top volume visible on screenDefinition TGeoManager.cxx:2396; TGeoManager::MakeTubsTGeoVolume * MakeTubs(const char *name, TGeoMedium *medium, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2)Make in one step a volume pointing to a tube segment shape with given medium.Definition TGeoManager.cxx:3213; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoRotationClass describing rotations.Definition TGeoMatrix.h:168; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::SetVisibilityvoid SetVisibility(Bool_t vis=kTRUE) overrideset visibility of this volumeDefinition TGeoVolume.cxx:2347; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::AddNodeOverlapvirtual void AddNodeOverlap(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:1044; TGeoVolume::SetLineColorvoid SetLineColor(Color_t lcolor) overrideSet the line color.Definition TGeoVolume.cxx:2169; legovoid lego()Definition lego.C:31; h1TH1F * h1Definition legend1.C:5; AuthorSoon Gi Kwon(1116w.nosp@m.on@h.nosp@m.anmai.nosp@m.l.ne.nosp@m.t), Dept. of Physics, Univ. of Seoul ; Definition in file lego.C. tutorialsgeomlego.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geom_2lego_8C.html:19545,Guid,Guide,19545,doc/master/geom_2lego_8C.html,https://root.cern,https://root.cern/doc/master/geom_2lego_8C.html,1,['Guid'],['Guide']
Usability,"801 of file TMatrixTBase.cxx. ◆ Apply() [2/2]. template<class Element > . TMatrixTBase< Element > & TMatrixTBase< Element >::Apply ; (; const TElementPosActionT< Element > & ; action). virtual . Apply action to each element of the matrix. ; To action the location of the current element is passed. ; Reimplemented in TMatrixTSym< Double_t >, and TMatrixTSym< Element >.; Definition at line 818 of file TMatrixTBase.cxx. ◆ Class() [1/2]. template<class Element > . static TClass * TMatrixTBase< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class() [2/2]. TClass * TMatrixTBase< double >::Class ; (; ). ◆ Class_Name(). template<class Element > . static const char * TMatrixTBase< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t TMatrixTBase< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 204 of file TMatrixTBase.h. ◆ Clear(). template<class Element > . void TMatrixTBase< Element >::Clear ; (; Option_t * ; option = """"). overridepure virtual . Reimplemented from TObject.; Implemented in TMatrixT< Element >, TMatrixT< AReal >, TMatrixT< Double_t >, TMatrixTSparse< Element >, TMatrixTSparse< Double_t >, TMatrixTSym< Element >, and TMatrixTSym< Double_t >. ◆ ColNorm(). template<class Element > . Element TMatrixTBase< Element >::ColNorm. virtual . Column matrix norm, MAX{ SUM{ |M(i,j)|, over i}, over j}. ; The norm is induced by the 1 vector norm. ; Reimplemented in TMatrixTSparse< Element >, and TMatrixTSparse< Double_t >.; Definition at line 517 of file TMatrixTBase.cxx. ◆ DeclFileName(). template<class Element > . static const char * TMatrixTBase< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 204 of file TMatrixTBase.h. ◆ Determinant() [1/2]. template<class Element > . virtual Double_t TMatrixTBase< Element >::Determinant ; (;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixTBase.html:18037,Clear,Clear,18037,doc/master/classTMatrixTBase.html,https://root.cern,https://root.cern/doc/master/classTMatrixTBase.html,1,['Clear'],['Clear']
Usability,"82 template <typename From, typename To, template <typename F, typename T> class Converter >; 2483 struct ConvertBasicType<WithFactorMarker<From>,To,Converter > {; 2484 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2485 {; 2486 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2487 ; 2488 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2489 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2490 Int_t nvalues = proxy->Size();; 2491 ; 2492 TConfSTLWithFactor *conf = (TConfSTLWithFactor *)config;; 2493 ; 2494 From *items = new From[nvalues];; 2495 buf.ReadFastArrayWithFactor(items, nvalues, conf->fFactor, conf->fXmin);; 2496 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2497 delete [] items;; 2498 return 0;; 2499 }; 2500 };; 2501 ; 2502 template <typename From, typename To, template <typename F, typename T> class Converter >; 2503 struct ConvertBasicType<NoFactorMarker<From>,To,Converter > {; 2504 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *start, const void *end, const TLoopConfiguration *loopconf, const TConfiguration *config); 2505 {; 2506 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2507 ; 2508 TGenericLoopConfig *loopconfig = (TGenericLoopConfig*)loopconf;; 2509 TVirtualCollectionProxy *proxy = loopconfig->fProxy;; 2510 Int_t nvalues = proxy->Size();; 2511 ; 2512 TConfSTLNoFactor *conf = (TConfSTLNoFactor *)config;; 2513 ; 2514 From *items = new From[nvalues];; 2515 buf.ReadFastArrayWithNbits(items, nvalues, conf->fNbits);; 2516 Converter<From,To>::ConvertAction(items,start,end,loopconfig,config);; 2517 delete [] items;; 2518 return 0;; 2519 }; 2520 };; 2521 ; 2522 static INLINE_TEMPLATE_ARGS Int_t ReadBase(TBuffer &buf, void *start, const void *end, const TLoopConfiguration * loopconfig, const TConfiguration *config); 2523 {; 2524 // Well the implementation is no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:101270,Simpl,Simple,101270,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"83 of file TLinearFitter.cxx. ◆ Chisquare() [1/2]. void TLinearFitter::Chisquare ; (; ). virtual . Calculates the chisquare. ; Definition at line 797 of file TLinearFitter.cxx. ◆ Chisquare() [2/2]. Double_t TLinearFitter::Chisquare ; (; Int_t ; , . Double_t * ;  . ); const. inlineoverridevirtual . Implements TVirtualFitter.; Definition at line 269 of file TLinearFitter.h. ◆ Class(). static TClass * TLinearFitter::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TLinearFitter::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TLinearFitter::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 277 of file TLinearFitter.h. ◆ Clear(). void TLinearFitter::Clear ; (; Option_t * ; option = """"). overridevirtual . Clears everything. Used in TH1::Fit and TGraph::Fit(). ; Implements TVirtualFitter.; Definition at line 731 of file TLinearFitter.cxx. ◆ ClearPoints(). void TLinearFitter::ClearPoints ; (; ). virtual . To be used when different sets of points are fitted with the same formula. ; Definition at line 771 of file TLinearFitter.cxx. ◆ ComputeTValues(). void TLinearFitter::ComputeTValues ; (; ). private . Computes parameters' t-values and significance. ; Definition at line 862 of file TLinearFitter.cxx. ◆ CreateSubset(). void TLinearFitter::CreateSubset ; (; Int_t ; ntotal, . Int_t ; h, . Int_t * ; index . ). private . Creates a p-subset to start ntotal - total number of points from which the subset is chosen. ; Definition at line 2291 of file TLinearFitter.cxx. ◆ CStep(). Double_t TLinearFitter::CStep ; (; Int_t ; step, . Int_t ; h, . Double_t * ; residuals, . Int_t * ; index, . Int_t * ; subdat, . Int_t ; start, . Int_t ; end . ). private . The CStep procedure, as described in the article. ; Definition at line 2354 of file TLinearFitter.cxx. ◆ DeclFileName(). static const char * TLinearFitter::DeclFileName ; (; ). inlinestatic . R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLinearFitter.html:36278,Clear,ClearPoints,36278,doc/master/classTLinearFitter.html,https://root.cern,https://root.cern/doc/master/classTLinearFitter.html,1,['Clear'],['ClearPoints']
Usability,"838 ; 839////////////////////////////////////////////////////////////////////////////////; 840/// Check if specified version string is correct and build version vector.; 841 ; 842Bool_t TSchemaRule::ProcessVersion( const TString& version ) const; 843{; 844 //---------------------------------------------------------------------------; 845 // Check if we have valid list; 846 /////////////////////////////////////////////////////////////////////////////; 847 ; 848 if( version[0] != '[' || version[version.Length()-1] != ']' ); 849 return kFALSE;; 850 std::string ver = version.Data();; 851 ; 852 std::list<std::string> versions;; 853 Internal::TSchemaRuleProcessor::SplitList( ver.substr( 1, ver.size()-2), versions );; 854 ; 855 if( versions.empty() ); 856 {; 857 delete fVersionVect;; 858 fVersionVect = nullptr;; 859 return kFALSE;; 860 }; 861 ; 862 if( !fVersionVect ); 863 fVersionVect = new std::vector<std::pair<Int_t, Int_t> >;; 864 fVersionVect->clear();; 865 ; 866 //---------------------------------------------------------------------------; 867 // Check the validity of each list element; 868 /////////////////////////////////////////////////////////////////////////////; 869 ; 870 std::list<std::string>::iterator it;; 871 for( it = versions.begin(); it != versions.end(); ++it ) {; 872 std::pair<Int_t, Int_t> verpair;; 873 if( !Internal::TSchemaRuleProcessor::ProcessVersion( *it, verpair ) ); 874 {; 875 delete fVersionVect;; 876 fVersionVect = nullptr;; 877 return kFALSE;; 878 }; 879 fVersionVect->push_back( verpair );; 880 }; 881 return kTRUE;; 882}; 883 ; 884////////////////////////////////////////////////////////////////////////////////; 885/// Check if specified checksum string is correct and build checksum vector.; 886 ; 887Bool_t TSchemaRule::ProcessChecksum( const TString& checksum ) const; 888{; 889 //---------------------------------------------------------------------------; 890 // Check if we have valid list; 891 ////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:28055,clear,clear,28055,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['clear'],['clear']
Usability,84 of file HybridPlot.h. ◆ IsA(). TClass * RooStats::HybridPlot::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 121 of file HybridPlot.h. ◆ Streamer(). void RooStats::HybridPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::HybridPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 121 of file HybridPlot.h. Member Data Documentation. ◆ fB_histo. TH1F* RooStats::HybridPlot::fB_histo. private . The b Histo. ; Definition at line 114 of file HybridPlot.h. ◆ fB_histo_shaded. TH1F* RooStats::HybridPlot::fB_histo_shaded. private . The b Histo shaded. ; Definition at line 115 of file HybridPlot.h. ◆ fData_testStat_line. TLine* RooStats::HybridPlot::fData_testStat_line. private . The line for the data value of the test statistic. ; Definition at line 116 of file HybridPlot.h. ◆ fLegend. TLegend* RooStats::HybridPlot::fLegend. private . The legend of the plot. ; Definition at line 117 of file HybridPlot.h. ◆ fPad. TVirtualPad* RooStats::HybridPlot::fPad. private . The pad where it has been drawn. ; Definition at line 118 of file HybridPlot.h. ◆ fSb_histo. TH1F* RooStats::HybridPlot::fSb_histo. private . The sb Histo. ; Definition at line 112 of file HybridPlot.h. ◆ fSb_histo_shaded. TH1F* RooStats::HybridPlot::fSb_histo_shaded. private . The sb Histo shaded. ; Definition at line 113 of file HybridPlot.h. ◆ fVerbose. bool RooStats::HybridPlot::fVerbose. private . verbosity flag ; Definition at line 119 of file HybridPlot.h. Libraries for RooStats::HybridPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/HybridPlot.h; roofit/roostats/src/HybridPlot.cxx. RooStatsHybridPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:54 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html:19843,Guid,Guide,19843,doc/master/classRooStats_1_1HybridPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HybridPlot.html,1,['Guid'],['Guide']
Usability,"84 of file TMatrixT.h. Member Function Documentation. ◆ Allocate(). template<class Element > . void TMatrixT< Element >::Allocate ; (; Int_t ; no_rows, . Int_t ; no_cols, . Int_t ; row_lwb = 0, . Int_t ; col_lwb = 0, . Int_t ; init = 0, . Int_t ; = -1 . ). protected . Allocate new matrix. ; Arguments are number of rows, columns, row lowerbound (0 default) and column lowerbound (0 default). ; Definition at line 464 of file TMatrixT.cxx. ◆ Class() [1/2]. template<class Element > . static TClass * TMatrixT< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class() [2/2]. TClass * TMatrixT< double >::Class ; (; ). ◆ Class_Name(). template<class Element > . static const char * TMatrixT< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t TMatrixT< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 215 of file TMatrixT.h. ◆ Clear(). template<class Element > . void TMatrixT< Element >::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Implements TMatrixTBase< Element >.; Definition at line 123 of file TMatrixT.h. ◆ DeclFileName(). template<class Element > . static const char * TMatrixT< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 215 of file TMatrixT.h. ◆ Delete_m(). template<class Element > . void TMatrixT< Element >::Delete_m ; (; Int_t ; size, . Element *& ; m . ). protected . Delete data pointer m, if it was assigned on the heap. ; Definition at line 406 of file TMatrixT.cxx. ◆ Determinant() [1/2]. template<class Element > . Double_t TMatrixT< Element >::Determinant. overridevirtual . Return the matrix determinant. ; Reimplemented from TMatrixTBase< Element >.; Definition at line 1355 of file TMatrixT.cxx. ◆ Determinant() [2/2]. template<class Element > . void TMatrixT< Element >::Determinant ; (; Double_t & ; d1, . Doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMatrixT.html:33694,Clear,Clear,33694,doc/master/classTMatrixT.html,https://root.cern,https://root.cern/doc/master/classTMatrixT.html,1,['Clear'],['Clear']
Usability,"86737550832E-6,; 6.23974539184983293730E-9,; }. Definition at line 116 of file SpecFuncCephesInv.cxx. ◆ Q. double ROOT::Math::Cephes::Q[]. static . Initial value:= {; -2.31581873324120129819E-5,; 5.39605580493303397842E-4,; -4.45641913851797240494E-3,; 1.18139785222060435552E-2,; 3.58236398605498653373E-2,; -2.34591795718243348568E-1,; 7.14304917030273074085E-2,; 1.00000000000000000320E0; }. Definition at line 294 of file SpecFuncCephes.cxx. ◆ Q0. double ROOT::Math::Cephes::Q0[8]. static . Initial value:= {; 1.95448858338141759834E0,; 4.67627912898881538453E0,; 8.63602421390890590575E1,; -2.25462687854119370527E2,; 2.00260212380060660359E2,; -8.20372256168333339912E1,; 1.59056225126211695515E1,; -1.18331621121330003142E0,; }. Definition at line 85 of file SpecFuncCephesInv.cxx. ◆ Q1. double ROOT::Math::Cephes::Q1[8]. static . Initial value:= {; 1.57799883256466749731E1,; 4.53907635128879210584E1,; 4.13172038254672030440E1,; 1.50425385692907503408E1,; 2.50464946208309415979E0,; -1.42182922854787788574E-1,; -3.80806407691578277194E-2,; -9.33259480895457427372E-4,; }. Definition at line 106 of file SpecFuncCephesInv.cxx. ◆ Q2. double ROOT::Math::Cephes::Q2[8]. static . Initial value:= {; 6.02427039364742014255E0,; 3.67983563856160859403E0,; 1.37702099489081330271E0,; 2.16236993594496635890E-1,; 1.34204006088543189037E-2,; 3.28014464682127739104E-4,; 2.89247864745380683936E-6,; 6.79019408009981274425E-9,; }. Definition at line 127 of file SpecFuncCephesInv.cxx. ◆ s2pi. double ROOT::Math::Cephes::s2pi = 2.50662827463100050242E0. static . Definition at line 76 of file SpecFuncCephesInv.cxx. ◆ STIR. double ROOT::Math::Cephes::STIR[5]. static . Initial value:= {; 7.87311395793093628397E-4,; -2.29549961613378126380E-4,; -2.68132617805781232825E-3,; 3.47222221605458667310E-3,; 8.33333333333482257126E-2,; }. Definition at line 306 of file SpecFuncCephes.cxx. ROOTMathCephes. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html:10881,Guid,Guide,10881,doc/master/namespaceROOT_1_1Math_1_1Cephes.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Math_1_1Cephes.html,1,['Guid'],['Guide']
Usability,"88 of file TEveViewer.cxx. ◆ SetGLViewer(). void TEveViewer::SetGLViewer ; (; TGLViewer * ; viewer, . TGFrame * ; frame . ). Set TGLViewer that is represented by this object. ; The old gl-viewer is deleted. ; Definition at line 143 of file TEveViewer.cxx. ◆ SpawnGLEmbeddedViewer(). TGLEmbeddedViewer * TEveViewer::SpawnGLEmbeddedViewer ; (; TGedEditor * ; ged = nullptr, . Int_t ; border = 0 . ). Spawn new GLViewer and adopt it. ; Definition at line 200 of file TEveViewer.cxx. ◆ SpawnGLViewer(). TGLSAViewer * TEveViewer::SpawnGLViewer ; (; TGedEditor * ; ged = nullptr, . Bool_t ; stereo = kFALSE, . Bool_t ; quad_buf = kTRUE . ). Spawn new GLViewer and adopt it. ; Definition at line 155 of file TEveViewer.cxx. ◆ Streamer(). void TEveViewer::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveViewer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file TEveViewer.h. ◆ SwitchStereo(). void TEveViewer::SwitchStereo ; (; ). Switch stereo mode. ; This only works TGLSAViewers and, of course, with stereo support provided by the OpenGL driver. ; Definition at line 233 of file TEveViewer.cxx. Member Data Documentation. ◆ fgInitInternal. Bool_t TEveViewer::fgInitInternal = kFALSE. staticprotected . Definition at line 40 of file TEveViewer.h. ◆ fGLViewer. TGLViewer* TEveViewer::fGLViewer. protected . Definition at line 37 of file TEveViewer.h. ◆ fGLViewerFrame. TGFrame* TEveViewer::fGLViewerFrame. protected . Definition at line 38 of file TEveViewer.h. ◆ fgRecreateGlOnDockOps. Bool_t TEveViewer::fgRecreateGlOnDockOps = kFALSE. staticprotected . Definition at line 41 of file TEveViewer.h. Libraries for TEveViewer:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveViewer.h; graf3d/eve/src/TEveViewer.cxx. TEveViewer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveViewer.html:45477,Guid,Guide,45477,doc/master/classTEveViewer.html,https://root.cern,https://root.cern/doc/master/classTEveViewer.html,1,['Guid'],['Guide']
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Do",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TInspectCanvas.html:1460,Clear,Clear,1460,root/html528/TInspectCanvas.html,https://root.cern,https://root.cern/root/html528/TInspectCanvas.html,12,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Double_t* xc, Double_t* yc, Double_t xclipl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInspectCanvas.html:1419,Clear,Clear,1419,root/html602/TInspectCanvas.html,https://root.cern,https://root.cern/root/html602/TInspectCanvas.html,6,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TPad::cd(Int_t subpadnumber = 0)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPad::Clear(Option_t* option = """"); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGroupButton.html:1821,Clear,Clear,1821,root/html528/TGroupButton.html,https://root.cern,https://root.cern/root/html528/TGroupButton.html,4,['Clear'],['Clear']
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TPad::cd(Int_t subpadnumber = 0)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPad::Clear(Option_t* option = """"); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Dou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGroupButton.html:1692,Clear,Clear,1692,root/html602/TGroupButton.html,https://root.cern,https://root.cern/root/html602/TGroupButton.html,2,['Clear'],['Clear']
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TPad::cd(Int_t subpadnumber = 0)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPad::Clear(Option_t* option = """"); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEvePad.html:1683,Clear,Clear,1683,root/html528/TEvePad.html,https://root.cern,https://root.cern/root/html528/TEvePad.html,4,['Clear'],['Clear']
Usability,"88, const char* title = """")MENU ; virtual TVirtualPad*TPad::cd(Int_t subpadnumber = 0)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTPad::Clear(Option_t* option = """"); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t yclipt); virtual Int_tTPad::Clip(Double_t* x, Double_t* y, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); virtual Int_tTPad::ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); virtual Int_tTPad::ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Double_t* xc, Double_t* yc, Doubl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEvePad.html:1513,Clear,Clear,1513,root/html602/TEvePad.html,https://root.cern,https://root.cern/root/html602/TEvePad.html,2,['Clear'],['Clear']
Usability,"88, const char* title = """")MENU ; virtual voidBuildStandardButtons(); virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDialogCanvas.html:1988,Clear,Clear,1988,root/html528/TDialogCanvas.html,https://root.cern,https://root.cern/root/html528/TDialogCanvas.html,9,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"88, const char* title = """")MENU ; virtual voidBuildStandardButtons(); virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TDialogCanvas.html:1958,Clear,Clear,1958,root/html534/TDialogCanvas.html,https://root.cern,https://root.cern/root/html534/TDialogCanvas.html,3,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"88, const char* title = """")MENU ; virtual voidBuildStandardButtons(); virtual TVirtualPad*TCanvas::cd(Int_t subpadnumber = 0); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCanvas::Clear(Option_t* option = """"); virtual voidTCanvas::Cleared(TVirtualPad* pad)SIGNAL ; voidTCanvas::ClearPadSave(); virtual Int_tTPad::Clip(Float_t* x, Float_t* y, Float_t xclipl, Float_t yclipb, Float_t xclipr, Float_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TDialogCanvas.html:1784,Clear,Clear,1784,root/html602/TDialogCanvas.html,https://root.cern,https://root.cern/root/html602/TDialogCanvas.html,6,['Clear'],"['Clear', 'ClearPadSave', 'Cleared']"
Usability,"8; TMarker::PaintMarkervirtual void PaintMarker(Double_t x, Double_t y)Draw this marker with new coordinates.Definition TMarker.cxx:323; TMarker::GetBBoxRectangle_t GetBBox() overrideReturn the bounding Box of the Line.Definition TMarker.cxx:402; TMarker::SetBBoxX1void SetBBoxX1(const Int_t x) overrideSet left hand side of BoundingBox to a value (resize in x direction on left)Definition TMarker.cxx:459; TMarker::DisplayMarkerLineWidthsstatic void DisplayMarkerLineWidths()Display the table of markers with different line widths and their numbers.Definition TMarker.cxx:134; TMarker::Printvoid Print(Option_t *option="""") const overrideDump this marker with its attributes.Definition TMarker.cxx:339; TMarker::SetBBoxCentervoid SetBBoxCenter(const TPoint &p) overrideSet center of the BoundingBox.Definition TMarker.cxx:430; TMarker::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px,py to a marker.Definition TMarker.cxx:176; TMarker::GetXDouble_t GetX() constDefinition TMarker.h:44; TMarker::SetBBoxX2void SetBBoxX2(const Int_t x) overrideSet right hand side of BoundingBox to a value (resize in x direction on right)Definition TMarker.cxx:470; TMarker::DisplayMarkerTypesstatic void DisplayMarkerTypes()Display the table of markers with their numbers.Definition TMarker.cxx:103; TMarker::PaintMarkerNDCvirtual void PaintMarkerNDC(Double_t u, Double_t v)Draw this marker with new coordinates in NDC.Definition TMarker.cxx:332; TMarker::GetYDouble_t GetY() constDefinition TMarker.h:45; TObjectMother of all ROOT objects.Definition TObject.h:41; TPointDefinition TPoint.h:31; double; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; v@ vDefinition rootcling_impl.cxx:3699; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Drawth1 Draw(). graf2dgrafincTMarker.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMarker_8h_source.html:7555,Guid,Guide,7555,doc/master/TMarker_8h_source.html,https://root.cern,https://root.cern/doc/master/TMarker_8h_source.html,1,['Guid'],['Guide']
Usability,9 194; 124 93 62 27 28 16 3 2 1 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0]; [-10. -9.8 -9.6 -9.4 -9.2 -9. -8.8 -8.6 -8.4 -8.2 -8. -7.8; -7.6 -7.4 -7.2 -7. -6.8 -6.6 -6.4 -6.2 -6. -5.8 -5.6 -5.4; -5.2 -5. -4.8 -4.6 -4.4 -4.2 -4. -3.8 -3.6 -3.4 -3.2 -3.; -2.8 -2.6 -2.4 -2.2 -2. -1.8 -1.6 -1.4 -1.2 -1. -0.8 -0.6; -0.4 -0.2 0. 0.2 0.4 0.6 0.8 1. 1.2 1.4 1.6 1.8; 2. 2.2 2.4 2.6 2.8 3. 3.2 3.4 3.6 3.8 4. 4.2; 4.4 4.6 4.8 5. 5.2 5.4 5.6 5.8 6. 6.2 6.4 6.6; 6.8 7. 7.2 7.4 7.6 7.8 8. 8.2 8.4 8.6 8.8 9.; 9.2 9.4 9.6 9.8 10. ]; RooDataHist imported with default binning and exported back to numpy:; [ 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 2 2 5 10 17 32 38 50 78 123; 195 274 347 442 486 635 682 786 805 768 755 681 639 533 455 350 259 194; 124 93 62 27 28 16 3 2 1 1 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0; 0 0 0 0 0 0 0 0 0 0]; [-10. -9.8 -9.6 -9.4 -9.2 -9. -8.8 -8.6 -8.4 -8.2 -8. -7.8; -7.6 -7.4 -7.2 -7. -6.8 -6.6 -6.4 -6.2 -6. -5.8 -5.6 -5.4; -5.2 -5. -4.8 -4.6 -4.4 -4.2 -4. -3.8 -3.6 -3.4 -3.2 -3.; -2.8 -2.6 -2.4 -2.2 -2. -1.8 -1.6 -1.4 -1.2 -1. -0.8 -0.6; -0.4 -0.2 0. 0.2 0.4 0.6 0.8 1. 1.2 1.4 1.6 1.8; 2. 2.2 2.4 2.6 2.8 3. 3.2 3.4 3.6 3.8 4. 4.2; 4.4 4.6 4.8 5. 5.2 5.4 5.6 5.8 6. 6.2 6.4 6.6; 6.8 7. 7.2 7.4 7.6 7.8 8. 8.2 8.4 8.6 8.8 9.; 9.2 9.4 9.6 9.8 10. ]; RooDataHist imported with linspace binning and exported back to numpy:; [ 0 0 0 0 0 19 215 1381 3394 3376 1382 226 7 0; 0 0 0 0 0 0]; [-10. -9. -8. -7. -6. -5. -4. -3. -2. -1. 0. 1. 2. 3.; 4. 5. 6. 7. 8. 9. 10.]; RooDataHist imported with uniform binning and exported back to numpy:; [ 0 0 0 0 0 19 215 1381 3394 3376 1382 226 7 0; 0 0 0 0 0 0]; [-10. -9. -8. -7. -6. -5. -4. -3. -2. -1. 0. 1. 2. 3.; 4. 5. 6. 7. 8. 9. 10.]; DateNovember 2021 ; AuthorJonas Rembser ; Definition in file rf409_NumPyPandasToRooFit.py. tutorialsroofitrf409_NumPyPandasToRooFit.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf409__NumPyPandasToRooFit_8py.html:9778,Guid,Guide,9778,doc/master/rf409__NumPyPandasToRooFit_8py.html,https://root.cern,https://root.cern/doc/master/rf409__NumPyPandasToRooFit_8py.html,1,['Guid'],['Guide']
Usability,"9 fGeoManager->SetMatrixReflection(kFALSE);; 1370 fVisLock = kTRUE;; 1371}; 1372 ; 1373////////////////////////////////////////////////////////////////////////////////; 1374/// Paint recursively a node and its content according to visualization options.; 1375 ; 1376void TGeoPainter::PaintNode(TGeoNode *node, Option_t *option, TGeoMatrix *global); 1377{; 1378 PaintVolume(node->GetVolume(), option, global);; 1379}; 1380 ; 1381////////////////////////////////////////////////////////////////////////////////; 1382/// Paint recursively a node and its content according to visualization options.; 1383 ; 1384void TGeoPainter::PaintVolume(TGeoVolume *top, Option_t *option, TGeoMatrix *global); 1385{; 1386 if (fTopVolume != top) {; 1387 ClearVisibleVolumes();; 1388 fVisLock = kFALSE;; 1389 }; 1390 fTopVolume = top;; 1391 if (!fVisLevel); 1392 return;; 1393 TGeoVolume *vol = top;; 1394 if (global); 1395 *fGlobal = *global;; 1396 else; 1397 fGlobal->Clear();; 1398 TGeoShape::SetTransform(fGlobal);; 1399 Bool_t drawDaughters = kTRUE;; 1400 Bool_t vis = (top->IsVisible() && !top->IsAssembly());; 1401 Int_t transparency = 0;; 1402 ; 1403 // Update pad attributes in case we need to paint VOL; 1404 if (!strstr(option, ""range"")); 1405 ((TAttLine *)vol)->Modify();; 1406 ; 1407 // Do we need to draw a branch ?; 1408 if (top->IsVisBranch()) {; 1409 fGeoManager->PushPath();; 1410 fGeoManager->cd(fVisBranch.Data());; 1411 // while (fGeoManager->GetLevel()) {; 1412 vol = fGeoManager->GetCurrentVolume();; 1413 if (!fVisLock) {; 1414 fVisVolumes->Add(vol);; 1415 vol->SetAttBit(TGeoAtt::kVisOnScreen);; 1416 }; 1417 fGeoManager->SetPaintVolume(vol);; 1418 transparency = vol->GetTransparency();; 1419 vol->SetTransparency(40);; 1420 if (!strstr(option, ""range"")); 1421 ((TAttLine *)vol)->Modify();; 1422 if (global) {; 1423 *fGlobal = *global;; 1424 *fGlobal *= *fGeoManager->GetCurrentMatrix();; 1425 } else {; 1426 *fGlobal = fGeoManager->GetCurrentMatrix();; 1427 }; 1428 fGeoManager->SetMatrixRefle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:44457,Clear,ClearVisibleVolumes,44457,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,"9 if (fCode.Length()) {; 280 out += ""code=\""{"" + fCode + ""}\"" "";; 281 } else if (fReadFuncPtr) {; 282 // Can we guess?; 283 // out += ""code=\"" + nameof(fReadFuncPtr) + ""\"" "";; 284 } else if (fReadRawFuncPtr) {; 285 // Can we guess?; 286 // out += ""code=\"" + nameof(fReadRawFuncPtr) + ""\"" "";; 287 }; 288 }; 289 if (xmlform) {; 290 out += end;; 291 }; 292}; 293 ; 294////////////////////////////////////////////////////////////////////////////////; 295/// Zero out this rule object.; 296 ; 297void TSchemaRule::Clear( const char * /* option */); 298{; 299 fVersion.Clear();; 300 fChecksum.Clear();; 301 fSourceClass.Clear();; 302 fTarget.Clear();; 303 fSource.Clear();; 304 fInclude.Clear();; 305 fCode.Clear();; 306 fAttributes.Clear();; 307 fReadRawFuncPtr = nullptr;; 308 fReadFuncPtr = nullptr;; 309 fRuleType = kNone;; 310 delete fVersionVect; fVersionVect = nullptr;; 311 delete fChecksumVect; fChecksumVect = nullptr;; 312 delete fTargetVect; fTargetVect = nullptr;; 313 delete fSourceVect; fSourceVect = nullptr;; 314 delete fIncludeVect; fIncludeVect = nullptr;; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Set the content fot this object from the rule; 319/// See TClass::AddRule for details on the syntax.; 320 ; 321Bool_t TSchemaRule::SetFromRule( const char *rule ); 322{; 323 //-----------------------------------------------------------------------; 324 // Parse the rule and check it's validity; 325 /////////////////////////////////////////////////////////////////////////////; 326 ; 327 ROOT::Internal::MembersMap_t rule_values;; 328 ; 329 std::string error_string;; 330 if( !ROOT::ParseRule(rule, rule_values, error_string) ) {; 331 Error(""SetFromRule"",""The rule (%s) is invalid: %s"",rule,error_string.c_str());; 332 return kFALSE;; 333 }; 334 ROOT::Internal::MembersMap_t::const_iterator it1;; 335 ; 336 it1 = rule_values.find( ""type"" );; 337 if( it1 != rule_values.end() ) {; 338 if (it1->second == ""read"" || it1->second =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:9605,Clear,Clear,9605,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,1,['Clear'],['Clear']
Usability,"9 of file CvSplit.cxx. ◆ ~CvSplitKFoldsExpr(). TMVA::CvSplitKFoldsExpr::~CvSplitKFoldsExpr ; (; ). inline . Definition at line 67 of file CvSplit.h. Member Function Documentation. ◆ Eval(). UInt_t TMVA::CvSplitKFoldsExpr::Eval ; (; UInt_t ; numFolds, . const Event * ; ev . ). Definition at line 164 of file CvSplit.cxx. ◆ GetSpectatorIndexForName(). UInt_t TMVA::CvSplitKFoldsExpr::GetSpectatorIndexForName ; (; DataSetInfo & ; dsi, . TString ; name . ). private . Definition at line 206 of file CvSplit.cxx. ◆ Validate(). Bool_t TMVA::CvSplitKFoldsExpr::Validate ; (; TString ; expr). static . Definition at line 198 of file CvSplit.cxx. Member Data Documentation. ◆ fDsi. DataSetInfo& TMVA::CvSplitKFoldsExpr::fDsi. private . Definition at line 77 of file CvSplit.h. ◆ fFormulaParIdxToDsiSpecIdx. std::vector<std::pair<Int_t, Int_t> > TMVA::CvSplitKFoldsExpr::fFormulaParIdxToDsiSpecIdx. private . Definition at line 80 of file CvSplit.h. ◆ fIdxFormulaParNumFolds. Int_t TMVA::CvSplitKFoldsExpr::fIdxFormulaParNumFolds. private . Maps parameter indicies in splitExpr to their spectator index in the datasetinfo. ; Definition at line 81 of file CvSplit.h. ◆ fParValues. std::vector<Double_t> TMVA::CvSplitKFoldsExpr::fParValues. private . TFormula for splitExpr. ; Definition at line 85 of file CvSplit.h. ◆ fSplitExpr. TString TMVA::CvSplitKFoldsExpr::fSplitExpr. private . Keeps track of the index of reserved par ""NumFolds"" in splitExpr. ; Definition at line 82 of file CvSplit.h. ◆ fSplitFormula. TFormula TMVA::CvSplitKFoldsExpr::fSplitFormula. private . Expression used to split data into folds. Should output values between 0 and numFolds. ; Definition at line 83 of file CvSplit.h. Libraries for TMVA::CvSplitKFoldsExpr:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/CvSplit.h; tmva/tmva/src/CvSplit.cxx. TMVACvSplitKFoldsExpr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1CvSplitKFoldsExpr.html:3328,Guid,Guide,3328,doc/master/classTMVA_1_1CvSplitKFoldsExpr.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1CvSplitKFoldsExpr.html,1,['Guid'],['Guide']
Usability,"9 }; 4710 if (fStreamerType == TVirtualStreamerInfo::kSTLp) {; 4711 // -- We are a pointer to an STL container.; 4712 // We must zero the pointer in the object.; 4713 *((char**) fAddress) = nullptr;; 4714 }; 4715 } else {; 4716 // We are *not* a TClonesArray master branch and we are *not* an STL container master branch.; 4717 TClass* cl = fBranchClass.GetClass();; 4718 if (!cl) {; 4719 Warning(""ReleaseObject"", ""Cannot delete allocated object because I cannot instantiate a TClass object for its class! branch: '%s' class: '%s'"", GetName(), fBranchClass.GetClassName());; 4720 fObject = nullptr;; 4721 } else {; 4722 TVirtualCollectionProxy* proxy = cl->GetCollectionProxy();; 4723 ; 4724 if (proxy) {; 4725 if (fID >= 0) {; 4726 TVirtualStreamerInfo* si = GetInfoImp();; 4727 TStreamerElement* se = si->GetElement(fID);; 4728 if (!se->TestBit(TStreamerElement::kDoNotDelete) && proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4729 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4730 proxy->Clear(""force"");; 4731 }; 4732 } else if (proxy->GetProperties()&TVirtualCollectionProxy::kNeedDelete) {; 4733 TVirtualCollectionProxy::TPushPop helper(proxy,fObject);; 4734 proxy->Clear(""force"");; 4735 }; 4736 ; 4737 }; 4738 cl->Destructor(fObject);; 4739 fObject = nullptr;; 4740 }; 4741 }; 4742 }; 4743}; 4744 ; 4745////////////////////////////////////////////////////////////////////////////////; 4746/// Reset a Branch.; 4747///; 4748/// Existing i/o buffers are deleted.; 4749/// Entries, max and min are reset.; 4750///; 4751 ; 4752void TBranchElement::Reset(Option_t* option); 4753{; 4754 Int_t nbranches = fBranches.GetEntriesFast();; 4755 for (Int_t i = 0; i < nbranches; ++i) {; 4756 TBranch* branch = (TBranch*) fBranches[i];; 4757 branch->Reset(option);; 4758 }; 4759 fBranchID = -1;; 4760 TBranch::Reset(option);; 4761}; 4762 ; 4763////////////////////////////////////////////////////////////////////////////////; 4764/// Reset a Branch after a Merge operation (drop ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:175580,Clear,Clear,175580,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,2,['Clear'],['Clear']
Usability,"9, TString options = """"); virtual~TFeldmanCousins(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); Double_tCalculateLowerLimit(Double_t Nobserved, Double_t Nbackground); Double_tCalculateUpperLimit(Double_t Nobserved, Double_t Nbackground); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFeldmanCousins.html:1933,Clear,Clear,1933,root/html528/TFeldmanCousins.html,https://root.cern,https://root.cern/root/html528/TFeldmanCousins.html,4,['Clear'],['Clear']
Usability,"9.959183 a1=-1.484, ; prevFCN = 1899.958511 a1=-1.485, ; prevFCN = 1899.960007 a1=-1.485, y=0.0003051, ; prevFCN = 1899.958806 y=-0.0003051, ; prevFCN = 1899.958806 a1=-1.484, y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 y=0, [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; y=0, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf315_projectpdf.py. tutorialsroofitrf315_projectpdf.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8py.html:5890,Guid,Guide,5890,doc/master/rf315__projectpdf_8py.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8py.html,1,['Guid'],['Guide']
Usability,"90 nav->GetCache()->BuildInfoBranch();; 1591 if (nodeid); 1592 nav->GetCache()->BuildIdArray();; 1593 }; 1594 fClosed = kTRUE;; 1595 if (fgVerboseLevel > 0) {; 1596 Info(""CloseGeometry"", ""%i nodes/ %i volume UID's in %s"", fNNodes, fUniqueVolumes->GetEntriesFast() - 1,; 1597 GetTitle());; 1598 Info(""CloseGeometry"", ""----------------modeler ready----------------"");; 1599 }; 1600}; 1601 ; 1602////////////////////////////////////////////////////////////////////////////////; 1603/// Clear the list of overlaps.; 1604 ; 1605void TGeoManager::ClearOverlaps(); 1606{; 1607 if (fOverlaps) {; 1608 fOverlaps->Delete();; 1609 delete fOverlaps;; 1610 }; 1611 fOverlaps = new TObjArray();; 1612}; 1613 ; 1614////////////////////////////////////////////////////////////////////////////////; 1615/// Remove a shape from the list of shapes.; 1616 ; 1617void TGeoManager::ClearShape(const TGeoShape *shape); 1618{; 1619 if (fShapes->FindObject(shape)); 1620 fShapes->Remove((TGeoShape *)shape);; 1621 delete shape;; 1622}; 1623 ; 1624////////////////////////////////////////////////////////////////////////////////; 1625/// Clean temporary volumes and shapes from garbage collection.; 1626 ; 1627void TGeoManager::CleanGarbage(); 1628{; 1629 if (!fGVolumes && !fGShapes); 1630 return;; 1631 Int_t i, nentries;; 1632 if (fGVolumes) {; 1633 nentries = fGVolumes->GetEntries();; 1634 TGeoVolume *vol = nullptr;; 1635 for (i = 0; i < nentries; i++) {; 1636 vol = (TGeoVolume *)fGVolumes->At(i);; 1637 if (vol); 1638 vol->SetFinder(nullptr);; 1639 }; 1640 fGVolumes->Delete();; 1641 delete fGVolumes;; 1642 fGVolumes = nullptr;; 1643 }; 1644 if (fGShapes) {; 1645 fGShapes->Delete();; 1646 delete fGShapes;; 1647 fGShapes = nullptr;; 1648 }; 1649}; 1650 ; 1651////////////////////////////////////////////////////////////////////////////////; 1652/// Change current path to point to the node having this id.; 1653/// Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons); 1654 ; 1655void TGeoM",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:59903,Clear,ClearShape,59903,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearShape']
Usability,90 of file MethodPyAdaBoost.h. ◆ fDataSetManager. DataSetManager* TMVA::MethodPyAdaBoost::fDataSetManager. private . Definition at line 75 of file MethodPyAdaBoost.h. ◆ fFilenameClassifier. TString TMVA::MethodPyAdaBoost::fFilenameClassifier. protected . Definition at line 85 of file MethodPyAdaBoost.h. ◆ fLearningRate. Double_t TMVA::MethodPyAdaBoost::fLearningRate. protected . Definition at line 100 of file MethodPyAdaBoost.h. ◆ fNestimators. Int_t TMVA::MethodPyAdaBoost::fNestimators. protected . Definition at line 96 of file MethodPyAdaBoost.h. ◆ fNoutputs. UInt_t TMVA::MethodPyAdaBoost::fNoutputs. protected . Definition at line 84 of file MethodPyAdaBoost.h. ◆ fNvars. UInt_t TMVA::MethodPyAdaBoost::fNvars. protected . Definition at line 83 of file MethodPyAdaBoost.h. ◆ fRandomState. TString TMVA::MethodPyAdaBoost::fRandomState. protected . Definition at line 113 of file MethodPyAdaBoost.h. ◆ mvaValues. std::vector<Double_t> TMVA::MethodPyAdaBoost::mvaValues. protected . Definition at line 80 of file MethodPyAdaBoost.h. ◆ pAlgorithm. PyObject* TMVA::MethodPyAdaBoost::pAlgorithm. protected . Definition at line 104 of file MethodPyAdaBoost.h. ◆ pBaseEstimator. PyObject* TMVA::MethodPyAdaBoost::pBaseEstimator. protected . Definition at line 89 of file MethodPyAdaBoost.h. ◆ pLearningRate. PyObject* TMVA::MethodPyAdaBoost::pLearningRate. protected . Definition at line 99 of file MethodPyAdaBoost.h. ◆ pNestimators. PyObject* TMVA::MethodPyAdaBoost::pNestimators. protected . Definition at line 95 of file MethodPyAdaBoost.h. ◆ pRandomState. PyObject* TMVA::MethodPyAdaBoost::pRandomState. protected . Definition at line 112 of file MethodPyAdaBoost.h. Libraries for TMVA::MethodPyAdaBoost:. [legend]; The documentation for this class was generated from the following files:; tmva/pymva/inc/TMVA/MethodPyAdaBoost.h; tmva/pymva/src/MethodPyAdaBoost.cxx. TMVAMethodPyAdaBoost. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:37 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodPyAdaBoost.html:37883,Guid,Guide,37883,doc/master/classTMVA_1_1MethodPyAdaBoost.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodPyAdaBoost.html,1,['Guid'],['Guide']
Usability,"90 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,rect2);; 11625 }; 11626 c->Clear();; 11627 c->cd();; 11628 TH2 *hp = (TH2*)h3->Project3D(""xz"");; 11629 yaxis->SetRange(first,last);; 11630 if (hp) {; 11631 hp->SetFillColor(38);; 11632 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXZ of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11633 else hp->SetTitle(TString::Format(""ProjectionXZ, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11634 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11635 hp->SetYTitle(fH->GetXax",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:422468,ux,uxmin,422468,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"92 TFree *f1 = (TFree*)fFree->First();; 993 if (f1) {; 994 WriteFree(); //*-*- Write free segments linked list; 995 WriteHeader(); //*-*- Now write file header ; this forces a Flush/fsync; 996 } else {; 997 Flush();; 998 }; 999 }; 1000 fMustFlush = kTRUE;; 1001 ; 1002 FlushWriteCache();; 1003 ; 1004 if (gMonitoringWriter); 1005 gMonitoringWriter->SendFileCloseEvent(this);; 1006 ; 1007 delete fClassIndex;; 1008 fClassIndex = nullptr;; 1009 ; 1010 // Delete free segments from free list (but don't delete list header); 1011 if (fFree) {; 1012 fFree->Delete();; 1013 }; 1014 ; 1015 if (IsOpen()) {; 1016 SysClose(fD);; 1017 fD = -1;; 1018 }; 1019 ; 1020 fWritable = kFALSE;; 1021 ; 1022 // delete the TProcessIDs; 1023 TList pidDeleted;; 1024 TIter next(fProcessIDs);; 1025 TProcessID *pid;; 1026 while ((pid = (TProcessID*)next())) {; 1027 if (!pid->DecrementCount()) {; 1028 if (pid != TProcessID::GetSessionProcessID()) pidDeleted.Add(pid);; 1029 } else if(opt.Contains(""r"")) {; 1030 pid->Clear();; 1031 }; 1032 }; 1033 pidDeleted.Delete();; 1034 ; 1035 if (!IsZombie() && fGlobalRegistration) {; 1036 R__LOCKGUARD(gROOTMutex);; 1037 gROOT->GetListOfFiles()->Remove(this);; 1038 gROOT->GetListOfBrowsers()->RecursiveRemove(this);; 1039 gROOT->GetListOfClosedObjects()->Add(this);; 1040 } else {; 1041 // If we are a zombie, we are already in the list of closed objects.; 1042 }; 1043}; 1044 ; 1045////////////////////////////////////////////////////////////////////////////////; 1046/// Creates key for object and converts data to buffer.; 1047 ; 1048TKey* TFile::CreateKey(TDirectory* mother, const TObject* obj, const char* name, Int_t bufsize); 1049{; 1050 return new TKey(obj, name, bufsize, mother);; 1051}; 1052 ; 1053////////////////////////////////////////////////////////////////////////////////; 1054/// Creates key for object and converts data to buffer.; 1055 ; 1056TKey* TFile::CreateKey(TDirectory* mother, const void* obj, const TClass* cl, const char* name, Int_t bufsize); 1057{;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:36730,Clear,Clear,36730,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Clear'],['Clear']
Usability,"94 he was in charge of the Application Software group in the computing division. In 1995, at a time when the majority of software gurus had decided to follow a dead-end line, he created the ROOT system while working for the NA49 heavy ion experiment at the SPS. Rene has led the ROOT project from 1995-2010.; ; . Fons Rademakers ; ; Fons received his Ph.D. in particle physics from the Univ. of Amsterdam in 1991 for his work on event displays and data analysis for the DELPHI experiment at CERN's LEP collider. Since then he has worked at CERN and been involved in designing and developing data analysis programs. In 1991 he joined the PAW project where he developed the column wise-ntuples (a column-oriented storage system) and PIAF, a parallel data analysis system. In 1995, while working as Linux evangelist for Hewlett-Packard at CERN, he started with Rene Brun the ROOT project and has been involved in all aspects of the system since then. In 2001 Fons joined the ALICE collaboration and has worked as software architect on the initial version of the AliRoot framework. In recent years his special attention has gone to high performance parallel computing using PROOF. Fons took over from Rene Brun as ROOT project leader in 2011 and has led the project till 2014, culminating in the release of ROOT 6.; ; . Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/project-founders.html:3919,Guid,Guides,3919,d/project-founders.html,https://root.cern,https://root.cern/d/project-founders.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"94 of file PiecewiseInterpolation.cxx. ◆ setInterpCode(). void PiecewiseInterpolation::setInterpCode ; (; RooAbsReal & ; param, . int ; code, . bool ; silent = false . ). Definition at line 567 of file PiecewiseInterpolation.cxx. ◆ setPositiveDefinite(). void PiecewiseInterpolation::setPositiveDefinite ; (; bool ; flag = true). inline . Definition at line 61 of file PiecewiseInterpolation.h. ◆ Streamer(). void PiecewiseInterpolation::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class PiecewiseInterpolation. ; Reimplemented from TObject.; Definition at line 629 of file PiecewiseInterpolation.cxx. ◆ StreamerNVirtual(). void PiecewiseInterpolation::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 105 of file PiecewiseInterpolation.h. ◆ translate(). void PiecewiseInterpolation::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 187 of file PiecewiseInterpolation.cxx. Member Data Documentation. ◆ _highSet. RooListProxy PiecewiseInterpolation::_highSet. protected . High-side variation. ; Definition at line 95 of file PiecewiseInterpolation.h. ◆ _interpCode. std::vector<int> PiecewiseInterpolation::_interpCode. protected . Definition at line 100 of file PiecewiseInterpolation.h. ◆ _lowSet. RooListProxy PiecewiseInterpolation::_lowSet. protected . Low-si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classPiecewiseInterpolation.html:69657,simpl,simple,69657,doc/master/classPiecewiseInterpolation.html,https://root.cern,https://root.cern/doc/master/classPiecewiseInterpolation.html,1,['simpl'],['simple']
Usability,"94 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,rect2);; 11625 }; 11626 c->Clear();; 11627 c->cd();; 11628 TH2 *hp = (TH2*)h3->Project3D(""xz"");; 11629 yaxis->SetRange(first,last);; 11630 if (hp) {; 11631 hp->SetFillColor(38);; 11632 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXZ of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11633 else hp->SetTitle(TString::Format(""ProjectionXZ, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11634 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11635 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11636 hp->SetZTitle(""Number of Entries"");; 11637 hp->Draw(fShowOption.Data());; 11638 }; 11639 }; 11640 break;; 11641 ; 11642 case 7:; 11643 // ""zx"";",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:422637,ux,uxmin,422637,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"94939 a=0.0002833, ; prevFCN = 1659.944972 a=-0.0002833, ; prevFCN = 1659.919376 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001237, ; prevFCN = 1659.902781 a=-0.001089, ; prevFCN = 1659.903175 a=-0.001384, ; prevFCN = 1659.90318 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 [#1] INFO:Minimization -- Command timer: Real time 0:00:02, CP time 2.710; [#1] INFO:Minimization -- Session timer: Real time 0:00:02, CP time 2.710; a=-0.001237, ; prevFCN = 1659.902781 a=-0.001207, ; prevFCN = 1659.902797 a=-0.001266, ; prevFCN = 1659.902798 a=-0.001231, ; prevFCN = 1659.902782 a=-0.001243, ; prevFCN = 1659.902782 [#1] INFO:Minimization -- Command timer: Real time 0:00:00, CP time 0.960; [#1] INFO:Minimization -- Session timer: Real time 0:00:03, CP time 3.670, 2 slices; a=-0.001237, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#0] WARNING:NumericIntegration -- RooAdaptiveIntegratorND::dtor(model) WARNING: Number of suppressed warningings about integral evaluations where target precision was not reached is 17; [#1] INFO:Plotting -- RooAbsReal::plotOn(model) plot on x integrates over variables (y,z); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(x,y,z); [#1] INFO:NumericIntegration -- RooRealIntegral::init(model_Int[y,z]_Norm[x,y,z]) using numeric integrator RooAdaptiveIntegratorND to calculate Int(y,z); [#0] WARNING:NumericIntegration -- RooAdaptiveIntegratorND::dtor(model) WARNING: Number of suppressed warningings about integral evaluations where target precision was not reached is 1; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf903_numintcache.py. tutorialsroofitrf903_numintcache.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf903__numintcache_8py.html:6534,Guid,Guide,6534,doc/master/rf903__numintcache_8py.html,https://root.cern,https://root.cern/doc/master/rf903__numintcache_8py.html,1,['Guid'],['Guide']
Usability,"95 fFuncs.clear();; 1796 fReadyToExecute = false;; 1797 ExtractFunctors(formula);; 1798 ; 1799 // update the expression with the new formula; 1800 fFormula = formula;; 1801 // save formula to parse variable and parameters for Cling; 1802 fClingInput = formula;; 1803 // replace all { and }; 1804 fFormula.ReplaceAll(""{"","""");; 1805 fFormula.ReplaceAll(""}"","""");; 1806 ; 1807 // std::cout << ""functors are extracted formula is "" << std::endl;; 1808 // std::cout << fFormula << std::endl << std::endl;; 1809 ; 1810 fFuncs.sort();; 1811 fFuncs.unique();; 1812 ; 1813 // use inputFormula for Cling; 1814 ProcessFormula(fClingInput);; 1815 ; 1816 // for pre-defined functions (need after processing); 1817 if (fNumber != 0) SetPredefinedParamNames();; 1818 ; 1819 return fReadyToExecute && fClingInitialized;; 1820}; 1821 ; 1822////////////////////////////////////////////////////////////////////////////////; 1823/// Extracts functors from formula, and put them in fFuncs.; 1824/// Simple grammar:; 1825/// - `<function>` := name(arg1,arg2...); 1826/// - `<variable>` := name; 1827/// - `<parameter>` := [number]; 1828/// - `<name>` := String containing lower and upper letters, numbers, underscores; 1829/// - `<number>` := Integer number; 1830/// Operators are omitted.; 1831 ; 1832void TFormula::ExtractFunctors(TString &formula); 1833{; 1834 // std::cout << ""Commencing ExtractFunctors on "" << formula << std::endl;; 1835 ; 1836 TString name = """";; 1837 TString body = """";; 1838 // printf(""formula is : %s \n"",formula.Data() );; 1839 for (Int_t i = 0; i < formula.Length(); ++i) {; 1840 ; 1841 // std::cout << ""loop on character : "" << i << "" "" << formula[i] << std::endl;; 1842 // case of parameters; 1843 if (formula[i] == '[') {; 1844 Int_t tmp = i;; 1845 i++;; 1846 TString param = """";; 1847 while (i < formula.Length() && formula[i] != ']') {; 1848 param.Append(formula[i++]);; 1849 }; 1850 i++;; 1851 // rename parameter name XX to pXX; 1852 // std::cout << ""examine parameters "" << param << std:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:68990,Simpl,Simple,68990,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"95 of file TGeoMatrix.h. ◆ GetScale(). const Double_t * TGeoGenTrans::GetScale ; (; ); const. inlineoverridevirtual . Reimplemented from TGeoCombiTrans.; Definition at line 393 of file TGeoMatrix.h. ◆ Inverse(). TGeoHMatrix TGeoGenTrans::Inverse ; (; ); const. overridevirtual . Return a temporary inverse of this. ; Reimplemented from TGeoCombiTrans.; Definition at line 2312 of file TGeoMatrix.cxx. ◆ IsA(). TClass * TGeoGenTrans::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoCombiTrans.; Definition at line 395 of file TGeoMatrix.h. ◆ MakeClone(). TGeoMatrix * TGeoGenTrans::MakeClone ; (; ); const. inlineoverridevirtual . Make a clone of this matrix. ; Reimplemented from TGeoCombiTrans.; Definition at line 390 of file TGeoMatrix.h. ◆ Normalize(). Bool_t TGeoGenTrans::Normalize ; (; ). A scale transformation should be normalized by sx*sy*sz factor. ; Definition at line 2322 of file TGeoMatrix.cxx. ◆ SetScale() [1/2]. void TGeoGenTrans::SetScale ; (; Double_t * ; scale). inline . Definition at line 389 of file TGeoMatrix.h. ◆ SetScale() [2/2]. void TGeoGenTrans::SetScale ; (; Double_t ; sx, . Double_t ; sy, . Double_t ; sz . ). set the scale ; Definition at line 2298 of file TGeoMatrix.cxx. ◆ Streamer(). void TGeoGenTrans::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoCombiTrans. ◆ StreamerNVirtual(). void TGeoGenTrans::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 395 of file TGeoMatrix.h. Member Data Documentation. ◆ fScale. Double_t TGeoGenTrans::fScale[3]. protected . Definition at line 377 of file TGeoMatrix.h. Libraries for TGeoGenTrans:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoMatrix.h; geom/geom/src/TGeoMatrix.cxx. TGeoGenTrans. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoGenTrans.html:22321,Guid,Guide,22321,doc/master/classTGeoGenTrans.html,https://root.cern,https://root.cern/doc/master/classTGeoGenTrans.html,1,['Guid'],['Guide']
Usability,"96 // Booking Seed; 2297 BookMethod(seedloader, theMethod, methodTitle, theOption);; 2298 ; 2299 // Train/Test/Evaluation; 2300 TrainAllMethods();; 2301 TestAllMethods();; 2302 EvaluateAllMethods();; 2303 ; 2304 // getting ROC; 2305 ROC[x] = GetROCIntegral(xbitset.to_string(), methodTitle);; 2306 ; 2307 // cleaning information to process sub-seeds; 2308 TMVA::MethodBase *smethod = dynamic_cast<TMVA::MethodBase *>(fMethodsMap[xbitset.to_string().c_str()][0][0]);; 2309 TMVA::ResultsClassification *sresults = (TMVA::ResultsClassification *)smethod->Data()->GetResults(; 2310 smethod->GetMethodName(), Types::kTesting, Types::kClassification);; 2311 delete sresults;; 2312 delete seedloader;; 2313 this->DeleteAllMethods();; 2314 ; 2315 fMethodsMap.clear();; 2316 // removing global result because it is requiring a lot of RAM for all seeds; 2317 }; 2318 ; 2319 for (x = 0; x < range; x++) {; 2320 SROC = ROC[x];; 2321 for (uint32_t i = 0; i < VIBITS; ++i) {; 2322 if (x & (uint64_t(1) << i)) {; 2323 y = x & ~(1 << i);; 2324 std::bitset<VIBITS> ybitset(y);; 2325 // need at least one variable; 2326 // NOTE: if sub-seed is zero then is the special case; 2327 // that count in xbitset is 1; 2328 uint32_t ny = static_cast<uint32_t>( log(x - y) / 0.693147 ) ;; 2329 if (y == 0) {; 2330 importances[ny] = SROC - 0.5;; 2331 continue;; 2332 }; 2333 ; 2334 // getting ROC; 2335 SSROC = ROC[y];; 2336 importances[ny] += SROC - SSROC;; 2337 // cleaning information; 2338 }; 2339 }; 2340 }; 2341 std::cout << ""--- Variable Importance Results (All)"" << std::endl;; 2342 return GetImportance(nbits, importances, varNames);; 2343}; 2344 ; 2345static uint64_t sum(uint64_t i); 2346{; 2347 // add a limit for overflows; 2348 if (i > 62) return 0;; 2349 return static_cast<uint64_t>( std::pow(2, i + 1)) - 1;; 2350 // uint64_t _sum = 0;; 2351 // for (uint64_t n = 0; n < i; n++); 2352 // _sum += pow(2, n);; 2353 // return _sum;; 2354}; 2355 ; 2356/////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:97340,clear,clear,97340,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['clear'],['clear']
Usability,"96 ; 297 Init();; 298 SetBit(kMenuBar,true);; 299 if (form < 0) {; 300 form = -form;; 301 SetBit(kMenuBar,false);; 302 }; 303 ; 304 fCanvas = this;; 305 ; 306 fCanvasID = -1;; 307 TCanvas *old = (TCanvas*)gROOT->GetListOfCanvases()->FindObject(name);; 308 if (old && old->IsOnHeap()) {; 309 Warning(""Constructor"",""Deleting canvas with same name: %s"",name);; 310 delete old;; 311 }; 312 if (gROOT->IsBatch()) { //We are in Batch mode; 313 fWindowTopX = fWindowTopY = 0;; 314 if (form == 1) {; 315 fWindowWidth = gStyle->GetCanvasDefW();; 316 fWindowHeight = gStyle->GetCanvasDefH();; 317 } else {; 318 fWindowWidth = 500;; 319 fWindowHeight = 500;; 320 }; 321 fCw = fWindowWidth;; 322 fCh = fWindowHeight;; 323 fCanvasImp = gBatchGuiFactory->CreateCanvasImp(this, name, fCw, fCh);; 324 if (!fCanvasImp) return;; 325 fBatch = kTRUE;; 326 } else { //normal mode with a screen window; 327 Float_t cx = gStyle->GetScreenFactor();; 328 if (form < 1 || form > 20) form = 1;; 329 auto factory = gROOT->IsWebDisplay() ? gBatchGuiFactory : gGuiFactory;; 330 Int_t ux, uy, cw, ch;; 331 if (form == 1) {; 332 cw = gStyle->GetCanvasDefW();; 333 ch = gStyle->GetCanvasDefH();; 334 ux = gStyle->GetCanvasDefX();; 335 uy = gStyle->GetCanvasDefY();; 336 } else {; 337 cw = ch = 500;; 338 ux = uy = form * 10;; 339 }; 340 ; 341 fCanvasImp = factory->CreateCanvasImp(this, name, Int_t(cx*ux), Int_t(cx*uy), UInt_t(cx*cw), UInt_t(cx*ch));; 342 if (!fCanvasImp) return;; 343 ; 344 if (!gROOT->IsBatch() && fCanvasID == -1); 345 fCanvasID = fCanvasImp->InitWindow();; 346 ; 347 fCanvasImp->ShowMenuBar(TestBit(kMenuBar));; 348 fBatch = kFALSE;; 349 }; 350 ; 351 CreatePainter();; 352 ; 353 fName = GetNewCanvasName(name); // avoid Modified() signal from SetName; 354 SetTitle(title); // requires fCanvasImp set; 355 Build();; 356 ; 357 // Popup canvas; 358 fCanvasImp->Show();; 359}; 360 ; 361////////////////////////////////////////////////////////////////////////////////; 362/// Create a new canvas at a random position.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:10216,ux,ux,10216,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,4,['ux'],['ux']
Usability,"971822218823394529061701521,; 0.795041428837551198350638833272788,; 0.746331906460150792614305070355642,; 0.693237656334751384805490711845932,; 0.636053680726515025452836696226286,; 0.575140446819710315342946036586425,; 0.510867001950827098004364050955251,; 0.443593175238725103199992213492640,; 0.373706088715419560672548177024927,; 0.301627868114913004320555356858592,; 0.227785851141645078080496195368575,; 0.152605465240922675505220241022678,; 0.076526521133497333754640409398838,; 0.000000000000000000000000000000000; }. Definition at line 1284 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ xgkE. const double xgkE[26]. static . Initial value:= ; {; 0.999262104992609834193457486540341,; 0.995556969790498097908784946893902,; 0.988035794534077247637331014577406,; 0.976663921459517511498315386479594,; 0.961614986425842512418130033660167,; 0.942974571228974339414011169658471,; 0.920747115281701561746346084546331,; 0.894991997878275368851042006782805,; 0.865847065293275595448996969588340,; 0.833442628760834001421021108693570,; 0.797873797998500059410410904994307,; 0.759259263037357630577282865204361,; 0.717766406813084388186654079773298,; 0.673566368473468364485120633247622,; 0.626810099010317412788122681624518,; 0.577662930241222967723689841612654,; 0.526325284334719182599623778158010,; 0.473002731445714960522182115009192,; 0.417885382193037748851814394594572,; 0.361172305809387837735821730127641,; 0.303089538931107830167478909980339,; 0.243866883720988432045190362797452,; 0.183718939421048892015969888759528,; 0.122864692610710396387359818808037,; 0.061544483005685078886546392366797,; 0.000000000000000000000000000000000; }. Definition at line 1366 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. ◆ xgkF. const double xgkF[31]. static . Definition at line 1463 of file RooAdaptiveGaussKronrodIntegrator1D.cxx. roofitroofitmoresrcRooAdaptiveGaussKronrodIntegrator1D.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html:30530,Guid,Guide,30530,doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,https://root.cern,https://root.cern/doc/master/RooAdaptiveGaussKronrodIntegrator1D_8cxx.html,1,['Guid'],['Guide']
Usability,"97372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352. if option = ""a"" the list of blocks in the cache is printed; see also class TTreePerfStats. Int_t ReadBufferNormal(char* buf, Long64_t pos, Int_t len). Int_t ReadBufferPrefetch(char* buf, Long64_t pos, Int_t len). Int_t ReadBuffer(char* buf, Long64_t pos, Int_t len); Read buffer at position pos.; If pos is in the list of prefetched blocks read from fBuffer.; Otherwise try to fill the cache from the list of selected branches,; and recheck if pos is now in the list.; Returns; -1 in case of read failure,; 0 in case not in cache,; 1 in case read from cache.; This function overloads TFileCacheRead::ReadBuffer. void ResetCache(); This will simply clear the cache. void SetEntryRange(Long64_t emin, Long64_t emax); Set the minimum and maximum entry number to be processed; this information helps to optimize the number of baskets to read; when prefetching the branch buffers. void SetLearnEntries(Int_t n = 10); Static function to set the number of entries to be used in learning mode; The default value for n is 10. n must be >= 1. void StartLearningPhase(); The name should be enough to explain the method.; The only additional comments is that the cache is cleaned before; the new learning phase. void StopLearningPhase(); This is the counterpart of StartLearningPhase() and can be used to stop; the learning phase. It's useful when the user knows exactly what branches; he is going to use.; For the moment it's just a call to FillBuffer() since that method; will create the buffer lists from the specified branches. void UpdateBranches(TTree* tree, Bool_t owner = kFALSE); Update pointer to current Tree and recompute pointers to the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTreeCache.html:21961,simpl,simply,21961,root/html530/TTreeCache.html,https://root.cern,https://root.cern/root/html530/TTreeCache.html,2,"['clear', 'simpl']","['clear', 'simply']"
Usability,"9770.666818 alpha=0.8, ; prevFCN = 9770.66743 alpha=0.8, ; prevFCN = 9770.91141 alpha=0.8, ; prevFCN = 9770.670187 alpha=0.8, ; prevFCN = 9770.668617 alpha=0.8, ; prevFCN = 9770.667852 alpha=0.8, ; prevFCN = 9770.667479 alpha=0.8, ; prevFCN = 9770.667297 alpha=0.8, ; prevFCN = 9770.667208 alpha=0.8, ; prevFCN = 9770.667165 alpha=0.8, ; prevFCN = 9770.667144 alpha=0.8, ; prevFCN = 9770.667134 alpha=0.8, ; prevFCN = 9770.667129 alpha=0.8, ; prevFCN = 9770.667126 alpha=0.8, ; prevFCN = 9770.667124 alpha=0.8, ; prevFCN = 9770.91141 alpha=0.8, ; prevFCN = 9770.670187 alpha=0.8, ; prevFCN = 9770.666827 alpha=0.8, ; prevFCN = 9770.667421 alpha=0.8, ; prevFCN = 9770.667064 alpha=0.8, ; prevFCN = 9770.667183 alpha=0.8, ; prevFCN = 9770.667124 alpha=0.8, ; prevFCN = 9770.667064 alpha=0.8, ; prevFCN = 9770.667183 alpha=0.8, ; prevFCN = 9770.66653 alpha=0.8, ; prevFCN = 9770.667718 alpha=0.8, ; prevFCN = 9770.667005 alpha=0.8, ; prevFCN = 9770.667243 alpha=0.8, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x2744ab0 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x]_NORM_x for nset (x) with code 0 from preexisting content.; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x95fa7c0 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x]_NORM_x for nset (x) with code 0 from preexisting content.; [#1] INFO:Fitting -- RooAbsPdf::fitTo(lmorph_over_lmorph_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Caching -- RooAbsCachedPdf::getCache(lmorph) creating new cache 0x9805940 with pdf g1_MORPH_g2_CACHE_Obs[alpha,x] for nset () with code 1 from preexisting content.; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf705_linearmorph.py. tutorialsroofitrf705_linearmorph.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf705__linearmorph_8py.html:8870,Guid,Guide,8870,doc/master/rf705__linearmorph_8py.html,https://root.cern,https://root.cern/doc/master/rf705__linearmorph_8py.html,1,['Guid'],['Guide']
Usability,9780503). Definition at line 749 of file RanluxppEngineImpl.cxx. ◆ ~RanluxppCompatEngineStdRanlux24(). ROOT::Math::RanluxppCompatEngineStdRanlux24::~RanluxppCompatEngineStdRanlux24 ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). uint64_t ROOT::Math::RanluxppCompatEngineStdRanlux24::IntRndm ; (; ). Generate a random integer value with 24 bits. ; Definition at line 766 of file RanluxppEngineImpl.cxx. ◆ Name(). static const char * ROOT::Math::RanluxppCompatEngineStdRanlux24::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 268 of file RanluxppEngine.h. ◆ operator()(). double ROOT::Math::RanluxppCompatEngineStdRanlux24::operator() ; (; ). Generate a floating point random number (non-virtual method) ; Definition at line 761 of file RanluxppEngineImpl.cxx. ◆ Rndm(). double ROOT::Math::RanluxppCompatEngineStdRanlux24::Rndm ; (; ). overridevirtual . Generate a floating point random number with 24 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 756 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). void ROOT::Math::RanluxppCompatEngineStdRanlux24::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 771 of file RanluxppEngineImpl.cxx. ◆ Skip(). void ROOT::Math::RanluxppCompatEngineStdRanlux24::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 776 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineStdRanlux24::fImpl. private . Definition at line 249 of file RanluxppEngine.h. Libraries for ROOT::Math::RanluxppCompatEngineStdRanlux24:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineStdRanlux24. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html:3848,Guid,Guide,3848,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux24.html,1,['Guid'],['Guide']
Usability,9780503). Definition at line 782 of file RanluxppEngineImpl.cxx. ◆ ~RanluxppCompatEngineStdRanlux48(). ROOT::Math::RanluxppCompatEngineStdRanlux48::~RanluxppCompatEngineStdRanlux48 ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). uint64_t ROOT::Math::RanluxppCompatEngineStdRanlux48::IntRndm ; (; ). Generate a random integer value with 48 bits. ; Definition at line 799 of file RanluxppEngineImpl.cxx. ◆ Name(). static const char * ROOT::Math::RanluxppCompatEngineStdRanlux48::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 296 of file RanluxppEngine.h. ◆ operator()(). double ROOT::Math::RanluxppCompatEngineStdRanlux48::operator() ; (; ). Generate a floating point random number (non-virtual method) ; Definition at line 794 of file RanluxppEngineImpl.cxx. ◆ Rndm(). double ROOT::Math::RanluxppCompatEngineStdRanlux48::Rndm ; (; ). overridevirtual . Generate a floating point random number with 48 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 789 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). void ROOT::Math::RanluxppCompatEngineStdRanlux48::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 804 of file RanluxppEngineImpl.cxx. ◆ Skip(). void ROOT::Math::RanluxppCompatEngineStdRanlux48::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 809 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineStdRanlux48::fImpl. private . Definition at line 277 of file RanluxppEngine.h. Libraries for ROOT::Math::RanluxppCompatEngineStdRanlux48:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineStdRanlux48. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html:3855,Guid,Guide,3855,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineStdRanlux48.html,1,['Guid'],['Guide']
Usability,"98 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,rect2);; 11625 }; 11626 c->Clear();; 11627 c->cd();; 11628 TH2 *hp = (TH2*)h3->Project3D(""xz"");; 11629 yaxis->SetRange(first,last);; 11630 if (hp) {; 11631 hp->SetFillColor(38);; 11632 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXZ of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny)));; 11633 else hp->SetTitle(TString::Format(""ProjectionXZ, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11634 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11635 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11636 hp->SetZTitle(""Number of Entries"");; 11637 hp->Draw(fShowOption.Data());; 11638 }; 11639 }; 11640 break;; 11641 ; 11642 case 7:; 11643 // ""zx""; 11644 {; 11645 Int_t first = yaxis->GetFirst();; 11646 Int_t last = yaxis->GetLast();; 11647 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11648 I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:422806,ux,uxmin,422806,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"99.958577 a1=-1.485, ; prevFCN = 1899.959183 a1=-1.484, ; prevFCN = 1899.958511 a1=-1.485, ; prevFCN = 1899.960007 a1=-1.485, y=0.0003051, ; prevFCN = 1899.958806 y=-0.0003051, ; prevFCN = 1899.958806 a1=-1.484, y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0, ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 y=0, [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for a1: using 0.4; [#0] WARNING:Minimization -- RooAbsMinimizerFcn::synchronize: WARNING: no initial error estimate available for y: using 0.4; ; prevFCN = 1899.958497 a1=-1.483, ; prevFCN = 1899.958952 a1=-1.485, ; prevFCN = 1899.95895 a1=-1.484, y=0.003051, ; prevFCN = 1899.958497 y=-0.003051, ; prevFCN = 1899.958497 y=0.03051, ; prevFCN = 1899.958497 y=-0.03051, ; prevFCN = 1899.958497 y=0.3039, ; prevFCN = 1899.958497 y=-0.3039, ; prevFCN = 1899.958497 y=0.9764, ; prevFCN = 1899.958497 y=-0.9764, ; prevFCN = 1899.958497 [#0] ERROR:Minimization -- RooMinimizer::calculateHessErrors() Error when calculating Hessian; y=0, [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:NumericIntegration -- RooRealIntegral::init([gaussy_NORM[y]_X_gaussx_NORM[x]]_Int[y]) using numeric integrator RooIntegrator1D to calculate Int(y); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf315_projectpdf.C. tutorialsroofitrf315_projectpdf.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf315__projectpdf_8C.html:10281,Guid,Guide,10281,doc/master/rf315__projectpdf_8C.html,https://root.cern,https://root.cern/doc/master/rf315__projectpdf_8C.html,1,['Guid'],['Guide']
Usability,"99// -----------------------------------------------------; 7400// UNKNOWN COMMAND; 7401L1900:; 7402 Printf("" THE COMMAND:%10s IS UNKNOWN."",(const char*)fCword);; 7403 goto L2100;; 7404// -----------------------------------------------------; 7405// HELP SHOW, HELP SET, SHOW SET, or SHOW SHOW; 7406L2000:; 7407 ckind = ""SET "";; 7408 ctemp2 = fCword(3,7);; 7409 if (strcmp(ctemp2.Data(), ""SHO"")) ckind = ""SHOW"";; 7410L2100:; 7411 Printf("" THE FORMAT OF THE %4s COMMAND IS:"",(const char*)ckind);; 7412 Printf("" %s xxx [numerical arguments if any]"",(const char*)ckind);; 7413 Printf("" WHERE xxx MAY BE ONE OF THE FOLLOWING:"");; 7414 for (kk = 1; kk <= nname; ++kk) {; 7415 Printf("" %s"",cname[kk-1]);; 7416 }; 7417 return;; 7418// -----------------------------------------------------; 7419// ILLEGAL COMMAND; 7420L3000:; 7421 Printf("" ABOVE COMMAND IS ILLEGAL. IGNORED"");; 7422 ; 7423}; 7424 ; 7425////////////////////////////////////////////////////////////////////////////////; 7426/// Minimization using the simplex method of Nelder and Mead; 7427///; 7428/// Performs a minimization using the simplex method of Nelder; 7429/// and Mead (ref. -- Comp. J. 7,308 (1965)).; 7430 ; 7431void TMinuit::mnsimp(); 7432{; 7433 /* Initialized data */; 7434 ; 7435 static constexpr Double_t alpha = 1;; 7436 static constexpr Double_t beta = .5;; 7437 static constexpr Double_t gamma = 2;; 7438 static constexpr Double_t rhomin = 4;; 7439 static constexpr Double_t rhomax = 8;; 7440 ; 7441 /* Local variables */; 7442 Double_t dmin_, dxdi, yrho, f, ynpp1, aming, ypbar;; 7443 Double_t bestx, ystar, y1, y2, ystst, pb, wg;; 7444 Double_t absmin, rho, sig2, rho1, rho2;; 7445 Int_t npfn, i, j, k, jhold, ncycl, nparx;; 7446 Int_t nparp1, kg, jh, nf, jl, ns;; 7447 ; 7448 if (fNpar <= 0) return;; 7449 if (fAmin == fUndefi) mnamin();; 7450 fCfrom = ""SIMPLEX "";; 7451 fNfcnfr = fNfcn;; 7452 fCstatu = ""UNCHANGED "";; 7453 npfn = fNfcn;; 7454 nparp1 = fNpar + 1;; 7455 nparx = fNpar;; 7456 rho1 = alpha + 1;; 7457 rho2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:237636,simpl,simplex,237636,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,2,['simpl'],['simplex']
Usability,"999);  ; Bool_t PopPath ();  ; Bool_t PopPath (Int_t index);  ; Bool_t PopPoint ();  ; Bool_t PopPoint (Int_t index);  ; void PrintOverlaps () const;  Prints the current list of overlaps. ;  ; Int_t PushPath (Int_t startlevel=0);  ; Int_t PushPoint (Int_t startlevel=0);  ; void RandomPoints (const TGeoVolume *vol, Int_t npoints=10000, Option_t *option="""");  Draw random points in the bounding box of a volume. ;  ; void RandomRays (Int_t nrays=1000, Double_t startx=0, Double_t starty=0, Double_t startz=0, const char *target_vol=nullptr, Bool_t check_norm=kFALSE);  Randomly shoot nrays and plot intersections with surfaces for current top node. ;  ; void RefreshPhysicalNodes (Bool_t lock=kTRUE);  Refresh physical nodes to reflect the actual geometry paths after alignment was applied. ;  ; void RegisterMatrix (const TGeoMatrix *matrix);  Register a matrix to the list of matrices. ;  ; void RemoveMaterial (Int_t index);  Remove material at given index. ;  ; void RemoveNavigator (const TGeoNavigator *nav);  Clear a single navigator. ;  ; Int_t ReplaceVolume (TGeoVolume *vorig, TGeoVolume *vnew);  Replaces all occurrences of VORIG with VNEW in the geometry tree. ;  ; void ResetState ();  Reset current state flags. ;  ; void ResetUserData ();  Sets all pointers TGeoVolume::fField to NULL. ;  ; void RestoreMasterVolume ();  Restore the master volume of the geometry. ;  ; Double_t Safety (Bool_t inside=kFALSE);  Compute safe distance from the current point. ;  ; TGeoNode * SamplePoints (Int_t npoints, Double_t &dist, Double_t epsil=1E-5, const char *g3path="""");  shoot npoints randomly in a box of 1E-5 around current point. ;  ; void SaveAttributes (const char *filename=""tgeoatt.C"");  Save current attributes in a macro. ;  ; TGeoNode * SearchNode (Bool_t downwards=kFALSE, const TGeoNode *skipnode=nullptr);  Returns the deepest node containing fPoint, which must be set a priori. ;  ; void SelectTrackingMedia ();  Define different tracking media. ;  ; TGeoPNEntry * SetAlignableEnt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoManager.html:44926,Clear,Clear,44926,doc/master/classTGeoManager.html,https://root.cern,https://root.cern/doc/master/classTGeoManager.html,1,['Clear'],['Clear']
Usability,"9999999999999998E-8, Double_t nframes = 200, Option_t* option = ""/*"")MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """")MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrack.html:1189,Clear,Clear,1189,root/html602/TGeoTrack.html,https://root.cern,https://root.cern/root/html602/TGeoTrack.html,2,['Clear'],['Clear']
Usability,"9h_sum.Draw(); 80print(""Time to fit using ROOT TF1Normsum: ""); 81w.Print(); 82 ; 83# test if parameters are fine; 84for i, pref in enumerate([nsig, nbkg, signal_mean]):; 85 if not ROOT.TMath.AreEqualAbs(pref, f_sum.GetParameter(i), f_sum.GetParError(i) * 10.0):; 86 ROOT.Error(; 87 ""testFitNormSum"",; 88 ""Difference found in fitted {0} - difference is {1:.2f} sigma"".format(; 89 f_sum.GetParName(i), (f_sum.GetParameter(i) - pref) / f_sum.GetParError(i); 90 ),; 91 ); 92 ; 93ROOT.gStyle.SetOptStat(0); 94# add parameters; 95t1 = ROOT.TLatex(-2.5, 300000, ""NSignal = {0:g} #pm {1:g}"".format(f_sum.GetParameter(0), f_sum.GetParError(0))); 96t2 = ROOT.TLatex(-2.5, 270000, ""Nbackgr = {0:g} #pm {1:g}"".format(f_sum.GetParameter(1), f_sum.GetParError(1))); 97t1.Draw(); 98t2.Draw(); 99 ; 100c1.SaveAs(""fitNormSum.png""); formatOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t formatDefinition TGWin32VirtualXProxy.cxx:249; ROOT::Math::MinimizerOptions::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)Set the default Minimizer type and corresponding algorithms.Definition MinimizerOptions.cxx:43. tutorialsfitfitNormSum.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:07 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/fitNormSum_8py_source.html:4942,Guid,Guide,4942,doc/master/fitNormSum_8py_source.html,https://root.cern,https://root.cern/doc/master/fitNormSum_8py_source.html,1,['Guid'],['Guide']
Usability,": -2220.000000; server values: x=x=0, coefList=(a1 = 10 +/- 0,a2 = -1 +/- 0,a3 = 0.01); ; ; ; -------------- Starting second fit ---------------; ; ; [#1] INFO:Fitting -- RooAbsPdf::fitTo(pol3_over_pol3_Int[x]) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_pol3_over_pol3_Int[x]_pol3Data) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; Minuit2Minimizer: Minimize with max-calls 1000 convergence for edm < 1 strategy 1; Minuit2Minimizer : Valid minimum - status = 0; FVAL = -1002.2262595660759; Edm = 2.95538313214564806e-09; Nfcn = 251; a1 = -0.498159 +/- 0.0227242 (limited); a2 = 0.198316 +/- 0.00564906 (limited); [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; ; RooFitResult: minimized FCN value: 0, estimated distance to minimum: 0; covariance matrix quality: Not calculated at all; Status : MINIMIZE=-1 HESSE=302 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 1.0000e+01 +/- 0.00e+00; a2 -1.0000e+00 +/- 0.00e+00; ; Without recovery, the fitter encountered 23 invalid function values. The parameters are unchanged.; ; RooFitResult: minimized FCN value: 29650.9, estimated distance to minimum: 2.95925e-09; covariance matrix quality: Full, accurate covariance matrix; Status : MINIMIZE=0 HESSE=0 ; ; Floating Parameter FinalValue +/- Error ; -------------------- --------------------------; a1 -4.9816e-01 +/- 2.27e-02; a2 1.9832e-01 +/- 5.65e-03; ; With recovery, the fitter encountered 76 invalid function values, but the parameters are fitted.; Date10/2020 ; AuthorStephan Hageboeck ; Definition in file rf612_recoverFromInvalidParameters.C. tutorialsroofitrf612_recoverFromInvalidParameters.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html:11816,Guid,Guide,11816,doc/master/rf612__recoverFromInvalidParameters_8C.html,https://root.cern,https://root.cern/doc/master/rf612__recoverFromInvalidParameters_8C.html,1,['Guid'],['Guide']
Usability,": array of gradients; Output parameters:; fval: The calculated function value.; grad: The vector of first derivatives. The meaning of the parameters par is of course defined by the user,; who uses the values of those parameters to calculate his function value.; The starting values must be specified by the user. Inside FCN user has to define Z-matrix by means TFumili::GetZ; and TFumili::Derivatives,; set theoretical function by means of TFumili::SetUserFunc,; but first - pass number of parameters by TFumili::SetParNumber. Later values are determined by Fumili as it searches for the minimum; or performs whatever analysis is requested by the user. The default function calls the function specified in SetFCN. Double_t EvalTFN(Double_t* , Double_t* ); Evaluate theoretical function; df: array of partial derivatives; X: vector of theoretical function argument. Int_t ExecuteCommand(const char* command, Double_t* args, Int_t nargs). Execute MINUIT commands. MINImize, SIMplex, MIGrad and FUMili all; will call TFumili::Minimize method. For full command list see; MINUIT. Reference Manual. CERN Program Library Long Writeup D506. Improvement and errors calculation are not yet implemented as well; as Monte-Carlo seeking and minimization.; Contour commands are also unsupported. command : command string; args : array of arguments; nargs : number of arguments. Int_t ExecuteSetCommand(Int_t ). Called from TFumili::ExecuteCommand in case; of ""SET xxx"" and ""SHOW xxx"". void FixParameter(Int_t ipar); Fixes parameter number ipar. Double_t * GetCovarianceMatrix() const; return a pointer to the covariance matrix. Double_t GetCovarianceMatrixElement(Int_t i, Int_t j) const; return element i,j from the covariance matrix. Int_t GetNumberTotalParameters() const; return the total number of parameters (free + fixed). Int_t GetNumberFreeParameters() const; return the number of free parameters. Double_t GetParError(Int_t ipar) const; return error of parameter ipar. Double_t GetParameter(Int_t ipar) c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TFumili.html:18050,SIMpl,SIMplex,18050,root/html528/TFumili.html,https://root.cern,https://root.cern/root/html528/TFumili.html,4,['SIMpl'],['SIMplex']
Usability,": column \"""" + colName + ""\"" is being used as "";; 421 if (tName.empty()) {; 422 errMsg += requestedType.name();; 423 errMsg += "" (extracted from type info)"";; 424 } else {; 425 errMsg += tName;; 426 }; 427 errMsg += "" but the Define or Vary node advertises it as "";; 428 if (colTypeName.empty()) {; 429 auto &id = colType;; 430 errMsg += id.name();; 431 errMsg += "" (extracted from type info)"";; 432 } else {; 433 errMsg += colTypeName;; 434 }; 435 throw std::runtime_error(errMsg);; 436 }; 437}; 438 ; 439bool IsStrInVec(const std::string &str, const std::vector<std::string> &vec); 440{; 441 return std::find(vec.cbegin(), vec.cend(), str) != vec.cend();; 442}; 443 ; 444auto RStringCache::Insert(const std::string &string) -> decltype(fStrings)::const_iterator; 445{; 446 {; 447 std::shared_lock l{fMutex};; 448 if (auto it = fStrings.find(string); it != fStrings.end()); 449 return it;; 450 }; 451 ; 452 // TODO: Would be nicer to use a lock upgrade strategy a-la TVirtualRWMutex; 453 // but that is unfortunately not usable outside the already available ROOT mutexes; 454 std::unique_lock l{fMutex};; 455 if (auto it = fStrings.find(string); it != fStrings.end()); 456 return it;; 457 ; 458 return fStrings.insert(string).first;; 459}; 460} // end NS RDF; 461} // end NS Internal; 462} // end NS ROOT; RDataSource.hxx; RDefineBase.hxx; RLogger.hxx; R__LOG_DEBUG#define R__LOG_DEBUG(DEBUGLEVEL,...)Definition RLogger.hxx:365; RLoopManager.hxx; b#define b(i)Definition RSha256.hxx:100; c#define c(i)Definition RSha256.hxx:101; RtypesCore.h; Long64_tlong long Long64_tDefinition RtypesCore.h:69; ULong64_tunsigned long long ULong64_tDefinition RtypesCore.h:70; TBranchElement.h; TBranch.h; TClassEdit.h; TClassRef.h; TClass.h; TError.h; Infovoid Info(const char *location, const char *msgfmt,...)Use this function for informational messages.Definition TError.cxx:218; lengthOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFUtils_8cxx_source.html:18151,usab,usable,18151,doc/master/RDFUtils_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RDFUtils_8cxx_source.html,1,['usab'],['usable']
Usability,": determines resolution of the neighbouring peaks default value is 1 correspond to 3 sigma distance between peaks. ; Higher values allow higher resolution (smaller distance between peaks. May be set later through SetResolution. ; Definition at line 229 of file TSpectrum3.cxx. ◆ SmoothMarkov(). const char * TSpectrum3::SmoothMarkov ; (; Double_t *** ; source, . Int_t ; ssizex, . Int_t ; ssizey, . Int_t ; ssizez, . Int_t ; averWindow . ). This function calculates smoothed spectrum from source spectrum based on Markov chain method. ; The result is placed in the array pointed by spectrum pointer.; Function parameters:; source-pointer to the array of source spectrum; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. Smoothing; Goal: Suppression of statistical fluctuations the algorithm is based on discrete Markov chain, which has very simple invariant distribution. \[; U_2 = \frac{p_{1.2}}{p_{2,1}}U_1, U_3 = \frac{p_{2,3}}{p_{3,2}}U_2 U_1, ... , U_n = \frac{p_{n-1,n}}{p_{n,n-1}}U_{n-1} ... U_2 U_1; \]. \(U_1\) being defined from the normalization condition \( \sum_{i=1}^{n} U_i = 1\) n is the length of the smoothed spectrum and ; \[; p_{i,i\pm1} = A_i \sum_{k=1}^{m} exp\left[\frac{y(i\pm k)-y(i)}{y(i\pm k)+y(i)}\right]; \]. is the probability of the change of the peak position from channel i to the channel i+1. \(A_i\) is the normalization constant so that \( p_{i,i-1}+p_{i,i+1}=1\) and m is a width of smoothing window. We have extended this algorithm to three dimensions.; Reference:; [1] Z.K. Silagadze, A new algorithm for automatic photo-peak searches. NIM A 376 (1996), 451-. Example 1 - script SmootMarkov3.c :. Fig. 1 Original noisy spectrum. Fig. 2 Smoothed spectrum with averaging window m=3.; Script:; Example to illustrate the Markov smoothing (class TSpectrum3). To",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum3.html:41820,simpl,simple,41820,doc/master/classTSpectrum3.html,https://root.cern,https://root.cern/doc/master/classTSpectrum3.html,1,['simpl'],['simple']
Usability,": generic iteration: next. ;  ; TClass * fOnFileClass;  On file class. ;  ; Bool_t fPointers;  Flag to indicate if containee has pointers (key or value) ;  ; Proxies_t fProxyKept;  Optimization: Keep proxies once they were created. ;  ; Proxies_t fProxyList;  Stack of recursive proxies. ;  ; TObjArray * fReadMemberWise;  Array of bundle of TStreamerInfoActions to stream out (read) ;  ; Sizing_t fResize;  Container accessors: resize container. ;  ; Method fSize;  Container accessors: size of container. ;  ; Staged_t fStaged;  Optimization: Keep staged array once they were created. ;  ; int fSTL_type;  STL container type. ;  ; Info_t fTypeinfo;  Type information. ;  ; Value * fVal;  Descriptor of the Value_type. ;  ; int fValDiff;  Offset between two consecutive value_types (memory layout). ;  ; int fValOffset;  Offset from key to value (in maps) ;  ; std::atomic< Value * > fValue;  Descriptor of the container value type. ;  ; TStreamerInfoActions::TActionSequence * fWriteMemberWise;  ;  Protected Attributes inherited from TVirtualCollectionProxy; TClassRef fClass;  ; UInt_t fProperties;  . Inheritance diagram for TGenMapProxy:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGenMapProxy(). TGenMapProxy::TGenMapProxy ; (; const TGenCollectionProxy & ; c). inline . Definition at line 280 of file TGenCollectionProxy.cxx. ◆ ~TGenMapProxy(). TGenMapProxy::~TGenMapProxy ; (; ). inlineoverride . Definition at line 284 of file TGenCollectionProxy.cxx. Member Function Documentation. ◆ DeleteItem(). void TGenMapProxy::DeleteItem ; (; Bool_t ; force, . void * ; ptr . ); const. inlineoverridevirtual . Call to delete/destruct individual item. ; Reimplemented from TGenCollectionProxy.; Definition at line 288 of file TGenCollectionProxy.cxx. io/io/src/TGenCollectionProxy.cxx. TGenMapProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenMapProxy.html:12928,Guid,Guide,12928,doc/master/classTGenMapProxy.html,https://root.cern,https://root.cern/doc/master/classTGenMapProxy.html,1,['Guid'],['Guide']
Usability,": invalid syntax; 6 : Too many operators; 7 : Too many parameters; 10 : z specified but not x and y; 11 : z and y specified but not x; 12 : y specified but not x; 13 : z and x specified but not y; 20 : non integer value for parameter number; 21 : atan2 requires two arguments; 22 : pow requires two arguments; 23 : degree of polynomial not specified; 24 : Degree of polynomial must be positive; 25 : Degree of polynomial must be less than 20; 26 : Unknown name; 27 : Too many constants in expression; 28 : strstr requires two arguments; 29 : interpreted or compiled function have to return a numerical type; 30 : Bad numerical expression; 31 : Part of the variable exist but some of it is not accessible or useable; 40 : '(' is expected; 41 : ')' is expected; 42 : '[' is expected; 43 : ']' is expected. /*; ; */. Special functions. By default, the formula is assigned fNumber=0. However, the following; formula built with simple functions are assigned fNumber:; ""gaus"" 100 (or gausn); ""xygaus"" 110; ""expo"" 200; ""polN"" 300+N; ""landau"" 400; ""xylandau"" 410; Note that expressions like gaus(0), expo(1) will force fNumber=0. Warning when deriving a class from TFormula. If you overload this member function, you also HAVE TO; never call the constructor:. TFormula::TFormula(const char *name,const char *expression). and write your own constructor. MyClass::MyClass(const char *name,const char *expression) : TFormula(). which has to call the TFormula default constructor and whose implementation; should be similar to the implementation of the normal TFormula constructor. This is necessary because the normal TFormula constructor call indirectly; the virtual member functions Analyze, DefaultString, DefaultValue; and DefaultVariable. Bool_t CheckOperands(Int_t operation, Int_t& err); Check whether the operand at 'oper-1' is compatible with the operation; at 'oper'. Bool_t CheckOperands(Int_t leftoperand, Int_t rightoperartion, Int_t& err); Check whether the operands at 'leftoper' and 'oper-1' are",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TFormula.html:18656,simpl,simple,18656,root/html534/TFormula.html,https://root.cern,https://root.cern/root/html534/TFormula.html,3,['simpl'],['simple']
Usability,":(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-02 16:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPythia8Decayer.html:6814,Clear,ClearEvent,6814,root/html604/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html604/TPythia8Decayer.html,2,['Clear'],"['Clear', 'ClearEvent']"
Usability,":(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfDebugDebug level; TPythia8*fPythia8Pointer to pythia8. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPythia8Decayer(); constructor. void Init(); Initialize the decayer. void Decay(Int_t pdg, TLorentzVector* p); Decay a single particle. Int_t ImportParticles(TClonesArray* particles); import the decay products into particles array. void SetForceDecay(Int_t type); Set forced decay mode. void ForceDecay(); ForceDecay not yet implemented. Float_t GetPartialBranchingRatio(Int_t ipart). Float_t GetLifetime(Int_t kf); return lifetime in seconds of teh particle with PDG number pdg. void ReadDecayTable(); to read a decay table (not yet implemented). void AppendParticle(Int_t pdg, TLorentzVector* p); Append a particle to the stack. void ClearEvent(); Clear the event stack. TPythia8Decayer(). virtual ~TPythia8Decayer(); {;}. void SetDebugLevel(Int_t debug); {fDebug = debug;}. » Author: Andreas Morsch 04/07/2008 » Copyright (c) 1998-2008, ALICE Experiment at CERN, All rights reserved. *; » Last changed: root/pythia8:$Name$:$Id$ » Last generated: 2015-06-30 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TPythia8Decayer.html:6814,Clear,ClearEvent,6814,root/html602/TPythia8Decayer.html,https://root.cern,https://root.cern/root/html602/TPythia8Decayer.html,2,['Clear'],"['Clear', 'ClearEvent']"
Usability,":(anonymous)TObject::kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter(const char* name, const char* title = ""Generic Interpreter""); TInterpreter ctor only called by derived classes. TInterpreter * Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). Bool_t SetSuspendAutoParsing(Bool_t value). Bool_t IsAutoParsingSuspended() const. TInterpreter(); { }. TInterpreter(const char* name, const char* title = ""Generic Interpreter""). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). void * SetAutoLoadCallBack(void* ); { return 0; }. void * GetAutoLoadCallBack() const; { return 0; }. Int_t AutoLoad(const char* classname, Bool_t knowDictNotLoaded = kFALSE). Int_t AutoLoad(const type_info& typeinfo, Bool_t knowDictNotLoaded = kFALSE). Int_t AutoParse(const char* cls). void ClearFileBusy(). void ClearStack(). Bool_t Declare(const char* code). void EnableAutoLoading(). void EndOfLineAction(). TClass * GetClass(const type_info& typeinfo, Bool_t load) const. Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. TClass * GenerateTClass(const char* classname, Bool_t emulation, Bool_t silent = kFALSE). TClass * GenerateTClass(ClassInfo_t* classinfo, Bool_t silent = kFALSE). Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. void Initialize(). void InspectMembers(TMemberInspector& , const void* obj, const TClass* cl, Bool_t isTransient). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Boo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:26058,Clear,ClearFileBusy,26058,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['Clear'],['ClearFileBusy']
Usability,":. TIterator*RooAbsData::_cacheIter! Iterator over cached variables; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable; RooRealVar*_wgtVarPointer to weight variable (if set); static RooAbsData::StorageTypeRooAbsData::defaultStorageType; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooDataSet.html:19313,Clear,Clear,19313,root/html602/RooDataSet.html,https://root.cern,https://root.cern/root/html602/RooDataSet.html,2,['Clear'],['Clear']
Usability,":. TStringfGetterName! buffer for name of getter method; TStringfSetterName! buffer for name of setter method; TXMLSetupfXmlSetup! buffer for xml names convertion. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TXMLPlayer(); default constructor. ~TXMLPlayer(); destructor of TXMLPlayer object. TString GetStreamerName(TClass* cl); returns streamer function name for given class. Bool_t ProduceCode(TList* cllist, const char* filename); Produce streamers for provide class list; TList should include list of classes, for which code should be generated.; filename specify name of file (without extension), where streamers should be; created. Function produces two files: header file and source file.; For instance, if filename is ""streamers"", files ""streamers.h"" and ""streamers.cxx""; will be created. TString GetMemberTypeName(TDataMember* member); returns name of simple data type for given data member. TString GetBasicTypeName(TStreamerElement* el); return simple data types for given TStreamerElement object. TString GetBasicTypeReaderMethodName(Int_t type, const char* realname); return functions name to read simple data type from xml file. const char* ElementGetter(TClass* cl, const char* membername, int specials = 0); produce code to access member of given class.; Parameter specials has following meaning:; 0 - nothing special; 1 - cast to data type; 2 - produce pointer on given member; 3 - skip casting when produce pointer by buf.P() function. const char* ElementSetter(TClass* cl, const char* membername, char* endch); Produce code to set value to given data member.; endch should be output after value is specified. void ProduceStreamerSource(ostream& fs, TClass* cl, TList* cllist); Produce source code of streamer function for specified class. void ReadSTLarg(ostream& fs, TString& argname, int argtyp, Bool_t isargptr, TClass* argcl, TString& tname, TString& ifcond); Produce code to read argument of stl container from xml file. void Writ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TXMLPlayer.html:10342,simpl,simple,10342,root/html528/TXMLPlayer.html,https://root.cern,https://root.cern/root/html528/TXMLPlayer.html,4,['simpl'],['simple']
Usability,":. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TBranchRef() [1/2]. TBranchRef::TBranchRef ; (; ). Default constructor. ; Definition at line 46 of file TBranchRef.cxx. ◆ TBranchRef() [2/2]. TBranchRef::TBranchRef ; (; TTree * ; tree). Main constructor called by TTree::BranchRef. ; Definition at line 55 of file TBranchRef.cxx. ◆ ~TBranchRef(). TBranchRef::~TBranchRef ; (; ). override . Typical destructor. ; Definition at line 87 of file TBranchRef.cxx. Member Function Documentation. ◆ Class(). static TClass * TBranchRef::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TBranchRef::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TBranchRef::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file TBranchRef.h. ◆ Clear(). void TBranchRef::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear entries in the TRefTable. ; Reimplemented from TObject.; Definition at line 95 of file TBranchRef.cxx. ◆ DeclFileName(). static const char * TBranchRef::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file TBranchRef.h. ◆ FillImpl(). Int_t TBranchRef::FillImpl ; (; ROOT::Internal::TBranchIMTHelper * ; imtHelper). overrideprivatevirtual . Fill the branch basket with the referenced objects parent numbers. ; Reimplemented from TBranch.; Definition at line 103 of file TBranchRef.cxx. ◆ FillLeavesImpl(). void TBranchRef::FillLeavesImpl ; (; TBuffer & ; b). protected . This function called by TBranch::Fill overloads TBranch::FillLeaves. ; Definition at line 176 of file TBranchRef.cxx. ◆ GetRefTable(). TRefTable * TBranchRef::GetRefTable ; (; ); const. inline . Definition at line 49 of file TBranchRef.h. ◆ IsA(). TClass * TBranchRef::IsA ; (; ); const. inlineoverridevirt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:29188,Clear,Clear,29188,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['Clear'],['Clear']
Usability,":105; ROOT::Internal::VecOps::ResetViewvoid ResetView(RVec< T > &v, T *addr, std::size_t sz)An unsafe function to reset the buffer for which this RVec is acting as a view.Definition RVec.hxx:546; ROOT::Internal::VecOps::NextPowerOf2uint64_t NextPowerOf2(uint64_t A)Return the next power of two (in 64-bits) that is strictly greater than A.Definition RVec.hxx:126; ROOT::Internal::VecOps::Allconstexpr bool All(const bool *vals, std::size_t size)Definition RVec.hxx:79; ROOT::Internal::VecOps::GetVectorsSizestd::size_t GetVectorsSize(const std::string &id, const RVec< T > &... vs)Definition RVec.hxx:88; ROOT::Internal::VecOps::UninitializedValueConstructvoid UninitializedValueConstruct(ForwardIt first, ForwardIt last)Definition RVec.hxx:530; ROOT::Internal::VecOps::MapFromTupleauto MapFromTuple(Tuple_t &&t, std::index_sequence< Is... >) -> decltype(MapImpl(std::get< std::tuple_size< Tuple_t >::value - 1 >(t), std::get< Is >(t)...))Definition RVec.hxx:117; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; Dot#define Dot(u, v)Definition normal.c:49; v2@ v2Definition rootcling_impl.cxx:3702; v0@ v0Definition rootcling_impl.cxx:3700; v@ vDefinition rootcling_impl.cxx:3699; v1@ v1Definition rootcling_impl.cxx:3701; ROOT::Detail::indicesDefinition span.hxx:68; ROOT::Internal::VecOps::IsRVecDefinition RVec.hxx:73; ROOT::Internal::VecOps::RVecInlineStorageSizeThe size of the inline storage of an RVec.Definition RVec.hxx:512; ROOT::Internal::VecOps::SmallVectorAlignmentAndSizeUsed to figure out the offset of the first element of an RVec.Definition RVec.hxx:199; ROOT::Internal::VecOps::SmallVectorStorageStorage for the SmallVector elements.Definition RVec.hxx:497; ValueDefinition functioncalls.h:15; RangeTa Range(0, 0, 1, 1); mTMarker mDefinition textangle.C:8. mathvecopsincROOTRVec.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:156622,Guid,Guide,156622,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,1,['Guid'],['Guide']
Usability,":135; TArrow::Drawvoid Draw(Option_t *option="""") overrideDraw this arrow with its current attributes.Definition TArrow.cxx:120; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttText::SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextColorvirtual void SetTextColor(Color_t tcolor=1)Set the text color.Definition TAttText.h:44; TAttText::SetTextFontvirtual void SetTextFont(Font_t tfont=62)Set the text font.Definition TAttText.h:46; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; c1return c1Definition legend1.C:41; t1auto * t1Definition textangle.C:20; AuthorRene Brun ; Definition in file analyze.C. tutorialsgraphicsanalyze.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/analyze_8C.html:6478,Guid,Guide,6478,doc/master/analyze_8C.html,https://root.cern,https://root.cern/doc/master/analyze_8C.html,1,['Guid'],['Guide']
Usability,":146; TObject::ResetBitvoid ResetBit(UInt_t f)Definition TObject.h:198; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TPointDefinition TPoint.h:31; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TStringBasic string class.Definition TString.h:139; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; bool; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ATan2Double_t ATan2(Double_t y, Double_t x)Returns the principal value of the arc tangent of y/x, expressed in radians.Definition TMath.h:646; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::RadToDegconstexpr Double_t RadToDeg()Conversion from radian to degree: .Definition TMath.h:72; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Rectangle_t::fXShort_t fXDefinition GuiTypes.h:362. graf2dgrafsrcTEllipse.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEllipse_8cxx_source.html:38474,Guid,Guide,38474,doc/master/TEllipse_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEllipse_8cxx_source.html,1,['Guid'],['Guide']
Usability,":152; TObject::Warningvirtual void Warning(const char *method, const char *msgfmt,...) constIssue warning message.Definition TObject.cxx:979; TObject::Classstatic TClass * Class(); TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TObject::Comparevirtual Int_t Compare(const TObject *obj) constCompare abstract method.Definition TObject.cxx:244; TSeqCollectionSequenceable collection abstract base class.Definition TSeqCollection.h:28; TSeqCollection::Changedvirtual void Changed()Definition TSeqCollection.h:34; TSeqCollection::QSortstatic void QSort(TObject **a, Int_t first, Int_t last)Sort array of TObject pointers using a quicksort algorithm.Definition TSeqCollection.cxx:70; TSeqCollection::fSortedBool_t fSortedDefinition TSeqCollection.h:31; TStorage::Allocstatic void * Alloc(size_t size)Allocate a block of memory, that later can be resized using TStorage::ReAlloc().Definition TStorage.cxx:152; TStorage::Deallocstatic void Dealloc(void *ptr)De-allocate block of memory, that was allocated via TStorage::Alloc().Definition TStorage.cxx:170; TStorage::ReAllocstatic void * ReAlloc(void *vp, size_t size, size_t oldsize)Reallocate (i.e.Definition TStorage.cxx:183; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; bool; int; unsigned int; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; ROOT::gCoreMutexR__EXTERN TVirtualRWMutex * gCoreMutexDefinition TVirtualRWMutex.h:37; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; v@ vDefinition rootcling_impl.cxx:3699. corecontsrcTObjArray.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:43328,Guid,Guide,43328,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['Guid'],['Guide']
Usability,":173; TNamed::operator=TNamed & operator=(const TNamed &rhs)TNamed assignment operator.Definition TNamed.cxx:51; TNamed::lsvoid ls(Option_t *option="""") const overrideList TNamed name and title.Definition TNamed.cxx:113; TNamed::SetNameTitlevirtual void SetNameTitle(const char *name, const char *title)Set all the TNamed parameters (name and title).Definition TNamed.cxx:154; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::GetNamevirtual const char * GetName() constReturns name of object.Definition TObject.cxx:444; TObject::operator=TObject & operator=(const TObject &rhs)TObject assignment operator.Definition TObject.h:296; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Clonevirtual TObject * Clone(const char *newname="""") constMake a clone of an object using the Streamer facility.Definition TObject.cxx:229; TObject::Copyvirtual void Copy(TObject &object) constCopy this to obj.Definition TObject.cxx:146; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TObject::kMustCleanup@ kMustCleanupif object destructor must call RecursiveRemove()Definition TObject.h:64; TROOT::IndentLevelstatic void IndentLevel()Functions used by ls() to indent an object hierarchy.Definition TROOT.cxx:2895; TString::CompareToint CompareTo(const char *cs, ECaseCompare cmp=kExact) constCompare a string to char *cs2.Definition TString.cxx:457; TString::FillBuffervirtual void FillBuffer(char *&buffer) constCopy string into I/O buffer.Definition TString.cxx:1310; TString::Sizeofvirtual Int_t Sizeof() constReturns size string will occupy on I/O buffer.Definition TString.cxx:1401; int; ROOT::CallRecursiveRemoveIfNeededvoid CallRecursiveRemoveIfNeeded(TObject &obj)call RecursiveRemove for obj if gROOT is valid and obj.TestBit(kMustCleanup) is true.Definition TROOT.h:395. corebasesrcTNamed.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNamed_8cxx_source.html:9773,Guid,Guide,9773,doc/master/TNamed_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TNamed_8cxx_source.html,1,['Guid'],['Guide']
Usability,":17; One better uses a TClonesArray which reduces the number of new/delete calls to only O(10000): TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);; ...; ...; }; ...; a.Delete(); // or a.Clear() or a.Clear(""C""); }; TClonesArrayAn array of clone (identical) objects.Definition TClonesArray.h:29; To reduce the number of call to the constructor (especially useful if the user class requires memory allocation), the object can be added (and constructed when needed) using ConstructedAt which only calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);; ...; ...; }; ...; a.Clear(); // or a.Clear(""C"");; }; Note: the only supported way to add objects to a TClonesArray is via the new with placement method or the ConstructedAt method. The other Add() methods ofTObjArray and its base classes are not allowed.; Considering that a new/delete costs about 70 mus on a 300 MHz HP, O(10^9) new/deletes will save about 19 hours. NOTE 1; C/C++ offers the possibility of allocating and deleting memory. Forgetting to delete allocated memory is a programming error called a ""memory leak"", i.e. the memory of your process grows and eventually your program crashes. Even if you always delete the allocated memory, the recovered space may not be efficiently reused. The process knows that there are portions of free memory, but when you allocate it again, a fresh piece of memory is grabbed. Your program is free from semantic errors, but the total memory of your process still grows, because your program's memory is full of ""holes"" which reduce the efficiency of memory access; this is called ""memory; fragmentation"". Moreover new / delete are expensive operations in terms ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:2001,Clear,Clear,2001,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['Clear'],['Clear']
Usability,":204; T5#define T5Definition md5.inl:150; T53#define T53Definition md5.inl:198; T39#define T39Definition md5.inl:184; T38#define T38Definition md5.inl:183; T19#define T19Definition md5.inl:164; T33#define T33Definition md5.inl:178; md5_byte_tunsigned char md5_byte_tDefinition md5.inl:50; T49#define T49Definition md5.inl:194; T16#define T16Definition md5.inl:161; T22#define T22Definition md5.inl:167; T55#define T55Definition md5.inl:200; T41#define T41Definition md5.inl:186; T48#define T48Definition md5.inl:193; md5_finishMD5_STATIC void md5_finish(md5_state_t *pms, md5_byte_t digest[16])Definition md5.inl:450; T4#define T4Definition md5.inl:149; T64#define T64Definition md5.inl:209; T40#define T40Definition md5.inl:185; T47#define T47Definition md5.inl:192; T13#define T13Definition md5.inl:158; md5_initMD5_STATIC void md5_init(md5_state_t *pms)Definition md5.inl:402; T30#define T30Definition md5.inl:175; T11#define T11Definition md5.inl:156; T63#define T63Definition md5.inl:208; T1#define T1Definition md5.inl:146; T35#define T35Definition md5.inl:180; md5_appendMD5_STATIC void md5_append(md5_state_t *pms, const md5_byte_t *data, size_t nbytes)Definition md5.inl:412; T8#define T8Definition md5.inl:153; md5_processstatic void md5_process(md5_state_t *pms, const md5_byte_t *data)Definition md5.inl:212; T23#define T23Definition md5.inl:168; T42#define T42Definition md5.inl:187; T15#define T15Definition md5.inl:160; T34#define T34Definition md5.inl:179; T27#define T27Definition md5.inl:172; T28#define T28Definition md5.inl:173; T52#define T52Definition md5.inl:197; T32#define T32Definition md5.inl:177; T12#define T12Definition md5.inl:157; md5_state_sDefinition md5.inl:54; md5_state_s::bufmd5_byte_t buf[64]Definition md5.inl:57; md5_state_s::abcdmd5_word_t abcd[4]Definition md5.inl:56; md5_state_s::countmd5_word_t count[2]Definition md5.inl:55. nethttpcivetwebmd5.inl. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/md5_8inl_source.html:21507,Guid,Guide,21507,doc/master/md5_8inl_source.html,https://root.cern,https://root.cern/doc/master/md5_8inl_source.html,1,['Guid'],['Guide']
Usability,":268; TGeoNode::SafetyDouble_t Safety(const Double_t *point, Bool_t in=kTRUE) constcomputes the closest distance from given point to this shapeDefinition TGeoNode.cxx:684; TGeoNode::fMotherTGeoVolume * fMotherDefinition TGeoNode.h:42; TGeoPatternFinderBase finder class for patterns.Definition TGeoPatternFinder.h:31; TGeoPatternFinder::cdvirtual void cd(Int_t)Definition TGeoPatternFinder.h:74; TGeoPatternFinder::GetMatrixvirtual TGeoMatrix * GetMatrix()Return current matrix.Definition TGeoPatternFinder.cxx:183; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::GetMediumTGeoMedium * GetMedium() constDefinition TGeoVolume.h:175; TGeoVolume::SetCurrentPointvoid SetCurrentPoint(Double_t x, Double_t y, Double_t z)Set the current tracking point.Definition TGeoVolume.cxx:2059; TGeoVolume::GetNdaughtersInt_t GetNdaughters() constDefinition TGeoVolume.h:362; TGeoVolume::GetNodesTObjArray * GetNodes()Definition TGeoVolume.h:169; TGeoVolume::GetNodeTGeoNode * GetNode(const char *name) constget the pointer to a daughter nodeDefinition TGeoVolume.cxx:2193; TGeoVolume::IsVisiblevirtual Bool_t IsVisible() constDefinition TGeoVolume.h:155; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TStringBasic string class.Definition TString.h:139; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(). geomgeomincTGeoNode.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoNode_8h_source.html:32194,Guid,Guide,32194,doc/master/TGeoNode_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoNode_8h_source.html,1,['Guid'],['Guide']
Usability,":26; TVirtualGeoTrack::PaintCollectvirtual void PaintCollect(Double_t, Double_t *)Definition TVirtualGeoTrack.h:65; TVirtualGeoTrack::GetPointvirtual const Double_t * GetPoint(Int_t i) const =0; TVirtualGeoTrack::GetPDGInt_t GetPDG() constDefinition TVirtualGeoTrack.h:53; TVirtualGeoTrack::FindTrackWithIdvirtual TVirtualGeoTrack * FindTrackWithId(Int_t id) constRecursively search through this track for a daughter particle (at any depth) with the specified id.Definition TVirtualGeoTrack.cxx:83; TVirtualGeoTrack::SetPDGvirtual void SetPDG(Int_t pdgcode)Definition TVirtualGeoTrack.h:73; TVirtualGeoTrack::GetLastPointInt_t GetLastPoint(Double_t &x, Double_t &y, Double_t &z, Double_t &t) constDefinition TVirtualGeoTrack.h:54; TVirtualGeoTrack::fTracksTObjArray * fTracksDefinition TVirtualGeoTrack.h:29; TVirtualGeoTrack::GetPointvirtual Int_t GetPoint(Int_t i, Double_t &x, Double_t &y, Double_t &z, Double_t &t) const =0; TVirtualGeoTrack::IsInTimeRangeBool_t IsInTimeRange() constTrue if track TOF range overlaps with time interval of TGeoManager.Definition TVirtualGeoTrack.cxx:117; TVirtualGeoTrack::GetMotherParticleTObject * GetMotherParticle() constDefinition TVirtualGeoTrack.h:47; TVirtualGeoTrack::PaintTrackvirtual void PaintTrack(Option_t *option="""")=0; TVirtualGeoTrack::SetIdvoid SetId(Int_t id)Definition TVirtualGeoTrack.h:72; TVirtualGeoTrack::GetNameconst char * GetName() const overrideGet the PDG name.Definition TVirtualGeoTrack.cxx:109; TVirtualGeoTrack::PaintCollectTrackvirtual void PaintCollectTrack(Double_t, Double_t *)Definition TVirtualGeoTrack.h:66; TVirtualGeoTrack::operator=TVirtualGeoTrack & operator=(const TVirtualGeoTrack &)=delete; TVirtualGeoTrack::GetNdaughtersInt_t GetNdaughters() constDefinition TVirtualGeoTrack.h:49; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17. geomgeomincTVirtualGeoTrack.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TVirtualGeoTrack_8h_source.html:9548,Guid,Guide,9548,doc/master/TVirtualGeoTrack_8h_source.html,https://root.cern,https://root.cern/doc/master/TVirtualGeoTrack_8h_source.html,1,['Guid'],['Guide']
Usability,":43; TScatter::GetMarginDouble_t GetMargin() constSet the margin around the plot in %.Definition TScatter.h:55; TScatter::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideCompute distance from point px,py to a scatter plot.Definition TScatter.cxx:129; TScatter::Classstatic TClass * Class(); TScatter::fMinMarkerSizeDouble_t fMinMarkerSizeSmallest marker size used to paint the markers.Definition TScatter.h:42; TScatter::fNpointsInt_t fNpointsNumber of points <= fMaxSize.Definition TScatter.h:36; TScatter::fHistogramTH2F * fHistogramPointer to histogram used for drawing axis.Definition TScatter.h:37; TScatter::SavePrimitivevoid SavePrimitive(std::ostream &out, Option_t *option="""") overrideSave primitive as a C++ statement(s) on output stream out.Definition TScatter.cxx:260; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TVirtualGraphPainterAbstract interface to a histogram painter.Definition TVirtualGraphPainter.h:28; TVirtualGraphPainter::ExecuteEventHelpervirtual void ExecuteEventHelper(TGraph *theGraph, Int_t event, Int_t px, Int_t py)=0; TVirtualGraphPainter::DistancetoPrimitiveHelpervirtual Int_t DistancetoPrimitiveHelper(TGraph *theGraph, Int_t px, Int_t py)=0; TVirtualGraphPainter::PaintScattervirtual void PaintScatter(TScatter *theScatter, Option_t *option)=0; TVirtualGraphPainter::GetPainterstatic TVirtualGraphPainter * GetPainter()Static function returning a pointer to the current graph painter.Definition TVirtualGraphPainter.cxx:29; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. histhistsrcTScatter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:34 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TScatter_8cxx_source.html:17665,Guid,Guide,17665,doc/master/TScatter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TScatter_8cxx_source.html,1,['Guid'],['Guide']
Usability,":69; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::DrawClassObjectvirtual void DrawClassObject(const TObject *obj, Option_t *option="""")=0; TVirtualRefProxyDefinition TVirtualRefProxy.h:81; TVirtualRefProxy::Releasevirtual void Release()=0; TVirtualRefProxy::SetClassvirtual void SetClass(TClass *classptr)=0; TVirtualRefProxy::Clonevirtual TVirtualRefProxy * Clone() const =0; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GenerateInfoForPairvirtual TVirtualStreamerInfo * GenerateInfoForPair(const std::string &pairclassname, bool silent, size_t hint_pair_offset, size_t hint_pair_size)=0Generate the TClass and TStreamerInfo for the requested pair.; TVirtualStreamerInfo::DeleteArrayvirtual void DeleteArray(void *p, Bool_t dtorOnly=kFALSE)=0; TVirtualStreamerInfo::Clearvirtual void Clear(Option_t *="""") override=0Set name and title to empty strings ("""").; TVirtualStreamerInfo::SetClassVersionvirtual void SetClassVersion(Int_t vers)=0; TVirtualStreamerInfo::GenEmulatedClassStreamervirtual TClassStreamer * GenEmulatedClassStreamer(const char *class_name, Bool_t silent)=0; TVirtualStreamerInfo::IsCompiledBool_t IsCompiled() constDefinition TVirtualStreamerInfo.h:163; TVirtualStreamerInfo::NewInfovirtual TVirtualStreamerInfo * NewInfo(TClass *cl)=0; TVirtualStreamerInfo::GetActualClassvirtual TClass * GetActualClass(const void *obj) const =0; TVirtualStreamerInfo::GetCheckSumvirtual UInt_t GetCheckSum() const =0; TVirtualStreamerInfo::GetOffsetvirtual Int_t GetOffset(const char *) const =0; TVirtualStreamerInfo::GetElementCounterStartstatic const char * GetElementCounterStart(const char *dmTitle)Given a comment/title declaring an array counter, for example:Definition TVirtualStreamerInfo.cxx:99; TVirtualStreamerInfo::Buildvirtual void B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:370537,Clear,Clearvirtual,370537,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,":69; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; TVirtualPad::cdvirtual TVirtualPad * cd(Int_t subpadnumber=0)=0; TVirtualPad::DrawClassObjectvirtual void DrawClassObject(const TObject *obj, Option_t *option="""")=0; TVirtualRefProxyDefinition TVirtualRefProxy.h:81; TVirtualRefProxy::Releasevirtual void Release()=0; TVirtualRefProxy::SetClassvirtual void SetClass(TClass *classptr)=0; TVirtualRefProxy::Clonevirtual TVirtualRefProxy * Clone() const =0; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GenerateInfoForPairvirtual TVirtualStreamerInfo * GenerateInfoForPair(const std::string &pairclassname, bool silent, size_t hint_pair_offset, size_t hint_pair_size)=0Generate the TClass and TStreamerInfo for the requested pair.; TVirtualStreamerInfo::DeleteArrayvirtual void DeleteArray(void *p, Bool_t dtorOnly=kFALSE)=0; TVirtualStreamerInfo::Clearvirtual void Clear(Option_t *="""") override=0Set name and title to empty strings ("""").; TVirtualStreamerInfo::SetClassVersionvirtual void SetClassVersion(Int_t vers)=0; TVirtualStreamerInfo::GenEmulatedClassStreamervirtual TClassStreamer * GenEmulatedClassStreamer(const char *class_name, Bool_t silent)=0; TVirtualStreamerInfo::IsCompiledBool_t IsCompiled() constDefinition TVirtualStreamerInfo.h:173; TVirtualStreamerInfo::NewInfovirtual TVirtualStreamerInfo * NewInfo(TClass *cl)=0; TVirtualStreamerInfo::GetActualClassvirtual TClass * GetActualClass(const void *obj) const =0; TVirtualStreamerInfo::GetCheckSumvirtual UInt_t GetCheckSum() const =0; TVirtualStreamerInfo::GetOffsetvirtual Int_t GetOffset(const char *) const =0; TVirtualStreamerInfo::GetElementCounterStartstatic const char * GetElementCounterStart(const char *dmTitle)Given a comment/title declaring an array counter, for example:Definition TVirtualStreamerInfo.cxx:99; TVirtualStreamerInfo::Buildvirtual void B",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:373244,Clear,Clearvirtual,373244,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,":714; TPie::SetAngularOffsetvoid SetAngularOffset(Double_t)Set the global angular offset for slices in degree [0,360].Definition TPie.cxx:1165; TPie::SetEntryFillStylevoid SetEntryFillStyle(Int_t, Int_t)Set the fill style for the ""i"" slice.Definition TPie.cxx:1234; TPie::SetYvoid SetY(Double_t)Set Y value.Definition TPie.cxx:1371; TPie::SetLabelsOffsetvoid SetLabelsOffset(Float_t)Set the distance between the label end the external line of the TPie.Definition TPie.cxx:1325; TPie::SetEntryRadiusOffsetvoid SetEntryRadiusOffset(Int_t, Double_t)Set the distance, in the direction of the radius of the slice.Definition TPie.cxx:1242; TPie::SetLabelFormatvoid SetLabelFormat(const char *)This method is used to customize the label format.Definition TPie.cxx:1288; TPie::SetEntryLineStylevoid SetEntryLineStyle(Int_t, Int_t)Set the style for the slice's outline. ""i"" is the slice number.Definition TPie.cxx:1210; TPie::SetEntryLineWidthvoid SetEntryLineWidth(Int_t, Int_t)Set the width of the slice's outline. ""i"" is the slice number.Definition TPie.cxx:1218; TPie::SetCirclevoid SetCircle(Double_t x=.5, Double_t y=.5, Double_t rad=.4)Set the coordinates of the circle that describe the pie:Definition TPie.cxx:1182; TPie::SetRadiusvoid SetRadius(Double_t)Set the pie chart's radius' value.Definition TPie.cxx:1341; TPie::MakeLegendTLegend * MakeLegend(Double_t x1=.65, Double_t y1=.65, Double_t x2=.95, Double_t y2=.95, const char *leg_header="""")This method create a legend that explains the contents of the slice for this pie-chart.Definition TPie.cxx:770; TPie::Drawvoid Draw(Option_t *option=""l"") overrideDraw the pie chart.Definition TPie.cxx:277; TPie::SetEntryLineColorvoid SetEntryLineColor(Int_t, Int_t)Set the color for the slice's outline. ""i"" is the slice number.Definition TPie.cxx:1202; AuthorsOlivier Couet, Guido Volpi ; Definition in file piechart.C. tutorialsgraphicspiechart.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/piechart_8C.html:4461,Guid,Guido,4461,doc/master/piechart_8C.html,https://root.cern,https://root.cern/doc/master/piechart_8C.html,2,['Guid'],"['Guide', 'Guido']"
Usability,"::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TGLLockable::ELockTGLLockable::kModifyLock; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TGLViewer::ESecSelTypeTGLViewer::kOnKeyMod1; static TGLViewer::ESecSelTypeTGLViewer::kOnRequest; static TObject::(anonymous)TObject::kOverwrite; static TGLViewer::EPushActionTGLViewer::kPushAnnotate; static TGLViewer::EPushActionTGLViewer::kPushCamCenter; static TGLViewer::EPushActionTGLViewer::kPushStd; static TGLLockable::ELockTGLLockable::kSelectLock; static TObject::(anonymous)TObject::kSingleKey; static TGLLockable::ELockTGLLockable::kUnlocked; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGLAutoRotator*TGLViewer::fAutoRotator!; Bool_tTGLViewer::fAxesDepthTest! remove guides hidden-lines; Int_tTGLViewer::fAxesType! axes type; TGLCamera*TGLViewerBase::fCameraCamera for rendering.; TGLCameraOverlay*TGLViewer::fCameraOverlay! markup size of viewport in scene units; Bool_tTGLViewerBase::fChangedChange requiring redraw is pending.; TGLClip*TGLViewerBase::fClipViewer clipping-plane.; TGLClipSet*TGLViewer::fClipSet!; TContextMenu*TGLViewer::fContextMenu!; TGLCamera*TGLViewer::fCurrentCamera!; TGLOverlayElement*TGLViewer::fCurrentOvlElm! current overlay element; TGLSelectRecordTGLViewer::fCurrentSelRec! select record in use as selected; TGLColorSetTGLViewer::fDarkColorSet! color-set with dark background; Bool_tTGLViewer::fDebugMode! debug mode (forced rebuild + draw scene/frustum/interest boxes); TGLViewer::EDragActionTGLViewer::fDragAction; Bool_tTGLViewer::fDrawCameraCenter! reference marker on?; TGEventHandler*TGLViewer::fEventHandler! event handler; Float_tTGLViewer::fFader! fade the view (0 - no fade/default, 1 - full fade/no rendering done); TGLContextIdentity*TGLVi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGLEmbeddedViewer.html:21466,guid,guides,21466,root/html602/TGLEmbeddedViewer.html,https://root.cern,https://root.cern/root/html602/TGLEmbeddedViewer.html,4,['guid'],['guides']
Usability,"::AbstractMethod(const char* method) const; virtual Int_tTVirtualX::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); static intCoinFlag(); virtual const QColor&ColorIndex(Color_t indx) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tCreateBitmap(Drawable_t id, const char* bitmap, UInt_t widt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGQt.html:1534,Clear,Clear,1534,root/html534/TGQt.html,https://root.cern,https://root.cern/root/html534/TGQt.html,1,['Clear'],['Clear']
Usability,"::AbstractMethod(const char* method) const; virtual Int_tTVirtualX::AddPixmap(ULong_t pixid, UInt_t w, UInt_t h); virtual Int_tAddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tAllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTVirtualX::BeginModalSessionFor(Window_t window); virtual voidBell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidChangeGC(GContext_t gc, GCValues_t* gval); virtual voidChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tCheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidClearWindow(); virtual voidClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseDisplay(); virtual voidClosePixmap(); virtual voidCloseWindow(); static intCoinFlag(); virtual const QColor&ColorIndex(Color_t indx) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidCopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidCopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual voidCopyPixmap(const QPixmap& p, Int_t px1, Int_t py1); virtual Pix",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:1461,Clear,Clear,1461,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,2,['Clear'],['Clear']
Usability,"::Actionstatic Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2118; TStreamerInfoActions::VectorPtrLooper::ConvertBasicTypeDefinition TStreamerInfoActions.cxx:2080; TStreamerInfoActions::VectorPtrLooper::ConvertBasicType::Actionstatic Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2081; TStreamerInfoActions::VectorPtrLooperDefinition TStreamerInfoActions.cxx:2065; TStreamerInfoActions::VectorPtrLooper::ReadActionstatic Int_t ReadAction(TBuffer &buf, void *start, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2163; TStreamerInfoActions::VectorPtrLooper::ReadBasestatic Int_t ReadBase(TBuffer &buf, void *start, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2171; TStreamerInfoActions::VectorPtrLooper::ReadBasicTypestatic Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2068; TStreamerInfoActions::VectorPtrLooper::GenericReadstatic Int_t GenericRead(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2179; TStreamerInfoActions::VectorPtrLooper::WriteBasicTypestatic Int_t WriteBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2151; TStreamerInfoActions::VectorPtrLooper::GenericWritestatic Int_t GenericWrite(TBuffer &buf, void *iter, const void *end, const TConfiguration *config)Definition TStreamerInfoActions.cxx:2186; TStreamerInfoActions::WithFactorMarkerDefinition TStreamerInfoActions.cxx:58; TStreamerInfoActions::WithFactorMarker::Value_tFrom Value_tDefinition TStreamerInfoActions.cxx:59; vecDefinition civetweb.c:1855. ioiosrcTStreamerInfoActions.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:277822,Guid,Guide,277822,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Guid'],['Guide']
Usability,"::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatching",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionManager.html:2366,Clear,Clear,2366,root/html528/TEveProjectionManager.html,https://root.cern,https://root.cern/root/html528/TEveProjectionManager.html,1,['Clear'],['Clear']
Usability,"::AddProjectedsToSet(set<TEveElement*>& set); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveJetCone.html:2878,Clear,Clear,2878,root/html528/TEveJetCone.html,https://root.cern,https://root.cern/root/html528/TEveJetCone.html,2,['Clear'],['Clear']
Usability,"::AddStamp(UChar_t bits); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tTEveWindow::CanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveWindowFrame.html:2185,Clear,ClearEveFrame,2185,root/html528/TEveWindowFrame.html,https://root.cern,https://root.cern/root/html528/TEveWindowFrame.html,2,['Clear'],['ClearEveFrame']
Usability,"::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tTEveWindow::CanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*TEveWindow::CreateWindowMainFrame",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewer.html:2568,Clear,ClearEveFrame,2568,root/html528/TEveViewer.html,https://root.cern,https://root.cern/root/html528/TEveViewer.html,16,['Clear'],['ClearEveFrame']
Usability,"::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveEventManager.html:2438,Clear,ClearStamps,2438,root/html530/TEveEventManager.html,https://root.cern,https://root.cern/root/html530/TEveEventManager.html,5,['Clear'],['ClearStamps']
Usability,"::AppendPad(Option_t* option = """"); TGraph*Approx(TGraph* grin, Option_t* option = ""linear"", Int_t nout = 50, Double_t* xout = 0, Double_t yleft = 0, Double_t yright = 0, Int_t rule = 0, Double_t f = 0, Option_t* ties = ""mean""); static Double_tApprox1(Double_t v, Double_t f, Double_t* x, Double_t* y, Int_t n, Int_t iKind, Double_t Ylow, Double_t Yhigh); voidApproxin(TGraph* grin, Int_t iKind, Double_t& Ylow, Double_t& Yhigh, Int_t rule, Int_t iTies); static voidBDRksmooth(Double_t* x, Double_t* y, Int_t n, Double_t* xp, Double_t* yp, Int_t np, Int_t kernel, Double_t bw); static voidBDRsmooth(Int_t n, Double_t* x, Double_t* y, Double_t* w, Double_t span, Int_t iper, Double_t vsmlsq, Double_t* smo, Double_t* acvr); static voidBDRsupsmu(Int_t n, Double_t* x, Double_t* y, Double_t* w, Int_t iper, Double_t span, Double_t alpha, Double_t* smo, Double_t* sc); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraphSmooth.html:1592,Clear,Clear,1592,root/html528/TGraphSmooth.html,https://root.cern,https://root.cern/root/html528/TGraphSmooth.html,6,['Clear'],['Clear']
Usability,"::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; Int_tTProof::DeactivateWorker(const char* ord); static voidTProof::DelEnvVar(const char* name); virtual voidTObjec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofCondor.html:2385,Clear,ClearPackages,2385,root/html530/TProofCondor.html,https://root.cern,https://root.cern/root/html530/TProofCondor.html,4,['Clear'],['ClearPackages']
Usability,"::Archive(Int_t query, const char* url); Int_tTProof::Archive(const char* queryref, const char* url = 0); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTProof::Browse(TBrowser* b); voidTProof::cd(Int_t id = -1); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Int_tTProof::CleanupSession(const char* sessiontag); virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTProof::ClearCache(const char* file = 0); voidTProof::ClearData(UInt_t what = kUnregistered, const char* dsname = 0); virtual voidTProof::ClearDataSetCache(const char* dataset = 0); voidTProof::ClearFeedback(); voidTProof::ClearInput(); voidTProof::ClearInputData(TObject* obj = 0); voidTProof::ClearInputData(const char* name); Int_tTProof::ClearPackage(const char* package); Int_tTProof::ClearPackages(); virtual TObject*TNamed::Clone(const char* newname = """") const; voidTProof::Close(Option_t* option = """"); voidTProof::CloseProgressDialog()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; TDrawFeedback*TProof::CreateDrawFeedback(); voidTProof::DataSetStatus(const char* msg, Bool_t status, Int_t done, Int_t total)SIGNAL ; voidTProof::DeactivateWorker(const char* ord); static voidTProof::DelEnvVar(const char* name); virtual voidTObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofCondor.html:2384,Clear,ClearPackages,2384,root/html528/TProofCondor.html,https://root.cern,https://root.cern/root/html528/TProofCondor.html,2,['Clear'],['ClearPackages']
Usability,"::BayesianCalculator::~BayesianCalculator ; (; ). override . destructor ; Definition at line 705 of file BayesianCalculator.cxx. Member Function Documentation. ◆ ApproximatePosterior(). void RooStats::BayesianCalculator::ApproximatePosterior ; (; ); const. protected . approximate posterior in nbins using a TF1 scan the poi values and evaluate the posterior at each point and save the result in a cloned TF1 For each point the posterior is evaluated by integrating the nuisance parameters ; Definition at line 1319 of file BayesianCalculator.cxx. ◆ Class(). static TClass * RooStats::BayesianCalculator::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::BayesianCalculator::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::BayesianCalculator::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 194 of file BayesianCalculator.h. ◆ ClearAll(). void RooStats::BayesianCalculator::ClearAll ; (; ); const. protected . clear all cached pdf objects ; Definition at line 714 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromApproxPosterior(). void RooStats::BayesianCalculator::ComputeIntervalFromApproxPosterior ; (; double ; c1, . double ; c2 . ); const. protected . compute the interval using the approximate posterior function ; Definition at line 1364 of file BayesianCalculator.cxx. ◆ ComputeIntervalFromCdf(). void RooStats::BayesianCalculator::ComputeIntervalFromCdf ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using Cdf integration ; Definition at line 1243 of file BayesianCalculator.cxx. ◆ ComputeIntervalUsingRooFit(). void RooStats::BayesianCalculator::ComputeIntervalUsingRooFit ; (; double ; c1, . double ; c2 . ); const. protected . internal function compute the interval using RooFit ; Definition at line 1194 of file BayesianCalculator.cxx. ◆ ComputeShortestInterval().",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html:22751,Clear,ClearAll,22751,doc/master/classRooStats_1_1BayesianCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1BayesianCalculator.html,1,['Clear'],['ClearAll']
Usability,::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TWin32ThreadFactory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TWin32ThreadFactory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file TWin32ThreadFactory.h. ◆ CreateConditionImp(). TConditionImp * TWin32ThreadFactory::CreateConditionImp ; (; TMutexImp * ; m). overridevirtual . Return a Win32 condition variable. ; Implements TThreadFactory.; Definition at line 59 of file TWin32ThreadFactory.cxx. ◆ CreateMutexImp(). TMutexImp * TWin32ThreadFactory::CreateMutexImp ; (; Bool_t ; recursive). overridevirtual . Return a Win32 Mutex. ; Implements TThreadFactory.; Definition at line 43 of file TWin32ThreadFactory.cxx. ◆ CreateThreadImp(). TThreadImp * TWin32ThreadFactory::CreateThreadImp ; (; ). overridevirtual . Return a Win32 thread. ; Implements TThreadFactory.; Definition at line 51 of file TWin32ThreadFactory.cxx. ◆ DeclFileName(). static const char * TWin32ThreadFactory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 41 of file TWin32ThreadFactory.h. ◆ IsA(). TClass * TWin32ThreadFactory::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TThreadFactory.; Definition at line 41 of file TWin32ThreadFactory.h. ◆ Streamer(). void TWin32ThreadFactory::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TThreadFactory. ◆ StreamerNVirtual(). void TWin32ThreadFactory::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 41 of file TWin32ThreadFactory.h. core/thread/inc/TWin32ThreadFactory.h; core/thread/src/TWin32ThreadFactory.cxx. TWin32ThreadFactory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:48 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWin32ThreadFactory.html:14511,Guid,Guide,14511,doc/master/classTWin32ThreadFactory.html,https://root.cern,https://root.cern/doc/master/classTWin32ThreadFactory.html,1,['Guid'],['Guide']
Usability,::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TEveElementListProjected::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 493 of file TEveElement.h. ◆ DeclFileName(). static const char * TEveElementListProjected::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 493 of file TEveElement.h. ◆ GetProjectedAsElement(). TEveElement * TEveElementListProjected::GetProjectedAsElement ; (; ). inlineoverridevirtual . Returns this projected dynamic-casted to TEveElement. ; This is needed as class TEveProjected is used as secondary inheritance. ; Reimplemented from TEveProjected.; Definition at line 491 of file TEveElement.h. ◆ IsA(). TClass * TEveElementListProjected::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TEveElementList.; Definition at line 493 of file TEveElement.h. ◆ operator=(). TEveElementListProjected & TEveElementListProjected::operator= ; (; const TEveElementListProjected & ; ). private . ◆ Streamer(). void TEveElementListProjected::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElementList. ◆ StreamerNVirtual(). void TEveElementListProjected::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 493 of file TEveElement.h. ◆ UpdateProjection(). void TEveElementListProjected::UpdateProjection ; (; ). overridevirtual . This is abstract method from base-class TEveProjected. ; No implementation. ; Implements TEveProjected.; Definition at line 2166 of file TEveElement.cxx. Libraries for TEveElementListProjected:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveElement.h; graf3d/eve/src/TEveElement.cxx. TEveElementListProjected. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:36 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveElementListProjected.html:37311,Guid,Guide,37311,doc/master/classTEveElementListProjected.html,https://root.cern,https://root.cern/doc/master/classTEveElementListProjected.html,1,['Guid'],['Guide']
Usability,"::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL() const; voidDrawCloud() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLBoxPainter&operator=(const TGLBoxPainter&); voidSetPlotColor() const. Data Members; public:. enum EBoxType { kBox; kBox1; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLBoxPainter.html:1522,Clear,ClearBuffers,1522,root/html530/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html530/TGLBoxPainter.html,1,['Clear'],['ClearBuffers']
Usability,"::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLLegoPainter(const TGLLegoPainter&); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawLegoCartesian() const; voidDrawLegoCylindrical() const; voidDrawLegoPolar() const; voidDrawLegoSpherical() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; TGLLegoPainter&operator=(const TGLLegoPainter&); Bool_tPreparePalette() const; voidSetLegoColor() const. Data Members; public:. enum ELegoType { kColorSimple; kColorLevel; kCylindricBars; };; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLLegoPainter.html:1468,Clear,ClearBuffers,1468,root/html530/TGLLegoPainter.html,https://root.cern,https://root.cern/root/html530/TGLLegoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"::CutAxisSelected() const; virtual char*GetPlotInfo(Int_t px, Int_t py); virtual Bool_tInitGeometry(); voidTGLPlotPainter::InvalidateSelection(); virtual TClass*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLVoxelPainter(const TGLVoxelPainter&); virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLVoxelPainter&operator=(const TGLVoxelPainter&); voidPreparePalette() const; voidSetVoxelColor(Double_t binContent) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGLVoxelPainter.html:1451,Clear,ClearBuffers,1451,root/html530/TGLVoxelPainter.html,https://root.cern,https://root.cern/root/html530/TGLVoxelPainter.html,1,['Clear'],['ClearBuffers']
Usability,"::DNN::Steepest::operator() ; (; Function & ; fitnessFunction, . Weights & ; weights, . PassThrough & ; passThrough . ). operator to call the steepest gradient descent algorithm ; implementation of the steepest gradient descent algorithm; entry point to start the minimization procedure; Parameters. fitnessFunction(templated) function which has to be provided. This function is minimized ; weights(templated) a reference to a container of weights. The result of the minimization procedure is returned via this reference (needs to support std::begin and std::end ; passThrough(templated) object which can hold any data which the fitness function needs. This object is not touched by the minimizer; This object is provided to the fitness function when called. Can be used with multithreading (i.e. ""HogWild!"" style); see call in trainCycle ; Definition at line 271 of file NeuralNet.icc. Member Data Documentation. ◆ m_alpha. double TMVA::DNN::Steepest::m_alpha. internal parameter (learningRate) ; Definition at line 371 of file NeuralNet.h. ◆ m_beta. double TMVA::DNN::Steepest::m_beta. internal parameter (momentum) ; Definition at line 372 of file NeuralNet.h. ◆ m_localGradients. std::vector<double> TMVA::DNN::Steepest::m_localGradients. local gradients for reuse in thread. ; Definition at line 376 of file NeuralNet.h. ◆ m_localWeights. std::vector<double> TMVA::DNN::Steepest::m_localWeights. local weights for reuse in thread. ; Definition at line 375 of file NeuralNet.h. ◆ m_prevGradients. std::vector<double> TMVA::DNN::Steepest::m_prevGradients. vector remembers the gradients of the previous step ; Definition at line 373 of file NeuralNet.h. ◆ m_repetitions. size_t TMVA::DNN::Steepest::m_repetitions. Definition at line 337 of file NeuralNet.h. Libraries for TMVA::DNN::Steepest:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/NeuralNet.h; tmva/tmva/inc/TMVA/NeuralNet.icc. TMVADNNSteepest. ROOT master - Reference Guide Genera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html:2766,learn,learningRate,2766,doc/master/classTMVA_1_1DNN_1_1Steepest.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1Steepest.html,1,['learn'],['learningRate']
Usability,"::DataRange::AddRange ; (; double ; xmin, . double ; xmax, . double ; ymin, . double ; ymax, . double ; zmin, . double ; zmax . ). inline . add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and [zmin,zmax] for the third coordinate ; Definition at line 173 of file DataRange.h. ◆ AddRange() [4/4]. void ROOT::Fit::DataRange::AddRange ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). add a range [xmin,xmax] for the new coordinate icoord Adding a range does not delete existing one, but takes the OR with existing ranges. ; if want to replace range use method SetRange, which replace range with existing one ; Definition at line 94 of file DataRange.cxx. ◆ CleanRangeSet(). void ROOT::Fit::DataRange::CleanRangeSet ; (; unsigned int ; icoord, . double ; xmin, . double ; xmax . ). protected . internal function to remove all the existing ranges between xmin and xmax called when a new range is inserted ; Definition at line 165 of file DataRange.cxx. ◆ Clear(). void ROOT::Fit::DataRange::Clear ; (; unsigned int ; icoord = 0). clear all ranges in one coordinate (is now -inf, +inf) ; Definition at line 158 of file DataRange.cxx. ◆ GetInfRange(). void ROOT::Fit::DataRange::GetInfRange ; (; double & ; x1, . double & ; x2 . ). staticprotected . Definition at line 182 of file DataRange.cxx. ◆ GetRange() [1/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . double & ; zmin, . double & ; zmax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y and z coordinates ; Definition at line 135 of file DataRange.h. ◆ GetRange() [2/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . double & ; xmax, . double & ; ymin, . double & ; ymax, . unsigned int ; irange = 0 . ); const. inline . get range for the x and y coordinates ; Definition at line 129 of file DataRange.h. ◆ GetRange() [3/6]. void ROOT::Fit::DataRange::GetRange ; (; double & ; xmin, . doub",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html:7801,Clear,Clear,7801,doc/master/classROOT_1_1Fit_1_1DataRange.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange.html,1,['Clear'],['Clear']
Usability,"::DeleteItem(Bool_t force, void* ptr) const; voidExpand(UInt_t nCurr, UInt_t left); TGenCollectionProxy*TGenCollectionProxy::Initialize(Bool_t silent) const; virtual TGenCollectionProxy*InitializeEx(Bool_t silent); voidReadItems(int nElements, TBuffer& b); voidShrink(UInt_t nCurr, UInt_t left, Bool_t force); voidWriteItems(int nElements, TBuffer& b). private:. TEmulatedCollectionProxy&operator=(const TEmulatedCollectionProxy&). Data Members; public:. enum TGenCollectionProxy::[unnamed] { kBIT_ISSTRING; kBIT_ISTSTRING; kBOOL_t; };; enum TVirtualCollectionProxy::EProperty { kIsInitialized; kIsAssociative; kIsEmulated; kNeedDelete; };. public:. static const Int_tTVirtualCollectionProxy::fgIteratorArenaSizegreater than sizeof(void*) + sizeof(UInt_t). protected:. TClassRefTVirtualCollectionProxy::fClass; TGenCollectionProxy::MethodTGenCollectionProxy::fClearMethod cache for container accessors: clear container; void*TGenCollectionProxy::fCollectMethod to collect objects from container; void*TGenCollectionProxy::fConstructContainer accessors: block construct; map<std::string,TObjArray*>*TGenCollectionProxy::fConversionReadMemberWiseArray of bundle of TStreamerInfoActions to stream out (read) derived from another class.; TGenCollectionProxy::Method0TGenCollectionProxy::fCreateEnvMethod to allocate an Environment holder.; void*TGenCollectionProxy::fDestructContainer accessors: block destruct; ROOT::TCollectionProxyInfo::EnvironBase*TGenCollectionProxy::fEnvAddress of the currently proxied object; void*TGenCollectionProxy::fFeedContainer accessors: block feed; TGenCollectionProxy::MethodTGenCollectionProxy::fFirstContainer accessors: generic iteration: first; void*TGenCollectionProxy::fFunctionCopyIterator; void*TGenCollectionProxy::fFunctionCreateIterators; void*TGenCollectionProxy::fFunctionDeleteIterator; void*TGenCollectionProxy::fFunctionDeleteTwoIterators; void*TGenCollectionProxy::fFunctionNextIterator; TGenCollectionProxy::Value*TGenCollectionProxy::fKeyDescriptor of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEmulatedCollectionProxy.html:4467,clear,clear,4467,root/html534/TEmulatedCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TEmulatedCollectionProxy.html,1,['clear'],['clear']
Usability,"::DestroyWindow(); voidDisableOpen(Bool_t disable = kTRUE); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoubleClicked(TGListTreeItem* entry, Int_t btn)SIGNAL ; virtual voidDoubleClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual voidDrawActive(Handle_t id, TGListTreeItem* item); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidDrawOutline(Handle_t id, TGListTreeItem* item, Pixel_t col = 0xbbbbbb, Bool_t clear = kFALSE); virtual voidDrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::Emi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGListTree.html:5050,clear,clear,5050,root/html528/TGListTree.html,https://root.cern,https://root.cern/root/html528/TGListTree.html,4,['clear'],['clear']
Usability,"::DestroyWindow(); voidDisableOpen(Bool_t disable = kTRUE); Bool_tTQObject::Disconnect(const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(TQObject* sender, const char* signal = 0, void* receiver = 0, const char* slot = 0); static Bool_tTQObject::Disconnect(const char* class_name, const char* signal, void* receiver = 0, const char* slot = 0); virtual voidTQObject::Disconnected(const char*); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoubleClicked(TGListTreeItem* entry, Int_t btn)SIGNAL ; virtual voidDoubleClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual voidDrawActive(Handle_t id, TGListTreeItem* item); virtual voidTGFrame::DrawBorder(); virtual voidTGFrame::DrawClass() const; virtual TObject*TGFrame::DrawClone(Option_t* = """") const; virtual voidTGFrame::DrawCopy(Handle_t, Int_t, Int_t); virtual voidDrawOutline(Handle_t id, TGListTreeItem* item, Pixel_t col = 12303291, Bool_t clear = kFALSE); virtual voidDrawRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::Dump() const; voidTQObject::Emit(const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::Emi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGListTree.html:4868,clear,clear,4868,root/html602/TGListTree.html,https://root.cern,https://root.cern/root/html602/TGListTree.html,2,['clear'],['clear']
Usability,"::Draw, TTree::MakeClass and TTree::MakeSelector are available for data analysis using trees. The TTree::Draw method is a powerful yet simple way to look and draw the trees contents. It enables you to plot a variable (a leaf) with just one line of code. However, the Draw method falls short once you want to look at each entry and design more sophisticated acceptance criteria for your analysis. For these cases, you can use TTree::MakeClass. It creates a class that loops over the trees entries one by one. You can then expand it to do the logic of your analysis.; The TTree::MakeSelector is the recommended method for ROOT data analysis. It is especially important for large data set in a parallel processing configuration where the analysis is distributed over several processors and you can specify which entries to send to each processor. With MakeClass the user has control over the event loop, with MakeSelectorthe tree is in control of the event loop.; 12.20 Simple Analysis Using TTree::Draw; We will use the tree in cernstaff.root that was made by the macro in $ROOTSYS/tutorials/tree/staff.C.; First, open the file and lists its contents.; root[] TFile f (""cernstaff.root""); root[] f.ls(); TFile** cernstaff.root; TFile* cernstaff.root; KEY: TTree T;1 staff data from ascii file; We can see the TTree“T” in the file. We will use it to experiment with the TTree::Draw method, so let’s create a pointer to it:; root[] TTree *MyTree = T; Cling allows us to get simply the object by using it. Here we define a pointer to a TTree object and assign it the value of “T”, the TTree in the file. Cling looks for an object named “T” in the current ROOT file and returns it (this assumes that “T” has not previously been used to declare a variable or function).; In contrast, in compiled code, you can use:; TTree *MyTree;f.GetObject(""T"",MyTree);; To show the different Draw options, we create a canvas with four sub-pads. We will use one sub-pad for each Draw command.; root[] TCanvas *myCanvas = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:584872,Simpl,Simple,584872,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"::Dtor_t) (void *, unsigned long, int). Definition at line 92 of file TInterpreter.h. ◆ Generic_t. typedef void(* TInterpreter::CallFuncIFacePtr_t::Generic_t) (void *, int, void **, void *). Definition at line 90 of file TInterpreter.h. Member Enumeration Documentation. ◆ EKind. enum TInterpreter::CallFuncIFacePtr_t::EKind. EnumeratorkUninitialized ; kGeneric ; kCtor ; kDtor . Definition at line 83 of file TInterpreter.h. Constructor & Destructor Documentation. ◆ CallFuncIFacePtr_t() [1/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; ). inline . Definition at line 94 of file TInterpreter.h. ◆ CallFuncIFacePtr_t() [2/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; Generic_t ; func). inline . Definition at line 96 of file TInterpreter.h. ◆ CallFuncIFacePtr_t() [3/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; Ctor_t ; func). inline . Definition at line 98 of file TInterpreter.h. ◆ CallFuncIFacePtr_t() [4/4]. TInterpreter::CallFuncIFacePtr_t::CallFuncIFacePtr_t ; (; Dtor_t ; func). inline . Definition at line 100 of file TInterpreter.h. Member Data Documentation. ◆ [union]. union { ... } TInterpreter::CallFuncIFacePtr_t. ◆ fCtor. Ctor_t TInterpreter::CallFuncIFacePtr_t::fCtor. Definition at line 106 of file TInterpreter.h. ◆ fDtor. Dtor_t TInterpreter::CallFuncIFacePtr_t::fDtor. Definition at line 107 of file TInterpreter.h. ◆ fGeneric. Generic_t TInterpreter::CallFuncIFacePtr_t::fGeneric. Definition at line 105 of file TInterpreter.h. ◆ fKind. EKind TInterpreter::CallFuncIFacePtr_t::fKind. Definition at line 103 of file TInterpreter.h. Collaboration diagram for TInterpreter::CallFuncIFacePtr_t:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/meta/inc/TInterpreter.h. TInterpreterCallFuncIFacePtr_t. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html:3087,Guid,Guide,3087,doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html,https://root.cern,https://root.cern/doc/master/structTInterpreter_1_1CallFuncIFacePtr__t.html,1,['Guid'],['Guide']
Usability,::EContext_tkCXX_ScopeProto; static TTabCom::(anonymous)kDebug; static TTabCom::EContext_tkNUM_PAT; static TTabCom::EContext_tkROOT_Load; static TTabCom::EContext_tkSYS_EnvVar; static TTabCom::EContext_tkSYS_FileName; static TTabCom::EContext_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. v,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7598,Clear,ClearClasses,7598,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,4,['Clear'],"['Clear', 'ClearClasses']"
Usability,::EDataSetkTraining; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. Int_tfCurrentTree! index of the current tree in a chain; Double_tfCurrentTreeWeight! weight of the current tree in a chain; TTree*fData! pointer to the tree used as datasource; Double_tfDelta! Delta - used in stochastic minimisation - Default=0.; Double_tfEpsilon! Epsilon - used in stochastic minimisation - Default=0.; Double_tfEta! Eta - used in stochastic minimisation - Default=0.1; Double_tfEtaDecay! EtaDecay - Eta *= EtaDecay at each epoch - Default=1.; TTreeFormula*fEventWeight! formula representing the event weight; TObjArrayfFirstLayerCollection of the input neurons; subset of fNetwork; Double_tfLastAlpha! internal parameter used in line search; TObjArrayfLastLayerCollection of the output neurons; subset of fNetwork; TMultiLayerPerceptron::ELearningMethodfLearningMethod! The Learning Method; TTreeFormulaManager*fManager! TTreeFormulaManager for the weight and neurons; TObjArrayfNetworkCollection of all the neurons in the network; TNeuron::ENeuronTypefOutTypeType of output neurons; Int_tfReset! number of epochs between two resets of the search direction to the steepest descent - Default=50; TStringfStructureString containing the network structure; TObjArrayfSynapsesCollection of all the synapses in the network; Double_tfTau! Tau - used in line search - Default=3.; TEventList*fTest! EventList defining the events in the test dataset; Bool_tfTestOwner! internal flag whether one has to delete fTest or not; TEventList*fTraining! EventList defining the events in the training dataset; Bool_tfTrainingOwner! internal flag whether one has to delete fTraining or not; TNeuron::ENeuronTypefTypeType of hidden neurons; TStringfWeightString containing the event weight; TStringfextDString containing the derivative name; TStringfextFString containing the function name. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentati,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMultiLayerPerceptron.html:18583,Learn,Learning,18583,root/html602/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html602/TMultiLayerPerceptron.html,2,['Learn'],['Learning']
Usability,"::EProperty. { return fProperties; }. void * New() const; Return a new container object. void * New(void* arena) const; Execute the container constructor. void * NewArray(Int_t nElements) const; Return a new container object. void * NewArray(Int_t nElements, void* arena) const; Execute the container constructor. void Destructor(void* p, Bool_t dtorOnly = kFALSE) const; Execute the container destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; Execute the container array destructor. UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objectstart); Set the address of the container being proxied and keep track of the previous one. void PopProxy(); Reset the address of the container being proxied to the previous container. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass() const; Return a pointer to the TClass representing the content. EDataType GetType() const; If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete). void Commit(void* ). char * operator[](UInt_t idx) const; { return (char*)(const_cast<TVirtualCollectionProxy*>(this))->At(idx); }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bool_t read = kTRUE); begin_arena and end_arena should contain the location of a memory arena of size fgIteratorSize.; If the collection iterator are of that size or less, the iterators will be constructed in place in those location (new with placement); O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TVirtualCollectionProxy.html:4491,simpl,simple,4491,root/html534/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html534/TVirtualCollectionProxy.html,1,['simpl'],['simple']
Usability,"::EProperty. { return fProperties; }. void * New() const; Return a new container object. void * New(void* arena) const; Execute the container constructor. void * NewArray(Int_t nElements) const; Return a new container object. void * NewArray(Int_t nElements, void* arena) const; Execute the container constructor. void Destructor(void* p, Bool_t dtorOnly = kFALSE) const; Execute the container destructor. void DeleteArray(void* p, Bool_t dtorOnly = kFALSE) const; Execute the container array destructor. UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objectstart); Set the address of the container being proxied and keep track of the previous one. void PopProxy(); Reset the address of the container being proxied to the previous container. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass() const; Return a pointer to the TClass representing the content. EDataType GetType() const; If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete). void Commit(void* ). void Insert(const void* data, void* container, size_t size); Insert data into the container where data is a C-style array of the actual type contained in the collection; of the given size. For associative container (map, etc.), the data type is the pair<key,value>. char * operator[](UInt_t idx) const; { return (char*)(const_cast<TVirtualCollectionProxy*>(this))->At(idx); }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualCollectionProxy.html:4940,simpl,simple,4940,root/html602/TVirtualCollectionProxy.html,https://root.cern,https://root.cern/root/html602/TVirtualCollectionProxy.html,2,['simpl'],['simple']
Usability,"::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for an exponential function given the fit data Set the constant and slope assuming a simple exponential going through xmin and xmax of the data set ; Compute rough values of parameters for an exponential. ; Definition at line 267 of file HFitInterface.cxx. ◆ InitGaus(). void ROOT::Fit::InitGaus ; (; const ROOT::Fit::BinData & ; data, . TF1 * ; f1 . ). compute initial parameter for gaussian function given the fit data Set the sigma limits for zero top 10* initial rms values Set the initial parameter values in the TF1 ; Compute Initial values of parameters for a gaussian derived from function H1InitGaus defined in TH1.cxx. ; Definition at line 306 of file HFitInterface.cxx. ◆ lessRange(). bool ROOT::Fit::lessRange ; (; const std::pair< double, double > & ; r1, . const std::pair< double, double > & ; r2 . ). Definition at line 73 of file DataRange.cxx. ◆ operator<<(). ostream & ROOT::Fit::operator<< ; (; ostream & ; os, . const ROOT::Fit::Box & ; b . ). Definition at line 374 of file SparseData.cxx. ◆ UnBinFit(). TFitResultPtr ROOT::Fit::UnBinFit ; (; ROOT::Fit::UnBinData * ; data, . TF1 * ; f1, . Foption_t & ; option, . const ROOT::Math::MinimizerOptions & ; moption . ). fit an unbin data set (from tree or from histogram buffer) using a TF1 pointer and fit options. ; N.B. ownership of fit data is passed to the UnBinFit function which will be responsible of deleting the data after the fit. User calling this function MUST NOT delete UnBinData after calling it. ; Definition at line 821 of file HFitImpl.cxx. Variable Documentation. ◆ gDefaultErrorDef. double ROOT::Fit::gDefaultErrorDef = ROOT::Math::MinimizerOptions::DefaultErrorDef(). Definition at line 48 of file Fitter.cxx. ◆ gInitialResultStatus. const int ROOT::Fit::gInitialResultStatus = -99. Definition at line 43 of file FitResult.cxx. ROOTFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Fit.html:17987,Guid,Guide,17987,doc/master/namespaceROOT_1_1Fit.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Fit.html,1,['Guid'],['Guide']
Usability,"::Fit::FitResult::Printvoid Print(std::ostream &os, bool covmat=false) constprint the result and optionally covariance matrix and correlationsDefinition FitResult.cxx:389; ROOT::Fit::FitResult::Probdouble Prob() constp value of the fit (chi2 probability)Definition FitResult.cxx:320; ROOT::Fit::FitterFitter class, entry point for performing all type of fits.Definition Fitter.h:77; ROOT::Fit::Fitter::Resultconst FitResult & Result() constget fit resultDefinition Fitter.h:394; ROOT::Fit::Fitter::Fitbool Fit(const Data &data, const Function &func, const ROOT::EExecutionPolicy &executionPolicy=ROOT::EExecutionPolicy::kSequential)fit a data set using any generic model function If data set is binned a least square fit is performed...Definition Fitter.h:144; ROOT::Fit::Fitter::SetFunctionvoid SetFunction(const IModelFunction &func, bool useGradient=false)Set the fitted function (model function) from a parametric function interface.Definition Fitter.cxx:59; ROOT::Math::WrappedMultiTF1TemplClass to Wrap a ROOT Function class (like TF1) in a IParamMultiFunction interface of multi-dimensions...Definition WrappedMultiTF1.h:48; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF1::SetFitResultvirtual void SetFitResult(const ROOT::Fit::FitResult &result, const Int_t *indpar=nullptr)Set the result from the fit parameter values, errors, chi2, etc... Optionally a pointer to a vector (...Definition TF1.cxx:3355; TF3A 3-Dim function with parameters.Definition TF3.h:28; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; v@ vDefinition rootcling_impl.cxx:3699; AuthorLorenzo Moneta ; Definition in file exampleFit3D.C. tutorialsfitexampleFit3D.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/exampleFit3D_8C.html:5117,Guid,Guide,5117,doc/master/exampleFit3D_8C.html,https://root.cern,https://root.cern/doc/master/exampleFit3D_8C.html,1,['Guid'],['Guide']
Usability,"::GSLMultiRootFinder::kDNewton with name ""DNewton"": discrete Newton algorithm . ROOT::Math::GSLMultiRootFinder::kBroyden with name ""Broyden"": Broyden algorithm . Definition at line 95 of file GSLMultiRootFinder.h. Public Types; enum  EDerivType { kHybridSJ; , kHybridJ; , kNewton; , kGNewton; };  enumeration specifying the types of GSL multi root finders requiring the derivatives More...;  ; enum  EType { kHybridS; , kHybrid; , kDNewton; , kBroyden; };  enumeration specifying the types of GSL multi root finders which do not require the derivatives More...;  . Public Member Functions;  GSLMultiRootFinder (const char *name=nullptr);  ;  GSLMultiRootFinder (const GSLMultiRootFinder &)=delete;  ;  GSLMultiRootFinder (EDerivType type);  create a multi-root finder based on an algorithm requiring function derivative ;  ;  GSLMultiRootFinder (EType type);  create a multi-root finder based on an algorithm not requiring function derivative ;  ;  GSLMultiRootFinder (GSLMultiRootFinder &&)=delete;  ; virtual ~GSLMultiRootFinder ();  destructor ;  ; int AddFunction (const ROOT::Math::IMultiGenFunction &func);  ; template<class Function > ; int AddFunction (Function &f, int ndim);  same method as before but using any function implementing the operator(), so can be wrapped in a IMultiGenFunction interface ;  ; void Clear ();  clear list of functions ;  ; unsigned int Dim () const;  return the number of sunctions set in the class. ;  ; const double * Dx () const;  return the last step size ;  ; const double * FVal () const;  return the function values f(X) solving the system i.e. ;  ; int Iterations () const;  Return number of iterations. ;  ; const char * Name () const;  Return the algorithm name used for solving Note the name is available only after having called solved Otherwise an empyty string is returned. ;  ; GSLMultiRootFinder & operator= (const GSLMultiRootFinder &)=delete;  ; GSLMultiRootFinder & operator= (GSLMultiRootFinder &&)=delete;  ; int PrintLevel () const;  return ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html:3314,Clear,Clear,3314,doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiRootFinder.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"::GetOption() const; virtual voidTProofServ::GetOptions(Int_t* argc, char** argv); const char*TProofServ::GetOrdinal() const; const char*TProofServ::GetPackageDir() const; const char*TProofServ::GetPrefix() const; TProof*TProofServ::GetProof() const; Int_tTProofServ::GetProtocol() const; Int_tTProofServ::GetQuerySeqNum() const; Float_tTProofServ::GetRealTime() const; static Long_tTProofServ::GetResMemMax(); const char*TProofServ::GetService() const; const char*TProofServ::GetSessionDir() const; const char*TProofServ::GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*TProofServ::GetSocket() const; virtual const char*TObject::GetTitle() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; static Long_tTProofServ::GetVirtMemMax(); const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TProofServLite.html:7408,resume,resume,7408,root/html530/TProofServLite.html,https://root.cern,https://root.cern/root/html530/TProofServLite.html,2,['resume'],['resume']
Usability,"::GetRedo ; (; ); const. inline . Definition at line 75 of file TQCommand.h. ◆ GetRedoArgs(). Long_t * TQCommand::GetRedoArgs ; (; ); const. Returns a pointer to array of redo arguments. ; Definition at line 752 of file TQCommand.cxx. ◆ GetRedoName(). const char * TQCommand::GetRedoName ; (; ); const. Returns the name of redo command. ; Definition at line 736 of file TQCommand.cxx. ◆ GetStatus(). Int_t TQCommand::GetStatus ; (; ); const. Returns a number of sequential undo or redo operations. ; Definition at line 792 of file TQCommand.cxx. ◆ GetTitle(). const char * TQCommand::GetTitle ; (; ); const. overridevirtual . Returns command description. ; By default, ""ClassName::RedoName(args)_ClassName::UndoName(args)"" ; Reimplemented from TObject.; Definition at line 713 of file TQCommand.cxx. ◆ GetUndo(). TQConnection * TQCommand::GetUndo ; (; ); const. inline . Definition at line 76 of file TQCommand.h. ◆ GetUndoArgs(). Long_t * TQCommand::GetUndoArgs ; (; ); const. Returns a pointer to array of undo arguments. ; Definition at line 760 of file TQCommand.cxx. ◆ GetUndoName(). const char * TQCommand::GetUndoName ; (; ); const. Returns the name of undo command. ; Definition at line 744 of file TQCommand.cxx. ◆ Init(). void TQCommand::Init ; (; const char * ; cl, . void * ; object, . const char * ; redo, . const char * ; undo . ). protectedvirtual . Common protected method used in several constructors. ; Definition at line 120 of file TQCommand.cxx. ◆ IsA(). TClass * TQCommand::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TList.; Reimplemented in TQUndoManager.; Definition at line 98 of file TQCommand.h. ◆ IsEqual(). Bool_t TQCommand::IsEqual ; (; const TObject * ; obj); const. overridevirtual . Equal comparison. ; The commands are equal if they are applied to the same object and have the same Redo/Undo actions; More complicated commands might want to override this function. ; Reimplemented from TObject.; Definitio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:39061,undo,undo,39061,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"::Getenvvirtual const char * Getenv(const char *env)Get environment variable.Definition TSystem.cxx:1665; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeCacheUnzipA TTreeCache which exploits parallelized decompression of its own content.Definition TTreeCacheUnzip.h:35; TTreeCacheUnzip::IsParallelUnzipstatic bool IsParallelUnzip()Static function that tells wether the multithreading unzipping is activated.Definition TTreeCacheUnzip.cxx:416; TTreeCacheA cache to speed-up the reading of ROOT datasets.Definition TTreeCache.h:32; TTreeCache::IsAutoCreatedbool IsAutoCreated() constDefinition TTreeCache.h:150; TTreeCache::SetBufferSizeInt_t SetBufferSize(Long64_t buffersize) overrideChange the underlying buffer size of the cache.Definition TTreeCache.cxx:2073; TTreeCache::SetLearnEntriesstatic void SetLearnEntries(Int_t n=10)Static function to set the number of entries to be used in learning mode The default value for n is 1...Definition TTreeCache.cxx:2145; TTreeCache::GetTreeTTree * GetTree() constDefinition TTreeCache.h:149; TTreeCache::SetEntryRangevirtual void SetEntryRange(Long64_t emin, Long64_t emax)Set the minimum and maximum entry number to be processed this information helps to optimize the numbe...Definition TTreeCache.cxx:2106; TTreeCache::DropBranchvirtual Int_t DropBranch(TBranch *b, bool subbranches=false)Remove a branch to the list of branches to be stored in the cache this function is called by TBranch:...Definition TTreeCache.cxx:541; TTreeCache::SetAutoCreatedvoid SetAutoCreated(bool val)Definition TTreeCache.h:164; TTreeCache::StopLearningPhasevirtual void StopLearningPhase()This is the counterpart of StartLearningPhase() and can be used to stop the learning phase.Definition TTreeCache.cxx:2187; TTreeCache::Printvoid Print(Option_t *option="""") const overridePrint cache statistics.Definition TTreeCa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:429554,learn,learning,429554,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['learn'],['learning']
Usability,"::InvReLUstd::shared_ptr< std::function< double(double)> > InvReLUDefinition NeuralNet.cxx:17; TMVA::DNN::GaussComplementstd::shared_ptr< std::function< double(double)> > GaussComplementDefinition NeuralNet.cxx:13; TMVA::DNN::Gaussstd::shared_ptr< std::function< double(double)> > GaussDefinition NeuralNet.cxx:12; TMVA::DNN::MinimizerTypeMinimizerType< list all the minimizer typesDefinition NeuralNet.h:321; TMVA::DNN::Sigmoidstd::shared_ptr< std::function< double(double)> > SigmoidDefinition NeuralNet.cxx:26; TMVA::DNN::gaussDoubledouble gaussDouble(double mean, double sigma)Definition NeuralNet.cxx:35; TMVA::DNN::ModeOutputValuesModeOutputValuesDefinition NeuralNet.h:179; TMVA::DNN::ModeOutputValues::SOFTMAX@ SOFTMAX; TMVA::DNN::ModeOutputValues::DIRECT@ DIRECT; TMVA::DNN::ModeOutputValues::SIGMOID@ SIGMOID; TMVA::DNN::SoftSignstd::shared_ptr< std::function< double(double)> > SoftSignDefinition NeuralNet.cxx:32; TMVA::DNN::InvSoftPlusstd::shared_ptr< std::function< double(double)> > InvSoftPlusDefinition NeuralNet.cxx:19; TMVA::DNN::ReLUstd::shared_ptr< std::function< double(double)> > ReLUDefinition NeuralNet.cxx:25; TMVA::DNN::isFlagSetbool isFlagSet(T flag, T value)Definition NeuralNet.h:212; TMVA::DNN::randomIntint randomInt(int maxValue)Definition NeuralNet.cxx:52; TMVA::DNN::InvTanhShiftstd::shared_ptr< std::function< double(double)> > InvTanhShiftDefinition NeuralNet.cxx:23; TMVA::DNN::DropContainerstd::vector< char > DropContainerDefinition NeuralNet.h:227; TMVA::DNN::InvSymmReLUstd::shared_ptr< std::function< double(double)> > InvSymmReLUDefinition NeuralNet.cxx:21; TMVA::DNN::InvLinearstd::shared_ptr< std::function< double(double)> > InvLinearDefinition NeuralNet.cxx:16; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; sumstatic uint64_t sum(uint64_t i)Definition Factory.cxx:2345; outputstatic void output(). tmvatmvasrcNeuralNet.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8cxx_source.html:32408,Guid,Guide,32408,doc/master/NeuralNet_8cxx_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8cxx_source.html,1,['Guid'],['Guide']
Usability,"::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* si",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrack.html:3044,Clear,ClearStamps,3044,root/html534/TEveTrack.html,https://root.cern,https://root.cern/root/html534/TEveTrack.html,3,['Clear'],['ClearStamps']
Usability,"::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTEveTrack::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveTrackProjected.html:2693,Clear,ClearStamps,2693,root/html534/TEveTrackProjected.html,https://root.cern,https://root.cern/root/html534/TEveTrackProjected.html,3,['Clear'],['ClearStamps']
Usability,"::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); Float_tTEveLine::CalculateLineLength() const; virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); voidTPointSet3D::ClearIds(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEvePointSet*TEvePointSet::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEvePointSet::ClonePoints(const TEvePointSet& e); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTPointSet3D::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TEveLineProjected.html:2581,Clear,ClearStamps,2581,root/html534/TEveLineProjected.html,https://root.cern,https://root.cern/root/html534/TEveLineProjected.html,3,['Clear'],['ClearStamps']
Usability,"::Log ; (; ); const. inlineprivate . Definition at line 93 of file Results.h. ◆ operator[](). virtual const std::vector< Float_t > & TMVA::Results::operator[] ; (; Int_t ; ievt); const. pure virtual . Implemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ SetTreeType(). void TMVA::Results::SetTreeType ; (; Types::ETreeType ; type). inline . Definition at line 66 of file Results.h. ◆ Store(). void TMVA::Results::Store ; (; TObject * ; obj, . const char * ; alias = nullptr . ). Definition at line 86 of file Results.cxx. ◆ Streamer(). void TMVA::Results::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::ResultsClassification, TMVA::ResultsMulticlass, and TMVA::ResultsRegression. ◆ StreamerNVirtual(). void TMVA::Results::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 96 of file Results.h. Member Data Documentation. ◆ fDsi. const DataSetInfo* TMVA::Results::fDsi. private . -> a pointer to the datasetinfo-object ; Definition at line 89 of file Results.h. ◆ fHistAlias. std::map<TString, TObject *>* TMVA::Results::fHistAlias. private . -> internal map for quick access to stored histograms ; Definition at line 91 of file Results.h. ◆ fLogger. MsgLogger* TMVA::Results::fLogger. mutableprivate . ! message logger ; Definition at line 92 of file Results.h. ◆ fStorage. TList* TMVA::Results::fStorage. private . -> stores all the result-histograms ; Definition at line 90 of file Results.h. ◆ fTreeType. Types::ETreeType TMVA::Results::fTreeType. private . tree type for this result ; Definition at line 88 of file Results.h. Libraries for TMVA::Results:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Results.h; tmva/tmva/src/Results.cxx. TMVAResults. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Results.html:16338,Guid,Guide,16338,doc/master/classTMVA_1_1Results.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Results.html,1,['Guid'],['Guide']
Usability,"::LorentzVectorClass describing a generic LorentzVector in the 4D space-time, using the specified coordinate system ...Definition LorentzVector.h:59; ROOT::Math::PositionVector3DClass describing a generic position vector (point) in 3 dimensions.Definition PositionVector3D.h:55; ROOT::Math::QuaternionRotation class with the (3D) rotation represented by a unit quaternion (u, i, j, k).Definition Quaternion.h:49; ROOT::Math::Rotation3DRotation class with the (3D) rotation represented by a 3x3 orthogonal matrix.Definition Rotation3D.h:67; ROOT::Math::RotationXRotation class representing a 3D rotation about the X axis by the angle of rotation.Definition RotationX.h:45; ROOT::Math::RotationYRotation class representing a 3D rotation about the Y axis by the angle of rotation.Definition RotationY.h:45; ROOT::Math::RotationZYXRotation class with the (3D) rotation represented by angles describing first a rotation of an angle p...Definition RotationZYX.h:63; ROOT::Math::RotationZRotation class representing a 3D rotation about the Z axis by the angle of rotation.Definition RotationZ.h:45; R; double; MathNamespace for new Math classes and functions.; ROOT::Math::gv_detail::distdouble dist(Rotation3D const &r1, Rotation3D const &r2)Definition 3DDistances.cxx:48; ROOT::Math::gv_detail::convertvoid convert(R1 const &, R2 const)Definition 3DConversions.h:41; ROOT::Math::operator*AxisAngle operator*(RotationX const &r1, AxisAngle const &r2)Multiplication of an axial rotation by an AxisAngle.Definition AxisAngleXother.cxx:181; ROOT::Math::DistanceAxisAngle::Scalar Distance(const AxisAngle &r1, const R &r2)Distance between two rotations.Definition AxisAngle.h:321; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. mathgenvectorincMathGenVectorAxisAngle.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html:19566,Guid,Guide,19566,doc/master/GenVector_2AxisAngle_8h_source.html,https://root.cern,https://root.cern/doc/master/GenVector_2AxisAngle_8h_source.html,1,['Guid'],['Guide']
Usability,"::Measurement::AddFunctionObject ; (; const RooStats::HistFactory::PreprocessFunction ; function). inline . add a preprocess function object ; Definition at line 74 of file Measurement.h. ◆ AddPOI(). void RooStats::HistFactory::Measurement::AddPOI ; (; const std::string & ; POI). inline . append parameter to vector of PoIs ; Definition at line 49 of file Measurement.h. ◆ AddPreprocessFunction(). void RooStats::HistFactory::Measurement::AddPreprocessFunction ; (; std::string ; name, . std::string ; expression, . std::string ; dependencies . ). Add a preprocessed function by giving the function a name, a functional expression, and a string with a bracketed list of dependencies (eg ""SigXsecOverSM[0,3]"") ; Definition at line 112 of file Measurement.cxx. ◆ ClearConstantParams(). void RooStats::HistFactory::Measurement::ClearConstantParams ; (; ). inline . empty vector of constant parameters ; Definition at line 60 of file Measurement.h. ◆ ClearParamValues(). void RooStats::HistFactory::Measurement::ClearParamValues ; (; ). inline . clear map of parameter values ; Definition at line 70 of file Measurement.h. ◆ GetAsimovDatasets(). std::vector< RooStats::HistFactory::Asimov > & RooStats::HistFactory::Measurement::GetAsimovDatasets ; (; ). inline . get vector of defined Asimov Datasets ; Definition at line 82 of file Measurement.h. ◆ GetBinHigh(). int RooStats::HistFactory::Measurement::GetBinHigh ; (; ). inline . Definition at line 98 of file Measurement.h. ◆ GetBinLow(). int RooStats::HistFactory::Measurement::GetBinLow ; (; ). inline . Definition at line 97 of file Measurement.h. ◆ GetConstantParams(). std::vector< std::string > & RooStats::HistFactory::Measurement::GetConstantParams ; (; ). inline . get vector of all constant parameters ; Definition at line 62 of file Measurement.h. ◆ GetFunctionObjects() [1/2]. std::vector< RooStats::HistFactory::PreprocessFunction > & RooStats::HistFactory::Measurement::GetFunctionObjects ; (; ). inline . get vector of defined functio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html:16323,Clear,ClearParamValues,16323,doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HistFactory_1_1Measurement.html,1,['Clear'],['ClearParamValues']
Usability,"::Minimizer::Status() const; intROOT::Math::Minimizer::Strategy() const; doubleROOT::Math::Minimizer::Tolerance() const; virtual intROOT::Math::Minimizer::VariableIndex(const string& name) const; virtual stringROOT::Math::Minimizer::VariableName(unsigned int ivar) const; virtual const double*X() const. protected:. voidGetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. Data Members; protected:. TMVA::IFitterTarget*fFitness; doublefMinValue; ROOT::Math::MinimizerOptionsROOT::Math::Minimizer::fOptionsminimizer options; ROOT::Math::GeneticMinimizerParametersfParameters; vector<TMVA::Interval*>fRanges; vector<double>fResult; intROOT::Math::Minimizer::fStatusstatus of minimizer ; boolROOT::Math::Minimizer::fValidErrorflag to control if errors have been validated (Hesse has been run in case of Minuit). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; GeneticMinimizer(int i = 0); GeneticMinimizer (int = 0);. virtual ~GeneticMinimizer(). void Clear(). void SetFunction(const ROOT::Math::IMultiGenFunction& func). bool SetLimitedVariable(unsigned int , const string& , double , double , double , double ). bool SetVariable(unsigned int ivar, const string& name, double val, double step). bool SetFixedVariable(unsigned int ivar, const string& name, double val). bool Minimize(). double MinValue() const. double Edm() const. const double * X() const. const double * MinGradient() const. unsigned int NCalls() const. unsigned int NDim() const. unsigned int NFree() const. bool ProvidesError() const. const double * Errors() const. double CovMatrix(unsigned int i, unsigned int j) const. void SetParameters(const ROOT::Math::GeneticMinimizerParameters& params). void SetRandomSeed(int seed); { fParameters.fSeed = seed; }. void SetOptions(const ROOT::Math::MinimizerOptions& opt). void GetGeneticOptions(ROOT::Math::MinimizerOptions& opt) const. » Last changed: root/mathcore:$Id » Last generated: 2015-09-08 16:59; This page has been automatically",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ROOT__Math__GeneticMinimizer.html:5485,Clear,Clear,5485,root/html534/ROOT__Math__GeneticMinimizer.html,https://root.cern,https://root.cern/root/html534/ROOT__Math__GeneticMinimizer.html,1,['Clear'],['Clear']
Usability,"::Notify, itself called by TRef::GetObject. ; The function reads the branch containing the object referenced by the TRef. ; Reimplemented from TObject.; Definition at line 115 of file TBranchRef.cxx. ◆ Print(). void TBranchRef::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print the TRefTable branch. ; Reimplemented from TBranch.; Definition at line 159 of file TBranchRef.cxx. ◆ ReadLeavesImpl(). void TBranchRef::ReadLeavesImpl ; (; TBuffer & ; b). protected . This function called by TBranch::GetEntry overloads TBranch::ReadLeaves. ; Definition at line 167 of file TBranchRef.cxx. ◆ Reset(). void TBranchRef::Reset ; (; Option_t * ; option = """"). overridevirtual . Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. . Reimplemented from TBranch.; Definition at line 187 of file TBranchRef.cxx. ◆ ResetAfterMerge(). void TBranchRef::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Reset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared. ; Reimplemented from TBranch.; Definition at line 198 of file TBranchRef.cxx. ◆ SetParent(). Int_t TBranchRef::SetParent ; (; const TObject * ; object, . Int_t ; branchID . ). virtual . Set the current parent branch. ; This function is called by TBranchElement::GetEntry() and TBranchElement::Fill() when reading or writing branches that may contain referenced objects. ; Definition at line 212 of file TBranchRef.cxx. ◆ SetRequestedEntry(). virtual void TBranchRef::SetRequestedEntry ; (; Long64_t ; entry). inlinevirtual . Definition at line 55 of file TBranchRef.h. ◆ Streamer(). void TBranchRef::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TBranch. ◆ StreamerNVirtual(). void TBranchRef::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TBranchRef.h. Member Data Documentation. ◆ fRefTable. TRefTable* TBranchRef::fRefTable. protected . pointer ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:31458,clear,cleared,31458,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['clear'],['cleared']
Usability,"::Printvoid Print(const Option_t *option="""") const overridePrint this list.Definition TEntryList.cxx:1101; TEntryList::fStringHashULong_t fStringHash! Hash value of a string of treename and filenameDefinition TEntryList.h:40; TEntryList::Relocatestatic Int_t Relocate(const char *fn, const char *newroot, const char *oldroot=nullptr, const char *enlnm=nullptr)Relocate entry list 'enlnm' in file 'fn' replacing 'oldroot' with 'newroot' in filenames.Definition TEntryList.cxx:1465; TEntryList::fListsTList * fListsa list of underlying entry lists for each tree of a chainDefinition TEntryList.h:31; TEntryList::~TEntryList~TEntryList() overrideDestructor.Definition TEntryList.cxx:329; TEntryList::fTreeNameTString fTreeNamename of the treeDefinition TEntryList.h:38; TEntryList::AddSubListvoid AddSubList(TEntryList *elist)Add a sub entry list to the current list.Definition TEntryList.cxx:572; TEntryList::TEntryListTEntryList()default c-torDefinition TEntryList.cxx:167; TEntryList::Subtractvirtual void Subtract(const TEntryList *elist)Remove all the entries of this entry list, that are contained in elist.Definition TEntryList.cxx:1332; TEntryList::Addvirtual void Add(const TEntryList *elist)Add 2 entry lists.Definition TEntryList.cxx:365; TEntryList::operator||friend TEntryList operator||(TEntryList &elist1, TEntryList &elist2)Definition TEntryList.cxx:1385; TEntryList::GetNvirtual Long64_t GetN() constDefinition TEntryList.h:78; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjArrayAn array of TObjects.Definition TObjArray.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; int; rootsTCanvas * roots()Definition roots.C:1. treetreeincTEntryList.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEntryList_8h_source.html:15253,Guid,Guide,15253,doc/master/TEntryList_8h_source.html,https://root.cern,https://root.cern/doc/master/TEntryList_8h_source.html,1,['Guid'],['Guide']
Usability,"::RActionBase > actionPtr)Definition RResultPtr.hxx:199; ROOT::RDF::RResultPtr::endRIterationHelper< T >::Iterator_t end()Return an iterator to the end of the contained object if this makes sense, throw a compilation error ...Definition RResultPtr.hxx:267; bool; T2#define T2Definition md5.inl:147; ROOT::Detail::RDFDefinition RooAbsDataHelper.h:80; ROOT::Detail::RDF::GetMergeableValuestd::unique_ptr< RMergeableVariations< T > > GetMergeableValue(ROOT::RDF::Experimental::RResultMap< T > &rmap)Retrieve mergeable values after calling ROOT::RDF::VariationsFor .Definition RResultMap.hxx:211; ROOT::Detail::RDF::MakeResultPtrRResultPtr< T > MakeResultPtr(const std::shared_ptr< T > &r, RLoopManager &df, std::shared_ptr< ROOT::Internal::RDF::RActionBase > actionPtr)Create a RResultPtr and set its pointer to the corresponding RAction This overload is invoked by non-...Definition RResultPtr.hxx:444; ROOT::Internal::RDFDefinition RArrowDS.hxx:23; ROOT::Internal::RDF::CloneResultAndActionROOT::RDF::Experimental::RResultMap< T > CloneResultAndAction(const ROOT::RDF::Experimental::RResultMap< T > &inmap)Clones an RResultMap and its corresponding RVariedAction.Definition RResultMap.hxx:64; ROOT::Internal::operator==bool operator==(const RConcurrentHashColl::HashValue &lhs, const RConcurrentHashColl::HashValue &rhs)Definition RConcurrentHashColl.hxx:69; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOT::RDF::Experimental::VariationsForRResultMap< T > VariationsFor(RResultPtr< T > resPtr)Produce all required systematic variations for the given result.Definition RDFHelpers.hxx:219; ROOT::TypeTraitsROOT type_traits extensions.Definition TypeTraits.hxx:21; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699. treedataframeincROOTRResultPtr.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RResultPtr_8hxx_source.html:27735,Guid,Guide,27735,doc/master/RResultPtr_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RResultPtr_8hxx_source.html,1,['Guid'],['Guide']
Usability,"::RDF::RInterface< Proxied, DataSource >inline; Vary(std::initializer_list< std::string > colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(std::initializer_list< std::string > colNames, F &&expression, const ColumnNames_t &inputColumns, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(std::string_view colName, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName="""")ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(std::string_view colName, std::string_view expression, std::size_t nVariations, std::string_view variationName="""")ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(const std::vector< std::string > &colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(std::initializer_list< std::string > colNames, std::string_view expression, std::size_t nVariations, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; Vary(const std::vector< std::string > &colNames, std::string_view expression, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inline; VaryImpl(const std::vector< std::string > &colNames, F &&expression, const ColumnNames_t &inputColumns, const std::vector< std::string > &variationTags, std::string_view variationName)ROOT::RDF::RInterface< Proxied, DataSource >inlineprivate. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface-members.html:16568,Guid,Guide,16568,doc/master/classROOT_1_1RDF_1_1RInterface-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface-members.html,1,['Guid'],['Guide']
Usability,"::RNTupleImporter::InitDestination(std::string_view destFileName); 131{; 132 fDestFileName = destFileName;; 133 fDestFile = std::unique_ptr<TFile>(TFile::Open(fDestFileName.c_str(), ""UPDATE""));; 134 if (!fDestFile || fDestFile->IsZombie()) {; 135 return R__FAIL(""cannot open dest file "" + std::string(fDestFileName));; 136 }; 137 ; 138 return RResult<void>::Success();; 139}; 140 ; 141void ROOT::Experimental::RNTupleImporter::ReportSchema(); 142{; 143 for (const auto &f : fImportFields) {; 144 std::cout << ""Importing '"" << f.fField->GetFieldName() << ""' ["" << f.fField->GetTypeName() << ""]\n"";; 145 }; 146 for (const auto &f : Internal::GetProjectedFieldsOfModel(*fModel).GetFieldZero().GetSubFields()) {; 147 std::cout << ""Importing (projected) '"" << f->GetFieldName() << ""' ["" << f->GetTypeName() << ""]\n"";; 148 }; 149}; 150 ; 151void ROOT::Experimental::RNTupleImporter::ResetSchema(); 152{; 153 fImportBranches.clear();; 154 fImportFields.clear();; 155 fLeafCountCollections.clear();; 156 fImportTransformations.clear();; 157 fModel = RNTupleModel::CreateBare();; 158 fEntry = nullptr;; 159}; 160 ; 161ROOT::Experimental::RResult<void> ROOT::Experimental::RNTupleImporter::PrepareSchema(); 162{; 163 ResetSchema();; 164 ; 165 // Browse through all branches and their leaves, create corresponding fields and prepare the memory buffers for; 166 // reading and writing. Usually, reading and writing share the same memory buffer, i.e. the object is read from TTree; 167 // and written as-is to the RNTuple. There are exceptions, e.g. for leaf count arrays and C strings.; 168 for (auto b : TRangeDynCast<TBranch>(*fSourceTree->GetListOfBranches())) {; 169 assert(b);; 170 const auto firstLeaf = static_cast<TLeaf *>(b->GetListOfLeaves()->First());; 171 assert(firstLeaf);; 172 ; 173 const bool isLeafList = b->GetNleaves() > 1;; 174 const bool isCountLeaf = firstLeaf->IsRange(); // A leaf storing the number of elements of a leaf count array; 175 const bool isClass = (firstLeaf->IsA() == TLeafEle",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html:6155,clear,clear,6155,doc/master/RNTupleImporter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8cxx_source.html,1,['clear'],['clear']
Usability,"::RNTupleModel::GetDescriptionconst std::string & GetDescription() constDefinition RNTupleModel.hxx:386; ROOT::Experimental::RNTupleModel::AddFieldvoid AddField(std::unique_ptr< RFieldBase > field)Adds a field whose type is not known at compile time.Definition RNTupleModel.cxx:312; ROOT::Experimental::RNTupleModel::RegisterSubfieldvoid RegisterSubfield(std::string_view qualifiedFieldName)Register a subfield so it can be accessed directly from entries belonging to the model.Definition RNTupleModel.cxx:335; ROOT::Experimental::RNTupleModel::operator=RNTupleModel & operator=(const RNTupleModel &)=delete; ROOT::Experimental::RNTupleModel::~RNTupleModel~RNTupleModel()=default; ROOT::Experimental::RNTupleModel::fIsFrozenbool fIsFrozenChanged by Freeze() / Unfreeze() and by the RUpdater.Definition RNTupleModel.hxx:215; ROOT::Experimental::RNTupleModel::Unfreezevoid Unfreeze()Definition RNTupleModel.cxx:493; ROOT::Experimental::RNTupleModel::fFieldZerostd::unique_ptr< RFieldZero > fFieldZeroHierarchy of fields consisting of simple types and collections (sub trees)Definition RNTupleModel.hxx:198; ROOT::Experimental::RNTupleWriteOptionsCommon user-tunable settings for storing ntuples.Definition RNTupleWriteOptions.hxx:48; ROOT::Experimental::RNTupleWriterAn RNTuple that gets filled with entries (data) and writes them to storage.Definition RNTupleWriter.hxx:60; ROOT::Experimental::RResultThe class is used as a return type for operations that can fail; wraps a value of type T or an RError...Definition RError.hxx:194; ROOT::Experimental::Internal::GetProjectedFieldsOfModelRProjectedFields & GetProjectedFieldsOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:42; ROOT::Experimental::Internal::GetFieldZeroOfModelRFieldZero & GetFieldZeroOfModel(RNTupleModel &model)Definition RNTupleModel.cxx:36; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleModel_8hxx_source.html:32526,simpl,simple,32526,doc/master/RNTupleModel_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleModel_8hxx_source.html,1,['simpl'],['simple']
Usability,"::RVecImpl< T > &&RHS);  ; RVecN & operator= (RVecN &&RHS);  ; RVecN & operator= (std::initializer_list< T > IL);  ; RVecN operator[] (const RVecN< V, M > &conds) const;  ; reference operator[] (size_type idx);  ; const_reference operator[] (size_type idx) const;  ;  Public Member Functions inherited from ROOT::Detail::VecOps::RVecImpl< T >;  RVecImpl (const RVecImpl &)=delete;  ;  ~RVecImpl ();  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void append (in_iter in_start, in_iter in_end);  Add the specified range to the end of the SmallVector. ;  ; void append (size_type NumInputs, const T &Elt);  Append NumInputs copies of Elt to the end. ;  ; void append (std::initializer_list< T > IL);  ; template<typename in_iter , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type> ; void assign (in_iter in_start, in_iter in_end);  ; void assign (size_type NumElts, const T &Elt);  ; void assign (std::initializer_list< T > IL);  ; void clear ();  ; template<typename... ArgTypes> ; reference emplace_back (ArgTypes &&...Args);  ; iterator erase (const_iterator CI);  ; iterator erase (const_iterator CS, const_iterator CE);  ; iterator insert (iterator I, const T &Elt);  ; template<typename ItTy , typename = typename std::enable_if<std::is_convertible< typename std::iterator_traits<ItTy>::iterator_category, std::input_iterator_tag>::value>::type> ; iterator insert (iterator I, ItTy From, ItTy To);  ; iterator insert (iterator I, size_type NumToInsert, const T &Elt);  ; void insert (iterator I, std::initializer_list< T > IL);  ; iterator insert (iterator I, T &&Elt);  ; RVecImpl & operator= (const RVecImpl &RHS);  ; RVecImpl & operator= (RVecImpl &&RHS);  ; void pop_back_n (size_type NumItems);  ; T pop_back_val ();  ; void reserve (size_type N",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html:14835,clear,clear,14835,doc/v632/classROOT_1_1VecOps_1_1RVec.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1VecOps_1_1RVec.html,2,['clear'],['clear']
Usability,"::Register ; (; RDFInternal::RVariationBase * ; varPtr). Definition at line 995 of file RLoopManager.cxx. ◆ Register() [4/5]. void RLoopManager::Register ; (; RFilterBase * ; filterPtr). Definition at line 959 of file RLoopManager.cxx. ◆ Register() [5/5]. void RLoopManager::Register ; (; RRangeBase * ; rangePtr). Definition at line 974 of file RLoopManager.cxx. ◆ RegisterCallback(). void RLoopManager::RegisterCallback ; (; ULong64_t ; everyNEvents, . std::function< void(unsigned int)> && ; f . ). Definition at line 1033 of file RLoopManager.cxx. ◆ Report(). void RLoopManager::Report ; (; ROOT::RDF::RCutFlowReport & ; rep); const. finalvirtual . Call FillReport on all booked filters. ; Implements ROOT::Detail::RDF::RNodeBase.; Definition at line 1012 of file RLoopManager.cxx. ◆ Run(). void RLoopManager::Run ; (; bool ; jit = true). Start the event loop with a different mechanism depending on IMT/no IMT, data source/no data source. ; Also perform a few setup and clean-up operations (jit actions if necessary, clear booked actions after the loop...). The jitting phase is skipped if the jit parameter is false (unsafe, use with care). ; Definition at line 889 of file RLoopManager.cxx. ◆ RunAndCheckFilters(). void RLoopManager::RunAndCheckFilters ; (; unsigned int ; slot, . Long64_t ; entry . ). private . Execute actions and make sure named filters are called for each event. ; Named filters must be called even if the analysis logic would not require it, lest they report confusing results. ; Definition at line 708 of file RLoopManager.cxx. ◆ RunDataSource(). void RLoopManager::RunDataSource ; (; ). private . Run event loop over data accessed through a DataSource, in sequence. ; Definition at line 635 of file RLoopManager.cxx. ◆ RunDataSourceMT(). void RLoopManager::RunDataSourceMT ; (; ). private . Run event loop over data accessed through a DataSource, in parallel. ; Definition at line 666 of file RLoopManager.cxx. ◆ RunEmptySource(). void RLoopManager::RunEmptySource ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html:23918,clear,clear,23918,doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RLoopManager.html,1,['clear'],['clear']
Usability,"::RooNumConvPdf ; (; const char * ; name, . const char * ; title, . RooRealVar & ; convVar, . RooAbsPdf & ; pdf, . RooAbsPdf & ; resmodel . ). Definition at line 89 of file RooNumConvPdf.cxx. ◆ RooNumConvPdf() [3/3]. RooNumConvPdf::RooNumConvPdf ; (; const RooNumConvPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 110 of file RooNumConvPdf.cxx. ◆ ~RooNumConvPdf(). RooNumConvPdf::~RooNumConvPdf ; (; ). override . Destructor. ; Definition at line 129 of file RooNumConvPdf.cxx. Member Function Documentation. ◆ Class(). static TClass * RooNumConvPdf::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooNumConvPdf::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooNumConvPdf::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file RooNumConvPdf.h. ◆ clearConvolutionWindow(). void RooNumConvPdf::clearConvolutionWindow ; (; ). inline . Definition at line 43 of file RooNumConvPdf.h. ◆ clone(). TObject * RooNumConvPdf::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 36 of file RooNumConvPdf.h. ◆ conv(). RooNumConvolution & RooNumConvPdf::conv ; (; ); const. inlineprotected . Definition at line 63 of file RooNumConvPdf.h. ◆ convIntConfig(). RooNumIntConfig & RooNumConvPdf::convIntConfig ; (; ). inline . Definition at line 42 of file RooNumConvPdf.h. ◆ DeclFileName(). static const char * RooNumConvPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file RooNumConvPdf.h. ◆ evaluate(). double RooNumConvPdf::evaluate ; (; ); const. overridevirtual . Calculate and return value of p.d.f. ; Implements RooAbsReal.; Definition at line 136 of file RooNumConvPdf.cxx. ◆ genContext(). RooAbsGenContext * RooNumConvPdf::genContext ; (; const RooArgSet & ; vars, . const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumConvPdf.html:77713,clear,clearConvolutionWindow,77713,doc/master/classRooNumConvPdf.html,https://root.cern,https://root.cern/doc/master/classRooNumConvPdf.html,1,['clear'],['clearConvolutionWindow']
Usability,"::RuleCut::SetCutDoMin ; (; Int_t ; i, . Bool_t ; v . ). inline . Definition at line 68 of file RuleCut.h. ◆ SetCutMax(). void TMVA::RuleCut::SetCutMax ; (; Int_t ; i, . Double_t ; v . ). inline . Definition at line 67 of file RuleCut.h. ◆ SetCutMin(). void TMVA::RuleCut::SetCutMin ; (; Int_t ; i, . Double_t ; v . ). inline . Definition at line 66 of file RuleCut.h. ◆ SetNeve(). void TMVA::RuleCut::SetNeve ; (; Double_t ; n). inline . Definition at line 63 of file RuleCut.h. ◆ SetNvars(). void TMVA::RuleCut::SetNvars ; (; UInt_t ; nc). inline . Definition at line 143 of file RuleCut.h. ◆ SetPurity(). void TMVA::RuleCut::SetPurity ; (; Double_t ; ssb). inline . Definition at line 64 of file RuleCut.h. ◆ SetSelector(). void TMVA::RuleCut::SetSelector ; (; Int_t ; i, . UInt_t ; s . ). inline . Definition at line 65 of file RuleCut.h. Member Data Documentation. ◆ fCutDoMax. std::vector<Char_t> TMVA::RuleCut::fCutDoMax. private . Definition at line 92 of file RuleCut.h. ◆ fCutDoMin. std::vector<Char_t> TMVA::RuleCut::fCutDoMin. private . Definition at line 91 of file RuleCut.h. ◆ fCutMax. std::vector<Double_t> TMVA::RuleCut::fCutMax. private . Definition at line 90 of file RuleCut.h. ◆ fCutMin. std::vector<Double_t> TMVA::RuleCut::fCutMin. private . Definition at line 89 of file RuleCut.h. ◆ fCutNeve. Double_t TMVA::RuleCut::fCutNeve. private . Definition at line 93 of file RuleCut.h. ◆ fLogger. MsgLogger* TMVA::RuleCut::fLogger. mutableprivate . Definition at line 97 of file RuleCut.h. ◆ fPurity. Double_t TMVA::RuleCut::fPurity. private . Definition at line 94 of file RuleCut.h. ◆ fSelector. std::vector<UInt_t> TMVA::RuleCut::fSelector. private . Definition at line 88 of file RuleCut.h. Libraries for TMVA::RuleCut:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/RuleCut.h; tmva/tmva/src/RuleCut.cxx. TMVARuleCut. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1RuleCut.html:6502,Guid,Guide,6502,doc/master/classTMVA_1_1RuleCut.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1RuleCut.html,1,['Guid'],['Guide']
Usability,"::Safety ; (; const Double_t * ; point, . Bool_t ; in = kTRUE . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Safety_v(). void TGeoTrd1::Safety_v ; (; const Double_t * ; points, . const Bool_t * ; inside, . Double_t * ; safe, . Int_t ; vecsize . ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SavePrimitive(). void TGeoTrd1::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TGeoBBox. ◆ SetDimensions(). void TGeoTrd1::SetDimensions ; (; Double_t * ; param). overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [1/2]. void TGeoTrd1::SetPoints ; (; Double_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetPoints() [2/2]. void TGeoTrd1::SetPoints ; (; Float_t * ; points); const. overridevirtual . Reimplemented from TGeoBBox. ◆ SetVertex(). void TGeoTrd1::SetVertex ; (; Double_t * ; vertex); const. ◆ Sizeof3D(). void TGeoTrd1::Sizeof3D ; (; ); const. overridevirtual . Reimplemented from TGeoBBox. ◆ Streamer(). void TGeoTrd1::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoBBox. ◆ StreamerNVirtual(). void TGeoTrd1::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file TGeoTrd1.h. Member Data Documentation. ◆ fDx1. Double_t TGeoTrd1::fDx1. protected . Definition at line 20 of file TGeoTrd1.h. ◆ fDx2. Double_t TGeoTrd1::fDx2. protected . Definition at line 21 of file TGeoTrd1.h. ◆ fDy. Double_t TGeoTrd1::fDy. protected . Definition at line 22 of file TGeoTrd1.h. ◆ fDz. Double_t TGeoTrd1::fDz. protected . Definition at line 23 of file TGeoTrd1.h. Libraries for TGeoTrd1:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoTrd1.h. TGeoTrd1. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTrd1.html:29544,Guid,Guide,29544,doc/master/classTGeoTrd1.html,https://root.cern,https://root.cern/doc/master/classTGeoTrd1.html,1,['Guid'],['Guide']
Usability,"::SetBinsLengthvoid SetBinsLength(Int_t n=-1) overrideSet total number of bins including under/overflow.Definition TProfile2D.cxx:1947; TProfile2D::BuildOptionsvoid BuildOptions(Double_t zmin, Double_t zmax, Option_t *option)Set Profile2D histogram structure and options.Definition TProfile2D.cxx:189; TProfile2D::AddBool_t Add(TF1 *h1, Double_t c1=1, Option_t *option="""") overridePerforms the operation: this = this + c1*f1 .Definition TProfile2D.cxx:221; TProfile2D::operator=TProfile2D & operator=(const TProfile2D &profile)Definition TProfile2D.cxx:211; TProfile2D::SetBuffervoid SetBuffer(Int_t buffersize, Option_t *option="""") overrideSet the buffer size in units of 8 bytes (double).Definition TProfile2D.cxx:1956; TProfile2D::fTsumwz2Double_t fTsumwz2Total Sum of weight*Z*Z.Definition TProfile2D.h:40; TProfile2D::GetBinSumw2virtual TArrayD * GetBinSumw2()Definition TProfile2D.h:121; TProfile2D::GetNumberOfBinsDouble_t GetNumberOfBins()Definition TProfile2D.h:151; TProfile2D::GetBDouble_t * GetB()Definition TProfile2D.h:63; TProfile2D::SetErrorOptionvirtual void SetErrorOption(Option_t *option="""")Set option to compute profile2D errors.Definition TProfile2D.cxx:1994; TProfile2D::GetZmaxvirtual Double_t GetZmax() constDefinition TProfile2D.h:126; TProfile2D::GetZminvirtual Double_t GetZmin() constDefinition TProfile2D.h:125; TProfile2D::GetBinContentDouble_t GetBinContent(Int_t bin) const overrideReturn bin content of a Profile2D histogram.Definition TProfile2D.cxx:829; TProfileHelperDefinition TProfileHelper.h:30; TProfileProfile Histogram.Definition TProfile.h:32; bool; double; int; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; c2return c2Definition legend2.C:14; v@ vDefinition rootcling_impl.cxx:3699. histhistincTProfile2D.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8h_source.html:21217,Guid,Guide,21217,doc/master/TProfile2D_8h_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8h_source.html,1,['Guid'],['Guide']
Usability,"::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2105 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2127 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2144 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2159 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:49673,learn,learning,49673,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"::SetEntryRange ; (; Long64_t ; emin, . Long64_t ; emax . ). virtual . Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2106 of file TTreeCache.cxx. ◆ SetFile(). void TTreeCache::SetFile ; (; TFile * ; file, . TFile::ECacheAction ; action = TFile::kDisconnect . ). overridevirtual . Change the file that is being cached. ; Reimplemented from TFileCacheRead.; Definition at line 2128 of file TTreeCache.cxx. ◆ SetLearnEntries(). void TTreeCache::SetLearnEntries ; (; Int_t ; n = 10). static . Static function to set the number of entries to be used in learning mode The default value for n is 10. ; n must be >= 1 ; Definition at line 2145 of file TTreeCache.cxx. ◆ SetLearnPrefill(). void TTreeCache::SetLearnPrefill ; (; TTreeCache::EPrefillType ; type = kNoPrefill). virtual . Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ; The two value currently supported are:; TTreeCache::kNoPrefill disable the prefilling; TTreeCache::kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:49743,learn,learning,49743,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,"::SetIsInCache ; (; Int_t ; basketNumber). inline . Mark if the basket is currently in the cache. ; Definition at line 89 of file TBranchCacheInfo.h. ◆ SetState(). void ROOT::Internal::TBranchCacheInfo::SetState ; (; Int_t ; basketNumber, . EStates ; what . ). inlineprivate . Mark if the basket has been marked has the 'what' state. ; Definition at line 68 of file TBranchCacheInfo.h. ◆ SetUsed(). void ROOT::Internal::TBranchCacheInfo::SetUsed ; (; Int_t ; basketNumber). inline . Mark if the basket has been marked as 'used'. ; Definition at line 79 of file TBranchCacheInfo.h. ◆ TestState(). bool ROOT::Internal::TBranchCacheInfo::TestState ; (; Int_t ; basketNumber, . EStates ; what . ); const. inlineprivate . Return true if the basket has been marked as having the 'what' state. ; Definition at line 60 of file TBranchCacheInfo.h. ◆ UpdatePedestal(). void ROOT::Internal::TBranchCacheInfo::UpdatePedestal ; (; Int_t ; basketNumber). inlineprivate . Update the pedestal to be less or equal to basketNumber, shift the bits if needed. ; Definition at line 48 of file TBranchCacheInfo.h. ◆ Veto(). void ROOT::Internal::TBranchCacheInfo::Veto ; (; Int_t ; basketNumber). inline . Mark if the basket should be vetoed in the next round. ; This happens when the basket was loaded in the previous round and was not used and is overlapping to the next round/cluster ; Definition at line 98 of file TBranchCacheInfo.h. Member Data Documentation. ◆ fBasketPedestal. Int_t ROOT::Internal::TBranchCacheInfo::fBasketPedestal {-1}. private . Definition at line 44 of file TBranchCacheInfo.h. ◆ fInfo. TBits ROOT::Internal::TBranchCacheInfo::fInfo. private . Definition at line 45 of file TBranchCacheInfo.h. Libraries for ROOT::Internal::TBranchCacheInfo:. [legend]; The documentation for this class was generated from the following file:; tree/tree/inc/TBranchCacheInfo.h. ROOTInternalTBranchCacheInfo. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html:5561,Guid,Guide,5561,doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchCacheInfo.html,1,['Guid'],['Guide']
Usability,"::SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH1::SetTickLengthvirtual void SetTickLength(Float_t length=0.02, Option_t *axis=""X"")Set the axis' tick marks length.Definition Haxis.cxx:302; TH1::GetKurtosisvirtual Double_t GetKurtosis(Int_t axis=1) constDefinition TH1.cxx:7744; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of the TNamed.Definition TNamed.cxx:164; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::Obsoletevoid Obsolete(const char *method, const char *asOfVers, const char *removedFromVers) constUse this method to declare a method obsolete.Definition TObject.cxx:1055; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TVectorTTVectorT.Definition TVectorT.h:27; TVirtualFFTTVirtualFFT is an interface class for Fast Fourier Transforms.Definition TVirtualFFT.h:88; TVirtualHistPainterAbstract interface to a histogram painter.Definition TVirtualHistPainter.h:30; bool; double; int; unsigned int; Interpolate#define Interpolate(a, x, b, y)Definition geom.c:179; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; c2return c2Definition legend2.C:14; v@ vDefinition rootcling_impl.cxx:3699; Foption_tDefinition Foption.h:24; Drawth1 Draw(). histhistincTH1.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8h_source.html:88189,Guid,Guide,88189,doc/master/TH1_8h_source.html,https://root.cern,https://root.cern/doc/master/TH1_8h_source.html,1,['Guid'],['Guide']
Usability,"::SetStreamerElementNumber ; (; TStreamerElement * ; elem, . Int_t ; comp_type . ). finalvirtual . Function is called from TStreamerInfo WriteBuffer and Readbuffer functions and add/verify next element in sql tables This calls allows separate data, correspondent to one class member, from another. ; Implements TBuffer.; Definition at line 509 of file TBufferSQL2.cxx. ◆ SkipObjectAny(). void TBufferSQL2::SkipObjectAny ; (; ). finalvirtual . ?????? Skip any kind of object from buffer !!!!!! fix me, not yet implemented Should be just skip of current column later ; Implements TBuffer.; Definition at line 861 of file TBufferSQL2.cxx. ◆ SqlObjectData(). TSQLObjectData * TBufferSQL2::SqlObjectData ; (; Long64_t ; objid, . TSQLClassInfo * ; sqlinfo . ). protected . Creates TSQLObjectData for specified object id and specified class. ; Object data for each class can be stored in two different tables. First table contains data in column-wise form for simple types like integer, strings and so on when second table contains any other data which cannot be converted into column-wise representation. TSQLObjectData will contain results of the requests to both such tables for concrete object id. ; Definition at line 205 of file TBufferSQL2.cxx. ◆ SqlObjectInfo(). Bool_t TBufferSQL2::SqlObjectInfo ; (; Long64_t ; objid, . TString & ; clname, . Version_t & ; version . ). protected . Returns object info like classname and version Should be taken from buffer, which is produced in the beginning. ; Definition at line 160 of file TBufferSQL2.cxx. ◆ SqlReadAny(). void * TBufferSQL2::SqlReadAny ; (; Long64_t ; keyid, . Long64_t ; objid, . TClass ** ; cl, . void * ; obj = nullptr . ). Recreate object from sql structure. ; Return pointer to read object. if (cl!=0) returns pointer to class of object ; Definition at line 132 of file TBufferSQL2.cxx. ◆ SqlReadArray(). template<typename T > . R__ALWAYS_INLINE Int_t TBufferSQL2::SqlReadArray ; (; T *& ; arr, . Bool_t ; is_static = kFALSE . ). protecte",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:67195,simpl,simple,67195,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,1,['simpl'],['simple']
Usability,"::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tTSelectorDraw::SplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSelectorDraw::TakeAction(); virtual voidTSelectorDraw::TakeEstimate(); virtual voidTSelectorDraw::Terminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSelectorDraw::ClearFormula(); virtual Bool_tTSelectorDraw::CompileVariables(const char* varexp = """", const char* selection = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTSelectorDraw::InitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TEveSelectorToEventList(const TEveSelectorToEventList&); TEveSelectorToEventList&operator=(const TEveSelectorToEventList&). Data Members; public:. enum TSelectorDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTSelectorDraw::fAction! Action type; Bool_tTSelectorDraw::fCleanElisttrue if original Tree elist must be saved; Int_tTSelectorDraw::fDimensionDimension of the current expression; Long64_tTSelectorDraw::fDraw! Last entry loop number when object was drawn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveSelectorToEventList.html:7138,Clear,ClearFormula,7138,root/html528/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html528/TEveSelectorToEventList.html,2,['Clear'],['ClearFormula']
Usability,"::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tTSelectorDraw::SplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTSelectorDraw::TakeAction(); virtual voidTSelectorDraw::TakeEstimate(); virtual voidTSelectorDraw::Terminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSelectorDraw::ClearFormula(); virtual Bool_tTSelectorDraw::CompileVariables(const char* varexp = """", const char* selection = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTSelectorDraw::InitArrays(Int_t newsize); voidTObject::MakeZombie(). private:. TEveSelectorToEventList(const TEveSelectorToEventList&); TEveSelectorToEventList&operator=(const TEveSelectorToEventList&). Data Members; public:. enum TSelectorDraw::[unnamed] { kWarn; };; enum TSelector::EAbort { kContinue; kAbortProcess; kAbortFile; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TSelector::EAbortTSelector::fAbortabort status; Int_tTSelectorDraw::fAction! Action type; Bool_tTSelectorDraw::fCleanElisttrue if original Tree elist must be saved; Long64_tTSelectorDraw::fCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tTSelectorDraw::fDime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TEveSelectorToEventList.html:7244,Clear,ClearFormula,7244,root/html532/TEveSelectorToEventList.html,https://root.cern,https://root.cern/root/html532/TEveSelectorToEventList.html,1,['Clear'],['ClearFormula']
Usability,"::Steffenson. ROOT::Math::VavilovAccurate. ROOT::Math::VavilovAccurateCdf. ROOT::Math::VavilovAccuratePdf. ROOT::Math::VavilovAccurateQuantile. ROOT::Math::VavilovFast. ROOT::Math::VirtualIntegratorMultiDim←. ROOT::Math::AdaptiveIntegratorMultiDim. ROOT::Math::GSLMCIntegrator. ROOT::Math::VirtualIntegratorOneDim←. ROOT::Math::GSLIntegrator. ROOT::Math::GaussIntegrator; ←. ROOT::Math::GaussLegendreIntegrator. ROOT::Math::WrappedMultiTF1. ROOT::Math::WrappedTF1. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FCNBase←. ROOT::Minuit2::FCNGradientBase. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FCNGradientBase. ROOT::Minuit2::FumiliFCNBase. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::Minuit2Minimizer. ROOT::Minuit2::MnFumiliMinimize. ROOT::Minuit2::MnMigrad. ROOT::Minuit2::MnMinimize. ROOT::Minuit2::MnScan. ROOT::Minuit2::MnSimplex. ROOT::Minuit2::ModularFunctionMinimizer←. ROOT::Minuit2::CombinedMinimizer. ROOT::Minuit2::FumiliMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::Minuit2::ScanMinimizer. ROOT::Minuit2::SimplexMinimizer. ROOT::Minuit2::VariableMetricMinimizer. ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TArrayProxy<ROOT::TArrayType<bool,0> >. ROOT::TArrayProxy<ROOT::TArrayType<char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<double,0> >. ROOT::TArrayProxy<ROOT::TArrayType<float,0> >. ROOT::TArrayProxy<ROOT::TArrayType<int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<short,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> >. ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> >. ROOT::TBranchProxyClassDescriptor. ROOT::TBranchProxyDescriptor. ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> >. ROOT::TClaArrayProxy<ROOT::TArrayType<ULong64_t,0> >. ROOT::TClaArrayProxy<R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassHierarchy.html:4922,Simpl,SimplexMinimizer,4922,root/html602/ClassHierarchy.html,https://root.cern,https://root.cern/root/html602/ClassHierarchy.html,2,['Simpl'],['SimplexMinimizer']
Usability,"::StorageTypeRooAbsData::defaultStorageType. protected:. TIterator*RooAbsData::_cacheIter! Iterator over cached variables; RooArgSetRooAbsData::_cachedVars! External variables cached with this data set; TDirectory*RooDirItem::_dir! Associated directory; RooAbsDataStore*RooAbsData::_dstoreData storage implementation; TIterator*RooAbsData::_iterator! Iterator over dimension variables; static Int_tRooPrintable::_nameLength; map<std::string,RooAbsData*>RooAbsData::_ownedComponentsOwned external components; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool ; RooArgSetRooAbsData::_varsDimensions of this data set; RooArgSet_varsNoWgtVars without weight variable ; RooRealVar*_wgtVarPointer to weight variable (if set) ; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooDataSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooDataSet(); Default constructor for persistence. RooDataSet(const char* name, const char* title, const RooArgSet& vars, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg(), const RooCmdArg& arg3 = RooCmdArg(), const RooCmdArg& arg4 = RooCmdArg(), const RooCmdArg& arg5 = RooCmdArg(), const RooCmdArg& arg6 = RooCmdArg(), const RooCmdArg& arg7 = RooCmdArg(), const RooCmdArg& arg8 = RooCmdArg()); Construct an unbinned dataset from a RooArgSet defining the dimensions of the dat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataSet.html:17789,Clear,Clear,17789,root/html532/RooDataSet.html,https://root.cern,https://root.cern/root/html532/RooDataSet.html,1,['Clear'],['Clear']
Usability,"::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 194 of file TComplex.h. ◆ Tan(). static TComplex TComplex::Tan ; (; const TComplex & ; c). inlinestatic . Definition at line 130 of file TComplex.h. ◆ TanH(). static TComplex TComplex::TanH ; (; const TComplex & ; c). inlinestatic . Definition at line 146 of file TComplex.h. ◆ Theta(). Double_t TComplex::Theta ; (; ); const. inline . Definition at line 50 of file TComplex.h. Friends And Related Symbol Documentation. ◆ operator*. template<class T , enable_if_arithmetic< T > = true> . TComplex operator* ; (; T ; d, . const TComplex & ; c . ). friend . Definition at line 98 of file TComplex.h. ◆ operator+. template<class T , enable_if_arithmetic< T > = true> . TComplex operator+ ; (; T ; d, . const TComplex & ; c . ). friend . Definition at line 100 of file TComplex.h. ◆ operator-. template<class T , enable_if_arithmetic< T > = true> . TComplex operator- ; (; T ; d, . const TComplex & ; c . ). friend . Definition at line 104 of file TComplex.h. ◆ operator/. template<class T , enable_if_arithmetic< T > = true> . TComplex operator/ ; (; T ; d, . const TComplex & ; c . ). friend . Definition at line 102 of file TComplex.h. ◆ operator<<. std::ostream & operator<< ; (; std::ostream & ; out, . const TComplex & ; c . ). friend . Definition at line 41 of file TComplex.cxx. ◆ operator>>. std::istream & operator>> ; (; std::istream & ; in, . TComplex & ; c . ). friend . Definition at line 49 of file TComplex.cxx. Member Data Documentation. ◆ fIm. Double_t TComplex::fIm. protected . Definition at line 33 of file TComplex.h. ◆ fRe. Double_t TComplex::fRe. protected . Definition at line 32 of file TComplex.h. Libraries for TComplex:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/TComplex.h; math/mathcore/src/TComplex.cxx. TComplex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTComplex.html:14326,Guid,Guide,14326,doc/master/classTComplex.html,https://root.cern,https://root.cern/doc/master/classTComplex.html,1,['Guid'],['Guide']
Usability,::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file TColorWheel.h. Member Data Documentation. ◆ fArc. TArc* TColorWheel::fArc {nullptr}. private . ! pointer to utility arc ; Definition at line 34 of file TColorWheel.h. ◆ fCanvas. TCanvas* TColorWheel::fCanvas {nullptr}. private . ! Canvas used to draw the Color Wheel ; Definition at line 33 of file TColorWheel.h. ◆ fDr. Double_t TColorWheel::fDr {0.}. private . Circles radius. ; Definition at line 29 of file TColorWheel.h. ◆ fGraph. TGraph* TColorWheel::fGraph {nullptr}. private . ! pointer to utility graph ; Definition at line 37 of file TColorWheel.h. ◆ fLine. TLine* TColorWheel::fLine {nullptr}. private . ! pointer to utility line ; Definition at line 35 of file TColorWheel.h. ◆ fR0. Double_t TColorWheel::fR0 {0.}. private . Minimum radius for circles. ; Definition at line 28 of file TColorWheel.h. ◆ fRgray. Double_t TColorWheel::fRgray {0.}. private . Maximum radius of gray circle. ; Definition at line 30 of file TColorWheel.h. ◆ fRmax. Double_t TColorWheel::fRmax {0.}. private . Maximum radius for rectangles. ; Definition at line 27 of file TColorWheel.h. ◆ fRmin. Double_t TColorWheel::fRmin {0.}. private . Minimum radius for rectangles. ; Definition at line 26 of file TColorWheel.h. ◆ fText. TText* TColorWheel::fText {nullptr}. private . ! pointer to utility text ; Definition at line 36 of file TColorWheel.h. ◆ fX. Double_t TColorWheel::fX[15]. private . X coordinates of the center of circles. ; Definition at line 31 of file TColorWheel.h. ◆ fY. Double_t TColorWheel::fY[15]. private . Y coordinates of the center of circles. ; Definition at line 32 of file TColorWheel.h. Libraries for TColorWheel:. [legend]; The documentation for this class was generated from the following files:; graf2d/gpad/inc/TColorWheel.h; graf2d/gpad/src/TColorWheel.cxx. TColorWheel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTColorWheel.html:20769,Guid,Guide,20769,doc/master/classTColorWheel.html,https://root.cern,https://root.cern/doc/master/classTColorWheel.html,1,['Guid'],['Guide']
Usability,::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 63 of file TGFSComboBox.h. ◆ Update(). void TGTreeLBEntry::Update ; (; TGLBEntry * ; e). overridevirtual . Update text and picture of a listbox entry. ; Reimplemented from TGLBEntry.; Definition at line 165 of file TGFSComboBox.cxx. Member Data Documentation. ◆ fActive. Bool_t TGTreeLBEntry::fActive. protected . true if active ; Definition at line 34 of file TGFSComboBox.h. ◆ fFontStruct. FontStruct_t TGTreeLBEntry::fFontStruct. protected . font ; Definition at line 36 of file TGFSComboBox.h. ◆ fgDefaultFont. const TGFont * TGTreeLBEntry::fgDefaultFont = nullptr. staticprotected . Definition at line 40 of file TGFSComboBox.h. ◆ fgDefaultGC. TGGC * TGTreeLBEntry::fgDefaultGC = nullptr. staticprotected . Definition at line 41 of file TGFSComboBox.h. ◆ fNormGC. GContext_t TGTreeLBEntry::fNormGC. protected . entry drawing context ; Definition at line 35 of file TGFSComboBox.h. ◆ fPath. TGString* TGTreeLBEntry::fPath. protected . entry path ; Definition at line 29 of file TGFSComboBox.h. ◆ fPic. const TGPicture* TGTreeLBEntry::fPic. protected . entry picture ; Definition at line 30 of file TGFSComboBox.h. ◆ fSelPic. TGSelectedPicture* TGTreeLBEntry::fSelPic. protected . selected picture ; Definition at line 31 of file TGFSComboBox.h. ◆ fText. TGString* TGTreeLBEntry::fText. protected . entry description ; Definition at line 28 of file TGFSComboBox.h. ◆ fTHeight. UInt_t TGTreeLBEntry::fTHeight. protected . height of entry text ; Definition at line 33 of file TGFSComboBox.h. ◆ fTWidth. UInt_t TGTreeLBEntry::fTWidth. protected . width of entry text ; Definition at line 32 of file TGFSComboBox.h. Libraries for TGTreeLBEntry:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGFSComboBox.h; gui/gui/src/TGFSComboBox.cxx. TGTreeLBEntry. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTreeLBEntry.html:34218,Guid,Guide,34218,doc/master/classTGTreeLBEntry.html,https://root.cern,https://root.cern/doc/master/classTGTreeLBEntry.html,1,['Guid'],['Guide']
Usability,"::TCpuMatrix< AFloat >::operator() ; (; size_t ; i, . size_t ; j . ); const. inline . Return matrix element in row i and column j. ; Definition at line 161 of file CpuMatrix.h. ◆ operator=() [1/3]. template<typename AFloat > . TCpuMatrix & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; const TCpuMatrix< AFloat > & ; ). default . ◆ operator=() [2/3]. template<typename AFloat > . TCpuMatrix< AFloat > & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; const TMatrixT< AFloat > & ; ). copy from a TMAtrixT . ; Deep copy without re-creating a new buffer . ◆ operator=() [3/3]. template<typename AFloat > . TCpuMatrix & TMVA::DNN::TCpuMatrix< AFloat >::operator= ; (; TCpuMatrix< AFloat > && ; ). default . ◆ Print(). template<typename AFloat > . void TMVA::DNN::TCpuMatrix< AFloat >::Print ; (; ); const. inline . Definition at line 175 of file CpuMatrix.h. ◆ Zero(). template<typename AFloat > . void TMVA::DNN::TCpuMatrix< AFloat >::Zero. Clear content of the matrix and initialize to zero elements. ; Definition at line 269 of file CpuMatrix.h. Member Data Documentation. ◆ fBuffer. template<typename AFloat > . TCpuBuffer<AFloat> TMVA::DNN::TCpuMatrix< AFloat >::fBuffer. The buffer holding the matrix elements in column-major format. ; Definition at line 91 of file CpuMatrix.h. ◆ fNCols. template<typename AFloat > . size_t TMVA::DNN::TCpuMatrix< AFloat >::fNCols. private . Definition at line 94 of file CpuMatrix.h. ◆ fNRows. template<typename AFloat > . size_t TMVA::DNN::TCpuMatrix< AFloat >::fNRows. private . Definition at line 95 of file CpuMatrix.h. ◆ fOnes. template<typename AFloat > . std::vector< AFloat > TMVA::DNN::TCpuMatrix< AFloat >::fOnes {}. staticprivate . Vector filled with ones used for BLAS calls. ; Definition at line 88 of file CpuMatrix.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cpu/CpuMatrix.h; tmva/tmva/src/DNN/Architectures/Cpu/CpuMatrix.cxx. TMVADNNTCpuMatrix. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html:11093,Guid,Guide,11093,doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCpuMatrix.html,1,['Guid'],['Guide']
Usability,"::ToyMCSample::GenerateToyData; [#13387] - Please recover SrvAuthenticate from libSrvAuth library; [#14541] - [ROOT-6193] Editor for palette axis cannot set title properties; [#15104] - new PyROOT/cppyy fails to pickle enums; [#15161] - Attribute (getitem) differences for PyROOT objects in ROOT master; [#15234] - cppyy - wrong object type when iterating over a polymorphic container; [#15269] - Iterators in pyROOT working differently in ROOT master compared to 6.30/02; [#15315] - PyROOT Example with inheriting from ROOT.Math.IMultiGenFunction doesn’t work after recent cppyy upgrade; [#15425] - TTreeProcessorMP processes events multiple times when there are more threads than entries; [#15755] - [RF][HS3] Higgs discovery workspaces roundtrip; [#15874] - [Hist] Backwards compatibility broken for THnSparseL in 6.32; [#15887] - Broken plot .C macros for default Name() argument in plotOn(); [#15977] - [gui] Event StatusBar does not work well when TMarker outside of zoom region; [#15986] - Problems with TUri compilation; [#16031] - VecOps binary functions not using the right types; [#16038] - Could NOT find Vdt error when using 6.32.02 docker image; [#16087] - [docs] Potential typo in function name case: DistanceToPrimitive; [#16201] - PyROOT Support most recent numba version 0.60.0 intervals; [ROOT-6286] - Reading a TChain and TTreeCache; [ROOT-7991] - THnSparse::ProjectionND yields disfunctional histogram; [ROOT-8238] - TPrincipal tries to make histograms with nbin=0; [ROOT-8519] - Bug when use simple math functions in TTree::SetAlias(). Release 6.32.06; Published on September 22, 2024; Items addressed in this release; This is the first ROOT release supporting macOS 15 Sequoia. [#15178] - ROOT generates CMake warnings when building from the tarball; [#16219] - Module map on the new XCode version for macos15-beta; [#16249] - Iterating with a range for does one extra iteration; [ROOT-10902] - SMatrix read from TTree contains all zeroes. HEAD of the v6-32-00-patches branch. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/release-notes.html:46029,simpl,simple,46029,doc/v632/release-notes.html,https://root.cern,https://root.cern/doc/v632/release-notes.html,1,['simpl'],['simple']
Usability,"::Type< Internal::TStdBitsetHelper< Bitset_t > >::constructstatic void * construct(void *, size_t)Definition TCollectionProxyInfo.h:794; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::collectstatic void * collect(void *coll, void *array)Definition TCollectionProxyInfo.h:798; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::nextstatic void * next(void *env)Definition TCollectionProxyInfo.h:787; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::PCont_tCont_t * PCont_tDefinition TCollectionProxyInfo.h:762; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::Iterators_tIterators Iterators_tDefinition TCollectionProxyInfo.h:856; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::firststatic void * first(void *env)Definition TCollectionProxyInfo.h:779; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::clearstatic void * clear(void *env)Definition TCollectionProxyInfo.h:775; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::Env_tEnviron< Iter_t > Env_tDefinition TCollectionProxyInfo.h:760; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::sizestatic void * size(void *env)Definition TCollectionProxyInfo.h:770; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::objectstatic PCont_t object(void *ptr)Definition TCollectionProxyInfo.h:767; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::PEnv_tEnv_t * PEnv_tDefinition TCollectionProxyInfo.h:761; ROOT::Detail::TCollectionProxyInfo::Type< Internal::TStdBitsetHelper< Bitset_t > >::Cont_tBitset_t Cont_tDefinition TCollectionProxyInfo.h:757; ROOT::Detail::TCollectionProxyInfo::TypeSmall helper to encapsulate basic data accesses for all STL continers.Definition TCollectionProxyInfo.h:295; ROOT::Deta",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html:51701,clear,clearstatic,51701,doc/master/TCollectionProxyInfo_8h_source.html,https://root.cern,https://root.cern/doc/master/TCollectionProxyInfo_8h_source.html,2,['clear'],"['clear', 'clearstatic']"
Usability,"::VariableInfo> TMVA::VariableTransformBase::fSpectators. private . event spectators [saved to weight file --> TODO ] ; Definition at line 160 of file VariableTransformBase.h. ◆ fTargets. std::vector<TMVA::VariableInfo> TMVA::VariableTransformBase::fTargets. private . event targets [saved to weight file --> TODO ] ; Definition at line 159 of file VariableTransformBase.h. ◆ fTMVAVersion. TMVAVersion_t TMVA::VariableTransformBase::fTMVAVersion. protected . Definition at line 172 of file VariableTransformBase.h. ◆ fTransformedEvent. Event* TMVA::VariableTransformBase::fTransformedEvent. mutableprotected . holds the current transformed event ; Definition at line 139 of file VariableTransformBase.h. ◆ fTransformName. TString TMVA::VariableTransformBase::fTransformName. private . name of transformation ; Definition at line 157 of file VariableTransformBase.h. ◆ fUseSignalTransform. Bool_t TMVA::VariableTransformBase::fUseSignalTransform. private . true if transformation bases on signal data ; Definition at line 152 of file VariableTransformBase.h. ◆ fVariables. std::vector<TMVA::VariableInfo> TMVA::VariableTransformBase::fVariables. private . event variables [saved to weight file] ; Definition at line 158 of file VariableTransformBase.h. ◆ fVariableTransform. Types::EVariableTransform TMVA::VariableTransformBase::fVariableTransform. private . Decorrelation, PCA, etc. ; Definition at line 148 of file VariableTransformBase.h. ◆ fVariableTypesAreCounted. Bool_t TMVA::VariableTransformBase::fVariableTypesAreCounted. mutableprivate . true if variable types have been counted already ; Definition at line 162 of file VariableTransformBase.h. Libraries for TMVA::VariableTransformBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/VariableTransformBase.h; tmva/tmva/src/VariableTransformBase.cxx. TMVAVariableTransformBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html:33051,Guid,Guide,33051,doc/master/classTMVA_1_1VariableTransformBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1VariableTransformBase.html,1,['Guid'],['Guide']
Usability,"::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidClearAll() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. RooArgSet*GetMode(RooArgSet* parameters) const. Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. RooAbsData*fData; RooAbsReal*fIntegratedLikelihood; RooStats::SimpleInterval*fIntervalcached pointer to resulting interval; RooAbsReal*fLikelihood; RooAbsReal*fLogLike; RooArgSetfNuisanceParameters; RooArgSetfPOI; RooAbsPdf*fPdf; RooAbsPdf*fPosteriorPdf; RooAbsPdf*fPriorPOI; RooAbsPdf*fProductPdf; doublefSizesize used for getting the interval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. Need to call the Setter methods afterwards. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPOI,						 const RooArgSet* nuisanceParameters ); TNamed( TString(name), TString(title) ),; constructor from data set, model pdf, set with the parameter of interest; (must contain only one parameter for the moment) and prior pdf; Optionally an additional set of parameters can be specified (nuisance parameters); which will be integrated (marginalized) when creating the posterior pdf.; A default size of 0.05 is used (for 95% CL interval). BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__BayesianCalculator.html:7150,Simpl,SimpleInterval,7150,root/html526/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__BayesianCalculator.html,1,['Simpl'],['SimpleInterval']
Usability,"::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); voidTGTextEntry::CopyText() const; virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGTextEntry::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); Int_tTGTextEntry::GetCharacterIndex(Int_t xcoord); static const TGGC&TGTextEntry::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextEntry::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextEntry::Init(); virtual Bool_tTGTextEntry::IsCursorOutOfFrame(); voidTObject::MakeZombie(); voidTGTextEntry::Paste(); virtual voidTGTextEntry::PastePrimary(Window_t wid, Atom_t property, Bool_t del); virtual voidTGTextEntry::ScrollByChar(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextEntry::UpdateOffset(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGNumberEntryField.html:21336,Clear,ClearFlags,21336,root/html602/TGNumberEntryField.html,https://root.cern,https://root.cern/root/html602/TGNumberEntryField.html,2,['Clear'],['ClearFlags']
Usability,"::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidAdjustPos(); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidCopy(TObject&) const; virtual voidCursorOff(); virtual voidCursorOn(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTGView::DoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidDrawCursor(Int_t mode); static const TGGC&GetCursor0GC(); static const TGGC&GetCursor1GC(); static FontStruct_tTGTextView::GetDefaultFontStruct(); static const TGGC&TGTextView::GetDefaultGC(); static const TGGC&TGTextView::GetDefaultSelectedBackgroundGC(); static const TGGC&TGTextView::GetDefaultSelectedGC(); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; virtual voidTGTextView::HLayout(); voidInit(); virtual Bool_tTGView::ItemLayout(); voidTObject::MakeZombie(); virtual voidTGTextView::Mark(Long_t xPos, Long_t yPos); Int_tTGWidget::SetFlags(Int_t flags); virtual voidSetMenuState(); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE); virtual voidTGTextView::UnMark(); virtual voidTGView::UpdateRegion(Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGTextView::VLayout(). private:. TGTextEdit&operator=(const TGTextEdit&); TGTextEdit(const TGTextEdit&). Da",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGTextEdit.html:19396,Clear,ClearFlags,19396,root/html602/TGTextEdit.html,https://root.cern,https://root.cern/root/html602/TGTextEdit.html,2,['Clear'],['ClearFlags']
Usability,"::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfAreaBin area; Bool_tfChangedFor the 3D Painter; Double_tfContentBin content; Int_tfNumberBin number of the bin in TH2Poly; TObject*fPolyObject holding the polygon definition; Double_tfXmaxX maximum value; Double_tfXminX minimum value; Double_tfYmaxY maximum value; Double_tfYminY minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2PolyBin(). TH2PolyBin(TObject* poly, Int_t bin_number). virtual ~TH2PolyBin(). void ClearContent(); {fContent = 0;}. void Fill(Double_t w); {fContent = fContent+w; SetChanged(true);}. Double_t GetArea(). Double_t GetContent() const; {return fContent;}. Bool_t GetChanged() const; {return fChanged;}. Int_t GetBinNumber() const; {return fNumber;}. TObject * GetPolygon() const; {return fPoly;}. Double_t GetXMax(). Double_t GetXMin(). Double_t GetYMax(). Double_t GetYMin(). Bool_t IsInside(Double_t x, Double_t y) const. void SetChanged(Bool_t flag); {fChanged = flag;}. void SetContent(Double_t content); {fContent = content; SetChanged(true);}. » Author: Olivier Couet, Deniz Gunceler » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2Poly.h 37434 2010-12-09 12:56:54Z couet $ » Last generated: 2010-12-09 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH2PolyBin.html:5896,Clear,ClearContent,5896,root/html528/TH2PolyBin.html,https://root.cern,https://root.cern/root/html528/TH2PolyBin.html,1,['Clear'],['ClearContent']
Usability,"::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfAreaBin area; Bool_tfChangedFor the 3D Painter; Double_tfContentBin content; Int_tfNumberBin number of the bin in TH2Poly; TObject*fPolyObject holding the polygon definition; Double_tfXmaxX maximum value; Double_tfXminX minimum value; Double_tfYmaxY maximum value; Double_tfYminY minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2PolyBin(). TH2PolyBin(TObject* poly, Int_t bin_number). virtual ~TH2PolyBin(). void ClearContent(); {fContent = 0;}. void Fill(Double_t w); {fContent = fContent+w; SetChanged(true);}. Double_t GetArea(). Double_t GetContent() const; {return fContent;}. Bool_t GetChanged() const; {return fChanged;}. Int_t GetBinNumber() const; {return fNumber;}. TObject * GetPolygon() const; {return fPoly;}. Double_t GetXMax(). Double_t GetXMin(). Double_t GetYMax(). Double_t GetYMin(). Bool_t IsInside(Double_t x, Double_t y) const. void SetChanged(Bool_t flag); {fChanged = flag;}. void SetContent(Double_t content); {fContent = content; SetChanged(true);}. » Author: Olivier Couet, Deniz Gunceler » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2Poly.h 37945 2011-02-02 15:35:05Z couet $ » Last generated: 2011-07-04 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2PolyBin.html:5967,Clear,ClearContent,5967,root/html530/TH2PolyBin.html,https://root.cern,https://root.cern/root/html530/TH2PolyBin.html,1,['Clear'],['ClearContent']
Usability,"::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Double_tfAreaBin area; Bool_tfChangedFor the 3D Painter; Double_tfContentBin content; Int_tfNumberBin number of the bin in TH2Poly; TObject*fPolyObject holding the polygon definition; Double_tfXmaxX maximum value; Double_tfXminX minimum value; Double_tfYmaxY maximum value; Double_tfYminY minimum value. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TH2PolyBin(). TH2PolyBin(TObject* poly, Int_t bin_number). virtual ~TH2PolyBin(). void ClearContent(); {fContent = 0;}. void Fill(Double_t w); {fContent = fContent+w; SetChanged(true);}. Double_t GetArea(). Double_t GetContent() const; {return fContent;}. Bool_t GetChanged() const; {return fChanged;}. Int_t GetBinNumber() const; {return fNumber;}. TObject * GetPolygon() const; {return fPoly;}. Double_t GetXMax(). Double_t GetXMin(). Double_t GetYMax(). Double_t GetYMin(). Bool_t IsInside(Double_t x, Double_t y) const. void SetChanged(Bool_t flag); {fChanged = flag;}. void SetContent(Double_t content); {fContent = content; SetChanged(true);}. » Author: Olivier Couet, Deniz Gunceler » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/hist:$Id: TH2Poly.h 37945 2011-02-02 15:35:05Z couet $ » Last generated: 2011-11-03 20:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TH2PolyBin.html:5967,Clear,ClearContent,5967,root/html532/TH2PolyBin.html,https://root.cern,https://root.cern/root/html532/TH2PolyBin.html,1,['Clear'],['ClearContent']
Usability,"::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3550,clear,clearEvalError,3550,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['clear'],['clearEvalError']
Usability,"::basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&RooResolutionModel::basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddModel.html:3550,clear,clearEvalError,3550,root/html528/RooAddModel.html,https://root.cern,https://root.cern/root/html528/RooAddModel.html,2,['clear'],['clearEvalError']
Usability,"::createvoid create(std::string histoName, int bins, double min, double max, int bins2, double min2, double max2)for monitoringDefinition NeuralNet.h:820; TMVA::DNN::Settings::useMultithreadingbool useMultithreading() constis multithreading turned on?Definition NeuralNet.h:815; TMVA::DNN::Settings::regularizationEnumRegularization regularization() constsome regularization of the DNN is turned on?Definition NeuralNet.h:813; TMVA::DNN::Settings::convergenceCountsize_t convergenceCount() constreturns the current convergence countDefinition NeuralNet.h:827; TMVA::DNN::Settings::momentumdouble momentum() constget the momentum (e.g. for SGD)Definition NeuralNet.h:772; TMVA::DNN::Settings::count_Esize_t count_EDefinition NeuralNet.h:842; TMVA::DNN::Settings::m_timerTimer m_timertimer for monitoringDefinition NeuralNet.h:832; TMVA::DNN::Settings::testRepetitionssize_t testRepetitions() consthow often is the test data testedDefinition NeuralNet.h:768; TMVA::DNN::Settings::clearvoid clear(std::string histoName)for monitoringDefinition NeuralNet.h:824; TMVA::DNN::Settings::endTestCyclevirtual void endTestCycle()callback for monitoring and logggingDefinition NeuralNet.h:805; TMVA::DNN::Settings::fMinimizerTypeMinimizerType fMinimizerTypeDefinition NeuralNet.h:855; TMVA::DNN::Settings::addPointvoid addPoint(std::string histoName, double x, double y)for monitoringDefinition NeuralNet.h:822; TMVA::DNN::Settings::setMonitoringvoid setMonitoring(std::shared_ptr< Monitoring > ptrMonitoring)prepared for monitoringDefinition NeuralNet.h:764; TMVA::DNN::Settings::testIterationvirtual void testIteration()callback for monitoring and logggingDefinition NeuralNet.h:806; TMVA::DNN::Settings::m_convergenceStepssize_t m_convergenceStepsnumber of steps without improvement to consider the DNN to have convergedDefinition NeuralNet.h:837; TMVA::DNN::Settings::hasConvergedvirtual bool hasConverged(double testError)has this training converged already?Definition NeuralNet.cxx:485; TMVA::DNN::Settings:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:72443,clear,clearvoid,72443,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['clear'],"['clear', 'clearvoid']"
Usability,"::fParentsList of parents.; Bool_tTEveElement::fPickable; list<TEveProjected*>TEveProjectable::fProjectedListreferences to projected instances.; Bool_tTEveElement::fRnrChildrenRender children of this element.; Bool_tTEveElement::fRnrSelfRender this element.; Bool_tTEveElement::fSelected!; Bool_tfSmartRefresh; TRefTEveElement::fSourceExternal object that is represented by this element.; TStringTNamed::fTitleobject title; Int_tTEveElement::fTopItemCnt! Counter for top-level list-tree items that prevent automatic destruction.; void*TEveElement::fUserData! Externally assigned and controlled user data.; TEveElement*TEveElement::fVizModel! Element used as model from VizDB.; TStringTEveElement::fVizTagTag used to query VizDB for model element. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveScene(const char* n = ""TEveScene"", const char* t = """"); Constructor. ~TEveScene(); Destructor. void CollectSceneParents(TEveElement::List_t& scenes); Virtual from TEveElement; here we simply append this scene to; the list. void Repaint(Bool_t dropLogicals = kFALSE); Repaint the scene. void RetransHierarchically(); Entry point for hierarchical transformation update.; Calls the recursive variant on all children. void RetransHierarchicallyRecurse(TEveElement* el, const TEveTrans& tp); Set transformation matrix for physical shape of element el in; the GL-scene and recursively descend into children (if enabled). void SetName(const char* n); Set scene's name. void Paint(Option_t* option = """"); Paint the scene. Iterate over children and calls PadPaint(). void DestroyElementRenderers(TEveElement* element); Remove element from the scene.; It is not an error if the element is not found in the scene. void DestroyElementRenderers(TObject* rnrObj); Remove element represented by object rnrObj from the scene.; It is not an error if the element is not found in the scene. const TGPicture* GetListTreeIcon(Bool_t open = kFALSE); Return icon for scene. TEveSce",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScene.html:20379,simpl,simply,20379,root/html528/TEveScene.html,https://root.cern,https://root.cern/root/html528/TEveScene.html,3,['simpl'],['simply']
Usability,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-03 17:48; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TProofPlayerSlave.html:17599,feedback,feedback,17599,root/html604/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html604/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-04 16:54; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayerSlave.html:16664,feedback,feedback,16664,root/html534/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html534/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,"::fProcessedRun! Events processed in this run; TProofProgressStatus*TProofPlayer::fProgressStatusthe progress status object;; TQueryResult*TProofPlayer::fQueryInstance of TQueryResult currently processed; TList*TProofPlayer::fQueryResultsList of TQueryResult; Long64_tTProofPlayer::fReadBytesRun! Bytes read in this run; Long64_tTProofPlayer::fReadCallsRun! Read calls in this run; Long_tTProofPlayer::fSaveMemThresholdThreshold for saving output to file; Bool_tTProofPlayer::fSavePartialResultsWhether to save the partial results; Bool_tTProofPlayer::fSaveResultsPerPacketWhether to save partial results after each packet; TStatus*TProofPlayer::fSelStatus! status of query in progress; TSelector*TProofPlayer::fSelector! the latest selector; TClass*TProofPlayer::fSelectorClass! class of the latest selector; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; TTimer*TProofPlayer::fStopTimerTimer associated with a stop request; TMutex*TProofPlayer::fStopTimerMtxTo protect the stop timer; Long64_tTProofPlayer::fTotalEventsnumber of events requested; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static THashList*TProofPlayer::fgDrawInputParsList of input parameters to be kept on drawing actions. private:. TList*fFeedbackList of objects to send updates of; TSocket*fSocket. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void SetupFeedback(); Setup feedback. void StopFeedback(); Stop feedback. Bool_t HandleTimer(TTimer* timer); Handle timer event. void HandleGetTreeHeader(TMessage* mess); Handle tree header request. TProofPlayerSlave(TSocket* socket = 0); { }. » Author: Maarten Ballintijn 07/01/02 » Copyright (C) 1995-2001, Rene Brun and Fons Rademakers. *; » Last changed: root/proofplayer:$Id$ » Last generated: 2015-06-30 15:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerSlave.html:17516,feedback,feedback,17516,root/html602/TProofPlayerSlave.html,https://root.cern,https://root.cern/root/html602/TProofPlayerSlave.html,2,['feedback'],['feedback']
Usability,::fQueryLock. private . Definition at line 95 of file TProofServ.h. ◆ fQuerySeqNum. Int_t TProofServ::fQuerySeqNum. private . Definition at line 118 of file TProofServ.h. ◆ fQueuedMsg. TList* TProofServ::fQueuedMsg. private . Definition at line 132 of file TProofServ.h. ◆ fRealTime. Float_t TProofServ::fRealTime. private . Definition at line 113 of file TProofServ.h. ◆ fRealTimeLog. Bool_t TProofServ::fRealTimeLog. private . Definition at line 136 of file TProofServ.h. ◆ fReaperTimer. TReaperTimer* TProofServ::fReaperTimer. private . Definition at line 139 of file TProofServ.h. ◆ fSaveOutput. TStopwatch TProofServ::fSaveOutput. private . Definition at line 117 of file TProofServ.h. ◆ fSendLogToMaster. Bool_t TProofServ::fSendLogToMaster. private . Definition at line 147 of file TProofServ.h. ◆ fService. TString TProofServ::fService. private . Definition at line 76 of file TProofServ.h. ◆ fSessionDir. TString TProofServ::fSessionDir. private . Definition at line 85 of file TProofServ.h. ◆ fSessionTag. TString TProofServ::fSessionTag. private . Definition at line 83 of file TProofServ.h. ◆ fShutdownTimer. TShutdownTimer* TProofServ::fShutdownTimer. private . Definition at line 138 of file TProofServ.h. ◆ fSocket. TSocket* TProofServ::fSocket. private . Definition at line 97 of file TProofServ.h. ◆ fTopSessionTag. TString TProofServ::fTopSessionTag. private . Definition at line 84 of file TProofServ.h. ◆ fTotSessions. Int_t TProofServ::fTotSessions. private . Definition at line 120 of file TProofServ.h. ◆ fUser. TString TProofServ::fUser. private . Definition at line 77 of file TProofServ.h. ◆ fWaitingQueries. TList* TProofServ::fWaitingQueries. private . Definition at line 128 of file TProofServ.h. ◆ fWorkDir. TString TProofServ::fWorkDir. private . Definition at line 81 of file TProofServ.h. proof/proof/inc/TProofServ.h; proof/proof/src/TProofServ.cxx. TProofServ. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServ.html:65937,Guid,Guide,65937,doc/master/classTProofServ.html,https://root.cern,https://root.cern/doc/master/classTProofServ.html,1,['Guid'],['Guide']
Usability,"::fSignalsBlocked! flag used for suppression of signals; TGTextEntry*fTitleSlice label; TGNumberEntry*fValueValue of the slice; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Mon Jul 4 15:35:55 2011 » Last generated: 2011-07-04 15:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TPieSliceEditor.html:20399,Guid,Guido,20399,root/html530/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html530/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,"::fSignalsBlocked! flag used for suppression of signals; TGTextEntry*fTitleSlice label; TGNumberEntry*fValueValue of the slice; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Nov 3 20:21:18 2011 » Last generated: 2011-11-03 20:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TPieSliceEditor.html:20399,Guid,Guido,20399,root/html532/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html532/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,"::fSizenumber of elements in collection; static TCollection::(anonymous)TCollection::kIsOwner; static TMap::(anonymous)kIsOwnerValue. private:. THashTable*fTableHash table used to store TPair's. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMap(Int_t capacity = TCollection::kInitHashTableCapacity, Int_t rehash = 0); TMap ctor. See THashTable for a description of the arguments. ~TMap(); TMap dtor. Objects are not deleted unless the TMap is the; owner (set via SetOwner()). void Add(TObject* obj); This function may not be used (but we need to provide it since it is; a pure virtual in TCollection). Use Add(key,value) instead. void Add(TObject* key, TObject* value); Add a (key,value) pair to the map. Float_t AverageCollisions() const; Return the ratio of entries vs occupied slots. Int_t Capacity() const; Return number of slots in the hashtable. Use GetSize() to get the; number of objects stored in the TMap. void Clear(Option_t* option = """"); Remove all (key,value) pairs from the map. The keys/values are; deleted depending on the state of key-ownership (SetOwner()) and; value-ownership (SetOwnerValue()). To delete these objects regardless of the ownership state use:; - Delete() to delete only keys;; - DeleteValues() to delete only values;; - DeleteAll() to delete both keys and values. Int_t Collisions(const char* keyname) const; Returns the number of collisions for a key with a certain name; (i.e. number of objects in same slot in the hash table, i.e. length; of linked list). Int_t Collisions(TObject* key) const; Returns the number of collisions for a key (i.e. number of objects; in same slot in the hash table, i.e. length of linked list). void Delete(Option_t* option = """"); Remove all (key,value) pairs from the map AND delete the keys; when they are allocated on the heap. void DeleteValues(); Remove all (key,value) pairs from the map AND delete the values; when they are allocated on the heap. void DeleteAll(); Remove all (key",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMap.html:9650,Clear,Clear,9650,root/html602/TMap.html,https://root.cern,https://root.cern/root/html602/TMap.html,2,['Clear'],['Clear']
Usability,"::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-02 15:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGVProgressBar.html:21828,progress bar,progress bar,21828,root/html604/TGVProgressBar.html,https://root.cern,https://root.cern/root/html604/TGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,"::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame); cconstructor. TGVProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t h); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void DoRedraw(); Draw vertical progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a vertical progress bar as a C++ statement(s) on output stream out. void Percent(Bool_t ); { fPercent = on; fClient->NeedRedraw(this); }. void ShowPos(Bool_t ); { fShowPos = on; fClient->NeedRedraw(this); }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. TGVProgressBar(const TGWindow* p = 0, UInt_t w = kProgressBarTextWidth, UInt_t h = 4, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder | kSunkenFrame). virtual ~TGVProgressBar(); { }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-06-30 14:58; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGVProgressBar.html:21828,progress bar,progress bar,21828,root/html602/TGVProgressBar.html,https://root.cern,https://root.cern/root/html602/TGVProgressBar.html,1,['progress bar'],['progress bar']
Usability,::fgMCLM2S = 0.025. staticprivate . Definition at line 68 of file TConfidenceLevel.h. ◆ fgMCLMED. Double_t const TConfidenceLevel::fgMCLMED = 0.5. staticprivate . Definition at line 70 of file TConfidenceLevel.h. ◆ fgMCLP1S. Double_t const TConfidenceLevel::fgMCLP1S = 0.84. staticprivate . Definition at line 71 of file TConfidenceLevel.h. ◆ fgMCLP2S. Double_t const TConfidenceLevel::fgMCLP2S = 0.975. staticprivate . Definition at line 72 of file TConfidenceLevel.h. ◆ fISB. Int_t* TConfidenceLevel::fISB. private . Definition at line 66 of file TConfidenceLevel.h. ◆ fISS. Int_t* TConfidenceLevel::fISS. private . Definition at line 65 of file TConfidenceLevel.h. ◆ fLRB. Double_t* TConfidenceLevel::fLRB. private . Definition at line 64 of file TConfidenceLevel.h. ◆ fLRS. Double_t* TConfidenceLevel::fLRS. private . Definition at line 63 of file TConfidenceLevel.h. ◆ fMCL3S. Double_t TConfidenceLevel::fMCL3S. private . Definition at line 59 of file TConfidenceLevel.h. ◆ fMCL5S. Double_t TConfidenceLevel::fMCL5S. private . Definition at line 60 of file TConfidenceLevel.h. ◆ fNMC. Double_t TConfidenceLevel::fNMC. private . Definition at line 58 of file TConfidenceLevel.h. ◆ fNNMC. Int_t TConfidenceLevel::fNNMC. private . Definition at line 53 of file TConfidenceLevel.h. ◆ fStot. Double_t TConfidenceLevel::fStot. private . Definition at line 55 of file TConfidenceLevel.h. ◆ fTSB. Double_t* TConfidenceLevel::fTSB. private . Definition at line 61 of file TConfidenceLevel.h. ◆ fTSD. Double_t TConfidenceLevel::fTSD. private . Definition at line 57 of file TConfidenceLevel.h. ◆ fTSS. Double_t* TConfidenceLevel::fTSS. private . Definition at line 62 of file TConfidenceLevel.h. Libraries for TConfidenceLevel:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TConfidenceLevel.h; hist/hist/src/TConfidenceLevel.cxx. TConfidenceLevel. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTConfidenceLevel.html:21954,Guid,Guide,21954,doc/master/classTConfidenceLevel.html,https://root.cern,https://root.cern/doc/master/classTConfidenceLevel.html,1,['Guid'],['Guide']
Usability,"::kBoth@ kBothDefinition TString.h:276; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::IsNullBool_t IsNull() constDefinition TString.h:414; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TString::IndexSsiz_t Index(const char *pat, Ssiz_t i=0, ECaseCompare cmp=kExact) constDefinition TString.h:651; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; TUUID::Streamervirtual void Streamer(TBuffer &); TUUID::AsStringconst char * AsString() constReturn UUID as string. Copy string immediately since it will be reused.Definition TUUID.cxx:571; TUUID::SizeofInt_t Sizeof() constDefinition TUUID.h:85; TUUID::FillBuffervoid FillBuffer(char *&buffer)Stream UUID into output buffer.Definition TUUID.cxx:275; TUUID::StreamerV1void StreamerV1(TBuffer &b)Stream UUID from input buffer.Definition TUUID.cxx:309; TVirtualStreamerInfoAbstract Interface class describing Streamer information for one class.Definition TVirtualStreamerInfo.h:44; TVirtualStreamerInfo::GetClassvirtual TClass * GetClass() const =0; bool; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::DirAutoAdd_tvoid(* DirAutoAdd_t)(void *, TDirectory *)Definition Rtypes.h:119; v@ vDefinition rootcling_impl.cxx:3699; slashTCanvas * slash()Definition slash.C:1. ioiosrcTDirectoryFile.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html:107006,Guid,Guide,107006,doc/master/TDirectoryFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TDirectoryFile_8cxx_source.html,1,['Guid'],['Guide']
Usability,"::kInt@ kIntDefinition TVirtualStreamerInfo.h:118; TVirtualStreamerInfo::kULong@ kULongDefinition TVirtualStreamerInfo.h:121; TVirtualStreamerInfo::kTObject@ kTObjectDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::kLong64@ kLong64Definition TVirtualStreamerInfo.h:122; TVirtualStreamerInfo::kCounter@ kCounterDefinition TVirtualStreamerInfo.h:117; TVirtualStreamerInfo::kTNamed@ kTNamedDefinition TVirtualStreamerInfo.h:124; TVirtualStreamerInfo::GetElementsvirtual TObjArray * GetElements() const =0; TVirtualStreamerInfo::GetClassvirtual TClass * GetClass() const =0; int; unsigned int; nconst Int_t nDefinition legend1.C:16; ROOT::Internal::GetArrayTypeTString GetArrayType(TStreamerElement *element, const char *subtype, TTreeProxyGenerator::EContainer container)Definition TTreeProxyGenerator.cxx:131; ROOT::Internal::R__AddPragmaForClassstatic bool R__AddPragmaForClass(TTreeProxyGenerator *gen, TClass *cl)Add the ""pragma C++ class"" if needed and return true if it has been added or if it is known to not be...Definition TTreeProxyGenerator.cxx:1564; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; SelectionRulesUtils::areEqualbool areEqual(const RULE *r1, const RULE *r2, bool moduloNameOrPattern=false)Definition SelectionRules.h:58; TClassEdit::IsStdClassbool IsStdClass(const char *type)return true if the class belongs to the std namespaceDefinition TClassEdit.cxx:1418; TClassEdit::ShortTypestd::string ShortType(const char *typeDesc, int mode)Return the absolute type of typeDesc.Definition TClassEdit.cxx:1305; TClassEdit::kDropTrailStar@ kDropTrailStarDefinition TClassEdit.h:77; TClassEdit::kLong64@ kLong64Definition TClassEdit.h:85; lTLine lDefinition textangle.C:4. treetreeplayersrcTTreeProxyGenerator.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html:108596,Guid,Guide,108596,doc/master/TTreeProxyGenerator_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTreeProxyGenerator_8cxx_source.html,1,['Guid'],['Guide']
Usability,"::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TVirtualX::ETextSetModeTVirtualX::kLoad; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TVirtualX::ETextModeTVirtualX::kOpaque; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TVirtualX::EDrawModeTVirtualX::kXor; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tfBlockRGBProtect against color double setting; Float_tfCharacterUpXCharacter Up vector along X; Float_tfCharacterUpYCharacter Up vector along Y; TGQt::TQTCLIPMAPfClipMap; QTextCodec*fCodecThe Current text decoder; TGQt::COLORMAPfColorMapto back the TG widgets; ECursorfCursorCurrent cursor number;; QVector<QCursor*>fCursors; Int_tfDisplayOpened; QPainter::CompositionModefDrawMode; TVirtualX::EDrawModeTVirtualX::fDrawModeDrawing mode; TQtEmitterfEmitterobject to emit Qt signals on behalf of TVirtualX; Bool_tfFeedBackModeTCanvas feedback mode; TQtFeedBackWidget*fFeedBackWidgetThe dedicated widget for TCanvas feedback mode; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; QStringfFontTextCodeThe default code text code page (from the Gui.DefaultFont); Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tfMarkerStyle; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; QMap<Color_t,QColor*>fPallete; TQtClientWidget*fPointerGrabber; QPaintDevice*fPrevWindowPointer to the previous ""Window""; TQtBrush*fQBrush; TQtClientFilter*fQClientFilter; TQtEventQueue*fQClientFilterBuffer; TQtClientGuardfQClientGuardguard TQtClientWibdget against of dead poi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGQt.html:24904,feedback,feedback,24904,root/html602/TGQt.html,https://root.cern,https://root.cern/root/html602/TGQt.html,4,['feedback'],['feedback']
Usability,"::kStandard; static RooPrintable::ContentsOptionRooPrintable::kTitle; static RooPrintable::StyleOptionRooPrintable::kTreeStructure; static RooPrintable::ContentsOptionRooPrintable::kValue; static RooPrintable::StyleOptionRooPrintable::kVerbose; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tRooAbsCollection::_allRRVAll contents are RRV; RooLinkedListRooAbsCollection::_listActual object store; TStringRooAbsCollection::_nameOur name.; static Int_tRooPrintable::_nameLength; Bool_tRooAbsCollection::_ownContFlag to identify a list that owns its contents.; static char*_poolBegin! Start of memory pool; static char*_poolCur! Next free slot in memory pool; static char*_poolEnd! End of memory pool; TNamed*RooAbsCollection::_structureTag! Structure tag; TNamed*RooAbsCollection::_typedStructureTag! Typed structure tag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void cleanup(); Clear memoery pool on exit to avoid reported memory leaks. void* operator new(size_t bytes); Overloaded new operator guarantees that all RooArgSets allocated with new; have a unique address, a property that is exploited in several places; in roofit to quickly index contents on normalization set pointers.; The memory pool only allocates space for the class itself. The elements; stored in the set are stored outside the pool. void* operator new(size_t bytes, void* ptr); Overloaded new operator with placement does not guarante that all; RooArgSets allocated with new have a unique address, but uses the global; operator. void operator delete(void* ptr); Memory is owned by pool, we need to do nothing to release it. RooArgSet(); Default constructor. RooArgSet(const RooArgList& list); Constructor from a RooArgList. If the list contains multiple; objects with the same name, only the first is store in the set.; Warning messages will be printed for dropped items. RooArgSet(const RooArgList& list, const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooArgSet.html:15544,Clear,Clear,15544,root/html602/RooArgSet.html,https://root.cern,https://root.cern/root/html602/RooArgSet.html,2,['Clear'],['Clear']
Usability,"::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signal' created with bounds [-3,3]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData' created with bounds [-3,3]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#0] ERROR:Plotting -- Range 'Full' not defined for variable 'x'. Ignoring ...; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range 'Full'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisatio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf203__ranges_8py.html:3351,Clear,Clear,3351,doc/master/rf203__ranges_8py.html,https://root.cern,https://root.cern/doc/master/rf203__ranges_8py.html,1,['Clear'],['Clear']
Usability,"::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'signal' created with bounds [-3,3]; [#1] INFO:Eval -- RooRealVar::setRange(x) new range named 'fit_nll_model_modelData' created with bounds [-3,3]; [#1] INFO:Fitting -- RooAbsPdf::fitTo(model) fixing normalization set for coefficient determination to observables in data; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_model_modelData) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""") / NormRange("""").; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) only plotting range ''; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f. curve is normalized using explicit choice of ranges 'fit_nll_model_modelData'; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) p.d.f was fitted in a subrange and no explicit Range() and NormRange() was specified. Plotting / normalising in fit range. To override, do one of the following; - Clear the automatic fit range attribute: <pdf>.removeStringAttribute(""fitrange"");; - Explicitly specify the plotting range: Range(""<rangeName>"").; - Explicitly specify where to compute the normalisation: NormRange(""<rangeName>"").; The default (full) range can be denoted with Range("""")",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf203__ranges_8C.html:6519,Clear,Clear,6519,doc/master/rf203__ranges_8C.html,https://root.cern,https://root.cern/doc/master/rf203__ranges_8C.html,1,['Clear'],['Clear']
Usability,"::string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentation. ◆ SetTop(). void ROOT::RGeoItem::SetTop ; (; bool ; on = true). inline . Definition at line 115 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeoItem::color. protected . color ; Definition at line 96 of file RGeomData.hxx. ◆ id. int ROOT::RGeoItem::id {0}. protected . node id ; Definition at line 95 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeoItem::material. protected . material ; Definition at line 97 of file RGeomData.hxx. ◆ pvis. int ROOT::RGeoItem::pvis {0}. protected . visibility of physical node ; Definition at line 99 of file RGeomData.hxx. ◆ top. bool ROOT::RGeoItem::top {false}. protected . indicates if node selected as top ; Definition at line 100 of file RGeomData.hxx. ◆ vis. int ROOT::RGeoItem::vis {0}. protected . visibility of logical node ; Definition at line 98 of file RGeomData.hxx. Libraries for ROOT::RGeoItem:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeoItem. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html:3930,Guid,Guide,3930,doc/v632/classROOT_1_1RGeoItem.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeoItem.html,1,['Guid'],['Guide']
Usability,"::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; Architecture_t::ActivationDescriptor_t fActivationDesc;  ; Tensor_t fDerivatives;  activation function gradient ;  ; Scalar_t fDropoutProbability;  Probability that an input is active. ;  ; EActivationFunction fF;  Activation function of the layer. ;  ; Tensor_t fInputActivation;  output of GEMM and input to activation function ;  ; ERegularization fReg;  The regularization method. ;  ; Scalar_t fWeightDecay;  The weight decay. ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::VGeneralLayer< Architecture_t >; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html:7280,learn,learningRate,7280,doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDenseLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Private Attributes; bool fFlattening;  Whether the layer is doing flattening. ;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::DNN::VGeneralLayer< Architecture_t >; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth of the pr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html:6602,learn,learningRate,6602,doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReshapeLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"::vector< Matrix_t > &);  ; void SetHeight (size_t height);  ; void SetInputDepth (size_t inputDepth);  ; void SetInputHeight (size_t inputHeight);  ; void SetInputWidth (size_t inputWidth);  ; void SetIsTraining (bool isTraining);  ; void SetWidth (size_t width);  ; void Update (const Scalar_t learningRate);  Updates the weights and biases, given the learning rate. ;  ; void UpdateBiases (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the biases, given the gradients and the learning rate. ;  ; void UpdateBiasGradients (const std::vector< Matrix_t > &biasGradients, const Scalar_t learningRate);  Updates the bias gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeightGradients (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weight gradients, given some other weight gradients and learning rate. ;  ; void UpdateWeights (const std::vector< Matrix_t > &weightGradients, const Scalar_t learningRate);  Updates the weights, given the gradients and the learning rate,. ;  ; void WriteMatrixToXML (void *node, const char *name, const Matrix_t &matrix);  ; void WriteTensorToXML (void *node, const char *name, const std::vector< Matrix_t > &tensor);  helper functions for XML ;  . Protected Attributes; Tensor_t fActivationGradients;  Gradients w.r.t. the activations of this layer. ;  ; size_t fBatchSize;  Batch size used for training and evaluation. ;  ; std::vector< Matrix_t > fBiases;  The biases associated to the layer. ;  ; std::vector< Matrix_t > fBiasGradients;  Gradients w.r.t. the bias values of the layer. ;  ; size_t fDepth;  The depth of the layer. ;  ; size_t fHeight;  The height of the layer. ;  ; EInitialization fInit;  The initialization method. ;  ; size_t fInputDepth;  The depth of the previous layer or input. ;  ; size_t fInputHeight;  The height of the previous layer or input. ;  ; size_t fInputWidth;  The width of the previous layer or input. ;  ; bool f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html:5854,learn,learningRate,5854,doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VGeneralLayer.html,2,['learn'],"['learning', 'learningRate']"
Usability,"::vector< std::string > & ; colNames, . F && ; expression, . const ColumnNames_t & ; inputColumns, . const std::vector< std::string > & ; variationTags, . std::string_view ; variationName . ). inlineprivate . Definition at line 3222 of file RInterface.hxx. Friends And Related Symbol Documentation. ◆ RInterface. template<typename Proxied , typename DataSource = void> . template<typename T , typename W > . friend class RInterface. friend . Definition at line 122 of file RInterface.hxx. ◆ RDFInternal::ChangeEmptyEntryRange. template<typename Proxied , typename DataSource = void> . void RDFInternal::ChangeEmptyEntryRange ; (; const RNode & ; node, . std::pair< ULong64_t, ULong64_t > && ; newRange . ). friend . ◆ RDFInternal::ChangeSpec. template<typename Proxied , typename DataSource = void> . void RDFInternal::ChangeSpec ; (; const RNode & ; node, . ROOT::RDF::Experimental::RDatasetSpec && ; spec . ). friend . ◆ RDFInternal::GraphDrawing::GraphCreatorHelper. template<typename Proxied , typename DataSource = void> . friend class RDFInternal::GraphDrawing::GraphCreatorHelper. friend . Definition at line 119 of file RInterface.hxx. ◆ RDFInternal::TriggerRun. template<typename Proxied , typename DataSource = void> . void RDFInternal::TriggerRun ; (; RNode ; node). friend . ◆ ROOT::Internal::RDF::GetDataSourceLabel. template<typename Proxied , typename DataSource = void> . std::string ROOT::Internal::RDF::GetDataSourceLabel ; (; const RNode & ; node). friend . Member Data Documentation. ◆ fProxiedPtr. template<typename Proxied , typename DataSource = void> . std::shared_ptr<Proxied> ROOT::RDF::RInterface< Proxied, DataSource >::fProxiedPtr. private . Smart pointer to the graph node encapsulated by this RInterface. ; Definition at line 128 of file RInterface.hxx. tree/dataframe/inc/ROOT/RDF/InterfaceUtils.hxx; tree/dataframe/inc/ROOT/RDF/RInterface.hxx. ROOTRDFRInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html:157830,Guid,Guide,157830,doc/master/classROOT_1_1RDF_1_1RInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDF_1_1RInterface.html,1,['Guid'],['Guide']
Usability,":; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles are:. kPenStyleSolid,; kPenStyleDash,; kPenStyleDot,; kPenStyleDashDot. Default values:. color = kBlack; style = kPenStyleSolid; width = 1. Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; Function:; TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); Sometimes the displayed region is rather large. When displaying all channels; pictures become very dense and complicated. It is very difficult to understand; overall shape of the data. Therefore in the package we have implemented the; possibility to change the density of displayed channels. Only channels; coinciding with given nodes are displayed. In the next figure we introduce the; example of the above presented spectrum with number of nodes set to 64x64.; Default values:. nodesx = Xmax-Xmin+1; nodesy = Ymax-Ymin+1. Simple modes group, display mode = grid, 256 x 256 channels.; Number of nodes is 64x64.; Function:; void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the; space. Alpha parameter defines the angle between bottom horizontal screen line; and the displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis going; through the center of it employing the view parameter.; Allowed values are 0, 90, 180 and 270 degrees respectively.; Default values:. alpha = 20; beta = 60; view = 0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=40, beta=30, view=0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=30, beta=30, view=90.; Function:; TSpectrum2Painter::SetZScale(Int_t scale); One can change the scale of z-axis. Possible values are:. kZScaleLinear; kZScaleLog; kZSc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:20148,Simpl,Simple,20148,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,":AbstractMethod(const char* method) const; voidRooStats::SamplingDistPlot::AddLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char* title = NULL); Double_tRooStats::SamplingDistPlot::AddSamplingDistribution(const RooStats::SamplingDistribution* samplingDist, Option_t* drawOptions = ""NORMALIZE HIST""); Double_tRooStats::SamplingDistPlot::AddSamplingDistributionShaded(const RooStats::SamplingDistribution* samplingDist, Double_t minShaded, Double_t maxShaded, Option_t* drawOptions = ""NORMALIZE HIST""); voidRooStats::SamplingDistPlot::AddTF1(TF1* f, const char* title = NULL, Option_t* drawOptions = ""SAME""); voidRooStats::SamplingDistPlot::AddTH1(TH1* h, Option_t* drawOptions = """"); virtual voidTObject::AppendPad(Option_t* option = """"); voidApplyDefaultStyle(); voidApplyResult(RooStats::HypoTestResult& result, Option_t* opt = ""NORMALIZE HIST""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooPrintable::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidRooStats::SamplingDistPlot::Draw(Option_t* options = 0); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidRooStats::SamplingDistPlot::DumpToFile(const char* RootFileName, Option_t* option = """", const char* ftitle = """", Int_t compress = 1); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestPlot.html:1422,Clear,Clear,1422,root/html534/RooStats__HypoTestPlot.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestPlot.html,1,['Clear'],['Clear']
Usability,":AddLinkedLibs(const char* linkedLib); virtual voidAddSignalHandler(TSignalHandler* sh); virtual voidTSystem::AddStdExceptionHandler(TStdExceptionHandler* eh); virtual voidAddTimer(TTimer* ti); virtual intAnnounceTcpService(int port, Bool_t reuse, int backlog, int tcpwindowsize = -1); virtual intAnnounceUnixService(int port, int backlog); virtual intAnnounceUnixService(const char* sockpath, int backlog); virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*TSystem::BaseName(const char* pathname); voidTSystem::Beep(Int_t freq = -1, Int_t duration = -1, Bool_t setDefault = kFALSE); virtual voidTObject::Browse(TBrowser* b); Bool_tTSystem::cd(const char* path); virtual Bool_tChangeDirectory(const char* path); voidCheckChilds(); Bool_tCheckDescriptors(); Bool_tCheckSignals(Bool_t sync); virtual intChmod(const char* file, UInt_t mode); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTSystem::CleanCompiledMacros(); virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidCloseConnection(int sock, Bool_t force = kFALSE); virtual voidCloselog(); virtual intClosePipe(FILE* pipe); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual intTSystem::CompileMacro(const char* filename, Option_t* opt = """", const char* library_name = """", const char* build_dir = """", UInt_t dirmode = 0); virtual char*TSystem::ConcatFileName(const char* dir, const char* name); intConnectService(const char* server, int port, int tcpwindowsize); virtual voidTNamed::Copy(TObject& named) const; virtual intCopyFile(const char* from, const char* to, Bool_t overwrite = kFALSE); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual const char*TSystem::DirName(const char* pathname); virtual voidDispatchOneEvent(Bool_t pendingOnly = kFALSE); voidDispatchSignals(ESignals sig); Bool_tDispatchTimers(Bool_t mode); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TUnixSystem.html:1818,Clear,Clear,1818,root/html528/TUnixSystem.html,https://root.cern,https://root.cern/root/html528/TUnixSystem.html,2,['Clear'],['Clear']
Usability,":AddParent(TEveElement* re); virtual voidAddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCanEditElement() const; virtual Bool_tTEveGeoNode::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveGeoNode::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyPare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoTopNode.html:2214,Clear,ClearStamps,2214,root/html528/TEveGeoTopNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoTopNode.html,6,['Clear'],['ClearStamps']
Usability,":AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tTEveWindow::CanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidTEveWindow::ClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*TEveWindow::CreateDefaultWindowSlot(); static TEveWindowSlot*TEveWindow::CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); stati",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveViewer.html:2522,Clear,Clear,2522,root/html528/TEveViewer.html,https://root.cern,https://root.cern/root/html528/TEveViewer.html,16,['Clear'],['Clear']
Usability,":AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearNewEventCommands(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidClose(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveEventManager.html:2391,Clear,ClearProjectedList,2391,root/html530/TEveEventManager.html,https://root.cern,https://root.cern/root/html530/TEveEventManager.html,5,['Clear'],['ClearProjectedList']
Usability,":Apply(TF2 *f); 659{; 660 //if (fHistogram) SetBit(kResetHisto);; 661 ; 662 for (Int_t i = 0; i < fNpoints; i++) {; 663 fZ[i] = f->Eval(fX[i], fY[i], fZ[i]);; 664 }; 665 if (gPad) gPad->Modified();; 666}; 667 ; 668////////////////////////////////////////////////////////////////////////////////; 669/// Browse; 670 ; 671void TGraph2D::Browse(TBrowser *); 672{; 673 Draw(""p0"");; 674 gPad->Update();; 675}; 676 ; 677 ; 678////////////////////////////////////////////////////////////////////////////////; 679/// Free all memory allocated by this object.; 680 ; 681void TGraph2D::Clear(Option_t * /*option = """" */); 682{; 683 if (fX) delete [] fX;; 684 fX = nullptr;; 685 if (fY) delete [] fY;; 686 fY = nullptr;; 687 if (fZ) delete [] fZ;; 688 fZ = nullptr;; 689 fSize = fNpoints = 0;; 690 if (fHistogram && !fUserHisto) {; 691 delete fHistogram;; 692 fHistogram = nullptr;; 693 fDelaunay = nullptr;; 694 }; 695 if (fFunctions) {; 696 fFunctions->SetBit(kInvalidObject);; 697 fFunctions->Delete();; 698 delete fFunctions;; 699 fFunctions = nullptr;; 700 }; 701 if (fDirectory) {; 702 fDirectory->Remove(this);; 703 fDirectory = nullptr;; 704 }; 705}; 706 ; 707 ; 708////////////////////////////////////////////////////////////////////////////////; 709/// Perform the automatic addition of the graph to the given directory; 710///; 711/// Note this function is called in place when the semantic requires; 712/// this object to be added to a directory (I.e. when being read from; 713/// a TKey or being Cloned); 714 ; 715void TGraph2D::DirectoryAutoAdd(TDirectory *dir); 716{; 717 Bool_t addStatus = TH1::AddDirectoryStatus();; 718 if (addStatus) {; 719 SetDirectory(dir);; 720 if (dir) {; 721 ResetBit(kCanDelete);; 722 }; 723 }; 724}; 725 ; 726 ; 727////////////////////////////////////////////////////////////////////////////////; 728/// Computes distance from point px,py to a graph; 729 ; 730Int_t TGraph2D::DistancetoPrimitive(Int_t px, Int_t py); 731{; 732 Int_t distance = 9999;; 733 if (fHistogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:22032,Clear,Clear,22032,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['Clear'],['Clear']
Usability,":AreSignalsBlocked() const; Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTEveStraightLineSet::ComputeBBox(); Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* recei",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveScalableStraightLineSet.html:2994,Clear,ClearStamps,2994,root/html528/TEveScalableStraightLineSet.html,https://root.cern,https://root.cern/root/html528/TEveScalableStraightLineSet.html,1,['Clear'],['ClearStamps']
Usability,":CheckAllChildren ; (; TGListTreeItem * ; item, . Bool_t ; state . ). Check all child items of 'item' and 'item' itself according to the state value: kTRUE means check all, kFALSE - uncheck all. ; Definition at line 2882 of file TGListTree.cxx. ◆ Checked(). void TGListTree::Checked ; (; TObject * ; obj, . Bool_t ; check . ). virtual . Emit Checked() signal. ; Definition at line 1106 of file TGListTree.cxx. ◆ CheckItem(). void TGListTree::CheckItem ; (; TGListTreeItem * ; item, . Bool_t ; check = kTRUE . ). Set check button state for the node 'item'. ; Definition at line 2756 of file TGListTree.cxx. ◆ Class(). static TClass * TGListTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGListTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGListTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 441 of file TGListTree.h. ◆ ClearHighlighted(). void TGListTree::ClearHighlighted ; (; ). Un highlight items. ; Definition at line 2386 of file TGListTree.cxx. ◆ Clicked() [1/5]. void TGListTree::Clicked ; (; TGFrame * ; f, . Int_t ; btn . ). inlineoverrideprotectedvirtual . Emit Clicked() signal. ; Reimplemented from TGContainer.; Definition at line 296 of file TGListTree.h. ◆ Clicked() [2/5]. void TGListTree::Clicked ; (; TGFrame * ; f, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). inlineoverrideprotectedvirtual . Emit Clicked() signal. ; Reimplemented from TGContainer.; Definition at line 297 of file TGListTree.h. ◆ Clicked() [3/5]. void TGListTree::Clicked ; (; TGListTreeItem * ; entry, . Int_t ; btn . ). virtual . Emit Clicked() signal. ; Definition at line 1119 of file TGListTree.cxx. ◆ Clicked() [4/5]. void TGListTree::Clicked ; (; TGListTreeItem * ; entry, . Int_t ; btn, . Int_t ; x, . Int_t ; y . ). virtual . Emit Clicked() signal. ; Definition at line 1132 of file TGListTree.cxx. ◆ Clicked() [5/5]. void TGListTr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:53654,Clear,ClearHighlighted,53654,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['Clear'],['ClearHighlighted']
Usability,":CheckCount(UInt_t offset); UInt_tTBufferFile::CheckObject(UInt_t offset, const TClass* cl, Bool_t readClass = kFALSE); voidCheckVersionBuf(); voidCreateElemNode(const TStreamerElement* elem); XMLNodePointer_tCreateItemNode(const char* name); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; Bool_tExtractPointer(XMLNodePointer_t node, void*& ptr, TClass*& cl); voidExtractReference(XMLNodePointer_t node, const void* ptr, const TClass* cl); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; const char*TXMLSetup::GetElItemName(TStreamerElement* el); Bool_tTXMLSetup::IsValidXmlSetup(const char* setupstr); voidTObject::MakeZombie(); voidPerformPostProcessing(); voidPerformPreProcessing(const TStreamerElement* elem, XMLNodePointer_t elemnode); TXMLStackObj*PopStack(); Bool_tProcessPointer(const void* ptr, XMLNodePointer_t node); TXMLStackObj*PushStack(XMLNodePointer_t current, Bool_t simple = kFALSE); virtual Int_tTBuffer::Read(const char* name); Bool_tTXMLSetup::ReadSetupFromStr(const char* setupstr); voidRegisterPointer(const void* ptr, XMLNodePointer_t node); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); voidSetXML(TXMLEngine* xml); voidShiftStack(const char* info = 0); TXMLStackObj*Stack(Int_t depth = 0); XMLNodePointer_tStackNode(); TBufferXML(); Bool_tVerifyAttr(XMLNodePointer_t node, const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyElemNode(const TStreamerElement* elem); Bool_tVerifyItemNode(const char* name, const char* errinfo = 0); Bool_tVerifyNode(XMLNodePointer_t node, const char* name, const char* errinfo = 0); Bool_tVerifyStackAttr(const char* name, const char* value, const char* errinfo = 0); Bool_tVerifyStackNode(const char* name, const char* errinfo = 0); voidWorkWithClass(TStreamerInfo* info, const TClass* cl = 0); voidWorkWithElemen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TBufferXML.html:19629,simpl,simple,19629,root/html602/TBufferXML.html,https://root.cern,https://root.cern/root/html602/TBufferXML.html,2,['simpl'],['simple']
Usability,:Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 308 of file TStreamerElement.h. ◆ DeclFileName(). static const char * TStreamerObject::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 308 of file TStreamerElement.h. ◆ GetInclude(). const char * TStreamerObject::GetInclude ; (; ); const. overridevirtual . Return the proper include for this element. ; Reimplemented from TStreamerElement.; Definition at line 1264 of file TStreamerElement.cxx. ◆ GetSize(). Int_t TStreamerObject::GetSize ; (; ); const. overridevirtual . Returns size of object class in bytes. ; Reimplemented from TStreamerElement.; Definition at line 1279 of file TStreamerElement.cxx. ◆ Init(). void TStreamerObject::Init ; (; TVirtualStreamerInfo * ; obj = nullptr). overridevirtual . Setup the element. ; Reimplemented from TStreamerElement.; Definition at line 1253 of file TStreamerElement.cxx. ◆ IsA(). TClass * TStreamerObject::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TStreamerElement.; Definition at line 308 of file TStreamerElement.h. ◆ operator=(). TStreamerObject & TStreamerObject::operator= ; (; const TStreamerObject & ; ). privatedelete . ◆ Streamer(). void TStreamerObject::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerObject. ; Reimplemented from TStreamerElement.; Definition at line 1291 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerObject::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 308 of file TStreamerElement.h. Libraries for TStreamerObject:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerObject. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerObject.html:19779,Guid,Guide,19779,doc/master/classTStreamerObject.html,https://root.cern,https://root.cern/doc/master/classTStreamerObject.html,1,['Guid'],['Guide']
Usability,:Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. virtual~Config(); TMVA::ConfigConfig(); TMVA::ConfigConfig(const TMVA::Config&); TMVA::MsgLogger&Log() const; TMVA::Config&operator=(const TMVA::Config&). Data Members; public:. IONamesfIONamesCustomisable weight file properties; VariablePlottingfVariablePlottingCustomisable plotting properties. private:. atomic<Bool_t>fDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; atomic<Bool_t>fSilentno output at all; atomic<Bool_t>fUseColoredConsolecoloured standard output; atomic<Bool_t>fWriteOptionsReferenceif set true: Configurable objects write file with option reference; static atomic<TMVA::Config*>fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. ~Config(); destructor. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. Bool_t WriteOptionsReference() const; { return fWriteOptionsReference; }. void SetWriteOptionsReference(Bool_t w); { fWriteOptionsReference = w; }. Bool_t DrawProgressBar() const; { return fDrawProgressBar; }. void SetDrawProgressBar(Bool_t d); { fDrawProgressBar = d; }. VariablePlotting& GetVariablePlotting(); { return fVariable,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__Config.html:1255,progress bar,progress bar,1255,root/html602/TMVA__Config.html,https://root.cern,https://root.cern/root/html602/TMVA__Config.html,2,['progress bar'],['progress bar']
Usability,":CreateIterators_tvoid(* CreateIterators_t)(void *collection, void **begin_arena, void **end_arena, TVirtualCollectionProxy *proxy)*begin_arena and *end_arena should contain the location of a memory arena of size fgIteratorArenaSize...Definition TVirtualCollectionProxy.h:215; TVirtualCollectionProxy::kCustomAlloc@ kCustomAllocThe collection has a custom allocator.Definition TVirtualCollectionProxy.h:71; TVirtualCollectionProxy::kIsEmulated@ kIsEmulatedDefinition TVirtualCollectionProxy.h:67; TVirtualCollectionProxy::kNeedDelete@ kNeedDeleteThe collection contains directly or indirectly (via other collection) some pointers that need explici...Definition TVirtualCollectionProxy.h:70; TVirtualCollectionProxy::kIsAssociative@ kIsAssociativeDefinition TVirtualCollectionProxy.h:66; TVirtualCollectionProxy::CopyIterator_tvoid *(* CopyIterator_t)(void *dest, const void *source)Copy the iterator source into dest.Definition TVirtualCollectionProxy.h:227; TVirtualCollectionProxy::Clearvirtual void Clear(const char *opt="""")=0Clear the container.; TVirtualCollectionProxy::Next_tvoid *(* Next_t)(void *iter, const void *end)iter and end should be pointers to an iterator to be incremented and an iterator that points to the e...Definition TVirtualCollectionProxy.h:236; TVirtualCollectionProxy::fClassTClassRef fClassDefinition TVirtualCollectionProxy.h:58; TVirtualCollectionProxy::Atvirtual void * At(UInt_t idx)=0Return the address of the value at index idx; TVirtualCollectionProxy::Sizevirtual UInt_t Size() const =0Return the current number of elements in the container.; TVirtualCollectionProxy::DeleteTwoIterators_tvoid(* DeleteTwoIterators_t)(void *begin, void *end)Definition TVirtualCollectionProxy.h:245; TVirtualCollectionProxy::DeleteIterator_tvoid(* DeleteIterator_t)(void *iter)If the size of the iterator is greater than fgIteratorArenaSize, call delete on the addresses; otherw...Definition TVirtualCollectionProxy.h:244; TVirtualCollectionProxy::fPropertiesUInt_t fPropertiesDefi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:92717,Clear,Clearvirtual,92717,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,":DNN::TReference< Real_t >::TanhDerivative ; (; TMatrixT< AReal > & ; B, . const TMatrixT< AReal > & ; A . ). inlinestatic . Definition at line 125 of file ActivationFunctions.hxx. ◆ UpdateParams(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParams ; (; TMatrixT< AReal > & ; x, . TMatrixT< AReal > & ; tildeX, . TMatrixT< AReal > & ; y, . TMatrixT< AReal > & ; z, . TMatrixT< AReal > & ; fVBiases, . TMatrixT< AReal > & ; fHBiases, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; VBiasError, . TMatrixT< AReal > & ; HBiasError, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 48 of file DenoisePropagation.hxx. ◆ UpdateParamsLogReg(). template<typename AReal > . void TMVA::DNN::TReference< Real_t >::UpdateParamsLogReg ; (; TMatrixT< AReal > & ; input, . TMatrixT< AReal > & ; output, . TMatrixT< AReal > & ; difference, . TMatrixT< AReal > & ; p, . TMatrixT< AReal > & ; fWeights, . TMatrixT< AReal > & ; fBiases, . AReal ; learningRate, . size_t ; fBatchSize . ). static . Definition at line 191 of file DenoisePropagation.hxx. Member Data Documentation. ◆ fgRandomGen. template<typename Real_t > . TRandom * TMVA::DNN::TReference< Real_t >::fgRandomGen = nullptr. staticprivate . Definition at line 55 of file Reference.h. tmva/tmva/inc/TMVA/DNN/Architectures/Reference.h; tmva/tmva/src/DNN/Architectures/Reference/ActivationFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/Arithmetic.hxx; tmva/tmva/src/DNN/Architectures/Reference/DenoisePropagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/Initialization.hxx; tmva/tmva/src/DNN/Architectures/Reference/LossFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/OutputFunctions.hxx; tmva/tmva/src/DNN/Architectures/Reference/Propagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/RecurrentPropagation.hxx; tmva/tmva/src/DNN/Architectures/Reference/Regularization.hxx. TMVADNNTReference. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html:46000,learn,learningRate,46000,doc/master/classTMVA_1_1DNN_1_1TReference.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TReference.html,1,['learn'],['learningRate']
Usability,":DataMemberInfo_FactoryCopyvirtual DataMemberInfo_t * DataMemberInfo_FactoryCopy(DataMemberInfo_t *) constDefinition TInterpreter.h:459; TInterpreter::ClassInfo_Deletevirtual void ClassInfo_Delete(ClassInfo_t *, void *) constDefinition TInterpreter.h:402; TInterpreter::GetAutoLoadCallBackvirtual void * GetAutoLoadCallBack() constDefinition TInterpreter.h:141; TInterpreter::InspectMembersvirtual void InspectMembers(TMemberInspector &, const void *obj, const TClass *cl, Bool_t isTransient)=0; TInterpreter::TypeInfo_TrueNamevirtual const char * TypeInfo_TrueName(TypeInfo_t *) constDefinition TInterpreter.h:534; TInterpreter::TypedefInfo_FactoryCopyvirtual TypedefInfo_t * TypedefInfo_FactoryCopy(TypedefInfo_t *) constDefinition TInterpreter.h:542; TInterpreter::GetPromptvirtual char * GetPrompt()=0; TInterpreter::MembersMap_tclass std::map< std::string, std::string > MembersMap_tDefinition TInterpreter.h:70; TInterpreter::ClearStackvirtual void ClearStack()=0; TInterpreter::CallFunc_SetArgsvirtual void CallFunc_SetArgs(CallFunc_t *, const char *) constDefinition TInterpreter.h:331; TInterpreter::DataMemberInfo_Namevirtual const char * DataMemberInfo_Name(DataMemberInfo_t *) constDefinition TInterpreter.h:469; TInterpreter::SetAllocunlockfuncvirtual void SetAllocunlockfunc(void(*)()) constDefinition TInterpreter.h:263; TInterpreter::UnloadFilevirtual int UnloadFile(const char *) constDefinition TInterpreter.h:271; TInterpreter::DataMemberInfo_TypeNamevirtual const char * DataMemberInfo_TypeName(DataMemberInfo_t *) constDefinition TInterpreter.h:467; TInterpreter::SetTempLevelvirtual void SetTempLevel(int) constDefinition TInterpreter.h:270; TInterpreter::IsFloatingTypevirtual Bool_t IsFloatingType(const void *) constDefinition TInterpreter.h:557; TInterpreter::CallFunc_SetFuncvirtual void CallFunc_SetFunc(CallFunc_t *, MethodInfo_t *) constDefinition TInterpreter.h:390; TInterpreter::TInterpreterTInterpreter()Definition TInterpreter.h:135; TInterpreter::DataMemberInfo_Va",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TInterpreter_8h_source.html:42762,Clear,ClearStackvirtual,42762,doc/master/TInterpreter_8h_source.html,https://root.cern,https://root.cern/doc/master/TInterpreter_8h_source.html,2,['Clear'],"['ClearStack', 'ClearStackvirtual']"
Usability,":Detail::RDF::RJittedFilter. Member Data Documentation. ◆ fAccepted. std::vector<ULong64_t> ROOT::Detail::RDF::RFilterBase::fAccepted = {0}. protected . Definition at line 42 of file RFilterBase.hxx. ◆ fColRegister. RDFInternal::RColumnRegister ROOT::Detail::RDF::RFilterBase::fColRegister. protected . Definition at line 46 of file RFilterBase.hxx. ◆ fColumnNames. const ROOT::RDF::ColumnNames_t ROOT::Detail::RDF::RFilterBase::fColumnNames. protected . Definition at line 45 of file RFilterBase.hxx. ◆ fIsDefine. ROOT::RVecB ROOT::Detail::RDF::RFilterBase::fIsDefine. protected . The nth flag signals whether the nth input column is a custom column or not. ; Definition at line 48 of file RFilterBase.hxx. ◆ fLastCheckedEntry. std::vector<Long64_t> ROOT::Detail::RDF::RFilterBase::fLastCheckedEntry. protected . Definition at line 40 of file RFilterBase.hxx. ◆ fLastResult. std::vector<int> ROOT::Detail::RDF::RFilterBase::fLastResult = {true}. protected . Definition at line 41 of file RFilterBase.hxx. ◆ fName. const std::string ROOT::Detail::RDF::RFilterBase::fName. protected . Definition at line 44 of file RFilterBase.hxx. ◆ fRejected. std::vector<ULong64_t> ROOT::Detail::RDF::RFilterBase::fRejected = {0}. protected . Definition at line 43 of file RFilterBase.hxx. ◆ fVariation. std::string ROOT::Detail::RDF::RFilterBase::fVariation. protected . This indicates for what variation this filter evaluates values. ; Definition at line 49 of file RFilterBase.hxx. ◆ fVariedFilters. std::unordered_map<std::string, std::shared_ptr<RFilterBase> > ROOT::Detail::RDF::RFilterBase::fVariedFilters. protected . Definition at line 50 of file RFilterBase.hxx. Libraries for ROOT::Detail::RDF::RFilterBase:. [legend]; The documentation for this class was generated from the following files:; tree/dataframe/inc/ROOT/RDF/RFilterBase.hxx; tree/dataframe/src/RFilterBase.cxx. ROOTDetailRDFRFilterBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html:7634,Guid,Guide,7634,doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Detail_1_1RDF_1_1RFilterBase.html,1,['Guid'],['Guide']
Usability,":DrawCanvas ; (; TObject * ; obj). protectedvirtual . Draw the object if it is a canvas. ; Return 0 in case of success, 1 if it is not a canvas or libProofDraw is not available. ; Definition at line 1696 of file TProofPlayer.cxx. ◆ DrawSelect(). Long64_t TProofPlayer::DrawSelect ; (; TDSet * ; set, . const char * ; varexp, . const char * ; selection, . Option_t * ; option = """", . Long64_t ; nentries = -1, . Long64_t ; firstentry = 0 . ). overridevirtual . Draw (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 1658 of file TProofPlayer.cxx. ◆ Feedback(). void TProofPlayer::Feedback ; (; TList * ; objs). overridevirtual . Set feedback list (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote.; Definition at line 724 of file TProofPlayer.cxx. ◆ FeedBackCanvas(). void TProofPlayer::FeedBackCanvas ; (; const char * ; name, . Bool_t ; create . ). Create/destroy a named canvas for feedback. ; Definition at line 1765 of file TProofPlayer.cxx. ◆ Finalize() [1/2]. Long64_t TProofPlayer::Finalize ; (; Bool_t ; force = kFALSE, . Bool_t ; sync = kFALSE . ). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1571 of file TProofPlayer.cxx. ◆ Finalize() [2/2]. Long64_t TProofPlayer::Finalize ; (; TQueryResult * ; qr). overridevirtual . Finalize query (may not be used in this class). ; Implements TVirtualProofPlayer.; Reimplemented in TProofPlayerRemote, and TProofPlayerLite.; Definition at line 1580 of file TProofPlayer.cxx. ◆ GetCacheSize(). Long64_t TProofPlayer::GetCacheSize ; (; ). overridevirtual . Return the size in bytes of the cache. ; Implements TVirtualProofPlayer.; Definition at line 1796 of file TProofPlayer.cxx. ◆ GetCurrentQuery(). TQueryResult * TProofPlayer::GetCurrentQuery ; (; ); const. inlineoverridevirtual . Imp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:28727,feedback,feedback,28727,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,1,['feedback'],['feedback']
Usability,":Fill to save the value of the variables; // - Write the TTree; // - Close the file; void classicWay(); {; TFile f(""df009_FromScratchVSTTree_classic.root"", ""RECREATE"");; TTree t(""treeName"", ""treeName"");; double b1;; int b2;; t.Branch(""b1"", &b1);; t.Branch(""b2"", &b2);; for (int i = 0; i < 10; ++i) {; b1 = i;; b2 = i * i;; t.Fill();; }; t.Write();; f.Close();; }; ; // ##This is the RDF way of creating a ROOT dataset; // Few lines are needed to achieve the same result.; // Parallel creation of the TTree is not supported in the; // classic method.; // In this case the steps are:; // - Create an empty RDataFrame; // - If needed, define variables for the functions used to fill the branches; // - Create new columns expressing their content with lambdas, functors, functions or strings; // - Invoke the Snapshot action; //; // Parallelism is not the only advantage. Starting from an existing dataset,; // filtering it, enriching it with new columns, leaving aside some other columns, and; // writing a new dataset become very easy to do.; void RDFWay(); {; ROOT::RDataFrame df(10);; auto b = 0.;; df.Define(""b1"", [&b]() { return b++; }); .Define(""b2"", ""(int) b1 * b1"") // This can even be a string; .Snapshot(""treeName"", ""df009_FromScratchVSTTree_df.root"");; }; ; void df009_FromScratchVSTTree(); {; ; classicWay();; RDFWay();; }; b#define b(i)Definition RSha256.hxx:100; f#define f(i)Definition RSha256.hxx:104; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; DateAugust 2017 ; AuthorDanilo Piparo (CERN) ; Definition in file df009_FromScratchVSTTree.C. tutorialsdataframedf009_FromScratchVSTTree.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html:2708,Guid,Guide,2708,doc/master/df009__FromScratchVSTTree_8C.html,https://root.cern,https://root.cern/doc/master/df009__FromScratchVSTTree_8C.html,1,['Guid'],['Guide']
Usability,":GSLDerivator::EvalForward ; (; double ; x, . double ; h . ). Computes the numerical derivative at a point x using an adaptive forward difference algorithm with a step size h. ; The function is evaluated only at points greater than x and at x itself. ; Definition at line 58 of file GSLDerivator.cxx. ◆ Result(). double ROOT::Math::GSLDerivator::Result ; (; ); const. return the result of the last derivative calculation ; Definition at line 109 of file GSLDerivator.cxx. ◆ SetFunction() [1/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; const IGenFunction & ; f). Set the function for calculating the derivatives. ; The function must implement the ROOT::Math::IGenFunction signature ; Definition at line 123 of file GSLDerivator.cxx. ◆ SetFunction() [2/2]. void ROOT::Math::GSLDerivator::SetFunction ; (; GSLFuncPointer ; f, . void * ; p = nullptr . ). Set the function f for evaluating the derivative using a GSL function pointer type. ; Parameters. f: free function pointer of the GSL required type ; p: pointer to the object carrying the function state (for example the function object itself) . Definition at line 117 of file GSLDerivator.cxx. ◆ Status(). int ROOT::Math::GSLDerivator::Status ; (; ); const. return the error status of the last integral calculation ; Definition at line 113 of file GSLDerivator.cxx. Member Data Documentation. ◆ fError. double ROOT::Math::GSLDerivator::fError. private . Definition at line 163 of file GSLDerivator.h. ◆ fFunction. GSLFunctionWrapper ROOT::Math::GSLDerivator::fFunction. private . Definition at line 165 of file GSLDerivator.h. ◆ fResult. double ROOT::Math::GSLDerivator::fResult. private . Definition at line 162 of file GSLDerivator.h. ◆ fStatus. int ROOT::Math::GSLDerivator::fStatus. private . Definition at line 161 of file GSLDerivator.h. math/mathmore/src/GSLDerivator.h; math/mathmore/src/GSLDerivator.cxx. ROOTMathGSLDerivator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html:6959,Guid,Guide,6959,doc/master/classROOT_1_1Math_1_1GSLDerivator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLDerivator.html,1,['Guid'],['Guide']
Usability,:Get ; (; ); const. Return contained pointer. ; Definition at line 86 of file TFitResultPtr.cxx. ◆ IsA(). virtual TClass * TFitResultPtr::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 60 of file TFitResultPtr.h. ◆ operator int(). TFitResultPtr::operator int ; (; ); const. inline . Definition at line 43 of file TFitResultPtr.h. ◆ operator*(). TFitResult & TFitResultPtr::operator* ; (; ); const. Implement the de-reference operator to make the class acts as a pointer to a TFitResult assert in case the class does not contain a pointer to TFitResult. ; Definition at line 63 of file TFitResultPtr.cxx. ◆ operator->(). TFitResult * TFitResultPtr::operator-> ; (; ); const. Implement the -> operator to make the class acts as a pointer to a TFitResult. ; assert in case the class does not contain a pointer to TFitResult ; Definition at line 75 of file TFitResultPtr.cxx. ◆ operator=(). TFitResultPtr & TFitResultPtr::operator= ; (; const TFitResultPtr & ; rhs). Assignment operator. ; if needed copy the TFitResult object and delete previous one if existing ; Definition at line 94 of file TFitResultPtr.cxx. ◆ Streamer(). virtual void TFitResultPtr::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TFitResultPtr::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TFitResultPtr.h. Member Data Documentation. ◆ fPointer. std::shared_ptr<TFitResult> TFitResultPtr::fPointer. private . ! Smart Pointer to TFitResult class ; Definition at line 58 of file TFitResultPtr.h. ◆ fStatus. int TFitResultPtr::fStatus. private . fit status code ; Definition at line 57 of file TFitResultPtr.h. Libraries for TFitResultPtr:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TFitResultPtr.h; hist/hist/src/TFitResultPtr.cxx. TFitResultPtr. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:51 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFitResultPtr.html:5425,Guid,Guide,5425,doc/master/classTFitResultPtr.html,https://root.cern,https://root.cern/doc/master/classTFitResultPtr.html,1,['Guid'],['Guide']
Usability,":GetAlignment ; (; int ; dflt). inlinevirtual . Reimplemented in TGHtmlMarkupElement.; Definition at line 256 of file TGHtml.h. ◆ GetOrderedListType(). virtual int TGHtmlElement::GetOrderedListType ; (; int ; dflt). inlinevirtual . Reimplemented in TGHtmlMarkupElement.; Definition at line 257 of file TGHtml.h. ◆ GetUnorderedListType(). virtual int TGHtmlElement::GetUnorderedListType ; (; int ; dflt). inlinevirtual . Reimplemented in TGHtmlMarkupElement.; Definition at line 258 of file TGHtml.h. ◆ GetVerticalAlignment(). virtual int TGHtmlElement::GetVerticalAlignment ; (; int ; dflt). inlinevirtual . Reimplemented in TGHtmlMarkupElement.; Definition at line 259 of file TGHtml.h. ◆ IsMarkup(). virtual int TGHtmlElement::IsMarkup ; (; ); const. inlinevirtual . Definition at line 254 of file TGHtml.h. ◆ MarkupArg(). virtual const char * TGHtmlElement::MarkupArg ; (; const char * ; , . const char * ;  . ). inlinevirtual . Reimplemented in TGHtmlMarkupElement.; Definition at line 255 of file TGHtml.h. Member Data Documentation. ◆ fCount. Html_16_t TGHtmlElement::fCount. Definition at line 267 of file TGHtml.h. ◆ fElId. int TGHtmlElement::fElId. Definition at line 268 of file TGHtml.h. ◆ fFlags. Html_u8_t TGHtmlElement::fFlags. Definition at line 266 of file TGHtml.h. ◆ fOffs. int TGHtmlElement::fOffs. Definition at line 269 of file TGHtml.h. ◆ fPNext. TGHtmlElement* TGHtmlElement::fPNext. Definition at line 262 of file TGHtml.h. ◆ fPPrev. TGHtmlElement* TGHtmlElement::fPPrev. Definition at line 263 of file TGHtml.h. ◆ fStyle. SHtmlStyle_t TGHtmlElement::fStyle. Definition at line 264 of file TGHtml.h. ◆ fType. Html_u8_t TGHtmlElement::fType. Definition at line 265 of file TGHtml.h. Libraries for TGHtmlElement:. [legend]; The documentation for this class was generated from the following files:; gui/guihtml/inc/TGHtml.h; gui/guihtml/src/TGHtmlElement.cxx. TGHtmlElement. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlElement.html:12328,Guid,Guide,12328,doc/master/classTGHtmlElement.html,https://root.cern,https://root.cern/doc/master/classTGHtmlElement.html,1,['Guid'],['Guide']
Usability,":GetDivAxis ; (; ). inlineoverridevirtual . Reimplemented from TGeoPatternFinder.; Definition at line 444 of file TGeoPatternFinder.h. ◆ IsA(). TClass * TGeoPatternSphR::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGeoPatternFinder.; Definition at line 450 of file TGeoPatternFinder.h. ◆ MakeCopy(). TGeoPatternFinder * TGeoPatternSphR::MakeCopy ; (; Bool_t ; reflect = kFALSE). overridevirtual . Make a copy of this finder. Reflect by Z if required. ; Implements TGeoPatternFinder.; Definition at line 1975 of file TGeoPatternFinder.cxx. ◆ operator=(). TGeoPatternSphR & TGeoPatternSphR::operator= ; (; const TGeoPatternSphR & ; pf). assignment operator ; Definition at line 1943 of file TGeoPatternFinder.cxx. ◆ SavePrimitive(). void TGeoPatternSphR::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save a primitive as a C++ statement(s) on output stream ""out"". ; Reimplemented from TObject.; Definition at line 1984 of file TGeoPatternFinder.cxx. ◆ Streamer(). void TGeoPatternSphR::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPatternFinder. ◆ StreamerNVirtual(). void TGeoPatternSphR::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 450 of file TGeoPatternFinder.h. ◆ UpdateMatrix(). void TGeoPatternSphR::UpdateMatrix ; (; Int_t ; idiv, . TGeoHMatrix & ; matrix . ); const. overridevirtual . Fills external matrix with the local one corresponding to the given division index. ; Reimplemented from TGeoPatternFinder.; Definition at line 2002 of file TGeoPatternFinder.cxx. Libraries for TGeoPatternSphR:. [legend]; The documentation for this class was generated from the following files:; geom/geom/inc/TGeoPatternFinder.h; geom/geom/src/TGeoPatternFinder.cxx. TGeoPatternSphR. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPatternSphR.html:17932,Guid,Guide,17932,doc/master/classTGeoPatternSphR.html,https://root.cern,https://root.cern/doc/master/classTGeoPatternSphR.html,1,['Guid'],['Guide']
Usability,":GetEntry overloads TBranch::ReadLeaves. ; Definition at line 167 of file TBranchRef.cxx. ◆ Reset(). void TBranchRef::Reset ; (; Option_t * ; option = """"). overridevirtual . Existing buffers are deleted; Entries, max and min are reset; TRefTable is cleared. . Reimplemented from TBranch.; Definition at line 187 of file TBranchRef.cxx. ◆ ResetAfterMerge(). void TBranchRef::ResetAfterMerge ; (; TFileMergeInfo * ; info). overridevirtual . Reset a Branch after a Merge operation (drop data but keep customizations) TRefTable is cleared. ; Reimplemented from TBranch.; Definition at line 198 of file TBranchRef.cxx. ◆ SetParent(). Int_t TBranchRef::SetParent ; (; const TObject * ; object, . Int_t ; branchID . ). virtual . Set the current parent branch. ; This function is called by TBranchElement::GetEntry() and TBranchElement::Fill() when reading or writing branches that may contain referenced objects. ; Definition at line 212 of file TBranchRef.cxx. ◆ SetRequestedEntry(). virtual void TBranchRef::SetRequestedEntry ; (; Long64_t ; entry). inlinevirtual . Definition at line 55 of file TBranchRef.h. ◆ Streamer(). void TBranchRef::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TBranch. ◆ StreamerNVirtual(). void TBranchRef::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TBranchRef.h. Member Data Documentation. ◆ fRefTable. TRefTable* TBranchRef::fRefTable. protected . pointer to the TRefTable ; Definition at line 39 of file TBranchRef.h. ◆ fRequestedEntry. Long64_t TBranchRef::fRequestedEntry. private . ! Cursor indicating which entry is being requested. ; Definition at line 36 of file TBranchRef.h. Libraries for TBranchRef:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchRef.h; tree/tree/src/TBranchRef.cxx. TBranchRef. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchRef.html:32851,Guid,Guide,32851,doc/master/classTBranchRef.html,https://root.cern,https://root.cern/doc/master/classTBranchRef.html,1,['Guid'],['Guide']
Usability,":GetLenHeaderstd::uint64_t GetLenHeader() constDefinition RNTuple.hxx:124; ROOT::RNTuple::fVersionPatchstd::uint16_t fVersionPatchChanging the patch version indicates new backported features from newer binary format versions.Definition RNTuple.hxx:95; ROOT::RNTuple::fFileTFile * fFile! The file from which the ntuple was streamed, registered in the custom streamerDefinition RNTuple.hxx:111; ROOT::RNTuple::fVersionMajorstd::uint16_t fVersionMajorChanging the major version indicates forward incompatible changes; such changes should correspond to ...Definition RNTuple.hxx:91; ROOT::RNTuple::GetSeekFooterstd::uint64_t GetSeekFooter() constDefinition RNTuple.hxx:126; ROOT::RNTuple::kVersionMinorstatic constexpr std::uint16_t kVersionMinorDefinition RNTuple.hxx:81; ROOT::RNTuple::fVersionEpochstd::uint16_t fVersionEpochVersion of the RNTuple binary format that the writer supports (see specification).Definition RNTuple.hxx:87; ROOT::RNTuple::GetVersionEpochstd::uint16_t GetVersionEpoch() constDefinition RNTuple.hxx:117; TCollectionCollection abstract base class.Definition TCollection.h:65; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; ROOT::Experimental::Internal::CreateAnchorRNTuple CreateAnchor(std::uint16_t versionEpoch, std::uint16_t versionMajor, std::uint16_t versionMinor, std::uint16_t versionPatch, std::uint64_t seekHeader, std::uint64_t nbytesHeader, std::uint64_t lenHeader, std::uint64_t seekFooter, std::uint64_t nbytesFooter, std::uint64_t lenFooter, std::uint64_t maxKeySize)Definition RNTuple.cxx:64; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treentuplev7incROOTRNTuple.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTuple_8hxx_source.html:11399,Guid,Guide,11399,doc/master/RNTuple_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RNTuple_8hxx_source.html,1,['Guid'],['Guide']
Usability,":GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual voidTProofServ::GetOptions(Int_t* argc, char** argv); const char*TProofServ::GetOrdinal() const; const char*TProofServ::GetPackageDir() const; const char*TProofServ::GetPrefix() const; TProof*TProofServ::GetProof() const; Int_tTProofServ::GetProtocol() const; Int_tTProofServ::GetQuerySeqNum() const; Float_tTProofServ::GetRealTime() const; const char*TProofServ::GetService() const; const char*TProofServ::GetSessionDir() const; const char*TProofServ::GetSessionTag() const; TSignalHandler*TApplication::GetSignalHandler() const; TSocket*TProofServ::GetSocket() const; virtual const char*TObject::GetTitle() const; Int_tTProofServ::GetTotSessions() const; virtual UInt_tTObject::GetUniqueID() const; const char*TProofServ::GetUser() const; Long_tTProofServ::GetVirtMemHWM() const; const char*TProofServ::GetWorkDir() const; virtual TProofServ::EQueryActionTProofServ::GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE); virtual voidTProofServ::HandleException(Int_t sig); virtual voidHandleFork(TMessage* mess); virtual voidTApplication::HandleIdleTimer()SIGNAL ; virtual voidHandleSigPipe(); virtual voidTProofServ::HandleSocketInput(); virtual Int_tTProofServ::HandleSocketInput(TMessage* mess, Bool_t all); virtual voidHandleTermination(); virtual Bool_tTApplication::HandleTermInput(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual voidTProofServ::HandleUrgentData(); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTApplication::Hide(); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTApplication::Iconify(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTApplication::Init(); voidTApplication::In",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofServLite.html:7287,resume,resume,7287,root/html528/TProofServLite.html,https://root.cern,https://root.cern/root/html528/TProofServLite.html,1,['resume'],['resume']
Usability,":IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGFrame.; Definition at line 102 of file TGSpeedo.h. ◆ IsThresholdActive(). Bool_t TGSpeedo::IsThresholdActive ; (; ). inline . Definition at line 73 of file TGSpeedo.h. ◆ LedClicked(). void TGSpeedo::LedClicked ; (; ). inline . Definition at line 100 of file TGSpeedo.h. ◆ OdoClicked(). void TGSpeedo::OdoClicked ; (; ). inline . Definition at line 99 of file TGSpeedo.h. ◆ ResetPeakVal(). void TGSpeedo::ResetPeakVal ; (; ). inline . Definition at line 95 of file TGSpeedo.h. ◆ SetBufferSize(). void TGSpeedo::SetBufferSize ; (; Int_t ; size). Change the circular buffer size (used for the automatic mean calculation). ; SetMeanValue is ignored if SetBufferSize is called with a greater-than-zero argument. The mean value is then automatically calculated by using the sum of values contained in the buffer divided by their count. To disable automatic mean calculation, simply call SetBufferSize with a zero argument ; Definition at line 322 of file TGSpeedo.cxx. ◆ SetDisplayText(). void TGSpeedo::SetDisplayText ; (; const char * ; text1, . const char * ; text2 = """" . ). Set small display text (two lines). ; Definition at line 347 of file TGSpeedo.cxx. ◆ SetLabelText(). void TGSpeedo::SetLabelText ; (; const char * ; text1, . const char * ; text2 = """" . ). Set main label text (two lines). ; Definition at line 361 of file TGSpeedo.cxx. ◆ SetMeanValue(). void TGSpeedo::SetMeanValue ; (; Float_t ; mean). inline . Definition at line 96 of file TGSpeedo.h. ◆ SetMinMaxScale(). void TGSpeedo::SetMinMaxScale ; (; Float_t ; min, . Float_t ; max . ). Set min and max scale values. ; Definition at line 377 of file TGSpeedo.cxx. ◆ SetOdoValue(). void TGSpeedo::SetOdoValue ; (; Int_t ; val). Set actual value of odo meter. ; Definition at line 334 of file TGSpeedo.cxx. ◆ SetScaleValue() [1/2]. void TGSpeedo::SetScaleValue ; (; Float_t ; val). Set actual scale (needle position) value. ; Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGSpeedo.html:37110,simpl,simply,37110,doc/master/classTGSpeedo.html,https://root.cern,https://root.cern/doc/master/classTGSpeedo.html,1,['simpl'],['simply']
Usability,":Math::DistSampler::SetRange ; (; const std::vector< double > & ; xmin, . const std::vector< double > & ; xmax . ). inline . Set the range for all dimensions (use std::vector) ; Definition at line 140 of file DistSampler.h. ◆ SetRange() [4/4]. void ROOT::Math::DistSampler::SetRange ; (; double ; xmin, . double ; xmax, . int ; icoord = 0 . ). Set the range in a given dimension. ; Definition at line 40 of file DistSampler.cxx. ◆ SetSeed(). virtual void ROOT::Math::DistSampler::SetSeed ; (; unsigned int ; ). inlinevirtual . Set the random seed for the TRandom instances used by the sampler classes. ; To be implemented by the derived classes who provides random sampling ; Reimplemented in TFoamSampler, and TUnuranSampler.; Definition at line 125 of file DistSampler.h. ◆ SetUseLogPdf(). virtual void ROOT::Math::DistSampler::SetUseLogPdf ; (; bool ; = true). inlinevirtual . Use the log of the provided pdf. ; Implemented by the derived classes ; Reimplemented in TUnuranSampler.; Definition at line 162 of file DistSampler.h. Member Data Documentation. ◆ fData. std::vector<double> ROOT::Math::DistSampler::fData. mutableprivate . ! internal array used to cached the sample data ; Definition at line 286 of file DistSampler.h. ◆ fFunc. const ROOT::Math::IMultiGenFunction* ROOT::Math::DistSampler::fFunc. private . internal function (ND) ; Definition at line 288 of file DistSampler.h. ◆ fOwnFunc. bool ROOT::Math::DistSampler::fOwnFunc. private . flag to indicate if the function is owned ; Definition at line 285 of file DistSampler.h. ◆ fRange. ROOT::Fit::DataRange* ROOT::Math::DistSampler::fRange. private . data range ; Definition at line 287 of file DistSampler.h. Libraries for ROOT::Math::DistSampler:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/DistSampler.h; math/mathcore/src/DistSampler.cxx. ROOTMathDistSampler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html:16814,Guid,Guide,16814,doc/master/classROOT_1_1Math_1_1DistSampler.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1DistSampler.html,1,['Guid'],['Guide']
Usability,":Math::GSLRngRanLuxOld Ranlux generator (James, Luscher) (default luxury level, p = 223) (This is eequivalent to TRandom...Definition GSLRndmEngines.h:355; ROOT::Math::GSLRngRanLux::GSLRngRanLuxGSLRngRanLux()Definition GSLRndmEngines.cxx:403; ROOT::Math::GSLRngRanLux::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:357; ROOT::Math::GSLRngRanMarRANMAR generator see hereDefinition GSLRndmEngines.h:494; ROOT::Math::GSLRngRanMar::GSLRngRanMarGSLRngRanMar()Definition GSLRndmEngines.cxx:480; ROOT::Math::GSLRngRanMar::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:496; ROOT::Math::GSLRngRandBSD rand() generator gsl_rmg_rand from hereDefinition GSLRndmEngines.h:481; ROOT::Math::GSLRngRand::GSLRngRandGSLRngRand()Definition GSLRndmEngines.cxx:472; ROOT::Math::GSLRngRand::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:483; ROOT::Math::GSLRngTausTausworthe generator by L'Ecuyer see hereDefinition GSLRndmEngines.h:428; ROOT::Math::GSLRngTaus::GSLRngTausGSLRngTaus()Definition GSLRndmEngines.cxx:439; ROOT::Math::GSLRngTaus::BaseTypeGSLRandomEngine BaseTypeDefinition GSLRndmEngines.h:430; ROOT::Math::GSLRngWrapperGSLRngWrapper class to wrap gsl_rng structure.Definition GSLRngWrapper.h:25; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::GSLRngRanLux1GSLRngRanLuxS1 GSLRngRanLux1Definition GSLRndmEngines.h:374; ROOT::Math::GSLRngRanLux2GSLRngRanLuxS2 GSLRngRanLux2Definition GSLRndmEngines.h:389; ROOT::Math::GSLRngRanLux48GSLRngRanLuxD2 GSLRngRanLux48Definition GSLRndmEngines.h:418; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathmoreincMathGSLRndmEngines.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GSLRndmEngines_8h_source.html:28113,Guid,Guide,28113,doc/master/GSLRndmEngines_8h_source.html,https://root.cern,https://root.cern/doc/master/GSLRndmEngines_8h_source.html,1,['Guid'],['Guide']
Usability,":Math::GaussIntegrator, and ROOT::Math::GSLIntegrator. ◆ IntegralLow(). virtual double ROOT::Math::VirtualIntegratorOneDim::IntegralLow ; (; double ; b). pure virtual . evaluate integral over the (-inf, b) ; Implemented in ROOT::Math::GaussIntegrator, and ROOT::Math::GSLIntegrator. ◆ IntegralUp(). virtual double ROOT::Math::VirtualIntegratorOneDim::IntegralUp ; (; double ; a). pure virtual . evaluate integral over the (a, +inf) ; Implemented in ROOT::Math::GaussIntegrator, and ROOT::Math::GSLIntegrator. ◆ Options(). virtual ROOT::Math::IntegratorOneDimOptions ROOT::Math::VirtualIntegratorOneDim::Options ; (; ); const. pure virtual . get the option used for the integration must be implemented by derived class ; Implemented in ROOT::Math::GaussIntegrator, ROOT::Math::GaussLegendreIntegrator, and ROOT::Math::GSLIntegrator. ◆ SetFunction(). virtual void ROOT::Math::VirtualIntegratorOneDim::SetFunction ; (; const IGenFunction & ; ). pure virtual . set integration function ; Implemented in ROOT::Math::GaussIntegrator, and ROOT::Math::GSLIntegrator. ◆ SetOptions(). virtual void ROOT::Math::VirtualIntegratorOneDim::SetOptions ; (; const ROOT::Math::IntegratorOneDimOptions & ; opt). inlinevirtual . set the options (should be re-implemented by derived classes -if more options than tolerance exist ; Reimplemented in ROOT::Math::GaussIntegrator, ROOT::Math::GaussLegendreIntegrator, and ROOT::Math::GSLIntegrator.; Definition at line 140 of file VirtualIntegrator.h. ◆ Type(). virtual ROOT::Math::IntegrationOneDim::Type ROOT::Math::VirtualIntegratorOneDim::Type ; (; ); const. inlinevirtual . return type of integrator ; Definition at line 134 of file VirtualIntegrator.h. Libraries for ROOT::Math::VirtualIntegratorOneDim:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/VirtualIntegrator.h. ROOTMathVirtualIntegratorOneDim. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html:5915,Guid,Guide,5915,doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1VirtualIntegratorOneDim.html,1,['Guid'],['Guide']
Usability,:Math::LorentzVector< CoordSystem >::theta ; (; ); const. inline . Definition at line 651 of file LorentzVector.h. ◆ Vect(). template<class CoordSystem > . ::ROOT::Math::DisplacementVector3D< Cartesian3D< Scalar > > ROOT::Math::LorentzVector< CoordSystem >::Vect ; (; ); const. inline . get the spatial components of the Vector in a DisplacementVector based on Cartesian Coordinates ; Definition at line 371 of file LorentzVector.h. ◆ X(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::X ; (; ); const. inline . Definition at line 280 of file LorentzVector.h. ◆ x(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::x ; (; ); const. inline . Definition at line 642 of file LorentzVector.h. ◆ Y(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Y ; (; ); const. inline . Definition at line 285 of file LorentzVector.h. ◆ y(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::y ; (; ); const. inline . Definition at line 643 of file LorentzVector.h. ◆ Z(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::Z ; (; ); const. inline . Definition at line 290 of file LorentzVector.h. ◆ z(). template<class CoordSystem > . Scalar ROOT::Math::LorentzVector< CoordSystem >::z ; (; ); const. inline . Definition at line 644 of file LorentzVector.h. Member Data Documentation. ◆ fCoordinates. template<class CoordSystem > . CoordSystem ROOT::Math::LorentzVector< CoordSystem >::fCoordinates. private . Definition at line 685 of file LorentzVector.h. ◆ fDimension. template<class CoordSystem > . constexpr unsigned int ROOT::Math::LorentzVector< CoordSystem >::fDimension = CoordinateType::Dimension. staticconstexprprivate . Definition at line 686 of file LorentzVector.h. math/genvector/inc/Math/GenVector/LorentzVector.h. ROOTMathLorentzVector. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html:34646,Guid,Guide,34646,doc/master/classROOT_1_1Math_1_1LorentzVector.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1LorentzVector.html,1,['Guid'],['Guide']
Usability,":MethodBase. ◆ GetTrainingSettings() [1/2]. std::vector< TTrainingSettings > & TMVA::MethodDL::GetTrainingSettings ; (; ). inline . Definition at line 281 of file MethodDL.h. ◆ GetTrainingSettings() [2/2]. const std::vector< TTrainingSettings > & TMVA::MethodDL::GetTrainingSettings ; (; ); const. inline . Definition at line 280 of file MethodDL.h. ◆ GetTrainingStrategyString(). TString TMVA::MethodDL::GetTrainingStrategyString ; (; ); const. inline . Definition at line 276 of file MethodDL.h. ◆ GetWeightInitialization(). DNN::EInitialization TMVA::MethodDL::GetWeightInitialization ; (; ); const. inline . Definition at line 268 of file MethodDL.h. ◆ GetWeightInitializationString(). TString TMVA::MethodDL::GetWeightInitializationString ; (; ); const. inline . Definition at line 277 of file MethodDL.h. ◆ HasAnalysisType(). Bool_t TMVA::MethodDL::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . Check the type of analysis the deep learning network can do. ; What kind of analysis type can handle the CNN. ; Implements TMVA::IMethod.; Definition at line 1091 of file MethodDL.cxx. ◆ Init(). void TMVA::MethodDL::Init ; (; void ; ). privatevirtual . default initializations ; Implements TMVA::MethodBase.; Definition at line 432 of file MethodDL.cxx. ◆ IsA(). virtual TClass * TMVA::MethodDL::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodBase.; Definition at line 212 of file MethodDL.h. ◆ ParseBatchLayout(). void TMVA::MethodDL::ParseBatchLayout ; (; ). private . Parse the input layout. ; Definition at line 482 of file MethodDL.cxx. ◆ ParseBatchNormLayer(). template<typename Architecture_t , typename Layer_t > . void TMVA::MethodDL::ParseBatchNormLayer ; (; DNN::TDeepNet< Architecture_t, Layer_t > & ; deepNet, . std::vector< DNN::TDeepNet< Architecture_t, Layer_t > > & ; nets, . TString ; layerString, . TString ; delim . ). private . Pases the layer stri",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodDL.html:43835,learn,learning,43835,doc/master/classTMVA_1_1MethodDL.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodDL.html,1,['learn'],['learning']
Usability,":MethodMLP::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_t * ; errUpper = nullptr . ). virtual . get the mva value generated by the NN ; Reimplemented from TMVA::MethodANNBase.; Definition at line 1549 of file MethodMLP.cxx. ◆ HasAnalysisType(). Bool_t TMVA::MethodMLP::HasAnalysisType ; (; Types::EAnalysisType ; type, . UInt_t ; numberClasses, . UInt_t ; numberTargets . ). virtual . MLP can handle classification with 2 classes and regression with one regression-target. ; Implements TMVA::IMethod.; Definition at line 152 of file MethodMLP.cxx. ◆ HasInverseHessian(). bool TMVA::MethodMLP::HasInverseHessian ; (; ). inline . Definition at line 94 of file MethodMLP.h. ◆ Init(). void TMVA::MethodMLP::Init ; (; void ; ). privatevirtual . default initializations ; Implements TMVA::MethodBase.; Definition at line 164 of file MethodMLP.cxx. ◆ InitializeLearningRates(). void TMVA::MethodMLP::InitializeLearningRates ; (; ). private . initialize learning rates of synapses, used only by back propagation ; Definition at line 278 of file MethodMLP.cxx. ◆ IsA(). virtual TClass * TMVA::MethodMLP::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::MethodANNBase.; Definition at line 219 of file MethodMLP.h. ◆ LineSearch(). Bool_t TMVA::MethodMLP::LineSearch ; (; TMatrixD & ; Dir, . std::vector< Double_t > & ; Buffer, . Double_t * ; dError = nullptr . ). private . zjh ; Definition at line 840 of file MethodMLP.cxx. ◆ MakeClassSpecific(). void TMVA::MethodMLP::MakeClassSpecific ; (; std::ostream & ; fout, . const TString & ; className . ); const. protectedvirtual . write specific classifier response ; Reimplemented from TMVA::MethodANNBase.; Definition at line 1704 of file MethodMLP.cxx. ◆ ProcessOptions(). void TMVA::MethodMLP::ProcessOptions ; (; ). privatevirtual . process user options ; Reimplemented from TMVA::MethodANNBase.; Definition at line 247 of file MethodMLP.cxx. ◆ SetDir(). void TMVA::MethodMLP::SetDir ; (; TMatrixD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html:45482,learn,learning,45482,doc/master/classTMVA_1_1MethodMLP.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodMLP.html,1,['learn'],['learning']
Usability,":MixMaxEngine< N, S >::Name. static . get name of the generator ; Definition at line 157 of file MixMaxEngine.icc. ◆ operator()(). template<int N, int SkipNumber> . double ROOT::Math::MixMaxEngine< N, SkipNumber >::operator() ; (; ). inline . generate a double random number (faster interface) ; Definition at line 138 of file MixMaxEngine.h. ◆ Rndm(). template<int N, int SkipNumber> . double ROOT::Math::MixMaxEngine< N, SkipNumber >::Rndm ; (; ). inlineoverridevirtual . Implements ROOT::Math::TRandomEngine.; Definition at line 135 of file MixMaxEngine.h. ◆ Rndm_impl(). template<int N, int S> . double ROOT::Math::MixMaxEngine< N, S >::Rndm_impl. private . implementation function to generate the random number ; Definition at line 92 of file MixMaxEngine.icc. ◆ RndmArray(). template<int N, int S> . void ROOT::Math::MixMaxEngine< N, S >::RndmArray ; (; int ; n, . double * ; array . ). generate an array of random numbers ; Definition at line 123 of file MixMaxEngine.icc. ◆ SetSeed(). template<int N, int S> . void ROOT::Math::MixMaxEngine< N, S >::SetSeed ; (; Result_t ; seed). set the generator seed ; Definition at line 53 of file MixMaxEngine.icc. ◆ SetState(). template<int N, int S> . void ROOT::Math::MixMaxEngine< N, S >::SetState ; (; const std::vector< StateInt_t > & ; state). protected . set the full initial generator state ; Definition at line 130 of file MixMaxEngine.icc. ◆ Size(). template<int N, int S> . int ROOT::Math::MixMaxEngine< N, S >::Size. static . Get the size of the generator. ; Definition at line 147 of file MixMaxEngine.icc. Member Data Documentation. ◆ fRng. template<int N, int SkipNumber> . MixMaxEngineImpl<N>* ROOT::Math::MixMaxEngine< N, SkipNumber >::fRng. private . mixmax internal engine class ; Definition at line 170 of file MixMaxEngine.h. math/mathcore/inc/Math/MixMaxEngine.h; math/mathcore/inc/Math/MixMaxEngine.icc. ROOTMathMixMaxEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html:8909,Guid,Guide,8909,doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MixMaxEngine.html,1,['Guid'],['Guide']
Usability,":NPar ; (; ); const. inlineoverridevirtual . Return the number of Parameters. ; Implements ROOT::Math::IBaseParam.; Definition at line 257 of file MultiDimParamFunctionAdapter.h. ◆ operator=(). MultiDimParamGradFunctionAdapter & ROOT::Math::MultiDimParamGradFunctionAdapter::operator= ; (; const MultiDimParamGradFunctionAdapter & ; rhs). inline . Assignment operator. ; Definition at line 224 of file MultiDimParamFunctionAdapter.h. ◆ ParameterGradient(). void ROOT::Math::MultiDimParamGradFunctionAdapter::ParameterGradient ; (; const double * ; x, . const double * ; p, . double * ; grad . ); const. inlineoverride . Definition at line 271 of file MultiDimParamFunctionAdapter.h. ◆ Parameters(). const double * ROOT::Math::MultiDimParamGradFunctionAdapter::Parameters ; (; ); const. inlineoverridevirtual . Access the parameter values. ; Implements ROOT::Math::IBaseParam.; Definition at line 247 of file MultiDimParamFunctionAdapter.h. ◆ SetParameters(). void ROOT::Math::MultiDimParamGradFunctionAdapter::SetParameters ; (; const double * ; p). inlineoverridevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values. to be defined: can user change number of params ? At the moment no. ; Implements ROOT::Math::IBaseParam.; Definition at line 252 of file MultiDimParamFunctionAdapter.h. Member Data Documentation. ◆ fFunc. IParamGradFunction* ROOT::Math::MultiDimParamGradFunctionAdapter::fFunc. private . Definition at line 298 of file MultiDimParamFunctionAdapter.h. ◆ fOwn. bool ROOT::Math::MultiDimParamGradFunctionAdapter::fOwn. private . Definition at line 297 of file MultiDimParamFunctionAdapter.h. Libraries for ROOT::Math::MultiDimParamGradFunctionAdapter:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Math/MultiDimParamFunctionAdapter.h. ROOTMathMultiDimParamGradFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html:10305,Guid,Guide,10305,doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1MultiDimParamGradFunctionAdapter.html,1,['Guid'],['Guide']
Usability,":NTrees=1000:BoostType=Grad:Shrinkage=0.10:UseBaggedBoost:BaggedSampleFraction=0.50:nCuts=20:MaxDepth=2"");; 129 if (Use[""MLP""]) // neural network; 130 factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLP"", ""!H:!V:NeuronType=tanh:NCycles=1000:HiddenLayers=N+5,5:TestRate=5:EstimatorType=MSE"");; 131 if (Use[""FDA_GA""]) // functional discriminant with GA minimizer; 132 factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GA"", ""H:!V:Formula=(0)+(1)*x0+(2)*x1+(3)*x2+(4)*x3:ParRanges=(-1,1);(-10,10);(-10,10);(-10,10);(-10,10):FitMethod=GA:PopSize=300:Cycles=3:Steps=20:Trim=True:SaveBestGen=1"" );; 133 if (Use[""PDEFoam""]) // PDE-Foam approach; 134 factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"", ""!H:!V:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; 135 ; 136 ; 137 if (Use[""DL_CPU""]) {; 138 TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; 139 TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; 140 ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; 141 TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; 142 ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; 143 nnOptions.Append("":"");; 144 nnOptions.Append(layoutString);; 145 nnOptions.Append("":"");; 146 nnOptions.Append(trainingStrategyString);; 147 factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_CPU"", nnOptions);; 148 }; 149 if (Use[""DL_GPU""]) {; 150 TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; 151 TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; 152 ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; 153 TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; 154 ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; 155 nnOptions.Append("":"");; 156 nnOptions.Append(layoutString);; 157 nnOptions.Append("":"");; 158 nnOptions.Append(trainingStrategyString);; 159 factor",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:5570,Learn,LearningRate,5570,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,1,['Learn'],['LearningRate']
Usability,":ParticleList ; (; ); const. inline . Definition at line 73 of file TDatabasePDG.h. ◆ Print(). void TDatabasePDG::Print ; (; Option_t * ; opt = """"); const. overridevirtual . Print contents of PDG database. ; Reimplemented from TObject.; Definition at line 264 of file TDatabasePDG.cxx. ◆ ReadPDGTable(). void TDatabasePDG::ReadPDGTable ; (; const char * ; filename = """"). virtual . read list of particles from a file if the particle list does not exist, it is created, otherwise particles are added to the existing list See $ROOTSYS/etc/pdg_table.txt to see the file format ; Definition at line 767 of file TDatabasePDG.cxx. ◆ ReadPDGTableImpl(). void TDatabasePDG::ReadPDGTableImpl ; (; const char * ; filename, . bool ; isParticleListInitializedWhenInvoking . ). protectedvirtual . Definition at line 574 of file TDatabasePDG.cxx. ◆ Streamer(). void TDatabasePDG::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TDatabasePDG::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 83 of file TDatabasePDG.h. ◆ WritePDGTable(). Int_t TDatabasePDG::WritePDGTable ; (; const char * ; filename). virtual . write contents of the particle DB into a file ; Definition at line 784 of file TDatabasePDG.cxx. Member Data Documentation. ◆ fListOfClasses. TObjArray* TDatabasePDG::fListOfClasses. protected . Definition at line 25 of file TDatabasePDG.h. ◆ fParticleList. THashList* TDatabasePDG::fParticleList. protected . Definition at line 24 of file TDatabasePDG.h. ◆ fPdgMap. TExMap* TDatabasePDG::fPdgMap. mutableprotected . Definition at line 26 of file TDatabasePDG.h. Libraries for TDatabasePDG:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TDatabasePDG.h; montecarlo/eg/src/TDatabasePDG.cxx. TDatabasePDG. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDatabasePDG.html:20908,Guid,Guide,20908,doc/master/classTDatabasePDG.html,https://root.cern,https://root.cern/doc/master/classTDatabasePDG.html,1,['Guid'],['Guide']
Usability,":RAttrMap::AddValue ; (; const std::string & ; name, . const std::string & ; value . ). inline . Definition at line 168 of file RAttrMap.hxx. ◆ AddValue() [5/6]. RAttrMap & ROOT::Experimental::RAttrMap::AddValue ; (; const std::string & ; name, . double ; value . ). inline . Definition at line 167 of file RAttrMap.hxx. ◆ AddValue() [6/6]. RAttrMap & ROOT::Experimental::RAttrMap::AddValue ; (; const std::string & ; name, . int ; value . ). inline . Definition at line 166 of file RAttrMap.hxx. ◆ begin(). auto ROOT::Experimental::RAttrMap::begin ; (; ); const. inline . Definition at line 202 of file RAttrMap.hxx. ◆ Change(). bool RAttrMap::Change ; (; const std::string & ; name, . Value_t * ; value = nullptr . ). Change attribute using string value and kind Used to change attributes from JS side Returns true if value was really changed. ; Definition at line 137 of file RAttrMap.cxx. ◆ Clear(). void ROOT::Experimental::RAttrMap::Clear ; (; const std::string & ; name). inline . Clear specified attribute. ; Definition at line 193 of file RAttrMap.hxx. ◆ end(). auto ROOT::Experimental::RAttrMap::end ; (; ); const. inline . Definition at line 203 of file RAttrMap.hxx. ◆ Find(). const Value_t * ROOT::Experimental::RAttrMap::Find ; (; const std::string & ; name); const. inline . Definition at line 186 of file RAttrMap.hxx. ◆ operator=(). RAttrMap & ROOT::Experimental::RAttrMap::operator= ; (; const RAttrMap & ; src). inline . Definition at line 178 of file RAttrMap.hxx. Friends And Related Symbol Documentation. ◆ RAttrBase. friend class RAttrBase. friend . Definition at line 35 of file RAttrMap.hxx. ◆ RStyle. friend class RStyle. friend . Definition at line 36 of file RAttrMap.hxx. Member Data Documentation. ◆ m. std::unordered_map<std::string, std::unique_ptr<Value_t> > ROOT::Experimental::RAttrMap::m. private . JSON_object. ; Definition at line 133 of file RAttrMap.hxx. Libraries for ROOT::Experimental::RAttrMap:. [legend]; The documentation for this class was generated from",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html:6851,Clear,Clear,6851,doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RAttrMap.html,1,['Clear'],['Clear']
Usability,":RDF::RActionImplBase class for action helpers, see RInterface::Book() for more information.Definition RActionImpl.hxx:26; ROOT::Detail::RDF::RActionImpl::CallMakeNewHelper CallMakeNew(void *, Args...)Definition RActionImpl.hxx:58; ROOT::Detail::RDF::RActionImpl::CallFinalizeTaskauto CallFinalizeTask(unsigned int slot) -> decltype(std::declval< T >().FinalizeTask(slot))Definition RActionImpl.hxx:31; ROOT::Detail::RDF::RActionImpl::~RActionImplvirtual ~RActionImpl()=default; ROOT::Detail::RDF::RActionImpl::CallMakeNewauto CallMakeNew(void *typeErasedResSharedPtr) -> decltype(std::declval< T >().MakeNew(typeErasedResSharedPtr))Definition RActionImpl.hxx:52; ROOT::Detail::RDF::RActionImpl::CallPartialUpdatevoid * CallPartialUpdate(...)Definition RActionImpl.hxx:46; ROOT::Detail::RDF::RActionImpl::GetSampleCallbackvirtual ROOT::RDF::SampleCallback_t GetSampleCallback()Override this method to register a callback that is executed before the processing a new data sample ...Definition RActionImpl.hxx:73; ROOT::Detail::RDF::RActionImpl::CallPartialUpdateauto CallPartialUpdate(unsigned int slot) -> decltype(std::declval< H >().PartialUpdate(slot),(void *)(nullptr))Definition RActionImpl.hxx:40; ROOT::Detail::RDF::RActionImpl::GetMergeableValuevirtual std::unique_ptr< RMergeableValueBase > GetMergeableValue() constDefinition RActionImpl.hxx:66; ROOT::Detail::RDF::RActionImpl::CallFinalizeTaskvoid CallFinalizeTask(unsigned int, Args...)Definition RActionImpl.hxx:37; ROOT::RDF::SampleCallback_tstd::function< void(unsigned int, const ROOT::RDF::RSampleInfo &)> SampleCallback_tThe type of a data-block callback, registered with an RDataFrame computation graph via e....Definition RSampleInfo.hxx:134; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. treedataframeincROOTRDFRActionImpl.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RActionImpl_8hxx_source.html:5059,Guid,Guide,5059,doc/master/RActionImpl_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RActionImpl_8hxx_source.html,1,['Guid'],['Guide']
Usability,":RField< TObject >.; Definition at line 431 of file RFieldBase.hxx. ◆ operator=() [1/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; const RFieldBase & ; ). delete . ◆ operator=() [2/2]. RFieldBase & ROOT::Experimental::RFieldBase::operator= ; (; RFieldBase && ; ). default . ◆ Read() [1/2]. void ROOT::Experimental::RFieldBase::Read ; (; NTupleSize_t ; globalIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 362 of file RFieldBase.hxx. ◆ Read() [2/2]. void ROOT::Experimental::RFieldBase::Read ; (; RClusterIndex ; clusterIndex, . void * ; to . ). inlineprotected . Populate a single value with data from the field. ; The memory location pointed to by to needs to be of the fitting type. The fast path is conditioned by the field qualifying as simple, i.e. maps as-is to a single column and has no read callback. ; Definition at line 378 of file RFieldBase.hxx. ◆ ReadBulk(). std::size_t ROOT::Experimental::RFieldBase::ReadBulk ; (; const RBulkSpec & ; bulkSpec). protected . Returns the number of newly available values, that is the number of bools in bulkSpec.fMaskAvail that flipped from false to true. ; As a special return value, kAllSet can be used if all values are read independent from the masks. ; Definition at line 1086 of file RField.cxx. ◆ ReadBulkImpl(). std::size_t ROOT::Experimental::RFieldBase::ReadBulkImpl ; (; const RBulkSpec & ; bulkSpec). protectedvirtual . General implementation of bulk read. ; Loop over the required range and read values that are required and not already present. Derived classes may implement more optimized versions of this method. See ReadBulk() for the return value. ; Reimplemented in ROOT::Experimental::RField< RNTupleCardinality< SizeT > >, and ROOT::Experimental::RR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html:47792,simpl,simple,47792,doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RFieldBase.html,1,['simpl'],['simple']
Usability,":ROOT::EExecutionPolicy &executionPolicy=::ROOT::EExecutionPolicy::kSequential)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; LogLikelihoodFCN(const LogLikelihoodFCN &f)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ModelFunction() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlinevirtual; ModelFunctionPtr() constROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inline; NCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; NDim() const overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; NFitPoints() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; NPoints() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; operator=(const LogLikelihoodFCN &rhs)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ResetNCalls()ROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; SetData(const std::shared_ptr< DataType > &data)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; SetModelFunction(const std::shared_ptr< IModelFunction > &func)ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotected; T typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; Type() constROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual; Type_t typedefROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >; UpdateNCalls() constROOT::Math::BasicFitMethodFunction< DerivFunType >inlinevirtual; UseSumOfWeightSquare(bool on=true)ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inline; ~BasicFCN()ROOT::Fit::BasicFCN< DerivFunType, ModelFunType, DataType >inlineprotectedvirtual; ~BasicFitMethodFunction() overrideROOT::Math::BasicFitMethodFunction< DerivFunType >inline; ~LogLikelihoodFCN()ROOT::Fit::LogLikelihoodFCN< DerivFunType, ModelFunType >inlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html:5599,Guid,Guide,5599,doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1LogLikelihoodFCN-members.html,1,['Guid'],['Guide']
Usability,":RWebDisplayArgs::kLocal@ kLocaleither CEF or Qt5 - both runs on local display without real http serverDefinition RWebDisplayArgs.hxx:46; ROOT::RWebDisplayArgs::kServer@ kServerindicates that ROOT runs as server and just printouts window URL, browser should be started by the us...Definition RWebDisplayArgs.hxx:48; ROOT::RWebDisplayArgs::kOff@ kOffdisable web display, do not start any browserDefinition RWebDisplayArgs.hxx:50; ROOT::RWebDisplayArgs::kEmbedded@ kEmbeddedwindow will be embedded into other, no extra browser need to be startedDefinition RWebDisplayArgs.hxx:49; ROOT::RWebDisplayArgs::kCEF@ kCEFChromium Embedded Framework - local display with CEF libs.Definition RWebDisplayArgs.hxx:43; ROOT::RWebDisplayArgs::kQt5@ kQt5Qt5 QWebEngine libraries - Chromium code packed in qt5.Definition RWebDisplayArgs.hxx:44; ROOT::RWebDisplayArgs::kQt6@ kQt6Qt6 QWebEngine libraries - Chromium code packed in qt6.Definition RWebDisplayArgs.hxx:45; ROOT::RWebDisplayArgs::kCustom@ kCustomcustom web browser, execution string should be providedDefinition RWebDisplayArgs.hxx:52; ROOT::RWebDisplayArgs::kChrome@ kChromeGoogle Chrome browser.Definition RWebDisplayArgs.hxx:39; ROOT::RWebDisplayArgs::kEdge@ kEdgeMicrosoft Edge browser (Windows only)Definition RWebDisplayArgs.hxx:40; ROOT::RWebDisplayArgs::SetHeadlessvoid SetHeadless(bool on=true)set headless modeDefinition RWebDisplayArgs.hxx:164; ROOT::RWebDisplayArgs::RWebDisplayArgsRWebDisplayArgs()Default constructor.Definition RWebDisplayArgs.cxx:42; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::WebGUILogROOT::Experimental::RLogChannel & WebGUILog()Log channel for WebGUI diagnostics.Definition RWebDisplayArgs.cxx:24. guiwebdisplaysrcRWebDisplayArgs.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:08:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebDisplayArgs_8cxx_source.html:19002,Guid,Guide,19002,doc/v632/RWebDisplayArgs_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebDisplayArgs_8cxx_source.html,1,['Guid'],['Guide']
Usability,":Random::NegativeBinomialunsigned int NegativeBinomial(double n, double prob)Negative Binomial distribution First parameter is n, second is probability To be consistent with Rand...Definition Random.h:196; ROOT::Math::Random::RandomRandom(unsigned int seed)Definition Random.h:55; ROOT::Math::Random::fFunctionsRndmFunctions fFunctions! random functions objectDefinition Random.h:227; ROOT::Math::Random::EngineSizeunsigned int EngineSize() constReturn the size of the generator state.Definition Random.h:85; ROOT::Math::Random::operator()double operator()()Definition Random.h:90; ROOT::Math::Random::Uniform2double Uniform2(double a, double b)Definition Random.h:213; ROOT::Math::Random::Rndmdouble Rndm()Definition Random.h:62; ROOT::Math::Random::FunctionsRandomFunctions< Engine, EngineBaseType > & Functions()Definition Random.h:218; ROOT::Math::Random::Gausdouble Gaus(double mean=0, double sigma=1)Definition Random.h:111; ROOT::Math::Random::Integeruint64_t Integer()Definition Random.h:94; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::RandomMT64Random< ROOT::Math::StdEngine< std::mt19937_64 > > RandomMT64Definition Random.h:249; ROOT::Math::RandomRanlux48Random< ROOT::Math::StdEngine< std::ranlux48 > > RandomRanlux48Definition Random.h:250; ROOT::Math::RandomMixMaxRandom< ROOT::Math::MixMaxEngine< 240, 0 > > RandomMixMaxUseful typedef definitions.Definition Random.h:247; ROOT::Math::RandomMT19937Random< ROOT::Math::MersenneTwisterEngine > RandomMT19937Definition Random.h:248; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; mTMarker mDefinition textangle.C:8. mathmathcoreincMathRandom.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Random_8h_source.html:11737,Guid,Guide,11737,doc/master/Random_8h_source.html,https://root.cern,https://root.cern/doc/master/Random_8h_source.html,1,['Guid'],['Guide']
Usability,":Rectify ; (; ). Re-adjust components place angles in canonical ranges. ; Definition at line 37 of file EulerAngles.cxx. ◆ SetComponents() [1/2]. template<class IT > . void ROOT::Math::EulerAngles::SetComponents ; (; IT ; begin, . IT ; end . ). inline . Set the three Euler angles given a pair of pointers or iterators defining the beginning and end of an array of three Scalars. ; Definition at line 153 of file EulerAngles.h. ◆ SetComponents() [2/2]. void ROOT::Math::EulerAngles::SetComponents ; (; Scalar ; phi, . Scalar ; theta, . Scalar ; psi . ). inline . Set the components phi, theta, psi based on three Scalars. ; Definition at line 188 of file EulerAngles.h. ◆ SetPhi(). void ROOT::Math::EulerAngles::SetPhi ; (; Scalar ; phi). inline . Set Phi Euler angle // JMM 30 Jan. ; 2006 ; Definition at line 203 of file EulerAngles.h. ◆ SetPsi(). void ROOT::Math::EulerAngles::SetPsi ; (; Scalar ; psi). inline . Set Psi Euler angle // JMM 30 Jan. ; 2006 ; Definition at line 223 of file EulerAngles.h. ◆ SetTheta(). void ROOT::Math::EulerAngles::SetTheta ; (; Scalar ; theta). inline . Set Theta Euler angle // JMM 30 Jan. ; 2006 ; Definition at line 213 of file EulerAngles.h. ◆ Theta(). Scalar ROOT::Math::EulerAngles::Theta ; (; ); const. inline . Return Theta Euler angle. ; Definition at line 218 of file EulerAngles.h. Member Data Documentation. ◆ fPhi. double ROOT::Math::EulerAngles::fPhi. private . Definition at line 344 of file EulerAngles.h. ◆ fPsi. double ROOT::Math::EulerAngles::fPsi. private . Definition at line 346 of file EulerAngles.h. ◆ fTheta. double ROOT::Math::EulerAngles::fTheta. private . Definition at line 345 of file EulerAngles.h. Libraries for ROOT::Math::EulerAngles:. [legend]; The documentation for this class was generated from the following files:; math/genvector/inc/Math/GenVector/EulerAngles.h; math/genvector/src/EulerAngles.cxx. ROOTMathEulerAngles. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1EulerAngles.html:13016,Guid,Guide,13016,doc/master/classROOT_1_1Math_1_1EulerAngles.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1EulerAngles.html,1,['Guid'],['Guide']
Usability,":Run ; (; const char * ; dset, . Int_t ; start = -1, . Int_t ; stop = -1, . Int_t ; step = -1, . Int_t ; ntries = -1, . Int_t ; debug = -1, . Int_t ; draw = -1 . ). pure virtual . Implemented in TProofBenchRunCPU, and TProofBenchRunDataRead. ◆ Run() [2/2]. virtual void TProofBenchRun::Run ; (; Long64_t ; nevents, . Int_t ; start = -1, . Int_t ; stop = -1, . Int_t ; step = -1, . Int_t ; ntries = -1, . Int_t ; debug = -1, . Int_t ; draw = -1 . ). pure virtual . Implemented in TProofBenchRunCPU, and TProofBenchRunDataRead. ◆ SetParList(). virtual void TProofBenchRun::SetParList ; (; const char * ; pars). inlinevirtual . Definition at line 48 of file TProofBenchRun.h. ◆ SetSelName(). virtual void TProofBenchRun::SetSelName ; (; const char * ; sel). inlinevirtual . Definition at line 47 of file TProofBenchRun.h. ◆ SetSelOption(). virtual void TProofBenchRun::SetSelOption ; (; const char * ; opt). inlinevirtual . Definition at line 49 of file TProofBenchRun.h. ◆ Streamer(). void TProofBenchRun::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TProofBenchRunCPU, and TProofBenchRunDataRead. ◆ StreamerNVirtual(). void TProofBenchRun::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 60 of file TProofBenchRun.h. Member Data Documentation. ◆ fParList. TString TProofBenchRun::fParList. protected . Definition at line 36 of file TProofBenchRun.h. ◆ fProof. TProof* TProofBenchRun::fProof. protected . Definition at line 34 of file TProofBenchRun.h. ◆ fSelName. TString TProofBenchRun::fSelName. protected . Definition at line 35 of file TProofBenchRun.h. ◆ fSelOption. TString TProofBenchRun::fSelOption. protected . Definition at line 37 of file TProofBenchRun.h. proof/proofbench/inc/TProofBenchRun.h; proof/proofbench/src/TProofBenchRun.cxx. TProofBenchRun. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRun.html:14538,Guid,Guide,14538,doc/master/classTProofBenchRun.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRun.html,1,['Guid'],['Guide']
Usability,":SetOptions ; (; const ROOT::Math::MinimizerOptions & ; opt). virtual . Definition at line 217 of file GeneticMinimizer.cxx. ◆ SetParameters(). void ROOT::Math::GeneticMinimizer::SetParameters ; (; const GeneticMinimizerParameters & ; params). Definition at line 177 of file GeneticMinimizer.cxx. ◆ SetRandomSeed(). void ROOT::Math::GeneticMinimizer::SetRandomSeed ; (; int ; seed). inline . Definition at line 94 of file GeneticMinimizer.h. ◆ SetVariable(). bool ROOT::Math::GeneticMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set a new free variable ; Implements ROOT::Math::Minimizer.; Definition at line 153 of file GeneticMinimizer.cxx. ◆ X(). const double * ROOT::Math::GeneticMinimizer::X ; (; ); const. overridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 336 of file GeneticMinimizer.cxx. Member Data Documentation. ◆ fFitness. TMVA::IFitterTarget* ROOT::Math::GeneticMinimizer::fFitness. protected . Definition at line 107 of file GeneticMinimizer.h. ◆ fMinValue. double ROOT::Math::GeneticMinimizer::fMinValue. protected . Definition at line 108 of file GeneticMinimizer.h. ◆ fParameters. GeneticMinimizerParameters ROOT::Math::GeneticMinimizer::fParameters. protected . Definition at line 111 of file GeneticMinimizer.h. ◆ fRanges. std::vector<TMVA::Interval*> ROOT::Math::GeneticMinimizer::fRanges. protected . Definition at line 106 of file GeneticMinimizer.h. ◆ fResult. std::vector<double> ROOT::Math::GeneticMinimizer::fResult. protected . Definition at line 109 of file GeneticMinimizer.h. Libraries for ROOT::Math::GeneticMinimizer:. [legend]; The documentation for this class was generated from the following files:; math/genetic/inc/Math/GeneticMinimizer.h; math/genetic/src/GeneticMinimizer.cxx. ROOTMathGeneticMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html:17940,Guid,Guide,17940,doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GeneticMinimizer.html,1,['Guid'],['Guide']
Usability,":SetOptionvoid SetOption(Option_t *option="""")To set axis options.Definition TGaxis.cxx:2934; TGaxis::IsATClass * IsA() const overrideDefinition TGaxis.h:136; THLimitsFinder::Optimizestatic void Optimize(Double_t A1, Double_t A2, Int_t nold, Double_t &BinLow, Double_t &BinHigh, Int_t &nbins, Double_t &BWID, Option_t *option="""")Static function to compute reasonable axis limits.Definition THLimitsFinder.cxx:184; TIterDefinition TCollection.h:235; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::GetXsizeDouble_t GetXsize()Return size of the formula along X in pad coordinates when the text precision is smaller than 3.Definition TLatex.cxx:2569; TLatex::GetBoundingBoxvoid GetBoundingBox(UInt_t &w, UInt_t &h, Bool_t angle=kFALSE) overrideReturn text size in pixels.Definition TLatex.cxx:2600; TLatex::PaintLatexvirtual void PaintLatex(Double_t x, Double_t y, Double_t angle, Double_t size, const char *text)Main drawing function.Definition TLatex.cxx:2114; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::fY1Double_t fY1Y of 1st point.Definition TLine.h:26; TLine::fX1Double_t fX1X of 1st point.Definition TLine.h:25; TLine::fX2Double_t fX2X of 2nd point.Definition TLine.h:27; TLine::operator=TLine & operator=(const TLine &src)Assignment operator.Definition TLine.cxx:67; TLine::fY2Double_t fY2Y of 2nd point.Definition TLine.h:28; TLine::PaintLineNDCvirtual void PaintLineNDC(Double_t u1, Double_t v1, Double_t u2, Double_t v2)Draw this line with new coordinates in NDC.Definition TLine.cxx:409; TLine::Streamervoid Streamer(TBuffer &) overrideStream an object of class TLine.Definition TLine.cxx:518; TListA doubly linked list.Definition TList.h:38; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the list AND delete all heap based objects.Definition TList.cxx:468; TNamed::SetTitlevirtual void SetTitle(const char *title="""")Set the title of th",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGaxis_8cxx_source.html:125688,simpl,simple,125688,doc/master/TGaxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGaxis_8cxx_source.html,1,['simpl'],['simple']
Usability,":SetStatsvirtual void SetStats(Bool_t stats=kTRUE)Set statistics option on/off.Definition TH1.cxx:8990; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; THStack::Addvirtual void Add(TH1 *h, Option_t *option="""")Add a new histogram to the list.Definition THStack.cxx:366; THStack::Drawvoid Draw(Option_t *chopt="""") overrideDraw this stack with its current attributes.Definition THStack.cxx:453; TLegendThis class displays a legend box (TPaveText) containing several legend entries.Definition TLegend.h:23; TLegend::AddEntryTLegendEntry * AddEntry(const TObject *obj, const char *label="""", Option_t *option=""lpf"")Add a new entry to this legend.Definition TLegend.cxx:320; TLegend::Drawvoid Draw(Option_t *option="""") overrideDraw this legend with its current attributes.Definition TLegend.cxx:425; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TStringBasic string class.Definition TString.h:139; TString::AppendTString & Append(const char *cs)Definition TString.h:572; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ptTPaveText * ptDefinition entrylist_figure1.C:7; c1return c1Definition legend1.C:41; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; arrowDefinition RArrowDS.hxx:17. tutorialstreecernstaff.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/cernstaff_8C_source.html:7005,Guid,Guide,7005,doc/master/cernstaff_8C_source.html,https://root.cern,https://root.cern/doc/master/cernstaff_8C_source.html,1,['Guid'],['Guide']
Usability,":SetTextAlignvirtual void SetTextAlign(Short_t align=11)Set the text alignment.Definition TAttText.h:42; TAttText::SetTextAnglevirtual void SetTextAngle(Float_t tangle=0)Set the text angle.Definition TAttText.h:43; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::ChangeLabelvoid ChangeLabel(Int_t labNum=0, Double_t labAngle=-1., Double_t labSize=-1., Int_t labAlign=-1, Int_t labColor=-1, Int_t labFont=-1, const TString &labText="""")Define new text attributes for the label number ""labNum"".Definition TGaxis.cxx:2734; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::SetMaximumvirtual void SetMaximum(Double_t maximum=-1111)Set the maximum of the graph.Definition TGraph.cxx:2324; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TGraph::GetHistogramvirtual TH1F * GetHistogram() constReturns a pointer to the histogram used to draw the axis Takes into account the two following cases.Definition TGraph.cxx:1428; TGraph::SetTitlevoid SetTitle(const char *title="""") overrideChange (i.e.Definition TGraph.cxx:2397; TGraph::SetMinimumvirtual void SetMinimum(Double_t minimum=-1111)Set the minimum of the graph.Definition TGraph.cxx:2333; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH1::GetYaxisTAxis * GetYaxis()Definition TH1.h:325; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; grTGraphErrors * grDefinition legend1.C:25. tutorialshistxyplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/xyplot_8C_source.html:4882,Guid,Guide,4882,doc/master/xyplot_8C_source.html,https://root.cern,https://root.cern/doc/master/xyplot_8C_source.html,1,['Guid'],['Guide']
Usability,:Streamer ; (; TBuffer & ; b). overridevirtual . Serialize/Deserialize from a buffer. ; Reimplemented from TBranch.; Definition at line 387 of file TBranchClones.cxx. ◆ StreamerNVirtual(). void TBranchClones::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 66 of file TBranchClones.h. ◆ UpdateFile(). void TBranchClones::UpdateFile ; (; ). overridevirtual . Refresh the value of fDirectory (i.e. ; where this branch writes/reads its buffers) with the current value of fTree->GetCurrentFile unless this branch has been redirected to a different file. Also update the sub-branches. ; Reimplemented from TBranch.; Definition at line 475 of file TBranchClones.cxx. Friends And Related Symbol Documentation. ◆ TTreeCloner. friend class TTreeCloner. friend . Definition at line 39 of file TBranchClones.h. Member Data Documentation. ◆ fBranchCount. TBranch* TBranchClones::fBranchCount. protected . Branch with clones count. ; Definition at line 37 of file TBranchClones.h. ◆ fClassName. TString TBranchClones::fClassName. protected . Name of the class of the objets in the ClonesArray. ; Definition at line 36 of file TBranchClones.h. ◆ fList. TClonesArray* TBranchClones::fList. protected . ! Pointer to the clonesarray ; Definition at line 32 of file TBranchClones.h. ◆ fN. Int_t TBranchClones::fN. protected . ! Number of elements in ClonesArray ; Definition at line 34 of file TBranchClones.h. ◆ fNdataMax. Int_t TBranchClones::fNdataMax. protected . ! Maximum value of fN ; Definition at line 35 of file TBranchClones.h. ◆ fRead. Int_t TBranchClones::fRead. protected . ! flag = 1 if clonesarray has been read ; Definition at line 33 of file TBranchClones.h. Libraries for TBranchClones:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchClones.h; tree/tree/src/TBranchClones.cxx. TBranchClones. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:18 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchClones.html:34412,Guid,Guide,34412,doc/master/classTBranchClones.html,https://root.cern,https://root.cern/doc/master/classTBranchClones.html,1,['Guid'],['Guide']
Usability,":TCheckHashRecursiveRemoveConsistency::CheckRecursiveRemove>: The class SomeName overrides TObject::Hash but does not call TROOT::RecursiveRemove in its destructor.; TASImagePlugin::HashULong_t Hash() const overrideReturn hash value for this object.Definition TASImagePlugin.h:32; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Errorvirtual void Error(const char *method, const char *msgfmt,...) constIssue error message.Definition TObject.cxx:993; TROOT::RecursiveRemovevoid RecursiveRemove(TObject *obj) overrideRecursively remove this object from the list of Cleanups.Definition TROOT.cxx:2498. Reimplemented from TObject.; Reimplemented in TASPluginGS.; Definition at line 32 of file TASImagePlugin.h. ◆ IsA(). TClass * TASImagePlugin::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in TASPluginGS.; Definition at line 39 of file TASImagePlugin.h. ◆ ReadFile(). unsigned char * TASImagePlugin::ReadFile ; (; const char * ; , . UInt_t & ; , . UInt_t & ;  . ). inlineoverridevirtual . Implements TImagePlugin.; Definition at line 34 of file TASImagePlugin.h. ◆ Streamer(). void TASImagePlugin::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TASPluginGS. ◆ StreamerNVirtual(). void TASImagePlugin::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 39 of file TASImagePlugin.h. ◆ WriteFile(). Bool_t TASImagePlugin::WriteFile ; (; const char * ; , . unsigned char * ; , . UInt_t ; , . UInt_t ;  . ). inlineoverridevirtual . Implements TImagePlugin.; Definition at line 35 of file TASImagePlugin.h. Libraries for TASImagePlugin:. [legend]; The documentation for this class was generated from the following file:; graf2d/asimage/inc/TASImagePlugin.h. TASImagePlugin. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASImagePlugin.html:14815,Guid,Guide,14815,doc/master/classTASImagePlugin.html,https://root.cern,https://root.cern/doc/master/classTASImagePlugin.html,1,['Guid'],['Guide']
Usability,":TCollectionProxyInfo::EnvironBase::~EnvironBase ; (; ). inlinevirtual . Definition at line 231 of file TCollectionProxyInfo.h. Member Function Documentation. ◆ operator=(). EnvironBase & ROOT::Detail::TCollectionProxyInfo::EnvironBase::operator= ; (; const EnvironBase & ; ). private . Member Data Documentation. ◆ [union]. union { ... } ROOT::Detail::TCollectionProxyInfo::EnvironBase. ◆ fIdx. size_t ROOT::Detail::TCollectionProxyInfo::EnvironBase::fIdx. Definition at line 232 of file TCollectionProxyInfo.h. ◆ fLastValueVecBool. Bool_t ROOT::Detail::TCollectionProxyInfo::EnvironBase::fLastValueVecBool. Definition at line 239 of file TCollectionProxyInfo.h. ◆ fObject. void* ROOT::Detail::TCollectionProxyInfo::EnvironBase::fObject. Definition at line 234 of file TCollectionProxyInfo.h. ◆ fRefCount. int ROOT::Detail::TCollectionProxyInfo::EnvironBase::fRefCount. Definition at line 241 of file TCollectionProxyInfo.h. ◆ fSize. size_t ROOT::Detail::TCollectionProxyInfo::EnvironBase::fSize. Definition at line 233 of file TCollectionProxyInfo.h. ◆ fSpace. size_t ROOT::Detail::TCollectionProxyInfo::EnvironBase::fSpace. Definition at line 242 of file TCollectionProxyInfo.h. ◆ fStart. void* ROOT::Detail::TCollectionProxyInfo::EnvironBase::fStart. Definition at line 235 of file TCollectionProxyInfo.h. ◆ fTemp. void* ROOT::Detail::TCollectionProxyInfo::EnvironBase::fTemp. Definition at line 236 of file TCollectionProxyInfo.h. ◆ fUseTemp. Bool_t ROOT::Detail::TCollectionProxyInfo::EnvironBase::fUseTemp. Definition at line 238 of file TCollectionProxyInfo.h. Collaboration diagram for ROOT::Detail::TCollectionProxyInfo::EnvironBase:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; core/cont/inc/TCollectionProxyInfo.h. ROOTDetailTCollectionProxyInfoEnvironBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1EnvironBase.html:3296,Guid,Guide,3296,doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1EnvironBase.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Detail_1_1TCollectionProxyInfo_1_1EnvironBase.html,1,['Guid'],['Guide']
Usability,":TSGD< Architecture_t, Layer_t, DeepNet_t >. ◆ UpdateWeights(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::UpdateWeights ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; weights, . const std::vector< Matrix_t > & ; weightGradients . ). protectedpure virtual . Update the weights, given the current weight gradients. ; Implemented in TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TRMSProp< Architecture_t, Layer_t, DeepNet_t >, and TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >. Member Data Documentation. ◆ fDeepNet. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . DeepNet_t& TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fDeepNet. protected . The reference to the deep net. ; Definition at line 53 of file Optimizer.h. ◆ fGlobalStep. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . size_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fGlobalStep. protected . The current global step count during training. ; Definition at line 52 of file Optimizer.h. ◆ fLearningRate. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::fLearningRate. protected . The learning rate used for training. ; Definition at line 51 of file Optimizer.h. tmva/tmva/inc/TMVA/DNN/Optimizer.h. TMVADNNVOptimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:47 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:8201,learn,learning,8201,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,2,"['Guid', 'learn']","['Guide', 'learning']"
Usability,:Theta ; (; ); const. inline . polar angle ; Definition at line 258 of file PtEtaPhiE4D.h. ◆ X(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::X ; (; ); const. inline . Definition at line 144 of file PtEtaPhiE4D.h. ◆ x(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::x ; (; ); const. inline . Definition at line 342 of file PtEtaPhiE4D.h. ◆ Y(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::Y ; (; ); const. inline . Definition at line 146 of file PtEtaPhiE4D.h. ◆ y(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::y ; (; ); const. inline . Definition at line 343 of file PtEtaPhiE4D.h. ◆ Z(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::Z ; (; ); const. inline . Definition at line 151 of file PtEtaPhiE4D.h. ◆ z(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiE4D< ScalarType >::z ; (; ); const. inline . Definition at line 344 of file PtEtaPhiE4D.h. Member Data Documentation. ◆ Dimension. template<class ScalarType > . constexpr unsigned int ROOT::Math::PtEtaPhiE4D< ScalarType >::Dimension = 4U. staticconstexpr . Definition at line 59 of file PtEtaPhiE4D.h. ◆ fE. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiE4D< ScalarType >::fE. private . Definition at line 369 of file PtEtaPhiE4D.h. ◆ fEta. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiE4D< ScalarType >::fEta. private . Definition at line 367 of file PtEtaPhiE4D.h. ◆ fPhi. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiE4D< ScalarType >::fPhi. private . Definition at line 368 of file PtEtaPhiE4D.h. ◆ fPt. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiE4D< ScalarType >::fPt. private . Definition at line 366 of file PtEtaPhiE4D.h. math/genvector/inc/Math/GenVector/PtEtaPhiE4D.h. ROOTMathPtEtaPhiE4D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html:14996,Guid,Guide,14996,doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiE4D.html,1,['Guid'],['Guide']
Usability,:Theta ; (; ); const. inline . polar angle ; Definition at line 274 of file PtEtaPhiM4D.h. ◆ X(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::X ; (; ); const. inline . Definition at line 157 of file PtEtaPhiM4D.h. ◆ x(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::x ; (; ); const. inline . Definition at line 361 of file PtEtaPhiM4D.h. ◆ Y(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::Y ; (; ); const. inline . Definition at line 159 of file PtEtaPhiM4D.h. ◆ y(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::y ; (; ); const. inline . Definition at line 362 of file PtEtaPhiM4D.h. ◆ Z(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::Z ; (; ); const. inline . Definition at line 164 of file PtEtaPhiM4D.h. ◆ z(). template<class ScalarType > . Scalar ROOT::Math::PtEtaPhiM4D< ScalarType >::z ; (; ); const. inline . Definition at line 363 of file PtEtaPhiM4D.h. Member Data Documentation. ◆ Dimension. template<class ScalarType > . constexpr unsigned int ROOT::Math::PtEtaPhiM4D< ScalarType >::Dimension = 4U. staticconstexpr . Definition at line 59 of file PtEtaPhiM4D.h. ◆ fEta. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiM4D< ScalarType >::fEta. private . Definition at line 384 of file PtEtaPhiM4D.h. ◆ fM. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiM4D< ScalarType >::fM. private . Definition at line 386 of file PtEtaPhiM4D.h. ◆ fPhi. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiM4D< ScalarType >::fPhi. private . Definition at line 385 of file PtEtaPhiM4D.h. ◆ fPt. template<class ScalarType > . ScalarType ROOT::Math::PtEtaPhiM4D< ScalarType >::fPt. private . Definition at line 383 of file PtEtaPhiM4D.h. math/genvector/inc/Math/GenVector/PtEtaPhiM4D.h. ROOTMathPtEtaPhiM4D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html:16533,Guid,Guide,16533,doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PtEtaPhiM4D.html,1,['Guid'],['Guide']
Usability,":ToUpper(); 1196{; 1197 Ssiz_t n = Length();; 1198 char *p = GetPointer();; 1199 while (n--) {; 1200 *p = toupper((unsigned char)*p);; 1201 p++;; 1202 }; 1203}; 1204 ; 1205////////////////////////////////////////////////////////////////////////////////; 1206/// Check to make sure a string index is in range.; 1207 ; 1208void TString::AssertElement(Ssiz_t i) const; 1209{; 1210 if (i == kNPOS || i > Length()); 1211 Error(""TString::AssertElement"",; 1212 ""out of bounds: i = %d, Length = %d"", i, Length());; 1213}; 1214 ; 1215////////////////////////////////////////////////////////////////////////////////; 1216/// Calculate a nice capacity greater than or equal to newCap.; 1217/// \warning Fatal() is raised if newCap > MaxSize(); 1218/// \return Resulting recommended capacity (after clamping, if needed); 1219 ; 1220Ssiz_t TString::AdjustCapacity(Ssiz_t oldCap, Ssiz_t newCap); 1221{; 1222 Ssiz_t ms = MaxSize();; 1223 if (newCap > ms - 1) {; 1224 Fatal(""TString::AdjustCapacity"", ""capacity too large (%d, max = %d)"",; 1225 newCap, ms);; 1226 }; 1227 Ssiz_t cap = oldCap < ms / 2 - kAlignment ?; 1228 Recommend(TMath::Max(newCap, 2 * oldCap)) : ms - 1;; 1229 return cap;; 1230}; 1231 ; 1232////////////////////////////////////////////////////////////////////////////////; 1233/// Clear string without changing its capacity.; 1234 ; 1235void TString::Clear(); 1236{; 1237 Clobber(Capacity());; 1238}; 1239 ; 1240////////////////////////////////////////////////////////////////////////////////; 1241/// Clear string and make sure it has a capacity of nc.; 1242/// \warning If nc > MaxSize(), then Fatal() is raised, and only MaxSize(); 1243/// elements are allocated if Fatal does not abort; 1244/// \return Resulting allocated capacity (after clamping, if needed); 1245 ; 1246Ssiz_t TString::Clobber(Ssiz_t nc); 1247{; 1248 if (nc > MaxSize()) {; 1249 Fatal(""TString::Clobber"", ""capacity too large (%d, max = %d)"", nc, MaxSize());; 1250 // In the rare case where Fatal does not abort, we erase, cl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:37607,Clear,Clear,37607,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Clear'],['Clear']
Usability,":TransformationHandler::GetMaxDouble_t GetMax(Int_t ivar, Int_t cls=-1) constDefinition TransformationHandler.cxx:993; TMVA::Types::GetMethodNameTString GetMethodName(Types::EMVA method) constDefinition Types.cxx:136; TMVA::Types::Instancestatic Types & Instance()The single instance of ""Types"" if existing already, or create it (Singleton)Definition Types.cxx:70; TMVA::Types::ESBTypeESBTypeDefinition Types.h:134; TMVA::Types::kBackground@ kBackgroundDefinition Types.h:136; TMVA::Types::EMVAEMVADefinition Types.h:76; TMVA::Types::EAnalysisTypeEAnalysisTypeDefinition Types.h:126; TMVA::Types::kMulticlass@ kMulticlassDefinition Types.h:129; TMVA::Types::kRegression@ kRegressionDefinition Types.h:128; TMVA::Types::ETreeTypeETreeTypeDefinition Types.h:142; TMVA::Types::kTraining@ kTrainingDefinition Types.h:143; TMVA::Types::kTesting@ kTestingDefinition Types.h:144; TMVA::VariableInfo::GetLabelconst TString & GetLabel() constDefinition VariableInfo.h:59; TMVA::VariableInfo::GetExpressionconst TString & GetExpression() constDefinition VariableInfo.h:57; TMVA::VariableInfo::GetInternalNameconst TString & GetInternalName() constDefinition VariableInfo.h:58; TMatrixT< Double_t >; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TSplineBase class for spline implementation containing the Draw/Paint methods.Definition TSpline.h:31; TStringBasic string class.Definition TString.h:139; TString::Dataconst char * Data() constDefinition TString.h:376; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; bool; double; int; unsigned int; xDouble_t x[n]Definition legend1.C:17; TMVAcreate variable transformationsDefinition GeneticMinimizer.h:22; v@ vDefinition rootcling_impl.cxx:3699; Types.h. tmvatmvaincTMVAMethodBase.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:70758,Guid,Guide,70758,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,1,['Guid'],['Guide']
Usability,":VectorUtil ; ROOT::Math::VirtualIntegrator ; ROOT::Math::VirtualIntegratorMultiDim ; ROOT::Math::VirtualIntegratorOneDim ; ROOT::Math::WrappedMultiTF1 ; ROOT::Math::WrappedTF1 ; ROOT::Minuit2::CombinedMinimizer ; ROOT::Minuit2::FCNBase ; ROOT::Minuit2::FCNGradientBase ; ROOT::Minuit2::FumiliFCNBase ; ROOT::Minuit2::FumiliMinimizer ; ROOT::Minuit2::FunctionMinimizer ; ROOT::Minuit2::FunctionMinimum ; ROOT::Minuit2::GenericFunction ; ROOT::Minuit2::MinosError ; ROOT::Minuit2::Minuit2Minimizer ; ROOT::Minuit2::MinuitParameter ; ROOT::Minuit2::MnApplication ; ROOT::Minuit2::MnContours ; ROOT::Minuit2::MnFumiliMinimize ; ROOT::Minuit2::MnHesse ; ROOT::Minuit2::MnMigrad ; ROOT::Minuit2::MnMinimize ; ROOT::Minuit2::MnMinos ; ROOT::Minuit2::MnPlot ; ROOT::Minuit2::MnScan ; ROOT::Minuit2::MnSimplex ; ROOT::Minuit2::MnStrategy ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html524/ClassIndex.html:19473,Simpl,SimplexMinimizer,19473,root/html524/ClassIndex.html,https://root.cern,https://root.cern/root/html524/ClassIndex.html,2,['Simpl'],['SimplexMinimizer']
Usability,":Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. boolAdd(RooStats::HypoTestInverterResult otherResult); doubleCalculateEstimatedError(double target); intFindClosestPointIndex(double target); doubleFindInterpolatedLimit(double target). Data Members; public:. enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. public:. Double_tRooStats::SimpleInterval::fConfidenceLevelconfidence level; Double_tRooStats::SimpleInterval::fLowerLimitlower interval limit; RooArgSetRooStats::SimpleInterval::fParametersset containing the parameter of interest; Double_tRooStats::SimpleInterval::fUpperLimitupper interval limit. protected:. boolfInterpolateLowerLimit; boolfInterpolateUpperLimit; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title; boolfUseCLs; vector<double>fXValues; TListfYObjects. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; HypoTestInverterResult(const char* name = 0); default constructor. HypoTestInverterResult(const char* name, const RooRealVar& scannedVariable, double cl); constructor. ~HypoTestInverterResult(); destructor; no need to delete explictly the objects in the TList since the TList owns the objects. bool Add(RooStats::HypoTestInverterResult otherResult); Merge this HypoTestInverterResult with another; HypoTestInverterResult passed as argument. double GetXValue(int index) const. double GetYValue(int index) const. double GetYError(int index) const. HypoTestResult* GetRes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html:6845,Simpl,SimpleInterval,6845,root/html526/RooStats__HypoTestInverterResult.html,https://root.cern,https://root.cern/root/html526/RooStats__HypoTestInverterResult.html,4,['Simpl'],['SimpleInterval']
Usability,":_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. private:. Bool_t_disableCacheFlag to run object in passthrough (= non-caching mode). Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooAbsCachedReal(const char* name, const char* title, Int_t ipOrder = 0); Constructor. RooAbsCachedReal(const RooAbsCachedReal& other, const char* name = 0); Copy constructor. ~RooAbsCachedReal(); Destructor. Double_t getValV(const RooArgSet* set = 0) const; Implementation of getVal() overriding default implementation; of RooAbsReal. Return value stored in cache p.d.f; rather than return value of evaluate() which is undefined; for RooAbsCachedReal. void clearCacheObject(RooAbsCachedReal::FuncCacheElem& cache) const; Mark all bins as unitialized (value -1). TString cacheNameSuffix(const RooArgSet& nset) const; Construct unique suffix name for cache p.d.f object. void setInterpolationOrder(Int_t order); Set interpolation order of RooHistFunct representing cache histogram. Int_t getAnalyticalIntegralWN(RooArgSet& allVars, RooArgSet& analVars, const RooArgSet* normSet, const char* rangeName = 0) const; Return analytical integration capabilities of the RooHistFunc that corresponds to the set of observables in allVars. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; Forward call to implementation in relevant RooHistFunc instance. RooAbsCachedReal(); {}. Bool_t selfNormalized() const; Declares function self normalized. Int_t getInterpolationOrder() const; Set interpolation order in RooHistFuncs that represent cache histograms. Bool_t forceAnalyticalInt(const RooAbsArg& ) const; Force all observables to be offered for internal integratio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCachedReal.html:39350,clear,clearCacheObject,39350,root/html602/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html602/RooAbsCachedReal.html,2,['clear'],['clearCacheObject']
Usability,":aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategoryLValue.html:2394,clear,clearValueDirty,2394,root/html534/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html534/RooAbsCategoryLValue.html,1,['clear'],['clearValueDirty']
Usability,":aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """"",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCategory.html:2325,clear,clearValueDirty,2325,root/html534/RooAbsCategory.html,https://root.cern,https://root.cern/root/html534/RooAbsCategory.html,1,['clear'],['clearValueDirty']
Usability,":aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsString.html:2153,clear,clearValueDirty,2153,root/html534/RooAbsString.html,https://root.cern,https://root.cern/root/html534/RooAbsString.html,1,['clear'],['clearValueDirty']
Usability,":aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Opti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooBinningCategory.html:2193,clear,clearValueDirty,2193,root/html534/RooBinningCategory.html,https://root.cern,https://root.cern/root/html534/RooBinningCategory.html,6,['clear'],['clearValueDirty']
Usability,":aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStringVar.html:2048,clear,clearValueDirty,2048,root/html534/RooStringVar.html,https://root.cern,https://root.cern/root/html534/RooStringVar.html,1,['clear'],['clearValueDirty']
Usability,":asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddPdf.html:3647,Clear,Clear,3647,root/html526/RooAddPdf.html,https://root.cern,https://root.cern/root/html526/RooAddPdf.html,2,['Clear'],['Clear']
Usability,":asTF(const RooArgList& obs, const RooArgList& pars = RooArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooProdPdf.html:4093,Clear,Clear,4093,root/html526/RooProdPdf.html,https://root.cern,https://root.cern/root/html526/RooProdPdf.html,1,['Clear'],['Clear']
Usability,":binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:4953,clear,clearEvalError,4953,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,3,['clear'],['clearEvalError']
Usability,":branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Double_tbufferFraction() const; RooFFTConvPdf::BufStratbufferStrategy() const; const RooArgSet&cacheObservables() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooAbsReal*RooAbsPdf::createChi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooFFTConvPdf.html:7412,clear,clearValueDirty,7412,root/html532/RooFFTConvPdf.html,https://root.cern,https://root.cern/root/html532/RooFFTConvPdf.html,1,['clear'],['clearValueDirty']
Usability,":chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvolution.html:5606,clear,clearShapeDirty,5606,root/html532/RooNumConvolution.html,https://root.cern,https://root.cern/root/html532/RooNumConvolution.html,1,['clear'],['clearShapeDirty']
Usability,":chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvolution.html:5765,clear,clearShapeDirty,5765,root/html534/RooNumConvolution.html,https://root.cern,https://root.cern/root/html534/RooNumConvolution.html,3,['clear'],['clearShapeDirty']
Usability,":chi2FitTo(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); const RooNumIntConfig&convIntConfig() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooNumConvolution.html:5606,clear,clearShapeDirty,5606,root/html530/RooNumConvolution.html,https://root.cern,https://root.cern/root/html530/RooNumConvolution.html,1,['clear'],['clearShapeDirty']
Usability,:fDotsSpacing. private . Spacing between dots to draw the entries. ; Definition at line 45 of file TParallelCoord.h. ◆ fInitEntries. TEntryList* TParallelCoord::fInitEntries. private . -> Selected entries when TParallelCoord first initialized. ; Definition at line 50 of file TParallelCoord.h. ◆ fLineColor. Color_t TParallelCoord::fLineColor. private . entries line color. ; Definition at line 46 of file TParallelCoord.h. ◆ fLineWidth. Width_t TParallelCoord::fLineWidth. private . entries line width. ; Definition at line 47 of file TParallelCoord.h. ◆ fNentries. Long64_t TParallelCoord::fNentries. private . Number of entries;. ; Definition at line 44 of file TParallelCoord.h. ◆ fNvar. UInt_t TParallelCoord::fNvar. private . Number of variables. ; Definition at line 41 of file TParallelCoord.h. ◆ fSelectList. TList* TParallelCoord::fSelectList. private . List of selections over the variables. ; Definition at line 55 of file TParallelCoord.h. ◆ fTree. TTree* TParallelCoord::fTree. private . ! Pointer to the TTree. ; Definition at line 51 of file TParallelCoord.h. ◆ fTreeFileName. TString TParallelCoord::fTreeFileName. private . Name of the file containing the tree. ; Definition at line 53 of file TParallelCoord.h. ◆ fTreeName. TString TParallelCoord::fTreeName. private . Name of the tree. ; Definition at line 52 of file TParallelCoord.h. ◆ fVarList. TList* TParallelCoord::fVarList. private . List of the variables. ; Definition at line 54 of file TParallelCoord.h. ◆ fWeightCut. Int_t TParallelCoord::fWeightCut. private . Specify a cut on the entries from their weight (see TParallelCoordVar::GetEvtWeight(Long64_t)) ; Definition at line 48 of file TParallelCoord.h. Libraries for TParallelCoord:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TParallelCoord.h; tree/treeviewer/src/TParallelCoord.cxx. TParallelCoord. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:06 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoord.html:39696,Guid,Guide,39696,doc/master/classTParallelCoord.html,https://root.cern,https://root.cern/doc/master/classTParallelCoord.html,1,['Guid'],['Guide']
Usability,":fFirstObjId. protected . ! id of first object to be read from the database ; Definition at line 44 of file TBufferSQL2.h. ◆ fIgnoreVerification. Bool_t TBufferSQL2::fIgnoreVerification. protected . ! ignore verification of names ; Definition at line 41 of file TBufferSQL2.h. ◆ fIOVersion. Int_t TBufferSQL2::fIOVersion. protected . ! I/O version from TSQLFile ; Definition at line 33 of file TBufferSQL2.h. ◆ fLastObjId. Long64_t TBufferSQL2::fLastObjId. protected . ! id of last object correspond to this key ; Definition at line 45 of file TBufferSQL2.h. ◆ fObjectsInfos. TObjArray* TBufferSQL2::fObjectsInfos. protected . ! array of objects info for selected key ; Definition at line 43 of file TBufferSQL2.h. ◆ fObjIdCounter. Long64_t TBufferSQL2::fObjIdCounter. protected . ! counter of objects id ; Definition at line 40 of file TBufferSQL2.h. ◆ fPoolsMap. TMap* TBufferSQL2::fPoolsMap. protected . ! map of pools with data from different tables ; Definition at line 46 of file TBufferSQL2.h. ◆ fReadBuffer. TString TBufferSQL2::fReadBuffer. protected . ! Buffer for read value ; Definition at line 36 of file TBufferSQL2.h. ◆ fReadVersionBuffer. Int_t TBufferSQL2::fReadVersionBuffer. protected . ! buffer, used to by ReadVersion method ; Definition at line 39 of file TBufferSQL2.h. ◆ fSQL. TSQLFile* TBufferSQL2::fSQL. protected . ! instance of TSQLFile ; Definition at line 32 of file TBufferSQL2.h. ◆ fStk. TSQLStructure* TBufferSQL2::fStk. protected . ! pointer on current active structure (stack head) ; Definition at line 35 of file TBufferSQL2.h. ◆ fStructure. TSQLStructure* TBufferSQL2::fStructure. protected . ! structures, created by object storing ; Definition at line 34 of file TBufferSQL2.h. Libraries for TBufferSQL2:. [legend]; The documentation for this class was generated from the following files:; io/sql/inc/TBufferSQL2.h; io/sql/src/TBufferSQL2.cxx. TBufferSQL2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferSQL2.html:93747,Guid,Guide,93747,doc/master/classTBufferSQL2.html,https://root.cern,https://root.cern/doc/master/classTBufferSQL2.html,1,['Guid'],['Guide']
Usability,":fPixelULong_t fPixelcolor pixel valueDefinition TGX11.h:69; XWindow_tDescription of a X11 window.Definition TGWin32.cxx:121; XWindow_t::fOpenInt_t fOpen1 if the window is open, 0 if notDefinition TGX11.h:49; XWindow_t::fClipInt_t fClip1 if the clipping is onDefinition TGX11.h:57; XWindow_t::fWindowDrawable fWindowX11 window.Definition TGX11.h:53; XWindow_t::fNewColorsULong_t * fNewColorsnew image colors (after processing)Definition TGX11.h:62; XWindow_t::fNcolorsInt_t fNcolorsnumber of different colorsDefinition TGX11.h:63; XWindow_t::fDrawingDrawable fDrawingdrawing area, equal to window or bufferDefinition TGX11.h:52; XWindow_t::fDoubleBufferInt_t fDoubleBuffer1 if the double buffer is on, 0 if notDefinition TGX11.h:50; XWindow_t::fHeightUInt_t fHeightheight of the windowDefinition TGX11.h:56; XWindow_t::fIsPixmapInt_t fIsPixmap1 if pixmap, 0 if notDefinition TGX11.h:51; XWindow_t::fWidthUInt_t fWidthwidth of the windowDefinition TGX11.h:55; XWindow_t::fHclipUInt_t fHclipheight of the clipping rectangleDefinition TGX11.h:61; XWindow_t::fSharedBool_t fSharednotify when window is sharedDefinition TGX11.h:64; XWindow_t::fBufferDrawable fBufferpixmap used for double bufferDefinition TGX11.h:54; XWindow_t::fXclipInt_t fXclipx coordinate of the clipping rectangleDefinition TGX11.h:58; XWindow_t::fWclipUInt_t fWclipwidth of the clipping rectangleDefinition TGX11.h:60; XWindow_t::fYclipInt_t fYclipy coordinate of the clipping rectangleDefinition TGX11.h:59; mTMarker mDefinition textangle.C:8; GIFdecodeint GIFdecode(byte *GIFarr, byte *PIXarr, int *Width, int *Height, int *Ncols, byte *R, byte *G, byte *B)Definition gifdecode.c:149; GIFinfoint GIFinfo(byte *GIFarr, int *Width, int *Height, int *Ncols)Definition gifdecode.c:80; GIFencodelong GIFencode(int Width, int Height, int Ncol, R, G, B, ScLine, void *get_scline, pb)Definition gifencode.c:63. graf2dx11srcTGX11.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGX11_8cxx_source.html:163999,Guid,Guide,163999,doc/master/TGX11_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGX11_8cxx_source.html,1,['Guid'],['Guide']
Usability,":fProtocolFileNamestd::string fProtocolFileName! local file where communication protocol will be writtenDefinition RWebWindow.hxx:170; ROOT::RWebWindow::GetYint GetY() constreturns configured window Y position (-1 - default)Definition RWebWindow.hxx:290; ROOT::RWebWindow::fNativeOnlyConnbool fNativeOnlyConn! only native connection are allowed, created by Show() methodDefinition RWebWindow.hxx:154; ROOT::RWebWindow::GetManagerstd::shared_ptr< RWebWindowsManager > GetManager() constReturns window manager.Definition RWebWindow.hxx:251; ROOT::RWebWindow::fConnConnectionsList_t fConn! list of all accepted connectionsDefinition RWebWindow.hxx:150; ROOT::RWebWindow::fConnCallbackWebWindowConnectCallback_t fConnCallback! callback for connect eventDefinition RWebWindow.hxx:157; ROOT::RWebWindow::CheckPendingConnectionsvoid CheckPendingConnections()Check if started process(es) establish connection.Definition RWebWindow.cxx:624; ROOT::RWebWindow::fClearOnClosestd::shared_ptr< void > fClearOnClose! entry which is cleared when last connection is closedDefinition RWebWindow.hxx:176; ROOT::RWebWindow::fInputQueueMutexstd::mutex fInputQueueMutex! mutex to protect input queueDefinition RWebWindow.hxx:165; ROOT::RWebWindow::_MakeSendHeaderstd::string _MakeSendHeader(std::shared_ptr< WebConn > &conn, bool txt, const std::string &data, int chid)Internal method to prepare text part of send data Should be called under locked connection mutex.Definition RWebWindow.cxx:1107; ROOT::RWebWindow::timestamp_tstd::chrono::time_point< std::chrono::system_clock > timestamp_tDefinition RWebWindow.hxx:60; ROOT::RWebWindow::SetMaxQueueLengthvoid SetMaxQueueLength(unsigned len=10)configures maximal queue length of data which can be held by windowDefinition RWebWindow.hxx:300; ROOT::RWebWindow::ProcessWSbool ProcessWS(THttpCallArg &arg)Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server...Definition RWebWindow.cxx:736; ROOT::RWebWindow::HasConnectionboo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RWebWindow_8hxx_source.html:39850,clear,cleared,39850,doc/v632/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/v632/RWebWindow_8hxx_source.html,1,['clear'],['cleared']
Usability,":fProtocolFileNamestd::string fProtocolFileName! local file where communication protocol will be writtenDefinition RWebWindow.hxx:173; ROOT::RWebWindow::GetYint GetY() constreturns configured window Y position (-1 - default)Definition RWebWindow.hxx:293; ROOT::RWebWindow::fNativeOnlyConnbool fNativeOnlyConn! only native connection are allowed, created by Show() methodDefinition RWebWindow.hxx:157; ROOT::RWebWindow::GetManagerstd::shared_ptr< RWebWindowsManager > GetManager() constReturns window manager.Definition RWebWindow.hxx:254; ROOT::RWebWindow::fConnConnectionsList_t fConn! list of all accepted connectionsDefinition RWebWindow.hxx:153; ROOT::RWebWindow::fConnCallbackWebWindowConnectCallback_t fConnCallback! callback for connect eventDefinition RWebWindow.hxx:160; ROOT::RWebWindow::CheckPendingConnectionsvoid CheckPendingConnections()Check if started process(es) establish connection.Definition RWebWindow.cxx:625; ROOT::RWebWindow::fClearOnClosestd::shared_ptr< void > fClearOnClose! entry which is cleared when last connection is closedDefinition RWebWindow.hxx:179; ROOT::RWebWindow::fInputQueueMutexstd::mutex fInputQueueMutex! mutex to protect input queueDefinition RWebWindow.hxx:168; ROOT::RWebWindow::_MakeSendHeaderstd::string _MakeSendHeader(std::shared_ptr< WebConn > &conn, bool txt, const std::string &data, int chid)Internal method to prepare text part of send data Should be called under locked connection mutex.Definition RWebWindow.cxx:1140; ROOT::RWebWindow::timestamp_tstd::chrono::time_point< std::chrono::system_clock > timestamp_tDefinition RWebWindow.hxx:62; ROOT::RWebWindow::SetMaxQueueLengthvoid SetMaxQueueLength(unsigned len=10)configures maximal queue length of data which can be held by windowDefinition RWebWindow.hxx:303; ROOT::RWebWindow::ProcessWSbool ProcessWS(THttpCallArg &arg)Processing of websockets call-backs, invoked from RWebWindowWSHandler Method invoked from http server...Definition RWebWindow.cxx:737; ROOT::RWebWindow::HasConnectionboo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RWebWindow_8hxx_source.html:39995,clear,cleared,39995,doc/master/RWebWindow_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RWebWindow_8hxx_source.html,1,['clear'],['cleared']
Usability,":fSignalsBlocked! flag used for suppression of signals; TGTextEntry*fTitleSlice label; TGNumberEntry*fValueValue of the slice; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Sat Mar 14 16:46:52 2015 » Last generated: 2015-03-14 16:46; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPieSliceEditor.html:20418,Guid,Guido,20418,root/html534/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html534/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,":fSignalsBlocked! flag used for suppression of signals; TGTextEntry*fTitleSlice label; TGNumberEntry*fValueValue of the slice; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Thu Sep 23 20:19:18 2010 » Last generated: 2010-09-23 20:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPieSliceEditor.html:20299,Guid,Guido,20299,root/html528/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html528/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,":fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TPieSlice*fPieSlice. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); TPieSliceEditor constructor. ~TPieSliceEditor(); TPieSliceEditor destructor. void SetModel(TObject* ); Set model. void ConnectSignals2Slots(); Connect signals to slots. void DoTitle(const char* ); Slot for setting the graph title. void DoValue(); Slot for setting the graph title. void DoOffset(); Slot for setting the graph title. TPieSliceEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Guido Volpi 05/18/2008 » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 16:27:31 2015 » Last generated: 2015-06-02 16:27; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TPieSliceEditor.html:21433,Guid,Guido,21433,root/html604/TPieSliceEditor.html,https://root.cern,https://root.cern/root/html604/TPieSliceEditor.html,1,['Guid'],['Guido']
Usability,":fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for torus editor. ~TGeoTorusEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoR(); Slot for R. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi. void DoDphi(); Slot for Dphi. TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTorusEditor.html:22296,undo,undoing,22296,root/html604/TGeoTorusEditor.html,https://root.cern,https://root.cern/root/html604/TGeoTorusEditor.html,1,['undo'],['undoing']
Usability,":fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for torus editor. ~TGeoTorusEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Slot for name. void DoApply(); Slot for applying current settings. void DoModified(); Slot for notifying modifications. void DoUndo(); Slot for undoing last operation. void DoR(); Slot for R. void DoRmin(); Slot for Rmin. void DoRmax(); Slot for Rmax. void DoPhi1(); Slot for phi. void DoDphi(); Slot for Dphi. TGeoTorusEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTorusEditor.html:22296,undo,undoing,22296,root/html602/TGeoTorusEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTorusEditor.html,1,['undo'],['undoing']
Usability,":fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for translation editor. ~TGeoTranslationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the new matrix. void DoName(); Slot for name. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying changes. void DoCancel(); Slot for cancelling last modifications non-applied. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for dx. void DoDy(); Slot for dx. void DoDz(); Slot for dx. TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTranslationEditor.html:22291,undo,undoing,22291,root/html604/TGeoTranslationEditor.html,https://root.cern,https://root.cern/root/html604/TGeoTranslationEditor.html,1,['undo'],['undoing']
Usability,":fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for translation editor. ~TGeoTranslationEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the new matrix. void DoName(); Slot for name. Bool_t DoParameters(); Slot for checking parameters. void DoApply(); Slot for applying changes. void DoCancel(); Slot for cancelling last modifications non-applied. void DoModified(); Slot for notifying changes. void DoUndo(); Slot for undoing last operation. void DoDx(); Slot for dx. void DoDy(); Slot for dx. void DoDz(); Slot for dx. TGeoTranslationEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:03; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTranslationEditor.html:22291,undo,undoing,22291,root/html602/TGeoTranslationEditor.html,https://root.cern,https://root.cern/root/html602/TGeoTranslationEditor.html,1,['undo'],['undoing']
Usability,":fgDbx; static Int_tTGFrame::fgDby; static const TGFont*TGProgressBar::fgDefaultFont; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGGC*TGProgressBar::fgDefaultGC; static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGHProgressBar(const TGWindow* p = 0, UInt_t w = 4, UInt_t h = kProgressBarTextWidth, Pixel_t back = GetWhitePixel(), Pixel_t barcolor = GetDefaultSelectedBackground(), GContext_t norm = GetDefaultGC()(), FontStruct_t font = GetDefaultFontStruct(), UInt_t options = kDoubleBorder|kSunkenFrame); Horizontal progress bar constructor. TGHProgressBar(const TGWindow* p, TGProgressBar::EBarType type, UInt_t w); Simple constructor allow you to create either a standard progress; bar, or a more fancy progress bar (fancy means: double sized border,; white background and a bit wider to allow for text to be printed; in the bar. void ShowPosition(Bool_t set = kTRUE, Bool_t percent = kTRUE, const char* format = ""%.2f""); Show postion text, either in percent or formatted according format. void DoRedraw(); Draw horizontal progress bar. void SavePrimitive(ostream& out, Option_t* option = """"); Save a horizontal progress bar as a C++ statement(s) on output stream out. virtual ~TGHProgressBar(); { }. TGDimension GetDefaultSize() const; { return TGDimension(fWidth, fBarWidth); }. » Author: Fons Rademakers 10/10/2000 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id$ » Last generated: 2015-03-13 19:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGHProgressBar.html:20630,Simpl,Simple,20630,root/html534/TGHProgressBar.html,https://root.cern,https://root.cern/root/html534/TGHProgressBar.html,4,"['Simpl', 'progress bar']","['Simple', 'progress bar']"
Usability,":fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static TVirtualPadEditor*TVirtualPadEditor::fgPadEditorsingleton editor dialog; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGedEditor* GetFrameCreator(); Returns TGedEditor that currently creates TGedFrames. void SetFrameCreator(TGedEditor* e); Set the TGedEditor that currently creates TGedFrames. TGedEditor(TCanvas* canvas = 0, UInt_t width = 175, UInt_t height = 20); Constructor of graphics editor. ~TGedEditor(); Editor destructor. void Update(TGedFrame* frame = 0); Virtual method that is called on any change in the dependent frames.; This implementation simply calls fPad Modified()/Update(). TGCompositeFrame* GetEditorTab(const char* name); Find or create tab with name. TGedTabInfo* GetEditorTabInfo(const char* name); Find or create tab with name. void CloseWindow(); Called when closed via WM close button. Calls Hide(). void ReinitWorkspace(); Clears windows in editor tab.; Unmap and withdraw currently shown frames and thus prepare for; construction of a new class layout or destruction. void SetGlobal(Bool_t global); Set editor global. void GlobalClosed(); Delete global editor if no canvas exists. void GlobalSetModel(TVirtualPad* , TObject* , Int_t ); Set canvas to global editor. void ConnectToCanvas(TCanvas* c); Connect this editor to the Selected signal of canvas 'c'. void DisconnectFromCanvas(); Disconnect this editor from the Selected signal of fCanvas. void SetCanvas(TCanvas* c); Change connection to another canvas. void SetModel(TVirtualPad* pad, TObject* obj, Int_t event); Activate object editors according to the selected object. void ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGedEditor.html:27642,simpl,simply,27642,root/html602/TGedEditor.html,https://root.cern,https://root.cern/root/html602/TGedEditor.html,2,['simpl'],['simply']
Usability,":incbetdouble incbet(double aa, double bb, double xx)DESCRIPTION:Definition SpecFuncCephes.cxx:484; ROOT::Math::Cephes::pseriesdouble pseries(double a, double b, double x)Definition SpecFuncCephes.cxx:766; ROOT::Math::Cephes::igamdouble igam(double a, double x)Definition SpecFuncCephes.cxx:127; ROOT::Math::Cephes::Pstatic double P[]Definition SpecFuncCephes.cxx:285; ROOT::Math::Cephes::lgamdouble lgam(double x)Definition SpecFuncCephes.cxx:197; ROOT::Math::Cephes::igamcdouble igamc(double a, double x)incomplete complementary gamma function igamc(a, x) = 1 - igam(a, x)Definition SpecFuncCephes.cxx:51; ROOT::Math::Cephes::erfTstatic double erfT[]Definition SpecFuncCephes.cxx:852; ROOT::Math::Cephes::Astatic double A[]Definition SpecFuncCephes.cxx:170; ROOT::Math::Cephes::betadouble beta(double z, double w)Definition SpecFuncCephes.cxx:428; ROOT::Math::Cephes::LS2PIstatic double LS2PIDefinition SpecFuncCephes.cxx:30; ROOT::Math::Cephes::erfPstatic double erfP[]Definition SpecFuncCephes.cxx:813; ROOT::Math::Cephes::erfQstatic double erfQ[]Definition SpecFuncCephes.cxx:824; ROOT::Math::Cephes::Cstatic double C[]Definition SpecFuncCephes.cxx:187; ROOT::Math::Cephes::stirfstatic double stirf(double x)Definition SpecFuncCephes.cxx:316; ROOT::Math::Cephes::gammadouble gamma(double x)Definition SpecFuncCephes.cxx:339; ROOT::Math::Polynomial1evaldouble Polynomial1eval(double x, double *a, unsigned int N)Definition SpecFuncCephes.cxx:967; ROOT::Math::Pidouble Pi()Mathematical constants.Definition Math.h:88; ROOT::Math::Polynomialevaldouble Polynomialeval(double x, double *a, unsigned int N)Definition SpecFuncCephes.cxx:951; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; v@ vDefinition rootcling_impl.cxx:3699; t1auto * t1Definition textangle.C:20. mathmathcoresrcSpecFuncCephes.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html:25757,Guid,Guide,25757,doc/master/SpecFuncCephes_8cxx_source.html,https://root.cern,https://root.cern/doc/master/SpecFuncCephes_8cxx_source.html,1,['Guid'],['Guide']
Usability,":kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2159 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2169 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2186 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip. ◆ StreamerNVirtual(). void TTreeCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file TTreeCache.h. ◆ UpdateBranches(). void TTreeCache::UpdateBranches ; (; TTree * ; tree). virtual . Update pointer to current Tree and recompute pointers to the branches in the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2210 of file TTreeCache.cxx. Member Data Documentation. ◆ fAutoCreated. bool TTreeCache::fAutoC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:50900,learn,learning,50900,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,":kAllBranches fill the cache with baskets from all branches. The default prefilling behavior can be controlled by setting TTreeCache.Prefill or the environment variable ROOT_TTREECACHE_PREFILL. . Definition at line 2160 of file TTreeCache.cxx. ◆ SetOptimizeMisses(). void TTreeCache::SetOptimizeMisses ; (; bool ; opt). Start of methods for the miss cache. ; Enable / disable the miss cache.; The first time this is called on a TTreeCache object, the corresponding data structures will be allocated. Subsequent enable / disables will simply turn the functionality on/off. ; Definition at line 683 of file TTreeCache.cxx. ◆ StartLearningPhase(). void TTreeCache::StartLearningPhase ; (; ). The name should be enough to explain the method. ; The only additional comments is that the cache is cleaned before the new learning phase. ; Definition at line 2170 of file TTreeCache.cxx. ◆ StopLearningPhase(). void TTreeCache::StopLearningPhase ; (; ). virtual . This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ; It's useful when the user knows exactly what branches they are going to use. For the moment it's just a call to FillBuffer() since that method will create the buffer lists from the specified branches. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2187 of file TTreeCache.cxx. ◆ Streamer(). void TTreeCache::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TFileCacheRead.; Reimplemented in TTreeCacheUnzip. ◆ StreamerNVirtual(). void TTreeCache::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 175 of file TTreeCache.h. ◆ UpdateBranches(). void TTreeCache::UpdateBranches ; (; TTree * ; tree). virtual . Update pointer to current Tree and recompute pointers to the branches in the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 2211 of file TTreeCache.cxx. Member Data Documentation. ◆ fAutoCreated. bool TTreeCache::fAutoC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:50970,learn,learning,50970,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,":kFatal, __VA_ARGS__);  ; #define R__LOG_INFO(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__);  ; #define R__LOG_WARNING(...)   R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kWarning, __VA_ARGS__);  . Enumerations; enum class  ROOT::Experimental::ELogLevel : unsigned char { ;   ROOT::Experimental::kUnset; , ROOT::Experimental::kFatal; , ROOT::Experimental::kError; , ROOT::Experimental::kWarning; , ;   ROOT::Experimental::kInfo; , ROOT::Experimental::kDebug. };  Kinds of diagnostics. More...;  . Functions; RLogChannel & ROOT::Experimental::Internal::GetChannelOrManager ();  ; RLogChannel & ROOT::Experimental::Internal::GetChannelOrManager (RLogChannel &channel);  ; ELogLevel ROOT::Experimental::operator+ (ELogLevel severity, int offset);  . Detailed Description; AuthorAxel Naumann axel@.nosp@m.cern.nosp@m..ch ; Date2015-03-29 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RLogger.hxx.; Macro Definition Documentation. ◆ R__LOG_DEBUG. #define R__LOG_DEBUG; (;  ; DEBUGLEVEL, .  ; ... . );    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kDebug + DEBUGLEVEL, __VA_ARGS__). Definition at line 365 of file RLogger.hxx. ◆ R__LOG_ERROR. #define R__LOG_ERROR; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kError, __VA_ARGS__). Definition at line 362 of file RLogger.hxx. ◆ R__LOG_FATAL. #define R__LOG_FATAL; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kFatal, __VA_ARGS__). Definition at line 361 of file RLogger.hxx. ◆ R__LOG_INFO. #define R__LOG_INFO; (;  ; ...);    R__LOG_TO_CHANNEL(ROOT::Experimental::ELogLevel::kInfo, __VA_ARGS__). Definition at line 364 of file RLogger.hxx. ◆ R__LOG_PRETTY_FUNCTION. #define R__LOG_PRETTY_FUNCTION   __PRETTY_FUNCTION__. Definition at line 326 of file RLogger.hxx. ◆ R__LOG_TO_CHANNEL. #define R__LOG_TO_CHANNEL; (;  ; SEVERITY, .  ; CHANNEL . ). Value: ((SEVERITY < ROOT::Exp",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RLogger_8hxx.html:4323,Feedback,Feedback,4323,doc/master/RLogger_8hxx.html,https://root.cern,https://root.cern/doc/master/RLogger_8hxx.html,1,['Feedback'],['Feedback']
Usability,":kZombie. Class Charts. Inheritance Chart:. TObject. ←; TVirtualViewer3D. ←. TGLScenePad. TGLViewer; ←. TGLEmbeddedViewer. TGLSAViewer. TViewer3DPad. TViewerX3D. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TVirtualViewer3D.html:18336,Simpl,Simple,18336,root/html604/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html604/TVirtualViewer3D.html,1,['Simpl'],['Simple']
Usability,":kZombie. Class Charts. Inheritance Chart:. TObject. ←; TVirtualViewer3D. ←. TGLScenePad. TGLViewer; ←. TGLEmbeddedViewer. TGLSAViewer. TViewer3DPad. TViewerX3D. Function documentation; TVirtualViewer3D* Viewer3D(TVirtualPad* pad = 0, Option_t* type = """"); Create a Viewer 3D of specified type. virtual ~TVirtualViewer3D(); {}. Bool_t PreferLocalFrame() const; Viewers must always handle master (absolute) positions - and; buffer producers must be able to supply them. Some viewers may; prefer local frame & translation - and producers can optionally; supply them. Bool_t CanLoopOnPrimitives() const; Viewers can implement their own loop over pad's primitive list. { return kFALSE; }. void PadPaint(TVirtualPad* ); When they can, TPad::Paint() and TPad::PaintModified() simply; call the following function:. {}. void ObjectPaint(TObject* , Option_t* = """"); {}. void BeginScene(); Addition/removal of objects must occur between Begin/EndUpdate calls. Bool_t BuildingScene() const. void EndScene(). Int_t AddObject(const TBuffer3D& buffer, Bool_t* addChildren = 0); Simple object addition - buffer represents a unique single positioned object. Int_t AddObject(UInt_t physicalID, const TBuffer3D& buffer, Bool_t* addChildren = 0); Complex object addition - for adding physical objects which have common logical; shapes. In this case buffer describes template shape (aside from kCore). Bool_t OpenComposite(const TBuffer3D& buffer, Bool_t* addChildren = 0). void CloseComposite(). void AddCompositeOp(UInt_t operation). TObject * SelectObject(Int_t , Int_t ); {return 0;}. void DrawViewer(); {}. void PrintObjects(); {}. void ResetCameras(); {}. void ResetCamerasAfterNextUpdate(); {}. » Author: Olivier Couet 05/10/2004 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-30 15:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TVirtualViewer3D.html:18336,Simpl,Simple,18336,root/html602/TVirtualViewer3D.html,https://root.cern,https://root.cern/root/html602/TVirtualViewer3D.html,1,['Simpl'],['Simple']
Usability,":kZombie. protected:. TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TInterpreter(const char* name, const char* title = ""Generic Interpreter""); TInterpreter ctor only called by derived classes. TInterpreter * Instance(); returns gInterpreter global. void Execute(TMethod* method, TObjArray* params, int* error = 0). Bool_t SetSuspendAutoParsing(Bool_t value). Bool_t IsAutoParsingSuspended() const. TInterpreter(); { }. TInterpreter(const char* name, const char* title = ""Generic Interpreter""). virtual ~TInterpreter(); { }. void AddIncludePath(const char* path). void * SetAutoLoadCallBack(void* ); { return 0; }. void * GetAutoLoadCallBack() const; { return 0; }. Int_t AutoLoad(const char* classname, Bool_t knowDictNotLoaded = kFALSE). Int_t AutoLoad(const type_info& typeinfo, Bool_t knowDictNotLoaded = kFALSE). Int_t AutoParse(const char* cls). void ClearFileBusy(). void ClearStack(). Bool_t Declare(const char* code). void EnableAutoLoading(). void EndOfLineAction(). TClass * GetClass(const type_info& typeinfo, Bool_t load) const. Int_t GetExitCode() const. TEnv * GetMapfile() const; { return 0; }. Int_t GetMore() const. TClass * GenerateTClass(const char* classname, Bool_t emulation, Bool_t silent = kFALSE). TClass * GenerateTClass(ClassInfo_t* classinfo, Bool_t silent = kFALSE). Int_t GenerateDictionary(const char* classes, const char* includes = 0, const char* options = 0). char * GetPrompt(). const char * GetSharedLibs(). const char * GetClassSharedLibs(const char* cls). const char * GetSharedLibDeps(const char* lib). const char * GetIncludePath(). const char * GetSTLIncludePath() const; { return """"; }. TObjArray * GetRootMapFiles() const. void Initialize(). void InspectMembers(TMemberInspector& , const void* obj, const TClass* cl, Bool_t isTransient). Bool_t IsLoaded(const char* filename) const. Int_t Load(const char* filenam, Bool_t system = kFALSE).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:26080,Clear,ClearStack,26080,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['Clear'],['ClearStack']
Usability,":numWeightssize_t numWeights(size_t numInputNodes) constreturn the number of weights for this layer (fully connected)Definition NeuralNet.h:686; TMVA::DNN::Layer::inverseActivationFunctionstd::shared_ptr< std::function< double(double)> > inverseActivationFunction() constfetch the inverse activation function for this layerDefinition NeuralNet.h:689; TMVA::DNN::Layer::m_activationFunctionTypeEnumFunction m_activationFunctionTypeDefinition NeuralNet.h:703; TMVA::DNN::Layer::activationFunctionTypeEnumFunction activationFunctionType() constget the activation function type for this layerDefinition NeuralNet.h:691; TMVA::DNN::Layer::modeOutputValuesModeOutputValues modeOutputValues() constget the mode-output-value (direct, probabilities)Definition NeuralNet.h:682; TMVA::DNN::MeanVarianceDefinition NeuralNet.h:75; TMVA::DNN::MeanVariance::meandouble mean() constDefinition NeuralNet.h:126; TMVA::DNN::MeanVariance::MeanVarianceMeanVariance()Definition NeuralNet.h:77; TMVA::DNN::MeanVariance::clearvoid clear()Definition NeuralNet.h:84; TMVA::DNN::MeanVariance::var_corrdouble var_corr() constDefinition NeuralNet.h:136; TMVA::DNN::MeanVariance::countint count() constDefinition NeuralNet.h:124; TMVA::DNN::MeanVariance::addvoid add(T value, double weight=1.0)Definition NeuralNet.h:93; TMVA::DNN::MeanVariance::stdDev_corrdouble stdDev_corr() constDefinition NeuralNet.h:144; TMVA::DNN::MeanVariance::weightsdouble weights() constDefinition NeuralNet.h:125; TMVA::DNN::MeanVariance::m_meandouble m_meanDefinition NeuralNet.h:150; TMVA::DNN::MeanVariance::m_nsize_t m_nDefinition NeuralNet.h:148; TMVA::DNN::MeanVariance::m_squareddouble m_squaredDefinition NeuralNet.h:151; TMVA::DNN::MeanVariance::m_sumWeightsdouble m_sumWeightsDefinition NeuralNet.h:149; TMVA::DNN::MeanVariance::addvoid add(ITERATOR itBegin, ITERATOR itEnd)Definition NeuralNet.h:116; TMVA::DNN::MeanVariance::vardouble var() constDefinition NeuralNet.h:127; TMVA::DNN::MeanVariance::stdDevdouble stdDev() constDefinition Neu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:63433,clear,clearvoid,63433,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['clear'],"['clear', 'clearvoid']"
Usability,":operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TGraph* g, Double_t z); Bool_tBuildTesselation(Rgl::Pad::Tesselator& tess, const TMultiGraph* mg, Double_t z); Bool_tCacheGeometry(); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawCap(TGLH2PolyPainter::CIter_t cap, Int_t bin) const; voidDrawCaps() const; voidDrawExtrusion() const; voidDrawExtrusion(const TGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawExtrusion(const TMultiGraph* polygon, Double_t zMin, Double_t zMax, Int_t nBin) const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFillTemporaryP",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLH2PolyPainter.html:1605,Clear,ClearBuffers,1605,root/html532/TGLH2PolyPainter.html,https://root.cern,https://root.cern/root/html532/TGLH2PolyPainter.html,1,['Clear'],['ClearBuffers']
Usability,":operator=(const TVirtualGLPainter&); virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector& insp); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. voidClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawContoursProjection() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; voidDrawProjections() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidGenTexMap() const; Bool_tHasProjections() const; Bool_tHasSections() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; Bool_tPreparePalette() const; voidSetNormals(); voidSetSurfaceColor() const; Bool_tTextured() const; char*WindowPointTo3DPoint(Int_t px, Int_t py) const. Data Members; public:. enum ESurfaceType { kSurf; kSurf1;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGLSurfacePainter.html:1657,Clear,ClearBuffers,1657,root/html532/TGLSurfacePainter.html,https://root.cern,https://root.cern/root/html532/TGLSurfacePainter.html,1,['Clear'],['ClearBuffers']
Usability,":poisson_pdf ; (; unsigned int ; n, . double ; mu . ). inline . Probability density function of the Poisson distribution. . \[ p(n) = \frac{\mu^n}{n!} e^{- \mu} \]. For detailed description see Mathworld. ; Definition at line 532 of file PdfFuncMathCore.h. ◆ tdistribution_pdf(). double ROOT::Math::tdistribution_pdf ; (; double ; x, . double ; r, . double ; x0 = 0 . ). inline . Probability density function of Student's t-distribution. . \[ p_{r}(x) = \frac{\Gamma(\frac{r+1}{2})}{\sqrt{r \pi}\Gamma(\frac{r}{2})} \left( 1+\frac{x^2}{r}\right)^{-(r+1)/2} \]. for \(k \geq 0\). For detailed description see Mathworld. ; Definition at line 563 of file PdfFuncMathCore.h. ◆ uniform_pdf(). double ROOT::Math::uniform_pdf ; (; double ; x, . double ; a, . double ; b, . double ; x0 = 0 . ). inline . Probability density function of the uniform (flat) distribution. . \[ p(x) = {1 \over (b-a)} \]. if \(a \leq x<b\) and 0 otherwise. For detailed description see Mathworld. ; Definition at line 588 of file PdfFuncMathCore.h. ◆ vavilov_accurate_pdf(). double ROOT::Math::vavilov_accurate_pdf ; (; double ; x, . double ; kappa, . double ; beta2 . ). The Vavilov probability density function. ; Parameters. xThe Landau parameter \(x = \lambda_L\) ; kappaThe parameter \(\kappa\), which must be in the range \(\kappa \ge 0.001 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 461 of file VavilovAccurate.cxx. ◆ vavilov_fast_pdf(). double ROOT::Math::vavilov_fast_pdf ; (; double ; x, . double ; kappa, . double ; beta2 . ). The Vavilov probability density function. ; Parameters. xThe Landau parameter \(x = \lambda_L\) ; kappaThe parameter \(\kappa\), which must be in the range \(0.01 \le \kappa \le 12 \) ; beta2The parameter \(\beta^2\), which must be in the range \(0 \le \beta^2 \le 1 \) . Definition at line 577 of file VavilovFast.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__PdfFunc.html:13691,Guid,Guide,13691,doc/master/group__PdfFunc.html,https://root.cern,https://root.cern/doc/master/group__PdfFunc.html,1,['Guid'],['Guide']
Usability,":printValue ; (; std::ostream & ; os); const. overridevirtual . Print the value of the fit result, i.e.g the status, minimized FCN, edm and covariance quality code. ; Reimplemented from RooPrintable.; Definition at line 1428 of file RooFitResult.cxx. ◆ randomizePars(). const RooArgList & RooFitResult::randomizePars ; (; ); const. Generate random perturbations of the final parameters using the covariance matrix. ; Return a list of floating parameter values that are perturbed from the final fit values by random amounts sampled from the covariance matrix.; The returned object is overwritten with each call and belongs to the RooFitResult. Uses the ""square root method"" to decompose the covariance matrix, which makes inverting it unnecessary. ; Definition at line 336 of file RooFitResult.cxx. ◆ reducedCovarianceMatrix(). TMatrixDSym RooFitResult::reducedCovarianceMatrix ; (; const RooArgList & ; params); const. Return a reduced covariance matrix (Note that Vred is a simple sub-matrix of V, row/columns are ordered to matched the convention given in input argument 'params'. ; Definition at line 1124 of file RooFitResult.cxx. ◆ setConstParList(). void RooFitResult::setConstParList ; (; const RooArgList & ; list). Fill the list of constant parameters. ; Definition at line 136 of file RooFitResult.cxx. ◆ setCovarianceMatrix(). void RooFitResult::setCovarianceMatrix ; (; TMatrixDSym & ; V). Store externally provided correlation matrix in this RooFitResult ;. ; Definition at line 1052 of file RooFitResult.cxx. ◆ setCovQual(). void RooFitResult::setCovQual ; (; Int_t ; val). inline . Definition at line 169 of file RooFitResult.h. ◆ setEDM(). void RooFitResult::setEDM ; (; double ; val). inline . Definition at line 167 of file RooFitResult.h. ◆ setFinalParList(). void RooFitResult::setFinalParList ; (; const RooArgList & ; list). Fill the list of final values of the floating parameters. ; Definition at line 170 of file RooFitResult.cxx. ◆ setInitParList(). void RooFitResult::setIn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFitResult.html:36218,simpl,simple,36218,doc/master/classRooFitResult.html,https://root.cern,https://root.cern/doc/master/classRooFitResult.html,1,['simpl'],['simple']
Usability,":processArg ; (; const RooAbsArg * ; arg). inlineprivate . Definition at line 139 of file RooArgList.h. ◆ processArg() [5/6]. void RooArgList::processArg ; (; double ; value). private . Definition at line 192 of file RooArgList.cxx. ◆ processArg() [6/6]. void RooArgList::processArg ; (; RooAbsArg * ; arg). inlineprivate . Definition at line 140 of file RooArgList.h. ◆ processArgs(). template<typename... Args_t> . void RooArgList::processArgs ; (; Args_t &&... ; args). inlineprivate . Definition at line 133 of file RooArgList.h. ◆ readFromStream(). bool RooArgList::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). virtual . Read the contents of the argset in ASCII form from given stream. ; A single line is read, and all elements are assumed to be separated by white space. The value of each argument is read by the arguments readFromStream function. ; Definition at line 161 of file RooArgList.cxx. ◆ Streamer(). void RooArgList::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsCollection.; Reimplemented in RooCollectionProxy< RooArgList >. ◆ StreamerNVirtual(). void RooArgList::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 149 of file RooArgList.h. ◆ writeToStream(). void RooArgList::writeToStream ; (; std::ostream & ; os, . bool ; compact . ). virtual . Write the contents of the argset in ASCII form to given stream. ; All elements will be printed on a single line separated by a single white space. The contents of each element is written by the arguments' writeToStream() function ; Definition at line 138 of file RooArgList.cxx. Libraries for RooArgList:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooArgList.h; roofit/roofitcore/src/RooArgList.cxx. RooArgList. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:43 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooArgList.html:35950,Guid,Guide,35950,doc/master/classRooArgList.html,https://root.cern,https://root.cern/doc/master/classRooArgList.html,1,['Guid'],['Guide']
Usability,:setw(10) << std::setiosflags(std::ios::fixed) << std::setprecision(5) << fTH_F;; 664 out << std::setw(10) << std::setiosflags(std::ios::fixed) << std::setprecision(5) << fTG_F;; 665 out << std::setw(10) << std::setiosflags(std::ios::fixed) << std::setprecision(5) << fTH_S;; 666 out << std::setw(10) << std::setiosflags(std::ios::fixed) << std::setprecision(5) << fTG_S;; 667 out << std::setw(5) << fStatus;; 668 Int_t ndecays = 0;; 669 if (fDecays); 670 ndecays = fDecays->GetEntries();; 671 out << std::setw(5) << ndecays;; 672 out << std::endl;; 673 if (fDecays) {; 674 TIter next(fDecays);; 675 TGeoDecayChannel *dc;; 676 while ((dc = (TGeoDecayChannel *)next())); 677 dc->SavePrimitive(out);; 678 }; 679}; 680 ; 681////////////////////////////////////////////////////////////////////////////////; 682/// Adds a proportion ratio to the existing one.; 683 ; 684void TGeoElementRN::AddRatio(TGeoBatemanSol &ratio); 685{; 686 if (!fRatio); 687 fRatio = new TGeoBatemanSol(ratio);; 688 else; 689 *fRatio += ratio;; 690}; 691 ; 692////////////////////////////////////////////////////////////////////////////////; 693/// Clears the existing ratio.; 694 ; 695void TGeoElementRN::ResetRatio(); 696{; 697 if (fRatio) {; 698 delete fRatio;; 699 fRatio = nullptr;; 700 }; 701}; 702 ; 703ClassImp(TGeoDecayChannel);; 704 ; 705////////////////////////////////////////////////////////////////////////////////; 706/// Assignment.; 707/// assignment operator; 708 ; 709TGeoDecayChannel &TGeoDecayChannel::operator=(const TGeoDecayChannel &dc); 710{; 711 if (this != &dc) {; 712 TObject::operator=(dc);; 713 fDecay = dc.fDecay;; 714 fDiso = dc.fDiso;; 715 fBranchingRatio = dc.fBranchingRatio;; 716 fQvalue = dc.fQvalue;; 717 fParent = dc.fParent;; 718 fDaughter = dc.fDaughter;; 719 }; 720 return *this;; 721}; 722 ; 723////////////////////////////////////////////////////////////////////////////////; 724/// Returns name of decay.; 725 ; 726const char *TGeoDecayChannel::GetName() const; 727{; 728 static TStri,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoElement_8cxx_source.html:23768,Clear,Clears,23768,doc/master/TGeoElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoElement_8cxx_source.html,1,['Clear'],['Clears']
Usability,":string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddPdf.html:3938,clear,clearEvalErrorLog,3938,root/html532/RooAddPdf.html,https://root.cern,https://root.cern/root/html532/RooAddPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,":string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProdPdf.html:4384,clear,clearEvalErrorLog,4384,root/html532/RooProdPdf.html,https://root.cern,https://root.cern/root/html532/RooProdPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,":string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProdPdf.html:4384,clear,clearEvalErrorLog,4384,root/html534/RooProdPdf.html,https://root.cern,https://root.cern/root/html534/RooProdPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,":string icon;  icon associated with item ;  ; std::string mtime;  modification time ;  ; std::string name;  item name ;  ; int nchilds {0};  number of childs ;  ; std::string title;  item title ;  . #include <ROOT/RGeomData.hxx>. Inheritance diagram for ROOT::RGeoItem:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RGeoItem() [1/2]. ROOT::RGeoItem::RGeoItem ; (; ). default . Default constructor. . ◆ RGeoItem() [2/2]. ROOT::RGeoItem::RGeoItem ; (; const std::string & ; _name, . int ; _nchilds, . int ; _nodeid, . const std::string & ; _color, . const std::string & ; _material = """", . int ; _vis = 0, . int ; _pvis = 0 . ). inline . Definition at line 107 of file RGeomData.hxx. ◆ ~RGeoItem(). ROOT::RGeoItem::~RGeoItem ; (; ). overridedefault . Member Function Documentation. ◆ SetTop(). void ROOT::RGeoItem::SetTop ; (; bool ; on = true). inline . Definition at line 115 of file RGeomData.hxx. Member Data Documentation. ◆ color. std::string ROOT::RGeoItem::color. protected . color ; Definition at line 96 of file RGeomData.hxx. ◆ id. int ROOT::RGeoItem::id {0}. protected . node id ; Definition at line 95 of file RGeomData.hxx. ◆ material. std::string ROOT::RGeoItem::material. protected . material ; Definition at line 97 of file RGeomData.hxx. ◆ pvis. int ROOT::RGeoItem::pvis {0}. protected . visibility of physical node ; Definition at line 99 of file RGeomData.hxx. ◆ top. bool ROOT::RGeoItem::top {false}. protected . indicates if node selected as top ; Definition at line 100 of file RGeomData.hxx. ◆ vis. int ROOT::RGeoItem::vis {0}. protected . visibility of logical node ; Definition at line 98 of file RGeomData.hxx. Libraries for ROOT::RGeoItem:. [legend]; The documentation for this class was generated from the following file:; geom/webviewer/inc/ROOT/RGeomData.hxx. ROOTRGeoItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RGeoItem.html:3932,Guid,Guide,3932,doc/master/classROOT_1_1RGeoItem.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RGeoItem.html,1,['Guid'],['Guide']
Usability,":system_clock::now();; 330 std::chrono::time_point<std::chrono::system_clock> fLastPrintTime = fBeginTime;; 331 std::chrono::seconds fPrintInterval{1};; 332 ; 333 std::atomic<std::size_t> fProcessedEvents{0};; 334 std::size_t fLastProcessedEvents{0};; 335 std::size_t fIncrement;; 336 ; 337 mutable std::mutex fSampleNameToEventEntriesMutex;; 338 std::map<std::string, ULong64_t> fSampleNameToEventEntries; // Filename, events in the file; 339 ; 340 std::array<double, 20> fEventsPerSecondStatistics;; 341 std::size_t fEventsPerSecondStatisticsIndex{0};; 342 ; 343 unsigned int fBarWidth;; 344 unsigned int fTotalFiles;; 345 ; 346 std::mutex fPrintMutex;; 347 bool fIsTTY;; 348 bool fUseShellColours;; 349 ; 350 std::shared_ptr<TTree> fTree{nullptr};; 351 ; 352public:; 353 /// Create a progress helper.; 354 /// \param increment RDF callbacks are called every `n` events. Pass this `n` here.; 355 /// \param totalFiles read total number of files in the RDF.; 356 /// \param progressBarWidth Number of characters the progress bar will occupy.; 357 /// \param printInterval Update every stats every `n` seconds.; 358 /// \param useColors Use shell colour codes to colour the output. Automatically disabled when; 359 /// we are not writing to a tty.; 360 ProgressHelper(std::size_t increment, unsigned int totalFiles = 1, unsigned int progressBarWidth = 40,; 361 unsigned int printInterval = 1, bool useColors = true);; 362 ; 363 ~ProgressHelper() = default;; 364 ; 365 friend class ProgressBarAction;; 366 ; 367 /// Register a new sample for completion statistics.; 368 /// \see ROOT::RDF::RInterface::DefinePerSample().; 369 /// The *id.AsString()* refers to the name of the currently processed file.; 370 /// The idea is to populate the event entries in the *fSampleNameToEventEntries* map; 371 /// by selecting the greater of the two values:; 372 /// *id.EntryRange().second* which is the upper event entry range of the processed sample; 373 /// and the current value of the event entries in the *f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RDFHelpers_8hxx_source.html:16675,progress bar,progress bar,16675,doc/master/RDFHelpers_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RDFHelpers_8hxx_source.html,1,['progress bar'],['progress bar']
Usability,; (; ). inlineoverride . Definition at line 40 of file TSelectorScalar.h. Member Function Documentation. ◆ Class(). static TClass * TSelectorScalar::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TSelectorScalar::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TSelectorScalar::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TSelectorScalar.h. ◆ DeclFileName(). static const char * TSelectorScalar::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TSelectorScalar.h. ◆ Inc(). void TSelectorScalar::Inc ; (; Long_t ; n = 1). Increment scalar value by n. ; Definition at line 29 of file TSelectorScalar.cxx. ◆ IsA(). TClass * TSelectorScalar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TParameter< Long64_t >.; Definition at line 45 of file TSelectorScalar.h. ◆ Merge(). Int_t TSelectorScalar::Merge ; (; TCollection * ; list). overridevirtual . Merge scalars with scalars in the list. ; The scalar values are added. Returns the number of scalars that were in the list. ; Reimplemented from TParameter< Long64_t >.; Definition at line 38 of file TSelectorScalar.cxx. ◆ Streamer(). void TSelectorScalar::Streamer ; (; TBuffer & ; ). overridevirtual . Stream an object of class TObject. ; Reimplemented from TParameter< Long64_t >. ◆ StreamerNVirtual(). void TSelectorScalar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 45 of file TSelectorScalar.h. Libraries for TSelectorScalar:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TSelectorScalar.h; tree/tree/src/TSelectorScalar.cxx. TSelectorScalar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelectorScalar.html:13349,Guid,Guide,13349,doc/master/classTSelectorScalar.html,https://root.cern,https://root.cern/doc/master/classTSelectorScalar.html,1,['Guid'],['Guide']
Usability,; (; ). inlinevirtual . Reimplemented in TGListTreeItemStd.; Definition at line 99 of file TGListTree.h. Friends And Related Symbol Documentation. ◆ TGListTree. friend class TGListTree. friend . Definition at line 28 of file TGListTree.h. Member Data Documentation. ◆ fClient. TGClient* TGListTreeItem::fClient. protected . pointer to TGClient ; Definition at line 35 of file TGListTree.h. ◆ fDNDState. Int_t TGListTreeItem::fDNDState. protected . EDNDFlags. ; Definition at line 44 of file TGListTree.h. ◆ fFirstchild. TGListTreeItem* TGListTreeItem::fFirstchild. protected . pointer to first child item ; Definition at line 37 of file TGListTree.h. ◆ fHeight. UInt_t TGListTreeItem::fHeight. protected . Definition at line 51 of file TGListTree.h. ◆ fLastchild. TGListTreeItem* TGListTreeItem::fLastchild. protected . pointer to last child item ; Definition at line 38 of file TGListTree.h. ◆ fNextsibling. TGListTreeItem* TGListTreeItem::fNextsibling. protected . pointer to next sibling ; Definition at line 40 of file TGListTree.h. ◆ fOpen. Bool_t TGListTreeItem::fOpen. protected . true if item is open ; Definition at line 42 of file TGListTree.h. ◆ fParent. TGListTreeItem* TGListTreeItem::fParent. protected . pointer to parent ; Definition at line 36 of file TGListTree.h. ◆ fPrevsibling. TGListTreeItem* TGListTreeItem::fPrevsibling. protected . pointer to previous sibling ; Definition at line 39 of file TGListTree.h. ◆ fXtext. Int_t TGListTreeItem::fXtext. protected . Definition at line 49 of file TGListTree.h. ◆ fY. Int_t TGListTreeItem::fY. protected . Definition at line 48 of file TGListTree.h. ◆ fYtext. Int_t TGListTreeItem::fYtext. protected . Definition at line 50 of file TGListTree.h. Libraries for TGListTreeItem:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGListTree.h; gui/gui/src/TGListTree.cxx. TGListTreeItem. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTreeItem.html:14640,Guid,Guide,14640,doc/master/classTGListTreeItem.html,https://root.cern,https://root.cern/doc/master/classTGListTreeItem.html,1,['Guid'],['Guide']
Usability,"; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGColumnLayout::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGColumnLayout::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 237 of file TGLayout.h. ◆ DeclFileName(). static const char * TGColumnLayout::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 237 of file TGLayout.h. ◆ GetDefaultSize(). TGDimension TGColumnLayout::GetDefaultSize ; (; ); const. overridevirtual . Return default dimension of the column layout. ; Implements TGLayoutManager.; Definition at line 590 of file TGLayout.cxx. ◆ IsA(). TClass * TGColumnLayout::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 237 of file TGLayout.h. ◆ Layout(). void TGColumnLayout::Layout ; (; ). overridevirtual . Make a column layout of all frames in the list. ; Implements TGLayoutManager.; Definition at line 566 of file TGLayout.cxx. ◆ SavePrimitive(). void TGColumnLayout::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; = """" . ). overridevirtual . Save column layout manager as a C++ statement(s) on output stream. ; Reimplemented from TObject.; Definition at line 1064 of file TGLayout.cxx. ◆ Streamer(). void TGColumnLayout::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGColumnLayout::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 237 of file TGLayout.h. Libraries for TGColumnLayout:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGLayout.h; gui/gui/src/TGLayout.cxx. TGColumnLayout. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGColumnLayout.html:15026,Guid,Guide,15026,doc/master/classTGColumnLayout.html,https://root.cern,https://root.cern/doc/master/classTGColumnLayout.html,1,['Guid'],['Guide']
Usability,; (; ); const. inline . Definition at line 145 of file CudaBuffers.h. ◆ operator AFloat *(). template<typename AFloat > . TMVA::DNN::TCudaDeviceBuffer< AFloat >::operator AFloat * ; (; ); const. inline . Convert to raw device data pointer. ; Definition at line 135 of file CudaBuffers.h. ◆ operator=() [1/2]. template<typename AFloat > . TCudaDeviceBuffer & TMVA::DNN::TCudaDeviceBuffer< AFloat >::operator= ; (; const TCudaDeviceBuffer< AFloat > & ; ). default . ◆ operator=() [2/2]. template<typename AFloat > . TCudaDeviceBuffer & TMVA::DNN::TCudaDeviceBuffer< AFloat >::operator= ; (; TCudaDeviceBuffer< AFloat > && ; ). default . ◆ SetComputeStream(). template<typename AFloat > . void TMVA::DNN::TCudaDeviceBuffer< AFloat >::SetComputeStream ; (; cudaStream_t ; stream). inline . Definition at line 143 of file CudaBuffers.h. Member Data Documentation. ◆ fComputeStream. template<typename AFloat > . cudaStream_t TMVA::DNN::TCudaDeviceBuffer< AFloat >::fComputeStream. private . cudaStream for data transfer ; Definition at line 106 of file CudaBuffers.h. ◆ fDestructor. template<typename AFloat > . struct TMVA::DNN::TCudaDeviceBuffer::TDestructor TMVA::DNN::TCudaDeviceBuffer< AFloat >::fDestructor. private . ◆ fDevicePointer. template<typename AFloat > . std::shared_ptr<AFloat *> TMVA::DNN::TCudaDeviceBuffer< AFloat >::fDevicePointer. private . Pointer to the buffer data. ; Definition at line 107 of file CudaBuffers.h. ◆ fOffset. template<typename AFloat > . size_t TMVA::DNN::TCudaDeviceBuffer< AFloat >::fOffset. private . Offset for sub-buffers. ; Definition at line 104 of file CudaBuffers.h. ◆ fSize. template<typename AFloat > . size_t TMVA::DNN::TCudaDeviceBuffer< AFloat >::fSize. private . Definition at line 105 of file CudaBuffers.h. tmva/tmva/inc/TMVA/DNN/Architectures/Cuda/CudaBuffers.h; tmva/tmva/src/DNN/Architectures/Cuda/CudaBuffers.cxx. TMVADNNTCudaDeviceBuffer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html:6521,Guid,Guide,6521,doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TCudaDeviceBuffer.html,1,['Guid'],['Guide']
Usability,"; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 114 of file RooRatio.cxx. ◆ IsA(). TClass * RooRatio::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 44 of file RooRatio.h. ◆ Streamer(). void RooRatio::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRatio::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 44 of file RooRatio.h. ◆ translate(). void RooRatio::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overrideprotectedvirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 127 of file RooRatio.cxx. Member Data Documentation. ◆ _denominator. RooRealProxy RooRatio::_denominator. protected . Definition at line 42 of file RooRatio.h. ◆ _numerator. RooRealProxy RooRatio::_numerator. protected . Definition at line 41 of file RooRatio.h. Libraries for RooRatio:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRatio.h; roofit/roofitcore/src/RooRatio.cxx. RooRatio. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:06 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRatio.html:64533,Guid,Guide,64533,doc/master/classRooRatio.html,https://root.cern,https://root.cern/doc/master/classRooRatio.html,1,['Guid'],['Guide']
Usability,; (; ); const. overridevirtual . return the Error Status of the last Integral calculation ; Implements ROOT::Math::VirtualIntegrator.; Definition at line 258 of file GSLMCIntegrator.cxx. Member Data Documentation. ◆ fAbsTol. double ROOT::Math::GSLMCIntegrator::fAbsTol. private . Definition at line 315 of file GSLMCIntegrator.h. ◆ fCalls. unsigned int ROOT::Math::GSLMCIntegrator::fCalls. private . Definition at line 314 of file GSLMCIntegrator.h. ◆ fDim. unsigned int ROOT::Math::GSLMCIntegrator::fDim. private . Definition at line 313 of file GSLMCIntegrator.h. ◆ fError. double ROOT::Math::GSLMCIntegrator::fError. private . Definition at line 321 of file GSLMCIntegrator.h. ◆ fExtGen. bool ROOT::Math::GSLMCIntegrator::fExtGen. private . Definition at line 323 of file GSLMCIntegrator.h. ◆ fFunction. GSLMonteFunctionWrapper* ROOT::Math::GSLMCIntegrator::fFunction. private . Definition at line 327 of file GSLMCIntegrator.h. ◆ fRelTol. double ROOT::Math::GSLMCIntegrator::fRelTol. private . Definition at line 316 of file GSLMCIntegrator.h. ◆ fResult. double ROOT::Math::GSLMCIntegrator::fResult. private . Definition at line 320 of file GSLMCIntegrator.h. ◆ fRng. GSLRngWrapper* ROOT::Math::GSLMCIntegrator::fRng. private . Definition at line 311 of file GSLMCIntegrator.h. ◆ fStatus. int ROOT::Math::GSLMCIntegrator::fStatus. private . Definition at line 322 of file GSLMCIntegrator.h. ◆ fType. MCIntegration::Type ROOT::Math::GSLMCIntegrator::fType. private . Definition at line 309 of file GSLMCIntegrator.h. ◆ fWorkspace. GSLMCIntegrationWorkspace* ROOT::Math::GSLMCIntegrator::fWorkspace. private . Definition at line 326 of file GSLMCIntegrator.h. Libraries for ROOT::Math::GSLMCIntegrator:. [legend]; The documentation for this class was generated from the following files:; math/mathmore/inc/Math/GSLMCIntegrator.h; math/mathmore/src/GSLMCIntegrator.cxx. ROOTMathGSLMCIntegrator. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html:15345,Guid,Guide,15345,doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMCIntegrator.html,1,['Guid'],['Guide']
Usability,"; (; Int_t & ; scale). Gets z-axis scale: . scale - it can be linear, sqrt or log . Definition at line 7337 of file TSpectrum2Painter.cxx. ◆ IsA(). TClass * TSpectrum2Painter::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TNamed.; Definition at line 205 of file TSpectrum2Painter.h. ◆ operator=(). TSpectrum2Painter & TSpectrum2Painter::operator= ; (; const TSpectrum2Painter & ; ). private . ◆ Paint(). void TSpectrum2Painter::Paint ; (; Option_t * ; option). overridevirtual . Paints histogram according to preset parameters. . Visualization; Goal: to present 2-dimensional spectra in suitable visual form; This package has several display mode groups and display modes, which can be employed for the presentation of 2-dimensional histograms Display modes groups:. kModeGroupSimple - it covers simple display modes using one color only; kModeGroupLight - in this group the shading is carried out according to the position of the fictive light source; kModeGroupHeight - in this group the shading is carried out according to the channel contents; kModeGroupLightHeight - combination of two previous shading algorithms. One can control the weight between both algorithms. Display modes:. kDisplayModePoints,; kDisplayModeGrid,; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful combinations (denoted by x) are given in the next table. Simple Light Height Light-Height . Points X X X X . Grid X X X X . Contours X - X - . Bars X - X - . LinesX X X X X . LinesY X X X X . BarsX X - X - . BarsY X - X - . Needles X - - - . Surface - X X X . Triangles X X X X . Function: void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode); This function controls the display mode group and display mode of the histogra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:31539,simpl,simple,31539,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['simpl'],['simple']
Usability,"; (; Int_t ; ix, . Int_t ; iy, . Window_t ; id = 0 . ). overridevirtual . Sets the pointer position. ; Parameters. [in]ixnew X coordinate of pointer ; [in]iynew Y coordinate of pointer ; [in]idwindow identifier. Coordinates are relative to the origin of the window id or to the origin of the current window if id == 0. ; Reimplemented from TVirtualX. ◆ WMDeleteNotify(). void TGWin32VirtualXProxy::WMDeleteNotify ; (; Window_t ; id). overridevirtual . Tells WM to send message when window is closed via WM. ; Reimplemented from TVirtualX. ◆ WriteGIF(). Int_t TGWin32VirtualXProxy::WriteGIF ; (; char * ; name). overridevirtual . Writes the current window into GIF file. ; Returns 1 in case of success, 0 otherwise. ; Reimplemented from TVirtualX. ◆ WritePixmap(). void TGWin32VirtualXProxy::WritePixmap ; (; Int_t ; wid, . UInt_t ; w, . UInt_t ; h, . char * ; pxname . ). overridevirtual . Writes the pixmap ""wid"" in the bitmap file ""pxname"". ; Parameters. [in]widthe pixmap address ; [in]w,hthe width and height of the pixmap. ; [in]pxnamethe file name . Reimplemented from TVirtualX. ◆ XorRegion(). void TGWin32VirtualXProxy::XorRegion ; (; Region_t ; rega, . Region_t ; regb, . Region_t ; result . ). overridevirtual . Calculates the difference between the union and intersection of two regions. ; Parameters. [in]rega,regbspecify the two regions with which you want to perform the computation ; [in]resultreturns the result of the computation . Reimplemented from TVirtualX. Friends And Related Symbol Documentation. ◆ TGWin32. friend class TGWin32. friend . Definition at line 32 of file TGWin32VirtualXProxy.h. Member Data Documentation. ◆ fgRealObject. TVirtualX * TGWin32VirtualXProxy::fgRealObject = 0. staticprotected . Definition at line 35 of file TGWin32VirtualXProxy.h. graf2d/win32gdk/inc/TGWin32VirtualXProxy.h; graf2d/win32gdk/src/TGWin32VirtualXProxy.cxx. TGWin32VirtualXProxy. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGWin32VirtualXProxy.html:125816,Guid,Guide,125816,doc/master/classTGWin32VirtualXProxy.html,https://root.cern,https://root.cern/doc/master/classTGWin32VirtualXProxy.html,1,['Guid'],['Guide']
Usability,"; (; Option_t * ; option = """"). overridevirtual . Performs redo action. Move cursor position forward in history stack. ; Reimplemented from TQCommand.; Definition at line 1053 of file TQCommand.cxx. ◆ SetLimit(). void TQUndoManager::SetLimit ; (; UInt_t ; limit). virtual . Returns a maximum number of commands which could be located in stack. ; Definition at line 1137 of file TQCommand.cxx. ◆ SetLogging(). void TQUndoManager::SetLogging ; (; Bool_t ; on = kTRUE). virtual . Start logging. ; Delete all previous log records Note: logging is not implemented yet ; Definition at line 938 of file TQCommand.cxx. ◆ Streamer(). void TQUndoManager::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TQCommand. ◆ StreamerNVirtual(). void TQUndoManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 133 of file TQCommand.h. ◆ Undo(). void TQUndoManager::Undo ; (; Option_t * ; option = """"). overridevirtual . Performs undo action. Move cursor position backward in history stack. ; Reimplemented from TQCommand.; Definition at line 1021 of file TQCommand.cxx. Member Data Documentation. ◆ fCurrent. TQCommand* TQUndoManager::fCurrent. protected . Definition at line 107 of file TQCommand.h. ◆ fCursor. TObjLink* TQUndoManager::fCursor. protected . Definition at line 106 of file TQCommand.h. ◆ fLimit. UInt_t TQUndoManager::fLimit. protected . Definition at line 108 of file TQCommand.h. ◆ fLogBook. TList* TQUndoManager::fLogBook. protected . Definition at line 109 of file TQCommand.h. ◆ fLogging. Bool_t TQUndoManager::fLogging. protected . Definition at line 110 of file TQCommand.h. Libraries for TQUndoManager:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TQCommand.h; core/base/src/TQCommand.cxx. TQUndoManager. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:33008,undo,undo,33008,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,2,"['Guid', 'undo']","['Guide', 'undo']"
Usability,"; (; const TElementActionT< Element > & ; action). Apply action to each element of the vector. ; Definition at line 1322 of file TVectorT.cxx. ◆ Apply() [2/2]. template<class Element > . TVectorT< Element > & TVectorT< Element >::Apply ; (; const TElementPosActionT< Element > & ; action). Apply action to each element of the vector. ; In action the location of the current element is known. ; Definition at line 1335 of file TVectorT.cxx. ◆ Class() [1/2]. template<class Element > . static TClass * TVectorT< Element >::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class() [2/2]. TClass * TVectorT< double >::Class ; (; ). ◆ Class_Name(). template<class Element > . static const char * TVectorT< Element >::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). template<class Element > . static constexpr Version_t TVectorT< Element >::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 183 of file TVectorT.h. ◆ Clear(). template<class Element > . void TVectorT< Element >::Clear ; (; Option_t * ; = """"). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 172 of file TVectorT.h. ◆ DeclFileName(). template<class Element > . static const char * TVectorT< Element >::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 183 of file TVectorT.h. ◆ Delete_m(). template<class Element > . void TVectorT< Element >::Delete_m ; (; Int_t ; size, . Element *& ; m . ). protected . Delete data pointer m, if it was assigned on the heap. ; Definition at line 53 of file TVectorT.cxx. ◆ Draw(). template<class Element > . void TVectorT< Element >::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this vector The histogram is named ""TVectorT"" by default and no title. ; Reimplemented from TObject.; Definition at line 1353 of file TVectorT.cxx. ◆ GetLwb(). template<class Element > . Int_t TVectorT< Element >::GetLwb ; (; ); const. i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVectorT.html:24088,Clear,Clear,24088,doc/master/classTVectorT.html,https://root.cern,https://root.cern/doc/master/classTVectorT.html,1,['Clear'],['Clear']
Usability,"; (; const TMVA::Event *& ; evt, . std::vector< Double_t > & ; parameters, . std::vector< Float_t > & ; values . ). private . calculate the values for multiclass ; Definition at line 581 of file MethodFDA.cxx. ◆ CheckSetup(). void TMVA::MethodFDA::CheckSetup ; (; ). inlinevirtual . check may be overridden by derived class (sometimes, eg, fitters are used which can only be implemented during training phase) ; Reimplemented from TMVA::MethodBase.; Definition at line 101 of file MethodFDA.h. ◆ Class(). static TClass * TMVA::MethodFDA::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::MethodFDA::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodFDA::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 154 of file MethodFDA.h. ◆ ClearAll(). void TMVA::MethodFDA::ClearAll ; (; void ; ). private . delete and clear all class members ; Definition at line 346 of file MethodFDA.cxx. ◆ CreateFormula(). void TMVA::MethodFDA::CreateFormula ; (; ). private . translate formula string into TFormula, and parameter string into par ranges ; Definition at line 183 of file MethodFDA.cxx. ◆ CreateRanking(). const Ranking * TMVA::MethodFDA::CreateRanking ; (; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 96 of file MethodFDA.h. ◆ DeclareOptions(). void TMVA::MethodFDA::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; format of function string: ""x0*(0)+((1)/x1)**(2)...""; where ""[i]"" are the parameters, and ""xi"" the input variables; format of parameter string: ""(-1.2,3.4);(-2.3,4.55);...""; where the numbers in ""(a,b)"" correspond to the a=min, b=max parameter ranges; each parameter defined in the function string must have a corresponding range ; Implements TMVA::MethodBase.; Definition at line 163 of file MethodFDA.cxx. ◆ DeclFileName(). static cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html:32584,clear,clear,32584,doc/master/classTMVA_1_1MethodFDA.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodFDA.html,1,['clear'],['clear']
Usability,"; (; const TNtupleD & ; ). privatedelete . ◆ ReadStream(). Long64_t TNtupleD::ReadStream ; (; std::istream & ; inputStream, . const char * ; branchDescriptor = """", . char ; delimiter = ' ' . ). overridevirtual . Read from filename as many columns as variables in the ntuple the function returns the number of rows found in the file The second argument ""branchDescriptor"" is currently not used. ; Lines in the input file starting with ""#"" are ignored. ; Reimplemented from TTree.; Definition at line 200 of file TNtupleD.cxx. ◆ ResetBranchAddress(). void TNtupleD::ResetBranchAddress ; (; TBranch * ; branch). overridevirtual . Reset the branch addresses to the internal fArgs array. ; Use this method when the addresses were changed via calls to SetBranchAddress(). ; Reimplemented from TTree.; Definition at line 114 of file TNtupleD.cxx. ◆ ResetBranchAddresses(). void TNtupleD::ResetBranchAddresses ; (; ). overridevirtual . Reset the branch addresses to the internal fArgs array. ; Use this method when the addresses were changed via calls to SetBranchAddress(). ; Reimplemented from TTree.; Definition at line 128 of file TNtupleD.cxx. ◆ Streamer(). void TNtupleD::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TNamed.; Definition at line 229 of file TNtupleD.cxx. ◆ StreamerNVirtual(). void TNtupleD::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 58 of file TNtupleD.h. Member Data Documentation. ◆ fArgs. Double_t* TNtupleD::fArgs. protected . ! [fNvar] Array of variables ; Definition at line 32 of file TNtupleD.h. ◆ fNvar. Int_t TNtupleD::fNvar. protected . Number of columns. ; Definition at line 31 of file TNtupleD.h. Libraries for TNtupleD:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TNtupleD.h; tree/tree/src/TNtupleD.cxx. TNtupleD. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNtupleD.html:54572,Guid,Guide,54572,doc/master/classTNtupleD.html,https://root.cern,https://root.cern/doc/master/classTNtupleD.html,1,['Guid'],['Guide']
Usability,"; ). inline . Definition at line 36 of file TNamed.h. ◆ TNamed() [2/4]. TNamed::TNamed ; (; const char * ; name, . const char * ; title . ). inline . Definition at line 37 of file TNamed.h. ◆ TNamed() [3/4]. TNamed::TNamed ; (; const TString & ; name, . const TString & ; title . ). inline . Definition at line 38 of file TNamed.h. ◆ TNamed() [4/4]. TNamed::TNamed ; (; const TNamed & ; named). TNamed copy ctor. ; Definition at line 35 of file TNamed.cxx. ◆ ~TNamed(). TNamed::~TNamed ; (; ). virtual . TNamed destructor. ; Definition at line 42 of file TNamed.cxx. Member Function Documentation. ◆ Class(). static TClass * TNamed::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TNamed::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TNamed::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file TNamed.h. ◆ Clear(). void TNamed::Clear ; (; Option_t * ; option = """"). overridevirtual . Set name and title to empty strings (""""). ; Reimplemented from TObject.; Reimplemented in TStreamerInfo, TVirtualStreamerInfo, TProcessID, TTask, TPrincipal, and TVirtualFitter.; Definition at line 64 of file TNamed.cxx. ◆ Clone(). TObject * TNamed::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an object using the Streamer facility. ; If newname is specified, this will be the name of the new object. ; Reimplemented from TObject.; Reimplemented in TStreamerInfo, and TTreeIndex.; Definition at line 74 of file TNamed.cxx. ◆ Compare(). Int_t TNamed::Compare ; (; const TObject * ; obj); const. overridevirtual . Compare two TNamed objects. ; Returns 0 when equal, -1 when this is smaller and +1 when bigger (like strcmp). ; Reimplemented from TObject.; Reimplemented in TProofPerfAnalysis::TWrkInfo, and TStructNodeProperty.; Definition at line 85 of file TNamed.cxx. ◆ Copy(). void TNamed::Copy ; (; TObject & ; named",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNamed.html:16052,Clear,Clear,16052,doc/master/classTNamed.html,https://root.cern,https://root.cern/doc/master/classTNamed.html,2,['Clear'],['Clear']
Usability,; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 105 of file TProofBenchTypes.h. ◆ GetName(). const char * TPBHandleDSType::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 103 of file TProofBenchTypes.h. ◆ GetType(). EHandleDSType TPBHandleDSType::GetType ; (; ); const. inline . Definition at line 98 of file TProofBenchTypes.h. ◆ IsA(). TClass * TPBHandleDSType::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 105 of file TProofBenchTypes.h. ◆ IsCheckCache(). Bool_t TPBHandleDSType::IsCheckCache ; (; ); const. inline . Definition at line 100 of file TProofBenchTypes.h. ◆ IsCopyFiles(). Bool_t TPBHandleDSType::IsCopyFiles ; (; ); const. inline . Definition at line 102 of file TProofBenchTypes.h. ◆ IsReleaseCache(). Bool_t TPBHandleDSType::IsReleaseCache ; (; ); const. inline . Definition at line 99 of file TProofBenchTypes.h. ◆ IsRemoveFiles(). Bool_t TPBHandleDSType::IsRemoveFiles ; (; ); const. inline . Definition at line 101 of file TProofBenchTypes.h. ◆ Streamer(). void TPBHandleDSType::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TPBHandleDSType::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 105 of file TProofBenchTypes.h. Member Data Documentation. ◆ fName. TString TPBHandleDSType::fName. private . Definition at line 93 of file TProofBenchTypes.h. ◆ fType. EHandleDSType TPBHandleDSType::fType. private . Definition at line 92 of file TProofBenchTypes.h. proof/proofbench/inc/TProofBenchTypes.h. TPBHandleDSType. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPBHandleDSType.html:13347,Guid,Guide,13347,doc/master/classTPBHandleDSType.html,https://root.cern,https://root.cern/doc/master/classTPBHandleDSType.html,1,['Guid'],['Guide']
Usability,"; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::MethodTMlpANN::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 121 of file MethodTMlpANN.h. ◆ CreateMLPOptions(). void TMVA::MethodTMlpANN::CreateMLPOptions ; (; TString ; layerSpec). private . translates options from option string into TMlpANN language ; Definition at line 140 of file MethodTMlpANN.cxx. ◆ CreateRanking(). const Ranking * TMVA::MethodTMlpANN::CreateRanking ; (; ). inlinevirtual . Implements TMVA::MethodBase.; Definition at line 84 of file MethodTMlpANN.h. ◆ DeclareOptions(). void TMVA::MethodTMlpANN::DeclareOptions ; (; ). privatevirtual . define the options (their key words) that can be set in the option string ; know options:. NCycles <integer> Number of training cycles (too many cycles could overtrain the network); HiddenLayers <string> Layout of the hidden layers (nodes per layer); specifications for each hidden layer are separated by comma; for each layer the number of nodes can be either absolut (simply a number) or relative to the number of input nodes to the neural net (N); there is always a single node in the output layer. example: a net with 6 input nodes and ""Hiddenlayers=N-1,N-2"" has 6,5,4,1 nodes in the layers 1,2,3,4, respectively . Implements TMVA::MethodBase.; Definition at line 195 of file MethodTMlpANN.cxx. ◆ DeclFileName(). static const char * TMVA::MethodTMlpANN::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 121 of file MethodTMlpANN.h. ◆ GetHelpMessage(). void TMVA::MethodTMlpANN::GetHelpMessage ; (; ); const. protectedvirtual . get help message text ; typical length of text line: ""|--------------------------------------------------------------|"" ; Implements TMVA::IMethod.; Definition at line 504 of file MethodTMlpANN.cxx. ◆ GetMvaValue(). Double_t TMVA::MethodTMlpANN::GetMvaValue ; (; Double_t * ; err = nullptr, . Double_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html:31288,simpl,simply,31288,doc/master/classTMVA_1_1MethodTMlpANN.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1MethodTMlpANN.html,1,['simpl'],['simply']
Usability,"; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGLViewerEditor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGLViewerEditor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 164 of file TGLViewerEditor.h. ◆ ConnectSignals2Slots(). void TGLViewerEditor::ConnectSignals2Slots ; (; ). private . Connect signals to slots. ; Definition at line 110 of file TGLViewerEditor.cxx. ◆ CreateClippingTab(). void TGLViewerEditor::CreateClippingTab ; (; ). private . Create GUI controls - clip type (none/plane/box) and plane/box properties. ; Definition at line 579 of file TGLViewerEditor.cxx. ◆ CreateExtrasTab(). void TGLViewerEditor::CreateExtrasTab ; (; ). private . Create Extra Tab controls - camera rotator and stereo. ; Definition at line 591 of file TGLViewerEditor.cxx. ◆ CreateGuidesTab(). void TGLViewerEditor::CreateGuidesTab ; (; ). private . Create ""Guides"" tab. ; Definition at line 514 of file TGLViewerEditor.cxx. ◆ CreateStyleTab(). void TGLViewerEditor::CreateStyleTab ; (; ). private . Creates ""Style"" tab. ; Definition at line 456 of file TGLViewerEditor.cxx. ◆ DeclFileName(). static const char * TGLViewerEditor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 164 of file TGLViewerEditor.h. ◆ DetachFromPad(). void TGLViewerEditor::DetachFromPad ; (; ). inline . Definition at line 159 of file TGLViewerEditor.h. ◆ DoAnnotation(). void TGLViewerEditor::DoAnnotation ; (; ). Create annotation via picking. ; Definition at line 397 of file TGLViewerEditor.cxx. ◆ DoASavImageGUIBaseName(). void TGLViewerEditor::DoASavImageGUIBaseName ; (; const char * ; t). Update base-name. ; Definition at line 830 of file TGLViewerEditor.cxx. ◆ DoASavImageGUIOutMode(). void TGLViewerEditor::DoASavImageGUIOutMode ; (; Int_t ; m). Update output mode. ; Definition at line 839 of file TGLView",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewerEditor.html:38411,Guid,Guides,38411,doc/master/classTGLViewerEditor.html,https://root.cern,https://root.cern/doc/master/classTGLViewerEditor.html,1,['Guid'],['Guides']
Usability,"; ). virtual . destructor ; Definition at line 112 of file Timer.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::Timer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::Timer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::Timer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 99 of file Timer.h. ◆ DeclFileName(). static const char * TMVA::Timer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 99 of file Timer.h. ◆ DrawProgressBar() [1/3]. void TMVA::Timer::DrawProgressBar ; (; Int_t ; icounts, . const TString & ; comment = """" . ). draws progress bar in color or B&W caution: ; Definition at line 202 of file Timer.cxx. ◆ DrawProgressBar() [2/3]. void TMVA::Timer::DrawProgressBar ; (; TString ; theString). draws a string in the progress bar ; Definition at line 181 of file Timer.cxx. ◆ DrawProgressBar() [3/3]. void TMVA::Timer::DrawProgressBar ; (; void ; ). draws the progressbar ; Definition at line 166 of file Timer.cxx. ◆ ElapsedSeconds(). Double_t TMVA::Timer::ElapsedSeconds ; (; void ; ). computes elapsed tim in seconds ; Definition at line 137 of file Timer.cxx. ◆ GetElapsedTime(). TString TMVA::Timer::GetElapsedTime ; (; Bool_t ; Scientific = kTRUE). returns pretty string with elapsed time ; Definition at line 146 of file Timer.cxx. ◆ GetLeftTime(). TString TMVA::Timer::GetLeftTime ; (; Int_t ; icounts). returns pretty string with time left ; Definition at line 154 of file Timer.cxx. ◆ Init(). void TMVA::Timer::Init ; (; Int_t ; ncounts). Definition at line 117 of file Timer.cxx. ◆ IsA(). virtual TClass * TMVA::Timer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 99 of file Timer.h. ◆ Log(). MsgLogger & TMVA::Timer::Log ; (; ); const. inli",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:15321,progress bar,progress bar,15321,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['progress bar'],['progress bar']
Usability,"; ). ◆ begin() [2/4]. RooLinkedListIter RooAbsCollection::begin ; (; ). ◆ begin() [3/4]. RooFIter RooAbsCollection::begin ; (; ). ◆ begin() [4/4]. const_iterator RooAbsCollection::begin ; (; ); const. inline . Definition at line 276 of file RooAbsCollection.h. ◆ canBeAdded(). virtual bool RooAbsCollection::canBeAdded ; (; const RooAbsArg & ; arg, . bool ; silent . ); const. protectedpure virtual . Determine whether it's possible to add a given RooAbsArg to the collection or not. ; Implemented in RooArgSet, and RooArgList. ◆ Class(). static TClass * RooAbsCollection::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsCollection::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsCollection::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 455 of file RooAbsCollection.h. ◆ clear(). void RooAbsCollection::clear ; (; ). inline . Clear contents. If the collection is owning, it will also delete the contents. ; Definition at line 305 of file RooAbsCollection.h. ◆ clearStructureTags(). void RooAbsCollection::clearStructureTags ; (; ). inlineprotected . Definition at line 415 of file RooAbsCollection.h. ◆ clone(). virtual TObject * RooAbsCollection::clone ; (; const char * ; newname); const. pure virtual . Implemented in RooArgList, and RooArgSet. ◆ Clone(). TObject * RooAbsCollection::Clone ; (; const char * ; newname = nullptr); const. inlineoverridevirtual . Make a clone of an object using the Streamer facility. ; If the object derives from TNamed, this function is called by TNamed::Clone. TNamed::Clone uses the optional argument to set a new name to the newly created object.; If the object class has a DirectoryAutoAdd function, it will be called at the end of the function with the parameter gDirectory. This usually means that the object will be appended to the current ROOT directory. ; Reimplemented from TObject.; Def",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsCollection.html:36771,Clear,Clear,36771,doc/v632/classRooAbsCollection.html,https://root.cern,https://root.cern/doc/v632/classRooAbsCollection.html,1,['Clear'],['Clear']
Usability,; ); const. inline . Definition at line 57 of file TGraphDelaunay2D.h. ◆ GetXNmax(). Double_t TGraphDelaunay2D::GetXNmax ; (; ); const. inline . Definition at line 59 of file TGraphDelaunay2D.h. ◆ GetXNmin(). Double_t TGraphDelaunay2D::GetXNmin ; (; ); const. inline . Definition at line 58 of file TGraphDelaunay2D.h. ◆ GetYNmax(). Double_t TGraphDelaunay2D::GetYNmax ; (; ); const. inline . Definition at line 61 of file TGraphDelaunay2D.h. ◆ GetYNmin(). Double_t TGraphDelaunay2D::GetYNmin ; (; ); const. inline . Definition at line 60 of file TGraphDelaunay2D.h. ◆ IsA(). TClass * TGraphDelaunay2D::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TGraphDelaunay2D.h. ◆ operator=(). TGraphDelaunay2D & TGraphDelaunay2D::operator= ; (; const TGraphDelaunay2D & ; ). privatedelete . ◆ SetMarginBinsContent(). void TGraphDelaunay2D::SetMarginBinsContent ; (; Double_t ; z = 0.). inline . Definition at line 63 of file TGraphDelaunay2D.h. ◆ Streamer(). void TGraphDelaunay2D::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGraphDelaunay2D::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TGraphDelaunay2D.h. Member Data Documentation. ◆ fDelaunay. ROOT::Math::Delaunay2D TGraphDelaunay2D::fDelaunay. protected . ! Delaunay interpolator class ; Definition at line 44 of file TGraphDelaunay2D.h. ◆ fGraph2D. TGraph2D* TGraphDelaunay2D::fGraph2D. protected . ! 2D graph containing the user data ; Definition at line 43 of file TGraphDelaunay2D.h. Libraries for TGraphDelaunay2D:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TGraphDelaunay2D.h; hist/hist/src/TGraphDelaunay2D.cxx. TGraphDelaunay2D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay2D.html:17380,Guid,Guide,17380,doc/master/classTGraphDelaunay2D.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html,1,['Guid'],['Guide']
Usability,"; , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TCONE.h>. Inheritance diagram for TCONE:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TCONE() [1/3]. TCONE::TCONE ; (; ). CONE shape default constructor. ; Definition at line 38 of file TCONE.cxx. ◆ TCONE() [2/3]. TCONE::TCONE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; dz, . Float_t ; rmin1, . Float_t ; rmax1, . Float_t ; rmin2, . Float_t ; rmax2 . ). CONE shape normal constructor. ; Definition at line 47 of file TCONE.cxx. ◆ TCONE() [3/3]. TCONE::TCONE ; (; const char * ; name, . const char * ; title, . const char * ; material, . Float_t ; dz, . Float_t ; rmax1, . Float_t ; rmax2 = 0 . ). CONE shape ""simplified"" constructor. ; Definition at line 59 of file TCONE.cxx. ◆ ~TCONE(). TCONE::~TCONE ; (; ). override . CONE shape default destructor. ; Definition at line 69 of file TCONE.cxx. Member Function Documentation. ◆ Class(). static TClass * TCONE::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCONE::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCONE::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 45 of file TCONE.h. ◆ DeclFileName(). static const char * TCONE::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 45 of file TCONE.h. ◆ GetRmax2(). Float_t TCONE::GetRmax2 ; (; ); const. inline . Definition at line 43 of file TCONE.h. ◆ GetRmin2(). Float_t TCONE::GetRmin2 ; (; ); const. inline . Definition at line 42 of file TCONE.h. ◆ IsA(). TClass * TCONE::IsA ; (; ); const. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCONE.html:19921,simpl,simplified,19921,doc/master/classTCONE.html,https://root.cern,https://root.cern/doc/master/classTCONE.html,1,['simpl'],['simplified']
Usability,"; , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from TGLLockable; enum  ELock { kUnlocked; , kDrawLock; , kSelectLock; , kModifyLock; };  . Public Member Functions;  TGLViewer (TVirtualPad *pad);  ;  TGLViewer (TVirtualPad *pad, Int_t x, Int_t y, Int_t width, Int_t height);  ;  ~TGLViewer () override;  Destroy viewer object. ;  ; virtual void Activated ();  ; void AddCompositeOp (UInt_t) override;  ; Int_t AddObject (const TBuffer3D &, Bool_t *=nullptr) override;  ; Int_t AddObject (UInt_t, const TBuffer3D &, Bool_t *=nullptr) override;  ; void ApplySelection ();  Process result from last selection (in fSelRec) and extract a new current selection from it. ;  ; void AutoFade (Float_t fade, Float_t time=1, Int_t steps=10);  Animate fading from current value to fade over given time (sec) and number of steps. ;  ; void BeginScene () override;  ; Bool_t BuildingScene () const override;  ; Bool_t CanLoopOnPrimitives () const override;  ; void ClearCurrentOvlElm ();  Reset current overlay-element to zero, eventually notifying the old one that the mouse has left. ;  ; virtual void Clicked (TObject *obj);  Emit Clicked signal. ;  ; virtual void Clicked (TObject *obj, UInt_t button, UInt_t state);  Emit Clicked signal with button id and modifier state. ;  ; void CloseComposite () override;  ; TGLColorSet & ColorSet ();  ; virtual void CreateGLWidget ();  ; TGLCamera & CurrentCamera () const;  ; virtual void DestroyGLWidget ();  ; Int_t DistancetoPrimitive (Int_t px, Int_t py) override;  Calculate and return pixel distance to nearest viewer object from window location px, py This is provided for use when embedding GL viewer into pad. ;  ; void DoDraw (Bool_t swap_buffers=kTRUE);  Draw out the viewer. ;  ; void DoDrawMono (Bool_t swap_buffers);  Draw out in monoscopic mode. ;  ; void DoDrawStereo (Bool_t swap_buffers);  Draw out in stereoscopic mode. ;  ; Bool_t DoOverlaySelect (Int_t x, Int_t y);  Perform GL selection, pi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:3483,Clear,ClearCurrentOvlElm,3483,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['Clear'],['ClearCurrentOvlElm']
Usability,"; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TPaveLabel Member List. This is the complete list of members for TPaveLabel, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; CheckedHash()TObjectinline; Class()TPaveLabelstatic; Class_Name()TPaveLabelstatic; Class_Version()TPaveLabelinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *="""")TObjectinlinevirtual; Clone(const char *newname="""") constTObjectvirtual; Compare(const TObject *obj) constTObjectvirtual; ConvertNDCtoPad()TPavevirtual; Copy(TObject &pavelabel) const overrideTPaveLabelvirtual; TPave::TAttLine::Copy(TAttLine &attline) constTAttLine; TPave::TAttFill::Copy(TAttFill &attfill) constTAttFill; TAttText::Copy(TAttText &atttext) constTAttText; DeclFileName()TPaveLabelinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2)TAttLine; DistancetoPrimitive(Int_t px, Int_t py) overrideTPavevirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTPaveLabelvirtual; DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2)TBoxvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; DrawPave(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Int_t bordersize=4, Option_t *option=""br"")TPavevirtual; DrawPaveLabel(Double_t x1, Double_t y1, Double_t x2, Double_t y2, const char *label, Option_t *option="""")TPaveLabelvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveLabel-members.html:547,Clear,Clear,547,doc/master/classTPaveLabel-members.html,https://root.cern,https://root.cern/doc/master/classTPaveLabel-members.html,1,['Clear'],['Clear']
Usability,"; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:1027,simpl,simpler,1027,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['simpl'],['simpler']
Usability,"; .  . Loading...; Searching...; No Matches. TEfficiency Member List. This is the complete list of members for TEfficiency, including all inherited members. AbstractMethod(const char *method) constTObject; Add(const TEfficiency &rEff)TEfficiencyinline; AddToTObjectTable(TObject *)TObjectprivatestatic; AgrestiCoull(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)TEfficiencystatic; AppendPad(Option_t *option="""")TObjectvirtual; Bayesian(Double_t total, Double_t passed, Double_t level, Double_t alpha, Double_t beta, Bool_t bUpper, Bool_t bShortest=false)TEfficiencystatic; BetaCentralInterval(Double_t level, Double_t alpha, Double_t beta, Bool_t bUpper)TEfficiencystatic; BetaMean(Double_t alpha, Double_t beta)TEfficiencystatic; BetaMode(Double_t alpha, Double_t beta)TEfficiencystatic; BetaShortestInterval(Double_t level, Double_t alpha, Double_t beta, Double_t &lower, Double_t &upper)TEfficiencystatic; Browse(TBrowser *) overrideTEfficiencyinlinevirtual; Build(const char *name, const char *title)TEfficiencyprotected; CheckBinning(const TH1 &pass, const TH1 &total)TEfficiencystatic; CheckConsistency(const TH1 &pass, const TH1 &total, Option_t *opt="""")TEfficiencystatic; CheckedHash()TObjectinline; CheckEntries(const TH1 &pass, const TH1 &total, Option_t *opt="""")TEfficiencystatic; CheckWeights(const TH1 &pass, const TH1 &total)TEfficiencystatic; Class()TEfficiencystatic; Class_Name()TEfficiencystatic; Class_Version()TEfficiencyinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; ClopperPearson(Double_t total, Double_t passed, Double_t level, Bool_t bUpper)TEfficiencystatic; Combine(Double_t &up, Double_t &low, Int_t n, const Int_t *pass, const Int_t *total, Double_t alpha, Double_t beta, Double_t level=0.683, const Double_t *w=nullptr, Option_t *opt="""")TEfficiencystatic; Combine(TCollection *pList, Option_t *opt="""", Int_t n=0, const Double_t *w=nullptr)TEffi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEfficiency-members.html:1562,Clear,Clear,1562,doc/master/classTEfficiency-members.html,https://root.cern,https://root.cern/doc/master/classTEfficiency-members.html,1,['Clear'],['Clear']
Usability,"; .  . Loading...; Searching...; No Matches. runplugin.C File ReferenceTutorials » Geometry tutorials. Detailed Description; Creates and runs a simple iterator plugin connected to TGeoPainter iterator. ; It demonstrates the possibility to dynamically change the color of drawn volumes according some arbitrary criteria WITHOUT changing the color of the same volume drawn on branches that do not match the criteria.; To run:; root[0] .L iterplugin.cxx+; root[1] .x runplugin.C; root[2] select(2,kMagenta);; root[3] select(3,kBlue); ...; kMagenta@ kMagentaDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; iterpluginDefinition iterplugin.cxx:10; ; #include ""iterplugin.cxx""; ; iterplugin *plugin = nullptr;; ; void runplugin(); {; ; ; TString tutdir = gROOT->GetTutorialDir();; gROOT->ProcessLine("".x "" + tutdir + ""/geom/rootgeom.C"");; plugin = new iterplugin();; gGeoManager->GetGeomPainter()->SetIteratorPlugin(plugin);; }; ; void select(Int_t replica=1, Int_t color=kGreen); {; // Change current color. Replica range: 1-4; plugin->Select(replica, color);; gGeoManager->GetGeomPainter()->ModifiedPad();; }; Int_tint Int_tDefinition RtypesCore.h:45; kGreen@ kGreenDefinition Rtypes.h:66; gGeoManagerR__EXTERN TGeoManager * gGeoManagerDefinition TGeoManager.h:608; gROOT#define gROOTDefinition TROOT.h:406; TGeoManager::GetGeomPainterTVirtualGeoPainter * GetGeomPainter()Make a default painter if none present. Returns pointer to it.Definition TGeoManager.cxx:2916; TStringBasic string class.Definition TString.h:139; TVirtualGeoPainter::ModifiedPadvirtual void ModifiedPad(Bool_t update=kFALSE) const =0; TVirtualGeoPainter::SetIteratorPluginvirtual void SetIteratorPlugin(TGeoIteratorPlugin *plugin)=0; iterplugin::Selectvoid Select(Int_t replica, Int_t color)Definition iterplugin.cxx:16; iterplugin.cxx; AuthorAndrei Gheata ; Definition in file runplugin.C. tutorialsgeomrunplugin.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/runplugin_8C.html:2007,Guid,Guide,2007,doc/master/runplugin_8C.html,https://root.cern,https://root.cern/doc/master/runplugin_8C.html,1,['Guid'],['Guide']
Usability,"; // Origin; Int_t fColor;; ; ClassDefOverride(Shape,0);; };; ; ClassImp(Shape);; ; Shape::Shape(Int_t color, Double_t x, Double_t y, Double_t z) :; fX(x), fY(y), fZ(z), fColor(color); {}; ; class Sphere : public Shape; {; public:; Sphere(Int_t color, Double_t x, Double_t y, Double_t z, Double_t radius);; ~Sphere() override {};; ; TBuffer3D & GetBuffer3D(UInt_t reqSections) override;; ; private:; Double_t fRadius;; ; ClassDefOverride(Sphere,0);; };; ; ClassImp(Sphere);; ; Sphere::Sphere(Int_t color, Double_t x, Double_t y, Double_t z, Double_t radius) :; Shape(color,x,y,z),; fRadius(radius); {}; ; TBuffer3D & Sphere::GetBuffer3D(UInt_t reqSections); {; static TBuffer3DSphere buffer;; ; // Complete kCore section - this could be moved to Shape base class; if (reqSections & TBuffer3D::kCore) {; buffer.ClearSectionsValid();; buffer.fID = this;; buffer.fColor = fColor; // Color index - see gROOT->GetColor(); buffer.fTransparency = 0; // Transparency 0 (opaque) - 100 (fully transparent); ; // Complete local/master transformation matrix - simple x/y/z; // translation. Easiest way to set identity then override the; // translation components; buffer.SetLocalMasterIdentity();; buffer.fLocalMaster[12] = fX;; buffer.fLocalMaster[13] = fY;; buffer.fLocalMaster[14] = fZ;; buffer.fLocalFrame = kTRUE; // Local frame; ; buffer.fReflection = kFALSE;; buffer.SetSectionsValid(TBuffer3D::kCore);; }; // Complete kBoundingBox section; if (reqSections & TBuffer3D::kBoundingBox) {; Double_t origin[3] = { 0.0, 0.0, 0.0 };; Double_t halfLength[3] = { fRadius, fRadius, fRadius };; buffer.SetAABoundingBox(origin, halfLength);; buffer.SetSectionsValid(TBuffer3D::kBoundingBox);; }; // Complete kShapeSpecific section; if (reqSections & TBuffer3D::kShapeSpecific) {; buffer.fRadiusOuter = fRadius;; buffer.fRadiusInner = 0.0;; buffer.fThetaMin = 0.0;; buffer.fThetaMax = 180.0;; buffer.fPhiMin = 0.0;; buffer.fPhiMax = 360.0;; buffer.SetSectionsValid(TBuffer3D::kShapeSpecific);; }; // We don't implement",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DLocal_8C.html:2724,simpl,simple,2724,doc/master/viewer3DLocal_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DLocal_8C.html,1,['simpl'],['simple']
Usability,"; // old formula from G. Flucke; 3018 // formula which works also for weighted histogram (see http://root-forum.cern.ch/viewtopic.php?t=3753 ); 3019 fSumw2.fArray[i] = TMath::Abs( ( (1. - 2.* b1 / b2) * e1sq + b1sq * e2sq / b2sq ) / b2sq );; 3020 } else {; 3021 //in case b1=b2 error is zero; 3022 //use TGraphAsymmErrors::BayesDivide for getting the asymmetric error not equal to zero; 3023 fSumw2.fArray[i] = 0;; 3024 }; 3025 } else {; 3026 fSumw2.fArray[i] = c1sq * c2sq * (e1sq * b2sq + e2sq * b1sq) / (c2sq * c2sq * b2sq * b2sq);; 3027 }; 3028 }; 3029 }; 3030 ResetStats();; 3031 if (binomial); 3032 // in case of binomial division use denominator for number of entries; 3033 SetEntries ( h2->GetEntries() );; 3034 ; 3035 return kTRUE;; 3036}; 3037 ; 3038////////////////////////////////////////////////////////////////////////////////; 3039/// Draw this histogram with options.; 3040///; 3041/// Histograms are drawn via the THistPainter class. Each histogram has; 3042/// a pointer to its own painter (to be usable in a multithreaded program).; 3043/// The same histogram can be drawn with different options in different pads.; 3044/// When a histogram drawn in a pad is deleted, the histogram is; 3045/// automatically removed from the pad or pads where it was drawn.; 3046/// If a histogram is drawn in a pad, then filled again, the new status; 3047/// of the histogram will be automatically shown in the pad next time; 3048/// the pad is updated. One does not need to redraw the histogram.; 3049/// To draw the current version of a histogram in a pad, one can use; 3050/// `h->DrawCopy();`; 3051/// This makes a clone of the histogram. Once the clone is drawn, the original; 3052/// histogram may be modified or deleted without affecting the aspect of the; 3053/// clone.; 3054/// By default, TH1::Draw clears the current pad.; 3055///; 3056/// One can use TH1::SetMaximum and TH1::SetMinimum to force a particular; 3057/// value for the maximum or the minimum scale on the plot.; 3058///; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH1_8cxx_source.html:120756,usab,usable,120756,doc/master/TH1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH1_8cxx_source.html,1,['usab'],['usable']
Usability,"; 1 : Portrait mode with a small margin at the bottom of the page.; 2 : Landscape mode with a small margin at the bottom of the page.; 4 : Portrait mode with a large margin at the bottom of the page.; 5 : Landscape mode with a large margin at the bottom of the page.; The large margin is useful for some PostScript printers (very often; for the colour printers) as they need more space to grip the paper; for mechanical reasons. Note that some PostScript colour printers; can also use the so called special A4 format permitting the full; usage of the A4 area; in this case larger margins are not necessary; and Type=1 or 2 can be used.; 3 : Encapsulated PostScript. This Type permits the generation of files; which can be included in other documents, for example in LaTeX; files.; . Making several pictures in the same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw(). {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }. Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture. {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = new TCanva",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPostScript.html:3725,Clear,Clear,3725,root/html528/TPostScript.html,https://root.cern,https://root.cern/root/html528/TPostScript.html,3,['Clear'],['Clear']
Usability,"; 1 : Portrait mode with a small margin at the bottom of the page.; 2 : Landscape mode with a small margin at the bottom of the page.; 4 : Portrait mode with a large margin at the bottom of the page.; 5 : Landscape mode with a large margin at the bottom of the page.; The large margin is useful for some PostScript printers (very often; for the colour printers) as they need more space to grip the paper; for mechanical reasons. Note that some PostScript colour printers; can also use the so called special A4 format permitting the full; usage of the A4 area; in this case larger margins are not necessary; and Type=1 or 2 can be used.; 3 : Encapsulated PostScript. This Type permits the generation of files; which can be included in other documents, for example in LaTeX; files.; . Making several pictures in the same Postscript file: case 1; The following macro is an example illustrating how to open a Postscript; file and draw several pictures. The generation of a new Postscript page; is automatic when TCanvas::Clear is called by; object->Draw().; ; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);; // select postscript output type; // type = 111 portrait ps; // type = 112 landscape ps; // type = 113 eps; Int_t type = 111;; // create a postscript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page; // draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a macro; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; ; Making several pictures in the same Postscript file: case 2; This example shows 2 pages. The canvas is divided.; TPostScript::NewPage must be called before starting a new; picture.object->Draw does not clear the canvas in this case; because we clear only the pads and not the main canvas.; Note that c1->Update must be called at the end of the first; picture.; ; {; TFile *f1 = new TFile(""hsimple.root"");; TCanvas *c1 = ne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TPostScript.html:3754,Clear,Clear,3754,root/html534/TPostScript.html,https://root.cern,https://root.cern/root/html534/TPostScript.html,3,['Clear'],['Clear']
Usability,"; 1155 if (gPad->GetCanvas()) gPad->GetCanvas()->Highlighted(gPad, theGraph, gHighlightPoint, -1);; 1156 }; 1157 }; 1158 if (gHighlightGraph == theGraph) distanceOld = distance;; 1159}; 1160 ; 1161 ; 1162////////////////////////////////////////////////////////////////////////////////; 1163/// Paint highlight point as TMarker object (open circle); 1164 ; 1165void TGraphPainter::PaintHighlightPoint(TGraph *theGraph, Option_t * /*option*/); 1166{; 1167 // call from PaintGraphSimple; 1168 ; 1169 if ((!theGraph->IsHighlight()) || (gHighlightGraph != theGraph)) return;; 1170 ; 1171 Double_t hx, hy;; 1172 if (theGraph->GetPoint(gHighlightPoint, hx, hy) == -1) {; 1173 // special case, e.g. after interactive remove last point; 1174 if (gHighlightMarker) gHighlightMarker.reset(nullptr);; 1175 return;; 1176 }; 1177 // testing specific possibility (after zoom, draw with ""same"", log, etc.); 1178 Double_t uxmin = gPad->GetUxmin();; 1179 Double_t uxmax = gPad->GetUxmax();; 1180 Double_t uymin = gPad->GetUymin();; 1181 Double_t uymax = gPad->GetUymax();; 1182 if (gPad->GetLogx()) {; 1183 uxmin = TMath::Power(10.0, uxmin);; 1184 uxmax = TMath::Power(10.0, uxmax);; 1185 }; 1186 if (gPad->GetLogy()) {; 1187 uymin = TMath::Power(10.0, uymin);; 1188 uymax = TMath::Power(10.0, uymax);; 1189 }; 1190 if ((hx < uxmin) || (hx > uxmax)) return;; 1191 if ((hy < uymin) || (hy > uymax)) return;; 1192 ; 1193 if (!gHighlightMarker) {; 1194 gHighlightMarker = std::make_unique<TMarker>(hx, hy, 24);; 1195 gHighlightMarker->SetBit(kCannotPick);; 1196 }; 1197 gHighlightMarker->SetX(hx);; 1198 gHighlightMarker->SetY(hy);; 1199 gHighlightMarker->SetMarkerSize(theGraph->GetMarkerSize()*2.0);; 1200 if (gHighlightMarker->GetMarkerSize() < 1.0) gHighlightMarker->SetMarkerSize(1.0); // always visible; 1201 gHighlightMarker->SetMarkerColor(theGraph->GetMarkerColor());; 1202 gHighlightMarker->Paint();; 1203 // Info(""PaintHighlightPoint"", ""graph: %p\tpoint: %d"",; 1204 // (void *)gHighlightGraph, gHighlightPoint);",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:43328,ux,uxmin,43328,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,3,['ux'],"['uxmax', 'uxmin']"
Usability,"; 1168 ; 1169void TGenCollectionProxy::Resize(UInt_t n, Bool_t force); 1170{; 1171 if ( fEnv && fEnv->fObject ) {; 1172 if ( force && fPointers ) {; 1173 size_t i, nold = *(size_t*)fSize.invoke(fEnv);; 1174 if ( n != nold ) {; 1175 for (i=n; i<nold; ++i); 1176 DeleteItem(true, *(void**)TGenCollectionProxy::At(i));; 1177 }; 1178 }; 1179 MESSAGE(3, ""Resize(n)"" );; 1180 fEnv->fSize = n;; 1181 fResize(fEnv->fObject,fEnv->fSize);; 1182 return;; 1183 }; 1184 Fatal(""TGenCollectionProxy"",""Resize> Logic error - no proxy object set."");; 1185}; 1186 ; 1187////////////////////////////////////////////////////////////////////////////////; 1188/// Allocate the needed space.; 1189/// For associative collection, this returns a TStaging object that; 1190/// need to be deleted manually __or__ returned by calling Commit(TStaging*); 1191 ; 1192void* TGenCollectionProxy::Allocate(UInt_t n, Bool_t /* forceDelete */ ); 1193{; 1194 if ( fEnv && fEnv->fObject ) {; 1195 switch ( fSTL_type ) {; 1196 case ROOT::kSTLset:; 1197 case ROOT::kSTLunorderedset:; 1198 case ROOT::kSTLmultiset:; 1199 case ROOT::kSTLunorderedmultiset:; 1200 case ROOT::kSTLmap:; 1201 case ROOT::kSTLunorderedmap:; 1202 case ROOT::kSTLmultimap:; 1203 case ROOT::kSTLunorderedmultimap:{; 1204 if ( (fProperties & kNeedDelete) ); 1205 Clear(""force"");; 1206 else; 1207 fClear.invoke(fEnv);; 1208 // Commit no longer use the environment and thus no longer decrease; 1209 // the count. Consequently we no longer should increase it here.; 1210 // ++fEnv->fRefCount;; 1211 fEnv->fSize = n;; 1212 ; 1213 TStaging *s;; 1214 if (fStaged.empty()) {; 1215 s = new TStaging(n,fValDiff);; 1216 } else {; 1217 s = fStaged.back();; 1218 fStaged.pop_back();; 1219 s->Resize(n);; 1220 }; 1221 fConstruct(s->GetContent(),s->GetSize());; 1222 ; 1223 s->SetTarget(fEnv->fObject);; 1224 ; 1225 fEnv->fTemp = s->GetContent();; 1226 fEnv->fUseTemp = kTRUE;; 1227 fEnv->fStart = fEnv->fTemp;; 1228 ; 1229 return s;; 1230 }; 1231 case ROOT::kSTLvector:; 1232 case RO",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:39111,Clear,Clear,39111,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 133 if (Use[""PDEFoam""]) // PDE-Foam approach; 134 factory->BookMethod( dataloader, TMVA::Types::kPDEFoam, ""PDEFoam"", ""!H:!V:TailCut=0.001:VolFrac=0.0666:nActiveCells=500:nSampl=2000:nBin=5:Nmin=100:Kernel=None:Compress=T"" );; 135 ; 136 ; 137 if (Use[""DL_CPU""]) {; 138 TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; 139 TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; 140 ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; 141 TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; 142 ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; 143 nnOptions.Append("":"");; 144 nnOptions.Append(layoutString);; 145 nnOptions.Append("":"");; 146 nnOptions.Append(trainingStrategyString);; 147 factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_CPU"", nnOptions);; 148 }; 149 if (Use[""DL_GPU""]) {; 150 TString layoutString(""Layout=TANH|100,TANH|50,TANH|10,LINEAR"");; 151 TString trainingStrategyString(""TrainingStrategy=Optimizer=ADAM,LearningRate=1e-3,""; 152 ""TestRepetitions=1,ConvergenceSteps=10,BatchSize=100,MaxEpochs=20"");; 153 TString nnOptions(""!H:V:ErrorStrategy=CROSSENTROPY:VarTransform=N:""; 154 ""WeightInitialization=XAVIERUNIFORM:Architecture=GPU"");; 155 nnOptions.Append("":"");; 156 nnOptions.Append(layoutString);; 157 nnOptions.Append("":"");; 158 nnOptions.Append(trainingStrategyString);; 159 factory->BookMethod(dataloader, TMVA::Types::kDL, ""DL_GPU"", nnOptions);; 160 }; 161 ; 162 ; 163 // Train MVAs using the set of training events; 164 factory->TrainAllMethods();; 165 ; 166 // Evaluate all MVAs using the set of test events; 167 factory->TestAllMethods();; 168 ; 169 // Evaluate and compare performance of all configured MVAs; 170 factory->EvaluateAllMethods();; 171 ; 172 // --------------------------------------------------------------; 173 ; 174 // Save the output; 175 outputFile->Close();; 176 ; 177 std::cout << ""==> Wrote root file: "" << outputFile->GetName() << std::endl;; 178 std::cout",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAMulticlass_8C_source.html:6186,Learn,LearningRate,6186,doc/master/TMVAMulticlass_8C_source.html,https://root.cern,https://root.cern/doc/master/TMVAMulticlass_8C_source.html,1,['Learn'],['LearningRate']
Usability,"; 1388In case the significance of the median is greater that the size of the box, the; 1389box will have an unnatural shape. Usually it means the chart has not enough data,; 1390or that representing this uncertainty is not useful; 1391 ; 1392##### The Mean; 1393The mean can be drawn as a dashed line or as a circle or not drawn at all.; 1394The mean is the arithmetic average of the values in the distribution.; 1395It is calculated using GetMean(). Because histograms are; 1396binned data, the mean value can differ from a calculation on the raw-data.; 1397If the distribution is large enough and gaussian shaped the mean will be; 1398exactly the median.; 1399 ; 1400##### The Whiskers; 1401The whiskers represent the part of the distribution not covered by the box.; 1402The upper 25% and the lower 25% of the distribution are located within the whiskers.; 1403Two representations are available.; 1404 ; 1405 - A simple one (using w=1) defining the lower whisker from the lowest data value; 1406 to the bottom of the box, and the upper whisker from the top of the box to the; 1407 highest data value. In this representation the whisker-lines are dashed.; 1408 - A more complex one having a further restriction. The whiskers are still connected; 1409 to the box but their length cannot exceed \f$ 1.5\times iqr \f$. So it might; 1410 be that the outermost part of the underlying distribution will not be covered; 1411 by the whiskers. Usually these missing parts will be represented by the outliers; 1412 (see points). Of course the upper and the lower whisker may differ in length.; 1413 In this representation the whiskers are drawn as solid lines.; 1414 ; 1415\since **ROOT version 6.11/01**; 1416 ; 1417Using the static function TCandle::SetWhiskerRange(double) the whisker definition w=1; 1418will be overwritten. E.g. using a whisker-range of 0.95 and w=1 will redefine the area of; 1419the lower whisker to the upper whisker in order to cover 95% of the distribution inside; 1420that candle. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:58890,simpl,simple,58890,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['simpl'],['simple']
Usability,"; 1398 // start measuring; 1399 std::chrono::time_point<std::chrono::system_clock> tstart, tend;; 1400 tstart = std::chrono::system_clock::now();; 1401 ; 1402 // function building string with optimizer parameters values for logging; 1403 auto optimParametersString = [&]() {; 1404 TString optimParameters;; 1405 for ( auto & element : settings.optimizerParams) {; 1406 TString key = element.first;; 1407 key.ReplaceAll(settings.optimizerName + ""_"", """"); // strip optimizerName_; 1408 double value = element.second;; 1409 if (!optimParameters.IsNull()); 1410 optimParameters += "","";; 1411 else; 1412 optimParameters += "" ("";; 1413 optimParameters += TString::Format(""%s=%g"", key.Data(), value);; 1414 }; 1415 if (!optimParameters.IsNull()); 1416 optimParameters += "")"";; 1417 return optimParameters;; 1418 };; 1419 ; 1420 Log() << ""Training phase "" << trainingPhase << "" of "" << this->GetTrainingSettings().size() << "": ""; 1421 << "" Optimizer "" << settings.optimizerName; 1422 << optimParametersString(); 1423 << "" Learning rate = "" << settings.learningRate << "" regularization "" << (char)settings.regularization; 1424 << "" minimum error = "" << minValError << Endl;; 1425 if (!fInteractive) {; 1426 std::string separator(62, '-');; 1427 Log() << separator << Endl;; 1428 Log() << std::setw(10) << ""Epoch""; 1429 << "" | "" << std::setw(12) << ""Train Err."" << std::setw(12) << ""Val. Err."" << std::setw(12); 1430 << ""t(s)/epoch"" << std::setw(12) << ""t(s)/Loss"" << std::setw(12) << ""nEvents/s"" << std::setw(12); 1431 << ""Conv. Steps"" << Endl;; 1432 Log() << separator << Endl;; 1433 }; 1434 ; 1435 // set up generator for shuffling the batches; 1436 // if seed is zero we have always a different order in the batches; 1437 size_t shuffleSeed = 0;; 1438 if (fRandomSeed != 0) shuffleSeed = fRandomSeed + trainingPhase;; 1439 RandomGenerator<TRandom3> rng(shuffleSeed);; 1440 ; 1441 // print weights before; 1442 if (fBuildNet && debug) {; 1443 Log() << ""Initial Deep Net Weights "" << Endl;; 1444 auto & weigh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:56450,Learn,Learning,56450,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['Learn'],['Learning']
Usability,"; 1454 historg = fHistogram;; 1455 }; 1456 ; 1457 if (rwxmin == rwxmax) rwxmax += 1.;; 1458 if (rwymin == rwymax) rwymax += 1.;; 1459 dx = 0.1 * (rwxmax - rwxmin);; 1460 dy = 0.1 * (rwymax - rwymin);; 1461 uxmin = rwxmin - dx;; 1462 uxmax = rwxmax + dx;; 1463 minimum = rwymin - dy;; 1464 maximum = rwymax + dy;; 1465 ; 1466 if (fMinimum != -1111) minimum = fMinimum;; 1467 if (fMaximum != -1111) maximum = fMaximum;; 1468 ; 1469 // the graph is created with at least as many channels as there are points; 1470 // to permit zooming on the full range; 1471 if (uxmin < 0 && rwxmin >= 0) {; 1472 if (gPad && gPad->GetLogx()) uxmin = 0.9 * rwxmin;; 1473 else uxmin = 0;; 1474 }; 1475 if (uxmax > 0 && rwxmax <= 0) {; 1476 if (gPad && gPad->GetLogx()) uxmax = 1.1 * rwxmax;; 1477 else uxmax = 0;; 1478 }; 1479 ; 1480 if (minimum < 0 && rwymin >= 0) minimum = 0.9 * rwymin;; 1481 ; 1482 if (minimum <= 0 && gPad && gPad->GetLogy()) minimum = 0.001 * maximum;; 1483 if (uxmin <= 0 && gPad && gPad->GetLogx()) {; 1484 if (uxmax > 1000) uxmin = 1;; 1485 else uxmin = 0.001 * uxmax;; 1486 }; 1487 ; 1488 rwxmin = uxmin;; 1489 rwxmax = uxmax;; 1490 Int_t npt = 100;; 1491 if (fNpoints > npt) npt = fNpoints;; 1492 const char *gname = GetName();; 1493 if (!gname[0]) gname = ""Graph"";; 1494 // do not add the histogram to gDirectory; 1495 // use local TDirectory::TContect that will set temporarly gDirectory to a nullptr and; 1496 // will avoid that histogram is added in the global directory; 1497 {; 1498 TDirectory::TContext ctx(nullptr);; 1499 ((TGraph*)this)->fHistogram = new TH1F(gname, GetTitle(), npt, rwxmin, rwxmax);; 1500 }; 1501 if (!fHistogram) return nullptr;; 1502 fHistogram->SetMinimum(minimum);; 1503 fHistogram->SetBit(TH1::kNoStats);; 1504 fHistogram->SetMaximum(maximum);; 1505 fHistogram->GetYaxis()->SetLimits(minimum, maximum);; 1506 // Restore the axis attributes if needed; 1507 if (historg) {; 1508 fHistogram->GetXaxis()->SetTitle(historg->GetXaxis()->GetTitle());; 1509 fHistogram-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph_8cxx_source.html:53413,ux,uxmin,53413,doc/master/TGraph_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin']"
Usability,"; 16 auto *tt = new TText(0.1,0.1,""Text angle is 45 degrees"");; 17 tt->SetTextAlign(11); tt->SetTextSize(0.1);; 18 tt->SetTextAngle(45);; 19 tt->Draw();; 20 auto *t1 = new TLatex(0.3,0.18,""45^{o}"");; 21 t1->Draw();; 22}; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TArcCreate an Arc.Definition TArc.h:26; TArc::DrawArcvirtual TArc * DrawArc(Double_t x1, Double_t y1, Double_t radius, Double_t phimin=0, Double_t phimax=360, Option_t *option="""")Draw this arc with new coordinates.Definition TArc.cxx:79; TAttFill::SetFillStylevirtual void SetFillStyle(Style_t fstyle)Set the fill area style.Definition TAttFill.h:39; TAttLine::SetLineStylevirtual void SetLineStyle(Style_t lstyle)Set the line style.Definition TAttLine.h:42; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttMarker::SetMarkerColorvirtual void SetMarkerColor(Color_t mcolor=1)Set the marker color.Definition TAttMarker.h:38; TAttMarker::SetMarkerStylevirtual void SetMarkerStyle(Style_t mstyle=1)Set the marker style.Definition TAttMarker.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TMarkerManages Markers.Definition TMarker.h:22; TMarker::DrawMarkervirtual TMarker * DrawMarker(Double_t x, Double_t y)Draw this marker with new coordinates.Definition TMarker.cxx:208; TTextBase class for several text objects.Definition TText.h:22; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; aTArc aDefinition textangle.C:12; ttauto * ttDefinition textangle.C:16; t1auto * t1Definition textangle.C:20. corebasedocmacrostextangle.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:02 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/textangle_8C_source.html:1840,simpl,simple,1840,doc/master/textangle_8C_source.html,https://root.cern,https://root.cern/doc/master/textangle_8C_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"; 1865 vxmax = TMath::Min(vxmax,wmax);; 1866 ; 1867 // Draw the histogram with a fill area; 1868 ; 1869 gxwork.resize(2*npoints+10);; 1870 gywork.resize(2*npoints+10);; 1871 gxworkl.resize(2*npoints+10);; 1872 gyworkl.resize(2*npoints+10);; 1873 ; 1874 if (optionFill && !optionCurve) {; 1875 fillarea = kTRUE;; 1876 if (!optionRot) {; 1877 gxwork[0] = vxmin;; 1878 if (!optionOne) gywork[0] = TMath::Min(TMath::Max((Double_t)0,gPad->GetUymin()); 1879 ,gPad->GetUymax());; 1880 else gywork[0] = gPad->GetUymin();; 1881 npt = 2;; 1882 for (j=first; j<=last;j++) {; 1883 if (!optionBins) {; 1884 gxwork[npt-1] = gxwork[npt-2];; 1885 gxwork[npt] = wmin+((j-first+1)*delta);; 1886 if (gxwork[npt] < gxwork[0]) gxwork[npt] = gxwork[0];; 1887 ; 1888 } else {; 1889 xj1 = x[j]; xj = x[j-1];; 1890 if (xj1 < xj) {; 1891 if (j != last) Error(where, ""X must be in increasing order"");; 1892 else Error(where, ""X must have N+1 values with option N"");; 1893 goto do_cleanup;; 1894 }; 1895 gxwork[npt-1] = x[j-1]; gxwork[npt] = x[j];; 1896 }; 1897 gywork[npt-1] = y[j-1];; 1898 gywork[npt] = y[j-1];; 1899 if (gywork[npt] < vymin) {gywork[npt] = vymin; gywork[npt-1] = vymin;}; 1900 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 1901 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 1902 if (j == last) {; 1903 gxwork[npt-1] = gxwork[npt-2];; 1904 gywork[npt-1] = gywork[0];; 1905 //make sure that the fill area does not overwrite the frame; 1906 //take into account the frame line width; 1907 if (gxwork[0 ] < vxmin) {gxwork[0 ] = vxmin; gxwork[1 ] = vxmin;}; 1908 if (gywork[0] < vymin) {gywork[0] = vymin; gywork[npt-1] = vymin;}; 1909 ; 1910 //transform to log ?; 1911 ComputeLogs(npt, optionZ);; 1912 gPad->PaintFillArea(npt,gxworkl.data(),gyworkl.data());; 1913 if (drawborder) {; 1914 if (!fillarea) gyworkl[0] = ylast;; 1915 gPad->PaintPolyLine(npt-1,gxworkl.data(),gyworkl.data(),noClip);; 1916 }; 1917 continue;; 1918 }; 1919 } //endfor (j=first;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:70089,ux,uxmin-rounding,70089,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin-rounding']"
Usability,"; 191 break;; 192 ; 193 case 6: // optional ':'; 194 state = (c == ':') ? 3 : 4;; 195 break;; 196 ; 197 case 7:; 198 state = (c == ')') ? 6 : 5;; 199 break;; 200 ; 201 }; 202 switch (state) {; 203 case 2:; 204 name.Append(c);; 205 break;; 206 case 4:; 207 value.Append(c);; 208 break;; 209 case 5:; 210 type.Append(c);; 211 break;; 212 }; 213 if (state != 4); 214 Char(c);; 215 }; 216 // In case EOF is reach before '\n'; 217 if (name.Length() > 0) {; 218 KeyValue(name, value, type);; 219 name.Clear();; 220 value.Clear();; 221 type.Clear();; 222 }; 223}; 224 ; 225/** \class TReadEnvParser; 226*/; 227 ; 228class TReadEnvParser : public TEnvParser {; 229 ; 230private:; 231 EEnvLevel fLevel;; 232 ; 233public:; 234 TReadEnvParser(TEnv *e, FILE *f, EEnvLevel l) : TEnvParser(e, f), fLevel(l) {}; 235 void KeyValue(const TString &name, const TString &value, const TString &type) override; 236 { fEnv->SetValue(name, value, fLevel, type); }; 237};; 238 ; 239/** \class TWriteEnvParser; 240*/; 241 ; 242class TWriteEnvParser : public TEnvParser {; 243 ; 244private:; 245 FILE *fOfp;; 246 ; 247public:; 248 TWriteEnvParser(TEnv *e, FILE *f, FILE *of) : TEnvParser(e, f), fOfp(of) {}; 249 void KeyValue(const TString &name, const TString &value, const TString &type) override;; 250 void Char(Int_t c) override { fputc(c, fOfp); }; 251};; 252 ; 253////////////////////////////////////////////////////////////////////////////////; 254/// Write resources out to a new file.; 255 ; 256void TWriteEnvParser::KeyValue(const TString &name, const TString &value,; 257 const TString &); 258{; 259 TEnvRec *er = fEnv->Lookup(name);; 260 if (er && er->fModified) {; 261 er->fModified = kFALSE;; 262 fprintf(fOfp, ""%s"", er->fValue.Data());; 263 } else; 264 fprintf(fOfp, ""%s"", value.Data());; 265}; 266 ; 267 ; 268/** \class TEnvRec; 269*/; 270 ; 271////////////////////////////////////////////////////////////////////////////////; 272/// Ctor of a single resource.; 273 ; 274TEnvRec::TEnvRec(const char *n, const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TEnv_8cxx_source.html:5810,Clear,Clear,5810,doc/master/TEnv_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TEnv_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 197 void MakeCopyNodes(const TGeoVolume *other);; 198 TGeoVolume *MakeReflectedVolume(const char *newname = """") const;; 199 Bool_t OptimizeVoxels(); // *MENU*; 200 void RandomPoints(Int_t npoints = 1000000, Option_t *option = """"); // *MENU*; 201 void RandomRays(Int_t nrays = 10000, Double_t startx = 0, Double_t starty = 0, Double_t startz = 0,; 202 const char *target_vol = nullptr, Bool_t check_norm = kFALSE); // *MENU*; 203 void Raytrace(Bool_t flag = kTRUE); // *TOGGLE* *GETTER=IsRaytracing; 204 void RegisterYourself(Option_t *option = """");; 205 void RemoveNode(TGeoNode *node);; 206 TGeoNode *ReplaceNode(TGeoNode *nodeorig, TGeoShape *newshape = nullptr, TGeoMatrix *newpos = nullptr,; 207 TGeoMedium *newmed = nullptr);; 208 void ResetTransparency(Char_t transparency = -1); // *MENU*; 209 void SaveAs(const char *filename = """", Option_t *option = """") const override; // *MENU*; 210 void SavePrimitive(std::ostream &out, Option_t *option = """") override;; 211 void SelectVolume(Bool_t clear = kFALSE);; 212 void SetActivity(Bool_t flag = kTRUE) { TGeoAtt::SetActivity(flag); }; 213 void SetActiveDaughters(Bool_t flag = kTRUE) { TGeoAtt::SetActiveDaughters(flag); }; 214 void SetAsTopVolume(); // *TOGGLE* *GETTER=IsTopVolume; 215 void SetAdded() { TObject::SetBit(kVolumeAdded); }; 216 void SetReplicated() { TObject::SetBit(kVolumeReplicated); }; 217 void SetCurrentPoint(Double_t x, Double_t y, Double_t z);; 218 void SetCylVoxels(Bool_t flag = kTRUE); 219 {; 220 TObject::SetBit(kVoxelsCyl, flag);; 221 TObject::SetBit(kVoxelsXYZ, !flag);; 222 }; 223 void SetNodes(TObjArray *nodes); 224 {; 225 fNodes = nodes;; 226 TObject::SetBit(kVolumeImportNodes);; 227 }; 228 void SetOverlappingCandidate(Bool_t flag) { TObject::SetBit(kVolumeOC, flag); }; 229 void SetShape(const TGeoShape *shape);; 230 void SetTransparency(Char_t transparency = 0); // *MENU*; 231 void SetField(TObject *field) { fField = field; }; 232 void SetOption(const char *option);; 233 void SetAttVisibility(Bool_t vis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8h_source.html:10151,clear,clear,10151,doc/master/TGeoVolume_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8h_source.html,1,['clear'],['clear']
Usability,"; 2029 p1 = itemname.length();; 2030 } else {; 2031 path.emplace_back(itemname.substr(p1, p - p1));; 2032 p1 = p + 1;; 2033 }; 2034 }; 2035 ; 2036 return SetPhysNodeVisibility(path, on);; 2037}; 2038 ; 2039/////////////////////////////////////////////////////////////////////////////////; 2040/// Check if there special settings for specified physical node; 2041/// returns -1 if nothing is found; 2042 ; 2043int RGeomDescription::IsPhysNodeVisible(const std::vector<int> &stack); 2044{; 2045 for (auto &item : fVisibility) {; 2046 unsigned sz = item.stack.size();; 2047 if (stack.size() < sz); 2048 continue;; 2049 bool match = true;; 2050 for (unsigned n = 0; n < sz; ++n); 2051 if (stack[n] != item.stack[n]) {; 2052 match = false;; 2053 break;; 2054 }; 2055 ; 2056 if (match); 2057 return item.visible ? 1 : 0;; 2058 }; 2059 return -1;; 2060}; 2061 ; 2062/////////////////////////////////////////////////////////////////////////////////; 2063/// Reset custom visibility of physical node by path; 2064 ; 2065bool RGeomDescription::ClearPhysNodeVisibility(const std::vector<std::string> &path); 2066{; 2067 TLockGuard lock(fMutex);; 2068 ; 2069 RGeomBrowserIter giter(*this);; 2070 ; 2071 if (!giter.Navigate(path)); 2072 return false;; 2073 ; 2074 auto stack = MakeStackByIds(giter.CurrentIds());; 2075 ; 2076 for (auto iter = fVisibility.begin(); iter != fVisibility.end(); iter++); 2077 if (compare_stacks(iter->stack, stack) == 0) {; 2078 fVisibility.erase(iter);; 2079 ClearDrawData();; 2080 return true;; 2081 }; 2082 ; 2083 return false;; 2084}; 2085 ; 2086/////////////////////////////////////////////////////////////////////////////////; 2087/// Reset all custom visibility settings; 2088 ; 2089bool RGeomDescription::ClearAllPhysVisibility(); 2090{; 2091 TLockGuard lock(fMutex);; 2092 ; 2093 if (fVisibility.empty()); 2094 return false;; 2095 ; 2096 fVisibility.clear();; 2097 ClearDrawData();; 2098 return true;; 2099}; 2100 ; 2101///////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:62362,Clear,ClearPhysNodeVisibility,62362,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,2,['Clear'],['ClearPhysNodeVisibility']
Usability,"; 2062 ; 2063 };; 2064 ; 2065 struct VectorPtrLooper {; 2066 ; 2067 template <typename T>; 2068 static INLINE_TEMPLATE_ARGS Int_t ReadBasicType(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2069 {; 2070 const Int_t offset = config->fOffset;; 2071 ; 2072 for(; iter != end; iter = (char*)iter + sizeof(void*) ) {; 2073 T *x = (T*)( ((char*) (*(void**)iter) ) + offset );; 2074 buf >> *x;; 2075 }; 2076 return 0;; 2077 }; 2078 ; 2079 template <typename From, typename To>; 2080 struct ConvertBasicType {; 2081 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2082 {; 2083 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2084 From temp;; 2085 const Int_t offset = config->fOffset;; 2086 for(; iter != end; iter = (char*)iter + sizeof(void*) ) {; 2087 buf >> temp;; 2088 To *x = (To*)( ((char*) (*(void**)iter) ) + offset );; 2089 *x = (To)temp;; 2090 }; 2091 return 0;; 2092 }; 2093 };; 2094 ; 2095 template <typename To>; 2096 struct ConvertBasicType<BitsMarker,To> {; 2097 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2098 {; 2099 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2100 UInt_t temp;; 2101 const Int_t offset = config->fOffset;; 2102 for(; iter != end; iter = (char*)iter + sizeof(void*) ) {; 2103 buf >> temp;; 2104 ; 2105 if ((temp & kIsReferenced) != 0) {; 2106 HandleReferencedTObject(buf,*(void**)iter,config);; 2107 }; 2108 ; 2109 To *x = (To*)( ((char*) (*(void**)iter) ) + offset );; 2110 *x = (To)temp;; 2111 }; 2112 return 0;; 2113 }; 2114 };; 2115 ; 2116 template <typename From, typename To>; 2117 struct ConvertBasicType<WithFactorMarker<From>,To> {; 2118 static INLINE_TEMPLATE_ARGS Int_t Action(TBuffer &buf, void *iter, const void *end, const TConfiguration *config); 2119 {; 2120 // Simple conversion from a 'From' on disk to a 'To' in memory.; 2121 TConfWithFactor *conf = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:86173,Simpl,Simple,86173,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['Simple']
Usability,"; 210 ; 211std::string ROOT::Experimental::RCanvas::CreateJSON(); 212{; 213 if (!fPainter); 214 fPainter = Internal::RVirtualCanvasPainter::Create(*this);; 215 ; 216 if (!fPainter); 217 return """";; 218 ; 219 return fPainter->ProduceJSON();; 220}; 221 ; 222//////////////////////////////////////////////////////////////////////////; 223/// Remove canvas from global canvas lists, will be destroyed once last shared_ptr is disappear; 224 ; 225void ROOT::Experimental::RCanvas::Remove(); 226{; 227 std::lock_guard<std::mutex> grd(GetHeldCanvasesMutex());; 228 auto &held = GetHeldCanvases();; 229 auto indx = held.size();; 230 while (indx-- > 0) {; 231 if (held[indx].get() == this); 232 held.erase(held.begin() + indx);; 233 }; 234}; 235 ; 236//////////////////////////////////////////////////////////////////////////////////////////////; 237/// Set handle which will be cleared when connection is closed; 238 ; 239void ROOT::Experimental::RCanvas::ClearOnClose(const std::shared_ptr<void> &handle); 240{; 241 if (fPainter); 242 fPainter->SetClearOnClose(handle);; 243}; 244 ; 245//////////////////////////////////////////////////////////////////////////; 246/// Run canvas functionality for the given time (in seconds); 247/// Used to process canvas-related actions in the appropriate thread context.; 248/// Must be regularly called when canvas created and used in extra thread.; 249/// Time parameter specifies minimal execution time in seconds - if default value 0 is used,; 250/// just all pending actions will be performed.; 251/// When canvas is not yet displayed - just performs sleep for given time interval.; 252///; 253/// Example of usage:; 254///; 255/// ~~~ {.cpp}; 256/// void draw_canvas(bool &run_loop, std::make_shared<RH1D> hist); 257/// {; 258/// auto canvas = RCanvas::Create(""Canvas title"");; 259/// canvas->Draw(hist)->SetLineColor(RColor::kBlue);; 260/// canvas->Show();; 261/// while (run_loop) {; 262/// pHist->Fill(1);; 263/// canvas->Modified();; 264/// canvas->Update();; 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8cxx_source.html:7735,clear,cleared,7735,doc/master/RCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8cxx_source.html,2,"['Clear', 'clear']","['ClearOnClose', 'cleared']"
Usability,"; 2102 }; 2103 if (npt >= fgMaxPointsPerLine) {; 2104 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2105 Smooth(theGraph, fgMaxPointsPerLine,gxworkl.data(),gyworkl.data(),drawtype);; 2106 gxwork[0] = gxwork[npt-1];; 2107 gywork[0] = gywork[npt-1];; 2108 npt = 1;; 2109 }; 2110 } //endfor (i=first; i<=last;i++); 2111 if (npt > 1) {; 2112 ComputeLogs(npt, optionZ);; 2113 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2114 }; 2115 } else {; 2116 drawtype = drawtype+10;; 2117 npt = 0;; 2118 for (i=first; i<=last;i++) {; 2119 npt++;; 2120 if (!optionBins) {; 2121 gywork[npt-1] = wmin+(i-first)*delta+0.5*delta;; 2122 } else {; 2123 yi1 = y[i]; yi = y[i-1];; 2124 if (yi1 < yi) {; 2125 if (i != last) Error(where, ""Y must be in increasing order"");; 2126 else Error(where, ""Y must have N+1 values with option N"");; 2127 return;; 2128 }; 2129 gywork[npt-1] = y[i-1] + 0.5*(y[i]-y[i-1]);; 2130 }; 2131 gxwork[npt-1] = x[i-1];; 2132 ComputeLogs(npt, optionZ);; 2133 if ((gxworkl[npt] < uxmin) || (gxworkl[npt] > uxmax)) {; 2134 if (npt > 2) {; 2135 ComputeLogs(npt, optionZ);; 2136 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2137 }; 2138 gxwork[0] = gxwork[npt-1];; 2139 gywork[0] = gywork[npt-1];; 2140 npt = 1;; 2141 continue;; 2142 }; 2143 if (npt >= fgMaxPointsPerLine) {; 2144 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2145 Smooth(theGraph, fgMaxPointsPerLine,gxworkl.data(),gyworkl.data(),drawtype);; 2146 gxwork[0] = gxwork[npt-1];; 2147 gywork[0] = gywork[npt-1];; 2148 npt = 1;; 2149 }; 2150 } //endfor (i=first; i<=last;i++); 2151 if (npt > 1) {; 2152 ComputeLogs(npt, optionZ);; 2153 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2154 }; 2155 }; 2156 }; 2157 ; 2158 // Draw the histogram with a simple line; 2159 ; 2160 if (optionLine) {; 2161 gPad->SetBit(TGraph::kClipFrame);; 2162 wminstep = wmin + 0.5*delta;; 2163 Axis_t ax1,ax2,ay1,ay2;; 2164 gPad->GetRangeAxis(ax1,ay1,ax2,ay2);; 2165 ; 2166 if (!optionRot) {; 2167 npt = 0;; 2168 for (",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:77964,ux,uxmin,77964,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"; 2381 ComputeLogs(npt, optionZ);; 2382 gPad->PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2383 }; 2384 } else {; 2385 wminstep = wmin + 0.5*delta;; 2386 for (i=first; i<=last;i++) {; 2387 if (!optionBins) ym = wminstep+(i-first)*delta+0.5*delta;; 2388 else ym = y[i-1] + 0.5*(y[i]-y[i-1]);; 2389 xm = x[i-1];; 2390 if (optionMark != 10) {; 2391 if (xm<rwxmax && xm > rwxmin) {; 2392 npt++;; 2393 gxwork[npt-1] = xm;; 2394 gywork[npt-1] = ym;; 2395 }; 2396 } else {; 2397 if (xm<rwxmax && xm >= rwxmin) {; 2398 npt++;; 2399 gxwork[npt-1] = xm;; 2400 gywork[npt-1] = ym;; 2401 }; 2402 }; 2403 if (npt >= fgMaxPointsPerLine) {; 2404 ComputeLogs(npt, optionZ);; 2405 gPad->PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2406 npt = 0;; 2407 }; 2408 }; 2409 if (npt > 0) {; 2410 ComputeLogs(npt, optionZ);; 2411 gPad->PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2412 }; 2413 }; 2414 }; 2415 ; 2416 gPad->ResetBit(TGraph::kClipFrame);; 2417 ; 2418do_cleanup:; 2419 gxwork.clear();; 2420 gywork.clear();; 2421 gxworkl.clear();; 2422 gyworkl.clear();; 2423}; 2424 ; 2425 ; 2426////////////////////////////////////////////////////////////////////////////////; 2427/// [Paint this TGraphAsymmErrors with its current attributes.](\ref GrP3); 2428 ; 2429void TGraphPainter::PaintGraphAsymmErrors(TGraph *theGraph, Option_t *option); 2430{; 2431 ; 2432 std::vector<Double_t> xline, yline;; 2433 Int_t if1 = 0;; 2434 Int_t if2 = 0;; 2435 Double_t xb[4], yb[4];; 2436 ; 2437 const Int_t kBASEMARKER=8;; 2438 static Float_t cxx[30] = {1.0,1.0,0.5,0.5,1.0,1.0,0.5,0.6,1.0,0.5,0.5,1.0,0.5,0.6,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 2439 static Float_t cyy[30] = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 2440 Int_t theNpoints = theGraph->GetN();; 2441 Double_t *theX = theGraph->GetX();; 2442 Double_t *theY = theGraph->GetY();; 2443 Double_t *theEXlow = theGraph->GetEXlow(); if (!the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:86277,clear,clear,86277,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,"; 2610}; 2611 ; 2612////////////////////////////////////////////////////////////////////////////////; 2613/// If opt contains 'built', reset this StreamerInfo as if Build or BuildOld; 2614/// was never called on it (useful to force their re-running).; 2615 ; 2616void TStreamerInfo::Clear(Option_t *option); 2617{; 2618 TString opt = option;; 2619 opt.ToLower();; 2620 ; 2621 if (opt.Contains(""build"")) {; 2622 R__LOCKGUARD(gInterpreterMutex);; 2623 ; 2624 delete [] fComp; fComp = 0;; 2625 delete [] fCompFull; fCompFull= 0;; 2626 delete [] fCompOpt; fCompOpt = 0;; 2627 ; 2628 fNdata = 0;; 2629 fNfulldata = 0;; 2630 fNslots= 0;; 2631 fSize = 0;; 2632 ; 2633 ResetIsCompiled();; 2634 ResetBit(kBuildOldUsed);; 2635 ; 2636 TIter next(fElements);; 2637 while (auto element = (TStreamerElement*)next()) {; 2638 element->SetOffset(0);; 2639 }; 2640 ; 2641 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 2642 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 2643 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 2644 if (fReadText) fReadText->fActions.clear();; 2645 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 2646 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 2647 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 2648 if (fWriteText) fWriteText->fActions.clear();; 2649 }; 2650}; 2651 ; 2652namespace {; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:105483,clear,clear,105483,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['clear'],['clear']
Usability,"; 2653 // TMemberInfo; 2654 // Local helper class to be able to compare data member represented by; 2655 // 2 distinct TStreamerInfos; 2656 class TMemberInfo {; 2657 public:; 2658 TClass *fParent;; 2659 TString fName;; 2660 TString fClassName;; 2661 TString fComment;; 2662 Int_t fDataType;; 2663 ; 2664 TMemberInfo(TClass *parent) : fParent(parent) {};; 2665 ; 2666 void SetDataType(Int_t datatype) {; 2667 fDataType = datatype;; 2668 }; 2669 ; 2670 void SetName(const char *name) {; 2671 fName = name;; 2672 }; 2673 void SetClassName(const char *name) {; 2674 fClassName = TClassEdit::ResolveTypedef(TClassEdit::ShortType( name, TClassEdit::kDropStlDefault | TClassEdit::kDropStd ).c_str(),kTRUE);; 2675 }; 2676 void SetComment(const char *title) {; 2677 const char *left = strstr(title,""["");; 2678 if (left) {; 2679 const char *right = strstr(left,""]"");; 2680 if (right) {; 2681 ++left;; 2682 fComment.Append(left,right-left);; 2683 }; 2684 }; 2685 }; 2686 void Clear() {; 2687 fName.Clear();; 2688 fClassName.Clear();; 2689 fComment.Clear();; 2690 }; 2691 /* Hide this not yet used implementation to suppress warnings message; 2692 from icc 11; 2693 Bool_t operator==(const TMemberInfo &other) {; 2694 return fName==other.fName; 2695 && fClassName == other.fClassName; 2696 && fComment == other.fComment;; 2697 }; 2698 */; 2699 Bool_t operator!=(const TMemberInfo &other) {; 2700 if (fName != other.fName) return kTRUE;; 2701 if (fDataType < TStreamerInfo::kObject) {; 2702 // For simple type, let compare the data type; 2703 if (fDataType != other.fDataType) {; 2704 if ( (fDataType == 4 && other.fDataType == 16); 2705 || (fDataType == 16 && other.fDataType == 4) ) {; 2706 // long and 'long long' have the same file format; 2707 } else if ( (fDataType == 14 && other.fDataType == 17); 2708 || (fDataType == 17 && other.fDataType == 14) ) {; 2709 // unsigned long and 'unsigned long long' have the same file format; 2710 } else if ( (fDataType == 3 && other.fDataType == 6); 2711 ||(fDataType =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:106897,Clear,Clear,106897,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 2705 }; 2706 }; 2707 ; 2708 // It can happen that the objects cached by the client are also clients of; 2709 // the arg itself! In that case, the position of the client in the client; 2710 // list might have changed, and we need to find the new index.; 2711 if(clients.size() != oldClientsSize) {; 2712 auto clientIter = std::find(clients.begin(), clients.end(), client);; 2713 if(clientIter == clients.end()) {; 2714 throw std::runtime_error(""After a clients caches were cleared, the client was gone! This should not happen."");; 2715 }; 2716 iClient = std::distance(clients.begin(), clientIter);; 2717 }; 2718 }; 2719}; 2720 ; 2721} // namespace; 2722 ; 2723 ; 2724////////////////////////////////////////////////////////////////////////////////; 2725 ; 2726void RooAbsPdf::setNormRange(const char* rangeName); 2727{; 2728 if (rangeName) {; 2729 _normRange = rangeName ;; 2730 } else {; 2731 _normRange.Clear() ;; 2732 }; 2733 ; 2734 // the stuff that the clients have cached may depend on the normalization range; 2735 sterilizeClientCaches(*this);; 2736 ; 2737 if (_norm) {; 2738 _normMgr.sterilize() ;; 2739 _norm = nullptr ;; 2740 }; 2741}; 2742 ; 2743 ; 2744////////////////////////////////////////////////////////////////////////////////; 2745 ; 2746void RooAbsPdf::setNormRangeOverride(const char* rangeName); 2747{; 2748 if (rangeName) {; 2749 _normRangeOverride = rangeName ;; 2750 } else {; 2751 _normRangeOverride.Clear() ;; 2752 }; 2753 ; 2754 // the stuff that the clients have cached may depend on the normalization range; 2755 sterilizeClientCaches(*this);; 2756 ; 2757 if (_norm) {; 2758 _normMgr.sterilize() ;; 2759 _norm = nullptr ;; 2760 }; 2761}; 2762 ; 2763 ; 2764////////////////////////////////////////////////////////////////////////////////; 2765/// Hook function intercepting redirectServer calls. Discard current; 2766/// normalization object if any server is redirected; 2767 ; 2768bool RooAbsPdf::redirectServersHook(const RooAbsCollection & newServerList, bool mustRe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html:129595,Clear,Clear,129595,doc/master/RooAbsPdf_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsPdf_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 3 - any proofserv enters wait loop; Proof.GdbHook: 0; On the master to enable the parallel startup of workers using threads set next to “yes” (default is “no”):; Proof.ParallelStartup: no; Proof.StatsHist: no; Proof.StatsTrace: no; Proof.SlaveStatsTrace: no; Proof.CondorHome: /opt/condor; Proof.CondorConfig: /opt/condor/etc/condor_config; PEAC.GmUrl: http://somewhere:8080/clarens/; PEAC.LmUrl: http://elsewhere:8080/clarens/; 28.6.7.1 Server Authentication in TServerSocket; General setting: file with server access rules; SrvAuth.DaemonRc: /etc/root/system.daemonrc; Check of host equivalence via /etc/hosts.equiv or $HOME/.rhosts.; SrvAuth.CheckHostsEquivalence: 1; Force file opening via TNetFile (TNetXNGFile) if a hostname is specified in the Url. By default, for local files TFile::Open() invokes directly TFile.; TFile.ForceRemote: yes; Special cases for the TUrl parser, where the special cases are parsed in a protocol + file part, like rfio:host:/path/file.root, castor:/path/file.root or /alien/path/file.root. In case the file namespace descriptor ends with - the namespace is not a part of the filename. Extend in private .rootrc with a +Url.Special line.; Url.Special: file: rfio: hpss: castor: dcache:; +Url.Special: /alien/- /castor/; 28.6.7.2 PROOF XRD Client Variables; Debug level (if <=0 : none, 1 : low, 2 : medium, 3 : high); XProof.Debug: 0; Socket read timeout [in secs: default 10 secs]; XProof.ReadTimeout: 10; XNet.PrintTAG - Print a particular string the developers can choose to quickly recognize the version at run time [default - 0]; Example of custom setting for the Rint application (root.exe). This overrides the default specified above for a generic application. Color 5 is yellow.; Rint.Canvas.HighLightColor: 5; 28.7 Documentation to Download. The latest ROOT Users Guide; https://root.cern.ch/root/htmldoc/guides/users-guide/ROOTUsersGuide.html; ROOT Reference Guide; http://root.cern.ch/root/Reference.html. http://root.cern.ch/twiki/bin/view/ROOT/PROOF↩. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1265511,Guid,Guide,1265511,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,4,"['Guid', 'guid']","['Guide', 'guide', 'guides']"
Usability,"; 3024 "" The objects on this file might not be readable because:\n""; 3025 "" The in-memory layout version %d for class '%s' has a base class (%s) with checksum %x but the on-file layout version %d recorded the checksum value %x for this base class (%s)."",; 3026 GetName(), file ? ""file "" : """", file ? file->GetName() : """", fClassVersion, GetName(), fClassVersion + 1,; 3027 GetClassVersion(), GetName(), otherClass.Data(), otherBase->GetBaseCheckSum(),; 3028 GetClassVersion(), localBase->GetBaseCheckSum(), localClass.Data());; 3029 otherBase->SetErrorMessage(msg);; 3030 }; 3031 }; 3032 }; 3033 if (!result && !complete) {; 3034 return result;; 3035 }; 3036 // Next the datamembers; 3037 done = kFALSE;; 3038 next.Reset();; 3039 infonext.Reset();; 3040 ; 3041 TMemberInfo local(GetClass());; 3042 TMemberInfo other(cl ? cl : info->GetClass());; 3043 while(!done) {; 3044 local.Clear();; 3045 other.Clear();; 3046 el = (TStreamerElement*)next();; 3047 while (el && (el->IsBase() || el->IsA() == TStreamerArtificial::Class())) {; 3048 el = (TStreamerElement*)next();; 3049 }; 3050 if (el) {; 3051 local.SetName( el->GetName() );; 3052 local.SetClassName( el->GetTypeName() );; 3053 local.SetComment( el->GetTitle() );; 3054 local.SetDataType( el->GetType() );; 3055 }; 3056 if (cl) {; 3057 TDataMember *tdm = (TDataMember*)membernext();; 3058 while(tdm && ( (!tdm->IsPersistent()) || (tdm->Property()&kIsStatic) || (el && local.fName != tdm->GetName()) )) {; 3059 tdm = (TDataMember*)membernext();; 3060 }; 3061 if (tdm) {; 3062 other.SetName( tdm->GetName() );; 3063 other.SetClassName( tdm->GetTrueTypeName() );; 3064 other.SetComment( tdm->GetTitle() );; 3065 if (tdm->GetDataType()) {; 3066 // Need to update the type for arrays.; 3067 if (tdm->IsaPointer()) {; 3068 if (tdm->GetDataType()->GetType() == TVirtualStreamerInfo::kChar && !tdm->GetArrayDim() && tdm->GetArrayIndex()[0]==0) {; 3069 other.SetDataType( TVirtualStreamerInfo::kCharStar );; 3070 } else {; 3071 other.SetDataType( tdm->GetDa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html:122651,Clear,Clear,122651,doc/master/TStreamerInfo_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfo_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 3050 } else {; 3051 Error(""InspectMembers"",; 3052 ""Cannot calculate offset of virtual base %s of class %s"",; 3053 sBaseName.c_str(), clname);; 3054 continue;; 3055 }; 3056 }; 3057 } else {; 3058 baseOffset = recLayout.getBaseClassOffset(baseDecl).getQuantity();; 3059 }; 3060 // TOFIX: baseCl can be null here!; 3061 if (baseCl->IsLoaded()) {; 3062 // For loaded class, CallShowMember will (especially for TObject); 3063 // call the virtual ShowMember rather than the class specific version; 3064 // resulting in an infinite recursion.; 3065 InspectMembers(insp, cobj + baseOffset, baseCl, isTransient);; 3066 } else {; 3067 baseCl->CallShowMembers(cobj + baseOffset,; 3068 insp, isTransient);; 3069 }; 3070 } // loop over bases; 3071}; 3072 ; 3073////////////////////////////////////////////////////////////////////////////////; 3074/// Reset the interpreter internal state in case a previous action was not correctly; 3075/// terminated.; 3076 ; 3077void TCling::ClearFileBusy(); 3078{; 3079 // No-op there is not equivalent state (to be cleared) in Cling.; 3080}; 3081 ; 3082////////////////////////////////////////////////////////////////////////////////; 3083/// Delete existing temporary values.; 3084 ; 3085void TCling::ClearStack(); 3086{; 3087 // No-op for cling due to cling::Value.; 3088}; 3089 ; 3090////////////////////////////////////////////////////////////////////////////////; 3091/// Declare code to the interpreter, without any of the interpreter actions; 3092/// that could trigger a re-interpretation of the code. I.e. make cling; 3093/// behave like a compiler: no dynamic lookup, no input wrapping for; 3094/// subsequent execution, no automatic provision of declarations but just a; 3095/// plain `#include`.; 3096/// Returns true on success, false on failure.; 3097 ; 3098bool TCling::Declare(const char* code); 3099{; 3100 R__LOCKGUARD_CLING(gInterpreterMutex);; 3101 ; 3102 SuspendAutoLoadingRAII autoLoadOff(this);; 3103 SuspendAutoParsing autoParseRaii(this);; 3104 ; 31",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:118824,Clear,ClearFileBusy,118824,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,2,"['Clear', 'clear']","['ClearFileBusy', 'cleared']"
Usability,"; 30class RooDataSet ;; 31class RooPlot;; 32class RooRealVar;; 33class RooAbsFunc;; 34class RooAbsCategoryLValue ;; 35class RooLinkedList ;; 36class RooNumIntConfig ;; 37class RooDataHist ;; 38class RooFunctor ;; 39class RooFitResult ;; 40class RooAbsMoment ;; 41class RooDerivative ;; 42class RooVectorDataStore ;; 43struct TreeReadBuffer; /// A space to attach TBranches; 44namespace RooBatchCompute {; 45struct RunContext;; 46}; 47 ; 48class TH1;; 49class TH1F;; 50class TH2F;; 51class TH3F;; 52 ; 53#include <iostream>; 54#include <list>; 55#include <map>; 56#include <string>; 57#include <sstream>; 58 ; 59class RooAbsReal : public RooAbsArg {; 60public:; 61 using value_type = double;; 62 ; 63 /// A RooAbsReal::Ref can be constructed from a `RooAbsReal&` or a `double`; 64 /// that will be implicitly converted to a RooConstVar&. The RooAbsReal::Ref; 65 /// can be used as a replacement for `RooAbsReal&`. With this type; 66 /// definition, you can write RooFit interfaces that accept both RooAbsReal,; 67 /// or simply a number that will be implicitly converted to a RooConstVar&.; 68 class Ref {; 69 public:; 70 inline Ref(RooAbsReal &ref) : _ref{ref} {}; 71 Ref(double val);; 72 inline operator RooAbsReal &() const { return _ref; }; 73 ; 74 private:; 75 RooAbsReal &_ref;; 76 };; 77 ; 78 // Constructors, assignment etc; 79 RooAbsReal() ;; 80 RooAbsReal(const char *name, const char *title, const char *unit= """") ;; 81 RooAbsReal(const char *name, const char *title, double minVal, double maxVal,; 82 const char *unit= """") ;; 83 RooAbsReal(const RooAbsReal& other, const char* name=nullptr);; 84 ~RooAbsReal() override;; 85 ; 86 ; 87 ; 88 ; 89 //////////////////////////////////////////////////////////////////////////////////; 90 /// Evaluate object. Returns either cached value or triggers a recalculation.; 91 /// The recalculation happens by calling getValV(), which in the end calls the; 92 /// virtual evaluate() functions of the respective PDFs.; 93 /// \param[in] normalisationSet ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:2311,simpl,simply,2311,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['simpl'],['simply']
Usability,"; 32 kSTLdeque = 3,; 33 kSTLmap = 4,; 34 kSTLmultimap = 5,; 35 kSTLset = 6,; 36 kSTLmultiset = 7,; 37 kSTLbitset = 8,; 38 // Here the c++11 containers start. Order counts. For example,; 39 // tstreamerelements in written rootfiles carry a value and we cannot; 40 // introduce shifts.; 41 kSTLforwardlist = 9,; 42 kSTLunorderedset = 10,; 43 kSTLunorderedmultiset = 11,; 44 kSTLunorderedmap = 12,; 45 kSTLunorderedmultimap = 13,; 46 kROOTRVec = 14, /* ROOT type with STL container interface */; 47 kSTLend = 15,; 48 kSTLany = 300 /* TVirtualStreamerInfo::kSTL */,; 49 kSTLstring = 365 /* TVirtualStreamerInfo::kSTLstring */,; 50 };; 51 ; 52}; 53 ; 54#endif; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::ESTLTypeESTLTypeDefinition ESTLType.h:28; ROOT::kSTLbitset@ kSTLbitsetDefinition ESTLType.h:37; ROOT::kSTLmap@ kSTLmapDefinition ESTLType.h:33; ROOT::kSTLunorderedmultiset@ kSTLunorderedmultisetDefinition ESTLType.h:43; ROOT::kROOTRVec@ kROOTRVecDefinition ESTLType.h:46; ROOT::kSTLend@ kSTLendDefinition ESTLType.h:47; ROOT::kSTLstring@ kSTLstringDefinition ESTLType.h:49; ROOT::kSTLset@ kSTLsetDefinition ESTLType.h:35; ROOT::kSTLmultiset@ kSTLmultisetDefinition ESTLType.h:36; ROOT::kSTLdeque@ kSTLdequeDefinition ESTLType.h:32; ROOT::kSTLvector@ kSTLvectorDefinition ESTLType.h:30; ROOT::kSTLany@ kSTLanyDefinition ESTLType.h:48; ROOT::kSTLunorderedmultimap@ kSTLunorderedmultimapDefinition ESTLType.h:45; ROOT::kSTLunorderedset@ kSTLunorderedsetDefinition ESTLType.h:42; ROOT::kSTLlist@ kSTLlistDefinition ESTLType.h:31; ROOT::kSTLforwardlist@ kSTLforwardlistDefinition ESTLType.h:41; ROOT::kSTLunorderedmap@ kSTLunorderedmapDefinition ESTLType.h:44; ROOT::kNotSTL@ kNotSTLDefinition ESTLType.h:29; ROOT::kSTLmultimap@ kSTLmultimapDefinition ESTLType.h:34. corefoundationincESTLType.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ESTLType_8h_source.html:3077,Guid,Guide,3077,doc/master/ESTLType_8h_source.html,https://root.cern,https://root.cern/doc/master/ESTLType_8h_source.html,1,['Guid'],['Guide']
Usability,"; 3256 lb1->RemoveAt(k);; 3257 delete b2;; 3258 b2 = nullptr;; 3259 lb1->Compress();; 3260 break;; 3261 }; 3262 }; 3263 }; 3264 }; 3265 }; 3266 leaves->Compress();; 3267 ; 3268 // Copy MakeClass status.; 3269 newtree->SetMakeClass(fMakeClass);; 3270 ; 3271 // Copy branch addresses.; 3272 CopyAddresses(newtree);; 3273 ; 3274 //; 3275 // Copy entries if requested.; 3276 //; 3277 ; 3278 if (nentries != 0) {; 3279 if (fastClone && (nentries < 0)) {; 3280 if ( newtree->CopyEntries( this, -1, option, false ) < 0 ) {; 3281 // There was a problem!; 3282 Error(""CloneTTree"", ""TTree has not been cloned\n"");; 3283 delete newtree;; 3284 newtree = nullptr;; 3285 return nullptr;; 3286 }; 3287 } else {; 3288 newtree->CopyEntries( this, nentries, option, false );; 3289 }; 3290 }; 3291 ; 3292 return newtree;; 3293}; 3294 ; 3295////////////////////////////////////////////////////////////////////////////////; 3296/// Set branch addresses of passed tree equal to ours.; 3297/// If undo is true, reset the branch addresses instead of copying them.; 3298/// This ensures 'separation' of a cloned tree from its original.; 3299 ; 3300void TTree::CopyAddresses(TTree* tree, bool undo); 3301{; 3302 // Copy branch addresses starting from branches.; 3303 TObjArray* branches = GetListOfBranches();; 3304 Int_t nbranches = branches->GetEntriesFast();; 3305 for (Int_t i = 0; i < nbranches; ++i) {; 3306 TBranch* branch = (TBranch*) branches->UncheckedAt(i);; 3307 if (branch->TestBit(kDoNotProcess)) {; 3308 continue;; 3309 }; 3310 if (undo) {; 3311 TBranch* br = tree->GetBranch(branch->GetName());; 3312 tree->ResetBranchAddress(br);; 3313 } else {; 3314 char* addr = branch->GetAddress();; 3315 if (!addr) {; 3316 if (branch->IsA() == TBranch::Class()) {; 3317 // If the branch was created using a leaflist, the branch itself may not have; 3318 // an address but the leaf might already.; 3319 TLeaf *firstleaf = (TLeaf*)branch->GetListOfLeaves()->At(0);; 3320 if (!firstleaf || firstleaf->GetValuePointer()) {; 3",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:130468,undo,undo,130468,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['undo'],['undo']
Usability,"; 3599 ; 3600 Bool_t began3DScene = kFALSE;; 3601 fPadPaint = 1;; 3602 ; 3603 {; 3604 TContext ctxt(this, kTRUE);; 3605 ; 3606 PaintBorder(GetFillColor(), kTRUE);; 3607 PaintDate();; 3608 ; 3609 auto lnk = GetListOfPrimitives()->FirstLink();; 3610 ; 3611 while (lnk) {; 3612 TObject *obj = lnk->GetObject();; 3613 ; 3614 // Create a pad 3D viewer if none exists and we encounter a 3D shape; 3615 if (!fViewer3D && obj->InheritsFrom(TAtt3D::Class())) {; 3616 GetViewer3D(""pad"");; 3617 }; 3618 ; 3619 // Open a 3D scene if required; 3620 if (fViewer3D && !fViewer3D->BuildingScene()) {; 3621 fViewer3D->BeginScene();; 3622 began3DScene = kTRUE;; 3623 }; 3624 ; 3625 obj->Paint(lnk->GetOption());; 3626 lnk = lnk->Next();; 3627 }; 3628 }; 3629 ; 3630 fPadPaint = 0;; 3631 Modified(kFALSE);; 3632 ; 3633 // Close the 3D scene if we opened it. This must be done after modified; 3634 // flag is cleared, as some viewers will invoke another paint by marking pad modified again; 3635 if (began3DScene) {; 3636 fViewer3D->EndScene();; 3637 }; 3638}; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Paint the pad border.; 3642/// Draw first a box as a normal filled box; 3643 ; 3644void TPad::PaintBorder(Color_t color, Bool_t tops); 3645{; 3646 if (color >= 0) {; 3647 TAttLine::Modify(); //Change line attributes only if necessary; 3648 TAttFill::Modify(); //Change fill area attributes only if necessary; 3649 ; 3650 //With Cocoa we have a transparency. But we also have; 3651 //pixmaps, and if you just paint a new content over the old one; 3652 //with alpha < 1., you'll be able to see the old content.; 3653 if (!gROOT->IsBatch() && gVirtualX->InheritsFrom(""TGCocoa"") && GetPainter()); 3654 GetPainter()->ClearDrawable();; 3655 ; 3656 PaintBox(fX1,fY1,fX2,fY2);; 3657 }; 3658 if (color < 0) color = -color;; 3659 // then paint 3d frame (depending on bordermode); 3660 if (IsTransparent()) return;; 3661 // Paint a 3D frame around the pad.; 3662 ; 3663 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:114259,clear,cleared,114259,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['clear'],['cleared']
Usability,"; 39 // in top right pad, draw the stack in non-stack mode; 40 // and errors option; 41 cst->cd(2);; 42 gPad->SetGrid();; 43 hs->Draw(""nostack,e1p"");; 44 //in bottom left, draw in stack mode with ""lego1"" option; 45 cst->cd(3);; 46 gPad->SetFrameFillColor(17);; 47 gPad->SetTheta(3.77);; 48 gPad->SetPhi(2.9);; 49 hs->Draw(""lego1"");; 50 ; 51 cst->cd(4);; 52 //create two 2-D histograms and draw them in stack mode; 53 gPad->SetFrameFillColor(17);; 54 auto a = new THStack(""a"",""Stacked 2D histograms"");; 55 auto f1 = new TF2(""f1"",; 56 ""xygaus + xygaus(5) + xylandau(10)"",-4,4,-4,4);; 57 Double_t params1[] = {130,-1.4,1.8,1.5,1, 150,2,0.5,-2,0.5,; 58 3600,-2,0.7,-3,0.3};; 59 f1->SetParameters(params1);; 60 auto h2sta = new TH2F(""h2sta"",""h2sta"",20,-4,4,20,-4,4);; 61 h2sta->SetFillColor(38);; 62 h2sta->FillRandom(""f1"",4000);; 63 auto f2 = new TF2(""f2"",""xygaus + xygaus(5)"",-4,4,-4,4);; 64 Double_t params2[] = {100,-1.4,1.9,1.1,2, 80,2,0.7,-2,0.5};; 65 f2->SetParameters(params2);; 66 auto h2stb = new TH2F(""h2stb"",""h2stb"",20,-4,4,20,-4,4);; 67 h2stb->SetFillColor(46);; 68 h2stb->FillRandom(""f2"",3000);; 69 a->Add(h2sta);; 70 a->Add(h2stb);; 71 a->Draw();; 72}; a#define a(i)Definition RSha256.hxx:99; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; gPad#define gPadDefinition TVirtualPad.h:308; TCanvasThe Canvas class.Definition TCanvas.h:23; TF1::SetParametersvirtual void SetParameters(const Double_t *params)Definition TF1.h:677; TF2A 2-Dim function with parameters.Definition TF2.h:29; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; f1TF1 * f1Definition legend1.C:11. tutorialshisthstack.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hstack_8C_source.html:3187,Guid,Guide,3187,doc/master/hstack_8C_source.html,https://root.cern,https://root.cern/doc/master/hstack_8C_source.html,1,['Guid'],['Guide']
Usability,"; 404 initialize<Architecture_t>(fBiasGradients[i], EInitialization::kZero);; 405 }; 406}; 407 ; 408//_________________________________________________________________________________________________; 409template <typename Architecture_t>; 410auto VGeneralLayer<Architecture_t>::Update(const Scalar_t learningRate) -> void; 411{; 412 this->UpdateWeights(fWeightGradients, learningRate);; 413 this->UpdateBiases(fBiasGradients, learningRate);; 414}; 415 ; 416//_________________________________________________________________________________________________; 417template <typename Architecture_t>; 418auto VGeneralLayer<Architecture_t>::UpdateWeights(const std::vector<Matrix_t> &weightGradients,; 419 const Scalar_t learningRate) -> void; 420{; 421 for (size_t i = 0; i < fWeights.size(); i++) {; 422 Architecture_t::ScaleAdd(fWeights[i], weightGradients[i], -learningRate);; 423 }; 424}; 425 ; 426//_________________________________________________________________________________________________; 427template <typename Architecture_t>; 428auto VGeneralLayer<Architecture_t>::UpdateBiases(const std::vector<Matrix_t> &biasGradients,; 429 const Scalar_t learningRate) -> void; 430{; 431 for (size_t i = 0; i < fBiases.size(); i++) {; 432 Architecture_t::ScaleAdd(fBiases[i], biasGradients[i], -learningRate);; 433 }; 434}; 435 ; 436//_________________________________________________________________________________________________; 437template <typename Architecture_t>; 438auto VGeneralLayer<Architecture_t>::UpdateWeightGradients(const std::vector<Matrix_t> &weightGradients,; 439 const Scalar_t learningRate) -> void; 440{; 441 for (size_t i = 0; i < fWeightGradients.size(); i++) {; 442 Architecture_t::ScaleAdd(fWeightGradients[i], weightGradients[i], -learningRate);; 443 }; 444}; 445 ; 446//_________________________________________________________________________________________________; 447template <typename Architecture_t>; 448auto VGeneralLayer<Architecture_t>::UpdateBiasGradients(cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/GeneralLayer_8h_source.html:19319,learn,learningRate,19319,doc/master/GeneralLayer_8h_source.html,https://root.cern,https://root.cern/doc/master/GeneralLayer_8h_source.html,2,['learn'],['learningRate']
Usability,"; 4299 arguments = filenameCopy(posArgBegin + 1, posArgEnd - 1);; 4300 fname[posArgBegin + 1] = 0;; 4301 }; 4302 }; 4303 ; 4304 // strip off I/O redirect tokens from filename; 4305 {; 4306 char *s2 = nullptr;; 4307 char *s3;; 4308 s2 = strstr(fname, "">>"");; 4309 if (!s2) s2 = strstr(fname, ""2>"");; 4310 if (!s2) s2 = strchr(fname, '>');; 4311 s3 = strchr(fname, '<');; 4312 if (s2 && s3) s2 = s2<s3 ? s2 : s3;; 4313 if (s3 && !s2) s2 = s3;; 4314 if (s2==fname) {; 4315 io = fname;; 4316 aclicMode = """";; 4317 arguments = """";; 4318 delete []fname;; 4319 return """";; 4320 } else if (s2) {; 4321 s2--;; 4322 while (s2 && *s2 == ' ') s2--;; 4323 s2++;; 4324 io = s2; // ssave = *s2;; 4325 *s2 = 0;; 4326 } else; 4327 io = """";; 4328 }; 4329 ; 4330 // remove the possible ACLiC + or ++ and g or O etc; 4331 aclicMode.Clear();; 4332 int len = strlen(fname);; 4333 TString mode;; 4334 while (len > 1) {; 4335 if (strchr(""kfgOcsdv-"", fname[len - 1])) {; 4336 mode += fname[len - 1];; 4337 --len;; 4338 } else {; 4339 break;; 4340 }; 4341 }; 4342 Bool_t compile = len && fname[len - 1] == '+';; 4343 Bool_t remove = compile && len > 1 && fname[len - 2] == '+';; 4344 if (compile) {; 4345 if (mode.Length()) {; 4346 fname[len] = 0;; 4347 }; 4348 if (remove) {; 4349 fname[strlen(fname)-2] = 0;; 4350 aclicMode = ""++"";; 4351 } else {; 4352 fname[strlen(fname)-1] = 0;; 4353 aclicMode = ""+"";; 4354 }; 4355 if (mode.Length()); 4356 aclicMode += mode;; 4357 }; 4358 ; 4359 TString resFilename = fname;; 4360 ; 4361 delete []fname;; 4362 return resFilename;; 4363}; 4364 ; 4365////////////////////////////////////////////////////////////////////////////////; 4366/// Remove the shared libs produced by the CompileMacro() function, together; 4367/// with their rootmaps, linkdefs, and pcms (and some more on Windows).; 4368 ; 4369void TSystem::CleanCompiledMacros(); 4370{; 4371 TIter next(fCompiled);; 4372 TNamed *lib;; 4373 const char *extensions[] = {"".lib"", "".exp"", "".d"", "".def"", "".rootmap"", ""_ACLiC_linkdef.h"",",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSystem_8cxx_source.html:148608,Clear,Clear,148608,doc/master/TSystem_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSystem_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 44 void SetSeed(ULong_t seed=0) override;; 45 virtual const UInt_t *GetState() const { return fMt; }; 46 ; 47 ClassDefOverride(TRandom3,2) //Random number generator: Mersenne Twister; 48};; 49 ; 50R__EXTERN TRandom *gRandom;; 51 ; 52#endif; R__EXTERN#define R__EXTERNDefinition DllImport.h:26; Int_tint Int_tDefinition RtypesCore.h:45; ULong_tunsigned long ULong_tDefinition RtypesCore.h:55; Float_tfloat Float_tDefinition RtypesCore.h:57; Double_tdouble Double_tDefinition RtypesCore.h:59; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; gRandomR__EXTERN TRandom * gRandomDefinition TRandom3.h:50; TRandom.h; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::fMtUInt_t fMt[624]Definition TRandom3.h:30; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom3::GetSeedUInt_t GetSeed() const overrideReturn one element of the generator state used to generate the random numbers.Definition TRandom3.h:39; TRandom3::RndmArrayvoid RndmArray(Int_t n, Float_t *array) overrideReturn an array of n random numbers uniformly distributed in ]0,1].Definition TRandom3.cxx:143; TRandom3::fCount624Int_t fCount624Definition TRandom3.h:31; TRandom3::GetStatevirtual const UInt_t * GetState() constDefinition TRandom3.h:45; TRandom3::~TRandom3~TRandom3() overrideDefault destructor.Definition TRandom3.cxx:90; TRandom3::SetSeedvoid SetSeed(ULong_t seed=0) overrideSet the random generator sequence if seed is 0 (default value) a TUUID is generated and used to fill ...Definition TRandom3.cxx:206; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; int; unsigned int; nconst Int_t nDefinition legend1.C:16. mathmathcoreincTRandom3.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom3_8h_source.html:3595,Guid,Guide,3595,doc/master/TRandom3_8h_source.html,https://root.cern,https://root.cern/doc/master/TRandom3_8h_source.html,1,['Guid'],['Guide']
Usability,"; 522TGraph2D::TGraph2D(const TGraph2D &g); 523: TNamed(g), TAttLine(g), TAttFill(g), TAttMarker(g),; 524 fX(nullptr), fY(nullptr), fZ(nullptr),; 525 fHistogram(nullptr), fDirectory(nullptr), fPainter(nullptr); 526{; 527 fFunctions = new TList(); // do not copy the functions; 528 ; 529 // use operator=; 530 (*this) = g;; 531 ; 532 // append TGraph2D to gdirectory; 533 if (TH1::AddDirectoryStatus()) {; 534 fDirectory = gDirectory;; 535 if (fDirectory) {; 536 // append without replacing existing objects; 537 fDirectory->Append(this);; 538 }; 539 }; 540 ; 541 ; 542}; 543 ; 544 ; 545////////////////////////////////////////////////////////////////////////////////; 546/// TGraph2D destructor.; 547 ; 548TGraph2D::~TGraph2D(); 549{; 550 Clear();; 551}; 552 ; 553 ; 554////////////////////////////////////////////////////////////////////////////////; 555/// Graph2D operator ""=""; 556 ; 557TGraph2D& TGraph2D::operator=(const TGraph2D &g); 558{; 559 if (this == &g) return *this;; 560 ; 561 // delete before existing contained objects; 562 if (fX) delete [] fX;; 563 if (fY) delete [] fY;; 564 if (fZ) delete [] fZ;; 565 if (fHistogram && !fUserHisto) {; 566 delete fHistogram;; 567 fHistogram = nullptr;; 568 fDelaunay = nullptr;; 569 }; 570 // copy everything except the function list; 571 fNpoints = g.fNpoints;; 572 fNpx = g.fNpx;; 573 fNpy = g.fNpy;; 574 fMaxIter = g.fMaxIter;; 575 fSize = fNpoints; // force size to be the same of npoints; 576 fX = (fSize > 0) ? new Double_t[fSize] : nullptr;; 577 fY = (fSize > 0) ? new Double_t[fSize] : nullptr;; 578 fZ = (fSize > 0) ? new Double_t[fSize] : nullptr;; 579 fMinimum = g.fMinimum;; 580 fMaximum = g.fMaximum;; 581 fMargin = g.fMargin;; 582 fZout = g.fZout;; 583 fUserHisto = g.fUserHisto;; 584 if (g.fHistogram); 585 fHistogram = (fUserHisto ) ? g.fHistogram : new TH2D(*g.fHistogram);; 586 ; 587 ; 588 ; 589 // copy the points; 590 for (Int_t n = 0; n < fSize; n++) {; 591 fX[n] = g.fX[n];; 592 fY[n] = g.fY[n];; 593 fZ[n] = g.fZ[n];; 594 };",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:18443,Clear,Clear,18443,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; 528 SafeDelete(fOverlaps);; 529 }; 530 if (fRegions) {; 531 fRegions->Delete();; 532 SafeDelete(fRegions);; 533 }; 534 if (fMaterials) {; 535 fMaterials->Delete();; 536 SafeDelete(fMaterials);; 537 }; 538 SafeDelete(fElementTable);; 539 if (fMedia) {; 540 fMedia->Delete();; 541 SafeDelete(fMedia);; 542 }; 543 if (fHashVolumes) {; 544 fHashVolumes->Clear(""nodelete"");; 545 SafeDelete(fHashVolumes);; 546 }; 547 if (fHashGVolumes) {; 548 fHashGVolumes->Clear(""nodelete"");; 549 SafeDelete(fHashGVolumes);; 550 }; 551 if (fHashPNE) {; 552 fHashPNE->Delete();; 553 SafeDelete(fHashPNE);; 554 }; 555 if (fArrayPNE) {; 556 delete fArrayPNE;; 557 }; 558 if (fVolumes) {; 559 fVolumes->Delete();; 560 SafeDelete(fVolumes);; 561 }; 562 if (fShapes) {; 563 fShapes->Delete();; 564 SafeDelete(fShapes);; 565 }; 566 if (fPhysicalNodes) {; 567 fPhysicalNodes->Delete();; 568 SafeDelete(fPhysicalNodes);; 569 }; 570 if (fMatrices) {; 571 fMatrices->Delete();; 572 SafeDelete(fMatrices);; 573 }; 574 if (fTracks) {; 575 fTracks->Delete();; 576 SafeDelete(fTracks);; 577 }; 578 SafeDelete(fUniqueVolumes);; 579 if (fPdgNames) {; 580 fPdgNames->Delete();; 581 SafeDelete(fPdgNames);; 582 }; 583 if (fGDMLMatrices) {; 584 fGDMLMatrices->Delete();; 585 SafeDelete(fGDMLMatrices);; 586 }; 587 if (fOpticalSurfaces) {; 588 fOpticalSurfaces->Delete();; 589 SafeDelete(fOpticalSurfaces);; 590 }; 591 if (fSkinSurfaces) {; 592 fSkinSurfaces->Delete();; 593 SafeDelete(fSkinSurfaces);; 594 }; 595 if (fBorderSurfaces) {; 596 fBorderSurfaces->Delete();; 597 SafeDelete(fBorderSurfaces);; 598 }; 599 ClearNavigators();; 600 CleanGarbage();; 601 SafeDelete(fPainter);; 602 SafeDelete(fGLMatrix);; 603 if (fSizePNEId) {; 604 delete[] fKeyPNEId;; 605 delete[] fValuePNEId;; 606 }; 607 delete fParallelWorld;; 608 fIsGeomCleaning = kFALSE;; 609 gGeoIdentity = nullptr;; 610 gGeoManager = nullptr;; 611}; 612 ; 613////////////////////////////////////////////////////////////////////////////////; 614/// Add a material to the list.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:23108,Clear,ClearNavigators,23108,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['ClearNavigators']
Usability,"; 634 if (fLambdaPtr != nullptr) {; 635 R__LOCKGUARD(gROOTMutex);; 636 gClingFunctions.insert ( std::make_pair ( lambdaExpression, fLambdaPtr) );; 637 fClingInitialized = true;; 638 return true;; 639 }; 640 fClingInitialized = false;; 641 return false;; 642}; 643 ; 644////////////////////////////////////////////////////////////////////////////////; 645/// Compile the given expression with Cling; 646/// backward compatibility method to be used in combination with the empty constructor; 647/// if no expression is given , the current stored formula (retrieved with GetExpFormula()) or the title is used.; 648/// return 0 if the formula compilation is successful; 649 ; 650Int_t TFormula::Compile(const char *expression); 651{; 652 TString formula = expression;; 653 if (formula.IsNull() ) {; 654 formula = fFormula;; 655 if (formula.IsNull() ) formula = GetTitle();; 656 }; 657 ; 658 if (formula.IsNull() ) return -1;; 659 ; 660 // do not re-process if it was done before; 661 if (IsValid() && formula == fFormula ) return 0;; 662 ; 663 // clear if a formula was already existing; 664 if (!fFormula.IsNull() ) Clear();; 665 ; 666 fFormula = formula;; 667 ; 668 if (TestBit(TFormula::kLambda) ) {; 669 bool ret = InitLambdaExpression(fFormula);; 670 return (ret) ? 0 : 1;; 671 }; 672 ; 673 if (fVars.empty() ) FillDefaults();; 674 // prepare the formula for Cling; 675 //printf(""compile: processing formula %s\n"",fFormula.Data() );; 676 PreProcessFormula(fFormula);; 677 // pass formula in CLing; 678 bool ret = PrepareFormula(fFormula);; 679 ; 680 return (ret) ? 0 : 1;; 681}; 682 ; 683////////////////////////////////////////////////////////////////////////////////; 684void TFormula::Copy(TObject &obj) const; 685{; 686 TNamed::Copy(obj);; 687 // need to copy also cling parameters; 688 TFormula & fnew = dynamic_cast<TFormula&>(obj);; 689 ; 690 fnew.fClingParameters = fClingParameters;; 691 fnew.fClingVariables = fClingVariables;; 692 ; 693 fnew.fFuncs = fFuncs;; 694 fnew.fVars = fVars;; 695 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFormula_8cxx_source.html:24598,clear,clear,24598,doc/master/TFormula_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFormula_8cxx_source.html,1,['clear'],['clear']
Usability,"; 6358 std::vector<dField> otherDist;; 6359 Int_t pMX, pMY;; 6360 Double_t MX, MY;; 6361 Int_t threshold;; 6362 TList *prims;; 6363 UInt_t n;; 6364 Rectangle_t aBBox, bBBox;; 6365 aBBox = bBBox = Rectangle_t();; 6366 TLine *L;; 6367 TArrow *A;; 6368 Int_t dSizeArrow = 12; // distance of arrows indicating same size from BBox in px; 6369 Bool_t movedX, movedY; // make sure the current object is moved just once; 6370 movedX = movedY = false;; 6371 Bool_t resize = false; // indicates resize mode; 6372 Bool_t log = gPad->GetLogx() || gPad->GetLogy();; 6373 if (mode != 'i') resize = true;; 6374 ; 6375 TPad *is_pad = dynamic_cast<TPad *>( object );; 6376 ; 6377 TContext ctxt(kTRUE);; 6378 ; 6379 if (is_pad && is_pad->GetMother()); 6380 is_pad->GetMother()->cd();; 6381 ; 6382 static TPad *tmpGuideLinePad = nullptr;; 6383 ; 6384 //delete all existing Guidelines and create new invisible pad; 6385 if (tmpGuideLinePad) {; 6386 ctxt.PadDeleted(tmpGuideLinePad);; 6387 auto guidePadClicked = (object == tmpGuideLinePad); // in case of funny button click combination.; 6388 tmpGuideLinePad->Delete();; 6389 tmpGuideLinePad = nullptr;; 6390 if (guidePadClicked) return;; 6391 }; 6392 ; 6393 // Get Primitives; 6394 prims = gPad->GetListOfPrimitives();; 6395 n = TMath::Min(15,prims->GetSize());; 6396 Int_t lineColor = TColor::GetColor(239, 202, 0);; 6397 ; 6398 TAttBBox2D *cur = dynamic_cast<TAttBBox2D *>( object );; 6399 if (cur) {; 6400 //create invisible TPad above gPad; 6401 if (!tmpGuideLinePad){; 6402 tmpGuideLinePad = new TPad(""tmpGuideLinePad"", ""tmpGuideLinePad"", 0, 0, 1, 1);; 6403 Double_t x1, y1, x2, y2;; 6404 gPad->GetRange(x1, y1, x2, y2);; 6405 tmpGuideLinePad->Range(x1, y1, x2, y2);; 6406 tmpGuideLinePad->SetFillStyle(0);; 6407 tmpGuideLinePad->SetFillColor(0);; 6408 tmpGuideLinePad->Draw();; 6409 tmpGuideLinePad->cd();; 6410 gPad->GetRange(x1, y1, x2, y2);; 6411 }; 6412 if (cling && !log) threshold = 7;; 6413 else threshold = 1;; 6414 ; 6415 Rectangle_t BBox = cur->GetBBox(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:210349,guid,guidePadClicked,210349,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['guid'],['guidePadClicked']
Usability,"; 697 newCols.AddDefine(std::move(newColumn));; 698 ; 699 RInterface<Proxied> newInterface(fProxiedPtr, *fLoopManager, std::move(newCols));; 700 ; 701 return newInterface;; 702 }; 703 ; 704 // clang-format off; 705 ////////////////////////////////////////////////////////////////////////////; 706 /// \brief Define a new column that is updated when the input sample changes.; 707 /// \param[in] name The name of the defined column.; 708 /// \param[in] expression A C++ callable that computes the new value of the defined column.; 709 /// \return the first node of the computation graph for which the new quantity is defined.; 710 ///; 711 /// The signature of the callable passed as second argument should be `T(unsigned int slot, const ROOT::RDF::RSampleInfo &id)`; 712 /// where:; 713 /// - `T` is the type of the defined column; 714 /// - `slot` is a number in the range [0, nThreads) that is different for each processing thread. This can simplify; 715 /// the definition of thread-safe callables if you are interested in using parallel capabilities of RDataFrame.; 716 /// - `id` is an instance of a ROOT::RDF::RSampleInfo object which contains information about the sample which is; 717 /// being processed (see the class docs for more information).; 718 ///; 719 /// DefinePerSample() is useful to e.g. define a quantity that depends on which TTree in which TFile is being; 720 /// processed or to inject a callback into the event loop that is only called when the processing of a new sample; 721 /// starts rather than at every entry.; 722 ///; 723 /// The callable will be invoked once per input TTree or once per multi-thread task, whichever is more often.; 724 ///; 725 /// ### Example usage:; 726 /// ~~~{.cpp}; 727 /// ROOT::RDataFrame df{""mytree"", {""sample1.root"",""sample2.root""}};; 728 /// df.DefinePerSample(""weightbysample"",; 729 /// [](unsigned int slot, const ROOT::RDF::RSampleInfo &id); 730 /// { return id.Contains(""sample1"") ? 1.0f : 2.0f; });; 731 /// ~~~; 732 // clang-format ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RInterface_8hxx_source.html:37630,simpl,simplify,37630,doc/master/RInterface_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RInterface_8hxx_source.html,1,['simpl'],['simplify']
Usability,"; 703 if (ROOT::Detail::HasBeenDeleted(this)) return;; 704 ; 705 SafeDelete(fContextMenu);; 706 if (!gPad) return;; 707 ; 708 Close();; 709 ; 710 //If not yet (batch mode?).; 711 SafeDelete(fPainter);; 712}; 713 ; 714////////////////////////////////////////////////////////////////////////////////; 715/// Set current canvas & pad. Returns the new current pad,; 716/// or 0 in case of failure.; 717/// See TPad::cd() for an explanation of the parameter.; 718 ; 719TVirtualPad *TCanvas::cd(Int_t subpadnumber); 720{; 721 if (fCanvasID == -1) return nullptr;; 722 ; 723 TPad::cd(subpadnumber);; 724 ; 725 // in case doublebuffer is off, draw directly onto display window; 726 if (!IsBatch() && !IsWeb() && !fDoubleBuffer); 727 gVirtualX->SelectWindow(fCanvasID);//Ok, does not matter for glpad.; 728 ; 729 return gPad;; 730}; 731 ; 732////////////////////////////////////////////////////////////////////////////////; 733/// Remove all primitives from the canvas.; 734/// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; 735/// This option is not recursive, i.e. pads in direct sub-pads are deleted.; 736 ; 737void TCanvas::Clear(Option_t *option); 738{; 739 if (fCanvasID == -1) return;; 740 ; 741 R__LOCKGUARD(gROOTMutex);; 742 ; 743 TString opt = option;; 744 opt.ToLower();; 745 if (opt.Contains(""d"")) {; 746 // clear subpads, but do not delete pads in case the canvas; 747 // has been divided (note: option ""D"" is propagated so could cause; 748 // conflicts for primitives using option ""D"" for something else); 749 if (fPrimitives) {; 750 TIter next(fPrimitives);; 751 TObject *obj;; 752 while ((obj=next())) {; 753 obj->Clear(option);; 754 }; 755 }; 756 } else {; 757 //default, clear everything in the canvas. Subpads are deleted; 758 TPad::Clear(option); //Remove primitives from pad; 759 }; 760 ; 761 fSelected = nullptr;; 762 fClickSelected = nullptr;; 763 fSelectedPad = nullptr;; 764 fClickSelectedPad = nullptr;; 765}; 766 ; 767//////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:23981,clear,cleared,23981,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,1,['clear'],['cleared']
Usability,"; 7541 Eval(nparx, fGin, ystst, fU, 4); ++fNfcn;; 7542// try a parabola through ph, pstar, pstst. min = prho; 7543 y1 = (ystar - fSIMPy[jh-1])*rho2;; 7544 y2 = (ystst - fSIMPy[jh-1])*rho1;; 7545 rho = (rho2*y1 - rho1*y2)*.5 / (y1 - y2);; 7546 if (rho < rhomin) goto L66;; 7547 if (rho > rhomax) rho = rhomax;; 7548 for (i = 1; i <= fNpar; ++i) {; 7549 fPrho[i-1] = rho*fPbar[i-1] + (1 - rho)*fP[i + jh*fMaxpar - fMaxpar-1];; 7550 }; 7551 mninex(fPrho);; 7552 Eval(nparx, fGin, yrho, fU, 4); ++fNfcn;; 7553 if (yrho < fSIMPy[jl-1] && yrho < ystst) goto L65;; 7554 if (ystst < fSIMPy[jl-1]) goto L67;; 7555 if (yrho > fSIMPy[jl-1]) goto L66;; 7556// accept minimum point of parabola, PRHO; 7557L65:; 7558 mnrazz(yrho, fPrho, fSIMPy, jh, jl);; 7559 goto L68;; 7560L66:; 7561 if (ystst < fSIMPy[jl-1]) goto L67;; 7562 mnrazz(ystar, fPstar, fSIMPy, jh, jl);; 7563 goto L68;; 7564L67:; 7565 mnrazz(ystst, fPstst, fSIMPy, jh, jl);; 7566L68:; 7567 ++ncycl;; 7568 if (fISW[4] < 2) goto L50;; 7569 if (fISW[4] >= 3 || ncycl % 10 == 0) {; 7570 mnprin(5, fAmin);; 7571 }; 7572 goto L50;; 7573// point * is not as good as jl; 7574L70:; 7575 if (ystar >= fSIMPy[jh-1]) goto L73;; 7576 jhold = jh;; 7577 mnrazz(ystar, fPstar, fSIMPy, jh, jl);; 7578 if (jhold != jh) goto L50;; 7579// calculate new point **; 7580L73:; 7581 for (i = 1; i <= fNpar; ++i) {; 7582 fPstst[i-1] = beta*fP[i + jh*fMaxpar - fMaxpar-1] + (1 - beta)*fPbar[i-1];; 7583 }; 7584 mninex(fPstst);; 7585 Eval(nparx, fGin, ystst, fU, 4); ++fNfcn;; 7586 if (ystst > fSIMPy[jh-1]) goto L1;; 7587// point ** is better than jh; 7588 if (ystst < fAmin) goto L67;; 7589 mnrazz(ystst, fPstst, fSIMPy, jh, jl);; 7590 goto L50;; 7591// end main loop; 7592L76:; 7593 if (fISW[4] >= 0) {; 7594 Printf("" SIMPLEX MINIMIZATION HAS CONVERGED."");; 7595 }; 7596 fISW[3] = 1;; 7597 goto L80;; 7598L78:; 7599 if (fISW[4] >= 0) {; 7600 Printf("" SIMPLEX TERMINATES WITHOUT CONVERGENCE."");; 7601 }; 7602 fCstatu = ""CALL LIMIT"";; 7603 fISW[3] = -1;; 7604 fISW[0] = 1;; 760",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMinuit_8cxx_source.html:242920,SIMPL,SIMPLEX,242920,doc/master/TMinuit_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TMinuit_8cxx_source.html,1,['SIMPL'],['SIMPLEX']
Usability,"; 777 fHistogram->SetLineStyle(GetLineStyle());; 778 fHistogram->SetLineWidth(GetLineWidth());; 779 fHistogram->SetFillColor(GetFillColor());; 780 fHistogram->SetFillStyle(GetFillStyle());; 781 fHistogram->SetMarkerColor(GetMarkerColor());; 782 fHistogram->SetMarkerStyle(GetMarkerStyle());; 783 fHistogram->SetMarkerSize(GetMarkerSize());; 784 fHistogram->SetStats(false);; 785 ; 786//- Draw the histogram; 787 if (!gPad) return;; 788 if (opt.Length() == 0) fHistogram->Paint(""cont3"");; 789 else if (opt == ""same"") fHistogram->Paint(""cont2same"");; 790 else fHistogram->Paint(option);; 791}; 792 ; 793////////////////////////////////////////////////////////////////////////////////; 794/// Save values of function in array fSave; 795 ; 796void TF2::Save(Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax, Double_t, Double_t); 797{; 798 if (!fSave.empty()); 799 fSave.clear();; 800 Int_t npx = fNpx, npy = fNpy;; 801 if ((npx < 2) || (npy < 2)); 802 return;; 803 Double_t dx = (xmax-xmin)/fNpx;; 804 Double_t dy = (ymax-ymin)/fNpy;; 805 if (dx <= 0) {; 806 dx = (fXmax-fXmin)/fNpx;; 807 npx--;; 808 xmin = fXmin + 0.5*dx;; 809 xmax = fXmax - 0.5*dx;; 810 }; 811 if (dy <= 0) {; 812 dy = (fYmax-fYmin)/fNpy;; 813 npy--;; 814 ymin = fYmin + 0.5*dy;; 815 ymax = fYmax - 0.5*dy;; 816 }; 817 ; 818 Int_t nsave = (npx + 1) * (npy + 1);; 819 fSave.resize(nsave + 6);; 820 Double_t xv[2];; 821 Double_t *parameters = GetParameters();; 822 InitArgs(xv, parameters);; 823 for (Int_t j = 0, k = 0; j <= npy; j++) {; 824 xv[1] = ymin + dy*j;; 825 for (Int_t i = 0; i <= npx; i++) {; 826 xv[0] = xmin + dx*i;; 827 fSave[k++] = EvalPar(xv, parameters);; 828 }; 829 }; 830 fSave[nsave+0] = xmin;; 831 fSave[nsave+1] = xmax;; 832 fSave[nsave+2] = ymin;; 833 fSave[nsave+3] = ymax;; 834 fSave[nsave+4] = npx;; 835 fSave[nsave+5] = npy;; 836}; 837 ; 838////////////////////////////////////////////////////////////////////////////////; 839/// Save primitive as a C++ statement(s) on output stream out; 840 ; 841",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF2_8cxx_source.html:28009,clear,clear,28009,doc/master/TF2_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF2_8cxx_source.html,1,['clear'],['clear']
Usability,"; 8 * For the licensing terms see $ROOTSYS/LICENSE. *; 9 * For the list of contributors see $ROOTSYS/README/CREDITS. *; 10 *************************************************************************/; 11 ; 12#ifndef ROOT_TPrincipal; 13#define ROOT_TPrincipal; 14 ; 15#include ""TNamed.h""; 16#include ""TVectorD.h""; 17#include ""TMatrixD.h""; 18 ; 19class TList;; 20 ; 21class TPrincipal : public TNamed {; 22 ; 23protected:; 24 Int_t fNumberOfDataPoints; ///< Number of data points; 25 Int_t fNumberOfVariables; ///< Number of variables; 26 ; 27 TVectorD fMeanValues; ///< Mean value over all data points; 28 TVectorD fSigmas; ///< vector of sigmas; 29 TMatrixD fCovarianceMatrix; ///< Covariance matrix; 30 ; 31 TMatrixD fEigenVectors; ///< Eigenvector matrix of trans; 32 TVectorD fEigenValues; ///< Eigenvalue vector of trans; 33 ; 34 TVectorD fOffDiagonal; ///< Elements of the tridiagonal; 35 ; 36 TVectorD fUserData; ///< Vector of original data points; 37 ; 38 Double_t fTrace; ///< Trace of covarience matrix; 39 ; 40 TList *fHistograms; ///< List of histograms; 41 ; 42 Bool_t fIsNormalised; ///< Normalize matrix?; 43 Bool_t fStoreData; ///< Should we store input data?; 44 ; 45 TPrincipal(const TPrincipal&);; 46 TPrincipal& operator=(const TPrincipal&);; 47 ; 48 void MakeNormalised();; 49 void MakeRealCode(const char *filename, const char *prefix, Option_t *option="""");; 50 ; 51public:; 52 TPrincipal();; 53 ~TPrincipal() override;; 54 TPrincipal(Long64_t nVariables, Option_t *opt=""ND"");; 55 ; 56 virtual void AddRow(const Double_t *x);; 57 void Browse(TBrowser *b) override;; 58 void Clear(Option_t *option="""") override;; 59 /// Return the covariance matrix. \note Only the lower diagonal of the covariance matrix is computed by the class; 60 const TMatrixD *GetCovarianceMatrix() const {return &fCovarianceMatrix;}; 61 const TVectorD *GetEigenValues() const {return &fEigenValues;}; 62 const TMatrixD *GetEigenVectors() const {return &fEigenVectors;}; 63 TList *GetHistograms() const {retu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPrincipal_8h_source.html:2025,Clear,Clear,2025,doc/master/TPrincipal_8h_source.html,https://root.cern,https://root.cern/doc/master/TPrincipal_8h_source.html,1,['Clear'],['Clear']
Usability,"; 876 public:; 877 clangDiagSuppr(clang::DiagnosticsEngine& diag): fDiagEngine(diag){; 878 fOldDiagValue = fDiagEngine.getIgnoreAllWarnings();; 879 fDiagEngine.setIgnoreAllWarnings(true);; 880 }; 881 ; 882 ~clangDiagSuppr() {; 883 fDiagEngine.setIgnoreAllWarnings(fOldDiagValue);; 884 }; 885 private:; 886 clang::DiagnosticsEngine& fDiagEngine;; 887 bool fOldDiagValue;; 888 };; 889 ; 890}; 891 ; 892////////////////////////////////////////////////////////////////////////////////; 893/// Allow calling autoparsing from TMetaUtils; 894bool TClingLookupHelper__AutoParse(const char *cname); 895{; 896 return gCling->AutoParse(cname);; 897}; 898 ; 899////////////////////////////////////////////////////////////////////////////////; 900/// Try hard to avoid looking up in the Cling database as this could enduce; 901/// an unwanted autoparsing.; 902 ; 903bool TClingLookupHelper__ExistingTypeCheck(const std::string &tname,; 904 std::string &result); 905{; 906 result.clear();; 907 ; 908 unsigned long offset = 0;; 909 if (strncmp(tname.c_str(), ""const "", 6) == 0) {; 910 offset = 6;; 911 }; 912 unsigned long end = tname.length();; 913 while( end && (tname[end-1]=='&' || tname[end-1]=='*' || tname[end-1]==']') ) {; 914 if ( tname[end-1]==']' ) {; 915 --end;; 916 while ( end && tname[end-1]!='[' ) --end;; 917 }; 918 --end;; 919 }; 920 std::string innerbuf;; 921 const char *inner;; 922 if (end != tname.length()) {; 923 innerbuf = tname.substr(offset,end-offset);; 924 inner = innerbuf.c_str();; 925 } else {; 926 inner = tname.c_str()+offset;; 927 }; 928 ; 929 //if (strchr(tname.c_str(),'[')!=0) fprintf(stderr,""DEBUG: checking on %s vs %s %lu %lu\n"",tname.c_str(),inner,offset,end);; 930 if (gROOT->GetListOfClasses()->FindObject(inner); 931 || TClassTable::Check(inner,result) ) {; 932 // This is a known class.; 933 return true;; 934 }; 935 ; 936 THashTable *typeTable = dynamic_cast<THashTable*>( gROOT->GetListOfTypes() );; 937 TDataType *type = (TDataType *)typeTable->THashTable::FindObject",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCling_8cxx_source.html:32092,clear,clear,32092,doc/master/TCling_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCling_8cxx_source.html,1,['clear'],['clear']
Usability,"; 9 ; 10#include <vector>; 11#include <utility>; 12 ; 13class TBuffer;; 14class TVirtualObject;; 15class TObjArray;; 16 ; 17namespace ROOT {; 18 ; 19 class TSchemaRule : public TObject; 20 {; 21 public:; 22 ; 23 class TSources : public TNamed {; 24 private:; 25 TString fDimensions;; 26 public:; 27 TSources(const char *name = nullptr, const char *title = nullptr, const char *dims = nullptr) : TNamed(name,title), fDimensions(dims) {}; 28 const char *GetDimensions() { return fDimensions; }; 29 ; 30 ClassDefOverride(TSources,2);; 31 };; 32 ; 33 typedef enum; 34 {; 35 kReadRule = 0,; 36 kReadRawRule = 1,; 37 kNone = 99999; 38 } RuleType_t;; 39 ; 40 typedef void (*ReadFuncPtr_t)( char*, TVirtualObject* );; 41 typedef void (*ReadRawFuncPtr_t)( char*, TBuffer&);; 42 ; 43 TSchemaRule();; 44 virtual ~TSchemaRule();; 45 ; 46 TSchemaRule( const TSchemaRule& rhs );; 47 TSchemaRule& operator = ( const TSchemaRule& rhs );; 48 Bool_t operator == ( const TSchemaRule& rhs ) const;; 49 ; 50 ; 51 void Clear(Option_t * /*option*/ ="""") override;; 52 Bool_t SetFromRule( const char *rule );; 53 ; 54 const char *GetVersion( ) const;; 55 Bool_t SetVersion( const TString& version );; 56 Bool_t TestVersion( Int_t version ) const;; 57 Bool_t SetChecksum( const TString& checksum );; 58 Bool_t TestChecksum( UInt_t checksum ) const;; 59 void SetSourceClass( const TString& classname );; 60 const char *GetSourceClass() const;; 61 void SetTargetClass( const TString& classname );; 62 const char *GetTargetClass() const;; 63 void SetTarget( const TString& target );; 64 const TObjArray* GetTarget() const;; 65 const char *GetTargetString() const;; 66 void SetSource( const TString& source );; 67 const TObjArray* GetSource() const;; 68 void SetEmbed( Bool_t embed );; 69 Bool_t GetEmbed() const;; 70 Bool_t IsAliasRule() const;; 71 Bool_t IsRenameRule() const;; 72 Bool_t IsValid() const;; 73 void SetCode( const TString& code );; 74 const char *GetCode() const;; 75 void SetAttributes( const TString& attributes",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8h_source.html:1354,Clear,Clear,1354,doc/master/TSchemaRule_8h_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8h_source.html,1,['Clear'],['Clear']
Usability,"; 903 Int_t code = 0;; 904 if (x < xcl1) code = code | 0x1;; 905 if (x > xcl2) code = code | 0x2;; 906 if (y < ycl1) code = code | 0x4;; 907 if (y > ycl2) code = code | 0x8;; 908 return code;; 909}; 910 ; 911////////////////////////////////////////////////////////////////////////////////; 912/// Clip polygon using the Sutherland-Hodgman algorithm.; 913///; 914/// \param[in] n Number of points in the polygon to; 915/// be clipped; 916/// \param[in] x,y Polygon x[n], y[n] do be clipped vertices; 917/// \param[in] xclipl,yclipb,xclipr,yclipt Clipping boundary; 918/// \param[out] nn Number of points in xc and yc; 919/// \param[out] xc,yc Clipped polygon vertices. The Int_t; 920/// returned by this function is; 921/// the number of points in the clipped; 922/// polygon. These vectors must; 923/// be allocated by the calling function.; 924/// A size of 2*n for each is; 925/// enough.; 926///; 927/// Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; 928/// strategy: It solves a series of simple and identical problems that, when; 929/// combined, solve the overall problem. The simple problem is to clip a polygon; 930/// against a single infinite clip edge. Four clip edges, each defining one boundary; 931/// of the clip rectangle, successively clip a polygon against a clip rectangle.; 932///; 933/// Steps of Sutherland-Hodgman's polygon-clipping algorithm:; 934///; 935/// * Polygons can be clipped against each edge of the window one at a time.; 936/// Windows/edge intersections, if any, are easy to find since the X or Y coordinates; 937/// are already known.; 938/// * Vertices which are kept after clipping against one window edge are saved for; 939/// clipping against the remaining edges.; 940/// * Note that the number of vertices usually changes and will often increases.; 941///; 942/// The clip boundary determines a visible and invisible region. The edges from; 943/// vertex i to vertex i+1 can be one of four types:; 944///; 945/// * Case 1 : W",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:29064,simpl,simple,29064,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['simpl'],['simple']
Usability,"; 942 ClearThreadData();; 943 }; 944 fMaxThreads = nthreads + 1;; 945 if (fMaxThreads > 0) {; 946 fMultiThread = kTRUE;; 947 CreateThreadData();; 948 }; 949}; 950 ; 951////////////////////////////////////////////////////////////////////////////////; 952 ; 953void TGeoManager::ClearThreadData() const; 954{; 955 if (!fMaxThreads); 956 return;; 957 fgMutex.lock();; 958 TIter next(fVolumes);; 959 TGeoVolume *vol;; 960 while ((vol = (TGeoVolume *)next())); 961 vol->ClearThreadData();; 962 fgMutex.unlock();; 963}; 964 ; 965////////////////////////////////////////////////////////////////////////////////; 966/// Create thread private data for all geometry objects.; 967 ; 968void TGeoManager::CreateThreadData() const; 969{; 970 if (!fMaxThreads); 971 return;; 972 fgMutex.lock();; 973 TIter next(fVolumes);; 974 TGeoVolume *vol;; 975 while ((vol = (TGeoVolume *)next())); 976 vol->CreateThreadData(fMaxThreads);; 977 fgMutex.unlock();; 978}; 979 ; 980////////////////////////////////////////////////////////////////////////////////; 981/// Clear the current map of threads. This will be filled again by the calling; 982/// threads via ThreadId calls.; 983 ; 984void TGeoManager::ClearThreadsMap(); 985{; 986 if (gGeoManager && !gGeoManager->IsMultiThread()); 987 return;; 988 fgMutex.lock();; 989 if (!fgThreadId->empty()); 990 fgThreadId->clear();; 991 fgNumThreads = 0;; 992 fgMutex.unlock();; 993}; 994 ; 995////////////////////////////////////////////////////////////////////////////////; 996/// Translates the current thread id to an ordinal number. This can be used to; 997/// manage data which is specific for a given thread.; 998 ; 999Int_t TGeoManager::ThreadId(); 1000{; 1001 TTHREAD_TLS(Int_t) tid = -1;; 1002 Int_t ttid = tid; // TTHREAD_TLS_GET(Int_t,tid);; 1003 if (ttid > -1); 1004 return ttid;; 1005 if (gGeoManager && !gGeoManager->IsMultiThread()); 1006 return 0;; 1007 std::thread::id threadId = std::this_thread::get_id();; 1008 TGeoManager::ThreadsMapIt_t it = fgThreadId->find(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:35585,Clear,Clear,35585,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,1,['Clear'],['Clear']
Usability,"; : 19 | 0.509836 0.557055 0.617073 0.042121 4348.19 0; : 20 | 0.510257 0.574511 0.617241 0.0402784 4333.04 1; : ; : Elapsed time for training with 3200 events: 12.3 sec ; : Evaluate deep neural network on CPU using batches with size = 100; : ; TMVA_LSTM : [dataset] : Evaluation of TMVA_LSTM on training sample (3200 events); : Elapsed time for evaluation of 3200 events: 0.22 sec ; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_TMVA_LSTM.class.C␛[0m; Factory : Training finished; : ; Factory : Train method: TMVA_DNN for Classification; : ; : Start of deep neural network training on CPU using MT, nthreads = 4; : ; : ***** Deep Learning Network *****; DEEP NEURAL NETWORK: Depth = 4 Input = ( 1, 1, 300 ) Batch size = 256 Loss function = C; Layer 0 DENSE Layer: ( Input = 300 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 1 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 2 DENSE Layer: ( Input = 64 , Width = 64 ) Output = ( 1 , 256 , 64 ) Activation Function = Tanh; Layer 3 DENSE Layer: ( Input = 64 , Width = 1 ) Output = ( 1 , 256 , 1 ) Activation Function = Identity; : Using 2560 events for training and 640 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 0.7616; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 0.731202 0.712689 0.193045 0.0157486 14439.1 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.701214 0.698536 0.191577 0.0154545 14535.3 0; : 3 Minimum Test error f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:18030,Learn,Learning,18030,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"; : Creating xml weight file: ␛[0;36mdataset/weights/TMVAClassification_CutsD.weights.xml␛[0m; : Creating standalone class: ␛[0;36mdataset/weights/TMVAClassification_CutsD.class.C␛[0m; : TMVAC.root:/dataset/Method_Cuts/CutsD; Factory : Training finished; : ; Factory : Train method: Likelihood for Classification; : ; : ; : ␛[1m================================================================␛[0m; : ␛[1mH e l p f o r M V A m e t h o d [ Likelihood ] :␛[0m; : ; : ␛[1m--- Short description:␛[0m; : ; : The maximum-likelihood classifier models the data with probability ; : density functions (PDF) reproducing the signal and background; : distributions of the input variables. Correlations among the ; : variables are ignored.; : ; : ␛[1m--- Performance optimisation:␛[0m; : ; : Required for good performance are decorrelated input variables; : (PCA transformation via the option ""VarTransform=Decorrelate""; : may be tried). Irreducible non-linear correlations may be reduced; : by precombining strongly correlated input variables, or by simply; : removing one of the variables.; : ; : ␛[1m--- Performance tuning via configuration options:␛[0m; : ; : High fidelity PDF estimates are mandatory, i.e., sufficient training ; : statistics is required to populate the tails of the distributions; : It would be a surprise if the default Spline or KDE kernel parameters; : provide a satisfying fit to the data. The user is advised to properly; : tune the events per bin and smooth options in the spline cases; : individually per variable. If the KDE kernel is used, the adaptive; : Gaussian kernel may lead to artefacts, so please always also try; : the non-adaptive one.; : ; : All tuning parameters must be adjusted individually for each input; : variable!; : ; : <Suppress this message by specifying ""!H"" in the booking option>; : ␛[1m================================================================␛[0m; : ; : Filling reference histograms; : Building PDF out of reference histograms; : Elapsed time for t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:28320,simpl,simply,28320,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simply']
Usability,"; ; // Let's first create a RDF that will read from the CSV file.; // See the tutorial (https://root.cern/doc/master/df014__CSVDataSource_8C.html) on CSV data sources for more details!; auto fileNameUrl = ""http://root.cern/files/tutorials/df014_CsvDataSource_MuRun2010B.csv"";; auto fileName = ""df015_CsvDataSource_MuRun2010B.csv"";; if(gSystem->AccessPathName(fileName)); TFile::Cp(fileNameUrl, fileName);; ; auto csv_rdf = FromCSV(fileName);; ; // Now we take out two columns: px and py of the first muon in the muon pair; std::string px1Name = ""px1"";; auto px1 = csv_rdf.Take<double>(px1Name);; std::string py1Name = ""py1"";; auto py1 = csv_rdf.Take<double>(py1Name);; ; // Now we create a new dataframe built on top of the columns above. Note that up to now, no event loop; // has been carried out!; auto df = MakeLazyDataFrame(std::make_pair(px1Name, px1), std::make_pair(py1Name, py1));; ; // We build a histogram of the transverse momentum of the muons.; auto ptFormula = [](double px, double py) { return sqrt(px * px + py * py); };; auto pt_h = df.Define(""pt"", ptFormula, {""px1"", ""py1""}); .Histo1D<double>({""pt"", ""Muon p_{T};p_{T} [GeV/c];"", 128, 0, 128}, ""pt"");; ; auto can = new TCanvas();; can->SetLogy();; pt_h->DrawCopy();; ; return 0;; }; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDFDefinition RArrowDS.hxx:28; . DateFebruary 2018 ; AuthorDanilo Piparo (CERN) ; Definition in file df015_LazyDataSource.C. tutorialsdataframedf015_LazyDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df015__LazyDataSource_8C.html:2786,Guid,Guide,2786,doc/master/df015__LazyDataSource_8C.html,https://root.cern,https://root.cern/doc/master/df015__LazyDataSource_8C.html,1,['Guid'],['Guide']
Usability,"; ; h2bh->Draw(""hbar min0 same"");; }. TH2Poly Drawing; The following options are supported:. Option Description . ""SCAT"" Draw a scatter plot (legacy draw option). . ""COL"" Draw a color plot. All the bins are painted even the empty bins (default). . ""COLZ"" Same as ""COL"". In addition the color palette is also drawn. . ""0"" When used with any COL options, the empty bins are not drawn. . ""TEXT"" Draw bin contents as text (format set via gStyle->SetPaintTextFormat). . ""TEXTN"" Draw bin names as text. . ""TEXTnn"" Draw bin contents as text at angle nn (0 < nn <= 90). . ""L"" Draw the bins boundaries as lines. The lines attributes are the TGraphs ones. . ""P"" Draw the bins boundaries as markers. The markers attributes are the TGraphs ones. . ""F"" Draw the bins boundaries as filled polygons. The filled polygons attributes are the TGraphs ones. . TH2Poly can be drawn as a color plot (option COL). TH2Poly bins can have any shapes. The bins are defined as graphs. The following macro is a very simple example showing how to book a TH2Poly and draw it.; {; auto ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; auto h2p = new TH2Poly();; h2p->SetName(""h2poly_name"");; h2p->SetTitle(""h2poly_title"");; double px1[] = {0, 5, 6};; double py1[] = {0, 0, 5};; double px2[] = {0, -1, -1, 0};; double py2[] = {0, 0, -1, 3};; double px3[] = {4, 3, 0, 1, 2.4};; double py3[] = {4, 3.7, 1, 3.7, 2.5};; h2p->AddBin(3, px1, py1);; h2p->AddBin(4, px2, py2);; h2p->AddBin(5, px3, py3);; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; double fx[] = {0.1, -0.5, -0.7, 1};; double fy[] = {0.01, -0.5, -0.5, 3};; double fw[] = {3, 1, 1, 1.5};; h2p->FillN(4, fx, fy, fw);; h2p->Draw(""col"");; }; TH2Poly2D Histogram with Polygonal BinsDefinition TH2Poly.h:66. Rectangular bins are a frequent case. The special version of the AddBin method allows to define them more easily like shown in the following example (th2polyBoxes.C).; ; TCanvas *th2polyBoxes() {; TCanvas *ch2p2 = n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHistPainter.html:102721,simpl,simple,102721,doc/master/classTHistPainter.html,https://root.cern,https://root.cern/doc/master/classTHistPainter.html,1,['simpl'],['simple']
Usability,"; ; void rf212_plottingInRanges_blinding(); {; // Make a fit model; RooRealVar x(""x"", ""The observable"", 1, 30);; RooRealVar tau(""tau"", ""The exponent"", -0.1337, -10., -0.1);; RooExponential expo(""expo"", ""A falling exponential function"", x, tau);; ; // Define the sidebands (e.g. background regions); x.setRange(""full"", 1, 30);; x.setRange(""left"", 1, 10);; x.setRange(""right"", 20, 30);; ; // Generate toy data, and cut out the blinded region.; std::unique_ptr<RooDataSet> data{expo.generate(x, 1000)};; std::unique_ptr<RooAbsData> blindedData{data->reduce(CutRange(""left,right""))};; ; // Kick tau a bit, and run an unbinned fit where the blinded data are missing.; // ----------------------------------------------------------------------------------------------------------; // The fit should be done only in the unblinded regions, otherwise it would; // try to make the model adapt to the empty bins in the blinded region.; tau.setVal(-2.);; expo.fitTo(*blindedData, Range(""left,right""), PrintLevel(-1));; ; // Clear the ""fitrange"" attribute of the PDF. Otherwise, the fitrange would; // be automatically taken as the NormRange() for plotting. We want to avoid; // this, because the point of this tutorial is to show what can go wrong when; // the NormRange() is not specified.; expo.removeStringAttribute(""fitrange"");; ; ; // Here we will plot the results; TCanvas *canvas=new TCanvas(""canvas"",""canvas"",800,600);; canvas->Divide(2,1);; ; ; // Wrong:; // ----------------------------------------------------------------------------------------------------------; // Plotting each slice on its own normalises the PDF over its plotting range. For the full curve, that means; // that the blinded region where data is missing is included in the normalisation calculation. The PDF therefore; // comes out too low, and doesn't match up with the slices in the side bands, which are normalised to ""their"" data.; ; std::cout << ""Now plotting with unique normalisation for each slice."" << std::endl;; canvas->c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8C.html:1998,Clear,Clear,1998,doc/master/rf212__plottingInRanges__blinding_8C.html,https://root.cern,https://root.cern/doc/master/rf212__plottingInRanges__blinding_8C.html,1,['Clear'],['Clear']
Usability,"; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Code Owners. ROOT consists of several loosely coupled but consistently designed parts. The ""code owners"" of these parts are experts that review pull requests and guide these packages over a couple of years.; An up-to-date, detailed mapping of code versus owners can be found at https://github.com/root-project/root/blob/master/.github/CODEOWNERS. The long-term, coarse list can be found below:; Module; Code Owner; I/O; Philippe Canal (Fermilab);  •  Compression; Oksana Shadura (Nebraska-Lincoln); Math, Statistics, Machine Learning; Lorenzo Moneta (CERN);  •  RooFit; Wouter Verkerke (NIKHEF), Stephan Hageboeck (CERN);  •  New histograms (RHist); Hadrien Grasland (LAL), Axel Naumann (CERN); Graphics; Olivier Couet (CERN), Sergey Linev (GSI); RDataFrame; Enrico Guiraud (CERN); Web-GUI, http Server; Sergey Linev (GSI), Bertrand Bellenot (CERN); Event Display; Matevz Tadel (UCSD), Alja Mrak-Tadel (UCSD); PyROOT; Enric Tejedor (CERN); cling; Axel Naumann (CERN); Build System; Oksana Shadura (Nebraska-Lincoln); C++ Modules; Vassil Vassilev (Princeton), Oksana Shadura (Nebraska-Lincoln); Documentation; Olivier Couet (CERN). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/code-owners.html:2385,Learn,Learning,2385,d/code-owners.html,https://root.cern,https://root.cern/d/code-owners.html,1,['Learn'],['Learning']
Usability,"; Adds a new bin to the histogram. The number of vertices and their (x,y); coordinates are required as input. It returns the bin number in the; histogram. Int_t AddBin(Double_t x1, Double_t y1, Double_t x2, Double_t y2); Add a new bin to the histogram. The bin shape is a rectangle.; It returns the bin number of the bin in the histogram. void Add(const TH1* h1, Double_t c1); Performs the operation: this = this + c1*h1. void Add(TF1* h1, Double_t c1 = 1, Option_t* option = """"); Performs the operation: this = this + c1*f1. void Add(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1); Replace contents of this histogram by the addition of h1 and h2. void AddBinToPartition(TH2PolyBin* bin); Adds the input bin into the partition cell matrix. This method is called; in AddBin() and ChangePartition(). void ChangePartition(Int_t n, Int_t m); Changes the number of partition cells in the histogram.; Deletes the old partition and constructs a new one. void ClearBinContents(); Clears the contents of all bins in the histogram. void Reset(Option_t* option); Reset this histogram: contents, errors, etc. TH1 * DrawCopy(Option_t* option = """") const; Draw copy. Int_t FindBin(Double_t x, Double_t y, Double_t z = 0); Returns the bin number of the bin at the given coordinate. -1 to -9 are; the overflow and underflow bins. overflow bin -5 is the unbinned areas in; the histogram (also called ""the sea""). The third parameter can be left; blank.; The overflow/underflow bins are:. -1 | -2 | -3. -4 | -5 | -6. -7 | -8 | -9. where -5 means is the ""sea"" bin (i.e. unbinned areas). Int_t Fill(Double_t x, Double_t y); Increment the bin containing (x,y) by 1.; Uses the partitioning algorithm. Int_t Fill(Double_t x, Double_t y, Double_t w); Increment the bin containing (x,y) by w.; Uses the partitioning algorithm. Int_t Fill(const char* name, Double_t w); Increment the bin named ""name"" by w. void FillN(Int_t ntimes, const Double_t* x, const Double_t* y, const Double_t* w, Int_t stride = 1); Fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TH2Poly.html:32574,Clear,ClearBinContents,32574,root/html530/TH2Poly.html,https://root.cern,https://root.cern/root/html530/TH2Poly.html,4,['Clear'],"['ClearBinContents', 'Clears']"
Usability,"; AdoptMemberStreamer(const char *name, TMemberStreamer *strm)TClass; AdoptReferenceProxy(TVirtualRefProxy *proxy)TClass; AdoptSchemaRules(ROOT::Detail::TSchemaRuleSet *rules)TClass; AdoptStreamer(TClassStreamer *strm)TClass; AppendPad(Option_t *option="""")TObjectvirtual; AutoBrowse(TObject *obj, TBrowser *browser)TClassstatic; Browse(TBrowser *b) overrideTClassvirtual; Browse(void *obj, TBrowser *b) constTClass; BuildEmulatedRealData(const char *name, Longptr_t offset, TClass *cl, Bool_t isTransient=kFALSE)TClass; BuildRealData(void *pointer=nullptr, Bool_t isTransient=kFALSE)TClass; CalculateStreamerOffset() constTClass; CallShowMembers(const void *obj, TMemberInspector &insp, Bool_t isTransient=kFALSE) constTClass; CanIgnoreTObjectStreamer()TClassinline; CanSplit() constTClass; CanSplitBaseAllow()TClassprivate; CheckedHash()TObjectinline; Class()TClassstatic; Class_Name()TClassstatic; Class_Version()TClassinlinestatic; ClassName() constTObjectvirtual; ClassProperty() constTClass; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTClassvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; ConvSIMap_t typedefTClassprivate; ConvStreamerInstrumented(const TClass *pThis, void *object, TBuffer &b, const TClass *onfile_class)TClassprivatestatic; Copy(TObject &named) const overrideTNamedvirtual; CopyCollectionProxy(const TVirtualCollectionProxy &)TClass; CreateAttributeMap()TDictionary; CreateListOfDataMembers(std::atomic< TListOfDataMembers * > &data, TDictionary::EMemberSelection selection, bool load)TClassprivate; DeclFileName()TClassinlinestatic; DeclId_t typedefTDictionary; Delete(Option_t *option="""")TObjectvirtual; DeleteArray(void *ary, Bool_t dtorOnly=kFALSE)TClass; DeleteArray(ObjectPtr ary, Bool_t dtorOnly=kFALSE)TClass; Destructor(void *obj, Bool_t dtorOnly=kFALSE)TClass; Destructor(ObjectPtr obj, Bool_t dtorOnly=kFALSE)TClass; DetermineCurrentStreamerInfo()TClassprivate; DistancetoPrimitive(Int_t px, Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClass-members.html:1538,Clear,Clear,1538,doc/master/classTClass-members.html,https://root.cern,https://root.cern/doc/master/classTClass-members.html,1,['Clear'],['Clear']
Usability,"; Architecture=arch,; ); ; # Keras DL; if useKeras:; ROOT.Info(""TMVA_Higgs_Classification"", ""Building Deep Learning keras model""); # create Keras model with 4 layers of 64 units and relu activations; import tensorflow; from tensorflow.keras.models import Sequential; from tensorflow.keras.optimizers import Adam; from tensorflow.keras.layers import Input, Dense; ; model = Sequential(); model.add(Dense(64, activation=""relu"", input_dim=7)); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(64, activation=""relu"")); model.add(Dense(2, activation=""sigmoid"")); model.compile(loss=""binary_crossentropy"", optimizer=Adam(learning_rate=0.001), weighted_metrics=[""accuracy""]); model.save(""model_higgs.h5""); model.summary(); ; if not os.path.exists(""model_higgs.h5""):; raise FileNotFoundError(""Error creating Keras model file - skip using Keras""); else:; # book PyKeras method only if Keras model could be created; ROOT.Info(""TMVA_Higgs_Classification"", ""Booking Deep Learning keras model""); factory.BookMethod(; loader,; TMVA.Types.kPyKeras,; ""PyKeras"",; H=True,; V=False,; VarTransform=None,; FilenameModel=""model_higgs.h5"",; FilenameTrainedModel=""trained_model_higgs.h5"",; NumEpochs=20,; BatchSize=100,; ); # GpuOptions=""allow_growth=True"",; # ) # needed for RTX NVidia card and to avoid TF allocates all GPU memory; ; ; ## Train Methods; ; # Here we train all the previously booked methods.; ; factory.TrainAllMethods(); ## Test all methods; ; # Now we test and evaluate all methods using the test data set; factory.TestAllMethods(); ; factory.EvaluateAllMethods(); ; # after we get the ROC curve and we display; ; c1 = factory.GetROCCurve(loader); c1.Draw(); # at the end we close the output file which contains the evaluation result of all methods and it can be used by TMVAGUI; # to display additional plots; ; outputFile.Close(); TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompres",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html:67330,Learn,Learning,67330,doc/master/TMVA__Higgs__Classification_8py.html,https://root.cern,https://root.cern/doc/master/TMVA__Higgs__Classification_8py.html,1,['Learn'],['Learning']
Usability,"; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSpectrum2Painter.html:18308,Simpl,Simple,18308,root/html528/TSpectrum2Painter.html,https://root.cern,https://root.cern/root/html528/TSpectrum2Painter.html,6,['Simpl'],['Simple']
Usability,"; Bool_tRooAbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<string,string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Tue Jun 2 15:29:53 2015 » Last generated: 2015-06-02 15:29; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooChangeTracker.html:38551,clear,clearState,38551,root/html604/RooChangeTracker.html,https://root.cern,https://root.cern/root/html604/RooChangeTracker.html,4,['clear'],"['clearState', 'cleared']"
Usability,"; Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsArg::dependentOverlaps(const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooThresholdCategory.html:2177,clear,clearValueAndShapeDirty,2177,root/html532/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html532/RooThresholdCategory.html,1,['clear'],['clearValueAndShapeDirty']
Usability,; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 11. Done!. Congratulations for finishing the tutorials! Here are a few relevant pointers on where to go from here:; The forum; Bug reports - also for bugs in this workshop!; The ROOT's tutorials - you find them in $ROOTSYS/tutorials; We hope to hear from you!; Your ROOT team. . ‹ TutorialSelector.C; up. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/11-done.html:2580,Guid,Guides,2580,d/11-done.html,https://root.cern,https://root.cern/d/11-done.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"; Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h).",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSessionFrame.html:23240,Clear,Clear,23240,root/html602/TSessionFrame.html,https://root.cern,https://root.cern/root/html602/TSessionFrame.html,2,['Clear'],['Clear']
Usability,"; Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void CheckAutoEnPack(Bool_t checked = kTRUE). TGTa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TSessionFrame.html:22281,Clear,Clear,22281,root/html534/TSessionFrame.html,https://root.cern,https://root.cern/root/html534/TSessionFrame.html,1,['Clear'],['Clear']
Usability,"; Class Hierarchy. Search. Source:; header file; source file; viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TMVA; » TMVA::QuickMVAProbEstimator. class TMVA::QuickMVAProbEstimator. Function Members (Methods); public:. virtual~QuickMVAProbEstimator(); voidAddEvent(Double_t val, Double_t weight, Int_t type); static TClass*Class(); static boolcompare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); Double_tGetMVAProbAt(Double_t value); virtual TClass*IsA() const; TMVA::QuickMVAProbEstimator&operator=(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(const TMVA::QuickMVAProbEstimator&); TMVA::QuickMVAProbEstimatorQuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); virtual voidShowMembers(TMemberInspector&); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). private:. TMVA::MsgLogger&Log() const. Data Members; private:. vector<EventInfo>fEvtVector; Bool_tfIsSorted; TMVA::MsgLogger*fLogger; UInt_tfNMax; UInt_tfNMin. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void AddEvent(Double_t val, Double_t weight, Int_t type). Double_t GetMVAProbAt(Double_t value); Well.. if it's fast is actually another question all together, merely; it's a quick and dirty simple kNN approach to the 1-Dim signal/backgr. MVA; distributions. bool compare(TMVA::QuickMVAProbEstimator::EventInfo e1, TMVA::QuickMVAProbEstimator::EventInfo e2); {return e1.eventValue < e2.eventValue;}. QuickMVAProbEstimator(Int_t nMin = 40, Int_t nMax = 5000); { fLogger = new MsgLogger(""QuickMVAProbEstimator"");}. virtual ~QuickMVAProbEstimator(); {delete fLogger;}. » Last changed: Tue Sep 8 17:04:43 2015 » Last generated: 2015-09-08 17:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMVA__QuickMVAProbEstimator.html:1465,simpl,simple,1465,root/html534/TMVA__QuickMVAProbEstimator.html,https://root.cern,https://root.cern/root/html534/TMVA__QuickMVAProbEstimator.html,1,['simpl'],['simple']
Usability,"; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » ROOT 6 Analysis Workshop 0. Setting up ROOT. Downloading; If you don't have ROOT yet, download it! We have binaries but you can also build it yourself.; Environment Variables; ROOT expects ROOTSYS, PATH and LD_LIBRARY_PATH to be set correctly. If which root does not show anything then use the script that does all of that:; source wherever/root/is/bin/thisroot.sh. Starting ROOT; Now you can start ROOT using root or root -l to suppress the logo. See root --help for more options. . ‹ ROOT 6 Analysis Workshop; up; 1. Extracting an object from a TFile ›. Navigate through this book; 0. Setting up ROOT; 1. Extracting an object from a TFile; 2. Running code in ROOT; 4. Histogramming; 3. Examining a TTree's data; 5. Fitting; 6. Multivariate Analysis; 7. Using the TTreeReader; 8. Efficiency Calculation; 9. Fitting By Coding; 10. Go Parallel!; TutorialSelector.C; 11. Done!. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/0-setting-root.html:2815,Guid,Guides,2815,d/0-setting-root.html,https://root.cern,https://root.cern/d/0-setting-root.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"; Create a volume in GEANT3 style.; NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. TGeoVolume * Volume(const char* name, const char* shape, Int_t nmed, Double_t* upar, Int_t npar = 0); Create a volume in GEANT3 style.; NAME Volume name; SHAPE Volume type; NMED Tracking medium number; NPAR Number of shape parameters; UPAR Vector containing shape parameters. void SetAllIndex(); Assigns uid's for all materials,media and matrices. void ClearAttributes(); Reset all attributes to default ones. Default attributes for visualization; are those defined before closing the geometry. void CloseGeometry(Option_t* option = ""d""); Closing geometry implies checking the geometry validity, fixing shapes; with negative parameters (run-time shapes)building the cache manager,; voxelizing all volumes, counting the total number of physical nodes and; registring the manager class to the browser. void ClearOverlaps(); Clear the list of overlaps. void ClearShape(const TGeoShape* shape); Remove a shape from the list of shapes. void CleanGarbage(); Clean temporary volumes and shapes from garbage collection. void CdNode(Int_t nodeid); Change current path to point to the node having this id.; Node id has to be in range : 0 to fNNodes-1 (no check for performance reasons). Int_t GetCurrentNodeId() const; Get the unique ID of the current node. void CdTop(); Make top level node the current node. Updates the cache accordingly.; Determine the overlapping state of current node. void CdUp(); Go one level up in geometry. Updates cache accordingly.; Determine the overlapping state of current node. void CdDown(Int_t index); Make a daughter of current node current. Can be called only with a valid; daughter index (no check). Updates cache accordingly. void CdNext(); Do a cd to the node found next by FindNextBoundary. Bool_t cd(const char* path = """"); Browse the tree of nodes starting from fTopNode according to pathname",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:43807,Clear,ClearOverlaps,43807,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,12,['Clear'],"['Clear', 'ClearOverlaps']"
Usability,"; Definition at line 212 of file DecisionTree.h. ◆ fSepType. SeparationBase* TMVA::DecisionTree::fSepType. private . the separation criteria ; Definition at line 211 of file DecisionTree.h. ◆ fSigClass. UInt_t TMVA::DecisionTree::fSigClass. private . class which is treated as signal when building the tree ; Definition at line 235 of file DecisionTree.h. ◆ fTreeID. Int_t TMVA::DecisionTree::fTreeID. private . just an ID number given to the tree.. makes debugging easier as tree knows who he is. ; Definition at line 237 of file DecisionTree.h. ◆ fUseExclusiveVars. Bool_t TMVA::DecisionTree::fUseExclusiveVars. private . individual variables already used in fisher criterium are not anymore analysed individually for node splitting ; Definition at line 209 of file DecisionTree.h. ◆ fUseFisherCuts. Bool_t TMVA::DecisionTree::fUseFisherCuts. private . use multivariate splits using the Fisher criterium ; Definition at line 207 of file DecisionTree.h. ◆ fUseNvars. Int_t TMVA::DecisionTree::fUseNvars. private . the number of variables used in randomised trees; ; Definition at line 227 of file DecisionTree.h. ◆ fUsePoissonNvars. Bool_t TMVA::DecisionTree::fUsePoissonNvars. private . use ""fUseNvars"" not as fixed number but as mean of a poisson distr. in each split ; Definition at line 228 of file DecisionTree.h. ◆ fUseSearchTree. Bool_t TMVA::DecisionTree::fUseSearchTree. private . cut scan done with binary trees or simple event loop. ; Definition at line 218 of file DecisionTree.h. ◆ fVariableImportance. std::vector< Double_t > TMVA::DecisionTree::fVariableImportance. private . the relative importance of the different variables ; Definition at line 232 of file DecisionTree.h. Libraries for TMVA::DecisionTree:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DecisionTree.h; tmva/tmva/src/DecisionTree.cxx. TMVADecisionTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html:31689,simpl,simple,31689,doc/master/classTMVA_1_1DecisionTree.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTree.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,; Definition at line 224 of file DLMinimizers.h. Member Data Documentation. ◆ fBatchSize. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fBatchSize. private . Batch size to use for the training. ; Definition at line 72 of file DLMinimizers.h. ◆ fConvergenceCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fConvergenceCount. private . Current number of training epochs without. ; considerable decrease in the test error. ; Definition at line 76 of file DLMinimizers.h. ◆ fConvergenceSteps. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fConvergenceSteps. private . Number of training epochs without considerable. ; decrease in the test error for convergence. ; Definition at line 74 of file DLMinimizers.h. ◆ fLearningRate. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fLearningRate. private . Learning rate \(\alpha\). ; Definition at line 81 of file DLMinimizers.h. ◆ fMinimumError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fMinimumError. private . The minimum loss achieved on the training set during the current training session. ; Definition at line 82 of file DLMinimizers.h. ◆ fStepCount. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fStepCount. private . Number of steps performed in the current training session. ; Definition at line 73 of file DLMinimizers.h. ◆ fTestError. template<typename Architecture_t > . Scalar_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTestError. private . Holds the most recently computed test loss. ; Definition at line 80 of file DLMinimizers.h. ◆ fTestInterval. template<typename Architecture_t > . size_t TMVA::DNN::TDLGradientDescent< Architecture_t >::fTestInterval. private . Interval for the computation of the test error. ; Definition at line 78 of f,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:12145,Learn,Learning,12145,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['Learn'],['Learning']
Usability,"; Definition at line 320 of file TBufferJSON.h. ◆ fMapAsObject. Bool_t TBufferJSON::fMapAsObject {kFALSE}. protected . ! when true, std::map will be converted into JSON object ; Definition at line 323 of file TBufferJSON.h. ◆ fNumericLocale. TString TBufferJSON::fNumericLocale. protected . ! stored value of setlocale(LC_NUMERIC), which should be recovered at the end ; Definition at line 327 of file TBufferJSON.h. ◆ fOutBuffer. TString TBufferJSON::fOutBuffer. protected . ! main output buffer for json code ; Definition at line 317 of file TBufferJSON.h. ◆ fOutput. TString* TBufferJSON::fOutput {nullptr}. protected . ! current output buffer for json code ; Definition at line 318 of file TBufferJSON.h. ◆ fSemicolon. TString TBufferJSON::fSemicolon. protected . ! depending from compression level, "" : "" or "":"" ; Definition at line 324 of file TBufferJSON.h. ◆ fSkipClasses. std::vector<const TClass *> TBufferJSON::fSkipClasses. protected . ! list of classes, which class info is not stored ; Definition at line 330 of file TBufferJSON.h. ◆ fStack. std::deque<std::unique_ptr<TJSONStackObj> > TBufferJSON::fStack. protected . ! hierarchy of currently streamed element ; Definition at line 321 of file TBufferJSON.h. ◆ fTypeNameTag. TString TBufferJSON::fTypeNameTag. protected . ! JSON member used for storing class name, when empty - no class name will be stored ; Definition at line 328 of file TBufferJSON.h. ◆ fTypeVersionTag. TString TBufferJSON::fTypeVersionTag. protected . ! JSON member used to store class version, default empty ; Definition at line 329 of file TBufferJSON.h. ◆ fValue. TString TBufferJSON::fValue. protected . ! buffer for current value ; Definition at line 319 of file TBufferJSON.h. Libraries for TBufferJSON:. [legend]; The documentation for this class was generated from the following files:; io/io/inc/TBufferJSON.h; io/io/src/TBufferJSON.cxx. TBufferJSON. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferJSON.html:102754,Guid,Guide,102754,doc/master/classTBufferJSON.html,https://root.cern,https://root.cern/doc/master/classTBufferJSON.html,1,['Guid'],['Guide']
Usability,"; Definition at line 320 of file TRInterface.h. ◆ IsInstalled(). Bool_t TRInterface::IsInstalled ; (; TString ; pkg). Method to verify if a package is installed. ; Parameters. pkgR's pkg name . Returnstrue or false if the package is installed or not ; Definition at line 193 of file TRInterface.cxx. ◆ operator[](). TRInterface::Binding TRInterface::operator[] ; (; const TString & ; name). Definition at line 142 of file TRInterface.cxx. ◆ ProcessEventsLoop(). void TRInterface::ProcessEventsLoop ; (; ). Init event loop in a thread to support actions in windows from R graphics system. ; Definition at line 219 of file TRInterface.cxx. ◆ Require(). Bool_t TRInterface::Require ; (; TString ; pkg). Method to load an R's package. ; Parameters. pkgR's pkg name . Returnstrue or false if the package was loaded or not ; Definition at line 200 of file TRInterface.cxx. ◆ SetVerbose(). void TRInterface::SetVerbose ; (; Bool_t ; status). Method to set verbose mode, that produce extra output. ; Notesome time can produce so much noise in the output ; Parameters. statusboolean to enable of disable . Definition at line 134 of file TRInterface.cxx. ◆ Streamer(). virtual void ROOT::R::TRInterface::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void ROOT::R::TRInterface::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 320 of file TRInterface.h. Member Data Documentation. ◆ fR. RInside* ROOT::R::TRInterface::fR. protected . Definition at line 138 of file TRInterface.h. ◆ th. TThread* ROOT::R::TRInterface::th. protected . Definition at line 139 of file TRInterface.h. Libraries for ROOT::R::TRInterface:. [legend]; The documentation for this class was generated from the following files:; bindings/r/inc/TRInterface.h; bindings/r/src/TRInterface.cxx. ROOTRTRInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html:25065,Guid,Guide,25065,doc/master/classROOT_1_1R_1_1TRInterface.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1R_1_1TRInterface.html,1,['Guid'],['Guide']
Usability,"; Definition at line 34 of file RooUniformBinning.h. ◆ lowBound(). double RooUniformBinning::lowBound ; (; ); const. inlineoverridevirtual . Implements RooAbsBinning.; Definition at line 36 of file RooUniformBinning.h. ◆ numBoundaries(). Int_t RooUniformBinning::numBoundaries ; (; ); const. inlineoverridevirtual . Implements RooAbsBinning.; Definition at line 32 of file RooUniformBinning.h. ◆ setRange(). void RooUniformBinning::setRange ; (; double ; xlo, . double ; xhi . ). overridevirtual . Change range to [xlo,xhi]. ; A changes in range automatically adjusts the binning as well to nBins bins in the new range ; Implements RooAbsBinning.; Definition at line 62 of file RooUniformBinning.cxx. ◆ Streamer(). void RooUniformBinning::Streamer ; (; TBuffer & ; R__b). overridevirtual . Custom streamer implementing schema evolution between V1 and V2 persistent binnings. ; Reimplemented from RooAbsBinning. ◆ StreamerNVirtual(). void RooUniformBinning::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 54 of file RooUniformBinning.h. Member Data Documentation. ◆ _array. std::vector<double> RooUniformBinning::_array. mutableprotected . ! do not persist ; Definition at line 48 of file RooUniformBinning.h. ◆ _binw. double RooUniformBinning::_binw. protected . Definition at line 52 of file RooUniformBinning.h. ◆ _nbins. Int_t RooUniformBinning::_nbins. protected . Definition at line 51 of file RooUniformBinning.h. ◆ _xhi. double RooUniformBinning::_xhi. protected . Definition at line 50 of file RooUniformBinning.h. ◆ _xlo. double RooUniformBinning::_xlo. protected . Definition at line 49 of file RooUniformBinning.h. Libraries for RooUniformBinning:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooUniformBinning.h; roofit/roofitcore/src/RooUniformBinning.cxx. RooUniformBinning. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooUniformBinning.html:22640,Guid,Guide,22640,doc/master/classRooUniformBinning.html,https://root.cern,https://root.cern/doc/master/classRooUniformBinning.html,1,['Guid'],['Guide']
Usability,"; Definition at line 341 of file TMap.cxx. ◆ Streamer(). void TMap::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all key/value pairs in the map to or from the I/O buffer. ; Reimplemented from TCollection.; Definition at line 361 of file TMap.cxx. ◆ StreamerNVirtual(). void TMap::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TMap.h. ◆ Write() [1/2]. Int_t TMap::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ); const. overridevirtual . Write all objects in this map. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TCollection.; Definition at line 405 of file TMap.cxx. ◆ Write() [2/2]. Int_t TMap::Write ; (; const char * ; name = nullptr, . Int_t ; option = 0, . Int_t ; bsize = 0 . ). overridevirtual . Write all objects in this map. ; By default all objects in the collection are written individually (each object gets its own key). Note, this is recursive, i.e. objects in collections in the collection are also written individually. To write all objects using a single key specify a name and set option to TObject::kSingleKey (i.e. 1). ; Reimplemented from TCollection.; Definition at line 432 of file TMap.cxx. Friends And Related Symbol Documentation. ◆ TMapIter. friend class TMapIter. friend . Definition at line 42 of file TMap.h. Member Data Documentation. ◆ fTable. THashTable* TMap::fTable. private . Definition at line 45 of file TMap.h. Libraries for TMap:. [legend]; The documentation for this class was generated from the following files:; core/cont/inc/TMap.h; core/cont/src/TMap.cxx. TMap. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMap.html:26704,Guid,Guide,26704,doc/master/classTMap.html,https://root.cern,https://root.cern/doc/master/classTMap.html,1,['Guid'],['Guide']
Usability,"; Definition at line 341 of file TRecorder.h. ◆ DeclFileName(). static const char * TRecorder::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 341 of file TRecorder.h. ◆ GetState(). TRecorder::ERecorderState TRecorder::GetState ; (; ); const. virtual . Get current state of recorder. ; Definition at line 299 of file TRecorder.cxx. ◆ IsA(). TClass * TRecorder::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 341 of file TRecorder.h. ◆ ListCmd(). void TRecorder::ListCmd ; (; const char * ; filename). Prints out recorded commandline events. ; Definition at line 271 of file TRecorder.cxx. ◆ ListGui(). void TRecorder::ListGui ; (; const char * ; filename). Prints out recorded GUI events. ; Definition at line 279 of file TRecorder.cxx. ◆ operator=(). TRecorder & TRecorder::operator= ; (; const TRecorder & ; ). private . ◆ Pause(). void TRecorder::Pause ; (; ). Pauses replaying. ; Definition at line 247 of file TRecorder.cxx. ◆ PrevCanvases(). void TRecorder::PrevCanvases ; (; const char * ; filename, . Option_t * ; option . ). Save previous canvases in a .root file. ; Definition at line 308 of file TRecorder.cxx. ◆ Replay() [1/2]. void TRecorder::Replay ; (; ). inline . Definition at line 318 of file TRecorder.h. ◆ Replay() [2/2]. Bool_t TRecorder::Replay ; (; const char * ; filename, . Bool_t ; showMouseCursor = kTRUE, . TRecorder::EReplayModes ; mode = kRealtime . ). Replays events from 'filename'. ; Definition at line 238 of file TRecorder.cxx. ◆ ReplayStop(). void TRecorder::ReplayStop ; (; ). Cancels replaying. ; Definition at line 263 of file TRecorder.cxx. ◆ Resume(). void TRecorder::Resume ; (; ). Resumes replaying. ; Definition at line 255 of file TRecorder.cxx. ◆ Start(). void TRecorder::Start ; (; const char * ; filename, . Option_t * ; option = ""RECREATE"", . Window_t * ; w = nullptr, . Int_t ; winCount = 0 . ). St",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecorder.html:16629,Pause,Pause,16629,doc/master/classTRecorder.html,https://root.cern,https://root.cern/doc/master/classTRecorder.html,1,['Pause'],['Pause']
Usability,"; Definition at line 384 of file RooAbsArg.h. ◆ changeServer(). void RooAbsArg::changeServer ; (; RooAbsArg & ; server, . bool ; valueProp, . bool ; shapeProp . ). Change dirty flag propagation mask for specified server. ; Definition at line 438 of file RooAbsArg.cxx. ◆ checkObservables(). bool RooAbsArg::checkObservables ; (; const RooArgSet * ; nset); const. virtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented in RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooRealSumFunc, and RooRealSumPdf.; Definition at line 817 of file RooAbsArg.cxx. ◆ cleanBranchName(). TString RooAbsArg::cleanBranchName ; (; ); const. protected . Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ; Definition at line 2075 of file RooAbsArg.cxx. ◆ clearShapeDirty(). void RooAbsArg::clearShapeDirty ; (; ); const. inlineprotected . Definition at line 579 of file RooAbsArg.h. ◆ clearValueAndShapeDirty(). void RooAbsArg::clearValueAndShapeDirty ; (; ); const. inlineprotected . Definition at line 571 of file RooAbsArg.h. ◆ clearValueDirty(). void RooAbsArg::clearValueDirty ; (; ); const. inlineprotected . Definition at line 576 of file RooAbsArg.h. ◆ clients(). const RefCountList_t & RooAbsArg::clients ; (; ); const. inline . List of all clients of this object. ; Definition at line 166 of file RooAbsArg.h. ◆ clone(). virtual TObject * RooAbsArg::clone ; (; const char * ; newname = nullptr); const. pure virtual . Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooAbsArg.html:50558,clear,clearShapeDirty,50558,doc/master/classRooAbsArg.html,https://root.cern,https://root.cern/doc/master/classRooAbsArg.html,1,['clear'],['clearShapeDirty']
Usability,"; Definition at line 43 of file TGDockableFrame.h. ◆ DoRedraw(). void TGDockButton::DoRedraw ; (; ). overrideprotectedvirtual . Draw the dock button, i.e. two vertical lines. ; Reimplemented from TGWindow.; Reimplemented in TGDockHideButton.; Definition at line 126 of file TGDockableFrame.cxx. ◆ DrawBorder(). void TGDockButton::DrawBorder ; (; ). overrideprotectedvirtual . Draw borders of dock button. ; Reimplemented from TGFrame.; Definition at line 104 of file TGDockableFrame.cxx. ◆ HandleCrossing(). Bool_t TGDockButton::HandleCrossing ; (; Event_t * ; event). overridevirtual . Handle dock button crossing events. ; Reimplemented from TGButton.; Definition at line 87 of file TGDockableFrame.cxx. ◆ IsA(). TClass * TGDockButton::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGButton.; Reimplemented in TGDockHideButton.; Definition at line 43 of file TGDockableFrame.h. ◆ Streamer(). void TGDockButton::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGButton.; Reimplemented in TGDockHideButton. ◆ StreamerNVirtual(). void TGDockButton::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 43 of file TGDockableFrame.h. Member Data Documentation. ◆ fHiBg. ULong_t TGDockButton::fHiBg. protected . highlighted background color ; Definition at line 32 of file TGDockableFrame.h. ◆ fMouseOn. Bool_t TGDockButton::fMouseOn. protected . true when mouse on button ; Definition at line 30 of file TGDockableFrame.h. ◆ fNormBg. ULong_t TGDockButton::fNormBg. protected . normal background color ; Definition at line 31 of file TGDockableFrame.h. Libraries for TGDockButton:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDockableFrame.h; gui/gui/src/TGDockableFrame.cxx. TGDockButton. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:58 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDockButton.html:34685,Guid,Guide,34685,doc/master/classTGDockButton.html,https://root.cern,https://root.cern/doc/master/classTGDockButton.html,1,['Guid'],['Guide']
Usability,; Definition at line 53 of file TGMdiDecorFrame.h. ◆ fNewW. Int_t TGMdiWinResizer::fNewW. protected . Definition at line 53 of file TGMdiDecorFrame.h. ◆ fNewX. Int_t TGMdiWinResizer::fNewX. protected . Definition at line 53 of file TGMdiDecorFrame.h. ◆ fNewY. Int_t TGMdiWinResizer::fNewY. protected . Definition at line 53 of file TGMdiDecorFrame.h. ◆ fOldH. Int_t TGMdiWinResizer::fOldH. protected . old MDI win position and dimension ; Definition at line 52 of file TGMdiDecorFrame.h. ◆ fOldW. Int_t TGMdiWinResizer::fOldW. protected . Definition at line 52 of file TGMdiDecorFrame.h. ◆ fOldX. Int_t TGMdiWinResizer::fOldX. protected . Definition at line 52 of file TGMdiDecorFrame.h. ◆ fOldY. Int_t TGMdiWinResizer::fOldY. protected . Definition at line 52 of file TGMdiDecorFrame.h. ◆ fPos. Int_t TGMdiWinResizer::fPos. protected . position of the resizer ; Definition at line 56 of file TGMdiDecorFrame.h. ◆ fRightButPressed. Bool_t TGMdiWinResizer::fRightButPressed. protected . Definition at line 58 of file TGMdiDecorFrame.h. ◆ fWinH. Int_t TGMdiWinResizer::fWinH. protected . MDI win position and dimension. ; Definition at line 51 of file TGMdiDecorFrame.h. ◆ fWinW. Int_t TGMdiWinResizer::fWinW. protected . Definition at line 51 of file TGMdiDecorFrame.h. ◆ fWinX. Int_t TGMdiWinResizer::fWinX. protected . Definition at line 51 of file TGMdiDecorFrame.h. ◆ fWinY. Int_t TGMdiWinResizer::fWinY. protected . Definition at line 51 of file TGMdiDecorFrame.h. ◆ fX0. Int_t TGMdiWinResizer::fX0. protected . Definition at line 57 of file TGMdiDecorFrame.h. ◆ fY0. Int_t TGMdiWinResizer::fY0. protected . initial position of the mouse click ; Definition at line 57 of file TGMdiDecorFrame.h. Libraries for TGMdiWinResizer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiWinResizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:28 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiWinResizer.html:35477,Guid,Guide,35477,doc/master/classTGMdiWinResizer.html,https://root.cern,https://root.cern/doc/master/classTGMdiWinResizer.html,1,['Guid'],['Guide']
Usability,; Definition at line 54 of file TGCanvas.h. ◆ fMsgWindow. const TGWindow* TGContainer::fMsgWindow. protected . window handling container messages ; Definition at line 42 of file TGCanvas.h. ◆ fOnMouseOver. Bool_t TGContainer::fOnMouseOver. protected . kTRUE when mouse pointer is over entry ; Definition at line 51 of file TGCanvas.h. ◆ fScrolling. Bool_t TGContainer::fScrolling. protected . kTRUE - when scrolling is ON ; Definition at line 59 of file TGCanvas.h. ◆ fScrollTimer. TTimer* TGContainer::fScrollTimer. protected . autoscroll timer ; Definition at line 50 of file TGCanvas.h. ◆ fSelected. Int_t TGContainer::fSelected. protected . number of selected items ; Definition at line 49 of file TGCanvas.h. ◆ fTotal. Int_t TGContainer::fTotal. protected . total items ; Definition at line 48 of file TGCanvas.h. ◆ fViewPort. TGViewPort* TGContainer::fViewPort. protected . container viewport ; Definition at line 40 of file TGCanvas.h. ◆ fX0. Int_t TGContainer::fX0. protected . Definition at line 45 of file TGCanvas.h. ◆ fXDND. Int_t TGContainer::fXDND. protected . Definition at line 60 of file TGCanvas.h. ◆ fXf. Int_t TGContainer::fXf. protected . Definition at line 46 of file TGCanvas.h. ◆ fXp. Int_t TGContainer::fXp. protected . Definition at line 44 of file TGCanvas.h. ◆ fY0. Int_t TGContainer::fY0. protected . corner of rubber band box ; Definition at line 45 of file TGCanvas.h. ◆ fYDND. Int_t TGContainer::fYDND. protected . Definition at line 60 of file TGCanvas.h. ◆ fYf. Int_t TGContainer::fYf. protected . other corner of rubber band box ; Definition at line 46 of file TGCanvas.h. ◆ fYp. Int_t TGContainer::fYp. protected . previous pointer position ; Definition at line 44 of file TGCanvas.h. Libraries for TGContainer:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGCanvas.h; gui/gui/src/TGCanvas.cxx. TGContainer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGContainer.html:58314,Guid,Guide,58314,doc/master/classTGContainer.html,https://root.cern,https://root.cern/doc/master/classTGContainer.html,1,['Guid'],['Guide']
Usability,; Definition at line 71 of file Ranking.h. ◆ DeclFileName(). static const char * TMVA::Ranking::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 71 of file Ranking.h. ◆ IsA(). virtual TClass * TMVA::Ranking::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 71 of file Ranking.h. ◆ Log(). MsgLogger & TMVA::Ranking::Log ; (; ); const. inlineprivate . Definition at line 69 of file Ranking.h. ◆ Print(). void TMVA::Ranking::Print ; (; ); const. virtual . get maximum length of variable names ; Definition at line 111 of file Ranking.cxx. ◆ SetContext(). void TMVA::Ranking::SetContext ; (; const TString & ; context). Definition at line 76 of file Ranking.cxx. ◆ SetDiscrName(). void TMVA::Ranking::SetDiscrName ; (; const TString & ; discrName). inline . Definition at line 60 of file Ranking.h. ◆ Streamer(). virtual void TMVA::Ranking::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMVA::Ranking::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 71 of file Ranking.h. Member Data Documentation. ◆ fContext. TString TMVA::Ranking::fContext. private . the ranking context ; Definition at line 65 of file Ranking.h. ◆ fLogger. MsgLogger* TMVA::Ranking::fLogger. mutableprivate . ! message logger ; Definition at line 68 of file Ranking.h. ◆ fRanking. std::vector<TMVA::Rank> TMVA::Ranking::fRanking. private . vector of ranks ; Definition at line 64 of file Ranking.h. ◆ fRankingDiscriminatorName. TString TMVA::Ranking::fRankingDiscriminatorName. private . the name of the ranking discriminator ; Definition at line 66 of file Ranking.h. Libraries for TMVA::Ranking:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Ranking.h; tmva/tmva/src/Ranking.cxx. TMVARanking. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:41 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Ranking.html:4407,Guid,Guide,4407,doc/master/classTMVA_1_1Ranking.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Ranking.html,1,['Guid'],['Guide']
Usability,; Double_t ; pos). virtual . Set pointer position in scaled (real) value. ; Definition at line 370 of file TGTripleSlider.cxx. ◆ SetPointerPosition() [2/3]. virtual void TGTripleVSlider::SetPointerPosition ; (; Float_t ; pos). inlinevirtual . Definition at line 60 of file TGTripleSlider.h. ◆ SetPointerPosition() [3/3]. virtual void TGTripleVSlider::SetPointerPosition ; (; Long64_t ; pos). inlinevirtual . Definition at line 63 of file TGTripleSlider.h. ◆ SetRelative(). virtual void TGTripleVSlider::SetRelative ; (; Bool_t ; rel = kTRUE). inlinevirtual . Definition at line 66 of file TGTripleSlider.h. ◆ Streamer(). void TGTripleVSlider::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGDoubleVSlider. ◆ StreamerNVirtual(). void TGTripleVSlider::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TGTripleSlider.h. Member Data Documentation. ◆ fConstrained. Bool_t TGTripleVSlider::fConstrained. protected . kTRUE if pointer is constrained to slider edges ; Definition at line 25 of file TGTripleSlider.h. ◆ fCz. Int_t TGTripleVSlider::fCz. protected . vertical pointer position in pixel coordinates ; Definition at line 23 of file TGTripleSlider.h. ◆ fPointerPic. const TGPicture* TGTripleVSlider::fPointerPic. protected . picture to draw pointer ; Definition at line 27 of file TGTripleSlider.h. ◆ fRelative. Bool_t TGTripleVSlider::fRelative. protected . kTRUE if pointer position is relative to slider ; Definition at line 26 of file TGTripleSlider.h. ◆ fSCz. Double_t TGTripleVSlider::fSCz. protected . vertical pointer position ; Definition at line 24 of file TGTripleSlider.h. Libraries for TGTripleVSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGTripleSlider.h; gui/gui/src/TGTripleSlider.cxx. TGTripleVSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGTripleVSlider.html:40583,Guid,Guide,40583,doc/master/classTGTripleVSlider.html,https://root.cern,https://root.cern/doc/master/classTGTripleVSlider.html,1,['Guid'],['Guide']
Usability,"; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Program of Work. The program of work is guided by the project vision laid out here, and documented for the relevant years in the following documents:; 2019. Presentation. 2018. Presentation. 2017. Presentation at the ROOT planning meeting, Jan 11 2017; JIRA items. 2016. Presentation at the EP-SFT group meeting. 2015. Presentation at the PH-SFT group meeting. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/program-work.html:1904,guid,guided,1904,d/program-work.html,https://root.cern,https://root.cern/d/program-work.html,3,"['Guid', 'guid']","['Guides', 'guided', 'guidelines']"
Usability,"; FitAndPlotH2(*h2ARP);; }; Double_tdouble Double_tDefinition RtypesCore.h:59; gDirectory#define gDirectoryDefinition TDirectory.h:384; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::RDataFrameROOT's RDataFrame offers a modern, high-level interface for analysis of data stored in TTree ,...Definition RDataFrame.hxx:41; ROOT::VecOps::RVec< int >; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TCanvasThe Canvas class.Definition TCanvas.h:23; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TF11-Dim function classDefinition TF1.h:233; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetXaxisTAxis * GetXaxis()Definition TH1.h:324; TH2Service class for 2-D histogram classes.Definition TH2.h:30; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TObject::DrawClonevirtual TObject * DrawClone(Option_t *option="""") constDraw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1).Definition TObject.cxx:305; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; lineTLine * lineDefinition entrylistblock_figure1.C:235; ROOT::VecOps::powRVec< PromoteTypes< T0, T1 > > pow(const T0 &x, const RVec< T1 > &v)Definition RVec.hxx:1846; ROOT::VecOps::expRVec< PromoteType< T > > exp(const RVec< T > &v)Definition RVec.hxx:1837; ROOT::VecOps::FilterRVec< T > Filter(const RVec< T > &v, F &&f)Create a new collection with the elements passing the filter expressed by the predicate.Definition RVec.hxx:2182; fdm5Double_t fdm5(Double_t *xx, ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df101__h1Analysis_8C.html:4996,simpl,simple,4996,doc/master/df101__h1Analysis_8C.html,https://root.cern,https://root.cern/doc/master/df101__h1Analysis_8C.html,1,['simpl'],['simple']
Usability,"; Foption_t::Boundint BoundDefinition Foption.h:31; Foption_t::Nostoreint NostoreDefinition Foption.h:41; Foption_t::Moreint MoreDefinition Foption.h:38; Foption_t::PChi2int PChi2Definition Foption.h:33; Foption_t::Chi2int Chi2Definition Foption.h:32; Foption_t::Minuitint MinuitDefinition Foption.h:46; Foption_t::Errorsint ErrorsDefinition Foption.h:37; Foption_t::NoErrXint NoErrXDefinition Foption.h:47; Foption_t::Verboseint VerboseDefinition Foption.h:30; Foption_t::Userint UserDefinition Foption.h:35; Foption_t::BinVolumeint BinVolumeDefinition Foption.h:50; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ROOT::Fit::DataOptions::fErrors1bool fErrors1use all errors equal to 1, i.e. fit without errors (default is false)Definition DataOptions.h:52; ROOT::Fit::DataOptions::fNormBinVolumebool fNormBinVolumenormalize data by a normalized the bin volume (bin volume divided by a reference value)Definition DataOptions.h:49; ROOT::Fit::DataOptions::fUseRangebool fUseRangeuse the function range when creating the fit data (default is false)Definition DataOptions.h:51; ROOT::Fit::DataOptions::fUseEmptybool fUseEmptyuse empty bins (default is false) with a fixed error of 1Definition DataOptions.h:50; ROOT::Fit::DataOptions::fIntegralbool fIntegraluse integral of bin content instead of bin center (default is false)Definition DataOptions.h:47; ROOT::Fit::DataOptions::fExpErrorsbool fExpErrorsuse expected errors from the function and not from the dataDefinition DataOptions.h:53; ROOT::Fit::DataOptions::fBinVolumebool fBinVolumenormalize data by the bin volume (it is used in the Poisson likelihood fits)Definition DataOptions.h:48; ROOT::Fit::DataOptions::fCoordErrorsbool fCoordErrorsuse errors on the x coordinates when available (default is true)Definition DataOptions.h:54. histhistsrcHFitImpl.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/HFitImpl_8cxx_source.html:65923,Guid,Guide,65923,doc/master/HFitImpl_8cxx_source.html,https://root.cern,https://root.cern/doc/master/HFitImpl_8cxx_source.html,1,['Guid'],['Guide']
Usability,"; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 91 of file RooProofDriverSelector.cxx. ◆ Process(). bool RooProofDriverSelector::Process ; (; Long64_t ; ). overridevirtual . The Process() function is called for each entry in the tree (or possibly keyed object in the case of PROOF) to be processed. ; The entry argument specifies which entry in the currently loaded tree is to be processed. It can be passed to either t01::GetEntry() or TBranch::GetEntry() to read either all or the required parts of the data. When processing keyed objects with PROOF, the object is already loaded and is available via the fObject pointer.; This function should contain the ""body"" of the analysis. It can contain simple or elaborate selection criteria, run algorithms on the data of the event and typically fill histograms.; The processing can be stopped by calling Abort().; Use fStatus to set the return value of TTree::Process().; The return value is currently not used.; WARNING when a selector is used with a TChain, you must use the pointer to the current TTree to call GetEntry(entry). The entry is always the local entry number in the current tree. Assuming that fChain is the pointer to the TChain being processed, use: fChain->GetTree()->GetEntry(entry). ; Reimplemented from TSelector.; Definition at line 66 of file RooProofDriverSelector.cxx. ◆ SetInputList(). void RooProofDriverSelector::SetInputList ; (; TList * ; input). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 35 of file RooProofDriverSelector.h. ◆ SetObject(). void RooProofDriverSelector::SetObject ; (; TObject * ; obj). inlineoverridevirtual . Reimplemented from TSelector.; Definition at line 34 of file RooProofDriverSelector.h. ◆ SetOption(). void Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooProofDriverSelector.html:15896,simpl,simple,15896,doc/master/classRooProofDriverSelector.html,https://root.cern,https://root.cern/doc/master/classRooProofDriverSelector.html,1,['simpl'],['simple']
Usability,"; Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, it is the callers; responsability to insure that the object is returned to a known state,; usually by calling the Clear method on the TClonesArray. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. TObject * ConstructedAt(Int_t idx, Option_t* clear_options); Get an object at index 'idx' that is guaranteed to have been constructed.; It might be either a freshly allocated object or one that had already been; allocated (and assumingly used). In the later case, the function Clear; will be called and passed the value of 'clear_options'. Tests to see if the destructor has been called on the object.; If so, or if the object has never been constructed the class constructor is called using; New(). If not, return a pointer to the correct memory location.; This explicitly to deal with TObject classes that allocate memory; which will be reset (but not deallocated) in their Clear(); functions. void Clear(Option_t* option = """"); Clear the clones array. Only use this routine when your objects don't; allocate memory since it will not call the object dtors.; However, if the class in the TClonesArray implements the function; Clear(Option_t *option) and if option = ""C"" the function Clear(); is called for all objects in the array. In the function Clear(), one; can delete objects or dynamic arrays allocated in the class.; This procedure is much faster than calling TClonesArray::Delete().; When the option starts with ""C+"", eg ""C+xyz"" the objects in the array; are in turn cleared with the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:18810,Clear,Clear,18810,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,"; How to Draw objects.; How to Pick objects.; Dividing a canvas with no margins between pads.; Using transparent pads. . Classes; class  TAnnotation;  An annotation is a TLatex which can be drawn in a 2D or 3D space. More...;  ; class  TAttCanvas;  Manages canvas attributes. More...;  ; class  TButton;  A TButton object is a user interface object. More...;  ; class  TCanvas;  The Canvas class. More...;  ; class  TClassTree;  Draw inheritance tree and their relations for a list of classes. More...;  ; class  TColorWheel;  Draw the ROOT Color Wheel. More...;  ; class  TControlBar;  A Control Bar is a fully user configurable tool which provides fast access to frequently used operations. More...;  ; class  TControlBarButton;  This class defines the control bar buttons. More...;  ; class  TCreatePrimitives;  Creates new primitives. More...;  ; class  TDialogCanvas;  A canvas specialized to set attributes. More...;  ; class  TGroupButton;  A specialized TButton used in a group of Buttons. More...;  ; class  TInspectCanvas;  A TInspectCanvas is a canvas specialized to inspect Root objects. More...;  ; class  TInspectorObject;  This class is designed to wrap a Foreign object in order to inject it into the Browse sub-system. More...;  ; class  TPad;  The most important graphics class in the ROOT system. More...;  ; class  TPadPainter;  Implement TVirtualPadPainter which abstracts painting operations. More...;  ; class  TPaveClass;  A TPaveLabel specialized to process classes inside a TClassTree. More...;  ; class  TRatioPlot;  Class for displaying ratios, differences and fit residuals. More...;  ; class  TSlider;  A specialized TPad including a TSliderBox object. More...;  ; class  TSliderBox;  The moving box in a TSlider. More...;  ; class  TView;  See TView3D. More...;  ; class  TViewer3DPad;  Provides 3D viewer interface (TVirtualViewer3D) support on a pad. More...;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__gpad.html:2200,Guid,Guide,2200,doc/master/group__gpad.html,https://root.cern,https://root.cern/doc/master/group__gpad.html,1,['Guid'],['Guide']
Usability,"; Int_tTGFrame::fBorderWidthframe border width; TGTextButton*fCancelCancel-Button to reprobate the rebinned histogram; TGClient*TGObject::fClientConnection to display server; TGComboBox*fCoordsComboCoordinate System combo box; Int_tTGFrame::fDNDStateEDNDFlags; TGCheckButton*fDelaydrawDelayed drawing of the new axis range; TGRadioButton*fDim2D-Plot RadioButton; TGRadioButton*fDim03D-Plot RadioButton; TGLayoutHints*fDim0lhlayout hints for 3D-Plot RadioButton; TGHButtonGroup*fDimGroupRadiobuttongroup to change 2D <-> 3D-Plot; TGLayoutHints*fDimlhlayout hints for 2D-Plot RadioButton; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; TGComboBox*fErrorComboError combo box; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; UInt_tTGFrame::fHeightframe height; TH1*fHisthistogram object; TGCheckButton*fHistOnOffDraw a simple histogram with default options; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; TGCheckButton*fMakeHBarDraw Horizontal Bar Chart; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaximal frame width; UInt_tTGFrame::fMinHeightminimal frame height; UInt_tTGFrame::fMinWidthminimal frame width; TClass*TGedFrame::fModelClassclass corresponding to instantiated GedFrame; Int_tTGCompositeFrame::fMustCleanupcleanup mode (see EFrameCleanup); TStringTGWindow::fNamename of the window used in SavePrimitive(); Bool_tTGWindow::fNeedRedra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1Editor.html:24587,simpl,simple,24587,root/html528/TH1Editor.html,https://root.cern,https://root.cern/root/html528/TH1Editor.html,6,['simpl'],['simple']
Usability,"; Int_tindex(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0); voidinitialize(const RooNormSetCache& other); virtual TClass*IsA() const; const RooArgSet*lastSet1() const; const RooArgSet*lastSet2() const; const RooNameSet&nameSet1() const; const RooNameSet&nameSet2() const; RooNormSetCache&operator=(const RooNormSetCache&); virtual voidShowMembers(TMemberInspector& insp, char* parent); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). protected:. voidexpand(). Data Members; protected:. RooSetPair*_asArr! do not persist; RooHashTable*_htable! do not persist; RooNameSet_name1!; RooNameSet_name2!; Int_t_nreg; Int_t_regSize; TNamed*_set2RangeName!. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooNormSetCache(Int_t regSize); Construct normalization set manager with given initial size. RooNormSetCache(const RooNormSetCache& other); Copy constructor. ~RooNormSetCache(); Destructor. void clear(); Clear contents. void initialize(const RooNormSetCache& other); Initialize cache from contents of given other cache. void add(const RooArgSet* set1, const RooArgSet* set2 = 0); Add given pair of RooArgSet pointers to our store. void expand(); Expand registry size by doubling capacity. Bool_t autoCache(const RooAbsArg* self, const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0, Bool_t autoRefill = kTRUE); If RooArgSets set1 and set2 or sets with similar contents have; been seen by this cache manager before return kFALSE If not,; return kTRUE. If sets have not been seen and doRefill is true,; update cache reference to current input sets. Int_t index(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t contains(const RooArgSet* set1, const RooArgSet* set2 = 0, const TNamed* set2RangeName = 0). Bool_t containsSet1(const RooArgSet* set1). const RooArgSet* lastSet1() const; { return _nreg>0?_asArr[_nreg-1]._set1:0 ; }. const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNormSetCache.html:2569,clear,clear,2569,root/html526/RooNormSetCache.html,https://root.cern,https://root.cern/root/html526/RooNormSetCache.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,; Int_t ; i); const. virtual . get the NLL value of entry at position i ; Definition at line 229 of file MarkovChain.cxx. ◆ SetParameters(). void MarkovChain::SetParameters ; (; RooArgSet & ; parameters). virtual . set which of your parameters this chain should store ; Definition at line 55 of file MarkovChain.cxx. ◆ Size(). virtual Int_t RooStats::MarkovChain::Size ; (; ); const. inlinevirtual . get the number of steps in the chain ; Definition at line 52 of file MarkovChain.h. ◆ Streamer(). void RooStats::MarkovChain::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::MarkovChain::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 127 of file MarkovChain.h. ◆ Weight() [1/2]. double MarkovChain::Weight ; (; ); const. virtual . get the weight of the current (last indexed) entry ; Definition at line 245 of file MarkovChain.cxx. ◆ Weight() [2/2]. double MarkovChain::Weight ; (; Int_t ; i); const. virtual . get the weight of entry at position i ; Definition at line 250 of file MarkovChain.cxx. Member Data Documentation. ◆ fChain. RooDataSet* RooStats::MarkovChain::fChain = nullptr. protected . Definition at line 124 of file MarkovChain.h. ◆ fDataEntry. RooArgSet* RooStats::MarkovChain::fDataEntry = nullptr. protected . Definition at line 123 of file MarkovChain.h. ◆ fNLL. RooRealVar* RooStats::MarkovChain::fNLL = nullptr. protected . Definition at line 125 of file MarkovChain.h. ◆ fParameters. RooArgSet* RooStats::MarkovChain::fParameters = nullptr. protected . Definition at line 122 of file MarkovChain.h. Libraries for RooStats::MarkovChain:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/MarkovChain.h; roofit/roostats/src/MarkovChain.cxx. RooStatsMarkovChain. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:55 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html:22702,Guid,Guide,22702,doc/master/classRooStats_1_1MarkovChain.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MarkovChain.html,1,['Guid'],['Guide']
Usability,"; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development » Git Primer A suggested work flow for distributed projects: NoSY. Overview; Building on the tips and other points explained elsewhere, this workflow has the following advantages relative to always working on the master branch:; It is easy to keep track of upstream changes even when working on a protracted task.; The change tree remains simple, easy to understand at a glance and even (mostly) linear (revision trees with multiple developers can quickly start looking like a train switch yard); Unsightly ""merge with branch"" commits are minimized.; It is easy to keep separate unrelated tasks upon which you may be working simultaneously.; Commits related to each other can be kept together or merged for increased clarity.; For the purposes of having an easy-to-remember label, I will refer to this workflow as the ""No Switch Yard"" (NoSY) workflow.; Details of NoSY; For each specific, well-defined task:; Create a local branch and switch to it:git checkout -b <local-branch>; Work on the branch, both committing regularly and keeping up-to-date with the remote (eg):git fetch origin; git rebase origin/master; When ready to push back to the main remote, squash related commits (see above).; Change back to your master branch:git checkout master; Make sure your master is up-to-date:git pull; Merge with the branch:git merge --ff-only <local-branch>; If this operation fails:; Swap back to the other branchgit checkout <local-br",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html:2240,simpl,simple,2240,d/suggested-work-flow-distributed-projects-nosy.html,https://root.cern,https://root.cern/d/suggested-work-flow-distributed-projects-nosy.html,1,['simpl'],['simple']
Usability,"; Long64_tTEventIter::fElemNumnumber of entries to process for this element; TEntryList*TEventIter::fEntryList! entry list for processing; Long64_tTEventIter::fEntryListPos! current position in the entrylist; TEventList*TEventIter::fEventList! eventList for processing; Int_tTEventIter::fEventListPos! current position in the eventList; TFile*TEventIter::fFileCurrent file; TStringTEventIter::fFilenameName of the current file; Long64_tTEventIter::fFirstfirst entry to process; Long64_tTEventIter::fNumnumber of entries to process; Long64_tTEventIter::fOldBytesReadlast reported number of bytes read; TStringTEventIter::fPathPath to current TDirectory; TSelector*TEventIter::fSelselector to be used; Bool_tTEventIter::fStoptermination of run requested. private:. Long64_tfCacheSizeCache size; Bool_tfDontCacheFilesControl OS caching of read files (Mac Os X only); TList*fFileTreesFiles && Trees currently open; TTree*fTreetree we are iterating over; TTreeCache*fTreeCacheinstance of the tree cache for the tree; Bool_tfTreeCacheIsLearningWhether cache is in learning phase; TStringfTreeNamename of the tree object to iterate over; Bool_tfUseParallelUnzipControl usage of parallel unzip; Bool_tfUseTreeCacheControl usage of the tree cache. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEventIterTree(); Default ctor. TEventIterTree(TDSet* dset, TSelector* sel, Long64_t first, Long64_t num); Constructor. ~TEventIterTree(); Destructor. Long64_t GetCacheSize(); Return the size in bytes of the cache, if any; Return -1 if not used. Int_t GetLearnEntries(); Return the number of entries in the learning phase. TTree* GetTrees(TDSetElement* elem); Create a Tree for the main TDSetElement and for all the friends.; Returns the main tree or 0 in case of an error. TTree* Load(TDSetElement* elem, Bool_t& localfile); Load a tree from s TDSetElement. Long64_t GetNextEvent(); Get next event. TEventIterTree(). » Author: Maarten Ballintijn 07/01/02 » Copyright (C",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEventIterTree.html:7109,learn,learning,7109,root/html530/TEventIterTree.html,https://root.cern,https://root.cern/root/html530/TEventIterTree.html,2,['learn'],['learning']
Usability,"; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void SetClass (TClass *cl);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (DeclId_t id);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTEnum.html:3771,Clear,Clear,3771,doc/v632/classTEnum.html,https://root.cern,https://root.cern/doc/v632/classTEnum.html,2,['Clear'],['Clear']
Usability,; Member Typedef Documentation. ◆ BaseType. template<class Generator > . typedef StdRandomEngine ROOT::Math::StdEngine< Generator >::BaseType. Definition at line 78 of file StdEngine.h. ◆ Result_t. template<class Generator > . typedef Generator::result_type ROOT::Math::StdEngine< Generator >::Result_t. Definition at line 79 of file StdEngine.h. Constructor & Destructor Documentation. ◆ StdEngine(). template<class Generator > . ROOT::Math::StdEngine< Generator >::StdEngine ; (; ). inline . Definition at line 81 of file StdEngine.h. Member Function Documentation. ◆ IntRndm(). template<class Generator > . Result_t ROOT::Math::StdEngine< Generator >::IntRndm ; (; ). inline . Definition at line 94 of file StdEngine.h. ◆ MaxInt(). template<class Generator > . static uint64_t ROOT::Math::StdEngine< Generator >::MaxInt ; (; ). inlinestatic . Definition at line 106 of file StdEngine.h. ◆ Name(). template<class Generator > . static const char * ROOT::Math::StdEngine< Generator >::Name ; (; ). inlinestatic . Definition at line 102 of file StdEngine.h. ◆ operator()(). template<class Generator > . double ROOT::Math::StdEngine< Generator >::operator() ; (; ). inline . Definition at line 98 of file StdEngine.h. ◆ Rndm(). template<class Generator > . double ROOT::Math::StdEngine< Generator >::Rndm ; (; ). inline . Definition at line 88 of file StdEngine.h. ◆ SetSeed(). template<class Generator > . void ROOT::Math::StdEngine< Generator >::SetSeed ; (; Result_t ; seed). inline . Definition at line 86 of file StdEngine.h. Member Data Documentation. ◆ fCONS. template<class Generator > . double ROOT::Math::StdEngine< Generator >::fCONS. private . Definition at line 111 of file StdEngine.h. ◆ fGen. template<class Generator > . Generator ROOT::Math::StdEngine< Generator >::fGen. private . Definition at line 110 of file StdEngine.h. math/mathcore/inc/Math/StdEngine.h. ROOTMathStdEngine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1StdEngine.html:3255,Guid,Guide,3255,doc/master/classROOT_1_1Math_1_1StdEngine.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1StdEngine.html,1,['Guid'],['Guide']
Usability,"; Minuit2 is a new object-oriented implementation, written in C++, of the popular MINUIT minimization package. Compared with the TMinuit class, which is a direct conversion from FORTRAN to C++, Minuit2 is a complete redesign and re-implementation of the package. This new version provides all the functionality present in the old FORTRAN version, with almost equivalent numerical accuracy and computational performances. Furthermore, it contains some fixes and small improvements and this new functionality: * The possibility to set single side parameter limits * the FUMILI algorithm (see the next paragraph “FUMILI Minimization Package”), which is an optimized method for least square and log likelihood minimizations.; Minuit2 has been originally developed by M. Winkler and F. James in the SEAL project. More information can be found on the MINUIT Web Site and in particular at the following documentation page at http://www.cern.ch/minuit/doc/doc.html.; A detailed User Guide for Minuit2 exists, describing the API of the internal classes. ROOT uses Minuit2 for fitting via the Minuit2Minimizer class which implements the ROOT::Math::Minimizer interface.; Minuit2 is also distributed as an independent package of ROOT and can be built without any other dependency on the ROOT libraries.; Examples on how to use the Minuit2 and Fumili2 plug-ins are provided in the tutorials’ directory $ROOTSYS/tutorials/fit: minuit2FitBench.C, minuit2FitBench2D.C and minuit2GausFit.C. More information on the classes and functions present in Minuit2 is available at online reference documentation.; Useful information on MINUIT and minimization in general is provided in the following documents:; F. James, Minuit Tutorial on Function Minimization ( http://seal.cern.ch/documents/minuit/mntutorial.pdf); F. James, The Interpretation of Errors in Minuit ( http://seal.cern.ch/documents/minuit/mnerror.pdf);; 5.11 FUMILI Minimization Package; FUMILI is used to minimize Chi-square function or to search maximum of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:226175,Guid,Guide,226175,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Guid'],['Guide']
Usability,"; Numerical Monte Carlo Integration Classes; Numerical Differentiation; One-dimensional Root-Finding; One-dimensional Minimization; Multi-dimensional Minimization. Interpolation Classes; Function Approximation (ChebyshevApprox), based on Chebyshev polynomials; Interface classes for Random number generation. The mathematical functions are implemented as a set of free functions in the namespace ROOT::Math. The naming used for the special functions is the same proposed for the C++ standard (see C++ standard extension proposal document). The MathMore library is implemented wrapping in C++ the GNU Scientific Library (GSL). To build MathMore you need to have first GSL installed somewhere in your system. A version of GSL larger or equal 1.8 is required. A tar file of GSL can be downloaded from the GSL Web site, or (for version 1.8) from here. Windows binaries, compiled using Visual Studio 7.1 can be downloaded from this location.; MathMore (and its ROOT CINT dictionary) can be built within ROOT whenever a GSL library is found in the system. Optionally the GSL library and header file location can be specified in the ROOT configure script with configure –with-gsl-incdir=... –with-gsl-libdir=... MathMore links with the GSL static libraries. On some platform (like Linux x86-64) GSL needs to be compiled with the option –with-pic. The source code of MathMore is distributed under the GNU General Public License . Modules;  Numerical Algorithms;  Numerical Algorithm classes from the MathCore and MathMore libraries. ;  ;  Statistical functions;  Probability density functions, cumulative distribution functions and their inverses (quantiles) for various statistical distributions (continuous and discrete). ;  ;  Special functions;  Special mathematical functions. ;  ;  QuasiRandom number generators and distributions;  Classes for generating QuasiRandom numbers and based on GSL. ;  . ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__MathMore.html:2659,Guid,Guide,2659,doc/master/group__MathMore.html,https://root.cern,https://root.cern/doc/master/group__MathMore.html,1,['Guid'],['Guide']
Usability,"; PEAC - A set of tools to quickly enable PROOF on a cluster poster presented by Gerri Ganis and Martin Vala.; Preparing for the new C++11 standard poster presented by Axel Naumann;; ROOT: High Quality, Systematically poster presented by Axel Naumann;; Improvements in ROOT I/O poster presented by Philippe Canal. An Exhibition Booth for demonstrating recent developments in data processing software used at the LHC presented by the CERN PH-SFT group (in Kimmel).; Papers NOT by the ROOT team, but related in spirit. The ""Bazaar"" software development process we try to follow:; The Cathedral and the Bazaar by Eric S. Raymond. In case you want to cite CINT, use the following references. C++ Interpreter - CINT, Masaharu Goto, CQ publishing, ISBN4-789-3085-3 (Japanese); Concept and application of Cint C++ interpreter, Masaharu Goto, Interface magazine 1996Aug-Nov, CQ publisihing, (Japanese); Cint - embedding Tcl/Tk graphics, Masaharu Goto, Interface magazine 1997 Feb, CQ publishing, (Japanese); BeOS and ROOT, Masaharu Goto, Interface magazine 1997 Sep, CQ publisihing, (Japanese); Learning C++ with CINT, Masaharu Goto, C magazine 1998Apr-1999Mar, Softbank Co, (Japanese); ROOT: An object oriented data analysis framework, Rene Brun & Fons Rademakers Linux Journal 998July Issue 51, Metro Link Inc, (English). Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/publications.html:5304,Guid,Guides,5304,d/publications.html,https://root.cern,https://root.cern/d/publications.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"; Printvoid Print(GNN_Data &d, std::string txt="""")Definition TMVA_SOFIE_GNN_Application.C:59; ROOT::RDataFrame df{dataset};; ; // Anytime an entry from ""col"" is missing, the value will be the default one; constexpr auto default_value = ... // Some sensible default value here; auto df_default = df.DefaultValueFor(""col"", default_value).Define(""twice"", ""col * 2"");; auto df_filtered = df.FilterAvailable(""col"").Define(""twice"", ""col * 2"");; ; // Same number of total entries as the input dataset, with defaulted values; df_default.Display({""twice""})->Print();; // Only keep the entries where ""col"" has values; df_filtered.Display({""twice""})->Print();; Further considerations; Note that working with missing values is currently supported with a TTree-based data source. Support of this functionality for other data sources may come in the future. Efficient analysis in Python; You can use RDataFrame in Python thanks to the dynamic Python/C++ translation of PyROOT. In general, the interface is the same as for C++, a simple example follows.; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); sum = df.Filter(""x > 10"").Sum(""y""); print(sum.GetValue()). User code in the RDataFrame workflow; C++ code; In the simple example that was shown above, a C++ expression is passed to the Filter() operation as a string (""x > 0""), even if we call the method from Python. Indeed, under the hood, the analysis computations run in C++, while Python is just the interface language.; To perform more complex operations that don't fit into a simple expression string, you can just-in-time compile C++ functions - via the C++ interpreter cling - and use those functions in an expression. See the following snippet for an example:; # JIT a C++ function from Python; ROOT.gInterpreter.Declare(""""""; bool myFilter(float x) {; return x > 10;; }; """"""); ; df = ROOT.RDataFrame(""myTree"", ""myFile.root""); # Use the function in an RDF operation; sum = df.Filter(""myFilter(x)"").Sum(""y""); print(sum.GetValue()); To increase the performa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1RDataFrame.html:86631,simpl,simple,86631,doc/master/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1RDataFrame.html,1,['simpl'],['simple']
Usability,"; Protected Member Functions |; List of all members ; RooConstVar Class ReferencefinalRooFit » RooFit Core. ; Represents a constant real-valued object. ; Definition at line 23 of file RooConstVar.h. Public Member Functions;  RooConstVar ();  ;  RooConstVar (const char *name, const char *title, double value);  Constructor with value. ;  ;  RooConstVar (const RooConstVar &other, const char *name=nullptr);  Copy constructor. ;  ; void changeVal (double value);  Change the value of this constant. ;  ; TObject * clone (const char *newname) const override;  ; double getValV (const RooArgSet *) const override;  Return (constant) value. ;  ; TClass * IsA () const override;  ; bool isDerived () const override;  Returns false, as the value of the constant doesn't depend on other objects. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooConstVar.html:1319,simpl,simple,1319,doc/master/classRooConstVar.html,https://root.cern,https://root.cern/doc/master/classRooConstVar.html,1,['simpl'],['simple']
Usability,"; Public Types |; Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t > Class Template Reference. ; template<typename Architecture_t, typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>>; class TMVA::DNN::TSGD< Architecture_t, Layer_t, DeepNet_t >Stochastic Batch Gradient Descent Optimizer class. ; This class represents the Stochastic Batch Gradient Descent Optimizer with options for applying momentum and nesterov momentum. ; Definition at line 46 of file SGD.h. Public Types; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  ;  Public Types inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; using Matrix_t = typename Architecture_t::Matrix_t;  ; using Scalar_t = typename Architecture_t::Scalar_t;  . Public Member Functions;  TSGD (Scalar_t learningRate, DeepNet_t &deepNet, Scalar_t momentum);  Constructor. ;  ;  ~TSGD ()=default;  Destructor. ;  ; Scalar_t GetMomentum () const;  Getters. ;  ; std::vector< std::vector< Matrix_t > > & GetPastBiasGradients ();  ; std::vector< Matrix_t > & GetPastBiasGradientsAt (size_t i);  ; std::vector< std::vector< Matrix_t > > & GetPastWeightGradients ();  ; std::vector< Matrix_t > & GetPastWeightGradientsAt (size_t i);  ;  Public Member Functions inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >;  VOptimizer (Scalar_t learningRate, DeepNet_t &deepNet);  Constructor. ;  ; virtual ~VOptimizer ()=default;  Virtual Destructor. ;  ; size_t GetGlobalStep () const;  ; Layer_t * GetLayerAt (size_t i);  ; std::vector< Layer_t * > & GetLayers ();  ; Scalar_t GetLearningRate () const;  Getters. ;  ; void IncrementGlobalStep ();  Increments the global step. ;  ; void SetLearningRate (size_t learningRate);  Setters. ;  ; void Step ();  Performs one step of optimization. ;  . Protected M",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html:1178,learn,learningRate,1178,doc/master/classTMVA_1_1DNN_1_1TSGD.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TSGD.html,1,['learn'],['learningRate']
Usability,"; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Protected Types |; Protected Member Functions |; Private Types |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TTreeReader Class ReferenceTreePlayer Library. ; A simple, robust and fast interface to read values from ROOT columnar datasets such as TTree, TChain or TNtuple. ; TTreeReader is associated to TTreeReaderValue and TTreeReaderArray which are handles to concretely access the information in the dataset.; Example code can be found in; tutorials/tree/hsimpleReader.C; tutorials/tree/h1analysisTreeReader.C; This example. You can generate a skeleton of TTreeReaderValue<T> and TTreeReaderArray<T> declarations for all of a tree's branches using TTree::MakeSelector().; Roottest contains an example showing the full power.; A simpler analysis example can be found below: it histograms a function of the px and py branches.; // A simple TTreeReader use: read data from hsimple.root (written by hsimple.C); ; #include ""TFile.h""; #include ""TH1F.h""; #include ""TTreeReader.h""; #include ""TTreeReaderValue.h""; ; void hsimpleReader() {; // Create a histogram for the values we read.; TH1F(""h1"", ""ntuple"", 100, -4, 4);; ; // Open the file containing the tree.; TFile *myFile = TFile::Open(""$ROOTSYS/tutorials/hsimple.root"");; ; // Create a TTreeReader for the tree, for instance by passing the; // TTree's name and the TDirectory / TFile it is in.; TTreeReader myReader(""ntuple"", myFile);; ; // The branch ""px"" contains floats; access them as myPx.; TTreeReaderValue<Float_t> myPx(myReader, ""px"");; // The branch ""py"" contains floats, too; access those as myPy.; TTreeReaderValue<Float_t> myPy(myReader, ""py"");; ; // Loop over all entries of the TTree or TChain.; while (myReader.Next()) {; // Just access the data as if myPx and myPy were iterators (note the '*'; // in front of them):; myHist->Fill(*myPx + *myPy);; }; ; myHist->Draw();; }; TFile.h; TH1F.h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeReader.html:1130,simpl,simple,1130,doc/master/classTTreeReader.html,https://root.cern,https://root.cern/doc/master/classTTreeReader.html,1,['simpl'],['simple']
Usability,"; REveSelectorToEventList & operator= (const REveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <ROOT/REveTreeTools.hxx>. Inheritance diagram for ROOT::Experimental::REveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ REveSelectorToEventList() [1/2]. ROOT::Experimental::REveSelectorToEventList::REveSelectorToEventList ; (; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html:17219,Clear,ClearFormula,17219,doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1REveSelectorToEventList.html,1,['Clear'],['ClearFormula']
Usability,"; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Development Meetings. All ROOT-related meetings ca be found in ROOT's Indico category; the upcoming ones can be seen here to the right.; Weekly Developers Meetings; Developers get together on a weekly basis to discuss the plans and review the progress on Monday's at 16:00 CET. Indico category; Vidyo ROOT Team meeting. Experiments Planning Meetings; Experiments and core developers meet regularly to discuss the progress of open issues and future plans on Wednesdays at 16:00 CET. Indico category; Vidyo Room . Topical meetings; Several of the ROOT packages have dedicated meetings, for instance I/O, TMVA, RooFit, C++ Modules. These meetings, too, can be found in ROOT's Indico category. Root Meetings. ROOT Framework Meetings ; 78th ROOT Parallelism, Performance and Programming Model Meeting ; 07/02/2020 - ; CERN - ; 4/S-030 . ROOT Framework Meetings ; ROOT I/O Meeting ; 07/03/2020 - ; CERN - ; 32/1-A24 . ROOT Framework Meetings ; TMVA Developers Meeting ; 07/03/2020 . ROOT Framework Meetings ; Biweekly meeting: C++ Modules in ROOT ; 07/08/2020 . ROOT Framework Meetings ; ROOT I/O Meeting ; 07/10/2020 - ; CERN - ; 32/1-A24 .  ; 1 of 5; next ›. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/meetings.html:3084,Guid,Guides,3084,d/meetings.html,https://root.cern,https://root.cern/d/meetings.html,2,"['Guid', 'guid']","['Guides', 'guidelines']"
Usability,"; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file. viewVC header . Sections:; class description; function members; data members; class charts. ROOT; » ROOSTATS; » RooStats::SimpleLikelihoodRatioTestStat. class RooStats::SimpleLikelihoodRatioTestStat: public RooStats::TestStatistic. ; SimpleLikelihoodRatioTestStat: TestStatistic that returns -log(L[null] / L[alt]) where; L is the likelihood.; . Function Members (Methods); public:. virtual~SimpleLikelihoodRatioTestStat(); static TClass*Class(); virtual Double_tEvaluate(RooAbsData& data, RooArgSet& nullPOI); virtual const TStringGetVarName() const; virtual TClass*IsA() const; RooStats::SimpleLikelihoodRatioTestStat&operator=(const RooStats::SimpleLikelihoodRatioTestStat&); boolParamsAreEqual(); virtual boolRooStats::TestStatistic::PValueIsRightTail() const; voidSetAltParameters(const RooArgSet& altParameters); voidSetNullParameters(const RooArgSet& nullParameters); virtual voidShowMembers(TMemberInspector& insp); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(const RooStats::SimpleLikelihoodRatioTestStat&); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf); RooStats::SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet& altParameters); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; private:. RooArgSet*fAltParameters; RooAbsPdf*fAltPdf; boolfFirstEval; RooArgSet*fNullParameters; RooAbsPdf*fNullPdf; RooWorkspacew. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; SimpleLikelihoodRatioTestStat(). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf). SimpleLikelihoodRatioTestStat(RooAbsPdf& nullPdf, RooAbsPdf& altPdf, const RooArgSet& nullParameters, const RooArgSet",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html:523,Simpl,SimpleLikelihoodRatioTestStat,523,root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,https://root.cern,https://root.cern/root/html528/RooStats__SimpleLikelihoodRatioTestStat.html,8,['Simpl'],"['SimpleLikelihoodRatioTestStat', 'SimpleLikelihoodRatioTestStatSimpleLikelihoodRatioTestStat']"
Usability,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:993,learn,learning,993,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['learn'],['learning']
Usability,"; ROOT::Math::RanluxppCompatEngineStdRanlux48::Namestatic const char * Name()Get name of the generator.Definition RanluxppEngine.h:296; ROOT::Math::RanluxppCompatEngineStdRanlux48::fImplstd::unique_ptr< ImplType > fImplDefinition RanluxppEngine.h:277; ROOT::Math::RanluxppCompatEngineStdRanlux48::~RanluxppCompatEngineStdRanlux48~RanluxppCompatEngineStdRanlux48() override; ROOT::Math::RanluxppEngineImplDefinition RanluxppEngineImpl.cxx:149; ROOT::Math::RanluxppEngineImplementation of the RANLUX++ generator.Definition RanluxppEngine.h:27; ROOT::Math::RanluxppEngine::IntRndmuint64_t IntRndm()Generate a random integer value with 48 bits.Definition RanluxppEngineImpl.cxx:423; ROOT::Math::RanluxppEngine::Rndmdouble Rndm() overrideGenerate a double-precision random number with 48 bits of randomness.Definition RanluxppEngineImpl.cxx:411; ROOT::Math::RanluxppEngine::Skipvoid Skip(uint64_t n)Skip n random numbers without generating them.Definition RanluxppEngineImpl.cxx:435; ROOT::Math::RanluxppEngine::SetSeedvoid SetSeed(uint64_t seed)Initialize and seed the state of the generator.Definition RanluxppEngineImpl.cxx:429; ROOT::Math::RanluxppEngine::~RanluxppEngine~RanluxppEngine() override; ROOT::Math::RanluxppEngine::operator()double operator()()Generate a double-precision random number (non-virtual method)Definition RanluxppEngineImpl.cxx:417; ROOT::Math::RanluxppEngine::Namestatic const char * Name()Get name of the generator.Definition RanluxppEngine.h:50; ROOT::Math::RanluxppEngine::fImplstd::unique_ptr< ImplType > fImplDefinition RanluxppEngine.h:31; ROOT::Math::TRandomEngineDefinition TRandomEngine.h:19; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4. mathmathcoreincMathRanluxppEngine.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RanluxppEngine_8h_source.html:16438,Guid,Guide,16438,doc/master/RanluxppEngine_8h_source.html,https://root.cern,https://root.cern/doc/master/RanluxppEngine_8h_source.html,1,['Guid'],['Guide']
Usability,"; ROOT::Math::VirtualIntegratorOneDim ; ROOT::Math::WrappedMultiTF1 ; ROOT::Math::WrappedTF1 ; ROOT::MathMore ; ROOT::Minuit2::CombinedMinimizer ; ROOT::Minuit2::FCNBase ; ROOT::Minuit2::FCNGradientBase ; ROOT::Minuit2::FumiliFCNBase ; ROOT::Minuit2::FumiliMinimizer ; ROOT::Minuit2::FunctionMinimizer ; ROOT::Minuit2::FunctionMinimum ; ROOT::Minuit2::GenericFunction ; ROOT::Minuit2::MinosError ; ROOT::Minuit2::Minuit2Minimizer ; ROOT::Minuit2::MinuitParameter ; ROOT::Minuit2::MnApplication ; ROOT::Minuit2::MnContours ; ROOT::Minuit2::MnFumiliMinimize ; ROOT::Minuit2::MnHesse ; ROOT::Minuit2::MnMachinePrecision ; ROOT::Minuit2::MnMigrad ; ROOT::Minuit2::MnMinimize ; ROOT::Minuit2::MnMinos ; ROOT::Minuit2::MnPlot ; ROOT::Minuit2::MnScan ; ROOT::Minuit2::MnSimplex ; ROOT::Minuit2::MnStrategy ; ROOT::Minuit2::MnTraceObject ; ROOT::Minuit2::MnUserParameterState ; ROOT::Minuit2::MnUserParameters ; ROOT::Minuit2::ModularFunctionMinimizer ; ROOT::Minuit2::ScanMinimizer ; ROOT::Minuit2::SimplexMinimizer ; ROOT::Minuit2::VariableMetricMinimizer ; ROOT::TArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<ULong64_t,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<bool,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<double,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<float,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<short,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned char,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned int,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned long,0> > ; ROOT::TArrayProxy<ROOT::TArrayType<unsigned short,0> > ; ROOT::TBranchProxy ; ROOT::TBranchProxyClassDescriptor Class to cache the information we gathered about the branch and its content; ROOT::TBranchProxyDescriptor Describe the proxy for a branch; ROOT::TBranchProxyDirector ; ROOT::TClaArrayProxy<ROOT::TArrayType<Long64_t,0> > ; ROOT::TClaArr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:21210,Simpl,SimplexMinimizer,21210,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,2,['Simpl'],['SimplexMinimizer']
Usability,"; ROOT::RGeomDescription::fVisibilitystd::vector< RGeomNodeVisibility > fVisibility! custom visibility flags for physical nodesDefinition RGeomData.hxx:244; ROOT::RGeomDescription::SelectTopbool SelectTop(const std::vector< std::string > &path)Select top node by path Used by the client to change active node Returns true if selected node was ch...Definition RGeomData.cxx:1946; ROOT::RGeomDescription::GetMaxVisNodesint GetMaxVisNodes() constReturns maximal visible number of nodes, ignored when non-positive.Definition RGeomData.hxx:319; ROOT::RGeomDescription::GetVisLevelint GetVisLevel() constReturns maximal visible level.Definition RGeomData.hxx:329; ROOT::RGeomDescription::GetMaxVisFacesint GetMaxVisFaces() constReturns maximal visible number of faces, ignored when non-positive.Definition RGeomData.hxx:324; ROOT::RGeomDescription::ClearCachevoid ClearCache()Clear cached data, need to be clear when connection broken.Definition RGeomData.cxx:1381; ROOT::RGeomDescription::ClearDescriptionvoid ClearDescription()Clear geometry description.Definition RGeomData.cxx:478; ROOT::RGeomDescription::MakeStackByIdsstd::vector< int > MakeStackByIds(const std::vector< int > &ids)Creates stack for given array of ids, first element always should be 0.Definition RGeomData.cxx:1621; ROOT::RGeomDescription::SetMaxVisFacesvoid SetMaxVisFaces(int cnt)Set maximal number of faces which should be selected for drawing.Definition RGeomData.hxx:322; ROOT::RGeomDescription::IsPreferredOfflinebool IsPreferredOffline() constIs offline operations preferred.Definition RGeomData.hxx:361; ROOT::RGeomDescription::fShapesstd::vector< ShapeDescr > fShapes! shapes with created descriptionsDefinition RGeomData.hxx:253; ROOT::RGeomDescription::fJsonCompint fJsonComp! default JSON compressionDefinition RGeomData.hxx:261; ROOT::RGeomDescription::ChangeNodeVisibilitybool ChangeNodeVisibility(const std::vector< std::string > &path, bool on)Change visibility for specified element Returns true if changes was perf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:77495,Clear,ClearDescriptionvoid,77495,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,6,['Clear'],"['Clear', 'ClearDescription', 'ClearDescriptionvoid']"
Usability,"; ROOT::TSchemaRule::fChecksumTString fChecksumSource version vector (for searching purposes)Definition TSchemaRule.h:103; ROOT::TSchemaRule::fTargetClassTString fTargetClassDefinition TSchemaRule.h:106; ROOT::TSchemaRule::SetSourcevoid SetSource(const TString &source)Set the list of source members.Definition TSchemaRule.cxx:538; ROOT::TSchemaRule::IsRenameRuleBool_t IsRenameRule() constReturn kTRUE if the rule is a strict renaming of the class to a new name.Definition TSchemaRule.cxx:756; ROOT::TSchemaRule::SetAttributesvoid SetAttributes(const TString &attributes)Set the attributes code of this rule.Definition TSchemaRule.cxx:656; ROOT::TSchemaRule::fSourceClassTString fSourceClassSource checksum vector (for searching purposes)Definition TSchemaRule.h:105; ROOT::TSchemaRule::HasTargetBool_t HasTarget(const TString &target) constReturn true if one of the rule's data member target is 'target'.Definition TSchemaRule.cxx:672; ROOT::TSchemaRule::GetTargetStringconst char * GetTargetString() constGet the target data members of this rule as a simple string (i.e. the in memory data member).Definition TSchemaRule.cxx:512; ROOT::TSchemaRule::fVersionVectstd::vector< std::pair< Int_t, Int_t > > * fVersionVectDefinition TSchemaRule.h:102; ROOT::TSchemaRule::fReadRawFuncPtrReadRawFuncPtr_t fReadRawFuncPtrConversion function pointer for read rule.Definition TSchemaRule.h:116; ROOT::TSchemaRule::fRuleTypeRuleType_t fRuleTypeConversion function pointer for readraw rule.Definition TSchemaRule.h:117; ROOT::TSchemaRule::IsValidBool_t IsValid() constReturn kTRUE if this rule is valid.Definition TSchemaRule.cxx:632; ROOT::TSchemaRule::GetReadFunctionPointerReadFuncPtr_t GetReadFunctionPointer() constGet the pointer to the function to be run for the rule (if it is a read rule).Definition TSchemaRule.cxx:716; ROOT::TSchemaRule::GetVersionconst char * GetVersion() constGet the version string.Definition TSchemaRule.cxx:393; ROOT::TSchemaRule::GetAttributesconst char * GetAttributes() cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSchemaRule_8cxx_source.html:43778,simpl,simple,43778,doc/master/TSchemaRule_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TSchemaRule_8cxx_source.html,2,['simpl'],['simple']
Usability,; Reimplemented from RooAbsGenContext. ◆ StreamerNVirtual(). void RooSimSplitGenContext::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 61 of file RooSimSplitGenContext.h. Member Data Documentation. ◆ _allVarsPdf. RooArgSet RooSimSplitGenContext::_allVarsPdf. protected . All pdf variables. ; Definition at line 59 of file RooSimSplitGenContext.h. ◆ _fracThresh. double* RooSimSplitGenContext::_fracThresh. protected . fraction thresholds ; Definition at line 57 of file RooSimSplitGenContext.h. ◆ _gcIndex. std::vector<int> RooSimSplitGenContext::_gcIndex. protected . Index value corresponding to component. ; Definition at line 54 of file RooSimSplitGenContext.h. ◆ _gcList. std::vector<RooAbsGenContext*> RooSimSplitGenContext::_gcList. protected . List of component generator contexts. ; Definition at line 53 of file RooSimSplitGenContext.h. ◆ _idxCat. RooAbsCategoryLValue* RooSimSplitGenContext::_idxCat. protected . Clone of index category. ; Definition at line 50 of file RooSimSplitGenContext.h. ◆ _idxCatName. TString RooSimSplitGenContext::_idxCatName. protected . Name of index category. ; Definition at line 55 of file RooSimSplitGenContext.h. ◆ _idxCatSet. RooArgSet RooSimSplitGenContext::_idxCatSet. protected . Owner of index category components. ; Definition at line 51 of file RooSimSplitGenContext.h. ◆ _numPdf. Int_t RooSimSplitGenContext::_numPdf. protected . Number of generated PDFs. ; Definition at line 56 of file RooSimSplitGenContext.h. ◆ _pdf. const RooSimultaneous* RooSimSplitGenContext::_pdf. protected . Original PDF. ; Definition at line 52 of file RooSimSplitGenContext.h. Libraries for RooSimSplitGenContext:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooSimSplitGenContext.h; roofit/roofitcore/src/RooSimSplitGenContext.cxx. RooSimSplitGenContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:08 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooSimSplitGenContext.html:24161,Guid,Guide,24161,doc/master/classRooSimSplitGenContext.html,https://root.cern,https://root.cern/doc/master/classRooSimSplitGenContext.html,1,['Guid'],['Guide']
Usability,"; Reimplemented from TDictionary.; Definition at line 49 of file TFunctionTemplate.h. ◆ IsValid(). Bool_t TFunctionTemplate::IsValid ; (; ). virtual . Return true if this function template object is pointing to a currently loaded function. ; If a function is unloaded after the TFunction is created, the TFunction will be set to be invalid. ; Definition at line 89 of file TFunctionTemplate.cxx. ◆ operator=(). TFunctionTemplate & TFunctionTemplate::operator= ; (; const TFunctionTemplate & ; rhs). Assignment operator. ; Definition at line 50 of file TFunctionTemplate.cxx. ◆ Property(). Long_t TFunctionTemplate::Property ; (; ); const. overridevirtual . Get property description word. For meaning of bits see EProperty. ; Implements TDictionary.; Definition at line 124 of file TFunctionTemplate.cxx. ◆ Streamer(). void TFunctionTemplate::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TDictionary. ◆ StreamerNVirtual(). void TFunctionTemplate::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 49 of file TFunctionTemplate.h. ◆ Update(). Bool_t TFunctionTemplate::Update ; (; FuncTempInfo_t * ; info). virtual . Update the TFunctionTemplate to reflect the new info. ; This can be used to implement unloading (info == 0) and then reloading (info being the 'new' decl address). ; Definition at line 150 of file TFunctionTemplate.cxx. Member Data Documentation. ◆ fClass. TClass* TFunctionTemplate::fClass. protected . Definition at line 29 of file TFunctionTemplate.h. ◆ fInfo. FuncTempInfo_t* TFunctionTemplate::fInfo. protected . Definition at line 28 of file TFunctionTemplate.h. Libraries for TFunctionTemplate:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TFunctionTemplate.h; core/meta/src/TFunctionTemplate.cxx. TFunctionTemplate. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTFunctionTemplate.html:18450,Guid,Guide,18450,doc/master/classTFunctionTemplate.html,https://root.cern,https://root.cern/doc/master/classTFunctionTemplate.html,1,['Guid'],['Guide']
Usability,"; Remove all query result instances referenced 'ref' from; the list of results. TQueryResult * GetQueryResult(const char* ref); Get query result instances referenced 'ref' from; the list of results. void SetCurrentQuery(TQueryResult* q); Set current query and save previous value. void AddInput(TObject* inp); Add object to input list. void ClearInput(); Clear input list. TObject * GetOutput(const char* name) const; Get output object by name. TList * GetOutputList() const; Get output list. Int_t ReinitSelector(TQueryResult* qr); Reinitialize fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Int_t SavePartialResults(Bool_t queryend = kFALSE, Bool_t force = kFALSE); Save the partial results of this query to a dedicated file under the user; data directory. The file name has the for",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofPlayer.html:17053,feedback,feedback,17053,root/html534/TProofPlayer.html,https://root.cern,https://root.cern/root/html534/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"; Remove all query result instances referenced 'ref' from; the list of results. TQueryResult * GetQueryResult(const char* ref); Get query result instances referenced 'ref' from; the list of results. void SetCurrentQuery(TQueryResult* q); Set current query and save previous value. void AddInput(TObject* inp); Add object to input list. void ClearInput(); Clear input list. TObject * GetOutput(const char* name) const; Get output object by name. TList * GetOutputList() const; Get output list. Int_t ReinitSelector(TQueryResult* qr); Reinitialize fSelector using the selector files in the query result.; Needed when Finalize is called after a Process execution for the same; selector name. Int_t AddOutputObject(TObject* obj); Incorporate output object (may not be used in this class). void AddOutput(TList* out); Incorporate output list (may not be used in this class). void StoreOutput(TList* out); Store output list (may not be used in this class). void StoreFeedback(TObject* slave, TList* out); Store feedback list (may not be used in this class). void Progress(Long64_t total, Long64_t processed); Report progress (may not be used in this class). void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Report progress (may not be used in this class). void Progress(TProofProgressInfo* pi); Report progress (may not be used in this class). void Feedback(TList* objs); Set feedback list (may not be used in this class). TDrawFeedback * CreateDrawFeedback(TProof* p); Draw feedback creation proxy. When accessed via TProof avoids; link dependency on libProofPlayer. void SetDrawFeedbackOption(TDrawFeedback* f, Option_t* opt); Set draw feedback option. void DeleteDrawFeedback(TDrawFeedback* f); Delete draw feedback object. Long64_t Process(TDSet* set, const char* selector, Option_t* option = """", Long64_t nentries = -1, Long64_t firstentry = 0); Process specified TDSet on PROOF worker.; The return value is -1 in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofPlayer.html:15694,feedback,feedback,15694,root/html528/TProofPlayer.html,https://root.cern,https://root.cern/root/html528/TProofPlayer.html,3,['feedback'],['feedback']
Usability,"; Remove viewer from the list.; If auto-destruct is on and the last viewer is removed the scene; destructs itself. void TagViewersChanged(); Tag all viewers as changed. const char* LockIdStr() const; Name printed on locking info messages. TGLSceneInfo* CreateSceneInfo(TGLViewerBase* view); Create a scene-info instance appropriate for this scene class.; Here we instantiate the scene-info base-class TGLSceneInfo. void RebuildSceneInfo(TGLRnrCtx& ctx); Fill scene-info with very basic information that is practically; view independent. This is called when scene content is changed; or when camera-interest changes. void UpdateSceneInfo(TGLRnrCtx& ctx); Fill scene-info with information needed for rendering, take into; account the render-context (viewer state, camera, clipping).; Usually called from TGLViewer before rendering a scene if some; moderately significant part of render-context has changed. Here we update the basic state (clear last-LOD, mark the time,; set global <-> scene transforamtion matrices) and potentially; study and refine the clipping planes based on scene bounding box. void LodifySceneInfo(TGLRnrCtx& ctx); Setup LOD-dependant values in scene-info. Nothing to be done here but to store the last LOD. void PreDraw(TGLRnrCtx& rnrCtx); Perform basic pre-render initialization:; - calculate LOD, Style, Clipping,; - build draw lists. This is called in the beginning of the GL-viewer draw cycle. void PreRender(TGLRnrCtx& rnrCtx); Perform pre-render initialization - fill rnrCtx with; values stored during PreDraw(). This is called each time before RenderXyzz(). void Render(TGLRnrCtx& rnrCtx); This function does rendering of all stages, the shapes are; rendered in the following order: opaque, transparent,; selected-opaque, selected-transparent. GL-depth buffer is cleared after transparent shapes have been; rendered. This is never called from ROOT GL directly. Use it if you know; you are rendering a single scene. void RenderOpaque(TGLRnrCtx& rnrCtx); Render opaque eleme",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLSceneBase.html:5376,clear,clear,5376,root/html528/TGLSceneBase.html,https://root.cern,https://root.cern/root/html528/TGLSceneBase.html,6,['clear'],['clear']
Usability,"; Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024*16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024*16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t GetBin(const Double_t* x) const; { return const_cast<THnSparse*>(this)->GetBin(x, kFALSE); }. Long64_t GetBin(const char** name)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnSparse.html:18835,Clear,Clear,18835,root/html534/THnSparse.html,https://root.cern,https://root.cern/root/html534/THnSparse.html,1,['Clear'],['Clear']
Usability,"; Return the index for fCurrentBinIndex.; If it doesn't exist then return -1, or allocate a new bin if allocate is set. THnSparseCompactBinCoord* GetCompactCoord() const; Return THnSparseCompactBinCoord object. Double_t GetSparseFractionBins() const; Return the amount of filled bins over all bins. Double_t GetSparseFractionMem() const; Return the amount of used memory over memory that would be used by a; non-sparse n-dimensional histogram. The value is approximate. ROOT::THnBaseBinIter* CreateIter(Bool_t respectAxisRange) const; Create an iterator over all filled bins of a THnSparse.; Use THnIter instead. void SetBinContent(Long64_t bin, Double_t v); Set content of bin with index ""bin"" to ""v"". void SetBinError2(Long64_t bin, Double_t e2); Set error of bin with index ""bin"" to ""e"", enable errors if needed. void AddBinError2(Long64_t bin, Double_t e2); Add ""e"" to error of bin with index ""bin"", enable errors if needed. void Sumw2(); Enable calculation of errors. void Reset(Option_t* option = """"); Clear the histogram. THnSparse(const THnSparse& ). THnSparse& operator=(const THnSparse& ). THnSparseArrayChunk* GetChunk(Int_t idx) const. TArray* GenerateArray() const. void FillBin(Long64_t bin, Double_t w); Increment the bin content of ""bin"" by ""w"",; return the bin index. chunk-> AddBinContent(const Int_t* idx, Double_t v = 1.). THnSparse* CreateSparse(const char* name, const char* title, const TH1* h1, Int_t chunkSize = 1024 * 16). THnSparse* CreateSparse(const char* name, const char* title, const THnBase* hn, Int_t chunkSize = 1024 * 16). Int_t GetChunkSize() const; { return fChunkSize; }. Int_t GetNChunks() const; { return fBinContent.GetEntriesFast(); }. Long64_t GetNbins() const; { return fFilledBins; }. void SetFilledBins(Long64_t nbins); { fFilledBins = nbins; }. Long64_t GetBin(const Int_t* idx) const; { return const_cast<THnSparse*>(this)->GetBin(idx, kFALSE); }. Long64_t GetBin(const Double_t* x) const; { return const_cast<THnSparse*>(this)->GetBin(x, kFALSE); }. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnSparse.html:20085,Clear,Clear,20085,root/html602/THnSparse.html,https://root.cern,https://root.cern/root/html602/THnSparse.html,2,['Clear'],['Clear']
Usability,"; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidRooResolutionModel::cleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&RooResolutionModel::convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAddModel.html:3667,clear,clearValueAndShapeDirty,3667,root/html532/RooAddModel.html,https://root.cern,https://root.cern/root/html532/RooAddModel.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tcanBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsPdf.html:6624,clear,clearValueAndShapeDirty,6624,root/html602/RooAbsPdf.html,https://root.cern,https://root.cern/root/html602/RooAbsPdf.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:2844,clear,clearEvalErrorLog,2844,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,3,['clear'],['clearEvalErrorLog']
Usability,"; RooAbsPdf*fPriorPdfprior pdf (typically for the POI); RooAbsPdf*fProductPdfinternal pointer to model * prior; doublefSizesize used for getting the interval; Double_tfUpperupper interval bound; Bool_tfValidInterval. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; BayesianCalculator(); default constructor. BayesianCalculator( /* const char* name, const char* title, */ RooAbsData& data, RooAbsPdf& pdf,						 const RooArgSet& POI,						 RooAbsPdf& priorPdf,						 const RooArgSet* nuisanceParameters ); Constructor from data set, model pdf, parameter of interests and prior pdf; If nuisance parameters are given they will be integrated according either to the prior or; their constraint term included in the model. BayesianCalculator(RooAbsData& data, RooStats::ModelConfig& model); Constructor from a data set and a ModelConfig; model pdf, poi and nuisances will be taken from the ModelConfig. ~BayesianCalculator(); destructor. void ClearAll() const; clear all cached pdf objects. void SetModel(const RooStats::ModelConfig& model); set the model to use; The model pdf, prior pdf, parameter of interest and nuisances; will be taken according to the model. RooAbsReal* GetPosteriorFunction() const; Build and return the posterior function (not normalized) as a RooAbsReal; the posterior is obtained from the product of the likelihood function and the; prior pdf which is then intergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object; or in the model itself. If no prior nuisance is specified, but prior parameters are then; the integration is performed assuming a flat prior for the nuisance parameters.; NOTE: the return object is managed by the class, users do not need to delete it. RooAbsPdf* GetPosteriorPdf() const; Build and return the posterior pdf (i.e posterior function normalized to all range of poi); Note that an extra integration in the POI is required for the n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__BayesianCalculator.html:11289,Clear,ClearAll,11289,root/html534/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html534/RooStats__BayesianCalculator.html,6,"['Clear', 'clear']","['ClearAll', 'clear']"
Usability,"; RooTreeDataStore(const char* name, const char* title, RooAbsDataStore& tds, const RooArgSet& vars, const RooFormulaVar* cutVar, const char* cutRange, Int_t nStart, Int_t nStop, Bool_t, const char* wgtVarName = 0); virtual~RooTreeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidattachBuffers(const RooArgSet& extObs); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidcheckInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual RooAbsDataStore*clone(const char* newname = 0) const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Bool_tRooAbsDataStore::dirtyProp() const; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidRooAbsDataStore::dump(); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooTreeDataStore.html:2456,Clear,Clear,2456,root/html532/RooTreeDataStore.html,https://root.cern,https://root.cern/root/html532/RooTreeDataStore.html,1,['Clear'],['Clear']
Usability,"; Searching...; No Matches. df004_cutFlowReport.C File ReferenceTutorials » Dataframe tutorials. Detailed Description; Display cut/Filter efficiencies with RDataFrame. ; This tutorial shows how to get information about the efficiency of the filters applied; ; using FourVector = ROOT::Math::XYZTVector;; using FourVectors = std::vector<FourVector>;; using CylFourVector = ROOT::Math::RhoEtaPhiVector;; ; // A simple helper function to fill a test tree: this makes the example; // stand-alone.; void fill_tree(const char *treeName, const char *fileName); {; ROOT::RDataFrame d(50);; int i(0);; d.Define(""b1"", [&i]() { return (double)i; }); .Define(""b2"",; [&i]() {; auto j = i * i;; ++i;; return j;; }); .Snapshot(treeName, fileName);; }; ; void df004_cutFlowReport(); {; ; // We prepare an input tree to run on; auto fileName = ""df004_cutFlowReport.root"";; auto treeName = ""myTree"";; fill_tree(treeName, fileName);; ; // We read the tree from the file and create a RDataFrame; ROOT::RDataFrame d(treeName, fileName, {""b1"", ""b2""});; ; // ## Define cuts and create the report; // Here we define two simple cuts; auto cut1 = [](double b1) { return b1 > 25.; };; auto cut2 = [](int b2) { return 0 == b2 % 2; };; ; // An optional string parameter name can be passed to the Filter method to create a named filter.; // Named filters work as usual, but also keep track of how many entries they accept and reject.; auto filtered1 = d.Filter(cut1, {""b1""}, ""Cut1"");; auto filtered2 = d.Filter(cut2, {""b2""}, ""Cut2"");; ; auto augmented1 = filtered2.Define(""b3"", [](double b1, int b2) { return b1 / b2; });; auto cut3 = [](double x) { return x < .5; };; auto filtered3 = augmented1.Filter(cut3, {""b3""}, ""Cut3"");; ; // Statistics are retrieved through a call to the Report method:; // when Report is called on the main RDataFrame object, it retrieves stats; // for all named filters declared up to that point.; // When called on a stored chain state (i.e. a chain/graph node), it; // retrieves stats for all named fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df004__cutFlowReport_8C.html:1215,simpl,simple,1215,doc/master/df004__cutFlowReport_8C.html,https://root.cern,https://root.cern/doc/master/df004__cutFlowReport_8C.html,1,['simpl'],['simple']
Usability,"; SetTitleX(Float_t x=0)TStyleinline; SetTitleXOffset(Float_t offset=1)TStyleinline; SetTitleXSize(Float_t size=0.02)TStyleinline; SetTitleY(Float_t y=0.985)TStyleinline; SetTitleYOffset(Float_t offset=1)TStyleinline; SetTitleYSize(Float_t size=0.02)TStyleinline; SetUniqueID(UInt_t uid)TObjectvirtual; SetViolinScaled(Bool_t on=kTRUE)TStyleinline; Sizeof() constTNamedvirtual; Streamer(TBuffer &) overrideTStylevirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TStyleinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TAttFill()TAttFill; TAttFill(Color_t fcolor, Style_t fstyle)TAttFill; TAttLine()TAttLine; TAttLine(Color_t lcolor, Style_t lstyle, Width_t lwidth)TAttLine; TAttMarker()TAttMarker; TAttMarker(Color_t color, Style_t style, Size_t msize)TAttMarker; TAttText()TAttText; TAttText(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize)TAttText; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; ToggleEditor()TStyleinline; ToggleEventStatus()TStyleinline; ToggleToolBar()TStyleinline; TStyle()TStyle; TStyle(const char *name, const char *title)TStyle; TStyle(const TStyle &style)TStyle; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TAttText()TAttTextvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TStyle()TStylevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStyle-members.html:23772,Guid,Guide,23772,doc/master/classTStyle-members.html,https://root.cern,https://root.cern/doc/master/classTStyle-members.html,1,['Guid'],['Guide']
Usability,"; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code documentation. This is mainly for software developers of ROOT and using ROOT to build the applications.; A general Users Guide is provided for a more in depth explanation of concepts and functionality available in the ROOT system. ; A number of topical User Guides and Manuals for various components of the system.; A rich set of ROOT tutorials and code examples are offered to developers to exercise specific functionality.; A rich set of HowTo's is also present to discuss issues commonly faced by ROOT users. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:2117,Guid,Guide,2117,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['Guid'],['Guide']
Usability,"; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TBRIKA box with faces perpendicular to the axes.Definition TBRIK.h:26; TCONEA conical tube.Definition TCONE.h:28; TCONSA segment of a conical tube.Definition TCONS.h:27; TCanvasThe Canvas class.Definition TCanvas.h:23; TGTRAA general twisted trapezoid.Definition TGTRA.h:27; TGeoManager::GetListOfNodesTObjArray * GetListOfNodes()Definition TGeoManager.h:467; TGeoManager::GetListOfShapesTObjArray * GetListOfShapes() constDefinition TGeoManager.h:475; TNodeTNode description.Definition TNode.h:33; TNode::Drawvoid Draw(Option_t *option="""") overrideDraw Referenced node with current parameters.Definition TNode.cxx:322; TNode::cdvirtual void cd(const char *path=nullptr)Change Current Reference node to this.Definition TNode.cxx:249; TObjArray::Deletevoid Delete(Option_t *option="""") overrideRemove all objects from the array AND delete all heap based objects.Definition TObjArray.cxx:356; TPARAA parallelepiped.Definition TPARA.h:30; TPCONA polycone.Definition TPCON.h:33; TPCON::DefineSectionvirtual void DefineSection(Int_t secNum, Float_t z, Float_t rmin, Float_t rmax)Defines section secNum of the polycone.Definition TPCON.cxx:174; TPGONA polygon.Definition TPGON.h:30; TSPHEA Sphere.Definition TSPHE.h:28; TSystem::Loadvirtual int Load(const char *module, const char *entry="""", Bool_t system=kFALSE)Load a shared library.Definition TSystem.cxx:1857; TTRAPA general trapezoid.Definition TTRAP.h:33; TTRD1A trapezoid with the x dimension varying along z.Definition TTRD1.h:28; TTRD2A trapezoid with both x and y dimensions varying along z.Definition TTRD2.h:29; TTUBEA tube.Definition TTUBE.h:32; TTUBSA segment of a tube.Definition TTUBS.h:29; c1return c1Definition legend1.C:41; shapesDefinition shapes.py:1; AuthorRene Brun ; Definition in file shapes.C. tutorialsgeomshapes.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/shapes_8C.html:5887,Guid,Guide,5887,doc/master/shapes_8C.html,https://root.cern,https://root.cern/doc/master/shapes_8C.html,1,['Guid'],['Guide']
Usability,"; TClass * IsA () const override;  ; void SetDEDw (Double_t in);  Sets the derivative of the total error wrt the neuron weight. ;  ; void SetNewEvent () const;  Inform the neuron that inputs of the network have changed, so that the buffered values have to be recomputed. ;  ; void SetNormalisation (Double_t mean, Double_t RMS);  Sets the normalization variables. ;  ; void SetWeight (Double_t w);  Sets the neuron weight to w. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; TTreeFormula * UseBranch (TTree *, const char *);  Sets a formula that can be used to make the neuron an input. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTNeuron.html:4151,Clear,Clear,4151,doc/master/classTNeuron.html,https://root.cern,https://root.cern/doc/master/classTNeuron.html,1,['Clear'],['Clear']
Usability,"; TDecompBK Matrix Decomposition Bunch-Kaufman; TDecompBase Matrix Decomposition Base; TDecompChol Matrix Decompositition Cholesky; TDecompLU Matrix Decompositition LU; TDecompQRH Matrix Decompositition QRH; TDecompSVD Matrix Decompositition SVD; TDecompSparse Matrix Decompositition LU; TDialogCanvas A specialized canvas to set attributes.; TDiamond Diamond class; TDictAttributeMap Container for name/value pairs of TDictionary attributes; TDictionary ABC defining interface to dictionary; TDirectory Describe directory structure in memory; TDirectoryFile Describe directory structure in a ROOT file; TDocDirective THtml directive handler; TDocHtmlDirective Handler for ""Begin_Html""/""End_Html"" for raw HTML in documentation comments; TDocLatexDirective Handler for ""Begin_Latex""/""End_Latex"" to generate an image from latex; TDocMacroDirective Handler for ""Begin_Macro""/""End_Macro"" for code that is executed and that can generate an image for documentation; TDocOutput generates documentation web pages; TDocParser parser for reference documentation; TDrawFeedback Present PROOF query feedback; TELTU ELTU shape; TEditQueryFrame Edit query frame; TEfficiency calculating efficiencies; TEllipse An ellipse; TEmulatedCollectionProxy ; TEmulatedMapProxy ; TEntryList A list of entries in a TTree; TEntryListArray A list of entries and subentries in a TTree; TEntryListBlock Used internally in TEntryList to store the entry numbers; TEntryListFromFile Manager for entry lists from different files; TEnv Handle ROOT configuration resources; TEnvRec Individual TEnv records; TEve3DProjection 3D scaling ""projection""; TEveArrow Class for gl visualisation of arrow.; TEveArrowEditor GUI editor for TEveArrow.; TEveArrowGL GL renderer class for TEveArrow.; TEveBox 3D box with arbitrary vertices.; TEveBoxGL GL renderer class for TEveBox.; TEveBoxProjected Projection of TEveBox.; TEveBoxProjectedGL GL renderer class for TEveBoxProjected.; TEveBoxSet Collection of 3D primitives (fixed-size boxes, boxes of",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:60062,feedback,feedback,60062,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['feedback'],['feedback']
Usability,"; TDirectory::FindObjectAnyvirtual TObject * FindObjectAny(const char *name) constFind object by name in the list of memory objects of the current directory or its sub-directories.Definition TDirectory.cxx:796; TDirectory::operator=void operator=(const TDirectory &)=delete; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TListA doubly linked list.Definition TList.h:38; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::MayNotUsevoid MayNotUse(const char *method) constUse this method to signal that a method (defined in a base class) may not be called in a derived clas...Definition TObject.cxx:1046; TStringBasic string class.Definition TString.h:139; TUUIDThis class defines a UUID (Universally Unique IDentifier), also known as GUIDs (Globally Unique IDent...Definition TUUID.h:42; bool; int; ROOT::Minuit2::GradientParameterSpace::Internal@ Internal; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Internal::TDirectoryAtomicAdapterInternal class used in the implementation of gDirectory The objects of type TDirectoryAtomicAdapter s...Definition TDirectory.h:338; ROOT::Internal::TDirectoryAtomicAdapter::operator->TDirectory * operator->() constDefinition TDirectory.h:380; ROOT::Internal::TDirectoryAtomicAdapter::operator=TDirectory * operator=(TDirectory *newvalue)Definition TDirectory.h:372; ROOT::Internal::TDirectoryAtomicAdapter::TDirectoryAtomicAdapterTDirectoryAtomicAdapter()Definition TDirectory.h:343; ROOT::Internal::TDirectoryAtomicAdapter::operator!=bool operator!=(TDirectory *other) constDefinition TDirectory.h:368; ROOT::Internal::TDirectoryAtomicAdapter::operator==bool opera",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDirectory_8h_source.html:31872,GUID,GUIDs,31872,doc/master/TDirectory_8h_source.html,https://root.cern,https://root.cern/doc/master/TDirectory_8h_source.html,1,['GUID'],['GUIDs']
Usability,"; TEveSelectorToEventList & operator= (const TEveSelectorToEventList &)=delete;  . Additional Inherited Members;  Public Types inherited from TSelector; enum  EAbort { kContinue; , kAbortProcess; , kAbortFile; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TSelectorDraw; enum  EStatusBits { kWarn = (1ULL << ( 12 )); };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TSelectorDraw; virtual void ClearFormula ();  Delete internal buffers. ;  ; virtual bool CompileVariables (const char *varexp="""", const char *selection="""");  Compile input variables and selection expression. ;  ; virtual void InitArrays (Int_t newsize);  Initialization of the primitive type arrays if the new size is bigger than the available space. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TEveTreeTools.h>. Inheritance diagram for TEveSelectorToEventList:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TEveSelectorToEventList() [1/2]. TEveSelectorToEventList::TEveSelectorToEventList ; (; const TEveSelectorToEventList & ; ). privatedel",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveSelectorToEventList.html:17139,Clear,ClearFormula,17139,doc/master/classTEveSelectorToEventList.html,https://root.cern,https://root.cern/doc/master/classTEveSelectorToEventList.html,1,['Clear'],['ClearFormula']
Usability,"; TGHtmlBlock * ; pBlock, . Drawable_t ; wid, . int ; left, . int ; top, . int ; width, . int ; height, . Pixmap_t ; pixmap . ). protected . Display a single HtmlBlock. This is where all the drawing happens. ; Definition at line 315 of file TGHtmlDraw.cxx. ◆ ButtonClicked(). void TGHtml::ButtonClicked ; (; const char * ; name, . const char * ; val . ). virtual . Emit ButtonClicked() signal. ; Definition at line 1286 of file TGHtml.cxx. ◆ CellSpacing(). int TGHtml::CellSpacing ; (; TGHtmlElement * ; pTable). Return the appropriate cell spacing for the given table. ; Definition at line 53 of file TGHtmlTable.cxx. ◆ CheckToggled(). void TGHtml::CheckToggled ; (; const char * ; name, . Bool_t ; on, . const char * ; val . ). virtual . Emit CheckToggled() signal. ; Definition at line 1299 of file TGHtml.cxx. ◆ ClassDefOverride(). TGHtml::ClassDefOverride ; (; TGHtml ; , . 0 ;  . ). protected . ◆ Clear(). void TGHtml::Clear ; (; Option_t * ; = """"). overridevirtual . Erase all HTML from this widget and clear the screen. ; This is typically done before loading a new document. ; Reimplemented from TObject.; Definition at line 310 of file TGHtml.cxx. ◆ ClearGcCache(). void TGHtml::ClearGcCache ; (; ). protected . Clear the cache of GCs. ; Definition at line 516 of file TGHtml.cxx. ◆ ColorDistance(). float TGHtml::ColorDistance ; (; ColorStruct_t * ; pA, . ColorStruct_t * ; pB . ). protected . Compute the squared distance between two colors. ; Definition at line 1613 of file TGHtml.cxx. ◆ ComputeVirtualSize(). void TGHtml::ComputeVirtualSize ; (; ). protected . Computes virtual size of html area. ; Definition at line 508 of file TGHtml.cxx. ◆ ControlSize(). int TGHtml::ControlSize ; (; TGHtmlInput * ; pElem). protected . This routine implements the Sizer() function for <INPUT>, <SELECT> and <TEXTAREA> markup. ; A side effect of sizing these markups is that widgets are created to represent the corresponding input controls.; The function normally returns 0. But if it is dealing w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtml.html:57129,clear,clear,57129,doc/master/classTGHtml.html,https://root.cern,https://root.cern/doc/master/classTGHtml.html,1,['clear'],['clear']
Usability,"; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display logs. 'grep' is set to kTRUE if it is invoked by pressing the; 'Filter' button. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void SetGrepView(); Sets the view of grep filters according to the value of checkboxes. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofProgressLog.html:23916,Clear,Clear,23916,root/html534/TProofProgressLog.html,https://root.cern,https://root.cern/root/html534/TProofProgressLog.html,2,['Clear'],['Clear']
Usability,"; TGNumberEntry*fLinesToending line; TGListBox*fLogListlist of workers; TGTextButton*fLogNewdisplay logs button; TProofLog*fProofLogthe log; TGCheckButton*fRawLinesdisplay raw lines button; TGTextButton*fSavesave button; TGNumberEntry*fSessNumrelative index of the session to get; Int_tfSessionIdx; TStringfSessionUrl; TGTextView*fTexttext widget; Int_tfTextTypeType of retrieval; TGTextButton*fUrlButtonrebuild button; TGTextEntry*fUrlTexturl to connect to; TGVerticalFrame*fVworkersVertical frame. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TProofProgressLog(TProofProgressDialog* d, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. TProofProgressLog(const char* url = 0, Int_t sessionidx = 0, Int_t w = 700, Int_t h = 600); Create a window frame for log messages. void Init(Int_t w = 700, Int_t h = 600); Init window frame for log messages. ~TProofProgressLog(); Destructor. void Popup(); Show log window. void Clear(Option_t* = 0); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the window. void LoadFile(const char* file); Load a file in the window. void AddBuffer(const char* buffer); Add text to the window. void CloseWindow(); Handle close button or when closed via window manager action. void BuildLogList(Bool_t create = kFALSE); Build the list of workers. For this, extract the logs and take the names; of TProofLogElements. void DoLog(Bool_t grep = kFALSE); Display the logs. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame, if open. void SaveToFile(); Save the logs to a file; Only the name of the file is taken, no expansion. void NoLineEntry(); Enable/disable the line number entry. void Select(Int_t id, Bool_t all = kTRUE); actions of select all/clear all button. void Rebuild(); Rebuild the log info for a new entered session. void SetUrl(const char* url); slots. { fSessionUrl = url; }. » Author: G Ganis, Aug 2005 » Copyright (C) 1995-2005, Ren",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TProofProgressLog.html:23556,Clear,Clear,23556,root/html528/TProofProgressLog.html,https://root.cern,https://root.cern/root/html528/TProofProgressLog.html,6,['Clear'],['Clear']
Usability,"; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoGtraEditor.html:23389,undo,undoing,23389,root/html604/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html604/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"; TGTextButton*TGeoTrapEditor::fUndoUndo-Button; UInt_tTGFrame::fWidthframe width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for gtra editor. ~TGeoGtraEditor(); Destructor. void SetModel(TObject* obj); Connect to a given twisted trapezoid. void DoApply(); Slot for applying current settings. void DoUndo(); Slot for undoing last operation. void DoTwist(); Change the twist angle. TGeoGtraEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoGtraEditor.html:23389,undo,undoing,23389,root/html602/TGeoGtraEditor.html,https://root.cern,https://root.cern/root/html602/TGeoGtraEditor.html,1,['undo'],['undoing']
Usability,"; TGeoCone(Double_t* params); TGeoCone(const TGeoCone&); TGeoCone(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); TGeoCone(const char* name, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); virtual~TGeoCone(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGeoShape::AfterStreamer(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; static Double_tCapacity(Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); virtual voidComputeNormal_v(const Double_t* points, const Double_t* dirs, Double_t* norms, Int_t vecsize); static voidComputeNormalS(const Double_t* point, const Double_t* dir, Double_t* norm, Double_t dz, Double_t rmin1, Double_t rmax1, Double_t rmin2, Double_t rmax2); virtual Bool_tContains(const Double_t* point) const; virtual voidContains_v(const Double_t* points, Bool_t* inside, Int_t vecsize) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(const Double_t* point, const Double_t* dir) const; virtual voidTGeoShape::CreateThreadData(Int_t); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoCone.html:1530,Clear,ClearThreadData,1530,root/html534/TGeoCone.html,https://root.cern,https://root.cern/root/html534/TGeoCone.html,1,['Clear'],['ClearThreadData']
Usability,"; TGeoPcon::DefineSectionvirtual void DefineSection(Int_t snum, Double_t z, Double_t rmin, Double_t rmax); TGeoPgonDefinition TGeoPgon.h:20; TGeoSphereDefinition TGeoSphere.h:17; TGeoTorusDefinition TGeoTorus.h:17; TGeoTranslationClass describing translations.Definition TGeoMatrix.h:116; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TGeoVolume::AddNodevirtual TGeoNode * AddNode(TGeoVolume *vol, Int_t copy_no, TGeoMatrix *mat=nullptr, Option_t *option="""")Add a TGeoNode to the list of nodes.Definition TGeoVolume.cxx:975; TGeoVolume::Drawvoid Draw(Option_t *option="""") overridedraw top volume according to optionDefinition TGeoVolume.cxx:1206; TGeoVolume::IsRaytracingBool_t IsRaytracing() constCheck if the painter is currently ray-tracing the content of this volume.Definition TGeoVolume.cxx:857; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TObject::Clearvirtual void Clear(Option_t *="""")Definition TObject.h:119; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TPad::FindObjectTObject * FindObject(const char *name) const overrideSearch if object named name is inside this pad or in pads inside this pad.Definition TPad.cxx:2700; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; TPaveText::AddTextvirtual TText * AddText(Double_t x1, Double_t y1, const char *label)Add a new Text line to this pavetext at given coordinates.Definition TPaveText.cxx:191; TPaveText::SetAllWithvirtual void SetAllWith(const char *text, Option_t *option, Double_t value)Set attribute option for all lines containing string text.Definition TPaveText.cxx:827; TPaveText::Drawvoid Draw(Option_t *option="""") overrideDraw this pavetext with its current attributes.Definition TPaveText.cxx:242; TSystem::Loadvirtual int Load(const char *module, const char *entry=""""",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/geom_2csgdemo_8C.html:13829,Clear,Clearvirtual,13829,doc/master/geom_2csgdemo_8C.html,https://root.cern,https://root.cern/doc/master/geom_2csgdemo_8C.html,2,['Clear'],"['Clear', 'Clearvirtual']"
Usability,"; TGraph2D::SetHistogramvirtual void SetHistogram(TH2 *h, Option_t *option="""")Sets the histogram to be filled.Definition TGraph2D.cxx:1568; TGraph2D::SetMaximumvoid SetMaximum(Double_t maximum=-1111)Set maximum.Definition TGraph2D.cxx:1619; TGraph2D::Addvirtual void Add(TF2 *f, Double_t c1=1)Performs the operation: z = z + c1*f(x,y,z) Errors are not recalculated.Definition TGraph2D.cxx:642; TGraph2D::GetYmaxDouble_t GetYmax() constReturns the Y maximum.Definition TGraph2D.cxx:1175; TGraph2D::DistancetoPrimitiveInt_t DistancetoPrimitive(Int_t px, Int_t py) overrideComputes distance from point px,py to a graph.Definition TGraph2D.cxx:730; TGraph2D::SetDirectoryvirtual void SetDirectory(TDirectory *dir)By default when an 2D graph is created, it is added to the list of 2D graph objects in the current di...Definition TGraph2D.cxx:1544; TGraph2D::fDirectoryTDirectory * fDirectory!Pointer to directory holding this 2D graphDefinition TGraph2D.h:60; TGraph2D::Clearvoid Clear(Option_t *option="""") overrideFree all memory allocated by this object.Definition TGraph2D.cxx:681; TGraph2D::Scalevirtual void Scale(Double_t c1=1., Option_t *option=""z"")Multiply the values of a TGraph2D by a constant c1.Definition TGraph2D.cxx:1506; TGraph2D::DirectoryAutoAddvirtual void DirectoryAutoAdd(TDirectory *)Perform the automatic addition of the graph to the given directory.Definition TGraph2D.cxx:715; TGraph2D::CreateInterpolatorvoid CreateInterpolator(Bool_t oldInterp)Add a TGraphDelaunay in the list of the fHistogram's functions.Definition TGraph2D.cxx:968; TGraph2D::fNpyInt_t fNpyNumber of bins along Y in fHistogram.Definition TGraph2D.h:47; TGraph2D::fFunctionsTList * fFunctionsPointer to list of functions (fits and user)Definition TGraph2D.h:57; TGraph2D::SetPointvirtual void SetPoint(Int_t point, Double_t x, Double_t y, Double_t z)Sets point number n.Definition TGraph2D.cxx:1715; TGraph2D::Paintvoid Paint(Option_t *option="""") overridePaints this 2D graph with its current attributes.Defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraph2D_8cxx_source.html:72716,Clear,Clearvoid,72716,doc/master/TGraph2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraph2D_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::AddDirectorystatic void AddDirectory(Bool_t add=kTRUE)Sets the flag controlling the automatic add of histograms in memory.Definition TH1.cxx:1294; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TIterDefinition TCollection.h:235; TKeyBook space in a file, create I/O buffers, to fill them, (un)compress them.Definition TKey.h:28; TKey::ReadObjvirtual TObject * ReadObj()To read a TObject* from the file.Definition TKey.cxx:759; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStopwatch::RealTimeDouble_t RealTime()Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start a...Definition TStopwatch.cxx:110; TStopwatch::Startvoid Start(Bool_t reset=kTRUE)Start the stopwatch.Definition TStopwatch.cxx:58; TStopwatch::CpuTimeDouble_t CpuTime()Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start an...Definition TStopwatch.cxx:125; TStopwatch::Stopvoid Stop()Stop the stopwatch.Definition TStopwatch.cxx:77; TStringBasic string class.Definition TString.h:139; TSystem::UnixPathNamevirtual const char * UnixPathName(const char *unixpathname)Convert from a local pathname to a Unix pathname.Definition TSystem.cxx:1063; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; TSystem::Unlinkvirtual int Unlink(const char *name)Unlink, i.e.Definition TSystem.cxx:1381; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; AuthorRene Brun ; Definition in file bill.C. tutorialstreebill.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/bill_8C.html:8334,Guid,Guide,8334,doc/master/bill_8C.html,https://root.cern,https://root.cern/doc/master/bill_8C.html,1,['Guid'],['Guide']
Usability,"; TH2::fTsumwy2Double_t fTsumwy2Total Sum of weight*Y*Y.Definition TH2.h:35; TH2::GetBinInt_t GetBin(Int_t binx, Int_t biny, Int_t binz=0) const overrideReturn Global bin number corresponding to binx,y,z.Definition TH2.cxx:1086; TH2::ProjectionXTH1D * ProjectionX(const char *name=""_px"", Int_t firstybin=0, Int_t lastybin=-1, Option_t *option="""") constProject a 2-D histogram into a 1-D histogram along X.Definition TH2.cxx:2436; TH2::fTsumwyDouble_t fTsumwyTotal Sum of weight*Y.Definition TH2.h:34; THLimitsFinder::GetLimitsFinderstatic THLimitsFinder * GetLimitsFinder()Return pointer to the current finder.Definition THLimitsFinder.cxx:153; THLimitsFinder::FindGoodLimitsvirtual Int_t FindGoodLimits(TH1 *h, Double_t xmin, Double_t xmax)Compute the best axis limits for the X axis.Definition THLimitsFinder.cxx:53; THashListTHashList implements a hybrid collection class consisting of a hash table and a list to store TObject...Definition THashList.h:34; THashList::Clearvoid Clear(Option_t *option="""") overrideRemove all objects from the list.Definition THashList.cxx:189; TIterDefinition TCollection.h:235; TList::Addvoid Add(TObject *obj) overrideDefinition TList.h:83; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TNamed::GetNameconst char * GetName() const overrideReturns name of object.Definition TNamed.h:47; TNamed::GetTitleconst char * GetTitle() const overrideReturns title of object.Definition TNamed.h:48; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetUniqueIDvirtual UInt_t GetUniqueID() constReturn the unique object id.Definition TObject.cxx:462; TObject::ClassNamevirtual const char * ClassName() constReturns name of class to which the object belongs.Definition TObject.cxx:213; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as spec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TProfile2D_8cxx_source.html:84874,Clear,Clearvoid,84874,doc/master/TProfile2D_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TProfile2D_8cxx_source.html,2,['Clear'],"['Clear', 'Clearvoid']"
Usability,"; TList*fActiveSlaveslist of active slaves (subset of all slaves); TStringfActiveSlavesSavedcomma-separated list of active slaves (before last call to; TMonitor*fAllUniqueMonitormonitor activity on all unique slave sockets, including all submasters; TList*fAllUniqueSlaveslist of all active slaves with unique file systems, including all submasters; Long64_tfBytesReadbytes read by all slaves during the session; TList*fChainschains with this proof set; Int_tfCheckFileStatusremote return status after kPROOF_CHECKFILE; TVirtualMutex*fCloseMutexAvoid crashes in MarkBad or alike while closing; Float_tfCpuTimeCPU time spent by all slaves during the session; TMonitor*fCurrentMonitorcurrently active monitor; TDSet*fDSetcurrent TDSet being validated; Int_tfDrawQueriesnumber of draw queries during this sessions; TList*fEnabledPackagesOnClientlist of packages enabled on client; Bool_tfEndMastertrue for a master in direct contact only with workers; TList*fFeedbacklist of names to be returned as feedback; TProof::FileMap_tfFileMapmap keeping track of a file's md5 and mod time; Bool_tfFinalizationRunning; THashList*fGlobalPackageDirListlist of directories containing global packages libs; TStringfGroupPROOF group of this user; TList*fInactiveSlaveslist of inactive slaves (good but not used for processing); TList*fInputDataInput data objects sent over via file; TStringfInputDataFileFile with input data objects; TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfIsPollingWorkerswill be set to kFALSE to prevent recursive dyn workers check in dyn mode; Bool_tfIsWaitingtrue if queries have been enqueued; Int_tfLastAssignedMerger; Long64_tfLastPollWorkers_stimestamp (in seconds) of last poll for workers, -1 if never checked; TList*fLoadedMacrosList of loaded macros (just file names); TStringfLogFileNamename of the temp file for redirected logs; FILE*fLogFileRtemp file to read redirected logs; FILE*fLogFileWtemp file to redirect logs; Int_tfLogLevelserver debug logging leve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProof.html:31094,feedback,feedback,31094,root/html602/TProof.html,https://root.cern,https://root.cern/root/html602/TProof.html,1,['feedback'],['feedback']
Usability,"; TMinuit*fMinuit; vector<double>fParamsvector of output values; ROOT::Minuit::EMinimizerTypefType; boolfUsed; static ROOT::Math::IMultiGenFunction*fgFunc; static TMinuit*fgMinuit; static boolfgUseStaticMinuitflag to control if using global TMInuit instance (gMinuit); static boolfgUsedflag to control if static instance has done minimization. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TMinuitMinimizer(ROOT::Minuit::EMinimizerType type = ROOT::Minuit::kMigrad, unsigned int ndim = 0); Constructor for TMinuitMinimier class via an enumeration specifying the minimization; algorithm type. Supported types are : kMigrad, kSimplex, kCombined (a combined; Migrad + Simplex minimization) and kMigradImproved (a Migrad mininimization folloed by an; improved search for global minima). The default type is Migrad (kMigrad). TMinuitMinimizer(const char* type, unsigned int ndim = 0); constructor from a char * for the algorithm type, used by the plug-in manager; The names supported (case unsensitive) are:; Migrad (default), Simplex, Minimize (for the combined Migrad+ Simplex) and Migrad_imp. ~TMinuitMinimizer(); Destructor implementation. TMinuitMinimizer(const TMinuitMinimizer& ); Implementation of copy constructor (it is private). bool UseStaticMinuit(bool on = true); static method to control usage of global TMinuit instance. void InitTMinuit(int ndim). void SetFunction(const ROOT::Math::IMultiGenFunction & func); Set the objective function to be minimized, by passing a function object implement the; basic multi-dim Function interface. In this case the derivatives will be; calculated by Minuit; Here a TMinuit instance is created since only at this point we know the number of parameters. void SetFunction(const ROOT::Math::IMultiGradFunction & func); Set the objective function to be minimized, by passing a function object implement the; multi-dim gradient Function interface. In this case the function derivatives are provided; by the user v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMinuitMinimizer.html:6786,Simpl,Simplex,6786,root/html602/TMinuitMinimizer.html,https://root.cern,https://root.cern/root/html602/TMinuitMinimizer.html,4,['Simpl'],['Simplex']
Usability,"; TPyDispatcher & operator= (const TPyDispatcher &);  Assignment operator. Applies python object reference counting. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPyDispatcher.html:4861,Clear,Clear,4861,doc/master/classTPyDispatcher.html,https://root.cern,https://root.cern/doc/master/classTPyDispatcher.html,1,['Clear'],['Clear']
Usability,"; TRandomRanlux48 : Generator based on a the RanLux generator with 48 bits and highest luxury level using the implementation provided by the standard library (std::ranlux48). The drawback of this generator is its slow generation time.; TRandom2 is based on the Tausworthe generator of L'Ecuyer, and it has the advantage of being fast and using only 3 words (of 32 bits) for the state. The period however is not impressively long, it is 10**26. Using the template TRandomGen class (template on the contained Engine type), it is possible to add any generator based on the standard C++ random library (see the C++ random documentation.) or different variants of the MIXMAX generator using the ROOT::Math::MixMaxEngine. Some of the listed generator above (e.g. TRandomMixMax256 or TRandomMT64) are convenient typedef's of generator built using the template TRandomGen class.; Please note also that this class (TRandom) implements also a very simple generator (linear congruential) with period = \(10^9\), known to have defects (the lower random bits are correlated) and it is failing the majority of the random number generator tests. Therefore it should NOT be used in any statistical study.; The following table shows some timings (in nanoseconds/call) for the random numbers obtained using a macbookpro 2.6 GHz Intel Core i7 CPU:. TRandom 3 ns/call (but this is a very BAD Generator, not to be used); TRandom2 5 ns/call; TRandom3 5 ns/call; TRandomMixMax 6 ns/call; TRandomMixMax17 6 ns/call; TRandomMT64 9 ns/call; TRandomMixMax256 10 ns/call; TRandomRanluxpp 14 ns/call; TRandom1 80 ns/call; TRandomRanlux48 250 ns/call. The following methods are provided to generate random numbers distributed according to some basic distributions:. Exp(Double_t tau); Integer(UInt_t imax); Gaus(Double_t mean, Double_t sigma); Rndm(); Uniform(Double_t); Landau(Double_t mean, Double_t sigma); Poisson(Double_t mean); Binomial(Int_t ntot, Double_t prob). Random numbers distributed according to 1-d, 2-d or 3-d dis",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom.html:4340,simpl,simple,4340,doc/master/classTRandom.html,https://root.cern,https://root.cern/doc/master/classTRandom.html,1,['simpl'],['simple']
Usability,"; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query informations frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » La",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TSessionQueryFrame.html:21806,progress bar,progress bar,21806,root/html532/TSessionQueryFrame.html,https://root.cern,https://root.cern/root/html532/TSessionQueryFrame.html,1,['progress bar'],['progress bar']
Usability,"; TStopwatch.h; TStyle.h; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; ROOT::Math::MinimizerOptions::SetDefaultMinimizerstatic void SetDefaultMinimizer(const char *type, const char *algo=nullptr)Set the default Minimizer type and corresponding algorithms.Definition MinimizerOptions.cxx:43; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::SetNpxvirtual void SetNpx(Int_t npx=100)Set the number of points used to draw the function.Definition TF1.cxx:3433; TH1D1-D histogram with a double per channel (see TH1 documentation)Definition TH1.h:670; TH1::FillRandomvirtual void FillRandom(const char *fname, Int_t ntimes=5000, TRandom *rng=nullptr)Fill histogram following distribution in function fname.Definition TH1.cxx:3519; TH1::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Double_t xmin=0, Double_t xmax=0)Fit histogram with function fname.Definition TH1.cxx:3898; TH1::Rebinvirtual TH1 * Rebin(Int_t ngroup=2, const char *newname="""", const Double_t *xbins=nullptr)Rebin this histogram.Definition TH1.cxx:6275; TH1::GetListOfFunctionsTList * GetListOfFunctions() constDefinition TH1.h:244; TH1::Scalevirtual void Scale(Double_t c1=1, Option_t *option="""")Multiply this histogram by a constant c1.Definition TH1.cxx:6604; TList::AtTObject * At(Int_t idx) const overrideReturns the object at position idx. Returns 0 if idx is out of range.Definition TList.cxx:355; TStopwatchStopwatch class.Definition TStopwatch.h:28; TStyle::SetOptFitvoid SetOptFit(Int_t fit=1)The type of information about fit parameters printed in the histogram statistics box can be selected ...Definition TStyle.cxx:1593; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11; AuthorLorenzo Moneta ; Definition in file vectorizedFit.C. tutorialsfitvectorizedFit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/vectorizedFit_8C.html:7052,Guid,Guide,7052,doc/master/vectorizedFit_8C.html,https://root.cern,https://root.cern/doc/master/vectorizedFit_8C.html,1,['Guid'],['Guide']
Usability,"; TString::ReplaceSpecialCppCharsTString & ReplaceSpecialCppChars()Find special characters which are typically used in printf() calls and replace them by appropriate es...Definition TString.cxx:1114; TString::Dataconst char * Data() constDefinition TString.h:376; TString::ReplaceAllTString & ReplaceAll(const TString &s1, const TString &s2)Definition TString.h:704; TString::Resizevoid Resize(Ssiz_t n)Resize the string. Truncate or add blanks as necessary.Definition TString.cxx:1152; TString::Streamervirtual void Streamer(TBuffer &)Stream a string object.Definition TString.cxx:1412; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TStyle::IsReadingBool_t IsReading() constDefinition TStyle.h:296; TTextBase class for several text objects.Definition TText.h:22; TText::GetXDouble_t GetX() constDefinition TText.h:53; TText::SetYvirtual void SetY(Double_t y)Definition TText.h:77; TText::PaintTextvirtual void PaintText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:752; TText::SetXvirtual void SetX(Double_t x)Definition TText.h:76; TText::GetYDouble_t GetY() constDefinition TText.h:61; TText::Classstatic TClass * Class(); bool; double; int; unsigned int; ptTPaveText * ptDefinition entrylist_figure1.C:7; lineTLine * lineDefinition entrylistblock_figure1.C:235; yDouble_t y[n]Definition legend1.C:17; ROOT::Detail::HasBeenDeletedR__ALWAYS_INLINE bool HasBeenDeleted(const TObject *obj)Check if the TObject's memory has been deleted.Definition TObject.h:402; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. graf2dgrafsrcTPaveText.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:19 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPaveText_8cxx_source.html:46196,Guid,Guide,46196,doc/master/TPaveText_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPaveText_8cxx_source.html,1,['Guid'],['Guide']
Usability,"; TString::ToUppervoid ToUpper()Change string to upper case.Definition TString.cxx:1195; TString::RemoveTString & Remove(Ssiz_t pos)Definition TString.h:685; TString::Formvoid Form(const char *fmt,...)Formats a string using a printf style format descriptor.Definition TString.cxx:2356; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; TText::PaintTextvirtual void PaintText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:752; bool; double; int; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; TMath::ACosDouble_t ACos(Double_t)Returns the principal value of the arc cosine of x, expressed in radians.Definition TMath.h:632; TMath::ASinDouble_t ASin(Double_t)Returns the principal value of the arc sine of x, expressed in radians.Definition TMath.h:624; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::LogDouble_t Log(Double_t x)Returns the natural logarithm of x.Definition TMath.h:756; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. graf2dgrafsrcTGraphPolargram.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html:45545,Guid,Guide,45545,doc/master/TGraphPolargram_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPolargram_8cxx_source.html,1,['Guid'],['Guide']
Usability,"; TStyle::IsReadingBool_t IsReading() constDefinition TStyle.h:296; TStyle::GetFrameLineColorColor_t GetFrameLineColor() constDefinition TStyle.h:226; TStyle::GetFrameFillStyleStyle_t GetFrameFillStyle() constDefinition TStyle.h:227; TStyle::SetFrameFillStylevoid SetFrameFillStyle(Style_t styl=0)Definition TStyle.h:374; TStyle::SetFrameBorderModevoid SetFrameBorderMode(Int_t mode=1)Definition TStyle.h:378; TStyle::GetFrameBorderSizeWidth_t GetFrameBorderSize() constDefinition TStyle.h:230; TStyle::SetFrameLineWidthvoid SetFrameLineWidth(Width_t width=1)Definition TStyle.h:376; TStyle::SetFrameBorderSizevoid SetFrameBorderSize(Width_t size=1)Definition TStyle.h:377; TStyle::GetFrameLineStyleStyle_t GetFrameLineStyle() constDefinition TStyle.h:228; TStyle::SetFrameLineStylevoid SetFrameLineStyle(Style_t styl=0)Definition TStyle.h:375; TStyle::GetFrameBorderModeInt_t GetFrameBorderMode() constDefinition TStyle.h:231; TStyle::GetFrameLineWidthWidth_t GetFrameLineWidth() constDefinition TStyle.h:229; TStyle::GetFrameFillColorColor_t GetFrameFillColor() constDefinition TStyle.h:225; TWboxA TBox with a bordersize and a bordermode.Definition TWbox.h:20; TWbox::GetBorderSizeShort_t GetBorderSize() constDefinition TWbox.h:41; TWbox::GetBorderModeShort_t GetBorderMode() constDefinition TWbox.h:40; TWbox::Paintvoid Paint(Option_t *option="""") overridePaint this wbox with its current attributes.Definition TWbox.cxx:115; TWbox::SetBorderModevirtual void SetBorderMode(Short_t bordermode)Definition TWbox.h:51; TWbox::SetBorderSizevirtual void SetBorderSize(Short_t bordersize)Definition TWbox.h:52; TWbox::ExecuteEventvoid ExecuteEvent(Int_t event, Int_t px, Int_t py) overrideExecute action corresponding to one event.Definition TWbox.cxx:107; TWbox::Copyvoid Copy(TObject &wbox) const overrideCopy this wbox to wbox.Definition TWbox.cxx:75; bool; double; int. graf2dgrafsrcTFrame.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFrame_8cxx_source.html:11558,Guid,Guide,11558,doc/master/TFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFrame_8cxx_source.html,1,['Guid'],['Guide']
Usability,; TTextEditor text editor; TThread Thread class; TThreadFactory Thread factory ABC; TThreadImp ThreadImp class; TTime Basic time type with milli second precision; TTimeStamp Encapsulates seconds and ns since EPOCH; TTimer Handle timer event; TToggle Facility for toggling datamembers on/off; TToggleGroup Group of contex-menu toggle objects; TTree Tree descriptor (the main ROOT I/O class); TTreeCache Specialization of TFileCacheRead for a TTree; TTreeCacheUnzip Specialization of TTreeCache for parallel unzipping; TTreeCloner helper used for the fast cloning of TTrees.; TTreeDrawArgsParser Helper class to parse the argument to TTree::Draw; TTreeFormula The Tree formula; TTreeFormulaManager A class coordinating several TTreeFormula objects.; TTreeFriendLeafIter Linked list iterator; TTreeIndex A Tree Index with majorname and minorname.; TTreeInput Simple input dialog; TTreePerfStats TTree I/O performance measurement; TTreePlayer Manager class to play with TTrees; TTreeReader A simple interface to read trees; TTreeResult TTree query result; TTreeRow One row of an TTree query result; TTreeSQL TTree Implementation read and write to a SQL database.; TTreeTableInterface Interface to data in a TTree; TTreeViewer A GUI oriented tree viewer; TUDPSocket This class implements UDP client sockets; TUUID Universally Unique IDentifier; TUnfold Unfolding with support for L-curve analysis; TUnfoldBinning Complex binning schemes for TUnfoldDensity; TUnfoldDensity Unfolding with densisty regularisation; TUnfoldSys Unfolding with support for systematic error propagation; TUnixSystem Interface to Unix OS services; TUnuran ; TUnuranBaseDist Base class for Unuran distribution wrappers; TUnuranContDist Wrapper class for one dimensional continuous distribution; TUnuranDiscrDist Wrapper class for one dimensional discrete distribution; TUnuranEmpDist Wrapper class for empirical distribution; TUnuranMultiContDist Wrapper class for multi dimensional continuous distribution; TUnuranSampler ; TUpload,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/ClassIndex.html:130763,Simpl,Simple,130763,root/html602/ClassIndex.html,https://root.cern,https://root.cern/root/html602/ClassIndex.html,4,"['Simpl', 'simpl']","['Simple', 'simple']"
Usability,"; TVirtualGeoPainter::kGeoBombCyl@ kGeoBombCylDefinition TVirtualGeoPainter.h:49; TVirtualGeoPainter::SetPainterstatic void SetPainter(const TVirtualGeoPainter *painter)Static function to set an alternative histogram painter.Definition TVirtualGeoPainter.cxx:62; TVirtualGeoTrackBase class for user-defined tracks attached to a geometry.Definition TVirtualGeoTrack.h:23; TVirtualGeoTrack::PaintCollectvirtual void PaintCollect(Double_t, Double_t *)Definition TVirtualGeoTrack.h:65; TVirtualPadEditor::ShowEditorstatic void ShowEditor()Show the global pad editor. Static method.Definition TVirtualPadEditor.cxx:96; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; TVirtualViewer3D::PreferLocalFramevirtual Bool_t PreferLocalFrame() const =0; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; bool; double; int; boxvoid box(Int_t pat, Double_t x1, Double_t y1, Double_t x2, Double_t y2)Definition fillpatterns.C:1; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::DegToRadconstexpr Double_t DegToRad()Conversion from degree to radian: .Definition TMath.h:79; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; v0@ v0Definition rootcling_impl.cxx:3700; lTLine lDefinition textangle.C:4. geomgeompaintersrcTGeoPainter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:119276,Guid,Guide,119276,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"; The returned dataset belongs to the caller. Return zero in case of an error.; Generation of individual events is delegated to a virtual generateEvent(); method. A virtual initGenerator() method is also called just before the; first call to generateEvent(). void initGenerator(const RooArgSet& theEvent); Interface function to initialize context for generation for given; set of observables. void printName(ostream& os) const; Print name of context. void printTitle(ostream& os) const; Print title of context. void printClassName(ostream& os) const; Print class name of context. void printArgs(ostream& os) const; Print arguments of context, i.e. the observables being generated in this context. void printMultiline(ostream& os, Int_t contents, Bool_t verbose = kFALSE, TString indent = """") const; Interface for multi-line printing. void setProtoDataOrder(Int_t* lut); Set the traversal order of prototype data to that in the lookup tables; passed as argument. The LUT must be an array of integers with the same; size as the number of entries in the prototype dataset and must contain; integer values in the range [0,Nevt-1]. void resampleData(Double_t& ratio); Rescale existing output buffer with given ratio. Int_t defaultPrintContents(Option_t* opt) const; Define default contents when printing. RooPrintable::StyleOption defaultPrintStyle(Option_t* opt) const; Define default print style. Bool_t isValid() const; If true generator context is in a valid state. void setVerbose(Bool_t verbose = kTRUE); Set/clear verbose messaging. Bool_t isVerbose() const; If true verbose messaging is active. void Print(Option_t* options = 0) const; Print context information on stdout. void setExpectedData(Bool_t ); {}. void generateEvent(RooArgSet& theEvent, Int_t remaining). » Last changed: Sat Sep 5 16:39:54 2015 » Last generated: 2015-09-05 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsGenContext.html:10573,clear,clear,10573,root/html534/RooAbsGenContext.html,https://root.cern,https://root.cern/root/html534/RooAbsGenContext.html,1,['clear'],['clear']
Usability,"; [#1] INFO:Fitting -- using CPU computation library compiled with -mavx2; [#1] INFO:Fitting -- RooAddition::defaultErrorLevel(nll_gauss_over_gauss_Int[x]_dh) Summation contains a RooNLLVar, using its error level; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: activating const optimization; [#1] INFO:Minimization -- RooAbsMinimizerFcn::setOptimizeConst: deactivating const optimization; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #0 because y cannot accommodate the value 14.424; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #3 because y cannot accommodate the value -12.0022; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #5 because y cannot accommodate the value 13.8261; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping event #6 because y cannot accommodate the value -14.9925; [#1] INFO:DataHandling -- RooTreeDataStore::loadValues(ds) Skipping ...; [#0] WARNING:DataHandling -- RooTreeDataStore::loadValues(ds) Ignored 36 out-of-range events; [#1] INFO:DataHandling -- RooDataSet::read: reading file rf102_testData.txt; [#1] INFO:DataHandling -- RooDataSet::read: read 64 events (ignored 0 out of range events); DataStore dataset (rf102_testData.txt); Contains 64 entries; Observables: ; 1) x = 9.46654 L(-10 - 10) ""x""; 2) y = 0.0174204 L(-10 - 10) ""y""; 3) blindState = Normal(idx = 0); ""Blinding State""; 1) RooRealVar:: y = 0.0106407; 2) RooRealVar:: x = -0.79919; 1) RooRealVar:: x = 0.0106407; 2) RooRealVar:: y = -0.79919; 3) RooCategory:: blindState = Normal(idx = 0); ; RooDataSet::ds[y,x] = 64 entries; ; -----------------------; Reading data from ASCII; ; Original data, line 20:; ; Read-back data, line 20:; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C version) ; Definition in file rf102_dataimport.py. tutorialsroofitrf102_dataimport.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf102__dataimport_8py.html:8039,Guid,Guide,8039,doc/master/rf102__dataimport_8py.html,https://root.cern,https://root.cern/doc/master/rf102__dataimport_8py.html,1,['Guid'],['Guide']
Usability,"; auto fullSpectrum =; filteredEvents.Histo1D({""Spectrum"", ""Subset of CMS Run 2010B;#mu#mu mass [GeV];Events"", 1024, 2, 110}, ""m"");; ; // Next we will create the histogram for the J/psi particle, applying first; // the corresponding cut.; double jpsiLow = 2.95;; double jpsiHigh = 3.25;; auto jpsiCut = [jpsiLow, jpsiHigh](double m) { return m < jpsiHigh && m > jpsiLow; };; auto jpsi =; filteredEvents.Filter(jpsiCut, {""m""}); .Histo1D({""jpsi"", ""Subset of CMS Run 2010B: J/#psi window;#mu#mu mass [GeV];Events"", 128, jpsiLow, jpsiHigh},; ""m"");; ; // Finally we draw the two histograms side by side.; auto dualCanvas = new TCanvas(""DualCanvas"", ""DualCanvas"", 800, 512);; dualCanvas->Divide(2, 1);; auto leftPad = dualCanvas->cd(1);; leftPad->SetLogx();; leftPad->SetLogy();; fullSpectrum->DrawClone(""Hist"");; dualCanvas->cd(2);; jpsi->SetMarkerStyle(20);; jpsi->DrawClone(""HistP"");; ; return 0;; }; c#define c(i)Definition RSha256.hxx:101; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TCanvasThe Canvas class.Definition TCanvas.h:23; TFile::Cpvirtual Bool_t Cp(const char *dst, Bool_t progressbar=kTRUE, UInt_t buffersize=1000000)Allows to copy this file to the dst URL.Definition TFile.cxx:5003; TSystem::AccessPathNamevirtual Bool_t AccessPathName(const char *path, EAccessMode mode=kFileExists)Returns FALSE if one can access a file using the specified access mode.Definition TSystem.cxx:1296; ROOT::RDF::FromCSVRDataFrame FromCSV(std::string_view fileName, bool readHeaders=true, char delimiter=',', Long64_t linesChunkSize=-1LL, std::unordered_map< std::string, char > &&colTypes={})Factory method to create a CSV RDataFrame.Definition RCsvDS.cxx:558; df014_CSVDataSourceDefinition df014_CSVDataSource.py:1; mTMarker mDefinition textangle.C:8; . DateOctober 2017 ; AuthorEnric Tejedor (CERN) ; Definition in file df014_CSVDataSource.C. tutorialsdataframedf014_CSVDataSource.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df014__CSVDataSource_8C.html:4135,Guid,Guide,4135,doc/master/df014__CSVDataSource_8C.html,https://root.cern,https://root.cern/doc/master/df014__CSVDataSource_8C.html,1,['Guid'],['Guide']
Usability,"; chain.SetCacheSize(20*1024*1024);; chain.Add(""$H1/dstarmb.root"");; chain.Add(""$H1/dstarp1a.root"");; chain.Add(""$H1/dstarp1b.root"");; chain.Add(""$H1/dstarp2.root"");; ; TString selectionMacro = gSystem->GetDirName(__FILE__) + ""/h1analysis.C"";; ; if (type == 0); chain.Process(selectionMacro);; else if (type == 1) {; // use AClic ( add a + at the end; selectionMacro += ""+"";; chain.Process(selectionMacro);; }; else if (type == 2) {; chain.Process(selectionMacro,""fillList"");; chain.Process(selectionMacro,""useList"");; }; }; ; ; ; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TChainA chain is a collection of files containing TTree objects.Definition TChain.h:33; TStringBasic string class.Definition TString.h:139; TSystem::Setenvvirtual void Setenv(const char *name, const char *value)Set environment variable.Definition TSystem.cxx:1649; TSystem::GetDirNamevirtual TString GetDirName(const char *pathname)Return the directory name in pathname.Definition TSystem.cxx:1032; Author; Definition in file run_h1analysis.C. tutorialstreerun_h1analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/run__h1analysis_8C.html:2716,Guid,Guide,2716,doc/master/run__h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/run__h1analysis_8C.html,1,['Guid'],['Guide']
Usability,"; class charts. ROOT; » HIST; » HIST; » THnT<ULong64_t>. class THnT<ULong64_t>: public THn. Helper struct to hold one dimension's bin range for THnBinIter. Function Members (Methods); public:. virtual~THnT<ULong64_t>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/THnT_ULong64_t_.html:1008,Clear,Clear,1008,root/html602/THnT_ULong64_t_.html,https://root.cern,https://root.cern/root/html602/THnT_ULong64_t_.html,2,['Clear'],['Clear']
Usability,"; class description; function members; data members; class charts. ROOT; » ROOFIT; » ROOFITCORE; » RooSimWSTool::BuildConfig. class RooSimWSTool::BuildConfig. Class RooSimWSTool is a tool operating on RooWorkspace objects that; can clone p.d.f.s into a series of variations that are joined together; into a RooSimultanous p.d.f. The simplest use case to take a workspace p.d.f as prototype and; 'split' a parameter of that p.d.f into two specialized parameters; depending on a category in the dataset. For example, given a Gaussian; p.d.f G(x,m,s) we want to construct a G_a(x,m_a,s) and a G_b(x,m_b,s); with different mean parameters to be fit to a dataset with observables; (x,c) where c is a category with states 'a' and 'b'. Using RooSimWSTool one can create a simultaneous p.d.f from G_a and G_b; from G with the following command. RooSimWSTool wst(wspace) ;; wst.build(""G_sim"",""G"",SplitParam(""m"",""c"")) ;. From this simple example one can go to builds of arbitrary complexity; by specifying multiple SplitParam arguments on multiple parameters; involving multiple splitting categories. Splits can also be performed; in the product multiple categories, e.g. SplitParam(""m"",""c,d"")) ;. splits parameter m in the product of states of c and d. Another possibility; is the 'constrained' split which clones the parameter for all but one state; and insert a formula specialization in a chosen state that evaluates; to 1 - sum_i(a_i) where a_i are all other specializations. For example,; given a category c with state ""A"",""B"",""C"",""D"" the specification. SplitParamConstrained(""m"",""c"",""D""). will result in parameters m_A,m_B,m_C and a formula expression m_D; that evaluates to (1-(m_A+m_B+m_C)). Constrained split can also be; specified in product of categories. In that case the name of the; remainder state follows the syntax ""{State1;State2}"" where State1 and; State2 are the state names of the two spitting categories. The examples so far deal with a single prototype p.d.f. It is also; possible to bu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html:1090,simpl,simple,1090,root/html534/RooSimWSTool__BuildConfig.html,https://root.cern,https://root.cern/root/html534/RooSimWSTool__BuildConfig.html,3,['simpl'],['simple']
Usability,"; const TSAXParser & ; ). privatedelete . ◆ Parse(). Int_t TSAXParser::Parse ; (; ). privatevirtual . This function parses the xml file, by initializing the parser and checks whether the parse context is created or not, it will check as well whether the document is well formated. ; It returns the parse error code, see TXMLParser. ; Definition at line 212 of file TSAXParser.cxx. ◆ ParseBuffer(). Int_t TSAXParser::ParseBuffer ; (; const char * ; contents, . Int_t ; len . ). overridevirtual . It parse the contents, instead of a file. ; It will return error if is attempted to parse a second file while a parse is in progres. It returns parse code error, see TXMLParser. ; Implements TXMLParser.; Definition at line 259 of file TSAXParser.cxx. ◆ ParseFile(). Int_t TSAXParser::ParseFile ; (; const char * ; filename). overridevirtual . It creates the parse context of the xml file, where the xml file name is filename. ; If context is created sucessfully, it will call Parse() It returns parse error code, see TXMLParser. ; Implements TXMLParser.; Definition at line 242 of file TSAXParser.cxx. ◆ Streamer(). void TSAXParser::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TSAXParser::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 55 of file TSAXParser.h. Friends And Related Symbol Documentation. ◆ TSAXParserCallback. friend class TSAXParserCallback. friend . Definition at line 25 of file TSAXParser.h. Member Data Documentation. ◆ fSAXHandler. _xmlSAXHandler* TSAXParser::fSAXHandler. private . libxml2 SAX handler ; Definition at line 28 of file TSAXParser.h. Libraries for TSAXParser:. [legend]; The documentation for this class was generated from the following files:; io/xmlparser/inc/TSAXParser.h; io/xmlparser/src/TSAXParser.cxx. TSAXParser. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSAXParser.html:25128,Guid,Guide,25128,doc/master/classTSAXParser.html,https://root.cern,https://root.cern/doc/master/classTSAXParser.html,1,['Guid'],['Guide']
Usability,"; const char * ; value = nullptr, . const char * ; description = nullptr . ). pure virtual . ◆ AddToSet(). void TGridJDL::AddToSet ; (; const char * ; key, . const char * ; value . ). Adds a value to a key value which hosts a set of values. ; E.g. InputSandbox: {""file1"",""file2""} ; Definition at line 172 of file TGridJDL.cxx. ◆ AddToSetDescription(). void TGridJDL::AddToSetDescription ; (; const char * ; key, . const char * ; description . ). Adds a value to a key value which hosts a set of values. ; E.g. InputSandbox: {""file1"",""file2""} ; Definition at line 195 of file TGridJDL.cxx. ◆ Class(). static TClass * TGridJDL::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGridJDL::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGridJDL::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 75 of file TGridJDL.h. ◆ Clear(). void TGridJDL::Clear ; (; const Option_t * ; = """"). override . Clears the JDL information. ; Definition at line 42 of file TGridJDL.cxx. ◆ DeclFileName(). static const char * TGridJDL::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 75 of file TGridJDL.h. ◆ Generate(). TString TGridJDL::Generate ; (; ). virtual . Generates the JDL snippet. ; Definition at line 208 of file TGridJDL.cxx. ◆ GetDescription(). const char * TGridJDL::GetDescription ; (; const char * ; key). Returns the value corresponding to the provided key. ; Return 0 in case key is not found. ; Definition at line 131 of file TGridJDL.cxx. ◆ GetValue(). const char * TGridJDL::GetValue ; (; const char * ; key). Returns the value corresponding to the provided key. ; Return 0 in case key is not found. ; Definition at line 77 of file TGridJDL.cxx. ◆ IsA(). TClass * TGridJDL::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJDL.html:15467,Clear,Clear,15467,doc/master/classTGridJDL.html,https://root.cern,https://root.cern/doc/master/classTGridJDL.html,1,['Clear'],['Clear']
Usability,"; const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TVirtualMutex.; Definition at line 90 of file TVirtualRWMutex.h. ◆ Lock(). Int_t ROOT::TVirtualRWMutex::Lock ; (; ). inlineoverridevirtual . Implements TVirtualMutex.; Definition at line 79 of file TVirtualRWMutex.h. ◆ ReadLock(). virtual Hint_t * ROOT::TVirtualRWMutex::ReadLock ; (; ). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. ◆ ReadUnLock(). virtual void ROOT::TVirtualRWMutex::ReadUnLock ; (; Hint_t * ; ). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. ◆ Rewind(). virtual std::unique_ptr< StateDelta > ROOT::TVirtualRWMutex::Rewind ; (; const State & ; earlierState). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. ◆ Streamer(). void ROOT::TVirtualRWMutex::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TVirtualMutex. ◆ StreamerNVirtual(). void ROOT::TVirtualRWMutex::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file TVirtualRWMutex.h. ◆ TryLock(). Int_t ROOT::TVirtualRWMutex::TryLock ; (; ). inlineoverridevirtual . Implements TVirtualMutex.; Definition at line 80 of file TVirtualRWMutex.h. ◆ UnLock(). Int_t ROOT::TVirtualRWMutex::UnLock ; (; ). inlineoverridevirtual . Implements TVirtualMutex.; Definition at line 81 of file TVirtualRWMutex.h. ◆ WriteLock(). virtual Hint_t * ROOT::TVirtualRWMutex::WriteLock ; (; ). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. ◆ WriteUnLock(). virtual void ROOT::TVirtualRWMutex::WriteUnLock ; (; Hint_t * ; ). pure virtual . Implemented in ROOT::TRWMutexImp< MutexT, RecurseCountsT >. Libraries for ROOT::TVirtualRWMutex:. [legend]; The documentation for this class was generated from the following file:; core/base/inc/TVirtualRWMutex.h. ROOTTVirtualRWMutex. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:01 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html:5420,Guid,Guide,5420,doc/master/classROOT_1_1TVirtualRWMutex.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1TVirtualRWMutex.html,1,['Guid'],['Guide']
Usability,"; const. print all the options ; Definition at line 312 of file IntegratorOptions.cxx. ◆ PrintDefault(). void ROOT::Math::IntegratorMultiDimOptions::PrintDefault ; (; const char * ; name = nullptr, . std::ostream & ; os = std::cout . ). static . print only the specified default options ; print default options ; Definition at line 320 of file IntegratorOptions.cxx. ◆ SetDefaultAbsTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultAbsTolerance ; (; double ; tol). static . Definition at line 347 of file IntegratorOptions.cxx. ◆ SetDefaultIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultIntegrator ; (; const char * ; name). static . Definition at line 326 of file IntegratorOptions.cxx. ◆ SetDefaultNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultNCalls ; (; unsigned int ; ncall). static . Definition at line 361 of file IntegratorOptions.cxx. ◆ SetDefaultRelTolerance(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultRelTolerance ; (; double ; tol). static . Definition at line 352 of file IntegratorOptions.cxx. ◆ SetDefaultWKSize(). void ROOT::Math::IntegratorMultiDimOptions::SetDefaultWKSize ; (; unsigned int ; size). static . Definition at line 357 of file IntegratorOptions.cxx. ◆ SetIntegrator(). void ROOT::Math::IntegratorMultiDimOptions::SetIntegrator ; (; const char * ; name). set multi-dim integrator name ; Definition at line 302 of file IntegratorOptions.cxx. ◆ SetNCalls(). void ROOT::Math::IntegratorMultiDimOptions::SetNCalls ; (; unsigned int ; calls). inline . set maximum number of function calls ; Definition at line 219 of file IntegratorOptions.h. Libraries for ROOT::Math::IntegratorMultiDimOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/IntegratorOptions.h; math/mathcore/src/IntegratorOptions.cxx. ROOTMathIntegratorMultiDimOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html:9043,Guid,Guide,9043,doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1IntegratorMultiDimOptions.html,1,['Guid'],['Guide']
Usability,"; continuous function.; Trained with output = 1 for the signal and 0 for the; background, the approximated function of inputs X is the probability; of signal, knowing X. Learning; methods. The aim of all learning methods is to minimize the total error on; a set of weighted examples. The error is defined as the sum in; quadrature, devided by two, of the error on each individual output; neuron.; In all methods implemented, one needs to compute; the first derivative of that error with respect to the weights.; Exploiting the well-known properties of the derivative, especialy the; derivative of compound functions, one can write:. for a neuton: product of the local derivative with the; weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative; of the output neuron. This computation is called back-propagation of the errors. A; loop over all examples is called an epoch.; Six learning methods are implemented.; Stochastic minimization: This; is the most trivial learning method. This is the Robbins-Monro; stochastic approximation applied to multilayer perceptrons. The; weights are updated after each example according to the formula:; $w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)$. with. $\Delta w_{ij}(t) = - \eta(\d e_p / \d w_{ij} +; \delta) + \epsilon \Deltaw_{ij}(t-1)$; The parameters for this method are Eta, EtaDecay, Delta and; Epsilon.; Steepest descent with fixed step size; (batch learning): It is the same as the stochastic; minimization, but the weights are updated after considering all the; examples, with the total derivative dEdw. The parameters for this; method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm: Weights; are set to the minimum along the line defined by the gradient. The; only parameter for this method is Tau. Lower tau = higher precision =; slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the; Polak-Ribiere updating formula: Weights are set to the; minimum alo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMultiLayerPerceptron.html:4361,learn,learning,4361,root/html528/TMultiLayerPerceptron.html,https://root.cern,https://root.cern/root/html528/TMultiLayerPerceptron.html,6,['learn'],['learning']
Usability,"; dataloader->AddSpectator( ""spec1 := var1*2"", ""Spectator 1"", ""units"", 'F' );; dataloader->AddSpectator( ""spec2 := var1*3"", ""Spectator 2"", ""units"", 'F' );; ; ; // global event weights per tree (see below for setting event-wise weights); Double_t signalWeight = 1.0;; Double_t backgroundWeight = 1.0;; ; // You can add an arbitrary number of signal or background trees; dataloader->AddSignalTree ( signalTree, signalWeight );; dataloader->AddBackgroundTree( background, backgroundWeight );; ; // To give different trees for training and testing, do as follows:; //; // dataloader->AddSignalTree( signalTrainingTree, signalTrainWeight, ""Training"" );; // dataloader->AddSignalTree( signalTestTree, signalTestWeight, ""Test"" );; ; // Use the following code instead of the above two or four lines to add signal and background; // training and test events ""by hand""; // NOTE that in this case one should not give expressions (such as ""var1+var2"") in the input; // variable definition, but simply compute the expression before adding the event; // ```cpp; // // --- begin ----------------------------------------------------------; // std::vector<Double_t> vars( 4 ); // vector has size of number of input variables; // Float_t treevars[4], weight;; //; // // Signal; // for (UInt_t ivar=0; ivar<4; ivar++) signalTree->SetBranchAddress( Form( ""var%i"", ivar+1 ), &(treevars[ivar]) );; // for (UInt_t i=0; i<signalTree->GetEntries(); i++) {; // signalTree->GetEntry(i);; // for (UInt_t ivar=0; ivar<4; ivar++) vars[ivar] = treevars[ivar];; // // add training and test events; here: first half is training, second is testing; // // note that the weight can also be event-wise; // if (i < signalTree->GetEntries()/2.0) dataloader->AddSignalTrainingEvent( vars, signalWeight );; // else dataloader->AddSignalTestEvent ( vars, signalWeight );; // }; //; // // Background (has event weights); // background->SetBranchAddress( ""weight"", &weight );; // for (UInt_t ivar=0; ivar<4; ivar++) background->SetBranchAddress(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVAClassification_8C.html:88627,simpl,simply,88627,doc/master/TMVAClassification_8C.html,https://root.cern,https://root.cern/doc/master/TMVAClassification_8C.html,1,['simpl'],['simply']
Usability,"; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. Float_tTTUBE::fAspectRatiodefines (the ellipse semi-axis in Y)/(the ellipse semi-axis in X); Double_t*TTUBE::fCoTab! Table of cos(fPhi1) .... cos(fPhil+fDphi1); Float_tTTUBE::fDzhalf length in z; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTTUBE::fNdivnumber of segments (precision); Int_tTShape::fNumberShape number; Float_tTTUBE::fRmaxellipse semi-axis in X outside; Float_tfRmax2outside radius at the high z limit; Float_tTTUBE::fRminellipse semi-axis in X inside; Float_tfRmin2inside radius at the high z limit; Double_t*TTUBE::fSiTab! Table of sin(fPhi1) .... sin(fPhil+fDphi1); TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TCONE(); CONE shape default constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmin1, Float_t rmax1, Float_t rmin2, Float_t rmax2); CONE shape normal constructor. TCONE(const char* name, const char* title, const char* material, Float_t dz, Float_t rmax1, Float_t rmax2 = 0); CONE shape ""simplified"" constructor. ~TCONE(); CONE shape default destructor. void SetPoints(Double_t* points) const; Create CONE points. TCONE(). Float_t GetRmin2() const; {return fRmin2;}. Float_t GetRmax2() const; {return fRmax2;}. » Author: Nenad Buncic 18/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-03-12 16:37; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TCONE.html:9547,simpl,simplified,9547,root/html534/TCONE.html,https://root.cern,https://root.cern/root/html534/TCONE.html,1,['simpl'],['simplified']
Usability,; fImportTransformationsROOT::Experimental::RNTupleImporterprivate; fIsQuietROOT::Experimental::RNTupleImporterprivate; fLeafCountCollectionsROOT::Experimental::RNTupleImporterprivate; fMaxEntriesROOT::Experimental::RNTupleImporterprivate; fModelROOT::Experimental::RNTupleImporterprivate; fNTupleNameROOT::Experimental::RNTupleImporterprivate; fProgressCallbackROOT::Experimental::RNTupleImporterprivate; fSourceFileROOT::Experimental::RNTupleImporterprivate; fSourceTreeROOT::Experimental::RNTupleImporterprivate; fWriteOptionsROOT::Experimental::RNTupleImporterprivate; GetWriteOptions() constROOT::Experimental::RNTupleImporterinline; Import()ROOT::Experimental::RNTupleImporter; InitDestination(std::string_view destFileName)ROOT::Experimental::RNTupleImporterprivate; operator=(const RNTupleImporter &other)=deleteROOT::Experimental::RNTupleImporter; operator=(RNTupleImporter &&other)=deleteROOT::Experimental::RNTupleImporter; PrepareSchema()ROOT::Experimental::RNTupleImporterprivate; ReportSchema()ROOT::Experimental::RNTupleImporterprivate; ResetSchema()ROOT::Experimental::RNTupleImporterprivate; RNTupleImporter()=defaultROOT::Experimental::RNTupleImporterprivate; RNTupleImporter(const RNTupleImporter &other)=deleteROOT::Experimental::RNTupleImporter; RNTupleImporter(RNTupleImporter &&other)=deleteROOT::Experimental::RNTupleImporter; SetConvertDotsInBranchNames(bool value)ROOT::Experimental::RNTupleImporterinline; SetFieldModifier(FieldModifier_t modifier)ROOT::Experimental::RNTupleImporterinline; SetIsQuiet(bool value)ROOT::Experimental::RNTupleImporterinline; SetMaxEntries(std::uint64_t maxEntries)ROOT::Experimental::RNTupleImporterinline; SetNTupleName(const std::string &name)ROOT::Experimental::RNTupleImporterinline; SetWriteOptions(RNTupleWriteOptions options)ROOT::Experimental::RNTupleImporterinline; ~RNTupleImporter()=defaultROOT::Experimental::RNTupleImporter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html:2882,Guid,Guide,2882,doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleImporter-members.html,1,['Guid'],['Guide']
Usability,"; fSettingsROOT::Fit::FitConfigprivate; fUpdateAfterFitROOT::Fit::FitConfigprivate; fWeightCorrROOT::Fit::FitConfigprivate; MinimizerAlgoType() constROOT::Fit::FitConfiginline; MinimizerName() constROOT::Fit::FitConfig; MinimizerOptions()ROOT::Fit::FitConfiginline; MinimizerType() constROOT::Fit::FitConfiginline; MinosErrors() constROOT::Fit::FitConfiginline; MinosParams() constROOT::Fit::FitConfiginline; NormalizeErrors() constROOT::Fit::FitConfiginline; NPar() constROOT::Fit::FitConfiginline; operator=(const FitConfig &rhs)ROOT::Fit::FitConfig; ParabErrors() constROOT::Fit::FitConfiginline; ParamsSettings() constROOT::Fit::FitConfiginline; ParamsSettings()ROOT::Fit::FitConfiginline; ParamsValues() constROOT::Fit::FitConfig; ParSettings(unsigned int i) constROOT::Fit::FitConfiginline; ParSettings(unsigned int i)ROOT::Fit::FitConfiginline; SetDefaultMinimizer(const char *type, const char *algo=nullptr)ROOT::Fit::FitConfigstatic; SetFromFitResult(const FitResult &rhs)ROOT::Fit::FitConfig; SetMinimizer(const char *type, const char *algo=nullptr)ROOT::Fit::FitConfiginline; SetMinimizerOptions(const ROOT::Math::MinimizerOptions &minopt)ROOT::Fit::FitConfig; SetMinosErrors(bool on=true)ROOT::Fit::FitConfiginline; SetMinosErrors(const std::vector< unsigned int > &paramInd)ROOT::Fit::FitConfiginline; SetNormErrors(bool on=true)ROOT::Fit::FitConfiginline; SetParabErrors(bool on=true)ROOT::Fit::FitConfiginline; SetParamsSettings(unsigned int npar, const double *params, const double *vstep=nullptr)ROOT::Fit::FitConfig; SetParamsSettings(const std::vector< ROOT::Fit::ParameterSettings > &pars)ROOT::Fit::FitConfiginline; SetUpdateAfterFit(bool on=true)ROOT::Fit::FitConfiginline; SetWeightCorrection(bool on=true)ROOT::Fit::FitConfiginline; UpdateAfterFit() constROOT::Fit::FitConfiginline; UseWeightCorrection() constROOT::Fit::FitConfiginline; ~FitConfig()ROOT::Fit::FitConfig. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig-members.html:2603,Guid,Guide,2603,doc/master/classROOT_1_1Fit_1_1FitConfig-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FitConfig-members.html,1,['Guid'],['Guide']
Usability,"; id, . EGEventType ; type, . Event_t & ; ev . ). overridevirtual . Check if there is for window ""id"" an event of type ""type"". ; If there is fill in the event structure and return true. If no such event return false. ; Reimplemented from TVirtualX.; Definition at line 1753 of file GX11Gui.cxx. ◆ Class(). static TClass * TGX11::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGX11::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGX11::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 401 of file TGX11.h. ◆ ClearArea(). void TGX11::ClearArea ; (; Window_t ; id, . Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Clear a window area to the background color. ; Reimplemented from TVirtualX.; Definition at line 1741 of file GX11Gui.cxx. ◆ ClearPixmap(). void TGX11::ClearPixmap ; (; Drawable * ; pix). private . Clear the pixmap pix. ; Definition at line 407 of file TGX11.cxx. ◆ ClearWindow() [1/2]. void TGX11::ClearWindow ; (; ). overridevirtual . Clear current window. ; Reimplemented from TVirtualX.; Definition at line 422 of file TGX11.cxx. ◆ ClearWindow() [2/2]. void TGX11::ClearWindow ; (; Window_t ; id). overridevirtual . Clear window. ; Reimplemented from TVirtualX.; Definition at line 2142 of file GX11Gui.cxx. ◆ CloseDisplay(). void TGX11::CloseDisplay ; (; ). overridevirtual . Close connection to display server. ; Reimplemented from TVirtualX.; Definition at line 840 of file GX11Gui.cxx. ◆ ClosePixmap(). void TGX11::ClosePixmap ; (; ). overridevirtual . Delete current pixmap. ; Reimplemented from TVirtualX.; Definition at line 439 of file TGX11.cxx. ◆ CloseWindow(). void TGX11::CloseWindow ; (; ). overridevirtual . Delete current window. ; Reimplemented from TVirtualX.; Definition at line 447 of file TGX11.cxx. ◆ CloseWindow1(). void TGX11::CloseWindow1 ; (; ). private . Delete current window. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGX11.html:58181,Clear,Clear,58181,doc/master/classTGX11.html,https://root.cern,https://root.cern/doc/master/classTGX11.html,1,['Clear'],['Clear']
Usability,"; in case of success. Bool_t JoinProcess(TList* workers); Prepares the given list of new workers to join a progressing process.; Returns kTRUE on success, kFALSE otherwise. Bool_t MergeOutputFiles(); Merge output in files. void SetSelectorDataMembersFromOutputList(); Set the selector's data members:; find the mapping of data members to otuput list entries in the output list; and apply it. Long64_t Finalize(Bool_t force = kFALSE, Bool_t sync = kFALSE). Long64_t Finalize(TQueryResult* qr); Finalize the results of a query already processed. Bool_t SendSelector(const char* selector_file); Send the selector file(s) to master or worker nodes. void MergeOutput(); Merge objects in output the lists. void Progress(Long64_t total, Long64_t processed); Progress signal. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti); Progress signal. void Progress(TProofProgressInfo* pi); Progress signal. void Feedback(TList* objs); Feedback signal. void StopProcess(Bool_t abort, Int_t timeout = -1); Stop process after this event. Int_t AddOutputObject(TObject* obj); Incorporate the received object 'obj' into the output list fOutput.; The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' optimizing the memory; consumption.; Returns -1 in case of error, 1 if the object has been merged into another; one (so that its ownership has not been taken and can be deleted), and 0; otherwise. void RedirectOutput(Bool_t on = kTRUE); Control output redirection to TProof::fLogFileW. void AddOutput(TList* out); Incorporate the content of the received output list 'out' into the final; output list fOutput. The latter is created if not existing.; This method short cuts 'StoreOutput + MergeOutput' limiting the memory; consumption. void NotifyMemory(TObject* obj); Printout the memory record after merging object 'obj'; This record is used by the memory monitor. void SetLastMergingMsg(TObject* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofPlayerRemote.html:20142,Feedback,Feedback,20142,root/html602/TProofPlayerRemote.html,https://root.cern,https://root.cern/root/html602/TProofPlayerRemote.html,2,['Feedback'],['Feedback']
Usability,"; int fFileNum;  ; int fMask;  ; int fReadyMask;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TSocketHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TSocketHandler(). TSocketHandler::TSocketHandler ; (; TMonitor * ; m, . TSocket * ; s, . Int_t ; interest, . Bool_t ; mainloop = kTRUE . ). Definition at line 52 of file TMonitor.cxx. Member Function Documentation. ◆ GetSocket(). TSocket * TSocketHandler::GetSocket ; (; ); const. inline . Definition at line 49 of file TMonitor.cxx. ◆ Notify(). Bool_t TSocketHandler::Notify ; (; ). overridevirtual . Notify when event occurred on descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 64 of file TMonitor.cxx. ◆ ReadNotify(). Bool_t TSocketHandler::ReadNotify ; (; ). inlineoverridevirtual . Notify when something can be read from the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 47 of file TMonitor.cxx. ◆ WriteNotify(). Bool_t TSocketHandler::WriteNotify ; (; ). inlineoverridevirtual . Notify when something can be written to the descriptor associated with this handler. ; Reimplemented from TFileHandler.; Definition at line 48 of file TMonitor.cxx. Member Data Documentation. ◆ fMonitor. TMonitor* TSocketHandler::fMonitor. private . Definition at line 41 of file TMonitor.cxx. ◆ fSocket. TSocket* TSocketHandler::fSocket. private . Definition at line 42 of file TMonitor.cxx. net/net/src/TMonitor.cxx. TSocketHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSocketHandler.html:18000,Guid,Guide,18000,doc/master/classTSocketHandler.html,https://root.cern,https://root.cern/doc/master/classTSocketHandler.html,1,['Guid'],['Guide']
Usability,"; kGeoScale; kGeoReflection; kGeoRegistered; kGeoSavePrimitive; kGeoMatrixOwned; kGeoCombiTrans; kGeoGenTrans; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*TGeoCombiTrans::fRotationrotation matrix; Double_tfScale[3]scale (x, y, z); TStringTNamed::fTitleobject title; Double_tTGeoCombiTrans::fTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGenTrans(); dummy ctor. TGeoGenTrans(const char* name); constructor. TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. ~TGeoGenTrans(); destructor. void Clear(Option_t* option = """"); clear the fields of this transformation. void SetScale(Double_t sx, Double_t sy, Double_t sz); set the scale. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t Normalize(); A scale transformation should be normalized by sx*sy*sz factor. TGeoMatrix& operator=(const TGeoGenTrans& ); Preventing warnings with -Weffc++ in GCC since the behaviour of operator * was chosen so by design. const Double_t * GetScale() const. TGeoMatrix * MakeClone() const. void SetScale(Double_t sx, Double_t sy, Double_t sz). TGeoGenTrans(). » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoMatrix.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2010-11-08 19:55; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoGenTrans.html:15591,Clear,Clear,15591,root/html528/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html528/TGeoGenTrans.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"; kGeoScale; kGeoReflection; kGeoRegistered; kGeoSavePrimitive; kGeoMatrixOwned; kGeoCombiTrans; kGeoGenTrans; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*TGeoCombiTrans::fRotationrotation matrix; Double_tfScale[3]scale (x, y, z); TStringTNamed::fTitleobject title; Double_tTGeoCombiTrans::fTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoGenTrans(); dummy ctor. TGeoGenTrans(const char* name); constructor. TGeoGenTrans(Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. TGeoGenTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, Double_t sx, Double_t sy, Double_t sz, TGeoRotation* rot); constructor. ~TGeoGenTrans(); destructor. void Clear(Option_t* option = """"); clear the fields of this transformation. void SetScale(Double_t sx, Double_t sy, Double_t sz); set the scale. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t Normalize(); A scale transformation should be normalized by sx*sy*sz factor. TGeoMatrix& operator=(const TGeoGenTrans& ); Preventing warnings with -Weffc++ in GCC since the behaviour of operator * was chosen so by design. const Double_t * GetScale() const. TGeoMatrix * MakeClone() const. void SetScale(Double_t sx, Double_t sy, Double_t sz). TGeoGenTrans(). » Author: Andrei Gheata 25/10/01 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/geom:$Id: TGeoMatrix.h 34744 2010-08-07 06:16:36Z brun $ » Last generated: 2011-07-04 15:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGeoGenTrans.html:15691,Clear,Clear,15691,root/html530/TGeoGenTrans.html,https://root.cern,https://root.cern/root/html530/TGeoGenTrans.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Int_tfNvertnumber of vertices of the 2D polygon (at least 3); Int_tfNznumber of z planes (at least two); Double_tTGeoBBox::fOrigin[3]box origin; Double_t*fScale[fNz] array of scale factors (for each Z); UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; vector<ThreadData_t*>fThreadData! Navigation data per thread; Int_tfThreadSize! size of thread-specific array; TStringTNamed::fTitleobject title; Double_t*fX[fNvert] X positions for polygon vertices; Double_t*fX0[fNz] array of X offsets (for each Z); Double_t*fY[fNvert] Y positions for polygon vertices; Double_t*fY0[fNz] array of Y offsets (for each Z); Double_t*fZ[fNz] array of Z planes positions ; Double_tfZcurrentcurrent Z position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void CreateThreadData(Int_t nthreads); Create thread data for n threads max. void SetIz(Int_t iz); Set current z-plane. void SetSeg(Int_t iseg); Set current segment. TGeoXtru(); dummy ctor. TGeoXtru(Int_t nz); Default constructor. TGeoXtru(Double_t* param); Default constructor in GEANT3 style; param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. TGeoXtru(const TGeoXtru& ); copy constructor. TGeoXtru& operator=(const TGeoXtru& ); assignment operator. ~TGeoXtru(); destructor. Double_t Capacity() const; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(const Double_t* point, const Double_t* dir, Double_t* norm); Compute normal to clos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoXtru.html:15123,Clear,ClearThreadData,15123,root/html534/TGeoXtru.html,https://root.cern,https://root.cern/root/html534/TGeoXtru.html,1,['Clear'],['ClearThreadData']
Usability,"; kOverwrite; kWriteDelete; };. protected:. Double_tTGeoBBox::fDXX half-length; Double_tTGeoBBox::fDYY half-length; Double_tTGeoBBox::fDZZ half-length; TStringTNamed::fNameobject identifier; Int_tfNvertnumber of vertices of the 2D polygon (at least 3); Int_tfNznumber of z planes (at least two); Double_tTGeoBBox::fOrigin[3]box origin; Double_t*fScale[fNz] array of scale factors (for each Z); UInt_tTGeoShape::fShapeBitsshape bits; Int_tTGeoShape::fShapeIdshape id; vector<ThreadData_t*>fThreadData! Navigation data per thread; Int_tfThreadSize! size of thread-specific array; TStringTNamed::fTitleobject title; Double_t*fX[fNvert] X positions for polygon vertices; Double_t*fX0[fNz] array of X offsets (for each Z); Double_t*fY[fNvert] Y positions for polygon vertices; Double_t*fY0[fNz] array of Y offsets (for each Z); Double_t*fZ[fNz] array of Z planes positions ; Double_tfZcurrentcurrent Z position. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void ClearThreadData() const. void SetIz(Int_t iz); Set current z-plane. void SetSeg(Int_t iseg); Set current segment. TGeoXtru(); dummy ctor. TGeoXtru(Int_t nz); Default constructor. TGeoXtru(Double_t* param); Default constructor in GEANT3 style; param[0] = nz // number of z planes. param[1] = z1 // Z position of first plane; param[2] = x1 // X position of first plane; param[3] = y1 // Y position of first plane; param[4] = scale1 // scale factor for first plane. param[4*(nz-1]+1] = zn; param[4*(nz-1)+2] = xn; param[4*(nz-1)+3] = yn; param[4*(nz-1)+4] = scalen. TGeoXtru(const TGeoXtru& ); copy constructor. TGeoXtru& operator=(const TGeoXtru& ); assignment operator. ~TGeoXtru(); destructor. Double_t Capacity() const; Compute capacity [length^3] of this shape. void ComputeBBox(); compute bounding box of the pcon. void ComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); Compute normal to closest surface from POINT. Bool_t Contains(Double_t* point) const; test if point is inside t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoXtru.html:14155,Clear,ClearThreadData,14155,root/html532/TGeoXtru.html,https://root.cern,https://root.cern/root/html532/TGeoXtru.html,1,['Clear'],['ClearThreadData']
Usability,"; lower, . double ; upper, . double ; cl . ). constructor from name, the Parameter of interest and lower/upper bound values ; Alternate constructor. ; Definition at line 85 of file SimpleInterval.cxx. Member Function Documentation. ◆ CheckParameters(). bool SimpleInterval::CheckParameters ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if parameters are correct (i.e. they are the POI of this interval) ; Implements RooStats::ConfInterval.; Definition at line 122 of file SimpleInterval.cxx. ◆ Class(). static TClass * RooStats::SimpleInterval::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooStats::SimpleInterval::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooStats::SimpleInterval::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 60 of file SimpleInterval.h. ◆ ConfidenceLevel(). double RooStats::SimpleInterval::ConfidenceLevel ; (; ); const. inlineoverridevirtual . return the confidence interval ; Implements RooStats::ConfInterval.; Definition at line 43 of file SimpleInterval.h. ◆ DeclFileName(). static const char * RooStats::SimpleInterval::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 60 of file SimpleInterval.h. ◆ GetParameters(). RooArgSet * SimpleInterval::GetParameters ; (; ); const. overridevirtual . return a cloned list with the parameter of interest ; return cloned list of parameters ; Implements RooStats::ConfInterval.; Definition at line 115 of file SimpleInterval.cxx. ◆ IsA(). TClass * RooStats::SimpleInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooStats::ConfInterval.; Definition at line 60 of file SimpleInterval.h. ◆ IsInInterval(). bool SimpleInterval::IsInInterval ; (; const RooArgSet & ; parameterPoint); const. overridevirtual . check if ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html:14814,Simpl,SimpleInterval,14814,doc/master/classRooStats_1_1SimpleInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SimpleInterval.html,1,['Simpl'],['SimpleInterval']
Usability,; min). inline . Set the smallest marker size used to paint the markers. ; Definition at line 65 of file TScatter.h. ◆ Streamer(). void TScatter::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TNamed. ◆ StreamerNVirtual(). void TScatter::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 73 of file TScatter.h. Member Data Documentation. ◆ fColor. Double_t* TScatter::fColor {nullptr}. protected . [fNpoints] array of colors ; Definition at line 39 of file TScatter.h. ◆ fGraph. TGraph* TScatter::fGraph {nullptr}. protected . Pointer to graph holding X and Y positions. ; Definition at line 38 of file TScatter.h. ◆ fHistogram. TH2F* TScatter::fHistogram {nullptr}. protected . Pointer to histogram used for drawing axis. ; Definition at line 37 of file TScatter.h. ◆ fMargin. Double_t TScatter::fMargin {.1}. protected . Margin around the plot in %. ; Definition at line 43 of file TScatter.h. ◆ fMaxMarkerSize. Double_t TScatter::fMaxMarkerSize {5.}. protected . Largest marker size used to paint the markers. ; Definition at line 41 of file TScatter.h. ◆ fMaxSize. Int_t TScatter::fMaxSize {-1}. protected . !Current dimension of arrays fX and fY ; Definition at line 35 of file TScatter.h. ◆ fMinMarkerSize. Double_t TScatter::fMinMarkerSize {1.}. protected . Smallest marker size used to paint the markers. ; Definition at line 42 of file TScatter.h. ◆ fNpoints. Int_t TScatter::fNpoints {-1}. protected . Number of points <= fMaxSize. ; Definition at line 36 of file TScatter.h. ◆ fSize. Double_t* TScatter::fSize {nullptr}. protected . [fNpoints] array of marker sizes ; Definition at line 40 of file TScatter.h. Libraries for TScatter:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TScatter.h; hist/hist/src/TScatter.cxx. TScatter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:25 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTScatter.html:27748,Guid,Guide,27748,doc/master/classTScatter.html,https://root.cern,https://root.cern/doc/master/classTScatter.html,1,['Guid'],['Guide']
Usability,"; n, . Int_t * ; ids . ). Set integer ids for point with index n. ; Definition at line 229 of file TEvePointSet.cxx. ◆ SetTitle(). virtual void TEvePointSet::SetTitle ; (; const char * ; t). inlinevirtual . Definition at line 69 of file TEvePointSet.h. ◆ Streamer(). void TEvePointSet::Streamer ; (; TBuffer & ; ). overridevirtual . Reimplemented from TEveElement.; Reimplemented in TEvePointSetProjected, TEveTrack, and TEveTrackProjected. ◆ StreamerNVirtual(). void TEvePointSet::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 99 of file TEvePointSet.h. ◆ TakeAction(). void TEvePointSet::TakeAction ; (; TEvePointSelector * ; sel). overridevirtual . Called from TEvePointSelector when internal arrays of the tree-selector are filled up and need to be processed. ; Virtual from TEvePointSelectorConsumer. ; Implements TEvePointSelectorConsumer.; Definition at line 312 of file TEvePointSet.cxx. ◆ WriteVizParams(). void TEvePointSet::WriteVizParams ; (; std::ostream & ; out, . const TString & ; var . ). overridevirtual . Write visualization parameters. ; Reimplemented from TEveElement.; Reimplemented in TEveTrack.; Definition at line 387 of file TEvePointSet.cxx. Friends And Related Symbol Documentation. ◆ TEvePointSetArray. friend class TEvePointSetArray. friend . Definition at line 37 of file TEvePointSet.h. Member Data Documentation. ◆ fIntIds. TArrayI* TEvePointSet::fIntIds. protected . Definition at line 44 of file TEvePointSet.h. ◆ fIntIdsPerPoint. Int_t TEvePointSet::fIntIdsPerPoint. protected . Definition at line 45 of file TEvePointSet.h. ◆ fTitle. TString TEvePointSet::fTitle. protected . Definition at line 43 of file TEvePointSet.h. Libraries for TEvePointSet:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEvePointSet.h; graf3d/eve/src/TEvePointSet.cxx. TEvePointSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEvePointSet.html:57415,Guid,Guide,57415,doc/master/classTEvePointSet.html,https://root.cern,https://root.cern/doc/master/classTEvePointSet.html,1,['Guid'],['Guide']
Usability,"; name, . RooAbsCategory::value_type ; stateIndex . ). Add the given state to the given range. ; NoteThis creates or accesses a shared map with allowed ranges. All copies of this category will share this range such that a category inside a dataset and its counterpart on the outside will both see a modification of the range. ; Definition at line 348 of file RooCategory.cxx. ◆ Class(). static TClass * RooCategory::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooCategory::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooCategory::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 141 of file RooCategory.h. ◆ clear(). void RooCategory::clear ; (; ). inline . Clear all defined category states. ; Definition at line 69 of file RooCategory.h. ◆ clearRange(). void RooCategory::clearRange ; (; const char * ; name, . bool ; silent . ). Clear the named range. ; NoteThis affects all copies of this category, because they are sharing range definitions. This ensures that categories inside a dataset and their counterparts on the outside will both see a modification of the range. ; Definition at line 321 of file RooCategory.cxx. ◆ clone(). TObject * RooCategory::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 37 of file RooCategory.h. ◆ DeclFileName(). static const char * RooCategory::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 141 of file RooCategory.h. ◆ defineType() [1/2]. bool RooCategory::defineType ; (; const std::string & ; label). Define a state with given name. ; The lowest available positive integer is assigned as index. Category state labels may not contain semicolons. ReturnsTrue in case of an error. ; Definition at line 209 of file RooCategory.cxx. ◆ defineType() [2/2]. bool RooCategory::defin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCategory.html:55249,Clear,Clear,55249,doc/master/classRooCategory.html,https://root.cern,https://root.cern/doc/master/classRooCategory.html,1,['Clear'],['Clear']
Usability,"; ntuple.Draw('pz:px>>hprofs','','goffprofs'); hprofs = gROOT.FindObject('hprofs'); hprofs.SetMarkerColor(5); hprofs.SetMarkerSize(0.7); hprofs.SetMarkerStyle(21); hprofs.Fit('pol2'); ; #; # Get pointer to fitted function and modify its attributes; fpol2 = hprofs.GetFunction('pol2'); fpol2.SetLineWidth(4); fpol2.SetLineColor(2); c1.Update(); ; #; # Display a scatter plot of two columns with a selection.; # Superimpose the result of another cut with a different marker color; pad3.cd(); pad3.GetFrame().SetFillColor(38); pad3.GetFrame().SetBorderSize(8); ntuple.SetMarkerColor(1); ntuple.Draw('py:px','pz>1'); ntuple.SetMarkerColor(2); ntuple.Draw('py:px','pz<1','same'); c1.Update(); ; #; # Display a 3-D scatter plot of 3 columns. Superimpose a different selection.; pad4.cd(); ntuple.Draw('pz:py:px','(pz<10 && pz>6)+(pz<4 && pz>3)'); ntuple.SetMarkerColor(4); ntuple.Draw('pz:py:px','pz<6 && pz>4','same'); ntuple.SetMarkerColor(5); ntuple.Draw('pz:py:px','pz<4 && pz>3','same'); l4 = TPaveText(-0.9,0.5,0.9,0.95); l4.SetFillColor(42); l4.SetTextAlign(12); l4.AddText('You can interactively rotate this view in 2 ways:'); l4.AddText(' - With the RotateCube in clicking in this pad'); l4.AddText(' - Selecting View with x3d in the View menu'); l4.Draw(); ; #; # done; c1.cd(); c1.Update(); gStyle.SetStatColor(19); gBenchmark.Show('ntuple1'); SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPaveTextA Pave (see TPave) with text, lines or/and boxes inside.Definition TPaveText.h:21; SetBorderSizec SetBorderSize(2); AuthorWim Lavrijsen ; Definition in file ntuple1.py. tutorialspyrootntuple1.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/ntuple1_8py.html:3600,Guid,Guide,3600,doc/master/ntuple1_8py.html,https://root.cern,https://root.cern/doc/master/ntuple1_8py.html,1,['Guid'],['Guide']
Usability,"; obj). protected . Set the message to be notified in case of exception. ; Definition at line 3613 of file TProofPlayer.cxx. ◆ SetMerging(). void TProofPlayerRemote::SetMerging ; (; Bool_t ; on = kTRUE). overridevirtual . Switch on/off merge timer. ; Reimplemented from TProofPlayer.; Definition at line 1814 of file TProofPlayer.cxx. ◆ SetSelectorDataMembersFromOutputList(). void TProofPlayerRemote::SetSelectorDataMembersFromOutputList ; (; ). protected . Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ; Definition at line 2766 of file TProofPlayer.cxx. ◆ SetupFeedback(). void TProofPlayerRemote::SetupFeedback ; (; ). overrideprotectedvirtual . Setup reporting of feedback objects. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSuperMaster.; Definition at line 4095 of file TProofPlayer.cxx. ◆ StopFeedback(). void TProofPlayerRemote::StopFeedback ; (; ). overrideprotectedvirtual . Stop reporting of feedback objects. ; Reimplemented from TProofPlayer.; Definition at line 4118 of file TProofPlayer.cxx. ◆ StopProcess(). void TProofPlayerRemote::StopProcess ; (; Bool_t ; abort, . Int_t ; timeout = -1 . ). overridevirtual . Stop process after this event. ; Reimplemented from TProofPlayer.; Definition at line 3325 of file TProofPlayer.cxx. ◆ StoreFeedback(). void TProofPlayerRemote::StoreFeedback ; (; TObject * ; slave, . TList * ; out . ). overridevirtual . Store feedback results from the specified slave. ; Reimplemented from TProofPlayer.; Definition at line 4034 of file TProofPlayer.cxx. ◆ StoreOutput(). void TProofPlayerRemote::StoreOutput ; (; TList * ; out). overridevirtual . Store received output list. ; Reimplemented from TProofPlayer.; Definition at line 3852 of file TProofPlayer.cxx. ◆ Streamer(). void TProofPlayerRemote::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TProofPlayer.; Reimplemented in TProofPlayerSupe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerRemote.html:37045,feedback,feedback,37045,doc/master/classTProofPlayerRemote.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerRemote.html,1,['feedback'],['feedback']
Usability,"; on). Let user stop the internal timer when there is no need to check for remote. ; or start it again later on if needed. (on=False to stop, on=True to start) ; Definition at line 283 of file TGCommandPlugin.cxx. Member Data Documentation. ◆ fComboCmd. TGComboBox* TGCommandPlugin::fComboCmd. protected . commands combobox ; Definition at line 33 of file TGCommandPlugin.h. ◆ fCommand. TGTextEntry* TGCommandPlugin::fCommand. protected . command text entry widget ; Definition at line 34 of file TGCommandPlugin.h. ◆ fCommandBuf. TGTextBuffer* TGCommandPlugin::fCommandBuf. protected . command text buffer ; Definition at line 35 of file TGCommandPlugin.h. ◆ fHf. TGHorizontalFrame* TGCommandPlugin::fHf. protected . horizontal frame ; Definition at line 31 of file TGCommandPlugin.h. ◆ fHistAdd. Bool_t TGCommandPlugin::fHistAdd. protected . flag to add commands to history ; Definition at line 28 of file TGCommandPlugin.h. ◆ fLabel. TGLabel* TGCommandPlugin::fLabel. protected . ""command :"" label ; Definition at line 32 of file TGCommandPlugin.h. ◆ fPid. Int_t TGCommandPlugin::fPid. protected . current process id ; Definition at line 29 of file TGCommandPlugin.h. ◆ fPos. Int_t TGCommandPlugin::fPos. protected . current history position ; Definition at line 30 of file TGCommandPlugin.h. ◆ fStatus. TGTextView* TGCommandPlugin::fStatus. protected . output capture view ; Definition at line 36 of file TGCommandPlugin.h. ◆ fTempString. TString TGCommandPlugin::fTempString. protected . temporary command string ; Definition at line 38 of file TGCommandPlugin.h. ◆ fTimer. TTimer* TGCommandPlugin::fTimer. protected . for local/remote update ; Definition at line 37 of file TGCommandPlugin.h. Libraries for TGCommandPlugin:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGCommandPlugin.h; gui/gui/src/TGCommandPlugin.cxx. TGCommandPlugin. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGCommandPlugin.html:41798,Guid,Guide,41798,doc/master/classTGCommandPlugin.html,https://root.cern,https://root.cern/doc/master/classTGCommandPlugin.html,1,['Guid'],['Guide']
Usability,"; opt . ). overrideprotectedvirtual . AddLast is not allowed in this class. ; See TList::AddLast for the intended behavior. ; Reimplemented from TList.; Definition at line 158 of file TViewPubFunctions.cxx. ◆ After(). TObject * TViewPubFunctions::After ; (; const TObject * ; obj); const. overrideprotectedvirtual . After is not allowed in this class. ; See TList::After for the intended behavior. ; Reimplemented from TList.; Definition at line 231 of file TViewPubFunctions.cxx. ◆ At(). TObject * TViewPubFunctions::At ; (; Int_t ; idx); const. overridevirtual . Returns the object at position idx. Returns 0 if idx is out of range. ; Reimplemented from TList.; Definition at line 211 of file TViewPubFunctions.cxx. ◆ Before(). TObject * TViewPubFunctions::Before ; (; const TObject * ; obj); const. overrideprotectedvirtual . Before is not allowed in this class. ; See TList::Before for the intended behavior. ; Reimplemented from TList.; Definition at line 241 of file TViewPubFunctions.cxx. ◆ Clear(). void TViewPubFunctions::Clear ; (; Option_t * ; option = """"). overrideprotectedvirtual . Clear is not allowed in this class. ; See TList::Clear for the intended behavior. ; Reimplemented from TList.; Definition at line 69 of file TViewPubFunctions.cxx. ◆ Delete(). void TViewPubFunctions::Delete ; (; Option_t * ; option = """"). overrideprotectedvirtual . Delete is not allowed in this class. ; See TList::Delete for the intended behavior. ; Reimplemented from TList.; Definition at line 78 of file TViewPubFunctions.cxx. ◆ FindObject() [1/2]. TObject * TViewPubFunctions::FindObject ; (; const char * ; name); const. overridevirtual . Find an object in this list using its name. ; Requires a sequential scan till the object has been found. Returns 0 if object with specified name is not found. ; Reimplemented from TList.; Definition at line 88 of file TViewPubFunctions.cxx. ◆ FindObject() [2/2]. TObject * TViewPubFunctions::FindObject ; (; const TObject * ; obj); const. overridevirtual . Fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTViewPubFunctions.html:24132,Clear,Clear,24132,doc/master/classTViewPubFunctions.html,https://root.cern,https://root.cern/doc/master/classTViewPubFunctions.html,1,['Clear'],['Clear']
Usability,"; phi2, . Float_t * ; lowNormal, . Float_t * ; highNormal . ). CTUB shape normal constructor. ; Definition at line 80 of file TCTUB.cxx. ◆ ~TCTUB(). TCTUB::~TCTUB ; (; ). override . CTUB shape default destructor. ; Definition at line 94 of file TCTUB.cxx. Member Function Documentation. ◆ Class(). static TClass * TCTUB::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCTUB::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCTUB::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 47 of file TCTUB.h. ◆ DeclFileName(). static const char * TCTUB::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 47 of file TCTUB.h. ◆ IsA(). TClass * TCTUB::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 47 of file TCTUB.h. ◆ SetPoints(). void TCTUB::SetPoints ; (; Double_t * ; points); const. overrideprotectedvirtual . Create TUBS points. ; Reimplemented from TShape.; Definition at line 111 of file TCTUB.cxx. ◆ Streamer(). void TCTUB::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TCTUB. ; Reimplemented from TObject.; Definition at line 153 of file TCTUB.cxx. ◆ StreamerNVirtual(). void TCTUB::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 47 of file TCTUB.h. Member Data Documentation. ◆ fCosHigh. Float_t TCTUB::fCosHigh[3]. protected . Definition at line 33 of file TCTUB.h. ◆ fCosLow. Float_t TCTUB::fCosLow[3]. protected . Definition at line 32 of file TCTUB.h. Libraries for TCTUB:. [legend]; The documentation for this class was generated from the following files:; graf3d/g3d/inc/TCTUB.h; graf3d/g3d/src/TCTUB.cxx. TCTUB. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCTUB.html:23392,Guid,Guide,23392,doc/master/classTCTUB.html,https://root.cern,https://root.cern/doc/master/classTCTUB.html,1,['Guid'],['Guide']
Usability,"; return of()->asCATLV(of()->_args[idx].c_str()) ; }. RooAbsCategory& as_CATFUNC(UInt_t idx); { checkIndex(idx) ; return of()->asCATFUNC(of()->_args[idx].c_str()) ; }. RooArgSet as_SET(UInt_t idx); { checkIndex(idx) ; return of()->asSET(of()->_args[idx].c_str()) ; }. RooArgList as_LIST(UInt_t idx); { checkIndex(idx) ; return of()->asLIST(of()->_args[idx].c_str()) ; }. RooAbsData& as_DATA(UInt_t idx); { checkIndex(idx) ; return of()->asDATA(of()->_args[idx].c_str()) ; }. RooDataHist& as_DHIST(UInt_t idx); { checkIndex(idx) ; return of()->asDHIST(of()->_args[idx].c_str()) ; }. RooDataSet& as_DSET(UInt_t idx); { checkIndex(idx) ; return of()->asDSET(of()->_args[idx].c_str()) ; }. TObject& as_OBJ(UInt_t idx); { checkIndex(idx) ; return of()->asOBJ(of()->_args[idx].c_str()) ; }. const char* as_STRING(UInt_t idx); { checkIndex(idx) ; return of()->asSTRING(of()->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx); { checkIndex(idx) ; return of()->asINT(of()->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx); { checkIndex(idx) ; return of()->asDOUBLE(of()->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx, Int_t defVal); { checkIndex(idx) ; if (idx>of()->_args.size()-1) return defVal ; return of()->asINT(of()->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx, Double_t defVal); { checkIndex(idx) ; if (idx>of()->_args.size()-1) return defVal ; return of()->asDOUBLE(of()->_args[idx].c_str()) ; }. void logError(); { _errorCount++ ; }. const char* autoClassNamePostFix() const; { return _autoClassPostFix.c_str() ; }. void setAutoClassNamePostFix(const char* pfix); { _autoClassPostFix = pfix ; }. std::map<std::string,IFace*>& hooks(); Hooks for other tools. void clearError(); { _errorCount = 0 ; }. Int_t errorCount(); { return _errorCount ; }. » Last changed: Tue Jun 30 14:32:55 2015 » Last generated: 2015-06-30 14:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooFactoryWSTool.html:25972,clear,clearError,25972,root/html602/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html602/RooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"; return of()->asCATLV(of()->_args[idx].c_str()) ; }. RooAbsCategory& as_CATFUNC(UInt_t idx); { checkIndex(idx) ; return of()->asCATFUNC(of()->_args[idx].c_str()) ; }. RooArgSet as_SET(UInt_t idx); { checkIndex(idx) ; return of()->asSET(of()->_args[idx].c_str()) ; }. RooArgList as_LIST(UInt_t idx); { checkIndex(idx) ; return of()->asLIST(of()->_args[idx].c_str()) ; }. RooAbsData& as_DATA(UInt_t idx); { checkIndex(idx) ; return of()->asDATA(of()->_args[idx].c_str()) ; }. RooDataHist& as_DHIST(UInt_t idx); { checkIndex(idx) ; return of()->asDHIST(of()->_args[idx].c_str()) ; }. RooDataSet& as_DSET(UInt_t idx); { checkIndex(idx) ; return of()->asDSET(of()->_args[idx].c_str()) ; }. TObject& as_OBJ(UInt_t idx); { checkIndex(idx) ; return of()->asOBJ(of()->_args[idx].c_str()) ; }. const char* as_STRING(UInt_t idx); { checkIndex(idx) ; return of()->asSTRING(of()->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx); { checkIndex(idx) ; return of()->asINT(of()->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx); { checkIndex(idx) ; return of()->asDOUBLE(of()->_args[idx].c_str()) ; }. Int_t as_INT(UInt_t idx, Int_t defVal); { checkIndex(idx) ; if (idx>of()->_args.size()-1) return defVal ; return of()->asINT(of()->_args[idx].c_str()) ; }. Double_t as_DOUBLE(UInt_t idx, Double_t defVal); { checkIndex(idx) ; if (idx>of()->_args.size()-1) return defVal ; return of()->asDOUBLE(of()->_args[idx].c_str()) ; }. void logError(); { _errorCount++ ; }. const char* autoClassNamePostFix() const; { return _autoClassPostFix.c_str() ; }. void setAutoClassNamePostFix(const char* pfix); { _autoClassPostFix = pfix ; }. std::map<std::string,IFace*>& hooks(); Hooks for other tools. void clearError(); { _errorCount = 0 ; }. Int_t errorCount(); { return _errorCount ; }. » Last changed: Tue Mar 10 17:16:44 2015 » Last generated: 2015-03-10 17:16; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooFactoryWSTool.html:25010,clear,clearError,25010,root/html534/RooFactoryWSTool.html,https://root.cern,https://root.cern/root/html534/RooFactoryWSTool.html,1,['clear'],['clearError']
Usability,"; rhs). delete . ◆ operator=() [2/2]. GSLMultiMinimizer & ROOT::Math::GSLMultiMinimizer::operator= ; (; GSLMultiMinimizer && ; rhs). delete . ◆ Restart(). int ROOT::Math::GSLMultiMinimizer::Restart ; (; ). inline . restart minimization from current point ; Definition at line 166 of file GSLMultiMinimizer.h. ◆ Set(). int ROOT::Math::GSLMultiMinimizer::Set ; (; const ROOT::Math::IMultiGradFunction & ; func, . const double * ; x, . double ; stepSize, . double ; tol . ). inline . set the function to be minimize the initial minimizer parameters, step size and tolerance in the line search ; Definition at line 115 of file GSLMultiMinimizer.h. ◆ TestGradient() [1/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; const double * ; g, . double ; absTol . ); const. inline . test gradient (require a vector gradient) ; Definition at line 179 of file GSLMultiMinimizer.h. ◆ TestGradient() [2/2]. int ROOT::Math::GSLMultiMinimizer::TestGradient ; (; double ; absTol); const. inline . test gradient (ask from minimizer gradient vector) ; Definition at line 172 of file GSLMultiMinimizer.h. ◆ X(). double * ROOT::Math::GSLMultiMinimizer::X ; (; ); const. inline . x values at the minimum ; Definition at line 146 of file GSLMultiMinimizer.h. Member Data Documentation. ◆ fFunc. GSLMultiMinDerivFunctionWrapper ROOT::Math::GSLMultiMinimizer::fFunc. private . Definition at line 191 of file GSLMultiMinimizer.h. ◆ fMinimizer. gsl_multimin_fdfminimizer* ROOT::Math::GSLMultiMinimizer::fMinimizer. private . Definition at line 190 of file GSLMultiMinimizer.h. ◆ fType. const gsl_multimin_fdfminimizer_type* ROOT::Math::GSLMultiMinimizer::fType. private . Definition at line 192 of file GSLMultiMinimizer.h. ◆ fVec. gsl_vector* ROOT::Math::GSLMultiMinimizer::fVec. mutableprivate . Definition at line 194 of file GSLMultiMinimizer.h. math/mathmore/src/GSLMultiMinimizer.h. ROOTMathGSLMultiMinimizer. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:21 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html:5510,Guid,Guide,5510,doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GSLMultiMinimizer.html,1,['Guid'],['Guide']
Usability,; sVariable . ); const. Retrieve an s weight. ; Parameters. [in]numEventEvent number to retrieve s weight for. ; [in]sVariableThe yield parameter to retrieve the s weight for. . Definition at line 236 of file SPlot.cxx. ◆ GetSWeightVars(). RooArgList SPlot::GetSWeightVars ; (; ); const. Return a RooArgList containing all parameters that have s weights. ; Definition at line 357 of file SPlot.cxx. ◆ GetYieldFromSWeight(). double SPlot::GetYieldFromSWeight ; (; const char * ; sVariable); const. Sum the SWeights for a particular species over all events. ; This should equal the total (weighted) yield of that species. This method is intended as a check. ; Definition at line 316 of file SPlot.cxx. ◆ IsA(). TClass * RooStats::SPlot::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 84 of file SPlot.h. ◆ SetSData(). RooDataSet * SPlot::SetSData ; (; RooDataSet * ; data). Set dataset (if not passed in constructor). ; Definition at line 215 of file SPlot.cxx. ◆ Streamer(). void RooStats::SPlot::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::SPlot::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 84 of file SPlot.h. Member Data Documentation. ◆ fSData. RooDataSet* RooStats::SPlot::fSData = nullptr. protected . Definition at line 82 of file SPlot.h. ◆ fSWeightVars. RooArgList RooStats::SPlot::fSWeightVars. protected . Definition at line 78 of file SPlot.h. Libraries for RooStats::SPlot:. [legend]; The documentation for this class was generated from the following files:; roofit/roostats/inc/RooStats/SPlot.h; roofit/roostats/src/SPlot.cxx; /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/pyzdoc/_roofit.pyzdoc. RooStatsSPlot. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:57 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SPlot.html:27105,Guid,Guide,27105,doc/master/classRooStats_1_1SPlot.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SPlot.html,1,['Guid'],['Guide']
Usability,; seed = 1). Definition at line 488 of file RanluxppEngineImpl.cxx. ◆ ~RanluxppCompatEngineGslRanlxs(). template<int p> . ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::~RanluxppCompatEngineGslRanlxs ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). template<int p> . uint64_t ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::IntRndm. Generate a random integer value with 24 bits. ; Definition at line 509 of file RanluxppEngineImpl.cxx. ◆ Name(). template<int p> . static const char * ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 123 of file RanluxppEngine.h. ◆ operator()(). template<int p> . double ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::operator(). Generate a floating point random number (non-virtual method) ; Definition at line 503 of file RanluxppEngineImpl.cxx. ◆ Rndm(). template<int p> . double ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::Rndm. overridevirtual . Generate a floating point random number with 24 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 497 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). template<int p> . void ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 515 of file RanluxppEngineImpl.cxx. ◆ Skip(). template<int p> . void ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 521 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. template<int p> . std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineGslRanlxs< p >::fImpl. private . Definition at line 104 of file RanluxppEngine.h. math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineGslRanlxs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html:3961,Guid,Guide,3961,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxs.html,1,['Guid'],['Guide']
Usability,; seed = 1). Definition at line 532 of file RanluxppEngineImpl.cxx. ◆ ~RanluxppCompatEngineGslRanlxd(). template<int p> . ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::~RanluxppCompatEngineGslRanlxd ; (; ). overridedefault . Member Function Documentation. ◆ IntRndm(). template<int p> . uint64_t ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::IntRndm. Generate a random integer value with 48 bits. ; Definition at line 553 of file RanluxppEngineImpl.cxx. ◆ Name(). template<int p> . static const char * ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::Name ; (; ). inlinestatic . Get name of the generator. ; Definition at line 160 of file RanluxppEngine.h. ◆ operator()(). template<int p> . double ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::operator(). Generate a floating point random number (non-virtual method) ; Definition at line 547 of file RanluxppEngineImpl.cxx. ◆ Rndm(). template<int p> . double ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::Rndm. overridevirtual . Generate a floating point random number with 48 bits of randomness. ; Implements ROOT::Math::TRandomEngine.; Definition at line 541 of file RanluxppEngineImpl.cxx. ◆ SetSeed(). template<int p> . void ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::SetSeed ; (; uint64_t ; seed). Initialize and seed the state of the generator. ; Definition at line 559 of file RanluxppEngineImpl.cxx. ◆ Skip(). template<int p> . void ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::Skip ; (; uint64_t ; n). Skip n random numbers without generating them. ; Definition at line 565 of file RanluxppEngineImpl.cxx. Member Data Documentation. ◆ fImpl. template<int p> . std::unique_ptr<ImplType> ROOT::Math::RanluxppCompatEngineGslRanlxd< p >::fImpl. private . Definition at line 141 of file RanluxppEngine.h. math/mathcore/inc/Math/RanluxppEngine.h; math/mathcore/src/RanluxppEngineImpl.cxx. ROOTMathRanluxppCompatEngineGslRanlxd. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html:3961,Guid,Guide,3961,doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1RanluxppCompatEngineGslRanlxd.html,1,['Guid'],['Guide']
Usability,"; stack upwards and calling the ""redo"" method of each command. Examples:. 1. Create a new command. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)""; ""SetFillColor(Color_t)"");. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method. Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");. For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. 2. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color. com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);. 1st argument - the number of undo, redo parameters; the other arguments - undo, redo values. Since the number of undo,redo parameters is the same one can use. com->SetArgs(1, new_color, old_color);. 3. Undo, redo method execution. com->Redo(); // execute redo method; com->Undo(); // execute undo method. 4. Merged commands. It possible to group several commands together so an end user; can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);. 5. Macro commands. ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);. During Redo operation commands composing macro command are executed; sequentially in direct order (first in first out). During Undo,; they are executed in reverse order (last in first out). 6. Undo manager. TQUndoManager is recorder of undo and redo operations. This is; command history list which can be traversed backwards and upwards; performing undo and redo operations.; To register command TQUndoManager::Add(TObject*) method is used. TQUndoManager *history = new TQUndoManager();; history->Add(com);. TQUndoManager::Add automatically invokes execution o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:1949,Undo,Undo,1949,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,12,['Undo'],['Undo']
Usability,"; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGLEventHandler.h>. Inheritance diagram for TGLEventHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGLEventHandler(). TGLEventHandler::TGLEventHandler ; (; TGWindow * ; w, . TObject * ; obj . ). Constructor. ; Definition at line 58 of file TGLEventHandler.cxx. ◆ ~TGLEventHandler(). TGLEventHandler::~TGLEventHandler ; (; ). override . Destructor. ; Definition at line 90 of file TGLEventHandler.cxx. Member Function Documentation. ◆ ClassDefOverride(). TGLEventHandler::ClassDefOverride ; (; TGLEventHandler ; , . 0 ;  . ). ◆ ClearMouseOver(). void TGLEventHandler::ClearMouseOver ; (; ). virtual . Clear mouse-over state and emit mouse-over signals. ; Current overlay element is also told the mouse has left. ; Definition at line 1034 of file TGLEventHandler.cxx. ◆ ControlValue(). Int_t TGLEventHandler::ControlValue ; (; Int_t ; v). inlineprotected . Definition at line 64 of file TGLEventHandler.h. ◆ ExecuteEvent(). void TGLEventHandler::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overridevirtual . Process event of type 'event' - one of EEventType types, occurring at window location px, py This is provided for use when embedding GL viewer into pad. ; Reimplemented from TObject.; Definition at line 219 of file TGLEventHandler.cxx. ◆ GetArcBall(). Bool_t TGLEventHandler::GetArcBall ; (; ); const. inline . Definition at line 103 of file TGLEventHandler.h. ◆ GetDoInternalSelection(). Bool_t TGLEventHandler::GetDoInternalSelection ; (; ); const. inline . Definition at line 100 of file TGLEventHandler.h. ◆ GetSecSelType(). Int_t TGLEv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEventHandler.html:21098,Clear,ClearMouseOver,21098,doc/master/classTGLEventHandler.html,https://root.cern,https://root.cern/doc/master/classTGLEventHandler.html,1,['Clear'],['ClearMouseOver']
Usability,"; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfErrorCodeerror code of last operation; TStringfErrorMsgerror message of last operation; Bool_tfErrorOutenable error output. Class Charts. Inheritance Chart:. TObject. ←; TSQLStatement. ←. TMySQLStatement. Function documentation; Int_t GetErrorCode() const; returns error code of last operation; if res==0, no error; Each specific implementation of TSQLStatement provides its own error coding. const char* GetErrorMsg() const; returns error message of last operation; if no errors, return 0; Each specific implementation of TSQLStatement provides its own error messages. void ClearError(); reset error fields. void SetError(Int_t code, const char* msg, const char* method = 0); set new values for error fields; if method specified, displays error message. Bool_t SetDate(Int_t , const TDatime& ); set only date value for specified parameter from TDatime object. Bool_t SetTime(Int_t , const TDatime& ); set only time value for specified parameter from TDatime object. Bool_t SetDatime(Int_t , const TDatime& ); set date & time value for specified parameter from TDatime object. Bool_t SetTimestamp(Int_t , const TDatime& ); set timestamp value for specified parameter from TDatime object. TDatime GetDatime(Int_t ); return value of parameter in form of TDatime; Be aware, that TDatime does not allow dates before 1995-01-01. Int_t GetYear(Int_t ); return year value for parameter (if applicable). Int_t GetMonth(Int_t ); return month value for parameter (if applicable). Int_t GetDay(Int_t ); return day value for parameter (if applicable). Int_t GetHour(Int_t ); return hours value for par",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TSQLStatement.html:19510,Clear,ClearError,19510,root/html602/TSQLStatement.html,https://root.cern,https://root.cern/root/html602/TSQLStatement.html,2,['Clear'],['ClearError']
Usability,"; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TSignalHandler; Int_t fDelay;  ; ESignals fSignal;  ; Bool_t fSync;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . Inheritance diagram for TProofServLiteSegViolationHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TProofServLiteSegViolationHandler(). TProofServLiteSegViolationHandler::TProofServLiteSegViolationHandler ; (; TProofServLite * ; s). inline . Definition at line 140 of file TProofServLite.cxx. Member Function Documentation. ◆ Notify(). Bool_t TProofServLiteSegViolationHandler::Notify ; (; ). overridevirtual . Handle seg violation. ; Implements TSysEvtHandler.; Definition at line 148 of file TProofServLite.cxx. Member Data Documentation. ◆ fServ. TProofServLite* TProofServLiteSegViolationHandler::fServ. private . Definition at line 138 of file TProofServLite.cxx. proof/proof/src/TProofServLite.cxx. TProofServLiteSegViolationHandler. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:17 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofServLiteSegViolationHandler.html:16704,Guid,Guide,16704,doc/master/classTProofServLiteSegViolationHandler.html,https://root.cern,https://root.cern/doc/master/classTProofServLiteSegViolationHandler.html,1,['Guid'],['Guide']
Usability,; static voidDestroyInstance(); Bool_tDrawProgressBar() const; TMVA::Config::IONames&GetIONames(); TMVA::Config::VariablePlotting&GetVariablePlotting(); static TMVA::Config&Instance(); virtual TClass*IsA() const; Bool_tIsSilent() const; TMVA::Config&operator=(const TMVA::Config&); voidSetDrawProgressBar(Bool_t d); voidSetSilent(Bool_t s); voidSetUseColor(Bool_t uc); voidSetWriteOptionsReference(Bool_t w); virtual voidShowMembers(TMemberInspector& insp); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b); Bool_tUseColor() const; Bool_tWriteOptionsReference() const. private:. (unknown)(); TMVA::ConfigConfig(); TMVA::MsgLogger&Log() const. Data Members; public:. TMVA::Config::IONamesfIONamesCustomisable weight file properties; TMVA::Config::VariablePlottingfVariablePlottingCustomisable plotting properties. private:. Bool_tfDrawProgressBardraw progress bar to indicate training evolution; TMVA::MsgLogger*fLoggermessage logger; Bool_tfSilentno output at all; Bool_tfUseColoredConsolecoloured standard output; Bool_tfWriteOptionsReferenceif set true: Configurable objects write file with option reference; static TMVA::Config*fgConfigPtr. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Config(); constructor - set defaults. void DestroyInstance(); static function: destroy TMVA instance. TMVA::Config& Instance(); static function: returns TMVA instance. Bool_t UseColor() const; { return fUseColoredConsole; }. void SetUseColor(Bool_t uc); { fUseColoredConsole = uc; }. Bool_t IsSilent() const; { return fSilent; }. void SetSilent(Bool_t s); { fSilent = s; }. Bool_t WriteOptionsReference() const; { return fWriteOptionsReference; }. void SetWriteOptionsReference(Bool_t w); { fWriteOptionsReference = w; }. Bool_t DrawProgressBar() const; { return fDrawProgressBar; }. void SetDrawProgressBar(Bool_t d); { fDrawProgressBar = d; }. VariablePlotting& GetVariablePlotting(); { return fVariablePlotting; }. IONames& GetIONames(); { retur,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__Config.html:1240,progress bar,progress bar,1240,root/html528/TMVA__Config.html,https://root.cern,https://root.cern/root/html528/TMVA__Config.html,3,['progress bar'],['progress bar']
Usability,"; static voidTSQLServer::SetFloatFormat(const char* fmt = ""%e""); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector&); virtual Int_tShutdown(); virtual Bool_tStartTransaction(); virtual TSQLStatement*Statement(const char* sql, Int_t = 100); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTSQLServer::ClearError(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(); voidTSQLServer::SetError(Int_t code, const char* msg, const char* method = 0). Data Members; public:. enum TSQLServer::ESQLDataTypes { kSQL_NONE; kSQL_CHAR; kSQL_VARCHAR; kSQL_INTEGER; kSQL_FLOAT; kSQL_DOUBLE; kSQL_NUMERIC; kSQL_BINARY; kSQL_TIMESTAMP; };; enum TObject::EStatusBits { kCanDelete; kMustCleanup; kObjInCanvas; kIsReferenced; kHasUUID; kCannotPick; kNoContextMenu; kInvalidObject; };; enum TObject::[unnamed] { kIsOnHeap; kNotDeleted; kZombie; kBitMask; kSingleKey; kOverwrite; kWriteDelete; };. protected:. TStringTSQLServer::fDBcurrently selected DB; Int_tTSQLServer::fErrorCodeerror code of last operation; TStringTSQLServer::fErrorMsgerror message of last operation; Bool_tTSQLServer::fErrorOutenable error output; TStringTSQLServer::fHosthost to which we are connected; TStringfInfoserver info string; MYSQL*fMySQLconnection to MySQL server; Int_tTSQLServer::fPortport to which we are connected; TStringTSQLServer::fTypetype of DBMS (MySQL, O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMySQLServer.html:7401,Clear,ClearError,7401,root/html534/TMySQLServer.html,https://root.cern,https://root.cern/root/html534/TMySQLServer.html,1,['Clear'],['ClearError']
Usability,"; t.DrawText(xc1,y,text);; sprintf(text,""`%s"",symbol[i]);; t.DrawText(xc2,y,text);; sprintf(text,""'%s"",symbol[i]);; t.DrawText(xc3,y,text);; sprintf(text,""~%s"",symbol[i]);; t.DrawText(xc4,y,text);; y -= dy;; }; }; h#define h(i)Definition RSha256.hxx:106; Bool_tbool Bool_tDefinition RtypesCore.h:63; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; wwinID wDefinition TGWin32VirtualGLProxy.cxx:39; valueOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void valueDefinition TGWin32VirtualXProxy.cxx:142; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; y2Option_t Option_t TPoint TPoint const char y2Definition TGWin32VirtualXProxy.cxx:70; textOption_t Option_t TPoint TPoint const char textDefinition TGWin32VirtualXProxy.cxx:68; y1Option_t Option_t TPoint TPoint const char y1Definition TGWin32VirtualXProxy.cxx:70; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TTextBase class for several text objects.Definition TText.h:22; TText::DrawTextvirtual TText * DrawText(Double_t x, Double_t y, const char *text)Draw this text with new coordinates.Definition TText.cxx:176; lineTLine * lineDefinition entrylistblock_figure1.C:235; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; nconst Int_t nDefinition legend1.C:16; c2return c2Definition legend2.C:14; c3return c3Definition legend3.C:15; AuthorOlivier Couet ; Definition in file pstable.C. tutorialsgraphicspstable.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/pstable_8C.html:5570,simpl,simple,5570,doc/master/pstable_8C.html,https://root.cern,https://root.cern/doc/master/pstable_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"; typedef T BackendType;  ; typedef IBaseFunctionMultiDimTempl< T > BaseFunc;  . #include <Fit/FcnAdapter.h>. Inheritance diagram for ROOT::Fit::FcnAdapter:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ FcnAdapter(). ROOT::Fit::FcnAdapter::FcnAdapter ; (; void(*)(int &, double *, double &, double *, int) ; fcn, . int ; dim = 0 . ). inline . Definition at line 31 of file FcnAdapter.h. ◆ ~FcnAdapter(). ROOT::Fit::FcnAdapter::~FcnAdapter ; (; ). inlineoverride . Definition at line 36 of file FcnAdapter.h. Member Function Documentation. ◆ Clone(). ROOT::Math::IMultiGenFunction * ROOT::Fit::FcnAdapter::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class must implement their version of the Clone method. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 40 of file FcnAdapter.h. ◆ DoEval(). double ROOT::Fit::FcnAdapter::DoEval ; (; const double * ; x); const. inlineoverrideprivate . Definition at line 48 of file FcnAdapter.h. ◆ NDim(). unsigned int ROOT::Fit::FcnAdapter::NDim ; (; ); const. inlineoverridevirtual . Retrieve the dimension of the function. ; Implements ROOT::Math::IBaseFunctionMultiDimTempl< T >.; Definition at line 38 of file FcnAdapter.h. ◆ SetDimension(). void ROOT::Fit::FcnAdapter::SetDimension ; (; int ; dim). inline . Definition at line 44 of file FcnAdapter.h. Member Data Documentation. ◆ fDim. unsigned int ROOT::Fit::FcnAdapter::fDim. private . Definition at line 58 of file FcnAdapter.h. ◆ fFCN. void(* ROOT::Fit::FcnAdapter::fFCN) (int &, double *, double &, double *, int). private . Definition at line 59 of file FcnAdapter.h. Libraries for ROOT::Fit::FcnAdapter:. [legend]; The documentation for this class was generated from the following file:; math/mathcore/inc/Fit/FcnAdapter.h. ROOTFitFcnAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html:3119,Guid,Guide,3119,doc/master/classROOT_1_1Fit_1_1FcnAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1FcnAdapter.html,1,['Guid'],['Guide']
Usability,"; typedef std::vector< TGLOverlayElement * > OverlayElmVec_t;  ; typedef SceneInfoList_t::iterator SceneInfoList_i;  ; typedef std::list< TGLSceneInfo * > SceneInfoList_t;  ; typedef SceneInfoVec_t::iterator SceneInfoVec_i;  ; typedef std::vector< TGLSceneInfo * > SceneInfoVec_t;  ; typedef void(TGLSceneBase::* SubRender_foo) (TGLRnrCtx &);  ;  Protected Member Functions inherited from TGLViewer; void FadeView (Float_t alpha);  Draw a rectangle (background color and given alpha) across the whole viewport. ;  ; void InitGL ();  Initialise GL state. ;  ; void MakeCurrent () const;  Make GL context current. ;  ; void PostDraw ();  Perform GL work which must be done after each draw. ;  ; void PreDraw ();  Perform GL work which must be done before each draw. ;  ; void SetupCameras (Bool_t reset);  Setup cameras for current bounding box. ;  ; void SetupClipObject () override;  allow simple guide axes labels to be scaled relative to scene units ;  ; void SetViewport (const TGLRect &vp);  ; void SetViewport (Int_t x, Int_t y, Int_t width, Int_t height);  Set viewer viewport (window area) with bottom/left at (x,y), with dimensions 'width'/'height'. ;  ; void SwapBuffers () const;  Swap GL buffers. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TGLViewerBase; SceneInfoList_i FindScene (TGLSceneBase *scene);  Find scene-info corresponding to scene. ;  ; void SubRenderScenes (SubRender_foo render_foo);  Call sub-rendering function render_foo on all currently visible scenes. ;  ;  Protected Member Functions inherited from TQObject; virtual void * GetSender ();  ; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLEmbeddedViewer.html:32322,simpl,simple,32322,doc/master/classTGLEmbeddedViewer.html,https://root.cern,https://root.cern/doc/master/classTGLEmbeddedViewer.html,4,"['guid', 'simpl']","['guide', 'simple']"
Usability,"; uniform = workspace[""uniform""]; obs_data = workspace[""obs_data""]; ; # Training the model; model = SBI(workspace); model.model_data(""gauss"", ""x"", ""mu"", n_samples_train); model.reference_data(""uniform"", ""x"", n_samples_train); model.preprocessing(); model.train_classifier(); sbi_model = model; ; ; # Compute the likelihood ratio of the classifier for analysis purposes; def learned_likelihood_ratio(x, mu):; n = max(len(x), len(mu)); X = np.zeros((n, 2)); X[:, 0] = x; X[:, 1] = mu; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1 - prob); ; ; # Compute the learned likelihood ratio; llhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, x_var, mu_var); ; # Compute the real likelihood ratio; llhr_calc = ROOT.RooFormulaVar(""llhr_calc"", ""x[0] / x[1]"", [gauss, uniform]); ; # Create the exact negative log likelihood functions for Gaussian model; nll_gauss = gauss.createNLL(obs_data); ROOT.SetOwnership(nll_gauss, True); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", llhr_learned, True); ; nllr_learned = pdf_learned.createNLL(obs_data); ROOT.SetOwnership(nllr_learned, True); ; # Compute the morphed nll; morphing(ROOT.RooMomentMorphFuncND.Linear); nll_morph = workspace[""morph""].createNLL(obs_data); ROOT.SetOwnership(nll_morph, True); ; # Plot the negative logarithmic summed likelihood; frame1 = mu_var.frame(Title=""NLL of SBI vs. Morphing;mu;NLL"", Range=(2.2, 2.8)); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); nll_gauss.plotOn(frame1, LineColor=""kP6Blue+1"", ShiftToZero=True, Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, LineColor=""kP6Blue+2"", ShiftToZero=True, Name=""morphed""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); ; # Plot the likelihood functions; frame2 = x_var.frame(Title=""Likelihood ratio r(x|#mu=2.5);x;p_{gauss}/p_{",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html:6964,learn,learned,6964,doc/master/rf615__simulation__based__inference_8py.html,https://root.cern,https://root.cern/doc/master/rf615__simulation__based__inference_8py.html,2,['learn'],['learned']
Usability,"; v = TMatrixDRow(m,0);; TMatrixDColumn m1(m,1); m1(2) = 3; // the same as m(2,1)=3;; Note, constructing of, say, TMatrixDDiag does *not* involve any; copying of any elements of the source matrix. 5. It's possible (and encouraged) to use ""nested"" functions; For example, creating of a Hilbert matrix can be done as follows:. void foo(const TMatrixD &m); {; TMatrixD m1(TMatrixD::kZero,m);; struct MakeHilbert : public TElementPosActionD {; void Operation(Double_t &element); { element = 1./(fI+fJ-1); }; };; m1.Apply(MakeHilbert());; }. of course, using a special method THilbertMatrixD() is; still more optimal, but not by a whole lot. And that's right,; class MakeHilbert is declared *within* a function and local to; that function. It means one can define another MakeHilbert class; (within another function or outside of any function, that is, in; the global scope), and it still will be OK. Note, this currently; is not yet supported by the interpreter CINT. Another example is applying of a simple function to each matrix; element:. void foo(TMatrixD &m,TMatrixD &m1); {; typedef double (*dfunc_t)(double);; class ApplyFunction : public TElementActionD {; dfunc_t fFunc;; void Operation(Double_t &element); { element=fFunc(element); }; public:; ApplyFunction(dfunc_t func):fFunc(func) {}; };; ApplyFunction x(TMath::Sin);; m.Apply(x);; }. Validation code $ROOTSYS/test/vmatrix.cxx and vvector.cxx contain; a few more examples of that kind. 6. Lazy matrices: instead of returning an object return a ""recipe""; how to make it. The full matrix would be rolled out only when; and where it's needed:; TMatrixD haar = THaarMatrixD(5);; THaarMatrixD() is a *class*, not a simple function. However; similar this looks to a returning of an object (see note #1; above), it's dramatically different. THaarMatrixD() constructs a; TMatrixDLazy, an object of just a few bytes long. A special; ""TMatrixD(const TMatrixDLazy &recipe)"" constructor follows the; recipe and makes the matrix haar() right in place. No",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMatrixTBase_double_.html:6277,simpl,simple,6277,root/html528/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html528/TMatrixTBase_double_.html,12,['simpl'],['simple']
Usability,"; vector< double > fMin;  ; double fVal;  . Friends; class BoxContainer;  ; ostream & operator<< (ostream &os, const Box &b);  . Constructor & Destructor Documentation. ◆ Box(). ROOT::Fit::Box::Box ; (; const vector< double > & ; min, . const vector< double > & ; max, . const double ; value = 0.0, . const double ; error = 1.0 . ). inline . Definition at line 41 of file SparseData.cxx. Member Function Documentation. ◆ AddVal(). void ROOT::Fit::Box::AddVal ; (; const double ; value). inline . Definition at line 62 of file SparseData.cxx. ◆ GetError(). double ROOT::Fit::Box::GetError ; (; ); const. inline . Definition at line 59 of file SparseData.cxx. ◆ GetMax(). const vector< double > & ROOT::Fit::Box::GetMax ; (; ); const. inline . Definition at line 55 of file SparseData.cxx. ◆ GetMin(). const vector< double > & ROOT::Fit::Box::GetMin ; (; ); const. inline . Definition at line 53 of file SparseData.cxx. ◆ GetVal(). double ROOT::Fit::Box::GetVal ; (; ); const. inline . Definition at line 57 of file SparseData.cxx. ◆ operator==(). bool ROOT::Fit::Box::operator== ; (; const Box & ; b). inline . Definition at line 48 of file SparseData.cxx. Friends And Related Symbol Documentation. ◆ BoxContainer. friend class BoxContainer. friend . Definition at line 64 of file SparseData.cxx. ◆ operator<<. ostream & operator<< ; (; ostream & ; os, . const Box & ; b . ). friend . Definition at line 374 of file SparseData.cxx. Member Data Documentation. ◆ fError. double ROOT::Fit::Box::fError. private . Definition at line 71 of file SparseData.cxx. ◆ fMax. vector<double> ROOT::Fit::Box::fMax. private . Definition at line 69 of file SparseData.cxx. ◆ fMin. vector<double> ROOT::Fit::Box::fMin. private . Definition at line 68 of file SparseData.cxx. ◆ fVal. double ROOT::Fit::Box::fVal. private . Definition at line 70 of file SparseData.cxx. math/mathcore/src/SparseData.cxx. ROOTFitBox. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html:2647,Guid,Guide,2647,doc/master/classROOT_1_1Fit_1_1Box.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Box.html,1,['Guid'],['Guide']
Usability,"; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static void SetMenuHidingTimeout (Long_t timeout);  Set global timeout for menu-hiding in mili-seconds. ;  ;  Static Public Member Functions inherited from TGLViewer; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TGLColorSet & GetDefaultColorSet ();  Returns reference to the default color-set. ;  ; static Bool_t IsUsingDefaultColorSetForNewViewers ();  Returns the value of the static flag that determines if new viewers should use the default color-set. ;  ; static void SetAxisLabelScale (Float_t als);  Sets static scaling facor that allows simple guide axies to have label values scaled relative to actual scene dimensions. ;  ; static void UseDefaultColorSetForNewViewers (Bool_t x);  Sets static flag that determines if new viewers should use the default color-set. ;  ;  Static Public Member Functions inherited from TVirtualViewer3D; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TVirtualViewer3D * Viewer3D (TVirtualPad *pad=nullptr, Option_t *type="""");  Create a Viewer 3D of specified type. ;  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLSAViewer.html:29415,simpl,simple,29415,doc/master/classTGLSAViewer.html,https://root.cern,https://root.cern/doc/master/classTGLSAViewer.html,2,"['guid', 'simpl']","['guide', 'simple']"
Usability,"; virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0); virtual voidCanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidCreatePackets(); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = kBigNumber, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(O",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:3375,undo,undo,3375,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['undo'],['undo']
Usability,"; virtual TGButton*AddButton(const TGWindow* w, TGPictureButton* button, Int_t spacing = 0); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidButtonClicked(); virtual voidButtonPressed(); virtual voidButtonReleased(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidChangeIcon(ToolBarData_t* button, const char* new_icon); virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidCleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidClicked(Int_t id)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGToolBar.html:1800,Clear,Clear,1800,root/html528/TGToolBar.html,https://root.cern,https://root.cern/root/html528/TGToolBar.html,6,['Clear'],['Clear']
Usability,"; virtual TToggle * First ();  ; virtual Int_t GetTogglesCount ();  ; virtual Int_t IndexOf (TToggle *t);  ; virtual Int_t InsertAt (TToggle *t, Int_t pos, Bool_t select=1);  Add a new toggle at a specific position. ;  ; TClass * IsA () const override;  ; virtual TToggle * Last ();  ; TToggleGroup & operator= (const TToggleGroup &);  Assignment operator. ;  ; virtual void Remove (Int_t pos);  ; virtual void Remove (TToggle *t);  ; virtual void Select (Int_t idx);  Select a toggle. ;  ; virtual void Select (TToggle *t);  Selector a toggle. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTToggleGroup.html:1812,Clear,Clear,1812,doc/master/classTToggleGroup.html,https://root.cern,https://root.cern/doc/master/classTToggleGroup.html,1,['Clear'],['Clear']
Usability,"; virtual voidShowMembers(TMemberInspector& insp); virtual voidsterilize(); virtual voidStreamer(TBuffer& b); voidStreamerNVirtual(TBuffer& b). Data Members; protected:. static Bool_t_clearObsListClear obslist on sterilize?; Bool_t_clearOnRedirect; Int_tRooCacheManager<RooAbsCacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooObjCacheManager.html:3714,clear,clearCacheOnServerRedirect,3714,root/html530/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html530/RooObjCacheManager.html,1,['clear'],['clearCacheOnServerRedirect']
Usability,"; virtual voidTEveElement::AddParent(TEveElement* re); virtual voidAddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tCanEditElement() const; virtual Bool_tCanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tCanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEveElement::CSCTakeAnyPare",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveGeoNode.html:1913,Clear,ClearStamps,1913,root/html528/TEveGeoNode.html,https://root.cern,https://root.cern/root/html528/TEveGeoNode.html,6,['Clear'],['ClearStamps']
Usability,"; virtual voidTEveElement::AddParent(TEveElement* re); virtual voidTEveElement::AddStamp(UChar_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; voidCloseBins(); virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTE",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEvePointSetArray.html:2654,Clear,Clear,2654,root/html530/TEvePointSetArray.html,https://root.cern,https://root.cern/root/html530/TEvePointSetArray.html,5,['Clear'],['Clear']
Usability,"; virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTGSlider::CreateDisabledPicture(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringTGSlider::GetTypeString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWindow::EEditModeTGW",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGHSlider.html:15145,Clear,ClearFlags,15145,root/html602/TGHSlider.html,https://root.cern,https://root.cern/root/html602/TGHSlider.html,4,['Clear'],['ClearFlags']
Usability,"; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual Bool_tCanMakeNewSlots() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidClearEveFrame(); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); static TEveWindowSlot*CreateDefaultWindowSlot(); static TEveWindowSlot*CreateWindowInTab(TGTab* tab, TEveWindow* eve_parent = 0); static TEveWindowSlot*CreateWindowMainFrame(TEveWindow* eve_parent = 0); voidTEveElement::CSCApplyMainColorToAllChildren(); void",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TEveWindow.html:2418,Clear,ClearProjectedList,2418,root/html530/TEveWindow.html,https://root.cern,https://root.cern/root/html530/TEveWindow.html,5,['Clear'],['ClearProjectedList']
Usability,"; virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); voidChangeBackgroundColor(TGListBox*)MENU ; voidChangeBackgroundColor(TGCanvas*)MENU ; voidChangeBackgroundColor(TGComboBox*)MENU ; voidChangeBackgroundColor(TGFrame*)MENU ; voidChangeBackgroundColor(TGCompositeFrame*)MENU ; voidChangeBarColor(TGProgressBar*)MENU ; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; voidChangeImage(TGIcon*)MENU ; virtual voidTGFrame::ChangeOptions(UInt_t options); voidChangePicture(TGPictureButton*)MENU ; voidChangeProperties(TGLabel*)MENU ; voidChangeProperties(TGTextButton*)MENU ; voidChangeTextColor(TGGroupFrame*)MENU ; voidChangeTextColor(TGLabel*)MENU ; voidChangeTextColor(TGTextButton*)MENU ; voidChangeTextColor(TGProgressBar*)MENU ; voidChangeTextColor(TGTextEntry*)MENU ; voidChangeTextFont(TGGroupFrame*)MENU ; voidChangeTextFont(TGTextEntry*)MENU ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGuiBldDragManager.html:1870,Clear,Clear,1870,root/html528/TGuiBldDragManager.html,https://root.cern,https://root.cern/root/html528/TGuiBldDragManager.html,6,['Clear'],['Clear']
Usability,"; virtual voidTObject::UseCurrentStyle(); Bool_tTGWidget::WantFocus() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; Int_tTGWidget::WidgetId() const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidTGDoubleSlider::ChangeCursor(Event_t* event); static Int_tTQObject::CheckConnectArgs(TQObject* sender, TClass* sender_class, const char* signal, TClass* receiver_class, const char* slot); Int_tTGWidget::ClearFlags(Int_t flags); static TStringTQObject::CompressName(const char* method_name); static Bool_tTQObject::ConnectToClass(TQObject* sender, const char* signal, TClass* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::ConnectToClass(const char* sender_class, const char* signal, TClass* receiver_class, void* receiver, const char* slot); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoRedraw(); virtual voidTGFrame::Draw3dRectangle(UInt_t type, Int_t x, Int_t y, UInt_t w, UInt_t h); static voidTGDoubleSlider::FixBounds(Float_t& min, Float_t& max); static Time_tTGFrame::GetLastClick(); TStringTGFrame::GetOptionString() const; const TGResourcePool*TGFrame::GetResourcePool() const; virtual void*TGFrame::GetSender(); virtual const char*TQObject::GetSenderClassName() const; TStringTGDoubleSlider::GetSString() const; voidTObject::MakeZombie(); Int_tTGWidget::SetFlags(Int_t flags); virtual voidTGFrame::StartGuiBuilding(Bool_t on = kTRUE). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TGWindow::EEditModeTGWindow::kEditDisable; static TGWindow::EEditModeTGWindow::kEditDisableBtnEnable; static TGWindow::EEditModeTGWindow::kEditDisableEvents; static TGWindow::EEditModeTGWindow::kEditDisabl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGDoubleHSlider.html:15674,Clear,ClearFlags,15674,root/html602/TGDoubleHSlider.html,https://root.cern,https://root.cern/root/html602/TGDoubleHSlider.html,4,['Clear'],['ClearFlags']
Usability,"; virtual void WriteUShort (UShort_t s)=0;  ; virtual UInt_t WriteVersion (const TClass *cl, Bool_t useBcnt=kFALSE)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBufferText.html:19884,Clear,Clear,19884,doc/master/classTBufferText.html,https://root.cern,https://root.cern/doc/master/classTBufferText.html,1,['Clear'],['Clear']
Usability,"; virtual void WriteVizParams (std::ostream &out, const TString &var);  Write-out visual parameters for this object. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveGeoNode.html:18802,Clear,Clear,18802,doc/master/classTEveGeoNode.html,https://root.cern,https://root.cern/doc/master/classTEveGeoNode.html,2,['Clear'],['Clear']
Usability,"; voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::Sty",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooCategory.html:1974,Clear,Clear,1974,root/html532/RooCategory.html,https://root.cern,https://root.cern/root/html532/RooCategory.html,1,['Clear'],['Clear']
Usability,"; voidRooAbsArg::addServerList(RooAbsCollection& serverList, Bool_t valueProp = kTRUE, Bool_t shapeProp = kFALSE); voidaddToRange(const char* rangeName, const char* stateNameList); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearRange(const char* name, Bool_t silent); voidRooAbsArg::clearShapeDirty() const; voidclearTypes(); voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooCategory.html:1974,Clear,Clear,1974,root/html528/RooCategory.html,https://root.cern,https://root.cern/root/html528/RooCategory.html,2,['Clear'],['Clear']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsAnaConvPdf.html:4010,clear,clearEvalErrorLog,4010,root/html526/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsAnaConvPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedPdf.html:3110,clear,clearEvalErrorLog,3110,root/html526/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDecay.html:2514,clear,clearEvalErrorLog,2514,root/html526/RooDecay.html,https://root.cern,https://root.cern/root/html526/RooDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBCPEffDecay.html:2816,clear,clearEvalErrorLog,2816,root/html526/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html526/RooBCPEffDecay.html,4,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooBDecay.html:2714,clear,clearEvalErrorLog,2714,root/html526/RooBDecay.html,https://root.cern,https://root.cern/root/html526/RooBDecay.html,1,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooArgusBG.html:2538,clear,clearEvalErrorLog,2538,root/html526/RooArgusBG.html,https://root.cern,https://root.cern/root/html526/RooArgusBG.html,49,['clear'],['clearEvalErrorLog']
Usability,"; voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsAnaConvPdf.html:4127,Clear,Clear,4127,root/html532/RooAbsAnaConvPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsAnaConvPdf.html,1,['Clear'],['Clear']
Usability,"; voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdA",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedPdf.html:3227,Clear,Clear,3227,root/html532/RooAbsCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedPdf.html,1,['Clear'],['Clear']
Usability,"; voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; virtual list<Double_t>*RooAbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooEffProd.html:2828,Clear,Clear,2828,root/html532/RooEffProd.html,https://root.cern,https://root.cern/root/html532/RooEffProd.html,3,['Clear'],['Clear']
Usability,"; voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidAddItem(TGLVEntry* item); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContaine",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLVContainer.html:2112,Clear,Clear,2112,root/html528/TGLVContainer.html,https://root.cern,https://root.cern/root/html528/TGLVContainer.html,6,['Clear'],['Clear']
Usability,"; void Add (TObject *obj, Option_t *opt) override;  Add command to the list of merged commands. ;  ; virtual Bool_t CanCompress (TQCommand *c) const;  By default, commands can be compressed if they are: ;  ; virtual Bool_t CanMerge (TQCommand *c) const;  Two commands can be merged if they can be composed into a single command (Macro command). ;  ; virtual Bool_t CanRedo () const;  Returns kTRUE if Redo action is possible, kFALSE if it's not. ;  ; virtual Bool_t CanUndo () const;  Returns kTRUE if Undo action is possible, kFALSE if it's not. ;  ; virtual void Compress (TQCommand *c);  Compress command. ;  ; void Delete (Option_t *option="""") override;  If ""opt"" is not zero delete every merged command which option string is equal to ""opt"". ;  ; const char * GetName () const override;  Returns the command name. ;  ; Int_t GetNRargs () const;  Returns a number of redo arguments. ;  ; Int_t GetNUargs () const;  Returns a number of undo arguments. ;  ; void * GetObject () const;  Returns an object for which undo redo actions are applied. ;  ; TQConnection * GetRedo () const;  ; Long_t * GetRedoArgs () const;  Returns a pointer to array of redo arguments. ;  ; const char * GetRedoName () const;  Returns the name of redo command. ;  ; Int_t GetStatus () const;  Returns a number of sequential undo or redo operations. ;  ; const char * GetTitle () const override;  Returns command description. ;  ; TQConnection * GetUndo () const;  ; Long_t * GetUndoArgs () const;  Returns a pointer to array of undo arguments. ;  ; const char * GetUndoName () const;  Returns the name of undo command. ;  ; TClass * IsA () const override;  ; Bool_t IsEqual (const TObject *obj) const override;  Equal comparison. ;  ; Bool_t IsExecuting () const;  Returns kTRUE if command execution is in progress. ;  ; Bool_t IsMacro () const;  Returns kTRUE if neither redo nor undo action specified. ;  ; Bool_t IsRedoing () const;  Redo action is in progress. ;  ; virtual Bool_t IsSetter () const;  Returns kTRUE i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:6079,undo,undo,6079,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; virtual Bool_t CancelStagingDataSet (const char *dataset);  Cancels a dataset staging request. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; virtual void ClearCache (const char *file=0);  Remove file from all file caches. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; virtual void ClearDataSetCache (const char *dataset=0);  Clear the content of the dataset cache, if any (matching 'dataset', if defined). ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; v",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:4423,Clear,ClearDataSetCache,4423,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,6,['Clear'],"['Clear', 'ClearDataSetCache']"
Usability,"; void CallFunc_SetArgImpl (CallFunc_t *func, const U &head);  ; template<typename U , typename... T> ; void CallFunc_SetArgImpl (CallFunc_t *func, const U &head, const T &... tail);  ; template<typename T > ; void CallFunc_SetArgRef (CallFunc_t *func, T &param) const;  ; template<typename... T> ; void CallFunc_SetArguments (CallFunc_t *func, const T &... args);  ; TInterpreterValue * CreateTemporary () const;  The created temporary must be deleted by the caller. ;  ; TClass * IsA () const override;  ; int SetClassAutoloading (int a) const;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCling.html:36570,Clear,Clear,36570,doc/master/classTCling.html,https://root.cern,https://root.cern/doc/master/classTCling.html,1,['Clear'],['Clear']
Usability,"; void SetCompressionLevel (Int_t level=ROOT::RCompressionSetting::ELevel::kUseMin);  See comments for function SetCompressionSettings. ;  ; void SetCompressionSettings (Int_t settings=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault);  Used to specify the compression level and algorithm: settings = 100 * algorithm + level. ;  ; void SetRemoteProtocol (Int_t rproto);  ; void SetSecContext (TSecContext *ctx);  ; void SetService (const char *service);  ; void SetServType (Int_t st);  ; void SetUrl (const char *url);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Touch ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPSocket.html:5650,Clear,Clear,5650,doc/master/classTPSocket.html,https://root.cern,https://root.cern/doc/master/classTPSocket.html,1,['Clear'],['Clear']
Usability,"; void SetLiveRangesUpdate (bool on);  If true, the pad is updated while the motion of a dragged range. ;  ; void SetLogScale (bool log);  Set the axis in log scale. ;  ; void SetTitle (const char *) override;  Set the title of the TNamed. ;  ; void SetValues (Long64_t length, Double_t *val);  Set the variable values. ;  ; void SetX (Double_t x, bool gl);  Set the X position of the axis in the case of a vertical axis. ;  ; void SetY (Double_t y, bool gl);  Set the Y position of the axis in the case of a horizontal axis. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Unzoom ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParallelCoordVar.html:6033,Clear,Clear,6033,doc/master/classTParallelCoordVar.html,https://root.cern,https://root.cern/doc/master/classTParallelCoordVar.html,1,['Clear'],['Clear']
Usability,"; void printTitle (std::ostream &os) const override;  Print the title of the table. ;  ; void printValue (std::ostream &os) const override;  Print the table value, i.e. the contents, in 'inline' format. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooTable;  RooTable ();  ;  RooTable (const char *name, const char *title);  ;  RooTable (const RooTable &other)=default;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRoo1DTable.html:3226,Clear,Clear,3226,doc/master/classRoo1DTable.html,https://root.cern,https://root.cern/doc/master/classRoo1DTable.html,1,['Clear'],['Clear']
Usability,"; xclipl, yclipb, xclipr, yclipt : Clipping boundary. _Output parameters:. x[2], y[2] : New segment coordinates. Int_t ClippingCode(Double_t x, Double_t y, Double_t xcl1, Double_t ycl1, Double_t xcl2, Double_t ycl2); Compute the endpoint codes for TPad::Clip. Int_t ClipPolygon(Int_t n, Double_t* x, Double_t* y, Int_t nn, Double_t* xc, Double_t* yc, Double_t xclipl, Double_t yclipb, Double_t xclipr, Double_t yclipt); Clip polygon using the Sutherland-Hodgman algorithm. Input parameters:. n: Number of points in the polygon to be clipped; x[n], y[n] : Polygon do be clipped vertices; xclipl, yclipb, xclipr, yclipt : Clipping boundary. Output parameters:. nn: number of points in xc and yc; xc, yc: clipped polygon vertices. The Int_t returned by this function is; the number of points in the clipped polygon. These vectors must; be allocated by the calling function. A size of 2*n for each is; enough. Sutherland and Hodgman's polygon-clipping algorithm uses a divide-and-conquer; strategy: It solves a series of simple and identical problems that, when; combined, solve the overall problem. The simple problem is to clip a polygon; against a single infinite clip edge. Four clip edges, each defining one boundary; of the clip rectangle, successively clip a polygon against a clip rectangle. Steps of Sutherland-Hodgman's polygon-clipping algorithm:. * Polygons can be clipped against each edge of the window one at a time.; Windows/edge intersections, if any, are easy to find since the X or Y coordinates; are already known.; * Vertices which are kept after clipping against one window edge are saved for; clipping against the remaining edges.; * Note that the number of vertices usually changes and will often increases. The clip boundary determines a visible and invisible region. The edges from; vertex i to vertex i+1 can be one of four types:. * Case 1 : Wholly inside visible region - save endpoint; * Case 2 : Exit visible region - save the intersection; * Case 3 : Wholly outside visibl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TPad.html:34203,simpl,simple,34203,root/html528/TPad.html,https://root.cern,https://root.cern/root/html528/TPad.html,6,['simpl'],['simple']
Usability,"; xmax, . Double_t ; ymax . ). overridevirtual . Initialize the upper and lower bounds to draw the function-. ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 944 of file TF2.cxx. ◆ SetRange() [3/3]. void TF2::SetRange ; (; Double_t ; xmin, . Double_t ; ymin, . Double_t ; zmin, . Double_t ; xmax, . Double_t ; ymax, . Double_t ; zmax . ). inlineoverridevirtual . Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 148 of file TF2.h. ◆ Streamer(). void TF2::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TF2. ; Reimplemented from TF1.; Reimplemented in TF3.; Definition at line 956 of file TF2.cxx. ◆ StreamerNVirtual(). void TF2::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 143 of file TF2.h. ◆ Variance2X(). virtual Double_t TF2::Variance2X ; (; Double_t ; ax, . Double_t ; bx, . Double_t ; ay, . Double_t ; by, . Double_t ; epsilon = 0.000001 . ). inlinevirtual . Definition at line 134 of file TF2.h. ◆ Variance2Y(). virtual Double_t TF2::Variance2Y ; (; Double_t ; ax, . Double_t ; bx, . Double_t ; ay, . Double_t ; by, . Double_t ; epsilon = 0.000001 . ). inlinevirtual . Definition at line 135 of file TF2.h. Member Data Documentation. ◆ fContour. TArrayD TF2::fContour. protected . Array to display contour levels. ; Definition at line 35 of file TF2.h. ◆ fNpy. Int_t TF2::fNpy. protected . Number of points along y used for the graphical representation. ; Definition at line 34 of file TF2.h. ◆ fYmax. Double_t TF2::fYmax. protected . Upper bound for the range in y. ; Definition at line 33 of file TF2.h. ◆ fYmin. Double_t TF2::fYmin. protected . Lower bound for the range in y. ; Definition at line 32 of file TF2.h. Libraries for TF2:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TF2.h; hist/hist/src/TF2.cxx. TF2. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:49 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTF2.html:70818,Guid,Guide,70818,doc/master/classTF2.html,https://root.cern,https://root.cern/doc/master/classTF2.html,1,['Guid'],['Guide']
Usability,"; y1 = 0, . Double_t ; x2 = 0, . Double_t ; y2 = 0 . ). virtual . Add a new graphics line to this pavetext. ; Reimplemented in TPaveStats.; Definition at line 177 of file TPaveText.cxx. ◆ AddText() [1/2]. TText * TPaveText::AddText ; (; const char * ; label). virtual . Add a new Text line to this pavetext. ; Definition at line 209 of file TPaveText.cxx. ◆ AddText() [2/2]. TText * TPaveText::AddText ; (; Double_t ; x1, . Double_t ; y1, . const char * ; label . ). virtual . Add a new Text line to this pavetext at given coordinates. ; Definition at line 191 of file TPaveText.cxx. ◆ Class(). static TClass * TPaveText::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TPaveText::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TPaveText::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 65 of file TPaveText.h. ◆ Clear(). void TPaveText::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear all lines in this pavetext. ; Reimplemented from TObject.; Definition at line 217 of file TPaveText.cxx. ◆ DeclFileName(). static const char * TPaveText::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 65 of file TPaveText.h. ◆ DeleteText(). void TPaveText::DeleteText ; (; ). virtual . Delete text at the mouse position. ; Reimplemented in TPaveStats.; Definition at line 227 of file TPaveText.cxx. ◆ Draw(). void TPaveText::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this pavetext with its current attributes. ; Reimplemented from TPave.; Definition at line 242 of file TPaveText.cxx. ◆ DrawFile(). void TPaveText::DrawFile ; (; const char * ; filename, . Option_t * ; option = """" . ). virtual . Draw lines in filename in this pavetext. ; Definition at line 254 of file TPaveText.cxx. ◆ EditText(). void TPaveText::EditText ; (; ). virtual . Edit text at the mous",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPaveText.html:30070,Clear,Clear,30070,doc/master/classTPaveText.html,https://root.cern,https://root.cern/doc/master/classTPaveText.html,1,['Clear'],['Clear']
Usability,"; yMargin = 0, . UInt_t ; options = kSunkenFrame | kDoubleBorder, . UInt_t ; sboptions = 0, . Pixel_t ; back = GetWhitePixel() . ). Create an editor view, containing an TGEditorFrame and (optionally) a horizontal and vertical scrollbar. ; Definition at line 92 of file TGView.cxx. ◆ ~TGView(). TGView::~TGView ; (; ). override . Delete view. ; Definition at line 149 of file TGView.cxx. Member Function Documentation. ◆ ChangeBackground(). void TGView::ChangeBackground ; (; Pixel_t ; col). overridevirtual . Change background color of the canvas frame. ; Reimplemented from TGFrame.; Definition at line 579 of file TGView.cxx. ◆ Class(). static TClass * TGView::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGView::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGView::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 105 of file TGView.h. ◆ Clear(). void TGView::Clear ; (; Option_t * ; = """"). overridevirtual . Clear view. ; Reimplemented from TObject.; Definition at line 161 of file TGView.cxx. ◆ DeclFileName(). static const char * TGView::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 105 of file TGView.h. ◆ DoRedraw(). void TGView::DoRedraw ; (; ). overrideprotectedvirtual . redraw ; Reimplemented from TGFrame.; Definition at line 270 of file TGView.cxx. ◆ DrawBorder(). void TGView::DrawBorder ; (; ). overridevirtual . Draw the border of the text edit widget. ; Reimplemented from TGFrame.; Definition at line 428 of file TGView.cxx. ◆ DrawRegion(). void TGView::DrawRegion ; (; Int_t ; x, . Int_t ; y, . UInt_t ; width, . UInt_t ; height . ). virtual . Draw region. ; Reimplemented in TGTextView, TGHtml, and TGTextEdit.; Definition at line 196 of file TGView.cxx. ◆ GetCanvas(). TGViewFrame * TGView::GetCanvas ; (; ); const. inline . Definition at line 66 of fil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGView.html:36253,Clear,Clear,36253,doc/master/classTGView.html,https://root.cern,https://root.cern/doc/master/classTGView.html,1,['Clear'],['Clear']
Usability,"; }. void AddRange(double xmin, double xmax, double ymin, double ymax). add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate. { AddRange(0,xmin,xmax); AddRange(1,ymin,ymax); }. void AddRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax). add a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and; [zmin,zmax] for the third coordinate. void SetRange(unsigned int icoord, double xmin, double xmax). set a range [xmin,xmax] for the new coordinate icoord; If more range exists for other coordinates, delete the existing one and use it the new one; Use Add range if want to keep the union of the existing ranges. void SetRange(double xmin, double xmax). set a range [xmin,xmax] for the first coordinate icoord. { SetRange(0,xmin,xmax); }. void SetRange(double xmin, double xmax, double ymin, double ymax). set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate. { SetRange(0,xmin,xmax); SetRange(1,ymin,ymax); }. void SetRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax). set a range [xmin,xmax] for the first and [ymin,ymax] for the second coordinate and; [zmin,zmax] for the third coordinate. void Clear(unsigned int icoord = 0). clear all ranges in one coordinate (is now -inf, +inf). bool IsInside(double x, unsigned int icoord = 0) const. check if a point is inside the range for the given coordinate. void CleanRangeSet(unsigned int icoord, double xmin, double xmax). internal function to remove all the existing ranges between xmin and xmax; called when a new range is inserted. » Author: L. Moneta Wed Aug 30 11:05:02 2006 » Copyright (c) 2006 LCG ROOT Math Team, CERN/PH-SFT *; » Last changed: root/mathcore:$Id: DataRange.h 25486 2008-09-22 12:43:03Z moneta $ » Last generated: 2009-12-07 13:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/ROOT__Fit__DataRange.html:5476,Clear,Clear,5476,root/html526/ROOT__Fit__DataRange.html,https://root.cern,https://root.cern/root/html526/ROOT__Fit__DataRange.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,"; }; hs->Draw(""lego1"");; }; ; ; ; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; kRed@ kRedDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; kYellow@ kYellowDefinition Rtypes.h:66; TCanvas.h; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TH2.h; THStack.h; TRandom.h; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1::GetBinvirtual Int_t GetBin(Int_t binx, Int_t biny=0, Int_t binz=0) constReturn Global bin number corresponding to binx,y,z.Definition TH1.cxx:4961; TH1::Fillvirtual Int_t Fill(Double_t x)Increment bin with abscissa X by 1.Definition TH1.cxx:3344; TH1::SetBinContentvirtual void SetBinContent(Int_t bin, Double_t content)Set bin content see convention for numbering bins in TH1::GetBin In case the bin number is greater th...Definition TH1.cxx:9222; TH1::GetBinContentvirtual Double_t GetBinContent(Int_t bin) constReturn content of bin number bin.Definition TH1.cxx:5061; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; THStackThe Histogram stack class.Definition THStack.h:40; THStack::Addvirtual void Add(TH1 *h, Option_t *option="""")Add a new histogram to the list.Definition THStack.cxx:366; THStack::Drawvoid Draw(Option_t *chopt="""") overrideDraw this stack with its current attributes.Definition THStack.cxx:453; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; c1return c1Definition legend1.C:41; h1TH1F * h1Definition legend1.C:5; AuthorRene Brun ; Definition in file multicolor.C. tutorialshistmulticolor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/multicolor_8C.html:3250,Guid,Guide,3250,doc/master/multicolor_8C.html,https://root.cern,https://root.cern/doc/master/multicolor_8C.html,1,['Guid'],['Guide']
Usability,";   Example showing an histogram with reverse axis. ;  ;  sparsehist.C;  Evaluate the performance of THnSparse vs TH1/2/3/nF for different numbers of dimensions and bins per dimension. ;  ;  statsEditing.C;   Edit statistics box. ;  ;  testSmooth.C;   Histogram smoothing. ;  ;  th2polyBoxes.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly). ;  ;  th2polyEurope.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it. ;  ;  th2polyHoneycomb.C;   This tutorial illustrates how to create an histogram with hexagonal bins (TH2Poly). ;  ;  th2polyUSA.C;   This tutorial illustrates how to create an histogram with polygonal bins (TH2Poly), fill it and draw it using the col option. ;  ;  thstack2palettecolor.C;   Palette coloring for 2D histograms' stack is activated thanks to the option PFC (Palette Fill Color). ;  ;  thstackcolorscheme.C;   This example demonstrates how to use the accessible color schemes with THStack. ;  ;  thstackpalettecolor.C;   Palette coloring for histograms' stack is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ;  tprofile2polyRealistic.C;   Different charges depending on region ;  ;  tprofile2polyRealisticModuleError.C;   Simulate faulty detector panel w.r.t. ;  ;  transpad.C;   Example of a canvas showing two histograms with different scales. ;  ;  twoscales.C;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  twoscales.py;   Example of macro illustrating how to superimpose two histograms with different scales in the ""same"" pad. ;  ;  xyplot.C;   Example showing how to produce a plot with an orthogonal axis system centered at (0,0). ;  ;  ZoomHistogram.C;   Changing the Range on the X-Axis of a Histogram ;  . tutorialshist. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:50 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html:6871,Guid,Guide,6871,doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,https://root.cern,https://root.cern/doc/master/dir_cb5b3ace9d7fddaf972edd3edd27e2ab.html,1,['Guid'],['Guide']
Usability,";   This macro provides a simple example on how to use the trained classifiers within an analysis module ;  ; file  TMVAClassificationCategory.C;   This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode. ;  ; file  TMVAClassificationCategoryApplication.C;   This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  ; file  TMVACrossValidation.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVACrossValidationApplication.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation in application. ;  ; file  TMVACrossValidationRegression.C;   This macro provides an example of how to use TMVA for k-folds cross evaluation. ;  ; file  TMVAGAexample.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA ;  ; file  TMVAGAexample2.C;   This executable gives an example of a very simple use of the genetic algorithm of TMVA. ;  ; file  TMVAMinimalClassification.C;   Minimal self-contained example for setting up TMVA with binary classification. ;  ; file  TMVAMulticlass.C;   This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  ; file  TMVAMulticlassApplication.C;   This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  ; file  TMVAMultipleBackgroundExample.C;   This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algorithm. ;  ; file  TMVARegression.C;   This macro provides examples for the training and testing of the TMVA classifiers. ;  ; file  TMVARegressionApplication.C;   This macr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:6245,simpl,simple,6245,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['simpl'],['simple']
Usability,";  ; Double_t fXmax;  ; Double_t fXmin;  . Additional Inherited Members;  Public Types inherited from ROOT::Math::IBaseFunctionOneDim; typedef IBaseFunctionOneDim BaseFunc;  . Inheritance diagram for ROOT::Math::PDFIntegral:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~PDFIntegral(). ROOT::Math::PDFIntegral::~PDFIntegral ; (; ). inlineoverride . Definition at line 85 of file GoFTest.cxx. ◆ PDFIntegral(). ROOT::Math::PDFIntegral::PDFIntegral ; (; const IGenFunction & ; pdf, . Double_t ; xmin = 0, . Double_t ; xmax = -1 . ). inline . Definition at line 87 of file GoFTest.cxx. Member Function Documentation. ◆ Clone(). IGenFunction * ROOT::Math::PDFIntegral::Clone ; (; ); const. inlineoverridevirtual . Clone a function. ; Each derived class will implement their version of the private DoClone method. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 119 of file GoFTest.cxx. ◆ DoEval(). Double_t ROOT::Math::PDFIntegral::DoEval ; (; Double_t ; x); const. inlineoverridevirtual . implementation of the evaluation function. Must be implemented by derived classes ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 110 of file GoFTest.cxx. Member Data Documentation. ◆ fIntegral. IntegratorOneDim ROOT::Math::PDFIntegral::fIntegral. mutableprivate . Definition at line 81 of file GoFTest.cxx. ◆ fNorm. Double_t ROOT::Math::PDFIntegral::fNorm. private . Definition at line 80 of file GoFTest.cxx. ◆ fPDF. const IGenFunction* ROOT::Math::PDFIntegral::fPDF. private . Definition at line 82 of file GoFTest.cxx. ◆ fXmax. Double_t ROOT::Math::PDFIntegral::fXmax. private . Definition at line 79 of file GoFTest.cxx. ◆ fXmin. Double_t ROOT::Math::PDFIntegral::fXmin. private . Definition at line 78 of file GoFTest.cxx. math/mathcore/src/GoFTest.cxx. ROOTMathPDFIntegral. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1PDFIntegral.html:2975,Guid,Guide,2975,doc/master/classROOT_1_1Math_1_1PDFIntegral.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1PDFIntegral.html,1,['Guid'],['Guide']
Usability,";  ; Long64_t Process (TSelector *selector, Long64_t nentries=-1, Option_t *option="""");  Process the specified TSelector object 'nentries' times. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TProofPlayer;  TProofPlayer (TProof *proof=0);  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerLocal.html:2165,feedback,feedback,2165,doc/master/classTProofPlayerLocal.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerLocal.html,1,['feedback'],['feedback']
Usability,";  ; Scalar_t fEpsilon;  The Smoothing term used to avoid division by zero. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentBiases;  The decaying average of the first moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fFirstMomentWeights;  The decaying average of the first moment of the past weight gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentBiases;  The decaying average of the second moment of the past bias gradients associated with the deep net. ;  ; std::vector< std::vector< Matrix_t > > fSecondMomentWeights;  The decaying average of the second moment of the past weight gradients associated with the deep net. ;  ;  Protected Attributes inherited from TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >; DeepNet_t & fDeepNet;  The reference to the deep net. ;  ; size_t fGlobalStep;  The current global step count during training. ;  ; Scalar_t fLearningRate;  The learning rate used for training. ;  . #include <TMVA/DNN/Adam.h>. Inheritance diagram for TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adam.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adam.h. Constructor & Destructor Documentation. ◆ TAdam(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:3992,learn,learning,3992,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['learn'],['learning']
Usability,";  ; TClass * IsA () const override;  ; bool IsClones () const;  Return true if this proxy is for a TClonesArray. ;  ; virtual bool IsEquivalent (const TBranchProxyClassDescriptor *other);  Return true if this description is the 'same' as the other decription. ;  ; bool IsLoaded () const;  Return true if the class needed by the branch is loaded. ;  ; bool IsSTL () const;  Return true if this proxy is for a TClonesArray. ;  ; void OutputDecl (FILE *hf, int offset, UInt_t);  Output the declaration and implementation of this emulation class. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html:3350,Clear,Clear,3350,doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Internal_1_1TBranchProxyClassDescriptor.html,1,['Clear'],['Clear']
Usability,";  ; class  MinimumSeedGenerator;  base class for seed generators (starting values); the seed generator prepares initial starting values from the input (MnUserParameterState) for the minimization; More...;  ; class  MinimumState;  MinimumState keeps the information (position, Gradient, 2nd deriv, etc) after one minimization step (usually in MinimumBuilder). More...;  ; class  MinosError;  Class holding the result of Minos (lower and upper values) for a specific parameter. More...;  ; class  Minuit2Minimizer;  Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. More...;  ; class  MinuitParameter;  class for the individual Minuit Parameter with Name and number; contains the input numbers for the minimization or the output result from minimization; possible interactions: Fix/release, set/remove limits, set Value/error; More...;  ; class  MnApplication;  application interface class for minimizers (migrad, simplex, Minimize, Scan) User normally instantiates the derived class like ROOT::Minuit2::MnMigrad for using Migrad for minimization More...;  ; class  MnContours;  API class for Contours Error analysis (2-dim errors); minimization has to be done before and Minimum must be valid; possibility to ask only for the points or the points and associated Minos errors;. More...;  ; class  MnCovarianceSqueeze;  class to reduce the covariance matrix when a parameter is fixed by removing the corresponding row and index More...;  ; class  MnCross;  ; class  MnEigen;  API class for calculating the eigenvalues of symmetric matrix. More...;  ; class  MnFcn;  Wrapper class to FCNBase interface used internally by Minuit. More...;  ; class  MnFumiliMinimize;  API class for minimization using Fumili technology; allows for user interaction: set/change parameters, do minimization, change parameters, re-do minimization etc.; also used by MnMinos and MnContours;. More...;  ; class  MnFunctionCross;  MnFunctionCross. More...;  ; class  Mn",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:5566,simpl,simplex,5566,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,2,['simpl'],['simplex']
Usability,";  ; class RCanvas;  ; class RChangeAttrRequest;  ; class RDrawableDisplayItem;  ; class RDrawableExecRequest;  ; class RDrawableMenuRequest;  ; class RIndirectDisplayItem;  ; class RLegend;  ; class RPadBase;  ; class RStyle;  . #include <ROOT/RDrawable.hxx>. Inheritance diagram for ROOT::Experimental::RDrawable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Version_t. using ROOT::Experimental::RDrawable::Version_t = uint64_t. Definition at line 123 of file RDrawable.hxx. Constructor & Destructor Documentation. ◆ RDrawable() [1/2]. ROOT::Experimental::RDrawable::RDrawable ; (; const RDrawable & ; ). protecteddelete . ◆ RDrawable() [2/2]. ROOT::Experimental::RDrawable::RDrawable ; (; const char * ; csstype). inlineexplicit . Definition at line 208 of file RDrawable.hxx. ◆ ~RDrawable(). RDrawable::~RDrawable ; (; ). virtualdefault . Member Function Documentation. ◆ ClearStyle(). void ROOT::Experimental::RDrawable::ClearStyle ; (; ). inline . Definition at line 213 of file RDrawable.hxx. ◆ CollectShared(). virtual void ROOT::Experimental::RDrawable::CollectShared ; (; Internal::RIOSharedVector_t & ; ). inlineprotectedvirtual . Reimplemented in ROOT::Experimental::RPadBase, ROOT::Experimental::TObjectDrawable, ROOT::Experimental::RHistDrawable< DIMENSIONS >, ROOT::Experimental::RHistDrawable< 1 >, ROOT::Experimental::RHistDrawable< 2 >, ROOT::Experimental::RHistDrawable< 3 >, ROOT::Experimental::RHistStatBox< DIMENSIONS >, ROOT::Experimental::RHistStatBox< 1 >, ROOT::Experimental::RHistStatBox< 2 >, and ROOT::Experimental::RHistStatBox< 3 >.; Definition at line 181 of file RDrawable.hxx. ◆ Display(). std::unique_ptr< RDisplayItem > RDrawable::Display ; (; const RDisplayContext & ; ctxt). protectedvirtual . Creates display item for drawable By default item contains drawable data itself. ; Reimplemented in ROOT::Experimental::RPad, ROOT::Experimental::TObjectDrawable, ROOT::Experimental::RH",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html:3887,Clear,ClearStyle,3887,doc/master/classROOT_1_1Experimental_1_1RDrawable.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RDrawable.html,1,['Clear'],['ClearStyle']
Usability,";  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TFormula ();  Formula default constructor. ;  ;  TFormula (const char *name, const char *formula);  Normal Formula constructor. ;  ;  TFormula (const TFormula &formula);  Default constructor. ;  ;  ~TFormula () override;  Formula default destructor. ;  ; virtual void Analyze (const char *schain, Int_t &err, Int_t offset=0);  Analyze a sub-expression in one formula. ;  ; virtual Bool_t AnalyzeFunction (TString &chaine, Int_t &err, Int_t offset=0);  Check if the chain as function call. ;  ; void Clear (Option_t *option="""") override;  Resets the objects. ;  ; virtual Int_t Compile (const char *expression="""");  Compile expression already stored in fTitle. ;  ; void Copy (TObject &formula) const override;  Copy this formula. ;  ; virtual char * DefinedString (Int_t code);  Return address of string corresponding to special code. ;  ; virtual Double_t DefinedValue (Int_t code);  Return value corresponding to special code. ;  ; virtual Int_t DefinedVariable (TString &variable, Int_t &action);  Check if expression is in the list of defined variables. ;  ; virtual Double_t Eval (Double_t x, Double_t y=0, Double_t z=0, Double_t t=0) const;  Evaluate this formula. ;  ; virtual Double_t EvalPar (const Double_t *x, const Double_t *params=nullptr);  ; virtual Double_t EvalParOld (const Double_t *x, const Double_t *params=nullptr);  Evaluate this formula. ;  ; virtual TString GetExpFormula (Option_t *option="""") const;  Reconstruct the formula expression from the internal TFormula member variables. ;  ; virtual con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html:4700,Clear,Clear,4700,doc/master/classROOT_1_1v5_1_1TFormula.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1v5_1_1TFormula.html,1,['Clear'],['Clear']
Usability,";  ; file  gerrors.C;   Draw a graph with error bars ;  ; file  gerrors2.C;   Draw two graphs with error bars ;  ; file  gmultierrors.C;   Draw a graph with multiple y errors ;  ; file  graph.C;   Draw a simple graph. ;  ; file  graph2derrorsfit.C;   Draw and fit a TGraph2DErrors ;  ; file  graphApply.C;   A macro to demonstrate the functionality of TGraph::Apply() method. ;  ; file  graphpalettecolor.C;   Palette coloring for graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  graphpolar.C;   Create and draw a polar graph. ;  ; file  graphpolar2.C;   Create and draw a polar graph with PI axis ;  ; file  graphpolar3.C;   Create and draw a polar graph with PI axis using a TF1. ;  ; file  graphreverse.C;   This example test all the various case of reverse graphs combined with logarithmic scale. ;  ; file  graphShade.C;   Show how to shade an area between two graphs ;  ; file  graphstruct.C;   Draw a simple graph structure. ;  ; file  graphtext.C;   Draw a graph with text attached to each point. ;  ; file  gtime.C;   Example of TGraphTime. ;  ; file  gtime2.C;   Example of TGraphTime showing how the class could be used to visualize a set of particles with their time stamp in a MonteCarlo program. ;  ; file  hlGraph1.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  hlGraph2.C;  This tutorial demonstrates how to use the highlight mode on graph. ;  ; file  labels1.C;   Setting alphanumeric labels in a 1-d histogram. ;  ; file  labels2.C;   Setting alphanumeric labels. ;  ; file  motorcycle.C;   Macro to test scatterplot smoothers: ksmooth, lowess, supsmu as described in: ;  ; file  multigraph.C;   Create and Draw a TMultiGraph. ;  ; file  multigraphpalettecolor.C;   Palette coloring for multi-graphs is activated thanks to the options PFC (Palette Fill Color), PLC (Palette Line Color) and AMC (Palette Marker Color). ;  ; file  multipalette.C;   Draw color plo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__graphs.html:1588,simpl,simple,1588,doc/master/group__tutorial__graphs.html,https://root.cern,https://root.cern/doc/master/group__tutorial__graphs.html,1,['simpl'],['simple']
Usability,";  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TGProgressBar; TGGC fBarColorGC;  progress bar drawing context ;  ; EBarType fBarType;  OPTION={GetMethod=""GetBarType"";SetMethod=""SetBarType"";Items=(kStandard=""Standard"",kFancy=""Fancy"")} ;  ; Int_t fBarWidth;  progress bar width ;  ; Bool_t fDrawBar;  if true draw only bar in DoRedraw() ;  ; EFillType fFillType;  OPTION={GetMethod=""GetFillType"";SetMethod=""SetFillType"";Items=(kSolidFill=Solid"",kBlockFill=""Block"")} ;  ; FontStruct_t fFontStruct;  font used to draw position text ;  ; TString fFormat;  format used to show position not in percent ;  ; Float_t fMax;  logical maximum value (default 100) ;  ; Float_t fMin;  logical minimum value (default 0) ;  ; GContext_t fNormGC;  text drawing graphics context ;  ; Bool_t fPercent;  show position in percent (default true) ;  ; Float_t fPos;  logical position [fMin,fMax] ;  ; Int_t fPosPix;  position of progress bar in pixel coordinates ;  ; Bool_t fShowPos;  show position value (default false) ;  ;  Protected Attributes inherited from TGFrame; Pixel_t fBackground;  frame background color ;  ; Int_t fBorderWidth;  frame border width ;  ; Int_t fDNDState;  EDNDFlags. ;  ; UInt_t fEventMask;  currently active event mask ;  ; TGFrameElement * fFE;  pointer to frame element ;  ; UInt_t fHeight;  frame height ;  ; UInt_t fMaxHeight;  maximal frame height ;  ; UInt_t fMaxWidth;  maximal frame width ;  ; UInt_t fMinHeight;  minimal frame height ;  ; UInt_t fMinWidth;  minimal frame width ;  ; UInt_t fOptions;  frame options ;  ; UInt_t fWidth;  frame width ;  ; Int_t fX;  frame x ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHProgressBar.html:27912,progress bar,progress bar,27912,doc/master/classTGHProgressBar.html,https://root.cern,https://root.cern/doc/master/classTGHProgressBar.html,6,['progress bar'],['progress bar']
Usability,";  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TGTextEditCommand; TGTextEdit * fEdit;  ; TGLongPosition fPos;  . Inheritance diagram for TDelCharCom:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TDelCharCom(). TDelCharCom::TDelCharCom ; (; TGTextEdit * ; te). inline . Definition at line 117 of file TGTextEdit.cxx. Member Function Documentation. ◆ Notify(). Bool_t TDelCharCom::Notify ; (; ). inlineoverridevirtual . This method must be overridden to handle object notification (the base implementation is no-op). ; Different objects in ROOT use the Notify method for different purposes, in coordination with other objects that call this method at the appropriate time.; For example, TLeaf uses it to load class information; TBranchRef to load contents of referenced branches TBranchRef; most notably, based on Notify, TChain implements a callback mechanism to inform interested parties when it switches to a new sub-tree. ; Reimplemented from TObject.; Definition at line 122 of file TGTextEdit.cxx. Member Data Documentation. ◆ fChar. char TDelCharCom::fChar. private . Definition at line 114 of file TGTextEdit.cxx. gui/gui/src/TGTextEdit.cxx. TDelCharCom. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDelCharCom.html:10937,Guid,Guide,10937,doc/master/classTDelCharCom.html,https://root.cern,https://root.cern/doc/master/classTDelCharCom.html,1,['Guid'],['Guide']
Usability,";  ; virtual bool ReadBasketSerialized (TBuffer &, Long64_t);  ; virtual void ReadValue (std::istream &, Char_t=' ');  ; Int_t ResetAddress (void *add, bool calledFromDestructor=false);  Helper routine for TLeafX::SetAddress. ;  ; virtual void SetAddress (void *add=nullptr);  ; virtual void SetBranch (TBranch *branch);  ; virtual void SetLeafCount (TLeaf *leaf);  Set the leaf count of this leaf. ;  ; virtual void SetLen (Int_t len=1);  ; virtual void SetOffset (Int_t offset=0);  ; virtual void SetRange (bool range=true);  ; virtual void SetUnsigned ();  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTLeaf.html:5874,Clear,Clear,5874,doc/master/classTLeaf.html,https://root.cern,https://root.cern/doc/master/classTLeaf.html,1,['Clear'],['Clear']
Usability,";  ; virtual const Double_t * GetOrigin () const;  ; virtual Bool_t GetPointsOnFacet (Int_t index, Int_t npoints, Double_t *array) const;  ; Bool_t GetPointsOnSegments (Int_t npoints, Double_t *array) const override;  ; virtual Bool_t IsNullBox () const;  ; Bool_t IsValidBox () const override;  ; void SetBoxDimensions (Double_t dx, Double_t dy, Double_t dz, Double_t *origin=nullptr);  ; void SetBoxPoints (Double_t *points) const;  ; void SetDimensions (Double_t *param) override;  ; void Sizeof3D () const override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TGeoShape;  TGeoShape ();  Default constructor. ;  ;  TGeoShape (const char *name);  Default constructor. ;  ;  ~TGeoShape () override;  Destructor. ;  ; virtual void AfterStreamer ();  ; void CheckShape (Int_t testNo, Int_t nsamples=10000, Option_t *option="""");  Test for shape navigation methods. ;  ; virtual void ClearThreadData () const;  ; virtual void CreateThreadData (Int_t);  ; void Draw (Option_t *option="""") override;  Draw this shape. ;  ; void ExecuteEvent (Int_t event, Int_t px, Int_t py) override;  Execute mouse actions on this shape. ;  ; Int_t GetId () const;  ; const char * GetName () const override;  Get the shape name. ;  ; const char * GetPointerName () const;  Provide a pointer name containing uid. ;  ; void InvertShapeBit (UInt_t f);  ; TClass * IsA () const override;  ; virtual Bool_t IsComposite () const;  ; Bool_t IsRunTimeShape () const;  ; Bool_t IsValid () const;  ; virtual Bool_t IsVecGeom () const;  ; void Paint (Option_t *option="""") override;  Paint this shape. ;  ; void ResetShapeBit (UInt_t f);  ; void SetId (Int_t id);  ; void SetRuntime (Bool_t flag=kTRUE);  ; void SetShapeBit (UInt_t f);  ; void SetShapeBit (UInt_t f, Bool_t set);  Equivalent of TObject::SetBit. ;  ; Int_t ShapeDistancetoPrimitive (Int_t numpoints, Int_t px, Int_t py) const;  Returns distance to shape primitive mesh. ;  ; void Streamer (TBuffer &) ove",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoScaledShape.html:6649,Clear,ClearThreadData,6649,doc/master/classTGeoScaledShape.html,https://root.cern,https://root.cern/doc/master/classTGeoScaledShape.html,1,['Clear'],['ClearThreadData']
Usability,";  ; virtual const char * GetElementName () const;  Virtual function for retrieving name of the element. ;  ; virtual const char * GetElementTitle () const;  Virtual function for retrieving title of the render-element. ;  ; virtual const TGPicture * GetListTreeCheckBoxIcon ();  Returns list-tree-item check-box picture appropriate for given rendering state. ;  ; virtual const TGPicture * GetListTreeIcon (Bool_t open=kFALSE);  Returns pointer to first listtreeicon. ;  ; virtual Color_t GetMainColor () const;  ; Color_t * GetMainColorPtr () const;  ; virtual Char_t GetMainTransparency () const;  ; TEveElement * GetMaster ();  Returns the master element - that is: ;  ; virtual Int_t GetNItems () const;  ; Int_t GetParentIgnoreCnt () const;  Get number of parents that should be ignored in doing reference-counting. ;  ; virtual TObject * GetRenderObject (const TEveException &eh) const;  ; virtual Bool_t GetRnrAnything () const;  ; virtual Bool_t GetRnrChildren () const;  ; virtual Bool_t GetRnrSelf () const;  ; virtual Bool_t GetRnrState () const;  ; virtual UChar_t GetSelectedLevel () const;  Get selection level, needed for rendering selection and highlight feedback. ;  ; TRef & GetSource ();  ; TObject * GetSourceObject () const;  ; void * GetUserData () const;  ; TEveElement * GetVizModel () const;  ; const TString & GetVizTag () const;  ; virtual Bool_t HandleElementPaste (TEveElement *el);  React to element being pasted or dnd-ed. ;  ; Bool_t HasChild (TEveElement *el);  Check if element el is a child of this element. ;  ; Bool_t HasChildren () const;  ; virtual Bool_t HasMainColor () const;  ; virtual Bool_t HasMainTrans () const;  ; Bool_t HasParents () const;  ; virtual void HighlightElement (Bool_t state);  Set element's highlight state. Stamp appropriately. ;  ; void IncDenyDestroy ();  Increases the deny-destroy count of the element. ;  ; virtual void IncImpliedHighlighted ();  Increase element's implied-highlight count. Stamp appropriately. ;  ; virtual void I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveBoxSet.html:17194,feedback,feedback,17194,doc/master/classTEveBoxSet.html,https://root.cern,https://root.cern/doc/master/classTEveBoxSet.html,3,['feedback'],['feedback']
Usability,";  ; virtual void SetFile (const char *filename);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFile (TFile *file=nullptr);  Set file where this branch writes/reads its buffers. ;  ; virtual void SetFirstEntry (Long64_t entry);  set the first entry number (case of TBranchSTL) ;  ; void SetIOFeatures (TIOFeatures &features);  ; virtual void SetStatus (bool status=true);  Set branch status to Process or DoNotProcess. ;  ; virtual void SetTree (TTree *tree);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool SupportsBulkRead () const;  Returns true if this branch supports bulk IO, false otherwise. ;  ; virtual void UpdateAddress ();  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTBranchElement.html:15071,Clear,Clear,15071,doc/master/classTBranchElement.html,https://root.cern,https://root.cern/doc/master/classTBranchElement.html,1,['Clear'],['Clear']
Usability,";  ; virtual void SetNewType (Int_t dtype);  ; virtual void SetOffset (Int_t offset);  ; virtual void SetSize (Int_t dsize);  ; virtual void SetStreamer (TMemberStreamer *streamer);  set pointer to Streamer function for this element ;  ; virtual void SetTObjectOffset (Int_t tobjoffset);  ; virtual void SetType (Int_t dtype);  ; virtual void SetTypeName (const char *name);  ; void Streamer (TBuffer &) override;  Stream an object of class TStreamerElement. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (const TClass *oldClass, TClass *newClass);  function called by the TClass constructor when replacing an emulated class by the real class ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and titl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerArtificial.html:4677,Clear,Clear,4677,doc/master/classTStreamerArtificial.html,https://root.cern,https://root.cern/doc/master/classTStreamerArtificial.html,2,['Clear'],['Clear']
Usability,";  ; virtual void SetParameter (const char *, Double_t);  ; virtual void SetPtCut (Float_t ptcut=0);  Set Pt threshold below which primaries are not drawn. ;  ; virtual void SetViewRadius (Float_t rbox=1000);  Set lower and upper values of the view range. ;  ; virtual void SetViewRange (Float_t xmin=-10000, Float_t ymin=-10000, Float_t zmin=-10000, Float_t xmax=10000, Float_t ymax=10000, Float_t zmax=10000);  Set lower and upper values of the view range. ;  ; virtual void ShowNeutrons (Bool_t show=1);  Set flag to display or not neutrons. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGenerator.html:6298,Clear,Clear,6298,doc/master/classTGenerator.html,https://root.cern,https://root.cern/doc/master/classTGenerator.html,1,['Clear'],['Clear']
Usability,";  ; virtual void Sort (Bool_t(*greater)(const TGraph *, Int_t, Int_t)=&TGraph::CompareX, Bool_t ascending=kTRUE, Int_t low=0, Int_t high=-1111);  Sorts the points of this TGraph using in-place quicksort (see e.g. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TGraph. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void UseCurrentStyle () override;  Set current style settings in this graph This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; void Zero (Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations);  Find zero of a continuous function. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooCurve.html:18389,Clear,Clear,18389,doc/master/classRooCurve.html,https://root.cern,https://root.cern/doc/master/classRooCurve.html,4,['Clear'],['Clear']
Usability,";  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooNumRunningInt; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsCachedReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverVa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooNumCdf.html:46955,clear,clearEvalErrorLog,46955,doc/master/classRooNumCdf.html,https://root.cern,https://root.cern/doc/master/classRooNumCdf.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,";  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function called before a window is undocked. ;  ; void ReplaceWindow (TEveWindow *w);  Replace this window with the passed one. ;  ; void SetShowTitleBar (Bool_t x);  Set display state of the title-bar. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SwapWindow (TEveWindow *w);  Swap frames with the given window. ;  ; void SwapWindowWithCurrent ();  Swap frames with the current window. ;  ; void TitleBarClicked ();  Slot for clicking on the title-bar. ;  ; void UndockWindow ();  Undock the window - put it into a dedicated main-frame. ;  ; void UndockWindowDestroySlot ();  Undock the window - put it into a dedicated main-frame. ;  ;  Public Member Functions inherited from TEveElementList;  TEveElementList (const char *n=""TEveElementList"", const char *t="""", Bool_t doColor=kFALSE, Bool_t doTransparency=kFALSE);  Constructor. ;  ;  TEveElementList (const TEveElementList &e);  Copy constructor. ;  ;  ~TEveElementList () override;  ; Bool_t AcceptElement (TEveElement *el) override;  Check if TEveElement el is inherited from fChildClass. ;  ; TEveElementList * CloneElement () const override;  Clone the element via copy constructor. ;  ; TClass * GetChildClass () const;  ; const char * GetElementName () const override;  Virtual function for retrieving name of the element. ;  ; const char * GetElementTitle () const override;  Virtual function for retrieving title of the render-element. ;  ; TObject * GetObject (const TEveException &=""TEveElementList::GetObject "") const override;  G",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowFrame.html:2669,Undo,UndockWindow,2669,doc/master/classTEveWindowFrame.html,https://root.cern,https://root.cern/doc/master/classTEveWindowFrame.html,4,['Undo'],"['Undock', 'UndockWindow']"
Usability,";  ; void SetInvisible ();  ; void SetMotherVolume (TGeoVolume *mother);  ; void SetNumber (Int_t number);  ; void SetOverlapping (Bool_t flag=kTRUE);  ; void SetOverlaps (Int_t *ovlp, Int_t novlp);  set the list of overlaps for this node (ovlp must be created with operator new) ;  ; void SetUserExtension (TGeoExtension *ext);  Connect user-defined extension to the node. ;  ; void SetVirtual ();  ; void SetVisibility (Bool_t vis=kTRUE) override;  Set visibility of the node (obsolete). ;  ; void SetVolume (TGeoVolume *volume);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void VisibleDaughters (Bool_t vis=kTRUE);  Set visibility of the daughters (obsolete). ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoNodeMatrix.html:6329,Clear,Clear,6329,doc/master/classTGeoNodeMatrix.html,https://root.cern,https://root.cern/doc/master/classTGeoNodeMatrix.html,2,['Clear'],['Clear']
Usability,";  ; void SetMaximum (Double_t maximum=-1111);  Set maximum. ;  ; void SetMaxIter (Int_t n=100000);  ; void SetMinimum (Double_t minimum=-1111);  Set minimum. ;  ; void SetName (const char *name) override;  Changes the name of this 2D graph. ;  ; void SetNameTitle (const char *name, const char *title) override;  Change the name and title of this 2D graph. ;  ; void SetNpx (Int_t npx=40);  Sets the number of bins along X used to draw the function. ;  ; void SetNpy (Int_t npx=40);  Sets the number of bins along Y used to draw the function. ;  ; void SetTitle (const char *title="""") override;  Sets the 2D graph title. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraph2DAsymmErrors.html:12835,Clear,Clear,12835,doc/master/classTGraph2DAsymmErrors.html,https://root.cern,https://root.cern/doc/master/classTGraph2DAsymmErrors.html,2,['Clear'],['Clear']
Usability,";  Adjust (pop) ident. ;  ; void PushIndent ();  Adjust (push) ident. ;  ; void Reset ();  Reset the layout context. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGHtmlLayoutContext.html:1488,Clear,Clear,1488,doc/master/classTGHtmlLayoutContext.html,https://root.cern,https://root.cern/doc/master/classTGHtmlLayoutContext.html,1,['Clear'],['Clear']
Usability,";  CTDestructor;  CTCudaMatrixTCudaMatrix Class ;  CTDataLoaderTDataLoader ;  CTDeviceTDevice ;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTSharedLayerLayer class width shared weight and bias layers ;  ►NkNN;  CEvent;  CModulekNN;  CNode;  CAbsoluteDeviationLossFunction;  CAbsoluteDeviationLossFunctionBDT;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTree;  CBinarySearchTreeNode;  CBinaryTree;  CCCPruner;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactory;  CClassInfo;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfig;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTest;  CCostComplexityPruneTool;  CCrossEntropy;  CCrossValidation;  CCrossValidationResult;  CDataInputHandler;  CDataLoader;  CDataSet;  ►CDataSetFactory;  CEventStats;  CDataSetInfo;  CDataSetManager;  CDecisionTree;  CDecisionTreeNode;  CDeleteFunctor_t;  CDTNodeTrainingInfo;  CEnvelopeBase class for all machine learning algorithms ;  CEvent;  CExpectedErrorPruneTool;  CFactory;  CFitterBase;  CGeneticAlgorithm;  CGeneticFitter;  CGeneticGenes;  CGeneticPopulation;  CGeneticRange;  CGiniIndex;  CGiniIndexWithLaplace;  CHuberLossFunction;  CHuberLossFunctionBDT;  CHyperParameterOptimisation;  CHyperParameterOptimisationResult;  CIFitterTarget;  CIMethod;  CIncrement;  CInterval;  CIPruneTool;  CIPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jupyter notebook ;  CKDEKernel;  CLDA;  CLeastSquaresLossFunction;  CLeastSquaresLossFunctionBDT;  CLogInterval;  CLossFunction;  CLossFunctionBDT;  CLossFunctionEventInfo;  CMCFitter;  CMethodANNBase;  CMethodBase;  CMethodBayesClassifier;  CMethodBDT;  CMethodBoost;  CMethodC50;  CMethodCategory;  CMethodCFMlpANN;  ►CMethodCFMlpANN_Utils;  CVARn2;  CMethodCompositeBase;  CMethodCuts;  ►CMethodDNN;  CTTrainingSettings;  CMethodDT;  CMethodFDA;  CMethodFisher;  CMethodHMatrix;  CMethodInfo;  CMe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/annotated.html:68302,learn,learning,68302,doc/v608/annotated.html,https://root.cern,https://root.cern/doc/v608/annotated.html,1,['learn'],['learning']
Usability,";  Calculate overlap (kInside, kOutside, kPartial) of box with camera frustum Camera must have valid frustum cache - call Apply() after last modification, before using. ;  ; const TGLPlane & FrustumPlane (EFrustumPlane plane) const;  ; const TGLMatrix & GetCamBase () const;  ; const TGLMatrix & GetCamTrans () const;  ; Double_t * GetCenterVec ();  ; Bool_t GetExternalCenter ();  ; Double_t GetFarClip () const;  ; Double_t * GetFixDefCenterVec ();  ; Double_t GetNearClip () const;  ; Double_t GetTheta () const;  Get angle between camera up axis. ;  ; Float_t GetVAxisMinAngle ();  ; void IncTimeStamp ();  ; Bool_t IsCacheDirty () const;  ; virtual Bool_t IsPerspective () const;  ; Bool_t OfInterest (const TGLBoundingBox &box, Bool_t ignoreSize) const;  Calculate if the an object defined by world frame bounding box is 'of interest' to the camera. ;  ; TGLMatrix & RefCamBase ();  ; TGLMatrix & RefCamTrans ();  ; TGLMatrix & RefLastNoPickProjM () const;  ; const TGLMatrix & RefModelViewMatrix () const;  ; TGLRect & RefViewport ();  ; const TGLRect & RefViewport () const;  ; void ResetInterest ();  Clear out the existing interest box. ;  ; virtual Bool_t RotateArcBall (Int_t xDelta, Int_t yDelta, Bool_t mod1, Bool_t mod2);  Rotate the camera round view volume center established in Setup(). ;  ; virtual Bool_t RotateArcBallRad (Double_t hRotate, Double_t vRotate);  Rotate camera around center. ;  ; virtual Bool_t RotateRad (Double_t hRotate, Double_t vRotate);  Rotate camera around center. ;  ; void SetCenterVec (Double_t x, Double_t y, Double_t z);  Set camera center vector. ;  ; void SetCenterVecWarp (Double_t x, Double_t y, Double_t z);  Set camera center vector and do not keep the same combined camera transformation matrix. ;  ; void SetExternalCenter (Bool_t x);  Set camera center diffrent than scene center, if enable is kTRUE. ;  ; void SetFixDefCenter (Bool_t x);  ; void SetFixDefCenterVec (Double_t x, Double_t y, Double_t z);  ; void SetVAxisMinAngle (Float_t x);  ;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLOrthoCamera.html:6625,Clear,Clear,6625,doc/master/classTGLOrthoCamera.html,https://root.cern,https://root.cern/doc/master/classTGLOrthoCamera.html,1,['Clear'],['Clear']
Usability,";  Close system files. ;  ; void ClearUsers ();  Forget all user seen so far. ;  ; const TSeqCollection * GetListOfClasses ();  Return the list of classes. ;  ; const TSeqCollection * GetListOfCppDirectives ();  Return the list of CPP directives. ;  ; const TSeqCollection * GetListOfEnvVars ();  Uses ""env"" (Unix) or ""set"" (Windows) to get list of environment variables. ;  ; const TSeqCollection * GetListOfFilesInPath (const char path[]);  ""path"" should be initialized with a colon separated list of system directories ;  ; TCollection * GetListOfGlobalFunctions ();  Return the list of global functions. ;  ; const TSeqCollection * GetListOfGlobals ();  Return the list of globals. ;  ; const TSeqCollection * GetListOfPragmas ();  Return the list of pragmas. ;  ; const TSeqCollection * GetListOfSysIncFiles ();  Return the list of system include files. ;  ; const TSeqCollection * GetListOfUsers ();  reads from ""/etc/passwd"" ;  ; Int_t Hook (char *buf, int *pLoc, std::ostream &out);  [private] ;  ; virtual TClass * IsA () const;  ; void RehashAll ();  clears and then rebuilds all lists except for user names and system include files. ;  ; void RehashClasses ();  Do the class rehash. ;  ; void RehashCppDirectives ();  Cpp rehashing. ;  ; void RehashEnvVars ();  Environemnt variables rehashing. ;  ; void RehashFiles ();  Close files. ;  ; void RehashGlobalFunctions ();  Reload global functions. ;  ; void RehashGlobals ();  Reload globals. ;  ; void RehashPragmas ();  Reload pragmas. ;  ; void RehashSysIncFiles ();  Reload system include files. ;  ; void RehashUsers ();  Reload users. ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static Char_t AllAgreeOnChar (int i, const TSeqCollection *pList, Int_t &nGoodStrings);  [static utility function]/////////////////////////////////////////// ;  ; static void AppendListOfFilesInDirectory (const char dirName[], TSeqCollection *pList);  [static ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:2708,clear,clears,2708,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['clear'],['clears']
Usability,";  Default ctor. ;  ;  ~TProofPlayer () override;  Destructor. ;  ; void AddEventsProcessed (Long64_t ev) override;  ; void AddInput (TObject *inp) override;  Add object to input list. ;  ; void AddOutput (TList *out) override;  Incorporate output list (may not be used in this class). ;  ; Int_t AddOutputObject (TObject *obj) override;  Incorporate output object (may not be used in this class). ;  ; void AddQueryResult (TQueryResult *q) override;  Add query result to the list, making sure that there are no duplicates. ;  ; void ClearInput () override;  Clear input list. ;  ; TDrawFeedback * CreateDrawFeedback (TProof *p) override;  Draw feedback creation proxy. ;  ; void DeleteDrawFeedback (TDrawFeedback *f) override;  Delete draw feedback object. ;  ; Long64_t DrawSelect (TDSet *set, const char *varexp, const char *selection, Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0) override;  Draw (may not be used in this class). ;  ; void Feedback (TList *objs) override;  Set feedback list (may not be used in this class). ;  ; void FeedBackCanvas (const char *name, Bool_t create);  Create/destroy a named canvas for feedback. ;  ; Long64_t Finalize (Bool_t force=kFALSE, Bool_t sync=kFALSE) override;  Finalize query (may not be used in this class). ;  ; Long64_t Finalize (TQueryResult *qr) override;  Finalize query (may not be used in this class). ;  ; Long64_t GetCacheSize () override;  Return the size in bytes of the cache. ;  ; TQueryResult * GetCurrentQuery () const override;  ; Int_t GetDrawArgs (const char *var, const char *sel, Option_t *opt, TString &selector, TString &objname) override;  Parse the arguments from var, sel and opt and fill the selector and object name accordingly. ;  ; Long64_t GetEventsProcessed () const override;  ; EExitStatus GetExitStatus () const override;  ; TList * GetInputList () const override;  ; Int_t GetLearnEntries () override;  Return the number of entries in the learning phase. ;  ; TList * GetListOfResults () const ov",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayer.html:3102,Feedback,Feedback,3102,doc/master/classTProofPlayer.html,https://root.cern,https://root.cern/doc/master/classTProofPlayer.html,6,"['Feedback', 'feedback']","['Feedback', 'feedback']"
Usability,;  FrequentistCalculator.h;  Heaviside.h;  HLFactory.h;  HybridCalculator.h;  HybridCalculatorOriginal.h;  HybridPlot.h;  HybridResult.h;  HypoTestCalculator.h;  HypoTestCalculatorGeneric.h;  HypoTestInverter.h;  HypoTestInverterOriginal.h;  HypoTestInverterPlot.h;  HypoTestInverterResult.h;  HypoTestPlot.h;  HypoTestResult.h;  IntervalCalculator.h;  LikelihoodInterval.h;  LikelihoodIntervalPlot.h;  MarkovChain.h;  MaxLikelihoodEstimateTestStat.h;  MCMCCalculator.h;  MCMCInterval.h;  MCMCIntervalPlot.h;  MetropolisHastings.h;  MinNLLTestStat.h;  ModelConfig.h;  NeymanConstruction.h;  NumberCountingPdfFactory.h;  NumberCountingUtils.h;  NumEventsTestStat.h;  PdfProposal.h;  PointSetInterval.h;  ProfileInspector.h;  ProfileLikelihoodCalculator.h;  ProfileLikelihoodTestStat.h;  ProofConfig.h;  ProposalFunction.h;  ProposalHelper.h;  RatioOfProfiledLikelihoodsTestStat.h;  RooStatsUtils.h;  SamplingDistPlot.h;  SamplingDistribution.h;  SequentialProposal.h;  SimpleInterval.h;  SimpleLikelihoodRatioTestStat.h;  SPlot.h;  TestStatistic.h;  TestStatSampler.h;  ToyMCImportanceSampler.h;  ToyMCSampler.h;  ToyMCStudy.h;  UniformProposal.h;  UpperLimitMCSModule.h;  LinkDef.h;  ► src;  AsymptoticCalculator.cxx;  BayesianCalculator.cxx;  BernsteinCorrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;  ProfileInspector.cxx;  P,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:84311,Simpl,SimpleLikelihoodRatioTestStat,84311,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,;  FrequentistCalculator.h;  Heaviside.h;  HLFactory.h;  HybridCalculator.h;  HybridCalculatorOriginal.h;  HybridPlot.h;  HybridResult.h;  HypoTestCalculator.h;  HypoTestCalculatorGeneric.h;  HypoTestInverter.h;  HypoTestInverterOriginal.h;  HypoTestInverterPlot.h;  HypoTestInverterResult.h;  HypoTestPlot.h;  HypoTestResult.h;  IntervalCalculator.h;  LikelihoodInterval.h;  LikelihoodIntervalPlot.h;  MarkovChain.h;  MaxLikelihoodEstimateTestStat.h;  MCMCCalculator.h;  MCMCInterval.h;  MCMCIntervalPlot.h;  MetropolisHastings.h;  MinNLLTestStat.h;  ModelConfig.h;  NeymanConstruction.h;  NumberCountingPdfFactory.h;  NumberCountingUtils.h;  NumEventsTestStat.h;  PdfProposal.h;  PointSetInterval.h;  ProfileInspector.h;  ProfileLikelihoodCalculator.h;  ProfileLikelihoodTestStat.h;  ProofConfig.h;  ProposalFunction.h;  ProposalHelper.h;  RatioOfProfiledLikelihoodsTestStat.h;  RooStatsUtils.h;  SamplingDistPlot.h;  SamplingDistribution.h;  SequentialProposal.h;  SimpleInterval.h;  SimpleLikelihoodRatioTestStat.h;  SPlot.h;  TestStatistic.h;  TestStatSampler.h;  ToyMCImportanceSampler.h;  ToyMCSampler.h;  ToyMCStudy.h;  UniformProposal.h;  UpperLimitMCSModule.h;  ► src;  AsymptoticCalculator.cxx;  BayesianCalculator.cxx;  BernsteinCorrection.cxx;  ConfidenceBelt.cxx;  DetailedOutputAggregator.cxx;  FeldmanCousins.cxx;  FrequentistCalculator.cxx;  Heaviside.cxx;  HLFactory.cxx;  HybridCalculator.cxx;  HybridCalculatorOriginal.cxx;  HybridPlot.cxx;  HybridResult.cxx;  HypoTestCalculatorGeneric.cxx;  HypoTestInverter.cxx;  HypoTestInverterOriginal.cxx;  HypoTestInverterPlot.cxx;  HypoTestInverterResult.cxx;  HypoTestPlot.cxx;  HypoTestResult.cxx;  LikelihoodInterval.cxx;  LikelihoodIntervalPlot.cxx;  MarkovChain.cxx;  MCMCCalculator.cxx;  MCMCInterval.cxx;  MCMCIntervalPlot.cxx;  MetropolisHastings.cxx;  ModelConfig.cxx;  NeymanConstruction.cxx;  NumberCountingPdfFactory.cxx;  NumberCountingUtils.cxx;  PdfProposal.cxx;  PointSetInterval.cxx;  ProfileInspector.cxx;  ProfileLikeli,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:82424,Simpl,SimpleLikelihoodRatioTestStat,82424,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,4,['Simpl'],['SimpleLikelihoodRatioTestStat']
Usability,;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  doc;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/files.html:53491,Simpl,SimplexParameters,53491,doc/v616/files.html,https://root.cern,https://root.cern/doc/v616/files.html,1,['Simpl'],['SimplexParameters']
Usability,;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;  TGenPhaseSpace.h;  TLorentzRotation.h;  TLorentzVector.h;  TQuaternion.h;  TRobustEstimator.h;  TRolke.h;  TRotation.h;  TVector2.h;  TVector3.h;  ► src;  TFeldmanCousins.cxx;  TGenPhaseSpace.cxx;  TLorentzRotation.cxx;  TLorentzVector.cxx;  TQuaternion.cxx;  TRobustEstimator.cxx;  TRolke.cxx;  TRotation.cxx;  TVector2.cxx;  TVector3.cxx;  ► quadp;  ► inc;  TGondzioSolver.h;  TMehrotraSolver.h;  TQpDataBase.h;  TQpDataDens.h;  TQpDataSparse.h;  TQpLinSolverBase.h;  TQpLinSolverDens.h;  TQpLinSolverSparse.h;  TQpProbBase.h;  TQpProbDens.h;  TQpProbS,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:52888,Simpl,SimplexParameters,52888,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,2,['Simpl'],['SimplexParameters']
Usability,;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  LinkDef.h;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  LinkDe,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:54596,Simpl,SimplexParameters,54596,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,2,['Simpl'],['SimplexParameters']
Usability,;  LaInnerProduct.cxx;  LaInverse.cxx;  LaOuterProduct.cxx;  LaSumOfElements.cxx;  LaVtMVSimilarity.cxx;  MinimumBuilder.cxx;  Minuit2Minimizer.cxx;  MnApplication.cxx;  mnbins.cxx;  MnContours.cxx;  MnCovarianceSqueeze.cxx;  mndasum.cxx;  mndaxpy.cxx;  mnddot.cxx;  mndscal.cxx;  mndspmv.cxx;  mndspr.cxx;  MnEigen.cxx;  MnFcn.cxx;  MnFumiliMinimize.cxx;  MnFunctionCross.cxx;  MnGlobalCorrelationCoeff.cxx;  MnHesse.cxx;  MnLineSearch.cxx;  mnlsame.cxx;  MnMachinePrecision.cxx;  MnMinos.cxx;  MnParabolaFactory.cxx;  MnParameterScan.cxx;  MnPlot.cxx;  MnPosDef.cxx;  MnPrint.cxx;  MnScan.cxx;  MnSeedGenerator.cxx;  MnStrategy.cxx;  mnteigen.cxx;  MnTiny.cxx;  mntplot.cxx;  MnTraceObject.cxx;  MnUserFcn.cxx;  MnUserParameters.cxx;  MnUserParameterState.cxx;  MnUserTransformation.cxx;  mnvert.cxx;  mnxerbla.cxx;  ModularFunctionMinimizer.cxx;  MPIProcess.cxx;  NegativeG2LineSearch.cxx;  Numerical2PGradientCalculator.cxx;  ParametricFunction.cxx;  ScanBuilder.cxx;  SimplexBuilder.cxx;  SimplexParameters.cxx;  SimplexSeedGenerator.cxx;  SinParameterTransformation.cxx;  SqrtLowParameterTransformation.cxx;  SqrtUpParameterTransformation.cxx;  TMinuit2TraceObject.cxx;  VariableMetricBuilder.cxx;  VariableMetricEDMEstimator.cxx;  ► test;  ► MnSim;  DemoFumili.cxx;  DemoGaussSim.cxx;  demoMinimizer.cxx;  FlatRandomGen.h;  GaussDataGen.cxx;  GaussDataGen.h;  GaussFcn.cxx;  GaussFcn.h;  GaussFcn2.cxx;  GaussFcn2.h;  GaussFunction.h;  GaussianModelFunction.h;  GaussRandomGen.h;  ParallelTest.cxx;  PaulTest.cxx;  PaulTest2.cxx;  PaulTest3.cxx;  PaulTest4.cxx;  ReneTest.cxx;  ► MnTutorial;  Quad12F.h;  Quad12FMain.cxx;  Quad1F.h;  Quad1FMain.cxx;  Quad4F.h;  Quad4FMain.cxx;  Quad8F.h;  Quad8FMain.cxx;  testMinimizer.cxx;  testNdimFit.cxx;  testUnbinGausFit.cxx;  testUserFunc.cxx;  ► mlp;  ► inc;  TMLPAnalyzer.h;  TMultiLayerPerceptron.h;  TNeuron.h;  TSynapse.h;  ► src;  TMLPAnalyzer.cxx;  TMultiLayerPerceptron.cxx;  TNeuron.cxx;  TSynapse.cxx;  ► physics;  ► inc;  TFeldmanCousins.h;,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v610/files.html:53138,Simpl,SimplexParameters,53138,doc/v610/files.html,https://root.cern,https://root.cern/doc/v610/files.html,1,['Simpl'],['SimplexParameters']
Usability,;  NGLTutorials;  ►NInternal;  NExecutorUtils;  NTDF;  NTThreadedObjectUtils;  ►NMacOSX;  NDetails;  NOpenGL;  NUtil;  ►NX11;  NDetail;  ►NMath;  NBlas;  NBrentMethods;  NCephes;  NChebyshevTemplate recursive functions for defining evaluation of Chebyshev polynomials T_n(x) and the series S(x) = Sum_i c_i* T_i(x) ;  NCholeskyDecompHelpersHelpers for CholeskyDecomp ;  Ndetail;  NGenAlgoOptUtil;  NGenVector;  NGenVector_detail;  NGSLRootHelperHelper functions to test convergence of Root-Finding algorithms ;  NGSLSimAn;  Ngv_detail;  NImpl;  NIntegMultiDim;  NIntegOneDim;  NIntegOptionsUtil;  NIntegration;  NIntegrationMultiDim;  NIntegrationOneDim;  NInternal;  NInterpolation;  NMCIntegration;  NMinim;  NMinim1D;  NRootsRoot-Finding Algorithms ;  NrowOffsetsUtils;  NSampler;  NUtilNamespace defining Utility functions needed by mathcore ;  NVectorUtilGlobal Helper functions for generic Vector classes ;  NMathMore;  ►NMeta;  NSelection;  NMinuit;  NMinuit2;  NQuartz;  NRNamespace associated R package for ROOT ;  NTF1Helper;  NTMetaUtils;  NTreeUtils;  NTThreadedObjectUtils;  NTypeTraitsROOT type_traits extensions ;  ►Nv5;  NTFastFun;  Nrootmarks;  NROOTwriter;  Nshapes;  Nsqlio;  Nstaff;  ►NstdSTL namespace ;  ►N__ROOT;  Ndetail;  Nsurfaces;  Ntbb;  NTClassEdit;  Ntdf001_introduction;  Ntdf002_dataModel;  Ntdf003_profiles;  Ntdf004_cutFlowReport;  Ntdf006_ranges;  Ntdf007_snapshot;  Ntdf008_createDataSetFromScratch;  Ntdf010_trivialDataSource;  Ntdf011_ROOTDataSource;  Ntdf012_DefinesAndFiltersAsStrings;  Ntdf014_CSVDataSource;  Ntest;  NTGeoUnit;  NtimeSeriesFromCSV;  NTMath;  NTMatrixTCramerInv;  NTMatrixTSymCramerInv;  ►NTMVAAbstract ClassifierFactory template that handles arbitrary types ;  ►NDNN;  NBlas;  NExperimental;  NkNN;  NTMVAGlob;  Ntornado;  Ntree;  NTStreamerInfoActions;  Ntwoscales;  ►Nvecgeom;  Ncxx;  Nwriter;  Nxmlio;  NXPD;  NXrdCl;  Nzdemo;  Nzones. ROOT 6.12/07 - Reference Guide Generated on Sat Sep 29 2018 23:44:44 (GVA Time) using Doxygen 1.8.13. ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/namespaces.html:4076,Guid,Guide,4076,doc/v612/namespaces.html,https://root.cern,https://root.cern/doc/v612/namespaces.html,1,['Guid'],['Guide']
Usability,";  Print this list. ;  ; virtual Int_t RelocatePaths (const char *newloc, const char *oldloc=nullptr);  Relocate the file paths. ;  ; virtual void Reset ();  Reset this list. ;  ; virtual Int_t ScanPaths (TList *roots, bool notify=true);  Scan the paths to find the common roots. ;  ; virtual void SetDirectory (TDirectory *dir);  Add reference to directory dir. dir can be 0. ;  ; virtual void SetEntriesToProcess (Long64_t nen);  ; virtual void SetFileName (const char *filename);  ; virtual void SetReapplyCut (bool apply=false);  ; virtual void SetShift (bool shift);  ; virtual void SetTreeName (const char *treename);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEntryListFromFile.html:6580,Clear,Clear,6580,doc/master/classTEntryListFromFile.html,https://root.cern,https://root.cern/doc/master/classTEntryListFromFile.html,1,['Clear'],['Clear']
Usability,";  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TLine; Double_t fX1 {0};  X of 1st point. ;  ; Double_t fX2 {0};  X of 2nd point. ;  ; Double_t fY1 {0};  Y of 1st point. ;  ; Double_t fY2 {0};  Y of 2nd point. ;  ;  Protected Attributes inherited from TAttLine; Color_t fLineColor;  Line color. ;  ; Style_t fLineStyle;  Line style. ;  ; Width_t fLineWidth;  Line width. ;  . #include <TASPaletteEditor.h>. Inheritance diagram for TASPaletteEditor::LimitLine:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ LimitLine(). TASPaletteEditor::LimitLine::LimitLine ; (; Coord_t ; x, . Coord_t ; y1, . Coord_t ; y2, . TASPaletteEditor * ; gui . ). The blue limit line in the pixel value histogram. ; Definition at line 929 of file TASPaletteEditor.cxx. Member Function Documentation. ◆ ExecuteEvent(). void TASPaletteEditor::LimitLine::ExecuteEvent ; (; Int_t ; event, . Int_t ; px, . Int_t ; py . ). overrideprotectedvirtual . Execute action corresponding to an event at (px,py). ; This method must be overridden if an object can react to graphics events. ; Reimplemented from TObject.; Definition at line 951 of file TASPaletteEditor.cxx. ◆ Paint(). void TASPaletteEditor::LimitLine::Paint ; (; Option_t * ; option = """"). overridevirtual . Paint the limit lines. ; Reimplemented from TObject.; Definition at line 941 of file TASPaletteEditor.cxx. Member Data Documentation. ◆ fGui. TASPaletteEditor* TASPaletteEditor::LimitLine::fGui. private . Definition at line 54 of file TASPaletteEditor.h. Libraries for TASPaletteEditor::LimitLine:. [legend]; The documentation for this class was generated from the following files:; graf2d/asimage/inc/TASPaletteEditor.h; graf2d/asimage/src/TASPaletteEditor.cxx. TASPaletteEditorLimitLine. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html:16607,Guid,Guide,16607,doc/master/classTASPaletteEditor_1_1LimitLine.html,https://root.cern,https://root.cern/doc/master/classTASPaletteEditor_1_1LimitLine.html,1,['Guid'],['Guide']
Usability,";  Public Member Functions inherited from TGeoExtension; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoRCExtension.html:3089,Clear,Clear,3089,doc/master/classTGeoRCExtension.html,https://root.cern,https://root.cern/doc/master/classTGeoRCExtension.html,1,['Clear'],['Clear']
Usability,";  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list parameters specified by a wildcard (e.g. ;  ; void Detach (Option_t *opt="""");  Detach this instance to its proofserv. ;  ; void DisableGoAsyn ();  Signal to disable related switches. ;  ; Int_t DownloadPackage (const char *par, const char *dstdir=0);  Download a PROOF archive (PAR file) from the master package repository. ;  ; Long64_t DrawSelect (const char *dsetname, const char *varexp, const char *selection="""", Option_t *option="""", Long64_t nentries=-1, Long64_t firstentry=0, TObject *enl=0);  Execute the specified drawing action on a data set which is stored on the master with name 'dsetname'. ;  ; virtual Int_t Echo (const char *str);  Sends a string to master and workers and expect them to echo it back to the client via a message. ;  ; virtual Int_t Echo (const TObject *obj);  Sends an object to master and workers and expect them to send back a message with the output",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:8334,feedback,feedback,8334,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['feedback'],['feedback']
Usability,";  Same as the Step(...) method for multiple batches but uses momentum. ;  ; void StepNesterov (DeepNet_t &master, std::vector< DeepNet_t > &nets, std::vector< TTensorBatch< Architecture_t > > &batches, Scalar_t momentum);  Same as the Step(...) method for multiple batches but uses Nesterov momentum. ;  ; void StepReducedWeights (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Does not evaluate the loss and therefore not trigger a possible synchronization with the device. ;  ; Scalar_t StepReducedWeightsLoss (DeepNet_t &deepNet, std::vector< Matrix_t > &input, const Matrix_t &output, const Matrix_t &weights);  Similar to StepReducedWeights(...) but also evaluates the loss. ;  . Private Attributes; size_t fBatchSize;  Batch size to use for the training. ;  ; size_t fConvergenceCount;  Current number of training epochs without. ;  ; size_t fConvergenceSteps;  Number of training epochs without considerable. ;  ; Scalar_t fLearningRate;  Learning rate \(\alpha\). ;  ; Scalar_t fMinimumError;  The minimum loss achieved on the training set during the current training session. ;  ; size_t fStepCount;  Number of steps performed in the current training session. ;  ; Scalar_t fTestError;  Holds the most recently computed test loss. ;  ; size_t fTestInterval;  Interval for the computation of the test error. ;  ; Scalar_t fTrainingError;  Holds the most recently computed training loss. ;  . #include <TMVA/DNN/DLMinimizers.h>; Member Typedef Documentation. ◆ DeepNet_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::DeepNet_t = TDeepNet<Architecture_t>. Definition at line 67 of file DLMinimizers.h. ◆ Matrix_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Architecture_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 69 of file DLMinimizers.h. ◆ Scalar_t. template<typename Architecture_t > . using TMVA::DNN::TDLGradientDescent< Archit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html:3357,Learn,Learning,3357,doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDLGradientDescent.html,1,['Learn'],['Learning']
Usability,";  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Protected Member Functions; void ClearVisibleVolumes ();  Clear the list of visible volumes reset the kVisOnScreen bit for volumes previously in the list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions; void DefineColors () const;  Define 100 colors with increasing light intensities for each basic color (1-7) Register these colors at indexes starting with 1000. ;  ; void LocalToMasterVect (const Double_t *local, Double_t *master) const;  Convert a local vector according view rotation matrix. ;  . Private Attributes; Double_t fBombR;  ; Double_t fBombX;  ; Double_t fBombY;  ; Double_t fBombZ;  ; TBuffer3D * fBuffer;  ; Double_t fCheckedBox [6];  ; TGeoNode * fCheckedNode;  ; TGeoChecker * fChecker;  ; TGeoShape * fClippingShape;  ; Int_t fExplodedView;  ; TGeoManager * fGeoManager;  ; TGeoHMatrix * fGlobal;  ; Bool_t fIsEditable;  ; Bool_t fIsPaintingShape;  ; Bool_t fIsR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPainter.html:17517,Clear,ClearVisibleVolumes,17517,doc/master/classTGeoPainter.html,https://root.cern,https://root.cern/doc/master/classTGeoPainter.html,2,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,";  TVirtualMonitoringReader (const char *="""");  ; virtual ~TVirtualMonitoringReader ();  ; virtual void DeleteMap (TMap *);  ; virtual void DumpResult ();  ; virtual void GetLastValues (const char *, const char *, const char *, const char *, Bool_t=kFALSE);  ; virtual TMap * GetMap ();  ; virtual void GetValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Bool_t=kFALSE);  ; TClass * IsA () const override;  ; virtual void ProxyValues (const char *, const char *, const char *, const char *, Long_t, Long_t, Long_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualMonitoringReader.html:1322,Clear,Clear,1322,doc/master/classTVirtualMonitoringReader.html,https://root.cern,https://root.cern/doc/master/classTVirtualMonitoringReader.html,1,['Clear'],['Clear']
Usability,";  This tutorial demonstrates how the highlight mechanism can be used on a ntuple. ;  ; file  hlHisto4.C;  This tutorial demonstrates how the highlight mechanism can be used on an histogram. ;  ; file  hstack.C;   Example of stacked histograms: class THStack. ;  ; file  hstackpads.C;   Drawing stack histograms on subpads. ;  ; file  hsum.C;   Histograms filled and drawn in a loop. ;  ; file  hsumTimer.C;   Demo of Timers. ;  ; file  legendautoplaced.C;   The legend can be placed automatically in the current pad in an empty space found at painting time. ;  ; file  logscales.C;   Draw parametric functions with log scales. ;  ; file  movepalette.C;   When an histogram is drawn with the option COLZ, a palette is automatically drawn vertically on the right side of the plot. ;  ; file  multicolor.C;   Use a THStack to show a 2-D hist with cells with different colors. ;  ; file  NormalizeHistogram.C;   Normalizing a Histogram ;  ; file  ratioplot1.C;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot1.py;   Example creating a simple ratio plot of two histograms using the pois division option. ;  ; file  ratioplot2.C;   Example of a fit residual plot. ;  ; file  ratioplot2.py;   Example of a fit residual plot. ;  ; file  ratioplot3.C;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot3.py;   Example which shows how you can get the graph of the lower plot and set the y axis range for it. ;  ; file  ratioplot4.C;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot4.py;   Example that shows custom dashed lines on the lower plot, specified by a vector of floats. ;  ; file  ratioplot5.C;   Example that shows how you can set the colors of the confidence interval bands by using the method TRatioPlot::SetConfidenceIntervalColors. ;  ; file  ratioplot5.py;   Example that shows how you can set the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__hist.html:3706,simpl,simple,3706,doc/master/group__tutorial__hist.html,https://root.cern,https://root.cern/doc/master/group__tutorial__hist.html,1,['simpl'],['simple']
Usability,";  This will simply clear the cache. ;  ; void ResetMissCache ();  Reset all the miss cache training. ;  ; void SetAutoCreated (bool val);  ; Int_t SetBufferSize (Long64_t buffersize) override;  Change the underlying buffer size of the cache. ;  ; virtual void SetEntryRange (Long64_t emin, Long64_t emax);  Set the minimum and maximum entry number to be processed this information helps to optimize the number of baskets to read when prefetching the branch buffers. ;  ; void SetFile (TFile *file, TFile::ECacheAction action=TFile::kDisconnect) override;  Change the file that is being cached. ;  ; virtual void SetLearnPrefill (EPrefillType type=kNoPrefill);  Set whether the learning period is started with a prefilling of the cache and which type of prefilling is used. ;  ; void SetOptimizeMisses (bool opt);  Start of methods for the miss cache. ;  ; void StartLearningPhase ();  The name should be enough to explain the method. ;  ; virtual void StopLearningPhase ();  This is the counterpart of StartLearningPhase() and can be used to stop the learning phase. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void UpdateBranches (TTree *tree);  Update pointer to current Tree and recompute pointers to the branches in the cache. ;  ;  Public Member Functions inherited from TFileCacheRead;  TFileCacheRead ();  Default Constructor. ;  ;  TFileCacheRead (TFile *file, Int_t buffersize, TObject *tree=nullptr);  Creates a TFileCacheRead data structure. ;  ;  ~TFileCacheRead () override;  Destructor. ;  ; virtual void AddNoCacheBytesRead (Long64_t len);  ; virtual void AddNoCacheReadCalls (Int_t reads);  ; virtual void Close (Option_t *option="""");  Close out any threads or asynchronous fetches used by the underlying implementation. ;  ; virtual Int_t GetBufferSize () const;  ; virtual Long64_t GetBytesRead () const;  ; virtual Long64_t GetBytesReadExtra () const;  ; TFile * GetFile",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:16264,learn,learning,16264,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,";  class dealing with the transformation between user specified parameters (external) and internal parameters used for minimization More...;  ; class  MnVectorTransform;  ; class  ModularFunctionMinimizer;  Base common class providing the API for all the minimizer Various Minimize methods are provided varying on the type of FCN function passesd and on the objects used for the parameters. More...;  ; class  MPIProcess;  ; class  MPITerminate;  ; class  NegativeG2LineSearch;  In case that one of the components of the second derivative g2 calculated by the numerical Gradient calculator is negative, a 1dim line search in the direction of that component is done in order to find a better position where g2 is again positive. More...;  ; class  Numerical2PGradientCalculator;  class performing the numerical gradient calculation More...;  ; class  NumericalDerivator;  ; class  ParametricFunction;  Function which has parameters. More...;  ; class  PrefixStack;  ; class  ScanBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  ScanMinimizer;  Class implementing the required methods for a minimization using SCAN API is provided in the upper ROOT::Minuit2::ModularFunctionMinimizer class. More...;  ; class  SimplexBuilder;  Performs a minimization using the simplex method of Nelder and Mead (ref. More...;  ; class  SimplexMinimizer;  Class implementing the required methods for a minimization using Simplex. More...;  ; class  SimplexParameters;  class describing the simplex set of points (f(x), x ) which evolve during the minimization iteration process. More...;  ; class  SimplexSeedGenerator;  generate Simplex starting point (state) More...;  ; class  SinParameterTransformation;  class for the transformation for double-limited parameter Using a sin function one goes from a double-limited parameter range to an unlimited one More...;  ; class  SqrtLowParameterTransformation;  Transformation from external to internal Parameter based o",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html:11228,simpl,simplex,11228,doc/master/namespaceROOT_1_1Minuit2.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1Minuit2.html,2,['simpl'],['simplex']
Usability,";  print the matrix in 4x4 format ;  ; virtual void ReflectX (Bool_t leftside, Bool_t rotonly=kFALSE);  Multiply by a reflection respect to YZ. ;  ; virtual void ReflectY (Bool_t leftside, Bool_t rotonly=kFALSE);  Multiply by a reflection respect to ZX. ;  ; virtual void ReflectZ (Bool_t leftside, Bool_t rotonly=kFALSE);  Multiply by a reflection respect to XY. ;  ; virtual void RegisterYourself ();  Register the matrix in the current manager, which will become the owner. ;  ; void SetDefaultName ();  If no name was supplied in the ctor, the type of transformation is checked. ;  ; void SetShared (Bool_t flag=kTRUE);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoTranslation.html:5729,Clear,Clear,5729,doc/master/classTGeoTranslation.html,https://root.cern,https://root.cern/doc/master/classTGeoTranslation.html,1,['Clear'],['Clear']
Usability,";  set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval) ;  ; virtual void SetUseKeys (bool useKeys);  set whether to use kernel estimation to determine the interval ;  ; virtual void SetUseSparseHist (bool useSparseHist);  set whether to use sparse histogram (if using histogram at all) ;  ; double Size () const override;  Get the size of the test (eg. rate of Type I error) ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooStats::IntervalCalculator; virtual ~IntervalCalculator ();  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html:5390,Clear,Clear,5390,doc/master/classRooStats_1_1MCMCCalculator.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1MCMCCalculator.html,1,['Clear'],['Clear']
Usability,";  standard constructor: ncounts gives the total number of counts that the loop will iterate through. ;  ; virtual ~Timer (void);  destructor ;  ; void DrawProgressBar (Int_t, const TString &comment="""");  draws progress bar in color or B&W caution: ;  ; void DrawProgressBar (TString);  draws a string in the progress bar ;  ; void DrawProgressBar (void);  draws the progressbar ;  ; Double_t ElapsedSeconds (void);  computes elapsed tim in seconds ;  ; TString GetElapsedTime (Bool_t Scientific=kTRUE);  returns pretty string with elapsed time ;  ; TString GetLeftTime (Int_t icounts);  returns pretty string with time left ;  ; void Init (Int_t ncounts);  ; virtual TClass * IsA () const;  ; void Reset (void);  resets timer ;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TStopwatch;  TStopwatch ();  Create a stopwatch and start it. ;  ; void Continue ();  Resume a stopped stopwatch. ;  ; Int_t Counter () const;  ; Double_t CpuTime ();  Stop the stopwatch (if it is running) and return the cputime (in seconds) passed between the start and stop events. ;  ; TClass * IsA () const override;  ; void Print (Option_t *option="""") const override;  Print the real and cpu time passed between the start and stop events. ;  ; Double_t RealTime ();  Stop the stopwatch (if it is running) and return the realtime (in seconds) passed between the start and stop events. ;  ; void Reset ();  ; void ResetCpuTime (Double_t time=0);  ; void ResetRealTime (Double_t time=0);  ; void Start (Bool_t reset=kTRUE);  Start the stopwatch. ;  ; void Stop ();  Stop the stopwatch. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Timer.html:2700,Resume,Resume,2700,doc/master/classTMVA_1_1Timer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Timer.html,1,['Resume'],['Resume']
Usability,";  ► tmva;  ► envelope;  classification.C;  ► keras;  ApplicationClassificationKeras.py;  ApplicationRegressionKeras.py;  ClassificationKeras.py;  GenerateModel.py;  LaunchClasGUI.C;  LaunchMultiGUI.C;  LaunchRegGUI.C;  MulticlassKeras.py;  RegressionKeras.py;  createData.CPlot the variables ;  TMVAClassification.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVAClassificationApplication.C This macro provides a simple example on how to use the trained classifiers within an analysis module ;  TMVAClassificationCategory.C This macro provides examples for the training and testing of the TMVA classifiers in categorisation mode ;  TMVAClassificationCategoryApplication.C This macro provides a simple example on how to use the trained classifiers (with categories) within an analysis module ;  TMVACrossValidation.C This example explains how to use the cross-validation feature of TMVA ;  TMVAGAexample.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAGAexample2.C This exectutable gives an example of a very simple use of the genetic algorithm of TMVA ;  TMVAMulticlass.C This macro provides a simple example for the training and testing of the TMVA multiclass classification ;  TMVAMulticlassApplication.C This macro provides a simple example on how to use the trained multiclass classifiers within an analysis module ;  TMVAMultipleBackgroundExample.C This example shows the training of signal with three different backgrounds Then in the application a tree is created with all signal and background events where the true class ID and the three classifier outputs are added finally with the application tree, the significance is maximized with the help of the TMVA genetic algrorithm ;  TMVARegression.C This macro provides examples for the training and testing of the TMVA classifiers ;  TMVARegressionApplication.C This macro provides a simple example on how to use the trained regression MVAs within an ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:156305,simpl,simple,156305,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,";. protected:. TStringTNamed::fNameobject identifier; TGeoRotation*fRotationrotation matrix; TStringTNamed::fTitleobject title; Double_tfTranslation[3]translation vector. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoCombiTrans(); dummy ctor. TGeoCombiTrans(const TGeoCombiTrans& other); Copy ctor. TGeoCombiTrans(const TGeoMatrix& other); Copy ctor. TGeoCombiTrans(const TGeoTranslation& tr, const TGeoRotation& rot); Constructor from a translation and a rotation. TGeoCombiTrans(const char* name); Named ctor. TGeoCombiTrans(Double_t dx, Double_t dy, Double_t dz, TGeoRotation* rot); Constructor from a translation specified by X,Y,Z and a pointer to a rotation. The rotation will not be owned by this. TGeoCombiTrans(const char* name, Double_t dx, Double_t dy, Double_t dz, TGeoRotation* rot); Named ctor. TGeoCombiTrans & operator=(const TGeoMatrix& matrix); Assignment operator. ~TGeoCombiTrans(); destructor. void Clear(Option_t* option = """"); Reset translation/rotation to identity. TGeoMatrix& Inverse() const; Return a temporary inverse of this. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RegisterYourself(); Register the matrix in the current manager, which will become the owner. void RotateX(Double_t angle); Rotate about X axis with angle expressed in degrees. void RotateY(Double_t angle); Rotate about Y axis with angle expressed in degrees. void RotateZ(Double_t angle); Rotate about Z axis with angle expressed in degrees. void ReflectX(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to YZ. void ReflectY(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to ZX. void ReflectZ(Bool_t leftside, Bool_t rotonly = kFALSE); Multiply by a reflection respect to XY. void SavePrimitive(ostream& out, Option_t* option = """"); Save a primitive as a C++ statement(s) on output stream ""out"". void SetRotation(const TGeoRotation* rot); Assign a foreign rotation to the co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoCombiTrans.html:15617,Clear,Clear,15617,root/html528/TGeoCombiTrans.html,https://root.cern,https://root.cern/root/html528/TGeoCombiTrans.html,4,['Clear'],['Clear']
Usability,";; 1346 ; 1347 std::string hjson;; 1348 ; 1349 SearchVisibles(fSearch, hjson, fSearchJson);; 1350 ; 1351 (void)hjson; // not used here; 1352}; 1353 ; 1354/////////////////////////////////////////////////////////////////////; 1355/// Collect all information required to draw geometry on the client; 1356/// This includes list of each visible nodes, meshes and matrixes; 1357 ; 1358void RGeomDescription::ProduceDrawData(); 1359{; 1360 auto json = ProduceJson();; 1361 ; 1362 TLockGuard lock(fMutex);; 1363 ; 1364 fDrawJson = ""GDRAW:""s + json;; 1365}; 1366 ; 1367/////////////////////////////////////////////////////////////////////; 1368/// Clear raw data. Will be rebuild when next connection will be established; 1369 ; 1370void RGeomDescription::ClearDrawData(); 1371{; 1372 TLockGuard lock(fMutex);; 1373 ; 1374 fDrawJson.clear();; 1375 fSearchJson.clear();; 1376}; 1377 ; 1378/////////////////////////////////////////////////////////////////////; 1379/// Clear cached data, need to be clear when connection broken; 1380 ; 1381void RGeomDescription::ClearCache(); 1382{; 1383 ClearDrawData();; 1384 ; 1385 TLockGuard lock(fMutex);; 1386 fShapes.clear();; 1387 fSearch.clear();; 1388}; 1389 ; 1390/////////////////////////////////////////////////////////////////////; 1391/// return true when node used in main geometry drawing and does not have childs; 1392/// for such nodes one could provide optimize toggling of visibility flags; 1393 ; 1394bool RGeomDescription::IsPrincipalEndNode(int nodeid); 1395{; 1396 TLockGuard lock(fMutex);; 1397 ; 1398 if ((nodeid < 0) || (nodeid >= (int)fDesc.size())); 1399 return false;; 1400 ; 1401 auto &desc = fDesc[nodeid];; 1402 ; 1403 return (desc.sortid < fDrawIdCut) && desc.IsVisible() && desc.CanDisplay() && (desc.chlds.empty());; 1404}; 1405 ; 1406/////////////////////////////////////////////////////////////////////; 1407/// Search visible nodes for provided name; 1408/// If number of found elements less than 100, create description and shapes for ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8cxx_source.html:41650,clear,clear,41650,doc/master/RGeomData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8cxx_source.html,10,"['Clear', 'clear']","['Clear', 'ClearCache', 'ClearDrawData', 'clear']"
Usability,";; 1499 for (size_t l = 0; l < nlayers; ++l) {; 1500 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0); 1501 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),; 1502 TString::Format(""initial weights layer %d"", l).Data());; 1503 ; 1504 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetOutput(),; 1505 TString::Format(""output tensor layer %d"", l).Data());; 1506 }; 1507#endif; 1508 ; 1509 //Architecture_t::PrintTensor(deepNet.GetLayerAt(nlayers-1)->GetOutput(),""output tensor last layer"" );; 1510 ; 1511 deepNet.Backward(my_batch.GetInput(), my_batch.GetOutput(), my_batch.GetWeights());; 1512 ; 1513 if (debugFirstEpoch); 1514 std::cout << ""- doing optimizer update \n"";; 1515 ; 1516 // increment optimizer step that is used in some algorithms (e.g. ADAM); 1517 optimizer->IncrementGlobalStep();; 1518 optimizer->Step();; 1519 ; 1520#ifdef DEBUG; 1521 std::cout << ""minmimizer step - momentum "" << settings.momentum << "" learning rate "" << optimizer->GetLearningRate() << std::endl;; 1522 for (size_t l = 0; l < nlayers; ++l) {; 1523 if (deepNet.GetLayerAt(l)->GetWeights().size() > 0) {; 1524 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightsAt(0),TString::Format(""weights after step layer %d"",l).Data());; 1525 Architecture_t::PrintTensor(deepNet.GetLayerAt(l)->GetWeightGradientsAt(0),""weight gradients"");; 1526 }; 1527 }; 1528#endif; 1529 ; 1530 }; 1531 ; 1532 if (debugFirstEpoch) std::cout << ""\n End batch loop - compute validation loss \n"";; 1533 //}; 1534 debugFirstEpoch = false;; 1535 if ((nTrainEpochs % settings.testInterval) == 0) {; 1536 ; 1537 std::chrono::time_point<std::chrono::system_clock> t1,t2;; 1538 ; 1539 t1 = std::chrono::system_clock::now();; 1540 ; 1541 // Compute validation error.; 1542 ; 1543 ; 1544 Double_t valError = 0.0;; 1545 bool inTraining = false;; 1546 for (auto batch : validationData) {; 1547 auto inputTensor = batch.GetInput();; 1548 auto outputMatrix = batch.GetOutput();; 1549 auto weights = batch.GetWeights();; 1550 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodDL_8cxx_source.html:60391,learn,learning,60391,doc/master/MethodDL_8cxx_source.html,https://root.cern,https://root.cern/doc/master/MethodDL_8cxx_source.html,1,['learn'],['learning']
Usability,";; 215 }; 216 }; 217 ; 218 /**; 219 copy constructors; 220 */; 221 BinData::BinData(const BinData &rhs); 222 : FitData(rhs),; 223 fDataPtr(nullptr),; 224 fDataErrorPtr(nullptr), fDataErrorHighPtr(nullptr), fDataErrorLowPtr(nullptr),; 225 fpTmpCoordErrorVector(nullptr), fpTmpBinEdgeVector(nullptr); 226 {; 227 *this = rhs;; 228 }; 229 ; 230 BinData & BinData::operator= ( const BinData & rhs ); 231 {; 232 FitData::operator=( rhs );; 233 ; 234 if ( fpTmpBinEdgeVector ); 235 {; 236 assert(HasBinEdges());; 237 ; 238 delete[] fpTmpBinEdgeVector;; 239 fpTmpBinEdgeVector= nullptr;; 240 }; 241 ; 242 if ( fpTmpCoordErrorVector ); 243 {; 244 delete[] fpTmpCoordErrorVector;; 245 fpTmpCoordErrorVector = nullptr;; 246 }; 247 ; 248 fDataPtr = nullptr;; 249 fDataErrorPtr= fDataErrorHighPtr= fDataErrorLowPtr= nullptr;; 250 ; 251 fErrorType = rhs.fErrorType;; 252 fRefVolume = rhs.fRefVolume;; 253 fBinEdge = rhs.fBinEdge;; 254 ; 255 if ( fWrapped ); 256 {; 257 fData.clear();; 258 fCoordErrors.clear();; 259 fDataError.clear();; 260 fDataErrorHigh.clear();; 261 fDataErrorLow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataErrorLowPtr;; 268 }; 269 else; 270 {; 271 // copy data vector and set correct pointer; 272 fData = rhs.fData;; 273 if ( !fData.empty() ); 274 fDataPtr = &fData.front();; 275 ; 276 // copy coordinate errors and set correct pointers; 277 fCoordErrors = rhs.fCoordErrors;; 278 if (!fCoordErrors.empty()) {; 279 assert(kCoordError == fErrorType || kAsymError == fErrorType);; 280 fCoordErrorsPtr.resize(fDim);; 281 for (unsigned int i = 0; i < fDim; i++) {; 282 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 283 }; 284 }; 285 // copy data error; 286 fDataError = rhs.fDataError;; 287 if (!fDataError.empty()) {; 288 assert(kValueError == fErrorType || kCoordError == fErrorType);; 289 fD",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:7132,clear,clear,7132,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,";; 251 ++itTargetDelta; ++itTargetGradient; ++itGradient; ++itWeight;; 252 }; 253 ++itSource;; 254 }; 255 }; 256 ; 257 ; 258 ; 259 ; 260 ; 261 ; 262#define USELOCALWEIGHTS 1; 263 ; 264 ; 265 ; 266/*! \brief implementation of the steepest gradient descent algorithm; 267 *; 268 * Can be used with multithreading (i.e. ""HogWild!"" style); see call in trainCycle; 269 */; 270 template <typename Function, typename Weights, typename PassThrough>; 271 double Steepest::operator() (Function& fitnessFunction, Weights& weights, PassThrough& passThrough); 272 {; 273 size_t numWeights = weights.size ();; 274 // std::vector<double> gradients (numWeights, 0.0);; 275 m_localGradients.assign (numWeights, 0.0);; 276 // std::vector<double> localWeights (begin (weights), end (weights));; 277 // m_localWeights.reserve (numWeights);; 278 m_localWeights.assign (begin (weights), end (weights));; 279 ; 280 double E = 1e10;; 281 if (m_prevGradients.size () != numWeights); 282 {; 283 m_prevGradients.clear ();; 284 m_prevGradients.assign (weights.size (), 0);; 285 }; 286 ; 287 bool success = true;; 288 size_t currentRepetition = 0;; 289 while (success); 290 {; 291 if (currentRepetition >= m_repetitions); 292 break;; 293 ; 294 m_localGradients.assign (numWeights, 0.0);; 295 ; 296 // --- nesterov momentum ---; 297 // apply momentum before computing the new gradient; 298 auto itPrevG = begin (m_prevGradients);; 299 auto itPrevGEnd = end (m_prevGradients);; 300 auto itLocWeight = begin (m_localWeights);; 301 for (; itPrevG != itPrevGEnd; ++itPrevG, ++itLocWeight); 302 {; 303 (*itPrevG) *= m_beta;; 304 (*itLocWeight) += (*itPrevG);; 305 }; 306 ; 307 E = fitnessFunction (passThrough, m_localWeights, m_localGradients);; 308// plotGradients (gradients);; 309// plotWeights (localWeights);; 310 ; 311 double alpha = gaussDouble (m_alpha, m_alpha/2.0);; 312// double alpha = m_alpha;; 313 ; 314 auto itG = begin (m_localGradients);; 315 auto itGEnd = end (m_localGradients);; 316 itPrevG = begin (m_prevGradients",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8icc_source.html:8764,clear,clear,8764,doc/master/NeuralNet_8icc_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8icc_source.html,1,['clear'],['clear']
Usability,";; 3142 ; 3143}; 3144 ; 3145 ; 3146////////////////////////////////////////////////////////////////////////////////; 3147/// Release parameter number ipar during a fit operation.; 3148/// After releasing it, the parameter; 3149/// can vary freely in the fit. The parameter limits are reset to 0,0.; 3150 ; 3151void TF1::ReleaseParameter(Int_t ipar); 3152{; 3153 if (ipar < 0 || ipar > GetNpar() - 1) return;; 3154 SetParLimits(ipar, 0, 0);; 3155}; 3156 ; 3157 ; 3158////////////////////////////////////////////////////////////////////////////////; 3159/// Save values of function in array fSave; 3160 ; 3161void TF1::Save(Double_t xmin, Double_t xmax, Double_t, Double_t, Double_t, Double_t); 3162{; 3163 if (!fSave.empty()); 3164 fSave.clear();; 3165 ; 3166 Double_t *parameters = GetParameters();; 3167 //if (fSave != 0) {delete [] fSave; fSave = 0;}; 3168 if (fParent && fParent->InheritsFrom(TH1::Class())) {; 3169 //if parent is a histogram save the function at the center of the bins; 3170 if ((xmin > 0 && xmax > 0) && TMath::Abs(TMath::Log10(xmax / xmin) > TMath::Log10(fNpx))) {; 3171 TH1 *h = (TH1 *)fParent;; 3172 Int_t bin1 = h->GetXaxis()->FindBin(xmin);; 3173 Int_t bin2 = h->GetXaxis()->FindBin(xmax);; 3174 int nsave = bin2 - bin1 + 4;; 3175 fSave.resize(nsave);; 3176 Double_t xv[1];; 3177 ; 3178 InitArgs(xv, parameters);; 3179 for (Int_t i = bin1; i <= bin2; i++) {; 3180 xv[0] = h->GetXaxis()->GetBinCenter(i);; 3181 fSave[i - bin1] = EvalPar(xv, parameters);; 3182 }; 3183 fSave[nsave - 3] = xmin;; 3184 fSave[nsave - 2] = xmax;; 3185 fSave[nsave - 1] = xmax;; 3186 return;; 3187 }; 3188 }; 3189 ; 3190 Int_t npx = fNpx;; 3191 if (npx <= 0); 3192 return;; 3193 ; 3194 Double_t dx = (xmax - xmin) / fNpx;; 3195 if (dx <= 0) {; 3196 dx = (fXmax - fXmin) / fNpx;; 3197 npx--;; 3198 xmin = fXmin + 0.5 * dx;; 3199 xmax = fXmax - 0.5 * dx;; 3200 }; 3201 if (npx <= 0); 3202 return;; 3203 fSave.resize(npx + 3);; 3204 Double_t xv[1];; 3205 InitArgs(xv, parameters);; 3206 for (Int_t i =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:120648,clear,clear,120648,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['clear'],['clear']
Usability,";; 3527 if (firstBracket != std::string::npos) {; 3528 // -- We are looking for an array data member.; 3529 std::string nameNoDim(givenName.substr(0, firstBracket));; 3530 TObjLink* lnk = fRealData->FirstLink();; 3531 while (lnk) {; 3532 TObject* obj = lnk->GetObject();; 3533 std::string objName(obj->GetName());; 3534 std::string::size_type pos = objName.find_first_of(""["");; 3535 // Only match arrays to arrays for now.; 3536 if (pos != std::string::npos) {; 3537 objName.erase(pos);; 3538 if (objName == nameNoDim) {; 3539 return static_cast<TRealData*>(obj);; 3540 }; 3541 }; 3542 lnk = lnk->Next();; 3543 }; 3544 }; 3545 ; 3546 // Now try it as a pointer.; 3547 std::ostringstream ptrname;; 3548 ptrname << ""*"" << givenName;; 3549 rd = (TRealData*) fRealData->FindObject(ptrname.str().c_str());; 3550 if (rd) {; 3551 return rd;; 3552 }; 3553 ; 3554 // Check for a dot in the name.; 3555 std::string::size_type firstDot = givenName.find_first_of(""."");; 3556 if (firstDot == std::string::npos) {; 3557 // -- Not found, a simple name, all done.; 3558 return nullptr;; 3559 }; 3560 ; 3561 //; 3562 // At this point the name has a dot in it, so it is the name; 3563 // of some contained sub-object.; 3564 //; 3565 ; 3566 // May be a pointer like in TH1: fXaxis.fLabels (in TRealdata is named fXaxis.*fLabels); 3567 std::string::size_type lastDot = givenName.find_last_of(""."");; 3568 std::ostringstream starname;; 3569 starname << givenName.substr(0, lastDot) << "".*"" << givenName.substr(lastDot + 1);; 3570 rd = (TRealData*) fRealData->FindObject(starname.str().c_str());; 3571 if (rd) {; 3572 return rd;; 3573 }; 3574 ; 3575 // Last attempt in case a member has been changed from; 3576 // a static array to a pointer, for example the member; 3577 // was arr[20] and is now *arr.; 3578 //; 3579 // Note: In principle, one could also take into account; 3580 // the opposite situation where a member like *arr has; 3581 // been converted to arr[20].; 3582 //; 3583 // FIXME: What about checking after ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/TClass_8cxx_source.html:134952,simpl,simple,134952,doc/v632/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,";; 3594 if (firstBracket != std::string::npos) {; 3595 // -- We are looking for an array data member.; 3596 std::string nameNoDim(givenName.substr(0, firstBracket));; 3597 TObjLink* lnk = fRealData->FirstLink();; 3598 while (lnk) {; 3599 TObject* obj = lnk->GetObject();; 3600 std::string objName(obj->GetName());; 3601 std::string::size_type pos = objName.find_first_of(""["");; 3602 // Only match arrays to arrays for now.; 3603 if (pos != std::string::npos) {; 3604 objName.erase(pos);; 3605 if (objName == nameNoDim) {; 3606 return static_cast<TRealData*>(obj);; 3607 }; 3608 }; 3609 lnk = lnk->Next();; 3610 }; 3611 }; 3612 ; 3613 // Now try it as a pointer.; 3614 std::ostringstream ptrname;; 3615 ptrname << ""*"" << givenName;; 3616 rd = (TRealData*) fRealData->FindObject(ptrname.str().c_str());; 3617 if (rd) {; 3618 return rd;; 3619 }; 3620 ; 3621 // Check for a dot in the name.; 3622 std::string::size_type firstDot = givenName.find_first_of(""."");; 3623 if (firstDot == std::string::npos) {; 3624 // -- Not found, a simple name, all done.; 3625 return nullptr;; 3626 }; 3627 ; 3628 //; 3629 // At this point the name has a dot in it, so it is the name; 3630 // of some contained sub-object.; 3631 //; 3632 ; 3633 // May be a pointer like in TH1: fXaxis.fLabels (in TRealdata is named fXaxis.*fLabels); 3634 std::string::size_type lastDot = givenName.find_last_of(""."");; 3635 std::ostringstream starname;; 3636 starname << givenName.substr(0, lastDot) << "".*"" << givenName.substr(lastDot + 1);; 3637 rd = (TRealData*) fRealData->FindObject(starname.str().c_str());; 3638 if (rd) {; 3639 return rd;; 3640 }; 3641 ; 3642 // Last attempt in case a member has been changed from; 3643 // a static array to a pointer, for example the member; 3644 // was arr[20] and is now *arr.; 3645 //; 3646 // Note: In principle, one could also take into account; 3647 // the opposite situation where a member like *arr has; 3648 // been converted to arr[20].; 3649 //; 3650 // FIXME: What about checking after ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TClass_8cxx_source.html:137703,simpl,simple,137703,doc/master/TClass_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TClass_8cxx_source.html,1,['simpl'],['simple']
Usability,";; 434 if (fStack && !strstr(doption,""nostack"")) h = (TH1*)fStack->At(i);; 435 Int_t dist = h->DistancetoPrimitive(px,py);; 436 if (dist <= 0) return 0;; 437 if (dist < kMaxDiff) {; 438 gPad->SetSelected(fHists->At(i));; 439 gPad->SetCursor(kPointer);; 440 return dist;; 441 }; 442 }; 443 return distance;; 444}; 445 ; 446////////////////////////////////////////////////////////////////////////////////; 447/// Draw this stack with its current attributes.; 448///; 449/// Options to draw histograms are described in THistPainter::Paint; 450/// By default (if the option ""nostack"" is not specified), histograms will be painted; 451/// stacked on top of each other.; 452 ; 453void THStack::Draw(Option_t *option); 454{; 455 TString opt = option;; 456 opt.ToLower();; 457 if (gPad) {; 458 if (!gPad->IsEditable()) gROOT->MakeDefCanvas();; 459 if (!opt.Contains(""same"") && !opt.Contains(""pads"")) {; 460 //the following statement is necessary in case one attempts to draw; 461 //a temporary histogram already in the current pad; 462 if (TestBit(kCanDelete)) gPad->Remove(this);; 463 gPad->Clear();; 464 }; 465 }; 466 AppendPad(opt.Data());; 467}; 468 ; 469////////////////////////////////////////////////////////////////////////////////; 470/// Returns a pointer to the histogram used to draw the axis.; 471/// Takes into account the two following cases:; 472/// 1- option 'A' was specified in THStack::Draw. Return fHistogram; 473/// 2- user had called TPad::DrawFrame. return pointer to hframe histogram; 474///; 475/// IMPORTANT NOTES; 476/// - You must call Draw before calling this function. The returned histogram; 477/// depends on the selected Draw options.; 478/// - This function returns a pointer to an intermediate fixed bin size; 479/// histogram used to set the range and for picking.; 480/// You cannot use this histogram to return the bin information.; 481/// You must get a pointer to one of the histograms in the stack,; 482/// the first one, for example.; 483 ; 484TH1 *THStack::GetHist",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THStack_8cxx_source.html:15838,Clear,Clear,15838,doc/master/THStack_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THStack_8cxx_source.html,1,['Clear'],['Clear']
Usability,";; 641 obj->SetName(name);; 642 }; 643 if (novlps); 644 Info(""CheckOverlaps"", ""Number of illegal overlaps/extrusions for volume %s: %d\n"", GetName(), novlps);; 645 }; 646}; 647 ; 648////////////////////////////////////////////////////////////////////////////////; 649/// Tests for checking the shape navigation algorithms. See TGeoShape::CheckShape(); 650 ; 651void TGeoVolume::CheckShape(Int_t testNo, Int_t nsamples, Option_t *option); 652{; 653 fShape->CheckShape(testNo, nsamples, option);; 654}; 655 ; 656////////////////////////////////////////////////////////////////////////////////; 657/// Clean data of the volume.; 658 ; 659void TGeoVolume::CleanAll(); 660{; 661 ClearNodes();; 662 ClearShape();; 663}; 664 ; 665////////////////////////////////////////////////////////////////////////////////; 666/// Clear the shape of this volume from the list held by the current manager.; 667 ; 668void TGeoVolume::ClearShape(); 669{; 670 fGeoManager->ClearShape(fShape);; 671}; 672 ; 673////////////////////////////////////////////////////////////////////////////////; 674/// check for negative parameters in shapes.; 675 ; 676void TGeoVolume::CheckShapes(); 677{; 678 if (fShape->IsRunTimeShape()) {; 679 Error(""CheckShapes"", ""volume %s has run-time shape"", GetName());; 680 InspectShape();; 681 return;; 682 }; 683 if (!fNodes); 684 return;; 685 Int_t nd = fNodes->GetEntriesFast();; 686 TGeoNode *node = nullptr;; 687 TGeoNode *new_node;; 688 const TGeoShape *shape = nullptr;; 689 TGeoVolume *old_vol;; 690 for (Int_t i = 0; i < nd; i++) {; 691 node = (TGeoNode *)fNodes->At(i);; 692 // check if node has name; 693 if (!node->GetName()[0]); 694 printf(""Daughter %i of volume %s - NO NAME!!!\n"", i, GetName());; 695 old_vol = node->GetVolume();; 696 shape = old_vol->GetShape();; 697 if (shape->IsRunTimeShape()) {; 698 // printf("" Node %s/%s has shape with negative parameters. \n"",; 699 // GetName(), node->GetName());; 700 // old_vol->InspectShape();; 701 // make a copy of the node; 702 new_nod",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoVolume_8cxx_source.html:28763,Clear,ClearShape,28763,doc/master/TGeoVolume_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoVolume_8cxx_source.html,2,['Clear'],['ClearShape']
Usability,";; 757 case ROOT::kSTLset:; 758 case ROOT::kSTLunorderedset:; 759 case ROOT::kSTLmultiset:; 760 case ROOT::kSTLunorderedmultiset:; 761 return new TGenSetProxy(*this);; 762 default:; 763 return new TGenCollectionProxy(*this);; 764 }; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Proxy initializer; 769 ; 770TGenCollectionProxy *TGenCollectionProxy::Initialize(Bool_t silent) const; 771{; 772 TGenCollectionProxy* p = const_cast<TGenCollectionProxy*>(this);; 773 if ( fValue.load() ) return p;; 774 return p->InitializeEx(silent);; 775}; 776 ; 777////////////////////////////////////////////////////////////////////////////////; 778/// Reset the info gathered from StreamerInfos and value's TClass.; 779Bool_t TGenCollectionProxy::Reset(); 780{; 781 if (fReadMemberWise); 782 fReadMemberWise->Clear();; 783 delete fWriteMemberWise;; 784 fWriteMemberWise = nullptr;; 785 if (fConversionReadMemberWise); 786 fConversionReadMemberWise->clear();; 787 return kTRUE;; 788}; 789 ; 790////////////////////////////////////////////////////////////////////////////////; 791/// Check existence of function pointers; 792 ; 793void TGenCollectionProxy::CheckFunctions() const; 794{; 795 if ( 0 == fSize.call ) {; 796 Fatal(""TGenCollectionProxy"",""No 'size' function pointer for class %s present."",fName.c_str());; 797 }; 798 if ( 0 == fResize ) {; 799 Fatal(""TGenCollectionProxy"",""No 'resize' function for class %s present."",fName.c_str());; 800 }; 801 if ( 0 == fNext.call ) {; 802 Fatal(""TGenCollectionProxy"",""No 'next' function for class %s present."",fName.c_str());; 803 }; 804 if ( 0 == fFirst.call ) {; 805 Fatal(""TGenCollectionProxy"",""No 'begin' function for class %s present."",fName.c_str());; 806 }; 807 if ( 0 == fClear.call ) {; 808 Fatal(""TGenCollectionProxy"",""No 'clear' function for class %s present."",fName.c_str());; 809 }; 810 if ( 0 == fConstruct ) {; 811 Fatal(""TGenCollectionProxy"",""No 'block constructor' function for class %s present."",f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html:23933,Clear,Clear,23933,doc/master/TGenCollectionProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGenCollectionProxy_8cxx_source.html,2,"['Clear', 'clear']","['Clear', 'clear']"
Usability,";; 93 const unsigned int kli = k + li;; 94 tf = a[jli];; 95 a[jli] = a[kli];; 96 a[kli] = tf;; 97 } // for l; 98 ++nxch;; 99 ir[nxch] = (j << 12) + k;; 100 } // if k != j; 101 } // if j!=n; 102 ; 103 if (p <= 0.) {; 104 det = 0;; 105 return false;; 106 }; 107 ; 108 det *= a[jj];; 109#ifdef XXX; 110 t = std::abs(det);; 111 if (t < 1e-19 || t > 1e19) {; 112 det = 0;; 113 return false;; 114 }; 115#endif; 116 ; 117 a[jj] = 1. / a[jj];; 118 if (j == n) {; 119 continue;; 120 }; 121 ; 122 const unsigned int jm1 = j - 1;; 123 const unsigned int jpi = (j + 1) * idim;; 124 const unsigned int jjpi = j + jpi;; 125 ; 126 for (k = j + 1; k <= n; ++k) {; 127 const unsigned int ki = k * idim;; 128 const unsigned int jki = j + ki;; 129 const unsigned int kji = k + jpi;; 130 if (j != 1) {; 131 for (i = 1; i <= jm1; ++i) {; 132 const unsigned int ii = i * idim;; 133 a[jki] -= a[i + ki] * a[j + ii];; 134 a[kji] -= a[i + jpi] * a[k + ii];; 135 } // for i; 136 }; 137 a[jki] *= a[jj];; 138 a[kji] -= a[jjpi] * a[k + ji];; 139 } // for k; 140 } // for j; 141 ; 142 if (nxch % 2 != 0) {; 143 det = -(det);; 144 }; 145 ir[n] = nxch;; 146 return true;; 147} // end of Dfact; 148 ; 149 ; 150 } // namespace Math; 151 ; 152} // namespace ROOT; 153 ; 154 ; 155 ; 156#endif /* ROOT_Math_Dfactir */; a#define a(i)Definition RSha256.hxx:99; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; qfloat * qDefinition THbookFile.cxx:89; TMatrixT< Double_t >; nconst Int_t nDefinition legend1.C:16; MathNamespace for new Math classes and functions.; ROOT::Math::Dfactirbool Dfactir(Matrix &rhs, typename Matrix::value_type &det, unsigned int *ir)Dfactir.Definition Dfactir.h:46; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; lTLine lDefinition textangle.C:4. mathsmatrixincMathDfactir.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:45 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Dfactir_8h_source.html:4284,Guid,Guide,4284,doc/master/Dfactir_8h_source.html,https://root.cern,https://root.cern/doc/master/Dfactir_8h_source.html,1,['Guid'],['Guide']
Usability,";; 9604 b >> ijunk; fMaxEntryLoop = (Long64_t)ijunk;; 9605 b >> ijunk; fMaxVirtualSize = (Long64_t)ijunk;; 9606 b >> djunk; fEntries = (Long64_t)djunk;; 9607 b >> djunk; fTotBytes = (Long64_t)djunk;; 9608 b >> djunk; fZipBytes = (Long64_t)djunk;; 9609 b >> ijunk; fAutoSave = (Long64_t)ijunk;; 9610 b >> ijunk; fEstimate = (Long64_t)ijunk;; 9611 if (fEstimate <= 10000) fEstimate = 1000000;; 9612 fBranches.Streamer(b);; 9613 if (fBranchRef) fBranchRef->SetTree(this);; 9614 TBranch__SetTree(this,fBranches);; 9615 fLeaves.Streamer(b);; 9616 fSavedBytes = fTotBytes;; 9617 if (R__v > 1) fIndexValues.Streamer(b);; 9618 if (R__v > 2) fIndex.Streamer(b);; 9619 if (R__v > 3) {; 9620 TList OldInfoList;; 9621 OldInfoList.Streamer(b);; 9622 OldInfoList.Delete();; 9623 }; 9624 fNClusterRange = 0;; 9625 fDefaultEntryOffsetLen = 1000;; 9626 ResetBit(kMustCleanup);; 9627 b.CheckByteCount(R__s, R__c, TTree::IsA());; 9628 //====end of old versions; 9629 } else {; 9630 if (fBranchRef) {; 9631 fBranchRef->Clear();; 9632 }; 9633 TRefTable *table = TRefTable::GetRefTable();; 9634 if (table) TRefTable::SetRefTable(nullptr);; 9635 ; 9636 b.WriteClassBuffer(TTree::Class(), this);; 9637 ; 9638 if (table) TRefTable::SetRefTable(table);; 9639 }; 9640}; 9641 ; 9642////////////////////////////////////////////////////////////////////////////////; 9643/// Unbinned fit of one or more variable(s) from a tree.; 9644///; 9645/// funcname is a TF1 function.; 9646///; 9647/// \see TTree::Draw for explanations of the other parameters.; 9648///; 9649/// Fit the variable varexp using the function funcname using the; 9650/// selection cuts given by selection.; 9651///; 9652/// The list of fit options is given in parameter option.; 9653///; 9654/// - option = ""Q"" Quiet mode (minimum printing); 9655/// - option = ""V"" Verbose mode (default is between Q and V); 9656/// - option = ""E"" Perform better Errors estimation using Minos technique; 9657/// - option = ""M"" More. Improve fit results; 9658///; 9659/// You can ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:369648,Clear,Clear,369648,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['Clear'],['Clear']
Usability,";; ; SetLineColor(kMagenta);; TAttLine::Modify();; gPad->PaintPolyLine((Int_t)fXs2.size(), &fXs2[0], &fYs2[0]);; }; ; void polytest2(); {; TCanvas * const cnv = new TCanvas;; cnv->cd();; ; PolyTest2 * polygon = new PolyTest2;; polygon->Draw();//Attach a polygon to a canvas.; }; Int_tint Int_tDefinition RtypesCore.h:45; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; Rtypes.h; kOrange@ kOrangeDefinition Rtypes.h:67; kGreen@ kGreenDefinition Rtypes.h:66; kMagenta@ kMagentaDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; TCanvas.h; SetLineColorOption_t Option_t SetLineColorDefinition TGWin32VirtualXProxy.cxx:54; SetFillColorOption_t Option_t SetFillColorDefinition TGWin32VirtualXProxy.cxx:50; TNamed.h; TRandom.h; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gPad#define gPadDefinition TVirtualPad.h:308; TAttFillFill Area Attributes class.Definition TAttFill.h:19; TAttFill::Modifyvirtual void Modify()Change current fill area attributes if necessary.Definition TAttFill.cxx:216; TAttLineLine Attributes class.Definition TAttLine.h:18; TAttLine::Modifyvirtual void Modify()Change current line attributes if necessary.Definition TAttLine.cxx:247; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet current canvas & pad.Definition TCanvas.cxx:719; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TRandom::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom.cxx:559; TMVA_SOFIE_GNN_Parser.h2h2Definition TMVA_SOFIE_GNN_Parser.py:188; AuthorTimur Pocheptsov ; Definition in file polytest2.C. tutorialsgraphicspolytest2.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/polytest2_8C.html:5459,Guid,Guide,5459,doc/master/polytest2_8C.html,https://root.cern,https://root.cern/doc/master/polytest2_8C.html,1,['Guid'],['Guide']
Usability,";; T->Draw(""hprof.Draw()"","""",""goff"",1,12345);; c1->Print(""htr2.png"");; }; ; void htr3() {; // Connect Tree generated by htw; // read all histograms and plot the RMS of hpx versus the Mean of hprof; // for each of the 25000 entries; auto f = new TFile(""ht.root"");; auto T = (TTree*)f->Get(""T"");; auto c1 = new TCanvas(""c1"",""test"",10,10,600,400);; T->Draw(""hpx.GetRMS():hprof.GetMean()"");; c1->Print(""htr3.png"");; }; ; void htest() {; htw();; htr1();; htr2();; htr3();; }; f#define f(i)Definition RSha256.hxx:104; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; TH2F2-D histogram with a float per channel (see TH1 documentation)Definition TH2.h:307; TProfileProfile Histogram.Definition TProfile.h:32; TRandom::Rannorvirtual void Rannor(Float_t &a, Float_t &b)Return 2 numbers distributed following a gaussian with mean=0 and sigma=1.Definition TRandom.cxx:507; TTreeA TTree represents a columnar dataset.Definition TTree.h:79; c1return c1Definition legend1.C:41; ROOT::Math::Chebyshev::Tdouble T(double x)Definition ChebyshevPol.h:34; AuthorRene Brun ; Definition in file htest.C. tutorialstreehtest.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/htest_8C.html:4081,Guid,Guide,4081,doc/master/htest_8C.html,https://root.cern,https://root.cern/doc/master/htest_8C.html,1,['Guid'],['Guide']
Usability,";; gStyleR__EXTERN TStyle * gStyleDefinition TStyle.h:436; gPad#define gPadDefinition TVirtualPad.h:308; TStyle::SetPaperSizevoid SetPaperSize(EPaperSize size)Set paper size for PostScript output.Definition TStyle.cxx:1704; Then, the generated file (hpx.tex) can be included in a LaTeX document (simple.tex) in the following way: \documentclass{article}; \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; \title{A simple LaTeX example}; \date{July 2013}; \begin{document}; \maketitle; The following image as been generated using the TTeXDump class:; \par; \input{hpx.tex}; \end{document}; TTeXDumpInterface to TeX.Definition TTeXDump.h:20; Rcpp::asTString as(SEXP s)Definition RExports.h:86; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; Note the three directives needed at the top of the LaTeX file: \usepackage{tikz}; \usetikzlibrary{patterns}; \usetikzlibrary{plotmarks}; Then including the picture in the document is done with the \input directive.; The command pdflatex simple.tex will generate the corresponding pdf file simple.pdf. ; Definition at line 20 of file TTeXDump.h. Public Member Functions;  TTeXDump ();  Default TeX constructor. ;  ;  TTeXDump (const char *filename, Int_t type=-113);  Initialize the TeX interface. ;  ;  ~TTeXDump () override;  Default TeX destructor. ;  ; void CellArrayBegin (Int_t W, Int_t H, Double_t x1, Double_t x2, Double_t y1, Double_t y2) override;  Begin the Cell Array painting. ;  ; void CellArrayEnd () override;  End the Cell Array painting. ;  ; void CellArrayFill (Int_t r, Int_t g, Int_t b) override;  Paint the Cell Array. ;  ; void Close (Option_t *opt="""") override;  Close a TeX file. ;  ; Int_t CMtoTeX (Double_t u);  ; void DefineMarkers ();  add additional pgfplotmarks ;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Draw a Box. ;  ; void DrawFrame (Double_t xl, Double_t yl, Double_t xt, Double_t yt, Int_t mode, Int_t border, Int_t dark, Int_t light) override;  Draw a F",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTeXDump.html:1809,simpl,simple,1809,doc/master/classTTeXDump.html,https://root.cern,https://root.cern/doc/master/classTTeXDump.html,1,['simpl'],['simple']
Usability,";; h1->Draw(); // event loop is run once here; h2->Draw(""SAME""); // no need to run the event loop again; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; h1TH1F * h1Definition legend1.C:5; RDataFrame executes all above actions by running the event-loop only once. The trick is that actions are not executed at the moment they are called, but they are lazy, i.e. delayed until the moment one of their results is accessed through the smart pointer. At that time, the event loop is triggered and all results are produced simultaneously.; It is therefore good practice to declare all your transformations and actions before accessing their results, allowing RDataFrame to run the loop once and produce all results in one go. Going parallel; Let's say we would like to run the previous examples in parallel on several cores, dividing events fairly between cores. The only modification required to the snippets would be the addition of this line before constructing the main dataframe object: ROOT::EnableImplicitMT();; Simple as that. More details are given below. Working with collections and object selections; RDataFrame reads collections as the special type ROOT::RVec: for example, a column containing an array of floating point numbers can be read as a ROOT::RVecF. C-style arrays (with variable or static size), STL vectors and most other collection types can be read this way.; RVec is a container similar to std::vector (and can be used just like a std::vector) but it also offers a rich interface to operate on the array elements in a vectorised fashion, similarly to Python's NumPy arrays.; For example, to fill a histogram with the ""pt"" of selected particles for each event, Define() can be used to create a column that contains the desired array elements as follows:; // h is filled with all the elements of `good_pts`, for each event; auto h = df.Define(""good_pts"", [](const ROOT::RVecF &pt) { return pt[pt > 0]; }); .Histo1D(""good_pt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html:25908,Simpl,Simple,25908,doc/v632/classROOT_1_1RDataFrame.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RDataFrame.html,1,['Simpl'],['Simple']
Usability,";; h1.Draw();; c1.Print(""c1.ps(""); // write canvas and keep the ps file open; h2.Draw();; c1.Print(""c1.ps""); // canvas is added to ""c1.ps""; h3.Draw();; c1.Print(""c1.ps)""); // canvas is added to ""c1.ps""; // and ps file is closed; }; The TCanvas::Print(""file.ps("") mechanism is very useful, but it can be a little inconvenient to have the action of opening/closing a file being atomic with printing a page. Particularly if pages are being generated in some loop, one needs to detect the special cases of first and last page. The “[” and “]” can be used instead of “(” and “)” as shown in the next example.; c1.Print(""file.ps[""); // no actual print; just open file.ps; for (i=0; i<10; ++i) {; // fill canvas for context i; ...; c1.Print(""file.ps""); // actually print canvas to file.ps; } // end loop; c1.Print(""file.ps]""); // no actual print; just close file.ps; The following script illustrates how to open a postscript file and draw several pictures. The generation of a new postscript page is automatic when TCanvas::Clear is called by object->Draw().; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. //select PostScript output type; Int_t type = 111; //portrait ps; // Int_t type = 112; //landscape ps; // Int_t type = 113; //eps. //create a PostScript file and set the paper size; TPostScript ps(""test.ps"",type);; ps.Range(16,24); //set x,y of printed page. //draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1.Update(); //force drawing in a script; hprof->Draw();; c1.Update();; hpx->Draw(""lego1"");; c1.Update();; ps.Close();; }; The next example does the same:; {; TFile f(""hsimple.root"");; TCanvas c1(""c1"",""canvas"",800,600);. //set x,y of printed page; gStyle->SetPaperSize(16,24);. //draw 3 histograms from file hsimple.root on separate pages; hpx->Draw();; c1->Print(""test1.ps("", ""Portrait"");; hprof->Draw();; c1->Print(""test1.ps"");; hpx->Draw(""lego1"");; c1->Print(""test1.ps)"");; }; This following example shows two pages. The canvas is divided. TPos",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:377795,Clear,Clear,377795,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Clear'],['Clear']
Usability,";; t.DrawText(3,10,""Root > TF1 f1(\""f1\"",\""sin(x)/x\"",0,10)"");; t.DrawText(3, 9,""Root > f1.Draw()"");; t.SetTextFont(81);; t.SetTextSize(0.018);; t.DrawText(4,15,""(float) 13.2288f"");; t.DrawText(4,13.3,""sqrt(2) = 1.414214"");; t.DrawText(4,12.7,""sqrt(3) = 1.732051"");; t.DrawText(4,12.1,""sqrt(4) = 2.000000"");; t.DrawText(4,11.5,""sqrt(5) = 2.236068"");; t.DrawText(4,10.9,""sqrt(6) = 2.449490"");; ; TPad *pad = new TPad(""pad"",""pad"",.2,.05,.8,.35);; pad->Draw();; pad->cd();; pad->SetGrid();; TF1 *f1 = new TF1(""f1"",""sin(x)/x"",0,10);; f1->Draw();; }; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TF11-Dim function classDefinition TF1.h:233; TF1::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF1.cxx:1333; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::SetBorderSizevoid SetBorderSize(Short_t bordersize) overrideDefinition TPad.h:326; TPad::SetGridvoid SetGrid(Int_t valuex=1, Int_t valuey=1) overrideDefinition TPad.h:335; TPad::Rangevoid Range(Double_t x1, Double_t y1, Double_t x2, Double_t y2) overrideSet world coordinate system for the pad.Definition TPad.cxx:5331; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLabel.cxx:88; TTextBase class for several text objects.Definition TText.h:22; f1TF1 * f1Definition legend1.C:11; AuthorRene Brun ; Definition in file first.C. tutorialsgraphicsfirst.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/first_8C.html:2959,Guid,Guide,2959,doc/master/first_8C.html,https://root.cern,https://root.cern/doc/master/first_8C.html,1,['Guid'],['Guide']
Usability,";; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; a[i] = new TTrack(x,y,z,...);. }. a.Delete();; }. One better uses a TClonesArray which reduces the number of; new/delete calls to only O(10000):. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; new(a[i]) TTrack(x,y,z,...);. }. a.Delete(); // or a.Clear() or a.Clear(""C""); }. To reduce the number of call to the constructor (especially useful; if the user class requires memory allocation), the object can be; added (and constructed when needed) using ConstructedAt which only; calls the constructor once per slot. TClonesArray a(""TTrack"", 10000);; while (TEvent *ev = (TEvent *)next()) { // O(100000) events; for (int i = 0; i < ev->Ntracks; i++) { // O(10000) tracks; TTrack *track = (TTrack*)a.ConstructedAt(i);; track->Set(x,y,z,....);. }. a.Clear(); // or a.Clear(""C"");; }. Note: the only supported way to add objects to a TClonesArray is; via the new with placement method or the ConstructedAt method.; The other Add() methods ofTObjArray and its base classes are not; allowed. Considering that a new/delete costs about 70 mus on a 300 MHz HP,; O(10^9) new/deletes will save about 19 hours. NOTE 1. C/C++ offers the possibility of allocating and deleting memory.; Forgetting to delete allocated memory is a programming error called a; ""memory leak"", i.e. the memory of your process grows and eventually; your program crashes. Even if you *always* delete the allocated; memory, the recovered space may not be efficiently reused. The; process knows that there are portions of free memory, but when you; allocate it again, a fresh piece of memory is grabbed. Your program; is free from semantic errors, but the total memory of your process; still grows, because your program's memory is full of ""holes"" which; reduce the efficiency of memory access; this is called ""me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TClonesArray.html:1680,Clear,Clear,1680,root/html532/TClonesArray.html,https://root.cern,https://root.cern/root/html532/TClonesArray.html,4,['Clear'],['Clear']
Usability,";; }; ; //write a Tree; TFile *hfile = new TFile(""clonesA_Event.root"",""RECREATE"",""Test TClonesArray"");; TTree *tree = new TTree(""clonesA_Event"",""An example of a ROOT tree"");; TUsrSevtData1 *event1 = new TUsrSevtData1();; TUsrSevtData2 *event2 = new TUsrSevtData2();; tree->Branch(""top1"",""TUsrSevtData1"",&event1,8000,99);; tree->Branch(""top2"",""TUsrSevtData2"",&event2,8000,99);; for (Int_t ev = 0; ev < 10; ev++) {; cout << ""event "" << ev << endl;; event1->SetEvent(ev);; event2->SetEvent(ev);; tree->Fill();; if (ev <3) tree->Show(ev);; }; tree->Write();; tree->Print();; delete hfile;; }; ; void clonesA_Event_r(); {; //read the Tree; TFile * hfile = new TFile(""clonesA_Event.root"");; TTree *tree = (TTree*)hfile->Get(""clonesA_Event"");; ; TUsrSevtData1 * event1 = 0;; TUsrSevtData2 * event2 = 0;; tree->SetBranchAddress(""top1"",&event1);; tree->SetBranchAddress(""top2"",&event2);; for (Int_t ev = 0; ev < 8; ev++) {; tree->Show(ev);; cout << ""Pileup event1: "" << event1->GetPileup() << endl;; cout << ""Pileup event2: "" << event2->GetPileup() << endl;; event1->Clear();; event2->Clear();; // gObjectTable->Print(); // detect possible memory leaks; }; delete hfile;; }; ; void clonesA_Event(bool /*secondrun*/) {; // Embedding this load inside the first run of the script is not yet; // supported in v6; // gROOT->ProcessLine("".L clonesA_Event.cxx+""); // compile shared lib; clonesA_Event_w(); // write the tree; clonesA_Event_r(); // read back the tree; }; ; #endif; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; gROOT#define gROOTDefinition TROOT.h:406; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TDirectoryFile::GetTObject * Get(const char *namecycle) overrideReturn pointer to object identified by namecycle.Definition TDirectoryFile.cxx:937; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TMrbSubevent_Caen::Clearvoid Clear(Option_t *="""")Definition clonesA_Ev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/clonesA__Event_8C.html:2244,Clear,Clear,2244,doc/master/clonesA__Event_8C.html,https://root.cern,https://root.cern/doc/master/clonesA__Event_8C.html,2,['Clear'],['Clear']
Usability,"< ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Inheritance diagram for TRootBrowserHistoryCursor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TRootBrowserHistoryCursor(). TRootBrowserHistoryCursor::TRootBrowserHistoryCursor ; (; TGListTreeItem * ; item). inline . Definition at line 186 of file TRootBrowserLite.cxx. Member Function Documentation. ◆ Print(). void TRootBrowserHistoryCursor::Print ; (; Option_t * ; option); const. inlineoverridevirtual . This method must be overridden when a class wants to print itself. ; Reimplemented from TObject.; Definition at line 187 of file TRootBrowserLite.cxx. Member Data Documentation. ◆ fItem. TGListTreeItem* TRootBrowserHistoryCursor::fItem. Definition at line 184 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TRootBrowserHistoryCursor. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html:10465,Guid,Guide,10465,doc/master/classTRootBrowserHistoryCursor.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistoryCursor.html,1,['Guid'],['Guide']
Usability,"< ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TGridJobStatus ();  ; virtual ~TGridJobStatus ();  ; virtual EGridJobStatus GetStatus () const =0;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGridJobStatus.html:1665,Clear,Clear,1665,doc/master/classTGridJobStatus.html,https://root.cern,https://root.cern/doc/master/classTGridJobStatus.html,1,['Clear'],['Clear']
Usability,"< Architecture_t, Layer_t, DeepNet_t >::GetLayers ; (; ). inline . Definition at line 82 of file Optimizer.h. ◆ GetLearningRate(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::GetLearningRate ; (; ); const. inline . Getters. ; Definition at line 77 of file Optimizer.h. ◆ IncrementGlobalStep(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::IncrementGlobalStep ; (; ). inline . Increments the global step. ; Definition at line 74 of file Optimizer.h. ◆ SetLearningRate(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::SetLearningRate ; (; size_t ; learningRate). inline . Setters. ; Definition at line 86 of file Optimizer.h. ◆ Step(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . auto TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::Step. Performs one step of optimization. ; Definition at line 101 of file Optimizer.h. ◆ UpdateBiases(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . virtual void TMVA::DNN::VOptimizer< Architecture_t, Layer_t, DeepNet_t >::UpdateBiases ; (; size_t ; layerIndex, . std::vector< Matrix_t > & ; biases, . const std::vector< Matrix_t > & ; biasGradients . ). protectedpure virtual . Update the biases, given the current bias gradients. ; Implemented in TMVA::DNN::TAdadelta< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdagrad< Architecture_t, Layer_t, DeepNet_t >, TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >, TMVA:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html:5411,learn,learningRate,5411,doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1VOptimizer.html,1,['learn'],['learningRate']
Usability,"< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink, const RNTupleWriteOptions &options)Create a writer, potentially wrapping the sink in a RPageSinkBuf.Definition RNTupleWriter.cxx:58; ROOT::Experimental::RNTupleWriter::CommitClusterGroupvoid CommitClusterGroup()Definition RNTupleWriter.cxx:102; ROOT::Experimental::RNTupleWriter::fMetricsDetail::RNTupleMetrics fMetricsDefinition RNTupleWriter.hxx:70; ROOT::Experimental::RNTupleWriter::~RNTupleWriter~RNTupleWriter()Definition RNTupleWriter.cxx:47; ROOT::Experimental::RNTupleWriter::Recreatestatic std::unique_ptr< RNTupleWriter > Recreate(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, std::string_view storage, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:71; ROOT::Experimental::RNTupleWriter::fFillContextRNTupleFillContext fFillContextDefinition RNTupleWriter.hxx:69; ROOT::Experimental::RNTupleWriter::Appendstatic std::unique_ptr< RNTupleWriter > Append(std::unique_ptr< RNTupleModel > model, std::string_view ntupleName, TFile &file, const RNTupleWriteOptions &options=RNTupleWriteOptions())Throws an exception if the model is null.Definition RNTupleWriter.cxx:95; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; ROOT::Experimental::Internal::CreateRNTupleWriterstd::unique_ptr< RNTupleWriter > CreateRNTupleWriter(std::unique_ptr< RNTupleModel > model, std::unique_ptr< Internal::RPageSink > sink)Definition RNTupleWriter.cxx:111; ROOT::Experimental::NTupleLogRLogChannel & NTupleLog()Log channel for RNTuple diagnostics.Definition RNTupleUtil.cxx:24; ROOT::IsImplicitMTEnabledBool_t IsImplicitMTEnabled()Returns true if the implicit multi-threading in ROOT is enabled.Definition TROOT.cxx:570. treentuplev7srcRNTupleWriter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html:9761,Guid,Guide,9761,doc/master/RNTupleWriter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RNTupleWriter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > asin (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > acos (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > atan (const RVec< T > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const T0 &x, const RVec< T1 > &v);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const RVec< T0 > &v, const T1 &y);  ; template<typename T0 , typename T1 > ; RVec< PromoteTypes< T0, T1 > > atan2 (const RVec< T0 > &v0, const RVec< T1 > &v1);  ; template<typename T > ; RVec< PromoteType< T > > sinh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > cosh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > tanh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > asinh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > acosh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > atanh (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > floor (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > ceil (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > trunc (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > round (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > lround (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > llround (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > erf (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > erfc (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > lgamma (const RVec< T > &v);  ; template<typename T > ; RVec< PromoteType< T > > tgamma (const RVec< T > &v);  . ROOTVecOps. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html:25794,Guid,Guide,25794,doc/master/namespaceROOT_1_1VecOps.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1VecOps.html,1,['Guid'],['Guide']
Usability,"< std::endl;; 2678 out << ""{"" << std::endl;; 2679 out << ""//=== Macro generated by ROOT version "" << gROOT->GetVersion() << "" : "" << t.AsString() << std::endl;; 2680 out << ""//=== Attributes for "" << GetTitle() << "" geometry"" << std::endl;; 2681 out << ""//===== <run this macro AFTER loading the geometry in memory>"" << std::endl;; 2682 // save current top volume; 2683 out << "" TGeoVolume *top = gGeoManager->GetVolume(\"""" << fTopVolume->GetName() << ""\"");"" << std::endl;; 2684 out << "" TGeoVolume *vol = 0;"" << std::endl;; 2685 out << "" TGeoNode *node = 0;"" << std::endl;; 2686 out << "" // clear all volume attributes and get painter"" << std::endl;; 2687 out << "" gGeoManager->ClearAttributes();"" << std::endl;; 2688 out << "" gGeoManager->GetGeomPainter();"" << std::endl;; 2689 out << "" // set visualization modes and bomb factors"" << std::endl;; 2690 out << "" gGeoManager->SetVisOption("" << GetVisOption() << "");"" << std::endl;; 2691 out << "" gGeoManager->SetVisLevel("" << GetVisLevel() << "");"" << std::endl;; 2692 out << "" gGeoManager->SetExplodedView("" << GetBombMode() << "");"" << std::endl;; 2693 Double_t bombx, bomby, bombz, bombr;; 2694 GetBombFactors(bombx, bomby, bombz, bombr);; 2695 out << "" gGeoManager->SetBombFactors("" << bombx << "","" << bomby << "","" << bombz << "","" << bombr << "");""; 2696 << std::endl;; 2697 out << "" // iterate volumes container and set new attributes"" << std::endl;; 2698 // out << "" TIter next(gGeoManager->GetListOfVolumes());""<<std::endl;; 2699 TGeoVolume *vol = nullptr;; 2700 fTopNode->SaveAttributes(out);; 2701 ; 2702 TIter next(fVolumes);; 2703 while ((vol = (TGeoVolume *)next())) {; 2704 vol->SetVisStreamed(kFALSE);; 2705 }; 2706 out << "" // draw top volume with new settings"" << std::endl;; 2707 out << "" top->Draw();"" << std::endl;; 2708 out << "" gPad->x3d();"" << std::endl;; 2709 out << ""}"" << std::endl;; 2710 out.close();; 2711}; 2712 ; 2713////////////////////////////////////////////////////////////////////////////////; 2714/// Returns the deepe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8cxx_source.html:94968,clear,clear,94968,doc/master/TGeoManager_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8cxx_source.html,2,"['Clear', 'clear']","['ClearAttributes', 'clear']"
Usability,"</a>; 57\endhtmlonly; 58 ; 59## For the impatient user; 60You can directly see RDataFrame in action in our [tutorials](https://root.cern/doc/master/group__tutorial__dataframe.html), in C++ or Python.; 61 ; 62## Table of Contents; 63- [Cheat sheet](\ref cheatsheet); 64- [Introduction](\ref introduction); 65- [Crash course](\ref crash-course); 66- [Working with collections](\ref collections); 67- [Transformations: manipulating data](\ref transformations); 68- [Actions: getting results](\ref actions); 69- [Distributed execution in Python](\ref distrdf); 70- [Performance tips and parallel execution](\ref parallel-execution); 71- [More features](\ref more-features); 72 - [Systematic variations](\ref systematics); 73 - [RDataFrame objects as function arguments and return values](\ref rnode); 74 - [Storing RDataFrame objects in collections](\ref RDFCollections); 75 - [Executing callbacks every N events](\ref callbacks); 76 - [Default column lists](\ref default-branches); 77 - [Special helper columns: `rdfentry_` and `rdfslot_`](\ref helper-cols); 78 - [Just-in-time compilation: column type inference and explicit declaration of column types](\ref jitting); 79 - [User-defined custom actions](\ref generic-actions); 80 - [Dataset joins with friend trees](\ref friends); 81 - [Reading data formats other than ROOT trees](\ref other-file-formats); 82 - [Computation graphs (storing and reusing sets of transformations)](\ref callgraphs); 83 - [Visualizing the computation graph](\ref representgraph); 84 - [Activating RDataFrame execution logs](\ref rdf-logging); 85 - [Creating an RDataFrame from a dataset specification file](\ref rdf-from-spec); 86 - [Adding a progress bar](\ref progressbar); 87- [Efficient analysis in Python](\ref python); 88- <a class=""el"" href=""classROOT_1_1RDataFrame.html#reference"" onclick=""javascript:toggleInherit('pub_methods_classROOT_1_1RDF_1_1RInterface')"">Class reference</a>; 89 ; 90\anchor cheatsheet; 91## Cheat sheet; 92These are the operations which can",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RDataFrame_8cxx_source.html:4253,progress bar,progress bar,4253,doc/v632/RDataFrame_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RDataFrame_8cxx_source.html,1,['progress bar'],['progress bar']
Usability,"<< std::endl;; 3586 }; 3587 ; 3588 if (maxPerNode < 0); 3589 return;; 3590 ; 3591 for (auto const &item : evalErrorData().errorList) {; 3592 if (maxPerNode == 0) {; 3593 ; 3594 // Only print node name with total number of errors; 3595 os << item.second.first;; 3596 // item.first->printStream(os,kName|kClassName|kArgs,kInline) ;; 3597 os << "" has "" << item.second.second.size() << "" errors"" << std::endl;; 3598 ; 3599 } else {; 3600 ; 3601 // Print node name and details of 'maxPerNode' errors; 3602 os << item.second.first << std::endl;; 3603 // item.first->printStream(os,kName|kClassName|kArgs,kSingleLine) ;; 3604 ; 3605 Int_t i(0);; 3606 for (auto const &item2 : item.second.second) {; 3607 os << "" "" << item2._msg << "" @ "" << item2._srvval << std::endl;; 3608 if (i > maxPerNode) {; 3609 os << "" ... (remaining "" << item.second.second.size() - maxPerNode << "" messages suppressed)""; 3610 << std::endl;; 3611 break;; 3612 }; 3613 i++;; 3614 }; 3615 }; 3616 }; 3617}; 3618 ; 3619 ; 3620 ; 3621////////////////////////////////////////////////////////////////////////////////; 3622/// Return the number of logged evaluation errors since the last clearing.; 3623 ; 3624Int_t RooAbsReal::numEvalErrors(); 3625{; 3626 auto &evalErrors = evalErrorData();; 3627 if (evalErrors.mode == CountErrors) {; 3628 return evalErrors.count;; 3629 }; 3630 ; 3631 Int_t ntot(0);; 3632 for (auto const &elem : evalErrors.errorList) {; 3633 ntot += elem.second.second.size();; 3634 }; 3635 return ntot;; 3636}; 3637 ; 3638 ; 3639 ; 3640////////////////////////////////////////////////////////////////////////////////; 3641/// Fix the interpretation of the coefficient of any RooAddPdf component in; 3642/// the expression tree headed by this object to the given set of observables.; 3643///; 3644/// If the force flag is false, the normalization choice is only fixed for those; 3645/// RooAddPdf components that have the default 'automatic' interpretation of; 3646/// coefficients (i.e. the interpretation is defined",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:154627,clear,clearing,154627,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clearing']
Usability,"<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id: TVectorT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-07-04 15:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TVectorT_float_.html:18387,Clear,Clear,18387,root/html530/TVectorT_float_.html,https://root.cern,https://root.cern/root/html530/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"<Element> Use(Int_t n, float* data); { return Use(0,n-1,data); }. template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(Int_t n, const float* data) const; { return Use(0,n-1,data); }. template<class Element> inline TVectorT<Element> &TVectorT<Element> Use(TVectorT<float>& v). template<class Element> inline const TVectorT<Element> &TVectorT<Element> Use(const TVectorT<float>& v) const. template<class Element> inline TVectorT<Element> TVectorT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Option_t* option = ""S"") const. template<class Element> inline const Element &TVectorT<Element> operator()(Int_t ind) const; Access a vector element. template<class Element> inline Element &TVectorT<Element> operator()(Int_t ind); Access a vector element. Int_t GetLwb() const; { return fRowLwb; }. Int_t GetUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetNoElements() const; { return fNrows; }. Element * GetMatrixArray(); { return fElements; }. const Element * GetMatrixArray() const; { return fElements; }. void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. void SetElements(const float* elements). TVectorT<Element> & Shift(Int_t row_shift); { fRowLwb += row_shift; return *this; }. TVectorT<Element> & ResizeTo(Int_t lwb, Int_t upb). TVectorT<Element> & ResizeTo(Int_t n); { return ResizeTo(0,n-1); }. TVectorT<Element> & Use(Int_t lwb, Int_t upb, float* data). const Element & operator[](Int_t index) const; { return (*this)(index); }. Element & operator[](Int_t index); { return (*this)(index); }. void Clear(Option_t* = """"). » Last changed: root/matrix:$Id: TVectorT.h 39086 2011-05-04 09:36:17Z moneta $ » Last generated: 2011-11-03 20:24; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TVectorT_float_.html:18387,Clear,Clear,18387,root/html532/TVectorT_float_.html,https://root.cern,https://root.cern/root/html532/TVectorT_float_.html,1,['Clear'],['Clear']
Usability,"<memory>; #include <vector>. Include dependency graph for RNTupleImporter.hxx:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  ROOT::Experimental::RNTupleImporter::RCStringTransformation;  Transform a NULL terminated C string branch into an std::string field. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportBranch;  ; struct  ROOT::Experimental::RNTupleImporter::RImportField;  ; struct  ROOT::Experimental::RNTupleImporter::RImportGuard;  When the schema is set up and the import started, it needs to be reset before the next Import() call can start. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportLeafCountCollection;  Leaf count arrays require special treatment. More...;  ; struct  ROOT::Experimental::RNTupleImporter::RImportTransformation;  Base class to perform data transformations from TTree branches to RNTuple fields if necessary. More...;  ; class  ROOT::Experimental::RNTupleImporter;  Converts a TTree into an RNTuple. More...;  ; class  ROOT::Experimental::RNTupleImporter::RProgressCallback;  Used to report every ~100 MB (compressed), and at the end about the status of the import. More...;  . Namespaces; namespace  ROOT;  tbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tbb::task_arena without forward declaring tbb::interface7 ;  ; namespace  ROOT::Experimental;  . Detailed Description; AuthorJakob Blomer jblom.nosp@m.er@c.nosp@m.ern.c.nosp@m.h ; Date2022-11-22 ; WarningThis is part of the ROOT 7 prototype! It will change without notice. It might trigger earthquakes. Feedback is welcome! ; Definition in file RNTupleImporter.hxx. treentupleutilv7incROOTRNTupleImporter.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RNTupleImporter_8hxx.html:2366,Feedback,Feedback,2366,doc/master/RNTupleImporter_8hxx.html,https://root.cern,https://root.cern/doc/master/RNTupleImporter_8hxx.html,2,"['Feedback', 'Guid']","['Feedback', 'Guide']"
Usability,"<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooMultiVarGaussian.html:3033,Clear,Clear,3033,root/html528/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html528/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; static voidblockDecompose(const TMatrixD& input, const vector<int>& map1, const vector<int>& map2, TMatrixDSym& S11, TMatrixD& S12, TMatrixD& S21, TMatrixDSym& S22); voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); const TMatrixDSym&covarianceMatrix() const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooMultiVarGaussian.html:3033,Clear,Clear,3033,root/html530/RooMultiVarGaussian.html,https://root.cern,https://root.cern/root/html530/RooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"<string>&RooAbsArg::attributes() const; virtual list<Double_t>*binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooProdPdf.html:3233,clear,clearEvalErrorLog,3233,root/html602/RooProdPdf.html,https://root.cern,https://root.cern/root/html602/RooProdPdf.html,2,['clear'],['clearEvalErrorLog']
Usability,"= """") const; -*-*-*-*-*Copy this histogram and Draw in the current pad*-*-*-*-*-*-*-*. Once the histogram is drawn into the pad, any further modification; using graphics input will be made on the copy of the histogram,; and not to the original object. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1 * DrawNormalized(Option_t* option = """", Double_t norm = 1) const; Draw a normalized copy of this histogram. A clone of this histogram is normalized to norm and drawn with option.; A pointer to the normalized histogram is returned.; The contents of the histogram copy are scaled such that the new; sum of weights (excluding under and overflow) is equal to norm.; Note that the returned normalized histogram is not added to the list; of histograms in the current directory in memory.; It is the user's responsability to delete this histogram.; The kCanDelete bit is set for the returned object. If a pad containing; this copy is cleared, the histogram will be automatically deleted. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void DrawPanel(); -*-*-*-*-*Display a panel with all histogram drawing options*-*-*-*-*-*. See class TDrawPanelHist for example. void Eval(TF1* f1, Option_t* option = """"); -*-*-*Evaluate function f1 at the center of bins of this histogram-*-*-*-*. If option ""R"" is specified, the function is evaluated only; for the bins included in the function range.; If option ""A"" is specified, the value of the function is added to the; existing bin contents; If option ""S"" is specified, the value of the function is used to; generate a value, distributed according to the Poisson; distribution, with f1 as the mean. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void ExecuteEvent(Int_t event, Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Execute action corresponding to one event*-*-*-*. This member function is called when a histogram ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:67039,clear,cleared,67039,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['clear'],['cleared']
Usability,"= """") const; -*-*-*-*-*Copy this histogram and Draw in the current pad*-*-*-*-*-*-*-*. Once the histogram is drawn into the pad, any further modification; using graphics input will be made on the copy of the histogram,; and not to the original object. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. TH1 * DrawNormalized(Option_t* option = """", Double_t norm = 1) const; Draw a normalized copy of this histogram. A clone of this histogram is normalized to norm and drawn with option.; A pointer to the normalized histogram is returned.; The contents of the histogram copy are scaled such that the new; sum of weights (excluding under and overflow) is equal to norm.; Note that the returned normalized histogram is not added to the list; of histograms in the current directory in memory.; It is the user's responsability to delete this histogram.; The kCanDelete bit is set for the returned object. If a pad containing; this copy is cleared, the histogram will be automatically deleted.; See also remark about calling Sumw2 before scaling a histogram to get; a correct computation of the error bars. See Draw for the list of options. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void DrawPanel(); -*-*-*-*-*Display a panel with all histogram drawing options*-*-*-*-*-*. See class TDrawPanelHist for example. void Eval(TF1* f1, Option_t* option = """"); -*-*-*Evaluate function f1 at the center of bins of this histogram-*-*-*-*. If option ""R"" is specified, the function is evaluated only; for the bins included in the function range.; If option ""A"" is specified, the value of the function is added to the; existing bin contents; If option ""S"" is specified, the value of the function is used to; generate a value, distributed according to the Poisson; distribution, with f1 as the mean. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. void ExecuteEvent(Int_t event, Int_t px, Int_t py); -*-",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TH1.html:62062,clear,cleared,62062,root/html528/TH1.html,https://root.cern,https://root.cern/root/html528/TH1.html,3,['clear'],['cleared']
Usability,"= 'i') resize = true;; 6374 ; 6375 TPad *is_pad = dynamic_cast<TPad *>( object );; 6376 ; 6377 TContext ctxt(kTRUE);; 6378 ; 6379 if (is_pad && is_pad->GetMother()); 6380 is_pad->GetMother()->cd();; 6381 ; 6382 static TPad *tmpGuideLinePad = nullptr;; 6383 ; 6384 //delete all existing Guidelines and create new invisible pad; 6385 if (tmpGuideLinePad) {; 6386 ctxt.PadDeleted(tmpGuideLinePad);; 6387 auto guidePadClicked = (object == tmpGuideLinePad); // in case of funny button click combination.; 6388 tmpGuideLinePad->Delete();; 6389 tmpGuideLinePad = nullptr;; 6390 if (guidePadClicked) return;; 6391 }; 6392 ; 6393 // Get Primitives; 6394 prims = gPad->GetListOfPrimitives();; 6395 n = TMath::Min(15,prims->GetSize());; 6396 Int_t lineColor = TColor::GetColor(239, 202, 0);; 6397 ; 6398 TAttBBox2D *cur = dynamic_cast<TAttBBox2D *>( object );; 6399 if (cur) {; 6400 //create invisible TPad above gPad; 6401 if (!tmpGuideLinePad){; 6402 tmpGuideLinePad = new TPad(""tmpGuideLinePad"", ""tmpGuideLinePad"", 0, 0, 1, 1);; 6403 Double_t x1, y1, x2, y2;; 6404 gPad->GetRange(x1, y1, x2, y2);; 6405 tmpGuideLinePad->Range(x1, y1, x2, y2);; 6406 tmpGuideLinePad->SetFillStyle(0);; 6407 tmpGuideLinePad->SetFillColor(0);; 6408 tmpGuideLinePad->Draw();; 6409 tmpGuideLinePad->cd();; 6410 gPad->GetRange(x1, y1, x2, y2);; 6411 }; 6412 if (cling && !log) threshold = 7;; 6413 else threshold = 1;; 6414 ; 6415 Rectangle_t BBox = cur->GetBBox();; 6416 TPoint center = cur->GetBBoxCenter();; 6417 ; 6418 otherDist.clear();; 6419 curDist.clear();; 6420 ; 6421 switch (event) {; 6422 ; 6423 case kButton1Down:; 6424 case kButton1Motion:; 6425 MX = gPad->GetX1() + 0.5 * (gPad->GetX2()-gPad->GetX1());; 6426 MY = gPad->GetY1() + 0.5 * (gPad->GetY2()-gPad->GetY1());; 6427 pMX = gPad->XtoPixel(MX);; 6428 pMY = gPad->YtoPixel(MY);; 6429 // Middlelines; 6430 if (TMath::Abs(pMX-center.GetX())<threshold) {; 6431 if (cling && (!resize)) {; 6432 cur->SetBBoxCenterX(pMX);; 6433 center = cur->GetBBoxCenter();; 6434 BBox",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPad_8cxx_source.html:210518,guid,guidePadClicked,210518,doc/master/TPad_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPad_8cxx_source.html,1,['guid'],['guidePadClicked']
Usability,"= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMethod.html:4511,Clear,Clear,4511,doc/master/classTMethod.html,https://root.cern,https://root.cern/doc/master/classTMethod.html,1,['Clear'],['Clear']
Usability,"= 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloneBrowser(); virtual voidCloseTab(Int_t id); virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TRootBrowser.html:2008,Clear,Clear,2008,root/html534/TRootBrowser.html,https://root.cern,https://root.cern/root/html534/TRootBrowser.html,3,['Clear'],['Clear']
Usability,"= 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloneBrowser(); voidCloseTab(Int_t id); virtual voidCloseTabs(); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidT",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TRootBrowser.html:2008,Clear,Clear,2008,root/html530/TRootBrowser.html,https://root.cern,https://root.cern/root/html530/TRootBrowser.html,2,['Clear'],['Clear']
Usability,"= 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBrowseObj(TObject* obj)SIGNAL ; TBrowser*TBrowserImp::Browser() const; virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); virtual voidChecked(TObject* obj, Bool_t check)SIGNAL ; virtual voidTBrowserImp::CheckObjectItem(TObject*, Bool_t = kFALSE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidCloneBrowser(); voidCloseTab(Int_t id); virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; voidCreateBrowser(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindow",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TRootBrowser.html:2008,Clear,Clear,2008,root/html528/TRootBrowser.html,https://root.cern,https://root.cern/root/html528/TRootBrowser.html,1,['Clear'],['Clear']
Usability,"= 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/Roo2DKeysPdf.html:2920,clear,clearValueAndShapeDirty,2920,root/html534/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html534/Roo2DKeysPdf.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"= 0, TGHotString* s = 0, Int_t id = -1, UInt_t options = 0); virtual~TGShutterItem(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconnect(const char* signal = 0, void* receive",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGShutterItem.html:1596,Clear,Clear,1596,root/html528/TGShutterItem.html,https://root.cern,https://root.cern/root/html528/TGShutterItem.html,4,['Clear'],['Clear']
Usability,"= 0;  ; static const TGGC * fgWhiteGC = nullptr;  ; static Pixel_t fgWhitePixel = 0;  ;  Static Protected Attributes inherited from TGWindow; static Int_t fgCounter = 0;  counter of created windows in SavePrimitive ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TGDockableFrame.h>. Inheritance diagram for TGUndockedFrame:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TGUndockedFrame() [1/2]. TGUndockedFrame::TGUndockedFrame ; (; const TGUndockedFrame & ; ). privatedelete . ◆ TGUndockedFrame() [2/2]. TGUndockedFrame::TGUndockedFrame ; (; const TGWindow * ; p = nullptr, . TGDockableFrame * ; dockable = nullptr . ). Create the undocked (transient) frame. ; Definition at line 176 of file TGDockableFrame.cxx. ◆ ~TGUndockedFrame(). TGUndockedFrame::~TGUndockedFrame ; (; ). override . Delete undocked frame. Puts back dockable frame in its original container. ; Definition at line 193 of file TGDockableFrame.cxx. Member Function Documentation. ◆ Class(). static TClass * TGUndockedFrame::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGUndockedFrame::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGUndockedFrame::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file TGDockableFrame.h. ◆ CloseWindow(). void TGUndockedFrame::CloseWindow ; (; ). overridevirtual . Close undocked frame (called via WM close button). ; Reimplemented from TGMainFrame.; Definition at line 213 of file TGDockableFrame.cxx. ◆ DeclFileName(). static const char * TGUndockedFrame::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 78 of file TGDockableFrame.h. ◆ FixSize(). void TGUndockedFrame:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGUndockedFrame.html:36852,undo,undocked,36852,doc/master/classTGUndockedFrame.html,https://root.cern,https://root.cern/doc/master/classTGUndockedFrame.html,1,['undo'],['undocked']
Usability,"= 0x10000; , kRefreshLs = 0x20000; , kList = 0x40000; , kAllFiles = 0x80000; , ;   kStagedFiles = 0x100000; , kNoStagedCheck = 0x200000. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TDataSetManager (const char *group=0, const char *user=0, const char *options=0);  Main constructor. ;  ;  ~TDataSetManager () override;  Destructor. ;  ; virtual Int_t ClearCache (const char *uri);  Clear cached information matching uri. ;  ; virtual Bool_t ExistsDataSet (const char *uri);  Checks if the indicated dataset exits. ;  ; virtual Long64_t GetAvgFileSize () const;  ; virtual TFileCollection * GetDataSet (const char *uri, const char *server=0);  Utility function used in various methods for user dataset upload. ;  ; virtual TMap * GetDataSets (const char *uri, UInt_t=TDataSetManager::kExport);  Returns all datasets for the <group> and <user> specified by <uri>. ;  ; virtual Long64_t GetGroupQuota (const char *group);  returns the quota a group is allowed to have ;  ; virtual TMap * GetGroupQuotaMap ();  ; virtual Long64_t GetGroupUsed (const char *group);  Returns the used space of that group. ;  ; virtual TMap * GetSubDataSets (const char *uri, const char *excludeservers);  Partition dataset 'ds' accordingly to the servers. ;  ; TClass * IsA () const override;  ; virtual void MonitorUsedSpace (TVirtualMonitoringWriter *monitoring);  Log info to the monitoring serve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDataSetManager.html:2150,Clear,ClearCache,2150,doc/master/classTDataSetManager.html,https://root.cern,https://root.cern/doc/master/classTDataSetManager.html,2,['Clear'],"['Clear', 'ClearCache']"
Usability,"= 100;; const int maxepochs = 20;; ; int nTotEvts = nevts; // total events to be generated for signal or background; ; bool useKeras = true;; ; ; bool useTMVA_RNN = true;; bool useTMVA_DNN = true;; bool useTMVA_BDT = false;; ; std::vector<std::string> rnn_types = {""RNN"", ""LSTM"", ""GRU""};; std::vector<bool> use_rnn_type = {1, 1, 1};; if (use_type >=0 && use_type < 3) {; use_rnn_type = {0,0,0};; use_rnn_type[use_type] = 1;; }; bool useGPU = true; // use GPU for TMVA if available; ; #ifndef R__HAS_TMVAGPU; useGPU = false;; #ifndef R__HAS_TMVACPU; Warning(""TMVA_RNN_Classification"", ""TMVA is not build with GPU or CPU multi-thread support. Cannot use TMVA Deep Learning for RNN"");; useTMVA_RNN = false;; #endif; #endif; ; ; TString archString = (useGPU) ? ""GPU"" : ""CPU"";; ; bool writeOutputFile = true;; ; ; ; const char *rnn_type = ""RNN"";; ; #ifdef R__HAS_PYMVA; TMVA::PyMethodBase::PyInitialize();; #else; useKeras = false;; #endif; ; #ifdef R__USE_IMT; int num_threads = 4; // use max 4 threads; // switch off MT in OpenBLAS to avoid conflict with tbb; gSystem->Setenv(""OMP_NUM_THREADS"", ""1"");; ; // do enable MT running; if (num_threads >= 0) {; ROOT::EnableImplicitMT(num_threads);; }; #endif; ; TMVA::Config::Instance();; ; std::cout << ""Running with nthreads = "" << ROOT::GetThreadPoolSize() << std::endl;; ; TString inputFileName = ""time_data_t10_d30.root"";; ; bool fileExist = !gSystem->AccessPathName(inputFileName);; ; // if file does not exists create it; if (!fileExist) {; MakeTimeData(nTotEvts,ntime, ninput);; }; ; ; auto inputFile = TFile::Open(inputFileName);; if (!inputFile) {; Error(""TMVA_RNN_Classification"", ""Error opening input file %s - exit"", inputFileName.Data());; return;; }; ; ; std::cout << ""--- RNNClassification : Using input file: "" << inputFile->GetName() << std::endl;; ; // Create a ROOT output file where TMVA will store ntuples, histograms, etc.; TString outfileName(TString::Format(""data_RNN_%s.root"", archString.Data()));; TFile *outputFile = nullptr;; if (w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html:60885,Learn,Learning,60885,doc/master/TMVA__RNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__RNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"= 2); RooCacheManager<RooAbsCacheElement>(const RooCacheManager<RooAbsCacheElement>& other, RooAbsArg* owner = 0); Int_tsetObj(const RooArgSet* nset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Int_tsetObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidsterilize(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidwireCache(). Data Members; protected:. Int_t_lastIndex! Last slot accessed; Int_t_maxSize! Maximum size; vector<RooNormSetCache>_nsetCache! Normalization/Integration set manager; vector<RooAbsCacheElement*>_object! Payload; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_t_size! Actual use; Bool_t_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void RooCacheManager<T> reset(); Clear the cache. void RooCacheManager<T> sterilize(); Clear the cache payload but retain slot mapping w.r.t to; normalization and integration sets. Int_t RooCacheManager<T> setObj(const RooArgSet* nset, const RooArgSet* iset, RooAbsCacheElement* obj, const TNamed* isetRangeName = 0); Insert payload object 'obj' in cache indexed on nset,iset and isetRangeName. T* RooCacheManager<T> getObj(const RooArgSet* nset, const RooArgSet* iset, Int_t* sterileIndex = 0, const TNamed* isetRangeName = 0); Retrieve payload object indexed on nset,uset amd isetRangeName; If sterileIdx is not null, it is set to the index of the sterile; slot in cacse such a slot is recycled. T* RooCacheManager<T> getObjByIndex(Int_t index) const; Retrieve payload object by slot index. const RooNameSet* RooCacheManager<T> nameSet1ByIndex(Int_t index) const; Retrieve RooNameSet associated with slot at given index. const RooNameSet* RooCacheManager<T> nameSet2ByIndex(Int_t index) const; Retrieve RooName",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html:3522,Clear,Clear,3522,root/html602/RooCacheManager_RooAbsCacheElement_.html,https://root.cern,https://root.cern/root/html602/RooCacheManager_RooAbsCacheElement_.html,2,['Clear'],['Clear']
Usability,"= 230, UInt_t h = 150); virtual~TGRecorder(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidTGMainFrame::CloseWindow()SIGNAL ; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGRecorder.html:1401,Clear,Clear,1401,root/html528/TGRecorder.html,https://root.cern,https://root.cern/root/html528/TGRecorder.html,4,['Clear'],['Clear']
Usability,"= false); const. Returns color value in hex format like ""66FF66"" - without any prefix Alpha parameter can be optionally included. ; Definition at line 275 of file RColor.cxx. ◆ AsRGBA(). std::vector< uint8_t > RColor::AsRGBA ; (; ); const. Returns color as RGBA array, trying also convert color name into RGBA value. ; Returns color as RGBA array, includes optionally alpha parameter 0..255. ; Definition at line 197 of file RColor.cxx. ◆ AsString(). const std::string & ROOT::Experimental::RColor::AsString ; (; ); const. inline . Returns color as it stored as string. ; Definition at line 157 of file RColor.hxx. ◆ AsSVG(). std::string RColor::AsSVG ; (; ); const. Returns color value as it will be used in SVG drawing It either include hex format #66FF66 or just plain SVG name. ; Definition at line 291 of file RColor.cxx. ◆ AutoColor(). const RColor & RColor::AutoColor ; (; ). static . Set the color value from the Hue, Light, Saturation (HLS). ; Definition at line 383 of file RColor.cxx. ◆ Clear(). void ROOT::Experimental::RColor::Clear ; (; ). inline . Definition at line 171 of file RColor.hxx. ◆ ConvertNameToRGB(). std::vector< uint8_t > RColor::ConvertNameToRGB ; (; const std::string & ; name). staticprivate . Converts string name of color in RGB value - when possible. ; Definition at line 156 of file RColor.cxx. ◆ GetAlpha(). uint8_t ROOT::Experimental::RColor::GetAlpha ; (; ); const. inline . Returns color alpha (opacity) as uint8_t 0..255. ; Definition at line 130 of file RColor.hxx. ◆ GetAlphaFloat(). float ROOT::Experimental::RColor::GetAlphaFloat ; (; ); const. inline . Returns color alpha (opacity) as float from 0..1. ; Definition at line 137 of file RColor.hxx. ◆ GetBlue(). uint8_t ROOT::Experimental::RColor::GetBlue ; (; ); const. inline . Returns blue color component 0..255. ; Definition at line 123 of file RColor.hxx. ◆ GetGreen(). uint8_t ROOT::Experimental::RColor::GetGreen ; (; ); const. inline . Returns green color component 0..255. ; Definition at line 11",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html:8219,Clear,Clear,8219,doc/master/classROOT_1_1Experimental_1_1RColor.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RColor.html,1,['Clear'],['Clear']
Usability,"= j;; 571}; 572 ; 573////////////////////////////////////////////////////////////////////////////////; 574/// Handle idle timeout. When this timer expires the registered idle command; 575/// will be executed by this routine and a signal will be emitted.; 576 ; 577void TApplication::HandleIdleTimer(); 578{; 579 if (!fIdleCommand.IsNull()); 580 ProcessLine(GetIdleCommand());; 581 ; 582 Emit(""HandleIdleTimer()"");; 583}; 584 ; 585////////////////////////////////////////////////////////////////////////////////; 586/// Handle exceptions (kSigBus, kSigSegmentationViolation,; 587/// kSigIllegalInstruction and kSigFloatingException) trapped in TSystem.; 588/// Specific TApplication implementations may want something different here.; 589 ; 590void TApplication::HandleException(Int_t sig); 591{; 592 if (TROOT::Initialized()) {; 593 if (gException) {; 594 gInterpreter->RewindDictionary();; 595 gInterpreter->ClearFileBusy();; 596 }; 597 if (fExitOnException == kExit); 598 gSystem->Exit(128 + sig);; 599 else if (fExitOnException == kAbort); 600 gSystem->Abort();; 601 else; 602 Throw(sig);; 603 }; 604 gSystem->Exit(128 + sig);; 605}; 606 ; 607////////////////////////////////////////////////////////////////////////////////; 608/// Set the exit on exception option. Setting this option determines what; 609/// happens in HandleException() in case an exception (kSigBus,; 610/// kSigSegmentationViolation, kSigIllegalInstruction or kSigFloatingException); 611/// is trapped. Choices are: kDontExit (default), kExit or kAbort.; 612/// Returns the previous value.; 613 ; 614TApplication::EExitOnException TApplication::ExitOnException(TApplication::EExitOnException opt); 615{; 616 EExitOnException old = fExitOnException;; 617 fExitOnException = opt;; 618 return old;; 619}; 620 ; 621/////////////////////////////////////////////////////////////////////////////////; 622/// The function generates and executes a command that loads the Doxygen URL in; 623/// a browser. It works for Mac, Windows and ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TApplication_8cxx_source.html:20356,Clear,ClearFileBusy,20356,doc/master/TApplication_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TApplication_8cxx_source.html,1,['Clear'],['ClearFileBusy']
Usability,"= kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooIntegralMorph.html:6739,clear,clearValueDirty,6739,root/html534/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html534/RooIntegralMorph.html,3,['clear'],['clearValueDirty']
Usability,"= kTRUE, Bool_t shapeProp = kFALSE); Bool_taddThreshold(Double_t upperLimit, const char* catName, Int_t catIdx = -99999); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooThresholdCategory.html:1910,Clear,Clear,1910,root/html602/RooThresholdCategory.html,https://root.cern,https://root.cern/root/html602/RooThresholdCategory.html,2,['Clear'],['Clear']
Usability,"= kTRUE, Int_t id = -1, GContext_t norm = GetDefaultGC()(), FontStruct_t fontstruct = GetDefaultFontStruct(), UInt_t option = kRaisedFrame|kDoubleBorder); virtual~TGSplitButton(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidTGFrame::AddInput(UInt_t emask); virtual voidTGButton::AllowStayDown(Bool_t a); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGWidget::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGFrame::ChangeOptions(UInt_t options); voidTGTextButton::ChangeText(const char* title)MENU ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual voidTGButton::Clicked()SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::Disconne",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGSplitButton.html:4078,Clear,Clear,4078,root/html528/TGSplitButton.html,https://root.cern,https://root.cern/root/html528/TGSplitButton.html,4,['Clear'],['Clear']
Usability,"= max(*(len(a) for a in args)); X = np.zeros((n, len(args))); for i in range(len(args)):; X[:, i] = args[i]; prob = sbi_model.classifier.predict_proba(X)[:, 1]; return prob / (1.0 - prob); ; ; # Create combined variable list for ROOT; combined_vars = ROOT.RooArgList(); for var in x_vars + mu_vars:; combined_vars.add(var); ; # Create a custom likelihood ratio function using the trained classifier; lhr_learned = ROOT.RooFit.bindFunction(""MyBinFunc"", learned_likelihood_ratio, combined_vars); ; # Calculate the 'analytical' likelihood ratio; lhr_calc = ROOT.RooFormulaVar(""lhr_calc"", ""x[0] / x[1]"", [ws[""gauss""], ws[""uniform""]]); ; # Define the 'analytical' negative logarithmic likelihood ratio; nll_gauss = ws[""gauss""].createNLL(ws[""obs_data""]); ; # Create the learned pdf and NLL sum based on the learned likelihood ratio; pdf_learned = ROOT.RooWrapperPdf(""learned_pdf"", ""learned_pdf"", lhr_learned, True); ; nllr_learned = pdf_learned.createNLL(ws[""obs_data""]); ; # Plot the learned and analytical summed negativelogarithmic likelihood; frame1 = mu_vars[0].frame(; Title=""NLL of SBI vs. Morphing;#mu_{1};NLL"",; Range=(mu_observed[0] - 1, mu_observed[0] + 1),; ); nll_gauss.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+1"", Name=""gauss""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""Ignore"") # Silence some warnings; nll_morph.plotOn(frame1, ShiftToZero=True, LineColor=""kP6Blue+2"", Name=""morph""); ROOT.RooAbsReal.setEvalErrorLoggingMode(""PrintErrors""); nllr_learned.plotOn(frame1, LineColor=""kP6Blue"", ShiftToZero=True, Name=""learned""); ; ; # Declare a helper function in ROOT to dereference unique_ptr; ROOT.gInterpreter.Declare(; """"""; RooAbsArg &my_deref(std::unique_ptr<RooAbsArg> const& ptr) { return *ptr; }; """"""; ); ; # Choose normalization set for lhr_calc to plot over; norm_set = ROOT.RooArgSet(x_vars); lhr_calc_final_ptr = ROOT.RooFit.Detail.compileForNormSet(lhr_calc, norm_set); lhr_calc_final = ROOT.my_deref(lhr_calc_final_ptr); lhr_calc_final.recursiveRedirectServers(norm_set)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html:9127,learn,learned,9127,doc/master/rf617__simulation__based__inference__multidimensional_8py.html,https://root.cern,https://root.cern/doc/master/rf617__simulation__based__inference__multidimensional_8py.html,1,['learn'],['learned']
Usability,"= typename std::enable_if<std::is_convertible<; 653 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 654 void append(in_iter in_start, in_iter in_end); 655 {; 656 size_type NumInputs = std::distance(in_start, in_end);; 657 if (NumInputs > this->capacity() - this->size()); 658 this->grow(this->size() + NumInputs);; 659 ; 660 this->uninitialized_copy(in_start, in_end, this->end());; 661 this->set_size(this->size() + NumInputs);; 662 }; 663 ; 664 /// Append \p NumInputs copies of \p Elt to the end.; 665 void append(size_type NumInputs, const T &Elt); 666 {; 667 if (NumInputs > this->capacity() - this->size()); 668 this->grow(this->size() + NumInputs);; 669 ; 670 std::uninitialized_fill_n(this->end(), NumInputs, Elt);; 671 this->set_size(this->size() + NumInputs);; 672 }; 673 ; 674 void append(std::initializer_list<T> IL) { append(IL.begin(), IL.end()); }; 675 ; 676 // from the original LLVM implementation:; 677 // FIXME: Consider assigning over existing elements, rather than clearing &; 678 // re-initializing them - for all assign(...) variants.; 679 ; 680 void assign(size_type NumElts, const T &Elt); 681 {; 682 clear();; 683 if (this->capacity() < NumElts); 684 this->grow(NumElts);; 685 this->set_size(NumElts);; 686 std::uninitialized_fill(this->begin(), this->end(), Elt);; 687 }; 688 ; 689 template <typename in_iter,; 690 typename = typename std::enable_if<std::is_convertible<; 691 typename std::iterator_traits<in_iter>::iterator_category, std::input_iterator_tag>::value>::type>; 692 void assign(in_iter in_start, in_iter in_end); 693 {; 694 clear();; 695 append(in_start, in_end);; 696 }; 697 ; 698 void assign(std::initializer_list<T> IL); 699 {; 700 clear();; 701 append(IL);; 702 }; 703 ; 704 iterator erase(const_iterator CI); 705 {; 706 // Just cast away constness because this is a non-const member function.; 707 iterator I = const_cast<iterator>(CI);; 708 ; 709 if (I < this->begin() || I >= this->end()) {; 710 throw",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RVec_8hxx_source.html:24340,clear,clearing,24340,doc/master/RVec_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RVec_8hxx_source.html,2,['clear'],['clearing']
Usability,"= xaxis->GetBinCenter(binx);; 11725 view->WCtoNDC(xx,u);; 11726 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11727 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11728 rect1[4].SetX(rect1[0].GetX());; 11729 rect1[4].SetY(rect1[0].GetY());; 11730 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 11757 view->WCtoNDC(xx,u);; 11758 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11759 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11760 xx[2] = zaxis->GetXmin();; 11761 view->WCtoNDC(xx,u);; 11762 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11763 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11764 gVirtualX->DrawPolyLine(5,rect2);; 11765 }; 11766 c->Clear();; 11767 c->cd();; 11768 TH2 *hp = (TH2*)h3->Project3D(""yz"");; 11769 xaxis->SetRange(first,last);; 11770 if (hp) {; 11771 hp->SetFillColor(38);; 11772 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYZ of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:428007,ux,uxmin,428007,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"= xaxis->GetBinCenter(binx);; 11795 view->WCtoNDC(xx,u);; 11796 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11797 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11798 rect1[4].SetX(rect1[0].GetX());; 11799 rect1[4].SetY(rect1[0].GetY());; 11800 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 11827 view->WCtoNDC(xx,u);; 11828 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11829 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11830 xx[2] = zaxis->GetXmin();; 11831 view->WCtoNDC(xx,u);; 11832 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11833 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11834 gVirtualX->DrawPolyLine(5,rect2);; 11835 }; 11836 c->Clear();; 11837 c->cd();; 11838 TH2 *hp = (TH2*)h3->Project3D(""zy"");; 11839 xaxis->SetRange(first,last);; 11840 if (hp) {; 11841 hp->SetFillColor(38);; 11842 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZY of binx=%d [x=%.1f..%.f]"", binx,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:430900,ux,uxmin,430900,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"= xmax-xmin;; 436 dy = ymax-ymin;; 437 dxr = dx/(1 - gPad->GetLeftMargin() - gPad->GetRightMargin());; 438 dyr = dy/(1 - gPad->GetBottomMargin() - gPad->GetTopMargin());; 439 ; 440 // Range() could change the size of the pad pixmap and therefore should; 441 // be called before the other paint routines; 442 gPad->Range(xmin - dxr*gPad->GetLeftMargin(),; 443 ymin - dyr*gPad->GetBottomMargin(),; 444 xmax + dxr*gPad->GetRightMargin(),; 445 ymax + dyr*gPad->GetTopMargin());; 446 gPad->RangeAxis(xmin, ymin, xmax, ymax);; 447 ; 448 if (!x.empty() && !y.empty()) {; 449 if (middle) {; 450 for(i=0;i<np;i++) {; 451 fX[i] = gPad->PadtoX(gPad->AbsPixeltoX(x[i]+dpx));; 452 fY[i] = gPad->PadtoY(gPad->AbsPixeltoY(y[i]+dpy));; 453 }; 454 } else {; 455 fX[ipoint] = gPad->PadtoX(gPad->AbsPixeltoX(pxold));; 456 fY[ipoint] = gPad->PadtoY(gPad->AbsPixeltoY(pyold));; 457 }; 458 x.clear();; 459 y.clear();; 460 }; 461 gPad->Modified(kTRUE);; 462 gVirtualX->SetLineColor(-1);; 463 }; 464}; 465 ; 466////////////////////////////////////////////////////////////////////////////////; 467/// List this polyline with its attributes.; 468/// The option string is ignored.; 469 ; 470void TPolyLine::ls(Option_t *) const; 471{; 472 TROOT::IndentLevel();; 473 printf(""TPolyLine N=%d\n"",fN);; 474}; 475 ; 476////////////////////////////////////////////////////////////////////////////////; 477/// Merge polylines in the collection in this polyline; 478 ; 479Int_t TPolyLine::Merge(TCollection *li); 480{; 481 if (!li) return 0;; 482 TIter next(li);; 483 ; 484 //first loop to count the number of entries; 485 TPolyLine *pl;; 486 Int_t npoints = 0;; 487 while ((pl = (TPolyLine*)next())) {; 488 if (!pl->InheritsFrom(TPolyLine::Class())) {; 489 Error(""Add"",""Attempt to add object of class: %s to a %s"",pl->ClassName(),this->ClassName());; 490 return -1;; 491 }; 492 npoints += pl->Size();; 493 }; 494 ; 495 //extend this polyline to hold npoints; 496 if (npoints > 1) SetPoint(npoints-1,0,0);; 497 ; 498 //merge all polyline",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TPolyLine_8cxx_source.html:14940,clear,clear,14940,doc/master/TPolyLine_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TPolyLine_8cxx_source.html,1,['clear'],['clear']
Usability,"= yaxis->GetBinCenter(biny);; 11585 view->WCtoNDC(xx,u);; 11586 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11587 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11588 rect1[4].SetX(rect1[0].GetX());; 11589 rect1[4].SetY(rect1[0].GetY());; 11590 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 11617 view->WCtoNDC(xx,u);; 11618 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11619 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11620 xx[0] = xaxis->GetXmin();; 11621 view->WCtoNDC(xx,u);; 11622 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11623 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11624 gVirtualX->DrawPolyLine(5,rect2);; 11625 }; 11626 c->Clear();; 11627 c->cd();; 11628 TH2 *hp = (TH2*)h3->Project3D(""xz"");; 11629 yaxis->SetRange(first,last);; 11630 if (hp) {; 11631 hp->SetFillColor(38);; 11632 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXZ of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:422221,ux,uxmin,422221,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"= yaxis->GetBinCenter(biny);; 11655 view->WCtoNDC(xx,u);; 11656 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11657 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11658 rect1[4].SetX(rect1[0].GetX());; 11659 rect1[4].SetY(rect1[0].GetY());; 11660 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 11687 view->WCtoNDC(xx,u);; 11688 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11689 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11690 xx[0] = xaxis->GetXmin();; 11691 view->WCtoNDC(xx,u);; 11692 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11693 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11694 gVirtualX->DrawPolyLine(5,rect2);; 11695 }; 11696 c->Clear();; 11697 c->cd();; 11698 TH2 *hp = (TH2*)h3->Project3D(""zx"");; 11699 yaxis->SetRange(first,last);; 11700 if (hp) {; 11701 hp->SetFillColor(38);; 11702 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionZX of biny=%d [y=%.1f..%.f]"", biny,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:425114,ux,uxmin,425114,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"= zaxis->GetBinCenter(binz);; 11444 view->WCtoNDC(xx,u);; 11445 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11446 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11447 rect1[4].SetX(rect1[0].GetX());; 11448 rect1[4].SetY(rect1[0].GetY());; 11449 xx[0] = xaxis->GetXmax();; 11450 view->WCtoNDC(xx,u);; 11451 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11452 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11453 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 11476 view->WCtoNDC(xx,u);; 11477 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11478 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11479 xx[0] = xaxis->GetXmin();; 11480 view->WCtoNDC(xx,u);; 11481 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11482 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11483 gVirtualX->DrawPolyLine(5,rect2);; 11484 }; 11485 ; 11486 c->Clear();; 11487 c->cd();; 11488 TH2 *hp = (TH2*)h3->Project3D(""xy"");; 11489 zaxis->SetRange(first,last);; 11490 if (hp) {; 11491 hp->SetFillColor(38);; 11492 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionXY of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->Ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:416427,ux,uxmin,416427,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"= zaxis->GetBinCenter(binz);; 11515 view->WCtoNDC(xx,u);; 11516 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11517 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11518 rect1[4].SetX(rect1[0].GetX());; 11519 rect1[4].SetY(rect1[0].GetY());; 11520 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 11547 view->WCtoNDC(xx,u);; 11548 rect2[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11549 rect2[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11550 xx[0] = xaxis->GetXmin();; 11551 view->WCtoNDC(xx,u);; 11552 rect2[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11553 rect2[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11554 gVirtualX->DrawPolyLine(5,rect2);; 11555 }; 11556 c->Clear();; 11557 c->cd();; 11558 TH2 *hp = (TH2*)h3->Project3D(""yx"");; 11559 zaxis->SetRange(first,last);; 11560 if (hp) {; 11561 hp->SetFillColor(38);; 11562 if (nbins==1)hp->SetTitle(TString::Format(""ProjectionYX of binz=%d [z=%.1f..%.f]"", binz,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:419328,ux,uxmin,419328,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"="""")Set the title of the TNamed.Definition TNamed.cxx:164; TNamed::SetNamevirtual void SetName(const char *name)Set the name of the TNamed.Definition TNamed.cxx:140; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; TRandom3Random number generator class based on M.Definition TRandom3.h:27; TRandom3::fMtUInt_t fMt[624]Definition TRandom3.h:30; TRandom3::RndmDouble_t Rndm() overrideMachine independent random number generator.Definition TRandom3.cxx:99; TRandom3::RndmArrayvoid RndmArray(Int_t n, Float_t *array) overrideReturn an array of n random numbers uniformly distributed in ]0,1].Definition TRandom3.cxx:143; TRandom3::IsATClass * IsA() const overrideDefinition TRandom3.h:47; TRandom3::TRandom3TRandom3(UInt_t seed=4357)Default constructor If seed is 0, the seed is automatically computed via a TUUID object.Definition TRandom3.cxx:80; TRandom3::Streamervoid Streamer(TBuffer &) overrideStream an object of class TRandom3.Definition TRandom3.cxx:237; TRandom3::fCount624Int_t fCount624Definition TRandom3.h:31; TRandom3::~TRandom3~TRandom3() overrideDefault destructor.Definition TRandom3.cxx:90; TRandom3::SetSeedvoid SetSeed(ULong_t seed=0) overrideSet the random generator sequence if seed is 0 (default value) a TUUID is generated and used to fill ...Definition TRandom3.cxx:206; TRandom3::Classstatic TClass * Class(); TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::fSeedUInt_t fSeedDefinition TRandom.h:30; TRandom::Streamervoid Streamer(TBuffer &) overrideStream an object of class TObject.; double; int; unsigned int; yDouble_t y[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16. mathmathcoresrcTRandom3.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TRandom3_8cxx_source.html:12087,Guid,Guide,12087,doc/master/TRandom3_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TRandom3_8cxx_source.html,1,['Guid'],['Guide']
Usability,"="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetEchoMode(Bool_t mode) overrideTRintvirtual; SetIdleTimer(UInt_t idleTimeInSec, const char *command)TApplicationvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetPrompt(const char *newPrompt)TRintvirtual; SetReturnFromRun(Bool_t ret)TApplicationinline; SetSignalHandler(TSignalHandler *sh)TApplicationinlineprotected; SetUniqueID(UInt_t uid)TObjectvirtual; Show()TApplicationinlinevirtual; StartIdleing()TApplicationvirtual; StopIdleing()TApplicationvirtual; Streamer(TBuffer &) overrideTRintvirtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TRintinline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TabCompletionHook(char *buf, int *pLoc, std::ostream &out) overrideTRintvirtual; TApplication(const TApplication &)=deleteTApplicationprivate; TApplication()TApplicationprotected; TApplication(const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0)TApplication; Terminate(int status) overrideTRintvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TQObject(const TQObject &)=deleteTQObjectprivate; TQObject()TQObject; TRint(const TRint &)=deleteTRintprivate; TRint(const char *appClassName, Int_t *argc, char **argv, void *options=nullptr, Int_t numOptions=0, Bool_t noLogo=kFALSE, Bool_t exitOnUnknownArgs=kFALSE)TRint; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; WorkingDirectory() constTApplicationinline; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; ~TApplication()TApplicationvirtual; ~TObject()TObjectvirtual; ~TQObject()TQObjectvirtual; ~TRint()TRintvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:22 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRint-members.html:12642,Guid,Guide,12642,doc/master/classTRint-members.html,https://root.cern,https://root.cern/doc/master/classTRint-members.html,1,['Guid'],['Guide']
Usability,"="""", const std::string &algoType="""")static method to create the corresponding Minimizer given the string Supported Minimizers types are: ...Definition Factory.cxx:63; ROOT::Math::FunctorDocumentation for class Functor class.Definition Functor.h:47; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::Minimizer::Xvirtual const double * X() const =0return pointer to X values at the minimum; ROOT::Math::Minimizer::SetMaxIterationsvoid SetMaxIterations(unsigned int maxiter)set maximum iterations (one iteration can have many function calls)Definition Minimizer.h:334; ROOT::Math::Minimizer::SetFunctionvirtual void SetFunction(const ROOT::Math::IMultiGenFunction &func)=0set the function to minimize; ROOT::Math::Minimizer::SetTolerancevoid SetTolerance(double tol)set the toleranceDefinition Minimizer.h:337; ROOT::Math::Minimizer::Minimizevirtual bool Minimize()=0method to perform the minimization; ROOT::Math::Minimizer::SetPrintLevelvoid SetPrintLevel(int level)set print levelDefinition Minimizer.h:328; ROOT::Math::Minimizer::SetVariablevirtual bool SetVariable(unsigned int ivar, const std::string &name, double val, double step)=0set a new free variable; ROOT::Math::Minimizer::SetMaxFunctionCallsvoid SetMaxFunctionCalls(unsigned int maxfcn)set maximum of function callsDefinition Minimizer.h:331; ROOT::Math::Minimizer::MinValuevirtual double MinValue() const =0return minimum function value; TRandom2Random number generator class based on the maximally quidistributed combined Tausworthe generator by ...Definition TRandom2.h:27; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Factory.h; NumericalMinimizationDefinition NumericalMinimization.py:1; AuthorLorenzo Moneta ; Definition in file NumericalMinimization.C. tutorialsfitNumericalMinimization.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NumericalMinimization_8C.html:5295,Guid,Guide,5295,doc/master/NumericalMinimization_8C.html,https://root.cern,https://root.cern/doc/master/NumericalMinimization_8C.html,1,['Guid'],['Guide']
Usability,"=0);  Resize list by delta entries. ;  ; virtual void SetDelta (Int_t delta=100);  ; virtual void SetDirectory (TDirectory *dir);  Remove reference to this EventList from current directory and add reference to new directory dir. ;  ; void SetName (const char *name) override;  Change the name of this TEventList. ;  ; virtual void SetReapplyCut (bool apply=false);  ; virtual void Sort ();  Sort list entries in increasing order. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TEventList. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Subtract (const TEventList *list);  Remove elements from this list that are present in alist. ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEventList.html:4807,Clear,Clear,4807,doc/master/classTEventList.html,https://root.cern,https://root.cern/doc/master/classTEventList.html,1,['Clear'],['Clear']
Usability,"=0, Double_t t=0) constEvaluate this function.Definition TF1.cxx:1439; TF2A 2-Dim function with parameters.Definition TF2.h:29; TF2::GetRandom2virtual void GetRandom2(Double_t &xrandom, Double_t &yrandom, TRandom *rng=nullptr)Return 2 random numbers following this function shape.Definition TF2.cxx:547; TF2::Drawvoid Draw(Option_t *option="""") overrideDraw this function with its current attributes.Definition TF2.cxx:259; TGraph2DErrorsGraph 2D class with errors.Definition TGraph2DErrors.h:26; TGraph2DErrors::SetPointvoid SetPoint(Int_t i, Double_t x, Double_t y, Double_t z) overrideSet x, y and z values for point number i.Definition TGraph2DErrors.cxx:404; TGraph2DErrors::SetPointErrorvirtual void SetPointError(Int_t i, Double_t ex, Double_t ey, Double_t ez)Set ex, ey and ez values for point number i.Definition TGraph2DErrors.cxx:446; TGraph2D::FindObjectTObject * FindObject(const char *name) const overridesearch object named name in the list of functionsDefinition TGraph2D.cxx:791; TGraph2D::Fitvirtual TFitResultPtr Fit(const char *formula, Option_t *option="""", Option_t *goption="""")Fits this graph with function with name fname Predefined functions such as gaus, expo and poln are au...Definition TGraph2D.cxx:815; TGraph2D::Drawvoid Draw(Option_t *option=""P0"") overrideSpecific drawing options can be used to paint a TGraph2D:Definition TGraph2D.cxx:762; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; TStyle::SetHistTopMarginvoid SetHistTopMargin(Double_t hmax=0.05)Definition TStyle.h:385; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; exDouble_t ex[n]Definition legend1.C:17; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123. tutorialsgraphsgraph2derrorsfit.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/graph2derrorsfit_8C_source.html:4788,Guid,Guide,4788,doc/master/graph2derrorsfit_8C_source.html,https://root.cern,https://root.cern/doc/master/graph2derrorsfit_8C_source.html,1,['Guid'],['Guide']
Usability,"=1.)THnSparseinline; AddBinContent(Long64_t bin, Double_t v=1.) overrideTHnSparsevirtual; AddBinError2(Long64_t bin, Double_t e2) overrideTHnSparsevirtual; AddChunk()THnSparseprotected; AddInternal(const THnBase *h, Double_t c, Bool_t rebinned)THnBaseprotected; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTHnBasevirtual; CalculateErrors(Bool_t calc=kTRUE)THnBaseinline; CheckConsistency(const THnBase *h, const char *tag) constTHnBaseprotected; CheckedHash()TObjectinline; Class()THnSparsestatic; Class_Name()THnSparsestatic; Class_Version()THnSparseinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneEmpty(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; Compare(const TObject *obj) const overrideTNamedvirtual; ComputeIntegral()THnBase; Copy(TObject &named) const overrideTNamedvirtual; CreateHist(const char *name, const char *title, const TObjArray *axes, Bool_t keepTargetAxis) constTHnBaseprotected; CreateHnAny(const char *name, const char *title, const TH1 *h1, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateHnAny(const char *name, const char *title, const THnBase *hn, Bool_t sparse, Int_t chunkSize=1024 *16)THnBaseprotectedstatic; CreateIter(Bool_t respectAxisRange) const overrideTHnSparsevirtual; CreateSparse(const char *name, const char *title, const TH1 *h1, Int_t chunkSize=1024 *16)THnSparseinlinestatic; CreateSparse(const char *name, const char *title, const THnBase *hn, Int_t chunkSize=1024 *16)THnSparseinlinestatic; DeclFileName()THnSparseinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; Divide(const THnBase *h)THnBase; Divide(const THnBase *h1, const THnBase *h2, Double_t c1=1., Double_t c2=1., Option_t *option="""")THnBase; DoError(int lev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTHnSparse-members.html:1068,Clear,Clear,1068,doc/master/classTHnSparse-members.html,https://root.cern,https://root.cern/doc/master/classTHnSparse-members.html,1,['Clear'],['Clear']
Usability,"=1:VarTransform=Norm"" );; ; if (Use[""FDA_MT""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_MT"",; ""!H:!V:Formula=(0)+(1)*x0+(2)*x1:ParRanges=(-100,100);(-100,100);(-100,100);(-10,10):FitMethod=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=2:UseImprove:UseMinos:SetBatch"" );; ; if (Use[""FDA_GAMT""]); factory->BookMethod( dataloader, TMVA::Types::kFDA, ""FDA_GAMT"",; ""!H:!V:Formula=(0)+(1)*x0+(2)*x1:ParRanges=(-100,100);(-100,100);(-100,100):FitMethod=GA:Converger=MINUIT:ErrorLevel=1:PrintLevel=-1:FitStrategy=0:!UseImprove:!UseMinos:SetBatch:Cycles=1:PopSize=5:Steps=5:Trim"" );; ; // Neural network (MLP); if (Use[""MLP""]); factory->BookMethod( dataloader, TMVA::Types::kMLP, ""MLP"", ""!H:!V:VarTransform=Norm:NeuronType=tanh:NCycles=20000:HiddenLayers=N+20:TestRate=6:TrainingMethod=BFGS:Sampling=0.3:SamplingEpoch=0.8:ConvergenceImprove=1e-6:ConvergenceTests=15:!UseRegulator"" );; ; if (Use[""DNN_CPU""] || Use[""DNN_GPU""]) {; ; TString archOption = Use[""DNN_GPU""] ? ""GPU"" : ""CPU"";; ; TString layoutString(""Layout=TANH|50,TANH|50,TANH|50,LINEAR"");; ; ; TString trainingStrategyString(""TrainingStrategy="");; ; trainingStrategyString +=""LearningRate=1e-3,Momentum=0.3,ConvergenceSteps=20,BatchSize=50,TestRepetitions=1,WeightDecay=0.0,Regularization=None,Optimizer=Adam"";; ; TString nnOptions(""!H:V:ErrorStrategy=SUMOFSQUARES:VarTransform=G:WeightInitialization=XAVIERUNIFORM:Architecture="");; nnOptions.Append(archOption);; nnOptions.Append("":"");; nnOptions.Append(layoutString);; nnOptions.Append("":"");; nnOptions.Append(trainingStrategyString);; ; TString methodName = TString(""DNN_"") + archOption;; ; factory->BookMethod(dataloader, TMVA::Types::kDL, methodName, nnOptions); // NN; }; ; ; ; // Support Vector Machine; if (Use[""SVM""]); factory->BookMethod( dataloader, TMVA::Types::kSVM, ""SVM"", ""Gamma=0.25:Tol=0.001:VarTransform=Norm"" );; ; // Boosted Decision Trees; if (Use[""BDT""]); factory->BookMethod( dataloader, TMVA::Types::kBDT, ""BDT"",; ""!H:!V:NTrees=100:MinNodeSize=1.0%:BoostType=",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVARegression_8C.html:144465,Learn,LearningRate,144465,doc/master/TMVARegression_8C.html,https://root.cern,https://root.cern/doc/master/TMVARegression_8C.html,1,['Learn'],['LearningRate']
Usability,"== '*') {; 1035 type.at(type.length()-2) = '*';; 1036 type.erase(type.length()-1);; 1037 }; 1038 prototype += type;; 1039 }; 1040 ; 1041 prototype = ""("" + prototype + "")"";; 1042 return true;; 1043 }; 1044 else {; 1045 ShowWarning(""can't convert Decl to FunctionDecl"","""");; 1046 return false;; 1047 }; 1048}; 1049 ; 1050////////////////////////////////////////////////////////////////////////////////; 1051 ; 1052void RScanner::Scan(const clang::ASTContext &C); 1053{; 1054 fSourceManager = &C.getSourceManager();; 1055 ; 1056// if (fVerboseLevel >= 3) fSelectionRules.PrintSelectionRules();; 1057 ; 1058 if (fVerboseLevel > 0 && fSelectionRules.GetHasFileNameRule()) {; 1059 std::cout<<""File name detected""<<std::endl;; 1060 }; 1061 ; 1062 if (fScanType == EScanType::kTwoPasses); 1063 TraverseDecl(C.getTranslationUnitDecl());; 1064 ; 1065 fFirstPass=false;; 1066 fselectedRecordDecls.clear();; 1067 fSelectedEnums.clear();; 1068 fSelectedTypedefs.clear();; 1069 fSelectedVariables.clear();; 1070 fSelectedFunctions.clear();; 1071 TraverseDecl(C.getTranslationUnitDecl());; 1072 ; 1073 // The RecursiveASTVisitor uses range-based for; we must not modify the AST; 1074 // during iteration / visitation. Instead, buffer the lookups that could; 1075 // potentially create new template specializations, and handle them here:; 1076 AddDelayedAnnotatedRecordDecls();; 1077}; 1078 ; 1079 ; 1080////////////////////////////////////////////////////////////////////////////////; 1081/// Set the callback to the RecordDecl and return the previous one.; 1082 ; 1083RScanner::DeclCallback RScanner::SetRecordDeclCallback(RScanner::DeclCallback callback); 1084{; 1085 DeclCallback old = fRecordDeclCallback;; 1086 fRecordDeclCallback = callback;; 1087 return old;; 1088}; IntToStrstd::string IntToStr(int num)Definition Scanner.cxx:161; APIntToLonglong APIntToLong(const llvm::APInt &num)Definition Scanner.cxx:147; gInterpcling::Interpreter * gInterp; AddSpacestd::string AddSpace(const std::string &txt)Definiti",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Scanner_8cxx_source.html:36849,clear,clear,36849,doc/master/Scanner_8cxx_source.html,https://root.cern,https://root.cern/doc/master/Scanner_8cxx_source.html,1,['clear'],['clear']
Usability,"== 2) {; 2471 // Need to add the rule targeting transient members.; 2472 TStreamerInfo *localInfo = fInfo;; 2473 if (fType == 3 || fType == 4) {; 2474 // Don't we have real version information?; 2475 // Not unless there is a subbranch with a non-split element of the class.; 2476 // Search for the correct version.; 2477 localInfo = FindOnfileInfo(fClonesClass, fBranches);; 2478 }; 2479 ; 2480 TString prefix(GetFullName());; 2481 if (fType == 2 && fID >= 0) {; 2482 auto start = prefix.Length();; 2483 if (prefix[start - 1] == '.'); 2484 --start;; 2485 std::string_view view(prefix.Data(), start);; 2486 auto cutoff = view.find_last_of('.');; 2487 if (cutoff != std::string::npos) {; 2488 prefix.Remove(cutoff + 1);; 2489 }; 2490 }; 2491 if (prefix[prefix.Length()-1] != '.') {; 2492 if (fType == 3 || fType == 4 || prefix.Index('.') != TString::kNPOS) {; 2493 prefix += ""."";; 2494 } else {; 2495 prefix = """";; 2496 }; 2497 }; 2498 fNewIDs.clear();; 2499 ; 2500 GatherArtificialElements(fBranches, fNewIDs, prefix, localInfo, 0);; 2501 ; 2502 if (!fNewIDs.empty() && fOnfileObject == nullptr && localInfo->GetElement(0)->GetType() == TStreamerInfo::kCacheNew); 2503 {; 2504 SetOnfileObject(localInfo);; 2505 }; 2506 ; 2507 }; 2508 fInit = true;; 2509 ; 2510 // Get the action sequence we need to copy for reading.; 2511 SetReadActionSequence();; 2512 SetFillActionSequence();; 2513 } else if (!fReadActionSequence) {; 2514 // Get the action sequence we need to copy for reading.; 2515 SetReadActionSequence();; 2516 SetFillActionSequence();; 2517 }; 2518 SetReadLeavesPtr();; 2519 SetFillLeavesPtr();; 2520 fInInitInfo = false;; 2521 }; 2522}; 2523 ; 2524////////////////////////////////////////////////////////////////////////////////; 2525/// Return the collection proxy describing the branch content, if any.; 2526 ; 2527TVirtualCollectionProxy* TBranchElement::GetCollectionProxy(); 2528{; 2529 if (fCollProxy) {; 2530 return fCollProxy;; 2531 }; 2532 TBranchElement* thiscast = const_cast<TBra",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranchElement_8cxx_source.html:89323,clear,clear,89323,doc/master/TBranchElement_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranchElement_8cxx_source.html,1,['clear'],['clear']
Usability,"==(const Iterator_t &lhs) constCompare two iterators for equality.Definition TTreeReader.h:83; TTreeReader::Iterator_t::fReaderTTreeReader * fReaderThe reader we select the entries on.Definition TTreeReader.h:61; TTreeReader::Iterator_t::operator*const Long64_t & operator*()Set the entry number in the reader and return it.Definition TTreeReader.h:134; TTreeReader::Iterator_t::IsValidbool IsValid() constWhether the iterator points to a valid entry.Definition TTreeReader.h:64; TTreeReader::Iterator_t::iterator_categorystd::input_iterator_tag iterator_categoryDefinition TTreeReader.h:67; TTreeReader::Iterator_t::operator!=bool operator!=(const Iterator_t &lhs) constCompare two iterators for inequality.Definition TTreeReader.h:109; TTreeReader::Iterator_t::operator++Iterator_t operator++(int)Increment the iterator (postfix i++).Definition TTreeReader.h:114; TTreeReader::Iterator_t::pointerconst Long64_t * pointerDefinition TTreeReader.h:70; TTreeReaderA simple, robust and fast interface to read values from ROOT columnar datasets such as TTree,...Definition TTreeReader.h:46; TTreeReader::TTreeReaderTTreeReader()Default constructor. Call SetTree to connect to a TTree.Definition TTreeReader.cxx:191; TTreeReader::fMissingProxiesstd::vector< std::string > fMissingProxiesDefinition TTreeReader.h:351; TTreeReader::fLoadTreeStatusELoadTreeStatus fLoadTreeStatusIndicator on how LoadTree was called 'last' time.Definition TTreeReader.h:321; TTreeReader::SetTreevoid SetTree(const char *keyname, TEntryList *entryList=nullptr)Definition TTreeReader.h:198; TTreeReader::IsInvalidbool IsInvalid() constDefinition TTreeReader.h:205; TTreeReader::GetEntriesLong64_t GetEntries() constReturns the number of entries of the TEntryList if one is provided, else of the TTree / TChain,...Definition TTreeReader.cxx:589; TTreeReader::fEntryStatusEEntryStatus fEntryStatusstatus of most recent read requestDefinition TTreeReader.h:320; TTreeReader::fSuppressErrorsForMissingBranchesstd::vector< std::strin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTreeReader_8h_source.html:18679,simpl,simple,18679,doc/master/TTreeReader_8h_source.html,https://root.cern,https://root.cern/doc/master/TTreeReader_8h_source.html,1,['simpl'],['simple']
Usability,"===. This member function redefines the function in ROOT::v5::TFormula; If a leaf has a name corresponding to the argument name, then; returns a new code.; A TTreeFormula may contain more than one variable.; For each variable referenced, the pointers to the corresponding; branch and leaf is stored in the object arrays fBranches and fLeaves. name can be :; - Leaf_Name (simple variable or data member of a ClonesArray); - Branch_Name.Leaf_Name; - Branch_Name.Method_Name; - Leaf_Name[index]; - Branch_Name.Leaf_Name[index]; - Branch_Name.Leaf_Name[index1]; - Branch_Name.Leaf_Name[][index2]; - Branch_Name.Leaf_Name[index1][index2]; New additions:; - Branch_Name.Leaf_Name[OtherLeaf_Name]; - Branch_Name.Datamember_Name; - '.' can be replaced by '->'; and; - Branch_Name[index1].Leaf_Name[index2]; - Leaf_name[index].Action().OtherAction(param); - Leaf_name[index].Action()[val].OtherAction(param). The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the internal code for this name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TTreeFormula.html:30144,usab,usable,30144,root/html604/TTreeFormula.html,https://root.cern,https://root.cern/root/html604/TTreeFormula.html,1,['usab'],['usable']
Usability,"==========. Bool_t Init(void* display = 0); Qt GUI initialization-. Int_t RegisterWid(QPaintDevice* wid); register QWidget for the embedded TCanvas. Int_t UnRegisterWid(QPaintDevice* wid); unregister QWidget to the TCanvas; return = Root registration Id or zero if the wd was not registered. Bool_t IsRegistered(QPaintDevice* wid); Check whether the object has been registered. Int_t InitWindow(ULong_t window); -; *-* if window == 0 InitWindow creates his own instance of TQtWindowsObject object; -; *-* Create a new windows; -; window is QWidget. Int_t OpenPixmap(UInt_t w, UInt_t h); *-* Create a new pixmap object. const QColor & ColorIndex(Color_t indx) const; Define the QColor object by ROOT color index. UInt_t ExecCommand(TGWin32Command* code); deprecated. void SetDoubleBufferOFF(); deprecated. void SetDoubleBufferON(); deprecated. void GetPlanes(Int_t& nplanes); Get maximum number of planes*-; *-* ============================; *-* nplanes : number of bit planes; *. void ClearWindow(); Clear current window. void ClosePixmap(); Delete the current pixmap. void CloseWindow(); Delete the current window. void CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); Copy the pixmap wd at the position xpos, ypos in the current window. void CreateOpenGLContext(Int_t wid = 0); Create OpenGL context for win windows (for ""selected"" Window by default); printf("" TGQt::CreateOpenGLContext for wd = %x fSelected= %x, threadID= %d \n"",wd,fSelectedWindow,; GetCurrentThreadId());. void DeleteOpenGLContext(Int_t wid = 0); Delete OpenGL context for win windows (for ""selected"" Window by default). void DrawBox(Int_t x1, Int_t y1, Int_t x2, Int_t y2, TVirtualX::EBoxMode mode); Draw a box.; mode=0 hollow (kHollow); mode=1 solid (kSolid). void DrawCellArray(Int_t x1, Int_t y1, Int_t x2, Int_t y2, Int_t nx, Int_t ny, Int_t* ic); Draw a cell array.; x1,y1 : left down corner; x2,y2 : right up corner; nx,ny : array size; ic : array. Draw a cell array. The drawing is done with the pixel precision; if (X2-X1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGQt.html:24287,Clear,ClearWindow,24287,root/html528/TGQt.html,https://root.cern,https://root.cern/root/html528/TGQt.html,6,['Clear'],"['Clear', 'ClearWindow']"
Usability,"===========; *-* Each time a new minimum is found, the search area is shifted; *-* to be centered at the best value. Random points are chosen; *-* uniformly over a hypercube determined by current step sizes.; *-* The Metropolis algorithm accepts a worse point with probability; *-* exp(-d/UP), where d is the degradation. Improved points; *-* are of course always accepted. Actual steps are random; *-* multiples of the nominal steps (DIRIN).; *. void mnset(); Interprets the commands that start with SET and SHOW*-*-; *-* ====================================================; *-* Called from MNEXCM; *-* file characteristics for SET INPUT; *-* 'SET ' or 'SHOW', 'ON ' or 'OFF', 'SUPPRESSED' or 'REPORTED '; *-* explanation of print level numbers -1:3 and strategies 0:2; *-* identification of debug options; *-* things that can be set or shown; *-* options not intended for normal users; *. void mnsimp(); Minimization using the simplex method of Nelder and Mead; *-* ========================================================; *-* Performs a minimization using the simplex method of Nelder; *-* and Mead (ref. -- Comp. J. 7,308 (1965)).; *. void mnstat(Double_t& fmin, Double_t& fedm, Double_t& errdef, Int_t& npari, Int_t& nparx, Int_t& istat); Returns concerning the current status of the minimization; *-* =========================================================; *-* User-called; *-* Namely, it returns:; *-* FMIN: the best function value found so far; *-* FEDM: the estimated vertical distance remaining to minimum; *-* ERRDEF: the value of UP defining parameter uncertainties; *-* NPARI: the number of currently variable parameters; *-* NPARX: the highest (external) parameter number defined by user; *-* ISTAT: a status integer indicating how good is the covariance; *-* matrix: 0= not calculated at all; *-* 1= approximation only, not accurate; *-* 2= full matrix, but forced positive-definite; *-* 3= full accurate covariance matrix; *. void mntiny(Double_t epsp1, Double_t& epsbak); To fin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMinuit.html:54230,simpl,simplex,54230,root/html528/TMinuit.html,https://root.cern,https://root.cern/root/html528/TMinuit.html,10,['simpl'],['simplex']
Usability,"===========; *-* Each time a new minimum is found, the search area is shifted; *-* to be centered at the best value. Random points are chosen; *-* uniformly over a hypercube determined by current step sizes.; *-* The Metropolis algorithm accepts a worse point with probability; *-* exp(-d/UP), where d is the degradation. Improved points; *-* are of course always accepted. Actual steps are random; *-* multiples of the nominal steps (DIRIN).; *. void mnset(); Interprets the commands that start with SET and SHOW*-*-; *-* ====================================================; *-* Called from MNEXCM; *-* file characteristics for SET INPUT; *-* 'SET ' or 'SHOW', 'ON ' or 'OFF', 'SUPPRESSED' or 'REPORTED '; *-* explanation of print level numbers -1:3 and strategies 0:2; *-* identification of debug options; *-* things that can be set or shown; *-* options not intended for normal users; *. void mnsimp(); Minimization using the simplex method of Nelder and Mead; *-* ========================================================; *-* Performs a minimization using the simplex method of Nelder; *-* and Mead (ref. -- Comp. J. 7,308 (1965)).; *. void mnstat(Double_t& fmin, Double_t& fedm, Double_t& errdef, Int_t& npari, Int_t& nparx, Int_t& istat); Returns concerning the current status of the minimization; *-* =========================================================; *-* User-called; *-* Namely, it returns:; *-* FMIN: the best function value found so far; *-* FEDM: the estimated vertical distance remaining to minimum; *-* ERRDEF: the value of UP defining parameter uncertainties; *-* NPARI: the number of currently variable parameters; *-* NPARX: the highest (external) parameter number defined by user; *-* ISTAT: a status integer indicating how good is the covariance; *-* matrix: 0= not calculated at all; *-* 1= approximation only, not accurate; *-* 2= full matrix, but forced positive-definite; *-* 3= full accurate covariance matrix; *. void mntiny(volatile Double_t epsp1, Double_t& epsbak",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMinuit.html:54866,simpl,simplex,54866,root/html604/TMinuit.html,https://root.cern,https://root.cern/root/html604/TMinuit.html,2,['simpl'],['simplex']
Usability,"=============. This member function redefines the function in TFormula; If a leaf has a name corresponding to the argument name, then; returns a new code.; A TTreeFormula may contain more than one variable.; For each variable referenced, the pointers to the corresponding; branch and leaf is stored in the object arrays fBranches and fLeaves. name can be :; - Leaf_Name (simple variable or data member of a ClonesArray); - Branch_Name.Leaf_Name; - Branch_Name.Method_Name; - Leaf_Name[index]; - Branch_Name.Leaf_Name[index]; - Branch_Name.Leaf_Name[index1]; - Branch_Name.Leaf_Name[][index2]; - Branch_Name.Leaf_Name[index1][index2]; New additions:; - Branch_Name.Leaf_Name[OtherLeaf_Name]; - Branch_Name.Datamember_Name; - '.' can be replaced by '->'; and; - Branch_Name[index1].Leaf_Name[index2]; - Leaf_name[index].Action().OtherAction(param); - Leaf_name[index].Action()[val].OtherAction(param). The expected returns values are; -2 : the name has been recognized but won't be usable; -1 : the name has not been recognized; >=0 : the name has been recognized, return the internal code for this name. TLeaf* GetLeafWithDatamember(const char* topchoice, const char* nextchice, Long64_t readentry) const. Bool_t BranchHasMethod(TLeaf* leaf, TBranch* branch, const char* method, const char* params, Long64_t readentry) const; Return the leaf (if any) of the tree with contains an object of a class; having a method which has the name provided in the argument. Int_t GetRealInstance(Int_t instance, Int_t codeindex); Now let calculate what physical instance we really need.; Some redundant code is used to speed up the cases where; they are no dimensions.; We know that instance is less that fCumulUsedSize[0] so; we can skip the modulo when virt_dim is 0. TClass* EvalClass() const; Evaluate the class of this treeformula. If the 'value' of this formula is a simple pointer to an object,; this function returns the TClass corresponding to its type. TClass* EvalClass(Int_t oper) const; Evaluate the cla",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TTreeFormula.html:21596,usab,usable,21596,root/html528/TTreeFormula.html,https://root.cern,https://root.cern/root/html528/TTreeFormula.html,5,['usab'],['usable']
Usability,"===================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. LongDouble_t GetValueLongDouble(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a long integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Long64_t GetValueLong64(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafL(). Int_t GetMaximum() const; {return (Int_t)fMaximum;}. Int_t GetMinimum() const; {return (Int_t)fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Long64_t max); {fMaximum = max;}. void SetMinimum(Long64_t min); {fMinimum = min;}. » Author: Rene Brun 19/12/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLeafL.html:10265,simpl,simple,10265,root/html604/TLeafL.html,https://root.cern,https://root.cern/root/html604/TLeafL.html,1,['simpl'],['simple']
Usability,"===================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. LongDouble_t GetValueLongDouble(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a long integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Long64_t GetValueLong64(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafL(). Int_t GetMaximum() const; {return (Int_t)fMaximum;}. Int_t GetMinimum() const; {return (Int_t)fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Long64_t max); {fMaximum = max;}. void SetMinimum(Long64_t min); {fMinimum = min;}. » Author: Rene Brun 19/12/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafL.html:10265,simpl,simple,10265,root/html602/TLeafL.html,https://root.cern,https://root.cern/root/html602/TLeafL.html,1,['simpl'],['simple']
Usability,"========================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. LongDouble_t GetValueLongDouble(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a long integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Long64_t GetValueLong64(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafL(). Int_t GetMaximum() const; {return (Int_t)fMaximum;}. Int_t GetMinimum() const; {return (Int_t)fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Long64_t max); {fMaximum = max;}. void SetMinimum(Long64_t min); {fMinimum = min;}. » Author: Rene Brun 19/12/2003 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-03-14 16:43; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafL.html:9768,simpl,simple,9768,root/html534/TLeafL.html,https://root.cern,https://root.cern/root/html534/TLeafL.html,1,['simpl'],['simple']
Usability,"==========================. this = (c1*h1)*(c2*h2). TH3D * ProjectionXYZ(const char* name = ""_pxyz"", Option_t* option = ""e"") const; Project this profile3D into a 3-D histogram along X,Y,Z*-*-; *-* =====================================================. The projection is always of the type TH3D. if option ""E"" is specified, the errors are computed. (default); if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""E"" is specified the errors of the projected histogram are computed and set; to be equal to the errors of the profile.; Option ""E"" is defined as the default one in the header file.; if option """" is specified the histogram errors are simply the sqrt of its content; if option ""B"" is specified, the content of bin of the returned histogram; will be equal to the GetBinEntries(bin) of the profile,; if option ""C=E"" the bin contents of the projection are set to the; bin errors of the profile; if option ""W"" is specified the bin content of the projected histogram is set to the; product of the bin content of the profile and the entries.; With this option the returned histogram will be equivalent to the one obtained by; filling directly a TH2D using the 3-rd value as a weight.; This option makes sense only for profile filled with all weights =1.; When the profile is weighted (filled with weights different than 1) the; bin error of the projected histogram (obtained using this option ""W"") cannot be; correctly computed from the information stored in the profile. In that case the; obtained histogram contains as bin error square the weighted sum of the square of the; profiled observable (TProfile2D::fSumw2[bin] ). TProfile2D * Project3DProfile(Option_t* option = ""xy"") const; *-*-*-*-*Project a 3-D profile into a 2D-profile histogram depending; on the option parameter; option may contain a combination ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProfile3D.html:39988,simpl,simply,39988,root/html534/TProfile3D.html,https://root.cern,https://root.cern/root/html534/TProfile3D.html,3,['simpl'],['simply']
Usability| [Elapsed time: 0:10m processing file: 1 / 1 processed evts: 59996000 / 61540413 7.50e+06 evt/s 0:00m remaining time (per file being processed)] ; ; ; [Total elapsed time: 0:11m processed files: 1 / 1 processed evts: 61540413 / 61540413] ; Events with exactly two muons: pass=31104343 all=61540413 -- eff=50.54 % cumulative eff=50.54 %; Muons with opposite charge: pass=24067843 all=31104343 -- eff=77.38 % cumulative eff=39.11 %; DateAugust 2018 ; AuthorStefan Wunsch (KIT, CERN) ; Definition in file df102_NanoAODDimuonAnalysis.C. tutorialsdataframedf102_NanoAODDimuonAnalysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:27 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html:66930,Guid,Guide,66930,doc/master/df102__NanoAODDimuonAnalysis_8C.html,https://root.cern,https://root.cern/doc/master/df102__NanoAODDimuonAnalysis_8C.html,1,['Guid'],['Guide']
Usability,"=first; i<=last;i++); 2151 if (npt > 1) {; 2152 ComputeLogs(npt, optionZ);; 2153 Smooth(theGraph, npt,gxworkl.data(),gyworkl.data(),drawtype);; 2154 }; 2155 }; 2156 }; 2157 ; 2158 // Draw the histogram with a simple line; 2159 ; 2160 if (optionLine) {; 2161 gPad->SetBit(TGraph::kClipFrame);; 2162 wminstep = wmin + 0.5*delta;; 2163 Axis_t ax1,ax2,ay1,ay2;; 2164 gPad->GetRangeAxis(ax1,ay1,ax2,ay2);; 2165 ; 2166 if (!optionRot) {; 2167 npt = 0;; 2168 for (i=first; i<=last;i++) {; 2169 npt++;; 2170 if (!optionBins) {; 2171 gxwork[npt-1] = wmin+(i-first)*delta+0.5*delta;; 2172 } else {; 2173 xi1 = x[i]; xi = x[i-1];; 2174 if (xi1 < xi) {; 2175 if (i != last) Error(where, ""X must be in increasing order"");; 2176 else Error(where, ""X must have N+1 values with option N"");; 2177 return;; 2178 }; 2179 gxwork[npt-1] = x[i-1] + 0.5*(x[i]-x[i-1]);; 2180 }; 2181 if (gxwork[npt-1] < uxmin || gxwork[npt-1] > uxmax) { npt--; continue;}; 2182 gywork[npt-1] = y[i-1];; 2183 gywork[npt] = y[i-1]; //new; 2184 if ((gywork[npt-1] < rwymin) || ((gywork[npt-1] > rwymax) && !optionFill2)) {; 2185 if (npt > 2) {; 2186 ComputeLogs(npt, optionZ);; 2187 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data());; 2188 }; 2189 gxwork[0] = gxwork[npt-1];; 2190 gywork[0] = gywork[npt-1];; 2191 npt = 1;; 2192 continue;; 2193 }; 2194 ; 2195 if (npt >= fgMaxPointsPerLine) {; 2196 if (optionLine) {; 2197 ComputeLogs(fgMaxPointsPerLine, optionZ);; 2198 if (optionFill2) {; 2199 gxworkl[npt] = gxworkl[npt-1]; gyworkl[npt] = rwymin;; 2200 gxworkl[npt+1] = gxworkl[0]; gyworkl[npt+1] = rwymin;; 2201 gPad->PaintFillArea(fgMaxPointsPerLine+2,gxworkl.data(),gyworkl.data());; 2202 }; 2203 gPad->PaintPolyLine(npt,gxworkl.data(),gyworkl.data());; 2204 }; 2205 gxwork[0] = gxwork[npt-1];; 2206 gywork[0] = gywork[npt-1];; 2207 npt = 1;; 2208 }; 2209 } //endfor (i=first; i<=last;i++); 2210 if (npt > 1) {; 2211 ComputeLogs(npt, optionZ);; 2212 if (optionFill2) {; 2213 gxworkl[npt] = gxworkl[npt-1]; gyworkl[npt] = rwymin;; 221",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:79393,ux,uxmin,79393,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,2,['ux'],"['uxmax', 'uxmin']"
Usability,"=n. ;  ; void ClearSscp (TMatrixD &sscp);  clear the sscp matrix, used for covariance and mean calculation ;  ; void Correl ();  transforms covariance matrix into correlation matrix ;  ; void Covar (TMatrixD &sscp, TVectorD &m, TMatrixDSym &cov, TVectorD &sd, Int_t nvec);  calculates mean and covariance ;  ; void CreateOrtSubset (TMatrixD &dat, Int_t *index, Int_t hmerged, Int_t nmerged, TMatrixD &sscp, Double_t *ndist);  creates a subset of hmerged vectors with smallest orthogonal distances to the hyperplane hyp[1]*(x1-mean[1])+...+hyp[nvar]*(xnvar-mean[nvar])=0 This function is called in case when less than fH samples lie on a hyperplane. ;  ; void CreateSubset (Int_t ntotal, Int_t htotal, Int_t p, Int_t *index, TMatrixD &data, TMatrixD &sscp, Double_t *ndist);  creates a subset of htotal elements from ntotal elements first, p+1 elements are drawn randomly(without repetitions) if their covariance matrix is singular, more elements are added one by one, until their covariance matrix becomes regular or it becomes clear that htotal observations lie on a hyperplane If covariance matrix determinant!=0, distances of all ntotal elements are calculated, using formula d_i=Sqrt((x_i-M)*S_inv*(x_i-M)), where M is mean and S_inv is the inverse of the covariance matrix htotal points with smallest distances are included in the returned subset. ;  ; Double_t CStep (Int_t ntotal, Int_t htotal, Int_t *index, TMatrixD &data, TMatrixD &sscp, Double_t *ndist);  from the input htotal-subset constructs another htotal subset with lower determinant ;  ; Int_t Exact (Double_t *ndist);  for the exact fit situations returns number of observations on the hyperplane ;  ; Int_t Exact2 (TMatrixD &mstockbig, TMatrixD &cstockbig, TMatrixD &hyperplane, Double_t *deti, Int_t nbest, Int_t kgroup, TMatrixD &sscp, Double_t *ndist);  This function is called if determinant of the covariance matrix of a subset=0. ;  ; Double_t KOrdStat (Int_t ntotal, Double_t *arr, Int_t k, Int_t *work);  because I need a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRobustEstimator.html:15834,clear,clear,15834,doc/master/classTRobustEstimator.html,https://root.cern,https://root.cern/doc/master/classTRobustEstimator.html,1,['clear'],['clear']
Usability,"=nullptr);  ; virtual void SetImage (const TVectorD &, UInt_t, TImagePalette *=nullptr);  ; virtual void SetImage (Pixmap_t, Pixmap_t=0);  ; virtual Bool_t SetImageBuffer (char **, EImageFileTypes=TImage::kPng);  ; virtual void Slice (UInt_t, UInt_t, UInt_t, UInt_t, UInt_t, UInt_t);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Tile (UInt_t, UInt_t);  ; virtual void UnZoom ();  ; virtual Double_t * Vectorize (UInt_t=256, UInt_t=4, Int_t=0);  ; virtual void WriteImage (const char *, EImageFileTypes=TImage::kUnknown);  ; virtual void Zoom (UInt_t, UInt_t, UInt_t, UInt_t);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTImage.html:8588,Clear,Clear,8588,doc/master/classTImage.html,https://root.cern,https://root.cern/doc/master/classTImage.html,1,['Clear'],['Clear']
Usability,"=nullptr, Bool_t checkbox=kFALSE);  Add item to list tree. Returns new item. ;  ; TGListTreeItem * AddItem (TGListTreeItem *parent, const char *string, void *userData, const TGPicture *open=nullptr, const TGPicture *closed=nullptr, Bool_t checkbox=kFALSE);  Add item to list tree. ;  ; void AddItem (TGListTreeItem *parent, TGListTreeItem *item);  Add given item to list tree. ;  ; void AddRoot (const char *string);  ; void AdjustPosition () override;  Move content to position of highlighted/activated frame. ;  ; void AdjustPosition (TGListTreeItem *item);  Move content to position of item. ;  ; void CheckAllChildren (TGListTreeItem *item, Bool_t state);  Check all child items of 'item' and 'item' itself according to the state value: kTRUE means check all, kFALSE - uncheck all. ;  ; virtual void Checked (TObject *obj, Bool_t check);  Emit Checked() signal. ;  ; void CheckItem (TGListTreeItem *item, Bool_t check=kTRUE);  Set check button state for the node 'item'. ;  ; void ClearHighlighted ();  Un highlight items. ;  ; virtual void Clicked (TGListTreeItem *entry, Int_t btn);  Emit Clicked() signal. ;  ; virtual void Clicked (TGListTreeItem *entry, Int_t btn, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; virtual void Clicked (TGListTreeItem *entry, Int_t btn, UInt_t mask, Int_t x, Int_t y);  Emit Clicked() signal. ;  ; void CloseItem (TGListTreeItem *item);  Close item in list tree (i.e. hide child items). ;  ; virtual void DataDropped (TGListTreeItem *item, TDNDData *data);  Emit DataDropped() signal. ;  ; Int_t DeleteChildren (TGListTreeItem *item);  Delete children of item from list. ;  ; Int_t DeleteItem (TGListTreeItem *item);  Delete item from list tree. ;  ; Int_t DeleteSelected ();  ; void DisableOpen (Bool_t disable=kTRUE);  ; virtual void DoubleClicked (TGListTreeItem *entry, Int_t btn);  Emit DoubleClicked() signal. ;  ; virtual void DoubleClicked (TGListTreeItem *entry, Int_t btn, Int_t x, Int_t y);  Emit DoubleClicked() signal. ;  ; virtual void DrawActiv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:3765,Clear,ClearHighlighted,3765,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['Clear'],['ClearHighlighted']
Usability,"=nullptr, const Float_t *eyh=nullptr)TGraphAsymmErrors; TGraphAsymmErrors(Int_t n, const Double_t *x, const Double_t *y, const Double_t *exl=nullptr, const Double_t *exh=nullptr, const Double_t *eyl=nullptr, const Double_t *eyh=nullptr)TGraphAsymmErrors; TGraphAsymmErrors(const TVectorF &vx, const TVectorF &vy, const TVectorF &vexl, const TVectorF &vexh, const TVectorF &veyl, const TVectorF &veyh)TGraphAsymmErrors; TGraphAsymmErrors(const TVectorD &vx, const TVectorD &vy, const TVectorD &vexl, const TVectorD &vexh, const TVectorD &veyl, const TVectorD &veyh)TGraphAsymmErrors; TGraphAsymmErrors(const TGraphAsymmErrors &gr)TGraphAsymmErrors; TGraphAsymmErrors(const TH1 *h)TGraphAsymmErrors; TGraphAsymmErrors(const TH1 *pass, const TH1 *total, Option_t *option="""")TGraphAsymmErrors; TGraphAsymmErrors(const char *filename, const char *format=""%lg %lg %lg %lg %lg %lg"", Option_t *option="""")TGraphAsymmErrors; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; UpdateArrays(const std::vector< Int_t > &sorting_indices, Int_t numSortedPoints, Int_t low) overrideTGraphAsymmErrorsprotectedvirtual; UseCurrentStyle() overrideTGraphvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; Zero(Int_t &k, Double_t AZ, Double_t BZ, Double_t E2, Double_t &X, Double_t &Y, Int_t maxiterations)TGraph; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TGraph() overrideTGraph; ~TGraphAsymmErrors() overrideTGraphAsymmErrors; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphAsymmErrors-members.html:17767,Guid,Guide,17767,doc/master/classTGraphAsymmErrors-members.html,https://root.cern,https://root.cern/doc/master/classTGraphAsymmErrors-members.html,1,['Guid'],['Guide']
Usability,"=true) override;  Copy the cached value of another RooAbsArg to our cache Warning: This function copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Overload RooAbsReal::fillTreeBranch to also fill tree branches with (asymmetric) errors if requested. ;  ; void installSharedProp (std::shared_ptr< RooRealVarSharedProperties > &&prop);  Install the shared property into the member _sharedProp. ;  ; void setExpensiveObjectCache (RooExpensiveObjectCache &) override;  variables don't need caches ;  ; void setValFast (double value) override;  ; std::shared_ptr< RooRealVarSharedProperties > sharedProp () const;  Hand out our shared property, create on the fly and register in shared map if necessary. ;  ;  Protected Member Functions inherited from RooAbsRealLValue; bool fitRangeOKForPlotting () const;  Check if fit range is usable as plot range, i.e. ;  ;  Protected Member Functions inherited from RooAbsReal; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check i",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:60843,usab,usable,60843,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['usab'],['usable']
Usability,> ROOT::Experimental::XRooFit::xRooNode::fBrowsables. Definition at line 497 of file xRooNode.h. ◆ fBrowseOperation. std::function<xRooNode(xRooNode *)> ROOT::Experimental::XRooFit::xRooNode::fBrowseOperation. Definition at line 498 of file xRooNode.h. ◆ fComp. std::shared_ptr<TObject> ROOT::Experimental::XRooFit::xRooNode::fComp. mutable . Definition at line 472 of file xRooNode.h. ◆ fFolder. std::string ROOT::Experimental::XRooFit::xRooNode::fFolder. Definition at line 476 of file xRooNode.h. ◆ fInterrupted. bool ROOT::Experimental::XRooFit::xRooNode::fInterrupted = false. mutable . appears that if was fXaxis then dialog box for SetXaxis will take as current value ; Definition at line 487 of file xRooNode.h. ◆ fParent. std::shared_ptr<xRooNode> ROOT::Experimental::XRooFit::xRooNode::fParent. Definition at line 475 of file xRooNode.h. ◆ fProvider. std::shared_ptr<xRooNode> ROOT::Experimental::XRooFit::xRooNode::fProvider. Definition at line 490 of file xRooNode.h. ◆ fRange. std::string ROOT::Experimental::XRooFit::xRooNode::fRange. mutable . Definition at line 481 of file xRooNode.h. ◆ fTimes. int ROOT::Experimental::XRooFit::xRooNode::fTimes = 1. Definition at line 473 of file xRooNode.h. ◆ fXAxis. std::shared_ptr<TAxis> ROOT::Experimental::XRooFit::xRooNode::fXAxis. mutable . only here so can have char* GetRange return so can return nullptr for no range set (required for RooCategory) ; Definition at line 485 of file xRooNode.h. ◆ gIntObj. BEGIN_XROOFIT_NAMESPACE xRooNode::InteractiveObject * xRooNode::gIntObj = nullptr. static . Definition at line 470 of file xRooNode.h. Libraries for ROOT::Experimental::XRooFit::xRooNode:. [legend]; The documentation for this class was generated from the following files:; roofit/xroofit/inc/RooFit/xRooFit/xRooNode.h; roofit/xroofit/src/xRooNode.cxx; roofit/xroofit/src/xRooNode_interactive.cxx. ROOTExperimentalXRooFitxRooNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html:51369,Guid,Guide,51369,doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1XRooFit_1_1xRooNode.html,1,['Guid'],['Guide']
Usability,"> Randomize(double alpha, double beta, Double_t& seed); Randomize matrix element values. void TMatrixTBase<Element> Streamer(TBuffer& ); Stream an object of class TMatrixTBase<Element>. template<class Element> Element TMatrixTBase<Element> SetTol(double newTol). Element * GetElements(). Int_t GetRowLwb() const; { return fRowLwb; }. Int_t GetRowUpb() const; { return fNrows+fRowLwb-1; }. Int_t GetNrows() const; { return fNrows; }. Int_t GetColLwb() const; { return fColLwb; }. Int_t GetColUpb() const; { return fNcols+fColLwb-1; }. Int_t GetNcols() const; { return fNcols; }. Int_t GetNoElements() const; { return fNelems; }. Element GetTol() const; { return fTol; }. const Element * GetMatrixArray() const. Element * GetMatrixArray(). const Int_t * GetRowIndexArray() const. Int_t * GetRowIndexArray(). const Int_t * GetColIndexArray() const. Int_t * GetColIndexArray(). TMatrixTBase<Element> & SetRowIndexArray(Int_t* data). TMatrixTBase<Element> & SetColIndexArray(Int_t* data). void Clear(Option_t* option = """"). void Invalidate(); { SetBit(kStatus); }. void MakeValid(); { ResetBit(kStatus); }. Bool_t IsValid() const; { return !TestBit(kStatus); }. Bool_t IsOwner() const; { return fIsOwner; }. TMatrixTBase<Element> & GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, TMatrixTBase<double>& target, Option_t* option = ""S"") const. TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t nr_nonzeros = -1). TMatrixTBase<Element> & ResizeTo(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Int_t nr_nonzeros = -1). Double_t Determinant() const; { AbstractMethod(""Determinant()""); return 0.; }. void Determinant(Double_t& d1, Double_t& d2) const; { AbstractMethod(""Determinant()""); d1 = 0.; d2 = 0.; }. Element NormInf() const; { return RowNorm(); }. Element Norm1() const; { return ColNorm(); }. Element operator()(Int_t rown, Int_t coln) const. Element & operator()(Int_t rown, Int_t coln). » Last changed: root/matrix:$Id$ » Last generated: 2015-03-14 16:45",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMatrixTBase_double_.html:21386,Clear,Clear,21386,root/html534/TMatrixTBase_double_.html,https://root.cern,https://root.cern/root/html534/TMatrixTBase_double_.html,1,['Clear'],['Clear']
Usability,"> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in input variable histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; Int_tTMVA::MethodBase::fNbinsMVAoutputnumber of bins in MVA output histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; TMVA::kNN::EventVecfEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = __null); standard constructor. MethodKNN(TMVA::DataSetInfo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__MethodKNN.html:17699,learn,learning,17699,root/html602/TMVA__MethodKNN.html,https://root.cern,https://root.cern/root/html602/TMVA__MethodKNN.html,2,['learn'],['learning']
Usability,">& a). template <class Element> inline const TMatrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMatrixT_float_.html:26350,Clear,Clear,26350,root/html534/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html534/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,">& a). template <class Element> inline const TMatrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id$ » Last generated: 2015-06-02 16:20; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMatrixT_float_.html:27179,Clear,Clear,27179,root/html604/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html604/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,">& a). template <class Element> inline const TMatrixT<Element> &TMatrixT<Element> Use(const TMatrixT<float>& a) const. template <class Element> inline TMatrixT<Element> TMatrixT<Element> GetSub(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, Option_t* option = ""S"") const. template <class Element> inline Element TMatrixT<Element> operator()(Int_t rown, Int_t coln) const. template <class Element> inline Element &TMatrixT<Element> operator()(Int_t rown, Int_t coln). void Plus(const TMatrixT <Element> &a,const TMatrixT <Element> &b); Elementary constructors. void Minus(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void TMult(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixT <Element> &b). void MultT(const TMatrixT <Element> &a,const TMatrixTSym<Element> &b); { Mult(a,b); }. const Int_t * GetRowIndexArray() const; { return 0; }. Int_t * GetRowIndexArray(); { return 0; }. const Int_t * GetColIndexArray() const; { return 0; }. Int_t * GetColIndexArray(); { return 0; }. TMatrixTBase<Element> & SetRowIndexArray(Int_t* ); { MayNotUse(""SetRowIndexArray(Int_t *)""); return *this; }. TMatrixTBase<Element> & SetColIndexArray(Int_t* ); { MayNotUse(""SetColIndexArray(Int_t *)""); return *this; }. void Clear(Option_t* = """"). TMatrixT <Element> & Use(Int_t row_lwb, Int_t row_upb, Int_t col_lwb, Int_t col_upb, float* data). TMatrixTBase<Element> & ResizeTo(Int_t nrows, Int_t ncols, Int_t = -1). const TMatrixTRow_const<Element> operator[](Int_t rown) const; or as a[i][j]. { return TMatrixTRow_const<Element>(*this,rown); }. TMatrixTRow <Element> operator[](Int_t rown); { return TMatrixTRow <Element>(*this,rown); }. » Last changed: root/matrix:$Id$ » Last generated: 2015-06-30 15:19; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMatrixT_float_.html:27198,Clear,Clear,27198,root/html602/TMatrixT_float_.html,https://root.cern,https://root.cern/root/html602/TMatrixT_float_.html,1,['Clear'],['Clear']
Usability,">&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsSelfCachedPdf.html:3216,clear,clearValueAndShapeDirty,3216,root/html532/RooAbsSelfCachedPdf.html,https://root.cern,https://root.cern/root/html532/RooAbsSelfCachedPdf.html,1,['clear'],['clearValueAndShapeDirty']
Usability,">&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsAnaConvPdf::coefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDecay.html:2705,clear,clearValueAndShapeDirty,2705,root/html532/RooDecay.html,https://root.cern,https://root.cern/root/html532/RooDecay.html,1,['clear'],['clearValueAndShapeDirty']
Usability,">&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*RooAbsAnaConvPdf::coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBCPEffDecay.html:3007,clear,clearValueAndShapeDirty,3007,root/html532/RooBCPEffDecay.html,https://root.cern,https://root.cern/root/html532/RooBCPEffDecay.html,4,['clear'],['clearValueAndShapeDirty']
Usability,">&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcoefAnalyticalIntegral(Int_t coef, Int_t code, const char* rangeName = 0) const; virtual Double_tcoefficient(Int_t basisIndex) const; virtual RooArgSet*coefVars(Int_t coefIdx) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooBDecay.html:2905,clear,clearValueAndShapeDirty,2905,root/html532/RooBDecay.html,https://root.cern,https://root.cern/root/html532/RooBDecay.html,1,['clear'],['clearValueAndShapeDirty']
Usability,">&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooArgusBG.html:2729,clear,clearValueAndShapeDirty,2729,root/html532/RooArgusBG.html,https://root.cern,https://root.cern/root/html532/RooArgusBG.html,49,['clear'],['clearValueAndShapeDirty']
Usability,">() const;; 48 ; 49 TFitResult* Get() const;; 50 ; 51 TFitResultPtr& operator= (const TFitResultPtr& rhs);; 52 ; 53 virtual ~TFitResultPtr();; 54 ; 55private:; 56 ; 57 int fStatus; ///< fit status code; 58 std::shared_ptr<TFitResult> fPointer; ///<! Smart Pointer to TFitResult class; 59 ; 60 ClassDef(TFitResultPtr,2) //indirection to TFitResult; 61};; 62 ; 63namespace cling {; 64 std::string printValue(const TFitResultPtr* val);; 65}; 66#endif; Rtypes.h; ClassDef#define ClassDef(name, id)Definition Rtypes.h:342; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TFitResultPtr::~TFitResultPtrvirtual ~TFitResultPtr()Destructor.Definition TFitResultPtr.cxx:55; TFitResultPtr::GetTFitResult * Get() constReturn contained pointer.Definition TFitResultPtr.cxx:86; TFitResultPtr::fPointerstd::shared_ptr< TFitResult > fPointer! Smart Pointer to TFitResult classDefinition TFitResultPtr.h:58; TFitResultPtr::fStatusint fStatusfit status codeDefinition TFitResultPtr.h:57; TFitResultPtr::operator*TFitResult & operator*() constImplement the de-reference operator to make the class acts as a pointer to a TFitResult assert in cas...Definition TFitResultPtr.cxx:63; TFitResultPtr::operator->TFitResult * operator->() constImplement the -> operator to make the class acts as a pointer to a TFitResult.Definition TFitResultPtr.cxx:75; TFitResultPtr::operator=TFitResultPtr & operator=(const TFitResultPtr &rhs)Assignment operator.Definition TFitResultPtr.cxx:94; TFitResultPtr::TFitResultPtrTFitResultPtr(int status=-1)Definition TFitResultPtr.h:35; TFitResultExtends the ROOT::Fit::Result class with a TNamed inheritance providing easy possibility for I/O.Definition TFitResult.h:34; int. histhistincTFitResultPtr.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFitResultPtr_8h_source.html:3465,Guid,Guide,3465,doc/master/TFitResultPtr_8h_source.html,https://root.cern,https://root.cern/doc/master/TFitResultPtr_8h_source.html,1,['Guid'],['Guide']
Usability,">(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RColor > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, RPadLength > ; (; const Value_t * ; rec). ◆ RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void >(). template<> . const RAttrMap::Value_t * ROOT::Experimental::RAttrMap::Value_t::GetValue< const RAttrMap::Value_t *, void > ; (; const Value_t * ; rec). ◆ REveLog(). REX::RLogChannel & ROOT::Experimental::REveLog ; (; ). Log channel for Eve diagnostics. ; Definition at line 51 of file REveTypes.cxx. ◆ swap(). template<int DIMENSIONS, class PRECISION , template< int D_, class P_ > class... STAT> . void ROOT::Experimental::swap ; (; RHist< DIMENSIONS, PRECISION, STAT... > & ; a, . RHist< DIMENSIONS, PRECISION, STAT... > & ; b . ). noexcept . Swap two histograms. ; Very efficient; swaps the fImpl pointers. ; Definition at line 210 of file RHist.hxx. Variable Documentation. ◆ gEve. REveManager * ROOT::Experimental::gEve = nullptr. Definition at line 286 of file REveManager.hxx. ◆ kInvalidColumnId. constexpr ColumnId_t ROOT::Experimental::kInvalidColumnId = -1. constexpr . Definition at line 104 of file RNTupleUtil.hxx. ◆ kInvalidDescriptorId. constexpr DescriptorId_t ROOT::Experimental::kInvalidDescriptorId = std::uint64_t(-1). constexpr . Definition at line 108 of file RNTupleUtil.hxx. ◆ kInvalidNTupleIndex. constexpr NTupleSize_t ROOT::Experimental::kInvalidNTupleIndex = std::uint64_t(-1). constexpr . Definition at line 49 of file RNTupleUtil.hxx. ◆ kUnknownCompressionSettings. constexpr int ROOT::Experimental::kUnknownCompressionSettings = -1. constexpr . Definition at line 66 of file RNTupleUtil.hxx. ROOTExperimental. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html:57192,Guid,Guide,57192,doc/v632/namespaceROOT_1_1Experimental.html,https://root.cern,https://root.cern/doc/v632/namespaceROOT_1_1Experimental.html,1,['Guid'],['Guide']
Usability,">(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tBuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidCopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tCopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*CreateBasket(TBranch*); Int_tDebug() const; virtual voidDelete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual Long64_tDraw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0)MENU ; virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTree.html:14538,undo,undo,14538,root/html602/TTree.html,https://root.cern,https://root.cern/root/html602/TTree.html,2,['undo'],['undo']
Usability,">. Function Members (Methods); public:. THnT<unsigned long>(); THnT<unsigned long>(const char* name, const char* title, Int_t dim, const Int_t* nbins, const Double_t* xmin, const Double_t* xmax); ~THnT<unsigned long>(); voidTObject::AbstractMethod(const char* method) const; voidTHnBase::Add(const THnBase* h, Double_t c = 1.); voidTHnBase::Add(const TH1* hist, Double_t c = 1.); voidTHn::AddBinContent(const Int_t* idx, Double_t v = 1.); virtual voidTHn::AddBinContent(Long64_t bin, Double_t v = 1.); virtual voidTHn::AddBinError2(Long64_t bin, Double_t e2); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTHnBase::Browse(TBrowser* b); voidTHnBase::CalculateErrors(Bool_t calc = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; Double_tTHnBase::ComputeIntegral(); virtual voidTNamed::Copy(TObject& named) const; static THn*THn::CreateHn(const char* name, const char* title, const TH1* h1); static THn*THn::CreateHn(const char* name, const char* title, const THnBase* hn); virtual ROOT::THnBaseBinIter*THn::CreateIter(Bool_t respectAxisRange) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); voidTHnBase::Divide(const THnBase* h); voidTHnBase::Divide(const THnBase* h1, const THnBase* h2, Double_t c1 = 1., Double_t c2 = 1., Option_t* option = """"); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THnT_unsigned_long_.html:2268,Clear,Clear,2268,root/html534/THnT_unsigned_long_.html,https://root.cern,https://root.cern/root/html534/THnT_unsigned_long_.html,1,['Clear'],['Clear']
Usability,>::BaseParFunc. Definition at line 71 of file ParamFunction.h. Constructor & Destructor Documentation. ◆ ParamFunction(). template<class IPFType > . ROOT::Math::ParamFunction< IPFType >::ParamFunction ; (; unsigned int ; npar = 0). inline . Construct a parameteric function with npar parameters. ; Parameters. nparnumber of parameters (default is zero) . Definition at line 78 of file ParamFunction.h. ◆ ~ParamFunction(). template<class IPFType > . virtual ROOT::Math::ParamFunction< IPFType >::~ParamFunction ; (; ). inlinevirtual . Definition at line 85 of file ParamFunction.h. Member Function Documentation. ◆ NPar(). template<class IPFType > . unsigned int ROOT::Math::ParamFunction< IPFType >::NPar ; (; ); const. inline . Return the number of parameters. ; Definition at line 112 of file ParamFunction.h. ◆ Parameters(). template<class IPFType > . virtual const double * ROOT::Math::ParamFunction< IPFType >::Parameters ; (; ); const. inlinevirtual . Access the parameter values. ; Definition at line 96 of file ParamFunction.h. ◆ SetParameters(). template<class IPFType > . virtual void ROOT::Math::ParamFunction< IPFType >::SetParameters ; (; const double * ; p). inlinevirtual . Set the parameter values. ; Parameters. pvector of doubles containing the parameter values. . Definition at line 102 of file ParamFunction.h. Member Data Documentation. ◆ fNpar. template<class IPFType > . unsigned int ROOT::Math::ParamFunction< IPFType >::fNpar. private . Return true if the calculation of derivatives is implemented. ; Return true if the calculation of derivatives with respect to the Parameters is implemented ; Definition at line 137 of file ParamFunction.h. ◆ fParams. template<class IPFType > . std::vector<double> ROOT::Math::ParamFunction< IPFType >::fParams. protected . Definition at line 142 of file ParamFunction.h. math/mathmore/inc/Math/ParamFunction.h. ROOTMathParamFunction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunction.html:4430,Guid,Guide,4430,doc/master/classROOT_1_1Math_1_1ParamFunction.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1ParamFunction.html,1,['Guid'],['Guide']
Usability,>::~OneDimParamFunctionAdapter ; (; ). inlineoverride . Destructor (no operations) ; Definition at line 234 of file OneDimFunctionAdapter.h. Member Function Documentation. ◆ Clone(). template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . OneDimParamFunctionAdapter * ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::Clone ; (; ); const. inlineoverridevirtual . clone ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 239 of file OneDimFunctionAdapter.h. ◆ DoEval(). template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . double ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::DoEval ; (; double ; x); const. inlineoverrideprivatevirtual . evaluate function at the values x[] given in the constructor and as function of the coordinate fCoord. ; Implements ROOT::Math::IBaseFunctionOneDim.; Definition at line 251 of file OneDimFunctionAdapter.h. Member Data Documentation. ◆ fFunc. template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . ParamFuncType ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::fFunc. private . Definition at line 264 of file OneDimFunctionAdapter.h. ◆ fIpar. template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . unsigned int ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::fIpar. private . Definition at line 267 of file OneDimFunctionAdapter.h. ◆ fParams. template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . const double* ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::fParams. private . Definition at line 266 of file OneDimFunctionAdapter.h. ◆ fX. template<class ParamFuncType = ROOT::Math::IParamMultiFunction &> . const double* ROOT::Math::OneDimParamFunctionAdapter< ParamFuncType >::fX. private . Definition at line 265 of file OneDimFunctionAdapter.h. math/mathcore/inc/Math/OneDimFunctionAdapter.h. ROOTMathOneDimParamFunctionAdapter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:23 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html:4996,Guid,Guide,4996,doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1OneDimParamFunctionAdapter.html,1,['Guid'],['Guide']
Usability,">; sigma2 1.0000e+00 1.7671e+00 +/- 1.18e+00 <none>; ; 1) RooRealVar:: a0 = 0.72873 +/- 0.112573; 2) RooRealVar:: bkgfrac = 0.43445 +/- 0.085744; 3) RooRealVar:: mean = 5.03451 +/- 0.0336279; 4) RooRealVar:: sig1frac = 0.777578 +/- 0.0971233; 5) RooRealVar:: sigma1 = 0.523178 +/- 0.0455077; 6) RooRealVar:: sigma2 = 1.76714 +/- 1.18159; ; 6x6 matrix is as follows; ; | 0 | 1 | 2 | 3 | 4 |; ----------------------------------------------------------------------; 0 | 1 -0.8038 -0.02304 -0.3837 0.4249 ; 1 | -0.8038 1 -0.05161 0.6011 -0.4042 ; 2 | -0.02304 -0.05161 1 -0.08752 -0.04055 ; 3 | -0.3837 0.6011 -0.08752 1 0.2836 ; 4 | 0.4249 -0.4042 -0.04055 0.2836 1 ; 5 | 0.8347 -0.8794 0.0146 -0.2731 0.5878 ; ; ; | 5 |; ----------------------------------------------------------------------; 0 | 0.8347 ; 1 | -0.8794 ; 2 | 0.0146 ; 3 | -0.2731 ; 4 | 0.5878 ; 5 | 1 ; ; ; 6x6 matrix is as follows; ; | 0 | 1 | 2 | 3 | 4 |; ----------------------------------------------------------------------; 0 | 0.01295 -0.007884 -8.818e-05 -0.004281 0.002201 ; 1 | -0.007884 0.007427 -0.0001496 0.005078 -0.001585 ; 2 | -8.818e-05 -0.0001496 0.001131 -0.0002885 -6.206e-05 ; 3 | -0.004281 0.005078 -0.0002885 0.00961 0.001265 ; 4 | 0.002201 -0.001585 -6.206e-05 0.001265 0.002071 ; 5 | 0.1142 -0.09113 0.0005905 -0.0322 0.03217 ; ; ; | 5 |; ----------------------------------------------------------------------; 0 | 0.1142 ; 1 | -0.09113 ; 2 | 0.0005905 ; 3 | -0.0322 ; 4 | 0.03217 ; 5 | 1.446 ; ; EDM = 0.0003810824372158841; -log(L) minimum = 1885.344093393465; final value of floating parameters; correlation between sig1frac and a0 is -0.3837127139109296; correlation between bkgfrac and mean is -0.05161247508597615; correlation matrix; covariance matrix; DateFebruary 2018 ; AuthorsClemens Lange, Wouter Verkerke (C++ version) ; Definition in file rf607_fitresult.py. tutorialsroofitrf607_fitresult.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf607__fitresult_8py.html:7557,Guid,Guide,7557,doc/master/rf607__fitresult_8py.html,https://root.cern,https://root.cern/doc/master/rf607__fitresult_8py.html,1,['Guid'],['Guide']
Usability,>> 1. constexpr . Definition at line 104 of file RtypesCore.h. ◆ kMaxInt. constexpr Int_t kMaxInt = Int_t(kMaxUInt >> 1). constexpr . Definition at line 112 of file RtypesCore.h. ◆ kMaxLong. constexpr Long_t kMaxLong = Long_t(kMaxULong >> 1). constexpr . Definition at line 116 of file RtypesCore.h. ◆ kMaxLong64. constexpr Long64_t kMaxLong64 = Long64_t(kMaxULong64 >> 1). constexpr . Definition at line 120 of file RtypesCore.h. ◆ kMaxShort. constexpr Int_t kMaxShort = kMaxUShort >> 1. constexpr . Definition at line 108 of file RtypesCore.h. ◆ kMaxUChar. constexpr Int_t kMaxUChar = 256. constexpr . Definition at line 103 of file RtypesCore.h. ◆ kMaxUInt. constexpr UInt_t kMaxUInt = UInt_t(~0). constexpr . Definition at line 111 of file RtypesCore.h. ◆ kMaxULong. constexpr ULong_t kMaxULong = ULong_t(~0). constexpr . Definition at line 115 of file RtypesCore.h. ◆ kMaxULong64. constexpr ULong64_t kMaxULong64 = ULong64_t(~0LL). constexpr . Definition at line 119 of file RtypesCore.h. ◆ kMaxUShort. constexpr Int_t kMaxUShort = 65534. constexpr . Definition at line 107 of file RtypesCore.h. ◆ kMinChar. constexpr Int_t kMinChar = -kMaxChar - 1. constexpr . Definition at line 105 of file RtypesCore.h. ◆ kMinInt. constexpr Int_t kMinInt = -kMaxInt - 1. constexpr . Definition at line 113 of file RtypesCore.h. ◆ kMinLong. constexpr Long_t kMinLong = -kMaxLong - 1. constexpr . Definition at line 117 of file RtypesCore.h. ◆ kMinLong64. constexpr Long64_t kMinLong64 = -kMaxLong64 - 1. constexpr . Definition at line 121 of file RtypesCore.h. ◆ kMinShort. constexpr Int_t kMinShort = -kMaxShort - 1. constexpr . Definition at line 109 of file RtypesCore.h. ◆ kNPOS. constexpr Ssiz_t kNPOS = ~(Ssiz_t)0. constexpr . Definition at line 124 of file RtypesCore.h. ◆ kTRUE. constexpr Bool_t kTRUE = true. constexpr . Definition at line 100 of file RtypesCore.h. corefoundationincRtypesCore.h. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:09:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RtypesCore_8h.html:12090,Guid,Guide,12090,doc/v632/RtypesCore_8h.html,https://root.cern,https://root.cern/doc/v632/RtypesCore_8h.html,1,['Guid'],['Guide']
Usability,">>> for i in v:; ... print(i, end=' '); 1 2 3 4 5 6 7 8 9; >>>; >>> list(v); [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; >>>; The parameters to the template instantiation can either be an actual type or value (as is used here, “int”), or a string representation of the parameters (e.g. “‘double’”), or a mixture of both (e.g. “‘TCanvas, 0’” or “‘double’, 0” ). The “std::vector<int>” class is one of the classes builtin by default into the Cling extension dlls. You will get a non-functional class (instances of which can still be passed around to C++) if the corresponding dictionary doesn’t exist.; 19.1.5.3 Access to ROOT Globals; Most globals and global functions can be imported directly from the ROOT.py module, but some common ones (most notably gMinuit, although that variable now exists at startup from release 5.08 onward) do not exist yet at program startup, as they exist in modules that are loaded later (e.g. through the auto-loading mechanism). An example session should make this clear:; >>> from ROOT import *; >>> gROOT # directly available; <ROOT.TROOT object at 0x399c30>; >>> gMinuit # library not yet loaded: not available; Traceback (most recent call last):; File ""<stdin>"", line 1, in ?; NameError: name 'gMinuit' is not defined; >>> TMinuit # use of TMinuit class forces auto-loading; <class '__main__.TMinuit'>; >>> gMinuit # now gMinuit is available; <__main__.TMinuit object at 0x1458c70>; >>> not not gMinuit # but it is the null pointer, until set; False; >>> g = TMinuit(); >>> not not gMinuit; True; It is also possible to create globals interactively, either by executing a Cling macro, or by a call to gROOT.ProcessLine(). These globals are made available in the same way: either use them directly after creation in ‘from ROOT import *’ more, or get them from the ROOT namespace after an ‘import ROOT’.; As of 5.08, the behaviour of ROOT globals is the same as python globals, which is sometimes counterintuitive: since they are references, they can be changed only if done so di",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1053967,clear,clear,1053967,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['clear'],['clear']
Usability,">Draw();. Function Members (Methods); public:. virtual~TF12(); voidTObject::AbstractMethod(const char* method) const; static voidTF1::AbsValue(Bool_t reject = kTRUE); virtual voidTFormula::Analyze(const char* schain, Int_t& err, Int_t offset = 0); virtual Bool_tTFormula::AnalyzeFunction(TString& chaine, Int_t& err, Int_t offset = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTF1::Browse(TBrowser* b); static voidTF1::CalcGaussLegendreSamplingPoints(Int_t num, Double_t* x, Double_t* w, Double_t eps = 3.0E-11); virtual Double_tTF1::CentralMoment(Double_t n, Double_t a, Double_t b, const Double_t* params = 0, Double_t epsilon = 9.9999999999999995E-7); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTFormula::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Int_tTFormula::Compile(const char* expression = """"); virtual voidCopy(TObject& f12) const; virtual char*TFormula::DefinedString(Int_t code); virtual Double_tTFormula::DefinedValue(Int_t code); virtual Int_tTFormula::DefinedVariable(TString& variable, Int_t& action); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Double_tTF1::Derivative(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative2(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; virtual Double_tTF1::Derivative3(Double_t x, Double_t* params = 0, Double_t epsilon = 0.001) const; static Double_tTF1::DerivativeError(); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTF1::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTF1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TF1*DrawCopy(Option_t* option = """") const; virtual TObject*TF1::DrawDeriv",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TF12.html:1235,Clear,Clear,1235,root/html602/TF12.html,https://root.cern,https://root.cern/root/html602/TF12.html,1,['Clear'],['Clear']
Usability,">Gaus(-1,1.5);; xs1 = gRandom->Gaus(-0.5,0.5);; xs2 = gRandom->Landau(1,0.15);; main->Fill(xmain);; s1->Fill(xs1,0.3);; s2->Fill(xs2,0.2);; total->Fill(xmain);; total->Fill(xs1,0.3);; total->Fill(xs2,0.2);; }; timer.TurnOff();; hsumUpdate();; }; mainint main()Definition Prototype.cxx:12; s1#define s1(x)Definition RSha256.hxx:91; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; gRandomR__EXTERN TRandom * gRandomDefinition TRandom.h:62; gSystemR__EXTERN TSystem * gSystemDefinition TSystem.h:561; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TRandom::Gausvirtual Double_t Gaus(Double_t mean=0, Double_t sigma=1)Samples a random number from the standard Normal (Gaussian) Distribution with the given mean and sigm...Definition TRandom.cxx:275; TRandom::SetSeedvirtual void SetSeed(ULong_t seed=0)Set the random generator seed.Definition TRandom.cxx:615; TRandom::Landauvirtual Double_t Landau(Double_t mean=0, Double_t sigma=1)Generate a random number following a Landau distribution with location parameter mu and scale paramet...Definition TRandom.cxx:381; TSliderA specialized TPad including a TSliderBox object.Definition TSlider.h:17; TSlider::SetRangevirtual void SetRange(Double_t xmin=0, Double_t xmax=1)Set Slider range in [0,1].Definition TSlider.cxx:183; TSystem::ProcessEventsvirtual Bool_t ProcessEvents()Process pending events (GUI, timers, sockets).Definition TSystem.cxx:416; TTimerHandles synchronous and a-synchronous timer events.Definition TTimer.h:51; c1return c1Definition legend1.C:41; AuthorRene Brun ; Definition in file hsumTimer.C. tutorialshisthsumTimer.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hsumTimer_8C.html:3707,Guid,Guide,3707,doc/master/hsumTimer_8C.html,https://root.cern,https://root.cern/doc/master/hsumTimer_8C.html,1,['Guid'],['Guide']
Usability,">GetLabelSize();; 3632 Int_t XNdiv = fHistogram->GetXaxis()->GetNdivisions();; 3633 Int_t YNdiv = fHistogram->GetYaxis()->GetNdivisions();; 3634 ; 3635 delete fHistogram;; 3636 fHistogram = nullptr;; 3637 GetHistogram();; 3638 ; 3639 fHistogram->GetXaxis()->SetTitle(XAxisTitle.Data());; 3640 fHistogram->GetYaxis()->SetTitle(YAxisTitle.Data());; 3641 fHistogram->GetXaxis()->SetLabelColor(XLabCol);; 3642 fHistogram->GetYaxis()->SetLabelColor(YLabCol);; 3643 fHistogram->GetXaxis()->SetLabelFont(XLabFont);; 3644 fHistogram->GetYaxis()->SetLabelFont(YLabFont);; 3645 fHistogram->GetXaxis()->SetLabelOffset(XLabOffset);; 3646 fHistogram->GetYaxis()->SetLabelOffset(YLabOffset);; 3647 fHistogram->GetXaxis()->SetLabelSize(XLabSize);; 3648 fHistogram->GetYaxis()->SetLabelSize(YLabSize);; 3649 fHistogram->GetXaxis()->SetNdivisions(XNdiv);; 3650 fHistogram->GetYaxis()->SetNdivisions(YNdiv);; 3651 }; 3652 if (!fIntegral.empty()) {; 3653 fIntegral.clear();; 3654 fAlpha.clear();; 3655 fBeta.clear();; 3656 fGamma.clear();; 3657 }; 3658 if (fNormalized) {; 3659 // need to compute the integral of the not-normalized function; 3660 fNormalized = false;; 3661 fNormIntegral = Integral(fXmin, fXmax, 0.0);; 3662 fNormalized = true;; 3663 } else; 3664 fNormIntegral = 0;; 3665 ; 3666 // std::vector<double>x(fNdim);; 3667 // if ((fType == 1) && !fFunctor->Empty()) (*fFunctor)x.data(), (Double_t*)fParams);; 3668 if (fType == EFType::kCompositionFcn && fComposition) {; 3669 // double-check that the parameters are correct; 3670 fComposition->SetParameters(GetParameters());; 3671 ; 3672 fComposition->Update(); // should not be necessary, but just to be safe; 3673 }; 3674}; 3675 ; 3676////////////////////////////////////////////////////////////////////////////////; 3677/// Static function to set the global flag to reject points; 3678/// the fgRejectPoint global flag is tested by all fit functions; 3679/// if TRUE the point is not included in the fit.; 3680/// This flag can be set by a user in a fitt",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TF1_8cxx_source.html:139356,clear,clear,139356,doc/master/TF1_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TF1_8cxx_source.html,1,['clear'],['clear']
Usability,">GetName());; 1386 // Exception; 1387 return a;; 1388 }; 1389 ; 1390 a->Streamer(b);; 1391 ; 1392 b.CheckByteCount(startpos, tag, clRef);; 1393 }; 1394 ; 1395 return a;; 1396}; 1397 ; 1398////////////////////////////////////////////////////////////////////////////////; 1399/// Returns size string will occupy on I/O buffer.; 1400 ; 1401Int_t TString::Sizeof() const; 1402{; 1403 if (Length() > 254); 1404 return Length()+sizeof(UChar_t)+sizeof(Int_t);; 1405 else; 1406 return Length()+sizeof(UChar_t);; 1407}; 1408 ; 1409////////////////////////////////////////////////////////////////////////////////; 1410/// Stream a string object.; 1411 ; 1412void TString::Streamer(TBuffer &b); 1413{; 1414 if (b.IsReading()) {; 1415 b.ReadTString(*this);; 1416 } else {; 1417 b.WriteTString(*this);; 1418 }; 1419}; 1420 ; 1421////////////////////////////////////////////////////////////////////////////////; 1422/// Write TString object to buffer. Simplified version of; 1423/// TBuffer::WriteObject (does not keep track of multiple; 1424/// references to the same string). We need to have it here; 1425/// because TBuffer::ReadObject can only handle descendant; 1426/// of TObject; 1427 ; 1428void TString::WriteString(TBuffer &b, const TString *a); 1429{; 1430 R__ASSERT(b.IsWriting());; 1431 ; 1432 // Make sure WriteMap is initialized; 1433 b.InitMap();; 1434 ; 1435 if (!a) {; 1436 ; 1437 b << (UInt_t) 0;; 1438 ; 1439 } else {; 1440 ; 1441 // Reserve space for leading byte count; 1442 UInt_t cntpos = UInt_t(b.Length());; 1443 b.SetBufferOffset(Int_t(cntpos+sizeof(UInt_t)));; 1444 ; 1445 TClass *cl = a->IsA();; 1446 b.WriteClass(cl);; 1447 ; 1448 ((TString *)a)->Streamer(b);; 1449 ; 1450 // Write byte count; 1451 b.SetByteCount(cntpos);; 1452 }; 1453}; 1454 ; 1455////////////////////////////////////////////////////////////////////////////////; 1456/// Read string from TBuffer. Function declared in ClassDef.; 1457 ; 1458#if defined(R__TEMPLATE_OVERLOAD_BUG); 1459template <>; 1460#endif; 1461TBuf",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TString_8cxx_source.html:42977,Simpl,Simplified,42977,doc/master/TString_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TString_8cxx_source.html,1,['Simpl'],['Simplified']
Usability,">GetView();; 895 if (!view) {; 896 view = TView::CreateView(11, nullptr, nullptr);; 897 // Set the view to perform a first autorange (frame) draw.; 898 // TViewer3DPad will revert view to normal painting after this; 899 view->SetAutoRange(kTRUE);; 900 if (has_pad); 901 gPad->Update();; 902 }; 903 PaintShape(shape, ""range"");; 904 view->SetAutoRange(kFALSE);; 905 view->SetPerspective();; 906 // Create a 3D viewer to paint us; 907 gPad->GetViewer3D(option);; 908}; 909 ; 910////////////////////////////////////////////////////////////////////////////////; 911/// Draw an overlap.; 912 ; 913void TGeoPainter::DrawOverlap(void *ovlp, Option_t *option); 914{; 915 TString opt = option;; 916 fIsPaintingShape = kFALSE;; 917 TGeoOverlap *overlap = (TGeoOverlap *)ovlp;; 918 if (!overlap); 919 return;; 920 ; 921 fPaintingOverlaps = kTRUE;; 922 fOverlap = overlap;; 923 opt.ToLower();; 924 if (fVisLock) {; 925 ClearVisibleVolumes();; 926 fVisLock = kFALSE;; 927 }; 928 Bool_t has_pad = (gPad == nullptr) ? kFALSE : kTRUE;; 929 // Clear pad if option ""same"" not given; 930 if (!gPad) {; 931 gROOT->MakeDefCanvas();; 932 }; 933 if (!opt.Contains(""same"")); 934 gPad->Clear();; 935 // append this volume to pad; 936 overlap->AppendPad(option);; 937 ; 938 // Create a 3-D view; 939 // Create a 3D viewer to paint us; 940 gPad->GetViewer3D(option);; 941 TView *view = gPad->GetView();; 942 if (!view) {; 943 view = TView::CreateView(11, nullptr, nullptr);; 944 // Set the view to perform a first autorange (frame) draw.; 945 // TViewer3DPad will revert view to normal painting after this; 946 view->SetAutoRange(kTRUE);; 947 PaintOverlap(ovlp, ""range"");; 948 overlap->GetPolyMarker()->Draw(""SAME"");; 949 if (has_pad); 950 gPad->Update();; 951 }; 952 ; 953 // If we are drawing into the pad, then the view needs to be; 954 // set to perspective; 955 // if (!view->IsPerspective()) view->SetPerspective();; 956 fVisLock = kTRUE;; 957}; 958 ; 959///////////////////////////////////////////////////////////////////",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoPainter_8cxx_source.html:29579,Clear,ClearVisibleVolumes,29579,doc/master/TGeoPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGeoPainter_8cxx_source.html,2,['Clear'],"['Clear', 'ClearVisibleVolumes']"
Usability,">GetXaxis()->GetTitle());; 11496 hp->SetZTitle(""Number of Entries"");; 11497 hp->Draw(fShowOption.Data());; 11498 }; 11499 }; 11500 break;; 11501 ; 11502 case 5:; 11503 // ""yx""; 11504 {; 11505 Int_t first = zaxis->GetFirst();; 11506 Int_t last = zaxis->GetLast();; 11507 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11508 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11509 zaxis->SetRange(binz,binz2);; 11510 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11511 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11512 xx[0] = xaxis->GetXmin();; 11513 xx[1] = yaxis->GetXmax();; 11514 xx[2] = zaxis->GetBinCenter(binz);; 11515 view->WCtoNDC(xx,u);; 11516 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11517 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11518 rect1[4].SetX(rect1[0].GetX());; 11519 rect1[4].SetY(rect1[0].GetY());; 11520 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX());; 11541 rect2[4].SetY(rect2[0].GetY());; 11542 xx[0] = xaxis->GetXmax();; 11543 view->WCtoNDC(xx,u);; 11544 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11545 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11546 xx[1] = yaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:418675,ux,uxmin,418675,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">GetXaxis()->GetTitle());; 11636 hp->SetZTitle(""Number of Entries"");; 11637 hp->Draw(fShowOption.Data());; 11638 }; 11639 }; 11640 break;; 11641 ; 11642 case 7:; 11643 // ""zx""; 11644 {; 11645 Int_t first = yaxis->GetFirst();; 11646 Int_t last = yaxis->GetLast();; 11647 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11648 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11649 yaxis->SetRange(biny,biny2);; 11650 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11651 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11652 xx[0] = xaxis->GetXmin();; 11653 xx[2] = zaxis->GetXmax();; 11654 xx[1] = yaxis->GetBinCenter(biny);; 11655 view->WCtoNDC(xx,u);; 11656 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11657 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11658 rect1[4].SetX(rect1[0].GetX());; 11659 rect1[4].SetY(rect1[0].GetY());; 11660 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX());; 11681 rect2[4].SetY(rect2[0].GetY());; 11682 xx[0] = xaxis->GetXmax();; 11683 view->WCtoNDC(xx,u);; 11684 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11685 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11686 xx[2] = zaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:424461,ux,uxmin,424461,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">GetYaxis()->GetTitle());; 11566 hp->SetZTitle(""Number of Entries"");; 11567 hp->Draw(fShowOption.Data());; 11568 }; 11569 }; 11570 break;; 11571 ; 11572 case 6:; 11573 // ""xz""; 11574 {; 11575 Int_t first = yaxis->GetFirst();; 11576 Int_t last = yaxis->GetLast();; 11577 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11578 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11579 yaxis->SetRange(biny,biny2);; 11580 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11581 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11582 xx[0] = xaxis->GetXmin();; 11583 xx[2] = zaxis->GetXmax();; 11584 xx[1] = yaxis->GetBinCenter(biny);; 11585 view->WCtoNDC(xx,u);; 11586 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11587 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11588 rect1[4].SetX(rect1[0].GetX());; 11589 rect1[4].SetY(rect1[0].GetY());; 11590 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX());; 11611 rect2[4].SetY(rect2[0].GetY());; 11612 xx[0] = xaxis->GetXmax();; 11613 view->WCtoNDC(xx,u);; 11614 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11615 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11616 xx[2] = zaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:421568,ux,uxmin,421568,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">GetYaxis()->GetTitle());; 11776 hp->SetZTitle(""Number of Entries"");; 11777 hp->Draw(fShowOption.Data());; 11778 }; 11779 }; 11780 break;; 11781 ; 11782 case 9:; 11783 // ""zy""; 11784 {; 11785 Int_t first = xaxis->GetFirst();; 11786 Int_t last = xaxis->GetLast();; 11787 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11788 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11789 xaxis->SetRange(binx,binx2);; 11790 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11791 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11792 xx[2] = zaxis->GetXmin();; 11793 xx[1] = yaxis->GetXmax();; 11794 xx[0] = xaxis->GetBinCenter(binx);; 11795 view->WCtoNDC(xx,u);; 11796 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11797 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11798 rect1[4].SetX(rect1[0].GetX());; 11799 rect1[4].SetY(rect1[0].GetY());; 11800 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX());; 11821 rect2[4].SetY(rect2[0].GetY());; 11822 xx[2] = zaxis->GetXmax();; 11823 view->WCtoNDC(xx,u);; 11824 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11825 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11826 xx[1] = yaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:430247,ux,uxmin,430247,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">GetZaxis()->GetTitle());; 11425 hp->SetYTitle(""Number of Entries"");; 11426 hp->Draw(fShowOption.Data());; 11427 }; 11428 }; 11429 break;; 11430 ; 11431 case 4:; 11432 // ""xy""; 11433 {; 11434 Int_t first = zaxis->GetFirst();; 11435 Int_t last = zaxis->GetLast();; 11436 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11437 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11438 zaxis->SetRange(binz,binz2);; 11439 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11440 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11441 xx[0] = xaxis->GetXmin();; 11442 xx[1] = yaxis->GetXmax();; 11443 xx[2] = zaxis->GetBinCenter(binz);; 11444 view->WCtoNDC(xx,u);; 11445 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11446 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11447 rect1[4].SetX(rect1[0].GetX());; 11448 rect1[4].SetY(rect1[0].GetY());; 11449 xx[0] = xaxis->GetXmax();; 11450 view->WCtoNDC(xx,u);; 11451 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11452 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11453 xx[1] = yaxis->GetXmin();; 11454 view->WCtoNDC(xx,u);; 11455 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11456 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11457 xx[0] = xaxis->GetXmin();; 11458 view->WCtoNDC(xx,u);; 11459 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11460 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11461 gVirtualX->DrawPolyLine(5,rect1);; 11462 if (nbins>1) {; 11463 xx[0] = xaxis->GetXmin();; 11464 xx[1] = yaxis->GetXmax();; 11465 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11466 view->WCtoNDC(xx,u);; 11467 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11468 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11469 rect2[4].SetX(rect2[0].GetX());; 11470 rect2[4].SetY(rect2[0].GetY());; 11471 xx[0] = xaxis->GetXmax();; 11472 view->WCtoNDC(xx,u);; 11473 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11474 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11475 xx[1] = yaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:415774,ux,uxmin,415774,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">GetZaxis()->GetTitle());; 11706 hp->SetZTitle(""Number of Entries"");; 11707 hp->Draw(fShowOption.Data());; 11708 }; 11709 }; 11710 break;; 11711 ; 11712 case 8:; 11713 // ""yz""; 11714 {; 11715 Int_t first = xaxis->GetFirst();; 11716 Int_t last = xaxis->GetLast();; 11717 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11718 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11719 xaxis->SetRange(binx,binx2);; 11720 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11721 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11722 xx[2] = zaxis->GetXmin();; 11723 xx[1] = yaxis->GetXmax();; 11724 xx[0] = xaxis->GetBinCenter(binx);; 11725 view->WCtoNDC(xx,u);; 11726 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11727 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11728 rect1[4].SetX(rect1[0].GetX());; 11729 rect1[4].SetY(rect1[0].GetY());; 11730 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX());; 11751 rect2[4].SetY(rect2[0].GetY());; 11752 xx[2] = zaxis->GetXmax();; 11753 view->WCtoNDC(xx,u);; 11754 rect2[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11755 rect2[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11756 xx[1] = yaxis->GetXmin();; 1",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:427354,ux,uxmin,427354,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,">MakeDefCanvas();; 10842 gPad->SetName(TString::Format(""c_%zx_projection2_%d"", (size_t)fH, fShowProjection2).Data());; 10843 gPad->SetGrid();; 10844}; 10845 ; 10846 ; 10847////////////////////////////////////////////////////////////////////////////////; 10848/// Show projection onto X.; 10849 ; 10850void THistPainter::ShowProjectionX(Int_t /*px*/, Int_t py); 10851{; 10852 ; 10853 Int_t nbins = (Int_t)fShowProjection/100;; 10854 gPad->SetDoubleBuffer(0); // turn off double buffer mode; 10855 gVirtualX->SetDrawMode(TVirtualX::kInvert); // set the drawing mode to XOR mode; 10856 ; 10857 // Erase old position and draw a line at current position; 10858 static int pyold1 = 0;; 10859 static int pyold2 = 0;; 10860 float uxmin = gPad->GetUxmin();; 10861 float uxmax = gPad->GetUxmax();; 10862 int pxmin = gPad->XtoAbsPixel(uxmin);; 10863 int pxmax = gPad->XtoAbsPixel(uxmax);; 10864 Float_t upy = gPad->AbsPixeltoY(py);; 10865 Float_t y = gPad->PadtoY(upy);; 10866 Int_t biny1 = fH->GetYaxis()->FindBin(y);; 10867 Int_t biny2 = TMath::Min(biny1+nbins-1, fH->GetYaxis()->GetNbins());; 10868 Int_t py1 = gPad->YtoAbsPixel(fH->GetYaxis()->GetBinLowEdge(biny1));; 10869 Int_t py2 = gPad->YtoAbsPixel(fH->GetYaxis()->GetBinUpEdge(biny2));; 10870 ; 10871 if (pyold1 || pyold2) gVirtualX->DrawBox(pxmin,pyold1,pxmax,pyold2,TVirtualX::kFilled);; 10872 gVirtualX->DrawBox(pxmin,py1,pxmax,py2,TVirtualX::kFilled);; 10873 pyold1 = py1;; 10874 pyold2 = py2;; 10875 ; 10876 // Create or set the new canvas proj x; 10877 TVirtualPad::TContext ctxt(true);; 10878 auto name1 = TString::Format(""c_%zx_projection_%d"", (size_t)fH, fShowProjection);; 10879 TVirtualPad *c = (TVirtualPad*)gROOT->GetListOfCanvases()->FindObject(name1.Data());; 10880 if (c) {; 10881 c->Clear();; 10882 } else {; 10883 fShowProjection = 0;; 10884 fShowProjection2 = 0;; 10885 pyold1 = 0;; 10886 pyold2 = 0;; 10887 return;; 10888 }; 10889 c->cd();; 10890 c->SetLogy(ctxt.GetSaved()->GetLogz());; 10891 c->SetLogx(ctxt.GetSaved()->GetLogx()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:390128,ux,uxmin,390128,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,4,['ux'],"['uxmax', 'uxmin']"
Usability,">PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2383 }; 2384 } else {; 2385 wminstep = wmin + 0.5*delta;; 2386 for (i=first; i<=last;i++) {; 2387 if (!optionBins) ym = wminstep+(i-first)*delta+0.5*delta;; 2388 else ym = y[i-1] + 0.5*(y[i]-y[i-1]);; 2389 xm = x[i-1];; 2390 if (optionMark != 10) {; 2391 if (xm<rwxmax && xm > rwxmin) {; 2392 npt++;; 2393 gxwork[npt-1] = xm;; 2394 gywork[npt-1] = ym;; 2395 }; 2396 } else {; 2397 if (xm<rwxmax && xm >= rwxmin) {; 2398 npt++;; 2399 gxwork[npt-1] = xm;; 2400 gywork[npt-1] = ym;; 2401 }; 2402 }; 2403 if (npt >= fgMaxPointsPerLine) {; 2404 ComputeLogs(npt, optionZ);; 2405 gPad->PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2406 npt = 0;; 2407 }; 2408 }; 2409 if (npt > 0) {; 2410 ComputeLogs(npt, optionZ);; 2411 gPad->PaintPolyMarker(npt,gxworkl.data(),gyworkl.data());; 2412 }; 2413 }; 2414 }; 2415 ; 2416 gPad->ResetBit(TGraph::kClipFrame);; 2417 ; 2418do_cleanup:; 2419 gxwork.clear();; 2420 gywork.clear();; 2421 gxworkl.clear();; 2422 gyworkl.clear();; 2423}; 2424 ; 2425 ; 2426////////////////////////////////////////////////////////////////////////////////; 2427/// [Paint this TGraphAsymmErrors with its current attributes.](\ref GrP3); 2428 ; 2429void TGraphPainter::PaintGraphAsymmErrors(TGraph *theGraph, Option_t *option); 2430{; 2431 ; 2432 std::vector<Double_t> xline, yline;; 2433 Int_t if1 = 0;; 2434 Int_t if2 = 0;; 2435 Double_t xb[4], yb[4];; 2436 ; 2437 const Int_t kBASEMARKER=8;; 2438 static Float_t cxx[30] = {1.0,1.0,0.5,0.5,1.0,1.0,0.5,0.6,1.0,0.5,0.5,1.0,0.5,0.6,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 2439 static Float_t cyy[30] = {1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.5,0.5,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,0.0,0.0,1.0,1.0,1.0,1.0,0.5,0.5,0.5,1.0};; 2440 Int_t theNpoints = theGraph->GetN();; 2441 Double_t *theX = theGraph->GetX();; 2442 Double_t *theY = theGraph->GetY();; 2443 Double_t *theEXlow = theGraph->GetEXlow(); if (!theEXlow) return;; 2444 Double_t *theEYlow = theG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:86322,clear,clear,86322,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['clear'],['clear']
Usability,">SetX2NDC(xlc+dxlc*i+0.8);; label->SetY2NDC(ylc+dylc*i+0.2);; pad22->Modified();; c1->Update();; }; gBenchmark->Show(""canvas"");; }; Int_tint Int_tDefinition RtypesCore.h:45; gBenchmarkR__EXTERN TBenchmark * gBenchmarkDefinition TBenchmark.h:59; TAttFill::SetFillColorvirtual void SetFillColor(Color_t fcolor)Set the fill area color.Definition TAttFill.h:37; TAttLine::SetLineWidthvirtual void SetLineWidth(Width_t lwidth)Set the line width.Definition TAttLine.h:43; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TAttText::SetTextSizevirtual void SetTextSize(Float_t tsize=1)Set the text size.Definition TAttText.h:47; TBenchmark::Startvirtual void Start(const char *name)Starts Benchmark with the specified name.Definition TBenchmark.cxx:172; TBenchmark::Showvirtual void Show(const char *name)Stops Benchmark name and Prints results.Definition TBenchmark.cxx:155; TCanvasThe Canvas class.Definition TCanvas.h:23; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TPadThe most important graphics class in the ROOT system.Definition TPad.h:28; TPad::Modifiedvoid Modified(Bool_t flag=true) overrideMark pad modified Will be repainted when TCanvas::Update() will be called next time.Definition TPad.cxx:7369; TPad::cdTVirtualPad * cd(Int_t subpadnumber=0) overrideSet Current pad.Definition TPad.cxx:693; TPad::Drawvoid Draw(Option_t *option="""") overrideDraw Pad in Current pad (re-parent pad if necessary).Definition TPad.cxx:1364; TPaveLabelA Pave (see TPave) with a text centered in the Pave.Definition TPaveLabel.h:20; TPaveLabel::Drawvoid Draw(Option_t *option="""") overrideDraw this pavelabel with its current attributes.Definition TPaveLab",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/canvas_8C.html:4577,simpl,simple,4577,doc/master/canvas_8C.html,https://root.cern,https://root.cern/doc/master/canvas_8C.html,1,['simpl'],['simple']
Usability,"?rangeName:""<none>"") << endl;; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; cout << ""RooRealSumPdf::analyticalIntegralWN:""<<GetName()<<""(""<<code<<"",""<<(normSet2?*normSet2:RooArgSet())<<"",""<<(rangeName?rangeName:""<none>"") << endl;; Implement analytical integrations by deferring integration of component; functions to integrators of components. Double_t expectedEvents(const RooArgSet* nset) const. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooRealSumPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooRealSumPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& arg) const; { return arg.isFundamental() ; }. const RooArgList& funcList() const; { return _funcList ; }. const RooArgList& coefList() const; { return _coefList ; }. Double_t expectedEvents(const RooArgSet* nset) const. Bool_t selfNormalized() const; { return getAttribute(""BinnedLikelihoodActive"") ; }. void setFloor(Bool_t flag); { _doFloor = flag ; }. Bool_t getFloor() const; { return _doFloor ; }. void setFloorGlobal(Bool_t flag); { _doFloorGlobal = flag ; }. Bool_t getFloorGlobal(); { return _doFloorGlobal ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. » Last changed: Tue Jun 2 15:33:27 2015 » Last generated: 2015-06-02 15:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in gen",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooRealSumPdf.html:48509,intuit,intuitively,48509,root/html604/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html604/RooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,"?rangeName:""<none>"") << endl;; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; cout << ""RooRealSumPdf::analyticalIntegralWN:""<<GetName()<<""(""<<code<<"",""<<(normSet2?*normSet2:RooArgSet())<<"",""<<(rangeName?rangeName:""<none>"") << endl;; Implement analytical integrations by deferring integration of component; functions to integrators of components. Double_t expectedEvents(const RooArgSet* nset) const. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooRealSumPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooRealSumPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& arg) const; { return arg.isFundamental() ; }. const RooArgList& funcList() const; { return _funcList ; }. const RooArgList& coefList() const; { return _coefList ; }. Double_t expectedEvents(const RooArgSet* nset) const. Bool_t selfNormalized() const; { return getAttribute(""BinnedLikelihoodActive"") ; }. void setFloor(Bool_t flag); { _doFloor = flag ; }. Bool_t getFloor() const; { return _doFloor ; }. void setFloorGlobal(Bool_t flag); { _doFloorGlobal = flag ; }. Bool_t getFloorGlobal(); { return _doFloorGlobal ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. » Last changed: Tue Jun 30 14:35:23 2015 » Last generated: 2015-06-30 14:35; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooRealSumPdf.html:48509,intuit,intuitively,48509,root/html602/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html602/RooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,"?rangeName:""<none>"") << endl;; Advertise that all integrals can be handled internally. Double_t analyticalIntegralWN(Int_t code, const RooArgSet* normSet, const char* rangeName = 0) const; cout << ""RooRealSumPdf::analyticalIntegralWN:""<<GetName()<<""(""<<code<<"",""<<(normSet2?*normSet2:RooArgSet())<<"",""<<(rangeName?rangeName:""<none>"") << endl;; Implement analytical integrations by deferring integration of component; functions to integrators of components. Double_t expectedEvents(const RooArgSet* nset) const. std::list<Double_t>* binBoundaries(RooAbsRealLValue& , Double_t , Double_t ) const. Bool_t isBinnedDistribution(const RooArgSet& obs) const; If all components that depend on obs are binned that so is the product. std::list<Double_t>* plotSamplingHint(RooAbsRealLValue& , Double_t , Double_t ) const. void setCacheAndTrackHints(RooArgSet& ); Label OK'ed components of a RooRealSumPdf with cache-and-track. void printMetaArgs(ostream& os) const; Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the; product operator construction. TObject* clone(const char* newname) const; { return new RooRealSumPdf(*this,newname) ; }. Bool_t forceAnalyticalInt(const RooAbsArg& arg) const; { return arg.isFundamental() ; }. const RooArgList& funcList() const; { return _funcList ; }. const RooArgList& coefList() const; { return _coefList ; }. Double_t expectedEvents(const RooArgSet* nset) const. Bool_t selfNormalized() const; { return getAttribute(""BinnedLikelihoodActive"") ; }. void setFloor(Bool_t flag); { _doFloor = flag ; }. Bool_t getFloor() const; { return _doFloor ; }. void setFloorGlobal(Bool_t flag); { _doFloorGlobal = flag ; }. Bool_t getFloorGlobal(); { return _doFloorGlobal ; }. CacheMode canNodeBeCached() const; { return RooAbsArg::NotAdvised ; }. » Last changed: Tue Mar 10 17:18:50 2015 » Last generated: 2015-03-10 17:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ge",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealSumPdf.html:46847,intuit,intuitively,46847,root/html534/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html534/RooRealSumPdf.html,1,['intuit'],['intuitively']
Usability,"@ kBlackDefinition Rtypes.h:65; pwinID h TVirtualViewer3D TVirtualGLPainter pDefinition TGWin32VirtualGLProxy.cxx:51; gInterpreter#define gInterpreterDefinition TInterpreter.h:573; kCanDelete@ kCanDeleteDefinition TObject.h:367; kCannotPick@ kCannotPickDefinition TObject.h:372; gROOT#define gROOTDefinition TROOT.h:406; gPad#define gPadDefinition TVirtualPad.h:308; TBoxCreate a Box.Definition TBox.h:22; TCanvasThe Canvas class.Definition TCanvas.h:23; TCanvas::HighlightConnectvirtual void HighlightConnect(const char *slot)This is ""simplification"" for function TCanvas::Connect with Highlighted signal for specific slot.Definition TCanvas.cxx:1631; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TH1F1-D histogram with a float per channel (see TH1 documentation)Definition TH1.h:622; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408; TString::Formatstatic TString Format(const char *fmt,...)Static method which formats a string using a printf style format descriptor and return a TString.Definition TString.cxx:2378; TTextBase class for several text objects.Definition TText.h:22; TTree::Drawvoid Draw(Option_t *opt) overrideDefault Draw method for all objects.Definition TTree.h:431; TTree::GetV3virtual Double_t * GetV3()Definition TTree.h:580; TTree::GetV1virtual Double_t * GetV1()Definition TTree.h:576; TTree::GetV4virtual Double_t * GetV4()Definition TTree.h:582; TTree::GetV2virtual Double_t * GetV2()Definition TTree.h:578; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; yDouble_t y[n]Definition legend1.C:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/hlGraph2_8C.html:4056,simpl,simple,4056,doc/master/hlGraph2_8C.html,https://root.cern,https://root.cern/doc/master/hlGraph2_8C.html,1,['simpl'],['simple']
Usability,"@cern.ch> - MPI-K Heidelberg, Germany *; 20 * Kai Voss <Kai.Voss@cern.ch> - U. of Victoria, Canada *; 21 * Omar Zapata <Omar.Zapata@cern.ch> - UdeA/ITM Colombia *; 22 * Lorenzo Moneta <Lorenzo.Moneta@cern.ch> - CERN, Switzerland *; 23 * Sergei Gleyzer <Sergei.Gleyzer@cern.ch> - U of Florida & CERN *; 24 * Kim Albertsson <kim.albertsson@cern.ch> - LTU & CERN *; 25 * *; 26 * Copyright (c) 2005-2015: *; 27 * CERN, Switzerland *; 28 * U. of Victoria, Canada *; 29 * MPI-K Heidelberg, Germany *; 30 * U. of Bonn, Germany *; 31 * UdeA/ITM, Colombia *; 32 * U. of Florida, USA *; 33 * *; 34 * Redistribution and use in source and binary forms, with or without *; 35 * modification, are permitted according to the terms listed in LICENSE *; 36 * (see tmva/doc/LICENSE) *; 37 **********************************************************************************/; 38 ; 39/*! \class TMVA::Factory; 40\ingroup TMVA; 41 ; 42This is the main MVA steering class.; 43It creates all MVA methods, and guides them through the training, testing and; 44evaluation phases.; 45*/; 46 ; 47#include ""TMVA/Factory.h""; 48 ; 49#include ""TMVA/ClassifierFactory.h""; 50#include ""TMVA/Config.h""; 51#include ""TMVA/Configurable.h""; 52#include ""TMVA/Tools.h""; 53#include ""TMVA/Ranking.h""; 54#include ""TMVA/DataSet.h""; 55#include ""TMVA/IMethod.h""; 56#include ""TMVA/MethodBase.h""; 57#include ""TMVA/DataInputHandler.h""; 58#include ""TMVA/DataSetManager.h""; 59#include ""TMVA/DataSetInfo.h""; 60#include ""TMVA/DataLoader.h""; 61#include ""TMVA/MethodBoost.h""; 62#include ""TMVA/MethodCategory.h""; 63#include ""TMVA/ROCCalc.h""; 64#include ""TMVA/ROCCurve.h""; 65#include ""TMVA/MsgLogger.h""; 66 ; 67#include ""TMVA/VariableInfo.h""; 68#include ""TMVA/VariableTransform.h""; 69 ; 70#include ""TMVA/Results.h""; 71#include ""TMVA/ResultsClassification.h""; 72#include ""TMVA/ResultsRegression.h""; 73#include ""TMVA/ResultsMulticlass.h""; 74#include <list>; 75#include <bitset>; 76#include <set>; 77 ; 78#include ""TMVA/Types.h""; 79 ; 80#include ""TROOT.h""; 81#incl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html:2028,guid,guides,2028,doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,https://root.cern,https://root.cern/doc/master/tmva_2tmva_2src_2Factory_8cxx_source.html,1,['guid'],['guides']
Usability,"A TGraphAsymmErrors is a TGraph with asymmetric error bars. It inherits the various draw format options from TGraph. Its method Paint(Option_t *option) paints the TGraphAsymmErrors with the current attributes. You can set the following additional options for drawing:. “z” or “Z”the horizontal and vertical small lines are not drawn at the end of error bars; “>”an arrow is drawn at the end of the error bars; “|>”a full arrow is drawn at the end of the error bar; its size is \(\frac{2}{3}\) of the marker size; “[]”only the end vertical/horizontal lines of the error bars are drawn; this option is interesting to superimpose systematic errors on top of a graph with statistical errors. The constructor has six arrays as parameters: X and Y as TGraph and low X-errors and high X-errors, low Y-errors and high Y-errors. The low value is the length of the error bar to the left and down, the high value is the length of the error bar to the right and up.; {; c1 = new TCanvas(""c1"",""A Simple Graph with error bars"",; 200,10,700,500);; c1->SetGrid();. // create the arrays for the points; Int_t n = 10;; Double_t x[n] = {-.22,.05,.25,.35,.5, .61,.7,.85,.89,.95};; Double_t y[n] = {1,2.9,5.6,7.4,9,9.6,8.7,6.3,4.5,1};. // create the arrays with high and low errors; Double_t exl[n] = {.05,.1,.07,.07,.04,.05,.06,.07,.08,.05};; Double_t eyl[n] = {.8,.7,.6,.5,.4,.4,.5,.6,.7,.8};; Double_t exh[n] = {.02,.08,.05,.05,.03,.03,.04,.05,.06,.03};; Double_t eyh[n] = {.6,.5,.4,.3,.2,.2,.3,.4,.5,.6};. // create TGraphAsymmErrors with the arrays; gr = new TGraphAsymmErrors(n,x,y,exl,exh,eyl,eyh);; gr->SetTitle(""TGraphAsymmErrors Example"");; gr->SetMarkerColor(4);; gr->SetMarkerStyle(21);; gr->Draw(""ALP"");; }; 4.5 Graphs with Asymmetric Bent Errors. A graph with asymmetric bent error bars. A TGraphBentErrors is a TGraph with bent, asymmetric error bars. The various format options to draw a TGraphBentErrors are explained in TGraphBentErrors::Paint method. The TGraphBentErrors is drawn by default with error ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:148650,Simpl,Simple,148650,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simple']
Usability,"A method implementations.Definition IMethod.h:53; TMVA::IPythonInteractiveThis class is needed by JsMVA, and it's a helper class for tracking errors during the training in Jup...Definition MethodBase.h:94; TMVA::IPythonInteractive::Initvoid Init(std::vector< TString > &graphTitles)This function gets some title and it creates a TGraph for every title.Definition MethodBase.cxx:169; TMVA::IPythonInteractive::IPythonInteractiveIPythonInteractive()standard constructorDefinition MethodBase.cxx:146; TMVA::IPythonInteractive::fMultiGraphTMultiGraph * fMultiGraphDefinition MethodBase.h:105; TMVA::IPythonInteractive::fGraphsstd::vector< TGraph * > fGraphsDefinition MethodBase.h:106; TMVA::IPythonInteractive::fIndexInt_t fIndexDefinition MethodBase.h:108; TMVA::IPythonInteractive::~IPythonInteractive~IPythonInteractive()standard destructorDefinition MethodBase.cxx:154; TMVA::IPythonInteractive::GetTMultiGraph * Get()Definition MethodBase.h:102; TMVA::IPythonInteractive::ClearGraphsvoid ClearGraphs()This function sets the point number to 0 for all graphs.Definition MethodBase.cxx:193; TMVA::IPythonInteractive::AddPointvoid AddPoint(Double_t x, Double_t y1, Double_t y2)This function is used only in 2 TGraph case, and it will add new data points to graphs.Definition MethodBase.cxx:207; TMVA::IPythonInteractive::fNumGraphsInt_t fNumGraphsDefinition MethodBase.h:107; TMVA::IPythonInteractive::NotInitializedbool NotInitialized()Definition MethodBase.h:103; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodBase::fTransformationPointerTransformationHandler * fTransformationPointerpointer to the rest of transformationsDefinition MethodBase.h:671; TMVA::MethodBase::MakeClassSpecificHeadervirtual void MakeClassSpecificHeader(std::ostream &, const TString &="""") constDefinition MethodBase.h:523; TMVA::MethodBase::fVerbosityLevelStringTString fVerbosityLevelStringverbosity level (user input string)Definition MethodBase.h:677; TMVA::MethodBase::Me",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodBase_8h_source.html:38074,Clear,ClearGraphsvoid,38074,doc/master/MethodBase_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodBase_8h_source.html,2,['Clear'],"['ClearGraphs', 'ClearGraphsvoid']"
Usability,"A() == TFolder::Class()) {; 1899 Branch(curname, bufsize, splitlevel - 1);; 1900 } else {; 1901 void* add = (void*) folder->GetListOfFolders()->GetObjectRef(obj);; 1902 for (Int_t i = 0; i < 1000; ++i) {; 1903 if (curname[i] == 0) {; 1904 break;; 1905 }; 1906 if (curname[i] == '/') {; 1907 curname[i] = '.';; 1908 }; 1909 }; 1910 Int_t noccur = folder->Occurence(obj);; 1911 if (noccur > 0) {; 1912 snprintf(occur,20, ""_%d"", noccur);; 1913 strlcat(curname, occur,1000);; 1914 }; 1915 TBranchElement* br = (TBranchElement*) Bronch(curname, obj->ClassName(), add, bufsize, splitlevel - 1);; 1916 if (br) br->SetBranchFolder();; 1917 }; 1918 }; 1919 delete[] curname;; 1920 return GetListOfBranches()->GetEntries() - nbranches;; 1921}; 1922 ; 1923////////////////////////////////////////////////////////////////////////////////; 1924/// Create a new TTree Branch.; 1925///; 1926/// This Branch constructor is provided to support non-objects in; 1927/// a Tree. The variables described in leaflist may be simple; 1928/// variables or structures. // See the two following; 1929/// constructors for writing objects in a Tree.; 1930///; 1931/// By default the branch buffers are stored in the same file as the Tree.; 1932/// use TBranch::SetFile to specify a different file; 1933///; 1934/// * address is the address of the first item of a structure.; 1935/// * leaflist is the concatenation of all the variable names and types; 1936/// separated by a colon character :; 1937/// The variable name and the variable type are separated by a slash (/).; 1938/// The variable type may be 0,1 or 2 characters. If no type is given,; 1939/// the type of the variable is assumed to be the same as the previous; 1940/// variable. If the first variable does not have a type, it is assumed; 1941/// of type F by default. The list of currently supported types is given below:; 1942/// - `C` : a character string terminated by the 0 character; 1943/// - `B` : an 8 bit signed integer (`Char_t`); Treated as a character w",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8cxx_source.html:75119,simpl,simple,75119,doc/master/TTree_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TTree_8cxx_source.html,1,['simpl'],['simple']
Usability,"A::Experimental;; ; void tmva001_RTensor(); {; // Create RTensor from scratch; RTensor<float> x({2, 2});; cout << x << endl;; ; // Assign some data; x(0, 0) = 1;; x(0, 1) = 2;; x(1, 0) = 3;; x(1, 1) = 4;; ; // Apply transformations; auto x2 = x.Reshape({1, 4}).Squeeze();; cout << x2 << endl;; ; // Slice; auto x3 = x.Reshape({2, 2}).Slice({{0, 2}, {0, 1}});; cout << x3 << endl;; ; // Create tensor as view on data without ownership; float data[] = {5, 6, 7, 8};; RTensor<float> y(data, {2, 2});; cout << y << endl;; ; // Create tensor as view on data with ownership; auto data2 = std::make_shared<std::vector<float>>(4);; float c = 9;; for (auto &v : *data2) {; v = c;; c++;; }; ; RTensor<float> z(data2, {2, 2});; cout << z << endl;; }; c#define c(i)Definition RSha256.hxx:101; dataOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void dataDefinition TGWin32VirtualXProxy.cxx:104; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; TMVA::Experimental::RTensorRTensor is a container with contiguous memory and shape information.Definition RTensor.hxx:162; TMVA::Experimental::RTensor::ReshapeRTensor< Value_t, Container_t > Reshape(const Shape_t &shape) constReshape tensor.Definition RTensor.hxx:480; RooFit::SliceRooCmdArg Slice(const RooArgSet &sliceSet)Definition RooGlobalFunc.cxx:134; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; TMVA::Experimental::SOFIE::Squeeze@ SqueezeDefinition ROperator_Reshape.hxx:15; TMVA::ExperimentalDefinition RModelParser_Keras.h:40; v@ vDefinition rootcling_impl.cxx:3699; ; { { 0, 0 } { 0, 0 } }; { 1, 2, 3, 4 }; { 1, 3 }; { { 5, 6 } { 7, 8 } }; { { 9, 10 } { 11, 12 } }; DateDecember 2018 ; AuthorStefan Wunsch ; Definition in file tmva001_RTensor.C. tutorialstmvatmva001_RTensor.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/tmva001__RTensor_8C.html:2519,Guid,Guide,2519,doc/master/tmva001__RTensor_8C.html,https://root.cern,https://root.cern/doc/master/tmva001__RTensor_8C.html,1,['Guid'],['Guide']
Usability,"A::RegressionVariance&operator=(const TMVA::RegressionVariance&); TMVA::RegressionVarianceRegressionVariance(); TMVA::RegressionVarianceRegressionVariance(const TMVA::RegressionVariance& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringfNamename of the concrete Separation Index impementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationGain(const Double_t& nLeft, const Double_t& targetLeft, const Double_t& target2Left, const Double_t& nTot, const Double_t& targetTot, const Double_t& target2Tot); Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality crition which is optimized for when trying; to increase the information in the system; for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); which is used as a ""separation"" index should be as small as possible.; the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... Double_t GetSeparationIndex(const Double_t& n, const Double_t& target, const Double_t& target2); Separation Index: a simple Variance. RegressionVariance(); default constructor. {fName = ""Variance for Regression"";}. RegressionVariance(const TMVA::RegressionVariance& s); copy constructor. {}. virtual ~RegressionVariance(); destructor. {}. TString GetName(); Return the name of the concrete Index implementation. { return fName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-02 16:18; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TMVA__RegressionVariance.html:2120,simpl,simple,2120,root/html604/TMVA__RegressionVariance.html,https://root.cern,https://root.cern/root/html604/TMVA__RegressionVariance.html,1,['simpl'],['simple']
Usability,"A::RegressionVariance&operator=(const TMVA::RegressionVariance&); TMVA::RegressionVarianceRegressionVariance(); TMVA::RegressionVarianceRegressionVariance(const TMVA::RegressionVariance& s); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). Data Members; protected:. TStringfNamename of the concrete Separation Index impementation. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; Double_t GetSeparationGain(const Double_t& nLeft, const Double_t& targetLeft, const Double_t& target2Left, const Double_t& nTot, const Double_t& targetTot, const Double_t& target2Tot); Separation Gain:; the measure of how the quality of separation of the sample increases; by splitting the sample e.g. into a ""left-node"" and a ""right-node""; (N * Index_parent) - (N_left * Index_left) - (N_right * Index_right); this is then the quality crition which is optimized for when trying; to increase the information in the system; for the Regression: as the ""Gain is maximised"", the RMS (sqrt(variance)); which is used as a ""separation"" index should be as small as possible.; the ""figure of merit"" here has to be -(rms left+rms-right) or 1/rms... Double_t GetSeparationIndex(const Double_t& n, const Double_t& target, const Double_t& target2); Separation Index: a simple Variance. RegressionVariance(); default constructor. {fName = ""Variance for Regression"";}. RegressionVariance(const TMVA::RegressionVariance& s); copy constructor. {}. virtual ~RegressionVariance(); destructor. {}. TString GetName(); Return the name of the concrete Index implementation. { return fName; }. » Author: Andreas Hoecker, Joerg Stelzer, Helge Voss, Kai Voss » Copyright (c) 2005: *; » Last changed: root/tmva $Id$ » Last generated: 2015-06-30 15:17; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TMVA__RegressionVariance.html:2112,simpl,simple,2112,root/html602/TMVA__RegressionVariance.html,https://root.cern,https://root.cern/root/html602/TMVA__RegressionVariance.html,1,['simpl'],['simple']
Usability,"A::ResultsMulticlass:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ResultsMulticlass(). TMVA::ResultsMulticlass::ResultsMulticlass ; (; const DataSetInfo * ; dsi, . TString ; resultsName . ). constructor ; Definition at line 58 of file ResultsMulticlass.cxx. ◆ ~ResultsMulticlass(). TMVA::ResultsMulticlass::~ResultsMulticlass ; (; ). destructor ; Definition at line 72 of file ResultsMulticlass.cxx. Member Function Documentation. ◆ Class(). static TClass * TMVA::ResultsMulticlass::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::ResultsMulticlass::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::ResultsMulticlass::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 102 of file ResultsMulticlass.h. ◆ Clear() [1/2]. void TMVA::ResultsMulticlass::Clear ; (; Option_t * ; ). inlineoverridevirtual . Reimplemented from TObject.; Definition at line 65 of file ResultsMulticlass.h. ◆ Clear() [2/2]. virtual void TObject::Clear ; (; Option_t * ; = """"). inlinevirtual . Reimplemented from TObject.; Definition at line 119 of file TObject.h. ◆ CreateMulticlassHistos(). void TMVA::ResultsMulticlass::CreateMulticlassHistos ; (; TString ; prefix, . Int_t ; nbins, . Int_t ; nbins_high . ). this function fills the mva response histos for multiclass classification ; Definition at line 354 of file ResultsMulticlass.cxx. ◆ CreateMulticlassPerformanceHistos(). void TMVA::ResultsMulticlass::CreateMulticlassPerformanceHistos ; (; TString ; prefix). Create performance graphs for this classifier a multiclass setting. ; Requires that the method has already been evaluated (that a resultset already exists.); Currently uses the new way of calculating ROC Curves. If anything looks fishy, please contact the ROOT TMVA team. ; Definition at line 240 of file R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html:14318,Clear,Clear,14318,doc/master/classTMVA_1_1ResultsMulticlass.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1ResultsMulticlass.html,1,['Clear'],['Clear']
Usability,"ALSE on failure. Dataset not found equals to a failure. PROOF-Lite re-implementation of the equivalent function in TProofServ. ; Reimplemented from TProof.; Definition at line 2195 of file TProofLite.cxx. ◆ Class(). static TClass * TProofLite::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TProofLite::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TProofLite::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 170 of file TProofLite.h. ◆ CleanupSandbox(). Int_t TProofLite::CleanupSandbox ; (; ). private . Remove old sessions dirs keep at most 'Proof.MaxOldSessions' (default 10) ; Definition at line 1821 of file TProofLite.cxx. ◆ ClearCache(). void TProofLite::ClearCache ; (; const char * ; file = 0). overridevirtual . Remove files from all file caches. ; Reimplemented from TProof.; Definition at line 1519 of file TProofLite.cxx. ◆ ClearDataSetCache(). void TProofLite::ClearDataSetCache ; (; const char * ; dataset = 0). overridevirtual . Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented from TProof.; Definition at line 2282 of file TProofLite.cxx. ◆ CopyMacroToCache(). Int_t TProofLite::CopyMacroToCache ; (; const char * ; macro, . Int_t ; headerRequired = 0, . TSelector ** ; selector = 0, . Int_t ; opt = 0, . TList * ; wrks = 0 . ). protected . Copy a macro, and its possible associated .h[h] file, to the cache directory, from where the workers can get the file. ; If headerRequired is 1, return -1 in case the header is not found. If headerRequired is 0, try to copy header too. If headerRequired is -1, don't look for header, only copy macro. If the selector pionter is not 0, consider the macro to be a selector and try to load the selector and set it to the pointer. The mask 'opt' is an or of ESendFileOpt: kCpBin (0x8) Retrieve from the cache the binaries associated with the fi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:48992,Clear,ClearDataSetCache,48992,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,1,['Clear'],['ClearDataSetCache']
Usability,"ALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNumConvPdf.html:5118,clear,clearValueDirty,5118,root/html534/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html534/RooNumConvPdf.html,3,['clear'],['clearValueDirty']
Usability,"AM,DropConfig=0.0+0.0+0.0+0.:Architecture=CPU""; : The following options are set:; : - By User:; : V: ""True"" [Verbose output (short form of ""VerbosityLevel"" below - overrides the latter one)]; : VarTransform: ""None"" [List of variable transformations performed before training, e.g., ""D_Background,P_Signal,G,N_AllClasses"" for: ""Decorrelation, PCA-transformation, Gaussianisation, Normalisation, each for the given class of events ('AllClasses' denotes all events of all classes, if no class indication is given, 'All' is assumed)""]; : H: ""False"" [Print method-specific help message]; : Layout: ""DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,BNORM,DENSE|100|RELU,DENSE|1|LINEAR"" [Layout of the network.]; : ErrorStrategy: ""CROSSENTROPY"" [Loss function: Mean squared error (regression) or cross entropy (binary classification).]; : WeightInitialization: ""XAVIER"" [Weight initialization strategy]; : Architecture: ""CPU"" [Which architecture to perform the training on.]; : TrainingStrategy: ""LearningRate=1e-3,Momentum=0.9,Repetitions=1,ConvergenceSteps=5,BatchSize=100,TestRepetitions=1,MaxEpochs=10,WeightDecay=1e-4,Regularization=None,Optimizer=ADAM,DropConfig=0.0+0.0+0.0+0."" [Defines the training strategies.]; : - Default:; : VerbosityLevel: ""Default"" [Verbosity level]; : CreateMVAPdfs: ""False"" [Create PDFs for classifier outputs (signal and background)]; : IgnoreNegWeightsInTraining: ""False"" [Events with negative weights are ignored in the training (but are included for testing and performance evaluation)]; : InputLayout: ""0|0|0"" [The Layout of the input]; : BatchLayout: ""0|0|0"" [The Layout of the batch]; : RandomSeed: ""0"" [Random seed used for weight initialization and batch shuffling]; : ValidationSize: ""20%"" [Part of the training data to use for validation. Specify as 0.2 or 20% to use a fifth of the data set as validation set. Specify as 100 to use exactly 100 events. (Default: 20%)]; : Will now use the CPU architecture with BLAS and IMT support !; Factory : Booking met",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:3551,Learn,LearningRate,3551,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['LearningRate']
Usability,"ARG0 ; (; VirtualX ; , . CloseWindow ; , . 1 ;  . ). ◆ VOID_METHOD_ARG0() [2/4]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG0 ; (; VirtualX ; , . SetDoubleBufferON ; , . 1 ;  . ). ◆ VOID_METHOD_ARG0() [3/4]. VOID_METHOD_ARG0 ; (; VirtualX ; , . SetMarkerAttributes ; , . 1 ;  . ). ◆ VOID_METHOD_ARG0() [4/4]. VOID_METHOD_ARG0 ; (; VirtualX ; , . SetTextAttributes ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [1/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 ; (; VirtualX ; , . Bell ; , . Int_t ; , . percent ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [2/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG1 ; (; VirtualX ; , . ClearWindow ; , . Window_t ; , . id ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [3/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 ; (; VirtualX ; , . DeleteGC ; , . GContext_t ; , . gc ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [4/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void VOID_METHOD_ARG1 ; (; VirtualX ; , . DeleteImage ; , . Drawable_t ; , . img ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [5/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize VOID_METHOD_ARG1 ; (; VirtualX ; , . DeletePixmap ; , . Pixmap_t ; , . pmap ; , . 1 ;  . ). ◆ VOID_METHOD_ARG1() [6/28]. Option_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarke",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html:123265,Clear,ClearWindow,123265,doc/master/TGWin32VirtualXProxy_8cxx.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx.html,2,['Clear'],['ClearWindow']
Usability,"ARN_MSG(""DataRange::SetRange"",""remove existing range and keep only the set one"");; 141 rs.resize(1);; 142 rs[0] = std::make_pair(xmin, xmax);; 143 return;; 144}; 145 ; 146bool DataRange::IsInside(double x, unsigned int icoord ) const {; 147 // check if a point is in range; 148 ; 149 if (Size(icoord) == 0) return true; // no range existing (is like -inf, +inf); 150 const RangeSet & ranges = fRanges[icoord];; 151 for (RangeSet::const_iterator itr = ranges.begin(); itr != ranges.end(); ++itr) {; 152 if ( x < (*itr).first ) return false;; 153 if ( x <= (*itr).second) return true;; 154 }; 155 return false; // point is larger than last xmax; 156}; 157 ; 158void DataRange::Clear(unsigned int icoord ) {; 159 // remove all ranges for coordinate icoord; 160 if (Size(icoord) == 0) return; // no op in this case; 161 fRanges[icoord].clear();; 162}; 163 ; 164 ; 165void DataRange::CleanRangeSet(unsigned int icoord, double xmin, double xmax) {; 166 // remove all the existing ranges between xmin and xmax; 167 // called when a new range is inserted; 168 ; 169 // loop on existing ranges; 170 RangeSet & ranges = fRanges[icoord];; 171 for (RangeSet::iterator itr = ranges.begin(); itr != ranges.end(); ++itr) {; 172 // delete included ranges; 173 if ( itr->first >= xmin && itr->second <= xmax) {; 174 itr = ranges.erase(itr);; 175 // itr goes to next element, so go back before adding; 176 --itr;; 177 }; 178 }; 179 ; 180}; 181 ; 182void DataRange::GetInfRange(double &xmin, double &xmax) {; 183 // get the full range [-inf, +inf] for xmin and xmax; 184 xmin = -std::numeric_limits<double>::infinity();; 185 xmax = std::numeric_limits<double>::infinity();; 186}; 187 ; 188 } // end namespace Fit; 189 ; 190} // end namespace ROOT; 191 ; DataRange.h; Error.h; MATH_ERROR_MSG#define MATH_ERROR_MSG(loc, str)Definition Error.h:83; MATH_WARN_MSG#define MATH_WARN_MSG(loc, str)Definition Error.h:80; xminfloat xminDefinition THbookFile.cxx:95; yminfloat yminDefinition THbookFile.cxx:95; xmaxfloat xmaxDefini",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/DataRange_8cxx_source.html:5199,clear,clear,5199,doc/master/DataRange_8cxx_source.html,https://root.cern,https://root.cern/doc/master/DataRange_8cxx_source.html,1,['clear'],['clear']
Usability,"ASSNAME)_raw$(VERSION); For example: TAxis_ver8 or TList_raw5; Second kind of tables appears, when some of class members can not be converted to; normalized form or when class has custom streamer.; For instance, for TH1 class two tables are required: TH1_ver4 and TH1_raw4; Most of memebers are stored in TH1_ver4 table columnwise, and only memeber:. Double_t* fBuffer; //[fBufferSize]. can not be represented as column while size of array is not known apriory.; Therefore, fBuffer will be written as list of values in TH1_raw4 table. All objects, stored in the DB, will be registered in table ""ObjectsTable"".; In this there are following columns:; ""key:id"" - key identifier to which belong object; ""obj:id"" - object identifier; ""Class"" - object class name; ""Version"" - object class version; Data in each ""ObjectsTable"" row uniqly identify, in which table; and which column object is stored. In normal situation all class data should be sorted columnwise.; Up to now following member are supported:; 1) Basic data types; Here is everything clear. Column SQL type will be as much as possible; close to the original type of value.; 2) Fixed array of basic data types; In this case n columns like fArr[0], fArr[1] and so on will be created.; If there is multidimensional array, names will be fArr2[1][2][1] and so on; 3) Parent class; In this case version of parent class is stored and; data of parent class will be stored with the same obj:id in corrspondent table.; There is a special case, when parent store nothing (this is for instance TQObject).; In that case just -1 is written to avoid any extra checks if table exist or not.; 4) Object as data member.; In that case object is saved in normal way to data base and column; will contain id of this object.; 5) Pointer on object; Same as before. In case if object was already stored, just its id; will be placed in the column. For NULL pointer 0 is used.; 6) TString; Now column with limited width like VARCAHR(255) in MySQL is used.; Later this wil",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TSQLFile.html:1579,clear,clear,1579,root/html530/TSQLFile.html,https://root.cern,https://root.cern/root/html530/TSQLFile.html,5,['clear'],['clear']
Usability,"A_SOFIE_Inference.py;   This macro provides an example of using a trained model with Keras and make inference using SOFIE directly from Numpy This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_Keras.C;   This macro provides a simple example for the parsing of Keras .h5 file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_Keras_HiggsModel.C;   This macro run the SOFIE parser on the Keras model obtaining running TMVA_Higgs_Classification.C You need to run that macro before this one ;  ; file  TMVA_SOFIE_Models.py;   Example of inference with SOFIE using a set of models trained with Keras. ;  ; file  TMVA_SOFIE_ONNX.C;   This macro provides a simple example for the parsing of ONNX files into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_PyTorch.C;   This macro provides a simple example for the parsing of PyTorch .pt file into RModel object and further generating the .hxx header files for inference. ;  ; file  TMVA_SOFIE_RDataFrame.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before to generate the trained Keras model Then you need to run the macro TMVA_SOFIE_Keras_HiggsModel.C to generate the corresponding header file using SOFIE. ;  ; file  TMVA_SOFIE_RDataFrame.py;   Example of inference with SOFIE and RDataFrame, of a model trained with Keras. ;  ; file  TMVA_SOFIE_RDataFrame_JIT.C;   This macro provides an example of using a trained model with Keras and make inference using SOFIE and RDataFrame This macro uses as input a Keras model generated with the TMVA_Higgs_Classification.C tutorial You need to run that macro before this one. ;  ; file  TMVA_SOFIE_RSofieReader",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/group__tutorial__tmva.html:3778,simpl,simple,3778,doc/master/group__tutorial__tmva.html,https://root.cern,https://root.cern/doc/master/group__tutorial__tmva.html,1,['simpl'],['simple']
Usability,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Deault constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Thu Sep 23 19:59:14 2010 » Last generated: 2010-09-23 19:59; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooChangeTracker.html:33958,clear,clearState,33958,root/html528/RooChangeTracker.html,https://root.cern,https://root.cern/root/html528/RooChangeTracker.html,4,['clear'],"['clearState', 'cleared']"
Usability,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Mon Jul 4 15:22:26 2011 » Last generated: 2011-07-04 15:22; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooChangeTracker.html:34476,clear,clearState,34476,root/html530/RooChangeTracker.html,https://root.cern,https://root.cern/root/html530/RooChangeTracker.html,4,['clear'],"['clearState', 'cleared']"
Usability,"AbsArg::_shapeDirtyFlag set if value needs recalculating because input shapes modified; RooNumIntConfig*RooAbsReal::_specIntegratorConfigNumeric integrator configuration specific for this object; map<std::string,std::string>RooAbsArg::_stringAttribString attributes; Bool_tRooAbsReal::_treeVar!do not persist; UInt_tRooAbsReal::_uintValue! Transient cache for unsigned integer values from tree branches ; TStringRooAbsReal::_unitUnit for objects value; Double_tRooAbsReal::_valueCache for current value of object; Bool_tRooAbsArg::_valueDirtyFlag set if value needs recalculating because input values modified; static Bool_tRooAbsArg::_verboseDirtyStatic flag controlling verbose messaging for dirty state changes; TStringTNamed::fNameobject identifier; TStringTNamed::fTitleobject title. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooChangeTracker(); Default constructor. RooChangeTracker(const char* name, const char* title, const RooArgSet& trackSet, Bool_t checkValues = kFALSE); Constructor. The set trackSet contains the observables to be; tracked for changes. If checkValues is true an additional; validation step is activated where the numeric values of the; tracked arguments are compared with reference values ensuring; that values have actually changed. RooChangeTracker(const RooChangeTracker& other, const char* name = 0); Copy constructor. Bool_t hasChanged(Bool_t clearState); Returns true if state has changes since last call with clearState=kTRUE; If clearState is true, changeState flag will be cleared. ~RooChangeTracker(); Destructor. RooArgSet parameters() const. TObject* clone(const char* newname) const; { return new RooChangeTracker(*this, newname); }. Double_t evaluate() const; { return 1 ; }. » Last changed: Thu Nov 3 20:07:44 2011 » Last generated: 2011-11-03 20:07; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChangeTracker.html:34855,clear,clearState,34855,root/html532/RooChangeTracker.html,https://root.cern,https://root.cern/root/html532/RooChangeTracker.html,4,['clear'],"['clearState', 'cleared']"
Usability,"AbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), cons",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooIntegralMorph.html:6415,clear,clearEvalError,6415,root/html532/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html532/RooIntegralMorph.html,1,['clear'],['clearEvalError']
Usability,"AbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooIntegralMorph.html:6415,clear,clearEvalError,6415,root/html528/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html528/RooIntegralMorph.html,1,['clear'],['clearEvalError']
Usability,"AbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcacheAlpha() const; virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooIntegralMorph.html:6415,clear,clearEvalError,6415,root/html530/RooIntegralMorph.html,https://root.cern,https://root.cern/root/html530/RooIntegralMorph.html,1,['clear'],['clearEvalError']
Usability,"AbsGenContext*RooAbsPdf::binnedGenContext(const RooArgSet& vars, Bool_t verbose = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; virtual voidchangeBasis(RooFormulaVar* basis); voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooResolutionModel.html:4888,clear,clearEvalErrorLog,4888,root/html534/RooResolutionModel.html,https://root.cern,https://root.cern/root/html534/RooResolutionModel.html,2,['clear'],['clearEvalErrorLog']
Usability,"AbsReal &_sigmaR);  ;  RooBifurGauss (const RooBifurGauss &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines the analytical integral translation for the class. ;  ; TObject * clone (const char *newname) const override;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBifurGauss.html:1744,simpl,simple,1744,doc/master/classRooBifurGauss.html,https://root.cern,https://root.cern/doc/master/classRooBifurGauss.html,1,['simpl'],['simple']
Usability,AbsReal.h. ◆ _hideOffset. bool RooAbsReal::_hideOffset = true. staticprotected . Offset hiding flag. ; Definition at line 556 of file RooAbsReal.h. ◆ _label. TString RooAbsReal::_label. protected . Plot label for objects value. ; Definition at line 545 of file RooAbsReal.h. ◆ _lastNormSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsReal::_lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprotected . Component selection flag for RooAbsPdf::plotCompOn. ; ! ; Definition at line 550 of file RooAbsReal.h. ◆ _plotBins. Int_t RooAbsReal::_plotBins = 100. protected . Number of plot bins. ; Definition at line 542 of file RooAbsReal.h. ◆ _plotMax. double RooAbsReal::_plotMax = 0.0. protected . Maximum of plot range. ; Definition at line 541 of file RooAbsReal.h. ◆ _plotMin. double RooAbsReal::_plotMin = 0.0. protected . Minimum of plot range. ; Definition at line 540 of file RooAbsReal.h. ◆ _selectComp. bool RooAbsReal::_selectComp = true. protected . A buffer for reading values from trees. ; Definition at line 549 of file RooAbsReal.h. ◆ _specIntegratorConfig. std::unique_ptr<RooNumIntConfig> RooAbsReal::_specIntegratorConfig. protected . Definition at line 547 of file RooAbsReal.h. ◆ _treeReadBuffer. std::unique_ptr<TreeReadBuffer> RooAbsReal::_treeReadBuffer. protected . Definition at line 548 of file RooAbsReal.h. ◆ _unit. TString RooAbsReal::_unit. protected . Unit for objects value. ; Definition at line 544 of file RooAbsReal.h. ◆ _value. double RooAbsReal::_value = 0.0. mutableprotected . Cache for current value of object. ; Definition at line 543 of file RooAbsReal.h. Libraries for RooAbsReal:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooAbsReal.h; roofit/roofitcore/src/RooAbsReal.cxx; /home/sftnight/build/workspace/root-makedoc-v632/rootspi/rdoc/v632_TMP/pyzdoc/_roofit.pyzdoc. RooAbsReal. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:17 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classRooAbsReal.html:157190,Guid,Guide,157190,doc/v632/classRooAbsReal.html,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html,1,['Guid'],['Guide']
Usability,"AbsReal::binBoundaries(RooAbsRealLValue&, Double_t, Double_t) const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooResolutionModel.html:4462,clear,clearEvalError,4462,root/html602/RooResolutionModel.html,https://root.cern,https://root.cern/root/html602/RooResolutionModel.html,1,['clear'],['clearEvalError']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::creat",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsOptTestStatistic.html:3902,clear,clearValueDirty,3902,root/html526/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsOptTestStatistic.html,1,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedLi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsTestStatistic.html:3846,clear,clearValueDirty,3846,root/html526/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html526/RooAbsTestStatistic.html,1,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsCachedReal.html:3918,clear,clearValueDirty,3918,root/html526/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html526/RooAbsCachedReal.html,8,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStepFunction.html:3711,clear,clearValueDirty,3711,root/html526/RooStepFunction.html,https://root.cern,https://root.cern/root/html526/RooStepFunction.html,2,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNLLVar.html:4378,clear,clearValueDirty,4378,root/html526/RooNLLVar.html,https://root.cern,https://root.cern/root/html526/RooNLLVar.html,1,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooXYChi2Var.html:4093,clear,clearValueDirty,4093,root/html526/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html526/RooXYChi2Var.html,2,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooChi2Var.html:4971,clear,clearValueDirty,4971,root/html526/RooChi2Var.html,https://root.cern,https://root.cern/root/html526/RooChi2Var.html,2,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooDataWeightedAverage.html:3836,clear,clearValueDirty,3836,root/html526/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html526/RooDataWeightedAverage.html,2,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(),",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProduct.html:3348,clear,clearValueDirty,3348,root/html528/RooProduct.html,https://root.cern,https://root.cern/root/html528/RooProduct.html,1,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCm",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAddition.html:3577,clear,clearValueDirty,3577,root/html526/RooAddition.html,https://root.cern,https://root.cern/root/html526/RooAddition.html,90,['clear'],['clearValueDirty']
Usability,"AbsReal::chi2FitTo(RooDataSet& xydata, const RooLinkedList& cmdList); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, RooCmdArg arg1 = RooCmdArg::none(), RooCmdArg arg2 = RooCmdArg::none(), RooCmdArg arg3 = RooCmdArg::none(), RooCmdArg arg4 = RooCmdArg::none(), RooCmdArg arg5 = RooCmdArg::none(), RooCmdArg arg6 = RooCmdArg::none(), RooCmdArg arg7 = RooCmdArg::none(), RooCmdArg arg8 = RooCmdArg::none",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooRealMPFE.html:4125,clear,clearValueDirty,4125,root/html526/RooRealMPFE.html,https://root.cern,https://root.cern/root/html526/RooRealMPFE.html,1,['clear'],['clearValueDirty']
Usability,"AddBinToPartition((TH2PolyBin*) obj);; 547 }; 548}; 549 ; 550////////////////////////////////////////////////////////////////////////////////; 551/// Make a complete copy of the underlying object. If 'newname' is set,; 552/// the copy's name will be set to that name.; 553 ; 554TObject* TH2Poly::Clone(const char* newname) const; 555{; 556 // TH1::Clone relies on ::Copy to implemented by the derived class.; 557 // Until this is implemented, revert to the much slower default version; 558 // (and possibly non-thread safe).; 559 ; 560 return TNamed::Clone(newname);; 561}; 562 ; 563////////////////////////////////////////////////////////////////////////////////; 564/// Clears the contents of all bins in the histogram.; 565 ; 566void TH2Poly::ClearBinContents(); 567{; 568 TIter next(fBins);; 569 TObject *obj;; 570 TH2PolyBin *bin;; 571 ; 572 // Clears the bin contents; 573 while ((obj = next())) {; 574 bin = (TH2PolyBin*) obj;; 575 bin->ClearContent();; 576 }; 577 ; 578 // Clears the statistics; 579 fTsumw = 0;; 580 fTsumw2 = 0;; 581 fTsumwx = 0;; 582 fTsumwx2 = 0;; 583 fTsumwy = 0;; 584 fTsumwy2 = 0;; 585 fEntries = 0;; 586}; 587 ; 588////////////////////////////////////////////////////////////////////////////////; 589/// Reset this histogram: contents, errors, etc.; 590 ; 591void TH2Poly::Reset(Option_t *opt); 592{; 593 TIter next(fBins);; 594 TObject *obj;; 595 TH2PolyBin *bin;; 596 ; 597 // Clears the bin contents; 598 while ((obj = next())) {; 599 bin = (TH2PolyBin*) obj;; 600 bin->ClearContent();; 601 }; 602 ; 603 TH2::Reset(opt);; 604}; 605 ; 606////////////////////////////////////////////////////////////////////////////////; 607/// Returns the bin number of the bin at the given coordinate. -1 to -9 are; 608/// the overflow and underflow bins. overflow bin -5 is the unbinned areas in; 609/// the histogram (also called ""the sea""). The third parameter can be left; 610/// blank.; 611/// The overflow/underflow bins are:; 612///~~~ {.cpp}; 613/// -1 | -2 | -3; 614/// ----",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH2Poly_8cxx_source.html:21438,Clear,ClearBinContents,21438,doc/master/TH2Poly_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TH2Poly_8cxx_source.html,4,['Clear'],"['ClearBinContents', 'ClearContent', 'Clears']"
Usability,"AddDirectoryStatus()TDirectorystatic; AddToTObjectTable(TObject *)TObjectprivatestatic; Append(TObject *obj, Bool_t replace=kFALSE) overrideTDirectoryFilevirtual; AppendKey(TKey *key) overrideTDirectoryFilevirtual; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b) overrideTDirectoryFilevirtual; Build(TFile *motherFile=nullptr, TDirectory *motherDir=nullptr) overrideTDirectoryFileinlinevirtual; BuildDirectory(TFile *motherFile, TDirectory *motherDir)TDirectoryprotected; BuildDirectoryFile(TFile *motherFile, TDirectory *motherDir)TDirectoryFileprotected; Cd(const char *path)TDirectorystatic; cd() overrideTDirectoryFilevirtual; cd(const char *path) overrideTDirectoryFilevirtual; cd1(const char *path)TDirectoryprotected; Cd1(const char *path)TDirectoryprotectedstatic; CheckedHash()TObjectinline; Class()TDirectoryFilestatic; Class_Name()TDirectoryFilestatic; Class_Version()TDirectoryFileinlinestatic; ClassName() constTObjectvirtual; CleanTargets()TDirectoryFileprotected; Clear(Option_t *option="""") overrideTDirectoryvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; CloneObject(const TObject *obj, Bool_t autoadd=kTRUE) overrideTDirectoryFilevirtual; Close(Option_t *option="""") overrideTDirectoryFilevirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &) const overrideTDirectoryFileinlinevirtual; CurrentDirectory()TDirectorystatic; DeclFileName()TDirectoryFileinlinestatic; DecodeNameCycle(const char *namecycle, char *name, Short_t &cycle, const size_t namesize=0)TDirectorystatic; Delete(const char *namecycle="""") overrideTDirectoryFilevirtual; DeleteAll(Option_t *option="""")TDirectoryvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""") overrideTDirectoryvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecate",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDirectoryFile-members.html:1392,Clear,Clear,1392,doc/master/classTDirectoryFile-members.html,https://root.cern,https://root.cern/doc/master/classTDirectoryFile-members.html,1,['Clear'],['Clear']
Usability,"AddFrame(hframe,new TGLayoutHints(kLHintsCenterX,2,2,2,2));. // Sets window name and shows the main frame; SetWindowName(""Simple Example"");; MapSubwindows();; Resize(GetDefaultSize());; MapWindow();; }; 25.5 Widgets Overview; The word widget is a contraction of windows and gadget. Almost all GUI elements are widgets. A button is a widget, a menu item is a widget, a scrollbar is a widget, and a complete dialog box is a widget too. Some widgets may have sub widgets. For example, a dialog box can contain buttons, text fields, a combo-box, etc.; On the screen widgets look like rectangular areas with special behaviors. In terms of the object-oriented programming we can define a widget in ROOT as an object of a class deriving from TGObject.; This section presents all currently supported widgets in ROOT and their most useful methods. All of them can be considered as building blocks for an application, and most of them can be found in dialogs. Provided snippets of the code will give you practical guidelines where and how to use certain widgets. The macro $ROOTSYS/tutorials/gui/guitest.C contains the complete source code. Widgets created by ROOT GUI classes. Any custom widget can be created by sub classing existing widgets. To achieve a better understanding of the widgets’ properties they are separated by their type and their inheritance. As all of them inherit from TGObject and most from TGWidget, these base classes are described first.; 25.5.1 TGObject; TGObject is the base class for all ROOT GUI classes. It inherits from TObject. The two data members of this class contain important information about X11/Win32 window identifier and the connection to the host’s graphics system. Every GUI element, which derives from TGObject has access to the TGClient via the data member fClient of TGObject. TGClient creates the connection with the host’s graphics system and sets up the complete graphics system for all widgets.; 25.5.2 TGWidget; The widgets base class TGWidget is typically us",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1146669,guid,guidelines,1146669,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['guid'],['guidelines']
Usability,"AddWindow(ULong_t qwid, UInt_t w, UInt_t h); virtual Bool_tTGX11::AllocColor(Colormap_t cmap, ColorStruct_t& color); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTGX11::Bell(Int_t percent); virtual voidTObject::Browse(TBrowser* b); virtual voidTGX11::ChangeActivePointerGrab(Window_t, UInt_t, Cursor_t); virtual voidTGX11::ChangeGC(GContext_t gc, GCValues_t* gval); virtual voidTGX11::ChangeProperties(Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t* data, Int_t len); virtual voidTGX11::ChangeProperty(Window_t id, Atom_t property, Atom_t type, UChar_t* data, Int_t len); virtual voidTGX11::ChangeWindowAttributes(Window_t id, SetWindowAttributes_t* attr); virtual Bool_tTGX11::CheckEvent(Window_t id, EGEventType type, Event_t& ev); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGX11::ClearArea(Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGX11::ClearWindow(); virtual voidTGX11::ClearWindow(Window_t id); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTGX11::CloseDisplay(); virtual voidTGX11::ClosePixmap(); virtual voidTGX11::CloseWindow(); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTGX11::ConvertPrimarySelection(Window_t id, Atom_t clipboard, Time_t when); virtual voidTGX11::ConvertSelection(Window_t, Atom_t&, Atom_t&, Atom_t&, Time_t&); virtual voidTNamed::Copy(TObject& named) const; virtual voidTGX11::CopyArea(Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t width, UInt_t height, Int_t dest_x, Int_t dest_y); virtual voidTGX11::CopyGC(GContext_t org, GContext_t dest, Mask_t mask); virtual voidTGX11::CopyPixmap(Int_t wid, Int_t xpos, Int_t ypos); virtual Pixmap_tTGX11::CreateBitmap(Drawable_t id, const char* bitmap, UInt_t width, UInt_t height); virtual Cursor_tTGX11::CreateCursor(ECursor cursor); virtual GContext_tTGX11::CreateGC(Drawable_t id, GCV",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGX11TTF.html:1874,Clear,ClearWindow,1874,root/html528/TGX11TTF.html,https://root.cern,https://root.cern/root/html528/TGX11TTF.html,3,['Clear'],['ClearWindow']
Usability,"AdoptStreamer(TClassStreamer* strm); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Int_tTClass::AutoBrowse(TObject* obj, TBrowser* browser); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTClass::Browse(TBrowser* b); Int_tTClass::Browse(void* obj, TBrowser* b) const; voidTClass::BuildEmulatedRealData(const char* name, Long_t offset, TClass* cl); voidTClass::BuildRealData(void* pointer = 0, Bool_t isTransient = kFALSE); voidTClass::CalculateStreamerOffset() const; Bool_tTClass::CallShowMembers(const void* obj, TMemberInspector& insp, Bool_t isTransient = kFALSE) const; Bool_tTClass::CanIgnoreTObjectStreamer(); Bool_tTClass::CanSplit() const; virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; Long_tTClass::ClassProperty() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TClass::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTNamed::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTNamed::Copy(TObject& named) const; voidTClass::CopyCollectionProxy(const TVirtualCollectionProxy&); voidTDictionary::CreateAttributeMap(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTClass::DeleteArray(void* ary, Bool_t dtorOnly = kFALSE); virtual voidTQObject::Destroyed()SIGNAL ; voidTClass::Destructor(void* obj, Bool_t dtorOnly =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TQClass.html:2930,Clear,Clear,2930,root/html602/TQClass.html,https://root.cern,https://root.cern/root/html602/TQClass.html,2,['Clear'],['Clear']
Usability,"AlgoOptions::Print ; (; std::ostream & ; os = std::cout); const. inlineoverridevirtual . print options ; Reimplemented from ROOT::Math::IOptions.; Definition at line 114 of file GenAlgoOptions.h. ◆ PrintAllDefault(). void ROOT::Math::GenAlgoOptions::PrintAllDefault ; (; std::ostream & ; os = std::cout). static . print all the default options ; Definition at line 67 of file GenAlgoOptions.cxx. ◆ SetIntValue(). void ROOT::Math::GenAlgoOptions::SetIntValue ; (; const char * ; name, . int ; val . ). inlineoverridevirtual . Reimplemented from ROOT::Math::IOptions.; Definition at line 80 of file GenAlgoOptions.h. ◆ SetNamedValue(). void ROOT::Math::GenAlgoOptions::SetNamedValue ; (; const char * ; name, . const char * ; val . ). inlineoverridevirtual . Reimplemented from ROOT::Math::IOptions.; Definition at line 84 of file GenAlgoOptions.h. ◆ SetRealValue(). void ROOT::Math::GenAlgoOptions::SetRealValue ; (; const char * ; name, . double ; val . ). inlineoverridevirtual . Method that needs to be re-implemented by the derived classes. ; Reimplemented from ROOT::Math::IOptions.; Definition at line 76 of file GenAlgoOptions.h. Member Data Documentation. ◆ fIntOpts. std::map<std::string, int> ROOT::Math::GenAlgoOptions::fIntOpts. private . map of the integer options ; Definition at line 170 of file GenAlgoOptions.h. ◆ fNamOpts. std::map<std::string, std::string> ROOT::Math::GenAlgoOptions::fNamOpts. private . map of the named options ; Definition at line 172 of file GenAlgoOptions.h. ◆ fRealOpts. std::map<std::string, double> ROOT::Math::GenAlgoOptions::fRealOpts. private . map of the real options ; Definition at line 171 of file GenAlgoOptions.h. Libraries for ROOT::Math::GenAlgoOptions:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Math/GenAlgoOptions.h; math/mathcore/src/GenAlgoOptions.cxx. ROOTMathGenAlgoOptions. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html:7593,Guid,Guide,7593,doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1GenAlgoOptions.html,1,['Guid'],['Guide']
Usability,"Alias (PyObject *, PyObject *args);  . Variables; PyObject * gRootModule = nullptr;  . Function Documentation. ◆ AddCPPInstancePickling(). PyObject * PyROOT::AddCPPInstancePickling ; (; PyObject * ; self, . PyObject * ; args . ). Set reduce attribute for CPPInstance objects. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. The C++ function op_reduce defined above is wrapped in a Python method so that it can be injected in CPPInstance ; Definition at line 123 of file CPPInstancePyz.cxx. ◆ AddPrettyPrintingPyz(). PyObject * PyROOT::AddPrettyPrintingPyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pretty printing pythonization. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. This function adds the following pythonizations to print the object more user-friendly than cppyy by using the output of cling::printValue as the return value of the special method str. ; Definition at line 119 of file GenericPyz.cxx. ◆ AddTClassDynamicCastPyz(). PyObject * PyROOT::AddTClassDynamicCastPyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pythonization for TClass::DynamicCast. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the arguments received from Python. TClass::DynamicCast returns a void* that the user still has to cast (it will have the proper offset, though). Fix this by providing the requested binding if the cast succeeded. ; Definition at line 68 of file TClassPyz.cxx. ◆ AddTObjectEqNePyz(). PyObject * PyROOT::AddTObjectEqNePyz ; (; PyObject * ; self, . PyObject * ; args . ). Add pythonization for equality and inequality operators in TObject. ; Parameters. [in]selfAlways null, since this is a module function. ; [in]argsPointer to a Python tuple object containing the argument",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespacePyROOT.html:2410,user-friendly,user-friendly,2410,doc/master/namespacePyROOT.html,https://root.cern,https://root.cern/doc/master/namespacePyROOT.html,1,['user-friendly'],['user-friendly']
Usability,"AlignableEntryByUID(Int_t uid) const; Retreives an existing alignable object having a preset UID. Int_t GetNAlignable(Bool_t with_uid = kFALSE) const; Retreives number of PN entries with or without UID. Bool_t InsertPNEId(Int_t uid, Int_t ientry); Insert a PN entry in the sorted array of indexes. TGeoPhysicalNode * MakeAlignablePN(const char* name); Make a physical node from the path pointed by an alignable object with a given name. TGeoPhysicalNode * MakeAlignablePN(TGeoPNEntry* entry); Make a physical node from the path pointed by a given alignable object. TGeoPhysicalNode * MakePhysicalNode(const char* path = 0); Makes a physical node corresponding to a path. If PATH is not specified,; makes physical node matching current modeller state. void RefreshPhysicalNodes(Bool_t lock = kTRUE); Refresh physical nodes to reflect the actual geometry paths after alignment; was applied. Optionally locks physical nodes (default). void ClearPhysicalNodes(Bool_t mustdelete = kFALSE); Clear the current list of physical nodes, so that we can start over with a new list.; If MUSTDELETE is true, delete previous nodes. TGeoVolumeAssembly * MakeVolumeAssembly(const char* name); Make an assembly of volumes. TGeoVolumeMulti * MakeVolumeMulti(const char* name, TGeoMedium* medium); Make a TGeoVolumeMulti handling a list of volumes. void SetExplodedView(Int_t iopt = 0); Set type of exploding view (see TGeoPainter::SetExplodedView()). void SetPhiRange(Double_t phimin = 0., Double_t phimax = 360.); Set cut phi range. void SetNsegments(Int_t nseg); Set number of segments for approximating circles in drawing. Int_t GetNsegments() const; Get number of segments approximating circles. void BuildDefaultMaterials(); Now just a shortcut for GetElementTable. TGeoElementTable * GetElementTable(); Returns material table. Creates it if not existing. TGeoNode * Step(Bool_t is_geom = kTRUE, Bool_t cross = kTRUE); Make a rectiliniar step of length fStep from current point (fPoint) on current; direction (fDir",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoManager.html:61198,Clear,ClearPhysicalNodes,61198,root/html528/TGeoManager.html,https://root.cern,https://root.cern/root/html528/TGeoManager.html,12,['Clear'],"['Clear', 'ClearPhysicalNodes']"
Usability,"AllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void Init(const char* cl, void* object, const char* redo, const char* undo); common protected method used in several constructors. TQCommand(const char* cl = 0, void* object = 0, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. clname - class name.; 2. obj - an object; 3. redo - method or function to do/redo operation; 4. undo - method or function to undo operation. Comments:; - if either clname or obj is NULL that means that redo/undo is function; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(""TPad"", gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case undo parameter; can be omitted. Example:; TQCommand(""TPad"", gPad, ""SetFillStyle(Style_t)"");. TQCommand(TObject* obj, const char* redo = 0, const char* undo = 0); Constructor. Input parameters:; 1. obj - an object; 2. redo - method or function to do/redo operation; 3. undo - method or function to undo operation. Comments:; - to specify default arguments for redo/undo method/function; '=' must precede to argument value. Example:; TQCommand(gPad, ""SetEditable(=kTRUE)"", ""SetEditable(=kFALSE)"");. - undo method can be same as redo one. In that case ""undo""; can parameter be omitted. Example:; TQCommand(gPad, ""SetFillStyle(Style_t)"");. TQCommand(const TQCommand& com); Copy constructor. ~TQCommand(); dtor. TQCommand * GetCommand(); Return a command which is doing redo/undo action. This static method allows to set undo parameters dynamically, i.e.; during execution of Redo function. Example:; For redo actions like TGTextEdit::DelChar() it is not possible to; know ahead what character will be deleted.; To set arguments for undo action ( e.g. TGTextEdit::InsChar(char)),; one needs to call TQCommand::SetUndoArgs(1, character) fr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TQCommand.html:18584,undo,undo,18584,root/html528/TQCommand.html,https://root.cern,https://root.cern/root/html528/TQCommand.html,4,['undo'],['undo']
Usability,AnaConvPdf. ◆ StreamerNVirtual(). void RooBMixDecay::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file RooBMixDecay.h. Member Data Documentation. ◆ _basisCos. Int_t RooBMixDecay::_basisCos. protected . Definition at line 62 of file RooBMixDecay.h. ◆ _basisExp. Int_t RooBMixDecay::_basisExp. protected . Definition at line 61 of file RooBMixDecay.h. ◆ _delMistag. RooRealProxy RooBMixDecay::_delMistag. protected . Definition at line 55 of file RooBMixDecay.h. ◆ _dm. RooRealProxy RooBMixDecay::_dm. protected . Definition at line 59 of file RooBMixDecay.h. ◆ _genFlavFrac. double RooBMixDecay::_genFlavFrac. protected . do not persist ; Definition at line 65 of file RooBMixDecay.h. ◆ _genFlavFracMix. double RooBMixDecay::_genFlavFracMix. protected . Definition at line 66 of file RooBMixDecay.h. ◆ _genFlavFracUnmix. double RooBMixDecay::_genFlavFracUnmix. protected . Definition at line 67 of file RooBMixDecay.h. ◆ _genMixFrac. double RooBMixDecay::_genMixFrac. protected . Definition at line 64 of file RooBMixDecay.h. ◆ _mistag. RooRealProxy RooBMixDecay::_mistag. protected . Definition at line 54 of file RooBMixDecay.h. ◆ _mixState. RooCategoryProxy RooBMixDecay::_mixState. protected . Definition at line 56 of file RooBMixDecay.h. ◆ _t. RooRealProxy RooBMixDecay::_t. protected . Definition at line 60 of file RooBMixDecay.h. ◆ _tagFlav. RooCategoryProxy RooBMixDecay::_tagFlav. protected . Definition at line 57 of file RooBMixDecay.h. ◆ _tau. RooRealProxy RooBMixDecay::_tau. protected . Definition at line 58 of file RooBMixDecay.h. ◆ _type. DecayType RooBMixDecay::_type. protected . Definition at line 53 of file RooBMixDecay.h. Libraries for RooBMixDecay:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooBMixDecay.h; roofit/roofit/src/RooBMixDecay.cxx. RooBMixDecay. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooBMixDecay.html:84787,Guid,Guide,84787,doc/master/classRooBMixDecay.html,https://root.cern,https://root.cern/doc/master/classRooBMixDecay.html,1,['Guid'],['Guide']
Usability,"And Related Symbol Documentation. ◆ ROOT::Experimental::Internal::TTreeReaderValueFastBase. friend class ROOT::Experimental::Internal::TTreeReaderValueFastBase. friend . Definition at line 172 of file TTreeReaderFast.hxx. Member Data Documentation. ◆ fBaseEvent. Long64_t ROOT::Experimental::TTreeReaderFast::fBaseEvent {-1}. private . Definition at line 169 of file TTreeReaderFast.hxx. ◆ fDirector. ROOT::Internal::TBranchProxyDirector* ROOT::Experimental::TTreeReaderFast::fDirector {nullptr}. private . proxying director, owned ; Definition at line 164 of file TTreeReaderFast.hxx. ◆ fDirectory. TDirectory* ROOT::Experimental::TTreeReaderFast::fDirectory {nullptr}. private . directory (or current file for chains) ; Definition at line 163 of file TTreeReaderFast.hxx. ◆ fEntryStatus. TTreeReader::EEntryStatus ROOT::Experimental::TTreeReaderFast::fEntryStatus {TTreeReader::kEntryNotLoaded}. private . status of most recent read request ; Definition at line 165 of file TTreeReaderFast.hxx. ◆ fEvtIndex. Int_t ROOT::Experimental::TTreeReaderFast::fEvtIndex {-1}. private . Definition at line 168 of file TTreeReaderFast.hxx. ◆ fLastEntry. Long64_t ROOT::Experimental::TTreeReaderFast::fLastEntry {-1}. private . Definition at line 170 of file TTreeReaderFast.hxx. ◆ fTree. TTree* ROOT::Experimental::TTreeReaderFast::fTree {nullptr}. private . tree that's read ; Definition at line 162 of file TTreeReaderFast.hxx. ◆ fValues. std::deque<ROOT::Experimental::Internal::TTreeReaderValueFastBase*> ROOT::Experimental::TTreeReaderFast::fValues. private . readers that use our director ; Definition at line 166 of file TTreeReaderFast.hxx. Libraries for ROOT::Experimental::TTreeReaderFast:. [legend]; The documentation for this class was generated from the following files:; tree/treeplayer/inc/ROOT/TTreeReaderFast.hxx; tree/treeplayer/src/TTreeReaderFast.cxx. ROOTExperimentalTTreeReaderFast. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html:18050,Guid,Guide,18050,doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1TTreeReaderFast.html,1,['Guid'],['Guide']
Usability,"AnnihilateElements(); virtual voidTEveProjectable::AnnihilateProjecteds(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidCheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelec",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveTrackPropagator.html:2864,Clear,ClearProjectedList,2864,root/html528/TEveTrackPropagator.html,https://root.cern,https://root.cern/root/html528/TEveTrackPropagator.html,6,['Clear'],['ClearProjectedList']
Usability,"AnnotatedRecordDecl & ; cl, . const clang::CXXRecordDecl * ; decl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt, . const RConstructorTypes & ; ctorTypes, . bool & ; needCollectionProxy . ). FIXME: a function of 450+ lines! ; Definition at line 1734 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [1/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::DeclContext * ; ctxt . ). Write all the necessary opening part of the namespace and return the number of closing brackets needed For example for Space1::Space2 we write: namespace Space1 { namespace Space2 { and return 2. ; Definition at line 2246 of file TClingUtils.cxx. ◆ WriteNamespaceHeader() [2/2]. int ROOT::TMetaUtils::WriteNamespaceHeader ; (; std::ostream & ; out, . const clang::RecordDecl * ; cl . ). Definition at line 2270 of file TClingUtils.cxx. ◆ WritePointersSTL(). void ROOT::TMetaUtils::WritePointersSTL ; (; const AnnotatedRecordDecl & ; cl, . const cling::Interpreter & ; interp, . const TNormalizedCtxt & ; normCtxt . ). Write interface function for STL members. ; Definition at line 2499 of file TClingUtils.cxx. Variable Documentation. ◆ kError. const int ROOT::TMetaUtils::kError = 2000. Definition at line 129 of file TClingUtils.h. ◆ kFatal. const int ROOT::TMetaUtils::kFatal = 4000. Definition at line 131 of file TClingUtils.h. ◆ kInfo. const int ROOT::TMetaUtils::kInfo = 0. Definition at line 126 of file TClingUtils.h. ◆ kMaxLen. const int ROOT::TMetaUtils::kMaxLen = 1024. Definition at line 132 of file TClingUtils.h. ◆ kNote. const int ROOT::TMetaUtils::kNote = 500. Definition at line 127 of file TClingUtils.h. ◆ kSysError. const int ROOT::TMetaUtils::kSysError = 3000. Definition at line 130 of file TClingUtils.h. ◆ kWarning. const int ROOT::TMetaUtils::kWarning = 1000. Definition at line 128 of file TClingUtils.h. ROOTTMetaUtils. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:28 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html:53600,Guid,Guide,53600,doc/master/namespaceROOT_1_1TMetaUtils.html,https://root.cern,https://root.cern/doc/master/namespaceROOT_1_1TMetaUtils.html,1,['Guid'],['Guide']
Usability,"ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TObject*ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static void*ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static TStringConvertToXML(TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static TStringConvertToXML(void* obj, TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferXML.html:2162,Clear,Clear,2162,root/html532/TBufferXML.html,https://root.cern,https://root.cern/root/html532/TBufferXML.html,1,['Clear'],['Clear']
Usability,"ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; static TObject*ConvertFromXML(const char* str, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static void*ConvertFromXMLAny(const char* str, TClass** cl = 0, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static TStringConvertToXML(const TObject* obj, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); static TStringConvertToXML(const void* obj, const TClass* cl, Bool_t GenericLayout = kFALSE, Bool_t UseNamespaces = kFALSE); virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); static TStringTXMLSetup::DefaultXmlSetup(); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TBufferXML.html:2162,Clear,Clear,2162,root/html534/TBufferXML.html,https://root.cern,https://root.cern/root/html534/TBufferXML.html,3,['Clear'],['Clear']
Usability,"ApplySequence(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); virtual Int_tApplySequenceVecPtr(const TStreamerInfoActions::TActionSequence& sequence, void* start_collection, void* end_collection); voidTBuffer::AutoExpand(Int_t size_needed); virtual voidTObject::Browse(TBrowser* b); char*TBuffer::Buffer() const; Int_tTBuffer::BufferSize() const; virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const TClass* clss); virtual Int_tCheckByteCount(UInt_t startpos, UInt_t bcnt, const char* classname); virtual Bool_tTBufferFile::CheckObject(const TObject* obj); virtual Bool_tTBufferFile::CheckObject(const void* obj, const TClass* ptrClass); static TClass*Class(); virtual voidClassBegin(const TClass*, Version_t = -1); virtual voidClassEnd(const TClass*); virtual voidClassMember(const char* name, const char* typeName = 0, Int_t arrsize1 = -1, Int_t arrsize2 = -1); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidDecrementLevel(TVirtualStreamerInfo*); virtual voidTObject::Delete(Option_t* option = """")MENU ; voidTBuffer::DetachBuffer(); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); voidTBuffer::Expand(Int_t newsize, Bool_t copy = kTRUE); virtual voidTObject::Fatal(const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TBufferSQL2.html:2121,Clear,Clear,2121,root/html532/TBufferSQL2.html,https://root.cern,https://root.cern/root/html532/TBufferSQL2.html,4,['Clear'],['Clear']
Usability,"Architecture_t, Layer_t, DeepNet_t >:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ Matrix_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::Matrix_t = typename Architecture_t::Matrix_t. Definition at line 47 of file Adam.h. ◆ Scalar_t. template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . using TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::Scalar_t = typename Architecture_t::Scalar_t. Definition at line 48 of file Adam.h. Constructor & Destructor Documentation. ◆ TAdam(). template<typename Architecture_t , typename Layer_t , typename DeepNet_t > . TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::TAdam ; (; DeepNet_t & ; deepNet, . Scalar_t ; learningRate = 0.001, . Scalar_t ; beta1 = 0.9, . Scalar_t ; beta2 = 0.999, . Scalar_t ; epsilon = 1e-7 . ). Constructor. ; Definition at line 102 of file Adam.h. ◆ ~TAdam(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::~TAdam ; (; ). default . Destructor. . Member Function Documentation. ◆ GetBeta1(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::GetBeta1 ; (; ); const. inline . Getters. ; Definition at line 80 of file Adam.h. ◆ GetBeta2(). template<typename Architecture_t , typename Layer_t = VGeneralLayer<Architecture_t>, typename DeepNet_t = TDeepNet<Architecture_t, Layer_t>> . Scalar_t TMVA::DNN::TAdam< Architecture_t, Layer_t, DeepNet_t >::GetBeta2 ; (; ); const. inline . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html:5098,learn,learningRate,5098,doc/master/classTMVA_1_1DNN_1_1TAdam.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TAdam.html,1,['learn'],['learningRate']
Usability,"ArenaSize];; 2232 void *begin = &(startbuf[0]);; 2233 void *end = &(endbuf[0]);; 2234 config->fCreateIterators(alternative, &begin, &end, newProxy);; 2235 // We can not get here with a split vector of pointer, so we can indeed assume; 2236 // that actions->fConfiguration != null.; 2237 ; 2238 action(buf,begin,nvalues);; 2239 ; 2240 if (begin != &(startbuf[0])) {; 2241 // assert(end != endbuf);; 2242 config->fDeleteTwoIterators(begin,end);; 2243 }; 2244 }; 2245 newProxy->Commit(alternative);; 2246 ; 2247 buf.CheckByteCount(start,count,config->fTypeName);; 2248 return 0;; 2249 }; 2250 ; 2251 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionFloat16(TBuffer &buf, void *addr, const TConfiguration *conf); 2252 {; 2253 return ReadNumericalCollection<Float_t,SimpleReadFloat16 >(buf,addr,conf);; 2254 }; 2255 ; 2256 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionDouble32(TBuffer &buf, void *addr, const TConfiguration *conf); 2257 {; 2258 return ReadNumericalCollection<Double_t,SimpleReadDouble32 >(buf,addr,conf);; 2259 }; 2260 ; 2261 template <typename T>; 2262 static INLINE_TEMPLATE_ARGS Int_t ReadCollectionBasicType(TBuffer &buf, void *addr, const TConfiguration *conf); 2263 {; 2264 return ReadNumericalCollection<T,SimpleRead<T> >(buf,addr,conf);; 2265 }; 2266 ; 2267 template <typename From, typename To>; 2268 struct ConvertRead {; 2269 static INLINE_TEMPLATE_ARGS void Action(TBuffer &buf, void *addr, Int_t nvalues); 2270 {; 2271 From *temp = new From[nvalues];; 2272 buf.ReadFastArray(temp, nvalues);; 2273 To *vec = (To*)addr;; 2274 for(Int_t ind = 0; ind < nvalues; ++ind) {; 2275 vec[ind] = (To)temp[ind];; 2276 }; 2277 delete [] temp;; 2278 }; 2279 };; 2280 ; 2281 template <typename From, typename To>; 2282 struct ConvertRead<NoFactorMarker<From>,To> {; 2283 static INLINE_TEMPLATE_ARGS void Action(TBuffer &buf, void *addr, Int_t nvalues); 2284 {; 2285 From *temp = new From[nvalues];; 2286 buf.ReadFastArrayWithNbits(temp, nvalues,0);; 2287 To *vec = (To*)addr;; 2288 for(Int_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:92543,Simpl,SimpleRead,92543,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['Simpl'],['SimpleRead']
Usability,"Arg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::n",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooNumConvPdf.html:4756,clear,clearShapeDirty,4756,root/html526/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html526/RooNumConvPdf.html,1,['clear'],['clearShapeDirty']
Usability,"Arg::attributes() const; const RooFormulaVar&basis() const; virtual Int_tbasisCode(const char* name) const; const RooRealVar&basisConvVar() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; static voidcleanup(); virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual RooResolutionModel*convolution(RooFormulaVar* basis, RooAbsArg* owner) const; RooRealVar&convVar() const; virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooResolutionModel.html:4234,clear,clearEvalErrorLog,4234,root/html526/RooResolutionModel.html,https://root.cern,https://root.cern/root/html526/RooResolutionModel.html,1,['clear'],['clearEvalErrorLog']
Usability,"Arg::getVariablesRooFit::OwningPtr< RooArgSet > getVariables(bool stripDisconnected=true) constReturn RooArgSet with all variables (tree leaf nodes of expression tree)Definition RooAbsArg.cxx:2154; RooAbsArg::printMultilinevoid printMultiline(std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const overrideImplement multi-line detailed printing.Definition RooAbsArg.cxx:1589; RooAbsArg::cloneTreevirtual RooAbsArg * cloneTree(const char *newname=nullptr) constClone tree expression of objects.Definition RooAbsArg.cxx:2293; RooAbsArg::cleanBranchNameTString cleanBranchName() constConstruct a mangled name from the actual name that is free of any math symbols that might be interpre...Definition RooAbsArg.cxx:2075; RooAbsArg::numProxiesInt_t numProxies() constReturn the number of registered proxies.Definition RooAbsArg.cxx:1457; RooAbsArg::_inhibitDirtystatic bool _inhibitDirtyDefinition RooAbsArg.h:668; RooAbsArg::setAttributevoid setAttribute(const Text_t *name, bool value=true)Set (default) or clear a named boolean attribute of this object.Definition RooAbsArg.cxx:222; RooAbsArg::setProxyNormSetvoid setProxyNormSet(const RooArgSet *nset)Forward a change in the cached normalization argset to all the registered proxies.Definition RooAbsArg.cxx:1468; RooAbsArg::branchNodeServerListvoid branchNodeServerList(RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) constFill supplied list with all branch nodes of the arg tree starting with ourself as top node.Definition RooAbsArg.cxx:483; RooAbsArg::getProxyRooAbsProxy * getProxy(Int_t index) constReturn the nth proxy from the proxy list.Definition RooAbsArg.cxx:1444; RooAbsArg::CloneTObject * Clone(const char *newname=nullptr) const overrideMake a clone of an object using the Streamer facility.Definition RooAbsArg.h:91; RooAbsArg::_serverListRefCountList_t _serverListDefinition RooAbsArg.h:606; RooAbsArg::leafNodeServerListvoid leafNodeServerList(RooAbsCollection *list, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8cxx_source.html:206202,clear,clear,206202,doc/master/RooAbsReal_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8cxx_source.html,1,['clear'],['clear']
Usability,"ArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Int_tcalculateBandWidth(Int_t kernel = -999); Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/Roo2DKeysPdf.html:2477,Clear,Clear,2477,root/html526/Roo2DKeysPdf.html,https://root.cern,https://root.cern/root/html526/Roo2DKeysPdf.html,1,['Clear'],['Clear']
Usability,"ArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooRealSumPdf.html:3090,Clear,Clear,3090,root/html528/RooRealSumPdf.html,https://root.cern,https://root.cern/root/html528/RooRealSumPdf.html,1,['Clear'],['Clear']
Usability,"ArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefList() const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 =",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooAddPdf.html:3762,Clear,Clear,3762,root/html528/RooAddPdf.html,https://root.cern,https://root.cern/root/html528/RooAddPdf.html,3,['Clear'],['Clear']
Usability,"ArgList(), const RooArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tcheckObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/RooProdPdf.html:4208,Clear,Clear,4208,root/html528/RooProdPdf.html,https://root.cern,https://root.cern/root/html528/RooProdPdf.html,2,['Clear'],['Clear']
Usability,"ArgSet& nset = RooArgSet()) const; voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<std::string>&RooAbsArg::attributes() const; RooAbsFunc*RooAbsReal::bindVars(const RooArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); Bool_tcanBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidclearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static voidRooAbsArg::copyList(TList& dest, const TList& source); static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*createCdf(const RooArgSet& iset, const RooCmdArg arg1, const RooCmdArg arg2 = RooCmdArg::none(), const RooCmdArg arg3 = RooCmdArg::none(), const RooCmdArg arg4 = RooCmdArg::none(), const RooCmdArg arg5 = RooCmdArg::none(), const RooCmdArg arg6 = RooCmdArg::none(), co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooAbsPdf.html:6279,clear,clearEvalErrorLog,6279,root/html526/RooAbsPdf.html,https://root.cern,https://root.cern/root/html526/RooAbsPdf.html,1,['clear'],['clearEvalErrorLog']
Usability,"ArgSet& vars, const RooArgSet* nset = 0, Bool_t clipInvalid = kFALSE) const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; Bool_tRooAbsPdf::canBeExtended() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; virtual RooFitResult*RooAbsPdf::chi2FitTo(RooDataHist& data, const RooLinkedList& cmdList); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidclearConvolutionWindow(); static voidRooAbsPdf::clearEvalError(); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); RooNumIntConfig&convIntConfig(); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooArgSet& nset = RooArgSet()); RooAbsReal*RooAbsPdf::createCdf(const RooArgSet& iset, const RooCmdArg& arg1, const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtua",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNumConvPdf.html:4959,clear,clearValueDirty,4959,root/html532/RooNumConvPdf.html,https://root.cern,https://root.cern/root/html532/RooNumConvPdf.html,1,['clear'],['clearValueDirty']
Usability,"Arguments -- Trying to set invalid state label 'RooAcceptReject' for category method1D; --- RooGenContext --- ; Using PDF RooChebychev::model[ x=x coefList=(0,0.5,-0.1) ]; Use PDF generator for (); Use MC sampling generator RooFoamGenerator for (x); RooDataSet::modelData[x] = 10000 entries; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; F F; F **************************************** F; F ****** TFoam::Initialize ****** F; F **************************************** F; F TFOAM F; F Version = 1.02M = Release date: 2005.04.10 F; F kDim = 1 = Dimension of the hyper-cubical space F; F nCells = 30 = Requested number of Cells (half of them active) F; F nSampl = 200 = No of MC events in exploration of a cell F; F nBin = 8 = No of bins in histograms, MC exploration of cell F; F EvPerBin = 25 = Maximum No effective_events/bin, MC exploration F; F OptDrive = 2 = Type of Driver =1,2 for Sigma,WtMax F; F OptRej = 1 = MC rejection on/off for OptRej=0,1 F; F MaxWtRej = 1.1 = Maximum wt in rejection for wt=1 evts F; F F; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; 11; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; F F; F *** TFoam::Initialize FINISHED!!! *** F; F nCalls = 5800 = Total number of function calls F; F XPrime = 0.10992972 = Primary total integral F; F XDiver = 0.010000374 = Driver total integral F; F mcResult = 0.099929343 = Estimate of the true MC Integral F; F F; FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF; --- RooGenContext --- ; Using PDF RooChebychev::model[ x=x coefList=(0,0.5,-0.1) ]; Use PDF generator for (); Use MC sampling generator RooFoamGenerator for (x); RooDataSet::modelData[x] = 10000 entries; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf902_numgenconfig.C. tutorialsroofitrf902_numgenconfig.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf902__numgenconfig_8C.html:6367,Guid,Guide,6367,doc/master/rf902__numgenconfig_8C.html,https://root.cern,https://root.cern/doc/master/rf902__numgenconfig_8C.html,1,['Guid'],['Guide']
Usability,"Array fgxxx are created. ; Definition at line 24 of file JetEvent.cxx. ◆ ~JetEvent(). JetEvent::~JetEvent ; (; ). override . Definition at line 38 of file JetEvent.cxx. Member Function Documentation. ◆ AddHitA(). Hit * JetEvent::AddHitA ; (; ). Add a new hit to the list of hits in detector A. ; Definition at line 124 of file JetEvent.cxx. ◆ AddHitB(). Hit * JetEvent::AddHitB ; (; ). Add a new hit to the list of hits in detector B. ; Definition at line 134 of file JetEvent.cxx. ◆ AddJet(). Jet * JetEvent::AddJet ; (; ). Add a new Jet to the list of tracks for this event. ; Definition at line 102 of file JetEvent.cxx. ◆ AddTrack(). Track * JetEvent::AddTrack ; (; ). Add a new track to the list of tracks for this event. ; Definition at line 113 of file JetEvent.cxx. ◆ Build(). void JetEvent::Build ; (; Int_t ; jetm = 3, . Int_t ; trackm = 10, . Int_t ; hitam = 100, . Int_t ; hitbm = 10 . ). Build one event. ; Definition at line 46 of file JetEvent.cxx. ◆ Clear(). void JetEvent::Clear ; (; Option_t * ; option = """"). overridevirtual . Reimplemented from TObject.; Definition at line 143 of file JetEvent.cxx. ◆ GetJets(). TClonesArray * JetEvent::GetJets ; (; ); const. inline . Definition at line 96 of file JetEvent.h. ◆ GetNhitA(). Int_t JetEvent::GetNhitA ; (; ); const. inline . Definition at line 90 of file JetEvent.h. ◆ GetNhitB(). Int_t JetEvent::GetNhitB ; (; ); const. inline . Definition at line 91 of file JetEvent.h. ◆ GetNjet(). Int_t JetEvent::GetNjet ; (; ); const. inline . Definition at line 88 of file JetEvent.h. ◆ GetNtrack(). Int_t JetEvent::GetNtrack ; (; ); const. inline . Definition at line 89 of file JetEvent.h. ◆ Reset(). void JetEvent::Reset ; (; Option_t * ; option = """"). Static function to reset all static objects for this event. ; Definition at line 154 of file JetEvent.cxx. Member Data Documentation. ◆ fgHitsA. TClonesArray * JetEvent::fgHitsA = nullptr. staticprivate . Definition at line 79 of file JetEvent.h. ◆ fgHitsB. TClonesArray * JetEvent::fg",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classJetEvent.html:12075,Clear,Clear,12075,doc/master/classJetEvent.html,https://root.cern,https://root.cern/doc/master/classJetEvent.html,1,['Clear'],['Clear']
Usability,"Array object (if one); Int_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Int_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafI(); Default constructor for LeafI*-*-*-*-*-*-*-*-; *-* ============================. TLeafI(TBranch* parent, const char* name, const char* type); Create a LeafI*-*-; *-* ==============; -. ~TLeafI(); Default destructor for a LeafI*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ======================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* =========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s); read an integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafI(). Int_t GetMaximum() const; {return fMaximum;}. Int_t GetMinimum() const; {return fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Int_t max); {fMaximum = max;",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TLeafI.html:8437,simpl,simple,8437,root/html528/TLeafI.html,https://root.cern,https://root.cern/root/html528/TLeafI.html,3,['simpl'],['simple']
Usability,"Array object (if one); Int_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Int_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafI(); Default constructor for LeafI*-*-*-*-*-*-*-*-; *-* ============================. TLeafI(TBranch* parent, const char* name, const char* type); Create a LeafI*-*-; *-* ==============; -. ~TLeafI(); Default destructor for a LeafI*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ======================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* =========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read an integer from istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafI(). Int_t GetMaximum() const; {return fMaximum;}. Int_t GetMinimum() const; {return fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Int_t ma",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TLeafI.html:8669,simpl,simple,8669,root/html534/TLeafI.html,https://root.cern,https://root.cern/root/html534/TLeafI.html,1,['simpl'],['simple']
Usability,"Array object (if one); Int_t**fPointer!Address of pointer to data buffer; TStringTNamed::fTitleobject title; Int_t*fValue!Pointer to data buffer. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafI(); Default constructor for LeafI*-*-*-*-*-*-*-*-; *-* ============================. TLeafI(TBranch* parent, const char* name, const char* type); Create a LeafI*-*-; *-* ==============; -. ~TLeafI(); Default destructor for a LeafI*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ======================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* =========================================. const char * GetTypeName() const; Returns name of leaf type*-*-*-*-; *-* =========================. Double_t GetValue(Int_t i = 0) const; Returns current value of leaf; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read an integer from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. TLeafI(). Int_t GetMaximum() const; {return fMaximum;}. Int_t GetMinimum() const; {return fMinimum;}. void * GetValuePointer() const; {return fValue;}. void SetMaximum(Int",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafI.html:9161,simpl,simple,9161,root/html602/TLeafI.html,https://root.cern,https://root.cern/root/html602/TLeafI.html,2,['simpl'],['simple']
Usability,"Array(Int_t n, Double_t *array) overrideTRandom3virtual; SaveAs(const char *filename="""", Option_t *option="""") constTObjectvirtual; SavePrimitive(std::ostream &out, Option_t *option="""")TObjectvirtual; SetBit(UInt_t f, Bool_t set)TObject; SetBit(UInt_t f)TObjectinline; SetDrawOption(Option_t *option="""")TObjectvirtual; SetDtorOnly(void *obj)TObjectstatic; SetName(const char *name)TNamedvirtual; SetNameTitle(const char *name, const char *title)TNamedvirtual; SetObjectStat(Bool_t stat)TObjectstatic; SetSeed(ULong_t seed=0) overrideTRandom3virtual; SetTitle(const char *title="""")TNamedvirtual; SetUniqueID(UInt_t uid)TObjectvirtual; Sizeof() constTNamedvirtual; Sphere(Double_t &x, Double_t &y, Double_t &z, Double_t r)TRandomvirtual; Streamer(TBuffer &) overrideTRandom3virtual; StreamerNVirtual(TBuffer &ClassDef_StreamerNVirtual_b)TRandom3inline; SysError(const char *method, const char *msgfmt,...) constTObjectvirtual; TestBit(UInt_t f) constTObjectinline; TestBits(UInt_t f) constTObjectinline; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TRandom(UInt_t seed=65539)TRandom; TRandom3(UInt_t seed=4357)TRandom3; Uniform(Double_t x1=1)TRandomvirtual; Uniform(Double_t x1, Double_t x2)TRandomvirtual; UseCurrentStyle()TObjectvirtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteRandom(const char *filename) constTRandomvirtual; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TRandom() overrideTRandom; ~TRandom3() overrideTRandom3; ~TRandomEngine()ROOT::Math::TRandomEngineinlinevirtual. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRandom3-members.html:7129,Guid,Guide,7129,doc/master/classTRandom3-members.html,https://root.cern,https://root.cern/doc/master/classTRandom3-members.html,1,['Guid'],['Guide']
Usability,"AsSQLString() constReturn the date & time in SQL compatible string format, like: 1997-01-15 20:16:28.Definition TDatime.cxx:152; TDatime::GetYearInt_t GetYear() constDefinition TDatime.h:65; TDatime::SizeofInt_t Sizeof() constDefinition TDatime.h:81; TDatime::TDatimeTDatime(UInt_t tloc, Bool_t dosDate=kFALSE)Definition TDatime.h:47; TDatime::GetMinuteInt_t GetMinute() constDefinition TDatime.h:70; TDatime::operator!=friend Bool_t operator!=(const TDatime &d1, const TDatime &d2)Definition TDatime.h:104; TDatime::TDatimeTDatime()Create a TDatime and set it to the current time.Definition TDatime.cxx:50; TDatime::Setvoid Set()Set Date/Time to current time as reported by the system.Definition TDatime.cxx:289; TDatime::ConvertUInt_t Convert(Bool_t toGMT=kFALSE) constConvert fDatime from TDatime format to the standard time_t format.Definition TDatime.cxx:182; TDatime::fDatimeUInt_t fDatimeDefinition TDatime.h:42; TDatime::operator>=friend Bool_t operator>=(const TDatime &d1, const TDatime &d2)Definition TDatime.h:112; TDatime::GetTimeInt_t GetTime() constReturn time in form of 123623 (i.e. 12:36:23)Definition TDatime.cxx:259; TDatime::operator<friend Bool_t operator<(const TDatime &d1, const TDatime &d2)Definition TDatime.h:106; TDatime::operator=TDatime & operator=(const TDatime &d)Definition TDatime.h:99; TDatime::operator==friend Bool_t operator==(const TDatime &d1, const TDatime &d2)Definition TDatime.h:102; TDatime::GetDateTimestatic void GetDateTime(UInt_t datetime, Int_t &date, Int_t &time)Static function that returns the date and time.Definition TDatime.cxx:431; TDatime::AsStringconst char * AsString() constReturn the date & time as a string (ctime() format).Definition TDatime.cxx:102; TDatime::ReadBuffervoid ReadBuffer(char *&buffer)Decode Date/Time from output buffer, used by I/O system.Definition TDatime.cxx:278; bool; int; unsigned int. corebaseincTDatime.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:03 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDatime_8h_source.html:9522,Guid,Guide,9522,doc/master/TDatime_8h_source.html,https://root.cern,https://root.cern/doc/master/TDatime_8h_source.html,1,['Guid'],['Guide']
Usability,"Assembly does not need to have a medium. Due to the self-containment of assemblies, they are very practical to use when a container is hard to define due to possible overlaps during positioning. For instance, it is very easy creating honeycomb structures. A very useful example for creating and using assemblies can be found at: http://root.cern.ch/root/html/examples/assembly.C.html.; Creation of an assembly is very easy: one has just to create a TGeoVolumeAssembly object and position the components inside as for any volume:; TGeoVolume *vol = new TGeoVolumeAssembly(name);; vol->AddNode(vdaughter1, cpy1, matrix1);; vol->AddNode(vdaughter2, cpy2, matrix2);; Note that components cannot be declared as “overlapping” and that a component can be an assembly volume. For existing flat volume structures, one can define assemblies to force a hierarchical structure therefore optimizing the performance. Usage of assemblies does NOT imply penalties in performance, but in some cases, it can be observed that it is not as performing as bounding the structure in a container volume with a simple shape. Choosing a normal container is therefore recommended whenever possible. Assemblies of volumes. 18.4.3 Geometrical Transformations; All geometrical transformations handled by the modeller are provided as a built-in package. This was designed to minimize memory requirements and optimize performance of point/vector master-to-local and local-to-master computation. We need to have in mind that a transformation in TGeo has two major use-cases. The first one is for defining the placement of a volume with respect to its container reference frame. This frame will be called ‘master’ and the frame of the positioned volume - ‘local’. If T is a transformation used for positioning volume daughters, then: MASTER = T * LOCAL; Therefore Tis used to perform a local to master conversion, while T-1 for a master to local conversion. The second use case is the computation of the global transformation of a give",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:960780,simpl,simple,960780,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,AsymError == fErrorType || kNoError == fErrorType );; 655 ; 656 if ( fpTmpCoordErrorVector ); 657 {; 658 delete[] fpTmpCoordErrorVector;; 659 fpTmpCoordErrorVector = nullptr;; 660 }; 661 ; 662 if ( kNoError == fErrorType ); 663 {; 664 fCoordErrors.clear();; 665 fCoordErrorsPtr.clear();; 666 ; 667 fDataErrorHigh.clear();; 668 fDataErrorHighPtr = nullptr;; 669 ; 670 fDataErrorLow.clear();; 671 fDataErrorLowPtr = nullptr;; 672 ; 673 fDataError.clear();; 674 fDataErrorPtr = nullptr;; 675 ; 676 return;; 677 }; 678 ; 679 if ( kCoordError == fErrorType || kAsymError == fErrorType ); 680 {; 681 fCoordErrorsPtr.resize( fDim );; 682 fCoordErrors.resize( fDim );; 683 for( unsigned int i=0; i < fDim; i++ ); 684 {; 685 fCoordErrors[i].resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 686 ; 687 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 688 }; 689 ; 690 fpTmpCoordErrorVector = new double[fDim];; 691 }; 692 else; 693 {; 694 fCoordErrors.clear();; 695 fCoordErrorsPtr.clear();; 696 }; 697 ; 698 if ( kValueError == fErrorType || kCoordError == fErrorType ); 699 {; 700 fDataError.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 701 fDataErrorPtr = fDataError.empty() ? nullptr : &fDataError.front();; 702 ; 703 fDataErrorHigh.clear();; 704 fDataErrorHighPtr = nullptr;; 705 fDataErrorLow.clear();; 706 fDataErrorLowPtr = nullptr;; 707 }; 708 else if ( fErrorType == kAsymError ); 709 {; 710 fDataErrorHigh.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 711 fDataErrorHighPtr = fDataErrorHigh.empty() ? nullptr : &fDataErrorHigh.front();; 712 ; 713 fDataErrorLow.resize(fMaxPoints + FitData::VectorPadding(fMaxPoints));; 714 fDataErrorLowPtr = fDataErrorLow.empty() ? nullptr : &fDataErrorLow.front();; 715 ; 716 fDataError.clear();; 717 fDataErrorPtr = nullptr;; 718 }; 719 else; 720 {; 721 assert(false);; 722 }; 723 }; 724 ; 725 void BinData::InitBinEdge(); 726 {; 727 fBinEdge.resize( fDim );; 728 ; 729 for( unsigned int i=0; i<,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:21168,clear,clear,21168,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"At(Float_t c, Int_t i); virtual voidTH1::AddBinContent(Int_t bin); virtual voidTH1::AddBinContent(Int_t bin, Double_t w); static voidTH1::AddDirectory(Bool_t add = kTRUE); static Bool_tTH1::AddDirectoryStatus(); voidTArrayF::Adopt(Int_t n, Float_t* array); virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Option_t* option = """") const; virtual Double_tTH1::AndersonDarlingTest(const TH1* h2, Double_t& advalue) const; virtual voidTObject::AppendPad(Option_t* option = """"); Float_tTArrayF::At(Int_t i) const; virtual voidTH1::Browse(TBrowser* b); virtual Int_tTH1::BufferEmpty(Int_t action = 0); virtual Double_tTH1::Chi2Test(const TH1* h2, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chi2TestX(const TH1* h2, Double_t& chi2, Int_t& ndf, Int_t& igood, Option_t* option = ""UU"", Double_t* res = 0) const; virtual Double_tTH1::Chisquare(TF1* f1, Option_t* option = """") const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual Double_tTH1::ComputeIntegral(Bool_t onlyPositive = false); virtual voidCopy(TObject& obj) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTH1::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTH1::DistancetoPrimitive(Int_t px, Int_t py); virtual Bool_tTH1::Divide(const TH1* h1); virtual Bool_tTH1::Divide(TF1* f1, Double_t c1 = 1); virtual Bool_tTH1::Divide(const TH1* h1, const TH1* h2, Double_t c1 = 1, Double_t c2 = 1, Option_t* option = """")MENU ; virtual voidTH1::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual TH1*TH1::DrawCopy(Option_t* option = """") const; virtual TH1*TH1::DrawNormalized(Option_t* optio",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1K.html:2314,Clear,Clear,2314,root/html534/TH1K.html,https://root.cern,https://root.cern/root/html534/TH1K.html,1,['Clear'],['Clear']
Usability,"AttFill::Modify();; 1956 }; 1957 ; 1958 // Draw a standard Histogram (default); 1959 ; 1960 if ((optionHist) || !chopt[0]) {; 1961 if (!optionRot) {; 1962 gxwork[0] = wmin;; 1963 if (!optionOne) gywork[0] = TMath::Min(TMath::Max((Double_t)0,gPad->GetUymin()); 1964 ,gPad->GetUymax());; 1965 else gywork[0] = gPad->GetUymin();; 1966 ywmin = gywork[0];; 1967 npt = 2;; 1968 for (i=first; i<=last;i++) {; 1969 if (!optionBins) {; 1970 gxwork[npt-1] = gxwork[npt-2];; 1971 gxwork[npt] = wmin+((i-first+1)*delta);; 1972 } else {; 1973 xi1 = x[i]; xi = x[i-1];; 1974 if (xi1 < xi) {; 1975 if (i != last) Error(where, ""X must be in increasing order"");; 1976 else Error(where, ""X must have N+1 values with option N"");; 1977 goto do_cleanup;; 1978 }; 1979 gxwork[npt-1] = x[i-1]; gxwork[npt] = x[i];; 1980 }; 1981 gywork[npt-1] = y[i-1];; 1982 gywork[npt] = y[i-1];; 1983 if (gywork[npt] < vymin) {gywork[npt] = vymin; gywork[npt-1] = vymin;}; 1984 if ((gxwork[npt-1] >= uxmin-rounding && gxwork[npt-1] <= uxmax+rounding) ||; 1985 (gxwork[npt] >= uxmin-rounding && gxwork[npt] <= uxmax+rounding)) npt += 2;; 1986 if (i == last) {; 1987 gxwork[npt-1] = gxwork[npt-2];; 1988 gywork[npt-1] = gywork[0];; 1989 //make sure that the fill area does not overwrite the frame; 1990 //take into account the frame line width; 1991 if (gxwork[0] < vxmin) {gxwork[0] = vxmin; gxwork[1 ] = vxmin;}; 1992 if (gywork[0] < vymin) {gywork[0] = vymin; gywork[npt-1] = vymin;}; 1993 ; 1994 ComputeLogs(npt, optionZ);; 1995 ; 1996 // do not draw the two vertical lines on the edges; 1997 Int_t nbpoints = npt-2;; 1998 Int_t point1 = 1;; 1999 ; 2000 if (optionOff) {; 2001 // remove points before the low cutoff; 2002 Int_t ip;; 2003 for (ip=point1; ip<=nbpoints; ip++) {; 2004 if (gyworkl[ip] != ywmin) {; 2005 point1 = ip;; 2006 break;; 2007 }; 2008 }; 2009 // remove points after the high cutoff; 2010 Int_t point2 = nbpoints;; 2011 for (ip=point2; ip>=point1; ip--) {; 2012 if (gyworkl[ip] != ywmin) {; 2013 point2 = ip;; 2014 b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:73180,ux,uxmax,73180,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['ux'],['uxmax']
Usability,"Attributes |; Private Member Functions |; Friends |; List of all members ; TWebPadPainter Class ReferenceWeb Display » ROOT 6 Web Display. ; Implement TVirtualPadPainter which abstracts painting operations. ; TWebPadPainter tries to support old Paint methods of the ROOT classes. Main classes (like histograms or graphs) should be painted on JavaScript side ; Definition at line 26 of file TWebPadPainter.h. Public Member Functions;  TWebPadPainter ();  ; void ClearDrawable () override;  ; void CopyDrawable (Int_t, Int_t, Int_t) override;  ; Int_t CreateDrawable (UInt_t, UInt_t) override;  ; void DestroyDrawable (Int_t) override;  ; void DrawBox (Double_t x1, Double_t y1, Double_t x2, Double_t y2, EBoxMode mode) override;  Paint a simple box. ;  ; void DrawFillArea (Int_t n, const Double_t *x, const Double_t *y) override;  Paint filled area. ;  ; void DrawFillArea (Int_t n, const Float_t *x, const Float_t *y) override;  Paint filled area. ;  ; void DrawLine (Double_t x1, Double_t y1, Double_t x2, Double_t y2) override;  Paint a simple line. ;  ; void DrawLineNDC (Double_t u1, Double_t v1, Double_t u2, Double_t v2) override;  Paint a simple line in normalized coordinates. ;  ; void DrawPixels (const unsigned char *pixelData, UInt_t width, UInt_t height, Int_t dstX, Int_t dstY, Bool_t enableAlphaBlending) override;  Noop, for non-gl pad TASImage calls gVirtualX->CopyArea. ;  ; void DrawPolyLine (Int_t n, const Double_t *x, const Double_t *y) override;  Paint Polyline. ;  ; void DrawPolyLine (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polyline. ;  ; void DrawPolyLineNDC (Int_t n, const Double_t *u, const Double_t *v) override;  Paint polyline in normalized coordinates. ;  ; void DrawPolyMarker (Int_t n, const Double_t *x, const Double_t *y) override;  Paint polymarker. ;  ; void DrawPolyMarker (Int_t n, const Float_t *x, const Float_t *y) override;  Paint polymarker. ;  ; void DrawText (Double_t x, Double_t y, const char *text, ETextMode mode) override; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTWebPadPainter.html:1304,simpl,simple,1304,doc/master/classTWebPadPainter.html,https://root.cern,https://root.cern/doc/master/classTWebPadPainter.html,1,['simpl'],['simple']
Usability,AvgRate(). Float_t TVirtualPacketizer::TVirtualSlaveStat::GetAvgRate ; (; ). inline . Definition at line 172 of file TVirtualPacketizer.h. ◆ GetEntriesProcessed(). Long64_t TVirtualPacketizer::TVirtualSlaveStat::GetEntriesProcessed ; (; ); const. inline . Definition at line 170 of file TVirtualPacketizer.h. ◆ GetName(). const char * TVirtualPacketizer::TVirtualSlaveStat::GetName ; (; ); const. inlineoverridevirtual . Returns name of object. ; This default method returns the class name. Classes that give objects a name should override this method. ; Reimplemented from TObject.; Definition at line 168 of file TVirtualPacketizer.h. ◆ GetOrdinal(). const char * TVirtualPacketizer::TVirtualSlaveStat::GetOrdinal ; (; ); const. inline . Definition at line 169 of file TVirtualPacketizer.h. ◆ GetProcTime(). Double_t TVirtualPacketizer::TVirtualSlaveStat::GetProcTime ; (; ); const. inline . Definition at line 171 of file TVirtualPacketizer.h. ◆ GetProgressStatus(). TProofProgressStatus * TVirtualPacketizer::TVirtualSlaveStat::GetProgressStatus ; (; ). inline . Definition at line 173 of file TVirtualPacketizer.h. Friends And Related Symbol Documentation. ◆ TPacketizer. friend class TPacketizer. friend . Definition at line 160 of file TVirtualPacketizer.h. ◆ TPacketizerAdaptive. friend class TPacketizerAdaptive. friend . Definition at line 159 of file TVirtualPacketizer.h. Member Data Documentation. ◆ fSlave. TSlave* TVirtualPacketizer::TVirtualSlaveStat::fSlave. protected . Definition at line 164 of file TVirtualPacketizer.h. ◆ fStatus. TProofProgressStatus* TVirtualPacketizer::TVirtualSlaveStat::fStatus. protected . Definition at line 165 of file TVirtualPacketizer.h. ◆ fWrkFQDN. TString TVirtualPacketizer::TVirtualSlaveStat::fWrkFQDN. protected . Definition at line 163 of file TVirtualPacketizer.h. proof/proof/inc/TVirtualPacketizer.h. TVirtualPacketizerTVirtualSlaveStat. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:45 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html:12400,Guid,Guide,12400,doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,https://root.cern,https://root.cern/doc/master/classTVirtualPacketizer_1_1TVirtualSlaveStat.html,1,['Guid'],['Guide']
Usability,"Axis::Set"", ""bins must be in increasing order"");; 816 fXmin = fXbins.fArray[0];; 817 fXmax = fXbins.fArray[fNbins];; 818 if (!fParent) SetDefaults();; 819}; 820 ; 821////////////////////////////////////////////////////////////////////////////////; 822/// Initialize axis with variable bins; 823 ; 824void TAxis::Set(Int_t nbins, const Double_t *xbins); 825{; 826 Int_t bin;; 827 fNbins = nbins;; 828 fXbins.Set(fNbins+1);; 829 for (bin=0; bin<= fNbins; bin++); 830 fXbins.fArray[bin] = xbins[bin];; 831 for (bin=1; bin<= fNbins; bin++); 832 if (fXbins.fArray[bin] < fXbins.fArray[bin-1]); 833 Error(""TAxis::Set"", ""bins must be in increasing order"");; 834 fXmin = fXbins.fArray[0];; 835 fXmax = fXbins.fArray[fNbins];; 836 if (!fParent) SetDefaults();; 837}; 838 ; 839////////////////////////////////////////////////////////////////////////////////; 840/// Set axis alphanumeric; 841 ; 842void TAxis::SetAlphanumeric(Bool_t alphanumeric); 843{; 844 if (alphanumeric) fBits2 |= kAlphanumeric;; 845 else fBits2 &= ~kAlphanumeric;; 846 ; 847 // clear underflow and overflow (in an alphanumeric situation they do not make sense); 848 // NOTE: using AddBinContent instead of SetBinContent in order to not change; 849 // the number of entries; 850 //((TH1 *)fParent)->ClearUnderflowAndOverflow();; 851 // L.M. 26.1.15 Keep underflow and overflows (see ROOT-7034); 852 if (gDebug && fParent) {; 853 TH1 * h = dynamic_cast<TH1*>( fParent);; 854 if (!h) return;; 855 double s[TH1::kNstat];; 856 h->GetStats(s);; 857 if (s[0] != 0. && gDebug > 0); 858 Info(""SetAlphanumeric"",""Cannot switch axis %s of histogram %s to alphanumeric: it has non-zero content"",GetName(),h->GetName());; 859 }; 860}; 861 ; 862 ; 863////////////////////////////////////////////////////////////////////////////////; 864/// Set axis default values (from TStyle); 865 ; 866void TAxis::SetDefaults(); 867{; 868 fFirst = 0;; 869 fLast = 0;; 870 fBits2 = 0;; 871 char name[2];; 872 strlcpy(name,GetName(),2);; 873 name[1] = 0;; 874 TAttAxis:",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TAxis_8cxx_source.html:28144,clear,clear,28144,doc/master/TAxis_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TAxis_8cxx_source.html,2,"['Clear', 'clear']","['ClearUnderflowAndOverflow', 'clear']"
Usability,"A ; kRearranged ; kGauss ; kUniform ; kMaxVariableTransform . Definition at line 114 of file Types.h. Constructor & Destructor Documentation. ◆ ~Types(). TMVA::Types::~Types ; (; ). Definition at line 61 of file Types.cxx. ◆ Types(). TMVA::Types::Types ; (; ). private . constructor ; Definition at line 56 of file Types.cxx. Member Function Documentation. ◆ AddTypeMapping(). Bool_t TMVA::Types::AddTypeMapping ; (; Types::EMVA ; method, . const TString & ; methodname . ). Definition at line 101 of file Types.cxx. ◆ DestroyInstance(). void TMVA::Types::DestroyInstance ; (; ). static . ""destructor"" of the single instance ; Definition at line 90 of file Types.cxx. ◆ GetMethodName(). TString TMVA::Types::GetMethodName ; (; Types::EMVA ; method); const. Definition at line 136 of file Types.cxx. ◆ GetMethodType(). TMVA::Types::EMVA TMVA::Types::GetMethodType ; (; const TString & ; method); const. returns the method type (enum) for a given method (string) ; Definition at line 121 of file Types.cxx. ◆ Instance(). TMVA::Types & TMVA::Types::Instance ; (; ). static . The single instance of ""Types"" if existing already, or create it (Singleton) ; Definition at line 70 of file Types.cxx. ◆ Log(). MsgLogger & TMVA::Types::Log ; (; ); const. inlineprivate . Definition at line 182 of file Types.h. Member Data Documentation. ◆ fgTypesPtr. std::atomic< TMVA::Types * > TMVA::Types::fgTypesPtr {0}. staticprivate . Definition at line 173 of file Types.h. ◆ fLogger. MsgLogger* TMVA::Types::fLogger. mutableprivate . ! message logger ; Definition at line 181 of file Types.h. ◆ fStr2type. std::map<TString, TMVA::Types::EMVA> TMVA::Types::fStr2type. private . types-to-text map ; Definition at line 180 of file Types.h. Libraries for TMVA::Types:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/Types.h; tmva/tmva/src/Types.cxx. TMVATypes. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:44 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Types.html:5751,Guid,Guide,5751,doc/master/classTMVA_1_1Types.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Types.html,1,['Guid'],['Guide']
Usability,"B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0, const double* hint = 0) const; run an automatic scan until the desired accurancy is reached; Start by default from the full interval (min,max) of the POI and the",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/RooStats__HypoTestInverter.html:8087,Clear,Clear,8087,root/html530/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html530/RooStats__HypoTestInverter.html,2,['Clear'],['Clear']
Usability,"B.; An HypoTestCalculator (Hybrid of Frequentis) will be created using the; S+B model as the null and the B model as the alternate; If no variable to scan are given they are assumed to be the first variable; from the parameter of interests of the null model. HypoTestInverter(const RooStats::HypoTestInverter& rhs); copy-constructor; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. HypoTestInverter & operator=(const RooStats::HypoTestInverter& rhs); assignment operator; NOTE: this class does not copy the contained result and; the HypoTestCalculator, but only the pointers; It requires the original HTI to be alive. ~HypoTestInverter(); destructor (delete the HypoTestInverterResult). TestStatistic * GetTestStatistic() const; return the test statistic which is or will be used by the class. bool SetTestStatistic(RooStats::TestStatistic& stat); set the test statistic to use. void Clear(); delete contained result and graph. void CreateResults() const; create a new HypoTestInverterResult to hold all computed results. HypoTestInverterResult* GetInterval() const; Run a fixed scan or the automatic scan depending on the configuration; Return if needed a copy of the result object which will be managed by the user. HypoTestResult * Eval(RooStats::HypoTestCalculatorGeneric& hc, bool adaptive, double clsTarget) const; Run the Hypothesis test at a previous configured point; (internal function called by RunOnePoint). bool RunFixedScan(int nBins, double xMin, double xMax, bool scanLog = false) const; Run a Fixed scan in npoints between min and max. bool RunOnePoint(double thisX, bool adaptive = false, double clTarget = -1) const; run only one point at the given POI value. bool RunLimit(double& limit, double& limitErr, double absTol = 0, double relTol = 0, const double* hint = 0) const; run an automatic scan until the desired accurancy is reached; Start by default from the full interval (min,m",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStats__HypoTestInverter.html:8724,Clear,Clear,8724,root/html534/RooStats__HypoTestInverter.html,https://root.cern,https://root.cern/root/html534/RooStats__HypoTestInverter.html,3,['Clear'],['Clear']
Usability,"BBox ();  ; virtual void ComputeBBox ()=0;  ; Float_t * GetBBox ();  ; Bool_t GetBBoxOK () const;  ; TAttBBox & operator= (const TAttBBox &tab);  ; void ResetBBox ();  ; void SetupBBoxCube (Float_t extent, Float_t x, Float_t y, Float_t z);  Setup bounding box as cube with given extent and center position. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveProjectable;  TEveProjectable ();  Constructor. ;  ; virtual ~TEveProjectable ();  Destructor. ;  ; virtual void AddProjected (TEveProjected *p);  ; virtual void AddProjectedsToSet (std::set< TEveElement * > &set);  Add the projected elements to the set, dyn-casting them to TEveElement. ;  ; virtual void AnnihilateProjecteds ();  Optimized destroy of projected elements with condition there is only one parent for projected element. ;  ; ProjList_i BeginProjecteds ();  ; virtual void ClearProjectedList ();  ; ProjList_i EndProjecteds ();  ; virtual Bool_t HasProjecteds () const;  ; virtual void PropagateMainColor (Color_t color, Color_t old_color);  Set main color of projecteds if their color is the same as old_color. ;  ; virtual void PropagateMainTransparency (Char_t t, Char_t old_t);  Set main transparency of projecteds if their transparency is the same as the old one. ;  ; virtual void PropagateRenderState (Bool_t rnr_self, Bool_t rnr_children);  Set render state of projecteds. ;  ; virtual void PropagateVizParams (TEveElement *el=nullptr);  Set visualization parameters of projecteds. ;  ; virtual void RemoveProjected (TEveProjected *p);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TEveElement; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveCaloViz.html:29708,Clear,ClearProjectedList,29708,doc/master/classTEveCaloViz.html,https://root.cern,https://root.cern/doc/master/classTEveCaloViz.html,1,['Clear'],['ClearProjectedList']
Usability,BSeekIndex; Int_t*TFileCacheRead::fBSeekLen; Int_t*TFileCacheRead::fBSeekPos; Int_tTFileCacheRead::fBSeekSize; Long64_t*TFileCacheRead::fBSeekSort; Int_t*TFileCacheRead::fBSeekSortLen; Int_tfBlocksToGo; TList*TTreeCache::fBrNames! list of branch names in the cache; TObjArray*TTreeCache::fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Int_tfCycle; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously ; Bool_tTTreeCache::fEnabled! cache enabled for cached reading; Long64_tTTreeCache::fEntryCurrent! current lowest entry number in the cache; Long64_tTTreeCache::fEntryMax! last entry in the cache; Long64_tTTreeCache::fEntryMin! first entry in the cache; Long64_tTTreeCache::fEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tTTreeCache::fFillTimes! how many times we can fill the current buffer; Bool_tTTreeCache::fFirstBuffer! true if first buffer is used for prefetching; Long64_tTTreeCache::fFirstEntry! save the value of the first entry; Bool_tTTreeCache::fFirstTime! save the fact that we processes the first entry; TMutex*fIOMutex; Bool_tTTreeCache::fIsLearning! true if cache is in learning mode; Bool_tTTreeCache::fIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TTreeCacheUnzip.html:12480,learn,learning,12480,root/html534/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html534/TTreeCacheUnzip.html,1,['learn'],['learning']
Usability,BSeekLen[fBNseek]; Int_t*TFileCacheRead::fBSeekPos[fBNseek]; Int_tTFileCacheRead::fBSeekSize; Long64_t*TFileCacheRead::fBSeekSort[fBNseek]; Int_t*TFileCacheRead::fBSeekSortLen[fBNseek]; Int_tfBlocksToGo; TList*TTreeCache::fBrNames! list of branch names in the cache; TObjArray*TTreeCache::fBranches! List of branches to be stored in the cache; char*TFileCacheRead::fBuffer[fBufferSize] buffer of contiguous prefetched blocks; Int_tTFileCacheRead::fBufferLenCurrent buffer length (<= fBufferSize); Int_tTFileCacheRead::fBufferSizeAllocated size of fBuffer (at a given time); Int_tTFileCacheRead::fBufferSizeMinOriginal size of fBuffer; Long64_tTFileCacheRead::fBytesReadNumber of bytes read for this cache; Long64_tTFileCacheRead::fBytesReadExtraNumber of extra bytes (overhead) read by the readahead buffer; Int_tfCycle; Bool_tTFileCacheRead::fEnablePrefetchingreading by prefetching asynchronously; Bool_tTTreeCache::fEnabled! cache enabled for cached reading; Long64_tTTreeCache::fEntryCurrent! current lowest entry number in the cache; Long64_tTTreeCache::fEntryMax! last entry in the cache; Long64_tTTreeCache::fEntryMin! first entry in the cache; Long64_tTTreeCache::fEntryNext! next entry number where cache must be filled; TFile*TFileCacheRead::fFilePointer to file; Int_tTTreeCache::fFillTimes! how many times we can fill the current buffer; Bool_tTTreeCache::fFirstBuffer! true if first buffer is used for prefetching; Long64_tTTreeCache::fFirstEntry! save the value of the first entry; Bool_tTTreeCache::fFirstTime! save the fact that we processes the first entry; TMutex*fIOMutex; Bool_tTTreeCache::fIsLearning! true if cache is in learning mode; Bool_tTTreeCache::fIsManual! true if cache is StopLearningPhase was used; Bool_tTFileCacheRead::fIsSortedTrue if fSeek array is sorted; Bool_tTFileCacheRead::fIsTransferredTrue when fBuffer contains something valid; Int_tfLastReadPos; Int_t*TFileCacheRead::fLen[fNb] Length of long buffers; TMutex*fMutexListMutex to protect the various lists.,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeCacheUnzip.html:13166,learn,learning,13166,root/html602/TTreeCacheUnzip.html,https://root.cern,https://root.cern/root/html602/TTreeCacheUnzip.html,2,['learn'],['learning']
Usability,"Background; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoMediumEditor.html:23020,undo,undoing,23020,root/html604/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html604/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"Background; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for medium editor. ~TGeoMediumEditor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. void DoEditMaterial(); Edit selected material. void DoMedName(); Slot for medium name. void DoMedId(); Slot for medium id. void DoSelectMaterial(); Select the material component. void DoToggleSensitive(); Slot for sensitivity. void DoMagfldSelect(Int_t ientry); Slot for mag. field. void DoFieldm(); Slot for max field. void DoTmaxfd(); Slot for tmaxfd. void DoStemax(); Slot for the max allowed step. void DoDeemax(); Slot for the maximum allowed dedx. void DoEpsil(); Slot for tracking precision. void DoStmin(); Slot for min. step. void DoApply(); Slot for applying modifications. void DoUndo(); Slot for undoing last operation. TGeoMediumEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:01; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoMediumEditor.html:23020,undo,undoing,23020,root/html602/TGeoMediumEditor.html,https://root.cern,https://root.cern/root/html602/TGeoMediumEditor.html,1,['undo'],['undoing']
Usability,"BarOffset(0.5);; h2bh->SetStats(0);; for (i=1;i<=nx;i++) h2bh->Fill(os_X[i-1], d_35_1[i-1]);. h2bh->Draw(""hbar same"");. return cbh;; }; TH2Poly Drawing; The following options are supported:. ""SCAT""; Draw a scatter plot (default). ""COL""; Draw a color plot. All the none empty bins are painted. Empty bins are not; painted. ""COLZ""; Same as ""COL"". In addition the color palette is also drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTN""; Draw bin names as text. ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""L""; Draw the bins boundaries as lines.; The lines attibutes are the TGraphs ones. ""P""; Draw the bins boundaries as markers.; The markers attibutes are the TGraphs ones. ""F""; Draw the bins boundaries as filled polygons.; The filled polygons attibutes are the TGraphs ones. TH2Poly can; be drawn as a color plot (option COL). TH2Poly bins can have any; shapes. The bins are defined as graphs. The following macro is a very simple; example showing how to book a TH2Poly and draw it. Picture; Source. {; TCanvas *ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; TH2Poly *h2p = new TH2Poly();; h2p->SetName(""h2poly_name"");; h2p->SetTitle(""h2poly_title"");; Double_t px1[] = {0, 5, 6};; Double_t py1[] = {0, 0, 5};; Double_t px2[] = {0, -1, -1, 0};; Double_t py2[] = {0, 0, -1, 3};; Double_t px3[] = {4, 3, 0, 1, 2.4};; Double_t py3[] = {4, 3.7, 1, 3.7, 2.5};; h2p->AddBin(3, px1, py1);; h2p->AddBin(4, px2, py2);; h2p->AddBin(5, px3, py3);; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; Double_t fx[] = {0.1, -0.5, -0.7, 1};; Double_t fy[] = {0.01, -0.5, -0.5, 3};; Double_t fw[] = {3, 1, 1, 1.5};; h2p->FillN(4, fx, fy, fw);; gStyle->SetPalette(1);; h2p->Draw(""col"");; return ch2p1;; }; Rectangular bins are a frequent case. The special version of; the AddBin method allows to define them more easily like; shown in the following example. Picture; Source. //This tutorial illustrates h",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/THistPainter.html:59031,simpl,simple,59031,root/html534/THistPainter.html,https://root.cern,https://root.cern/root/html534/THistPainter.html,2,['simpl'],['simple']
Usability,"BarOffset(0.5);; h2bh->SetStats(0);; for (i=1;i<=nx;i++) h2bh->Fill(os_X[i-1], d_35_1[i-1]);. h2bh->Draw(""hbar same"");. return cbh;; }; TH2Poly Drawing; The following options are supported:. ""SCAT""; Draw a scatter plot (default). ""COL""; Draw a color plot. All the none empty bins are painted. Empty bins are not; painted. ""COLZ""; Same as ""COL"". In addition the color palette is also drawn. ""TEXT""; Draw bin contents as text (format set via gStyle->SetPaintTextFormat). ""TEXTN""; Draw bin names as text. ""TEXTnn""; Draw bin contents as text at angle nn (0 < nn < 90). ""L""; Draw the bins boundaries as lines.; The lines attibutes are the TGraphs ones. ""P""; Draw the bins boundaries as markers.; The markers attibutes are the TGraphs ones. ""F""; Draw the bins boundaries as filled polygons.; The filled polygons attibutes are the TGraphs ones. TH2Poly can; be drawn as a color plot (option COL). TH2Poly bins can have any; shapes. The bins are defined as graphs. The following macro is a very simple; example showing how to book a TH2Poly and draw it. Picture; Source. {; TCanvas *ch2p1 = new TCanvas(""ch2p1"",""ch2p1"",600,400);; TH2Poly *h2p = new TH2Poly();; h2p->SetName(""h2poly_name"");; h2p->SetTitle(""h2poly_title"");; Double_t x1[] = {0, 5, 6};; Double_t y1[] = {0, 0, 5};; Double_t x2[] = {0, -1, -1, 0};; Double_t y2[] = {0, 0, -1, 3};; Double_t x3[] = {4, 3, 0, 1, 2.4};; Double_t y3[] = {4, 3.7, 1, 4.7, 3.5};; h2p->AddBin(3, x1, y1);; h2p->AddBin(4, x2, y2);; h2p->AddBin(4, x3, y3);; h2p->Fill(0.1, 0.01, 3);; h2p->Fill(-0.5, -0.5, 7);; h2p->Fill(-0.7, -0.5, 1);; h2p->Fill(1, 3, 1.5);; Double_t fx[] = {0.1, -0.5, -0.7, 1};; Double_t fy[] = {0.01, -0.5, -0.5, 3};; Double_t fw[] = {3, 1, 1, 1.5};; h2p->FillN(4, fx, fy, fw);; gStyle->SetPalette(1);; h2p->Draw(""col"");; return ch2p1;; }; Rectangular bins are a frequent case. The special version of; the AddBin method allows to define them more easily like; shown in the following example. Picture; Source. //This tutorial illustrates how to create",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/THistPainter.html:55437,simpl,simple,55437,root/html530/THistPainter.html,https://root.cern,https://root.cern/root/html530/THistPainter.html,2,['simpl'],['simple']
Usability,Base & ROOT::Experimental::RNTupleDirectAccessView< T >::GetField ; (; ); const. inline . Definition at line 324 of file RNTupleView.hxx. ◆ GetFieldRange(). template<typename T > . RNTupleGlobalRange ROOT::Experimental::RNTupleDirectAccessView< T >::GetFieldRange ; (; ); const. inline . Definition at line 325 of file RNTupleView.hxx. ◆ operator()() [1/2]. template<typename T > . const T & ROOT::Experimental::RNTupleDirectAccessView< T >::operator() ; (; NTupleSize_t ; globalIndex). inline . Definition at line 327 of file RNTupleView.hxx. ◆ operator()() [2/2]. template<typename T > . const T & ROOT::Experimental::RNTupleDirectAccessView< T >::operator() ; (; RClusterIndex ; clusterIndex). inline . Definition at line 328 of file RNTupleView.hxx. ◆ operator=() [1/2]. template<typename T > . RNTupleDirectAccessView & ROOT::Experimental::RNTupleDirectAccessView< T >::operator= ; (; const RNTupleDirectAccessView< T > & ; other). delete . ◆ operator=() [2/2]. template<typename T > . RNTupleDirectAccessView & ROOT::Experimental::RNTupleDirectAccessView< T >::operator= ; (; RNTupleDirectAccessView< T > && ; other). default . Friends And Related Symbol Documentation. ◆ RNTupleCollectionView. template<typename T > . friend class RNTupleCollectionView. friend . Definition at line 295 of file RNTupleView.hxx. ◆ RNTupleReader. template<typename T > . friend class RNTupleReader. friend . Definition at line 294 of file RNTupleView.hxx. Member Data Documentation. ◆ fField. template<typename T > . RField<T> ROOT::Experimental::RNTupleDirectAccessView< T >::fField. protected . Definition at line 298 of file RNTupleView.hxx. ◆ fFieldRange. template<typename T > . RNTupleGlobalRange ROOT::Experimental::RNTupleDirectAccessView< T >::fFieldRange. protected . Definition at line 299 of file RNTupleView.hxx. tree/ntuple/v7/inc/ROOT/RNTupleView.hxx. ROOTExperimentalRNTupleDirectAccessView. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html:4744,Guid,Guide,4744,doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Experimental_1_1RNTupleDirectAccessView.html,1,['Guid'],['Guide']
Usability,"Base &covMatrix);  ;  RooMultiVarGaussian (const char *name, const char *title, const RooArgList &xvec, const TVectorD &mu, const TMatrixDBase &covMatrix);  ;  RooMultiVarGaussian (const RooMultiVarGaussian &other, const char *name=nullptr);  ; double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const override;  Handle full integral here. ;  ; TObject * clone (const char *newname) const override;  ; const TMatrixDSym & covarianceMatrix () const;  ; void generateEvent (Int_t code) override;  Retrieve generator config from cache. ;  ; Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const override;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const override;  Special case: generate all observables. ;  ; void initGenerator (Int_t code) override;  Clear the GenData cache as its content is not invariant under changes in the mu vector. ;  ; TClass * IsA () const override;  ; const RooArgList & muVec () const;  ; void setAnaIntZ (double z);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; const RooArgList & xVec () const;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Analytical integral with normalization (see RooAbsReal::analyticalIntegralWN() for further information). ;  ; virtual RooAbsGenContext * autoGenContext (const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooMultiVarGaussian.html:1943,Clear,Clear,1943,doc/master/classRooMultiVarGaussian.html,https://root.cern,https://root.cern/doc/master/classRooMultiVarGaussian.html,1,['Clear'],['Clear']
Usability,"Base, TMVA::MethodBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCompositeBase, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodHMatrix, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ StreamerNVirtual(). void TMVA::IMethod::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 102 of file IMethod.h. ◆ Train(). virtual void TMVA::IMethod::Train ; (; void ; ). pure virtual . Implemented in TMVA::MethodPyAdaBoost, TMVA::MethodPyGTB, TMVA::MethodPyKeras, TMVA::MethodPyRandomForest, TMVA::MethodPyTorch, TMVA::MethodC50, TMVA::MethodRSNNS, TMVA::MethodRSVM, TMVA::MethodRXGB, TMVA::MethodDL, TMVA::MethodDNN, TMVA::MethodHMatrix, TMVA::MethodLikelihood, TMVA::MethodMLP, TMVA::PyMethodBase, TMVA::RMethodBase, TMVA::MethodANNBase, TMVA::MethodBase, TMVA::MethodCompositeBase, TMVA::MethodBayesClassifier, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCategory, TMVA::MethodCFMlpANN, TMVA::MethodCrossValidation, TMVA::MethodCuts, TMVA::MethodDT, TMVA::MethodFDA, TMVA::MethodFisher, TMVA::MethodKNN, TMVA::MethodLD, TMVA::MethodPDEFoam, TMVA::MethodPDERS, TMVA::MethodRuleFit, TMVA::MethodSVM, and TMVA::MethodTMlpANN. ◆ WriteMonitoringHistosToFile(). virtual void TMVA::IMethod::WriteMonitoringHistosToFile ; (; void ; ); const. pure virtual . Implemented in TMVA::MethodANNBase, TMVA::MethodBase, TMVA::MethodLikelihood, TMVA::MethodBDT, TMVA::MethodBoost, TMVA::MethodCrossValidation, TMVA::MethodCuts, and TMVA::MethodRuleFit. The documentation for this class was generated from the following file:; tmva/tmva/inc/TMVA/IMethod.h. TMVAIMethod. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:33 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1IMethod.html:13620,Guid,Guide,13620,doc/master/classTMVA_1_1IMethod.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1IMethod.html,1,['Guid'],['Guide']
Usability,"Base::fAnalysisTypemethod-mode : true --> regression, false --> classification; UInt_tTMVA::MethodBase::fBackgroundClassindex of the Background-class; vector<TString>*TMVA::MethodBase::fInputVarsvector of input variables used in MVA; vector<Float_t>*TMVA::MethodBase::fMulticlassReturnValholds the return-values for the multiclass classification; Int_tTMVA::MethodBase::fNbinsnumber of bins in representative histograms; Int_tTMVA::MethodBase::fNbinsHnumber of bins in evaluation histograms; TMVA::Ranking*TMVA::MethodBase::fRankingpointer to ranking object (created by derived classifiers); vector<Float_t>*TMVA::MethodBase::fRegressionReturnValholds the return-values for the regression; UInt_tTMVA::MethodBase::fSignalClassindex of the Signal-class. private:. Int_tfBalanceDepthnumber of binary tree levels used for balancing tree; vector<TMVA::kNN::Event,allocator<TMVA::kNN::Event> >fEvent! (untouched) events used for learning; TStringfKernel=""Gaus"",""Poln"" - kernel type for smoothing; TMVA::LDAfLDA! Experimental feature for local knn analysis; TMVA::kNN::ModulekNN*fModule! module where all work is done; Float_tfScaleFracfraction of events used to compute variable width; Float_tfSigmaFactscale factor for Gaussian sigma in Gaus. kernel; Double_tfSumOfWeightsBsum-of-weights for background training events ; Double_tfSumOfWeightsSsum-of-weights for signal training events; Int_tfTreeOptDepthnumber of binary tree levels used for optimization; Bool_tfTrimset equal number of signal and background events; Bool_tfUseKerneluse polynomial kernel weight function; Bool_tfUseLDAuse local linear discriminat analysis to compute MVA; Bool_tfUseWeightuse weights to count kNN; Int_tfnkNNnumber of k-nearest neighbors . Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; MethodKNN(const TString& jobName, const TString& methodTitle, TMVA::DataSetInfo& theData, const TString& theOption = ""KNN"", TDirectory* theTargetDir = NULL); standard constructor. MethodKNN(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TMVA__MethodKNN.html:16299,learn,learning,16299,root/html528/TMVA__MethodKNN.html,https://root.cern,https://root.cern/root/html528/TMVA__MethodKNN.html,1,['learn'],['learning']
Usability,"BaseFunctionMultiDimTemplDocumentation for the abstract class IBaseFunctionMultiDim.Definition IFunction.h:61; ROOT::Math::IGradientFunctionMultiDimTemplInterface (abstract class) for multi-dimensional functions providing a gradient calculation.Definition IFunction.h:168; ROOT::Math::IParametricFunctionMultiDimTempl< double >; ROOT::Math::IParametricFunctionOneDimSpecialized IParamFunction interface (abstract class) for one-dimensional parametric functions It is ...Definition IParamFunction.h:161; ROOT::Math::IParametricGradFunctionMultiDimTemplInterface (abstract class) for parametric gradient multi-dimensional functions providing in addition ...Definition IParamFunction.h:227; ROOT::Math::IParametricGradFunctionOneDimInterface (abstract class) for parametric one-dimensional gradient functions providing in addition to...Definition IParamFunction.h:330; ROOT::Math::MinimizerAbstract Minimizer class, defining the interface for the various minimizer (like Minuit2,...Definition Minimizer.h:119; ROOT::Math::WrappedMultiFunctionTemplate class to wrap any C++ callable object implementing operator() (const double * x) in a multi-...Definition WrappedFunction.h:143; RooFit::MinimizerRooCmdArg Minimizer(const char *type, const char *alg=nullptr)Definition RooGlobalFunc.cxx:751; MathNamespace for new Math classes and functions.; ROOT::Math::FitMethodFunctionBasicFitMethodFunction< ROOT::Math::IMultiGenFunction > FitMethodFunctionDefinition Fitter.h:43; ROOT::Math::FitMethodGradFunctionBasicFitMethodFunction< ROOT::Math::IMultiGradFunction > FitMethodGradFunctionDefinition Fitter.h:44; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::EExecutionPolicyEExecutionPolicyDefinition EExecutionPolicy.hxx:5; ROOT::EExecutionPolicy::kSequential@ kSequential. mathmathcoreincFitFitter.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/Fitter_8h_source.html:43487,Guid,Guide,43487,doc/master/Fitter_8h_source.html,https://root.cern,https://root.cern/doc/master/Fitter_8h_source.html,1,['Guid'],['Guide']
Usability,"BatchSize. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fBatchSize. private . Definition at line 40 of file DataLoader.h. ◆ fData. template<typename AData , typename AReal > . const AData& TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fData. private . Definition at line 37 of file DataLoader.h. ◆ fNInputFeatures. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fNInputFeatures. private . Definition at line 41 of file DataLoader.h. ◆ fNOutputFeatures. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fNOutputFeatures. private . Definition at line 42 of file DataLoader.h. ◆ fNSamples. template<typename AData , typename AReal > . size_t TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fNSamples. private . Definition at line 39 of file DataLoader.h. ◆ fSampleIndices. template<typename AData , typename AReal > . std::vector<size_t> TMVA::DNN::TDataLoader< AData, TReference< AReal > >::fSampleIndices. private . Ordering of the samples in the epoch. ; Definition at line 49 of file DataLoader.h. ◆ inputMatrix. template<typename AData , typename AReal > . TMatrixT<AReal> TMVA::DNN::TDataLoader< AData, TReference< AReal > >::inputMatrix. private . Definition at line 45 of file DataLoader.h. ◆ outputMatrix. template<typename AData , typename AReal > . TMatrixT<AReal> TMVA::DNN::TDataLoader< AData, TReference< AReal > >::outputMatrix. private . Definition at line 46 of file DataLoader.h. ◆ weightMatrix. template<typename AData , typename AReal > . TMatrixT<AReal> TMVA::DNN::TDataLoader< AData, TReference< AReal > >::weightMatrix. private . Definition at line 47 of file DataLoader.h. tmva/tmva/inc/TMVA/DNN/Architectures/Reference/DataLoader.h. TMVADNNTDataLoader< AData, TReference< AReal > >. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:46 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html:7574,Guid,Guide,7574,doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DNN_1_1TDataLoader_3_01AData_00_01TReference_3_01AReal_01_4_01_4.html,1,['Guid'],['Guide']
Usability,"BckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd1 editor. ~TGeoTrd1Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy(); Slot for dy. void DoDz(); Slot for dz. TGeoTrd1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-02 16:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TGeoTrd1Editor.html:22143,undo,undoing,22143,root/html604/TGeoTrd1Editor.html,https://root.cern,https://root.cern/root/html604/TGeoTrd1Editor.html,1,['undo'],['undoing']
Usability,"BckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoTrd1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for trd1 editor. ~TGeoTrd1Editor(); Destructor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected object. Bool_t IsDelayed() const; Check if shape drawing is delayed. void DoName(); Perform name change. void DoApply(); Slot for applying modifications. void DoModified(); Slot for signaling modifications. void DoUndo(); Slot for undoing last operation. void DoDx1(); Slot for dx1. void DoDx2(); Slot for dx2. void DoDy(); Slot for dy. void DoDz(); Slot for dz. TGeoTrd1Editor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-06-30 15:04; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TGeoTrd1Editor.html:22143,undo,undoing,22143,root/html602/TGeoTrd1Editor.html,https://root.cern,https://root.cern/root/html602/TGeoTrd1Editor.html,1,['undo'],['undoing']
Usability,BenchRunCPU::fNEvents. private . Definition at line 48 of file TProofBenchRunCPU.h. ◆ fNHists. Int_t TProofBenchRunCPU::fNHists. private . Definition at line 46 of file TProofBenchRunCPU.h. ◆ fNodes. TProofNodes* TProofBenchRunCPU::fNodes. private . Definition at line 60 of file TProofBenchRunCPU.h. ◆ fNorm_perfstat_evtmax. TProfile* TProofBenchRunCPU::fNorm_perfstat_evtmax. private . Definition at line 68 of file TProofBenchRunCPU.h. ◆ fNorm_queryresult_event. TProfile* TProofBenchRunCPU::fNorm_queryresult_event. private . Definition at line 70 of file TProofBenchRunCPU.h. ◆ fNormLegend. TLegend* TProofBenchRunCPU::fNormLegend. private . Definition at line 74 of file TProofBenchRunCPU.h. ◆ fNTries. Int_t TProofBenchRunCPU::fNTries. private . Definition at line 49 of file TProofBenchRunCPU.h. ◆ fProfile_cpu_eff. TProfile* TProofBenchRunCPU::fProfile_cpu_eff. private . Definition at line 71 of file TProofBenchRunCPU.h. ◆ fProfile_perfstat_event. TProfile* TProofBenchRunCPU::fProfile_perfstat_event. private . Definition at line 65 of file TProofBenchRunCPU.h. ◆ fProfile_perfstat_evtmax. TProfile* TProofBenchRunCPU::fProfile_perfstat_evtmax. private . Definition at line 67 of file TProofBenchRunCPU.h. ◆ fProfile_queryresult_event. TProfile* TProofBenchRunCPU::fProfile_queryresult_event. private . Definition at line 69 of file TProofBenchRunCPU.h. ◆ fProfLegend. TLegend* TProofBenchRunCPU::fProfLegend. private . Definition at line 73 of file TProofBenchRunCPU.h. ◆ fStart. Int_t TProofBenchRunCPU::fStart. private . Definition at line 51 of file TProofBenchRunCPU.h. ◆ fStep. Int_t TProofBenchRunCPU::fStep. private . Definition at line 53 of file TProofBenchRunCPU.h. ◆ fStop. Int_t TProofBenchRunCPU::fStop. private . Definition at line 52 of file TProofBenchRunCPU.h. proof/proofbench/inc/TProofBenchRunCPU.h; proof/proofbench/src/TProofBenchRunCPU.cxx. TProofBenchRunCPU. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:13 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofBenchRunCPU.html:23687,Guid,Guide,23687,doc/master/classTProofBenchRunCPU.html,https://root.cern,https://root.cern/doc/master/classTProofBenchRunCPU.html,1,['Guid'],['Guide']
Usability,"BinUpEdge(binx)));; 11773 else hp->SetTitle(TString::Format(""ProjectionYZ, binx=[%d,%d] [x=%.1f..%.1f]"", binx,binx2,xaxis->GetBinLowEdge(binx),xaxis->GetBinUpEdge(binx2)));; 11774 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11775 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11776 hp->SetZTitle(""Number of Entries"");; 11777 hp->Draw(fShowOption.Data());; 11778 }; 11779 }; 11780 break;; 11781 ; 11782 case 9:; 11783 // ""zy""; 11784 {; 11785 Int_t first = xaxis->GetFirst();; 11786 Int_t last = xaxis->GetLast();; 11787 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11788 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11789 xaxis->SetRange(binx,binx2);; 11790 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11791 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11792 xx[2] = zaxis->GetXmin();; 11793 xx[1] = yaxis->GetXmax();; 11794 xx[0] = xaxis->GetBinCenter(binx);; 11795 view->WCtoNDC(xx,u);; 11796 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11797 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11798 rect1[4].SetX(rect1[0].GetX());; 11799 rect1[4].SetY(rect1[0].GetY());; 11800 xx[2] = zaxis->GetXmax();; 11801 view->WCtoNDC(xx,u);; 11802 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11803 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11804 xx[1] = yaxis->GetXmin();; 11805 view->WCtoNDC(xx,u);; 11806 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11807 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11808 xx[2] = zaxis->GetXmin();; 11809 view->WCtoNDC(xx,u);; 11810 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11811 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11812 gVirtualX->DrawPolyLine(5,rect1);; 11813 if (nbins>1) {; 11814 xx[2] = zaxis->GetXmin();; 11815 xx[1] = yaxis->GetXmax();; 11816 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11817 view->WCtoNDC(xx,u);; 11818 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11819 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11820 rect2[4].SetX(rect2[0].GetX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:430000,ux,uxmin,430000,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"BinUpEdge(biny)));; 11633 else hp->SetTitle(TString::Format(""ProjectionXZ, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11634 hp->SetXTitle(fH->GetZaxis()->GetTitle());; 11635 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11636 hp->SetZTitle(""Number of Entries"");; 11637 hp->Draw(fShowOption.Data());; 11638 }; 11639 }; 11640 break;; 11641 ; 11642 case 7:; 11643 // ""zx""; 11644 {; 11645 Int_t first = yaxis->GetFirst();; 11646 Int_t last = yaxis->GetLast();; 11647 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11648 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11649 yaxis->SetRange(biny,biny2);; 11650 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11651 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11652 xx[0] = xaxis->GetXmin();; 11653 xx[2] = zaxis->GetXmax();; 11654 xx[1] = yaxis->GetBinCenter(biny);; 11655 view->WCtoNDC(xx,u);; 11656 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11657 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11658 rect1[4].SetX(rect1[0].GetX());; 11659 rect1[4].SetY(rect1[0].GetY());; 11660 xx[0] = xaxis->GetXmax();; 11661 view->WCtoNDC(xx,u);; 11662 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11663 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11664 xx[2] = zaxis->GetXmin();; 11665 view->WCtoNDC(xx,u);; 11666 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11667 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11668 xx[0] = xaxis->GetXmin();; 11669 view->WCtoNDC(xx,u);; 11670 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11671 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11672 gVirtualX->DrawPolyLine(5,rect1);; 11673 if (nbins>1) {; 11674 xx[0] = xaxis->GetXmin();; 11675 xx[2] = zaxis->GetXmax();; 11676 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11677 view->WCtoNDC(xx,u);; 11678 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11679 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11680 rect2[4].SetX(rect2[0].GetX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:424214,ux,uxmin,424214,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"BinUpEdge(biny)));; 11703 else hp->SetTitle(TString::Format(""ProjectionZX, biny=[%d,%d] [y=%.1f..%.1f]"", biny,biny2,yaxis->GetBinLowEdge(biny),yaxis->GetBinUpEdge(biny2)));; 11704 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11705 hp->SetYTitle(fH->GetZaxis()->GetTitle());; 11706 hp->SetZTitle(""Number of Entries"");; 11707 hp->Draw(fShowOption.Data());; 11708 }; 11709 }; 11710 break;; 11711 ; 11712 case 8:; 11713 // ""yz""; 11714 {; 11715 Int_t first = xaxis->GetFirst();; 11716 Int_t last = xaxis->GetLast();; 11717 Int_t binx = first + Int_t((last-first)*(px-pxmin)/(pxmax-pxmin));; 11718 Int_t binx2 = TMath::Min(binx+nbins-1,xaxis->GetNbins() );; 11719 xaxis->SetRange(binx,binx2);; 11720 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11721 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11722 xx[2] = zaxis->GetXmin();; 11723 xx[1] = yaxis->GetXmax();; 11724 xx[0] = xaxis->GetBinCenter(binx);; 11725 view->WCtoNDC(xx,u);; 11726 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11727 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11728 rect1[4].SetX(rect1[0].GetX());; 11729 rect1[4].SetY(rect1[0].GetY());; 11730 xx[2] = zaxis->GetXmax();; 11731 view->WCtoNDC(xx,u);; 11732 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11733 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11734 xx[1] = yaxis->GetXmin();; 11735 view->WCtoNDC(xx,u);; 11736 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11737 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11738 xx[2] = zaxis->GetXmin();; 11739 view->WCtoNDC(xx,u);; 11740 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11741 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11742 gVirtualX->DrawPolyLine(5,rect1);; 11743 if (nbins>1) {; 11744 xx[2] = zaxis->GetXmin();; 11745 xx[1] = yaxis->GetXmax();; 11746 xx[0] = xaxis->GetBinCenter(binx+nbins-1);; 11747 view->WCtoNDC(xx,u);; 11748 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11749 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11750 rect2[4].SetX(rect2[0].GetX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:427107,ux,uxmin,427107,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"BinUpEdge(binz)));; 11493 else hp->SetTitle(TString::Format(""ProjectionXY, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11494 hp->SetXTitle(fH->GetYaxis()->GetTitle());; 11495 hp->SetYTitle(fH->GetXaxis()->GetTitle());; 11496 hp->SetZTitle(""Number of Entries"");; 11497 hp->Draw(fShowOption.Data());; 11498 }; 11499 }; 11500 break;; 11501 ; 11502 case 5:; 11503 // ""yx""; 11504 {; 11505 Int_t first = zaxis->GetFirst();; 11506 Int_t last = zaxis->GetLast();; 11507 Int_t binz = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11508 Int_t binz2 = TMath::Min(binz+nbins-1,zaxis->GetNbins() );; 11509 zaxis->SetRange(binz,binz2);; 11510 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11511 if (nbins>1 && rect2[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11512 xx[0] = xaxis->GetXmin();; 11513 xx[1] = yaxis->GetXmax();; 11514 xx[2] = zaxis->GetBinCenter(binz);; 11515 view->WCtoNDC(xx,u);; 11516 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11517 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11518 rect1[4].SetX(rect1[0].GetX());; 11519 rect1[4].SetY(rect1[0].GetY());; 11520 xx[0] = xaxis->GetXmax();; 11521 view->WCtoNDC(xx,u);; 11522 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11523 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11524 xx[1] = yaxis->GetXmin();; 11525 view->WCtoNDC(xx,u);; 11526 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11527 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11528 xx[0] = xaxis->GetXmin();; 11529 view->WCtoNDC(xx,u);; 11530 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11531 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11532 gVirtualX->DrawPolyLine(5,rect1);; 11533 if (nbins>1) {; 11534 xx[0] = xaxis->GetXmin();; 11535 xx[1] = yaxis->GetXmax();; 11536 xx[2] = zaxis->GetBinCenter(binz+nbins-1);; 11537 view->WCtoNDC(xx,u);; 11538 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11539 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11540 rect2[4].SetX(rect2[0].GetX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:418428,ux,uxmin,418428,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"BinUpEdge(binz)));; 11563 else hp->SetTitle(TString::Format(""ProjectionYX, binz=[%d,%d] [z=%.1f..%.1f]"", binz,binz2,zaxis->GetBinLowEdge(binz),zaxis->GetBinUpEdge(binz2)));; 11564 hp->SetXTitle(fH->GetXaxis()->GetTitle());; 11565 hp->SetYTitle(fH->GetYaxis()->GetTitle());; 11566 hp->SetZTitle(""Number of Entries"");; 11567 hp->Draw(fShowOption.Data());; 11568 }; 11569 }; 11570 break;; 11571 ; 11572 case 6:; 11573 // ""xz""; 11574 {; 11575 Int_t first = yaxis->GetFirst();; 11576 Int_t last = yaxis->GetLast();; 11577 Int_t biny = first + Int_t((last-first)*(py-pymin)/(pymax-pymin));; 11578 Int_t biny2 = TMath::Min(biny+nbins-1,yaxis->GetNbins() );; 11579 yaxis->SetRange(biny,biny2);; 11580 if (rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect1);; 11581 if (nbins>1 && rect1[0].GetX()) gVirtualX->DrawPolyLine(5,rect2);; 11582 xx[0] = xaxis->GetXmin();; 11583 xx[2] = zaxis->GetXmax();; 11584 xx[1] = yaxis->GetBinCenter(biny);; 11585 view->WCtoNDC(xx,u);; 11586 rect1[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11587 rect1[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11588 rect1[4].SetX(rect1[0].GetX());; 11589 rect1[4].SetY(rect1[0].GetY());; 11590 xx[0] = xaxis->GetXmax();; 11591 view->WCtoNDC(xx,u);; 11592 rect1[1].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11593 rect1[1].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11594 xx[2] = zaxis->GetXmin();; 11595 view->WCtoNDC(xx,u);; 11596 rect1[2].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11597 rect1[2].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11598 xx[0] = xaxis->GetXmin();; 11599 view->WCtoNDC(xx,u);; 11600 rect1[3].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11601 rect1[3].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11602 gVirtualX->DrawPolyLine(5,rect1);; 11603 if (nbins>1) {; 11604 xx[0] = xaxis->GetXmin();; 11605 xx[2] = zaxis->GetXmax();; 11606 xx[1] = yaxis->GetBinCenter(biny+nbins-1);; 11607 view->WCtoNDC(xx,u);; 11608 rect2[0].SetX(pxmin + Int_t((u[0]-uxmin)*cx));; 11609 rect2[0].SetY(pymin + Int_t((u[1]-uymin)*cy));; 11610 rect2[4].SetX(rect2[0].GetX(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/THistPainter_8cxx_source.html:421321,ux,uxmin,421321,doc/master/THistPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/THistPainter_8cxx_source.html,1,['ux'],['uxmin']
Usability,"Binding::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 40 of file RooFunctor1DBinding.h. ◆ DeclFileName(). static const char * RooFunctor1DBinding::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 53 of file RooFunctor1DBinding.h. ◆ evaluate(). double RooFunctor1DBinding::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 73 of file RooFunctor1DBinding.cxx. ◆ IsA(). TClass * RooFunctor1DBinding::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 53 of file RooFunctor1DBinding.h. ◆ printArgs(). void RooFunctor1DBinding::printArgs ; (; std::ostream & ; os); const. overridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 58 of file RooFunctor1DBinding.cxx. ◆ Streamer(). void RooFunctor1DBinding::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooFunctor1DBinding::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 53 of file RooFunctor1DBinding.h. Member Data Documentation. ◆ func. const ROOT::Math::IBaseFunctionOneDim* RooFunctor1DBinding::func. protected . Definition at line 47 of file RooFunctor1DBinding.h. ◆ var. RooRealProxy RooFunctor1DBinding::var. protected . Definition at line 48 of file RooFunctor1DBinding.h. Libraries for RooFunctor1DBinding:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooFunctor1DBinding.h; roofit/roofit/src/RooFunctor1DBinding.cxx. RooFunctor1DBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooFunctor1DBinding.html:63347,Guid,Guide,63347,doc/master/classRooFunctor1DBinding.html,https://root.cern,https://root.cern/doc/master/classRooFunctor1DBinding.html,1,['Guid'],['Guide']
Usability,"Bins)Create a new frame for a given variable in x.Definition RooPlot.cxx:225; RooPlot::GetYaxisTAxis * GetYaxis() constDefinition RooPlot.cxx:1264; RooPlot::Drawvoid Draw(Option_t *options=nullptr) overrideDraw this plot and all of the elements it contains.Definition RooPlot.cxx:637; RooProdPdfEfficient implementation of a product of PDFs of the form.Definition RooProdPdf.h:33; RooRealVarVariable that can be changed from the outside.Definition RooRealVar.h:37; TAttAxis::SetTitleOffsetvirtual void SetTitleOffset(Float_t offset=1)Set distance between the axis and the axis title.Definition TAttAxis.cxx:298; TAttLine::SetLineColorvirtual void SetLineColor(Color_t lcolor)Set the line color.Definition TAttLine.h:40; TCanvasThe Canvas class.Definition TCanvas.h:23; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TH1::GetZaxisTAxis * GetZaxis()Definition TH1.h:326; TH1::Drawvoid Draw(Option_t *option="""") overrideDraw this histogram with options.Definition TH1.cxx:3066; RooFit::YVarRooCmdArg YVar(const RooAbsRealLValue &var, const RooCmdArg &arg={})Definition RooGlobalFunc.cxx:846; RooFit::ConditionalRooCmdArg Conditional(const RooArgSet &pdfSet, const RooArgSet &depSet, bool depsAreCond=false)Definition RooGlobalFunc.cxx:805; RooFit::PrintLevelRooCmdArg PrintLevel(Int_t code)Definition RooGlobalFunc.cxx:657; RooFit::BinningRooCmdArg Binning(const RooAbsBinning &binning)Definition RooGlobalFunc.cxx:328; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; RooFitThe namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or othe...Definition JSONIO.h:26; rf307_fullpereventerrorsDefinition rf307_fullpereventerrors.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf307_fullpereventerrors.C. tutorialsroofitrf307_fullpereventerrors.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf307__fullpereventerrors_8C.html:6999,Guid,Guide,6999,doc/master/rf307__fullpereventerrors_8C.html,https://root.cern,https://root.cern/doc/master/rf307__fullpereventerrors_8C.html,1,['Guid'],['Guide']
Usability,"BitsTEveElement::kCSCBApplyMainColorToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBApplyMainTransparencyToMatchingChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBImplySelectAllChildren; static TEveElement::ECompoundSelectionColorBitsTEveElement::kCSCBTakeAnyParentAsMaster; static TEveElement::EDestructTEveElement::kNone; static TEveElement::EDestructTEveElement::kStandard. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TEveQuadSet(const char* n = ""TEveQuadSet"", const char* t = """"); Constructor. TEveQuadSet(TEveQuadSet::EQuadType_e quadType, Bool_t valIsCol, Int_t chunkSize, const char* n = ""TEveQuadSet"", const char* t = """"); Constructor. Int_t SizeofAtom(TEveQuadSet::EQuadType_e qt); Return size of given atom type. void Reset(TEveQuadSet::EQuadType_e quadType, Bool_t valIsCol, Int_t chunkSize); Clear the quad-set and reset the basic parameters. void AddQuad(Float_t* verts); Add a quad specified with 4 vertices. void AddQuad(Float_t a, Float_t b); Add a quad with a and b coordinates. Defaults are applied for; c coordinate and sizes. void AddQuad(Float_t a, Float_t b, Float_t c); Add a quad with a, b and c coordinates. Defaults are applied; for sizes. void AddQuad(Float_t a, Float_t b, Float_t w, Float_t h); Add a quad with a and b coordinates and sizes. Default is applied; for c coordinate. void AddQuad(Float_t a, Float_t b, Float_t c, Float_t w, Float_t h); Add a quad with a, b and c coordinates and sizes. void AddLine(Float_t a, Float_t b, Float_t w, Float_t h); Add a line with starting coordinates and displacements. void AddHexagon(Float_t a, Float_t b, Float_t z, Float_t r); Add a hexagon with given center (a,b,c) and radius. void ComputeBBox(); Fill bounding-box information. Virtual from TAttBBox.; If member 'TEveFrameBox* fFrame' is set, frame's corners a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveQuadSet.html:31265,Clear,Clear,31265,root/html602/TEveQuadSet.html,https://root.cern,https://root.cern/root/html602/TEveQuadSet.html,2,['Clear'],['Clear']
Usability,BldAction(). TGuiBldAction::~TGuiBldAction ; (; ). override . destructor ; Definition at line 106 of file TGuiBuilder.cxx. Member Function Documentation. ◆ Class(). static TClass * TGuiBldAction::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TGuiBldAction::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TGuiBldAction::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 38 of file TGuiBuilder.h. ◆ DeclFileName(). static const char * TGuiBldAction::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 38 of file TGuiBuilder.h. ◆ IsA(). TClass * TGuiBldAction::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 38 of file TGuiBuilder.h. ◆ Streamer(). void TGuiBldAction::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TGuiBldAction::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file TGuiBuilder.h. Member Data Documentation. ◆ fAct. TString TGuiBldAction::fAct. Definition at line 29 of file TGuiBuilder.h. ◆ fHints. TGLayoutHints* TGuiBldAction::fHints. Definition at line 32 of file TGuiBuilder.h. ◆ fPic. const char* TGuiBldAction::fPic. Definition at line 30 of file TGuiBuilder.h. ◆ fPicture. const TGPicture* TGuiBldAction::fPicture. Definition at line 31 of file TGuiBuilder.h. ◆ fType. Int_t TGuiBldAction::fType. Definition at line 28 of file TGuiBuilder.h. Libraries for TGuiBldAction:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGuiBuilder.h; gui/gui/src/TGuiBuilder.cxx. TGuiBldAction. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:39 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGuiBldAction.html:13698,Guid,Guide,13698,doc/master/classTGuiBldAction.html,https://root.cern,https://root.cern/doc/master/classTGuiBldAction.html,1,['Guid'],['Guide']
Usability,"Blockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGeoMixtureEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Constructor for mixture editor. void ConnectSignals2Slots(); Connect signals to slots. void SetModel(TObject* obj); Connect to the selected mixture. void DoChkFraction(); Check button state changed for fraction. void DoChkNatoms(); Check button state changed for natoms. void DoFraction(); Fraction changed. void DoNatoms(); Natoms changed. void DoSelectElement(Int_t iel); Slot for selecting an element. void DoAddElem(); Slot for adding an element. No undo. void DoApply1(); Slot for applying modifications. void DoUndo1(); Slot for undoing all changes. void UpdateElements(); Update the list of elements in the TGCanvas. virtual ~TGeoMixtureEditor(); {}. » Author: M.Gheata » Copyright (C) 1995-2002, Rene Brun and Fons Rademakers. *; » Last changed: :$Id$ » Last generated: 2015-03-14 16:39; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoMixtureEditor.html:23142,undo,undo,23142,root/html534/TGeoMixtureEditor.html,https://root.cern,https://root.cern/root/html534/TGeoMixtureEditor.html,2,['undo'],"['undo', 'undoing']"
Usability,"Blue);; f1->SetLineWidth(4);; f1->Draw(""same"");. const Int_t n = 20;; Double_t x[n], y[n], ex[n], ey[n];; for (Int_t i=0;i<n;i++) {; x[i] = i*0.1;; y[i] = 1000*sin(x[i]+0.2);; x[i] = 17.8*x[i]-8.9;; ex[i] = 1.0;; ey[i] = 10.*i;; }; TGraphErrors *gr = new TGraphErrors(n,x,y,ex,ey);; gr->SetName(""gr"");; gr->SetLineColor(kRed);; gr->SetLineWidth(2);; gr->SetMarkerStyle(21);; gr->SetMarkerSize(1.3);; gr->SetMarkerColor(7);; gr->Draw(""P"");. leg = new TLegend(0.1,0.7,0.48,0.9);; leg->SetHeader(""The Legend Title"");; leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; leg->AddEntry(""f1"",""Function abs(#frac{sin(x)}{x})"",""l"");; leg->AddEntry(""gr"",""Graph with error bars"",""lep"");; leg->Draw();. return c1;; }. TLegend inherits from TAttText therefore changing any; text attributes (text alignment, font, color...) on a legend will changed the; text attributes on each line. In particular it can be interesting to change the text alignement that way. In; order to have a base-line vertical alignment instead of a centered one simply do:. leg->SetTextAlign(13);. leg->SetTextAlign(11);; TLegend attributes can be changed using; gStyle. The default settings are:. SetLegendBorderSize(1);; SetLegendFillColor(0);; SetLegendFont(42);; SetLegendTextSize(0.);. The global attributes change the default values for the next created legends. Text attributes can be also changed individually on each legend entry:. TLegendEntry *le = leg->AddEntry(h1,""Histogram filled with random numbers"",""f"");; le->SetTextColor(kBlue);;. Note that the TPad class has a method to build automatically a legend; for all objects in the pad. It is called TPad::BuildLegend(). Each item in the legend is added using the AddEntry method. This; method defines the object to be added (by reference or name), the label; associated to this object and an option which a combination of:. L: draw line associated with TAttLine if obj inherits from TAttLine; P: draw polymarker associated with TAttMarker if obj inherits from TAttMar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLegend.html:2593,simpl,simply,2593,root/html604/TLegend.html,https://root.cern,https://root.cern/root/html604/TLegend.html,1,['simpl'],['simply']
Usability,"Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sat Jun 20 17:29:22 2015 » Last generated: 2015-06-20 17:29; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooAbsArg.html:45916,clear,clearValueAndShapeDirty,45916,root/html604/RooAbsArg.html,https://root.cern,https://root.cern/root/html604/RooAbsArg.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Sun Jun 28 16:37:40 2015 » Last generated: 2015-06-28 16:37; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsArg.html:44220,clear,clearValueAndShapeDirty,44220,root/html534/RooAbsArg.html,https://root.cern,https://root.cern/root/html534/RooAbsArg.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t isShapeDirty() const; Dirty state accessor. Bool_t isValueDirty() const; Returns true of value has been invalidated by server value change. Bool_t isValueDirtyAndClear() const; Returns true of value has been invalidated by server value change. Bool_t isValueOrShapeDirtyAndClear() const; Returns true of value has been invalidated by server value change. OperMode operMode() const; { return _operMode ; }. const RooArgSet* ownedComponents() const; { return _ownedComponents ; }. void setProhibitServerRedirect(Bool_t flag); { _prohibitServerRedirect = flag ; }. void operModeHook(); friend class RooSimCloneTool ;. {}. void optimizeDirtyHook(const RooArgSet* ); {}. void getParametersHook(const RooArgSet* , RooArgSet* , Bool_t ) const; {}. void getObservablesHook(const RooArgSet* , RooArgSet* ) const; {}. void setValueDirty() const; Dirty state modifiers. { if (_operMode==Auto && !inhibitDirty()) setValueDirty(0) ; }. void setShapeDirty() const; { setShapeDirty(0) ; }. void clearValueAndShapeDirty() const. void clearValueDirty() const. void clearShapeDirty() const. const char* cacheUniqueSuffix() const; { return 0 ; }. const TNamed* namePtr() const. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); { return kFALSE ; }. void serverNameChangeHook(const RooAbsArg* , const RooAbsArg* ); { }. void setExpensiveObjectCache(RooExpensiveObjectCache& cache); { _eocache = &cache ; }. Bool_t importWorkspaceHook(RooWorkspace& ); { return kFALSE ; }. void syncCache(const RooArgSet* nset = 0). void copyCache(const RooAbsArg* source, Bool_t valueOnly = kFALSE, Bool_t setValDirty = kTRUE). void attachToVStore(RooVectorDataStore& vstore). void setTreeBranchStatus(TTree& t, Bool_t active). void fillTreeBranch(TTree& t). void setLocalNoDirtyInhibit(Bool_t flag) const; { _localNoInhibitDirty = flag ; }. Bool_t localNoDirtyInhibit() const; { return _localNoInhibitDirty ; }. » Last changed: Tue Jun 30 14:29:52 2015 » Last generated: 2015-06-30 14:29; This page",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsArg.html:45916,clear,clearValueAndShapeDirty,45916,root/html602/RooAbsArg.html,https://root.cern,https://root.cern/root/html602/RooAbsArg.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; The object is cloned upon importation and the input argument does not need to live beyond the import call; This method is mostly useful for importing objects that do not have a settable name such as TMatrix. Returns kTRUE if an error has occurred. Bool_t addStudy(RooAbsStudy& study); Insert RooStudyManager module. void clearStudies(); Remove all RooStudyManager modules. TObject* obj(const char* name) const; Return any type of object (RooAbsArg, RooAbsData or generic object) with given name). TObject* genobj(const char* name) const; Return generic object with given name. Bool_t cd(const char* path = 0). Bool_t writeToFile(const char* fileName, Bool_t recreate = kTRUE); Save this current workspace into given file. RooFactoryWSTool& factory(); Return instance to factory tool. RooAbsArg* factory(const char* expr); Short-hand function for factory()->process(expr) ;. void Print(Option_t* opts = 0) const; Print contents of the workspace. void Streamer(TBuffer& ); Stream an object of class RooWorkspace. This is a standard ROOT streamer for the; I/O part. This custom function exists to detach all external client links; from the payload prior to writing the payload so that these client links; are not persisted. (Client links occur if external function objects use; objects contained in the workspace as input); After the actual writin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace.html:24036,clear,clearStudies,24036,root/html534/RooWorkspace.html,https://root.cern,https://root.cern/root/html534/RooWorkspace.html,3,['clear'],['clearStudies']
Usability,"Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container. Imported; object can be retrieved by name through the obj() method. The object is cloned upon; importation and the input argument does not need to live beyond the import call. Returns kTRUE if an error has occurred. Bool_t import(TObject& object, const char* aliasName, Bool_t replaceExisting = kFALSE); Import a clone of a generic TObject into workspace generic object container.; The imported object will be stored under the given alias name rather than its; own name. Imported object can be retrieved its alias name through the obj() method.; The object is cloned upon importation and the input argument does not need to live beyond the import call; This method is mostly useful for importing objects that do not have a settable name such as TMatrix. Returns kTRUE if an error has occurred. Bool_t addStudy(RooAbsStudy& study); Insert RooStudyManager module. void clearStudies(); Remove all RooStudyManager modules. TObject* obj(const char* name) const; Return any type of object (RooAbsArg, RooAbsData or generic object) with given name). TObject* genobj(const char* name) const; Return generic object with given name. Bool_t cd(const char* path = 0). Bool_t writeToFile(const char* fileName, Bool_t recreate = kTRUE); Save this current workspace into given file. RooFactoryWSTool& factory(); Return instance to factory tool. RooAbsArg* factory(const char* expr); Short-hand function for factory()->process(expr) ;. void Print(Option_t* opts = 0) const; Print contents of the workspace. void Streamer(TBuffer& b); Stream an object of class RooWorkspace. This is a standard ROOT streamer for the; I/O part. This custom function exists to detach all external client links; from the payload prior to writing the payload so that these client links; are not persisted. (Client links occur if external function objects use; objects contained in the workspace as input); After the actual writi",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooWorkspace.html:20955,clear,clearStudies,20955,root/html526/RooWorkspace.html,https://root.cern,https://root.cern/root/html526/RooWorkspace.html,4,['clear'],['clearStudies']
Usability,"Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintS",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategoryLValue.html:2341,clear,clearValueAndShapeDirty,2341,root/html602/RooAbsCategoryLValue.html,https://root.cern,https://root.cern/root/html602/RooAbsCategoryLValue.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; Roo1DTable*createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtu",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsCategory.html:2272,clear,clearValueAndShapeDirty,2272,root/html602/RooAbsCategory.html,https://root.cern,https://root.cern/root/html602/RooAbsCategory.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooAbsString.html:2100,clear,clearValueAndShapeDirty,2100,root/html602/RooAbsString.html,https://root.cern,https://root.cern/root/html602/RooAbsString.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsCategory::createFundamental(const char* newname = 0) const; Roo1DTable*RooAbsCategory::createTable(const char* label) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooBinningCategory.html:1900,clear,clearValueAndShapeDirty,1900,root/html602/RooBinningCategory.html,https://root.cern,https://root.cern/root/html602/RooBinningCategory.html,8,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t shapeProp = kFALSE); const char*RooAbsArg::aggregateCacheUniqueSuffix() const; virtual voidTObject::AppendPad(Option_t* option = """"); voidRooAbsArg::attachDataSet(const RooAbsData& set); voidRooAbsArg::attachDataStore(const RooAbsDataStore& set); const set<string>&RooAbsArg::attributes() const; voidRooAbsArg::branchNodeServerList(RooAbsCollection* list, const RooAbsArg* arg = 0, Bool_t recurseNonDerived = kFALSE) const; virtual voidTObject::Browse(TBrowser* b); virtual const char*RooAbsArg::cacheUniqueSuffix() const; virtual RooAbsArg::CacheModeRooAbsArg::canNodeBeCached() const; voidRooAbsArg::changeServer(RooAbsArg& server, Bool_t valueProp, Bool_t shapeProp); Bool_tRooAbsArg::checkDependents(const RooArgSet* nset) const; virtual Bool_tRooAbsArg::checkObservables(const RooArgSet* nset) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsArg*RooAbsString::createFundamental(const char* newname = 0) const; virtual Int_tRooAbsArg::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooStringVar.html:1827,clear,clearValueAndShapeDirty,1827,root/html602/RooStringVar.html,https://root.cern,https://root.cern/root/html602/RooStringVar.html,2,['clear'],['clearValueAndShapeDirty']
Usability,"Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->GetEntriesFast());}. void ClearNodes(); {fNodes = 0;}. Bool_t Contains(Double_t* point) const; {return fShape->Contains(point);}. Bool_t IsAssembly() const; {return kFALSE;}. Bool_t IsRunTime() const; {return fShape->IsRunTimeShape();}. Bool_t IsVolumeMulti() const; {return kFALSE;}. Bool_t IsActive() const; {return TGeoAtt::IsActive();}. Bool_t IsActiveDaughters() const; {return TGeoAtt::IsActiveDaughters();}. Bool_t IsAdded() const; {return TObject::TestBit(kVolumeAdded);}. Bool_t IsReplicated() const; {return TObject::TestBit(kVolumeReplicated);}. Bool_t IsSelected() const; {return TObject::TestBit(kVolumeSelected);}. Bool_t IsCylVoxels() const; {return TObject::TestBit(kVoxelsCyl);}. Bool_t IsXYZVoxels() const; {return TObject::TestBit(kVoxelsXYZ);}. Bool_t IsValid() const; {return fShape->IsValid();}. Bool_t IsVisible() const; {return TGeoAtt::IsVisible();}. Bool_t IsVisibleDaughters() const; {return TGeoAtt::IsVisDaughters();}. Bool_t IsVisContainers() const; {return TGeoAtt::IsVisContainers();}. Bool_t IsVisLeaves(",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:31931,Clear,ClearNodes,31931,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,2,['Clear'],['ClearNodes']
Usability,"Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->GetEntriesFast());}. void ClearNodes(); {fNodes = 0;}. Bool_t Contains(Double_t* point) const; {return fShape->Contains(point);}. Bool_t IsRunTime() const; {return fShape->IsRunTimeShape();}. Bool_t IsVolumeMulti() const; {return kFALSE;}. Bool_t IsActive() const; {return TGeoAtt::IsActive();}. Bool_t IsActiveDaughters() const; {return TGeoAtt::IsActiveDaughters();}. Bool_t IsAdded() const; {return TObject::TestBit(kVolumeAdded);}. Bool_t IsReplicated() const; {return TObject::TestBit(kVolumeReplicated);}. Bool_t IsSelected() const; {return TObject::TestBit(kVolumeSelected);}. Bool_t IsCylVoxels() const; {return TObject::TestBit(kVoxelsCyl);}. Bool_t IsXYZVoxels() const; {return TObject::TestBit(kVoxelsXYZ);}. Bool_t IsValid() const; {return fShape->IsValid();}. Bool_t IsVisible() const; {return TGeoAtt::IsVisible();}. Bool_t IsVisibleDaughters() const; {return TGeoAtt::IsVisDaughters();}. Bool_t IsVisContainers() const; {return TGeoAtt::IsVisContainers();}. Bool_t IsVisLeaves() const; {return TGeoAtt::IsVisLeaves();}. Bo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoVolume.html:32430,Clear,ClearNodes,32430,root/html532/TGeoVolume.html,https://root.cern,https://root.cern/root/html532/TGeoVolume.html,1,['Clear'],['ClearNodes']
Usability,"Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaughters() const; {if (!fNodes) return 0; return (fNodes->GetEntriesFast());}. void ClearNodes(); {fNodes = 0;}. Bool_t Contains(const Double_t* point) const; {return fShape->Contains(point);}. Bool_t IsRunTime() const; {return fShape->IsRunTimeShape();}. Bool_t IsVolumeMulti() const; {return kFALSE;}. Int_t GetRefCount() const; {return fRefCount;}. TGeoExtension * GetUserExtension() const; {return fUserExtension;}. TGeoExtension * GetFWExtension() const; {return fFWExtension;}. void Grab(); {fRefCount++;}. void Release(); {fRefCount--; if (fRefCount==0) delete this;}. Bool_t IsActive() const; {return TGeoAtt::IsActive();}. Bool_t IsActiveDaughters() const; {return TGeoAtt::IsActiveDaughters();}. Bool_t IsAdded() const; {return TObject::TestBit(kVolumeAdded);}. Bool_t IsOverlappingCandidate() const; {return TObject::TestBit(kVolumeOC);}. Bool_t IsReplicated() const; {return TObject::TestBit(kVolumeReplicated);}. Bool_t IsSelected() const; {return TObject::TestBit(kVolumeSelected);}. Bool_t IsCylVoxels() const; {return TObject::TestBit(kVoxelsCyl);}. Bool_t IsXYZVoxels() const; {",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGeoVolume.html:43872,Clear,ClearNodes,43872,root/html534/TGeoVolume.html,https://root.cern,https://root.cern/root/html534/TGeoVolume.html,3,['Clear'],['ClearNodes']
Usability,"Bool_tClassInfo_IsValid(ClassInfo_t*) const; virtual Bool_tClassInfo_IsValidMethod(ClassInfo_t*, const char*, const char*, Long_t*, ROOT::EFunctionMatchMode = ROOT::kConversionMatch) const; virtual Bool_tClassInfo_IsValidMethod(ClassInfo_t*, const char*, const char*, Bool_t, Long_t*, ROOT::EFunctionMatchMode = ROOT::kConversionMatch) const; virtual const char*ClassInfo_Name(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*) const; virtual void*ClassInfo_New(ClassInfo_t*, int) const; virtual void*ClassInfo_New(ClassInfo_t*, void*) const; virtual void*ClassInfo_New(ClassInfo_t*, int, void*) const; virtual intClassInfo_Next(ClassInfo_t*) const; virtual Long_tClassInfo_Property(ClassInfo_t*) const; virtual intClassInfo_Size(ClassInfo_t*) const; virtual Long_tClassInfo_Tagnum(ClassInfo_t*) const; virtual const char*ClassInfo_Title(ClassInfo_t*) const; virtual const char*ClassInfo_TmpltName(ClassInfo_t*) const; virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidClearFileBusy(); virtual voidClearStack(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual TEnum*CreateEnum(void* VD, TClass* cl) const; virtual voidCreateListOfBaseClasses(TClass* cl) const; virtual voidCreateListOfDataMembers(TClass* cl) const; virtual voidCreateListOfMethodArgs(TFunction* m) const; virtual voidCreateListOfMethods(TClass* cl) const; virtual TInterpreterValue*CreateTemporary(); virtual intDataMemberInfo_ArrayDim(DataMemberInfo_t*) const; virtual voidDataMemberInfo_Delete(DataMemberInfo_t*) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(ClassInfo_t* = 0) const; virtual DataMemberInfo_t*DataMemberInfo_Factory(TInterpreter::DeclId_t declid, ClassInfo_t* clinfo) const; virtual DataMemberInfo_t*DataMemberInfo_FactoryCopy(DataMemberInfo_t*) const; virtual Bool_tDataMemberInfo_IsValid(DataMemberInfo_t*) ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TInterpreter.html:7353,Clear,Clear,7353,root/html602/TInterpreter.html,https://root.cern,https://root.cern/root/html602/TInterpreter.html,2,['Clear'],['Clear']
Usability,"BoundingBox to a value (resize in y direction on bottom) ; Implements TAttBBox2D.; Definition at line 973 of file TText.cxx. ◆ SetMbTitle(). void TText::SetMbTitle ; (; const wchar_t * ; title = L""""). virtual . Change (i.e. set) the title of the TNamed. ; Definition at line 832 of file TText.cxx. ◆ SetNDC(). void TText::SetNDC ; (; Bool_t ; isNDC = kTRUE). virtual . Set NDC mode on if isNDC = kTRUE, off otherwise. ; Definition at line 823 of file TText.cxx. ◆ SetText() [1/2]. virtual void TText::SetText ; (; Double_t ; x, . Double_t ; y, . const char * ; text . ). inlinevirtual . Definition at line 74 of file TText.h. ◆ SetText() [2/2]. virtual void TText::SetText ; (; Double_t ; x, . Double_t ; y, . const wchar_t * ; text . ). inlinevirtual . Definition at line 75 of file TText.h. ◆ SetX(). virtual void TText::SetX ; (; Double_t ; x). inlinevirtual . Definition at line 76 of file TText.h. ◆ SetY(). virtual void TText::SetY ; (; Double_t ; y). inlinevirtual . Definition at line 77 of file TText.h. ◆ Streamer(). void TText::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TText. ; Reimplemented from TNamed.; Definition at line 849 of file TText.cxx. ◆ StreamerNVirtual(). void TText::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 89 of file TText.h. Member Data Documentation. ◆ fWcsTitle. void* TText::fWcsTitle {nullptr}. protected . !Used by TMathText ; Definition at line 27 of file TText.h. ◆ fX. Double_t TText::fX {0}. protected . X position of text (left,center,etc..) ; Definition at line 25 of file TText.h. ◆ fY. Double_t TText::fY {0}. protected . Y position of text (left,center,etc..) ; Definition at line 26 of file TText.h. Libraries for TText:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TText.h; graf2d/graf/src/TText.cxx. TText. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTText.html:30687,Guid,Guide,30687,doc/master/classTText.html,https://root.cern,https://root.cern/doc/master/classTText.html,1,['Guid'],['Guide']
Usability,"Box::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; TEveProjectable::ProjList_iTEveProjectable::BeginProjecteds(); virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; static voidTEveShape::CheckAndFixBoxOrientationEv(TEveVector[8] box); static voidTEveShape::CheckAndFixBoxOrientationFv(Float_t[8][3] box); virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveProjectable::ClearProjectedList(); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElementList*TEveElementList::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveShape::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TEveBox.html:2728,Clear,ClearStamps,2728,root/html602/TEveBox.html,https://root.cern,https://root.cern/root/html602/TEveBox.html,14,['Clear'],['ClearStamps']
Usability,"Branch (RImportBranch &&other)=default;  ; RImportBranch & operator= (const RImportBranch &other)=delete;  ; RImportBranch & operator= (RImportBranch &&other)=default;  . Public Attributes; std::unique_ptr< unsigned char[]> fBranchBuffer;  The destination of SetBranchAddress() for fBranchName ;  ; std::string fBranchName;  Top-level branch name from the input TTree. ;  . Constructor & Destructor Documentation. ◆ RImportBranch() [1/3]. ROOT::Experimental::RNTupleImporter::RImportBranch::RImportBranch ; (; ). default . ◆ RImportBranch() [2/3]. ROOT::Experimental::RNTupleImporter::RImportBranch::RImportBranch ; (; const RImportBranch & ; other). delete . ◆ RImportBranch() [3/3]. ROOT::Experimental::RNTupleImporter::RImportBranch::RImportBranch ; (; RImportBranch && ; other). default . Member Function Documentation. ◆ operator=() [1/2]. RImportBranch & ROOT::Experimental::RNTupleImporter::RImportBranch::operator= ; (; const RImportBranch & ; other). delete . ◆ operator=() [2/2]. RImportBranch & ROOT::Experimental::RNTupleImporter::RImportBranch::operator= ; (; RImportBranch && ; other). default . Member Data Documentation. ◆ fBranchBuffer. std::unique_ptr<unsigned char[]> ROOT::Experimental::RNTupleImporter::RImportBranch::fBranchBuffer. The destination of SetBranchAddress() for fBranchName ; Definition at line 128 of file RNTupleImporter.hxx. ◆ fBranchName. std::string ROOT::Experimental::RNTupleImporter::RImportBranch::fBranchName. Top-level branch name from the input TTree. ; Definition at line 127 of file RNTupleImporter.hxx. Collaboration diagram for ROOT::Experimental::RNTupleImporter::RImportBranch:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; The documentation for this struct was generated from the following file:; tree/ntupleutil/v7/inc/ROOT/RNTupleImporter.hxx. ROOTExperimentalRNTupleImporterRImportBranch. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:11 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportBranch.html:2412,Guid,Guide,2412,doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportBranch.html,https://root.cern,https://root.cern/doc/master/structROOT_1_1Experimental_1_1RNTupleImporter_1_1RImportBranch.html,1,['Guid'],['Guide']
Usability,"Branch * b_ptds_dDefinition h1analysis.h:252; h1analysis::b_ntracksTBranch * b_ntracksDefinition h1analysis.h:303; h1analysis::rstartFloat_t rstart[200]Definition h1analysis.h:161; h1analysis::b_njetsTBranch * b_njetsDefinition h1analysis.h:328; h1analysis::Beginvoid Begin(TTree *tree) override; h1analysis::ipisInt_t ipisDefinition h1analysis.h:107; h1analysis::ptd0_dFloat_t ptd0_dDefinition h1analysis.h:109; h1analysis::njetsInt_t njetsDefinition h1analysis.h:174; h1analysis::nlhkFloat_t nlhk[200]Definition h1analysis.h:165; h1analysis::elistTEntryList * elistDefinition h1analysis.h:32; h1analysis::SlaveBeginvoid SlaveBegin(TTree *tree) override; h1analysis::etads_dFloat_t etads_dDefinition h1analysis.h:99; h1analysis::h2TH2F * h2Definition h1analysis.h:28; h1analysis::b_ptd0_dTBranch * b_ptd0_dDefinition h1analysis.h:263; h1analysis::ptds_dFloat_t ptds_dDefinition h1analysis.h:98; h1analysis::Terminatevoid Terminate() override; h1analysis::ipiInt_t ipiDefinition h1analysis.h:106; lineTLine * lineDefinition entrylistblock_figure1.C:235; fdm5Double_t fdm5(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:14; sigmaconst Double_t sigmaDefinition h1analysisProxy.h:11; dxbinconst Double_t dxbinDefinition h1analysisProxy.h:10; fdm2Double_t fdm2(Double_t *xx, Double_t *par)Definition h1analysisProxy.h:25; h1analysis.h; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::ExpDouble_t Exp(Double_t x)Returns the base-e exponential function of x, which is e raised to the power x.Definition TMath.h:709; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; AuthorRene Brun ; Definition in file h1analysis.C. tutorialstreeh1analysis.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/h1analysis_8C.html:22330,Guid,Guide,22330,doc/master/h1analysis_8C.html,https://root.cern,https://root.cern/doc/master/h1analysis_8C.html,1,['Guid'],['Guide']
Usability,"Branch *) override;; 59 void ResetBranchAddresses() override;; 60 ; 61 ClassDefOverride(TNtuple,2); //A simple tree with branches of floats.; 62};; 63 ; 64#endif; b#define b(i)Definition RSha256.hxx:100; Int_tint Int_tDefinition RtypesCore.h:45; Float_tfloat Float_tDefinition RtypesCore.h:57; Long64_tlong long Long64_tDefinition RtypesCore.h:69; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; x2Option_t Option_t TPoint TPoint const char x2Definition TGWin32VirtualXProxy.cxx:70; x1Option_t Option_t TPoint TPoint const char x1Definition TGWin32VirtualXProxy.cxx:70; namechar name[80]Definition TGX11.cxx:110; nentriesint nentriesDefinition THbookFile.cxx:91; TTree.h; TBranchA TTree is a list of TBranches.Definition TBranch.h:93; TBrowserUsing a TBrowser one can browse all ROOT objects.Definition TBrowser.h:37; TNtupleA simple TTree restricted to a list of float variables only.Definition TNtuple.h:28; TNtuple::ReadStreamLong64_t ReadStream(std::istream &inputStream, const char *branchDescriptor="""", char delimiter=' ') overrideRead from filename as many columns as variables in the ntuple the function returns the number of rows...Definition TNtuple.cxx:220; TNtuple::~TNtuple~TNtuple() overrideDefault destructor for an Ntuple.Definition TNtuple.cxx:103; TNtuple::TNtupleTNtuple(const TNtuple &)=delete; TNtuple::GetNvarvirtual Int_t GetNvar() constDefinition TNtuple.h:55; TNtuple::ResetBranchAddressesvoid ResetBranchAddresses() overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:147; TNtuple::GetArgsFloat_t * GetArgs() constDefinition TNtuple.h:56; TNtuple::fNvarInt_t fNvarNumber of columns.Definition TNtuple.h:31; TNtuple::ResetBranchAddressvoid ResetBranchAddress(TBranch *) overrideReset the branch addresses to the internal fArgs array.Definition TNtuple.cxx:133; TNtuple::Browsevoid Browse(TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TNtuple_8h_source.html:3155,simpl,simple,3155,doc/master/TNtuple_8h_source.html,https://root.cern,https://root.cern/doc/master/TNtuple_8h_source.html,1,['simpl'],['simple']
Usability,"Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<const char>(const char* name, const char* classname, const char* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch<void>(const char* name, void* obj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidTTree::Browse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0, Bool_t canOptimize = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t* option = """"); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidTTree::DirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTTree::Draw(Option_t* opt); virtual Long64_tTTree::Draw(const char* varexp, const TCut& selection, Option_t* option = """,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTreeSQL.html:2478,Clear,Clear,2478,root/html602/TTreeSQL.html,https://root.cern,https://root.cern/root/html602/TTreeSQL.html,2,['Clear'],['Clear']
Usability,"Branch*TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize = 32000); TBranch*TTree::Branch(const char* name, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); TBranch*TTree::Branch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual TBranch*TTree::BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1); virtual TBranch*TTree::BranchRef(); virtual TBranch*TTree::Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99); virtual voidBrowse(TBrowser*); virtual Int_tTTree::BuildIndex(const char* majorname, const char* minorname = ""0""); TStreamerInfo*TTree::BuildStreamerInfo(TClass* cl, void* pointer = 0); virtual voidCanDeleteRefs(Bool_t flag = kTRUE); virtual TFile*TTree::ChangeFile(TFile* file); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual TTree*TTree::CloneTree(Long64_t nentries = -1, Option_t* option = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTTree::CopyAddresses(TTree*, Bool_t undo = kFALSE); virtual Long64_tTTree::CopyEntries(TTree* tree, Long64_t nentries = -1); virtual TTree*TTree::CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = 1000000000, Long64_t firstentry = 0); virtual TBasket*TTree::CreateBasket(TBranch*); virtual voidCreatePackets(); Int_tTTree::Debug() const; virtual voidTTree::Delete(Option_t* option = """")MENU ; virtual voidDirectoryAutoAdd(TDirectory*); Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* opt); virtual Long64_tDraw(const char* varexp, const TCut&",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/TChain.html:3051,Clear,Clear,3051,root/html526/TChain.html,https://root.cern,https://root.cern/root/html526/TChain.html,1,['Clear'],['Clear']
Usability,"Browsable::RElementPath_t DecomposePath(const std::string &path, bool relative_to_work_element)Decompose path to elements Returns array of names for each element in the path, first element either ...Definition RBrowserData.cxx:155; ROOT::RBrowserData::fLastAllChildsbool fLastAllChilds! if all chlds were extractedDefinition RBrowserData.hxx:50; ROOT::RBrowserData::~RBrowserDatavirtual ~RBrowserData()Destructor.Definition RBrowserData.cxx:78; ROOT::RBrowserData::ProcessBrowserRequestbool ProcessBrowserRequest(const RBrowserRequest &request, RBrowserReply &reply)Process browser request.Definition RBrowserData.cxx:171; ROOT::RBrowserData::GetElementFromTopstd::shared_ptr< Browsable::RElement > GetElementFromTop(const Browsable::RElementPath_t &path)Returns element with path, specified as Browsable::RElementPath_t.Definition RBrowserData.cxx:300; ROOT::RBrowserData::fLastSortMethodstd::string fLastSortMethod! last sort methodDefinition RBrowserData.hxx:52; ROOT::RBrowserData::ClearCachevoid ClearCache()Clear internal objects cache.Definition RBrowserData.cxx:370; ROOT::RBrowserData::ProcessRequeststd::string ProcessRequest(const RBrowserRequest &request)Process browser request, returns string with JSON of RBrowserReply data.Definition RBrowserData.cxx:269; ROOT::RBrowserData::fLastItemsstd::vector< std::unique_ptr< Browsable::RItem > > fLastItems! created browser items - used in requestsDefinition RBrowserData.hxx:49; ROOT::RBrowserData::fLastPathBrowsable::RElementPath_t fLastPath! path to last used elementDefinition RBrowserData.hxx:47; ROOT::RBrowserData::SetWorkingPathvoid SetWorkingPath(const Browsable::RElementPath_t &path)set working directory relative to top elementDefinition RBrowserData.cxx:98; ROOT::RBrowserData::fTopElementstd::shared_ptr< Browsable::RElement > fTopElement! top elementDefinition RBrowserData.hxx:41; ROOT::RBrowserData::GetElementstd::shared_ptr< Browsable::RElement > GetElement(const std::string &str)Returns element with path, specified as st",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RBrowserData_8cxx_source.html:17628,Clear,ClearCachevoid,17628,doc/master/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/RBrowserData_8cxx_source.html,6,['Clear'],"['Clear', 'ClearCache', 'ClearCachevoid']"
Usability,"Browser).Definition TCollection.cxx:248; TCollection::GetSizevirtual Int_t GetSize() constReturn the capacity of the collection, i.e.Definition TCollection.h:184; TDirectory::TContextTDirectory::TContext keeps track and restore the current directory.Definition TDirectory.h:89; TDirectoryDescribe directory structure in memory.Definition TDirectory.h:45; TDirectory::GetFilevirtual TFile * GetFile() constDefinition TDirectory.h:220; TDirectory::FindObjectTObject * FindObject(const char *name) const overrideFind object by name in the list of memory objects.Definition TDirectory.cxx:784; TDirectory::IsWritablevirtual Bool_t IsWritable() constDefinition TDirectory.h:237; TFileCacheReadA cache when reading files over the network.Definition TFileCacheRead.h:22; TFileCacheRead::SetSkipZipvirtual void SetSkipZip(Bool_t=kTRUE)Definition TFileCacheRead.h:112; TFileCacheRead::IsLearningvirtual Bool_t IsLearning() constDefinition TFileCacheRead.h:102; TFileCacheRead::LearnBranchvirtual Int_t LearnBranch(TBranch *, Bool_t=kFALSE)Definition TFileCacheRead.h:103; TFileMergeInfoDefinition TFileMergeInfo.h:42; TFileA ROOT file is an on-disk file, usually with extension .root, that stores objects in a file-system-li...Definition TFile.h:53; TFile::GetCompressionSettingsInt_t GetCompressionSettings() constDefinition TFile.h:397; TFile::GetCompressionLevelInt_t GetCompressionLevel() constDefinition TFile.h:391; TFile::MakeFreevirtual void MakeFree(Long64_t first, Long64_t last)Mark unused bytes on the file.Definition TFile.cxx:1484; TFile::Openstatic TFile * Open(const char *name, Option_t *option="""", const char *ftitle="""", Int_t compress=ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault, Int_t netopt=0)Create / open a file.Definition TFile.cxx:4089; TFile::Closevoid Close(Option_t *option="""") overrideClose a file.Definition TFile.cxx:950; TIterDefinition TCollection.h:235; TKey::GetSeekKeyvirtual Long64_t GetSeekKey() constDefinition TKey.h:89; TKey::GetKeylenInt_t GetKeylen() co",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TBranch_8cxx_source.html:146632,Learn,LearnBranchvirtual,146632,doc/master/TBranch_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TBranch_8cxx_source.html,2,['Learn'],"['LearnBranch', 'LearnBranchvirtual']"
Usability,"BrowserRequest.hxx:35; ROOT::RBrowserRequest::hiddenbool hiddenshow hidden filesDefinition RBrowserRequest.hxx:33; ROOT::RBrowserRequest::numberint numbernumber of childs to request, 0 - all childsDefinition RBrowserRequest.hxx:30; ROOT::RBrowserRequest::reversebool reversereverse item orderDefinition RBrowserRequest.hxx:32; ROOT::RBrowserRequest::sortstd::string sortkind of sortingDefinition RBrowserRequest.hxx:31; ROOT::RBrowserRequest::pathstd::vector< std::string > pathrequested pathDefinition RBrowserRequest.hxx:28; ROOT::RBrowserRequest::reloadbool reloadforce items reloadDefinition RBrowserRequest.hxx:34; ROOT::RBrowserRequest::firstint firstfirst child to requestDefinition RBrowserRequest.hxx:29; ROOT::RBrowserRequest::regexstd::string regexapplied regexDefinition RBrowserRequest.hxx:36; TBufferJSON::ToJSONstatic TString ToJSON(const T *obj, Int_t compact=0, const char *member_name=nullptr)Definition TBufferJSON.h:75; TBufferJSON::kSkipTypeInfo@ kSkipTypeInfodo not store typenames in JSONDefinition TBufferJSON.h:48; TBufferJSON::kNoSpaces@ kNoSpacesno new lines plus remove all spaces around "","" and "":"" symbolsDefinition TBufferJSON.h:39; TEnv::SetValuevirtual void SetValue(const char *name, const char *value, EEnvLevel level=kEnvChange, const char *type=nullptr)Set the value of a resource or create a new resource.Definition TEnv.cxx:736; TObjectMother of all ROOT objects.Definition TObject.h:41; TString::Dataconst char * Data() constDefinition TString.h:376; ROOT::Browsable::RElementPath_tstd::vector< std::string > RElementPath_tDefinition RElement.hxx:20; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::BrowserLogROOT::Experimental::RLogChannel & BrowserLog()Log channel for Browser diagnostics.Definition RBrowserData.cxx:35. guibrowserv7srcRBrowserData.cxx. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:07:54 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/RBrowserData_8cxx_source.html:22099,Guid,Guide,22099,doc/v632/RBrowserData_8cxx_source.html,https://root.cern,https://root.cern/doc/v632/RBrowserData_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Brun comments extracted from the MINUIT documentation file. . Definition at line 3439 of file TMinuit.cxx. ◆ mnhes1(). void TMinuit::mnhes1 ; (; ). virtual . Calculate first derivatives (GRD) and uncertainties (DGRD) ; and appropriate step sizes GSTEP Called from MNHESS and MNGRAD ; Definition at line 4218 of file TMinuit.cxx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMinuit.html:54229,simpl,simplex,54229,doc/master/classTMinuit.html,https://root.cern,https://root.cern/doc/master/classTMinuit.html,1,['simpl'],['simplex']
Usability,"Buffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawListOfGraphs(); TProofDrawListOfGraphs(TProofDrawListOfGraphs&&); TProofDrawListOfGraphs(const TProofDrawListOfGraphs&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawListOfGraphs.html:6016,Clear,ClearFormula,6016,root/html602/TProofDrawListOfGraphs.html,https://root.cern,https://root.cern/root/html602/TProofDrawListOfGraphs.html,2,['Clear'],['ClearFormula']
Usability,"Buffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TProofDrawPolyMarker3D(); TProofDrawPolyMarker3D(TProofDrawPolyMarker3D&&); TProofDrawPolyMarker3D(const TProofDrawPolyMarker3D&); virtual voidTObject::UseCurrentStyle(); virtual intTProofDraw::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTProofDraw::ClearFormula(); virtual Bool_tTProofDraw::CompileVariables(); virtual voidDefVar(); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidDoFill(Long64_t entry, Double_t w, const Double_t* v); voidTProofDraw::FillWeight(); voidTObject::MakeZombie(); virtual Bool_tTProofDraw::ProcessSingle(Long64_t, Int_t); voidTProofDraw::SetCanvas(const char* objname); voidTProofDraw::SetDrawAtt(TObject* o); voidTProofDraw::SetError(const char* sub, const char* mesg). Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TProofDrawPolyMarker3D.html:6009,Clear,ClearFormula,6009,root/html602/TProofDrawPolyMarker3D.html,https://root.cern,https://root.cern/root/html602/TProofDrawPolyMarker3D.html,2,['Clear'],['ClearFormula']
Usability,"Buffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TSessionLogView.html:1624,Clear,Clear,1624,root/html528/TSessionLogView.html,https://root.cern,https://root.cern/root/html528/TSessionLogView.html,6,['Clear'],['Clear']
Usability,"Build geometry description. ; Definition at line 494 of file RGeomData.cxx. ◆ ChangeConfiguration(). bool RGeomDescription::ChangeConfiguration ; (; const std::string & ; json). Change configuration by client Returns true if any parameter was really changed. ; Definition at line 2105 of file RGeomData.cxx. ◆ ChangeNodeVisibility(). bool RGeomDescription::ChangeNodeVisibility ; (; const std::vector< std::string > & ; path, . bool ; on . ). Change visibility for specified element Returns true if changes was performed. ; Definition at line 1850 of file RGeomData.cxx. ◆ ClearAllPhysVisibility(). bool RGeomDescription::ClearAllPhysVisibility ; (; ). Reset all custom visibility settings. ; Definition at line 2089 of file RGeomData.cxx. ◆ ClearCache(). void RGeomDescription::ClearCache ; (; ). Clear cached data, need to be clear when connection broken. ; Definition at line 1381 of file RGeomData.cxx. ◆ ClearDescription(). void RGeomDescription::ClearDescription ; (; ). private . Clear geometry description. ; Definition at line 478 of file RGeomData.cxx. ◆ ClearDrawData(). void RGeomDescription::ClearDrawData ; (; ). Clear raw data. Will be rebuild when next connection will be established. ; Definition at line 1370 of file RGeomData.cxx. ◆ ClearPhysNodeVisibility(). bool RGeomDescription::ClearPhysNodeVisibility ; (; const std::vector< std::string > & ; path). Reset custom visibility of physical node by path. ; Definition at line 2065 of file RGeomData.cxx. ◆ CollectNodes(). void RGeomDescription::CollectNodes ; (; RGeomDrawing & ; drawing, . bool ; all_nodes = false . ). private . Collect nodes which are used in visibles. ; Definition at line 721 of file RGeomData.cxx. ◆ CopyMaterialProperties(). void RGeomDescription::CopyMaterialProperties ; (; TGeoVolume * ; vol, . RGeomNode & ; node . ). private . Copy material properties. ; Definition at line 1159 of file RGeomData.cxx. ◆ CountShapeFaces(). int RGeomDescription::CountShapeFaces ; (; TGeoShape * ; shape). private . Cou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html:12945,Clear,Clear,12945,doc/v632/classROOT_1_1RGeomDescription.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RGeomDescription.html,2,['Clear'],['Clear']
Usability,"Building ROOT | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome » Documentation Building ROOT. Introduction; ROOT uses the CMake cross-platform build-generator tool as a primary build system. CMake does not build the p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/building-root.html:1003,Guid,Guides,1003,d/building-root.html,https://root.cern,https://root.cern/d/building-root.html,1,['Guid'],['Guides']
Usability,Button. TGTextButton* TStructViewerGUI::fRedoButton. private . Definition at line 69 of file TStructViewerGUI.h. ◆ fRedoList. TList TStructViewerGUI::fRedoList. private . Definition at line 48 of file TStructViewerGUI.h. ◆ fScaleByMembersButton. TGRadioButton* TStructViewerGUI::fScaleByMembersButton. private . Definition at line 71 of file TStructViewerGUI.h. ◆ fScaleBySizeButton. TGRadioButton* TStructViewerGUI::fScaleBySizeButton. private . Definition at line 70 of file TStructViewerGUI.h. ◆ fSelectedObject. TStructNode* TStructViewerGUI::fSelectedObject. private . Definition at line 46 of file TStructViewerGUI.h. ◆ fShowLinksCheckButton. TGCheckButton* TStructViewerGUI::fShowLinksCheckButton. private . Definition at line 60 of file TStructViewerGUI.h. ◆ fSizeLabel. TGLabel* TStructViewerGUI::fSizeLabel. private . Definition at line 65 of file TStructViewerGUI.h. ◆ fToolTip. TGToolTip* TStructViewerGUI::fToolTip. private . Definition at line 59 of file TStructViewerGUI.h. ◆ fTopVolume. TGeoVolume* TStructViewerGUI::fTopVolume. private . Definition at line 41 of file TStructViewerGUI.h. ◆ fTotalSizeLabel. TGLabel* TStructViewerGUI::fTotalSizeLabel. private . Definition at line 66 of file TStructViewerGUI.h. ◆ fUndoButton. TGTextButton* TStructViewerGUI::fUndoButton. private . Definition at line 68 of file TStructViewerGUI.h. ◆ fUndoList. TList TStructViewerGUI::fUndoList. private . Definition at line 47 of file TStructViewerGUI.h. ◆ fVisibleObjects. TList TStructViewerGUI::fVisibleObjects. private . Definition at line 49 of file TStructViewerGUI.h. ◆ fVolumes. TExMap TStructViewerGUI::fVolumes. private . Definition at line 53 of file TStructViewerGUI.h. Libraries for TStructViewerGUI:. [legend]; The documentation for this class was generated from the following files:; graf3d/gviz3d/inc/TStructViewerGUI.h; graf3d/gviz3d/src/TStructViewerGUI.cxx. TStructViewerGUI. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:35 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStructViewerGUI.html:51040,Guid,Guide,51040,doc/master/classTStructViewerGUI.html,https://root.cern,https://root.cern/doc/master/classTStructViewerGUI.html,1,['Guid'],['Guide']
Usability,"C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold5d.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold6.C Test program for the class TUnfoldBinning ;  testUnfold7a.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7b.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  testUnfold7c.C Test program for the classes TUnfoldDensity and TUnfoldBinning ;  ► unuran;  unuranDemo.CExample macro to show unuran capabilities The results are compared with what is obtained using TRandom or TF1::GetRandom The macro is divided in 3 parts: ;  unuranFoamTest.CThis program must be compiled and executed with Aclic as follows ;  ► v7;  concurrentfill.cxx;  draw.cxx;  draw_th1.cxx;  draw_v6.cxx;  fitpanel.cxx;  histops.cxx;  perf.cxx;  perfcomp.cxx;  simple.cxx;  text.cxx;  ► xml;  DOMParsePerson.C ROOT implementation of a XML DOM Parser ;  DOMRecursive.C ROOT implementation of a XML DOM Parser ;  SAXHandler.C ROOT implementation of a simple SAX Handler ;  xmlnewfile.C Example to create a new xml file with the TXMLEngine class ;  xmlreadfile.C Example to read and parse any xml file, supported by TXMLEngine class The input file, produced by xmlnewfile.C macro is used If you need full xml syntax support, use TXMLParser instead ;  benchmarks.CThis macro run several tests and produces an benchmark report ;  demos.CThis macro shows a control bar to run some of the ROOT tutorials ;  demoshelp.CThis macro shows help on running the Demos ;  geant3tasks.CThis script is a representation using TTasks of the Geant3 simulation program This example uses directly TTask objects ;  hsimple.C This program creates : ;  htmlex.CThis file demonstrates how THtml can document sources ;  MyTasks.cxxA set of classes deriving from TTask ;  regexp.CA regular ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v612/files.html:161677,simpl,simple,161677,doc/v612/files.html,https://root.cern,https://root.cern/doc/v612/files.html,1,['simpl'],['simple']
Usability,"C as more completed examples.; 5.3.3 Fitting Multiple Sub Ranges; The script for this example is $ROOTSYS/tutorials/fit/multifit.C. It shows how to use several Gaussian functions with different parameters on separate sub ranges of the same histogram. To use a Gaussian, or any other ROOT built in function, on a sub range you need to define a new TF1. Each is ‘derived’ from the canned function gaus. Fitting a histogram with several Gaussian functions. First, four TF1 objects are created - one for each sub-range:; g1 = new TF1(""m1"",""gaus"",85,95);; g2 = new TF1(""m2"",""gaus"",98,108);; g3 = new TF1(""m3"",""gaus"",110,121);; // The total is the sum of the three, each has 3 parameters; total = new TF1(""mstotal"",""gaus(0)+gaus(3)+gaus(6)"",85,125);; Next, we fill a histogram with bins defined in the array x.; // Create a histogram and set it's contents; h = new TH1F(""g1"",""Example of several fits in subranges"",; np,85,134);; h->SetMaximum(7);; for (int i=0; i<np; i++) {; h->SetBinContent(i+1,x[i]);; }; // Define the parameter array for the total function; Double_t par[9];; When fitting simple functions, such as a Gaussian, the initial values of the parameters are automatically computed by ROOT. In the more complicated case of the sum of 3 Gaussian functions, the initial values of parameters must be set. In this particular case, the initial values are taken from the result of the individual fits. The use of the “+” sign is explained below:; // Fit each function and add it to the list of functions; h->Fit(g1,""R"");; h->Fit(g2,""R+"");; h->Fit(g3,""R+"");. // Get the parameters from the fit; g1->GetParameters(&par[0]);; g2->GetParameters(&par[3]);; g3->GetParameters(&par[6]);. // Use the parameters on the sum; total->SetParameters(par);; h->Fit(total,""R+"");; 5.3.4 Adding Functions to the List; The example $ROOTSYS/tutorials/fit/multifit.C also illustrates how to fit several functions on the same histogram. By default a Fit command deletes the previously fitted function in the histogram obje",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:175770,simpl,simple,175770,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"C header . Sections:; class description; function members; data members; class charts. ROOT; » MATH; » MATHCORE; » TStatistic. class TStatistic: public TObject. TStatistic. Statistical variable, defined by its mean, RMS and related errors.; Named, streamable, storable and mergeable. Function Members (Methods); public:. TStatistic(const char* name = """"); TStatistic(const TStatistic&); TStatistic(const char* name, Int_t n, const Double_t* val, const Double_t* w = 0); virtual~TStatistic(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFill(Double_t val, Double_t w = 1.); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; Double_tGetM2() const; Double_tGetMean() const; Double_tGe",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TStatistic.html:845,Clear,Clear,845,root/html534/TStatistic.html,https://root.cern,https://root.cern/root/html534/TStatistic.html,1,['Clear'],['Clear']
Usability,"C*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2010-09-23 20:05; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGDockableFrame.html:21609,Undo,Undocked,21609,root/html528/TGDockableFrame.html,https://root.cern,https://root.cern/root/html528/TGDockableFrame.html,2,['Undo'],['Undocked']
Usability,"C*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2011-07-04 15:28; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGDockableFrame.html:21709,Undo,Undocked,21709,root/html530/TGDockableFrame.html,https://root.cern,https://root.cern/root/html530/TGDockableFrame.html,2,['Undo'],['Undocked']
Usability,"C*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGDockableFrame(const TGWindow* p = 0, Int_t id = -1, UInt_t options = kHorizontalFrame); Create a dockable frame widget. ~TGDockableFrame(); Cleanup dockable frame. void AddFrame(TGFrame* f, TGLayoutHints* hints); Add frame to dockable frame container. Frame and hints are NOT adopted. void UndockContainer(); Undock container. void DockContainer(Int_t del = kTRUE); Dock container back to TGDockableFrame. void ShowContainer(); Show dock container. void HideContainer(); Hide dock container. Bool_t ProcessMessage(Long_t , Long_t , Long_t ); Process dockable frame messages. void EnableUndock(Bool_t onoff); Enable undocking. void EnableHide(Bool_t onoff); Enable hiding. void SetWindowName(const char* name); Set window name so it appear as title of the undock window. void SavePrimitive(ostream& out, Option_t* option = """"); Save a dockable frame widget as a C++ statement(s) on output stream out. TGUndockedFrame& operator=(const TGDockableFrame& ). TGDockableFrame(const TGDockableFrame& ). void Docked(); { Emit(""Docked()""); }. void Undocked(); { Emit(""Undocked()""); }. void EnableUndock(Bool_t onoff). void EnableHide(Bool_t onoff). Bool_t IsUndocked() const; { return (fFrame != 0); }. Bool_t IsHidden() const; { return fHidden; }. Bool_t IsFixedSize() const; { return fFixedSize; }. void SetFixedSize(Bool_t fixed); { fFixedSize = fixed; }. TGCompositeFrame * GetContainer() const; { return fContainer; }. TGUndockedFrame * GetUndocked() const; { return fFrame; }. » Author: Abdelhalim Ssadik 07/07/04 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gui:$Id: TGDockableFrame.h 23256 2008-04-16 14:13:50Z antcheva $ » Last generated: 2011-11-03 20:13; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGDockableFrame.html:21709,Undo,Undocked,21709,root/html532/TGDockableFrame.html,https://root.cern,https://root.cern/root/html532/TGDockableFrame.html,2,['Undo'],['Undocked']
Usability,"C++ member functions internally expect this pointer as first argument to have access to class members of the same instance). pthreads are made for simple C functions and do not know about Thread0 being a member function of a class. Thus, you have to pass this information by hand, if you want to access all members of the Myclass instance from the Thread0 function.; Note: Method Thread0 cannot be a virtual member function, since the cast of Thread0 to void(*) in the TThread constructor may raise problems with C++ virtual function table. However, Thread0 may call another virtual member function virtual void Myclass::Func0() which then can be overridden in a derived class of Myclass. (See example TMhs3).; Class Myclass may also provide a method to stop the running thread:; Int_t Myclass::Threadstop() {; if (mTh) {; TThread::Delete(mTh);; delete mTh;; mTh=0;; return 0;; }; return 1;; }; Example TMhs3: Class TThreadframe (TThreadframe.h, TThreadframe.cxx) is a simple example of a framework class managing up to four threaded methods. Class TMhs3 (TMhs3.h, TMhs3.cxx) inherits from this base class, showing the mhs3 example 8.1 (mhs3.h, mhs3.cxx)within a class. The Makefile of this example builds the shared libraries libTThreadframe.so and libTMhs3.so. These are either loaded or executed by the ROOT script TMhs3demo.C, or are linked against an executable: TMhs3run.cxx.; 23.3.1 Known Problems; Parts of the ROOT framework, like the interpreter, are not yet thread-safe. Therefore, you should use this package with caution. If you restrict your threads to distinct and `simple’ duties, you will able to benefit from their use. The TThread class is available on all platforms, which provide a POSIX compliant thread implementation. On Linux, Xavier Leroy’s Linux Threads implementation is widely used, but the TThread implementation should be usable on all platforms that provide pthread.; Linux Xlib on SMP machines is not yet thread-safe. This may cause crashes during threaded graphics op",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1116503,simpl,simple,1116503,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  pyroot001_arrayInterface.py This tutorial illustrates the conversion of STL vectors and TVec to numpy arrays without copying the data ;  pyroot002_TTreeAsMatrix.py This tutorial shows how a TTree c",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v614/files.html:142764,Simpl,Simple,142764,doc/v614/files.html,https://root.cern,https://root.cern/doc/v614/files.html,2,['Simpl'],['Simple']
Usability,"CAuxilliary selector used to test PROOF functionality ;  ProofTests.hAuxilliary selector used to test PROOF functionality ;  runProof.CMacro to run examples of analysis on PROOF, corresponding to the TSelector implementations found under <ROOTSYS>/tutorials/proof ;  ► pyroot;  benchmarks.pyRun benchmarks macros ;  demo.pyTo run, do an ""execfile( '<path-to>/demo.py' )"" or ""python <path-to>/demo.py"" ;  demoshelp.py Display demo help ;  DynamicSlice.py Example of function called when a mouse event occurs in a pad ;  fildir.py This macro displays the ROOT Directory data structure ;  file.py This macro displays the physical ROOT file structure ;  fillrandom.py FillRandom example ;  first.py My first PyROOT interactive session ;  fit1.py Fit example ;  fit1_py.py;  formula1.py TF1 example ;  framework.py The ROOT Framework ;  geometry.py Geometry ;  gerrors.py A Simple Graph with error bars ;  graph.py A Simple Graph Example ;  gui_ex.pyA Simple GUI Example ;  h1draw.py A Simple histogram drawing example ;  hsimple.py This program creates : ;  hsum.py Simple example illustrating how to use the C++ interpreter ;  mrt.py Build ROOT Ntuple from other source ;  multifit.py Example showing how to fit in a sub-range of an histogram An histogram is created and filled with the bin contents and errors defined in the table below ;  na49geomfile.pyBefore executing this macro, the file makegeometry.C must have been executed ;  na49view.pyThis macro generates two views of the NA49 detector ;  na49visible.pySet visibility attributes for the NA49 geometry Set Shape attributes ;  ntuple1.py Ntuple drawing example ;  numberEntry.py;  parse_CSV_file_with_TTree_ReadStream.pyThis function provides an example of how one might massage a csv data file to read into a ROOT TTree via TTree::ReadStream ;  qtexample.pyQt example ;  ratioplot.py Display two histograms and their ratio ;  rootmarks.pyPrints a summary of all ROOT benchmarks (must be run before) The ROOTMARK number printed is by reference",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v608/files.html:138069,Simpl,Simple,138069,doc/v608/files.html,https://root.cern,https://root.cern/doc/v608/files.html,3,['Simpl'],['Simple']
Usability,"CINT MethodArgInfo object. const char * GetDefault() const; Get default value of method argument. const char * GetTypeName() const; Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory""; Result needs to be used or copied immediately. const char * GetFullTypeName() const; Get full type description of method argument, e.g.: ""class TDirectory*"". std::string GetTypeNormalizedName() const; Get the normalized name of the return type. A normalized name is fully; qualified and has all typedef desugared except for the 'special' typedef; which include Double32_t, Float16_t, [U]Long64_t and std::string. It; also has std:: removed [This is subject to change]. Long_t Property() const; Get property description word. For meaning of bits see EProperty. TList * GetOptions() const; Returns list of possible options - according to pointed datamember.; If there is no datamember field assigned to this methodarg - returns 0. TDataMember * GetDataMember() const; Returns TDataMember pointed by this methodarg.; If you want to specify list of options or current value for your; MethodArg (i.e. it is used as initial values in argument-asking dialogs; popped up from context-meny),you can get this value from one of data; members of the class.; The only restriction is, that this DataMember object must have its; Getter/Setter methods set-up correctly - for details look at TDataMember.; To learn how to specify the data member to which the argument should; ""point"", look at TMethod. This is TMethod which sets up fDataMember,; so it could work correctly. TMethodArg(const TMethodArg& ). TMethodArg& operator=(const TMethodArg& ). TFunction * GetMethod() const; { return fMethod; }. » Author: Rene Brun 04/02/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/meta:$Id$ » Last generated: 2015-03-14 16:45; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TMethodArg.html:8283,learn,learn,8283,root/html534/TMethodArg.html,https://root.cern,https://root.cern/root/html534/TMethodArg.html,1,['learn'],['learn']
Usability,"CInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ IsA(). TClass * RooStats::ConfInterval::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval.; Definition at line 67 of file ConfInterval.h. ◆ IsInInterval(). virtual bool RooStats::ConfInterval::IsInInterval ; (; const RooArgSet & ; ); const. pure virtual . check if given point is in the interval ; Implemented in RooStats::LikelihoodInterval, RooStats::PointSetInterval, RooStats::SimpleInterval, and RooStats::MCMCInterval. ◆ operator=(). ConfInterval & RooStats::ConfInterval::operator= ; (; const ConfInterval & ; other). inline . operator= ; Definition at line 43 of file ConfInterval.h. ◆ SetConfidenceLevel(). virtual void RooStats::ConfInterval::SetConfidenceLevel ; (; double ; cl). pure virtual . used to set confidence level. Keep pure virtual ; Implemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ Streamer(). void RooStats::ConfInterval::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HypoTestInverterResult, RooStats::LikelihoodInterval, RooStats::MCMCInterval, RooStats::PointSetInterval, and RooStats::SimpleInterval. ◆ StreamerNVirtual(). void RooStats::ConfInterval::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 67 of file ConfInterval.h. Libraries for RooStats::ConfInterval:. [legend]; The documentation for this class was generated from the following file:; roofit/roostats/inc/RooStats/ConfInterval.h. RooStatsConfInterval. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:53 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html:15421,Simpl,SimpleInterval,15421,doc/master/classRooStats_1_1ConfInterval.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1ConfInterval.html,3,"['Guid', 'Simpl']","['Guide', 'SimpleInterval']"
Usability,"CMY Modulo to paint the ""h2"" histogram.; lp(x,y,z) set the light position. In Light and LightHeight display modes groups the color palette is calculated according to the fictive light source position in 3-d space. Using this function one can change the position of the source and thus to achieve various graphical effects. This function does not apply for Simple and Height display modes groups. Default is: lp(1000,1000,100).; s(shading,shadow) allows to set the shading. The picture's surface is composed of triangles. If desired the edges of the neighbouring triangles can be smoothed (shaded). If desired the display of the shadow can be painted as well. The function does not apply for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0); b(bezier) set the Bezier smoothing. For Simple display modes group and for Grid, LinesX and LinesY display modes one can smooth data using Bezier smoothing algorithm. The function does not apply for other display modes groups and display modes. Possible values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0); cw(width) set the contour width. This function applies only for the Contours display mode. One can change the width between horizontal slices and thus their density. Default value: cw(50); lhw(weight) set the light height weight. For LightHeight display modes group one can change the weight between both shading algorithms. The function does not apply for other display modes groups. Default value is lhw(0.5).; cm(enable,color,width,height,style) allows to draw a marker on each node. In addition to the surface drawn using any above given algorithm one can display channel marks. One can control the color as well as the width, height (in pixels) and the style of the marks. The parameter enable can be set to. 0 = Channel marks are not drawn; 1 = Channel mark",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSpectrum2Painter.html:49575,Simpl,Simple,49575,doc/master/classTSpectrum2Painter.html,https://root.cern,https://root.cern/doc/master/classTSpectrum2Painter.html,1,['Simpl'],['Simple']
Usability,"CTDeviceTDevice ;  CTDLGradientDescent;  CTGradientDescent;  CTLayerGeneric layer class ;  CTNetGeneric neural network class ;  CTReferenceThe reference architecture class ;  CTReshapeLayer;  CTRMSPropRMSProp Optimizer class ;  CTSGDStochastic Batch Gradient Descent Optimizer class ;  CTSharedLayerLayer class width shared weight and bias layers ;  CTTensorBatchTTensorBatch ;  CTTensorBatchIteratorTTensorBatchIterator ;  CTTensorDataLoaderTTensorDataLoader ;  CTTensorDataLoader< AData, TReference< AReal > >;  CVGeneralLayerGeneric General Layer class ;  CVOptimizerGeneric Optimizer class ;  ►NExperimental;  CClassification;  CClassificationResult;  ►NkNN;  CEvent;  CModulekNN;  CNodeThis file contains binary tree and global function template that searches tree for k-nearest neigbors ;  NTMVAGlob;  CAbsoluteDeviationLossFunctionAbsolute Deviation Loss Function ;  CAbsoluteDeviationLossFunctionBDTAbsolute Deviation BDT Loss Function ;  CAbsValue;  CBDTEventWrapper;  CBinarySearchTreeA simple Binary search tree including a volume search method ;  CBinarySearchTreeNodeNode for the BinarySearch or Decision Trees ;  CBinaryTreeBase class for BinarySearch and Decision Trees ;  CCCPrunerA helper class to prune a decision tree using the Cost Complexity method (see Classification and Regression Trees by Leo Breiman et al) ;  ►CCCTreeWrapper;  CCCTreeNode;  CClassifierFactoryThis is the MVA factory ;  CClassInfoClass that contains all the information of a class ;  Ccompose_binary_t;  Ccompose_unary_t;  ►CConfigSingleton class for global configuration settings used by TMVA ;  CIONames;  CVariablePlotting;  CConfigurable;  CConvergenceTestCheck for convergence ;  CCostComplexityPruneToolA class to prune a decision tree using the Cost Complexity method ;  CCrossEntropyImplementation of the CrossEntropy as separation criterion ;  CCrossValidationClass to perform cross validation, splitting the dataloader into folds ;  CCrossValidationFoldResult;  CCrossValidationResultClass to save ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v616/namespaces.html:86723,simpl,simple,86723,doc/v616/namespaces.html,https://root.cern,https://root.cern/doc/v616/namespaces.html,1,['simpl'],['simple']
Usability,"Cache.h. ◆ IsAutoCreated(). bool TTreeCache::IsAutoCreated ; (; ); const. inline . Definition at line 150 of file TTreeCache.h. ◆ IsEnabled(). virtual bool TTreeCache::IsEnabled ; (; ); const. inlinevirtual . Definition at line 151 of file TTreeCache.h. ◆ IsLearning(). bool TTreeCache::IsLearning ; (; ); const. inlineoverridevirtual . Reimplemented from TFileCacheRead.; Definition at line 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2250 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTTreeCache.html:43654,learn,learning,43654,doc/v632/classTTreeCache.html,https://root.cern,https://root.cern/doc/v632/classTTreeCache.html,1,['learn'],['learning']
Usability,"Cache.h. ◆ IsAutoCreated(). bool TTreeCache::IsAutoCreated ; (; ); const. inline . Definition at line 150 of file TTreeCache.h. ◆ IsEnabled(). virtual bool TTreeCache::IsEnabled ; (; ); const. inlinevirtual . Definition at line 151 of file TTreeCache.h. ◆ IsLearning(). bool TTreeCache::IsLearning ; (; ); const. inlineoverridevirtual . Reimplemented from TFileCacheRead.; Definition at line 152 of file TTreeCache.h. ◆ LearnBranch(). Int_t TTreeCache::LearnBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). overridevirtual . Add a branch discovered by actual usage to the list of branches to be stored in the cache this function is called by TBranch::GetBasket If we are not longer in the training phase this is an error. ; Returns:; 0 branch added or already included; -1 on error . Reimplemented from TFileCacheRead.; Definition at line 350 of file TTreeCache.cxx. ◆ LearnPrefill(). void TTreeCache::LearnPrefill ; (; ). virtual . Perform an initial prefetch, attempting to read as much of the learning phase baskets for all branches at once. ; Definition at line 2251 of file TTreeCache.cxx. ◆ operator=(). TTreeCache & TTreeCache::operator= ; (; const TTreeCache & ; ). privatedelete . ◆ Print(). void TTreeCache::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print cache statistics. ; Like:; ******TreeCache statistics for file: cms2.root ******; Number of branches in the cache ...: 1093; Cache Efficiency ..................: 0.997372; Cache Efficiency Rel...............: 1.000000; Learn entries......................: 100; Reading............................: 72761843 bytes in 7 transactions; Readahead..........................: 256000 bytes with overhead = 0 bytes; Average transaction................: 10394.549000 Kbytes; Number of blocks in current cache..: 210, total size: 6280352; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; totalstatic unsigned int totalDefinition TGWin32ProxyDefs.h:40; bytesOption_t Option_t TPoint TPo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:43658,learn,learning,43658,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,1,['learn'],['learning']
Usability,"CacheElement>::_lastIndexLast slot accessed; Int_tRooCacheManager<RooAbsCacheElement>::_maxSizeMaximum size; RooNormSetCache*RooCacheManager<RooAbsCacheElement>::_nsetCache! Normalization/Integration set manager; RooAbsCacheElement**RooCacheManager<RooAbsCacheElement>::_object! Payload; Bool_t_optCacheModeSeen! ; list<RooArgSet*>_optCacheObsList! list of all optCacheObservables owned; RooArgSet*_optCacheObservables! current optCacheObservables ; RooAbsArg*RooAbsCache::_ownerPointer to owning RooAbsArg; Int_tRooCacheManager<RooAbsCacheElement>::_sizeActual use; Bool_tRooCacheManager<RooAbsCacheElement>::_wired! In wired mode, there is a single payload which is returned always. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; RooObjCacheManager(RooAbsArg* owner = 0, Int_t maxSize = 10, Bool_t clearCacheOnServerRedirect = kTRUE); Constructor of object cache manager for given owner. If clearCacheOnServerRedirect is true; all cache elements will be cleared when a server redirect is intercepted by the cache manager.; This is the default strategy and should only be overridden when you really understand; what you're doing as properly implementing server redirect in cache elements can get very; complicated, especially if there are (cyclical) reference back to the owning object. RooObjCacheManager(const RooObjCacheManager& other, RooAbsArg* owner = 0); Copy constructor. ~RooObjCacheManager(); Destructor. Bool_t redirectServersHook(const RooAbsCollection& , Bool_t , Bool_t , Bool_t ); Intercept server redirect calls. If clearOnRedirect was set, sterilize; the cache (i.e. keep the structure but delete all contents). If not; forward serverRedirect to cache elements. void operModeHook(); Intercept changes to cache operation mode and forward to cache elements. void optimizeCacheMode(const RooArgSet& , RooArgSet& , RooLinkedList& ); Intercept calls to perform automatic optimization of cache mode operation.; Forward calls to existing cache e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooObjCacheManager.html:4143,clear,clearCacheOnServerRedirect,4143,root/html532/RooObjCacheManager.html,https://root.cern,https://root.cern/root/html532/RooObjCacheManager.html,2,['clear'],"['clearCacheOnServerRedirect', 'cleared']"
Usability,"Caches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED(6, 36, ""Use getObservables()."") RooFit R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooAbsData *dset;  ;  R__DEPRECATED (6, 36, ""Use observableOverlaps()."") inline bool dependentOverlaps(const RooArgSet *depList;  ;  R__DEPRECATED (6, 36, ""Use checkObservables()."") inline bool checkDependents(const RooArgSet *nset) const;  ;  R__DEPRECATED (6, 36, ""Use recursiveCheckObservables()."") inline bool recursiveCheckDependents(const RooArgSet *nset) const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TN",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealVar.html:45828,Clear,Clear,45828,doc/master/classRooRealVar.html,https://root.cern,https://root.cern/doc/master/classRooRealVar.html,1,['Clear'],['Clear']
Usability,"Calculation of Vavilov distribution Nucl.Instr. and Meth. B47(1990), 215-224; Accuracy: quote from the reference above:; ""The results of our code have been compared with the values of the Vavilov; density function computed numerically in an accurate way: our approximation; shows a difference of less than 3% around the peak of the density function, slowly; increasing going towards the extreme tails to the right and to the left""; For a more accurate implementation see the documentation of the Vavilov class and the cumulative ROOT::Math::vavilov_accurate_cdf ; Definition at line 2815 of file TMath.cxx. ◆ VavilovSet(). void TMath::VavilovSet ; (; Double_t ; rkappa, . Double_t ; beta2, . Bool_t ; mode, . Double_t * ; WCM, . Double_t * ; AC, . Double_t * ; HC, . Int_t & ; itype, . Int_t & ; npt . ). Internal function, called by Vavilov and VavilovI. ; Definition at line 2854 of file TMath.cxx. ◆ Voigt(). Double_t TMath::Voigt ; (; Double_t ; xx, . Double_t ; sigma, . Double_t ; lg, . Int_t ; r = 4 . ). Computation of Voigt function (normalised). ; Voigt is a convolution of the two functions: ; \[; gauss(xx) = \frac{1}{(\sqrt{2\pi} sigma)} e^{\frac{xx^{2}}{(2 sigma{^2})}}; \]. and ; \[; lorentz(xx) = \frac{ \frac{1}{\pi} \frac{lg}{2} }{ (xx^{2} + \frac{lg^{2}}{4}) }; \]. .; The Voigt function is known to be the real part of Faddeeva function also called complex error function [2].; The algorithm was developed by J. Humlicek [1]. This code is based on fortran code presented by R. J. Wells [2]. Translated and adapted by Miha D. Puc; To calculate the Faddeeva function with relative error less than 10^(-r). r can be set by the user subject to the constraints 2 <= r <= 5. [1] J. Humlicek, JQSRT, 21, 437 (1982).; [2] R.J. Wells ""Rapid Approximation to the Voigt/Faddeeva Function and its Derivatives"" JQSRT 62 (1999), pp 29-48. . Definition at line 898 of file TMath.cxx. TMath. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/namespaceTMath.html:91031,Guid,Guide,91031,doc/master/namespaceTMath.html,https://root.cern,https://root.cern/doc/master/namespaceTMath.html,1,['Guid'],['Guide']
Usability,"Canvas () const override;  ; virtual TGCompositeFrame * GetEditorTab (const char *name);  Find or create tab with name. ;  ; virtual TGedTabInfo * GetEditorTabInfo (const char *name);  Find or create tab with name. ;  ; virtual TObject * GetModel () const;  ; virtual TVirtualPad * GetPad () const;  ; TGTab * GetTab () const;  ; TGCanvas * GetTGCanvas () const;  ; virtual void GlobalClosed ();  Delete global editor if no canvas exists. ;  ; virtual void GlobalSetModel (TVirtualPad *, TObject *, Int_t);  Set canvas to global editor. ;  ; void Hide () override;  Hide editor. The editor is put into non-active state. ;  ; void InsertGedFrame (TGedFrame *f);  Insert GedFrame in fGedFrames list according to priorities. ;  ; TClass * IsA () const override;  ; Bool_t IsGlobal () const override;  ; void PrintFrameStat ();  Print contents of fFrameMap. ;  ; void RecursiveRemove (TObject *obj) override;  Remove references to fModel in case the fModel is being deleted. ;  ; void ReinitWorkspace ();  Clears windows in editor tab. ;  ; virtual void SetCanvas (TCanvas *c);  Change connection to another canvas. ;  ; void SetGlobal (Bool_t global) override;  Set editor global. ;  ; virtual void SetModel (TVirtualPad *pad, TObject *obj, Int_t event, Bool_t force=kFALSE);  Activate object editors according to the selected object. ;  ; void Show () override;  Show editor. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void Update (TGedFrame *frame=nullptr);  Virtual method that is called on any change in the dependent frames. ;  ;  Public Member Functions inherited from TVirtualPadEditor;  TVirtualPadEditor ();  Virtual editor ctor. ;  ; virtual ~TVirtualPadEditor ();  Virtual editor dtor. ;  ; virtual void Build ();  ; virtual void DeleteEditors ();  ; virtual void DrawLine (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawLineNDC (Double_t, Double_t, Double_t, Double_t);  ; virtual void DrawText (Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:2240,Clear,Clears,2240,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['Clear'],['Clears']
Usability,"Canvas->cd(1); root[] gPad->SetLogx(); root[] MyCanvas->cd(2); root[] gPad->SetLogx(); root[] MyCanvas->cd(3); root[] gPad->SetLogx(); 9.3.8 WaitPrimitive method; When the TPad::WaitPrimitive() method is called with no arguments, it will wait until a double click or any key pressed is executed in the canvas. A call to gSystem->Sleep(10) has been added in the loop to avoid consuming at all the CPU. This new option is convenient when executing a macro. By adding statements like:; canvas->WaitPrimitive();; You can monitor the progress of a running macro, stop it at convenient places with the possibility to interact with the canvas and resume the execution with a double click or a key press.; 9.3.9 Locking the Pad; You can make the TPad non-editable. Then no new objects can be added, and the existing objects and the pad can not be changed with the mouse or programmatically. By default the TPad is editable.; TPad::SetEditable(kFALSE); 9.4 Graphical Objects; In this paragraph, we describe the various simple 2D graphical objects defined in ROOT. Usually, one defines these objects with their constructor and draws them with their Draw() method. Therefore, the examples will be very brief. Most graphical objects have line and fill attributes (color, width) that will be described in “Graphical objects attributes”. If the user wants more information, the class names are given and they may refer to the online developer documentation. This is especially true for functions and methods that set and get internal values of the objects described here. By default 2D graphical objects are created in User Coordinates with (0, 0) in the lower left corner.; 9.4.1 Lines, Arrows and Polylines; The simplest graphical object is a line. It is implemented in the TLine class. The line constructor is:; TLine(Double_t x1,Double_t y1,Double_t x2,Double_t y2); The arguments x1, y1, x2, y2 are the coordinates of the first and second point. It can be used:; root[] l = new TLine(0.2,0.2,0.8,0.3); root[] ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:319047,simpl,simple,319047,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"Canvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooStats::SimpleInterval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooStats::ConfInterval; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; double fCLsCleanupThreshold;  ; TList fExpPValues;  list of expected sampling distribution for each point ;  ; bool fFittedLowerLimit;  ; bool fFittedUpperLimit;  ; bool f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html:16983,Simpl,SimpleInterval,16983,doc/master/classRooStats_1_1HypoTestInverterResult.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1HypoTestInverterResult.html,1,['Simpl'],['SimpleInterval']
Usability,"CanvasID == -1) return nullptr;; 722 ; 723 TPad::cd(subpadnumber);; 724 ; 725 // in case doublebuffer is off, draw directly onto display window; 726 if (!IsBatch() && !IsWeb() && !fDoubleBuffer); 727 gVirtualX->SelectWindow(fCanvasID);//Ok, does not matter for glpad.; 728 ; 729 return gPad;; 730}; 731 ; 732////////////////////////////////////////////////////////////////////////////////; 733/// Remove all primitives from the canvas.; 734/// If option ""D"" is specified, direct sub-pads are cleared but not deleted.; 735/// This option is not recursive, i.e. pads in direct sub-pads are deleted.; 736 ; 737void TCanvas::Clear(Option_t *option); 738{; 739 if (fCanvasID == -1) return;; 740 ; 741 R__LOCKGUARD(gROOTMutex);; 742 ; 743 TString opt = option;; 744 opt.ToLower();; 745 if (opt.Contains(""d"")) {; 746 // clear subpads, but do not delete pads in case the canvas; 747 // has been divided (note: option ""D"" is propagated so could cause; 748 // conflicts for primitives using option ""D"" for something else); 749 if (fPrimitives) {; 750 TIter next(fPrimitives);; 751 TObject *obj;; 752 while ((obj=next())) {; 753 obj->Clear(option);; 754 }; 755 }; 756 } else {; 757 //default, clear everything in the canvas. Subpads are deleted; 758 TPad::Clear(option); //Remove primitives from pad; 759 }; 760 ; 761 fSelected = nullptr;; 762 fClickSelected = nullptr;; 763 fSelectedPad = nullptr;; 764 fClickSelectedPad = nullptr;; 765}; 766 ; 767////////////////////////////////////////////////////////////////////////////////; 768/// Emit pad Cleared signal.; 769 ; 770void TCanvas::Cleared(TVirtualPad *pad); 771{; 772 Emit(""Cleared(TVirtualPad*)"", (Longptr_t)pad);; 773}; 774 ; 775////////////////////////////////////////////////////////////////////////////////; 776/// Emit Closed signal.; 777 ; 778void TCanvas::Closed(); 779{; 780 Emit(""Closed()"");; 781}; 782 ; 783////////////////////////////////////////////////////////////////////////////////; 784/// Close canvas.; 785///; 786/// Delete window/pads ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:24302,clear,clear,24302,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,3,"['Clear', 'clear']","['Clear', 'clear']"
Usability,Canvases ; (; ). private . Definition at line 230 of file mvaeffs.cxx. ◆ UpdateSignificanceHists(). void TMVA::StatDialogMVAEffs::UpdateSignificanceHists ; (; ). Definition at line 249 of file mvaeffs.cxx. Member Data Documentation. ◆ dataset. TString TMVA::StatDialogMVAEffs::dataset. private . Definition at line 98 of file mvaeffs.h. ◆ fBkgInput. TGNumberEntry* TMVA::StatDialogMVAEffs::fBkgInput. private . Definition at line 102 of file mvaeffs.h. ◆ fButtons. TGHorizontalFrame* TMVA::StatDialogMVAEffs::fButtons. private . Definition at line 104 of file mvaeffs.h. ◆ fCloseButton. TGTextButton* TMVA::StatDialogMVAEffs::fCloseButton. private . Definition at line 106 of file mvaeffs.h. ◆ fDrawButton. TGTextButton* TMVA::StatDialogMVAEffs::fDrawButton. private . Definition at line 105 of file mvaeffs.h. ◆ fFormula. TString TMVA::StatDialogMVAEffs::fFormula. private . Definition at line 97 of file mvaeffs.h. ◆ fInfoList. TList* TMVA::StatDialogMVAEffs::fInfoList. private . Definition at line 99 of file mvaeffs.h. ◆ fMain. TGMainFrame* TMVA::StatDialogMVAEffs::fMain. private . Definition at line 94 of file mvaeffs.h. ◆ fNBackground. Float_t TMVA::StatDialogMVAEffs::fNBackground. private . Definition at line 96 of file mvaeffs.h. ◆ fNSignal. Float_t TMVA::StatDialogMVAEffs::fNSignal. private . Definition at line 95 of file mvaeffs.h. ◆ fQObject. TQObjSender TMVA::StatDialogMVAEffs::fQObject. private . Definition at line 74 of file mvaeffs.h. ◆ fSigInput. TGNumberEntry* TMVA::StatDialogMVAEffs::fSigInput. private . Definition at line 101 of file mvaeffs.h. ◆ maxLenTitle. Int_t TMVA::StatDialogMVAEffs::maxLenTitle. private . Definition at line 108 of file mvaeffs.h. Libraries for TMVA::StatDialogMVAEffs:. [legend]; The documentation for this class was generated from the following files:; tmva/tmvagui/inc/TMVA/mvaeffs.h; tmva/tmvagui/src/mvaeffs.cxx. TMVAStatDialogMVAEffs. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:43 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1StatDialogMVAEffs.html:7554,Guid,Guide,7554,doc/master/classTMVA_1_1StatDialogMVAEffs.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1StatDialogMVAEffs.html,1,['Guid'],['Guide']
Usability,"Char_t bits); virtual voidTEveElement::Annihilate(); virtual voidTEveElement::AnnihilateElements(); virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTEveElement::ApplyVizTag(const TString& tag, const TString& fallback_tag = """"); Float_t*TAttBBox::AssertBBox(); TEveElement::List_iTEveElement::BeginChildren(); TEveElement::List_ciTEveElement::BeginChildren() const; TEveElement::List_iTEveElement::BeginParents(); TEveElement::List_ciTEveElement::BeginParents() const; virtual voidTObject::Browse(TBrowser* b); virtual Bool_tTEveElement::CanEditElement() const; virtual Bool_tTEveElement::CanEditMainColor() const; virtual Bool_tTEveElement::CanEditMainTrans() const; virtual Bool_tTEveElement::CanEditMainTransparency() const; virtual voidTEveElement::CheckReferenceCount(const TEveException& eh = ""TEveElement::CheckReferenceCount ""); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTEveElement::ClearStamps(); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTEveElement::CloneChildrenRecurse(TEveElement* dest, Int_t level = 0) const; virtual TEveElement*TEveElement::CloneElement() const; virtual TEveElement*TEveElement::CloneElementRecurse(Int_t level = 0) const; virtual voidTEveElement::CollectSceneParents(TEveElement::List_t& scenes); virtual voidTEveElement::CollectSceneParentsFromChildren(TEveElement::List_t& scenes, TEveElement* parent); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); virtual voidTNamed::Copy(TObject& named) const; virtual voidTEveElement::CopyVizParams(const TEveElement* el); virtual voidTEveElement::CopyVizParamsFromDB(); voidTEveElement::CSCApplyMainColorToAllChildren(); voidTEveElement::CSCApplyMainColorToMatchingChildren(); voidTEveElement::CSCApplyMainTransparencyToAllChildren(); voidTEveElement::CSCApplyMainTransparencyToMatchingChildren(); voidTEveElement::CSCImplySelectAllChildren(); voidTEve",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TEveProjectionAxes.html:2274,Clear,ClearStamps,2274,root/html528/TEveProjectionAxes.html,https://root.cern,https://root.cern/root/html528/TEveProjectionAxes.html,16,['Clear'],['ClearStamps']
Usability,Char_t GetFeatures () const;  ; void Set (UChar_t newBits);  . Private Attributes; UChar_t fIOBits {0};  . Friends; class ::TBasket;  ; class ::TBranch;  ; class ::TTree;  . #include <ROOT/TIOFeatures.hxx>; Constructor & Destructor Documentation. ◆ TIOFeatures() [1/2]. ROOT::TIOFeatures::TIOFeatures ; (; ). inline . Definition at line 75 of file TIOFeatures.hxx. ◆ TIOFeatures() [2/2]. ROOT::TIOFeatures::TIOFeatures ; (; UChar_t ; IOBits). inlineprivate . Definition at line 96 of file TIOFeatures.hxx. Member Function Documentation. ◆ Clear() [1/3]. void TIOFeatures::Clear ; (; EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 80 of file TIOFeatures.cxx. ◆ Clear() [2/3]. void TIOFeatures::Clear ; (; Experimental::EIOFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 58 of file TIOFeatures.cxx. ◆ Clear() [3/3]. void TIOFeatures::Clear ; (; Experimental::EIOUnsupportedFeatures ; input_bits). Clear a specific IO feature from this set. ; Parameters. [in]input_bitsThe specific feature to disable. Removes a feature from the TIOFeatures object; emits an Error message if the IO feature is not supported by this version of ROOT. ; Definition at line 69 of file TIOFeatures.cxx. ◆ GetFeatures(). UChar_t TIOFeatures::GetFeatures ; (; ); const. private . Definition at line 250 of file TIOFeatures.cxx. ◆ Print(). void TIOFeatures::Print ; (; ); const. Print a human-readable representation of the TIOFeatures to stdout. ; Prints a string with the names of all enabled IO features. ; Definition at line 197 of file TIOFeatures.cxx. ◆ Set,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html:3616,Clear,Clear,3616,doc/v632/classROOT_1_1TIOFeatures.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1TIOFeatures.html,2,['Clear'],['Clear']
Usability,"Children ; (; Handle_t ; id, . TGListTreeItem * ; item, . Int_t ; x, . Int_t ; y, . Int_t ; xroot . ). protected . Draw children of item in list tree. ; Definition at line 1453 of file TGListTree.cxx. ◆ DrawItem(). void TGListTree::DrawItem ; (; Handle_t ; id, . TGListTreeItem * ; item, . Int_t ; x, . Int_t ; y, . Int_t * ; xroot, . UInt_t * ; retwidth, . UInt_t * ; retheight . ). protected . Draw list tree item. ; Definition at line 1482 of file TGListTree.cxx. ◆ DrawItemName(). void TGListTree::DrawItemName ; (; Handle_t ; id, . TGListTreeItem * ; item . ). protected . Draw name of list tree item. ; Definition at line 1630 of file TGListTree.cxx. ◆ DrawNode(). void TGListTree::DrawNode ; (; Handle_t ; id, . TGListTreeItem * ; item, . Int_t ; x, . Int_t ; y . ). protected . Draw node (little + in box). ; Definition at line 1671 of file TGListTree.cxx. ◆ DrawOutline(). void TGListTree::DrawOutline ; (; Handle_t ; id, . TGListTreeItem * ; item, . Pixel_t ; col = 0xbbbbbb, . Bool_t ; clear = kFALSE . ). virtual . Draw a outline of color 'col' around an item. ; Definition at line 1581 of file TGListTree.cxx. ◆ DrawRegion(). void TGListTree::DrawRegion ; (; Int_t ; x, . Int_t ; y, . UInt_t ; w, . UInt_t ; h . ). overridevirtual . Redraw list tree. ; Reimplemented from TGContainer.; Definition at line 1365 of file TGListTree.cxx. ◆ End(). void TGListTree::End ; (; Bool_t ; select = kFALSE). overridevirtual . Move content to the bottom. ; Reimplemented from TGContainer.; Definition at line 1199 of file TGListTree.cxx. ◆ FindChildByData(). TGListTreeItem * TGListTree::FindChildByData ; (; TGListTreeItem * ; item, . void * ; userData . ). Find child of item by userData. ; Definition at line 2297 of file TGListTree.cxx. ◆ FindChildByName(). TGListTreeItem * TGListTree::FindChildByName ; (; TGListTreeItem * ; item, . const char * ; name . ). Find child of item by name. ; Definition at line 2274 of file TGListTree.cxx. ◆ FindItem() [1/2]. void * TGListTree::FindItem ; (; const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGListTree.html:59004,clear,clear,59004,doc/master/classTGListTree.html,https://root.cern,https://root.cern/doc/master/classTGListTree.html,1,['clear'],['clear']
Usability,"ClangFormat, astyle can be useful. Starting from a code like this:; int aap ( int inp ) { ; if ( inp > 0 ) { ; return 0 ; ; int a = 1 ; ; if ( inp == 0 && a == 1 ) { ; printf ( >""this is a very long line that is not yet ending"" , a, inp, a, inp, a , inp ) ; ; a + = inp ; return a ; ; } ; } else { ; return 1 ; ; } ; if ( inp == 0 ) ; return - 1 ; ; return 1 ; ; }; You will find back like this:; int aap (int inp) {; if (inp > 0) { ; return 0 ; ; int a = 1 ; ; if (inp == 0 && a == 1) { ; printf (""this is a very long line that is not yet ending"" , a, inp, a, inp, a, inp ) ; ; a + = inp ; return a ; ; } ; } ; else { ; return 1 ; ; } ; if (inp == 0) ; return - 1 ; ; return 1 ; ; }; Get at least version 2.0 and use the following ~/.astylerc:; # ROOT code formatting style; # Note that the brackets=linux option is not available starting from astyle 2.04; #brackets=linux; style=stroustrup; mode=c; align-pointer=name; indent=spaces=3; indent-switches; indent-cases; indent-namespaces; max-instatement-indent=40; indent-preprocessor; convert-tabs; pad-header; pad-oper; unpad-paren; Where to go from here; For the rest read the Taligent Guide and use common sense. Quick Links; Jenkins Service; Jenkins How To; CDash; Coverity; Github; GitWeb; LXR; Jira; Conventions Violations; ROOT Logos; Upgrade of ROOTbinder. Sitemap. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git Primer; Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. © Copyright CERN 2014-18. All rights reserved. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/coding-conventions.html:12727,Guid,Guide,12727,d/coding-conventions.html,https://root.cern,https://root.cern/d/coding-conventions.html,3,"['Guid', 'guid']","['Guide', 'Guides', 'guidelines']"
Usability,"Class * TGToolBar::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TGCompositeFrame.; Definition at line 69 of file TGToolBar.h. ◆ operator=(). TGToolBar & TGToolBar::operator= ; (; const TGToolBar & ; ). privatedelete . ◆ Pressed(). virtual void TGToolBar::Pressed ; (; Int_t ; id). inlinevirtual . Definition at line 63 of file TGToolBar.h. ◆ Released(). virtual void TGToolBar::Released ; (; Int_t ; id). inlinevirtual . Definition at line 64 of file TGToolBar.h. ◆ SavePrimitive(). void TGToolBar::SavePrimitive ; (; std::ostream & ; out, . Option_t * ; option = """" . ). overridevirtual . Save an horizontal slider as a C++ statement(s) on output stream out. ; Reimplemented from TGCompositeFrame.; Definition at line 271 of file TGToolBar.cxx. ◆ SetId(). void TGToolBar::SetId ; (; TGButton * ; button, . Longptr_t ; id . ). virtual . changes id for button. ; Definition at line 172 of file TGToolBar.cxx. ◆ Streamer(). void TGToolBar::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGCompositeFrame. ◆ StreamerNVirtual(). void TGToolBar::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TGToolBar.h. Member Data Documentation. ◆ fMapOfButtons. TMap* TGToolBar::fMapOfButtons. protected . map of button/id pairs in this group ; Definition at line 38 of file TGToolBar.h. ◆ fPictures. TList* TGToolBar::fPictures. protected . list of pictures that should be freed ; Definition at line 36 of file TGToolBar.h. ◆ fTrash. TList* TGToolBar::fTrash. protected . list of buttons and layout hints to be deleted ; Definition at line 37 of file TGToolBar.h. Libraries for TGToolBar:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGToolBar.h; gui/gui/src/TGToolBar.cxx. TGToolBar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:38 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGToolBar.html:37679,Guid,Guide,37679,doc/master/classTGToolBar.html,https://root.cern,https://root.cern/doc/master/classTGToolBar.html,1,['Guid'],['Guide']
Usability,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLWidget* CreateDummy(); Static constructor for creating widget with default pixel format. TGLWidget* Create(const TGWindow* parent, Bool_t selectInput, Bool_t shareDefault, const TGLPaintDevice* shareDevice, UInt_t width, UInt_t height); Static constructor for creating widget with default pixel format. TGLWidget* Create(const TGLFormat& format, const TGWindow* parent, Bool_t selectInput, Bool_t shareDefault, const TGLPaintDevice* shareDevice, UInt_t width, UInt_t height); Static constructor for creating widget with given pixel format. TGLWidget(Window_t glw, const TGWindow* parent, Bool_t selectInput); Creates widget with default pixel format. ~TGLWidget(); Destructor. Deletes window ???? and XVisualInfo. void InitGL(); Call glEnable(... in overrider of InitGL. void PaintGL(); Do actual drawing in overrider of PaintGL. Bool_t MakeCurrent(); Make the gl-context current. Bool_t ClearCurrent(); Clear the current gl-context. void SwapBuffers(); Swap buffers. const TGLContext * GetContext() const; Get gl context. const TGLFormat * GetPixelFormat() const; Pixel format. std::pair<void *, void *> GetInnerData() const; Dpy*, XVisualInfo *. void AddContext(TGLContext* ctx); Register gl-context created for this window. void RemoveContext(TGLContext* ctx); Remove context (no real deletion, done by TGLContex dtor). void ExtractViewport(Int_t* vp) const; For camera. Window_t CreateWindow(const TGWindow* parent, const TGLFormat& format, UInt_t width, UInt_t height, pair<void*,void*>& innerData); CreateWidget.; Static function called prior to widget construction,; I've extracted this code from ctors to make WIN32/X11; separation simpler and because of gInterpreter usage.; new, TGLContext can throw; std::bad_alloc and std::runtime_error. Before try block, the only; resource allocated is pointed by fWindowIndex (InitWindow cannot throw).; In try block (and after successful constraction); resou",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLWidget.html:20088,Clear,ClearCurrent,20088,root/html528/TGLWidget.html,https://root.cern,https://root.cern/root/html528/TGLWidget.html,12,['Clear'],"['Clear', 'ClearCurrent']"
Usability,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a double from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafD(). const char * GetTypeName() const; {return ""Double_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/TLeafD.html:9733,simpl,simple,9733,root/html604/TLeafD.html,https://root.cern,https://root.cern/root/html604/TLeafD.html,1,['simpl'],['simple']
Usability,"Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TLeafD(); Default constructor for LeafD*-*-*-*-*-*-*-*-; *-* ============================. TLeafD(TBranch* parent, const char* name, const char* type); Create a LeafD*-*-; *-* ==============; -. ~TLeafD(); Default destructor for a LeafD*-*-*-*-*-*-; *-* ===============================. void Export(TClonesArray* list, Int_t n); -*Export element from local leaf buffer to ClonesArray; *-* ====================================================. void FillBasket(TBuffer& b); -*-*-*-*Pack leaf elements in Basket output buffer; *-* ==========================================. void Import(TClonesArray* list, Int_t n); -*Import element from ClonesArray into local leaf buffer; *-* ======================================================. void PrintValue(Int_t i = 0) const; Prints leaf value. void ReadBasket(TBuffer& b); -*-*-*-*-*Read leaf elements from Basket input buffer; *-* ===========================================. void ReadBasketExport(TBuffer& b, TClonesArray* list, Int_t n); -*-*-*-*-*Read leaf elements from Basket input buffer; and export buffer to TClonesArray objects. void ReadValue(istream& s, Char_t delim = ' '); read a double from std::istream s and store it into the branch buffer. void SetAddress(void* add = 0); -*-*-*-*-*Set leaf buffer data address; *-* ============================. Double_t GetValue(Int_t i = 0) const; if leaf is a simple type, i must be set to 0; if leaf is an array, i is the array element number to be returned. { return fValue[i]; }. TLeafD(). const char * GetTypeName() const; {return ""Double_t"";}. void * GetValuePointer() const; {return fValue;}. » Author: Rene Brun 12/01/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-30 15:14; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TLeafD.html:9733,simpl,simple,9733,root/html602/TLeafD.html,https://root.cern,https://root.cern/root/html602/TLeafD.html,1,['simpl'],['simple']
Usability,"Class ReferenceMath » Minuit2 Minimization Library. ; Minuit2Minimizer class implementing the ROOT::Math::Minimizer interface for Minuit2 minimization algorithm. ; In ROOT it can be instantiated using the plug-in manager (plug-in ""Minuit2"") Using a string (used by the plugin manager) or via an enumeration an one can set all the possible minimization algorithms (Migrad, Simplex, Combined, Scan and Fumili).; Refer to the guide for an introduction how Minuit works. ; Definition at line 54 of file Minuit2Minimizer.h. Public Member Functions;  Minuit2Minimizer (const char *type);  Constructor with a char (used by PM) ;  ;  Minuit2Minimizer (ROOT::Minuit2::EMinimizerType type=ROOT::Minuit2::kMigrad);  Default constructor. ;  ;  ~Minuit2Minimizer () override;  Destructor (no operations) ;  ; void Clear () override;  reset for consecutive minimization - implement if needed ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double Correlation (unsigned int i, unsigned int j) const override;  return correlation coefficient between variable i and j. ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrix elements if the variable is fixed or const the value is zero The ordering of the variables is the same as in errors and parameter value. ;  ; int CovMatrixStatus () const override;  return the status of the covariance matrix status = -1 : not available (inversion failed or Hesse failed) status = 0 : available but not positive defined status = 1 : covariance only approximate status = 2 : full matrix but forced pos def status = 3 : full accurate matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html:1095,Clear,Clear,1095,doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Minuit2_1_1Minuit2Minimizer.html,1,['Clear'],['Clear']
Usability,Class describing current object ; Reimplemented from TStreamerElement.; Definition at line 265 of file TStreamerElement.h. ◆ IsaPointer(). Bool_t TStreamerLoop::IsaPointer ; (; ); const. inlineoverridevirtual . Reimplemented from TStreamerElement.; Definition at line 259 of file TStreamerElement.h. ◆ operator=(). TStreamerLoop & TStreamerLoop::operator= ; (; const TStreamerLoop & ; ). privatedelete . ◆ SetCountClass(). void TStreamerLoop::SetCountClass ; (; const char * ; clname). inline . Definition at line 261 of file TStreamerElement.h. ◆ SetCountName(). void TStreamerLoop::SetCountName ; (; const char * ; name). inline . Definition at line 262 of file TStreamerElement.h. ◆ SetCountVersion(). void TStreamerLoop::SetCountVersion ; (; Int_t ; count). inline . Definition at line 263 of file TStreamerElement.h. ◆ Streamer(). void TStreamerLoop::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TStreamerLoop. ; Reimplemented from TStreamerElement.; Definition at line 1090 of file TStreamerElement.cxx. ◆ StreamerNVirtual(). void TStreamerLoop::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 265 of file TStreamerElement.h. Member Data Documentation. ◆ fCountClass. TString TStreamerLoop::fCountClass. protected . Definition at line 244 of file TStreamerElement.h. ◆ fCounter. TStreamerBasicType* TStreamerLoop::fCounter. protected . Definition at line 245 of file TStreamerElement.h. ◆ fCountName. TString TStreamerLoop::fCountName. protected . Definition at line 243 of file TStreamerElement.h. ◆ fCountVersion. Int_t TStreamerLoop::fCountVersion. protected . Definition at line 242 of file TStreamerElement.h. Libraries for TStreamerLoop:. [legend]; The documentation for this class was generated from the following files:; core/meta/inc/TStreamerElement.h; core/meta/src/TStreamerElement.cxx. TStreamerLoop. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTStreamerLoop.html:22339,Guid,Guide,22339,doc/master/classTStreamerLoop.html,https://root.cern,https://root.cern/doc/master/classTStreamerLoop.html,1,['Guid'],['Guide']
Usability,"Class to manage histogram axis.Definition TAxis.h:31; TCanvasThe Canvas class.Definition TCanvas.h:23; TGaxisThe axis painter class.Definition TGaxis.h:24; TGaxis::SetTimeFormatvoid SetTimeFormat(const char *tformat)Change the format used for time plotting.Definition TGaxis.cxx:2969; TGaxis::SetLabelFontvoid SetLabelFont(Int_t labelfont)Definition TGaxis.h:105; TGaxis::SetLabelOffsetvoid SetLabelOffset(Float_t labeloffset)Definition TGaxis.h:106; TGaxis::SetTimeOffsetvoid SetTimeOffset(Double_t toffset, Option_t *option=""local"")Change the time offset. If option = ""gmt"", set display mode to GMT.Definition TGaxis.cxx:2993; TGaxis::SetLabelColorvoid SetLabelColor(Int_t labelcolor)Definition TGaxis.h:104; TGaxis::SetLabelSizevoid SetLabelSize(Float_t labelsize)Definition TGaxis.h:107; TLatexTo draw Mathematical Formula.Definition TLatex.h:18; TLatex::DrawLatexTLatex * DrawLatex(Double_t x, Double_t y, const char *text)Make a copy of this object with the new parameters And copy object attributes.Definition TLatex.cxx:1943; TLineUse the TLine constructor to create a simple line.Definition TLine.h:22; TLine::DrawLinevirtual TLine * DrawLine(Double_t x1, Double_t y1, Double_t x2, Double_t y2)Draw this line with new coordinates.Definition TLine.cxx:103; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TStringBasic string class.Definition TString.h:139; TText::SetNDCvirtual void SetNDC(Bool_t isNDC=kTRUE)Set NDC mode on if isNDC = kTRUE, off otherwise.Definition TText.cxx:823; TVirtualPadTVirtualPad is an abstract base class for the Pad and Canvas classes.Definition TVirtualPad.h:51; mTMarker mDefinition textangle.C:8; lTLine lDefinition textangle.C:4; ttauto * ttDefinition textangle.C:16; AuthorsPhilippe Gras, Bertrand Bellenot, Olivier Couet ; Definition in file timeonaxis3.C. tutorialsgraphstimeonaxis3.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/timeonaxis3_8C.html:5796,simpl,simple,5796,doc/master/timeonaxis3_8C.html,https://root.cern,https://root.cern/doc/master/timeonaxis3_8C.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"Class(). static TClass * TClonesArray::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TClonesArray::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TClonesArray::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 83 of file TClonesArray.h. ◆ Clear(). void TClonesArray::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear the clones array. ; Only use this routine when your objects don't allocate memory since it will not call the object dtors. However, if the class in the TClonesArray implements the function Clear(Option_t *option) and if option = ""C"" the function Clear() is called for all objects in the array. In the function Clear(), one can delete objects or dynamic arrays allocated in the class. This procedure is much faster than calling TClonesArray::Delete(). When the option starts with ""C+"", eg ""C+xyz"" the objects in the array are in turn cleared with the option ""xyz"" ; Implements TCollection.; Definition at line 420 of file TClonesArray.cxx. ◆ Compress(). void TClonesArray::Compress ; (; ). overridevirtual . Remove empty slots from array. ; Reimplemented from TObjArray.; Definition at line 332 of file TClonesArray.cxx. ◆ ConstructedAt() [1/2]. TObject * TClonesArray::ConstructedAt ; (; Int_t ; idx). Get an object at index 'idx' that is guaranteed to have been constructed. ; It might be either a freshly allocated object or one that had already been allocated (and assumingly used). In the later case, it is the callers responsibility to insure that the object is returned to a known state, usually by calling the Clear method on the TClonesArray.; Tests to see if the destructor has been called on the object. If so, or if the object has never been constructed the class constructor is called using New(). If not, return a pointer to the correct memory location. This explicitly to deal with TObject classes that al",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTClonesArray.html:33676,clear,cleared,33676,doc/master/classTClonesArray.html,https://root.cern,https://root.cern/doc/master/classTClonesArray.html,1,['clear'],['cleared']
Usability,Class(). static TClass * TRecCmdEvent::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRecCmdEvent::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRecCmdEvent::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 122 of file TRecorder.h. ◆ DeclFileName(). static const char * TRecCmdEvent::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 122 of file TRecorder.h. ◆ GetText(). const char * TRecCmdEvent::GetText ; (; ); const. inline . Definition at line 106 of file TRecorder.h. ◆ GetType(). ERecEventType TRecCmdEvent::GetType ; (; ); const. inlineoverridevirtual . Implements TRecEvent.; Definition at line 111 of file TRecorder.h. ◆ IsA(). TClass * TRecCmdEvent::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 122 of file TRecorder.h. ◆ ReplayEvent(). void TRecCmdEvent::ReplayEvent ; (; Bool_t ; ). inlineoverridevirtual . Implements TRecEvent.; Definition at line 116 of file TRecorder.h. ◆ SetText(). void TRecCmdEvent::SetText ; (; const char * ; text). inline . Definition at line 101 of file TRecorder.h. ◆ Streamer(). void TRecCmdEvent::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TRecCmdEvent::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 122 of file TRecorder.h. Member Data Documentation. ◆ fText. TString TRecCmdEvent::fText. private . Definition at line 94 of file TRecorder.h. Libraries for TRecCmdEvent:. [legend]; The documentation for this class was generated from the following file:; gui/recorder/inc/TRecorder.h. TRecCmdEvent. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:21 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRecCmdEvent.html:12997,Guid,Guide,12997,doc/master/classTRecCmdEvent.html,https://root.cern,https://root.cern/doc/master/classTRecCmdEvent.html,1,['Guid'],['Guide']
Usability,"Class*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLBoxPainter(const TGLBoxPainter&); virtual voidDeInitGL() const; voidDrawCloud() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tHasSections() const; virtual voidInitGL() const; TGLBoxPainter&operator=(const TGLBoxPainter&); voidSetPlotColor() const. Data Members; public:. enum EBoxType { kBox; kBox1; };; enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut; TGLPlotCamera*TGLPlotPainter::fCamera; TGLPlotCoordinates*TG",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLBoxPainter.html:1714,Clear,ClearBuffers,1714,root/html534/TGLBoxPainter.html,https://root.cern,https://root.cern/root/html534/TGLBoxPainter.html,1,['Clear'],['ClearBuffers']
Usability,"Class*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLLegoPainter(const TGLLegoPainter&); Bool_tClampZ(Double_t& zVal) const; virtual voidDeInitGL() const; voidDrawLegoCartesian() const; voidDrawLegoCylindrical() const; voidDrawLegoPolar() const; voidDrawLegoSpherical() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; Bool_tInitGeometryCartesian(); Bool_tInitGeometryCylindrical(); Bool_tInitGeometryPolar(); Bool_tInitGeometrySpherical(); virtual voidInitGL() const; TGLLegoPainter&operator=(const TGLLegoPainter&); Bool_tPreparePalette() const; voidSetLegoColor() const. Data Members; public:. enum ELegoType { kColorSimple; kColorLevel; kCylindricBars; };; e",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLLegoPainter.html:1660,Clear,ClearBuffers,1660,root/html534/TGLLegoPainter.html,https://root.cern,https://root.cern/root/html534/TGLLegoPainter.html,1,['Clear'],['ClearBuffers']
Usability,"Class*IsA() const; virtual voidTGLPlotPainter::Paint(); virtual voidPan(Int_t px, Int_t py); virtual Bool_tTGLPlotPainter::PlotSelected(Int_t px, Int_t py); virtual voidProcessEvent(Int_t event, Int_t px, Int_t py); const TGLPlotBox&TGLPlotPainter::RefBackBox() const; voidTGLPlotPainter::SetDrawAxes(Bool_t s); voidTGLPlotPainter::SetDrawBackBox(Bool_t b); voidTGLPlotPainter::SetDrawFrontBox(Bool_t b); virtual voidTGLPlotPainter::SetFrameColor(const TColor* frameColor); voidTGLPlotPainter::SetPadColor(const TColor* color); voidTGLPlotPainter::SetPhysicalShapeColor(const Float_t* rgba); virtual voidShowMembers(TMemberInspector&); virtual voidStartPan(Int_t px, Int_t py); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b). protected:. virtual voidTGLPlotPainter::ClearBuffers() const; voidTGLPlotPainter::DrawSections() const; const TColor*TGLPlotPainter::GetPadColor() const; voidTGLPlotPainter::MoveSection(Int_t px, Int_t py); voidTGLPlotPainter::PrintPlot() const; voidTGLPlotPainter::RestoreModelviewMatrix() const; voidTGLPlotPainter::RestoreProjectionMatrix() const; voidTGLPlotPainter::SaveModelviewMatrix() const; voidTGLPlotPainter::SaveProjectionMatrix() const. private:. TGLVoxelPainter(const TGLVoxelPainter&); virtual voidDeInitGL() const; voidDrawPalette() const; virtual voidDrawPaletteAxis() const; virtual voidDrawPlot() const; virtual voidDrawSectionXOY() const; virtual voidDrawSectionXOZ() const; virtual voidDrawSectionYOZ() const; voidFindVoxelColor(Double_t binContent, Float_t* rgba) const; Bool_tHasSections() const; virtual voidInitGL() const; TGLVoxelPainter&operator=(const TGLVoxelPainter&); voidPreparePalette() const; voidSetVoxelColor(const Float_t* rgba) const. Data Members; public:. enum TGLPlotPainter::ESelectionBase { kHighColorSelectionBase; kTrueColorSelectionBase; };; enum TGLPlotPainter::ECutAxisID { kXAxis; kYAxis; kZAxis; };. protected:. TGLPlotBoxTGLPlotPainter::fBackBox; TGLBoxCutTGLPlotPainter::fBoxCut",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TGLVoxelPainter.html:1643,Clear,ClearBuffers,1643,root/html534/TGLVoxelPainter.html,https://root.cern,https://root.cern/root/html534/TGLVoxelPainter.html,1,['Clear'],['ClearBuffers']
Usability,"Class, Int_t PdgCode, Int_t Anti = -1, Int_t TrackingCode = 0). Particle definition normal constructor. If the particle is set to be; stable, the decay width parameter does have no meaning and can be set to; any value. The parameters granularity, LowerCutOff and HighCutOff are; used for the construction of the mean free path look up tables. The; granularity will be the number of logwise energy points for which the; mean free path will be calculated. TParticlePDG* AddAntiParticle(const char* Name, Int_t PdgCode); assuming particle has already been defined. TParticlePDG * GetParticle(const char* name) const. Get a pointer to the particle object according to the name given. TParticlePDG * GetParticle(Int_t pdgCode) const. Get a pointer to the particle object according to the MC code number. void Print(Option_t* opt = """") const; Print contents of PDG database. Int_t ConvertGeant3ToPdg(Int_t Geant3Number); Converts Geant3 particle codes to PDG convention. (Geant4 uses; PDG convention already); Source: BaBar User Guide, Neil I. Geddes,. /*; see Conversion table; */. with some fixes by PB, marked with (PB) below. Checked against; PDG listings from 2000. Paul Balm, Nov 19, 2001. Int_t ConvertPdgToGeant3(Int_t pdgNumber); Converts pdg code to geant3 id. Int_t ConvertIsajetToPdg(Int_t isaNumber). Converts the ISAJET Particle number into the PDG MC number. void ReadPDGTable(const char* filename = """"); read list of particles from a file; if the particle list does not exist, it is created, otherwise; particles are added to the existing list; See $ROOTSYS/etc/pdg_table.txt to see the file format. void Browse(TBrowser* b); browse data base. Int_t WritePDGTable(const char* filename); write contents of the particle DB into a file. TDatabasePDG(const TDatabasePDG& db); { }. TDatabasePDG& operator=(const TDatabasePDG& db). TParticleClassPDG* GetParticleClass(const char* name). const THashList * ParticleList() const; { return fParticleList; }. Bool_t IsFolder() const; { return kTRUE; }.",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TDatabasePDG.html:8796,Guid,Guide,8796,root/html528/TDatabasePDG.html,https://root.cern,https://root.cern/root/html528/TDatabasePDG.html,3,['Guid'],['Guide']
Usability,"Class<std::array<T, N>>();; 410 Error(""Branch"",""std::array of objects not yet supported as top level branch object (the class is %s)"",; 411 arrCl ? arrCl->GetName() : cl->GetName());; 412 return nullptr;; 413 }; 414 return BranchImpArr(name, TDataType::GetType(typeid(T)), N, obj, bufsize, splitlevel);; 415 }; 416 virtual TBranch *Bronch(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 99);; 417 virtual TBranch *BranchOld(const char* name, const char* classname, void* addobj, Int_t bufsize = 32000, Int_t splitlevel = 1);; 418 virtual TBranch *BranchRef();; 419 void Browse(TBrowser*) override;; 420 virtual Int_t BuildIndex(const char *majorname, const char *minorname = ""0"");; 421 TStreamerInfo *BuildStreamerInfo(TClass* cl, void *pointer = nullptr, bool canOptimize = true);; 422 virtual TFile *ChangeFile(TFile* file);; 423 virtual TTree *CloneTree(Long64_t nentries = -1, Option_t* option = """");; 424 virtual void CopyAddresses(TTree*,bool undo = false);; 425 virtual Long64_t CopyEntries(TTree* tree, Long64_t nentries = -1, Option_t *option = """", bool needCopyAddresses = false);; 426 virtual TTree *CopyTree(const char* selection, Option_t* option = """", Long64_t nentries = kMaxEntries, Long64_t firstentry = 0);; 427 virtual TBasket *CreateBasket(TBranch*);; 428 virtual void DirectoryAutoAdd(TDirectory *);; 429 Int_t Debug() const { return fDebug; }; 430 void Delete(Option_t* option = """") override; // *MENU*; 431 void Draw(Option_t* opt) override { Draw(opt, """", """", kMaxEntries, 0); }; 432 virtual Long64_t Draw(const char* varexp, const TCut& selection, Option_t* option = """", Long64_t nentries = kMaxEntries, Long64_t firstentry = 0);; 433 virtual Long64_t Draw(const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = kMaxEntries, Long64_t firstentry = 0); // *MENU*; 434 virtual void DropBaskets();; 435 virtual void DropBuffers(Int_t nbytes);; 436 bool EnableCache();; 437 virtual Int_t Fill();; 438 ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTree_8h_source.html:21963,undo,undo,21963,doc/master/TTree_8h_source.html,https://root.cern,https://root.cern/doc/master/TTree_8h_source.html,1,['undo'],['undo']
Usability,"Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 175 of file TTreeCache.h. ◆ DeclFileName(). static const char * TTreeCache::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 175 of file TTreeCache.h. ◆ Disable(). virtual void TTreeCache::Disable ; (; ). inlinevirtual . Definition at line 136 of file TTreeCache.h. ◆ DropBranch() [1/2]. Int_t TTreeCache::DropBranch ; (; const char * ; bname, . bool ; subbranches = false . ). virtual . Remove a branch to the list of branches to be stored in the cache this is to be used by user (thats why we pass the name of the branch). ; It works in exactly the same way as TTree::SetBranchStatus so you probably want to look over there for details about the use of bname with regular expressions. The branches are taken with respect to the Owner of this TTreeCache (i.e. the original Tree) NB: if bname=""*"" all branches are put in the cache and the learning phase stopped Returns:; 0 branch dropped or not in cache; -1 on error . Definition at line 586 of file TTreeCache.cxx. ◆ DropBranch() [2/2]. Int_t TTreeCache::DropBranch ; (; TBranch * ; b, . bool ; subbranches = false . ). virtual . Remove a branch to the list of branches to be stored in the cache this function is called by TBranch::GetBasket. ; Returns:; 0 branch dropped or not in cache; -1 on error . Definition at line 541 of file TTreeCache.cxx. ◆ Enable(). virtual void TTreeCache::Enable ; (; ). inlinevirtual . Definition at line 137 of file TTreeCache.h. ◆ FillBuffer(). bool TTreeCache::FillBuffer ; (; ). virtual . Fill the cache buffer with the branches in the cache. ; Reimplemented in TTreeCacheUnzip.; Definition at line 1114 of file TTreeCache.cxx. ◆ FillMissCache(). bool TTreeCache::FillMissCache ; (; ). private . Fill the miss cache from the current set of active branches. . ◆ FindBranchBasketPos(). TTreeCache::IOPos TTreeCache::FindBranchBasketPos ; (; TBranch & ; b",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTreeCache.html:38520,learn,learning,38520,doc/master/classTTreeCache.html,https://root.cern,https://root.cern/doc/master/classTTreeCache.html,2,['learn'],['learning']
Usability,"Class_Version(). static constexpr Version_t RooStats::SamplingSummaryLookup::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 90 of file ConfidenceBelt.h. ◆ DeclFileName(). static const char * RooStats::SamplingSummaryLookup::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 90 of file ConfidenceBelt.h. ◆ GetConfidenceLevel(). double RooStats::SamplingSummaryLookup::GetConfidenceLevel ; (; Int_t ; index). inline . Definition at line 70 of file ConfidenceBelt.h. ◆ GetLeftSideTailFraction(). double RooStats::SamplingSummaryLookup::GetLeftSideTailFraction ; (; Int_t ; index). inline . Definition at line 78 of file ConfidenceBelt.h. ◆ GetLookupIndex(). Int_t RooStats::SamplingSummaryLookup::GetLookupIndex ; (; double ; cl, . double ; leftside . ). inline . Definition at line 49 of file ConfidenceBelt.h. ◆ IsA(). TClass * RooStats::SamplingSummaryLookup::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 90 of file ConfidenceBelt.h. ◆ Streamer(). void RooStats::SamplingSummaryLookup::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void RooStats::SamplingSummaryLookup::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 90 of file ConfidenceBelt.h. Member Data Documentation. ◆ fLookupTable. LookupTable RooStats::SamplingSummaryLookup::fLookupTable. private . map ( Index, ( CL, leftside tail prob) ) ; Definition at line 87 of file ConfidenceBelt.h. Libraries for RooStats::SamplingSummaryLookup:. [legend]; The documentation for this class was generated from the following file:; roofit/roostats/inc/RooStats/ConfidenceBelt.h. RooStatsSamplingSummaryLookup. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:56 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html:13345,Guid,Guide,13345,doc/master/classRooStats_1_1SamplingSummaryLookup.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingSummaryLookup.html,1,['Guid'],['Guide']
Usability,"Clear the content of the dataset cache, if any (matching 'dataset', if defined). ; Reimplemented in TProofLite.; Definition at line 10896 of file TProof.cxx. ◆ ClearFeedback(). void TProof::ClearFeedback ; (; ). Clear feedback list. ; Definition at line 10012 of file TProof.cxx. ◆ ClearInput(). void TProof::ClearInput ; (; ). Clear input object list. ; Definition at line 9742 of file TProof.cxx. ◆ ClearInputData() [1/2]. void TProof::ClearInputData ; (; const char * ; name). Remove obj 'name' form the input data list;. ; Definition at line 9572 of file TProof.cxx. ◆ ClearInputData() [2/2]. void TProof::ClearInputData ; (; TObject * ; obj = 0). Remove obj form the input data list; if obj is null (default), clear the input data info. ; Definition at line 9538 of file TProof.cxx. ◆ ClearPackage(). Int_t TProof::ClearPackage ; (; const char * ; package). Remove a specific package. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7857 of file TProof.cxx. ◆ ClearPackages(). Int_t TProof::ClearPackages ; (; ). Remove all packages. ; Returns 0 in case of success and -1 in case of error. ; Definition at line 7840 of file TProof.cxx. ◆ Close(). void TProof::Close ; (; Option_t * ; opt = """"). Close all open slave servers. ; Client can decide to shutdown the remote session by passing option is 'S' or 's'. Default for clients is detach, if supported. Masters always shutdown the remote counterpart. ; Definition at line 1798 of file TProof.cxx. ◆ CloseProgressDialog(). void TProof::CloseProgressDialog ; (; ). Close progress dialog. ; Definition at line 9283 of file TProof.cxx. ◆ Collect() [1/4]. Int_t TProof::Collect ; (; const TSlave * ; sl, . Long_t ; timeout = -1, . Int_t ; endtype = -1, . Bool_t ; deactonfail = kFALSE . ). private . Collect responses from slave sl. ; Returns the number of slaves that responded (=1). If timeout >= 0, wait at most timeout seconds (timeout = -1 by default, which means wait forever). If defined (>= 0) endtype is the mess",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProof.html:76288,Clear,ClearPackages,76288,doc/master/classTProof.html,https://root.cern,https://root.cern/doc/master/classTProof.html,1,['Clear'],['ClearPackages']
Usability,"ClearAll() const; clear cached pdf objects (posterior pdf, Likelihood, NLL, etc.). void SetModel(const RooStats::ModelConfig& model); set the model configuration. RooArgSet* GetMode(RooArgSet* parameters) const; return the mode (not yet implemented) but can be easly obtained from; GetPosteriorPdf()->asTF(poi)->GetMaximumX();. RooAbsPdf* GetPosteriorPdf() const; get the posterior pdf as a RooAbsPdf; the posterior is obtained from the product of the likelihood function and the; prior pdf which is then intergated in the nuisance parameters (if existing).; A prior function for the nuisance can be specified either in the prior pdf object; or in the model itself. If no prior nuisance is specified, but prior parameters are then; the integration is performed assuming a flat prior for the nuisance parameters. RooPlot* GetPosteriorPlot() const; return a RooPlot with the posterior PDF and the credibility region. SimpleInterval* GetInterval() const; returns a SimpleInterval with the lower/upper limit on; the scanned variable (the parameter of interest specified in the constructor).; The returned interval is a central interval with the confidence level specified; previously in SetConfidenceLevel (default is 0.95).; NOTE1: for finding only an upper/lower limit of 95 % the CL must be set to 0.90; NOTE2: The method can result very slow when nuisance parameters are present due to; the time needed for performing multi-dimensional numerical integration.; In these case using the MCMCCalculator could be more convenient. BayesianCalculator(); constructor. void SetData(RooAbsData& data); { fData = &data; }. void SetTestSize(Double_t size); set the size of the test (rate of Type I error) ( Eg. 0.05 for a 95% Confidence Interval). void SetConfidenceLevel(Double_t cl); set the confidence level for the interval (eg. 0.95 for a 95% Confidence Interval). { SetTestSize(1.-cl); }. Double_t Size() const; Get the size of the test (eg. rate of Type I error). { return fSize; }. Double_t ConfidenceLev",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooStats__BayesianCalculator.html:9397,Simpl,SimpleInterval,9397,root/html526/RooStats__BayesianCalculator.html,https://root.cern,https://root.cern/root/html526/RooStats__BayesianCalculator.html,2,['Simpl'],['SimpleInterval']
Usability,"Closed=true, bool highClosed=false) const;  numerical integral in these limits including error estimation ;  ; double InverseCDF (double pvalue);  get the inverse of the Cumulative distribution function ;  ; double InverseCDF (double pvalue, double sigmaVariaton, double &inverseVariation);  get the inverse of the Cumulative distribution function together with the inverse based on sampling variation ;  ; double InverseCDFInterpolate (double pvalue);  get the inverse of the Cumulative distribution function ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html:3281,Clear,Clear,3281,doc/master/classRooStats_1_1SamplingDistribution.html,https://root.cern,https://root.cern/doc/master/classRooStats_1_1SamplingDistribution.html,1,['Clear'],['Clear']
Usability,"CmdArg&, const RooCmdArg&, const RooCmdArg&,...Definition RooAbsReal.cxx:3706; RooAbsReal::createIntegralRooFit::OwningPtr< RooAbsReal > createIntegral(const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) constCreate integral over observables in iset in range named rangeName using specified configuration for a...Definition RooAbsReal.h:220; RooAbsReal::_specIntegratorConfigstd::unique_ptr< RooNumIntConfig > _specIntegratorConfigDefinition RooAbsReal.h:540; RooAbsReal::getAnalyticalIntegralvirtual Int_t getAnalyticalIntegral(RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) constInterface function getAnalyticalIntergral advertises the analytical integrals that are supported.Definition RooAbsReal.cxx:368; RooAbsReal::evalErrorIterstatic std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter()Definition RooAbsReal.cxx:181; RooAbsReal::numEvalErrorsstatic Int_t numEvalErrors()Return the number of logged evaluation errors since the last clearing.Definition RooAbsReal.cxx:3624; RooAbsReal::setEvalErrorLoggingModestatic void setEvalErrorLoggingMode(ErrorLoggingMode m)Set evaluation error logging mode.Definition RooAbsReal.cxx:4316; RooAbsReal::_plotMaxdouble _plotMaxMaximum of plot range.Definition RooAbsReal.h:534; RooAbsReal::preferredObservableScanOrdervirtual void preferredObservableScanOrder(const RooArgSet &obs, RooArgSet &orderedObs) constInterface method for function objects to indicate their preferred order of observables for scanning t...Definition RooAbsReal.cxx:3694; RooAbsReal::maxValvirtual double maxVal(Int_t code) constReturn maximum value for set of observables identified by code assigned in getMaxVal.Definition RooAbsReal.cxx:3397; RooAbsReal::findInnerMostIntegrationvoid findInnerMostIntegration(const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) constUtility function for createIntObj() that aids in the construct of recursive in",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsReal_8h_source.html:48482,clear,clearing,48482,doc/master/RooAbsReal_8h_source.html,https://root.cern,https://root.cern/doc/master/RooAbsReal_8h_source.html,1,['clear'],['clearing']
Usability,"Collect=kTRUE);  Add 'incpath' to the inc path search. ;  ; void AddInput (TObject *obj);  Add objects that might be needed during the processing of the selector (see Process()). ;  ; void AddInputData (TObject *obj, Bool_t push=kFALSE);  Add data objects that might be needed during the processing of the selector (see Process()). ;  ; Int_t Archive (const char *queryref, const char *url=0);  Send archive request for the query specified by ref. ;  ; Int_t Archive (Int_t query, const char *url);  Send archive request for the qry-th query in fQueries. ;  ; void Browse (TBrowser *b) override;  Build the PROOF's structure in the browser. ;  ; void cd (Int_t id=-1);  Set session with 'id' the default one. ;  ; Int_t CleanupSession (const char *sessiontag);  Send cleanup request for the session specified by tag. ;  ; void ClearData (UInt_t what=kUnregistered, const char *dsname=0);  Remove files for the data directory. ;  ; void ClearFeedback ();  Clear feedback list. ;  ; void ClearInput ();  Clear input object list. ;  ; void ClearInputData (const char *name);  Remove obj 'name' form the input data list;. ;  ; void ClearInputData (TObject *obj=0);  Remove obj form the input data list; if obj is null (default), clear the input data info. ;  ; Int_t ClearPackage (const char *package);  Remove a specific package. ;  ; Int_t ClearPackages ();  Remove all packages. ;  ; void Close (Option_t *option="""");  Close all open slave servers. ;  ; void CloseProgressDialog ();  Close progress dialog. ;  ; TDrawFeedback * CreateDrawFeedback ();  Draw feedback creation proxy. ;  ; void DataSetStatus (const char *msg, Bool_t status, Int_t done, Int_t total);  Send dataset preparation status. ;  ; Int_t DeactivateWorker (const char *ord, Bool_t save=kTRUE);  Remove the worker identified by the ordinal number 'ord' from the the active list. ;  ; void DeleteDrawFeedback (TDrawFeedback *f);  Delete draw feedback object. ;  ; void DeleteParameters (const char *wildcard);  Delete the input list ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofLite.html:7410,Clear,ClearInput,7410,doc/master/classTProofLite.html,https://root.cern,https://root.cern/doc/master/classTProofLite.html,2,['Clear'],"['Clear', 'ClearInput']"
Usability,"Collection ();  ; virtual void Changed ();  ;  Protected Member Functions inherited from TCollection;  TCollection ();  ; virtual const char * GetCollectionEntryName (TObject *entry) const;  For given collection entry return the string that is used to identify the object and, potentially, perform wildcard/regexp filtering on. ;  ; virtual void PrintCollectionEntry (TObject *entry, Option_t *option, Int_t recurse) const;  Print the collection entry. ;  ; virtual void PrintCollectionHeader (Option_t *option) const;  Print the collection header. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TList; Bool_t fAscending;  cache to speedup sequential calling of Before() and After() functions ;  ; TObjLinkWeakPtr_t fCache;  pointer to last entry in linked list ;  ; TObjLinkPtr_t fFirst;  ; TObjLinkPtr_t fLast;  pointer to first entry in linked list ;  ;  Protected Attributes inherited from TSeqCollection; Bool_t fSorted;  ;  Protected Attributes inherited from TCollection; TString fName;  ; Int_t fSize;  . Inheritance diagram for TRootBrowserHistory:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Function Documentation. ◆ DeleteItem(). void TRootBrowserHistory::DeleteItem ; (; TGListTreeItem * ; item). inline . Definition at line 207 of file TRootBrowserLite.cxx. ◆ RecursiveRemove(). void TRootBrowserHistory::RecursiveRemove ; (; TObject * ; obj). inlineoverridevirtual . Remove object from this collection and recursively remove the object from all other objects (and collections). ; Reimplemented from TList.; Definition at line 194 of file TRootBrowserLite.cxx. gui/gui/src/TRootBrowserLite.cxx. TRootBrowserHistory. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:23 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRootBrowserHistory.html:19888,Guid,Guide,19888,doc/master/classTRootBrowserHistory.html,https://root.cern,https://root.cern/doc/master/classTRootBrowserHistory.html,1,['Guid'],['Guide']
Usability,"CollectionProxy& copy); Copy constructor. TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); Initializing constructor. TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). virtual ~TGenCollectionProxy(); Standard destructor. TClass * GetCollectionClass(); Return a pointer to the TClass representing the container. Int_t GetCollectionType(); Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement(); Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objstart); Push new proxy environment. void PopProxy(); Pop old proxy environment. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass(); Return a pointer to the TClass representing the content. void SetValueClass(TClass* newcl); Set pointer to the TClass representing the content. EDataType GetType(); If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete); Block allocation of containees. void Commit(void* env); Block commit of containees. void operator()(TBuffer& refBuffer, void* pObject); TClassStreamer I/O overload. void ReadBuffer(TBuffer& b, void* obj); Routine to read the content of the buffer into 'obj'. void ReadBuffer(TBuffer& b, void* obj, const TClass* onfileClass). void SetOnFileClass(TClass* cl); { fOnFileClass = cl; }. TClass* GetOnFileClass() const; { return fOnFileClass; }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseActions(). CreateIterators_t GetFunctionCreateIterators(Bool_",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TGenCollectionProxy.html:7461,simpl,simple,7461,root/html530/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html530/TGenCollectionProxy.html,2,['simpl'],['simple']
Usability,"CollectionProxy& copy); Copy constructor. TGenCollectionProxy(TGenCollectionProxy::Info_t typ, size_t iter_size); Initializing constructor. TGenCollectionProxy(const ROOT::TCollectionProxyInfo& info, TClass* cl). virtual ~TGenCollectionProxy(); Standard destructor. TClass * GetCollectionClass(); Return a pointer to the TClass representing the container. Int_t GetCollectionType(); Return the type of collection see TClassEdit::ESTLType. ULong_t GetIncrement(); Return the offset between two consecutive value_types (memory layout). UInt_t Sizeof() const; Return the sizeof the collection object. void PushProxy(void* objstart); Push new proxy environment. void PopProxy(); Pop old proxy environment. Bool_t HasPointers() const; Return true if the content is of type 'pointer to'. TClass * GetValueClass(); Return a pointer to the TClass representing the content. void SetValueClass(TClass* newcl); Set pointer to the TClass representing the content. EDataType GetType(); If the content is a simple numerical value, return its type (see TDataType). void * At(UInt_t idx); Return the address of the value at index 'idx'. void Clear(const char* opt = """"); Clear the container. UInt_t Size() const; Return the current size of the container. void* Allocate(UInt_t n, Bool_t forceDelete); Block allocation of containees. void Commit(void* env); Block commit of containees. void operator()(TBuffer& refBuffer, void* pObject); TClassStreamer I/O overload. void ReadBuffer(TBuffer& b, void* obj); Routine to read the content of the buffer into 'obj'. void ReadBuffer(TBuffer& b, void* obj, const TClass* onfileClass). void SetOnFileClass(TClass* cl); { fOnFileClass = cl; }. TClass* GetOnFileClass() const; { return fOnFileClass; }. TStreamerInfoActions::TActionSequence * GetConversionReadMemberWiseActions(TClass* oldClass, Int_t version); MemberWise actions. TStreamerInfoActions::TActionSequence * GetReadMemberWiseActions(Int_t version). TStreamerInfoActions::TActionSequence * GetWriteMemberWiseAction",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGenCollectionProxy.html:7441,simpl,simple,7441,root/html528/TGenCollectionProxy.html,https://root.cern,https://root.cern/root/html528/TGenCollectionProxy.html,1,['simpl'],['simple']
Usability,"CollectionProxy.h. Member Function Documentation. ◆ Allocate(). virtual void * TVirtualCollectionProxy::Allocate ; (; UInt_t ; n, . Bool_t ; forceDelete . ). pure virtual . Allocates space for storing at least n elements. ; This function returns a pointer to the actual object on which insertions should take place. For associative collections, this function returns a pointer to a temporary buffer known as the staging area. If the insertion happened in a staging area (i.e. the returned pointer != proxied object), Commit() should be called on the value returned by this function. ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ At(). virtual void * TVirtualCollectionProxy::At ; (; UInt_t ; idx). pure virtual . Return the address of the value at index idx ; Implemented in TEmulatedCollectionProxy, TEmulatedMapProxy, TGenCollectionProxy, TGenVectorProxy, TGenVectorBoolProxy, TGenBitsetProxy, TGenListProxy, and TGenSetProxy. ◆ Clear(). virtual void TVirtualCollectionProxy::Clear ; (; const char * ; opt = """"). pure virtual . Clear the container. ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ Commit(). virtual void TVirtualCollectionProxy::Commit ; (; void * ; ). pure virtual . Commits pending elements in a staging area (see Allocate() for more information). ; Implemented in TEmulatedCollectionProxy, and TGenCollectionProxy. ◆ DeleteArray(). virtual void TVirtualCollectionProxy::DeleteArray ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. inlinevirtual . Execute the container array destructor. ; Reimplemented in TEmulatedCollectionProxy.; Definition at line 151 of file TVirtualCollectionProxy.h. ◆ Destructor(). virtual void TVirtualCollectionProxy::Destructor ; (; void * ; p, . Bool_t ; dtorOnly = kFALSE . ); const. inlinevirtual . Execute the container destructor. ; Reimplemented in TEmulatedCollectionProxy.; Definition at line 144 of file TVirtualCollectionProxy.h. ◆ Generate(). virtual TVirtualCollectionProxy * TVirtualC",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualCollectionProxy.html:12129,Clear,Clear,12129,doc/master/classTVirtualCollectionProxy.html,https://root.cern,https://root.cern/doc/master/classTVirtualCollectionProxy.html,1,['Clear'],['Clear']
Usability,"ColorGradient: public TColor. TColorGradient. TColorGradient extends basic TColor.; Actually, this is not a simple color, but linear gradient + shadow; for filled area. By inheriting from TColor, gradients can be placed; inside gROOT's list of colors and use it in all TAttXXX descendants; without modifying any existing code.; Shadow, of course, is not a property of any color, and gradient is; not, but this is the best way to add new attributes to filled area; without re-writing all the graphics code. Function Members (Methods); public:. virtual~TColorGradient(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); const char*TColor::AsHexString() const; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTColor::Copy(TObject& color) const; static voidTColor::CreateColorsCircle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorsGray(); static voidTColor::CreateColorsRectangle(Int_t offset, const char* name, UChar_t* rgb); static voidTColor::CreateColorWheel(); static Int_tTColor::CreateGradientColorTable(UInt_t Number, Double_t* Stops, Double_t* Red, Double_t* Green, Double_t* Blue, UInt_t NColors, Float_t alpha = 1.); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TColorGradient.html:1123,Clear,Clear,1123,root/html602/TColorGradient.html,https://root.cern,https://root.cern/root/html602/TColorGradient.html,2,['Clear'],['Clear']
Usability,"Color_t lcolor); Set the line color. void SetLineStyle(Style_t lstyle); Set the line style. void SetLineWidth(Width_t lwidth); Set the line width. TGeoNode * GetNode(const char* name) const; get the pointer to a daughter node. Int_t GetByteCount() const; get the total size in bytes for this volume. void FindOverlaps() const; loop all nodes marked as overlaps and find overlaping brothers. void RemoveNode(TGeoNode* node); Remove an existing daughter. TGeoNode * ReplaceNode(TGeoNode* nodeorig, TGeoShape* newshape = 0, TGeoMatrix* newpos = 0, TGeoMedium* newmed = 0); Replace an existing daughter with a new volume having the same name but; possibly a new shape, position or medium. Not allowed for positioned assemblies.; For division cells, the new shape/matrix are ignored. void SelectVolume(Bool_t clear = kFALSE); Select this volume as matching an arbitrary criteria. The volume is added to; a static list and the flag TGeoVolume::kVolumeSelected is set. All flags need; to be reset at the end by calling the method with CLEAR=true. This will also clear; the list. void SetVisibility(Bool_t vis = kTRUE); set visibility of this volume. void SetVisContainers(Bool_t flag = kTRUE); Set visibility for containers. void SetVisLeaves(Bool_t flag = kTRUE); Set visibility for leaves. void SetVisOnly(Bool_t flag = kTRUE); Set visibility for leaves. Bool_t Valid() const; Check if the shape of this volume is valid. Bool_t FindMatrixOfDaughterVolume(TGeoVolume* vol) const; Find a daughter node having VOL as volume and fill TGeoManager::fHMatrix; with its global matrix. void VisibleDaughters(Bool_t vis = kTRUE); set visibility for daughters. void Voxelize(Option_t* option); build the voxels for this volume. Double_t Weight(Double_t precision = 0.01, Option_t* option = ""va""); Estimate the weight of a volume (in kg) with SIGMA(M)/M better than PRECISION.; Option can contain : v - verbose, a - analytical (default). Double_t WeightA() const; Analytical computation of the weight. Int_t GetNdaugh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoVolume.html:30879,CLEAR,CLEAR,30879,root/html528/TGeoVolume.html,https://root.cern,https://root.cern/root/html528/TGeoVolume.html,6,['CLEAR'],['CLEAR']
Usability,"Color_t)""; ""SetFillColor(Color_t)"");; TQCommandThe Command design pattern is based on the idea, that all editing in an application is done by creati...Definition TQCommand.h:27. 1st parameter - the name of class; 2nd parameter - object; 3rd parameter - the name of do/redo method; 4th parameter - the name of undo method Since redo,undo methods are the same, undo name can be omitted, e.g. TQCommand *com = new TQCommand(""TH1"", hpx, ""SetFillColor(Color_t)"");; For objects derived from TObject class name can be omitted, e.g. TQCommand *com = new TQCommand(hpx, ""SetFillColor(Color_t)"");. Setting undo, redo parameters. Color_t old_color = hpx->GetFillColor();; Color_t new_color = 4; // blue color; ; com->SetRedoArgs(1, new_color);; com->SetUndoArgs(1, old_color);; Color_tshort Color_tDefinition RtypesCore.h:85; TQCommand::SetRedoArgsvirtual void SetRedoArgs(Int_t nargs,...)Set redo parameters.Definition TQCommand.cxx:508; TQCommand::SetUndoArgsvirtual void SetUndoArgs(Int_t nargs,...)Set undo parameters.Definition TQCommand.cxx:542; 1st argument - the number of undo, redo parameters the other arguments - undo, redo values Since the number of undo,redo parameters is the same one can use com->SetArgs(1, new_color, old_color);; TQCommand::SetArgsvirtual void SetArgs(Int_t nargs,...)Set do/redo and undo parameters.Definition TQCommand.cxx:465. Undo, redo method execution com->Redo(); // execute redo method; com->Undo(); // execute undo method; TQCommand::Undovirtual void Undo(Option_t *option="""")Un-execute all merged commands and the command.Definition TQCommand.cxx:626; TQCommand::Redovirtual void Redo(Option_t *option="""")Execute command and then merge commands.Definition TQCommand.cxx:588. Merged commands It possible to group several commands together so an end user can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1,",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:2180,undo,undo,2180,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"Color_tshort Color_tDefinition RtypesCore.h:85; TQCommand::SetRedoArgsvirtual void SetRedoArgs(Int_t nargs,...)Set redo parameters.Definition TQCommand.cxx:508; TQCommand::SetUndoArgsvirtual void SetUndoArgs(Int_t nargs,...)Set undo parameters.Definition TQCommand.cxx:542; 1st argument - the number of undo, redo parameters the other arguments - undo, redo values Since the number of undo,redo parameters is the same one can use com->SetArgs(1, new_color, old_color);; TQCommand::SetArgsvirtual void SetArgs(Int_t nargs,...)Set do/redo and undo parameters.Definition TQCommand.cxx:465. Undo, redo method execution com->Redo(); // execute redo method; com->Undo(); // execute undo method; TQCommand::Undovirtual void Undo(Option_t *option="""")Un-execute all merged commands and the command.Definition TQCommand.cxx:626; TQCommand::Redovirtual void Redo(Option_t *option="""")Execute command and then merge commands.Definition TQCommand.cxx:588. Merged commands It possible to group several commands together so an end user can undo and redo them with one command. TQCommand *update = new TQCommand(gPad, ""Modified()"");; com->Add(update);; updatestatic void update(gsl_integration_workspace *workspace, double a1, double b1, double area1, double error1, double a2, double b2, double area2, double error2)Definition RooAdaptiveGaussKronrodIntegrator1D.cxx:633; gPad#define gPadDefinition TVirtualPad.h:308; TQCommand::Addvoid Add(TObject *obj, Option_t *opt) overrideAdd command to the list of merged commands.Definition TQCommand.cxx:360. Macro commands ""Merging"" allows to create macro commands, e.g. TQCommand *macro = new TQCommand(""my macro"");; macro->Add(com1);; macro->Add(com2);; ...; During Redo operation commands composing macro command are executed sequentially in direct order (first in first out). During Undo, they are executed in reverse order (last in first out).; Undo manager. TQUndoManager is recorder of undo and redo operations. This is command history list which can be traversed bac",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQCommand.html:2976,undo,undo,2976,doc/master/classTQCommand.html,https://root.cern,https://root.cern/doc/master/classTQCommand.html,1,['undo'],['undo']
Usability,"Command encapsulates the information for undo/redo a single action.; TQConnection Internal class used in the object communication mechanism; TQMimeTypes Pool of mime type objects; TQObjSender Used to ""delegate"" TQObject functionality; TQObject Base class for object communication mechanism; TQRootApplication creates Qt environment interface with the ROOT windowing system; TQRootCanvas interface to Qt eventloop to handle user input; TQRootDialog prompt for the arguments of an object's member function; TQRootGuiFactory Qt ROOT Gui factory; TQUndoManager recorder of operations for undo and redo; TQpDataBase Qp Base Data class; TQpDataDens Qp Data class for Dens formulation; TQpDataSparse Qp Data class for Sparse formulation; TQpLinSolverBase Qp linear solver base class; TQpLinSolverDens Qp linear solver class for Dens formulation; TQpLinSolverSparse Qp linear solver class for Sparse formulation; TQpProbBase Qp problem formulation base class; TQpProbDens Qp dens problem formulation class; TQpProbSparse Qp sparse problem formulation class; TQpResidual Qp Residual class; TQpSolverBase Qp Solver class; TQpVar Qp Variables class; TQtApplication Instantiate the Qt system within ROOT environment; TQtBrush create QBrush object based on the ROOT ""fill"" attributes ; TQtClientFilter Map Qt and ROOT event; TQtClientWidget QFrame implementation backing ROOT TGWindow objects; TQtMarker Convert ROOT TMarker objects on to QPointArray; TQtPadFont < Create Qt QFont object based on ROOT TAttText attributes; TQtRootSlot ; TQtTimer QTimer to awake the ROOT event loop from Qt event loop; TQtWidget QWidget to back ROOT TCanvas (Can be used with Qt designer); TQuaternion a quaternion class; TQueryDescription Query description; TQueryResult Class describing a query; TQueryResultManager PROOF query result manager; TROOT Top level (or root) structure for all classes; TRWLock Reader/writer lock; TRadialGradient Radial gradient fill.; TRandom Simple Random number generator (periodicity = 10**9); TRa",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ClassIndex.html:125411,undo,undo,125411,root/html534/ClassIndex.html,https://root.cern,https://root.cern/root/html534/ClassIndex.html,1,['undo'],['undo']
Usability,"Command.cxx. ◆ Redo(). void TQUndoManager::Redo ; (; Option_t * ; option = """"). overridevirtual . Performs redo action. Move cursor position forward in history stack. ; Reimplemented from TQCommand.; Definition at line 1053 of file TQCommand.cxx. ◆ SetLimit(). void TQUndoManager::SetLimit ; (; UInt_t ; limit). virtual . Returns a maximum number of commands which could be located in stack. ; Definition at line 1137 of file TQCommand.cxx. ◆ SetLogging(). void TQUndoManager::SetLogging ; (; Bool_t ; on = kTRUE). virtual . Start logging. ; Delete all previous log records Note: logging is not implemented yet ; Definition at line 938 of file TQCommand.cxx. ◆ Streamer(). void TQUndoManager::Streamer ; (; TBuffer & ; b). overridevirtual . Stream all objects in the collection to or from the I/O buffer. ; Reimplemented from TQCommand. ◆ StreamerNVirtual(). void TQUndoManager::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 133 of file TQCommand.h. ◆ Undo(). void TQUndoManager::Undo ; (; Option_t * ; option = """"). overridevirtual . Performs undo action. Move cursor position backward in history stack. ; Reimplemented from TQCommand.; Definition at line 1021 of file TQCommand.cxx. Member Data Documentation. ◆ fCurrent. TQCommand* TQUndoManager::fCurrent. protected . Definition at line 107 of file TQCommand.h. ◆ fCursor. TObjLink* TQUndoManager::fCursor. protected . Definition at line 106 of file TQCommand.h. ◆ fLimit. UInt_t TQUndoManager::fLimit. protected . Definition at line 108 of file TQCommand.h. ◆ fLogBook. TList* TQUndoManager::fLogBook. protected . Definition at line 109 of file TQCommand.h. ◆ fLogging. Bool_t TQUndoManager::fLogging. protected . Definition at line 110 of file TQCommand.h. Libraries for TQUndoManager:. [legend]; The documentation for this class was generated from the following files:; core/base/inc/TQCommand.h; core/base/src/TQCommand.cxx. TQUndoManager. ROOT master - Reference Guide Generated on Tue Nov 5 202",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQUndoManager.html:32916,Undo,Undo,32916,doc/master/classTQUndoManager.html,https://root.cern,https://root.cern/doc/master/classTQUndoManager.html,1,['Undo'],['Undo']
Usability,"CompOpt == 0);; 3001 ; 3002 ; 3003 Int_t ndata = fElements->GetEntriesFast();; 3004 ; 3005 ; 3006 if (fReadObjectWise) fReadObjectWise->fActions.clear();; 3007 else fReadObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3008 ; 3009 if (fWriteObjectWise) fWriteObjectWise->fActions.clear();; 3010 else fWriteObjectWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3011 ; 3012 if (fReadMemberWise) fReadMemberWise->fActions.clear();; 3013 else fReadMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3014 ; 3015 if (fReadText) fReadText->fActions.clear();; 3016 else fReadText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3017 ; 3018 if (fWriteMemberWise) fWriteMemberWise->fActions.clear();; 3019 else fWriteMemberWise = new TStreamerInfoActions::TActionSequence(this,ndata);; 3020 ; 3021 if (fReadMemberWiseVecPtr) fReadMemberWiseVecPtr->fActions.clear();; 3022 else fReadMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3023 ; 3024 if (fWriteMemberWiseVecPtr) fWriteMemberWiseVecPtr->fActions.clear();; 3025 else fWriteMemberWiseVecPtr = new TStreamerInfoActions::TActionSequence(this, ndata, kTRUE);; 3026 ; 3027 if (fWriteText) fWriteText->fActions.clear();; 3028 else fWriteText = new TStreamerInfoActions::TActionSequence(this,ndata);; 3029 ; 3030 if (!ndata) {; 3031 // This may be the case for empty classes (e.g., TAtt3D).; 3032 // We still need to properly set the size of emulated classes (i.e. add the virtual table); 3033 if (fClass->GetState() == TClass::kEmulated && fNVirtualInfoLoc!=0) {; 3034 fSize = sizeof(TStreamerInfo*);; 3035 }; 3036 fComp = new TCompInfo[1];; 3037 fCompFull = new TCompInfo*[1];; 3038 fCompOpt = new TCompInfo*[1];; 3039 fCompOpt[0] = fCompFull[0] = &(fComp[0]);; 3040 SetIsCompiled();; 3041 return;; 3042 }; 3043 ; 3044 // At most half of the elements can be used to hold optimized versions.; 3045 // We use the bottom to hold the optimized-into elements and the ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html:132386,clear,clear,132386,doc/master/TStreamerInfoActions_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TStreamerInfoActions_8cxx_source.html,1,['clear'],['clear']
Usability,"CompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTGLVContainer::AddItem(TGLVEntry* item); virtual voidAddThisItem(TTVLVEntry* item); virtual voidTGContainer::AdjustPosition(); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual voidTGContainer::Associate(const TGWindow* w); static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual voidTGContainer::ClearViewPort(); virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn)SIGNAL ; virtual voidTGContainer::Clicked(TGFrame* f, Int_t btn, Int_t x, Int_t y)SIGNAL ; virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGContainer::CurrentChanged(TGFrame* f)SIGNAL ; virtual voidTGContainer::CurrentChanged(Int_t x, Int_t y)SIGNAL ; const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html530/TTVLVContainer.html:1645,Clear,ClearViewPort,1645,root/html530/TTVLVContainer.html,https://root.cern,https://root.cern/root/html530/TTVLVContainer.html,5,['Clear'],['ClearViewPort']
Usability,"Conf Interval : to plot the confidence interval of the fitted function as a filled coloured band around its central value. One can select the desired confidence level for the band to be plotted. 5.6.5 Print Options; This set of options specifies the amount of feedback printed on the root command line after performed fits.; ‘Verbose’ - prints fit results after each iteration.; ‘Quiet’ - no fit information is printed.; ‘Default’ - between Verbose and Quiet.; 5.6.6 Command Buttons; Fit button - performs a fit taking different option settings via the Fit Panel interface.; Reset - sets the GUI elements and related fit settings to the default ones.; Close - closes the Fit panel window.; 5.6.7 Minimization Options; With this tab one can select specific options for minimization. These include. The minimizer library ( Minuit, Minuit2, Fumili, GSL, Genetics ); The method (algorithm) for minimization. For example for Minuit one can choose between (Migrad, Simplex or Scan); Error definition; Minimization tolerance; Number of iterations/function calls; Print Level: (Default, Verbose or Quiet). 5.7 New ROOT::Fit classes; The fitting of the data objects in ROOT, histograms, graphs and tree is performed via some common classes, which are defined in the ROOT::Fit namespace. These classes can be classified in the following groups:. User classes driving the fit: ROOT::Fit::Fitter for executing the fit, ROOT::Fit::FitConfig for configuring the fit, ROOT::Fit::ParameterSettings to define the properties of the fit parameters (initial values, bounds, etc..), ROOT::Fit::FitResult for storing the result of the fit.; Data classes containing the data sets used in the fitting. These classes are theROOT::Fit::BinDatafor describing bin data sets, thus data points containing both coordinates and a corresponding value/weight with optionally an error on the value or the coordinate and the ROOT::Fit::UnBinData for un-binned data sets, which consists only of a vector of coordinate values. The coordin",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:188079,Simpl,Simplex,188079,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['Simpl'],['Simplex']
Usability,"ConfigParameters::GetSigEffAtBkgEff ; (; Double_t ; bkgEff = 0.1). private . calculate the signal efficiency for a given background efficiency ; Definition at line 509 of file OptimizeConfigParameters.cxx. ◆ IsA(). virtual TClass * TMVA::OptimizeConfigParameters::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::IFitterTarget.; Definition at line 100 of file OptimizeConfigParameters.h. ◆ Log(). MsgLogger & TMVA::OptimizeConfigParameters::Log ; (; ); const. inlineprivate . Definition at line 98 of file OptimizeConfigParameters.h. ◆ optimize(). std::map< TString, Double_t > TMVA::OptimizeConfigParameters::optimize ; (; ). Definition at line 127 of file OptimizeConfigParameters.cxx. ◆ optimizeFit(). void TMVA::OptimizeConfigParameters::optimizeFit ; (; ). private . Definition at line 242 of file OptimizeConfigParameters.cxx. ◆ optimizeScan(). void TMVA::OptimizeConfigParameters::optimizeScan ; (; ). private . do the actual optimization using a simple scan method, i.e. ; calculate the FOM for different tuning paraemters and remember which one is gave the best FOM ; Definition at line 164 of file OptimizeConfigParameters.cxx. ◆ Streamer(). virtual void TMVA::OptimizeConfigParameters::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::IFitterTarget. ◆ StreamerNVirtual(). void TMVA::OptimizeConfigParameters::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 100 of file OptimizeConfigParameters.h. Member Data Documentation. ◆ fAlreadyTrainedParCombination. std::map< std::vector<Double_t> , Double_t> TMVA::OptimizeConfigParameters::fAlreadyTrainedParCombination. private . save parameters for which the FOM is already known (GA seems to evaluate the same parameters several times) ; Definition at line 86 of file OptimizeConfigParameters.h. ◆ fFOMType. TString TMVA::OptimizeConfigParameters::fFOMType. private . the FOM type (Separation, ROC integra.. whatever you implemente",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html:9596,simpl,simple,9596,doc/master/classTMVA_1_1OptimizeConfigParameters.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1OptimizeConfigParameters.html,1,['simpl'],['simple']
Usability,Container >::nextChecked ; (; ). inlineprivate . Definition at line 172 of file RooLinkedListIter.h. ◆ operator!=(). template<class STLContainer > . bool TIteratorToSTLInterface< STLContainer >::operator!= ; (; const TIterator & ; ); const. inlineoverridevirtual . Compare two iterator objects. ; For backward compatibility reasons we have to provide this default implementation. ; Reimplemented from TIterator.; Definition at line 146 of file RooLinkedListIter.h. ◆ operator*(). template<class STLContainer > . TObject * TIteratorToSTLInterface< STLContainer >::operator* ; (; ); const. inlineoverridevirtual . Return current object or nullptr. ; For backward compatibility reasons we have to provide this default implementation. ; Reimplemented from TIterator.; Definition at line 153 of file RooLinkedListIter.h. ◆ operator=(). template<class STLContainer > . TIterator & TIteratorToSTLInterface< STLContainer >::operator= ; (; const TIterator & ; ). inlineoverridevirtual . Implements TIterator.; Definition at line 115 of file RooLinkedListIter.h. ◆ Reset(). template<class STLContainer > . void TIteratorToSTLInterface< STLContainer >::Reset ; (; ). inlineoverridevirtual . Implements TIterator.; Definition at line 138 of file RooLinkedListIter.h. Member Data Documentation. ◆ fCurrentElem. template<class STLContainer > . const RooAbsArg* TIteratorToSTLInterface< STLContainer >::fCurrentElem. private . ! ; Definition at line 186 of file RooLinkedListIter.h. ◆ fIndex. template<class STLContainer > . std::size_t TIteratorToSTLInterface< STLContainer >::fIndex. private . ! ; Definition at line 185 of file RooLinkedListIter.h. ◆ fSTLContainer. template<class STLContainer > . const STLContainer& TIteratorToSTLInterface< STLContainer >::fSTLContainer. private . ! ; Definition at line 184 of file RooLinkedListIter.h. roofit/roofitcore/inc/RooLinkedListIter.h. TIteratorToSTLInterface. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:52 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTIteratorToSTLInterface.html:6437,Guid,Guide,6437,doc/master/classTIteratorToSTLInterface.html,https://root.cern,https://root.cern/doc/master/classTIteratorToSTLInterface.html,1,['Guid'],['Guide']
Usability,"Container& layers, PassThrough& settingsAndBatch,; 1220 ItWeight itWeightBegin, ItWeight itWeightEnd,; 1221 ItGradient itGradientBegin, ItGradient itGradientEnd,; 1222 size_t trainFromLayer,; 1223 OutContainer& outputContainer, bool fetchOutput) const;; 1224 ; 1225 ; 1226 ; 1227 double E ();; 1228 void dE ();; 1229 ; 1230 ; 1231 /*! \brief computes the error of the DNN; 1232 *; 1233 *; 1234 */; 1235 template <typename Container, typename ItWeight>; 1236 double errorFunction (LayerData& layerData,; 1237 Container truth,; 1238 ItWeight itWeight,; 1239 ItWeight itWeightEnd,; 1240 double patternWeight,; 1241 double factorWeightDecay,; 1242 EnumRegularization eRegularization) const;; 1243 ; 1244 ; 1245 const std::vector<Layer>& layers () const { return m_layers; } ///< returns the layers (structure); 1246 std::vector<Layer>& layers () { return m_layers; } ///< returns the layers (structure); 1247 ; 1248 void removeLayer () { m_layers.pop_back (); } ///< remove one layer; 1249 ; 1250 ; 1251 void clear () ///< clear one layer; 1252 {; 1253 m_layers.clear ();; 1254 m_eErrorFunction = ModeErrorFunction::SUMOFSQUARES;; 1255 }; 1256 ; 1257 ; 1258 template <typename OutIterator>; 1259 void initializeWeights (WeightInitializationStrategy eInitStrategy,; 1260 OutIterator itWeight); ///< initialize the weights with the given strategy; 1261 ; 1262 protected:; 1263 ; 1264 void fillDropContainer (DropContainer& dropContainer, double dropFraction, size_t numNodes) const; ///< prepare the drop-out-container (select the nodes which are to be dropped out); 1265 ; 1266 ; 1267 private:; 1268 ; 1269 ModeErrorFunction m_eErrorFunction; ///< denotes the error function; 1270 size_t m_sizeInput; ///< input size of this DNN; 1271 size_t m_sizeOutput; ///< output size of this DNN; 1272 std::vector<Layer> m_layers; ///< layer-structure-data; 1273 ; 1274 protected:; 1275 // variables for JsMVA (interactive training in jupyter notebook); 1276 IPythonInteractive *fInteractive = nullptr;; 1277 bool * f",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/NeuralNet_8h_source.html:45920,clear,clear,45920,doc/master/NeuralNet_8h_source.html,https://root.cern,https://root.cern/doc/master/NeuralNet_8h_source.html,2,['clear'],['clear']
Usability,"Context::TGItemContext ; (; ). Constructor. ; Definition at line 33 of file TTVLVContainer.cxx. ◆ ~TGItemContext(). TGItemContext::~TGItemContext ; (; ). inlineoverride . Definition at line 42 of file TTVLVContainer.h. Member Function Documentation. ◆ Associate(). void TGItemContext::Associate ; (; TTVLVEntry * ; item). inline . Definition at line 43 of file TTVLVContainer.h. ◆ Delete(). void TGItemContext::Delete ; (; Option_t * ; option). inlineoverridevirtual . Delete this object. ; Typically called as a command via the interpreter. Normally use ""delete"" operator when object has been allocated on the heap. ; Reimplemented from TObject.; Definition at line 44 of file TTVLVContainer.h. ◆ Draw(). void TGItemContext::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw item. ; Reimplemented from TObject.; Definition at line 41 of file TTVLVContainer.cxx. ◆ EditExpression(). void TGItemContext::EditExpression ; (; ). Edit expression. ; Definition at line 49 of file TTVLVContainer.cxx. ◆ Empty(). void TGItemContext::Empty ; (; ). Empty item. ; Definition at line 57 of file TTVLVContainer.cxx. ◆ RemoveItem(). void TGItemContext::RemoveItem ; (; ). Remove item. ; Definition at line 65 of file TTVLVContainer.cxx. ◆ Scan(). void TGItemContext::Scan ; (; ). Scan item. ; Definition at line 73 of file TTVLVContainer.cxx. ◆ SetExpression(). void TGItemContext::SetExpression ; (; const char * ; name = """", . const char * ; alias = ""-empty-"", . bool ; cut = false . ). Set item expression. ; Definition at line 82 of file TTVLVContainer.cxx. Member Data Documentation. ◆ fItem. TTVLVEntry* TGItemContext::fItem. protected . Definition at line 39 of file TTVLVContainer.h. Libraries for TGItemContext:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TTVLVContainer.h; tree/treeviewer/src/TTVLVContainer.cxx. TGItemContext. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGItemContext.html:12068,Guid,Guide,12068,doc/master/classTGItemContext.html,https://root.cern,https://root.cern/doc/master/classTGItemContext.html,1,['Guid'],['Guide']
Usability,"ContextIdentity*fIdentity; TGLContextPrivate*fPimpl; Bool_tfValid; static Bool_tfgGlewInitDone. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TGLContext(TGLWidget* glWidget, Bool_t shareDefault = kTRUE, const TGLContext* shareList = 0); TGLContext ctor ""from"" TGLWidget.; Is shareDefault is true, the shareList is set from default; context-identity. Otherwise the given shareList is used (can be; null).; Makes thread switching. void GlewInit(); Initialize GLEW - static private function.; Called immediately after creation of the first GL context. void SetContext(TGLWidget* widget, const TGLContext* shareList); WIN32 gl-context creation. Defined as a member-function (this code removed from ctor); to make WIN32/X11 separation cleaner.; This function is public only for calls via gROOT and called from ctor. Bool_t MakeCurrent(); If context is valid (TGLPaintDevice, for which context was created still exists),; make it current. Bool_t ClearCurrent(); Reset current context. void SwapBuffers(); If context is valid (TGLPaintDevice, for which context was created still exists),; swap buffers (in case of P-buffer call glFinish()). void Release(); Make the context invalid and (do thread switch, if needed); free resources. ~TGLContext(); TGLContext dtor. If it's called before TGLPaintDevice's dtor; (context is valid) resource will be freed and context; un-registered. TGLContextIdentity * GetIdentity() const; We can have several shared contexts,; and gl-scene wants to know, if some context; (defined by its identity) can be used. TGLContext * GetCurrent(); Ask TGLContextPrivate to lookup context in its internal map. TGLContext(TGLWidget* glWidget, Bool_t shareDefault = kTRUE, const TGLContext* shareList = 0); TGLContext(TGLPBuffer *glPbuf, const TGLContext *shareList = 0);. Bool_t IsValid() const; { return fValid; }. » Author: Timur Pocheptsov, Jun 2007 » Copyright (C) 1995-2004, Rene Brun and Fons Rademakers. *; » Last changed: root/gl:$Id",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGLContext.html:2152,Clear,ClearCurrent,2152,root/html528/TGLContext.html,https://root.cern,https://root.cern/root/html528/TGLContext.html,6,['Clear'],['ClearCurrent']
Usability,"Context_t gc, GCValues_t *gval);  Changes the components specified by the mask in gval for the specified GC. ;  ; virtual void ChangeProperties (Window_t id, Atom_t property, Atom_t type, Int_t format, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeProperty (Window_t id, Atom_t property, Atom_t type, UChar_t *data, Int_t len);  Alters the property for the specified window and causes the X server to generate a PropertyNotify event on that window. ;  ; virtual void ChangeWindowAttributes (Window_t id, SetWindowAttributes_t *attr);  Changes the attributes of the specified window ""id"" according the values provided in ""attr"". ;  ; virtual Bool_t CheckEvent (Window_t id, EGEventType type, Event_t &ev);  Check if there is for window ""id"" an event of type ""type"". ;  ; virtual void ClearArea (Window_t id, Int_t x, Int_t y, UInt_t w, UInt_t h);  Paints a rectangular area in the specified window ""id"" according to the specified dimensions with the window's background pixel or pixmap. ;  ; virtual void ClearWindow ();  Clears the entire area of the current window. ;  ; virtual void ClearWindow (Window_t id);  Clears the entire area in the specified window and it is equivalent to ClearArea(id, 0, 0, 0, 0) ;  ; virtual void CloseDisplay ();  Closes connection to display server and destroys all windows. ;  ; virtual void ClosePixmap ();  Deletes current pixmap. ;  ; virtual void CloseWindow ();  Deletes current window. ;  ; virtual void ConvertPrimarySelection (Window_t id, Atom_t clipboard, Time_t when);  Causes a SelectionRequest event to be sent to the current primary selection owner. ;  ; virtual void ConvertSelection (Window_t, Atom_t &, Atom_t &, Atom_t &, Time_t &);  Requests that the specified selection be converted to the specified target type. ;  ; virtual void CopyArea (Drawable_t src, Drawable_t dest, GContext_t gc, Int_t src_x, Int_t src_y, UInt_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTVirtualX.html:3445,Clear,ClearArea,3445,doc/master/classTVirtualX.html,https://root.cern,https://root.cern/doc/master/classTVirtualX.html,1,['Clear'],['ClearArea']
Usability,Context_tkSYS_UserName; static TTabCom::EContext_tkUNKNOWN_CONTEXT. private:. char*fBufinitialized by Hook(); Int_tfLastIterfrodo: iteration counter for recursive MakeClassFromVarName; Pattern_tfPat[25][1024]array of patterns; ULong64_tfPrevInterpMarker; const char*fRegExp[25]corresponding regular expression plain text; Bool_tfVarIsPointerfrodo: pointer or not flag; TSeqCollection*fpClasses; TSeqCollection*fpDirectives; TSeqCollection*fpEnvVars; TSeqCollection*fpFiles; TSeqCollection*fpGlobals; int*fpLocinitialized by Hook(); TSeqCollection*fpPragmas; TSeqCollection*fpSysIncFiles; TSeqCollection*fpUsers. Class Charts. Inheritance Chart:. TTabCom. Function documentation; TTabCom(); Default constructor. ~TTabCom(); Destructor. void ClearClasses(); Clear classes and namespace collections. void ClearCppDirectives(); Forget all Cpp directives seen so far. void ClearEnvVars(); Forget all environment variables seen so far. void ClearFiles(); Close all files. void ClearGlobalFunctions(); Forget all global functions seen so far.; Not needed anymore. Use gROOT->GetListOfGlobalFunctions(). void ClearGlobals(); Forget all global variables seen so far.; With teh new implamentation the list is gROOT->GetListOfGlobals(true). void ClearPragmas(); Forget all pragmas seen so far. void ClearSysIncFiles(); Close system files. void ClearUsers(); Forget all user seen so far. void ClearAll(); clears all lists; except for user names and system include files. void RehashClasses(); Do the class rehash. void RehashCppDirectives(); Cpp rehashing. void RehashEnvVars(); Environemnt variables rehashing. void RehashFiles(); Close files. void RehashGlobalFunctions(); Reload global functions. void RehashGlobals(); Reload globals. void RehashPragmas(); Reload pragmas. void RehashSysIncFiles(); Reload system include files. void RehashUsers(); Reload users. void RehashAll(); clears and then rebuilds all lists; except for user names and system include files. const TSeqCollection * GetListOfClasses(); Re,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TTabCom.html:7829,Clear,ClearGlobalFunctions,7829,root/html602/TTabCom.html,https://root.cern,https://root.cern/root/html602/TTabCom.html,2,['Clear'],['ClearGlobalFunctions']
Usability,"Convert coordinates from top volume frame to master.Definition TGeoManager.cxx:4265; TGeoManager::GetParallelWorldTGeoParallelWorld * GetParallelWorld() constDefinition TGeoManager.h:601; TGeoManager::fShapesTObjArray * fShapesDefinition TGeoManager.h:94; TGeoManager::GetVisDensityDouble_t GetVisDensity() constDefinition TGeoManager.h:217; TGeoManager::SetCurrentDirectionvoid SetCurrentDirection(Double_t *dir)Definition TGeoManager.h:518; TGeoManager::AddOpticalSurfacevoid AddOpticalSurface(TGeoOpticalSurface *optsurf)Add optical surface;.Definition TGeoManager.cxx:2029; TGeoManager::SetDefaultUnitsstatic void SetDefaultUnits(EDefaultUnits new_value)Definition TGeoManager.cxx:4319; TGeoManager::fLoopVolumesBool_t fLoopVolumesflag that geometry is closedDefinition TGeoManager.h:80; TGeoManager::AddMaterialInt_t AddMaterial(const TGeoMaterial *material)Add a material to the list. Returns index of the material in list.Definition TGeoManager.cxx:616; TGeoManager::ClearAttributesvoid ClearAttributes()Reset all attributes to default ones.Definition TGeoManager.cxx:1455; TGeoManager::fgMaxDaughtersstatic Int_t fgMaxDaughtersMaximum level in geometry.Definition TGeoManager.h:53; TGeoManager::fUsePWNavBool_t fUsePWNavRaytrace mode: 0=normal, 1=pass through, 2=transparent.Definition TGeoManager.h:147; TGeoManager::SetRTmodevoid SetRTmode(Int_t mode)Change raytracing mode.Definition TGeoManager.cxx:3108; TGeoManager::CheckPathBool_t CheckPath(const char *path) constCheck if a geometry path is valid without changing the state of the current navigator.Definition TGeoManager.cxx:1715; TGeoManager::InspectStatevoid InspectState() constInspects path and all flags for the current state.Definition TGeoManager.cxx:2873; TGeoManager::ConvertReflectionsvoid ConvertReflections()Convert all reflections in geometry to normal rotations + reflected shapes.Definition TGeoManager.cxx:1723; TGeoManager::SetVisLevelvoid SetVisLevel(Int_t level=3)set default level down to which visualization is p",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:58320,Clear,ClearAttributesvoid,58320,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,2,['Clear'],"['ClearAttributes', 'ClearAttributesvoid']"
Usability,"Converts the keycode from the event structure to a key symbol (according to the modifiers specified i...Definition TVirtualX.cxx:2009; TVirtualX::SendEventvirtual void SendEvent(Window_t id, Event_t *ev)Specifies the event ""ev"" is to be sent to the window ""id"".Definition TVirtualX.cxx:1623; TVirtualX::GetCurrentWindowvirtual Window_t GetCurrentWindow() constpointer to the current internal window used in canvas graphicsDefinition TVirtualX.cxx:2341; TVirtualX::NextEventvirtual void NextEvent(Event_t &event)The ""event"" is set to default event.Definition TVirtualX.cxx:137; TVirtualX::EventsPendingvirtual Int_t EventsPending()Returns the number of events that have been received from the X server but have not been removed from...Definition TVirtualX.cxx:1509; TVirtualX::CheckEventvirtual Bool_t CheckEvent(Window_t id, EGEventType type, Event_t &ev)Check if there is for window ""id"" an event of type ""type"".Definition TVirtualX.cxx:1613; bool; int; unsigned int; SetTextColorpt SetTextColor(4); SetMarkerSizegr SetMarkerSize(1.3); ColorStruct_tDefinition GuiTypes.h:310; Event_tEvent structure.Definition GuiTypes.h:174; GCValues_tGraphics context structure.Definition GuiTypes.h:224; PictureAttributes_tDefinition GuiTypes.h:323; Point_tPoint structure (maps to the X11 XPoint structure)Definition GuiTypes.h:356; Rectangle_tRectangle structure (maps to the X11 XRectangle structure)Definition GuiTypes.h:361; Segment_tUsed for drawing line segments (maps to the X11 XSegments structure)Definition GuiTypes.h:351; SetWindowAttributes_tAttributes that can be used when creating or changing a window.Definition GuiTypes.h:93; WindowAttributes_tWindow attributes that can be inquired.Definition GuiTypes.h:114; SetTextAlignth1 SetTextAlign(11); SetLineStylelv SetLineStyle(3); SetMarkerColorm SetMarkerColor(kBlue); SetTextAnglett SetTextAngle(45). graf2dwin32gdksrcTGWin32VirtualXProxy.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:20 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html:97380,Guid,Guide,97380,doc/master/TGWin32VirtualXProxy_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGWin32VirtualXProxy_8cxx_source.html,1,['Guid'],['Guide']
Usability,"CoordErrorVector = nullptr;; 215 }; 216 }; 217 ; 218 /**; 219 copy constructors; 220 */; 221 BinData::BinData(const BinData &rhs); 222 : FitData(rhs),; 223 fDataPtr(nullptr),; 224 fDataErrorPtr(nullptr), fDataErrorHighPtr(nullptr), fDataErrorLowPtr(nullptr),; 225 fpTmpCoordErrorVector(nullptr), fpTmpBinEdgeVector(nullptr); 226 {; 227 *this = rhs;; 228 }; 229 ; 230 BinData & BinData::operator= ( const BinData & rhs ); 231 {; 232 FitData::operator=( rhs );; 233 ; 234 if ( fpTmpBinEdgeVector ); 235 {; 236 assert(HasBinEdges());; 237 ; 238 delete[] fpTmpBinEdgeVector;; 239 fpTmpBinEdgeVector= nullptr;; 240 }; 241 ; 242 if ( fpTmpCoordErrorVector ); 243 {; 244 delete[] fpTmpCoordErrorVector;; 245 fpTmpCoordErrorVector = nullptr;; 246 }; 247 ; 248 fDataPtr = nullptr;; 249 fDataErrorPtr= fDataErrorHighPtr= fDataErrorLowPtr= nullptr;; 250 ; 251 fErrorType = rhs.fErrorType;; 252 fRefVolume = rhs.fRefVolume;; 253 fBinEdge = rhs.fBinEdge;; 254 ; 255 if ( fWrapped ); 256 {; 257 fData.clear();; 258 fCoordErrors.clear();; 259 fDataError.clear();; 260 fDataErrorHigh.clear();; 261 fDataErrorLow.clear();; 262 ; 263 fDataPtr = rhs.fDataPtr;; 264 fCoordErrorsPtr = rhs.fCoordErrorsPtr;; 265 fDataErrorPtr = rhs.fDataErrorPtr;; 266 fDataErrorHighPtr = rhs.fDataErrorHighPtr;; 267 fDataErrorLowPtr = rhs.fDataErrorLowPtr;; 268 }; 269 else; 270 {; 271 // copy data vector and set correct pointer; 272 fData = rhs.fData;; 273 if ( !fData.empty() ); 274 fDataPtr = &fData.front();; 275 ; 276 // copy coordinate errors and set correct pointers; 277 fCoordErrors = rhs.fCoordErrors;; 278 if (!fCoordErrors.empty()) {; 279 assert(kCoordError == fErrorType || kAsymError == fErrorType);; 280 fCoordErrorsPtr.resize(fDim);; 281 for (unsigned int i = 0; i < fDim; i++) {; 282 fCoordErrorsPtr[i] = fCoordErrors[i].empty() ? nullptr : &fCoordErrors[i].front();; 283 }; 284 }; 285 // copy data error; 286 fDataError = rhs.fDataError;; 287 if (!fDataError.empty()) {; 288 assert(kValueError == fErrorType || kCoordErr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:7105,clear,clear,7105,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,1,['clear'],['clear']
Usability,"Copy ctor. TGeoRotation(const char* name); Named rotation constructor. TGeoRotation(const char* name, Double_t phi, Double_t theta, Double_t psi); Default rotation constructor with Euler angles. Phi is the rotation angle about; Z axis and is done first, theta is the rotation about new Y and is done; second, psi is the rotation angle about new Z and is done third. All angles are in; degrees. TGeoRotation(const char* name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); Rotation constructor a la GEANT3. Angles theta(i), phi(i) are the polar and azimuthal; angles of the (i) axis of the rotated system with respect to the initial non-rotated; system.; Example : the identity matrix (no rotation) is composed by; theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0; SetBit(kGeoRotation);. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t IsValid() const; Perform orthogonality test for rotation. void Clear(Option_t* option = """"); reset data members. void FastRotZ(Double_t* sincos); Perform a rotation about Z having the sine/cosine of the rotation angle. Double_t GetPhiRotation(Bool_t fixX = kFALSE) const; --- Returns rotation angle about Z axis in degrees. If the rotation is a pure; rotation about Z, fixX parameter does not matter, otherwise its meaning is:; - fixX = true : result is the phi angle of the projection of the rotated X axis in the un-rotated XY; - fixX = false : result is the phi angle of the projection of the rotated Y axis - 90 degrees. void LocalToMaster(const Double_t* local, Double_t* master) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse. void MasterToLocal(const Double_t* master, Double_t* local) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RotateX(Double_t angle); Rotate about X axis of the master frame with angle expressed in degrees. void Rot",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGeoRotation.html:16320,Clear,Clear,16320,root/html528/TGeoRotation.html,https://root.cern,https://root.cern/root/html528/TGeoRotation.html,2,['Clear'],['Clear']
Usability,"Copy ctor. TGeoRotation(const char* name); Named rotation constructor. TGeoRotation(const char* name, Double_t phi, Double_t theta, Double_t psi); Default rotation constructor with Euler angles. Phi is the rotation angle about; Z axis and is done first, theta is the rotation about new Y and is done; second, psi is the rotation angle about new Z and is done third. All angles are in; degrees. TGeoRotation(const char* name, Double_t theta1, Double_t phi1, Double_t theta2, Double_t phi2, Double_t theta3, Double_t phi3); Rotation constructor a la GEANT3. Angles theta(i), phi(i) are the polar and azimuthal; angles of the (i) axis of the rotated system with respect to the initial non-rotated; system.; Example : the identity matrix (no rotation) is composed by; theta1=90, phi1=0, theta2=90, phi2=90, theta3=0, phi3=0; SetBit(kGeoRotation);. TGeoMatrix& Inverse() const; Return a temporary inverse of this. Bool_t IsValid() const; Perform orthogonality test for rotation. void Clear(Option_t* option = """"); reset data members. void FastRotZ(const Double_t* sincos); Perform a rotation about Z having the sine/cosine of the rotation angle. Double_t GetPhiRotation(Bool_t fixX = kFALSE) const; --- Returns rotation angle about Z axis in degrees. If the rotation is a pure; rotation about Z, fixX parameter does not matter, otherwise its meaning is:; - fixX = true : result is the phi angle of the projection of the rotated X axis in the un-rotated XY; - fixX = false : result is the phi angle of the projection of the rotated Y axis - 90 degrees. void LocalToMaster(const Double_t* local, Double_t* master) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix inverse. void MasterToLocal(const Double_t* master, Double_t* local) const; convert a point by multiplying its column vector (x, y, z, 1) to matrix. TGeoMatrix * MakeClone() const; Make a clone of this matrix. void RotateX(Double_t angle); Rotate about X axis of the master frame with angle expressed in degrees. vo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoRotation.html:16426,Clear,Clear,16426,root/html532/TGeoRotation.html,https://root.cern,https://root.cern/root/html532/TGeoRotation.html,4,['Clear'],['Clear']
Usability,"CoreMutex);; 295 ; 296 Int_t idx = IndexOf(obj) - fLowerBound;; 297 if (idx == -1 || idx == fSize-1) return nullptr;; 298 ; 299 return fCont[idx+1];; 300}; 301 ; 302////////////////////////////////////////////////////////////////////////////////; 303/// Return the object before obj. Returns 0 if obj is first object.; 304 ; 305TObject *TObjArray::Before(const TObject *obj) const; 306{; 307 if (!obj) return nullptr;; 308 ; 309 R__COLLECTION_READ_LOCKGUARD(ROOT::gCoreMutex);; 310 ; 311 Int_t idx = IndexOf(obj) - fLowerBound;; 312 if (idx == -1 || idx == 0) return nullptr;; 313 ; 314 return fCont[idx-1];; 315}; 316 ; 317////////////////////////////////////////////////////////////////////////////////; 318/// Remove all objects from the array. Does not delete the objects; 319/// unless the TObjArray is the owner (set via SetOwner()).; 320 ; 321void TObjArray::Clear(Option_t *); 322{; 323 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 324 ; 325 if (IsOwner()); 326 Delete();; 327 else; 328 Init(fSize, fLowerBound);; 329}; 330 ; 331////////////////////////////////////////////////////////////////////////////////; 332/// Remove empty slots from array.; 333 ; 334void TObjArray::Compress(); 335{; 336 R__COLLECTION_WRITE_LOCKGUARD(ROOT::gCoreMutex);; 337 ; 338 Int_t j = 0;; 339 ; 340 for (Int_t i = 0; i < fSize; i++) {; 341 if (fCont[i]) {; 342 fCont[j] = fCont[i];; 343 j++;; 344 }; 345 }; 346 ; 347 fLast = j - 1;; 348 ; 349 for ( ; j < fSize; j++); 350 fCont[j] = nullptr;; 351}; 352 ; 353////////////////////////////////////////////////////////////////////////////////; 354/// Remove all objects from the array AND delete all heap based objects.; 355 ; 356void TObjArray::Delete(Option_t * /* opt */); 357{; 358 // In some case, for example TParallelCoord, a list (the pad's list of; 359 // primitives) will contain both the container and the containees; 360 // (the TParallelCoordVar) but if the Clear is being called from; 361 // the destructor of the container of this list, one of ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TObjArray_8cxx_source.html:10645,Clear,Clear,10645,doc/master/TObjArray_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TObjArray_8cxx_source.html,1,['Clear'],['Clear']
Usability,"CountList.h>; #include <RooStringView.h>; #include <TNamed.h>; #include <TObjArray.h>; #include <TRefArray.h>; #include <ROOT/RConfig.hxx>; #include <deque>; #include <iostream>; #include <map>; #include <memory>; #include <set>; #include <stack>; #include <string>; #include <unordered_map>. Include dependency graph for RooAbsArg.h:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. This graph shows which files directly or indirectly include this file:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead. Classes; struct  RooAbsArg::ProxyListCache;  ; class  RooAbsArg;  Common abstract base class for objects that represent a value and a ""shape"" in RooFit. More...;  ; class  RooRefArray;  . Namespaces; namespace  RooFit;  The namespace RooFit contains mostly switches that change the behaviour of functions of PDFs (or other types of arguments). ;  ; namespace  RooFit::Detail;  . Typedefs; using RooListProxy = RooCollectionProxy< RooArgList >;  ; using RooSetProxy = RooCollectionProxy< RooArgSet >;  . Functions; std::ostream & operator<< (std::ostream &os, const RooAbsArg &arg);  Ostream operator. ;  ; std::istream & operator>> (std::istream &is, RooAbsArg &arg);  Istream operator. ;  . Typedef Documentation. ◆ RooListProxy. using RooListProxy = RooCollectionProxy<RooArgList>. Definition at line 55 of file RooAbsArg.h. ◆ RooSetProxy. using RooSetProxy = RooCollectionProxy<RooArgSet>. Definition at line 54 of file RooAbsArg.h. Function Documentation. ◆ operator<<(). std::ostream & operator<< ; (; std::ostream & ; os, . const RooAbsArg & ; arg . ). Ostream operator. ; Definition at line 1666 of file RooAbsArg.cxx. ◆ operator>>(). std::istream & operator>> ; (; std::istream & ; is, . RooAbsArg & ; arg . ). Istream operator. ; Definition at line 1675 of file RooAbsArg.cxx. roofitroofitcoreincRooAbsArg.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RooAbsArg_8h.html:2342,Guid,Guide,2342,doc/master/RooAbsArg_8h.html,https://root.cern,https://root.cern/doc/master/RooAbsArg_8h.html,1,['Guid'],['Guide']
Usability,"CppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSysIncFiles ; (; ). Close system files. ; Definition at line 294 of file TTabCom.cxx. ◆ ClearUsers(). void TTabCom::ClearUsers ; (; ). Forget all user seen so far. ; Definition at line 306 of file TTabCom.cxx. ◆ Complete(). Int_t TTabCom::Complete ; (; const TRegexp & ; re, . const TSeqCollection * ; pListOfCandidates, . const char ; appendage[], . std::ostream & ; out, . TString::ECaseCompare ; cmp = TString::kExact . ). private . [private] ; Definition at line 1163 of file TTabCom.cxx. ◆ CopyMatch(). void TTabCom::CopyMatch ; (; char * ; dest, . int ; dest_len, . const char * ; localName, . const char * ; appendage = nullptr, . const char * ; fullName = nullptr . ); const. private . [private] ; Definition at line 1415 of file TTabCom.cxx. ◆ DeclFileName(). static const char * TTabCom::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 226 of file TTabCom.h. ◆ DetermineClass(). TString TTabCom::DetermineClass ; (; const ch",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:10530,Clear,ClearSysIncFiles,10530,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearSysIncFiles']
Usability,"Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; Bool_t HandleTimer (TTimer *timer) override;  Send progress and feedback to client. ;  ; void SetupFeedback () override;  Setup reporting of feedback objects and progress messages. ;  ;  Protected Member Functions inherited from TProofPlayerRemote; TProof * GetProof () const;  ; Int_t InitPacketizer (TDSet *dset, Long64_t nentries, Long64_t first, const char *defpackunit, const char *defpackdata);  Init the packetizer Return 0 on success (fPacketizer is correctly initialized), -1 on failure. ;  ; TList * MergeFeedback ();  Merge feedback lists. ;  ; Bool_t MergeOutputFiles ();  Merge output in files. ;  ; void NotifyMemory (TObject *obj);  Printout the memory record after merging object 'obj' This record is used by the memory monitor. ;  ; virtual Bool_t SendSelector (const char *selector_file);  Send the selector file(s) to master or worker nodes. ;  ; void SetLastMergingMsg (TObject *obj);  Set the message to be notified in case of exception. ;  ; void SetSelectorDataMembersFromOutputList ();  Set the selector's data members: find the mapping of data members to otuput list entries in the output list and apply it. ;  ; void StopFeedback () override;  Stop reporting of feedback objects. ;  ;  Protected Member Functions inherited from TProofPlayer; Int_t AssertSelector (const char *selector_file);  Make sure that a valid selector object Return -1 in case of problems, 0 otherwise. ;  ; Bool_t CheckMemUsage (Long64_t &mfreq, Bool_t &w80r, Bool_t &w80v, TString &wmsg);  Check the memory usage, if reque",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProofPlayerSuperMaster.html:20365,feedback,feedback,20365,doc/master/classTProofPlayerSuperMaster.html,https://root.cern,https://root.cern/doc/master/classTProofPlayerSuperMaster.html,1,['feedback'],['feedback']
Usability,"Crossing(). Bool_t TGeoPgon::SliceCrossing ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; nphi, . Int_t * ; iphi, . Double_t * ; sphi, . Double_t & ; snext, . Double_t ; stepmax . ); const. protected . ◆ SliceCrossingIn(). Bool_t TGeoPgon::SliceCrossingIn ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; ipl, . Int_t ; nphi, . Int_t * ; iphi, . Double_t * ; sphi, . Double_t & ; snext, . Double_t ; stepmax . ); const. protected . ◆ SliceCrossingInZ(). Bool_t TGeoPgon::SliceCrossingInZ ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; nphi, . Int_t * ; iphi, . Double_t * ; sphi, . Double_t & ; snext, . Double_t ; stepmax . ); const. protected . ◆ SliceCrossingZ(). Bool_t TGeoPgon::SliceCrossingZ ; (; const Double_t * ; point, . const Double_t * ; dir, . Int_t ; nphi, . Int_t * ; iphi, . Double_t * ; sphi, . Double_t & ; snext, . Double_t ; stepmax . ); const. protected . ◆ Streamer(). void TGeoPgon::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TGeoPcon. ◆ StreamerNVirtual(). void TGeoPgon::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 118 of file TGeoPgon.h. Member Data Documentation. ◆ fMutex. std::mutex TGeoPgon::fMutex. mutableprotected . Size for the navigation data array. ; Definition at line 38 of file TGeoPgon.h. ◆ fNedges. Int_t TGeoPgon::fNedges. protected . Definition at line 35 of file TGeoPgon.h. ◆ fThreadData. std::vector<ThreadData_t *> TGeoPgon::fThreadData. mutableprotected . Definition at line 36 of file TGeoPgon.h. ◆ fThreadSize. Int_t TGeoPgon::fThreadSize. mutableprotected . Navigation data per thread. ; Definition at line 37 of file TGeoPgon.h. Libraries for TGeoPgon:. [legend]; The documentation for this class was generated from the following file:; geom/geom/inc/TGeoPgon.h. TGeoPgon. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:09 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGeoPgon.html:36173,Guid,Guide,36173,doc/master/classTGeoPgon.html,https://root.cern,https://root.cern/doc/master/classTGeoPgon.html,1,['Guid'],['Guide']
Usability,"Ctub(Double_t* params); TGeoCtub(const TGeoCtub&); TGeoCtub(Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); TGeoCtub(const char* name, Double_t rmin, Double_t rmax, Double_t dz, Double_t phi1, Double_t phi2, Double_t lx, Double_t ly, Double_t lz, Double_t tx, Double_t ty, Double_t tz); virtual~TGeoCtub(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTGeoBBox::AreOverlapping(const TGeoBBox* box1, const TGeoMatrix* mat1, const TGeoBBox* box2, const TGeoMatrix* mat2); static Double_tTGeoShape::Big(); virtual voidTObject::Browse(TBrowser* b); virtual Double_tCapacity() const; voidTGeoShape::CheckShape(Int_t testNo, Int_t nsamples = 10000, Option_t* option = """"); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual voidTGeoShape::ClearThreadData() const; virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidComputeBBox(); static Double_tTGeoShape::ComputeEpsMch(); virtual voidComputeNormal(Double_t* point, Double_t* dir, Double_t* norm); static voidTGeoTubeSeg::ComputeNormalS(Double_t* point, Double_t* dir, Double_t* norm, Double_t rmin, Double_t rmax, Double_t dz, Double_t c1, Double_t s1, Double_t c2, Double_t s2); virtual Bool_tContains(Double_t* point) const; virtual voidTNamed::Copy(TObject& named) const; virtual Bool_tTGeoBBox::CouldBeCrossed(Double_t* point, Double_t* dir) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTGeoTubeSeg::DistancetoPrimitive(Int_t px, Int_t py); virtual Double_tDistFromInside(Double_t* point, Double_t* dir, Int_t iact = 1, Double_t step = TGeoShape::Big(), Double_t* safe = 0) const; static Double_tTGeoTubeSeg::DistFromInsideS(Double_t* point, Double_t* dir, Double_t rmin, Double_t",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/TGeoCtub.html:1931,Clear,ClearThreadData,1931,root/html532/TGeoCtub.html,https://root.cern,https://root.cern/root/html532/TGeoCtub.html,1,['Clear'],['ClearThreadData']
Usability,Current(). void TEveWindow::SwapWindowWithCurrent ; (; ). Swap frames with the current window. ; Definition at line 750 of file TEveWindow.cxx. ◆ TitleBarClicked(). void TEveWindow::TitleBarClicked ; (; ). Slot for clicking on the title-bar. ; The wish that this window becomes the current one is sent to the window-manager. ; Definition at line 958 of file TEveWindow.cxx. ◆ UndockWindow(). void TEveWindow::UndockWindow ; (; ). Undock the window - put it into a dedicated main-frame. ; Definition at line 768 of file TEveWindow.cxx. ◆ UndockWindowDestroySlot(). void TEveWindow::UndockWindowDestroySlot ; (; ). Undock the window - put it into a dedicated main-frame. ; The old window slot is destroyed. ; Definition at line 795 of file TEveWindow.cxx. Friends And Related Symbol Documentation. ◆ TEveWindowManager. friend class TEveWindowManager. friend . Definition at line 211 of file TEveWindow.h. Member Data Documentation. ◆ fEveFrame. TEveCompositeFrame* TEveWindow::fEveFrame. protected . Definition at line 218 of file TEveWindow.h. ◆ fgCurrentBackgroundColor. Pixel_t TEveWindow::fgCurrentBackgroundColor = 0x80A0C0. staticprotected . Definition at line 226 of file TEveWindow.h. ◆ fgMainFrameDefHeight. UInt_t TEveWindow::fgMainFrameDefHeight = 480. staticprotected . Definition at line 224 of file TEveWindow.h. ◆ fgMainFrameDefWidth. UInt_t TEveWindow::fgMainFrameDefWidth = 640. staticprotected . Definition at line 223 of file TEveWindow.h. ◆ fgMiniBarBackgroundColor. Pixel_t TEveWindow::fgMiniBarBackgroundColor = 0x80C0A0. staticprotected . Definition at line 227 of file TEveWindow.h. ◆ fShowTitleBar. Bool_t TEveWindow::fShowTitleBar. protected . Definition at line 219 of file TEveWindow.h. Libraries for TEveWindow:. [legend]; The documentation for this class was generated from the following files:; graf3d/eve/inc/TEveWindow.h; graf3d/eve/src/TEveWindow.cxx. TEveWindow. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:47 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindow.html:47350,Guid,Guide,47350,doc/master/classTEveWindow.html,https://root.cern,https://root.cern/doc/master/classTEveWindow.html,1,['Guid'],['Guide']
Usability,"Cut & ; rhs . ). friend . Logical and. ; Definition at line 240 of file TCut.cxx. ◆ operator&& [2/3]. TCut operator&& ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Logical and. ; Definition at line 232 of file TCut.cxx. ◆ operator&& [3/3]. TCut operator&& ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Logical and. ; Definition at line 248 of file TCut.cxx. ◆ operator* [1/3]. TCut operator* ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Multiplication. ; Definition at line 216 of file TCut.cxx. ◆ operator* [2/3]. TCut operator* ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Multiplication. ; Definition at line 208 of file TCut.cxx. ◆ operator* [3/3]. TCut operator* ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Multiplication. ; Definition at line 224 of file TCut.cxx. ◆ operator+ [1/3]. TCut operator+ ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Addition. ; Definition at line 192 of file TCut.cxx. ◆ operator+ [2/3]. TCut operator+ ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Addition. ; Definition at line 184 of file TCut.cxx. ◆ operator+ [3/3]. TCut operator+ ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Addition. ; Definition at line 200 of file TCut.cxx. ◆ operator|| [1/3]. TCut operator|| ; (; const char * ; lhs, . const TCut & ; rhs . ). friend . Logical or. ; Definition at line 268 of file TCut.cxx. ◆ operator|| [2/3]. TCut operator|| ; (; const TCut & ; lhs, . const char * ; rhs . ). friend . Logical or. ; Definition at line 256 of file TCut.cxx. ◆ operator|| [3/3]. TCut operator|| ; (; const TCut & ; lhs, . const TCut & ; rhs . ). friend . Logical or. ; Definition at line 280 of file TCut.cxx. Libraries for TCut:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TCut.h; tree/tree/src/TCut.cxx. TCut. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:26 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCut.html:19341,Guid,Guide,19341,doc/master/classTCut.html,https://root.cern,https://root.cern/doc/master/classTCut.html,1,['Guid'],['Guide']
Usability,"D &b, Bool_t &ok)=0;  ; virtual Bool_t TransSolve (TMatrixDColumn &b)=0;  ; virtual Bool_t TransSolve (TVectorD &b)=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *err",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTDecompBase.html:6688,Clear,Clear,6688,doc/master/classTDecompBase.html,https://root.cern,https://root.cern/doc/master/classTDecompBase.html,1,['Clear'],['Clear']
Usability,"D because the concept; of a cumulative distribution is much trickier to define; make sure you; understand the order of summation before you use this method with; histograms of dimension >= 2. void Copy(TObject& hnew) const; -*-*-*-*-*Copy this histogram structure to newth1*-*-*-*-*-*-*-*-*-*-*-*. Note that this function does not copy the list of associated functions.; Use TObject::Clone to make a full copy of an histogram. void DirectoryAutoAdd(TDirectory* ); Perform the automatic addition of the histogram to the given directory. Note this function is called in place when the semantic requires; this object to be added to a directory (I.e. when being read from; a TKey or being Cloned). Int_t DistancetoPrimitive(Int_t px, Int_t py); -*-*-*-*-*-*-*-*-*Compute distance from point px,py to a line*-*-*-*-*-*. Compute the closest distance of approach from point px,py to elements; of an histogram.; The distance is computed in pixels units. Algorithm:; Currently, this simple model computes the distance from the mouse; to the histogram contour only. -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*. Bool_t Divide(TF1* f1, Double_t c1 = 1); Performs the operation: this = this/(c1*f1); if errors are defined (see TH1::Sumw2), errors are also recalculated. Only bins inside the function range are recomputed.; IMPORTANT NOTE: If you intend to use the errors of this histogram later; you should call Sumw2 before making this operation.; This is particularly important if you fit the histogram after TH1::Divide. The function return kFALSE if the divide operation failed. Bool_t Divide(const TH1* h1); -*-*-*-*-*-*-*-*-*Divide this histogram by h1*-*-*-*-*-*-*-*-*-*-*-*-*. this = this/h1; if errors are defined (see TH1::Sumw2), errors are also recalculated.; Note that if h1 has Sumw2 set, Sumw2 is automatically called for this; if not already set.; The resulting errors are calculated assuming uncorrelated histograms.; See the other TH1::Divide that gives the possibilit",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TH1.html:62030,simpl,simple,62030,root/html534/TH1.html,https://root.cern,https://root.cern/root/html534/TH1.html,1,['simpl'],['simple']
Usability,"D globalPalettesList(0);; 41 return globalPalettesList;; 42 }; 43}; 44 ; 45static Int_t gHighestColorIndex = 0; ///< Highest color index defined; 46static Float_t gColorThreshold = -1.; ///< Color threshold used by GetColor; 47static Int_t gDefinedColors = 0; ///< Number of defined colors.; 48static Int_t gLastDefinedColors = 649; ///< Previous number of defined colors; 49 ; 50#define fgGrayscaleMode TColor__GrayScaleMode(); 51#define fgPalette TColor__Palette(); 52#define fgPalettesList TColor__PalettesList(); 53 ; 54using std::floor;; 55 ; 56/** \class TColor; 57\ingroup Base; 58\ingroup GraphicsAtt; 59 ; 60The color creation and management class.; 61 ; 62 - [Introduction](\ref C00); 63 - [Basic colors](\ref C01); 64 - [The color wheel](\ref C02); 65 - [Bright and dark colors](\ref C03); 66 - [Accessible Color Schemes](\ref C031); 67 - [Gray scale view of of canvas with colors](\ref C04); 68 - [Color palettes](\ref C05); 69 - [High quality predefined palettes](\ref C06); 70 - [Colour Vision Deficiency (CVD) friendly palettes](\ref C06a); 71 - [Non Colour Vision Deficiency (CVD) friendly palettes](\ref C06b); 72 - [Palette inversion](\ref C061); 73 - [Color transparency](\ref C07); 74 ; 75\anchor C00; 76## Introduction; 77 ; 78Colors are defined by their red, green and blue components, simply called the; 79RGB components. The colors are also known by the hue, light and saturation; 80components also known as the HLS components. When a new color is created the; 81components of both color systems are computed.; 82 ; 83At initialization time, a table of colors is generated. An existing color can; 84be retrieved by its index:; 85 ; 86~~~ {.cpp}; 87 TColor *color = gROOT->GetColor(10);; 88~~~; 89 ; 90Then it can be manipulated. For example its RGB components can be modified:; 91 ; 92~~~ {.cpp}; 93 color->SetRGB(0.1, 0.2, 0.3);; 94~~~; 95 ; 96A new color can be created the following way:; 97 ; 98~~~ {.cpp}; 99 Int_t ci = 1756; // color index; 100 auto color = new TColor(ci",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TColor_8cxx_source.html:2616,simpl,simply,2616,doc/master/TColor_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TColor_8cxx_source.html,1,['simpl'],['simply']
Usability,"D viewing using hidden line and surface removal algorithms, OpenGL viewing* or ray tracing.; The method TGeoManager::GetGeomPainter()loads the painting library in memory.; This is generally not needed since it is called automatically by TGeoVolume::Draw() as well as by few other methods setting visualization attributes.; 18.7.1 Drawing Volumes and Hierarchies of Volumes; The first thing one would like to do after building some geometry is to visualize the volume tree. This provides the fastest validation check for most common coding or design mistakes. As soon as the geometry is successfully closed, one should draw it starting from the top-level volume:; //... code for geometry building; root[] gGeoManager->CloseGeometry();; root[] gGeoManager->GetMasterVolume()->Draw();; Doing this ensures that the original top-level volume of the geometry is drawn, even if another volume is currently the geometry root. OK, I suppose you already did that with your simple geometry and immediately noticed a new ROOT canvas popping-up and having some more or less strange picture inside. Here are few questions that might come:; Q: “The picture is strangely rotated; where are the coordinate axes?”; A: If drawn in a new canvas, any view has some default viewpoint, center of view and size. One can then perform mouse/keyboard actions to change them:. Mouse left-click and drag will rotate the view;; Some keys can be pressed when the view canvas is selected: J/K zoom/un-zoom, U/I move up/down, L/H move left/right. The coordinate axes display as well as changing top or side viewpoints can be activated from the TView context menu: right-click on the picture when no object is selected;. Q: “Every line is black! I cannot figure out what is what…”; A: Volumes can have different colors (those known by ROOT of course). Think at using them after each volume creation: myvolume->SetLineColor(Int_t color); otherwise everything is by default black.; Q: “The top volume of my geometry is a box but I see on",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html:1005908,simpl,simple,1005908,root/htmldoc/guides/users-guide/ROOTUsersGuide.html,https://root.cern,https://root.cern/root/htmldoc/guides/users-guide/ROOTUsersGuide.html,1,['simpl'],['simple']
Usability,"D(const char *name, const char *title, Int_t nbinsx, const Float_t *xbins, Int_t nbinsy, const Float_t *ybins, Int_t nbinsz, const Float_t *zbins)TH3D; TH3D(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins)TH3D; TH3D(const TH3D &h3d)TH3D; TNamed()TNamedinline; TNamed(const char *name, const char *title)TNamedinline; TNamed(const TString &name, const TString &title)TNamedinline; TNamed(const TNamed &named)TNamed; TObject()TObjectinline; TObject(const TObject &object)TObjectinline; TProfile3D()TProfile3D; TProfile3D(const char *name, const char *title, Int_t nbinsx, Double_t xlow, Double_t xup, Int_t nbinsy, Double_t ylow, Double_t yup, Int_t nbinsz, Double_t zlow, Double_t zup, Option_t *option="""")TProfile3D; TProfile3D(const char *name, const char *title, Int_t nbinsx, const Double_t *xbins, Int_t nbinsy, const Double_t *ybins, Int_t nbinsz, const Double_t *zbins, Option_t *option="""")TProfile3D; TProfile3D(const TProfile3D &profile)TProfile3D; TProfileHelperTProfile3Dfriend; TransformHisto(TVirtualFFT *fft, TH1 *h_output, Option_t *option)TH1static; UpdateBinContent(Int_t bin, Double_t content) overrideTH3Dinlineprotectedvirtual; UseCurrentStyle() overrideTH1virtual; Warning(const char *method, const char *msgfmt,...) constTObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0)TObjectvirtual; Write(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) constTObjectvirtual; WriteArray(TBuffer &b, const TArray *a)TArraystatic; ~TArray()TArrayinlinevirtual; ~TArrayD()TArrayDvirtual; ~TAtt3D()TAtt3Dinlinevirtual; ~TAttFill()TAttFillvirtual; ~TAttLine()TAttLinevirtual; ~TAttMarker()TAttMarkervirtual; ~TH1() overrideTH1; ~TH3() overrideTH3; ~TH3D() overrideTH3D; ~TNamed()TNamedvirtual; ~TObject()TObjectvirtual; ~TProfile3D() overrideTProfile3D. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:12 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTProfile3D-members.html:33854,Guid,Guide,33854,doc/master/classTProfile3D-members.html,https://root.cern,https://root.cern/doc/master/classTProfile3D-members.html,1,['Guid'],['Guide']
Usability,"D.; Definition at line 459 of file TMarker.cxx. ◆ SetBBoxX2(). void TMarker::SetBBoxX2 ; (; const Int_t ; x). overridevirtual . Set right hand side of BoundingBox to a value (resize in x direction on right) ; Implements TAttBBox2D.; Definition at line 470 of file TMarker.cxx. ◆ SetBBoxY1(). void TMarker::SetBBoxY1 ; (; const Int_t ; y). overridevirtual . Set top of BoundingBox to a value (resize in y direction on top) ; Implements TAttBBox2D.; Definition at line 480 of file TMarker.cxx. ◆ SetBBoxY2(). void TMarker::SetBBoxY2 ; (; const Int_t ; y). overridevirtual . Set bottom of BoundingBox to a value (resize in y direction on bottom) ; Implements TAttBBox2D.; Definition at line 491 of file TMarker.cxx. ◆ SetNDC(). void TMarker::SetNDC ; (; Bool_t ; isNDC = kTRUE). virtual . Set NDC mode on if isNDC = kTRUE, off otherwise. ; Definition at line 368 of file TMarker.cxx. ◆ SetX(). virtual void TMarker::SetX ; (; Double_t ; x). inlinevirtual . Definition at line 53 of file TMarker.h. ◆ SetY(). virtual void TMarker::SetY ; (; Double_t ; y). inlinevirtual . Definition at line 54 of file TMarker.h. ◆ Streamer(). void TMarker::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TMarker. ; Reimplemented from TObject.; Definition at line 377 of file TMarker.cxx. ◆ StreamerNVirtual(). void TMarker::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 69 of file TMarker.h. Member Data Documentation. ◆ fX. Double_t TMarker::fX. protected . X position of marker (left,center,etc..) ; Definition at line 25 of file TMarker.h. ◆ fY. Double_t TMarker::fY. protected . Y position of marker (left,center,etc..) ; Definition at line 26 of file TMarker.h. Libraries for TMarker:. [legend]; The documentation for this class was generated from the following files:; graf2d/graf/inc/TMarker.h; graf2d/graf/src/TMarker.cxx. TMarker. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:57 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMarker.html:23040,Guid,Guide,23040,doc/master/classTMarker.html,https://root.cern,https://root.cern/doc/master/classTMarker.html,1,['Guid'],['Guide']
Usability,"DFs (or othe...Definition JSONIO.h:26; rf205_compplotDefinition rf205_compplot.py:1; xmlio::Titleconst char * TitleDefinition TXMLSetup.cxx:68; ; [#0] WARNING:InputArguments -- The parameter 'sigma1' with range [-inf, inf] of the RooGaussian 'sig1' exceeds the safe range of (0, inf). Advise to limit its range.; [#0] WARNING:InputArguments -- The parameter 'sigma2' with range [-inf, inf] of the RooGaussian 'sig2' exceeds the safe range of (0, inf). Advise to limit its range.; [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2,sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg1,bkg2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg,sig); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (sig,sig1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) directly selected PDF components: (bkg1,sig,sig1,sig2); [#1] INFO:Plotting -- RooAbsPdf::plotOn(model) indirectly selected PDF components: (bkg); DateJuly 2008 ; AuthorWouter Verkerke ; Definition in file rf205_compplot.C. tutorialsroofitrf205_compplot.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:30 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/rf205__compplot_8C.html:8520,Guid,Guide,8520,doc/master/rf205__compplot_8C.html,https://root.cern,https://root.cern/doc/master/rf205__compplot_8C.html,1,['Guid'],['Guide']
Usability,DI main frame. ; Definition at line 242 of file TGMdiDecorFrame.h. ◆ fMinimizedUserPlacement. Bool_t TGMdiDecorFrame::fMinimizedUserPlacement. protected . user placement flag ; Definition at line 238 of file TGMdiDecorFrame.h. ◆ fMinimizedX. Int_t TGMdiDecorFrame::fMinimizedX. protected . Definition at line 236 of file TGMdiDecorFrame.h. ◆ fMinimizedY. Int_t TGMdiDecorFrame::fMinimizedY. protected . minimized position ; Definition at line 236 of file TGMdiDecorFrame.h. ◆ fPreResizeHeight. Int_t TGMdiDecorFrame::fPreResizeHeight. protected . dimension before resizing ; Definition at line 235 of file TGMdiDecorFrame.h. ◆ fPreResizeWidth. Int_t TGMdiDecorFrame::fPreResizeWidth. protected . Definition at line 235 of file TGMdiDecorFrame.h. ◆ fPreResizeX. Int_t TGMdiDecorFrame::fPreResizeX. protected . Definition at line 234 of file TGMdiDecorFrame.h. ◆ fPreResizeY. Int_t TGMdiDecorFrame::fPreResizeY. protected . position before resizing ; Definition at line 234 of file TGMdiDecorFrame.h. ◆ fRightVR. TGMdiHorizontalWinResizer * TGMdiDecorFrame::fRightVR. protected . left and right horizontal resizers ; Definition at line 247 of file TGMdiDecorFrame.h. ◆ fTitlebar. TGMdiTitleBar* TGMdiDecorFrame::fTitlebar. protected . MDI window title bar. ; Definition at line 251 of file TGMdiDecorFrame.h. ◆ fUpperHR. TGMdiVerticalWinResizer* TGMdiDecorFrame::fUpperHR. protected . Definition at line 244 of file TGMdiDecorFrame.h. ◆ fUpperLeftCR. TGMdiCornerWinResizer* TGMdiDecorFrame::fUpperLeftCR. protected . Definition at line 245 of file TGMdiDecorFrame.h. ◆ fUpperRightCR. TGMdiCornerWinResizer* TGMdiDecorFrame::fUpperRightCR. protected . Definition at line 246 of file TGMdiDecorFrame.h. Libraries for TGMdiDecorFrame:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGMdiDecorFrame.h; gui/gui/src/TGMdiDecorFrame.cxx. TGMdiDecorFrame. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:27 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGMdiDecorFrame.html:46283,Guid,Guide,46283,doc/master/classTGMdiDecorFrame.html,https://root.cern,https://root.cern/doc/master/classTGMdiDecorFrame.html,1,['Guid'],['Guide']
Usability,"DInt_t fCanvasID! Canvas identifierDefinition TCanvas.h:48; TCanvas::SetGrayscalevoid SetGrayscale(Bool_t set=kTRUE)Set whether this canvas should be painted in grayscale, and re-paint it if necessary.Definition TCanvas.cxx:2576; TCanvas::SetTitlevoid SetTitle(const char *title="""") overrideSet canvas title.Definition TCanvas.cxx:2155; TCanvas::fChUInt_t fChHeight of the canvas along Y (pixels)Definition TCanvas.h:44; TCanvas::fContextMenuTContextMenu * fContextMenu! Context menu pointerDefinition TCanvas.h:58; TCanvas::fCattTAttCanvas fCattCanvas attributes.Definition TCanvas.h:31; TCanvas::SetNamevoid SetName(const char *name="""") overrideSet canvas name.Definition TCanvas.cxx:2047; TCanvas::GetWindowWidthUInt_t GetWindowWidth() constDefinition TCanvas.h:161; TCanvas::fRetainedBool_t fRetainedRetain structure flag.Definition TCanvas.h:61; TCanvas::DisconnectWidgetvoid DisconnectWidget()Used by friend class TCanvasImp.Definition TCanvas.cxx:2558; TCanvas::FeedbackModevoid FeedbackMode(Bool_t set)Turn rubberband feedback mode on or off.Definition TCanvas.cxx:1128; TCanvas::lsvoid ls(Option_t *option="""") const overrideList all pads.Definition TCanvas.cxx:1504; TCanvas::RaiseWindowvoid RaiseWindow()Raise canvas window.Definition TCanvas.cxx:1744; TCanvas::Buildvoid Build()Build a canvas. Called by all constructors.Definition TCanvas.cxx:587; TCanvas::SaveAllstatic Bool_t SaveAll(const std::vector< TPad * > &={}, const char *filename="""", Option_t *option="""")Save provided pads/canvases into the image file(s) Filename can include printf argument for image num...Definition TCanvas.cxx:2654; TCanvas::fWindowTopYInt_t fWindowTopYTop Y position of window (in pixels)Definition TCanvas.h:40; TCanvas::Paintvoid Paint(Option_t *option="""") overridePaint canvas.Definition TCanvas.cxx:1543; TCanvas::kResizeOpaque@ kResizeOpaqueDefinition TCanvas.h:95; TCanvas::kShowToolTips@ kShowToolTipsDefinition TCanvas.h:97; TCanvas::kShowToolBar@ kShowToolBarDefinition TCanvas.h:92; TCanvas::kMo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TCanvas_8cxx_source.html:111154,Feedback,FeedbackModevoid,111154,doc/master/TCanvas_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TCanvas_8cxx_source.html,3,"['Feedback', 'feedback']","['FeedbackMode', 'FeedbackModevoid', 'feedback']"
Usability,"Data. private . ! pointer to the fit data (binned or unbinned data) ; Definition at line 572 of file Fitter.h. ◆ fDataSize. int ROOT::Fit::Fitter::fDataSize = 0. private . size of data sets (need for Fumili or LM fitters) ; Definition at line 560 of file Fitter.h. ◆ fExtObjFunction. const ROOT::Math::IMultiGenFunction* ROOT::Fit::Fitter::fExtObjFunction = nullptr. private . ! pointer to an external FCN ; Definition at line 576 of file Fitter.h. ◆ fFitType. int ROOT::Fit::Fitter::fFitType = 0. private . type of fit (0 undefined, 1 least square, 2 likelihood, 3 binned likelihood) ; Definition at line 558 of file Fitter.h. ◆ fFunc. std::shared_ptr<IModelFunction> ROOT::Fit::Fitter::fFunc. private . ! copy of the fitted function containing on output the fit result ; Definition at line 566 of file Fitter.h. ◆ fFunc_v. std::shared_ptr<IModelFunction_v> ROOT::Fit::Fitter::fFunc_v. private . ! copy of the fitted function containing on output the fit result ; Definition at line 564 of file Fitter.h. ◆ fMinimizer. std::shared_ptr<ROOT::Math::Minimizer> ROOT::Fit::Fitter::fMinimizer. private . ! pointer to used minimizer ; Definition at line 570 of file Fitter.h. ◆ fObjFunction. std::shared_ptr<ROOT::Math::IMultiGenFunction> ROOT::Fit::Fitter::fObjFunction. private . ! pointer to used objective function ; Definition at line 574 of file Fitter.h. ◆ fResult. std::shared_ptr<ROOT::Fit::FitResult> ROOT::Fit::Fitter::fResult. private . ! pointer to the object containing the result of the fit ; Definition at line 568 of file Fitter.h. ◆ fUseGradient. bool ROOT::Fit::Fitter::fUseGradient = false. private . flag to indicate if using gradient or not ; Definition at line 552 of file Fitter.h. Libraries for ROOT::Fit::Fitter:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/Fitter.h; math/mathcore/src/Fitter.cxx. ROOTFitFitter. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html:39063,Guid,Guide,39063,doc/master/classROOT_1_1Fit_1_1Fitter.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1Fitter.html,1,['Guid'],['Guide']
Usability,"Data.h:56; ROOT::Fit::FitData::Sizeunsigned int Size() constreturn number of fit pointsDefinition FitData.h:293; ROOT::Fit::FitData::Addvoid Add(double x)add one dim data with only coordinate and valuesDefinition FitData.h:254; ROOT::Fit::FitData::UnWrapvoid UnWrap()Definition FitData.h:336; ROOT::Fit::FitData::Appendvoid Append(unsigned int newPoints, unsigned int dim=1)Definition FitData.cxx:251; ROOT::Fit::FitData::fMaxPointsunsigned int fMaxPointsDefinition FitData.h:384; ROOT::Fit::FitData::VectorPaddingstatic constexpr unsigned VectorPadding(const unsigned)If VecCore is not defined, there is no vectorization available and the SIMD vector size will always b...Definition FitData.h:372; ROOT::Fit::FitData::fWrappedbool fWrappedDefinition FitData.h:376; ROOT::Fit::FitData::fDimunsigned int fDimDefinition FitData.h:386; ROOT::Fit::FitData::operator=FitData & operator=(const FitData &rhs)Definition FitData.cxx:218; ROOT::Fit::FitData::fNPointsunsigned int fNPointsDefinition FitData.h:385; ROOT::Fit::FitData::Coordsconst double * Coords(unsigned int ipoint) constreturn a pointer to the coordinates data for the given fit pointDefinition FitData.h:236; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17; HFit::FitTFitResultPtr Fit(FitObject *h1, TF1 *f1, Foption_t &option, const ROOT::Math::MinimizerOptions &moption, const char *goption, ROOT::Fit::DataRange &range)Definition HFitImpl.cxx:133; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::Fit::DataOptionsDataOptions : simple structure holding the options on how the data are filled.Definition DataOptions.h:28; ValueDefinition functioncalls.h:15. mathmathcoresrcBinData.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:40 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/BinData_8cxx_source.html:32383,simpl,simple,32383,doc/master/BinData_8cxx_source.html,https://root.cern,https://root.cern/doc/master/BinData_8cxx_source.html,2,"['Guid', 'simpl']","['Guide', 'simple']"
Usability,"Data.hxx:148; ROOT::RGeomVisible::colorstd::string colorcolor in rgb formatDefinition RGeomData.hxx:150; ROOT::RGeomVisible::RGeomVisibleRGeomVisible(int _nodeid, int _seqid, const std::vector< int > &_stack)Definition RGeomData.hxx:155; ROOT::RGeomVisible::riRGeomRenderInfo * rirender information for the shape, can be same for different nodesDefinition RGeomData.hxx:152; ROOT::RGeomVisible::opacitydouble opacityopacityDefinition RGeomData.hxx:151; ROOT::RGeomVisible::nodeidint nodeidselected node id,Definition RGeomData.hxx:147; ROOT::RGeomVisible::RGeomVisibleRGeomVisible()=default; ROOT::RGeomVisible::stackstd::vector< int > stackpath to the node, index in list of childsDefinition RGeomData.hxx:149; TGeoManagerThe manager class for any TGeo geometry.Definition TGeoManager.h:44; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoNodeA node represent a volume positioned inside another.They store links to both volumes and to the TGeoM...Definition TGeoNode.h:39; TGeoShapeBase abstract class for all shapes.Definition TGeoShape.h:25; TGeoVolumeTGeoVolume, TGeoVolumeMulti, TGeoVolumeAssembly are the volume classes.Definition TGeoVolume.h:43; TLockGuardDefinition TVirtualMutex.h:70; TVirtualMutexThis class implements a mutex interface.Definition TVirtualMutex.h:32; bool; nconst Int_t nDefinition legend1.C:16; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::RGeomSignalFunc_tstd::function< void(const std::string &)> RGeomSignalFunc_tDefinition RGeomData.hxx:208; ROOT::RGeomLogExperimental::RLogChannel & RGeomLog()Log channel for Geomviewer diagnostics.Definition RGeomData.cxx:49; ROOT::RGeomScanFunc_tstd::function< bool(RGeomNode &, std::vector< int > &, bool, int)> RGeomScanFunc_tDefinition RGeomData.hxx:206. geomwebviewerincROOTRGeomData.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:16 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RGeomData_8hxx_source.html:44030,Guid,Guide,44030,doc/master/RGeomData_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RGeomData_8hxx_source.html,1,['Guid'],['Guide']
Usability,DataErrorHigh. private . Definition at line 621 of file BinData.h. ◆ fDataErrorHighPtr. const double* ROOT::Fit::BinData::fDataErrorHighPtr. private . Definition at line 624 of file BinData.h. ◆ fDataErrorLow. std::vector< double > ROOT::Fit::BinData::fDataErrorLow. private . Definition at line 622 of file BinData.h. ◆ fDataErrorLowPtr. const double* ROOT::Fit::BinData::fDataErrorLowPtr. private . Definition at line 625 of file BinData.h. ◆ fDataErrorPtr. const double* ROOT::Fit::BinData::fDataErrorPtr. private . Definition at line 623 of file BinData.h. ◆ fDataPtr. const double* ROOT::Fit::BinData::fDataPtr. private . Definition at line 613 of file BinData.h. ◆ fErrorType. ErrorType ROOT::Fit::BinData::fErrorType. private . Definition at line 602 of file BinData.h. ◆ fIsWeighted. bool ROOT::Fit::BinData::fIsWeighted = false. private . flag to indicate weighted data ; Definition at line 603 of file BinData.h. ◆ fpTmpBinEdgeVector. double* ROOT::Fit::BinData::fpTmpBinEdgeVector. private . not threadsafe stuff! ; Definition at line 634 of file BinData.h. ◆ fpTmpCoordErrorVector. double* ROOT::Fit::BinData::fpTmpCoordErrorVector. private . not threadsafe stuff! ; Definition at line 629 of file BinData.h. ◆ fRefVolume. double ROOT::Fit::BinData::fRefVolume. private . reference bin volume - used to normalize the bins in case of variable bins data ; Definition at line 604 of file BinData.h. ◆ fSumContent. double ROOT::Fit::BinData::fSumContent = 0. private . total sum of the bin data content ; Definition at line 605 of file BinData.h. ◆ fSumError2. double ROOT::Fit::BinData::fSumError2 = 0. private . total sum square of the errors ; Definition at line 606 of file BinData.h. Libraries for ROOT::Fit::BinData:. [legend]; The documentation for this class was generated from the following files:; math/mathcore/inc/Fit/BinData.h; math/mathcore/src/BinData.cxx. ROOTFitBinData. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html:31359,Guid,Guide,31359,doc/master/classROOT_1_1Fit_1_1BinData.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1BinData.html,1,['Guid'],['Guide']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE, Bool_t binnedL = kFALSE); virtual RooAbsReal*R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsOptTestStatistic.html:4277,clear,clearValueAndShapeDirty,4277,root/html534/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsOptTestStatistic.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsTestStatistic.html:4232,clear,clearValueAndShapeDirty,4232,root/html534/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html534/RooAbsTestStatistic.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname = 0) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooAbsCachedReal.html:4304,clear,clearValueAndShapeDirty,4304,root/html534/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html534/RooAbsCachedReal.html,15,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*RooAbsTestStatistic::create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsOptTestStatistic.html:4213,clear,clearValueAndShapeDirty,4213,root/html532/RooAbsOptTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsOptTestStatistic.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tcombinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidconstOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& data, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsTestStatistic.html:4168,clear,clearValueAndShapeDirty,4168,root/html532/RooAbsTestStatistic.html,https://root.cern,https://root.cern/root/html532/RooAbsTestStatistic.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsHiddenReal.html:3672,clear,clearValueAndShapeDirty,3672,root/html532/RooAbsHiddenReal.html,https://root.cern,https://root.cern/root/html532/RooAbsHiddenReal.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*RooAbsArg::clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooAbsCachedReal.html:4240,clear,clearValueAndShapeDirty,4240,root/html532/RooAbsCachedReal.html,https://root.cern,https://root.cern/root/html532/RooAbsCachedReal.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& ar",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooStepFunction.html:3938,clear,clearValueAndShapeDirty,3938,root/html532/RooStepFunction.html,https://root.cern,https://root.cern/root/html532/RooStepFunction.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; const RooArgList&coefficients(); virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::no",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooStepFunction.html:4097,clear,clearValueAndShapeDirty,4097,root/html534/RooStepFunction.html,https://root.cern,https://root.cern/root/html534/RooStepFunction.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE, Bool_t binnedL = kFALSE); virtual RooAbsReal*RooAbsReal::createCh",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooNLLVar.html:4886,clear,clearValueAndShapeDirty,4886,root/html534/RooNLLVar.html,https://root.cern,https://root.cern/root/html534/RooNLLVar.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, RooFit::MPSplit, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmd",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooXYChi2Var.html:4492,clear,clearValueAndShapeDirty,4492,root/html534/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html534/RooXYChi2Var.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooChi2Var.html:5418,clear,clearValueAndShapeDirty,5418,root/html534/RooChi2Var.html,https://root.cern,https://root.cern/root/html534/RooChi2Var.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, RooFit::MPSplit interleave = RooFit::BulkPartition, Bool_t verbose = kTRUE, Bool_t = kFALSE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooDataWeightedAverage.html:4259,clear,clearValueAndShapeDirty,4259,root/html534/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html534/RooDataWeightedAverage.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet& projDeps, const char* rangeName, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitRange = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLink",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooNLLVar.html:4713,clear,clearValueAndShapeDirty,4713,root/html532/RooNLLVar.html,https://root.cern,https://root.cern/root/html532/RooNLLVar.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& adata, const RooArgSet&, const char*, const char*, Int_t, Bool_t, Bool_t, Bool_t); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = Ro",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooXYChi2Var.html:4333,clear,clearValueAndShapeDirty,4333,root/html532/RooXYChi2Var.html,https://root.cern,https://root.cern/root/html532/RooXYChi2Var.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& pdf, RooAbsData& dhist, const RooArgSet& projDeps, const char* rangeName = 0, const char* addCoefRangeName = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t splitCutRange = kTRUE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const R",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooChi2Var.html:5211,clear,clearValueAndShapeDirty,5211,root/html532/RooChi2Var.html,https://root.cern,https://root.cern/root/html532/RooChi2Var.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Double_tRooAbsOptTestStatistic::combinedValue(RooAbsReal** gofArray, Int_t nVal) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsTestStatistic*create(const char* name, const char* title, RooAbsReal& real, RooAbsData& adata, const RooArgSet& projDeps, const char* = 0, const char* = 0, Int_t nCPU = 1, Bool_t interleave = kFALSE, Bool_t verbose = kTRUE, Bool_t = kFALSE); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsR",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooDataWeightedAverage.html:4076,clear,clearValueAndShapeDirty,4076,root/html532/RooDataWeightedAverage.html,https://root.cern,https://root.cern/root/html532/RooDataWeightedAverage.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgListcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), con",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooProduct.html:3597,clear,clearValueAndShapeDirty,3597,root/html534/RooProduct.html,https://root.cern,https://root.cern/root/html534/RooProduct.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; RooArgSetcomponents(); virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::non",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooProduct.html:3543,clear,clearValueAndShapeDirty,3543,root/html532/RooProduct.html,https://root.cern,https://root.cern/root/html532/RooProduct.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/Roo1DMomentMorphFunction.html:3570,clear,clearValueAndShapeDirty,3570,root/html532/Roo1DMomentMorphFunction.html,https://root.cern,https://root.cern/root/html532/Roo1DMomentMorphFunction.html,46,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = Roo",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/ParamHistFunc.html:3690,clear,clearValueAndShapeDirty,3690,root/html534/ParamHistFunc.html,https://root.cern,https://root.cern/root/html534/ParamHistFunc.html,177,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& a",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/ParamHistFunc.html:3619,clear,clearValueAndShapeDirty,3619,root/html532/ParamHistFunc.html,https://root.cern,https://root.cern/root/html532/ParamHistFunc.html,8,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none()",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealVar.html:3959,clear,clearValueAndShapeDirty,3959,root/html534/RooRealVar.html,https://root.cern,https://root.cern/root/html534/RooRealVar.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidRooAbsArg::constOptimizeTestStatistic(RooAbsArg::ConstOpCode opcode, Bool_t doAlsoTrackingOpt = kTRUE); virtual voidTNamed::Copy(TObject& named) const; voidcopyCacheFast(const RooRealVar& other, Bool_t setValDirty = kTRUE); static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealVar.html:3895,clear,clearValueAndShapeDirty,3895,root/html532/RooRealVar.html,https://root.cern,https://root.cern/root/html532/RooRealVar.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); static UInt_tRooAbsArg::crc32(const char* data, ULong_t sz, UInt_t crc = 0); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdAr",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooRealMPFE.html:4551,clear,clearValueAndShapeDirty,4551,root/html534/RooRealMPFE.html,https://root.cern,https://root.cern/root/html534/RooRealMPFE.html,3,['clear'],['clearValueAndShapeDirty']
Usability,"DataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); virtual RooFitResult*RooAbsReal::chi2FitTo(RooDataSet& xydata, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const RooCmdArg& arg8 = RooCmdArg::none()); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); static voidRooAbsReal::clearEvalErrorLog(); voidRooAbsArg::clearShapeDirty() const; voidRooAbsArg::clearValueAndShapeDirty() const; voidRooAbsArg::clearValueDirty() const; TIterator*RooAbsArg::clientIterator() const; virtual TObject*clone(const char* newname) const; virtual TObject*RooAbsArg::Clone(const char* newname = 0) const; virtual RooAbsArg*RooAbsArg::cloneTree(const char* newname = 0) const; virtual Int_tRooAbsArg::Compare(const TObject* other) const; virtual voidTNamed::Copy(TObject& named) const; static UInt_tRooAbsArg::crc32(const char* data); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList); virtual RooAbsReal*RooAbsReal::createChi2(RooDataHist& data, const RooCmdArg& arg1 = RooCmdArg::none(), const RooCmdArg& arg2 = RooCmdArg::none(), const RooCmdArg& arg3 = RooCmdArg::none(), const RooCmdArg& arg4 = RooCmdArg::none(), const RooCmdArg& arg5 = RooCmdArg::none(), const RooCmdArg& arg6 = RooCmdArg::none(), const RooCmdArg& arg7 = RooCmdArg::none(), const",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html532/RooRealMPFE.html:4447,clear,clearValueAndShapeDirty,4447,root/html532/RooRealMPFE.html,https://root.cern,https://root.cern/root/html532/RooRealMPFE.html,1,['clear'],['clearValueAndShapeDirty']
Usability,"DataMembers.cxx. ◆ AddLast() [2/2]. void TListOfDataMembers::AddLast ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object at the end of the list and also store option. ; Storing an option is useful when one wants to change the behaviour of an object a little without having to create a complete new copy of the object. This feature is used, for example, by the Draw() method. It allows the same object to be drawn in different ways. ; Reimplemented from THashList.; Definition at line 105 of file TListOfDataMembers.cxx. ◆ Class(). static TClass * TListOfDataMembers::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TListOfDataMembers::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TListOfDataMembers::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 102 of file TListOfDataMembers.h. ◆ Clear(). void TListOfDataMembers::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the THashList is the owner (set via SetOwner()). ; Reimplemented from THashList.; Definition at line 160 of file TListOfDataMembers.cxx. ◆ DeclFileName(). static const char * TListOfDataMembers::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 102 of file TListOfDataMembers.h. ◆ Delete(). void TListOfDataMembers::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TDataMember object files. ; Reimplemented from THashList.; Definition at line 171 of file TListOfDataMembers.cxx. ◆ Find(). TDictionary * TListOfDataMembers::Find ; (; DeclId_t ; id); const. Return (after creating it if necessary) the TDataMember describing the data member corresponding to the Decl 'id'. ; Definition at line 205 of file TListOfDataMembers.cxx. ◆ FindObject() [1/3]. TObject * THashList::FindObject ; (; const cha",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:27780,Clear,Clear,27780,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,1,['Clear'],['Clear']
Usability,"DataRange(double xmin, double xmax)ROOT::Fit::DataRange; DataRange(double xmin, double xmax, double ymin, double ymax)ROOT::Fit::DataRange; DataRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)ROOT::Fit::DataRange; fRangesROOT::Fit::DataRangeprivate; GetInfRange(double &x1, double &x2)ROOT::Fit::DataRangeprotectedstatic; GetRange(unsigned int irange, unsigned int icoord, double &xmin, double &xmax) constROOT::Fit::DataRangeinline; GetRange(unsigned int icoord, double &xmin, double &xmax) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, double &ymin, double &ymax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double &xmin, double &xmax, double &ymin, double &ymax, double &zmin, double &zmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; GetRange(double *xmin, double *xmax, unsigned int irange=0) constROOT::Fit::DataRangeinline; IsInside(double x, unsigned int icoord=0) constROOT::Fit::DataRange; IsInside(const double *x) constROOT::Fit::DataRangeinline; IsSet() constROOT::Fit::DataRangeinline; NDim() constROOT::Fit::DataRangeinline; operator()(unsigned int icoord=0, unsigned int irange=0) constROOT::Fit::DataRange; RangeIntervals typedefROOT::Fit::DataRange; Ranges(unsigned int icoord=0) constROOT::Fit::DataRangeinline; RangeSet typedefROOT::Fit::DataRange; SetRange(unsigned int icoord, double xmin, double xmax)ROOT::Fit::DataRange; SetRange(double xmin, double xmax)ROOT::Fit::DataRangeinline; SetRange(double xmin, double xmax, double ymin, double ymax)ROOT::Fit::DataRangeinline; SetRange(double xmin, double xmax, double ymin, double ymax, double zmin, double zmax)ROOT::Fit::DataRangeinline; Size(unsigned int icoord=0) constROOT::Fit::DataRangeinline; ~DataRange()ROOT::Fit::DataRangeinline. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:15 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange-members.html:2699,Guid,Guide,2699,doc/master/classROOT_1_1Fit_1_1DataRange-members.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Fit_1_1DataRange-members.html,1,['Guid'],['Guide']
Usability,"DataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTDataSet::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. voidAddElement(const char* path, TTable::EColumnType type); voidTDataSet::AddMain(TDataSet* set); voidAddResponse(const char* chit); voidAddVolumePath(const char* path); Bool_tTTable::BoundsOk(const char* where, Int_t at) const; virtual voidTTable::Clear(Option_t* opt = """"); voidTTable::CopyStruct(Char_t* dest, const Char_t* src); Char_t*TTable::Create(); virtual voidTTable::Delete(Option_t* opt = """"); virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual Bool_tTTable::EntryLoop(const Char_t* exprFileName, Int_t& action, TObject* obj, Int_t nentries = 1000000000, Int_t firstentry = 0, Option_t* option = """"); virtual TTableDescriptor*TGenericTable::GetDescriptorPointer() const; TDataSet*TDataSet::GetRealParent(); voidTDataSet::MakeCollection(); voidTObject::MakeZombie(); Bool_tTTable::OutOfBoundsError(const char* where, Int_t i) const; voidTTable::ReAlloc(Int_t newsize); virtual voidTGenericTable::SetDescriptorPointer(TTableDescriptor* list); Int_tTTable::SetfN(Long_t len); voidTGenericTable::SetGenericType(); virtual voidTDataSet::SetMother(TObject* mother); voidTTable::SetTablePointer(void* table); virtual voidTTable::SetType(const char*const type); voidTTable::SetUsedRows(Int_t n); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds); static TDataSet::EDataSetPassTDataSet::SortIt(TDataSet* ds, void* user); voidTTable::StreamerHeader(TBuffer& b, Version_t version = 3); voidTTable::StreamerTable(TBuffer& b, Version_t version = 3); static const char*TTable::TableDictionary(const char* className, const char* structName, TTableDescriptor*& ColDescriptors). Data Members; public:. static const char*TTable::fgTypeName[13]; static TDataSet::EDataSetPassTDataSet::kAll; static TDataSet::ESetBitsTDataSet::kArray; static TObject::(anonymous)",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/TResponseTable.html:11972,Clear,Clear,11972,root/html602/TResponseTable.html,https://root.cern,https://root.cern/root/html602/TResponseTable.html,2,['Clear'],['Clear']
Usability,"DataStore(const RooCompositeDataStore& other, const RooArgSet& vars, const char* newname = 0); RooCompositeDataStore(const char* name, const char* title, const RooArgSet& vars, RooCategory& indexCat, map<std::string,RooAbsDataStore*> inputData); virtual~RooCompositeDataStore(); voidTObject::AbstractMethod(const char* method) const; virtual RooAbsArg*addColumn(RooAbsArg& var, Bool_t adjustRange = kTRUE); virtual RooArgSet*addColumns(const RooArgList& varList); virtual voidappend(RooAbsDataStore& other); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); virtual voidcacheArgs(const RooAbsArg* owner, RooArgSet& varSet, const RooArgSet* nset = 0); const RooArgSet&RooAbsDataStore::cachedVars() const; virtual const RooAbsArg*cacheOwner(); virtual Bool_tchangeObservableName(const char* from, const char* to); virtual voidRooAbsDataStore::checkInit() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual RooAbsDataStore*clone(const RooArgSet& vars, const char* newname = 0) const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tRooAbsDataStore::defaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html526/RooCompositeDataStore.html:1615,Clear,Clear,1615,root/html526/RooCompositeDataStore.html,https://root.cern,https://root.cern/root/html526/RooCompositeDataStore.html,3,['Clear'],['Clear']
Usability,"DecisionTreeNode::fFisherCoeff. protected . the fisher coeff (offset at the last element) ; Definition at line 380 of file DecisionTreeNode.h. ◆ fgIsTraining. Bool_t TMVA::DecisionTreeNode::fgIsTraining = false. staticprotected . static variable to flag training phase in which we need fTrainInfo ; Definition at line 377 of file DecisionTreeNode.h. ◆ fgTmva_Version_Code. UInt_t TMVA::DecisionTreeNode::fgTmva_Version_Code = 0. staticprotected . set only when read from weightfile ; Definition at line 378 of file DecisionTreeNode.h. ◆ fIsTerminalNode. Bool_t TMVA::DecisionTreeNode::fIsTerminalNode. protected . ! flag to set node as terminal (i.e., without deleting its descendants) ; Definition at line 391 of file DecisionTreeNode.h. ◆ fNodeType. Int_t TMVA::DecisionTreeNode::fNodeType. protected . Type of node: -1 == Bkg-leaf, 1 == Signal-leaf, 0 = internal. ; Definition at line 388 of file DecisionTreeNode.h. ◆ fPurity. Float_t TMVA::DecisionTreeNode::fPurity. protected . the node purity ; Definition at line 389 of file DecisionTreeNode.h. ◆ fResponse. Float_t TMVA::DecisionTreeNode::fResponse. protected . response value in case of regression ; Definition at line 386 of file DecisionTreeNode.h. ◆ fRMS. Float_t TMVA::DecisionTreeNode::fRMS. protected . response RMS of the regression node ; Definition at line 387 of file DecisionTreeNode.h. ◆ fSelector. Short_t TMVA::DecisionTreeNode::fSelector. protected . index of variable used in node selection (decision tree) ; Definition at line 384 of file DecisionTreeNode.h. ◆ fTrainInfo. DTNodeTrainingInfo* TMVA::DecisionTreeNode::fTrainInfo. mutableprotected . Definition at line 393 of file DecisionTreeNode.h. Libraries for TMVA::DecisionTreeNode:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/DecisionTreeNode.h; tmva/tmva/src/DecisionTreeNode.cxx. TMVADecisionTreeNode. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:31 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html:40267,Guid,Guide,40267,doc/master/classTMVA_1_1DecisionTreeNode.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1DecisionTreeNode.html,1,['Guid'],['Guide']
Usability,"Def(name, id)Definition Rtypes.h:342; typeOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t Float_t Float_t Int_t Int_t UInt_t UInt_t Rectangle_t Int_t Int_t Window_t TString Int_t GCValues_t GetPrimarySelectionOwner GetDisplay GetScreen GetColormap GetNativeEvent const char const char dpyName wid window const char font_name cursor keysym reg const char only_if_exist regb h Point_t winding char text const char depth char const char Int_t count const char ColorStruct_t color const char Pixmap_t Pixmap_t PictureAttributes_t attr const char char ret_data h unsigned char height h Atom_t Int_t ULong_t ULong_t unsigned char prop_list Atom_t Atom_t Atom_t Time_t typeDefinition TGWin32VirtualXProxy.cxx:249; TMatrixDfwd.h; TH1TH1 is the base class of all histogram classes in ROOT.Definition TH1.h:59; TMVA::BinarySearchTreeA simple Binary search tree including a volume search method.Definition BinarySearchTree.h:65; TMVA::DataSetInfoClass that contains all the data information.Definition DataSetInfo.h:62; TMVA::IFitterTargetInterface for a fitter 'target'.Definition IFitterTarget.h:44; TMVA::IMethodInterface for all concrete MVA method implementations.Definition IMethod.h:53; TMVA::MethodBaseVirtual base Class for all MVA method.Definition MethodBase.h:111; TMVA::MethodBase::MethodCutsfriend class MethodCutsDefinition MethodBase.h:603; TMVA::MethodBase::ReadWeightsFromStreamvirtual void ReadWeightsFromStream(std::istream &)=0; TMVA::MethodCutsMultivariate optimisation of signal efficiency for given background efficiency, applying rectangular ...Definition MethodCuts.h:61; TMVA::MethodCuts::fRandomTRandom * fRandomrandom generator for MC optimisation methodDefinition MethodCuts.h:194; TMVA::MethodCuts::fEffRefDouble_t fEffRefreference efficiencyDefinition MethodCuts.h:192; TMVA::MethodCuts::fFitMethodSTString fFitMethodSc",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/MethodCuts_8h_source.html:10999,simpl,simple,10999,doc/master/MethodCuts_8h_source.html,https://root.cern,https://root.cern/doc/master/MethodCuts_8h_source.html,1,['simpl'],['simple']
Usability,"Def_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ; ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMultiLayerPerceptron.html:15771,Clear,Clear,15771,doc/master/classTMultiLayerPerceptron.html,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html,1,['Clear'],['Clear']
Usability,"Definition RCanvas.cxx:239; ROOT::Experimental::RCanvas::SetWidthvoid SetWidth(int width)Set canvas width.Definition RCanvas.hxx:105; ROOT::Experimental::RCanvas::GetCanvasconst RCanvas * GetCanvas() const overrideAccess to the top-most canvas, if any (const version).Definition RCanvas.hxx:92; ROOT::Experimental::RCanvas::RCanvasRCanvas()Create a temporary RCanvas; for long-lived ones please use Create().Definition RCanvas.hxx:88; ROOT::Experimental::RCanvas::Modifiedvoid Modified(std::shared_ptr< RDrawable > drawable)Set newest version to specified drawable.Definition RCanvas.hxx:152; ROOT::Experimental::RCanvas::Modifiedvoid Modified()Definition RCanvas.hxx:149; ROOT::Experimental::RCanvas::GetWidthint GetWidth() constGet canvas width.Definition RCanvas.hxx:111; ROOT::Experimental::RCanvas::AddPanelbool AddPanel(std::shared_ptr< PANEL > &panel)Insert panel into the canvas, canvas should be shown at this moment.Definition RCanvas.hxx:139; ROOT::Experimental::RCanvas::ClearUpdatedvoid ClearUpdated()clear IsUpdated() flagDefinition RCanvas.hxx:169; ROOT::Experimental::RCanvas::~RCanvas~RCanvas() override=default; ROOT::Experimental::RCanvas::Hidevoid Hide()Hide all canvas displays.Definition RCanvas.cxx:171; ROOT::Experimental::RChangeAttrRequestDefinition RCanvas.hxx:24; ROOT::Experimental::RChangeAttrRequest::valuesstd::vector< std::unique_ptr< RAttrMap::Value_t > > valuesarray of valuesDefinition RCanvas.hxx:27; ROOT::Experimental::RChangeAttrRequest::namesstd::vector< std::string > namesarray of attribute namesDefinition RCanvas.hxx:26; ROOT::Experimental::RChangeAttrRequest::idsstd::vector< std::string > idsarray of idsDefinition RCanvas.hxx:25; ROOT::Experimental::RChangeAttrRequest::~RChangeAttrRequest~RChangeAttrRequest() override=default; ROOT::Experimental::RChangeAttrRequest::NeedCanvasUpdatebool NeedCanvasUpdate() const overrideDefinition RCanvas.hxx:36; ROOT::Experimental::RChangeAttrRequest::RChangeAttrRequestRChangeAttrRequest()=default; ROOT::Experime",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/RCanvas_8hxx_source.html:13491,Clear,ClearUpdatedvoid,13491,doc/master/RCanvas_8hxx_source.html,https://root.cern,https://root.cern/doc/master/RCanvas_8hxx_source.html,3,"['Clear', 'clear']","['ClearUpdated', 'ClearUpdatedvoid', 'clear']"
Usability,"Definition RtypesCore.h:46; kFALSEconstexpr Bool_t kFALSEDefinition RtypesCore.h:94; Double_tdouble Double_tDefinition RtypesCore.h:59; Option_tconst char Option_tDefinition RtypesCore.h:66; ClassImp#define ClassImp(name)Definition Rtypes.h:382; kRed@ kRedDefinition Rtypes.h:66; kGreen@ kGreenDefinition Rtypes.h:66; kBlue@ kBlueDefinition Rtypes.h:66; ClassDefOverride#define ClassDefOverride(name, id)Definition Rtypes.h:346; TAtt3D.h; TBuffer3DTypes.h; TBuffer3D.h; optionOption_t Option_t optionDefinition TGWin32VirtualXProxy.cxx:44; TObject.h; TVirtualPad.h; gPad#define gPadDefinition TVirtualPad.h:308; TVirtualViewer3D.h; TAtt3DUse this attribute class when an object should have 3D capabilities.Definition TAtt3D.h:19; TBuffer3DTypes::kGeneric@ kGenericDefinition TBuffer3DTypes.h:24; TBuffer3DGeneric 3D primitive description class.Definition TBuffer3D.h:18; TBuffer3D::kBoundingBox@ kBoundingBoxDefinition TBuffer3D.h:51; TBuffer3D::kNone@ kNoneDefinition TBuffer3D.h:49; TBuffer3D::kShapeSpecific@ kShapeSpecificDefinition TBuffer3D.h:52; TBuffer3D::kRaw@ kRawDefinition TBuffer3D.h:54; TBuffer3D::kRawSizes@ kRawSizesDefinition TBuffer3D.h:53; TBuffer3D::kCore@ kCoreDefinition TBuffer3D.h:50; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::Drawvirtual void Draw(Option_t *option="""")Default Draw method for all objects.Definition TObject.cxx:280; TObject::Paintvirtual void Paint(Option_t *option="""")This method must be overridden if a class wants to paint itself.Definition TObject.cxx:612; TVirtualViewer3DAbstract 3D shapes viewer.Definition TVirtualViewer3D.h:34; TVirtualViewer3D::AddObjectvirtual Int_t AddObject(const TBuffer3D &buffer, Bool_t *addChildren=nullptr)=0; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; Drawth1 Draw(); AuthorRichard Maunder ; Definition in file viewer3DMaster.C. tutorialsglviewer3DMaster.C. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:41:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/viewer3DMaster_8C.html:13928,Guid,Guide,13928,doc/master/viewer3DMaster_8C.html,https://root.cern,https://root.cern/doc/master/viewer3DMaster_8C.html,1,['Guid'],['Guide']
Usability,"Definition TDictionary.h:222; TDictionary::operator=TDictionary & operator=(const TDictionary &other)Definition TDictionary.cxx:63; TDictionary::GetDictionarystatic TDictionary * GetDictionary(const char *name)Retrieve the type (class, fundamental type, typedef etc) named ""name"".Definition TDictionary.cxx:90; TDictionary::TDictionaryTDictionary()Definition TDictionary.h:178; TDictionary::DeclId_tconst void * DeclId_tDefinition TDictionary.h:224; TDictionary::CreateAttributeMapvoid CreateAttributeMap()Definition TDictionary.cxx:76; TDictionary::~TDictionaryvirtual ~TDictionary()Definition TDictionary.cxx:57; TNamedThe TNamed class is the base class for all named ROOT classes.Definition TNamed.h:29; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::kSTLbitset@ kSTLbitsetDefinition ESTLType.h:37; ROOT::kSTLmap@ kSTLmapDefinition ESTLType.h:33; ROOT::kSTLunorderedmultiset@ kSTLunorderedmultisetDefinition ESTLType.h:43; ROOT::kSTLset@ kSTLsetDefinition ESTLType.h:35; ROOT::kSTLmultiset@ kSTLmultisetDefinition ESTLType.h:36; ROOT::kSTLdeque@ kSTLdequeDefinition ESTLType.h:32; ROOT::kSTLvector@ kSTLvectorDefinition ESTLType.h:30; ROOT::kSTLunorderedmultimap@ kSTLunorderedmultimapDefinition ESTLType.h:45; ROOT::kSTLunorderedset@ kSTLunorderedsetDefinition ESTLType.h:42; ROOT::kSTLlist@ kSTLlistDefinition ESTLType.h:31; ROOT::kSTLforwardlist@ kSTLforwardlistDefinition ESTLType.h:41; ROOT::kSTLunorderedmap@ kSTLunorderedmapDefinition ESTLType.h:44; ROOT::kNotSTL@ kNotSTLDefinition ESTLType.h:29; ROOT::kSTLmultimap@ kSTLmultimapDefinition ESTLType.h:34; ROOT::EFunctionMatchModeEFunctionMatchModeDefinition TDictionary.h:161; ROOT::kExactMatch@ kExactMatchDefinition TDictionary.h:162; ROOT::kConversionMatch@ kConversionMatchDefinition TDictionary.h:163. coremetaincTDictionary.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TDictionary_8h_source.html:16498,Guid,Guide,16498,doc/master/TDictionary_8h_source.html,https://root.cern,https://root.cern/doc/master/TDictionary_8h_source.html,1,['Guid'],['Guide']
Usability,"Definition TFumili.cxx:558; TFumili::fSDouble_t fSfS - objective function value (return)Definition TFumili.h:57; TFumili::fEPSDouble_t fEPSfEPS - required precision of parameters. If fEPS<0 thenDefinition TFumili.h:58; TFumili::FitChisquareIvirtual void FitChisquareI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Chisquare method.Definition TFumili.cxx:1809; TFumili::fNfcnInt_t fNfcnNumber of FCN calls;.Definition TFumili.h:15; TFumili::fLastFixedInt_t fLastFixedLast fixed parameter number.Definition TFumili.h:23; TFumili::BuildArraysvoid BuildArrays()Allocates memory for internal arrays.Definition TFumili.cxx:182; TFumili::fZDouble_t * fZ[fMaxParam2] Inverse fZ0 matrix - covariance matrixDefinition TFumili.h:37; TFumili::fLogLikeBool_t fLogLikeLogLikelihood flag.Definition TFumili.h:31; TFumili::fNED1Int_t fNED1Number of experimental vectors X=(x1,x2,...xK)Definition TFumili.h:16; TFumili::Clearvoid Clear(Option_t *opt="""") overrideResets all parameter names, values and errors to zero.Definition TFumili.cxx:242; TFumili::fGrDouble_t * fGr[fMaxParam] Gradients of objective functionDefinition TFumili.h:38; TFumili::fGTDouble_t fGTExpected function change in next iteration.Definition TFumili.h:61; TFumili::SetParameterInt_t SetParameter(Int_t ipar, const char *parname, Double_t value, Double_t verr, Double_t vlow, Double_t vhigh) overrideSets for parameter number ipar initial parameter value, name parname, initial error verr and limits v...Definition TFumili.cxx:1641; TFumili::fCwordTString fCwordCommand string.Definition TFumili.h:63; TFumili::FitLikelihoodIvirtual void FitLikelihoodI(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag)Minimization function for H1s using a Likelihood method.Definition TFumili.cxx:1972; TFumili::fRPDouble_t fRPPrecision of fit ( machine zero on CDC 6000) quite old yeh?Definition TFumili.h:59; TFumili::fCmParDouble_t * fCmPar[fMaxParam] parameters of commandsDefinition ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFumili_8cxx_source.html:75751,Clear,Clearvoid,75751,doc/master/TFumili_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFumili_8cxx_source.html,4,['Clear'],"['Clear', 'Clearvoid']"
Usability,"Definition TGeoManager.h:78; TGeoManager::SortOverlapsvoid SortOverlaps()Sort overlaps by decreasing overlap distance. Extrusions comes first.Definition TGeoManager.cxx:2476; TGeoManager::DisableInactiveVolumesvoid DisableInactiveVolumes()Definition TGeoManager.h:362; TGeoManager::SetCurrentPointvoid SetCurrentPoint(Double_t x, Double_t y, Double_t z)Definition TGeoManager.h:516; TGeoManager::SetCurrentDirectionvoid SetCurrentDirection(Double_t nx, Double_t ny, Double_t nz)Definition TGeoManager.h:519; TGeoManager::GetMaxThreadsInt_t GetMaxThreads() constDefinition TGeoManager.h:438; TGeoManager::MakeEltuTGeoVolume * MakeEltu(const char *name, TGeoMedium *medium, Double_t a, Double_t b, Double_t dz)Make in one step a volume pointing to a tube shape with given medium.Definition TGeoManager.cxx:3222; TGeoManager::IsEnteringBool_t IsEntering() constDefinition TGeoManager.h:402; TGeoManager::PopPathBool_t PopPath()Definition TGeoManager.h:592; TGeoManager::RemoveNavigatorvoid RemoveNavigator(const TGeoNavigator *nav)Clear a single navigator.Definition TGeoManager.cxx:899; TGeoManager::MasterToTopvoid MasterToTop(const Double_t *master, Double_t *top) constConvert coordinates from master volume frame to top.Definition TGeoManager.cxx:4257; TGeoManager::fStreamVoxelsBool_t fStreamVoxelsflag volume lists loopDefinition TGeoManager.h:81; TGeoManager::IsStepExitingBool_t IsStepExiting() constDefinition TGeoManager.h:405; TGeoMaterialBase class describing materials.Definition TGeoMaterial.h:34; TGeoMatrixGeometrical transformation package.Definition TGeoMatrix.h:38; TGeoMediumMedia are used to store properties related to tracking and which are useful only when using geometry ...Definition TGeoMedium.h:23; TGeoNavigatorArrayDefinition TGeoNavigator.h:294; TGeoNavigatorClass providing navigation API for TGeo geometries.Definition TGeoNavigator.h:32; TGeoNavigator::GetMotherTGeoNode * GetMother(Int_t up=1) constDefinition TGeoNavigator.h:155; TGeoNavigator::IsStepExitingBool_t I",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGeoManager_8h_source.html:94134,Clear,Clear,94134,doc/master/TGeoManager_8h_source.html,https://root.cern,https://root.cern/doc/master/TGeoManager_8h_source.html,1,['Clear'],['Clear']
Usability,"Definition TSeq.hxx:154; ROOT::TSeq::iterator::operator+iterator operator+(difference_type v) constDefinition TSeq.hxx:113; ROOT::TSeq::iterator::operator<=bool operator<=(const iterator &other) constDefinition TSeq.hxx:160; ROOT::TSeq::iterator::operator--iterator & operator--()Definition TSeq.hxx:135; ROOT::TSeq::iterator::fStepT fStepDefinition TSeq.hxx:91; ROOT::TSeq::iterator::fCounterT fCounterDefinition TSeq.hxx:90; ROOT::TSeq::iterator::operator--iterator operator--(int)Definition TSeq.hxx:139; ROOT::TSeqA pseudo container class which is a generator of indices.Definition TSeq.hxx:67; ROOT::TSeq::fEndconst T fEndDefinition TSeq.hxx:73; ROOT::TSeq::difference_typetypename std::make_signed< T >::type difference_typeDefinition TSeq.hxx:77; ROOT::TSeq::value_typeT value_typeDefinition TSeq.hxx:76; ROOT::TSeq::beginiterator begin() constDefinition TSeq.hxx:172; ROOT::TSeq::fBeginconst T fBeginDefinition TSeq.hxx:72; ROOT::TSeq::emptybool empty() constDefinition TSeq.hxx:197; ROOT::TSeq::stepT step() constDefinition TSeq.hxx:193; ROOT::TSeq::operator[]T operator[](T s) constDefinition TSeq.hxx:185; ROOT::TSeq::sizestd::size_t size() constDefinition TSeq.hxx:189; ROOT::TSeq::TSeqTSeq(T theEnd)Definition TSeq.hxx:79; ROOT::TSeq::frontT const & front() constDefinition TSeq.hxx:181; ROOT::TSeq::enditerator end() constDefinition TSeq.hxx:175; ROOT::TSeq::checkIntegralTypevoid checkIntegralType()Definition TSeq.hxx:69; ROOT::TSeq::fStepconst T fStepDefinition TSeq.hxx:74; ROOT::TSeq::TSeqTSeq(T theBegin, T theEnd, T theStep=1)Definition TSeq.hxx:82; ROOTtbb::task_arena is an alias of tbb::interface7::task_arena, which doesn't allow to forward declare tb...Definition EExecutionPolicy.hxx:4; ROOT::MakeSeqTSeq< T > MakeSeq(T end)Definition TSeq.hxx:209; TMVA_SOFIE_GNN.endendDefinition TMVA_SOFIE_GNN.py:207; v@ vDefinition rootcling_impl.cxx:3699. corecontincROOTTSeq.hxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:08 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TSeq_8hxx_source.html:10347,Guid,Guide,10347,doc/master/TSeq_8hxx_source.html,https://root.cern,https://root.cern/doc/master/TSeq_8hxx_source.html,1,['Guid'],['Guide']
Usability,"Definition TThreadSlots.h:34; ROOT::kSTLmap@ kSTLmapDefinition ESTLType.h:33; ROOT::kSTLmultimap@ kSTLmultimapDefinition ESTLType.h:34; TClassEdit::STLKindROOT::ESTLType STLKind(std::string_view type)Converts STL container name to number.Definition TClassEdit.cxx:528; TClassEdit::IsStdPairbool IsStdPair(std::string_view name)Definition TClassEdit.h:184; TClassEdit::IsSTLContROOT::ESTLType IsSTLCont(std::string_view type)type : type name: vector<list<classA,allocator>,allocator> result: 0 : not stl container code of cont...Definition TClassEdit.cxx:1378; TClassEdit::GetSplitint GetSplit(const char *type, std::vector< std::string > &output, int &nestedLoc, EModType mode=TClassEdit::kNone)Stores in output (after emptying it) the split type.Definition TClassEdit.cxx:1029; TClassEdit::kLong64@ kLong64Definition TClassEdit.h:85; TMVA_SOFIE_GNN.startstartDefinition TMVA_SOFIE_GNN.py:200; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; genreflexDefinition rootcling_impl.cxx:141; whatstatic const char * whatDefinition stlLoader.cc:5; FileStat_tDefinition TSystem.h:122; FileStat_t::fModeInt_t fModeDefinition TSystem.h:125; ROOT::RCompressionSetting::EAlgorithm::kUndefined@ kUndefinedUndefined compression algorithm (must be kept the last of the list in case a new algorithm is added).Definition Compression.h:105; ROOT::RCompressionSetting::ELevel::kUseMin@ kUseMinCompression level reserved when we are not sure what to use (1 is for the fastest compression)Definition Compression.h:72; RedirectHandle_tDefinition TSystem.h:207; RedirectHandle_t::fFileTString fFileDefinition TSystem.h:208; TFile::InfoListRetSimple struct of the return value of GetStreamerInfoListImpl.Definition TFile.h:145; TFile::InfoListRet::fListTList * fListDefinition TFile.h:146; Drawth1 Draw(); lTLine lDefinition textangle.C:4. ioiosrcTFile.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:37 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TFile_8cxx_source.html:256039,Guid,Guide,256039,doc/master/TFile_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TFile_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Definition TTimer.h:75; TTimer::Resetvoid Reset()Reset the timer.Definition TTimer.cxx:159; TTimer::CheckTimerBool_t CheckTimer(const TTime &now)Check if timer timed out.Definition TTimer.cxx:130; TTimer::SetObjectvoid SetObject(TObject *object)Set the object to be notified at time out.Definition TTimer.cxx:186; TTimer::SingleShotstatic void SingleShot(Int_t milliSec, const char *receiver_class, void *receiver, const char *method)This static function calls a slot after a given time interval.Definition TTimer.cxx:258; TTimer::Addvoid Add() overrideDefinition TTimer.h:85; TTimer::fObjectTObject * fObjectDefinition TTimer.h:60; TTimer::SetTimevoid SetTime(Long_t milliSec)Definition TTimer.h:91; TTimer::fAbsTimeTTime fAbsTimeDefinition TTimer.h:55; TTimer::IsInterruptingSyscallsBool_t IsInterruptingSyscalls() constDefinition TTimer.h:82; TTimer::HasTimedOutBool_t HasTimedOut() constDefinition TTimer.h:79; TTimer::GetTimeTTime GetTime() constDefinition TTimer.h:76; TTimer::Removevoid Remove() overrideDefinition TTimer.h:86; TTimer::fTimeoutBool_t fTimeoutDefinition TTimer.h:56; TTimer::TTimerTTimer(const TTimer &)=delete; TTimer::IsSyncBool_t IsSync() constDefinition TTimer.h:80; TTimer::NotifyBool_t Notify() overrideNotify when timer times out.Definition TTimer.cxx:145; TTimer::fSyncBool_t fSyncDefinition TTimer.h:57; TTimer::IsRunningBool_t IsRunning()This function checks if the timer is running within gSystem (Has been started and did not finish yet)...Definition TTimer.cxx:279; TTimer::operator=TTimer & operator=(const TTimer &)=delete; TTimer::Stopvirtual void Stop()Definition TTimer.h:94; TTimer::GetTimerIDUInt_t GetTimerID()Definition TTimer.h:77; TTimer::fIntSyscallsBool_t fIntSyscallsDefinition TTimer.h:58; TTimer::Timeoutvirtual void Timeout()Definition TTimer.h:97; TTimer::fTimeIDUInt_t fTimeIDDefinition TTimer.h:59; bool; unsigned int. corebaseincTTimer.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:04 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TTimer_8h_source.html:8512,Guid,Guide,8512,doc/master/TTimer_8h_source.html,https://root.cern,https://root.cern/doc/master/TTimer_8h_source.html,1,['Guid'],['Guide']
Usability,"Definition at line 224 of file TTVSession.cxx. ◆ SaveSource(). void TTVSession::SaveSource ; (; std::ofstream & ; out). Save the TTVSession in a C++ macro file. ; Definition at line 255 of file TTVSession.cxx. ◆ SetName(). void TTVSession::SetName ; (; const char * ; name). inline . Definition at line 88 of file TTVSession.h. ◆ SetRecordName(). void TTVSession::SetRecordName ; (; const char * ; name). Set record name. ; Definition at line 211 of file TTVSession.cxx. ◆ Show(). void TTVSession::Show ; (; TTVRecord * ; rec). Display record rec. ; Definition at line 244 of file TTVSession.cxx. ◆ Streamer(). void TTVSession::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TTVSession::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 104 of file TTVSession.h. ◆ UpdateRecord(). void TTVSession::UpdateRecord ; (; const char * ; name). Updates current record according to new X, Y, Z settings. ; Definition at line 272 of file TTVSession.cxx. Member Data Documentation. ◆ fCurrent. Int_t TTVSession::fCurrent. private . Index of current record. ; Definition at line 81 of file TTVSession.h. ◆ fList. TClonesArray* TTVSession::fList. private . List of TV records. ; Definition at line 78 of file TTVSession.h. ◆ fName. TString TTVSession::fName. private . Name of this session. ; Definition at line 79 of file TTVSession.h. ◆ fRecords. Int_t TTVSession::fRecords. private . Number of records. ; Definition at line 82 of file TTVSession.h. ◆ fViewer. TTreeViewer* TTVSession::fViewer. private . Associated tree viewer. ; Definition at line 80 of file TTVSession.h. Libraries for TTVSession:. [legend]; The documentation for this class was generated from the following files:; tree/treeviewer/inc/TTVSession.h; tree/treeviewer/src/TTVSession.cxx. TTVSession. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:41 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTVSession.html:15291,Guid,Guide,15291,doc/master/classTTVSession.html,https://root.cern,https://root.cern/doc/master/classTTVSession.html,1,['Guid'],['Guide']
Usability,Definition at line 2895 of file RooWorkspace.cxx. ◆ Class(). static TClass * RooWorkspace::WSDir::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooWorkspace::WSDir::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooWorkspace::WSDir::Class_Version ; (; ). inlinestaticconstexpr . do not persist ; ReturnsVersion of this class ; Definition at line 240 of file RooWorkspace.h. ◆ DeclFileName(). static const char * RooWorkspace::WSDir::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 240 of file RooWorkspace.h. ◆ InternalAppend(). void RooWorkspace::WSDir::InternalAppend ; (; TObject * ; obj). protected . Internal access to TDirectory append method. ; Definition at line 2873 of file RooWorkspace.cxx. ◆ IsA(). TClass * RooWorkspace::WSDir::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TDirectoryFile.; Definition at line 240 of file RooWorkspace.h. ◆ Streamer(). void RooWorkspace::WSDir::Streamer ; (; TBuffer & ; b). overridevirtual . Stream a class object. ; Reimplemented from TDirectoryFile. ◆ StreamerNVirtual(). void RooWorkspace::WSDir::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 240 of file RooWorkspace.h. Friends And Related Symbol Documentation. ◆ RooWorkspace. friend class RooWorkspace. friend . Definition at line 236 of file RooWorkspace.h. Member Data Documentation. ◆ _wspace. RooWorkspace* RooWorkspace::WSDir::_wspace. protected . Definition at line 238 of file RooWorkspace.h. Libraries for RooWorkspace::WSDir:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooWorkspace.h; roofit/roofitcore/src/RooWorkspace.cxx. RooWorkspaceWSDir. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:12 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html:26763,Guid,Guide,26763,doc/master/classRooWorkspace_1_1WSDir.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html,1,['Guid'],['Guide']
Usability,Definition at line 36 of file TGResourcePool.h. ◆ fSelbgndGC. TGGC* TGResourcePool::fSelbgndGC. private . selection background gc ; Definition at line 72 of file TGResourcePool.h. ◆ fSelForeColor. Pixel_t TGResourcePool::fSelForeColor. private . default selection foreground color ; Definition at line 37 of file TGResourcePool.h. ◆ fSelGC. TGGC* TGResourcePool::fSelGC. private . selection gc ; Definition at line 71 of file TGResourcePool.h. ◆ fShadow. Pixel_t TGResourcePool::fShadow. private . default shadow color ; Definition at line 34 of file TGResourcePool.h. ◆ fShadowGC. TGGC* TGResourcePool::fShadowGC. private . frame shadow gc ; Definition at line 67 of file TGResourcePool.h. ◆ fStatusFont. TGFont* TGResourcePool::fStatusFont. private . status bar font ; Definition at line 53 of file TGResourcePool.h. ◆ fTextCursor. Cursor_t TGResourcePool::fTextCursor. private . text cursor ; Definition at line 80 of file TGResourcePool.h. ◆ fTipBackColor. Pixel_t TGResourcePool::fTipBackColor. private . default tip background color ; Definition at line 40 of file TGResourcePool.h. ◆ fTipForeColor. Pixel_t TGResourcePool::fTipForeColor. private . default tip foreground color ; Definition at line 41 of file TGResourcePool.h. ◆ fTipGC. TGGC* TGResourcePool::fTipGC. private . tooltip gc ; Definition at line 73 of file TGResourcePool.h. ◆ fWaitCursor. Cursor_t TGResourcePool::fWaitCursor. private . wait cursor ; Definition at line 81 of file TGResourcePool.h. ◆ fWhite. Pixel_t TGResourcePool::fWhite. private . white color index ; Definition at line 42 of file TGResourcePool.h. ◆ fWhiteGC. TGGC* TGResourcePool::fWhiteGC. private . white gc ; Definition at line 62 of file TGResourcePool.h. Libraries for TGResourcePool:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGResourcePool.h; gui/gui/src/TGResourcePool.cxx. TGResourcePool. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:33 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGResourcePool.html:29331,Guid,Guide,29331,doc/master/classTGResourcePool.html,https://root.cern,https://root.cern/doc/master/classTGResourcePool.html,1,['Guid'],['Guide']
Usability,"Definition at line 38 of file RooTFnPdfBinding.h. ◆ clone(). TObject * RooTFnPdfBinding::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 25 of file RooTFnPdfBinding.h. ◆ DeclFileName(). static const char * RooTFnPdfBinding::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 38 of file RooTFnPdfBinding.h. ◆ evaluate(). double RooTFnPdfBinding::evaluate ; (; ); const. overrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 47 of file RooTFnPdfBinding.cxx. ◆ IsA(). TClass * RooTFnPdfBinding::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 38 of file RooTFnPdfBinding.h. ◆ printArgs(). void RooTFnPdfBinding::printArgs ; (; std::ostream & ; os); const. overridevirtual . Print object arguments, ie its proxies. ; Reimplemented from RooAbsArg.; Definition at line 57 of file RooTFnPdfBinding.cxx. ◆ Streamer(). void RooTFnPdfBinding::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooTFnPdfBinding::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 38 of file RooTFnPdfBinding.h. Member Data Documentation. ◆ _func. TF1* RooTFnPdfBinding::_func = nullptr. protected . Definition at line 32 of file RooTFnPdfBinding.h. ◆ _list. RooListProxy RooTFnPdfBinding::_list. protected . Definition at line 31 of file RooTFnPdfBinding.h. Libraries for RooTFnPdfBinding:. [legend]; The documentation for this class was generated from the following files:; roofit/roofit/inc/RooTFnPdfBinding.h; roofit/roofit/src/RooTFnPdfBinding.cxx. RooTFnPdfBinding. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:10 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooTFnPdfBinding.html:76113,Guid,Guide,76113,doc/master/classRooTFnPdfBinding.html,https://root.cern,https://root.cern/doc/master/classRooTFnPdfBinding.html,1,['Guid'],['Guide']
Usability,Definition at line 46 of file TSelVerifyDataSet.h. ◆ fGetlistonly. Bool_t TSelVerifyDataSet::fGetlistonly. private . Definition at line 52 of file TSelVerifyDataSet.h. ◆ fLocateonly. Bool_t TSelVerifyDataSet::fLocateonly. private . Definition at line 47 of file TSelVerifyDataSet.h. ◆ fMss. TString TSelVerifyDataSet::fMss. private . Definition at line 57 of file TSelVerifyDataSet.h. ◆ fNoaction. Bool_t TSelVerifyDataSet::fNoaction. private . Definition at line 45 of file TSelVerifyDataSet.h. ◆ fNonStgf. Bool_t TSelVerifyDataSet::fNonStgf. private . Definition at line 39 of file TSelVerifyDataSet.h. ◆ fOpened. Int_t TSelVerifyDataSet::fOpened. private . Definition at line 62 of file TSelVerifyDataSet.h. ◆ fReopen. Bool_t TSelVerifyDataSet::fReopen. private . Definition at line 40 of file TSelVerifyDataSet.h. ◆ fRopt. Int_t TSelVerifyDataSet::fRopt. private . Definition at line 34 of file TSelVerifyDataSet.h. ◆ fScanlist. Bool_t TSelVerifyDataSet::fScanlist. private . Definition at line 53 of file TSelVerifyDataSet.h. ◆ fSopt. Int_t TSelVerifyDataSet::fSopt. private . Definition at line 33 of file TSelVerifyDataSet.h. ◆ fStageonly. Bool_t TSelVerifyDataSet::fStageonly. private . Definition at line 48 of file TSelVerifyDataSet.h. ◆ fStageopts. TString TSelVerifyDataSet::fStageopts. private . Definition at line 58 of file TSelVerifyDataSet.h. ◆ fStgf. Bool_t TSelVerifyDataSet::fStgf. private . Definition at line 42 of file TSelVerifyDataSet.h. ◆ fSubDataSet. TFileCollection* TSelVerifyDataSet::fSubDataSet. private . Definition at line 65 of file TSelVerifyDataSet.h. ◆ fTouch. Bool_t TSelVerifyDataSet::fTouch. private . Definition at line 41 of file TSelVerifyDataSet.h. ◆ fTouched. Int_t TSelVerifyDataSet::fTouched. private . Definition at line 61 of file TSelVerifyDataSet.h. proof/proof/inc/TSelVerifyDataSet.h; proof/proof/src/TSelVerifyDataSet.cxx. TSelVerifyDataSet. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:26 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTSelVerifyDataSet.html:20383,Guid,Guide,20383,doc/master/classTSelVerifyDataSet.html,https://root.cern,https://root.cern/doc/master/classTSelVerifyDataSet.html,1,['Guid'],['Guide']
Usability,"Definition at line 588 of file TGedEditor.cxx. ◆ IsA(). TClass * TGedEditor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TVirtualPadEditor.; Definition at line 98 of file TGedEditor.h. ◆ IsGlobal(). Bool_t TGedEditor::IsGlobal ; (; ); const. inlineoverridevirtual . Implements TVirtualPadEditor.; Definition at line 85 of file TGedEditor.h. ◆ operator=(). TGedEditor & TGedEditor::operator= ; (; const TGedEditor & ; ). privatedelete . ◆ PrintFrameStat(). void TGedEditor::PrintFrameStat ; (; ). Print contents of fFrameMap. ; Definition at line 663 of file TGedEditor.cxx. ◆ RecursiveRemove(). void TGedEditor::RecursiveRemove ; (; TObject * ; obj). overridevirtual . Remove references to fModel in case the fModel is being deleted. ; Deactivate attribute frames if they point to obj. ; Reimplemented from TObject.; Definition at line 480 of file TGedEditor.cxx. ◆ ReinitWorkspace(). void TGedEditor::ReinitWorkspace ; (; ). Clears windows in editor tab. ; Unmap and withdraw currently shown frames and thus prepare for construction of a new class layout or destruction. ; Definition at line 239 of file TGedEditor.cxx. ◆ SetCanvas(). void TGedEditor::SetCanvas ; (; TCanvas * ; c). virtual . Change connection to another canvas. ; Definition at line 327 of file TGedEditor.cxx. ◆ SetFrameCreator(). void TGedEditor::SetFrameCreator ; (; TGedEditor * ; e). static . Set the TGedEditor that currently creates TGedFrames. ; Definition at line 89 of file TGedEditor.cxx. ◆ SetGlobal(). void TGedEditor::SetGlobal ; (; Bool_t ; global). overridevirtual . Set editor global. ; Reimplemented from TVirtualPadEditor.; Definition at line 267 of file TGedEditor.cxx. ◆ SetModel(). void TGedEditor::SetModel ; (; TVirtualPad * ; pad, . TObject * ; obj, . Int_t ; event, . Bool_t ; force = kFALSE . ). virtual . Activate object editors according to the selected object. ; Reimplemented in TEveGedEditor.; Definition at line 345 of file TGedEditor.cxx",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGedEditor.html:46419,Clear,Clears,46419,doc/master/classTGedEditor.html,https://root.cern,https://root.cern/doc/master/classTGedEditor.html,1,['Clear'],['Clears']
Usability,"Definition at line 65 of file TDataPointN.icc. ◆ GetCoordinate(). template<typename _val_type > . _val_type ROOT::Math::TDataPointN< _val_type >::GetCoordinate ; (; unsigned int ; iAxis); const. inline . Definition at line 77 of file TDataPointN.icc. ◆ GetWeight(). template<typename _val_type = float> . _val_type ROOT::Math::TDataPointN< _val_type >::GetWeight ; (; ); const. inline . Definition at line 55 of file TDataPointN.h. ◆ Less(). template<typename _val_type > . bool ROOT::Math::TDataPointN< _val_type >::Less ; (; TDataPointN< _val_type > & ; rPoint, . unsigned int ; iAxis . ); const. inline . Definition at line 93 of file TDataPointN.icc. ◆ SetCoordinate(). template<typename _val_type > . void ROOT::Math::TDataPointN< _val_type >::SetCoordinate ; (; unsigned int ; iAxis, . value_type ; fValue . ). inline . Definition at line 85 of file TDataPointN.icc. ◆ SetDimension(). template<typename _val_type = float> . static void ROOT::Math::TDataPointN< _val_type >::SetDimension ; (; UInt_t ; dim). inlinestatic . Definition at line 39 of file TDataPointN.h. ◆ SetWeight(). template<typename _val_type = float> . void ROOT::Math::TDataPointN< _val_type >::SetWeight ; (; float ; fWeight). inline . Definition at line 58 of file TDataPointN.h. Member Data Documentation. ◆ kDimension. template<typename _val_type > . UInt_t ROOT::Math::TDataPointN< _val_type >::kDimension = 0. staticprivate . Definition at line 33 of file TDataPointN.h. ◆ m_fWeight. template<typename _val_type = float> . value_type ROOT::Math::TDataPointN< _val_type >::m_fWeight. private . Definition at line 62 of file TDataPointN.h. ◆ m_vCoordinates. template<typename _val_type = float> . value_type* ROOT::Math::TDataPointN< _val_type >::m_vCoordinates. private . Definition at line 61 of file TDataPointN.h. math/mathcore/inc/Math/TDataPointN.h; math/mathcore/inc/Math/TDataPointN.icc. ROOTMathTDataPointN. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:24 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPointN.html:5024,Guid,Guide,5024,doc/master/classROOT_1_1Math_1_1TDataPointN.html,https://root.cern,https://root.cern/doc/master/classROOT_1_1Math_1_1TDataPointN.html,1,['Guid'],['Guide']
Usability,"Definition at line 682 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 584 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 716 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 734 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 767 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 785 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 775 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 188 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classTCanvas.html:66342,clear,cleared,66342,doc/v632/classTCanvas.html,https://root.cern,https://root.cern/doc/v632/classTCanvas.html,1,['clear'],['cleared']
Usability,"Definition at line 685 of file TCanvas.cxx. ◆ Build(). void TCanvas::Build ; (; ). private . Build a canvas. Called by all constructors. ; Definition at line 587 of file TCanvas.cxx. ◆ cd(). TVirtualPad * TCanvas::cd ; (; Int_t ; subpadnumber = 0). overridevirtual . Set current canvas & pad. ; Returns the new current pad, or 0 in case of failure. See TPad::cd() for an explanation of the parameter. ; Implements TVirtualPad.; Definition at line 719 of file TCanvas.cxx. ◆ Class(). static TClass * TCanvas::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TCanvas::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TCanvas::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 238 of file TCanvas.h. ◆ Clear(). void TCanvas::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all primitives from the canvas. ; If option ""D"" is specified, direct sub-pads are cleared but not deleted. This option is not recursive, i.e. pads in direct sub-pads are deleted. ; Implements TVirtualPad.; Definition at line 737 of file TCanvas.cxx. ◆ Cleared(). void TCanvas::Cleared ; (; TVirtualPad * ; pad). virtual . Emit pad Cleared signal. ; Definition at line 770 of file TCanvas.cxx. ◆ ClearPadSave(). void TCanvas::ClearPadSave ; (; ). inline . Definition at line 140 of file TCanvas.h. ◆ Close(). void TCanvas::Close ; (; Option_t * ; option = """"). overridevirtual . Close canvas. ; Delete window/pads data structure ; Implements TVirtualPad.; Definition at line 788 of file TCanvas.cxx. ◆ Closed(). void TCanvas::Closed ; (; ). overridevirtual . Emit Closed signal. ; Reimplemented from TPad.; Definition at line 778 of file TCanvas.cxx. ◆ Constructor() [1/4]. void TCanvas::Constructor ; (; ). Canvas default constructor. ; Definition at line 191 of file TCanvas.cxx. ◆ Constructor() [2/4]. void TCanvas::Constructor ; (; const char * ; name, . const char ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTCanvas.html:66718,clear,cleared,66718,doc/master/classTCanvas.html,https://root.cern,https://root.cern/doc/master/classTCanvas.html,1,['clear'],['cleared']
Usability,Definition at line 74 of file TQpVar.h. ◆ fGamma. TVectorD TQpVar::fGamma. Definition at line 100 of file TQpVar.h. ◆ fLambda. TVectorD TQpVar::fLambda. Definition at line 103 of file TQpVar.h. ◆ fMclo. Int_t TQpVar::fMclo. protected . Definition at line 69 of file TQpVar.h. ◆ fMcup. Int_t TQpVar::fMcup. protected . Definition at line 68 of file TQpVar.h. ◆ fMy. Int_t TQpVar::fMy. protected . Definition at line 64 of file TQpVar.h. ◆ fMz. Int_t TQpVar::fMz. protected . Definition at line 65 of file TQpVar.h. ◆ fNComplementaryVariables. Int_t TQpVar::fNComplementaryVariables. Definition at line 88 of file TQpVar.h. ◆ fNx. Int_t TQpVar::fNx. protected . Definition at line 63 of file TQpVar.h. ◆ fNxlo. Int_t TQpVar::fNxlo. protected . Definition at line 67 of file TQpVar.h. ◆ fNxup. Int_t TQpVar::fNxup. protected . Definition at line 66 of file TQpVar.h. ◆ fPhi. TVectorD TQpVar::fPhi. Definition at line 97 of file TQpVar.h. ◆ fPi. TVectorD TQpVar::fPi. Definition at line 106 of file TQpVar.h. ◆ fS. TVectorD TQpVar::fS. Definition at line 92 of file TQpVar.h. ◆ fT. TVectorD TQpVar::fT. Definition at line 102 of file TQpVar.h. ◆ fU. TVectorD TQpVar::fU. Definition at line 105 of file TQpVar.h. ◆ fV. TVectorD TQpVar::fV. Definition at line 96 of file TQpVar.h. ◆ fW. TVectorD TQpVar::fW. Definition at line 99 of file TQpVar.h. ◆ fX. TVectorD TQpVar::fX. Definition at line 91 of file TQpVar.h. ◆ fXloIndex. TVectorD TQpVar::fXloIndex. protected . Definition at line 72 of file TQpVar.h. ◆ fXupIndex. TVectorD TQpVar::fXupIndex. protected . Definition at line 73 of file TQpVar.h. ◆ fY. TVectorD TQpVar::fY. Definition at line 93 of file TQpVar.h. ◆ fZ. TVectorD TQpVar::fZ. Definition at line 94 of file TQpVar.h. Libraries for TQpVar:. [legend]; The documentation for this class was generated from the following files:; math/quadp/inc/TQpVar.h; math/quadp/src/TQpVar.cxx. TQpVar. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:19 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTQpVar.html:22185,Guid,Guide,22185,doc/master/classTQpVar.html,https://root.cern,https://root.cern/doc/master/classTQpVar.html,1,['Guid'],['Guide']
Usability,Definition at line 87 of file TGLViewer.h. ◆ fPerspectiveCameraXOZ. TGLPerspectiveCamera TGLViewer::fPerspectiveCameraXOZ. protected . Definition at line 85 of file TGLViewer.h. ◆ fPerspectiveCameraYOZ. TGLPerspectiveCamera TGLViewer::fPerspectiveCameraYOZ. protected . Definition at line 86 of file TGLViewer.h. ◆ fPictureFileName. TString TGLViewer::fPictureFileName. protected . Definition at line 158 of file TGLViewer.h. ◆ fPointScale. Float_t TGLViewer::fPointScale. protected . color-set with light background ; Definition at line 142 of file TGLViewer.h. ◆ fPShapeWrap. TGLPShapeObj* TGLViewer::fPShapeWrap. protected . GED editor. ; Definition at line 121 of file TGLViewer.h. ◆ fPushAction. EPushAction TGLViewer::fPushAction. protected . Definition at line 131 of file TGLViewer.h. ◆ fRedrawTimer. TGLRedrawTimer* TGLViewer::fRedrawTimer. protected . Definition at line 135 of file TGLViewer.h. ◆ fReferenceOn. Bool_t TGLViewer::fReferenceOn. protected . remove guides hidden-lines ; Definition at line 148 of file TGLViewer.h. ◆ fReferencePos. TGLVertex3 TGLViewer::fReferencePos. protected . reference marker on? ; Definition at line 149 of file TGLViewer.h. ◆ fResetCamerasOnNextUpdate. Bool_t TGLViewer::fResetCamerasOnNextUpdate. protected . Definition at line 192 of file TGLViewer.h. ◆ fResetCamerasOnUpdate. Bool_t TGLViewer::fResetCamerasOnUpdate. protected . Definition at line 191 of file TGLViewer.h. ◆ fSecSelRec. TGLSelectRecord TGLViewer::fSecSelRec. protected . select record from last select (should go to context) ; Definition at line 113 of file TGLViewer.h. ◆ fSelectedPShapeRef. TGLManipSet* TGLViewer::fSelectedPShapeRef. protected . select record from last secondary select (should go to context) ; Definition at line 114 of file TGLViewer.h. ◆ fSelRec. TGLSelectRecord TGLViewer::fSelRec. protected . select record in use as selected ; Definition at line 112 of file TGLViewer.h. ◆ fSmartRefresh. Bool_t TGLViewer::fSmartRefresh. protected . markup size of viewport ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:78241,guid,guides,78241,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,"Definition at line 92 of file TListOfDataMembers.cxx. ◆ AddLast() [2/2]. void TListOfDataMembers::AddLast ; (; TObject * ; obj, . Option_t * ; opt . ). overridevirtual . Add object at the end of the list and also store option. ; Storing an option is useful when one wants to change the behaviour of an object a little without having to create a complete new copy of the object. This feature is used, for example, by the Draw() method. It allows the same object to be drawn in different ways. ; Reimplemented from THashList.; Definition at line 105 of file TListOfDataMembers.cxx. ◆ Class(). static TClass * TListOfDataMembers::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TListOfDataMembers::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TListOfDataMembers::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 102 of file TListOfDataMembers.h. ◆ Clear(). void TListOfDataMembers::Clear ; (; Option_t * ; option = """"). overridevirtual . Remove all objects from the list. ; Does not delete the objects unless the THashList is the owner (set via SetOwner()). ; Reimplemented from THashList.; Definition at line 160 of file TListOfDataMembers.cxx. ◆ DeclFileName(). static const char * TListOfDataMembers::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 102 of file TListOfDataMembers.h. ◆ Delete(). void TListOfDataMembers::Delete ; (; Option_t * ; option = """"). overridevirtual . Delete all TDataMember object files. ; Reimplemented from THashList.; Definition at line 171 of file TListOfDataMembers.cxx. ◆ Find(). TDictionary * TListOfDataMembers::Find ; (; DeclId_t ; id); const. Return (after creating it if necessary) the TDataMember describing the data member corresponding to the Decl 'id'. ; Definition at line 205 of file TListOfDataMembers.cxx. ◆ FindObject() [1/3]. TObject *",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTListOfDataMembers.html:27746,Clear,Clear,27746,doc/master/classTListOfDataMembers.html,https://root.cern,https://root.cern/doc/master/classTListOfDataMembers.html,1,['Clear'],['Clear']
Usability,"Definition legend1.C:17; eyDouble_t ey[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; exDouble_t ex[n]Definition legend1.C:17; c2return c2Definition legend2.C:14; TMath::NintInt_t Nint(T x)Round to nearest integer. Rounds half integers to the nearest even integer.Definition TMath.h:693; TMath::MaxShort_t Max(Short_t a, Short_t b)Returns the largest of a and b.Definition TMathBase.h:250; TMath::ProbDouble_t Prob(Double_t chi2, Int_t ndf)Computation of the probability for a certain Chi-squared (chi2) and number of degrees of freedom (ndf...Definition TMath.cxx:637; TMath::IsInsideBool_t IsInside(T xp, T yp, Int_t np, T *x, T *y)Function which returns kTRUE if point xp,yp lies inside the polygon defined by the np points in array...Definition TMath.h:1233; TMath::ATanDouble_t ATan(Double_t)Returns the principal value of the arc tangent of x, expressed in radians.Definition TMath.h:640; TMath::PiOver2constexpr Double_t PiOver2()Definition TMath.h:51; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::PowerLongDouble_t Power(LongDouble_t x, LongDouble_t y)Returns x raised to the power y.Definition TMath.h:721; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::CosDouble_t Cos(Double_t)Returns the cosine of an angle of x radians.Definition TMath.h:594; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::SinDouble_t Sin(Double_t)Returns the sine of an angle of x radians.Definition TMath.h:588; TMath::Log10Double_t Log10(Double_t x)Returns the common (base-10) logarithm of x.Definition TMath.h:762; TMath::AbsShort_t Abs(Short_t d)Returns the absolute value of parameter Short_t d.Definition TMathBase.h:123; arrowDefinition RArrowDS.hxx:17; lTLine lDefinition textangle.C:4; DrawMarkerm DrawMarker(0.1, 0.1). histhistpaintersrcTGraphPainter.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:35 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TGraphPainter_8cxx_source.html:223620,Guid,Guide,223620,doc/master/TGraphPainter_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TGraphPainter_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Definition writer.py:21; writer.writer.addPosaddPos(self, subels, type, name, v)Definition writer.py:136; writer.writer.solidssolidsDefinition writer.py:23; writer.writer.addTrdaddTrd(self, name, x1, x2, y1, y2, z)Definition writer.py:89; writer.writer.addXtrusionaddXtrusion(self, name, vertices, sections)Definition writer.py:121; writer.writer.addMixtureaddMixture(self, name, rho, elems)Definition writer.py:40; writer.writer.addRotationaddRotation(self, name, x, y, z)Definition writer.py:33; writer.writer.addBoxaddBox(self, name, dx, dy, dz)Definition writer.py:55; writer.writer.addSetupaddSetup(self, name, version, world)Definition writer.py:197; writer.writer.addPositionaddPosition(self, name, x, y, z)Definition writer.py:30; writer.writer.addUnionaddUnion(self, name, lname, ltr, lrot, rname, rtr, rrot)Definition writer.py:144; writer.writer.materialsmaterialsDefinition writer.py:22; writer.writer.addElementaddElement(self, symb, name, z, a)Definition writer.py:48; writer.writer.addHypeaddHype(self, name, rmin, rmax, inst, outst, z)Definition writer.py:132; writer.writer.addParaboloidaddParaboloid(self, name, rlo, rhi, dz)Definition writer.py:58; writer.writer.addTubeaddTube(self, name, rmin, rmax, z, startphi, deltaphi)Definition writer.py:93; writer.writer.addAssemblyaddAssembly(self, volume, daughters)Definition writer.py:185; writer.writer.addIntersectionaddIntersection(self, name, lname, ltr, lrot, rname, rtr, rrot)Definition writer.py:162; writer.writer.addPolyhedraaddPolyhedra(self, name, startphi, deltaphi, numsides, zplanes)Definition writer.py:113; writer.writer.addTwistedTrapaddTwistedTrap(self, name, z, theta, phi, y1, x1, x2, alpha1, y2, x3, x4, alpha2, twist)Definition writer.py:84; writer.writer.addMaterialaddMaterial(self, name, a, z, rho)Definition writer.py:36; writer.writer.writeFilewriteFile(self)Definition writer.py:201. geomgdmlwriter.py. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:13 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/writer_8py_source.html:14259,Guid,Guide,14259,doc/master/writer_8py_source.html,https://root.cern,https://root.cern/doc/master/writer_8py_source.html,1,['Guid'],['Guide']
Usability,"Delaunay2D (TGraph2D *g=nullptr);  TGraphDelaunay2D normal constructor. ;  ; Triangles::const_iterator begin () const;  ; Double_t ComputeZ (Double_t x, Double_t y);  ; Triangles::const_iterator end () const;  ; void FindAllTriangles ();  ; TGraph2D * GetGraph2D () const;  ; Double_t GetMarginBinsContent () const;  ; Int_t GetNdt () const;  ; Double_t GetXNmax () const;  ; Double_t GetXNmin () const;  ; Double_t GetYNmax () const;  ; Double_t GetYNmin () const;  ; TClass * IsA () const override;  ; void SetMarginBinsContent (Double_t z=0.);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGraphDelaunay2D.html:3416,Clear,Clear,3416,doc/master/classTGraphDelaunay2D.html,https://root.cern,https://root.cern/doc/master/classTGraphDelaunay2D.html,1,['Clear'],['Clear']
Usability,"Deleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static std::map< constRooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > >::iterator evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (s",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooRealMPFE.html:59124,clear,clearEvalErrorLog,59124,doc/master/classRooRealMPFE.html,https://root.cern,https://root.cern/doc/master/classRooRealMPFE.html,2,"['Clear', 'clear']","['Clear', 'clearEvalErrorLog']"
Usability,"Density, and TMVA::PDEFoamTargetDensity.; Definition at line 81 of file PDEFoamDensityBase.h. ◆ Log(). MsgLogger & TMVA::PDEFoamDensityBase::Log ; (; ); const. inlineprotected . Definition at line 57 of file PDEFoamDensityBase.h. ◆ SetBox(). void TMVA::PDEFoamDensityBase::SetBox ; (; std::vector< Double_t > ; box). inline . Definition at line 72 of file PDEFoamDensityBase.h. ◆ Streamer(). virtual void TMVA::PDEFoamDensityBase::Streamer ; (; TBuffer & ; R__b). virtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in TMVA::PDEFoamDecisionTreeDensity, TMVA::PDEFoamDiscriminantDensity, TMVA::PDEFoamEventDensity, and TMVA::PDEFoamTargetDensity. ◆ StreamerNVirtual(). void TMVA::PDEFoamDensityBase::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 81 of file PDEFoamDensityBase.h. Member Data Documentation. ◆ fBox. std::vector<Double_t> TMVA::PDEFoamDensityBase::fBox. private . range-searching box ; Definition at line 49 of file PDEFoamDensityBase.h. ◆ fBoxHasChanged. Bool_t TMVA::PDEFoamDensityBase::fBoxHasChanged. private . range searching box has changed ; Definition at line 51 of file PDEFoamDensityBase.h. ◆ fBoxVolume. Double_t TMVA::PDEFoamDensityBase::fBoxVolume. private . volume of range searching box ; Definition at line 50 of file PDEFoamDensityBase.h. ◆ fBst. BinarySearchTree* TMVA::PDEFoamDensityBase::fBst. protected . Binary tree to find events within a volume. ; Definition at line 54 of file PDEFoamDensityBase.h. ◆ fLogger. MsgLogger* TMVA::PDEFoamDensityBase::fLogger. mutableprotected . ! message logger ; Definition at line 55 of file PDEFoamDensityBase.h. Libraries for TMVA::PDEFoamDensityBase:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/PDEFoamDensityBase.h; tmva/tmva/src/PDEFoamDensityBase.cxx. TMVAPDEFoamDensityBase. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:39 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html:16562,Guid,Guide,16562,doc/master/classTMVA_1_1PDEFoamDensityBase.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1PDEFoamDensityBase.html,1,['Guid'],['Guide']
Usability,"Depth = 7 Input = ( 1, 16, 16 ) Batch size = 100 Loss function = C; Layer 0 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 1 BATCH NORM Layer: Input/Output = ( 10 , 256 , 100 ) Norm dim = 10 axis = 1; ; Layer 2 CONV LAYER: ( W = 16 , H = 16 , D = 10 ) Filter ( W = 3 , H = 3 ) Output = ( 100 , 10 , 10 , 256 ) Activation Function = Relu; Layer 3 POOL Layer: ( W = 15 , H = 15 , D = 10 ) Filter ( W = 2 , H = 2 ) Output = ( 100 , 10 , 10 , 225 ) ; Layer 4 RESHAPE Layer Input = ( 10 , 15 , 15 ) Output = ( 1 , 100 , 2250 ) ; Layer 5 DENSE Layer: ( Input = 2250 , Width = 100 ) Output = ( 1 , 100 , 100 ) Activation Function = Relu; Layer 6 DENSE Layer: ( Input = 100 , Width = 1 ) Output = ( 1 , 100 , 1 ) Activation Function = Identity; : Using 1280 events for training and 320 for testing; : Compute initial loss on the validation data ; : Training phase 1 of 1: Optimizer ADAM (beta1=0.9,beta2=0.999,eps=1e-07) Learning rate = 0.001 regularization 0 minimum error = 13.2274; : --------------------------------------------------------------; : Epoch | Train Err. Val. Err. t(s)/epoch t(s)/Loss nEvents/s Conv. Steps; : --------------------------------------------------------------; : Start epoch iteration ...; : 1 Minimum Test error found - save the configuration ; : 1 | 1.28042 0.721714 1.40039 0.112743 931.931 0; : 2 Minimum Test error found - save the configuration ; : 2 | 0.744775 0.695682 1.39558 0.112793 935.465 0; : 3 Minimum Test error found - save the configuration ; : 3 | 0.694124 0.686492 1.40809 0.112179 925.986 0; : 4 | 0.679848 0.699399 1.40006 0.109116 929.552 1; : 5 Minimum Test error found - save the configuration ; : 5 | 0.670651 0.682024 1.40299 0.112234 929.685 0; : 6 Minimum Test error found - save the configuration ; : 6 | 0.652355 0.665731 1.40537 0.11341 928.823 0; : 7 Minimum Test error found - save the configuration ; : 7 | 0.647198 0.663594 1.40991 0.11661 927.858 0; : 8 |",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html:14084,Learn,Learning,14084,doc/master/TMVA__CNN__Classification_8C.html,https://root.cern,https://root.cern/doc/master/TMVA__CNN__Classification_8C.html,1,['Learn'],['Learning']
Usability,"Destructor Documentation. ◆ TPainter3dAlgorithms() [1/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; ). Lego default constructor. ; Definition at line 61 of file TPainter3dAlgorithms.cxx. ◆ TPainter3dAlgorithms() [2/2]. TPainter3dAlgorithms::TPainter3dAlgorithms ; (; Double_t * ; rmin, . Double_t * ; rmax, . Int_t ; system = 1 . ). Normal default constructor. ; rmin[3], rmax[3] are the limits of the lego object depending on the selected coordinate system ; Definition at line 130 of file TPainter3dAlgorithms.cxx. ◆ ~TPainter3dAlgorithms(). TPainter3dAlgorithms::~TPainter3dAlgorithms ; (; ). override . destructor ; Definition at line 209 of file TPainter3dAlgorithms.cxx. Member Function Documentation. ◆ BackBox(). void TPainter3dAlgorithms::BackBox ; (; Double_t ; ang). Draw back surfaces of surrounding box. ; Parameters. [in]angangle between X and Y axis . Definition at line 218 of file TPainter3dAlgorithms.cxx. ◆ ClearRaster(). void TPainter3dAlgorithms::ClearRaster ; (; ). Clear screen. ; Definition at line 307 of file TPainter3dAlgorithms.cxx. ◆ ColorFunction(). void TPainter3dAlgorithms::ColorFunction ; (; Int_t ; nl, . Double_t * ; fl, . Int_t * ; icl, . Int_t & ; irep . ). Set correspondence between function and color levels. ; Parameters. [in]nlnumber of levels ; [in]flfunction levels ; [in]iclcolors for levels; [out]irepreturn code (0 OK, -1 error). . Definition at line 323 of file TPainter3dAlgorithms.cxx. ◆ DefineGridLevels(). void TPainter3dAlgorithms::DefineGridLevels ; (; Int_t ; ndivz). Define the grid levels drawn in the background of surface and lego plots. ; The grid levels are aligned on the Z axis' main tick marks. ; Definition at line 366 of file TPainter3dAlgorithms.cxx. ◆ DrawFaceGouraudShaded(). void TPainter3dAlgorithms::DrawFaceGouraudShaded ; (; Int_t * ; icodes, . Double_t ; xyz[][3], . Int_t ; np, . Int_t * ; iface, . Double_t * ; t . ). Draw the faces for the Gouraud Shaded Iso surfaces. ; Definition at line 5747 of file TPainter3dAl",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTPainter3dAlgorithms.html:18790,Clear,Clear,18790,doc/master/classTPainter3dAlgorithms.html,https://root.cern,https://root.cern/doc/master/classTPainter3dAlgorithms.html,1,['Clear'],['Clear']
Usability,"Destructor. ;  ; TGFrame * GetGUIFrame () override;  Return top-frame of this eve-window - the big button to make slot current. ;  ; TClass * IsA () const override;  ; TEveWindowFrame * MakeFrame (TGFrame *frame=nullptr);  An eve-window-frame is created and frame is passed into it. ;  ; TEveWindowPack * MakePack ();  A pack is created in place of this window-slot. ;  ; TEveWindowTab * MakeTab ();  A tab is created in place of this window-slot. ;  ; TGCompositeFrame * StartEmbedding ();  Start embedding a window that will replace the current slot. ;  ; TEveWindowFrame * StopEmbedding (const char *name=nullptr);  An embedded window is created in place of this window-slot. ;  ; void Streamer (TBuffer &) override;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TEveWindow;  TEveWindow (const char *n=""TEveWindow"", const char *t="""");  ;  ~TEveWindow () override;  Destructor. ;  ; virtual Bool_t CanMakeNewSlots () const;  ; void ClearEveFrame ();  Clears eve-frame associated with this window. ;  ; virtual void DestroyWindow ();  Destroy eve-window - replace it with an empty frame-slot. ;  ; virtual void DestroyWindowAndSlot ();  Destroy eve-window and its frame-slot. ;  ; void FlipShowTitleBar ();  ; TEveCompositeFrame * GetEveFrame ();  ; Bool_t GetShowTitleBar () const;  ; Bool_t IsAncestorOf (TEveWindow *win);  Returns true if this is an ancestor of win. ;  ; Bool_t IsCurrent () const;  Returns true if this window is the current one. ;  ; void MakeCurrent ();  Make this window current. ;  ; void NameTitleChanged () override;  Name or title of the window changed - propagate to frames. ;  ; virtual TEveWindowSlot * NewSlot ();  ; void PopulateEmptyFrame (TEveCompositeFrame *ef);  Populate given frame-slot - intended for initial population of a new slot or low-level window-swapping. ;  ; virtual void PostDock ();  Virtual function called after a window is docked. ;  ; virtual void PreUndock ();  Virtual function ca",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTEveWindowSlot.html:1598,Clear,ClearEveFrame,1598,doc/master/classTEveWindowSlot.html,https://root.cern,https://root.cern/doc/master/classTEveWindowSlot.html,2,['Clear'],"['ClearEveFrame', 'Clears']"
Usability,"Dev ; (; ); const. inline . Definition at line 228 of file TGLViewer.h. ◆ GetDragAction(). EDragAction TGLViewer::GetDragAction ; (; ); const. inline . Definition at line 300 of file TGLViewer.h. ◆ GetDrawCameraCenter(). Bool_t TGLViewer::GetDrawCameraCenter ; (; ). inline . Definition at line 279 of file TGLViewer.h. ◆ GetEventHandler(). TGEventHandler * TGLViewer::GetEventHandler ; (; ); const. inline . Definition at line 378 of file TGLViewer.h. ◆ GetFader(). Float_t TGLViewer::GetFader ; (; ); const. inline . Definition at line 349 of file TGLViewer.h. ◆ GetGedEditor(). TGedEditor * TGLViewer::GetGedEditor ; (; ); const. inline . Definition at line 381 of file TGLViewer.h. ◆ GetGLWidget(). TGLWidget * TGLViewer::GetGLWidget ; (; ). inline . Definition at line 223 of file TGLViewer.h. ◆ GetGuideState(). void TGLViewer::GetGuideState ; (; Int_t & ; axesType, . Bool_t & ; axesDepthTest, . Bool_t & ; referenceOn, . Double_t * ; referencePos . ); const. Fetch the state of guides (axes & reference markers) into arguments. ; Definition at line 2055 of file TGLViewer.cxx. ◆ GetIgnoreSizesOnUpdate(). Bool_t TGLViewer::GetIgnoreSizesOnUpdate ; (; ); const. inline . Definition at line 355 of file TGLViewer.h. ◆ GetLightSet(). TGLLightSet * TGLViewer::GetLightSet ; (; ); const. inline . Definition at line 262 of file TGLViewer.h. ◆ GetLineScale(). Float_t TGLViewer::GetLineScale ; (; ); const. inline . Definition at line 254 of file TGLViewer.h. ◆ GetMaxSceneDrawTimeHQ(). Float_t TGLViewer::GetMaxSceneDrawTimeHQ ; (; ); const. inline . Definition at line 308 of file TGLViewer.h. ◆ GetMaxSceneDrawTimeLQ(). Float_t TGLViewer::GetMaxSceneDrawTimeLQ ; (; ); const. inline . Definition at line 309 of file TGLViewer.h. ◆ GetOvlSelRec(). TGLOvlSelectRecord & TGLViewer::GetOvlSelRec ; (; ). inline . Definition at line 391 of file TGLViewer.h. ◆ GetPictureFileName(). const char * TGLViewer::GetPictureFileName ; (; ); const. inline . Definition at line 347 of file TGLViewer.h. ◆ GetPic",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGLViewer.html:47631,guid,guides,47631,doc/master/classTGLViewer.html,https://root.cern,https://root.cern/doc/master/classTGLViewer.html,1,['guid'],['guides']
Usability,"Dir() const; { return fSessionDir; }. const char * GetPackageDir() const; { return fPackageDir; }. const char * GetDataDir() const; { return fDataDir; }. const char * GetDataDirOpts() const; { return fDataDirOpts; }. Int_t GetProtocol() const; { return fProtocol; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetGroupId() const; { return fGroupId; }. Int_t GetGroupSize() const; { return fGroupSize; }. Int_t GetLogLevel() const; { return fLogLevel; }. TSocket * GetSocket() const; { return fSocket; }. Float_t GetRealTime() const; { return fRealTime; }. Float_t GetCpuTime() const; { return fCpuTime; }. Int_t GetQuerySeqNum() const; { return fQuerySeqNum; }. Int_t GetTotSessions() const; { return fTotSessions; }. Int_t GetActSessions() const; { return fActSessions; }. Float_t GetEffSessions() const; { return fEffSessions; }. TList * GetEnabledPackages() const; { return fEnabledPackages; }. Int_t GetInflateFactor() const; { return fInflateFactor; }. Long64_t GetMsgSizeHWM() const; { return fMsgSizeHWM; }. const char * GetPrefix() const; { return fPrefix; }. TProofLockPath * GetCacheLock(); { return fCacheLock; }. EQueryAction GetWorkers(TList* workers, Int_t& prioritychange, Bool_t resume = kFALSE). void HandleTermination(); { Terminate(0); }. void Interrupt(); { fInterrupt = kTRUE; }. Bool_t IsEndMaster() const; { return fEndMaster; }. Bool_t IsMaster() const; { return fMasterServ; }. Bool_t IsTopMaster() const; { return fOrdinal == ""0""; }. void ReleaseWorker(const char* ); { }. void DisableTimeout(); Disable / Enable read timeout. { }. void EnableTimeout(); { }. void LogToMaster(Bool_t on = kTRUE); Log control. { fSendLogToMaster = on; }. » Author: Fons Rademakers 16/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-03-25 16:53; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/TProofServ.html:34594,resume,resume,34594,root/html534/TProofServ.html,https://root.cern,https://root.cern/root/html534/TProofServ.html,1,['resume'],['resume']
Usability,"DirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * GetPath () const;  Returns the full path of the directory. ;  ; virtual const char * GetPathStatic () const;  Returns the full path of the directory. ;  ; TUUID GetUUID () const;  ; Bool_t IsBuilt () const;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMemFile.html:17761,Clear,Clear,17761,doc/master/classTMemFile.html,https://root.cern,https://root.cern/doc/master/classTMemFile.html,15,['Clear'],['Clear']
Usability,"DirHeader () override;  Overwrite the Directory header record. ;  ; void WriteKeys () override;  Write Keys linked list on the file. ;  ; Int_t WriteObjectAny (const void *obj, const char *classname, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object from pointer of class classname in this directory. ;  ; Int_t WriteObjectAny (const void *obj, const TClass *cl, const char *name, Option_t *option="""", Int_t bufsize=0) override;  Write object of class with dictionary cl in this directory. ;  ; Int_t WriteTObject (const TObject *obj, const char *name=nullptr, Option_t *option="""", Int_t bufsize=0) override;  Write object obj to this directory. ;  ;  Public Member Functions inherited from TDirectory;  TDirectory ();  Directory default constructor. ;  ;  TDirectory (const char *name, const char *title, Option_t *option="""", TDirectory *motherDir=nullptr);  Create a new Directory. ;  ; virtual ~TDirectory ();  Destructor. ;  ; void Clear (Option_t *option="""") override;  Delete all objects from a Directory list. ;  ; virtual void DeleteAll (Option_t *option="""");  Delete all objects from memory. ;  ; void Draw (Option_t *option="""") override;  Fill Graphics Structure and Paint. ;  ; TObject * FindObject (const char *name) const override;  Find object by name in the list of memory objects. ;  ; TObject * FindObject (const TObject *obj) const override;  Find object in the list of memory objects. ;  ; template<class T > ; T * Get (const char *namecycle);  See documentation of TDirectoryFile::Get(const char *namecycle) ;  ; virtual TList * GetList () const;  ; TObject * GetMother () const;  ; TDirectory * GetMotherDir () const;  ; template<class T > ; void GetObject (const char *namecycle, T *&ptr);  Get an object with proper type checking. ;  ; virtual const char * GetPath () const;  Returns the full path of the directory. ;  ; virtual const char * GetPathStatic () const;  Returns the full path of the directory. ;  ; TUUID GetUUID () const;  ; Bool_t Is",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html:7676,Clear,Clear,7676,doc/master/classRooWorkspace_1_1WSDir.html,https://root.cern,https://root.cern/doc/master/classRooWorkspace_1_1WSDir.html,2,['Clear'],['Clear']
Usability,"Directory ; (; const char ; dirName[], . TSeqCollection * ; pList . ). static . [static utility function]///////////////////////////// ; adds a TObjString to ""*pList"" for each entry found in the system directory ""dirName""; directories that do not exist are silently ignored. ; Definition at line 750 of file TTabCom.cxx. ◆ Class(). static TClass * TTabCom::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TTabCom::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TTabCom::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 226 of file TTabCom.h. ◆ ClearAll(). void TTabCom::ClearAll ; (; ). clears all lists except for user names and system include files. ; Definition at line 319 of file TTabCom.cxx. ◆ ClearClasses(). void TTabCom::ClearClasses ; (; ). Clear classes and namespace collections. ; Definition at line 218 of file TTabCom.cxx. ◆ ClearCppDirectives(). void TTabCom::ClearCppDirectives ; (; ). Forget all Cpp directives seen so far. ; Definition at line 230 of file TTabCom.cxx. ◆ ClearEnvVars(). void TTabCom::ClearEnvVars ; (; ). Forget all environment variables seen so far. ; Definition at line 242 of file TTabCom.cxx. ◆ ClearFiles(). void TTabCom::ClearFiles ; (; ). Close all files. ; Definition at line 254 of file TTabCom.cxx. ◆ ClearGlobalFunctions(). void TTabCom::ClearGlobalFunctions ; (; ). Forget all global functions seen so far. ; Not needed anymore. Use gROOT->GetListOfGlobalFunctions() ; Definition at line 267 of file TTabCom.cxx. ◆ ClearGlobals(). void TTabCom::ClearGlobals ; (; ). Forget all global variables seen so far. ; With teh new implamentation the list is gROOT->GetListOfGlobals(true). ; Definition at line 275 of file TTabCom.cxx. ◆ ClearPragmas(). void TTabCom::ClearPragmas ; (; ). Forget all pragmas seen so far. ; Definition at line 282 of file TTabCom.cxx. ◆ ClearSysIncFiles(). void TTabCom::ClearSys",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTTabCom.html:9529,Clear,ClearCppDirectives,9529,doc/master/classTTabCom.html,https://root.cern,https://root.cern/doc/master/classTTabCom.html,1,['Clear'],['ClearCppDirectives']
Usability,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Sat Jun 20 17:31:22 2015 » Last generated: 2015-06-20 17:31; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html604/RooWorkspace__WSDir.html:13666,Clear,Clear,13666,root/html604/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html604/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Tue Jun 30 14:38:17 2015 » Last generated: 2015-06-30 14:38; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html602/RooWorkspace__WSDir.html:13666,Clear,Clear,13666,root/html602/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html602/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"Directory::fContext!Pointer to a list of TContext object pointing to this TDirectory; TDatimeTDirectoryFile::fDatimeCDate and time when directory is created; TDatimeTDirectoryFile::fDatimeMDate and time of last modification; TFile*TDirectoryFile::fFilepointer to current file in memory; TList*TDirectoryFile::fKeysPointer to keys list in memory; TList*TDirectory::fListList of objects in memory; Bool_tTDirectoryFile::fModifiedtrue if directory has been modified; TObject*TDirectory::fMotherpointer to mother of the directory; TStringTNamed::fNameobject identifier; Int_tTDirectoryFile::fNbytesKeysNumber of bytes for the keys; Int_tTDirectoryFile::fNbytesNameNumber of bytes in TNamed at creation time; TStringTDirectory::fPathBuffer!Buffer for GetPath() function; Long64_tTDirectoryFile::fSeekDirLocation of directory on file; Long64_tTDirectoryFile::fSeekKeysLocation of Keys record on file; Long64_tTDirectoryFile::fSeekParentLocation of parent directory on file; TStringTNamed::fTitleobject title; TUUIDTDirectory::fUUIDUnique identifier; Bool_tTDirectoryFile::fWritabletrue if directory is writable; static Bool_tTDirectory::fgAddDirectory!flag to add histograms, graphs,etc to the directory. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; void InternalAppend(TObject* obj); Internal access to TDirectory append method. void Add(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. void Append(TObject* obj); Overload TDirectory interface method to prohibit insertion of objects in read-only directory workspace representation. WSDir(const char* name, const char* title, RooWorkspace* wspace). virtual ~WSDir(); { Clear(""nodelete"") ; }. » Last changed: Tue Mar 10 17:21:17 2015 » Last generated: 2015-03-10 17:21; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooWorkspace__WSDir.html:13294,Clear,Clear,13294,root/html534/RooWorkspace__WSDir.html,https://root.cern,https://root.cern/root/html534/RooWorkspace__WSDir.html,1,['Clear'],['Clear']
Usability,"DisplayArgs::fPageContent. protected . ! HTML page content ; Definition at line 59 of file RWebDisplayArgs.hxx. ◆ fRedirectOutput. std::string ROOT::RWebDisplayArgs::fRedirectOutput. protected . ! filename where browser output should be redirected ; Definition at line 60 of file RWebDisplayArgs.hxx. ◆ fServer. THttpServer* ROOT::RWebDisplayArgs::fServer {nullptr}. protected . ! http server which handle all requests ; Definition at line 65 of file RWebDisplayArgs.hxx. ◆ fStandalone. bool ROOT::RWebDisplayArgs::fStandalone {true}. protected . ! indicates if browser should run isolated from other browser instances ; Definition at line 64 of file RWebDisplayArgs.hxx. ◆ fUrl. std::string ROOT::RWebDisplayArgs::fUrl. protected . ! URL to display ; Definition at line 57 of file RWebDisplayArgs.hxx. ◆ fUrlOpt. std::string ROOT::RWebDisplayArgs::fUrlOpt. protected . ! extra URL options, which are append to window URL ; Definition at line 70 of file RWebDisplayArgs.hxx. ◆ fWidgetKind. std::string ROOT::RWebDisplayArgs::fWidgetKind. protected . ! widget kind, used to identify that will be displayed in the web window ; Definition at line 61 of file RWebDisplayArgs.hxx. ◆ fWidth. int ROOT::RWebDisplayArgs::fWidth {0}. protected . ! custom window width, when not specified - used RWebWindow geometry ; Definition at line 66 of file RWebDisplayArgs.hxx. ◆ fX. int ROOT::RWebDisplayArgs::fX {-1}. protected . ! custom window x position, negative is default ; Definition at line 68 of file RWebDisplayArgs.hxx. ◆ fY. int ROOT::RWebDisplayArgs::fY {-1}. protected . ! custom window y position, negative is default ; Definition at line 69 of file RWebDisplayArgs.hxx. Libraries for ROOT::RWebDisplayArgs:. [legend]; The documentation for this class was generated from the following files:; gui/webdisplay/inc/ROOT/RWebDisplayArgs.hxx; gui/webdisplay/src/RWebDisplayArgs.cxx. ROOTRWebDisplayArgs. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:13:36 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html:24306,Guid,Guide,24306,doc/v632/classROOT_1_1RWebDisplayArgs.html,https://root.cern,https://root.cern/doc/v632/classROOT_1_1RWebDisplayArgs.html,1,['Guid'],['Guide']
Usability,"Documentation | ROOT a Data analysis Framework. Menu. DownloadDownload ROOT; All Releases. DocumentationReference Manual; User's Guides; HowTo; Courses; Building ROOT; Tutorials; Javascript Root; ROOT and Spark; Publications; FAQ. NewsBlog; Workshops. SupportForum; Bug submission guidelines; Submit a Bug; Discourse Mailing List Mode; RootTalk Digest. AboutLicence; Contact Us; Project Founders; Team; Previous Developers. DevelopmentProgram of Work; Code Owners; Release Checklist; Coding Conventions; Shifter's Instructions; Git PrimerCreating a Pull Request; A suggested work flow for distributed projects: NoSY; Git How Tos; Git Tips and Tricks; Github ssh key. Browse Sources; Meetings; ROOT 7; Run the tests; Jenkins; Setup externals from AFS/CVMFS; Doxygen; Benchmarks. ContributeCollaborate with Us. . Enter your keywords . ; View the results at Google, or enable JavaScript to view them here. . ; Download . ; Download ROOT . ; All Releases . ; Documentation . ; Reference Manual . ; User's Guides . ; HowTo . ; Courses . ; Building ROOT . ; Tutorials . ; Javascript Root . ; ROOT and Spark . ; Publications . ; FAQ . ; News . ; Blog . ; Workshops . ; Support . ; Forum . ; Bug submission guidelines . ; Submit a Bug . ; RootTalk Digest . ; Discourse Mailing List Mode . ; About . ; Licence . ; Contact Us . ; Project Founders . ; Team . ; Previous Developers . ; Development . ; Program of Work . ; Code Owners . ; Release Checklist . ; Coding Conventions . ; Shifter's Instructions . ; Git Primer . ; Creating a Pull Request . ; Github ssh key . ; Git Tips and Tricks . ; Git How Tos . ; A suggested work flow for distributed projects: NoSY . ; Browse Sources . ; Meetings . ; ROOT 7 . ; Run the tests . ; Setup externals from AFS/CVMFS . ; Jenkins . ; Doxygen . ; Benchmarks . ; Contribute . ; Collaborate with Us . You are hereHome Documentation. ROOT provides different types of documentation:. The Reference Guide, which is generated by doxygen provides an up-to-date full code docume",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/d/documentation.html:1003,Guid,Guides,1003,d/documentation.html,https://root.cern,https://root.cern/d/documentation.html,1,['Guid'],['Guides']
Usability,"Documentation. ◆ Add(). Int_t TRefTable::Add ; (; Int_t ; uid, . TProcessID * ; context = nullptr . ). virtual . Add a new uid to the table. ; we add a new pair (uid,fparent) to the map This function is called by TObject::Streamer or TStreamerInfo::WriteBuffer ; Definition at line 88 of file TRefTable.cxx. ◆ AddInternalIdxForPID(). Int_t TRefTable::AddInternalIdxForPID ; (; TProcessID * ; procid). protected . Add the internal index for fProcessIDs, fAllocSize, etc given a PID. ; Definition at line 119 of file TRefTable.cxx. ◆ Class(). static TClass * TRefTable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TRefTable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TRefTable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 93 of file TRefTable.h. ◆ Clear(). void TRefTable::Clear ; (; Option_t * ; = """"). overridevirtual . Clear all entries in the table. ; Reimplemented from TObject.; Definition at line 145 of file TRefTable.cxx. ◆ DeclFileName(). static const char * TRefTable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 93 of file TRefTable.h. ◆ Expand(). Int_t TRefTable::Expand ; (; Int_t ; pid, . Int_t ; newsize . ). virtual . Expand fParentIDs to newsize for ProcessID pid. ; Definition at line 157 of file TRefTable.cxx. ◆ ExpandForIID(). Int_t TRefTable::ExpandForIID ; (; Int_t ; iid, . Int_t ; newsize . ). protectedvirtual . Expand fParentIDs to newsize for internel ProcessID index iid. ; Definition at line 167 of file TRefTable.cxx. ◆ ExpandPIDs(). void TRefTable::ExpandPIDs ; (; Int_t ; numpids). protected . Expand the arrays of managed PIDs. ; Definition at line 193 of file TRefTable.cxx. ◆ FillBuffer(). void TRefTable::FillBuffer ; (; TBuffer & ; b). virtual . Fill buffer b with the fN elements in fParentdIDs. ; This function is called by TB",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTRefTable.html:16083,Clear,Clear,16083,doc/master/classTRefTable.html,https://root.cern,https://root.cern/doc/master/classTRefTable.html,1,['Clear'],['Clear']
Usability,"DoubleSlider::fPressPoint. protected . mouse position at button press event ; Definition at line 51 of file TGDoubleSlider.h. ◆ fPressSmax. Double_t TGDoubleSlider::fPressSmax. protected . logical max position at button press event ; Definition at line 53 of file TGDoubleSlider.h. ◆ fPressSmin. Double_t TGDoubleSlider::fPressSmin. protected . logical min position at button press event ; Definition at line 52 of file TGDoubleSlider.h. ◆ fRelPos. Int_t TGDoubleSlider::fRelPos. protected . slider position in pixel coordinates ; Definition at line 46 of file TGDoubleSlider.h. ◆ fReversedScale. Bool_t TGDoubleSlider::fReversedScale. protected . reverse which end is min and max ; Definition at line 58 of file TGDoubleSlider.h. ◆ fScale. Int_t TGDoubleSlider::fScale. protected . tick mark scale ; Definition at line 49 of file TGDoubleSlider.h. ◆ fScaleType. Int_t TGDoubleSlider::fScaleType. protected . tick mark scale type (no, downright, both) ; Definition at line 50 of file TGDoubleSlider.h. ◆ fSliderPic. const TGPicture* TGDoubleSlider::fSliderPic. protected . picture to draw slider ends ; Definition at line 60 of file TGDoubleSlider.h. ◆ fSmax. Double_t TGDoubleSlider::fSmax. protected . logical position of max value of Slider ; Definition at line 45 of file TGDoubleSlider.h. ◆ fSmin. Double_t TGDoubleSlider::fSmin. protected . logical position of min value of Slider ; Definition at line 44 of file TGDoubleSlider.h. ◆ fVmax. Double_t TGDoubleSlider::fVmax. protected . logical upper limit of slider ; Definition at line 48 of file TGDoubleSlider.h. ◆ fVmin. Double_t TGDoubleSlider::fVmin. protected . logical lower limit of slider ; Definition at line 47 of file TGDoubleSlider.h. Libraries for TGDoubleSlider:. [legend]; The documentation for this class was generated from the following files:; gui/gui/inc/TGDoubleSlider.h; gui/gui/src/TGDoubleSlider.cxx. TGDoubleSlider. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:42:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTGDoubleSlider.html:41348,Guid,Guide,41348,doc/master/classTGDoubleSlider.html,https://root.cern,https://root.cern/doc/master/classTGDoubleSlider.html,1,['Guid'],['Guide']
Usability,"Double_t & ; xmin, . Double_t & ; xmax, . Int_t ; signalClass, . Bool_t ; norm = kFALSE . ). sanity check ; Definition at line 202 of file Tools.cxx. ◆ ComputeVariance(). Double_t TMVA::Tools::ComputeVariance ; (; Double_t ; sumx2, . Double_t ; sumx, . Int_t ; nx . ). inline . compute variance from given sums ; Definition at line 358 of file Tools.h. ◆ ContainsRegularExpression(). Bool_t TMVA::Tools::ContainsRegularExpression ; (; const TString & ; s). check if regular expression helper function to search for ""$!%^&()'<>?= "" in a string ; Definition at line 784 of file Tools.cxx. ◆ DestroyInstance(). void TMVA::Tools::DestroyInstance ; (; ). static . Definition at line 82 of file Tools.cxx. ◆ FormattedOutput() [1/3]. void TMVA::Tools::FormattedOutput ; (; const std::vector< Double_t > & ; values, . const std::vector< TString > & ; V, . const TString ; titleVars, . const TString ; titleValues, . MsgLogger & ; logger, . TString ; format = ""%+1.3f"" . ). formatted output of simple table ; Definition at line 887 of file Tools.cxx. ◆ FormattedOutput() [2/3]. void TMVA::Tools::FormattedOutput ; (; const TMatrixD & ; M, . const std::vector< TString > & ; V, . MsgLogger & ; logger . ). formatted output of matrix (with labels) ; Definition at line 937 of file Tools.cxx. ◆ FormattedOutput() [3/3]. void TMVA::Tools::FormattedOutput ; (; const TMatrixD & ; M, . const std::vector< TString > & ; vert, . const std::vector< TString > & ; horiz, . MsgLogger & ; logger . ). formatted output of matrix (with labels) ; Definition at line 985 of file Tools.cxx. ◆ GetChild(). void * TMVA::Tools::GetChild ; (; void * ; parent, . const char * ; childname = nullptr . ). get child node ; Definition at line 1150 of file Tools.cxx. ◆ GetContent(). const char * TMVA::Tools::GetContent ; (; void * ; node). XML helpers. ; Definition at line 1174 of file Tools.cxx. ◆ GetCorrelationMatrix(). const TMatrixD * TMVA::Tools::GetCorrelationMatrix ; (; const TMatrixD * ; covMat). turns covariance into corre",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTMVA_1_1Tools.html:14408,simpl,simple,14408,doc/master/classTMVA_1_1Tools.html,https://root.cern,https://root.cern/doc/master/classTMVA_1_1Tools.html,1,['simpl'],['simple']
Usability,"Double_t GetBinContent(Int_t binx, Int_t biny, Int_t binz) const overrideDefinition TH3.h:101; TH3::SetBinContentvoid SetBinContent(Int_t bin, Double_t content) overrideSet bin content.Definition TH3.cxx:3468; TH3::SetBinContentvoid SetBinContent(Int_t bin, Int_t, Double_t content) overrideDefinition TH3.h:131; TH3::fTsumwyzDouble_t fTsumwyzTotal Sum of weight*Y*Z.Definition TH3.h:40; TH3::TH3TH3()Default constructor.Definition TH3.cxx:74; TH3::GetBinInt_t GetBin(Int_t binx, Int_t biny, Int_t binz) const overrideSee comments in TH1::GetBin.Definition TH3.cxx:1117; TH3::FitSlicesZvirtual void FitSlicesZ(TF1 *f1=nullptr, Int_t binminx=1, Int_t binmaxx=0, Int_t binminy=1, Int_t binmaxy=0, Int_t cut=0, Option_t *option=""QNR"")Project slices along Z in case of a 3-D histogram, then fit each slice with function f1 and make a 2-...Definition TH3.cxx:978; TH3::DoProjectProfile2Dvirtual TProfile2D * DoProjectProfile2D(const char *name, const char *title, const TAxis *projX, const TAxis *projY, bool originalRange, bool useUF, bool useOF) constinternal method to project to a 2D Profile called from TH3::Project3DProfileDefinition TH3.cxx:2576; TH3::PutStatsvoid PutStats(Double_t *stats) overrideReplace current statistics with the values in array stats.Definition TH3.cxx:2889; TObjectMother of all ROOT objects.Definition TObject.h:41; TProfile2DProfile2D histograms are used to display the mean value of Z and its error for each cell in X,...Definition TProfile2D.h:27; TRandomThis is the base class for the ROOT Random number generators.Definition TRandom.h:27; bool; double; int; Interpolate#define Interpolate(a, x, b, y)Definition geom.c:179; yDouble_t y[n]Definition legend1.C:17; c1return c1Definition legend1.C:41; xDouble_t x[n]Definition legend1.C:17; nconst Int_t nDefinition legend1.C:16; h1TH1F * h1Definition legend1.C:5; f1TF1 * f1Definition legend1.C:11. histhistincTH3.h. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:32 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TH3_8h_source.html:44658,Guid,Guide,44658,doc/master/TH3_8h_source.html,https://root.cern,https://root.cern/doc/master/TH3_8h_source.html,1,['Guid'],['Guide']
Usability,Double_t TParticle::Y ; (; ); const. inline . Definition at line 143 of file TParticle.h. Member Data Documentation. ◆ fCalcMass. Double_t TParticle::fCalcMass. protected . Definition at line 37 of file TParticle.h. ◆ fDaughter. Int_t TParticle::fDaughter[2]. protected . Definition at line 34 of file TParticle.h. ◆ fE. Double_t TParticle::fE. protected . Definition at line 42 of file TParticle.h. ◆ fMother. Int_t TParticle::fMother[2]. protected . Definition at line 33 of file TParticle.h. ◆ fParticlePDG. TParticlePDG* TParticle::fParticlePDG. mutableprotected . Definition at line 52 of file TParticle.h. ◆ fPdgCode. Int_t TParticle::fPdgCode. protected . Definition at line 31 of file TParticle.h. ◆ fPolarPhi. Double_t TParticle::fPolarPhi. protected . Definition at line 50 of file TParticle.h. ◆ fPolarTheta. Double_t TParticle::fPolarTheta. protected . Definition at line 49 of file TParticle.h. ◆ fPx. Double_t TParticle::fPx. protected . Definition at line 39 of file TParticle.h. ◆ fPy. Double_t TParticle::fPy. protected . Definition at line 40 of file TParticle.h. ◆ fPz. Double_t TParticle::fPz. protected . Definition at line 41 of file TParticle.h. ◆ fStatusCode. Int_t TParticle::fStatusCode. protected . Definition at line 32 of file TParticle.h. ◆ fVt. Double_t TParticle::fVt. protected . Definition at line 47 of file TParticle.h. ◆ fVx. Double_t TParticle::fVx. protected . Definition at line 44 of file TParticle.h. ◆ fVy. Double_t TParticle::fVy. protected . Definition at line 45 of file TParticle.h. ◆ fVz. Double_t TParticle::fVz. protected . Definition at line 46 of file TParticle.h. ◆ fWeight. Float_t TParticle::fWeight. protected . Definition at line 35 of file TParticle.h. Libraries for TParticle:. [legend]; The documentation for this class was generated from the following files:; montecarlo/eg/inc/TParticle.h; montecarlo/eg/src/TParticle.cxx. TParticle. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:07 (GVA Time) using Doxygen 1.9.8   ; . ,MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/classTParticle.html:31088,Guid,Guide,31088,doc/master/classTParticle.html,https://root.cern,https://root.cern/doc/master/classTParticle.html,1,['Guid'],['Guide']
Usability,"Double_t fX2X of 2nd point.Definition TLine.h:27; TLine::fY2Double_t fY2Y of 2nd point.Definition TLine.h:28; TObjectMother of all ROOT objects.Definition TObject.h:41; TObject::TestBitR__ALWAYS_INLINE Bool_t TestBit(UInt_t f) constDefinition TObject.h:199; TObject::GetDrawOptionvirtual Option_t * GetDrawOption() constGet option used by the graphics system to draw this object.Definition TObject.cxx:428; TObject::AppendPadvirtual void AppendPad(Option_t *option="""")Append graphics object to current pad.Definition TObject.cxx:190; TObject::SetBitvoid SetBit(UInt_t f, Bool_t set)Set or unset the user status bits as specified in f.Definition TObject.cxx:786; TObject::kCanDelete@ kCanDeleteif object in a list can be deletedDefinition TObject.h:62; TStringBasic string class.Definition TString.h:139; TString::LengthSsiz_t Length() constDefinition TString.h:417; TString::ToLowervoid ToLower()Change string to lower-case.Definition TString.cxx:1182; TString::EndsWithBool_t EndsWith(const char *pat, ECaseCompare cmp=kExact) constReturn true if string ends with the specified string.Definition TString.cxx:2244; TString::Dataconst char * Data() constDefinition TString.h:376; TString::BeginsWithBool_t BeginsWith(const char *s, ECaseCompare cmp=kExact) constDefinition TString.h:623; TString::ContainsBool_t Contains(const char *pat, ECaseCompare cmp=kExact) constDefinition TString.h:632; double; int; TMath::SqrtDouble_t Sqrt(Double_t x)Returns the square root of x.Definition TMath.h:662; TMath::MinShort_t Min(Short_t a, Short_t b)Returns the smallest of a and b.Definition TMathBase.h:198; TMath::Piconstexpr Double_t Pi()Definition TMath.h:37; TMath::TanDouble_t Tan(Double_t)Returns the tangent of an angle of x radians.Definition TMath.h:600; arrowDefinition RArrowDS.hxx:17; v2@ v2Definition rootcling_impl.cxx:3702; v1@ v1Definition rootcling_impl.cxx:3701. graf2dgrafsrcTArrow.cxx. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:40:18 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/doc/master/TArrow_8cxx_source.html:22284,Guid,Guide,22284,doc/master/TArrow_8cxx_source.html,https://root.cern,https://root.cern/doc/master/TArrow_8cxx_source.html,1,['Guid'],['Guide']
Usability,"Double_t xmax, Double_t ymin, Double_t ymax); RooPlot(const char* name, const char* title, const RooAbsRealLValue& var, Double_t xmin, Double_t xmax, Int_t nBins); RooPlot(const RooAbsRealLValue& var1, const RooAbsRealLValue& var2, Double_t xmin, Double_t xmax, Double_t ymin, Double_t ymax); virtual~RooPlot(); voidTObject::AbstractMethod(const char* method) const; static Bool_taddDirectoryStatus(); voidaddObject(TObject* obj, Option_t* drawOptions = """", Bool_t invisible = kFALSE); voidaddPlotable(RooPlotable* plotable, Option_t* drawOptions = """", Bool_t invisible = kFALSE, Bool_t refreshNorm = kFALSE); voidaddTH1(TH1* hist, Option_t* drawOptions = """", Bool_t invisible = kFALSE); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBrowse(TBrowser* b); Double_tchiSquare(int nFitParam = 0) const; Double_tchiSquare(const char* pdfname, const char* histname, int nFitParam = 0) const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual Int_tdefaultPrintContents(Option_t* opt) const; static ostream&RooPrintable::defaultPrintStream(ostream* os = 0); virtual RooPrintable::StyleOptionRooPrintable::defaultPrintStyle(Option_t* opt) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = 0); Bool_tdrawAfter(const char* after, const char* target); Bool_tdrawBefore(const char* before, const char* target); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; RooPlot*emptyClone(const char* name); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const ",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html534/RooPlot.html:2604,Clear,Clear,2604,root/html534/RooPlot.html,https://root.cern,https://root.cern/root/html534/RooPlot.html,1,['Clear'],['Clear']
Usability,"Double_t xmin = 0, Double_t xmax = 0); Compute Initial values of parameters for a polynom. Int_t InsertPoint(); Insert a new point at the mouse position. Double_t Integral(Int_t first = 0, Int_t last = -1) const; Integrate the TGraph data within a given (index) range; NB: if last=-1 (default) last is set to the last point.; if (first <0) the first point (0) is taken.; : The graph segments should not intersect.; Method:; There are many ways to calculate the surface of a polygon. It all depends on what kind of data; you have to deal with. The most evident solution would be to divide the polygon in triangles and; calculate the surface of them. But this can quickly become complicated as you will have to test; every segments of every triangles and check if they are intersecting with a current polygon's; segment or if it goes outside the polygon. Many calculations that would lead to many problems...; The solution (implemented by R.Brun); Fortunately for us, there is a simple way to solve this problem, as long as the polygon's; segments don't intersect.; It takes the x coordinate of the current vertex and multiply it by the y coordinate of the next; vertex. Then it subtracts from it the result of the y coordinate of the current vertex multiplied; by the x coordinate of the next vertex. Then divide the result by 2 to get the surface/area.; Sources; http://forums.wolfram.com/mathgroup/archive/1998/Mar/msg00462.html; http://stackoverflow.com/questions/451426/how-do-i-calculate-the-surface-area-of-a-2d-polygon. Int_t IsInside(Double_t x, Double_t y) const; Return 1 if the point (x,y) is inside the polygon defined by; the graph vertices 0 otherwise. Algorithm:; The loop is executed with the end-point coordinates of a line segment; (X1,Y1)-(X2,Y2) and the Y-coordinate of a horizontal line.; The counter inter is incremented if the line (X1,Y1)-(X2,Y2) intersects; the horizontal line. In this case XINT is set to the X-coordinate of the; intersection point. If inter is an odd number",MatchSource.WIKI,root-project,root,v6-32-06,https://root.cern/root/html528/TGraph.html:34842,simpl,simple,34842,root/html528/TGraph.html,https://root.cern,https://root.cern/root/html528/TGraph.html,3,['simpl'],['simple']
